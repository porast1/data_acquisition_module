
DataModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a5a4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007fc  0801a778  0801a778  0002a778  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801af74  0801af74  00030338  2**0
                  CONTENTS
  4 .ARM          00000008  0801af74  0801af74  0002af74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801af7c  0801af7c  00030338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801af7c  0801af7c  0002af7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801af80  0801af80  0002af80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000338  20000000  0801af84  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000af54  20000338  0801b2bc  00030338  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000b28c  0801b2bc  0003b28c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030338  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030368  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031588  00000000  00000000  000303ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000843d  00000000  00000000  00061933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002998  00000000  00000000  00069d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001fb7  00000000  00000000  0006c708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030a71  00000000  00000000  0006e6bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003d242  00000000  00000000  0009f130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6dde  00000000  00000000  000dc372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000bcd4  00000000  00000000  001d3150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  001dee24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000338 	.word	0x20000338
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801a75c 	.word	0x0801a75c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000033c 	.word	0x2000033c
 800020c:	0801a75c 	.word	0x0801a75c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b970 	b.w	8000fa0 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	460d      	mov	r5, r1
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	460f      	mov	r7, r1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d14a      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4694      	mov	ip, r2
 8000cec:	d965      	bls.n	8000dba <__udivmoddi4+0xe2>
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	b143      	cbz	r3, 8000d06 <__udivmoddi4+0x2e>
 8000cf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf8:	f1c3 0220 	rsb	r2, r3, #32
 8000cfc:	409f      	lsls	r7, r3
 8000cfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000d02:	4317      	orrs	r7, r2
 8000d04:	409c      	lsls	r4, r3
 8000d06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d0a:	fa1f f58c 	uxth.w	r5, ip
 8000d0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d12:	0c22      	lsrs	r2, r4, #16
 8000d14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d1c:	fb01 f005 	mul.w	r0, r1, r5
 8000d20:	4290      	cmp	r0, r2
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x62>
 8000d24:	eb1c 0202 	adds.w	r2, ip, r2
 8000d28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d2c:	f080 811c 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d30:	4290      	cmp	r0, r2
 8000d32:	f240 8119 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d36:	3902      	subs	r1, #2
 8000d38:	4462      	add	r2, ip
 8000d3a:	1a12      	subs	r2, r2, r0
 8000d3c:	b2a4      	uxth	r4, r4
 8000d3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4a:	fb00 f505 	mul.w	r5, r0, r5
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x90>
 8000d52:	eb1c 0404 	adds.w	r4, ip, r4
 8000d56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5a:	f080 8107 	bcs.w	8000f6c <__udivmoddi4+0x294>
 8000d5e:	42a5      	cmp	r5, r4
 8000d60:	f240 8104 	bls.w	8000f6c <__udivmoddi4+0x294>
 8000d64:	4464      	add	r4, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d6c:	1b64      	subs	r4, r4, r5
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11e      	cbz	r6, 8000d7a <__udivmoddi4+0xa2>
 8000d72:	40dc      	lsrs	r4, r3
 8000d74:	2300      	movs	r3, #0
 8000d76:	e9c6 4300 	strd	r4, r3, [r6]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0xbc>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80ed 	beq.w	8000f62 <__udivmoddi4+0x28a>
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d94:	fab3 f183 	clz	r1, r3
 8000d98:	2900      	cmp	r1, #0
 8000d9a:	d149      	bne.n	8000e30 <__udivmoddi4+0x158>
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	d302      	bcc.n	8000da6 <__udivmoddi4+0xce>
 8000da0:	4282      	cmp	r2, r0
 8000da2:	f200 80f8 	bhi.w	8000f96 <__udivmoddi4+0x2be>
 8000da6:	1a84      	subs	r4, r0, r2
 8000da8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dac:	2001      	movs	r0, #1
 8000dae:	4617      	mov	r7, r2
 8000db0:	2e00      	cmp	r6, #0
 8000db2:	d0e2      	beq.n	8000d7a <__udivmoddi4+0xa2>
 8000db4:	e9c6 4700 	strd	r4, r7, [r6]
 8000db8:	e7df      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000dba:	b902      	cbnz	r2, 8000dbe <__udivmoddi4+0xe6>
 8000dbc:	deff      	udf	#255	; 0xff
 8000dbe:	fab2 f382 	clz	r3, r2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f040 8090 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dc8:	1a8a      	subs	r2, r1, r2
 8000dca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dce:	fa1f fe8c 	uxth.w	lr, ip
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000ddc:	0c22      	lsrs	r2, r4, #16
 8000dde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000de2:	fb0e f005 	mul.w	r0, lr, r5
 8000de6:	4290      	cmp	r0, r2
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dea:	eb1c 0202 	adds.w	r2, ip, r2
 8000dee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4290      	cmp	r0, r2
 8000df6:	f200 80cb 	bhi.w	8000f90 <__udivmoddi4+0x2b8>
 8000dfa:	4645      	mov	r5, r8
 8000dfc:	1a12      	subs	r2, r2, r0
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e04:	fb07 2210 	mls	r2, r7, r0, r2
 8000e08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x14e>
 8000e14:	eb1c 0404 	adds.w	r4, ip, r4
 8000e18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e1c:	d202      	bcs.n	8000e24 <__udivmoddi4+0x14c>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f200 80bb 	bhi.w	8000f9a <__udivmoddi4+0x2c2>
 8000e24:	4610      	mov	r0, r2
 8000e26:	eba4 040e 	sub.w	r4, r4, lr
 8000e2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e2e:	e79f      	b.n	8000d70 <__udivmoddi4+0x98>
 8000e30:	f1c1 0720 	rsb	r7, r1, #32
 8000e34:	408b      	lsls	r3, r1
 8000e36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e42:	fa20 f307 	lsr.w	r3, r0, r7
 8000e46:	40fd      	lsrs	r5, r7
 8000e48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e4c:	4323      	orrs	r3, r4
 8000e4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	fb09 5518 	mls	r5, r9, r8, r5
 8000e5a:	0c1c      	lsrs	r4, r3, #16
 8000e5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e60:	fb08 f50e 	mul.w	r5, r8, lr
 8000e64:	42a5      	cmp	r5, r4
 8000e66:	fa02 f201 	lsl.w	r2, r2, r1
 8000e6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e78:	f080 8088 	bcs.w	8000f8c <__udivmoddi4+0x2b4>
 8000e7c:	42a5      	cmp	r5, r4
 8000e7e:	f240 8085 	bls.w	8000f8c <__udivmoddi4+0x2b4>
 8000e82:	f1a8 0802 	sub.w	r8, r8, #2
 8000e86:	4464      	add	r4, ip
 8000e88:	1b64      	subs	r4, r4, r5
 8000e8a:	b29d      	uxth	r5, r3
 8000e8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e90:	fb09 4413 	mls	r4, r9, r3, r4
 8000e94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ea8:	d26c      	bcs.n	8000f84 <__udivmoddi4+0x2ac>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	d96a      	bls.n	8000f84 <__udivmoddi4+0x2ac>
 8000eae:	3b02      	subs	r3, #2
 8000eb0:	4464      	add	r4, ip
 8000eb2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eb6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	42ac      	cmp	r4, r5
 8000ec0:	46c8      	mov	r8, r9
 8000ec2:	46ae      	mov	lr, r5
 8000ec4:	d356      	bcc.n	8000f74 <__udivmoddi4+0x29c>
 8000ec6:	d053      	beq.n	8000f70 <__udivmoddi4+0x298>
 8000ec8:	b156      	cbz	r6, 8000ee0 <__udivmoddi4+0x208>
 8000eca:	ebb0 0208 	subs.w	r2, r0, r8
 8000ece:	eb64 040e 	sbc.w	r4, r4, lr
 8000ed2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ed6:	40ca      	lsrs	r2, r1
 8000ed8:	40cc      	lsrs	r4, r1
 8000eda:	4317      	orrs	r7, r2
 8000edc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee8:	f1c3 0120 	rsb	r1, r3, #32
 8000eec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ef0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ef4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ef8:	409d      	lsls	r5, r3
 8000efa:	432a      	orrs	r2, r5
 8000efc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f00:	fa1f fe8c 	uxth.w	lr, ip
 8000f04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f08:	fb07 1510 	mls	r5, r7, r0, r1
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f12:	fb00 f50e 	mul.w	r5, r0, lr
 8000f16:	428d      	cmp	r5, r1
 8000f18:	fa04 f403 	lsl.w	r4, r4, r3
 8000f1c:	d908      	bls.n	8000f30 <__udivmoddi4+0x258>
 8000f1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f26:	d22f      	bcs.n	8000f88 <__udivmoddi4+0x2b0>
 8000f28:	428d      	cmp	r5, r1
 8000f2a:	d92d      	bls.n	8000f88 <__udivmoddi4+0x2b0>
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	4461      	add	r1, ip
 8000f30:	1b49      	subs	r1, r1, r5
 8000f32:	b292      	uxth	r2, r2
 8000f34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f38:	fb07 1115 	mls	r1, r7, r5, r1
 8000f3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f40:	fb05 f10e 	mul.w	r1, r5, lr
 8000f44:	4291      	cmp	r1, r2
 8000f46:	d908      	bls.n	8000f5a <__udivmoddi4+0x282>
 8000f48:	eb1c 0202 	adds.w	r2, ip, r2
 8000f4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f50:	d216      	bcs.n	8000f80 <__udivmoddi4+0x2a8>
 8000f52:	4291      	cmp	r1, r2
 8000f54:	d914      	bls.n	8000f80 <__udivmoddi4+0x2a8>
 8000f56:	3d02      	subs	r5, #2
 8000f58:	4462      	add	r2, ip
 8000f5a:	1a52      	subs	r2, r2, r1
 8000f5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f60:	e738      	b.n	8000dd4 <__udivmoddi4+0xfc>
 8000f62:	4631      	mov	r1, r6
 8000f64:	4630      	mov	r0, r6
 8000f66:	e708      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000f68:	4639      	mov	r1, r7
 8000f6a:	e6e6      	b.n	8000d3a <__udivmoddi4+0x62>
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	e6fb      	b.n	8000d68 <__udivmoddi4+0x90>
 8000f70:	4548      	cmp	r0, r9
 8000f72:	d2a9      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f74:	ebb9 0802 	subs.w	r8, r9, r2
 8000f78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	e7a3      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f80:	4645      	mov	r5, r8
 8000f82:	e7ea      	b.n	8000f5a <__udivmoddi4+0x282>
 8000f84:	462b      	mov	r3, r5
 8000f86:	e794      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f88:	4640      	mov	r0, r8
 8000f8a:	e7d1      	b.n	8000f30 <__udivmoddi4+0x258>
 8000f8c:	46d0      	mov	r8, sl
 8000f8e:	e77b      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f90:	3d02      	subs	r5, #2
 8000f92:	4462      	add	r2, ip
 8000f94:	e732      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f96:	4608      	mov	r0, r1
 8000f98:	e70a      	b.n	8000db0 <__udivmoddi4+0xd8>
 8000f9a:	4464      	add	r4, ip
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	e742      	b.n	8000e26 <__udivmoddi4+0x14e>

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <adxl_write>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
void adxl_write (uint8_t reg, uint8_t value)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af02      	add	r7, sp, #8
 8000faa:	4603      	mov	r3, r0
 8000fac:	460a      	mov	r2, r1
 8000fae:	71fb      	strb	r3, [r7, #7]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = reg;
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8000fb8:	79bb      	ldrb	r3, [r7, #6]
 8000fba:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit (&hi2c1, adxl_address, data, 2, 100);
 8000fbc:	f107 020c 	add.w	r2, r7, #12
 8000fc0:	2364      	movs	r3, #100	; 0x64
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	21a6      	movs	r1, #166	; 0xa6
 8000fc8:	4803      	ldr	r0, [pc, #12]	; (8000fd8 <adxl_write+0x34>)
 8000fca:	f004 feb7 	bl	8005d3c <HAL_I2C_Master_Transmit>
}
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20005c2c 	.word	0x20005c2c

08000fdc <adxl_read_values>:

void adxl_read_values (uint8_t reg)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
	//HAL_I2C_Mem_Read (&hi2c1, adxl_address, reg, 1, (uint8_t *)data_rec, 6, 100);
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
	...

08000ff4 <adxl_read_address>:

void adxl_read_address (uint8_t reg)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af04      	add	r7, sp, #16
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read (&hi2c1, adxl_address, reg, 1, &chipid, 1, 100);
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	b29a      	uxth	r2, r3
 8001002:	2364      	movs	r3, #100	; 0x64
 8001004:	9302      	str	r3, [sp, #8]
 8001006:	2301      	movs	r3, #1
 8001008:	9301      	str	r3, [sp, #4]
 800100a:	4b05      	ldr	r3, [pc, #20]	; (8001020 <adxl_read_address+0x2c>)
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2301      	movs	r3, #1
 8001010:	21a6      	movs	r1, #166	; 0xa6
 8001012:	4804      	ldr	r0, [pc, #16]	; (8001024 <adxl_read_address+0x30>)
 8001014:	f004 ff90 	bl	8005f38 <HAL_I2C_Mem_Read>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000354 	.word	0x20000354
 8001024:	20005c2c 	.word	0x20005c2c

08001028 <adxl_init>:

void adxl_init (void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	adxl_read_address (0x00); // read the DEVID
 800102c:	2000      	movs	r0, #0
 800102e:	f7ff ffe1 	bl	8000ff4 <adxl_read_address>
	adxl_write (0x31, 0x11);  // data_format range= +- 16g
 8001032:	2111      	movs	r1, #17
 8001034:	2031      	movs	r0, #49	; 0x31
 8001036:	f7ff ffb5 	bl	8000fa4 <adxl_write>
	adxl_write (0x2d, 0x00);  // reset all bits
 800103a:	2100      	movs	r1, #0
 800103c:	202d      	movs	r0, #45	; 0x2d
 800103e:	f7ff ffb1 	bl	8000fa4 <adxl_write>
	adxl_write (0x2d, 0x08);  // power_cntl measure and wake up 8hz
 8001042:	2108      	movs	r1, #8
 8001044:	202d      	movs	r0, #45	; 0x2d
 8001046:	f7ff ffad 	bl	8000fa4 <adxl_write>

}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <setPath>:
DWORD fre_clust;
uint32_t total, free_space;

void setPath(char *dir, char *frontSensor, char *rearSensor,
		char *frontPressureSensor, char *rearPressureSensor, uint8_t path)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
 800105c:	603b      	str	r3, [r7, #0]
	sprintf(dir, "Data%d", path);
 800105e:	7f3b      	ldrb	r3, [r7, #28]
 8001060:	461a      	mov	r2, r3
 8001062:	4910      	ldr	r1, [pc, #64]	; (80010a4 <setPath+0x54>)
 8001064:	68f8      	ldr	r0, [r7, #12]
 8001066:	f017 f9b3 	bl	80183d0 <siprintf>
	sprintf(frontSensor, "Data%d/FRONT%d.txt", path, path);
 800106a:	7f3a      	ldrb	r2, [r7, #28]
 800106c:	7f3b      	ldrb	r3, [r7, #28]
 800106e:	490e      	ldr	r1, [pc, #56]	; (80010a8 <setPath+0x58>)
 8001070:	68b8      	ldr	r0, [r7, #8]
 8001072:	f017 f9ad 	bl	80183d0 <siprintf>
	sprintf(rearSensor, "Data%d/Rear%d.txt", path, path);
 8001076:	7f3a      	ldrb	r2, [r7, #28]
 8001078:	7f3b      	ldrb	r3, [r7, #28]
 800107a:	490c      	ldr	r1, [pc, #48]	; (80010ac <setPath+0x5c>)
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f017 f9a7 	bl	80183d0 <siprintf>
	sprintf(frontPressureSensor, "Data%d/F_PSI%d.txt", path, path);
 8001082:	7f3a      	ldrb	r2, [r7, #28]
 8001084:	7f3b      	ldrb	r3, [r7, #28]
 8001086:	490a      	ldr	r1, [pc, #40]	; (80010b0 <setPath+0x60>)
 8001088:	6838      	ldr	r0, [r7, #0]
 800108a:	f017 f9a1 	bl	80183d0 <siprintf>
	sprintf(rearPressureSensor, "Data%d/R_PSI%d.txt", path, path);
 800108e:	7f3a      	ldrb	r2, [r7, #28]
 8001090:	7f3b      	ldrb	r3, [r7, #28]
 8001092:	4908      	ldr	r1, [pc, #32]	; (80010b4 <setPath+0x64>)
 8001094:	69b8      	ldr	r0, [r7, #24]
 8001096:	f017 f99b 	bl	80183d0 <siprintf>
}
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	0801a778 	.word	0x0801a778
 80010a8:	0801a780 	.word	0x0801a780
 80010ac:	0801a794 	.word	0x0801a794
 80010b0:	0801a7a8 	.word	0x0801a7a8
 80010b4:	0801a7bc 	.word	0x0801a7bc

080010b8 <createNewFile>:
void createNewFile(char *dir, char *frontSensor, char *rearSensor,
		char *frontPressureSensor, char *rearPressureSensor, uint8_t *pathPtr)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	603b      	str	r3, [r7, #0]
	uint8_t path = *pathPtr;
 80010c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	75fb      	strb	r3, [r7, #23]
	Mount_SD("/");
 80010cc:	4811      	ldr	r0, [pc, #68]	; (8001114 <createNewFile+0x5c>)
 80010ce:	f000 f823 	bl	8001118 <Mount_SD>
	Format_SD(path);
 80010d2:	7dfb      	ldrb	r3, [r7, #23]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f000 f849 	bl	800116c <Format_SD>
	Create_Dir(dir);
 80010da:	68f8      	ldr	r0, [r7, #12]
 80010dc:	f000 f95e 	bl	800139c <Create_Dir>
	Create_File(frontSensor);
 80010e0:	68b8      	ldr	r0, [r7, #8]
 80010e2:	f000 f8df 	bl	80012a4 <Create_File>
	Create_File(rearSensor);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 f8dc 	bl	80012a4 <Create_File>
	Create_File(frontPressureSensor);
 80010ec:	6838      	ldr	r0, [r7, #0]
 80010ee:	f000 f8d9 	bl	80012a4 <Create_File>
	Create_File(rearPressureSensor);
 80010f2:	6a38      	ldr	r0, [r7, #32]
 80010f4:	f000 f8d6 	bl	80012a4 <Create_File>
	Unmount_SD("/");
 80010f8:	4806      	ldr	r0, [pc, #24]	; (8001114 <createNewFile+0x5c>)
 80010fa:	f000 f823 	bl	8001144 <Unmount_SD>
	(*pathPtr)++;
 80010fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	3301      	adds	r3, #1
 8001104:	b2da      	uxtb	r2, r3
 8001106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001108:	701a      	strb	r2, [r3, #0]
}
 800110a:	bf00      	nop
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	0801a7d0 	.word	0x0801a7d0

08001118 <Mount_SD>:
	HAL_UART_Transmit(UART, (uint8_t*) string, strlen(string), HAL_MAX_DELAY);
#endif
}

void Mount_SD(const TCHAR *path)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8001120:	2201      	movs	r2, #1
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	4805      	ldr	r0, [pc, #20]	; (800113c <Mount_SD+0x24>)
 8001126:	f012 f9d9 	bl	80134dc <f_mount>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	4b04      	ldr	r3, [pc, #16]	; (8001140 <Mount_SD+0x28>)
 8001130:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
		Send_Uart("ERROR!!! in mounting SD CARD...\n\n");
	else
		Send_Uart("SD CARD mounted successfully...\n");
#endif
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000358 	.word	0x20000358
 8001140:	200007d4 	.word	0x200007d4

08001144 <Unmount_SD>:

void Unmount_SD(const TCHAR *path)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 800114c:	2201      	movs	r2, #1
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	2000      	movs	r0, #0
 8001152:	f012 f9c3 	bl	80134dc <f_mount>
 8001156:	4603      	mov	r3, r0
 8001158:	461a      	mov	r2, r3
 800115a:	4b03      	ldr	r3, [pc, #12]	; (8001168 <Unmount_SD+0x24>)
 800115c:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
		Send_Uart("SD CARD UNMOUNTED successfully...\n\n\n");
	else
		Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
#endif
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200007d4 	.word	0x200007d4

0800116c <Format_SD>:
	return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD(uint8_t dirNumber)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b096      	sub	sp, #88	; 0x58
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
	DIR dir;
	FILINFO fno;
	char *path = pvPortMalloc(20 * sizeof(char));
 8001176:	2014      	movs	r0, #20
 8001178:	f015 fc36 	bl	80169e8 <pvPortMalloc>
 800117c:	6578      	str	r0, [r7, #84]	; 0x54
	sprintf(path, "/Data%d", dirNumber);
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	461a      	mov	r2, r3
 8001182:	4943      	ldr	r1, [pc, #268]	; (8001290 <Format_SD+0x124>)
 8001184:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001186:	f017 f923 	bl	80183d0 <siprintf>
	fresult = f_opendir(&dir, path);
 800118a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001190:	4618      	mov	r0, r3
 8001192:	f012 fe28 	bl	8013de6 <f_opendir>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	4b3e      	ldr	r3, [pc, #248]	; (8001294 <Format_SD+0x128>)
 800119c:	701a      	strb	r2, [r3, #0]

	if (fresult == FR_OK)
 800119e:	4b3d      	ldr	r3, [pc, #244]	; (8001294 <Format_SD+0x128>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d154      	bne.n	8001250 <Format_SD+0xe4>
	{
		while (1)
		{
			fresult = f_readdir(&dir, &fno); /* Read a directory item */
 80011a6:	f107 020c 	add.w	r2, r7, #12
 80011aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ae:	4611      	mov	r1, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f012 febc 	bl	8013f2e <f_readdir>
 80011b6:	4603      	mov	r3, r0
 80011b8:	461a      	mov	r2, r3
 80011ba:	4b36      	ldr	r3, [pc, #216]	; (8001294 <Format_SD+0x128>)
 80011bc:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK || fno.fname[0] == 0)
 80011be:	4b35      	ldr	r3, [pc, #212]	; (8001294 <Format_SD+0x128>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d13f      	bne.n	8001246 <Format_SD+0xda>
 80011c6:	7d7b      	ldrb	r3, [r7, #21]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d03c      	beq.n	8001246 <Format_SD+0xda>
				break; /* Break on error or end of dir */
			if (!(strcmp(".", fno.fname)) || !(strcmp("..", fno.fname)))
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	3309      	adds	r3, #9
 80011d2:	4619      	mov	r1, r3
 80011d4:	4830      	ldr	r0, [pc, #192]	; (8001298 <Format_SD+0x12c>)
 80011d6:	f7ff f81b 	bl	8000210 <strcmp>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d02f      	beq.n	8001240 <Format_SD+0xd4>
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	3309      	adds	r3, #9
 80011e6:	4619      	mov	r1, r3
 80011e8:	482c      	ldr	r0, [pc, #176]	; (800129c <Format_SD+0x130>)
 80011ea:	f7ff f811 	bl	8000210 <strcmp>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d025      	beq.n	8001240 <Format_SD+0xd4>
			{
				continue;
			}

			sprintf(path, "/Data%d/%s", dirNumber, fno.fname);
 80011f4:	79fa      	ldrb	r2, [r7, #7]
 80011f6:	f107 030c 	add.w	r3, r7, #12
 80011fa:	3309      	adds	r3, #9
 80011fc:	4928      	ldr	r1, [pc, #160]	; (80012a0 <Format_SD+0x134>)
 80011fe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001200:	f017 f8e6 	bl	80183d0 <siprintf>
			if (fno.fattrib & AM_DIR) /* It is a directory */
 8001204:	7d3b      	ldrb	r3, [r7, #20]
 8001206:	f003 0310 	and.w	r3, r3, #16
 800120a:	2b00      	cmp	r3, #0
 800120c:	d00c      	beq.n	8001228 <Format_SD+0xbc>
			{

				fresult = Format_SD(dirNumber);
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ffab 	bl	800116c <Format_SD>
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	4b1e      	ldr	r3, [pc, #120]	; (8001294 <Format_SD+0x128>)
 800121c:	701a      	strb	r2, [r3, #0]
				if (fresult != FR_OK)
 800121e:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <Format_SD+0x128>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0bf      	beq.n	80011a6 <Format_SD+0x3a>
					break;
 8001226:	e00e      	b.n	8001246 <Format_SD+0xda>
			}
			else
			{
				fresult = f_unlink(path);
 8001228:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800122a:	f012 ff03 	bl	8014034 <f_unlink>
 800122e:	4603      	mov	r3, r0
 8001230:	461a      	mov	r2, r3
 8001232:	4b18      	ldr	r3, [pc, #96]	; (8001294 <Format_SD+0x128>)
 8001234:	701a      	strb	r2, [r3, #0]
				if (fresult != FR_OK)
 8001236:	4b17      	ldr	r3, [pc, #92]	; (8001294 <Format_SD+0x128>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d102      	bne.n	8001244 <Format_SD+0xd8>
 800123e:	e7b2      	b.n	80011a6 <Format_SD+0x3a>
				continue;
 8001240:	bf00      	nop
			fresult = f_readdir(&dir, &fno); /* Read a directory item */
 8001242:	e7b0      	b.n	80011a6 <Format_SD+0x3a>
					break;
 8001244:	bf00      	nop
			}
		}
		f_closedir(&dir);
 8001246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124a:	4618      	mov	r0, r3
 800124c:	f012 fe44 	bl	8013ed8 <f_closedir>
	}

	if (fresult == FR_OK)
 8001250:	4b10      	ldr	r3, [pc, #64]	; (8001294 <Format_SD+0x128>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d111      	bne.n	800127c <Format_SD+0x110>
	{
		memset(path, 0, 20);
 8001258:	2214      	movs	r2, #20
 800125a:	2100      	movs	r1, #0
 800125c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800125e:	f017 f9af 	bl	80185c0 <memset>
		sprintf(path, "/Data%d", dirNumber);
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	461a      	mov	r2, r3
 8001266:	490a      	ldr	r1, [pc, #40]	; (8001290 <Format_SD+0x124>)
 8001268:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800126a:	f017 f8b1 	bl	80183d0 <siprintf>
		fresult = f_unlink(path);
 800126e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001270:	f012 fee0 	bl	8014034 <f_unlink>
 8001274:	4603      	mov	r3, r0
 8001276:	461a      	mov	r2, r3
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <Format_SD+0x128>)
 800127a:	701a      	strb	r2, [r3, #0]
	}

	vPortFree(path);
 800127c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800127e:	f015 fc7f 	bl	8016b80 <vPortFree>
	return (fresult);
 8001282:	4b04      	ldr	r3, [pc, #16]	; (8001294 <Format_SD+0x128>)
 8001284:	781b      	ldrb	r3, [r3, #0]
}
 8001286:	4618      	mov	r0, r3
 8001288:	3758      	adds	r7, #88	; 0x58
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	0801a7e8 	.word	0x0801a7e8
 8001294:	200007d4 	.word	0x200007d4
 8001298:	0801a7f0 	.word	0x0801a7f0
 800129c:	0801a7f4 	.word	0x0801a7f4
 80012a0:	0801a7f8 	.word	0x0801a7f8

080012a4 <Create_File>:
		return fresult;
	}
}

FRESULT Create_File(char *name)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	fresult = f_stat(name, &fno);
 80012ac:	4915      	ldr	r1, [pc, #84]	; (8001304 <Create_File+0x60>)
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f012 fe80 	bl	8013fb4 <f_stat>
 80012b4:	4603      	mov	r3, r0
 80012b6:	461a      	mov	r2, r3
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <Create_File+0x64>)
 80012ba:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <Create_File+0x64>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d102      	bne.n	80012ca <Create_File+0x26>
		sprintf(buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",
				name);
		Send_Uart(buf);
		vPortFree(buf);
#endif
		return fresult;
 80012c4:	4b10      	ldr	r3, [pc, #64]	; (8001308 <Create_File+0x64>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	e018      	b.n	80012fc <Create_File+0x58>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 80012ca:	220b      	movs	r2, #11
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	480f      	ldr	r0, [pc, #60]	; (800130c <Create_File+0x68>)
 80012d0:	f012 f968 	bl	80135a4 <f_open>
 80012d4:	4603      	mov	r3, r0
 80012d6:	461a      	mov	r2, r3
 80012d8:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <Create_File+0x64>)
 80012da:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80012dc:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <Create_File+0x64>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d002      	beq.n	80012ea <Create_File+0x46>
			sprintf(buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult,
					name);
			Send_Uart(buf);
			vPortFree(buf);
#endif
			return fresult;
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <Create_File+0x64>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	e008      	b.n	80012fc <Create_File+0x58>
			Send_Uart(buf);
			vPortFree(buf);
#endif
		}

		fresult = f_close(&fil);
 80012ea:	4808      	ldr	r0, [pc, #32]	; (800130c <Create_File+0x68>)
 80012ec:	f012 fd4c 	bl	8013d88 <f_close>
 80012f0:	4603      	mov	r3, r0
 80012f2:	461a      	mov	r2, r3
 80012f4:	4b04      	ldr	r3, [pc, #16]	; (8001308 <Create_File+0x64>)
 80012f6:	701a      	strb	r2, [r3, #0]
			Send_Uart(buf);
			vPortFree(buf);
#endif
		}
	}
	return fresult;
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <Create_File+0x64>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	200007bc 	.word	0x200007bc
 8001308:	200007d4 	.word	0x200007d4
 800130c:	2000058c 	.word	0x2000058c

08001310 <Update_File>:

FRESULT Update_File(char *name, char *data)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat(name, &fno);
 800131a:	491c      	ldr	r1, [pc, #112]	; (800138c <Update_File+0x7c>)
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f012 fe49 	bl	8013fb4 <f_stat>
 8001322:	4603      	mov	r3, r0
 8001324:	461a      	mov	r2, r3
 8001326:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <Update_File+0x80>)
 8001328:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800132a:	4b19      	ldr	r3, [pc, #100]	; (8001390 <Update_File+0x80>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d002      	beq.n	8001338 <Update_File+0x28>
		char *buf = pvPortMalloc(100 * sizeof(char));
		sprintf(buf, "ERROR!!! *%s* does not exists\n\n", name);
		Send_Uart(buf);
		vPortFree(buf);
#endif
		return fresult;
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <Update_File+0x80>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	e025      	b.n	8001384 <Update_File+0x74>
	}

	else
	{
		/* Create a file with read write access and open it */
		fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 8001338:	2232      	movs	r2, #50	; 0x32
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	4815      	ldr	r0, [pc, #84]	; (8001394 <Update_File+0x84>)
 800133e:	f012 f931 	bl	80135a4 <f_open>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	4b12      	ldr	r3, [pc, #72]	; (8001390 <Update_File+0x80>)
 8001348:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 800134a:	4b11      	ldr	r3, [pc, #68]	; (8001390 <Update_File+0x80>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d002      	beq.n	8001358 <Update_File+0x48>
			sprintf(buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult,
					name);
			Send_Uart(buf);
			vPortFree(buf);
#endif
			return fresult;
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <Update_File+0x80>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	e015      	b.n	8001384 <Update_File+0x74>
		}

		/* Writing text */
		fresult = f_write(&fil, data, strlen(data), &bw);
 8001358:	6838      	ldr	r0, [r7, #0]
 800135a:	f7fe ffb9 	bl	80002d0 <strlen>
 800135e:	4602      	mov	r2, r0
 8001360:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <Update_File+0x88>)
 8001362:	6839      	ldr	r1, [r7, #0]
 8001364:	480b      	ldr	r0, [pc, #44]	; (8001394 <Update_File+0x84>)
 8001366:	f012 fae2 	bl	801392e <f_write>
 800136a:	4603      	mov	r3, r0
 800136c:	461a      	mov	r2, r3
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <Update_File+0x80>)
 8001370:	701a      	strb	r2, [r3, #0]
			vPortFree(buf);
#endif
		}

		/* Close file */
		fresult = f_close(&fil);
 8001372:	4808      	ldr	r0, [pc, #32]	; (8001394 <Update_File+0x84>)
 8001374:	f012 fd08 	bl	8013d88 <f_close>
 8001378:	4603      	mov	r3, r0
 800137a:	461a      	mov	r2, r3
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <Update_File+0x80>)
 800137e:	701a      	strb	r2, [r3, #0]
			Send_Uart(buf);
			vPortFree(buf);
#endif
		}
	}
	return fresult;
 8001380:	4b03      	ldr	r3, [pc, #12]	; (8001390 <Update_File+0x80>)
 8001382:	781b      	ldrb	r3, [r3, #0]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	200007bc 	.word	0x200007bc
 8001390:	200007d4 	.word	0x200007d4
 8001394:	2000058c 	.word	0x2000058c
 8001398:	200007d8 	.word	0x200007d8

0800139c <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir(char *name)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	fresult = f_mkdir(name);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f012 fef7 	bl	8014198 <f_mkdir>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <Create_Dir+0x24>)
 80013b0:	701a      	strb	r2, [r3, #0]
				name);
		Send_Uart(buf);
		vPortFree(buf);
#endif
	}
	return fresult;
 80013b2:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <Create_Dir+0x24>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	200007d4 	.word	0x200007d4

080013c4 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013ca:	463b      	mov	r3, r7
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80013d6:	4b37      	ldr	r3, [pc, #220]	; (80014b4 <MX_ADC2_Init+0xf0>)
 80013d8:	4a37      	ldr	r2, [pc, #220]	; (80014b8 <MX_ADC2_Init+0xf4>)
 80013da:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013dc:	4b35      	ldr	r3, [pc, #212]	; (80014b4 <MX_ADC2_Init+0xf0>)
 80013de:	2200      	movs	r2, #0
 80013e0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80013e2:	4b34      	ldr	r3, [pc, #208]	; (80014b4 <MX_ADC2_Init+0xf0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80013e8:	4b32      	ldr	r3, [pc, #200]	; (80014b4 <MX_ADC2_Init+0xf0>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80013ee:	4b31      	ldr	r3, [pc, #196]	; (80014b4 <MX_ADC2_Init+0xf0>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013f4:	4b2f      	ldr	r3, [pc, #188]	; (80014b4 <MX_ADC2_Init+0xf0>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80013fc:	4b2d      	ldr	r3, [pc, #180]	; (80014b4 <MX_ADC2_Init+0xf0>)
 80013fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001402:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001404:	4b2b      	ldr	r3, [pc, #172]	; (80014b4 <MX_ADC2_Init+0xf0>)
 8001406:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800140a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800140c:	4b29      	ldr	r3, [pc, #164]	; (80014b4 <MX_ADC2_Init+0xf0>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8001412:	4b28      	ldr	r3, [pc, #160]	; (80014b4 <MX_ADC2_Init+0xf0>)
 8001414:	2204      	movs	r2, #4
 8001416:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001418:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <MX_ADC2_Init+0xf0>)
 800141a:	2201      	movs	r2, #1
 800141c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001420:	4b24      	ldr	r3, [pc, #144]	; (80014b4 <MX_ADC2_Init+0xf0>)
 8001422:	2201      	movs	r2, #1
 8001424:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001426:	4823      	ldr	r0, [pc, #140]	; (80014b4 <MX_ADC2_Init+0xf0>)
 8001428:	f003 f86c 	bl	8004504 <HAL_ADC_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8001432:	f001 fc41 	bl	8002cb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001436:	2304      	movs	r3, #4
 8001438:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800143a:	2301      	movs	r3, #1
 800143c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800143e:	2301      	movs	r3, #1
 8001440:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001442:	463b      	mov	r3, r7
 8001444:	4619      	mov	r1, r3
 8001446:	481b      	ldr	r0, [pc, #108]	; (80014b4 <MX_ADC2_Init+0xf0>)
 8001448:	f003 fa14 	bl	8004874 <HAL_ADC_ConfigChannel>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 8001452:	f001 fc31 	bl	8002cb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001456:	2301      	movs	r3, #1
 8001458:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800145a:	2302      	movs	r3, #2
 800145c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800145e:	463b      	mov	r3, r7
 8001460:	4619      	mov	r1, r3
 8001462:	4814      	ldr	r0, [pc, #80]	; (80014b4 <MX_ADC2_Init+0xf0>)
 8001464:	f003 fa06 	bl	8004874 <HAL_ADC_ConfigChannel>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_ADC2_Init+0xae>
  {
    Error_Handler();
 800146e:	f001 fc23 	bl	8002cb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001472:	230d      	movs	r3, #13
 8001474:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001476:	2303      	movs	r3, #3
 8001478:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800147a:	463b      	mov	r3, r7
 800147c:	4619      	mov	r1, r3
 800147e:	480d      	ldr	r0, [pc, #52]	; (80014b4 <MX_ADC2_Init+0xf0>)
 8001480:	f003 f9f8 	bl	8004874 <HAL_ADC_ConfigChannel>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_ADC2_Init+0xca>
  {
    Error_Handler();
 800148a:	f001 fc15 	bl	8002cb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800148e:	230e      	movs	r3, #14
 8001490:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001492:	2304      	movs	r3, #4
 8001494:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001496:	463b      	mov	r3, r7
 8001498:	4619      	mov	r1, r3
 800149a:	4806      	ldr	r0, [pc, #24]	; (80014b4 <MX_ADC2_Init+0xf0>)
 800149c:	f003 f9ea 	bl	8004874 <HAL_ADC_ConfigChannel>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_ADC2_Init+0xe6>
  {
    Error_Handler();
 80014a6:	f001 fc07 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	200007dc 	.word	0x200007dc
 80014b8:	40012100 	.word	0x40012100

080014bc <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014c2:	463b      	mov	r3, r7
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80014ce:	4b21      	ldr	r3, [pc, #132]	; (8001554 <MX_ADC3_Init+0x98>)
 80014d0:	4a21      	ldr	r2, [pc, #132]	; (8001558 <MX_ADC3_Init+0x9c>)
 80014d2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014d4:	4b1f      	ldr	r3, [pc, #124]	; (8001554 <MX_ADC3_Init+0x98>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80014da:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <MX_ADC3_Init+0x98>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 80014e0:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <MX_ADC3_Init+0x98>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80014e6:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <MX_ADC3_Init+0x98>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80014ec:	4b19      	ldr	r3, [pc, #100]	; (8001554 <MX_ADC3_Init+0x98>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014f4:	4b17      	ldr	r3, [pc, #92]	; (8001554 <MX_ADC3_Init+0x98>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014fa:	4b16      	ldr	r3, [pc, #88]	; (8001554 <MX_ADC3_Init+0x98>)
 80014fc:	4a17      	ldr	r2, [pc, #92]	; (800155c <MX_ADC3_Init+0xa0>)
 80014fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001500:	4b14      	ldr	r3, [pc, #80]	; (8001554 <MX_ADC3_Init+0x98>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001506:	4b13      	ldr	r3, [pc, #76]	; (8001554 <MX_ADC3_Init+0x98>)
 8001508:	2201      	movs	r2, #1
 800150a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800150c:	4b11      	ldr	r3, [pc, #68]	; (8001554 <MX_ADC3_Init+0x98>)
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <MX_ADC3_Init+0x98>)
 8001516:	2201      	movs	r2, #1
 8001518:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800151a:	480e      	ldr	r0, [pc, #56]	; (8001554 <MX_ADC3_Init+0x98>)
 800151c:	f002 fff2 	bl	8004504 <HAL_ADC_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8001526:	f001 fbc7 	bl	8002cb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800152a:	2300      	movs	r3, #0
 800152c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800152e:	2301      	movs	r3, #1
 8001530:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001536:	463b      	mov	r3, r7
 8001538:	4619      	mov	r1, r3
 800153a:	4806      	ldr	r0, [pc, #24]	; (8001554 <MX_ADC3_Init+0x98>)
 800153c:	f003 f99a 	bl	8004874 <HAL_ADC_ConfigChannel>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8001546:	f001 fbb7 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000824 	.word	0x20000824
 8001558:	40012200 	.word	0x40012200
 800155c:	0f000001 	.word	0x0f000001

08001560 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08c      	sub	sp, #48	; 0x30
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 031c 	add.w	r3, r7, #28
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a53      	ldr	r2, [pc, #332]	; (80016cc <HAL_ADC_MspInit+0x16c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d173      	bne.n	800166a <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	61bb      	str	r3, [r7, #24]
 8001586:	4b52      	ldr	r3, [pc, #328]	; (80016d0 <HAL_ADC_MspInit+0x170>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	4a51      	ldr	r2, [pc, #324]	; (80016d0 <HAL_ADC_MspInit+0x170>)
 800158c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001590:	6453      	str	r3, [r2, #68]	; 0x44
 8001592:	4b4f      	ldr	r3, [pc, #316]	; (80016d0 <HAL_ADC_MspInit+0x170>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800159a:	61bb      	str	r3, [r7, #24]
 800159c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	4b4b      	ldr	r3, [pc, #300]	; (80016d0 <HAL_ADC_MspInit+0x170>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a4a      	ldr	r2, [pc, #296]	; (80016d0 <HAL_ADC_MspInit+0x170>)
 80015a8:	f043 0304 	orr.w	r3, r3, #4
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b48      	ldr	r3, [pc, #288]	; (80016d0 <HAL_ADC_MspInit+0x170>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0304 	and.w	r3, r3, #4
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	4b44      	ldr	r3, [pc, #272]	; (80016d0 <HAL_ADC_MspInit+0x170>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	4a43      	ldr	r2, [pc, #268]	; (80016d0 <HAL_ADC_MspInit+0x170>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ca:	4b41      	ldr	r3, [pc, #260]	; (80016d0 <HAL_ADC_MspInit+0x170>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]
    PC3     ------> ADC2_IN13
    PA1     ------> ADC2_IN1
    PA4     ------> ADC2_IN4
    PC4     ------> ADC2_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80015d6:	2318      	movs	r3, #24
 80015d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015da:	2303      	movs	r3, #3
 80015dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e2:	f107 031c 	add.w	r3, r7, #28
 80015e6:	4619      	mov	r1, r3
 80015e8:	483a      	ldr	r0, [pc, #232]	; (80016d4 <HAL_ADC_MspInit+0x174>)
 80015ea:	f004 f8b5 	bl	8005758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 80015ee:	2312      	movs	r3, #18
 80015f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015f2:	2303      	movs	r3, #3
 80015f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fa:	f107 031c 	add.w	r3, r7, #28
 80015fe:	4619      	mov	r1, r3
 8001600:	4835      	ldr	r0, [pc, #212]	; (80016d8 <HAL_ADC_MspInit+0x178>)
 8001602:	f004 f8a9 	bl	8005758 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8001606:	4b35      	ldr	r3, [pc, #212]	; (80016dc <HAL_ADC_MspInit+0x17c>)
 8001608:	4a35      	ldr	r2, [pc, #212]	; (80016e0 <HAL_ADC_MspInit+0x180>)
 800160a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800160c:	4b33      	ldr	r3, [pc, #204]	; (80016dc <HAL_ADC_MspInit+0x17c>)
 800160e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001612:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001614:	4b31      	ldr	r3, [pc, #196]	; (80016dc <HAL_ADC_MspInit+0x17c>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800161a:	4b30      	ldr	r3, [pc, #192]	; (80016dc <HAL_ADC_MspInit+0x17c>)
 800161c:	2200      	movs	r2, #0
 800161e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001620:	4b2e      	ldr	r3, [pc, #184]	; (80016dc <HAL_ADC_MspInit+0x17c>)
 8001622:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001626:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001628:	4b2c      	ldr	r3, [pc, #176]	; (80016dc <HAL_ADC_MspInit+0x17c>)
 800162a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800162e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001630:	4b2a      	ldr	r3, [pc, #168]	; (80016dc <HAL_ADC_MspInit+0x17c>)
 8001632:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001636:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001638:	4b28      	ldr	r3, [pc, #160]	; (80016dc <HAL_ADC_MspInit+0x17c>)
 800163a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800163e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001640:	4b26      	ldr	r3, [pc, #152]	; (80016dc <HAL_ADC_MspInit+0x17c>)
 8001642:	2200      	movs	r2, #0
 8001644:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001646:	4b25      	ldr	r3, [pc, #148]	; (80016dc <HAL_ADC_MspInit+0x17c>)
 8001648:	2200      	movs	r2, #0
 800164a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800164c:	4823      	ldr	r0, [pc, #140]	; (80016dc <HAL_ADC_MspInit+0x17c>)
 800164e:	f003 fca3 	bl	8004f98 <HAL_DMA_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8001658:	f001 fb2e 	bl	8002cb8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a1f      	ldr	r2, [pc, #124]	; (80016dc <HAL_ADC_MspInit+0x17c>)
 8001660:	639a      	str	r2, [r3, #56]	; 0x38
 8001662:	4a1e      	ldr	r2, [pc, #120]	; (80016dc <HAL_ADC_MspInit+0x17c>)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001668:	e02c      	b.n	80016c4 <HAL_ADC_MspInit+0x164>
  else if(adcHandle->Instance==ADC3)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a1d      	ldr	r2, [pc, #116]	; (80016e4 <HAL_ADC_MspInit+0x184>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d127      	bne.n	80016c4 <HAL_ADC_MspInit+0x164>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <HAL_ADC_MspInit+0x170>)
 800167a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167c:	4a14      	ldr	r2, [pc, #80]	; (80016d0 <HAL_ADC_MspInit+0x170>)
 800167e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001682:	6453      	str	r3, [r2, #68]	; 0x44
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_ADC_MspInit+0x170>)
 8001686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001690:	2300      	movs	r3, #0
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <HAL_ADC_MspInit+0x170>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	4a0d      	ldr	r2, [pc, #52]	; (80016d0 <HAL_ADC_MspInit+0x170>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	6313      	str	r3, [r2, #48]	; 0x30
 80016a0:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <HAL_ADC_MspInit+0x170>)
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016ac:	2301      	movs	r3, #1
 80016ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016b0:	2303      	movs	r3, #3
 80016b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b8:	f107 031c 	add.w	r3, r7, #28
 80016bc:	4619      	mov	r1, r3
 80016be:	4806      	ldr	r0, [pc, #24]	; (80016d8 <HAL_ADC_MspInit+0x178>)
 80016c0:	f004 f84a 	bl	8005758 <HAL_GPIO_Init>
}
 80016c4:	bf00      	nop
 80016c6:	3730      	adds	r7, #48	; 0x30
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40012100 	.word	0x40012100
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40020800 	.word	0x40020800
 80016d8:	40020000 	.word	0x40020000
 80016dc:	2000086c 	.word	0x2000086c
 80016e0:	40026440 	.word	0x40026440
 80016e4:	40012200 	.word	0x40012200

080016e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	607b      	str	r3, [r7, #4]
 80016f2:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <MX_DMA_Init+0x3c>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a0b      	ldr	r2, [pc, #44]	; (8001724 <MX_DMA_Init+0x3c>)
 80016f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <MX_DMA_Init+0x3c>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	2105      	movs	r1, #5
 800170e:	203a      	movs	r0, #58	; 0x3a
 8001710:	f003 fc18 	bl	8004f44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001714:	203a      	movs	r0, #58	; 0x3a
 8001716:	f003 fc31 	bl	8004f7c <HAL_NVIC_EnableIRQ>

}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800

08001728 <SELECT>:
static uint8_t CardType; /* SD type 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0; /* Power condition Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800172c:	2200      	movs	r2, #0
 800172e:	2101      	movs	r1, #1
 8001730:	4802      	ldr	r0, [pc, #8]	; (800173c <SELECT+0x14>)
 8001732:	f004 f9a5 	bl	8005a80 <HAL_GPIO_WritePin>
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40020400 	.word	0x40020400

08001740 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001744:	2201      	movs	r2, #1
 8001746:	2101      	movs	r1, #1
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <DESELECT+0x14>)
 800174a:	f004 f999 	bl	8005a80 <HAL_GPIO_WritePin>
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40020400 	.word	0x40020400

08001758 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY)
 8001762:	bf00      	nop
 8001764:	4808      	ldr	r0, [pc, #32]	; (8001788 <SPI_TxByte+0x30>)
 8001766:	f009 fa6d 	bl	800ac44 <HAL_SPI_GetState>
 800176a:	4603      	mov	r3, r0
 800176c:	2b01      	cmp	r3, #1
 800176e:	d1f9      	bne.n	8001764 <SPI_TxByte+0xc>
		;
	HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 8001770:	1df9      	adds	r1, r7, #7
 8001772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001776:	2201      	movs	r2, #1
 8001778:	4803      	ldr	r0, [pc, #12]	; (8001788 <SPI_TxByte+0x30>)
 800177a:	f008 ff85 	bl	800a688 <HAL_SPI_Transmit>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20005d70 	.word	0x20005d70

0800178c <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8001792:	23ff      	movs	r3, #255	; 0xff
 8001794:	71fb      	strb	r3, [r7, #7]
	data = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	71bb      	strb	r3, [r7, #6]

	while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY))
 800179a:	bf00      	nop
 800179c:	4809      	ldr	r0, [pc, #36]	; (80017c4 <SPI_RxByte+0x38>)
 800179e:	f009 fa51 	bl	800ac44 <HAL_SPI_GetState>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d1f9      	bne.n	800179c <SPI_RxByte+0x10>
		;
	HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 80017a8:	1dba      	adds	r2, r7, #6
 80017aa:	1df9      	adds	r1, r7, #7
 80017ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	2301      	movs	r3, #1
 80017b4:	4803      	ldr	r0, [pc, #12]	; (80017c4 <SPI_RxByte+0x38>)
 80017b6:	f009 f8a3 	bl	800a900 <HAL_SPI_TransmitReceive>

	return data;
 80017ba:	79bb      	ldrb	r3, [r7, #6]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20005d70 	.word	0x20005d70

080017c8 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80017d0:	f7ff ffdc 	bl	800178c <SPI_RxByte>
 80017d4:	4603      	mov	r3, r0
 80017d6:	461a      	mov	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	701a      	strb	r2, [r3, #0]
}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
	uint8_t res;

	/* 500ms Counter preparation*/
	Timer2 = 50;
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <SD_ReadyWait+0x34>)
 80017ec:	2232      	movs	r2, #50	; 0x32
 80017ee:	701a      	strb	r2, [r3, #0]

	SPI_RxByte();
 80017f0:	f7ff ffcc 	bl	800178c <SPI_RxByte>

	do
	{
		/* 0xFF SPI communication until a value is received */
		res = SPI_RxByte();
 80017f4:	f7ff ffca 	bl	800178c <SPI_RxByte>
 80017f8:	4603      	mov	r3, r0
 80017fa:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	2bff      	cmp	r3, #255	; 0xff
 8001800:	d004      	beq.n	800180c <SD_ReadyWait+0x28>
 8001802:	4b05      	ldr	r3, [pc, #20]	; (8001818 <SD_ReadyWait+0x34>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1f3      	bne.n	80017f4 <SD_ReadyWait+0x10>

	return res;
 800180c:	79fb      	ldrb	r3, [r7, #7]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20005e12 	.word	0x20005e12

0800181c <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
	uint8_t cmd_arg[6];
	uint32_t Count = 0x1FFF;
 8001822:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001826:	617b      	str	r3, [r7, #20]

	DESELECT();
 8001828:	f7ff ff8a 	bl	8001740 <DESELECT>

	for (int i = 0; i < 10; i++)
 800182c:	2300      	movs	r3, #0
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	e005      	b.n	800183e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001832:	20ff      	movs	r0, #255	; 0xff
 8001834:	f7ff ff90 	bl	8001758 <SPI_TxByte>
	for (int i = 0; i < 10; i++)
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	3301      	adds	r3, #1
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	2b09      	cmp	r3, #9
 8001842:	ddf6      	ble.n	8001832 <SD_PowerOn+0x16>
	}

	/* SPI Chips Select */
	SELECT();
 8001844:	f7ff ff70 	bl	8001728 <SELECT>

	/*  GO_IDLE_STATE State transitions*/
	cmd_arg[0] = (CMD0 | 0x40);
 8001848:	2340      	movs	r3, #64	; 0x40
 800184a:	713b      	strb	r3, [r7, #4]
	cmd_arg[1] = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	717b      	strb	r3, [r7, #5]
	cmd_arg[2] = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	71bb      	strb	r3, [r7, #6]
	cmd_arg[3] = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	71fb      	strb	r3, [r7, #7]
	cmd_arg[4] = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	723b      	strb	r3, [r7, #8]
	cmd_arg[5] = 0x95;
 800185c:	2395      	movs	r3, #149	; 0x95
 800185e:	727b      	strb	r3, [r7, #9]

	/* Command transmission*/
	for (int i = 0; i < 6; i++)
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	e009      	b.n	800187a <SD_PowerOn+0x5e>
	{
		SPI_TxByte(cmd_arg[i]);
 8001866:	1d3a      	adds	r2, r7, #4
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4413      	add	r3, r2
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff ff72 	bl	8001758 <SPI_TxByte>
	for (int i = 0; i < 6; i++)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	3301      	adds	r3, #1
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2b05      	cmp	r3, #5
 800187e:	ddf2      	ble.n	8001866 <SD_PowerOn+0x4a>
	}

	/* Answer waiting*/
	while ((SPI_RxByte() != 0x01) && Count)
 8001880:	e002      	b.n	8001888 <SD_PowerOn+0x6c>
	{
		Count--;
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	3b01      	subs	r3, #1
 8001886:	617b      	str	r3, [r7, #20]
	while ((SPI_RxByte() != 0x01) && Count)
 8001888:	f7ff ff80 	bl	800178c <SPI_RxByte>
 800188c:	4603      	mov	r3, r0
 800188e:	2b01      	cmp	r3, #1
 8001890:	d002      	beq.n	8001898 <SD_PowerOn+0x7c>
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1f4      	bne.n	8001882 <SD_PowerOn+0x66>
	}

	DESELECT();
 8001898:	f7ff ff52 	bl	8001740 <DESELECT>
	SPI_TxByte(0XFF);
 800189c:	20ff      	movs	r0, #255	; 0xff
 800189e:	f7ff ff5b 	bl	8001758 <SPI_TxByte>

	PowerFlag = 1;
 80018a2:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <SD_PowerOn+0x94>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	701a      	strb	r2, [r3, #0]
}
 80018a8:	bf00      	nop
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	200008cd 	.word	0x200008cd

080018b4 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80018b8:	4b03      	ldr	r3, [pc, #12]	; (80018c8 <SD_PowerOff+0x14>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	701a      	strb	r2, [r3, #0]
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	200008cd 	.word	0x200008cd

080018cc <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
	/*  0=off, 1=on */
	return PowerFlag;
 80018d0:	4b03      	ldr	r3, [pc, #12]	; (80018e0 <SD_CheckPower+0x14>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	200008cd 	.word	0x200008cd

080018e4 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* 100ms 타이머 */
	Timer1 = 10;
 80018ee:	4b17      	ldr	r3, [pc, #92]	; (800194c <SD_RxDataBlock+0x68>)
 80018f0:	220a      	movs	r2, #10
 80018f2:	701a      	strb	r2, [r3, #0]

	/* 응답 대기 */
	do
	{
		token = SPI_RxByte();
 80018f4:	f7ff ff4a 	bl	800178c <SPI_RxByte>
 80018f8:	4603      	mov	r3, r0
 80018fa:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
 80018fe:	2bff      	cmp	r3, #255	; 0xff
 8001900:	d104      	bne.n	800190c <SD_RxDataBlock+0x28>
 8001902:	4b12      	ldr	r3, [pc, #72]	; (800194c <SD_RxDataBlock+0x68>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1f3      	bne.n	80018f4 <SD_RxDataBlock+0x10>

	/* 0xFE 이외 Token 수신 시 에러 처리 */
	if (token != 0xFE)
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	2bfe      	cmp	r3, #254	; 0xfe
 8001910:	d001      	beq.n	8001916 <SD_RxDataBlock+0x32>
		return FALSE;
 8001912:	2300      	movs	r3, #0
 8001914:	e016      	b.n	8001944 <SD_RxDataBlock+0x60>

	/* 버퍼에 데이터 수신 */
	do
	{
		SPI_RxBytePtr(buff++);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	1c5a      	adds	r2, r3, #1
 800191a:	607a      	str	r2, [r7, #4]
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff ff53 	bl	80017c8 <SPI_RxBytePtr>
		SPI_RxBytePtr(buff++);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	1c5a      	adds	r2, r3, #1
 8001926:	607a      	str	r2, [r7, #4]
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ff4d 	bl	80017c8 <SPI_RxBytePtr>
	} while (btr -= 2);
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	3b02      	subs	r3, #2
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1ed      	bne.n	8001916 <SD_RxDataBlock+0x32>

	SPI_RxByte(); /* CRC 무시 */
 800193a:	f7ff ff27 	bl	800178c <SPI_RxByte>
	SPI_RxByte();
 800193e:	f7ff ff25 	bl	800178c <SPI_RxByte>

	return TRUE;
 8001942:	2301      	movs	r3, #1
}
 8001944:	4618      	mov	r0, r3
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20005e11 	.word	0x20005e11

08001950 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp, wc;
	uint8_t i = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	737b      	strb	r3, [r7, #13]

	/* SD카드 준비 대기 */
	if (SD_ReadyWait() != 0xFF)
 8001960:	f7ff ff40 	bl	80017e4 <SD_ReadyWait>
 8001964:	4603      	mov	r3, r0
 8001966:	2bff      	cmp	r3, #255	; 0xff
 8001968:	d001      	beq.n	800196e <SD_TxDataBlock+0x1e>
		return FALSE;
 800196a:	2300      	movs	r3, #0
 800196c:	e040      	b.n	80019f0 <SD_TxDataBlock+0xa0>

	/* 토큰 전송 */
	SPI_TxByte(token);
 800196e:	78fb      	ldrb	r3, [r7, #3]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fef1 	bl	8001758 <SPI_TxByte>

	/* 데이터 토큰인 경우 */
	if (token != 0xFD)
 8001976:	78fb      	ldrb	r3, [r7, #3]
 8001978:	2bfd      	cmp	r3, #253	; 0xfd
 800197a:	d031      	beq.n	80019e0 <SD_TxDataBlock+0x90>
	{
		wc = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	73bb      	strb	r3, [r7, #14]

		/* 512 바이트 데이터 전송 */
		do
		{
			SPI_TxByte(*buff++);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	1c5a      	adds	r2, r3, #1
 8001984:	607a      	str	r2, [r7, #4]
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fee5 	bl	8001758 <SPI_TxByte>
			SPI_TxByte(*buff++);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	1c5a      	adds	r2, r3, #1
 8001992:	607a      	str	r2, [r7, #4]
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fede 	bl	8001758 <SPI_TxByte>
		} while (--wc);
 800199c:	7bbb      	ldrb	r3, [r7, #14]
 800199e:	3b01      	subs	r3, #1
 80019a0:	73bb      	strb	r3, [r7, #14]
 80019a2:	7bbb      	ldrb	r3, [r7, #14]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1eb      	bne.n	8001980 <SD_TxDataBlock+0x30>

		SPI_RxByte(); /* CRC 무시 */
 80019a8:	f7ff fef0 	bl	800178c <SPI_RxByte>
		SPI_RxByte();
 80019ac:	f7ff feee 	bl	800178c <SPI_RxByte>

		/* 데이트 응답 수신 */
		while (i <= 64)
 80019b0:	e00b      	b.n	80019ca <SD_TxDataBlock+0x7a>
		{
			resp = SPI_RxByte();
 80019b2:	f7ff feeb 	bl	800178c <SPI_RxByte>
 80019b6:	4603      	mov	r3, r0
 80019b8:	73fb      	strb	r3, [r7, #15]

			/* 에러 응답 처리 */
			if ((resp & 0x1F) == 0x05)
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
 80019bc:	f003 031f 	and.w	r3, r3, #31
 80019c0:	2b05      	cmp	r3, #5
 80019c2:	d006      	beq.n	80019d2 <SD_TxDataBlock+0x82>
				break;

			i++;
 80019c4:	7b7b      	ldrb	r3, [r7, #13]
 80019c6:	3301      	adds	r3, #1
 80019c8:	737b      	strb	r3, [r7, #13]
		while (i <= 64)
 80019ca:	7b7b      	ldrb	r3, [r7, #13]
 80019cc:	2b40      	cmp	r3, #64	; 0x40
 80019ce:	d9f0      	bls.n	80019b2 <SD_TxDataBlock+0x62>
 80019d0:	e000      	b.n	80019d4 <SD_TxDataBlock+0x84>
				break;
 80019d2:	bf00      	nop
		}

		/* SPI 수신 버퍼 Clear */
		while (SPI_RxByte() == 0)
 80019d4:	bf00      	nop
 80019d6:	f7ff fed9 	bl	800178c <SPI_RxByte>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0fa      	beq.n	80019d6 <SD_TxDataBlock+0x86>
			;
	}

	if ((resp & 0x1F) == 0x05)
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
 80019e2:	f003 031f 	and.w	r3, r3, #31
 80019e6:	2b05      	cmp	r3, #5
 80019e8:	d101      	bne.n	80019ee <SD_TxDataBlock+0x9e>
		return TRUE;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e000      	b.n	80019f0 <SD_TxDataBlock+0xa0>
	else
		return FALSE;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	6039      	str	r1, [r7, #0]
 8001a02:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* SD카드 대기 */
	if (SD_ReadyWait() != 0xFF)
 8001a04:	f7ff feee 	bl	80017e4 <SD_ReadyWait>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2bff      	cmp	r3, #255	; 0xff
 8001a0c:	d001      	beq.n	8001a12 <SD_SendCmd+0x1a>
		return 0xFF;
 8001a0e:	23ff      	movs	r3, #255	; 0xff
 8001a10:	e040      	b.n	8001a94 <SD_SendCmd+0x9c>

	/* 명령 패킷 전송 */
	SPI_TxByte(cmd); /* Command */
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff fe9f 	bl	8001758 <SPI_TxByte>
	SPI_TxByte((BYTE) (arg >> 24)); /* Argument[31..24] */
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	0e1b      	lsrs	r3, r3, #24
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fe99 	bl	8001758 <SPI_TxByte>
	SPI_TxByte((BYTE) (arg >> 16)); /* Argument[23..16] */
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	0c1b      	lsrs	r3, r3, #16
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fe93 	bl	8001758 <SPI_TxByte>
	SPI_TxByte((BYTE) (arg >> 8)); /* Argument[15..8] */
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	0a1b      	lsrs	r3, r3, #8
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff fe8d 	bl	8001758 <SPI_TxByte>
	SPI_TxByte((BYTE) arg); /* Argument[7..0] */
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff fe88 	bl	8001758 <SPI_TxByte>

	/* 명령별 CRC 준비 */
	crc = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	2b40      	cmp	r3, #64	; 0x40
 8001a50:	d101      	bne.n	8001a56 <SD_SendCmd+0x5e>
		crc = 0x95; /* CRC for CMD0(0) */
 8001a52:	2395      	movs	r3, #149	; 0x95
 8001a54:	73fb      	strb	r3, [r7, #15]

	if (cmd == CMD8)
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	2b48      	cmp	r3, #72	; 0x48
 8001a5a:	d101      	bne.n	8001a60 <SD_SendCmd+0x68>
		crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001a5c:	2387      	movs	r3, #135	; 0x87
 8001a5e:	73fb      	strb	r3, [r7, #15]

	/* CRC 전송 */
	SPI_TxByte(crc);
 8001a60:	7bfb      	ldrb	r3, [r7, #15]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff fe78 	bl	8001758 <SPI_TxByte>

	/* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
	if (cmd == CMD12)
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	2b4c      	cmp	r3, #76	; 0x4c
 8001a6c:	d101      	bne.n	8001a72 <SD_SendCmd+0x7a>
		SPI_RxByte();
 8001a6e:	f7ff fe8d 	bl	800178c <SPI_RxByte>

	/* 10회 내에 정상 데이터를 수신한다. */
	uint8_t n = 10;
 8001a72:	230a      	movs	r3, #10
 8001a74:	73bb      	strb	r3, [r7, #14]
	do
	{
		res = SPI_RxByte();
 8001a76:	f7ff fe89 	bl	800178c <SPI_RxByte>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001a7e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	da05      	bge.n	8001a92 <SD_SendCmd+0x9a>
 8001a86:	7bbb      	ldrb	r3, [r7, #14]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	73bb      	strb	r3, [r7, #14]
 8001a8c:	7bbb      	ldrb	r3, [r7, #14]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f1      	bne.n	8001a76 <SD_SendCmd+0x7e>

	return res;
 8001a92:	7b7b      	ldrb	r3, [r7, #13]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <SD_disk_initialize>:
 user_diskio.c 파일에서 사용된다.
 -----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001a9c:	b590      	push	{r4, r7, lr}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* 한종류의 드라이브만 지원 */
	if (drv)
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <SD_disk_initialize+0x14>
		return STA_NOINIT;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0d5      	b.n	8001c5c <SD_disk_initialize+0x1c0>

	/* SD카드 미삽입 */
	if (Stat & STA_NODISK)
 8001ab0:	4b6c      	ldr	r3, [pc, #432]	; (8001c64 <SD_disk_initialize+0x1c8>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <SD_disk_initialize+0x2a>
		return Stat;
 8001abe:	4b69      	ldr	r3, [pc, #420]	; (8001c64 <SD_disk_initialize+0x1c8>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	e0ca      	b.n	8001c5c <SD_disk_initialize+0x1c0>

	/* SD카드 Power On */
	SD_PowerOn();
 8001ac6:	f7ff fea9 	bl	800181c <SD_PowerOn>

	/* SPI 통신을 위해 Chip Select */
	SELECT();
 8001aca:	f7ff fe2d 	bl	8001728 <SELECT>

	/* SD카드 타입변수 초기화 */
	type = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	73bb      	strb	r3, [r7, #14]

	/* Idle 상태 진입 */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	2040      	movs	r0, #64	; 0x40
 8001ad6:	f7ff ff8f 	bl	80019f8 <SD_SendCmd>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	f040 80a5 	bne.w	8001c2c <SD_disk_initialize+0x190>
	{
		/* 타이머 1초 설정 */
		Timer1 = 100;
 8001ae2:	4b61      	ldr	r3, [pc, #388]	; (8001c68 <SD_disk_initialize+0x1cc>)
 8001ae4:	2264      	movs	r2, #100	; 0x64
 8001ae6:	701a      	strb	r2, [r3, #0]

		/* SD 인터페이스 동작 조건 확인 */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001ae8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001aec:	2048      	movs	r0, #72	; 0x48
 8001aee:	f7ff ff83 	bl	80019f8 <SD_SendCmd>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d158      	bne.n	8001baa <SD_disk_initialize+0x10e>
		{
			/* SDC Ver2+ */
			for (n = 0; n < 4; n++)
 8001af8:	2300      	movs	r3, #0
 8001afa:	73fb      	strb	r3, [r7, #15]
 8001afc:	e00c      	b.n	8001b18 <SD_disk_initialize+0x7c>
			{
				ocr[n] = SPI_RxByte();
 8001afe:	7bfc      	ldrb	r4, [r7, #15]
 8001b00:	f7ff fe44 	bl	800178c <SPI_RxByte>
 8001b04:	4603      	mov	r3, r0
 8001b06:	461a      	mov	r2, r3
 8001b08:	f104 0310 	add.w	r3, r4, #16
 8001b0c:	443b      	add	r3, r7
 8001b0e:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
 8001b14:	3301      	adds	r3, #1
 8001b16:	73fb      	strb	r3, [r7, #15]
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d9ef      	bls.n	8001afe <SD_disk_initialize+0x62>
			}

			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001b1e:	7abb      	ldrb	r3, [r7, #10]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	f040 8083 	bne.w	8001c2c <SD_disk_initialize+0x190>
 8001b26:	7afb      	ldrb	r3, [r7, #11]
 8001b28:	2baa      	cmp	r3, #170	; 0xaa
 8001b2a:	d17f      	bne.n	8001c2c <SD_disk_initialize+0x190>
			{
				/* 2.7-3.6V 전압범위 동작 */
				do
				{
					if (SD_SendCmd(CMD55, 0) <= 1
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	2077      	movs	r0, #119	; 0x77
 8001b30:	f7ff ff62 	bl	80019f8 <SD_SendCmd>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d807      	bhi.n	8001b4a <SD_disk_initialize+0xae>
							&& SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001b3a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001b3e:	2069      	movs	r0, #105	; 0x69
 8001b40:	f7ff ff5a 	bl	80019f8 <SD_SendCmd>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d005      	beq.n	8001b56 <SD_disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 8001b4a:	4b47      	ldr	r3, [pc, #284]	; (8001c68 <SD_disk_initialize+0x1cc>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1eb      	bne.n	8001b2c <SD_disk_initialize+0x90>
 8001b54:	e000      	b.n	8001b58 <SD_disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 8001b56:	bf00      	nop

				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001b58:	4b43      	ldr	r3, [pc, #268]	; (8001c68 <SD_disk_initialize+0x1cc>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d064      	beq.n	8001c2c <SD_disk_initialize+0x190>
 8001b62:	2100      	movs	r1, #0
 8001b64:	207a      	movs	r0, #122	; 0x7a
 8001b66:	f7ff ff47 	bl	80019f8 <SD_SendCmd>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d15d      	bne.n	8001c2c <SD_disk_initialize+0x190>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001b70:	2300      	movs	r3, #0
 8001b72:	73fb      	strb	r3, [r7, #15]
 8001b74:	e00c      	b.n	8001b90 <SD_disk_initialize+0xf4>
					{
						ocr[n] = SPI_RxByte();
 8001b76:	7bfc      	ldrb	r4, [r7, #15]
 8001b78:	f7ff fe08 	bl	800178c <SPI_RxByte>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	461a      	mov	r2, r3
 8001b80:	f104 0310 	add.w	r3, r4, #16
 8001b84:	443b      	add	r3, r7
 8001b86:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	73fb      	strb	r3, [r7, #15]
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	d9ef      	bls.n	8001b76 <SD_disk_initialize+0xda>
					}

					type = (ocr[0] & 0x40) ? 6 : 2;
 8001b96:	7a3b      	ldrb	r3, [r7, #8]
 8001b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <SD_disk_initialize+0x108>
 8001ba0:	2306      	movs	r3, #6
 8001ba2:	e000      	b.n	8001ba6 <SD_disk_initialize+0x10a>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	73bb      	strb	r3, [r7, #14]
 8001ba8:	e040      	b.n	8001c2c <SD_disk_initialize+0x190>
			}
		}
		else
		{
			/* SDC Ver1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ?
 8001baa:	2100      	movs	r1, #0
 8001bac:	2077      	movs	r0, #119	; 0x77
 8001bae:	f7ff ff23 	bl	80019f8 <SD_SendCmd>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d808      	bhi.n	8001bca <SD_disk_initialize+0x12e>
 8001bb8:	2100      	movs	r1, #0
 8001bba:	2069      	movs	r0, #105	; 0x69
 8001bbc:	f7ff ff1c 	bl	80019f8 <SD_SendCmd>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d801      	bhi.n	8001bca <SD_disk_initialize+0x12e>
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	e000      	b.n	8001bcc <SD_disk_initialize+0x130>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	73bb      	strb	r3, [r7, #14]
					2 : 1; /* SDC : MMC */

			do
			{
				if (type == 2)
 8001bce:	7bbb      	ldrb	r3, [r7, #14]
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d10e      	bne.n	8001bf2 <SD_disk_initialize+0x156>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	2077      	movs	r0, #119	; 0x77
 8001bd8:	f7ff ff0e 	bl	80019f8 <SD_SendCmd>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d80e      	bhi.n	8001c00 <SD_disk_initialize+0x164>
 8001be2:	2100      	movs	r1, #0
 8001be4:	2069      	movs	r0, #105	; 0x69
 8001be6:	f7ff ff07 	bl	80019f8 <SD_SendCmd>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d107      	bne.n	8001c00 <SD_disk_initialize+0x164>
						break; /* ACMD41 */
 8001bf0:	e00d      	b.n	8001c0e <SD_disk_initialize+0x172>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0)
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	2041      	movs	r0, #65	; 0x41
 8001bf6:	f7ff feff 	bl	80019f8 <SD_SendCmd>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d005      	beq.n	8001c0c <SD_disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 8001c00:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <SD_disk_initialize+0x1cc>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1e1      	bne.n	8001bce <SD_disk_initialize+0x132>
 8001c0a:	e000      	b.n	8001c0e <SD_disk_initialize+0x172>
						break; /* CMD1 */
 8001c0c:	bf00      	nop

			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001c0e:	4b16      	ldr	r3, [pc, #88]	; (8001c68 <SD_disk_initialize+0x1cc>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d007      	beq.n	8001c28 <SD_disk_initialize+0x18c>
 8001c18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c1c:	2050      	movs	r0, #80	; 0x50
 8001c1e:	f7ff feeb 	bl	80019f8 <SD_SendCmd>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <SD_disk_initialize+0x190>
			{
				/* 블럭 길이 선택 */
				type = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	73bb      	strb	r3, [r7, #14]
			}
		}
	}

	CardType = type;
 8001c2c:	4a0f      	ldr	r2, [pc, #60]	; (8001c6c <SD_disk_initialize+0x1d0>)
 8001c2e:	7bbb      	ldrb	r3, [r7, #14]
 8001c30:	7013      	strb	r3, [r2, #0]

	DESELECT();
 8001c32:	f7ff fd85 	bl	8001740 <DESELECT>

	SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001c36:	f7ff fda9 	bl	800178c <SPI_RxByte>

	if (type)
 8001c3a:	7bbb      	ldrb	r3, [r7, #14]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d008      	beq.n	8001c52 <SD_disk_initialize+0x1b6>
	{
		/* Clear STA_NOINIT */
		Stat &= ~STA_NOINIT;
 8001c40:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <SD_disk_initialize+0x1c8>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	f023 0301 	bic.w	r3, r3, #1
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <SD_disk_initialize+0x1c8>)
 8001c4e:	701a      	strb	r2, [r3, #0]
 8001c50:	e001      	b.n	8001c56 <SD_disk_initialize+0x1ba>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001c52:	f7ff fe2f 	bl	80018b4 <SD_PowerOff>
	}

	return Stat;
 8001c56:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <SD_disk_initialize+0x1c8>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	b2db      	uxtb	r3, r3
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd90      	pop	{r4, r7, pc}
 8001c64:	20000000 	.word	0x20000000
 8001c68:	20005e11 	.word	0x20005e11
 8001c6c:	200008cc 	.word	0x200008cc

08001c70 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]
	if (drv)
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <SD_disk_status+0x14>
		return STA_NOINIT;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e002      	b.n	8001c8a <SD_disk_status+0x1a>

	return Stat;
 8001c84:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <SD_disk_status+0x28>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	b2db      	uxtb	r3, r3
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	20000000 	.word	0x20000000

08001c9c <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	607a      	str	r2, [r7, #4]
 8001ca6:	603b      	str	r3, [r7, #0]
 8001ca8:	4603      	mov	r3, r0
 8001caa:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d102      	bne.n	8001cb8 <SD_disk_read+0x1c>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <SD_disk_read+0x20>
		return RES_PARERR;
 8001cb8:	2304      	movs	r3, #4
 8001cba:	e051      	b.n	8001d60 <SD_disk_read+0xc4>

	if (Stat & STA_NOINIT)
 8001cbc:	4b2a      	ldr	r3, [pc, #168]	; (8001d68 <SD_disk_read+0xcc>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <SD_disk_read+0x32>
		return RES_NOTRDY;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e048      	b.n	8001d60 <SD_disk_read+0xc4>

	if (!(CardType & 4))
 8001cce:	4b27      	ldr	r3, [pc, #156]	; (8001d6c <SD_disk_read+0xd0>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	f003 0304 	and.w	r3, r3, #4
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d102      	bne.n	8001ce0 <SD_disk_read+0x44>
		sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	025b      	lsls	r3, r3, #9
 8001cde:	607b      	str	r3, [r7, #4]

	SELECT();
 8001ce0:	f7ff fd22 	bl	8001728 <SELECT>

	if (count == 1)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d111      	bne.n	8001d0e <SD_disk_read+0x72>
	{
		/* 싱글 블록 읽기 */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	2051      	movs	r0, #81	; 0x51
 8001cee:	f7ff fe83 	bl	80019f8 <SD_SendCmd>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d129      	bne.n	8001d4c <SD_disk_read+0xb0>
 8001cf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cfc:	68b8      	ldr	r0, [r7, #8]
 8001cfe:	f7ff fdf1 	bl	80018e4 <SD_RxDataBlock>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d021      	beq.n	8001d4c <SD_disk_read+0xb0>
			count = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	603b      	str	r3, [r7, #0]
 8001d0c:	e01e      	b.n	8001d4c <SD_disk_read+0xb0>
	}
	else
	{
		/* 다중 블록 읽기 */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	2052      	movs	r0, #82	; 0x52
 8001d12:	f7ff fe71 	bl	80019f8 <SD_SendCmd>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d117      	bne.n	8001d4c <SD_disk_read+0xb0>
		{
			do
			{
				if (!SD_RxDataBlock(buff, 512))
 8001d1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d20:	68b8      	ldr	r0, [r7, #8]
 8001d22:	f7ff fddf 	bl	80018e4 <SD_RxDataBlock>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00a      	beq.n	8001d42 <SD_disk_read+0xa6>
					break;

				buff += 512;
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d32:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	603b      	str	r3, [r7, #0]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1ed      	bne.n	8001d1c <SD_disk_read+0x80>
 8001d40:	e000      	b.n	8001d44 <SD_disk_read+0xa8>
					break;
 8001d42:	bf00      	nop

			/* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
			SD_SendCmd(CMD12, 0);
 8001d44:	2100      	movs	r1, #0
 8001d46:	204c      	movs	r0, #76	; 0x4c
 8001d48:	f7ff fe56 	bl	80019f8 <SD_SendCmd>
		}
	}

	DESELECT();
 8001d4c:	f7ff fcf8 	bl	8001740 <DESELECT>
	SPI_RxByte(); /* Idle 상태(Release DO) */
 8001d50:	f7ff fd1c 	bl	800178c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	bf14      	ite	ne
 8001d5a:	2301      	movne	r3, #1
 8001d5c:	2300      	moveq	r3, #0
 8001d5e:	b2db      	uxtb	r3, r3
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	200008cc 	.word	0x200008cc

08001d70 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE *buff, DWORD sector, UINT count)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	607a      	str	r2, [r7, #4]
 8001d7a:	603b      	str	r3, [r7, #0]
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d102      	bne.n	8001d8c <SD_disk_write+0x1c>
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <SD_disk_write+0x20>
		return RES_PARERR;
 8001d8c:	2304      	movs	r3, #4
 8001d8e:	e06b      	b.n	8001e68 <SD_disk_write+0xf8>

	if (Stat & STA_NOINIT)
 8001d90:	4b37      	ldr	r3, [pc, #220]	; (8001e70 <SD_disk_write+0x100>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <SD_disk_write+0x32>
		return RES_NOTRDY;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e062      	b.n	8001e68 <SD_disk_write+0xf8>

	if (Stat & STA_PROTECT)
 8001da2:	4b33      	ldr	r3, [pc, #204]	; (8001e70 <SD_disk_write+0x100>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <SD_disk_write+0x44>
		return RES_WRPRT;
 8001db0:	2302      	movs	r3, #2
 8001db2:	e059      	b.n	8001e68 <SD_disk_write+0xf8>

	if (!(CardType & 4))
 8001db4:	4b2f      	ldr	r3, [pc, #188]	; (8001e74 <SD_disk_write+0x104>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d102      	bne.n	8001dc6 <SD_disk_write+0x56>
		sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	025b      	lsls	r3, r3, #9
 8001dc4:	607b      	str	r3, [r7, #4]

	SELECT();
 8001dc6:	f7ff fcaf 	bl	8001728 <SELECT>

	if (count == 1)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d110      	bne.n	8001df2 <SD_disk_write+0x82>
	{
		/* 싱글 블록 쓰기 */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	2058      	movs	r0, #88	; 0x58
 8001dd4:	f7ff fe10 	bl	80019f8 <SD_SendCmd>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d13a      	bne.n	8001e54 <SD_disk_write+0xe4>
 8001dde:	21fe      	movs	r1, #254	; 0xfe
 8001de0:	68b8      	ldr	r0, [r7, #8]
 8001de2:	f7ff fdb5 	bl	8001950 <SD_TxDataBlock>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d033      	beq.n	8001e54 <SD_disk_write+0xe4>
			count = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	e030      	b.n	8001e54 <SD_disk_write+0xe4>
	}
	else
	{
		/* 다중 블록 쓰기 */
		if (CardType & 2)
 8001df2:	4b20      	ldr	r3, [pc, #128]	; (8001e74 <SD_disk_write+0x104>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d007      	beq.n	8001e0e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001dfe:	2100      	movs	r1, #0
 8001e00:	2077      	movs	r0, #119	; 0x77
 8001e02:	f7ff fdf9 	bl	80019f8 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001e06:	6839      	ldr	r1, [r7, #0]
 8001e08:	2057      	movs	r0, #87	; 0x57
 8001e0a:	f7ff fdf5 	bl	80019f8 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	2059      	movs	r0, #89	; 0x59
 8001e12:	f7ff fdf1 	bl	80019f8 <SD_SendCmd>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d11b      	bne.n	8001e54 <SD_disk_write+0xe4>
		{
			do
			{
				if (!SD_TxDataBlock(buff, 0xFC))
 8001e1c:	21fc      	movs	r1, #252	; 0xfc
 8001e1e:	68b8      	ldr	r0, [r7, #8]
 8001e20:	f7ff fd96 	bl	8001950 <SD_TxDataBlock>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00a      	beq.n	8001e40 <SD_disk_write+0xd0>
					break;

				buff += 512;
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001e30:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	3b01      	subs	r3, #1
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1ee      	bne.n	8001e1c <SD_disk_write+0xac>
 8001e3e:	e000      	b.n	8001e42 <SD_disk_write+0xd2>
					break;
 8001e40:	bf00      	nop

			if (!SD_TxDataBlock(0, 0xFD))
 8001e42:	21fd      	movs	r1, #253	; 0xfd
 8001e44:	2000      	movs	r0, #0
 8001e46:	f7ff fd83 	bl	8001950 <SD_TxDataBlock>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <SD_disk_write+0xe4>
			{
				count = 1;
 8001e50:	2301      	movs	r3, #1
 8001e52:	603b      	str	r3, [r7, #0]
			}
		}
	}

	DESELECT();
 8001e54:	f7ff fc74 	bl	8001740 <DESELECT>
	SPI_RxByte();
 8001e58:	f7ff fc98 	bl	800178c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	bf14      	ite	ne
 8001e62:	2301      	movne	r3, #1
 8001e64:	2300      	moveq	r3, #0
 8001e66:	b2db      	uxtb	r3, r3
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20000000 	.word	0x20000000
 8001e74:	200008cc 	.word	0x200008cc

08001e78 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001e78:	b590      	push	{r4, r7, lr}
 8001e7a:	b08b      	sub	sp, #44	; 0x2c
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	603a      	str	r2, [r7, #0]
 8001e82:	71fb      	strb	r3, [r7, #7]
 8001e84:	460b      	mov	r3, r1
 8001e86:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	623b      	str	r3, [r7, #32]
	WORD csize;

	if (drv)
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <SD_disk_ioctl+0x1e>
		return RES_PARERR;
 8001e92:	2304      	movs	r3, #4
 8001e94:	e11b      	b.n	80020ce <SD_disk_ioctl+0x256>

	res = RES_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001e9c:	79bb      	ldrb	r3, [r7, #6]
 8001e9e:	2b05      	cmp	r3, #5
 8001ea0:	d129      	bne.n	8001ef6 <SD_disk_ioctl+0x7e>
	{
		switch (*ptr)
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d017      	beq.n	8001eda <SD_disk_ioctl+0x62>
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	dc1f      	bgt.n	8001eee <SD_disk_ioctl+0x76>
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <SD_disk_ioctl+0x40>
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d00b      	beq.n	8001ece <SD_disk_ioctl+0x56>
 8001eb6:	e01a      	b.n	8001eee <SD_disk_ioctl+0x76>
		{
		case 0:
			if (SD_CheckPower())
 8001eb8:	f7ff fd08 	bl	80018cc <SD_CheckPower>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <SD_disk_ioctl+0x4e>
				SD_PowerOff(); /* Power Off */
 8001ec2:	f7ff fcf7 	bl	80018b4 <SD_PowerOff>
			res = RES_OK;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001ecc:	e0fd      	b.n	80020ca <SD_disk_ioctl+0x252>
		case 1:
			SD_PowerOn(); /* Power On */
 8001ece:	f7ff fca5 	bl	800181c <SD_PowerOn>
			res = RES_OK;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001ed8:	e0f7      	b.n	80020ca <SD_disk_ioctl+0x252>
		case 2:
			*(ptr + 1) = (BYTE) SD_CheckPower();
 8001eda:	6a3b      	ldr	r3, [r7, #32]
 8001edc:	1c5c      	adds	r4, r3, #1
 8001ede:	f7ff fcf5 	bl	80018cc <SD_CheckPower>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	7023      	strb	r3, [r4, #0]
			res = RES_OK; /* Power Check */
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001eec:	e0ed      	b.n	80020ca <SD_disk_ioctl+0x252>
		default:
			res = RES_PARERR;
 8001eee:	2304      	movs	r3, #4
 8001ef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ef4:	e0e9      	b.n	80020ca <SD_disk_ioctl+0x252>
		}
	}
	else
	{
		if (Stat & STA_NOINIT)
 8001ef6:	4b78      	ldr	r3, [pc, #480]	; (80020d8 <SD_disk_ioctl+0x260>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <SD_disk_ioctl+0x90>
			return RES_NOTRDY;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e0e2      	b.n	80020ce <SD_disk_ioctl+0x256>

		SELECT();
 8001f08:	f7ff fc0e 	bl	8001728 <SELECT>

		switch (ctrl)
 8001f0c:	79bb      	ldrb	r3, [r7, #6]
 8001f0e:	2b0d      	cmp	r3, #13
 8001f10:	f200 80cc 	bhi.w	80020ac <SD_disk_ioctl+0x234>
 8001f14:	a201      	add	r2, pc, #4	; (adr r2, 8001f1c <SD_disk_ioctl+0xa4>)
 8001f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1a:	bf00      	nop
 8001f1c:	08002017 	.word	0x08002017
 8001f20:	08001f55 	.word	0x08001f55
 8001f24:	08002007 	.word	0x08002007
 8001f28:	080020ad 	.word	0x080020ad
 8001f2c:	080020ad 	.word	0x080020ad
 8001f30:	080020ad 	.word	0x080020ad
 8001f34:	080020ad 	.word	0x080020ad
 8001f38:	080020ad 	.word	0x080020ad
 8001f3c:	080020ad 	.word	0x080020ad
 8001f40:	080020ad 	.word	0x080020ad
 8001f44:	080020ad 	.word	0x080020ad
 8001f48:	08002029 	.word	0x08002029
 8001f4c:	0800204d 	.word	0x0800204d
 8001f50:	08002071 	.word	0x08002071
		{
		case GET_SECTOR_COUNT:
			/* SD카드 내 Sector의 개수 (DWORD) */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001f54:	2100      	movs	r1, #0
 8001f56:	2049      	movs	r0, #73	; 0x49
 8001f58:	f7ff fd4e 	bl	80019f8 <SD_SendCmd>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f040 80a8 	bne.w	80020b4 <SD_disk_ioctl+0x23c>
 8001f64:	f107 030c 	add.w	r3, r7, #12
 8001f68:	2110      	movs	r1, #16
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff fcba 	bl	80018e4 <SD_RxDataBlock>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 809e 	beq.w	80020b4 <SD_disk_ioctl+0x23c>
			{
				if ((csd[0] >> 6) == 1)
 8001f78:	7b3b      	ldrb	r3, [r7, #12]
 8001f7a:	099b      	lsrs	r3, r3, #6
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d10e      	bne.n	8001fa0 <SD_disk_ioctl+0x128>
				{
					/* SDC ver 2.00 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001f82:	7d7b      	ldrb	r3, [r7, #21]
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	7d3b      	ldrb	r3, [r7, #20]
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	021b      	lsls	r3, r3, #8
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	4413      	add	r3, r2
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	3301      	adds	r3, #1
 8001f94:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001f96:	8bfb      	ldrh	r3, [r7, #30]
 8001f98:	029a      	lsls	r2, r3, #10
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	e02e      	b.n	8001ffe <SD_disk_ioctl+0x186>
				}
				else
				{
					/* MMC or SDC ver 1.XX */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8001fa0:	7c7b      	ldrb	r3, [r7, #17]
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	7dbb      	ldrb	r3, [r7, #22]
 8001faa:	09db      	lsrs	r3, r3, #7
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	4413      	add	r3, r2
 8001fb0:	b2da      	uxtb	r2, r3
							+ ((csd[9] & 3) << 1) + 2;
 8001fb2:	7d7b      	ldrb	r3, [r7, #21]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	f003 0306 	and.w	r3, r3, #6
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	b2db      	uxtb	r3, r3
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8001fc2:	3302      	adds	r3, #2
 8001fc4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8001fc8:	7d3b      	ldrb	r3, [r7, #20]
 8001fca:	099b      	lsrs	r3, r3, #6
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	7cfb      	ldrb	r3, [r7, #19]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	4413      	add	r3, r2
 8001fda:	b29a      	uxth	r2, r3
							+ ((WORD) (csd[6] & 3) << 10) + 1;
 8001fdc:	7cbb      	ldrb	r3, [r7, #18]
 8001fde:	029b      	lsls	r3, r3, #10
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	4413      	add	r3, r2
 8001fea:	b29b      	uxth	r3, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8001fec:	3301      	adds	r3, #1
 8001fee:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001ff0:	8bfa      	ldrh	r2, [r7, #30]
 8001ff2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ff6:	3b09      	subs	r3, #9
 8001ff8:	409a      	lsls	r2, r3
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	601a      	str	r2, [r3, #0]
				}

				res = RES_OK;
 8001ffe:	2300      	movs	r3, #0
 8002000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8002004:	e056      	b.n	80020b4 <SD_disk_ioctl+0x23c>

		case GET_SECTOR_SIZE:
			/* 섹터의 단위 크기 (WORD) */
			*(WORD*) buff = 512;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800200c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800200e:	2300      	movs	r3, #0
 8002010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002014:	e055      	b.n	80020c2 <SD_disk_ioctl+0x24a>

		case CTRL_SYNC:
			/* 쓰기 동기화 */
			if (SD_ReadyWait() == 0xFF)
 8002016:	f7ff fbe5 	bl	80017e4 <SD_ReadyWait>
 800201a:	4603      	mov	r3, r0
 800201c:	2bff      	cmp	r3, #255	; 0xff
 800201e:	d14b      	bne.n	80020b8 <SD_disk_ioctl+0x240>
				res = RES_OK;
 8002020:	2300      	movs	r3, #0
 8002022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002026:	e047      	b.n	80020b8 <SD_disk_ioctl+0x240>

		case MMC_GET_CSD:
			/* CSD 정보 수신 (16 bytes) */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002028:	2100      	movs	r1, #0
 800202a:	2049      	movs	r0, #73	; 0x49
 800202c:	f7ff fce4 	bl	80019f8 <SD_SendCmd>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d142      	bne.n	80020bc <SD_disk_ioctl+0x244>
 8002036:	2110      	movs	r1, #16
 8002038:	6a38      	ldr	r0, [r7, #32]
 800203a:	f7ff fc53 	bl	80018e4 <SD_RxDataBlock>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d03b      	beq.n	80020bc <SD_disk_ioctl+0x244>
				res = RES_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800204a:	e037      	b.n	80020bc <SD_disk_ioctl+0x244>

		case MMC_GET_CID:
			/* CID 정보 수신 (16 bytes) */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800204c:	2100      	movs	r1, #0
 800204e:	204a      	movs	r0, #74	; 0x4a
 8002050:	f7ff fcd2 	bl	80019f8 <SD_SendCmd>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d132      	bne.n	80020c0 <SD_disk_ioctl+0x248>
 800205a:	2110      	movs	r1, #16
 800205c:	6a38      	ldr	r0, [r7, #32]
 800205e:	f7ff fc41 	bl	80018e4 <SD_RxDataBlock>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d02b      	beq.n	80020c0 <SD_disk_ioctl+0x248>
				res = RES_OK;
 8002068:	2300      	movs	r3, #0
 800206a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800206e:	e027      	b.n	80020c0 <SD_disk_ioctl+0x248>

		case MMC_GET_OCR:
			/* OCR 정보 수신 (4 bytes) */
			if (SD_SendCmd(CMD58, 0) == 0)
 8002070:	2100      	movs	r1, #0
 8002072:	207a      	movs	r0, #122	; 0x7a
 8002074:	f7ff fcc0 	bl	80019f8 <SD_SendCmd>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d116      	bne.n	80020ac <SD_disk_ioctl+0x234>
			{
				for (n = 0; n < 4; n++)
 800207e:	2300      	movs	r3, #0
 8002080:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002084:	e00b      	b.n	800209e <SD_disk_ioctl+0x226>
				{
					*ptr++ = SPI_RxByte();
 8002086:	6a3c      	ldr	r4, [r7, #32]
 8002088:	1c63      	adds	r3, r4, #1
 800208a:	623b      	str	r3, [r7, #32]
 800208c:	f7ff fb7e 	bl	800178c <SPI_RxByte>
 8002090:	4603      	mov	r3, r0
 8002092:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8002094:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002098:	3301      	adds	r3, #1
 800209a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800209e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	d9ef      	bls.n	8002086 <SD_disk_ioctl+0x20e>
				}

				res = RES_OK;
 80020a6:	2300      	movs	r3, #0
 80020a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}

		default:
			res = RES_PARERR;
 80020ac:	2304      	movs	r3, #4
 80020ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80020b2:	e006      	b.n	80020c2 <SD_disk_ioctl+0x24a>
			break;
 80020b4:	bf00      	nop
 80020b6:	e004      	b.n	80020c2 <SD_disk_ioctl+0x24a>
			break;
 80020b8:	bf00      	nop
 80020ba:	e002      	b.n	80020c2 <SD_disk_ioctl+0x24a>
			break;
 80020bc:	bf00      	nop
 80020be:	e000      	b.n	80020c2 <SD_disk_ioctl+0x24a>
			break;
 80020c0:	bf00      	nop
		}

		DESELECT();
 80020c2:	f7ff fb3d 	bl	8001740 <DESELECT>
		SPI_RxByte();
 80020c6:	f7ff fb61 	bl	800178c <SPI_RxByte>
	}

	return res;
 80020ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	372c      	adds	r7, #44	; 0x2c
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd90      	pop	{r4, r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000000 	.word	0x20000000

080020dc <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4a07      	ldr	r2, [pc, #28]	; (8002108 <vApplicationGetIdleTaskMemory+0x2c>)
 80020ec:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	4a06      	ldr	r2, [pc, #24]	; (800210c <vApplicationGetIdleTaskMemory+0x30>)
 80020f2:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2280      	movs	r2, #128	; 0x80
 80020f8:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80020fa:	bf00      	nop
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	2000598c 	.word	0x2000598c
 800210c:	20005a2c 	.word	0x20005a2c

08002110 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002110:	b5b0      	push	{r4, r5, r7, lr}
 8002112:	b0b0      	sub	sp, #192	; 0xc0
 8002114:	af00      	add	r7, sp, #0
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of travelSensorSem */
  osSemaphoreStaticDef(travelSensorSem, &travelSensorSemControlBlock);
 8002116:	2300      	movs	r3, #0
 8002118:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800211c:	4b4e      	ldr	r3, [pc, #312]	; (8002258 <MX_FREERTOS_Init+0x148>)
 800211e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  travelSensorSemHandle = osSemaphoreCreate(osSemaphore(travelSensorSem), 1);
 8002122:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002126:	2101      	movs	r1, #1
 8002128:	4618      	mov	r0, r3
 800212a:	f012 fa8b 	bl	8014644 <osSemaphoreCreate>
 800212e:	4603      	mov	r3, r0
 8002130:	4a4a      	ldr	r2, [pc, #296]	; (800225c <MX_FREERTOS_Init+0x14c>)
 8002132:	6013      	str	r3, [r2, #0]

  /* definition and creation of SendData */
  osSemaphoreStaticDef(SendData, &SendDataControlBlock);
 8002134:	2300      	movs	r3, #0
 8002136:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800213a:	4b49      	ldr	r3, [pc, #292]	; (8002260 <MX_FREERTOS_Init+0x150>)
 800213c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  SendDataHandle = osSemaphoreCreate(osSemaphore(SendData), 1);
 8002140:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002144:	2101      	movs	r1, #1
 8002146:	4618      	mov	r0, r3
 8002148:	f012 fa7c 	bl	8014644 <osSemaphoreCreate>
 800214c:	4603      	mov	r3, r0
 800214e:	4a45      	ldr	r2, [pc, #276]	; (8002264 <MX_FREERTOS_Init+0x154>)
 8002150:	6013      	str	r3, [r2, #0]

  /* definition and creation of buttonSem */
  osSemaphoreStaticDef(buttonSem, &buttonSemControlBlock);
 8002152:	2300      	movs	r3, #0
 8002154:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002158:	4b43      	ldr	r3, [pc, #268]	; (8002268 <MX_FREERTOS_Init+0x158>)
 800215a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  buttonSemHandle = osSemaphoreCreate(osSemaphore(buttonSem), 1);
 800215e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002162:	2101      	movs	r1, #1
 8002164:	4618      	mov	r0, r3
 8002166:	f012 fa6d 	bl	8014644 <osSemaphoreCreate>
 800216a:	4603      	mov	r3, r0
 800216c:	4a3f      	ldr	r2, [pc, #252]	; (800226c <MX_FREERTOS_Init+0x15c>)
 800216e:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of buttonTask */
  osThreadStaticDef(buttonTask, buttonTaskInit, osPriorityNormal, 0, 128, buttonTaskBuffer, &buttonTaskControlBlock);
 8002170:	4b3f      	ldr	r3, [pc, #252]	; (8002270 <MX_FREERTOS_Init+0x160>)
 8002172:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8002176:	461d      	mov	r5, r3
 8002178:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800217a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800217c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002180:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buttonTaskHandle = osThreadCreate(osThread(buttonTask), NULL);
 8002184:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002188:	2100      	movs	r1, #0
 800218a:	4618      	mov	r0, r3
 800218c:	f012 f9fa 	bl	8014584 <osThreadCreate>
 8002190:	4603      	mov	r3, r0
 8002192:	4a38      	ldr	r2, [pc, #224]	; (8002274 <MX_FREERTOS_Init+0x164>)
 8002194:	6013      	str	r3, [r2, #0]

  /* definition and creation of sensorRead */
  osThreadStaticDef(sensorRead, initSensorRead, osPriorityNormal, 0, 2048, sensorReadBuffer, &sensorReadControlBlock);
 8002196:	4b38      	ldr	r3, [pc, #224]	; (8002278 <MX_FREERTOS_Init+0x168>)
 8002198:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800219c:	461d      	mov	r5, r3
 800219e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sensorReadHandle = osThreadCreate(osThread(sensorRead), NULL);
 80021aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80021ae:	2100      	movs	r1, #0
 80021b0:	4618      	mov	r0, r3
 80021b2:	f012 f9e7 	bl	8014584 <osThreadCreate>
 80021b6:	4603      	mov	r3, r0
 80021b8:	4a30      	ldr	r2, [pc, #192]	; (800227c <MX_FREERTOS_Init+0x16c>)
 80021ba:	6013      	str	r3, [r2, #0]

  /* definition and creation of SdCard */
  osThreadStaticDef(SdCard, SdCardInit, osPriorityHigh, 0, 256, SdCardBuffer, &SdCardControlBlock);
 80021bc:	4b30      	ldr	r3, [pc, #192]	; (8002280 <MX_FREERTOS_Init+0x170>)
 80021be:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80021c2:	461d      	mov	r5, r3
 80021c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SdCardHandle = osThreadCreate(osThread(SdCard), NULL);
 80021d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021d4:	2100      	movs	r1, #0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f012 f9d4 	bl	8014584 <osThreadCreate>
 80021dc:	4603      	mov	r3, r0
 80021de:	4a29      	ldr	r2, [pc, #164]	; (8002284 <MX_FREERTOS_Init+0x174>)
 80021e0:	6013      	str	r3, [r2, #0]

  /* definition and creation of menuProcessData */
  osThreadStaticDef(menuProcessData, menuProcessDataInit, osPriorityNormal, 0, 2048, menuProcessDataBuffer, &menuProcessDataControlBlock);
 80021e2:	4b29      	ldr	r3, [pc, #164]	; (8002288 <MX_FREERTOS_Init+0x178>)
 80021e4:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80021e8:	461d      	mov	r5, r3
 80021ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  menuProcessDataHandle = osThreadCreate(osThread(menuProcessData), NULL);
 80021f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021fa:	2100      	movs	r1, #0
 80021fc:	4618      	mov	r0, r3
 80021fe:	f012 f9c1 	bl	8014584 <osThreadCreate>
 8002202:	4603      	mov	r3, r0
 8002204:	4a21      	ldr	r2, [pc, #132]	; (800228c <MX_FREERTOS_Init+0x17c>)
 8002206:	6013      	str	r3, [r2, #0]

  /* definition and creation of lcdTask */
  osThreadStaticDef(lcdTask, lcdTaskInit, osPriorityNormal, 0, 128, lcdTaskBuffer, &lcdTaskControlBlock);
 8002208:	4b21      	ldr	r3, [pc, #132]	; (8002290 <MX_FREERTOS_Init+0x180>)
 800220a:	f107 041c 	add.w	r4, r7, #28
 800220e:	461d      	mov	r5, r3
 8002210:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002214:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002218:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lcdTaskHandle = osThreadCreate(osThread(lcdTask), NULL);
 800221c:	f107 031c 	add.w	r3, r7, #28
 8002220:	2100      	movs	r1, #0
 8002222:	4618      	mov	r0, r3
 8002224:	f012 f9ae 	bl	8014584 <osThreadCreate>
 8002228:	4603      	mov	r3, r0
 800222a:	4a1a      	ldr	r2, [pc, #104]	; (8002294 <MX_FREERTOS_Init+0x184>)
 800222c:	6013      	str	r3, [r2, #0]

  /* definition and creation of adxlTask */
  osThreadStaticDef(adxlTask, adxlTaskInit, osPriorityNormal, 0, 256, adxlTaskBuffer, &adxlTaskControlBlock);
 800222e:	4b1a      	ldr	r3, [pc, #104]	; (8002298 <MX_FREERTOS_Init+0x188>)
 8002230:	463c      	mov	r4, r7
 8002232:	461d      	mov	r5, r3
 8002234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002238:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800223c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  adxlTaskHandle = osThreadCreate(osThread(adxlTask), NULL);
 8002240:	463b      	mov	r3, r7
 8002242:	2100      	movs	r1, #0
 8002244:	4618      	mov	r0, r3
 8002246:	f012 f99d 	bl	8014584 <osThreadCreate>
 800224a:	4603      	mov	r3, r0
 800224c:	4a13      	ldr	r2, [pc, #76]	; (800229c <MX_FREERTOS_Init+0x18c>)
 800224e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002250:	bf00      	nop
 8002252:	37c0      	adds	r7, #192	; 0xc0
 8002254:	46bd      	mov	sp, r7
 8002256:	bdb0      	pop	{r4, r5, r7, pc}
 8002258:	200058ac 	.word	0x200058ac
 800225c:	200058a8 	.word	0x200058a8
 8002260:	200058f8 	.word	0x200058f8
 8002264:	200058f4 	.word	0x200058f4
 8002268:	20005944 	.word	0x20005944
 800226c:	20005940 	.word	0x20005940
 8002270:	0801a814 	.word	0x0801a814
 8002274:	200008d0 	.word	0x200008d0
 8002278:	0801a83c 	.word	0x0801a83c
 800227c:	20000b74 	.word	0x20000b74
 8002280:	0801a860 	.word	0x0801a860
 8002284:	20002c18 	.word	0x20002c18
 8002288:	0801a88c 	.word	0x0801a88c
 800228c:	200030bc 	.word	0x200030bc
 8002290:	0801a8b0 	.word	0x0801a8b0
 8002294:	20005160 	.word	0x20005160
 8002298:	0801a8d8 	.word	0x0801a8d8
 800229c:	20005404 	.word	0x20005404

080022a0 <buttonTaskInit>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_buttonTaskInit */
void buttonTaskInit(void const * argument)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80022a8:	f014 fd88 	bl	8016dbc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN buttonTaskInit */
	/* Infinite loop */
	for (;;)
	{
		/*buttonMenu = readButton(); for live expression*/
		if ( MAX_ACTIVE_BUTTON >= buttonMenu)
 80022ac:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <buttonTaskInit+0x28>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d804      	bhi.n	80022be <buttonTaskInit+0x1e>
		{
			osSemaphoreRelease(buttonSemHandle);
 80022b4:	4b05      	ldr	r3, [pc, #20]	; (80022cc <buttonTaskInit+0x2c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f012 fa43 	bl	8014744 <osSemaphoreRelease>
		}
		osDelay(30);
 80022be:	201e      	movs	r0, #30
 80022c0:	f012 f9ac 	bl	801461c <osDelay>
		if ( MAX_ACTIVE_BUTTON >= buttonMenu)
 80022c4:	e7f2      	b.n	80022ac <buttonTaskInit+0xc>
 80022c6:	bf00      	nop
 80022c8:	20000001 	.word	0x20000001
 80022cc:	20005940 	.word	0x20005940

080022d0 <initSensorRead>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_initSensorRead */
void initSensorRead(void const * argument)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for (;;)
	{

		osDelay(30);
 80022d8:	201e      	movs	r0, #30
 80022da:	f012 f99f 	bl	801461c <osDelay>
 80022de:	e7fb      	b.n	80022d8 <initSensorRead+0x8>

080022e0 <SdCardInit>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_SdCardInit */
void SdCardInit(void const * argument)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SdCardInit */
	 HD44780_Init(2);
 80022e8:	2002      	movs	r0, #2
 80022ea:	f000 fa01 	bl	80026f0 <HD44780_Init>
	 HD44780_Clear();
 80022ee:	f000 fa83 	bl	80027f8 <HD44780_Clear>
	 HD44780_SetCursor(0,0);
 80022f2:	2100      	movs	r1, #0
 80022f4:	2000      	movs	r0, #0
 80022f6:	f000 fa95 	bl	8002824 <HD44780_SetCursor>
	 HD44780_PrintStr("SAG");
 80022fa:	4817      	ldr	r0, [pc, #92]	; (8002358 <SdCardInit+0x78>)
 80022fc:	f000 fb19 	bl	8002932 <HD44780_PrintStr>
	 HD44780_SetCursor(0,1);
 8002300:	2101      	movs	r1, #1
 8002302:	2000      	movs	r0, #0
 8002304:	f000 fa8e 	bl	8002824 <HD44780_SetCursor>
	 HD44780_PrintStr("LEFT");
 8002308:	4814      	ldr	r0, [pc, #80]	; (800235c <SdCardInit+0x7c>)
 800230a:	f000 fb12 	bl	8002932 <HD44780_PrintStr>
	 HD44780_SetCursor(9,0);
 800230e:	2100      	movs	r1, #0
 8002310:	2009      	movs	r0, #9
 8002312:	f000 fa87 	bl	8002824 <HD44780_SetCursor>
	 HD44780_PrintStr("MESSURE");
 8002316:	4812      	ldr	r0, [pc, #72]	; (8002360 <SdCardInit+0x80>)
 8002318:	f000 fb0b 	bl	8002932 <HD44780_PrintStr>
	 HD44780_SetCursor(11,1);
 800231c:	2101      	movs	r1, #1
 800231e:	200b      	movs	r0, #11
 8002320:	f000 fa80 	bl	8002824 <HD44780_SetCursor>
	 HD44780_PrintStr("RIGHT");
 8002324:	480f      	ldr	r0, [pc, #60]	; (8002364 <SdCardInit+0x84>)
 8002326:	f000 fb04 	bl	8002932 <HD44780_PrintStr>
	/* Infinite loop */
	for (;;)
	{

		if (MAX_ACTIVE_BUTTON >= buttonMenu)
 800232a:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <SdCardInit+0x88>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b04      	cmp	r3, #4
 8002330:	d807      	bhi.n	8002342 <SdCardInit+0x62>
		{
			menuSelector(buttonMenu);
 8002332:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <SdCardInit+0x88>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f000 fcc4 	bl	8002cc4 <menuSelector>
			buttonMenu = BUTTON_SNA; /*for live expression*/
 800233c:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <SdCardInit+0x88>)
 800233e:	2205      	movs	r2, #5
 8002340:	701a      	strb	r2, [r3, #0]
		}
		osSemaphoreWait(buttonSemHandle, osWaitForever);
 8002342:	4b0a      	ldr	r3, [pc, #40]	; (800236c <SdCardInit+0x8c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f04f 31ff 	mov.w	r1, #4294967295
 800234a:	4618      	mov	r0, r3
 800234c:	f012 f9ac 	bl	80146a8 <osSemaphoreWait>
		osDelay(20);
 8002350:	2014      	movs	r0, #20
 8002352:	f012 f963 	bl	801461c <osDelay>
		if (MAX_ACTIVE_BUTTON >= buttonMenu)
 8002356:	e7e8      	b.n	800232a <SdCardInit+0x4a>
 8002358:	0801a8f4 	.word	0x0801a8f4
 800235c:	0801a8f8 	.word	0x0801a8f8
 8002360:	0801a900 	.word	0x0801a900
 8002364:	0801a908 	.word	0x0801a908
 8002368:	20000001 	.word	0x20000001
 800236c:	20005940 	.word	0x20005940

08002370 <menuProcessDataInit>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_menuProcessDataInit */
void menuProcessDataInit(void const * argument)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN menuProcessDataInit */
	/* Infinite loop */
	for (;;)
	{
		menuCalculateBlock();
 8002378:	f000 fe90 	bl	800309c <menuCalculateBlock>
		osDelay(10);
 800237c:	200a      	movs	r0, #10
 800237e:	f012 f94d 	bl	801461c <osDelay>
		menuCalculateBlock();
 8002382:	e7f9      	b.n	8002378 <menuProcessDataInit+0x8>

08002384 <lcdTaskInit>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_lcdTaskInit */
void lcdTaskInit(void const * argument)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  for(;;)
  {

    osDelay(1);
 800238c:	2001      	movs	r0, #1
 800238e:	f012 f945 	bl	801461c <osDelay>
 8002392:	e7fb      	b.n	800238c <lcdTaskInit+0x8>
 8002394:	0000      	movs	r0, r0
	...

08002398 <adxlTaskInit>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_adxlTaskInit */
void adxlTaskInit(void const * argument)
{
 8002398:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800239c:	b08e      	sub	sp, #56	; 0x38
 800239e:	af04      	add	r7, sp, #16
 80023a0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN adxlTaskInit */
	int16_t x,y,z;
	uint8_t data_rec[6];
	float xg, yg, zg;
	adxl_init();
 80023a2:	f7fe fe41 	bl	8001028 <adxl_init>

  /* Infinite loop */
  for(;;)
  {
	  adxl_read_values (0x32);
 80023a6:	2032      	movs	r0, #50	; 0x32
 80023a8:	f7fe fe18 	bl	8000fdc <adxl_read_values>
	  HAL_I2C_Mem_Read (&hi2c1, adxl_address, 0x32, 1, (uint8_t *)data_rec, 6, 100);
 80023ac:	2364      	movs	r3, #100	; 0x64
 80023ae:	9302      	str	r3, [sp, #8]
 80023b0:	2306      	movs	r3, #6
 80023b2:	9301      	str	r3, [sp, #4]
 80023b4:	f107 030c 	add.w	r3, r7, #12
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	2301      	movs	r3, #1
 80023bc:	2232      	movs	r2, #50	; 0x32
 80023be:	21a6      	movs	r1, #166	; 0xa6
 80023c0:	4837      	ldr	r0, [pc, #220]	; (80024a0 <adxlTaskInit+0x108>)
 80023c2:	f003 fdb9 	bl	8005f38 <HAL_I2C_Mem_Read>
	  x = ((data_rec[1]<<8)|data_rec[0]);
 80023c6:	7b7b      	ldrb	r3, [r7, #13]
 80023c8:	021b      	lsls	r3, r3, #8
 80023ca:	b21a      	sxth	r2, r3
 80023cc:	7b3b      	ldrb	r3, [r7, #12]
 80023ce:	b21b      	sxth	r3, r3
 80023d0:	4313      	orrs	r3, r2
 80023d2:	84fb      	strh	r3, [r7, #38]	; 0x26
	  y = ((data_rec[3]<<8)|data_rec[2]);
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
 80023d6:	021b      	lsls	r3, r3, #8
 80023d8:	b21a      	sxth	r2, r3
 80023da:	7bbb      	ldrb	r3, [r7, #14]
 80023dc:	b21b      	sxth	r3, r3
 80023de:	4313      	orrs	r3, r2
 80023e0:	84bb      	strh	r3, [r7, #36]	; 0x24
	  z = ((data_rec[5]<<8)|data_rec[4]);
 80023e2:	7c7b      	ldrb	r3, [r7, #17]
 80023e4:	021b      	lsls	r3, r3, #8
 80023e6:	b21a      	sxth	r2, r3
 80023e8:	7c3b      	ldrb	r3, [r7, #16]
 80023ea:	b21b      	sxth	r3, r3
 80023ec:	4313      	orrs	r3, r2
 80023ee:	847b      	strh	r3, [r7, #34]	; 0x22

	  xg = x * 0.0078;
 80023f0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7fe f8c5 	bl	8000584 <__aeabi_i2d>
 80023fa:	a327      	add	r3, pc, #156	; (adr r3, 8002498 <adxlTaskInit+0x100>)
 80023fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002400:	f7fe f92a 	bl	8000658 <__aeabi_dmul>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4610      	mov	r0, r2
 800240a:	4619      	mov	r1, r3
 800240c:	f7fe fbfc 	bl	8000c08 <__aeabi_d2f>
 8002410:	4603      	mov	r3, r0
 8002412:	61fb      	str	r3, [r7, #28]
	  yg = y * 0.0078;
 8002414:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe f8b3 	bl	8000584 <__aeabi_i2d>
 800241e:	a31e      	add	r3, pc, #120	; (adr r3, 8002498 <adxlTaskInit+0x100>)
 8002420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002424:	f7fe f918 	bl	8000658 <__aeabi_dmul>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4610      	mov	r0, r2
 800242e:	4619      	mov	r1, r3
 8002430:	f7fe fbea 	bl	8000c08 <__aeabi_d2f>
 8002434:	4603      	mov	r3, r0
 8002436:	61bb      	str	r3, [r7, #24]
	  zg = z * 0.0078;
 8002438:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800243c:	4618      	mov	r0, r3
 800243e:	f7fe f8a1 	bl	8000584 <__aeabi_i2d>
 8002442:	a315      	add	r3, pc, #84	; (adr r3, 8002498 <adxlTaskInit+0x100>)
 8002444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002448:	f7fe f906 	bl	8000658 <__aeabi_dmul>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4610      	mov	r0, r2
 8002452:	4619      	mov	r1, r3
 8002454:	f7fe fbd8 	bl	8000c08 <__aeabi_d2f>
 8002458:	4603      	mov	r3, r0
 800245a:	617b      	str	r3, [r7, #20]
	  printf("X: %f\nY: %f\nZ: %f\n", xg, yg, zg);
 800245c:	69f8      	ldr	r0, [r7, #28]
 800245e:	f7fe f8a3 	bl	80005a8 <__aeabi_f2d>
 8002462:	4680      	mov	r8, r0
 8002464:	4689      	mov	r9, r1
 8002466:	69b8      	ldr	r0, [r7, #24]
 8002468:	f7fe f89e 	bl	80005a8 <__aeabi_f2d>
 800246c:	4604      	mov	r4, r0
 800246e:	460d      	mov	r5, r1
 8002470:	6978      	ldr	r0, [r7, #20]
 8002472:	f7fe f899 	bl	80005a8 <__aeabi_f2d>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800247e:	e9cd 4500 	strd	r4, r5, [sp]
 8002482:	4642      	mov	r2, r8
 8002484:	464b      	mov	r3, r9
 8002486:	4807      	ldr	r0, [pc, #28]	; (80024a4 <adxlTaskInit+0x10c>)
 8002488:	f015 ff34 	bl	80182f4 <iprintf>
    osDelay(10);
 800248c:	200a      	movs	r0, #10
 800248e:	f012 f8c5 	bl	801461c <osDelay>
	  adxl_read_values (0x32);
 8002492:	e788      	b.n	80023a6 <adxlTaskInit+0xe>
 8002494:	f3af 8000 	nop.w
 8002498:	8e8a71de 	.word	0x8e8a71de
 800249c:	3f7ff2e4 	.word	0x3f7ff2e4
 80024a0:	20005c2c 	.word	0x20005c2c
 80024a4:	0801a910 	.word	0x0801a910

080024a8 <MX_GPIO_Init>:
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
     PC5   ------> ADCx_IN15
*/
void MX_GPIO_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08a      	sub	sp, #40	; 0x28
 80024ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ae:	f107 0314 	add.w	r3, r7, #20
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	605a      	str	r2, [r3, #4]
 80024b8:	609a      	str	r2, [r3, #8]
 80024ba:	60da      	str	r2, [r3, #12]
 80024bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	4b4c      	ldr	r3, [pc, #304]	; (80025f4 <MX_GPIO_Init+0x14c>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	4a4b      	ldr	r2, [pc, #300]	; (80025f4 <MX_GPIO_Init+0x14c>)
 80024c8:	f043 0304 	orr.w	r3, r3, #4
 80024cc:	6313      	str	r3, [r2, #48]	; 0x30
 80024ce:	4b49      	ldr	r3, [pc, #292]	; (80025f4 <MX_GPIO_Init+0x14c>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	f003 0304 	and.w	r3, r3, #4
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	4b45      	ldr	r3, [pc, #276]	; (80025f4 <MX_GPIO_Init+0x14c>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	4a44      	ldr	r2, [pc, #272]	; (80025f4 <MX_GPIO_Init+0x14c>)
 80024e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024e8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ea:	4b42      	ldr	r3, [pc, #264]	; (80025f4 <MX_GPIO_Init+0x14c>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	4b3e      	ldr	r3, [pc, #248]	; (80025f4 <MX_GPIO_Init+0x14c>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	4a3d      	ldr	r2, [pc, #244]	; (80025f4 <MX_GPIO_Init+0x14c>)
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	6313      	str	r3, [r2, #48]	; 0x30
 8002506:	4b3b      	ldr	r3, [pc, #236]	; (80025f4 <MX_GPIO_Init+0x14c>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	60bb      	str	r3, [r7, #8]
 8002510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	607b      	str	r3, [r7, #4]
 8002516:	4b37      	ldr	r3, [pc, #220]	; (80025f4 <MX_GPIO_Init+0x14c>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	4a36      	ldr	r2, [pc, #216]	; (80025f4 <MX_GPIO_Init+0x14c>)
 800251c:	f043 0302 	orr.w	r3, r3, #2
 8002520:	6313      	str	r3, [r2, #48]	; 0x30
 8002522:	4b34      	ldr	r3, [pc, #208]	; (80025f4 <MX_GPIO_Init+0x14c>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	607b      	str	r3, [r7, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	603b      	str	r3, [r7, #0]
 8002532:	4b30      	ldr	r3, [pc, #192]	; (80025f4 <MX_GPIO_Init+0x14c>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	4a2f      	ldr	r2, [pc, #188]	; (80025f4 <MX_GPIO_Init+0x14c>)
 8002538:	f043 0308 	orr.w	r3, r3, #8
 800253c:	6313      	str	r3, [r2, #48]	; 0x30
 800253e:	4b2d      	ldr	r3, [pc, #180]	; (80025f4 <MX_GPIO_Init+0x14c>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800254a:	2200      	movs	r2, #0
 800254c:	2120      	movs	r1, #32
 800254e:	482a      	ldr	r0, [pc, #168]	; (80025f8 <MX_GPIO_Init+0x150>)
 8002550:	f003 fa96 	bl	8005a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002554:	2200      	movs	r2, #0
 8002556:	2101      	movs	r1, #1
 8002558:	4828      	ldr	r0, [pc, #160]	; (80025fc <MX_GPIO_Init+0x154>)
 800255a:	f003 fa91 	bl	8005a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800255e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002564:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800256e:	f107 0314 	add.w	r3, r7, #20
 8002572:	4619      	mov	r1, r3
 8002574:	4822      	ldr	r0, [pc, #136]	; (8002600 <MX_GPIO_Init+0x158>)
 8002576:	f003 f8ef 	bl	8005758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800257a:	230c      	movs	r3, #12
 800257c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257e:	2302      	movs	r3, #2
 8002580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002586:	2303      	movs	r3, #3
 8002588:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800258a:	2307      	movs	r3, #7
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258e:	f107 0314 	add.w	r3, r7, #20
 8002592:	4619      	mov	r1, r3
 8002594:	4818      	ldr	r0, [pc, #96]	; (80025f8 <MX_GPIO_Init+0x150>)
 8002596:	f003 f8df 	bl	8005758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800259a:	2320      	movs	r3, #32
 800259c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800259e:	2301      	movs	r3, #1
 80025a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a6:	2300      	movs	r3, #0
 80025a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80025aa:	f107 0314 	add.w	r3, r7, #20
 80025ae:	4619      	mov	r1, r3
 80025b0:	4811      	ldr	r0, [pc, #68]	; (80025f8 <MX_GPIO_Init+0x150>)
 80025b2:	f003 f8d1 	bl	8005758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80025b6:	2320      	movs	r3, #32
 80025b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025ba:	2303      	movs	r3, #3
 80025bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025c2:	f107 0314 	add.w	r3, r7, #20
 80025c6:	4619      	mov	r1, r3
 80025c8:	480d      	ldr	r0, [pc, #52]	; (8002600 <MX_GPIO_Init+0x158>)
 80025ca:	f003 f8c5 	bl	8005758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80025ce:	2301      	movs	r3, #1
 80025d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d2:	2301      	movs	r3, #1
 80025d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025da:	2300      	movs	r3, #0
 80025dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025de:	f107 0314 	add.w	r3, r7, #20
 80025e2:	4619      	mov	r1, r3
 80025e4:	4805      	ldr	r0, [pc, #20]	; (80025fc <MX_GPIO_Init+0x154>)
 80025e6:	f003 f8b7 	bl	8005758 <HAL_GPIO_Init>

}
 80025ea:	bf00      	nop
 80025ec:	3728      	adds	r7, #40	; 0x28
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40020000 	.word	0x40020000
 80025fc:	40020400 	.word	0x40020400
 8002600:	40020800 	.word	0x40020800

08002604 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002608:	4b12      	ldr	r3, [pc, #72]	; (8002654 <MX_I2C1_Init+0x50>)
 800260a:	4a13      	ldr	r2, [pc, #76]	; (8002658 <MX_I2C1_Init+0x54>)
 800260c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800260e:	4b11      	ldr	r3, [pc, #68]	; (8002654 <MX_I2C1_Init+0x50>)
 8002610:	4a12      	ldr	r2, [pc, #72]	; (800265c <MX_I2C1_Init+0x58>)
 8002612:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002614:	4b0f      	ldr	r3, [pc, #60]	; (8002654 <MX_I2C1_Init+0x50>)
 8002616:	2200      	movs	r2, #0
 8002618:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800261a:	4b0e      	ldr	r3, [pc, #56]	; (8002654 <MX_I2C1_Init+0x50>)
 800261c:	2200      	movs	r2, #0
 800261e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002620:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <MX_I2C1_Init+0x50>)
 8002622:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002626:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002628:	4b0a      	ldr	r3, [pc, #40]	; (8002654 <MX_I2C1_Init+0x50>)
 800262a:	2200      	movs	r2, #0
 800262c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800262e:	4b09      	ldr	r3, [pc, #36]	; (8002654 <MX_I2C1_Init+0x50>)
 8002630:	2200      	movs	r2, #0
 8002632:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002634:	4b07      	ldr	r3, [pc, #28]	; (8002654 <MX_I2C1_Init+0x50>)
 8002636:	2200      	movs	r2, #0
 8002638:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800263a:	4b06      	ldr	r3, [pc, #24]	; (8002654 <MX_I2C1_Init+0x50>)
 800263c:	2200      	movs	r2, #0
 800263e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002640:	4804      	ldr	r0, [pc, #16]	; (8002654 <MX_I2C1_Init+0x50>)
 8002642:	f003 fa37 	bl	8005ab4 <HAL_I2C_Init>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800264c:	f000 fb34 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002650:	bf00      	nop
 8002652:	bd80      	pop	{r7, pc}
 8002654:	20005c2c 	.word	0x20005c2c
 8002658:	40005400 	.word	0x40005400
 800265c:	000186a0 	.word	0x000186a0

08002660 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b08a      	sub	sp, #40	; 0x28
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002668:	f107 0314 	add.w	r3, r7, #20
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a19      	ldr	r2, [pc, #100]	; (80026e4 <HAL_I2C_MspInit+0x84>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d12c      	bne.n	80026dc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	4b18      	ldr	r3, [pc, #96]	; (80026e8 <HAL_I2C_MspInit+0x88>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	4a17      	ldr	r2, [pc, #92]	; (80026e8 <HAL_I2C_MspInit+0x88>)
 800268c:	f043 0302 	orr.w	r3, r3, #2
 8002690:	6313      	str	r3, [r2, #48]	; 0x30
 8002692:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <HAL_I2C_MspInit+0x88>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800269e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026a4:	2312      	movs	r3, #18
 80026a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ac:	2303      	movs	r3, #3
 80026ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026b0:	2304      	movs	r3, #4
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	4619      	mov	r1, r3
 80026ba:	480c      	ldr	r0, [pc, #48]	; (80026ec <HAL_I2C_MspInit+0x8c>)
 80026bc:	f003 f84c 	bl	8005758 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026c0:	2300      	movs	r3, #0
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <HAL_I2C_MspInit+0x88>)
 80026c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c8:	4a07      	ldr	r2, [pc, #28]	; (80026e8 <HAL_I2C_MspInit+0x88>)
 80026ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026ce:	6413      	str	r3, [r2, #64]	; 0x40
 80026d0:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <HAL_I2C_MspInit+0x88>)
 80026d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80026dc:	bf00      	nop
 80026de:	3728      	adds	r7, #40	; 0x28
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40005400 	.word	0x40005400
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40020400 	.word	0x40020400

080026f0 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80026fa:	4a38      	ldr	r2, [pc, #224]	; (80027dc <HD44780_Init+0xec>)
 80026fc:	79fb      	ldrb	r3, [r7, #7]
 80026fe:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8002700:	4b37      	ldr	r3, [pc, #220]	; (80027e0 <HD44780_Init+0xf0>)
 8002702:	2208      	movs	r2, #8
 8002704:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8002706:	4b37      	ldr	r3, [pc, #220]	; (80027e4 <HD44780_Init+0xf4>)
 8002708:	2200      	movs	r2, #0
 800270a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800270c:	4b33      	ldr	r3, [pc, #204]	; (80027dc <HD44780_Init+0xec>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d907      	bls.n	8002724 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8002714:	4b33      	ldr	r3, [pc, #204]	; (80027e4 <HD44780_Init+0xf4>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	f043 0308 	orr.w	r3, r3, #8
 800271c:	b2da      	uxtb	r2, r3
 800271e:	4b31      	ldr	r3, [pc, #196]	; (80027e4 <HD44780_Init+0xf4>)
 8002720:	701a      	strb	r2, [r3, #0]
 8002722:	e006      	b.n	8002732 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8002724:	4b2f      	ldr	r3, [pc, #188]	; (80027e4 <HD44780_Init+0xf4>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	f043 0304 	orr.w	r3, r3, #4
 800272c:	b2da      	uxtb	r2, r3
 800272e:	4b2d      	ldr	r3, [pc, #180]	; (80027e4 <HD44780_Init+0xf4>)
 8002730:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8002732:	f000 f99b 	bl	8002a6c <DelayInit>
  osDelay(50);
 8002736:	2032      	movs	r0, #50	; 0x32
 8002738:	f011 ff70 	bl	801461c <osDelay>

  ExpanderWrite(dpBacklight);
 800273c:	4b28      	ldr	r3, [pc, #160]	; (80027e0 <HD44780_Init+0xf0>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f000 f959 	bl	80029f8 <ExpanderWrite>
  osDelay(1000);
 8002746:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800274a:	f011 ff67 	bl	801461c <osDelay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800274e:	2030      	movs	r0, #48	; 0x30
 8002750:	f000 f941 	bl	80029d6 <Write4Bits>
  DelayUS(4500);
 8002754:	f241 1094 	movw	r0, #4500	; 0x1194
 8002758:	f000 f9b2 	bl	8002ac0 <DelayUS>

  Write4Bits(0x03 << 4);
 800275c:	2030      	movs	r0, #48	; 0x30
 800275e:	f000 f93a 	bl	80029d6 <Write4Bits>
  DelayUS(4500);
 8002762:	f241 1094 	movw	r0, #4500	; 0x1194
 8002766:	f000 f9ab 	bl	8002ac0 <DelayUS>

  Write4Bits(0x03 << 4);
 800276a:	2030      	movs	r0, #48	; 0x30
 800276c:	f000 f933 	bl	80029d6 <Write4Bits>
  DelayUS(4500);
 8002770:	f241 1094 	movw	r0, #4500	; 0x1194
 8002774:	f000 f9a4 	bl	8002ac0 <DelayUS>

  Write4Bits(0x02 << 4);
 8002778:	2020      	movs	r0, #32
 800277a:	f000 f92c 	bl	80029d6 <Write4Bits>
  DelayUS(100);
 800277e:	2064      	movs	r0, #100	; 0x64
 8002780:	f000 f99e 	bl	8002ac0 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8002784:	4b17      	ldr	r3, [pc, #92]	; (80027e4 <HD44780_Init+0xf4>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	f043 0320 	orr.w	r3, r3, #32
 800278c:	b2db      	uxtb	r3, r3
 800278e:	4618      	mov	r0, r3
 8002790:	f000 f8e4 	bl	800295c <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8002794:	4b14      	ldr	r3, [pc, #80]	; (80027e8 <HD44780_Init+0xf8>)
 8002796:	2204      	movs	r2, #4
 8002798:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800279a:	f000 f875 	bl	8002888 <HD44780_Display>
  HD44780_Clear();
 800279e:	f000 f82b 	bl	80027f8 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80027a2:	4b12      	ldr	r3, [pc, #72]	; (80027ec <HD44780_Init+0xfc>)
 80027a4:	2202      	movs	r2, #2
 80027a6:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80027a8:	4b10      	ldr	r3, [pc, #64]	; (80027ec <HD44780_Init+0xfc>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	f043 0304 	orr.w	r3, r3, #4
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 f8d2 	bl	800295c <SendCommand>
  DelayUS(4500);
 80027b8:	f241 1094 	movw	r0, #4500	; 0x1194
 80027bc:	f000 f980 	bl	8002ac0 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80027c0:	490b      	ldr	r1, [pc, #44]	; (80027f0 <HD44780_Init+0x100>)
 80027c2:	2000      	movs	r0, #0
 80027c4:	f000 f88c 	bl	80028e0 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80027c8:	490a      	ldr	r1, [pc, #40]	; (80027f4 <HD44780_Init+0x104>)
 80027ca:	2001      	movs	r0, #1
 80027cc:	f000 f888 	bl	80028e0 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80027d0:	f000 f81d 	bl	800280e <HD44780_Home>
}
 80027d4:	bf00      	nop
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	20005c83 	.word	0x20005c83
 80027e0:	20005c84 	.word	0x20005c84
 80027e4:	20005c80 	.word	0x20005c80
 80027e8:	20005c81 	.word	0x20005c81
 80027ec:	20005c82 	.word	0x20005c82
 80027f0:	20000004 	.word	0x20000004
 80027f4:	2000000c 	.word	0x2000000c

080027f8 <HD44780_Clear>:

void HD44780_Clear()
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80027fc:	2001      	movs	r0, #1
 80027fe:	f000 f8ad 	bl	800295c <SendCommand>
  DelayUS(2000);
 8002802:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002806:	f000 f95b 	bl	8002ac0 <DelayUS>
}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}

0800280e <HD44780_Home>:

void HD44780_Home()
{
 800280e:	b580      	push	{r7, lr}
 8002810:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8002812:	2002      	movs	r0, #2
 8002814:	f000 f8a2 	bl	800295c <SendCommand>
  DelayUS(2000);
 8002818:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800281c:	f000 f950 	bl	8002ac0 <DelayUS>
}
 8002820:	bf00      	nop
 8002822:	bd80      	pop	{r7, pc}

08002824 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8002824:	b590      	push	{r4, r7, lr}
 8002826:	b087      	sub	sp, #28
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	460a      	mov	r2, r1
 800282e:	71fb      	strb	r3, [r7, #7]
 8002830:	4613      	mov	r3, r2
 8002832:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8002834:	4b12      	ldr	r3, [pc, #72]	; (8002880 <HD44780_SetCursor+0x5c>)
 8002836:	f107 0408 	add.w	r4, r7, #8
 800283a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800283c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8002840:	4b10      	ldr	r3, [pc, #64]	; (8002884 <HD44780_SetCursor+0x60>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	79ba      	ldrb	r2, [r7, #6]
 8002846:	429a      	cmp	r2, r3
 8002848:	d303      	bcc.n	8002852 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800284a:	4b0e      	ldr	r3, [pc, #56]	; (8002884 <HD44780_SetCursor+0x60>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	3b01      	subs	r3, #1
 8002850:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8002852:	79bb      	ldrb	r3, [r7, #6]
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	3318      	adds	r3, #24
 8002858:	443b      	add	r3, r7
 800285a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800285e:	b2da      	uxtb	r2, r3
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	4413      	add	r3, r2
 8002864:	b2db      	uxtb	r3, r3
 8002866:	b25b      	sxtb	r3, r3
 8002868:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800286c:	b25b      	sxtb	r3, r3
 800286e:	b2db      	uxtb	r3, r3
 8002870:	4618      	mov	r0, r3
 8002872:	f000 f873 	bl	800295c <SendCommand>
}
 8002876:	bf00      	nop
 8002878:	371c      	adds	r7, #28
 800287a:	46bd      	mov	sp, r7
 800287c:	bd90      	pop	{r4, r7, pc}
 800287e:	bf00      	nop
 8002880:	0801a924 	.word	0x0801a924
 8002884:	20005c83 	.word	0x20005c83

08002888 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 800288c:	4b08      	ldr	r3, [pc, #32]	; (80028b0 <HD44780_Display+0x28>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	f043 0304 	orr.w	r3, r3, #4
 8002894:	b2da      	uxtb	r2, r3
 8002896:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <HD44780_Display+0x28>)
 8002898:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800289a:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <HD44780_Display+0x28>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	f043 0308 	orr.w	r3, r3, #8
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	4618      	mov	r0, r3
 80028a6:	f000 f859 	bl	800295c <SendCommand>
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20005c81 	.word	0x20005c81

080028b4 <HD44780_NoBlink>:
  dpControl |= LCD_CURSORON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_NoBlink()
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_BLINKON;
 80028b8:	4b08      	ldr	r3, [pc, #32]	; (80028dc <HD44780_NoBlink+0x28>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	f023 0301 	bic.w	r3, r3, #1
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	4b06      	ldr	r3, [pc, #24]	; (80028dc <HD44780_NoBlink+0x28>)
 80028c4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80028c6:	4b05      	ldr	r3, [pc, #20]	; (80028dc <HD44780_NoBlink+0x28>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	f043 0308 	orr.w	r3, r3, #8
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	4618      	mov	r0, r3
 80028d2:	f000 f843 	bl	800295c <SendCommand>
}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20005c81 	.word	0x20005c81

080028e0 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	6039      	str	r1, [r7, #0]
 80028ea:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	b25b      	sxtb	r3, r3
 80028fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028fe:	b25b      	sxtb	r3, r3
 8002900:	b2db      	uxtb	r3, r3
 8002902:	4618      	mov	r0, r3
 8002904:	f000 f82a 	bl	800295c <SendCommand>
  for (int i=0; i<8; i++)
 8002908:	2300      	movs	r3, #0
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	e009      	b.n	8002922 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	4413      	add	r3, r2
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f000 f82e 	bl	8002978 <SendChar>
  for (int i=0; i<8; i++)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	3301      	adds	r3, #1
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2b07      	cmp	r3, #7
 8002926:	ddf2      	ble.n	800290e <HD44780_CreateSpecialChar+0x2e>
  }
}
 8002928:	bf00      	nop
 800292a:	bf00      	nop
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b082      	sub	sp, #8
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800293a:	e006      	b.n	800294a <HD44780_PrintStr+0x18>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	607a      	str	r2, [r7, #4]
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f000 f817 	bl	8002978 <SendChar>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f4      	bne.n	800293c <HD44780_PrintStr+0xa>
}
 8002952:	bf00      	nop
 8002954:	bf00      	nop
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8002966:	79fb      	ldrb	r3, [r7, #7]
 8002968:	2100      	movs	r1, #0
 800296a:	4618      	mov	r0, r3
 800296c:	f000 f812 	bl	8002994 <Send>
}
 8002970:	bf00      	nop
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <SendChar>:

static void SendChar(uint8_t ch)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	2101      	movs	r1, #1
 8002986:	4618      	mov	r0, r3
 8002988:	f000 f804 	bl	8002994 <Send>
}
 800298c:	bf00      	nop
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	460a      	mov	r2, r1
 800299e:	71fb      	strb	r3, [r7, #7]
 80029a0:	4613      	mov	r3, r2
 80029a2:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	f023 030f 	bic.w	r3, r3, #15
 80029aa:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80029b2:	7bfa      	ldrb	r2, [r7, #15]
 80029b4:	79bb      	ldrb	r3, [r7, #6]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 f80b 	bl	80029d6 <Write4Bits>
  Write4Bits((lownib)|mode);
 80029c0:	7bba      	ldrb	r2, [r7, #14]
 80029c2:	79bb      	ldrb	r3, [r7, #6]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 f804 	bl	80029d6 <Write4Bits>
}
 80029ce:	bf00      	nop
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b082      	sub	sp, #8
 80029da:	af00      	add	r7, sp, #0
 80029dc:	4603      	mov	r3, r0
 80029de:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80029e0:	79fb      	ldrb	r3, [r7, #7]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 f808 	bl	80029f8 <ExpanderWrite>
  PulseEnable(value);
 80029e8:	79fb      	ldrb	r3, [r7, #7]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 f820 	bl	8002a30 <PulseEnable>
}
 80029f0:	bf00      	nop
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af02      	add	r7, sp, #8
 80029fe:	4603      	mov	r3, r0
 8002a00:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8002a02:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <ExpanderWrite+0x30>)
 8002a04:	781a      	ldrb	r2, [r3, #0]
 8002a06:	79fb      	ldrb	r3, [r7, #7]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8002a0e:	f107 020f 	add.w	r2, r7, #15
 8002a12:	230a      	movs	r3, #10
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	2301      	movs	r3, #1
 8002a18:	214e      	movs	r1, #78	; 0x4e
 8002a1a:	4804      	ldr	r0, [pc, #16]	; (8002a2c <ExpanderWrite+0x34>)
 8002a1c:	f003 f98e 	bl	8005d3c <HAL_I2C_Master_Transmit>
}
 8002a20:	bf00      	nop
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	20005c84 	.word	0x20005c84
 8002a2c:	20005c2c 	.word	0x20005c2c

08002a30 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	f043 0304 	orr.w	r3, r3, #4
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff ffd8 	bl	80029f8 <ExpanderWrite>
  DelayUS(20);
 8002a48:	2014      	movs	r0, #20
 8002a4a:	f000 f839 	bl	8002ac0 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
 8002a50:	f023 0304 	bic.w	r3, r3, #4
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff ffce 	bl	80029f8 <ExpanderWrite>
  DelayUS(20);
 8002a5c:	2014      	movs	r0, #20
 8002a5e:	f000 f82f 	bl	8002ac0 <DelayUS>
}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
	...

08002a6c <DelayInit>:

static void DelayInit(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8002a70:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <DelayInit+0x4c>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	4a10      	ldr	r2, [pc, #64]	; (8002ab8 <DelayInit+0x4c>)
 8002a76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a7a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8002a7c:	4b0e      	ldr	r3, [pc, #56]	; (8002ab8 <DelayInit+0x4c>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	4a0d      	ldr	r2, [pc, #52]	; (8002ab8 <DelayInit+0x4c>)
 8002a82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a86:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8002a88:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <DelayInit+0x50>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a0b      	ldr	r2, [pc, #44]	; (8002abc <DelayInit+0x50>)
 8002a8e:	f023 0301 	bic.w	r3, r3, #1
 8002a92:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8002a94:	4b09      	ldr	r3, [pc, #36]	; (8002abc <DelayInit+0x50>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a08      	ldr	r2, [pc, #32]	; (8002abc <DelayInit+0x50>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8002aa0:	4b06      	ldr	r3, [pc, #24]	; (8002abc <DelayInit+0x50>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8002aa6:	bf00      	nop
  __ASM volatile ("NOP");
 8002aa8:	bf00      	nop
  __ASM volatile ("NOP");
 8002aaa:	bf00      	nop
}
 8002aac:	bf00      	nop
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	e000edf0 	.word	0xe000edf0
 8002abc:	e0001000 	.word	0xe0001000

08002ac0 <DelayUS>:

static void DelayUS(uint32_t us) {
 8002ac0:	b480      	push	{r7}
 8002ac2:	b087      	sub	sp, #28
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8002ac8:	4b0e      	ldr	r3, [pc, #56]	; (8002b04 <DelayUS+0x44>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a0e      	ldr	r2, [pc, #56]	; (8002b08 <DelayUS+0x48>)
 8002ace:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad2:	0c9a      	lsrs	r2, r3, #18
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	fb02 f303 	mul.w	r3, r2, r3
 8002ada:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8002adc:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <DelayUS+0x4c>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8002ae2:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <DelayUS+0x4c>)
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d8f6      	bhi.n	8002ae2 <DelayUS+0x22>
}
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop
 8002af8:	371c      	adds	r7, #28
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	20000014 	.word	0x20000014
 8002b08:	431bde83 	.word	0x431bde83
 8002b0c:	e0001000 	.word	0xe0001000

08002b10 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002b18:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002b1c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d013      	beq.n	8002b50 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002b28:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002b2c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002b30:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00b      	beq.n	8002b50 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002b38:	e000      	b.n	8002b3c <ITM_SendChar+0x2c>
    {
      __NOP();
 8002b3a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002b3c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0f9      	beq.n	8002b3a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002b46:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002b50:	687b      	ldr	r3, [r7, #4]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff ffd1 	bl	8002b10 <ITM_SendChar>
	return (ch);
 8002b6e:	687b      	ldr	r3, [r7, #4]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b7c:	f001 fc5c 	bl	8004438 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b80:	f000 f81c 	bl	8002bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b84:	f7ff fc90 	bl	80024a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b88:	f7fe fdae 	bl	80016e8 <MX_DMA_Init>
  MX_SPI2_Init();
 8002b8c:	f000 fbee 	bl	800336c <MX_SPI2_Init>
  MX_FATFS_Init();
 8002b90:	f00b fb1c 	bl	800e1cc <MX_FATFS_Init>
  MX_TIM6_Init();
 8002b94:	f000 fef4 	bl	8003980 <MX_TIM6_Init>
  MX_TIM8_Init();
 8002b98:	f000 ff28 	bl	80039ec <MX_TIM8_Init>
  MX_TIM2_Init();
 8002b9c:	f000 fe7e 	bl	800389c <MX_TIM2_Init>
  MX_ADC2_Init();
 8002ba0:	f7fe fc10 	bl	80013c4 <MX_ADC2_Init>
  MX_ADC3_Init();
 8002ba4:	f7fe fc8a 	bl	80014bc <MX_ADC3_Init>
  MX_I2C1_Init();
 8002ba8:	f7ff fd2c 	bl	8002604 <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 8002bac:	f000 fb08 	bl	80031c0 <MX_SDIO_SD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002bb0:	f7ff faae 	bl	8002110 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002bb4:	f011 fccf 	bl	8014556 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8002bb8:	e7fe      	b.n	8002bb8 <main+0x40>
	...

08002bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b094      	sub	sp, #80	; 0x50
 8002bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bc2:	f107 031c 	add.w	r3, r7, #28
 8002bc6:	2234      	movs	r2, #52	; 0x34
 8002bc8:	2100      	movs	r1, #0
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f015 fcf8 	bl	80185c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bd0:	f107 0308 	add.w	r3, r7, #8
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002be0:	2300      	movs	r3, #0
 8002be2:	607b      	str	r3, [r7, #4]
 8002be4:	4b29      	ldr	r3, [pc, #164]	; (8002c8c <SystemClock_Config+0xd0>)
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	4a28      	ldr	r2, [pc, #160]	; (8002c8c <SystemClock_Config+0xd0>)
 8002bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bee:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf0:	4b26      	ldr	r3, [pc, #152]	; (8002c8c <SystemClock_Config+0xd0>)
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf8:	607b      	str	r3, [r7, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	603b      	str	r3, [r7, #0]
 8002c00:	4b23      	ldr	r3, [pc, #140]	; (8002c90 <SystemClock_Config+0xd4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002c08:	4a21      	ldr	r2, [pc, #132]	; (8002c90 <SystemClock_Config+0xd4>)
 8002c0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	4b1f      	ldr	r3, [pc, #124]	; (8002c90 <SystemClock_Config+0xd4>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c18:	603b      	str	r3, [r7, #0]
 8002c1a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c24:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c26:	2302      	movs	r3, #2
 8002c28:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002c30:	2304      	movs	r3, #4
 8002c32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002c34:	2348      	movs	r3, #72	; 0x48
 8002c36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c38:	2302      	movs	r3, #2
 8002c3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002c40:	2302      	movs	r3, #2
 8002c42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c44:	f107 031c 	add.w	r3, r7, #28
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f006 f86b 	bl	8008d24 <HAL_RCC_OscConfig>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002c54:	f000 f830 	bl	8002cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c58:	230f      	movs	r3, #15
 8002c5a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c60:	2300      	movs	r3, #0
 8002c62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c6e:	f107 0308 	add.w	r3, r7, #8
 8002c72:	2102      	movs	r1, #2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f005 f9c3 	bl	8008000 <HAL_RCC_ClockConfig>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002c80:	f000 f81a 	bl	8002cb8 <Error_Handler>
  }
}
 8002c84:	bf00      	nop
 8002c86:	3750      	adds	r7, #80	; 0x50
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	40007000 	.word	0x40007000

08002c94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a04      	ldr	r2, [pc, #16]	; (8002cb4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d101      	bne.n	8002caa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002ca6:	f001 fbe9 	bl	800447c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002caa:	bf00      	nop
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40000400 	.word	0x40000400

08002cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cbc:	b672      	cpsid	i
}
 8002cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002cc0:	e7fe      	b.n	8002cc0 <Error_Handler+0x8>
	...

08002cc4 <menuSelector>:

/******************************************************************************
 * Function Definitions
 *******************************************************************************/
void menuSelector(button_t button)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af02      	add	r7, sp, #8
 8002cca:	4603      	mov	r3, r0
 8002ccc:	71fb      	strb	r3, [r7, #7]

	switch (selector)
 8002cce:	4bb8      	ldr	r3, [pc, #736]	; (8002fb0 <menuSelector+0x2ec>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b05      	cmp	r3, #5
 8002cd4:	f200 81d0 	bhi.w	8003078 <menuSelector+0x3b4>
 8002cd8:	a201      	add	r2, pc, #4	; (adr r2, 8002ce0 <menuSelector+0x1c>)
 8002cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cde:	bf00      	nop
 8002ce0:	08002cf9 	.word	0x08002cf9
 8002ce4:	08002db3 	.word	0x08002db3
 8002ce8:	08002e27 	.word	0x08002e27
 8002cec:	08002ee5 	.word	0x08002ee5
 8002cf0:	08002f37 	.word	0x08002f37
 8002cf4:	0800300d 	.word	0x0800300d
	{

	case (MENU_START):
		if (BUTTON_LEFT == button)
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	d121      	bne.n	8002d42 <menuSelector+0x7e>
		{
			HD44780_Clear();
 8002cfe:	f7ff fd7b 	bl	80027f8 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8002d02:	2100      	movs	r1, #0
 8002d04:	2000      	movs	r0, #0
 8002d06:	f7ff fd8d 	bl	8002824 <HD44780_SetCursor>
			HD44780_PrintStr("CALIB");
 8002d0a:	48aa      	ldr	r0, [pc, #680]	; (8002fb4 <menuSelector+0x2f0>)
 8002d0c:	f7ff fe11 	bl	8002932 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8002d10:	2101      	movs	r1, #1
 8002d12:	2000      	movs	r0, #0
 8002d14:	f7ff fd86 	bl	8002824 <HD44780_SetCursor>
			HD44780_PrintStr("LEFT");
 8002d18:	48a7      	ldr	r0, [pc, #668]	; (8002fb8 <menuSelector+0x2f4>)
 8002d1a:	f7ff fe0a 	bl	8002932 <HD44780_PrintStr>
			HD44780_SetCursor(10,0);
 8002d1e:	2100      	movs	r1, #0
 8002d20:	200a      	movs	r0, #10
 8002d22:	f7ff fd7f 	bl	8002824 <HD44780_SetCursor>
			HD44780_PrintStr("START");
 8002d26:	48a5      	ldr	r0, [pc, #660]	; (8002fbc <menuSelector+0x2f8>)
 8002d28:	f7ff fe03 	bl	8002932 <HD44780_PrintStr>
			HD44780_SetCursor(10,1);
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	200a      	movs	r0, #10
 8002d30:	f7ff fd78 	bl	8002824 <HD44780_SetCursor>
			HD44780_PrintStr("SELECT");
 8002d34:	48a2      	ldr	r0, [pc, #648]	; (8002fc0 <menuSelector+0x2fc>)
 8002d36:	f7ff fdfc 	bl	8002932 <HD44780_PrintStr>
			selector = MENU_SAG;
 8002d3a:	4b9d      	ldr	r3, [pc, #628]	; (8002fb0 <menuSelector+0x2ec>)
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	701a      	strb	r2, [r3, #0]
 8002d40:	e034      	b.n	8002dac <menuSelector+0xe8>

		}
		else if (BUTTON_RIGHT == button)
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d113      	bne.n	8002d70 <menuSelector+0xac>
		{
			HD44780_Clear();
 8002d48:	f7ff fd56 	bl	80027f8 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	2000      	movs	r0, #0
 8002d50:	f7ff fd68 	bl	8002824 <HD44780_SetCursor>
			HD44780_PrintStr("START MESSURE");
 8002d54:	489b      	ldr	r0, [pc, #620]	; (8002fc4 <menuSelector+0x300>)
 8002d56:	f7ff fdec 	bl	8002932 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	f7ff fd61 	bl	8002824 <HD44780_SetCursor>
			HD44780_PrintStr("SELECT");
 8002d62:	4897      	ldr	r0, [pc, #604]	; (8002fc0 <menuSelector+0x2fc>)
 8002d64:	f7ff fde5 	bl	8002932 <HD44780_PrintStr>
			selector = MENU_MEASURMENT;
 8002d68:	4b91      	ldr	r3, [pc, #580]	; (8002fb0 <menuSelector+0x2ec>)
 8002d6a:	2204      	movs	r2, #4
 8002d6c:	701a      	strb	r2, [r3, #0]
 8002d6e:	e01d      	b.n	8002dac <menuSelector+0xe8>

		}
		else
		{
				 HD44780_Clear();
 8002d70:	f7ff fd42 	bl	80027f8 <HD44780_Clear>
				 HD44780_SetCursor(0,0);
 8002d74:	2100      	movs	r1, #0
 8002d76:	2000      	movs	r0, #0
 8002d78:	f7ff fd54 	bl	8002824 <HD44780_SetCursor>
				 HD44780_PrintStr("SAG");
 8002d7c:	4892      	ldr	r0, [pc, #584]	; (8002fc8 <menuSelector+0x304>)
 8002d7e:	f7ff fdd8 	bl	8002932 <HD44780_PrintStr>
				 HD44780_SetCursor(0,1);
 8002d82:	2101      	movs	r1, #1
 8002d84:	2000      	movs	r0, #0
 8002d86:	f7ff fd4d 	bl	8002824 <HD44780_SetCursor>
				 HD44780_PrintStr("LEFT");
 8002d8a:	488b      	ldr	r0, [pc, #556]	; (8002fb8 <menuSelector+0x2f4>)
 8002d8c:	f7ff fdd1 	bl	8002932 <HD44780_PrintStr>
				 HD44780_SetCursor(9,0);
 8002d90:	2100      	movs	r1, #0
 8002d92:	2009      	movs	r0, #9
 8002d94:	f7ff fd46 	bl	8002824 <HD44780_SetCursor>
				 HD44780_PrintStr("MESSURE");
 8002d98:	488c      	ldr	r0, [pc, #560]	; (8002fcc <menuSelector+0x308>)
 8002d9a:	f7ff fdca 	bl	8002932 <HD44780_PrintStr>
				 HD44780_SetCursor(11,1);
 8002d9e:	2101      	movs	r1, #1
 8002da0:	200b      	movs	r0, #11
 8002da2:	f7ff fd3f 	bl	8002824 <HD44780_SetCursor>
				 HD44780_PrintStr("RIGHT");
 8002da6:	488a      	ldr	r0, [pc, #552]	; (8002fd0 <menuSelector+0x30c>)
 8002da8:	f7ff fdc3 	bl	8002932 <HD44780_PrintStr>
		}
		stopAdcDma();
 8002dac:	f000 ff28 	bl	8003c00 <stopAdcDma>
		break;
 8002db0:	e162      	b.n	8003078 <menuSelector+0x3b4>

	case (MENU_SAG):
		if (BUTTON_SELECT == button)
 8002db2:	79fb      	ldrb	r3, [r7, #7]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10a      	bne.n	8002dce <menuSelector+0x10a>
		{
			startAdcDma();
 8002db8:	f000 ff02 	bl	8003bc0 <startAdcDma>
			HD44780_Clear();
 8002dbc:	f7ff fd1c 	bl	80027f8 <HD44780_Clear>
			selector = MENU_SAG_START;
 8002dc0:	4b7b      	ldr	r3, [pc, #492]	; (8002fb0 <menuSelector+0x2ec>)
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	701a      	strb	r2, [r3, #0]
			puts("pomiar rozpoczety, kliknij select aby zakonczyc\n");
 8002dc6:	4883      	ldr	r0, [pc, #524]	; (8002fd4 <menuSelector+0x310>)
 8002dc8:	f015 fafa 	bl	80183c0 <puts>
		}
		else
		{
			puts("nacisnij select aby rozpoczac pomiar\n");
		}
		break;
 8002dcc:	e154      	b.n	8003078 <menuSelector+0x3b4>
		else if (BUTTON_LEFT == button)
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	2b03      	cmp	r3, #3
 8002dd2:	d11d      	bne.n	8002e10 <menuSelector+0x14c>
			selector = MENU_CALIBRATION;
 8002dd4:	4b76      	ldr	r3, [pc, #472]	; (8002fb0 <menuSelector+0x2ec>)
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	701a      	strb	r2, [r3, #0]
			HD44780_Init(2);
 8002dda:	2002      	movs	r0, #2
 8002ddc:	f7ff fc88 	bl	80026f0 <HD44780_Init>
			HD44780_Clear();
 8002de0:	f7ff fd0a 	bl	80027f8 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8002de4:	2100      	movs	r1, #0
 8002de6:	2000      	movs	r0, #0
 8002de8:	f7ff fd1c 	bl	8002824 <HD44780_SetCursor>
			HD44780_PrintStr("CALIBRATION");
 8002dec:	487a      	ldr	r0, [pc, #488]	; (8002fd8 <menuSelector+0x314>)
 8002dee:	f7ff fda0 	bl	8002932 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8002df2:	2101      	movs	r1, #1
 8002df4:	2000      	movs	r0, #0
 8002df6:	f7ff fd15 	bl	8002824 <HD44780_SetCursor>
			HD44780_PrintStr("START");
 8002dfa:	4870      	ldr	r0, [pc, #448]	; (8002fbc <menuSelector+0x2f8>)
 8002dfc:	f7ff fd99 	bl	8002932 <HD44780_PrintStr>
			HD44780_SetCursor(10,1);
 8002e00:	2101      	movs	r1, #1
 8002e02:	200a      	movs	r0, #10
 8002e04:	f7ff fd0e 	bl	8002824 <HD44780_SetCursor>
			HD44780_PrintStr("SELECT");
 8002e08:	486d      	ldr	r0, [pc, #436]	; (8002fc0 <menuSelector+0x2fc>)
 8002e0a:	f7ff fd92 	bl	8002932 <HD44780_PrintStr>
		break;
 8002e0e:	e133      	b.n	8003078 <menuSelector+0x3b4>
		else if (BUTTON_RIGHT == button)
 8002e10:	79fb      	ldrb	r3, [r7, #7]
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d103      	bne.n	8002e1e <menuSelector+0x15a>
			selector = MENU_START;
 8002e16:	4b66      	ldr	r3, [pc, #408]	; (8002fb0 <menuSelector+0x2ec>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	701a      	strb	r2, [r3, #0]
		break;
 8002e1c:	e12c      	b.n	8003078 <menuSelector+0x3b4>
			puts("nacisnij select aby rozpoczac pomiar\n");
 8002e1e:	486f      	ldr	r0, [pc, #444]	; (8002fdc <menuSelector+0x318>)
 8002e20:	f015 face 	bl	80183c0 <puts>
		break;
 8002e24:	e128      	b.n	8003078 <menuSelector+0x3b4>
	case (MENU_CALIBRATION):
		if (BUTTON_SELECT == button)
 8002e26:	79fb      	ldrb	r3, [r7, #7]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d132      	bne.n	8002e92 <menuSelector+0x1ce>
		{
			startAdcDma();
 8002e2c:	f000 fec8 	bl	8003bc0 <startAdcDma>
			travelPressureSensorCalibration();
 8002e30:	f000 fefa 	bl	8003c28 <travelPressureSensorCalibration>
			HD44780_Clear();
 8002e34:	f7ff fce0 	bl	80027f8 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8002e38:	2100      	movs	r1, #0
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	f7ff fcf2 	bl	8002824 <HD44780_SetCursor>
			HD44780_PrintStr("CAL FINISH");
 8002e40:	4867      	ldr	r0, [pc, #412]	; (8002fe0 <menuSelector+0x31c>)
 8002e42:	f7ff fd76 	bl	8002932 <HD44780_PrintStr>
			osDelay(2000);
 8002e46:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002e4a:	f011 fbe7 	bl	801461c <osDelay>
			HD44780_Clear();
 8002e4e:	f7ff fcd3 	bl	80027f8 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8002e52:	2100      	movs	r1, #0
 8002e54:	2000      	movs	r0, #0
 8002e56:	f7ff fce5 	bl	8002824 <HD44780_SetCursor>
			HD44780_PrintStr("SAG");
 8002e5a:	485b      	ldr	r0, [pc, #364]	; (8002fc8 <menuSelector+0x304>)
 8002e5c:	f7ff fd69 	bl	8002932 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8002e60:	2101      	movs	r1, #1
 8002e62:	2000      	movs	r0, #0
 8002e64:	f7ff fcde 	bl	8002824 <HD44780_SetCursor>
			HD44780_PrintStr("LEFT");
 8002e68:	4853      	ldr	r0, [pc, #332]	; (8002fb8 <menuSelector+0x2f4>)
 8002e6a:	f7ff fd62 	bl	8002932 <HD44780_PrintStr>
			HD44780_SetCursor(9,0);
 8002e6e:	2100      	movs	r1, #0
 8002e70:	2009      	movs	r0, #9
 8002e72:	f7ff fcd7 	bl	8002824 <HD44780_SetCursor>
			HD44780_PrintStr("MESSURE");
 8002e76:	4855      	ldr	r0, [pc, #340]	; (8002fcc <menuSelector+0x308>)
 8002e78:	f7ff fd5b 	bl	8002932 <HD44780_PrintStr>
			HD44780_SetCursor(11,1);
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	200b      	movs	r0, #11
 8002e80:	f7ff fcd0 	bl	8002824 <HD44780_SetCursor>
			HD44780_PrintStr("RIGHT");
 8002e84:	4852      	ldr	r0, [pc, #328]	; (8002fd0 <menuSelector+0x30c>)
 8002e86:	f7ff fd54 	bl	8002932 <HD44780_PrintStr>
			selector = MENU_START;
 8002e8a:	4b49      	ldr	r3, [pc, #292]	; (8002fb0 <menuSelector+0x2ec>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			puts("nacisnij select aby rozpoczac pomiar\n");
		}
		break;
 8002e90:	e0f2      	b.n	8003078 <menuSelector+0x3b4>
		else if (BUTTON_RIGHT == button)
 8002e92:	79fb      	ldrb	r3, [r7, #7]
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	d121      	bne.n	8002edc <menuSelector+0x218>
			selector = MENU_START;
 8002e98:	4b45      	ldr	r3, [pc, #276]	; (8002fb0 <menuSelector+0x2ec>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	701a      	strb	r2, [r3, #0]
			HD44780_Clear();
 8002e9e:	f7ff fcab 	bl	80027f8 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	2000      	movs	r0, #0
 8002ea6:	f7ff fcbd 	bl	8002824 <HD44780_SetCursor>
			HD44780_PrintStr("SAG");
 8002eaa:	4847      	ldr	r0, [pc, #284]	; (8002fc8 <menuSelector+0x304>)
 8002eac:	f7ff fd41 	bl	8002932 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	2000      	movs	r0, #0
 8002eb4:	f7ff fcb6 	bl	8002824 <HD44780_SetCursor>
			HD44780_PrintStr("LEFT");
 8002eb8:	483f      	ldr	r0, [pc, #252]	; (8002fb8 <menuSelector+0x2f4>)
 8002eba:	f7ff fd3a 	bl	8002932 <HD44780_PrintStr>
			HD44780_SetCursor(9,0);
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	2009      	movs	r0, #9
 8002ec2:	f7ff fcaf 	bl	8002824 <HD44780_SetCursor>
			HD44780_PrintStr("MESSURE");
 8002ec6:	4841      	ldr	r0, [pc, #260]	; (8002fcc <menuSelector+0x308>)
 8002ec8:	f7ff fd33 	bl	8002932 <HD44780_PrintStr>
			HD44780_SetCursor(11,1);
 8002ecc:	2101      	movs	r1, #1
 8002ece:	200b      	movs	r0, #11
 8002ed0:	f7ff fca8 	bl	8002824 <HD44780_SetCursor>
			HD44780_PrintStr("RIGHT");
 8002ed4:	483e      	ldr	r0, [pc, #248]	; (8002fd0 <menuSelector+0x30c>)
 8002ed6:	f7ff fd2c 	bl	8002932 <HD44780_PrintStr>
		break;
 8002eda:	e0cd      	b.n	8003078 <menuSelector+0x3b4>
			puts("nacisnij select aby rozpoczac pomiar\n");
 8002edc:	483f      	ldr	r0, [pc, #252]	; (8002fdc <menuSelector+0x318>)
 8002ede:	f015 fa6f 	bl	80183c0 <puts>
		break;
 8002ee2:	e0c9      	b.n	8003078 <menuSelector+0x3b4>
	case (MENU_SAG_START):
		if (BUTTON_SELECT == button)
 8002ee4:	79fb      	ldrb	r3, [r7, #7]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d121      	bne.n	8002f2e <menuSelector+0x26a>
		{

			selector = MENU_START;
 8002eea:	4b31      	ldr	r3, [pc, #196]	; (8002fb0 <menuSelector+0x2ec>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	701a      	strb	r2, [r3, #0]
			HD44780_Clear();
 8002ef0:	f7ff fc82 	bl	80027f8 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	f7ff fc94 	bl	8002824 <HD44780_SetCursor>
			HD44780_PrintStr("SAG");
 8002efc:	4832      	ldr	r0, [pc, #200]	; (8002fc8 <menuSelector+0x304>)
 8002efe:	f7ff fd18 	bl	8002932 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8002f02:	2101      	movs	r1, #1
 8002f04:	2000      	movs	r0, #0
 8002f06:	f7ff fc8d 	bl	8002824 <HD44780_SetCursor>
			HD44780_PrintStr("LEFT");
 8002f0a:	482b      	ldr	r0, [pc, #172]	; (8002fb8 <menuSelector+0x2f4>)
 8002f0c:	f7ff fd11 	bl	8002932 <HD44780_PrintStr>
			HD44780_SetCursor(9,0);
 8002f10:	2100      	movs	r1, #0
 8002f12:	2009      	movs	r0, #9
 8002f14:	f7ff fc86 	bl	8002824 <HD44780_SetCursor>
			HD44780_PrintStr("MESSURE");
 8002f18:	482c      	ldr	r0, [pc, #176]	; (8002fcc <menuSelector+0x308>)
 8002f1a:	f7ff fd0a 	bl	8002932 <HD44780_PrintStr>
			HD44780_SetCursor(11,1);
 8002f1e:	2101      	movs	r1, #1
 8002f20:	200b      	movs	r0, #11
 8002f22:	f7ff fc7f 	bl	8002824 <HD44780_SetCursor>
			HD44780_PrintStr("RIGHT");
 8002f26:	482a      	ldr	r0, [pc, #168]	; (8002fd0 <menuSelector+0x30c>)
 8002f28:	f7ff fd03 	bl	8002932 <HD44780_PrintStr>
		}
		else
		{
			puts("nacisnij select aby wrocic do menu start");
		}
		break;
 8002f2c:	e0a4      	b.n	8003078 <menuSelector+0x3b4>
			puts("nacisnij select aby wrocic do menu start");
 8002f2e:	482d      	ldr	r0, [pc, #180]	; (8002fe4 <menuSelector+0x320>)
 8002f30:	f015 fa46 	bl	80183c0 <puts>
		break;
 8002f34:	e0a0      	b.n	8003078 <menuSelector+0x3b4>

	case (MENU_MEASURMENT):
		if (BUTTON_SELECT == button)
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d134      	bne.n	8002fa6 <menuSelector+0x2e2>
		{
			HD44780_Clear();
 8002f3c:	f7ff fc5c 	bl	80027f8 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8002f40:	2100      	movs	r1, #0
 8002f42:	2000      	movs	r0, #0
 8002f44:	f7ff fc6e 	bl	8002824 <HD44780_SetCursor>
			HD44780_PrintStr("STARTING");
 8002f48:	4827      	ldr	r0, [pc, #156]	; (8002fe8 <menuSelector+0x324>)
 8002f4a:	f7ff fcf2 	bl	8002932 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8002f4e:	2101      	movs	r1, #1
 8002f50:	2000      	movs	r0, #0
 8002f52:	f7ff fc67 	bl	8002824 <HD44780_SetCursor>
			HD44780_PrintStr("FINISH");
 8002f56:	4825      	ldr	r0, [pc, #148]	; (8002fec <menuSelector+0x328>)
 8002f58:	f7ff fceb 	bl	8002932 <HD44780_PrintStr>
			HD44780_SetCursor(10,1);
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	200a      	movs	r0, #10
 8002f60:	f7ff fc60 	bl	8002824 <HD44780_SetCursor>
			HD44780_PrintStr("SELECT");
 8002f64:	4816      	ldr	r0, [pc, #88]	; (8002fc0 <menuSelector+0x2fc>)
 8002f66:	f7ff fce4 	bl	8002932 <HD44780_PrintStr>
			setPath(dir, frontSensor, rearSensor, frontPressureSensor,
 8002f6a:	4b21      	ldr	r3, [pc, #132]	; (8002ff0 <menuSelector+0x32c>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	9301      	str	r3, [sp, #4]
 8002f70:	4b20      	ldr	r3, [pc, #128]	; (8002ff4 <menuSelector+0x330>)
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	4b20      	ldr	r3, [pc, #128]	; (8002ff8 <menuSelector+0x334>)
 8002f76:	4a21      	ldr	r2, [pc, #132]	; (8002ffc <menuSelector+0x338>)
 8002f78:	4921      	ldr	r1, [pc, #132]	; (8003000 <menuSelector+0x33c>)
 8002f7a:	4822      	ldr	r0, [pc, #136]	; (8003004 <menuSelector+0x340>)
 8002f7c:	f7fe f868 	bl	8001050 <setPath>
					rearPressureSensor, path);
			createNewFile(dir, frontSensor, rearSensor, frontPressureSensor,
 8002f80:	4b1b      	ldr	r3, [pc, #108]	; (8002ff0 <menuSelector+0x32c>)
 8002f82:	9301      	str	r3, [sp, #4]
 8002f84:	4b1b      	ldr	r3, [pc, #108]	; (8002ff4 <menuSelector+0x330>)
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	4b1b      	ldr	r3, [pc, #108]	; (8002ff8 <menuSelector+0x334>)
 8002f8a:	4a1c      	ldr	r2, [pc, #112]	; (8002ffc <menuSelector+0x338>)
 8002f8c:	491c      	ldr	r1, [pc, #112]	; (8003000 <menuSelector+0x33c>)
 8002f8e:	481d      	ldr	r0, [pc, #116]	; (8003004 <menuSelector+0x340>)
 8002f90:	f7fe f892 	bl	80010b8 <createNewFile>
					rearPressureSensor, &path);
			startAdcDma();
 8002f94:	f000 fe14 	bl	8003bc0 <startAdcDma>
			selector = MENU_MEASURMENT_START;
 8002f98:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <menuSelector+0x2ec>)
 8002f9a:	2205      	movs	r2, #5
 8002f9c:	701a      	strb	r2, [r3, #0]
			puts("pomiar ciagly rozpoczety, kliknij select aby zakonczyc\n");
 8002f9e:	481a      	ldr	r0, [pc, #104]	; (8003008 <menuSelector+0x344>)
 8002fa0:	f015 fa0e 	bl	80183c0 <puts>
		}
		else
		{
			puts("nacisnij select aby rozpoczac pomiar\n");
		}
		break;
 8002fa4:	e068      	b.n	8003078 <menuSelector+0x3b4>
			puts("nacisnij select aby rozpoczac pomiar\n");
 8002fa6:	480d      	ldr	r0, [pc, #52]	; (8002fdc <menuSelector+0x318>)
 8002fa8:	f015 fa0a 	bl	80183c0 <puts>
		break;
 8002fac:	e064      	b.n	8003078 <menuSelector+0x3b4>
 8002fae:	bf00      	nop
 8002fb0:	20005c85 	.word	0x20005c85
 8002fb4:	0801a934 	.word	0x0801a934
 8002fb8:	0801a93c 	.word	0x0801a93c
 8002fbc:	0801a944 	.word	0x0801a944
 8002fc0:	0801a94c 	.word	0x0801a94c
 8002fc4:	0801a954 	.word	0x0801a954
 8002fc8:	0801a964 	.word	0x0801a964
 8002fcc:	0801a968 	.word	0x0801a968
 8002fd0:	0801a970 	.word	0x0801a970
 8002fd4:	0801a978 	.word	0x0801a978
 8002fd8:	0801a9ac 	.word	0x0801a9ac
 8002fdc:	0801a9b8 	.word	0x0801a9b8
 8002fe0:	0801a9e0 	.word	0x0801a9e0
 8002fe4:	0801a9ec 	.word	0x0801a9ec
 8002fe8:	0801aa18 	.word	0x0801aa18
 8002fec:	0801aa24 	.word	0x0801aa24
 8002ff0:	20005c86 	.word	0x20005c86
 8002ff4:	20005cd8 	.word	0x20005cd8
 8002ff8:	20005cc4 	.word	0x20005cc4
 8002ffc:	20005cb0 	.word	0x20005cb0
 8003000:	20005c9c 	.word	0x20005c9c
 8003004:	20005c88 	.word	0x20005c88
 8003008:	0801aa2c 	.word	0x0801aa2c

	case (MENU_MEASURMENT_START):
		if (BUTTON_SELECT == button)
 800300c:	79fb      	ldrb	r3, [r7, #7]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d12e      	bne.n	8003070 <menuSelector+0x3ac>
		{

			HD44780_Clear();
 8003012:	f7ff fbf1 	bl	80027f8 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8003016:	2100      	movs	r1, #0
 8003018:	2000      	movs	r0, #0
 800301a:	f7ff fc03 	bl	8002824 <HD44780_SetCursor>
			HD44780_PrintStr("FINISHED");
 800301e:	4818      	ldr	r0, [pc, #96]	; (8003080 <menuSelector+0x3bc>)
 8003020:	f7ff fc87 	bl	8002932 <HD44780_PrintStr>
			osDelay(2000);
 8003024:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003028:	f011 faf8 	bl	801461c <osDelay>

			HD44780_Clear();
 800302c:	f7ff fbe4 	bl	80027f8 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8003030:	2100      	movs	r1, #0
 8003032:	2000      	movs	r0, #0
 8003034:	f7ff fbf6 	bl	8002824 <HD44780_SetCursor>
			HD44780_PrintStr("SAG");
 8003038:	4812      	ldr	r0, [pc, #72]	; (8003084 <menuSelector+0x3c0>)
 800303a:	f7ff fc7a 	bl	8002932 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 800303e:	2101      	movs	r1, #1
 8003040:	2000      	movs	r0, #0
 8003042:	f7ff fbef 	bl	8002824 <HD44780_SetCursor>
			HD44780_PrintStr("LEFT");
 8003046:	4810      	ldr	r0, [pc, #64]	; (8003088 <menuSelector+0x3c4>)
 8003048:	f7ff fc73 	bl	8002932 <HD44780_PrintStr>
			HD44780_SetCursor(9,0);
 800304c:	2100      	movs	r1, #0
 800304e:	2009      	movs	r0, #9
 8003050:	f7ff fbe8 	bl	8002824 <HD44780_SetCursor>
			HD44780_PrintStr("MESSURE");
 8003054:	480d      	ldr	r0, [pc, #52]	; (800308c <menuSelector+0x3c8>)
 8003056:	f7ff fc6c 	bl	8002932 <HD44780_PrintStr>
			HD44780_SetCursor(11,1);
 800305a:	2101      	movs	r1, #1
 800305c:	200b      	movs	r0, #11
 800305e:	f7ff fbe1 	bl	8002824 <HD44780_SetCursor>
			HD44780_PrintStr("RIGHT");
 8003062:	480b      	ldr	r0, [pc, #44]	; (8003090 <menuSelector+0x3cc>)
 8003064:	f7ff fc65 	bl	8002932 <HD44780_PrintStr>
			selector = MENU_START;
 8003068:	4b0a      	ldr	r3, [pc, #40]	; (8003094 <menuSelector+0x3d0>)
 800306a:	2200      	movs	r2, #0
 800306c:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			puts("nacisnij select aby wrocic do menu start");
		}
		break;
 800306e:	e002      	b.n	8003076 <menuSelector+0x3b2>
			puts("nacisnij select aby wrocic do menu start");
 8003070:	4809      	ldr	r0, [pc, #36]	; (8003098 <menuSelector+0x3d4>)
 8003072:	f015 f9a5 	bl	80183c0 <puts>
		break;
 8003076:	bf00      	nop

	default:
	}

}
 8003078:	bf00      	nop
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	0801aa64 	.word	0x0801aa64
 8003084:	0801a964 	.word	0x0801a964
 8003088:	0801a93c 	.word	0x0801a93c
 800308c:	0801a968 	.word	0x0801a968
 8003090:	0801a970 	.word	0x0801a970
 8003094:	20005c85 	.word	0x20005c85
 8003098:	0801a9ec 	.word	0x0801a9ec

0800309c <menuCalculateBlock>:
void menuCalculateBlock(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b08a      	sub	sp, #40	; 0x28
 80030a0:	af00      	add	r7, sp, #0
	switch (selector)
 80030a2:	4b3e      	ldr	r3, [pc, #248]	; (800319c <menuCalculateBlock+0x100>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b03      	cmp	r3, #3
 80030a8:	d002      	beq.n	80030b0 <menuCalculateBlock+0x14>
 80030aa:	2b05      	cmp	r3, #5
 80030ac:	d06b      	beq.n	8003186 <menuCalculateBlock+0xea>
				rearPressureSensor);
		break;
	default:
	}

}
 80030ae:	e071      	b.n	8003194 <menuCalculateBlock+0xf8>
		int16_t result[2] =
 80030b0:	2300      	movs	r3, #0
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24
		int16_t resultPressure[2] =
 80030b4:	2300      	movs	r3, #0
 80030b6:	623b      	str	r3, [r7, #32]
		char lcdFirstLineTravel[8] = {0};
 80030b8:	2300      	movs	r3, #0
 80030ba:	61bb      	str	r3, [r7, #24]
 80030bc:	2300      	movs	r3, #0
 80030be:	61fb      	str	r3, [r7, #28]
		char lcSecondLineTravel[8] = {0};
 80030c0:	2300      	movs	r3, #0
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]
		char lcdFirstLinePressure[8] = {0};
 80030c8:	2300      	movs	r3, #0
 80030ca:	60bb      	str	r3, [r7, #8]
 80030cc:	2300      	movs	r3, #0
 80030ce:	60fb      	str	r3, [r7, #12]
		char lcSecondLinePressure[8] = {0};
 80030d0:	2300      	movs	r3, #0
 80030d2:	603b      	str	r3, [r7, #0]
 80030d4:	2300      	movs	r3, #0
 80030d6:	607b      	str	r3, [r7, #4]
		processDataSag(result, resultPressure);
 80030d8:	f107 0220 	add.w	r2, r7, #32
 80030dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030e0:	4611      	mov	r1, r2
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 fe58 	bl	8003d98 <processDataSag>
		sprintf(lcdFirstLineTravel,"FT: %d", result[1]);
 80030e8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80030ec:	461a      	mov	r2, r3
 80030ee:	f107 0318 	add.w	r3, r7, #24
 80030f2:	492b      	ldr	r1, [pc, #172]	; (80031a0 <menuCalculateBlock+0x104>)
 80030f4:	4618      	mov	r0, r3
 80030f6:	f015 f96b 	bl	80183d0 <siprintf>
		sprintf(lcSecondLineTravel,"RT: %d", result[0]);
 80030fa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80030fe:	461a      	mov	r2, r3
 8003100:	f107 0310 	add.w	r3, r7, #16
 8003104:	4927      	ldr	r1, [pc, #156]	; (80031a4 <menuCalculateBlock+0x108>)
 8003106:	4618      	mov	r0, r3
 8003108:	f015 f962 	bl	80183d0 <siprintf>
		sprintf(lcdFirstLinePressure, "FP: %d", resultPressure[1]);
 800310c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8003110:	461a      	mov	r2, r3
 8003112:	f107 0308 	add.w	r3, r7, #8
 8003116:	4924      	ldr	r1, [pc, #144]	; (80031a8 <menuCalculateBlock+0x10c>)
 8003118:	4618      	mov	r0, r3
 800311a:	f015 f959 	bl	80183d0 <siprintf>
		sprintf(lcSecondLinePressure, "RP: %d", resultPressure[0]);
 800311e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003122:	461a      	mov	r2, r3
 8003124:	463b      	mov	r3, r7
 8003126:	4921      	ldr	r1, [pc, #132]	; (80031ac <menuCalculateBlock+0x110>)
 8003128:	4618      	mov	r0, r3
 800312a:	f015 f951 	bl	80183d0 <siprintf>
		HD44780_NoBlink();
 800312e:	f7ff fbc1 	bl	80028b4 <HD44780_NoBlink>
		HD44780_Clear();
 8003132:	f7ff fb61 	bl	80027f8 <HD44780_Clear>
		HD44780_SetCursor(0,0);
 8003136:	2100      	movs	r1, #0
 8003138:	2000      	movs	r0, #0
 800313a:	f7ff fb73 	bl	8002824 <HD44780_SetCursor>
		HD44780_PrintStr(lcdFirstLineTravel);
 800313e:	f107 0318 	add.w	r3, r7, #24
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff fbf5 	bl	8002932 <HD44780_PrintStr>
		HD44780_SetCursor(0,1);
 8003148:	2101      	movs	r1, #1
 800314a:	2000      	movs	r0, #0
 800314c:	f7ff fb6a 	bl	8002824 <HD44780_SetCursor>
		HD44780_PrintStr(lcSecondLineTravel);
 8003150:	f107 0310 	add.w	r3, r7, #16
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff fbec 	bl	8002932 <HD44780_PrintStr>
		HD44780_SetCursor(9,0);
 800315a:	2100      	movs	r1, #0
 800315c:	2009      	movs	r0, #9
 800315e:	f7ff fb61 	bl	8002824 <HD44780_SetCursor>
		HD44780_PrintStr(lcdFirstLinePressure);
 8003162:	f107 0308 	add.w	r3, r7, #8
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff fbe3 	bl	8002932 <HD44780_PrintStr>
		HD44780_SetCursor(9,1);
 800316c:	2101      	movs	r1, #1
 800316e:	2009      	movs	r0, #9
 8003170:	f7ff fb58 	bl	8002824 <HD44780_SetCursor>
		HD44780_PrintStr(lcSecondLinePressure);
 8003174:	463b      	mov	r3, r7
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff fbdb 	bl	8002932 <HD44780_PrintStr>
		osDelay(1000);
 800317c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003180:	f011 fa4c 	bl	801461c <osDelay>
		break;
 8003184:	e006      	b.n	8003194 <menuCalculateBlock+0xf8>
		processData(frontSensor, rearSensor, frontPressureSensor,
 8003186:	4b0a      	ldr	r3, [pc, #40]	; (80031b0 <menuCalculateBlock+0x114>)
 8003188:	4a0a      	ldr	r2, [pc, #40]	; (80031b4 <menuCalculateBlock+0x118>)
 800318a:	490b      	ldr	r1, [pc, #44]	; (80031b8 <menuCalculateBlock+0x11c>)
 800318c:	480b      	ldr	r0, [pc, #44]	; (80031bc <menuCalculateBlock+0x120>)
 800318e:	f000 fdcf 	bl	8003d30 <processData>
		break;
 8003192:	bf00      	nop
}
 8003194:	bf00      	nop
 8003196:	3728      	adds	r7, #40	; 0x28
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	20005c85 	.word	0x20005c85
 80031a0:	0801aa70 	.word	0x0801aa70
 80031a4:	0801aa78 	.word	0x0801aa78
 80031a8:	0801aa80 	.word	0x0801aa80
 80031ac:	0801aa88 	.word	0x0801aa88
 80031b0:	20005cd8 	.word	0x20005cd8
 80031b4:	20005cc4 	.word	0x20005cc4
 80031b8:	20005cb0 	.word	0x20005cb0
 80031bc:	20005c9c 	.word	0x20005c9c

080031c0 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80031c4:	4b14      	ldr	r3, [pc, #80]	; (8003218 <MX_SDIO_SD_Init+0x58>)
 80031c6:	4a15      	ldr	r2, [pc, #84]	; (800321c <MX_SDIO_SD_Init+0x5c>)
 80031c8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80031ca:	4b13      	ldr	r3, [pc, #76]	; (8003218 <MX_SDIO_SD_Init+0x58>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80031d0:	4b11      	ldr	r3, [pc, #68]	; (8003218 <MX_SDIO_SD_Init+0x58>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80031d6:	4b10      	ldr	r3, [pc, #64]	; (8003218 <MX_SDIO_SD_Init+0x58>)
 80031d8:	2200      	movs	r2, #0
 80031da:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 80031dc:	4b0e      	ldr	r3, [pc, #56]	; (8003218 <MX_SDIO_SD_Init+0x58>)
 80031de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031e2:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80031e4:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <MX_SDIO_SD_Init+0x58>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 80031ea:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <MX_SDIO_SD_Init+0x58>)
 80031ec:	2204      	movs	r2, #4
 80031ee:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 80031f0:	4809      	ldr	r0, [pc, #36]	; (8003218 <MX_SDIO_SD_Init+0x58>)
 80031f2:	f006 f835 	bl	8009260 <HAL_SD_Init>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <MX_SDIO_SD_Init+0x40>
  {
    Error_Handler();
 80031fc:	f7ff fd5c 	bl	8002cb8 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8003200:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003204:	4804      	ldr	r0, [pc, #16]	; (8003218 <MX_SDIO_SD_Init+0x58>)
 8003206:	f006 fe0f 	bl	8009e28 <HAL_SD_ConfigWideBusOperation>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <MX_SDIO_SD_Init+0x54>
  {
    Error_Handler();
 8003210:	f7ff fd52 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8003214:	bf00      	nop
 8003216:	bd80      	pop	{r7, pc}
 8003218:	20005cec 	.word	0x20005cec
 800321c:	40012c00 	.word	0x40012c00

08003220 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b0a2      	sub	sp, #136	; 0x88
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003228:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	605a      	str	r2, [r3, #4]
 8003232:	609a      	str	r2, [r3, #8]
 8003234:	60da      	str	r2, [r3, #12]
 8003236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003238:	f107 0318 	add.w	r3, r7, #24
 800323c:	225c      	movs	r2, #92	; 0x5c
 800323e:	2100      	movs	r1, #0
 8003240:	4618      	mov	r0, r3
 8003242:	f015 f9bd 	bl	80185c0 <memset>
  if(sdHandle->Instance==SDIO)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a43      	ldr	r2, [pc, #268]	; (8003358 <HAL_SD_MspInit+0x138>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d17f      	bne.n	8003350 <HAL_SD_MspInit+0x130>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8003250:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003254:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8003256:	2300      	movs	r3, #0
 8003258:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800325a:	2300      	movs	r3, #0
 800325c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800325e:	f107 0318 	add.w	r3, r7, #24
 8003262:	4618      	mov	r0, r3
 8003264:	f005 f804 	bl	8008270 <HAL_RCCEx_PeriphCLKConfig>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 800326e:	f7ff fd23 	bl	8002cb8 <Error_Handler>
    }

    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	617b      	str	r3, [r7, #20]
 8003276:	4b39      	ldr	r3, [pc, #228]	; (800335c <HAL_SD_MspInit+0x13c>)
 8003278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327a:	4a38      	ldr	r2, [pc, #224]	; (800335c <HAL_SD_MspInit+0x13c>)
 800327c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003280:	6453      	str	r3, [r2, #68]	; 0x44
 8003282:	4b36      	ldr	r3, [pc, #216]	; (800335c <HAL_SD_MspInit+0x13c>)
 8003284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003286:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800328e:	2300      	movs	r3, #0
 8003290:	613b      	str	r3, [r7, #16]
 8003292:	4b32      	ldr	r3, [pc, #200]	; (800335c <HAL_SD_MspInit+0x13c>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	4a31      	ldr	r2, [pc, #196]	; (800335c <HAL_SD_MspInit+0x13c>)
 8003298:	f043 0302 	orr.w	r3, r3, #2
 800329c:	6313      	str	r3, [r2, #48]	; 0x30
 800329e:	4b2f      	ldr	r3, [pc, #188]	; (800335c <HAL_SD_MspInit+0x13c>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	613b      	str	r3, [r7, #16]
 80032a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032aa:	2300      	movs	r3, #0
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	4b2b      	ldr	r3, [pc, #172]	; (800335c <HAL_SD_MspInit+0x13c>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	4a2a      	ldr	r2, [pc, #168]	; (800335c <HAL_SD_MspInit+0x13c>)
 80032b4:	f043 0304 	orr.w	r3, r3, #4
 80032b8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ba:	4b28      	ldr	r3, [pc, #160]	; (800335c <HAL_SD_MspInit+0x13c>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	f003 0304 	and.w	r3, r3, #4
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032c6:	2300      	movs	r3, #0
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	4b24      	ldr	r3, [pc, #144]	; (800335c <HAL_SD_MspInit+0x13c>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	4a23      	ldr	r2, [pc, #140]	; (800335c <HAL_SD_MspInit+0x13c>)
 80032d0:	f043 0308 	orr.w	r3, r3, #8
 80032d4:	6313      	str	r3, [r2, #48]	; 0x30
 80032d6:	4b21      	ldr	r3, [pc, #132]	; (800335c <HAL_SD_MspInit+0x13c>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	f003 0308 	and.w	r3, r3, #8
 80032de:	60bb      	str	r3, [r7, #8]
 80032e0:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PC11     ------> SDIO_D3
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80032e2:	2306      	movs	r3, #6
 80032e4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e6:	2302      	movs	r3, #2
 80032e8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ea:	2300      	movs	r3, #0
 80032ec:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ee:	2303      	movs	r3, #3
 80032f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80032f4:	230c      	movs	r3, #12
 80032f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032fa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80032fe:	4619      	mov	r1, r3
 8003300:	4817      	ldr	r0, [pc, #92]	; (8003360 <HAL_SD_MspInit+0x140>)
 8003302:	f002 fa29 	bl	8005758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 8003306:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 800330a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330c:	2302      	movs	r3, #2
 800330e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003310:	2300      	movs	r3, #0
 8003312:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003314:	2303      	movs	r3, #3
 8003316:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800331a:	230c      	movs	r3, #12
 800331c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003320:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003324:	4619      	mov	r1, r3
 8003326:	480f      	ldr	r0, [pc, #60]	; (8003364 <HAL_SD_MspInit+0x144>)
 8003328:	f002 fa16 	bl	8005758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800332c:	2304      	movs	r3, #4
 800332e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003330:	2302      	movs	r3, #2
 8003332:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003334:	2300      	movs	r3, #0
 8003336:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003338:	2303      	movs	r3, #3
 800333a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800333e:	230c      	movs	r3, #12
 8003340:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003344:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003348:	4619      	mov	r1, r3
 800334a:	4807      	ldr	r0, [pc, #28]	; (8003368 <HAL_SD_MspInit+0x148>)
 800334c:	f002 fa04 	bl	8005758 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8003350:	bf00      	nop
 8003352:	3788      	adds	r7, #136	; 0x88
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40012c00 	.word	0x40012c00
 800335c:	40023800 	.word	0x40023800
 8003360:	40020400 	.word	0x40020400
 8003364:	40020800 	.word	0x40020800
 8003368:	40020c00 	.word	0x40020c00

0800336c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003370:	4b17      	ldr	r3, [pc, #92]	; (80033d0 <MX_SPI2_Init+0x64>)
 8003372:	4a18      	ldr	r2, [pc, #96]	; (80033d4 <MX_SPI2_Init+0x68>)
 8003374:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003376:	4b16      	ldr	r3, [pc, #88]	; (80033d0 <MX_SPI2_Init+0x64>)
 8003378:	f44f 7282 	mov.w	r2, #260	; 0x104
 800337c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800337e:	4b14      	ldr	r3, [pc, #80]	; (80033d0 <MX_SPI2_Init+0x64>)
 8003380:	2200      	movs	r2, #0
 8003382:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003384:	4b12      	ldr	r3, [pc, #72]	; (80033d0 <MX_SPI2_Init+0x64>)
 8003386:	2200      	movs	r2, #0
 8003388:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800338a:	4b11      	ldr	r3, [pc, #68]	; (80033d0 <MX_SPI2_Init+0x64>)
 800338c:	2200      	movs	r2, #0
 800338e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003390:	4b0f      	ldr	r3, [pc, #60]	; (80033d0 <MX_SPI2_Init+0x64>)
 8003392:	2200      	movs	r2, #0
 8003394:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003396:	4b0e      	ldr	r3, [pc, #56]	; (80033d0 <MX_SPI2_Init+0x64>)
 8003398:	f44f 7200 	mov.w	r2, #512	; 0x200
 800339c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800339e:	4b0c      	ldr	r3, [pc, #48]	; (80033d0 <MX_SPI2_Init+0x64>)
 80033a0:	2218      	movs	r2, #24
 80033a2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033a4:	4b0a      	ldr	r3, [pc, #40]	; (80033d0 <MX_SPI2_Init+0x64>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80033aa:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <MX_SPI2_Init+0x64>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033b0:	4b07      	ldr	r3, [pc, #28]	; (80033d0 <MX_SPI2_Init+0x64>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80033b6:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <MX_SPI2_Init+0x64>)
 80033b8:	220a      	movs	r2, #10
 80033ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80033bc:	4804      	ldr	r0, [pc, #16]	; (80033d0 <MX_SPI2_Init+0x64>)
 80033be:	f007 f8da 	bl	800a576 <HAL_SPI_Init>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80033c8:	f7ff fc76 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80033cc:	bf00      	nop
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	20005d70 	.word	0x20005d70
 80033d4:	40003800 	.word	0x40003800

080033d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b08a      	sub	sp, #40	; 0x28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e0:	f107 0314 	add.w	r3, r7, #20
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	605a      	str	r2, [r3, #4]
 80033ea:	609a      	str	r2, [r3, #8]
 80033ec:	60da      	str	r2, [r3, #12]
 80033ee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a30      	ldr	r2, [pc, #192]	; (80034b8 <HAL_SPI_MspInit+0xe0>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d15a      	bne.n	80034b0 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80033fa:	2300      	movs	r3, #0
 80033fc:	613b      	str	r3, [r7, #16]
 80033fe:	4b2f      	ldr	r3, [pc, #188]	; (80034bc <HAL_SPI_MspInit+0xe4>)
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	4a2e      	ldr	r2, [pc, #184]	; (80034bc <HAL_SPI_MspInit+0xe4>)
 8003404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003408:	6413      	str	r3, [r2, #64]	; 0x40
 800340a:	4b2c      	ldr	r3, [pc, #176]	; (80034bc <HAL_SPI_MspInit+0xe4>)
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003412:	613b      	str	r3, [r7, #16]
 8003414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003416:	2300      	movs	r3, #0
 8003418:	60fb      	str	r3, [r7, #12]
 800341a:	4b28      	ldr	r3, [pc, #160]	; (80034bc <HAL_SPI_MspInit+0xe4>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	4a27      	ldr	r2, [pc, #156]	; (80034bc <HAL_SPI_MspInit+0xe4>)
 8003420:	f043 0304 	orr.w	r3, r3, #4
 8003424:	6313      	str	r3, [r2, #48]	; 0x30
 8003426:	4b25      	ldr	r3, [pc, #148]	; (80034bc <HAL_SPI_MspInit+0xe4>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	f003 0304 	and.w	r3, r3, #4
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003432:	2300      	movs	r3, #0
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	4b21      	ldr	r3, [pc, #132]	; (80034bc <HAL_SPI_MspInit+0xe4>)
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	4a20      	ldr	r2, [pc, #128]	; (80034bc <HAL_SPI_MspInit+0xe4>)
 800343c:	f043 0302 	orr.w	r3, r3, #2
 8003440:	6313      	str	r3, [r2, #48]	; 0x30
 8003442:	4b1e      	ldr	r3, [pc, #120]	; (80034bc <HAL_SPI_MspInit+0xe4>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	60bb      	str	r3, [r7, #8]
 800344c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800344e:	2302      	movs	r3, #2
 8003450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003452:	2302      	movs	r3, #2
 8003454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003456:	2300      	movs	r3, #0
 8003458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800345a:	2303      	movs	r3, #3
 800345c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800345e:	2307      	movs	r3, #7
 8003460:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003462:	f107 0314 	add.w	r3, r7, #20
 8003466:	4619      	mov	r1, r3
 8003468:	4815      	ldr	r0, [pc, #84]	; (80034c0 <HAL_SPI_MspInit+0xe8>)
 800346a:	f002 f975 	bl	8005758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800346e:	2304      	movs	r3, #4
 8003470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003472:	2302      	movs	r3, #2
 8003474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003476:	2300      	movs	r3, #0
 8003478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800347a:	2303      	movs	r3, #3
 800347c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800347e:	2305      	movs	r3, #5
 8003480:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003482:	f107 0314 	add.w	r3, r7, #20
 8003486:	4619      	mov	r1, r3
 8003488:	480d      	ldr	r0, [pc, #52]	; (80034c0 <HAL_SPI_MspInit+0xe8>)
 800348a:	f002 f965 	bl	8005758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800348e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003494:	2302      	movs	r3, #2
 8003496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003498:	2300      	movs	r3, #0
 800349a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800349c:	2303      	movs	r3, #3
 800349e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034a0:	2305      	movs	r3, #5
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034a4:	f107 0314 	add.w	r3, r7, #20
 80034a8:	4619      	mov	r1, r3
 80034aa:	4806      	ldr	r0, [pc, #24]	; (80034c4 <HAL_SPI_MspInit+0xec>)
 80034ac:	f002 f954 	bl	8005758 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80034b0:	bf00      	nop
 80034b2:	3728      	adds	r7, #40	; 0x28
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40003800 	.word	0x40003800
 80034bc:	40023800 	.word	0x40023800
 80034c0:	40020800 	.word	0x40020800
 80034c4:	40020400 	.word	0x40020400

080034c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	607b      	str	r3, [r7, #4]
 80034d2:	4b12      	ldr	r3, [pc, #72]	; (800351c <HAL_MspInit+0x54>)
 80034d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d6:	4a11      	ldr	r2, [pc, #68]	; (800351c <HAL_MspInit+0x54>)
 80034d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034dc:	6453      	str	r3, [r2, #68]	; 0x44
 80034de:	4b0f      	ldr	r3, [pc, #60]	; (800351c <HAL_MspInit+0x54>)
 80034e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034e6:	607b      	str	r3, [r7, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034ea:	2300      	movs	r3, #0
 80034ec:	603b      	str	r3, [r7, #0]
 80034ee:	4b0b      	ldr	r3, [pc, #44]	; (800351c <HAL_MspInit+0x54>)
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	4a0a      	ldr	r2, [pc, #40]	; (800351c <HAL_MspInit+0x54>)
 80034f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034f8:	6413      	str	r3, [r2, #64]	; 0x40
 80034fa:	4b08      	ldr	r3, [pc, #32]	; (800351c <HAL_MspInit+0x54>)
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003502:	603b      	str	r3, [r7, #0]
 8003504:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003506:	2200      	movs	r2, #0
 8003508:	210f      	movs	r1, #15
 800350a:	f06f 0001 	mvn.w	r0, #1
 800350e:	f001 fd19 	bl	8004f44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003512:	bf00      	nop
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40023800 	.word	0x40023800

08003520 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b08e      	sub	sp, #56	; 0x38
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800352c:	2300      	movs	r3, #0
 800352e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8003530:	2300      	movs	r3, #0
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	4b33      	ldr	r3, [pc, #204]	; (8003604 <HAL_InitTick+0xe4>)
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	4a32      	ldr	r2, [pc, #200]	; (8003604 <HAL_InitTick+0xe4>)
 800353a:	f043 0302 	orr.w	r3, r3, #2
 800353e:	6413      	str	r3, [r2, #64]	; 0x40
 8003540:	4b30      	ldr	r3, [pc, #192]	; (8003604 <HAL_InitTick+0xe4>)
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800354c:	f107 0210 	add.w	r2, r7, #16
 8003550:	f107 0314 	add.w	r3, r7, #20
 8003554:	4611      	mov	r1, r2
 8003556:	4618      	mov	r0, r3
 8003558:	f004 fe58 	bl	800820c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003562:	2b00      	cmp	r3, #0
 8003564:	d103      	bne.n	800356e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003566:	f004 fe3d 	bl	80081e4 <HAL_RCC_GetPCLK1Freq>
 800356a:	6378      	str	r0, [r7, #52]	; 0x34
 800356c:	e004      	b.n	8003578 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800356e:	f004 fe39 	bl	80081e4 <HAL_RCC_GetPCLK1Freq>
 8003572:	4603      	mov	r3, r0
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800357a:	4a23      	ldr	r2, [pc, #140]	; (8003608 <HAL_InitTick+0xe8>)
 800357c:	fba2 2303 	umull	r2, r3, r2, r3
 8003580:	0c9b      	lsrs	r3, r3, #18
 8003582:	3b01      	subs	r3, #1
 8003584:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8003586:	4b21      	ldr	r3, [pc, #132]	; (800360c <HAL_InitTick+0xec>)
 8003588:	4a21      	ldr	r2, [pc, #132]	; (8003610 <HAL_InitTick+0xf0>)
 800358a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 800358c:	4b1f      	ldr	r3, [pc, #124]	; (800360c <HAL_InitTick+0xec>)
 800358e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003592:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8003594:	4a1d      	ldr	r2, [pc, #116]	; (800360c <HAL_InitTick+0xec>)
 8003596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003598:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 800359a:	4b1c      	ldr	r3, [pc, #112]	; (800360c <HAL_InitTick+0xec>)
 800359c:	2200      	movs	r2, #0
 800359e:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035a0:	4b1a      	ldr	r3, [pc, #104]	; (800360c <HAL_InitTick+0xec>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035a6:	4b19      	ldr	r3, [pc, #100]	; (800360c <HAL_InitTick+0xec>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80035ac:	4817      	ldr	r0, [pc, #92]	; (800360c <HAL_InitTick+0xec>)
 80035ae:	f007 fc21 	bl	800adf4 <HAL_TIM_Base_Init>
 80035b2:	4603      	mov	r3, r0
 80035b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80035b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d11b      	bne.n	80035f8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80035c0:	4812      	ldr	r0, [pc, #72]	; (800360c <HAL_InitTick+0xec>)
 80035c2:	f007 fcf7 	bl	800afb4 <HAL_TIM_Base_Start_IT>
 80035c6:	4603      	mov	r3, r0
 80035c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80035cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d111      	bne.n	80035f8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80035d4:	201d      	movs	r0, #29
 80035d6:	f001 fcd1 	bl	8004f7c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b0f      	cmp	r3, #15
 80035de:	d808      	bhi.n	80035f2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 80035e0:	2200      	movs	r2, #0
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	201d      	movs	r0, #29
 80035e6:	f001 fcad 	bl	8004f44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035ea:	4a0a      	ldr	r2, [pc, #40]	; (8003614 <HAL_InitTick+0xf4>)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6013      	str	r3, [r2, #0]
 80035f0:	e002      	b.n	80035f8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80035f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3738      	adds	r7, #56	; 0x38
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40023800 	.word	0x40023800
 8003608:	431bde83 	.word	0x431bde83
 800360c:	20005dc8 	.word	0x20005dc8
 8003610:	40000400 	.word	0x40000400
 8003614:	20000028 	.word	0x20000028

08003618 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1;
volatile uint8_t Timer2;
void SDTimer_Handler(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
	if (Timer1 > 0)
 800361c:	4b0e      	ldr	r3, [pc, #56]	; (8003658 <SDTimer_Handler+0x40>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d006      	beq.n	8003634 <SDTimer_Handler+0x1c>
		Timer1--;
 8003626:	4b0c      	ldr	r3, [pc, #48]	; (8003658 <SDTimer_Handler+0x40>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	b2db      	uxtb	r3, r3
 800362c:	3b01      	subs	r3, #1
 800362e:	b2da      	uxtb	r2, r3
 8003630:	4b09      	ldr	r3, [pc, #36]	; (8003658 <SDTimer_Handler+0x40>)
 8003632:	701a      	strb	r2, [r3, #0]

	if (Timer2 > 0)
 8003634:	4b09      	ldr	r3, [pc, #36]	; (800365c <SDTimer_Handler+0x44>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d006      	beq.n	800364c <SDTimer_Handler+0x34>
		Timer2--;
 800363e:	4b07      	ldr	r3, [pc, #28]	; (800365c <SDTimer_Handler+0x44>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	b2db      	uxtb	r3, r3
 8003644:	3b01      	subs	r3, #1
 8003646:	b2da      	uxtb	r2, r3
 8003648:	4b04      	ldr	r3, [pc, #16]	; (800365c <SDTimer_Handler+0x44>)
 800364a:	701a      	strb	r2, [r3, #0]
}
 800364c:	bf00      	nop
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	20005e11 	.word	0x20005e11
 800365c:	20005e12 	.word	0x20005e12

08003660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8003664:	e7fe      	b.n	8003664 <NMI_Handler+0x4>

08003666 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003666:	b480      	push	{r7}
 8003668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800366a:	e7fe      	b.n	800366a <HardFault_Handler+0x4>

0800366c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003670:	e7fe      	b.n	8003670 <MemManage_Handler+0x4>

08003672 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003672:	b480      	push	{r7}
 8003674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003676:	e7fe      	b.n	8003676 <BusFault_Handler+0x4>

08003678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800367c:	e7fe      	b.n	800367c <UsageFault_Handler+0x4>

0800367e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800367e:	b480      	push	{r7}
 8003680:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003682:	bf00      	nop
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	FatFsCnt++;
 8003690:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <TIM3_IRQHandler+0x30>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	b2db      	uxtb	r3, r3
 8003696:	3301      	adds	r3, #1
 8003698:	b2da      	uxtb	r2, r3
 800369a:	4b08      	ldr	r3, [pc, #32]	; (80036bc <TIM3_IRQHandler+0x30>)
 800369c:	701a      	strb	r2, [r3, #0]
	if (FatFsCnt >= 10)
 800369e:	4b07      	ldr	r3, [pc, #28]	; (80036bc <TIM3_IRQHandler+0x30>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b09      	cmp	r3, #9
 80036a6:	d904      	bls.n	80036b2 <TIM3_IRQHandler+0x26>
	{
		FatFsCnt = 0;
 80036a8:	4b04      	ldr	r3, [pc, #16]	; (80036bc <TIM3_IRQHandler+0x30>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 80036ae:	f7ff ffb3 	bl	8003618 <SDTimer_Handler>
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80036b2:	4803      	ldr	r0, [pc, #12]	; (80036c0 <TIM3_IRQHandler+0x34>)
 80036b4:	f007 fd47 	bl	800b146 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80036b8:	bf00      	nop
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	20005e10 	.word	0x20005e10
 80036c0:	20005dc8 	.word	0x20005dc8

080036c4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80036c8:	4802      	ldr	r0, [pc, #8]	; (80036d4 <DMA2_Stream2_IRQHandler+0x10>)
 80036ca:	f001 fddb 	bl	8005284 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80036ce:	bf00      	nop
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	2000086c 	.word	0x2000086c

080036d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80036dc:	4802      	ldr	r0, [pc, #8]	; (80036e8 <OTG_FS_IRQHandler+0x10>)
 80036de:	f003 faef 	bl	8006cc0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80036e2:	bf00      	nop
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	2000a9bc 	.word	0x2000a9bc

080036ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
	return 1;
 80036f0:	2301      	movs	r3, #1
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <_kill>:

int _kill(int pid, int sig)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 8003706:	f015 f817 	bl	8018738 <__errno>
 800370a:	4603      	mov	r3, r0
 800370c:	2216      	movs	r2, #22
 800370e:	601a      	str	r2, [r3, #0]
	return -1;
 8003710:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003714:	4618      	mov	r0, r3
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <_exit>:

void _exit(int status)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003724:	f04f 31ff 	mov.w	r1, #4294967295
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7ff ffe7 	bl	80036fc <_kill>
	while (1)
 800372e:	e7fe      	b.n	800372e <_exit+0x12>

08003730 <_read>:
	{
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800373c:	2300      	movs	r3, #0
 800373e:	617b      	str	r3, [r7, #20]
 8003740:	e00a      	b.n	8003758 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003742:	f3af 8000 	nop.w
 8003746:	4601      	mov	r1, r0
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	1c5a      	adds	r2, r3, #1
 800374c:	60ba      	str	r2, [r7, #8]
 800374e:	b2ca      	uxtb	r2, r1
 8003750:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	3301      	adds	r3, #1
 8003756:	617b      	str	r3, [r7, #20]
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	429a      	cmp	r2, r3
 800375e:	dbf0      	blt.n	8003742 <_read+0x12>
	}

	return len;
 8003760:	687b      	ldr	r3, [r7, #4]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b086      	sub	sp, #24
 800376e:	af00      	add	r7, sp, #0
 8003770:	60f8      	str	r0, [r7, #12]
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003776:	2300      	movs	r3, #0
 8003778:	617b      	str	r3, [r7, #20]
 800377a:	e009      	b.n	8003790 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	60ba      	str	r2, [r7, #8]
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff f9ea 	bl	8002b5e <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	3301      	adds	r3, #1
 800378e:	617b      	str	r3, [r7, #20]
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	429a      	cmp	r2, r3
 8003796:	dbf1      	blt.n	800377c <_write+0x12>
	}
	return len;
 8003798:	687b      	ldr	r3, [r7, #4]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3718      	adds	r7, #24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <_close>:

int _close(int file)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b083      	sub	sp, #12
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80037aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <_fstat>:

int _fstat(int file, struct stat *st)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037ca:	605a      	str	r2, [r3, #4]
	return 0;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <_isatty>:

int _isatty(int file)
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80037e2:	2301      	movs	r3, #1
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
	...

0800380c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8003814:	4a14      	ldr	r2, [pc, #80]	; (8003868 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8003816:	4b15      	ldr	r3, [pc, #84]	; (800386c <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end)
 8003820:	4b13      	ldr	r3, [pc, #76]	; (8003870 <_sbrk+0x64>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d102      	bne.n	800382e <_sbrk+0x22>
	{
		__sbrk_heap_end = &_end;
 8003828:	4b11      	ldr	r3, [pc, #68]	; (8003870 <_sbrk+0x64>)
 800382a:	4a12      	ldr	r2, [pc, #72]	; (8003874 <_sbrk+0x68>)
 800382c:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap)
 800382e:	4b10      	ldr	r3, [pc, #64]	; (8003870 <_sbrk+0x64>)
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4413      	add	r3, r2
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	429a      	cmp	r2, r3
 800383a:	d207      	bcs.n	800384c <_sbrk+0x40>
	{
		errno = ENOMEM;
 800383c:	f014 ff7c 	bl	8018738 <__errno>
 8003840:	4603      	mov	r3, r0
 8003842:	220c      	movs	r2, #12
 8003844:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8003846:	f04f 33ff 	mov.w	r3, #4294967295
 800384a:	e009      	b.n	8003860 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 800384c:	4b08      	ldr	r3, [pc, #32]	; (8003870 <_sbrk+0x64>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8003852:	4b07      	ldr	r3, [pc, #28]	; (8003870 <_sbrk+0x64>)
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4413      	add	r3, r2
 800385a:	4a05      	ldr	r2, [pc, #20]	; (8003870 <_sbrk+0x64>)
 800385c:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 800385e:	68fb      	ldr	r3, [r7, #12]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3718      	adds	r7, #24
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	20020000 	.word	0x20020000
 800386c:	00000400 	.word	0x00000400
 8003870:	20005e14 	.word	0x20005e14
 8003874:	2000b290 	.word	0x2000b290

08003878 <SystemInit>:
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 800387c:	4b06      	ldr	r3, [pc, #24]	; (8003898 <SystemInit+0x20>)
 800387e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003882:	4a05      	ldr	r2, [pc, #20]	; (8003898 <SystemInit+0x20>)
 8003884:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003888:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800388c:	bf00      	nop
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	e000ed00 	.word	0xe000ed00

0800389c <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b08e      	sub	sp, #56	; 0x38
 80038a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038a6:	2200      	movs	r2, #0
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	605a      	str	r2, [r3, #4]
 80038ac:	609a      	str	r2, [r3, #8]
 80038ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038b0:	f107 0320 	add.w	r3, r7, #32
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038ba:	1d3b      	adds	r3, r7, #4
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	605a      	str	r2, [r3, #4]
 80038c2:	609a      	str	r2, [r3, #8]
 80038c4:	60da      	str	r2, [r3, #12]
 80038c6:	611a      	str	r2, [r3, #16]
 80038c8:	615a      	str	r2, [r3, #20]
 80038ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80038cc:	4b2b      	ldr	r3, [pc, #172]	; (800397c <MX_TIM2_Init+0xe0>)
 80038ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3600-1;
 80038d4:	4b29      	ldr	r3, [pc, #164]	; (800397c <MX_TIM2_Init+0xe0>)
 80038d6:	f640 620f 	movw	r2, #3599	; 0xe0f
 80038da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038dc:	4b27      	ldr	r3, [pc, #156]	; (800397c <MX_TIM2_Init+0xe0>)
 80038de:	2200      	movs	r2, #0
 80038e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80038e2:	4b26      	ldr	r3, [pc, #152]	; (800397c <MX_TIM2_Init+0xe0>)
 80038e4:	2263      	movs	r2, #99	; 0x63
 80038e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038e8:	4b24      	ldr	r3, [pc, #144]	; (800397c <MX_TIM2_Init+0xe0>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038ee:	4b23      	ldr	r3, [pc, #140]	; (800397c <MX_TIM2_Init+0xe0>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80038f4:	4821      	ldr	r0, [pc, #132]	; (800397c <MX_TIM2_Init+0xe0>)
 80038f6:	f007 fa7d 	bl	800adf4 <HAL_TIM_Base_Init>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003900:	f7ff f9da 	bl	8002cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003908:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800390a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800390e:	4619      	mov	r1, r3
 8003910:	481a      	ldr	r0, [pc, #104]	; (800397c <MX_TIM2_Init+0xe0>)
 8003912:	f007 fde3 	bl	800b4dc <HAL_TIM_ConfigClockSource>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800391c:	f7ff f9cc 	bl	8002cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003920:	4816      	ldr	r0, [pc, #88]	; (800397c <MX_TIM2_Init+0xe0>)
 8003922:	f007 fbb7 	bl	800b094 <HAL_TIM_PWM_Init>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800392c:	f7ff f9c4 	bl	8002cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003930:	2320      	movs	r3, #32
 8003932:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003934:	2300      	movs	r3, #0
 8003936:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003938:	f107 0320 	add.w	r3, r7, #32
 800393c:	4619      	mov	r1, r3
 800393e:	480f      	ldr	r0, [pc, #60]	; (800397c <MX_TIM2_Init+0xe0>)
 8003940:	f008 f9a6 	bl	800bc90 <HAL_TIMEx_MasterConfigSynchronization>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800394a:	f7ff f9b5 	bl	8002cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800394e:	2360      	movs	r3, #96	; 0x60
 8003950:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003952:	2300      	movs	r3, #0
 8003954:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003956:	2300      	movs	r3, #0
 8003958:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800395e:	1d3b      	adds	r3, r7, #4
 8003960:	2200      	movs	r2, #0
 8003962:	4619      	mov	r1, r3
 8003964:	4805      	ldr	r0, [pc, #20]	; (800397c <MX_TIM2_Init+0xe0>)
 8003966:	f007 fcf7 	bl	800b358 <HAL_TIM_PWM_ConfigChannel>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003970:	f7ff f9a2 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003974:	bf00      	nop
 8003976:	3738      	adds	r7, #56	; 0x38
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	20005e18 	.word	0x20005e18

08003980 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003986:	463b      	mov	r3, r7
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800398e:	4b15      	ldr	r3, [pc, #84]	; (80039e4 <MX_TIM6_Init+0x64>)
 8003990:	4a15      	ldr	r2, [pc, #84]	; (80039e8 <MX_TIM6_Init+0x68>)
 8003992:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 36000-1;
 8003994:	4b13      	ldr	r3, [pc, #76]	; (80039e4 <MX_TIM6_Init+0x64>)
 8003996:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800399a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800399c:	4b11      	ldr	r3, [pc, #68]	; (80039e4 <MX_TIM6_Init+0x64>)
 800399e:	2200      	movs	r2, #0
 80039a0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80039a2:	4b10      	ldr	r3, [pc, #64]	; (80039e4 <MX_TIM6_Init+0x64>)
 80039a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039a8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039aa:	4b0e      	ldr	r3, [pc, #56]	; (80039e4 <MX_TIM6_Init+0x64>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80039b0:	480c      	ldr	r0, [pc, #48]	; (80039e4 <MX_TIM6_Init+0x64>)
 80039b2:	f007 fa1f 	bl	800adf4 <HAL_TIM_Base_Init>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80039bc:	f7ff f97c 	bl	8002cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039c0:	2300      	movs	r3, #0
 80039c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039c4:	2300      	movs	r3, #0
 80039c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80039c8:	463b      	mov	r3, r7
 80039ca:	4619      	mov	r1, r3
 80039cc:	4805      	ldr	r0, [pc, #20]	; (80039e4 <MX_TIM6_Init+0x64>)
 80039ce:	f008 f95f 	bl	800bc90 <HAL_TIMEx_MasterConfigSynchronization>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80039d8:	f7ff f96e 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80039dc:	bf00      	nop
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	20005e60 	.word	0x20005e60
 80039e8:	40001000 	.word	0x40001000

080039ec <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b096      	sub	sp, #88	; 0x58
 80039f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	605a      	str	r2, [r3, #4]
 80039fc:	609a      	str	r2, [r3, #8]
 80039fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	605a      	str	r2, [r3, #4]
 8003a14:	609a      	str	r2, [r3, #8]
 8003a16:	60da      	str	r2, [r3, #12]
 8003a18:	611a      	str	r2, [r3, #16]
 8003a1a:	615a      	str	r2, [r3, #20]
 8003a1c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a1e:	1d3b      	adds	r3, r7, #4
 8003a20:	2220      	movs	r2, #32
 8003a22:	2100      	movs	r1, #0
 8003a24:	4618      	mov	r0, r3
 8003a26:	f014 fdcb 	bl	80185c0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003a2a:	4b3d      	ldr	r3, [pc, #244]	; (8003b20 <MX_TIM8_Init+0x134>)
 8003a2c:	4a3d      	ldr	r2, [pc, #244]	; (8003b24 <MX_TIM8_Init+0x138>)
 8003a2e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1800-1;
 8003a30:	4b3b      	ldr	r3, [pc, #236]	; (8003b20 <MX_TIM8_Init+0x134>)
 8003a32:	f240 7207 	movw	r2, #1799	; 0x707
 8003a36:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a38:	4b39      	ldr	r3, [pc, #228]	; (8003b20 <MX_TIM8_Init+0x134>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 270-1;
 8003a3e:	4b38      	ldr	r3, [pc, #224]	; (8003b20 <MX_TIM8_Init+0x134>)
 8003a40:	f240 120d 	movw	r2, #269	; 0x10d
 8003a44:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a46:	4b36      	ldr	r3, [pc, #216]	; (8003b20 <MX_TIM8_Init+0x134>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003a4c:	4b34      	ldr	r3, [pc, #208]	; (8003b20 <MX_TIM8_Init+0x134>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a52:	4b33      	ldr	r3, [pc, #204]	; (8003b20 <MX_TIM8_Init+0x134>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003a58:	4831      	ldr	r0, [pc, #196]	; (8003b20 <MX_TIM8_Init+0x134>)
 8003a5a:	f007 f9cb 	bl	800adf4 <HAL_TIM_Base_Init>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8003a64:	f7ff f928 	bl	8002cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a6c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003a6e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a72:	4619      	mov	r1, r3
 8003a74:	482a      	ldr	r0, [pc, #168]	; (8003b20 <MX_TIM8_Init+0x134>)
 8003a76:	f007 fd31 	bl	800b4dc <HAL_TIM_ConfigClockSource>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8003a80:	f7ff f91a 	bl	8002cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003a84:	4826      	ldr	r0, [pc, #152]	; (8003b20 <MX_TIM8_Init+0x134>)
 8003a86:	f007 fb05 	bl	800b094 <HAL_TIM_PWM_Init>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8003a90:	f7ff f912 	bl	8002cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003a94:	2320      	movs	r3, #32
 8003a96:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003a9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	481f      	ldr	r0, [pc, #124]	; (8003b20 <MX_TIM8_Init+0x134>)
 8003aa4:	f008 f8f4 	bl	800bc90 <HAL_TIMEx_MasterConfigSynchronization>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8003aae:	f7ff f903 	bl	8002cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ab2:	2360      	movs	r3, #96	; 0x60
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003aba:	2300      	movs	r3, #0
 8003abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003aca:	2300      	movs	r3, #0
 8003acc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4812      	ldr	r0, [pc, #72]	; (8003b20 <MX_TIM8_Init+0x134>)
 8003ad8:	f007 fc3e 	bl	800b358 <HAL_TIM_PWM_ConfigChannel>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8003ae2:	f7ff f8e9 	bl	8002cb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003aea:	2300      	movs	r3, #0
 8003aec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003aee:	2300      	movs	r3, #0
 8003af0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003af2:	2300      	movs	r3, #0
 8003af4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003af6:	2300      	movs	r3, #0
 8003af8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003afa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003afe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003b00:	2300      	movs	r3, #0
 8003b02:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003b04:	1d3b      	adds	r3, r7, #4
 8003b06:	4619      	mov	r1, r3
 8003b08:	4805      	ldr	r0, [pc, #20]	; (8003b20 <MX_TIM8_Init+0x134>)
 8003b0a:	f008 f93d 	bl	800bd88 <HAL_TIMEx_ConfigBreakDeadTime>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8003b14:	f7ff f8d0 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003b18:	bf00      	nop
 8003b1a:	3758      	adds	r7, #88	; 0x58
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	20005ea8 	.word	0x20005ea8
 8003b24:	40010400 	.word	0x40010400

08003b28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b38:	d10e      	bne.n	8003b58 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	617b      	str	r3, [r7, #20]
 8003b3e:	4b1d      	ldr	r3, [pc, #116]	; (8003bb4 <HAL_TIM_Base_MspInit+0x8c>)
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	4a1c      	ldr	r2, [pc, #112]	; (8003bb4 <HAL_TIM_Base_MspInit+0x8c>)
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	6413      	str	r3, [r2, #64]	; 0x40
 8003b4a:	4b1a      	ldr	r3, [pc, #104]	; (8003bb4 <HAL_TIM_Base_MspInit+0x8c>)
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003b56:	e026      	b.n	8003ba6 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM6)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a16      	ldr	r2, [pc, #88]	; (8003bb8 <HAL_TIM_Base_MspInit+0x90>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d10e      	bne.n	8003b80 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003b62:	2300      	movs	r3, #0
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	4b13      	ldr	r3, [pc, #76]	; (8003bb4 <HAL_TIM_Base_MspInit+0x8c>)
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	4a12      	ldr	r2, [pc, #72]	; (8003bb4 <HAL_TIM_Base_MspInit+0x8c>)
 8003b6c:	f043 0310 	orr.w	r3, r3, #16
 8003b70:	6413      	str	r3, [r2, #64]	; 0x40
 8003b72:	4b10      	ldr	r3, [pc, #64]	; (8003bb4 <HAL_TIM_Base_MspInit+0x8c>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	f003 0310 	and.w	r3, r3, #16
 8003b7a:	613b      	str	r3, [r7, #16]
 8003b7c:	693b      	ldr	r3, [r7, #16]
}
 8003b7e:	e012      	b.n	8003ba6 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM8)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a0d      	ldr	r2, [pc, #52]	; (8003bbc <HAL_TIM_Base_MspInit+0x94>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d10d      	bne.n	8003ba6 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <HAL_TIM_Base_MspInit+0x8c>)
 8003b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b92:	4a08      	ldr	r2, [pc, #32]	; (8003bb4 <HAL_TIM_Base_MspInit+0x8c>)
 8003b94:	f043 0302 	orr.w	r3, r3, #2
 8003b98:	6453      	str	r3, [r2, #68]	; 0x44
 8003b9a:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <HAL_TIM_Base_MspInit+0x8c>)
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
}
 8003ba6:	bf00      	nop
 8003ba8:	371c      	adds	r7, #28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	40001000 	.word	0x40001000
 8003bbc:	40010400 	.word	0x40010400

08003bc0 <startAdcDma>:
static void sendDataSD(char *file, volatile int16_t *sensor);
/******************************************************************************
 * Function Definitions
 *******************************************************************************/
void startAdcDma(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
	osDelayUntil((uint32_t*) osKernelSysTick(), SD_INIT_TIME);
 8003bc4:	f010 fcce 	bl	8014564 <osKernelSysTick>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	210a      	movs	r1, #10
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f010 fe02 	bl	80147d6 <osDelayUntil>
	HAL_ADC_Start_DMA(TRAVEL_SENSOR_ADC_CHANNEL, (uint32_t*) adcDataWrite,
 8003bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bd6:	4906      	ldr	r1, [pc, #24]	; (8003bf0 <startAdcDma+0x30>)
 8003bd8:	4806      	ldr	r0, [pc, #24]	; (8003bf4 <startAdcDma+0x34>)
 8003bda:	f000 fcd7 	bl	800458c <HAL_ADC_Start_DMA>
	BUFFER_SIZE);
	HAL_TIM_Base_Start(TRAVEL_SENSOR_TIMER_SAMPLE_CHECK);
 8003bde:	4806      	ldr	r0, [pc, #24]	; (8003bf8 <startAdcDma+0x38>)
 8003be0:	f007 f958 	bl	800ae94 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(TRAVEL_SENSOR_ADC_TRIGER_TIMER);
 8003be4:	4805      	ldr	r0, [pc, #20]	; (8003bfc <startAdcDma+0x3c>)
 8003be6:	f007 f955 	bl	800ae94 <HAL_TIM_Base_Start>
}
 8003bea:	bf00      	nop
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	20005ef8 	.word	0x20005ef8
 8003bf4:	200007dc 	.word	0x200007dc
 8003bf8:	20005e60 	.word	0x20005e60
 8003bfc:	20005e18 	.word	0x20005e18

08003c00 <stopAdcDma>:
void stopAdcDma(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(TRAVEL_SENSOR_ADC_CHANNEL);
 8003c04:	4805      	ldr	r0, [pc, #20]	; (8003c1c <stopAdcDma+0x1c>)
 8003c06:	f000 fdd1 	bl	80047ac <HAL_ADC_Stop_DMA>
	HAL_TIM_Base_Stop(TRAVEL_SENSOR_TIMER_SAMPLE_CHECK);
 8003c0a:	4805      	ldr	r0, [pc, #20]	; (8003c20 <stopAdcDma+0x20>)
 8003c0c:	f007 f9aa 	bl	800af64 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(TRAVEL_SENSOR_ADC_TRIGER_TIMER);
 8003c10:	4804      	ldr	r0, [pc, #16]	; (8003c24 <stopAdcDma+0x24>)
 8003c12:	f007 f9a7 	bl	800af64 <HAL_TIM_Base_Stop>
}
 8003c16:	bf00      	nop
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	200007dc 	.word	0x200007dc
 8003c20:	20005e60 	.word	0x20005e60
 8003c24:	20005e18 	.word	0x20005e18

08003c28 <travelPressureSensorCalibration>:
void travelPressureSensorCalibration(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
#ifdef FREE_RTOS
	osSemaphoreWait(travelSensorSemHandle, osWaitForever);
 8003c2e:	4b3a      	ldr	r3, [pc, #232]	; (8003d18 <travelPressureSensorCalibration+0xf0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f04f 31ff 	mov.w	r1, #4294967295
 8003c36:	4618      	mov	r0, r3
 8003c38:	f010 fd36 	bl	80146a8 <osSemaphoreWait>
#endif

	for (int i = 0; i < BUFFER_SIZE / HALF_CONV_BUFF_SIZE; i++)
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	607b      	str	r3, [r7, #4]
 8003c40:	e046      	b.n	8003cd0 <travelPressureSensorCalibration+0xa8>
	{
		calibrationValues.rearTravelSensor += outRearBufPtr[i];
 8003c42:	4b36      	ldr	r3, [pc, #216]	; (8003d1c <travelPressureSensorCalibration+0xf4>)
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	4413      	add	r3, r2
 8003c4c:	881b      	ldrh	r3, [r3, #0]
 8003c4e:	b219      	sxth	r1, r3
 8003c50:	4b33      	ldr	r3, [pc, #204]	; (8003d20 <travelPressureSensorCalibration+0xf8>)
 8003c52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	b28b      	uxth	r3, r1
 8003c5a:	4413      	add	r3, r2
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	b21a      	sxth	r2, r3
 8003c60:	4b2f      	ldr	r3, [pc, #188]	; (8003d20 <travelPressureSensorCalibration+0xf8>)
 8003c62:	801a      	strh	r2, [r3, #0]
		calibrationValues.frontTravelSensor += outFrontBufPtr[i];
 8003c64:	4b2f      	ldr	r3, [pc, #188]	; (8003d24 <travelPressureSensorCalibration+0xfc>)
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	4413      	add	r3, r2
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	b219      	sxth	r1, r3
 8003c72:	4b2b      	ldr	r3, [pc, #172]	; (8003d20 <travelPressureSensorCalibration+0xf8>)
 8003c74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	b28b      	uxth	r3, r1
 8003c7c:	4413      	add	r3, r2
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	b21a      	sxth	r2, r3
 8003c82:	4b27      	ldr	r3, [pc, #156]	; (8003d20 <travelPressureSensorCalibration+0xf8>)
 8003c84:	805a      	strh	r2, [r3, #2]
		calibrationValues.rearPressureSensor += outRearPressureBufPtr[i];
 8003c86:	4b28      	ldr	r3, [pc, #160]	; (8003d28 <travelPressureSensorCalibration+0x100>)
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	4413      	add	r3, r2
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	b219      	sxth	r1, r3
 8003c94:	4b22      	ldr	r3, [pc, #136]	; (8003d20 <travelPressureSensorCalibration+0xf8>)
 8003c96:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	b28b      	uxth	r3, r1
 8003c9e:	4413      	add	r3, r2
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	b21a      	sxth	r2, r3
 8003ca4:	4b1e      	ldr	r3, [pc, #120]	; (8003d20 <travelPressureSensorCalibration+0xf8>)
 8003ca6:	809a      	strh	r2, [r3, #4]
		calibrationValues.frontPressureSensor += outFrontPressureBufPtr[i];
 8003ca8:	4b20      	ldr	r3, [pc, #128]	; (8003d2c <travelPressureSensorCalibration+0x104>)
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	4413      	add	r3, r2
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	b219      	sxth	r1, r3
 8003cb6:	4b1a      	ldr	r3, [pc, #104]	; (8003d20 <travelPressureSensorCalibration+0xf8>)
 8003cb8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	b28b      	uxth	r3, r1
 8003cc0:	4413      	add	r3, r2
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	b21a      	sxth	r2, r3
 8003cc6:	4b16      	ldr	r3, [pc, #88]	; (8003d20 <travelPressureSensorCalibration+0xf8>)
 8003cc8:	80da      	strh	r2, [r3, #6]
	for (int i = 0; i < BUFFER_SIZE / HALF_CONV_BUFF_SIZE; i++)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	607b      	str	r3, [r7, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b3f      	cmp	r3, #63	; 0x3f
 8003cd4:	d9b5      	bls.n	8003c42 <travelPressureSensorCalibration+0x1a>

	}
	calibrationValues.rearTravelSensor = calibrationValues.rearTravelSensor
 8003cd6:	4b12      	ldr	r3, [pc, #72]	; (8003d20 <travelPressureSensorCalibration+0xf8>)
 8003cd8:	f9b3 3000 	ldrsh.w	r3, [r3]
			/ (BUFFER_SIZE / HALF_CONV_BUFF_SIZE);
 8003cdc:	099b      	lsrs	r3, r3, #6
	calibrationValues.rearTravelSensor = calibrationValues.rearTravelSensor
 8003cde:	b21a      	sxth	r2, r3
 8003ce0:	4b0f      	ldr	r3, [pc, #60]	; (8003d20 <travelPressureSensorCalibration+0xf8>)
 8003ce2:	801a      	strh	r2, [r3, #0]
	calibrationValues.frontTravelSensor = calibrationValues.frontTravelSensor
 8003ce4:	4b0e      	ldr	r3, [pc, #56]	; (8003d20 <travelPressureSensorCalibration+0xf8>)
 8003ce6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
			/ (BUFFER_SIZE / HALF_CONV_BUFF_SIZE);
 8003cea:	099b      	lsrs	r3, r3, #6
	calibrationValues.frontTravelSensor = calibrationValues.frontTravelSensor
 8003cec:	b21a      	sxth	r2, r3
 8003cee:	4b0c      	ldr	r3, [pc, #48]	; (8003d20 <travelPressureSensorCalibration+0xf8>)
 8003cf0:	805a      	strh	r2, [r3, #2]
	calibrationValues.rearPressureSensor = calibrationValues.rearPressureSensor
 8003cf2:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <travelPressureSensorCalibration+0xf8>)
 8003cf4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
			/ (BUFFER_SIZE / HALF_CONV_BUFF_SIZE);
 8003cf8:	099b      	lsrs	r3, r3, #6
	calibrationValues.rearPressureSensor = calibrationValues.rearPressureSensor
 8003cfa:	b21a      	sxth	r2, r3
 8003cfc:	4b08      	ldr	r3, [pc, #32]	; (8003d20 <travelPressureSensorCalibration+0xf8>)
 8003cfe:	809a      	strh	r2, [r3, #4]
	calibrationValues.frontPressureSensor =
			calibrationValues.frontPressureSensor
 8003d00:	4b07      	ldr	r3, [pc, #28]	; (8003d20 <travelPressureSensorCalibration+0xf8>)
 8003d02:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
					/ (BUFFER_SIZE / HALF_CONV_BUFF_SIZE);
 8003d06:	099b      	lsrs	r3, r3, #6
	calibrationValues.frontPressureSensor =
 8003d08:	b21a      	sxth	r2, r3
 8003d0a:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <travelPressureSensorCalibration+0xf8>)
 8003d0c:	80da      	strh	r2, [r3, #6]
}
 8003d0e:	bf00      	nop
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	200058a8 	.word	0x200058a8
 8003d1c:	20000018 	.word	0x20000018
 8003d20:	20005ef0 	.word	0x20005ef0
 8003d24:	2000001c 	.word	0x2000001c
 8003d28:	20000020 	.word	0x20000020
 8003d2c:	20000024 	.word	0x20000024

08003d30 <processData>:

void processData(char *sensorFront, char *sensorRear, char *sensorPressureFront,
		char *sensorPressureRear)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	603b      	str	r3, [r7, #0]
#ifdef FREE_RTOS
	osSemaphoreWait(travelSensorSemHandle, osWaitForever);
 8003d3e:	4b11      	ldr	r3, [pc, #68]	; (8003d84 <processData+0x54>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f04f 31ff 	mov.w	r1, #4294967295
 8003d46:	4618      	mov	r0, r3
 8003d48:	f010 fcae 	bl	80146a8 <osSemaphoreWait>
#endif
	sendDataSD(sensorRear, outRearBufPtr);
 8003d4c:	4b0e      	ldr	r3, [pc, #56]	; (8003d88 <processData+0x58>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4619      	mov	r1, r3
 8003d52:	68b8      	ldr	r0, [r7, #8]
 8003d54:	f000 faa8 	bl	80042a8 <sendDataSD>
	sendDataSD(sensorFront, outFrontBufPtr);
 8003d58:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <processData+0x5c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 faa2 	bl	80042a8 <sendDataSD>
	sendDataSD(sensorPressureRear, outRearPressureBufPtr);
 8003d64:	4b0a      	ldr	r3, [pc, #40]	; (8003d90 <processData+0x60>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4619      	mov	r1, r3
 8003d6a:	6838      	ldr	r0, [r7, #0]
 8003d6c:	f000 fa9c 	bl	80042a8 <sendDataSD>
	sendDataSD(sensorPressureFront, outFrontPressureBufPtr);
 8003d70:	4b08      	ldr	r3, [pc, #32]	; (8003d94 <processData+0x64>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4619      	mov	r1, r3
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 fa96 	bl	80042a8 <sendDataSD>
}
 8003d7c:	bf00      	nop
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	200058a8 	.word	0x200058a8
 8003d88:	20000018 	.word	0x20000018
 8003d8c:	2000001c 	.word	0x2000001c
 8003d90:	20000020 	.word	0x20000020
 8003d94:	20000024 	.word	0x20000024

08003d98 <processDataSag>:

void processDataSag(int16_t *sagRearFront, int16_t *pressureRearFront)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
#ifdef FREE_RTOS
	osSemaphoreWait(travelSensorSemHandle, osWaitForever);
 8003da2:	4b5c      	ldr	r3, [pc, #368]	; (8003f14 <processDataSag+0x17c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f04f 31ff 	mov.w	r1, #4294967295
 8003daa:	4618      	mov	r0, r3
 8003dac:	f010 fc7c 	bl	80146a8 <osSemaphoreWait>
#endif
	(uint32_t*) sagRearFront;
	for (int i = 0; i < BUFFER_SIZE / HALF_CONV_BUFF_SIZE; i++)
 8003db0:	2300      	movs	r3, #0
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	e04a      	b.n	8003e4c <processDataSag+0xb4>
	{
		sagRearFront[0] += outRearBufPtr[i];
 8003db6:	4b58      	ldr	r3, [pc, #352]	; (8003f18 <processDataSag+0x180>)
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	4413      	add	r3, r2
 8003dc0:	881b      	ldrh	r3, [r3, #0]
 8003dc2:	b219      	sxth	r1, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	b28b      	uxth	r3, r1
 8003dce:	4413      	add	r3, r2
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	b21a      	sxth	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	801a      	strh	r2, [r3, #0]
		sagRearFront[1] += outFrontBufPtr[i];
 8003dd8:	4b50      	ldr	r3, [pc, #320]	; (8003f1c <processDataSag+0x184>)
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	4413      	add	r3, r2
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	b219      	sxth	r1, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	3302      	adds	r3, #2
 8003dea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	b28b      	uxth	r3, r1
 8003df2:	4413      	add	r3, r2
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3302      	adds	r3, #2
 8003dfa:	b212      	sxth	r2, r2
 8003dfc:	801a      	strh	r2, [r3, #0]
		pressureRearFront[0] += outRearPressureBufPtr[i];
 8003dfe:	4b48      	ldr	r3, [pc, #288]	; (8003f20 <processDataSag+0x188>)
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	4413      	add	r3, r2
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	b219      	sxth	r1, r3
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	b28b      	uxth	r3, r1
 8003e16:	4413      	add	r3, r2
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	b21a      	sxth	r2, r3
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	801a      	strh	r2, [r3, #0]
		pressureRearFront[1] += outFrontPressureBufPtr[i];
 8003e20:	4b40      	ldr	r3, [pc, #256]	; (8003f24 <processDataSag+0x18c>)
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	4413      	add	r3, r2
 8003e2a:	881b      	ldrh	r3, [r3, #0]
 8003e2c:	b219      	sxth	r1, r3
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	3302      	adds	r3, #2
 8003e32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	b28b      	uxth	r3, r1
 8003e3a:	4413      	add	r3, r2
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	3302      	adds	r3, #2
 8003e42:	b212      	sxth	r2, r2
 8003e44:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < BUFFER_SIZE / HALF_CONV_BUFF_SIZE; i++)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2b3f      	cmp	r3, #63	; 0x3f
 8003e50:	d9b1      	bls.n	8003db6 <processDataSag+0x1e>

	}
	sagRearFront[0] = sagRearFront[0] / (BUFFER_SIZE / HALF_CONV_BUFF_SIZE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e58:	099b      	lsrs	r3, r3, #6
 8003e5a:	b21a      	sxth	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	801a      	strh	r2, [r3, #0]
	sagRearFront[1] = sagRearFront[1] / (BUFFER_SIZE / HALF_CONV_BUFF_SIZE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3302      	adds	r3, #2
 8003e64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e68:	099a      	lsrs	r2, r3, #6
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	3302      	adds	r3, #2
 8003e6e:	b212      	sxth	r2, r2
 8003e70:	801a      	strh	r2, [r3, #0]
	pressureRearFront[0] = pressureRearFront[0]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	f9b3 3000 	ldrsh.w	r3, [r3]
			/ (BUFFER_SIZE / HALF_CONV_BUFF_SIZE);
 8003e78:	099b      	lsrs	r3, r3, #6
	pressureRearFront[0] = pressureRearFront[0]
 8003e7a:	b21a      	sxth	r2, r3
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	801a      	strh	r2, [r3, #0]
	pressureRearFront[1] = pressureRearFront[1]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	3302      	adds	r3, #2
 8003e84:	f9b3 3000 	ldrsh.w	r3, [r3]
			/ (BUFFER_SIZE / HALF_CONV_BUFF_SIZE);
 8003e88:	099a      	lsrs	r2, r3, #6
	pressureRearFront[1] = pressureRearFront[1]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	3302      	adds	r3, #2
 8003e8e:	b212      	sxth	r2, r2
 8003e90:	801a      	strh	r2, [r3, #0]

	sagRearFront[0] = CONVERT_TO_PERCENT
			* (sagRearFront[0] / ((float) (REAR_SUSPENSION_TRAVEL - calibrationValues.rearTravelSensor)));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e98:	ee07 3a90 	vmov	s15, r3
 8003e9c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003ea0:	4b21      	ldr	r3, [pc, #132]	; (8003f28 <processDataSag+0x190>)
 8003ea2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ea6:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 8003eaa:	ee07 3a90 	vmov	s15, r3
 8003eae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003eb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003eb6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003f2c <processDataSag+0x194>
 8003eba:	ee67 7a87 	vmul.f32	s15, s15, s14
	sagRearFront[0] = CONVERT_TO_PERCENT
 8003ebe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ec2:	ee17 3a90 	vmov	r3, s15
 8003ec6:	b21a      	sxth	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	801a      	strh	r2, [r3, #0]
	sagRearFront[1] = CONVERT_TO_PERCENT
			* (sagRearFront[1] / ((float) (FRONT_SUSPENSION_TRAVEL - calibrationValues.frontTravelSensor)));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3302      	adds	r3, #2
 8003ed0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ed4:	ee07 3a90 	vmov	s15, r3
 8003ed8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003edc:	4b12      	ldr	r3, [pc, #72]	; (8003f28 <processDataSag+0x190>)
 8003ede:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003ee2:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8003ee6:	ee07 3a90 	vmov	s15, r3
 8003eea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003eee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ef2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003f2c <processDataSag+0x194>
 8003ef6:	ee67 7a87 	vmul.f32	s15, s15, s14
	sagRearFront[1] = CONVERT_TO_PERCENT
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	3302      	adds	r3, #2
 8003efe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f02:	ee17 2a90 	vmov	r2, s15
 8003f06:	b212      	sxth	r2, r2
 8003f08:	801a      	strh	r2, [r3, #0]
}
 8003f0a:	bf00      	nop
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	200058a8 	.word	0x200058a8
 8003f18:	20000018 	.word	0x20000018
 8003f1c:	2000001c 	.word	0x2000001c
 8003f20:	20000020 	.word	0x20000020
 8003f24:	20000024 	.word	0x20000024
 8003f28:	20005ef0 	.word	0x20005ef0
 8003f2c:	42c80000 	.word	0x42c80000

08003f30 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
	inBufPtr = &adcDataWrite[0];
 8003f38:	4b44      	ldr	r3, [pc, #272]	; (800404c <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 8003f3a:	4a45      	ldr	r2, [pc, #276]	; (8004050 <HAL_ADC_ConvHalfCpltCallback+0x120>)
 8003f3c:	601a      	str	r2, [r3, #0]
	outRearPressureBufPtr = &adcRearPressureDataRead[0];
 8003f3e:	4b45      	ldr	r3, [pc, #276]	; (8004054 <HAL_ADC_ConvHalfCpltCallback+0x124>)
 8003f40:	4a45      	ldr	r2, [pc, #276]	; (8004058 <HAL_ADC_ConvHalfCpltCallback+0x128>)
 8003f42:	601a      	str	r2, [r3, #0]
	outFrontPressureBufPtr = &adcFrontPressureDataRead[0];
 8003f44:	4b45      	ldr	r3, [pc, #276]	; (800405c <HAL_ADC_ConvHalfCpltCallback+0x12c>)
 8003f46:	4a46      	ldr	r2, [pc, #280]	; (8004060 <HAL_ADC_ConvHalfCpltCallback+0x130>)
 8003f48:	601a      	str	r2, [r3, #0]
	outRearBufPtr = &adcRearDataRead[0];
 8003f4a:	4b46      	ldr	r3, [pc, #280]	; (8004064 <HAL_ADC_ConvHalfCpltCallback+0x134>)
 8003f4c:	4a46      	ldr	r2, [pc, #280]	; (8004068 <HAL_ADC_ConvHalfCpltCallback+0x138>)
 8003f4e:	601a      	str	r2, [r3, #0]
	outFrontBufPtr = &adcFrontDataRead[0];
 8003f50:	4b46      	ldr	r3, [pc, #280]	; (800406c <HAL_ADC_ConvHalfCpltCallback+0x13c>)
 8003f52:	4a47      	ldr	r2, [pc, #284]	; (8004070 <HAL_ADC_ConvHalfCpltCallback+0x140>)
 8003f54:	601a      	str	r2, [r3, #0]

	for (int n = 0; n < (BUFFER_SIZE / 2) - 1; n += NUMBER_OF_SENSORS)
 8003f56:	2300      	movs	r3, #0
 8003f58:	60fb      	str	r3, [r7, #12]
 8003f5a:	e06a      	b.n	8004032 <HAL_ADC_ConvHalfCpltCallback+0x102>
	{
		outRearPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003f5c:	4b3b      	ldr	r3, [pc, #236]	; (800404c <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 8003f5e:	681a      	ldr	r2, [r3, #0]
				&inBufPtr[n],
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	005b      	lsls	r3, r3, #1
		outRearPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003f64:	4413      	add	r3, r2
 8003f66:	2106      	movs	r1, #6
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 f973 	bl	8004254 <convertAdcToPressure>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	b29a      	uxth	r2, r3
				PRESSURE_SENSOR_MAX_VALUE)
				- calibrationValues.rearPressureSensor;
 8003f72:	4b40      	ldr	r3, [pc, #256]	; (8004074 <HAL_ADC_ConvHalfCpltCallback+0x144>)
 8003f74:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	b299      	uxth	r1, r3
		outRearPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003f7e:	4b35      	ldr	r3, [pc, #212]	; (8004054 <HAL_ADC_ConvHalfCpltCallback+0x124>)
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	089b      	lsrs	r3, r3, #2
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	4413      	add	r3, r2
				- calibrationValues.rearPressureSensor;
 8003f8a:	b20a      	sxth	r2, r1
		outRearPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003f8c:	801a      	strh	r2, [r3, #0]
		outFrontPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003f8e:	4b2f      	ldr	r3, [pc, #188]	; (800404c <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 8003f90:	681a      	ldr	r2, [r3, #0]
				&inBufPtr[n + 1],
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	3301      	adds	r3, #1
 8003f96:	005b      	lsls	r3, r3, #1
		outFrontPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003f98:	4413      	add	r3, r2
 8003f9a:	2106      	movs	r1, #6
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 f959 	bl	8004254 <convertAdcToPressure>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	b29a      	uxth	r2, r3
				PRESSURE_SENSOR_MAX_VALUE)
				- calibrationValues.frontPressureSensor;
 8003fa6:	4b33      	ldr	r3, [pc, #204]	; (8004074 <HAL_ADC_ConvHalfCpltCallback+0x144>)
 8003fa8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	b299      	uxth	r1, r3
		outFrontPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003fb2:	4b2a      	ldr	r3, [pc, #168]	; (800405c <HAL_ADC_ConvHalfCpltCallback+0x12c>)
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	089b      	lsrs	r3, r3, #2
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	4413      	add	r3, r2
				- calibrationValues.frontPressureSensor;
 8003fbe:	b20a      	sxth	r2, r1
		outFrontPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003fc0:	801a      	strh	r2, [r3, #0]
		outRearBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003fc2:	4b22      	ldr	r3, [pc, #136]	; (800404c <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 8003fc4:	681a      	ldr	r2, [r3, #0]
				&inBufPtr[n + 2],
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	3302      	adds	r3, #2
 8003fca:	005b      	lsls	r3, r3, #1
		outRearBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003fcc:	4413      	add	r3, r2
 8003fce:	217d      	movs	r1, #125	; 0x7d
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 f929 	bl	8004228 <convertAdcToTravel>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	b29a      	uxth	r2, r3
				REAR_SENSOR_TRAVEL) - calibrationValues.rearTravelSensor;
 8003fda:	4b26      	ldr	r3, [pc, #152]	; (8004074 <HAL_ADC_ConvHalfCpltCallback+0x144>)
 8003fdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	b299      	uxth	r1, r3
		outRearBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003fe6:	4b1f      	ldr	r3, [pc, #124]	; (8004064 <HAL_ADC_ConvHalfCpltCallback+0x134>)
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	089b      	lsrs	r3, r3, #2
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	4413      	add	r3, r2
				REAR_SENSOR_TRAVEL) - calibrationValues.rearTravelSensor;
 8003ff2:	b20a      	sxth	r2, r1
		outRearBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003ff4:	801a      	strh	r2, [r3, #0]
		outFrontBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003ff6:	4b15      	ldr	r3, [pc, #84]	; (800404c <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 8003ff8:	681a      	ldr	r2, [r3, #0]
				&inBufPtr[n + 3],
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	3303      	adds	r3, #3
 8003ffe:	005b      	lsls	r3, r3, #1
		outFrontBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8004000:	4413      	add	r3, r2
 8004002:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004006:	4618      	mov	r0, r3
 8004008:	f000 f90e 	bl	8004228 <convertAdcToTravel>
 800400c:	4603      	mov	r3, r0
 800400e:	b29a      	uxth	r2, r3
				FRONT_SENSOR_TRAVEL) - calibrationValues.frontTravelSensor;
 8004010:	4b18      	ldr	r3, [pc, #96]	; (8004074 <HAL_ADC_ConvHalfCpltCallback+0x144>)
 8004012:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004016:	b29b      	uxth	r3, r3
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	b299      	uxth	r1, r3
		outFrontBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 800401c:	4b13      	ldr	r3, [pc, #76]	; (800406c <HAL_ADC_ConvHalfCpltCallback+0x13c>)
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	089b      	lsrs	r3, r3, #2
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	4413      	add	r3, r2
				FRONT_SENSOR_TRAVEL) - calibrationValues.frontTravelSensor;
 8004028:	b20a      	sxth	r2, r1
		outFrontBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 800402a:	801a      	strh	r2, [r3, #0]
	for (int n = 0; n < (BUFFER_SIZE / 2) - 1; n += NUMBER_OF_SENSORS)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	3304      	adds	r3, #4
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2bfe      	cmp	r3, #254	; 0xfe
 8004036:	d991      	bls.n	8003f5c <HAL_ADC_ConvHalfCpltCallback+0x2c>
	}
#ifdef FREE_RTOS
	osSemaphoreRelease(travelSensorSemHandle);
 8004038:	4b0f      	ldr	r3, [pc, #60]	; (8004078 <HAL_ADC_ConvHalfCpltCallback+0x148>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	f010 fb81 	bl	8014744 <osSemaphoreRelease>
#endif
}
 8004042:	bf00      	nop
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	200066f8 	.word	0x200066f8
 8004050:	20005ef8 	.word	0x20005ef8
 8004054:	20000020 	.word	0x20000020
 8004058:	200064f8 	.word	0x200064f8
 800405c:	20000024 	.word	0x20000024
 8004060:	200065f8 	.word	0x200065f8
 8004064:	20000018 	.word	0x20000018
 8004068:	200062f8 	.word	0x200062f8
 800406c:	2000001c 	.word	0x2000001c
 8004070:	200063f8 	.word	0x200063f8
 8004074:	20005ef0 	.word	0x20005ef0
 8004078:	200058a8 	.word	0x200058a8

0800407c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
#ifdef CHECK_SAMPLE_TIME
	previousTime = time_end;
 8004084:	4b56      	ldr	r3, [pc, #344]	; (80041e0 <HAL_ADC_ConvCpltCallback+0x164>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a56      	ldr	r2, [pc, #344]	; (80041e4 <HAL_ADC_ConvCpltCallback+0x168>)
 800408a:	6013      	str	r3, [r2, #0]
	time_end = __HAL_TIM_GET_COUNTER(&htim6);
 800408c:	4b56      	ldr	r3, [pc, #344]	; (80041e8 <HAL_ADC_ConvCpltCallback+0x16c>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	461a      	mov	r2, r3
 8004094:	4b52      	ldr	r3, [pc, #328]	; (80041e0 <HAL_ADC_ConvCpltCallback+0x164>)
 8004096:	601a      	str	r2, [r3, #0]
	sample_time = ((time_end - previousTime)/NUMBER_OF_SENSORS)/(float)(BUFFER_SIZE/NUMBER_OF_SENSORS);
 8004098:	4b51      	ldr	r3, [pc, #324]	; (80041e0 <HAL_ADC_ConvCpltCallback+0x164>)
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	4b51      	ldr	r3, [pc, #324]	; (80041e4 <HAL_ADC_ConvCpltCallback+0x168>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	089b      	lsrs	r3, r3, #2
 80040a4:	ee07 3a90 	vmov	s15, r3
 80040a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80040ac:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80041ec <HAL_ADC_ConvCpltCallback+0x170>
 80040b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040b4:	4b4e      	ldr	r3, [pc, #312]	; (80041f0 <HAL_ADC_ConvCpltCallback+0x174>)
 80040b6:	edc3 7a00 	vstr	s15, [r3]
	printf("semFullTime: %f\n", sample_time);
 80040ba:	4b4d      	ldr	r3, [pc, #308]	; (80041f0 <HAL_ADC_ConvCpltCallback+0x174>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fc fa72 	bl	80005a8 <__aeabi_f2d>
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	484a      	ldr	r0, [pc, #296]	; (80041f4 <HAL_ADC_ConvCpltCallback+0x178>)
 80040ca:	f014 f913 	bl	80182f4 <iprintf>
#endif

	inBufPtr = &adcDataWrite[BUFFER_SIZE / 2];
 80040ce:	4b4a      	ldr	r3, [pc, #296]	; (80041f8 <HAL_ADC_ConvCpltCallback+0x17c>)
 80040d0:	4a4a      	ldr	r2, [pc, #296]	; (80041fc <HAL_ADC_ConvCpltCallback+0x180>)
 80040d2:	601a      	str	r2, [r3, #0]
	outRearPressureBufPtr = &adcRearPressureDataRead[BUFFER_SIZE
 80040d4:	4b4a      	ldr	r3, [pc, #296]	; (8004200 <HAL_ADC_ConvCpltCallback+0x184>)
 80040d6:	4a4b      	ldr	r2, [pc, #300]	; (8004204 <HAL_ADC_ConvCpltCallback+0x188>)
 80040d8:	601a      	str	r2, [r3, #0]
			/ HALF_CONV_BUFF_SIZE];
	outFrontPressureBufPtr = &adcFrontPressureDataRead[BUFFER_SIZE
 80040da:	4b4b      	ldr	r3, [pc, #300]	; (8004208 <HAL_ADC_ConvCpltCallback+0x18c>)
 80040dc:	4a4b      	ldr	r2, [pc, #300]	; (800420c <HAL_ADC_ConvCpltCallback+0x190>)
 80040de:	601a      	str	r2, [r3, #0]
			/ HALF_CONV_BUFF_SIZE];
	outRearBufPtr = &adcRearDataRead[BUFFER_SIZE / HALF_CONV_BUFF_SIZE];
 80040e0:	4b4b      	ldr	r3, [pc, #300]	; (8004210 <HAL_ADC_ConvCpltCallback+0x194>)
 80040e2:	4a4c      	ldr	r2, [pc, #304]	; (8004214 <HAL_ADC_ConvCpltCallback+0x198>)
 80040e4:	601a      	str	r2, [r3, #0]
	outFrontBufPtr = &adcFrontDataRead[BUFFER_SIZE / HALF_CONV_BUFF_SIZE];
 80040e6:	4b4c      	ldr	r3, [pc, #304]	; (8004218 <HAL_ADC_ConvCpltCallback+0x19c>)
 80040e8:	4a4c      	ldr	r2, [pc, #304]	; (800421c <HAL_ADC_ConvCpltCallback+0x1a0>)
 80040ea:	601a      	str	r2, [r3, #0]

	for (int n = 0; n < (BUFFER_SIZE / 2) - 1; n += NUMBER_OF_SENSORS)
 80040ec:	2300      	movs	r3, #0
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	e06a      	b.n	80041c8 <HAL_ADC_ConvCpltCallback+0x14c>
	{
		outRearPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 80040f2:	4b41      	ldr	r3, [pc, #260]	; (80041f8 <HAL_ADC_ConvCpltCallback+0x17c>)
 80040f4:	681a      	ldr	r2, [r3, #0]
				&inBufPtr[n],
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	005b      	lsls	r3, r3, #1
		outRearPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 80040fa:	4413      	add	r3, r2
 80040fc:	2106      	movs	r1, #6
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 f8a8 	bl	8004254 <convertAdcToPressure>
 8004104:	4603      	mov	r3, r0
 8004106:	b29a      	uxth	r2, r3
				PRESSURE_SENSOR_MAX_VALUE)
				- calibrationValues.rearPressureSensor;
 8004108:	4b45      	ldr	r3, [pc, #276]	; (8004220 <HAL_ADC_ConvCpltCallback+0x1a4>)
 800410a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800410e:	b29b      	uxth	r3, r3
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	b299      	uxth	r1, r3
		outRearPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8004114:	4b3a      	ldr	r3, [pc, #232]	; (8004200 <HAL_ADC_ConvCpltCallback+0x184>)
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	089b      	lsrs	r3, r3, #2
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	4413      	add	r3, r2
				- calibrationValues.rearPressureSensor;
 8004120:	b20a      	sxth	r2, r1
		outRearPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8004122:	801a      	strh	r2, [r3, #0]
		outFrontPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8004124:	4b34      	ldr	r3, [pc, #208]	; (80041f8 <HAL_ADC_ConvCpltCallback+0x17c>)
 8004126:	681a      	ldr	r2, [r3, #0]
				&inBufPtr[n + 1],
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	3301      	adds	r3, #1
 800412c:	005b      	lsls	r3, r3, #1
		outFrontPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 800412e:	4413      	add	r3, r2
 8004130:	2106      	movs	r1, #6
 8004132:	4618      	mov	r0, r3
 8004134:	f000 f88e 	bl	8004254 <convertAdcToPressure>
 8004138:	4603      	mov	r3, r0
 800413a:	b29a      	uxth	r2, r3
				PRESSURE_SENSOR_MAX_VALUE)
				- calibrationValues.frontPressureSensor;
 800413c:	4b38      	ldr	r3, [pc, #224]	; (8004220 <HAL_ADC_ConvCpltCallback+0x1a4>)
 800413e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004142:	b29b      	uxth	r3, r3
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	b299      	uxth	r1, r3
		outFrontPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8004148:	4b2f      	ldr	r3, [pc, #188]	; (8004208 <HAL_ADC_ConvCpltCallback+0x18c>)
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	089b      	lsrs	r3, r3, #2
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	4413      	add	r3, r2
				- calibrationValues.frontPressureSensor;
 8004154:	b20a      	sxth	r2, r1
		outFrontPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8004156:	801a      	strh	r2, [r3, #0]
		outRearBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8004158:	4b27      	ldr	r3, [pc, #156]	; (80041f8 <HAL_ADC_ConvCpltCallback+0x17c>)
 800415a:	681a      	ldr	r2, [r3, #0]
				&inBufPtr[n + 2],
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	3302      	adds	r3, #2
 8004160:	005b      	lsls	r3, r3, #1
		outRearBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8004162:	4413      	add	r3, r2
 8004164:	217d      	movs	r1, #125	; 0x7d
 8004166:	4618      	mov	r0, r3
 8004168:	f000 f85e 	bl	8004228 <convertAdcToTravel>
 800416c:	4603      	mov	r3, r0
 800416e:	b29a      	uxth	r2, r3
				REAR_SENSOR_TRAVEL) - calibrationValues.rearTravelSensor;
 8004170:	4b2b      	ldr	r3, [pc, #172]	; (8004220 <HAL_ADC_ConvCpltCallback+0x1a4>)
 8004172:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004176:	b29b      	uxth	r3, r3
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	b299      	uxth	r1, r3
		outRearBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 800417c:	4b24      	ldr	r3, [pc, #144]	; (8004210 <HAL_ADC_ConvCpltCallback+0x194>)
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	089b      	lsrs	r3, r3, #2
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	4413      	add	r3, r2
				REAR_SENSOR_TRAVEL) - calibrationValues.rearTravelSensor;
 8004188:	b20a      	sxth	r2, r1
		outRearBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 800418a:	801a      	strh	r2, [r3, #0]
		outFrontBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 800418c:	4b1a      	ldr	r3, [pc, #104]	; (80041f8 <HAL_ADC_ConvCpltCallback+0x17c>)
 800418e:	681a      	ldr	r2, [r3, #0]
				&inBufPtr[n + 3],
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	3303      	adds	r3, #3
 8004194:	005b      	lsls	r3, r3, #1
		outFrontBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8004196:	4413      	add	r3, r2
 8004198:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800419c:	4618      	mov	r0, r3
 800419e:	f000 f843 	bl	8004228 <convertAdcToTravel>
 80041a2:	4603      	mov	r3, r0
 80041a4:	b29a      	uxth	r2, r3
				FRONT_SENSOR_TRAVEL) - calibrationValues.frontTravelSensor;
 80041a6:	4b1e      	ldr	r3, [pc, #120]	; (8004220 <HAL_ADC_ConvCpltCallback+0x1a4>)
 80041a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	b299      	uxth	r1, r3
		outFrontBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 80041b2:	4b19      	ldr	r3, [pc, #100]	; (8004218 <HAL_ADC_ConvCpltCallback+0x19c>)
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	089b      	lsrs	r3, r3, #2
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	4413      	add	r3, r2
				FRONT_SENSOR_TRAVEL) - calibrationValues.frontTravelSensor;
 80041be:	b20a      	sxth	r2, r1
		outFrontBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 80041c0:	801a      	strh	r2, [r3, #0]
	for (int n = 0; n < (BUFFER_SIZE / 2) - 1; n += NUMBER_OF_SENSORS)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	3304      	adds	r3, #4
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2bfe      	cmp	r3, #254	; 0xfe
 80041cc:	d991      	bls.n	80040f2 <HAL_ADC_ConvCpltCallback+0x76>
	}
#ifdef FREE_RTOS
	osSemaphoreRelease(travelSensorSemHandle);
 80041ce:	4b15      	ldr	r3, [pc, #84]	; (8004224 <HAL_ADC_ConvCpltCallback+0x1a8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f010 fab6 	bl	8014744 <osSemaphoreRelease>
#endif
}
 80041d8:	bf00      	nop
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	200066fc 	.word	0x200066fc
 80041e4:	20006700 	.word	0x20006700
 80041e8:	20005e60 	.word	0x20005e60
 80041ec:	43000000 	.word	0x43000000
 80041f0:	20006704 	.word	0x20006704
 80041f4:	0801aa90 	.word	0x0801aa90
 80041f8:	200066f8 	.word	0x200066f8
 80041fc:	200060f8 	.word	0x200060f8
 8004200:	20000020 	.word	0x20000020
 8004204:	20006578 	.word	0x20006578
 8004208:	20000024 	.word	0x20000024
 800420c:	20006678 	.word	0x20006678
 8004210:	20000018 	.word	0x20000018
 8004214:	20006378 	.word	0x20006378
 8004218:	2000001c 	.word	0x2000001c
 800421c:	20006478 	.word	0x20006478
 8004220:	20005ef0 	.word	0x20005ef0
 8004224:	200058a8 	.word	0x200058a8

08004228 <convertAdcToTravel>:

static int16_t convertAdcToTravel(volatile int16_t *adcDataWrite,
		int16_t sensorTravel)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	460b      	mov	r3, r1
 8004232:	807b      	strh	r3, [r7, #2]

	return (*adcDataWrite * sensorTravel / ADC_RESOLUTION);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	881b      	ldrh	r3, [r3, #0]
 8004238:	b21b      	sxth	r3, r3
 800423a:	461a      	mov	r2, r3
 800423c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004240:	fb02 f303 	mul.w	r3, r2, r3
 8004244:	0b1b      	lsrs	r3, r3, #12
 8004246:	b21b      	sxth	r3, r3
}
 8004248:	4618      	mov	r0, r3
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <convertAdcToPressure>:

static int16_t convertAdcToPressure(volatile int16_t *adcDataWrite,
		int16_t sensorMaxPressure)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	460b      	mov	r3, r1
 800425e:	807b      	strh	r3, [r7, #2]

	return ((CONVERT_MPa_to_PSI)
			* (*adcDataWrite * sensorMaxPressure / ((float) ADC_RESOLUTION)));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	b21b      	sxth	r3, r3
 8004266:	461a      	mov	r2, r3
 8004268:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800426c:	fb02 f303 	mul.w	r3, r2, r3
 8004270:	ee07 3a90 	vmov	s15, r3
 8004274:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004278:	eddf 6a09 	vldr	s13, [pc, #36]	; 80042a0 <convertAdcToPressure+0x4c>
 800427c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004280:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80042a4 <convertAdcToPressure+0x50>
 8004284:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004288:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800428c:	ee17 3a90 	vmov	r3, s15
 8004290:	b21b      	sxth	r3, r3
}
 8004292:	4618      	mov	r0, r3
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	45800000 	.word	0x45800000
 80042a4:	43110000 	.word	0x43110000

080042a8 <sendDataSD>:

static void sendDataSD(char *file, volatile int16_t *sensor)
{
 80042a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042ac:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80042b6:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80042ba:	6018      	str	r0, [r3, #0]
 80042bc:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80042c0:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80042c4:	6019      	str	r1, [r3, #0]
 80042c6:	466b      	mov	r3, sp
 80042c8:	469a      	mov	sl, r3
	char buffer[BUFFER_SIZE + 1];
	memset(buffer, 0, BUFFER_SIZE + 1);
 80042ca:	f107 030c 	add.w	r3, r7, #12
 80042ce:	f240 2201 	movw	r2, #513	; 0x201
 80042d2:	2100      	movs	r1, #0
 80042d4:	4618      	mov	r0, r3
 80042d6:	f014 f973 	bl	80185c0 <memset>
	int i;
	for (i = 0; i < (BUFFER_SIZE) / HALF_CONV_BUFF_SIZE; i++)
 80042da:	2300      	movs	r3, #0
 80042dc:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80042e0:	e01c      	b.n	800431c <sendDataSD+0x74>
	{
		sprintf(buffer + strlen(buffer), "%d ", sensor[i]);
 80042e2:	f107 030c 	add.w	r3, r7, #12
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7fb fff2 	bl	80002d0 <strlen>
 80042ec:	4602      	mov	r2, r0
 80042ee:	f107 030c 	add.w	r3, r7, #12
 80042f2:	1898      	adds	r0, r3, r2
 80042f4:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80042fe:	f5a2 7208 	sub.w	r2, r2, #544	; 0x220
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	4413      	add	r3, r2
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	b21b      	sxth	r3, r3
 800430a:	461a      	mov	r2, r3
 800430c:	4933      	ldr	r1, [pc, #204]	; (80043dc <sendDataSD+0x134>)
 800430e:	f014 f85f 	bl	80183d0 <siprintf>
	for (i = 0; i < (BUFFER_SIZE) / HALF_CONV_BUFF_SIZE; i++)
 8004312:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004316:	3301      	adds	r3, #1
 8004318:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800431c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004320:	2b3f      	cmp	r3, #63	; 0x3f
 8004322:	d9de      	bls.n	80042e2 <sendDataSD+0x3a>
	}
	size_t size = strlen(buffer) + 1;
 8004324:	f107 030c 	add.w	r3, r7, #12
 8004328:	4618      	mov	r0, r3
 800432a:	f7fb ffd1 	bl	80002d0 <strlen>
 800432e:	4603      	mov	r3, r0
 8004330:	3301      	adds	r3, #1
 8004332:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	char newBuff[size];
 8004336:	f8d7 6218 	ldr.w	r6, [r7, #536]	; 0x218
 800433a:	4633      	mov	r3, r6
 800433c:	3b01      	subs	r3, #1
 800433e:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8004342:	2300      	movs	r3, #0
 8004344:	46b0      	mov	r8, r6
 8004346:	4699      	mov	r9, r3
 8004348:	f04f 0200 	mov.w	r2, #0
 800434c:	f04f 0300 	mov.w	r3, #0
 8004350:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004354:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004358:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800435c:	2300      	movs	r3, #0
 800435e:	4634      	mov	r4, r6
 8004360:	461d      	mov	r5, r3
 8004362:	f04f 0200 	mov.w	r2, #0
 8004366:	f04f 0300 	mov.w	r3, #0
 800436a:	00eb      	lsls	r3, r5, #3
 800436c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004370:	00e2      	lsls	r2, r4, #3
 8004372:	1df3      	adds	r3, r6, #7
 8004374:	08db      	lsrs	r3, r3, #3
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	ebad 0d03 	sub.w	sp, sp, r3
 800437c:	466b      	mov	r3, sp
 800437e:	3300      	adds	r3, #0
 8004380:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	memset(newBuff, 0, size);
 8004384:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8004388:	2100      	movs	r1, #0
 800438a:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 800438e:	f014 f917 	bl	80185c0 <memset>
	strncpy(newBuff, buffer, sizeof(newBuff));
 8004392:	f107 030c 	add.w	r3, r7, #12
 8004396:	4632      	mov	r2, r6
 8004398:	4619      	mov	r1, r3
 800439a:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 800439e:	f014 f917 	bl	80185d0 <strncpy>
	newBuff[size] = '\0';
 80043a2:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80043a6:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80043aa:	4413      	add	r3, r2
 80043ac:	2200      	movs	r2, #0
 80043ae:	701a      	strb	r2, [r3, #0]
	Mount_SD("/");
 80043b0:	480b      	ldr	r0, [pc, #44]	; (80043e0 <sendDataSD+0x138>)
 80043b2:	f7fc feb1 	bl	8001118 <Mount_SD>
	Update_File(file, newBuff);
 80043b6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80043ba:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80043be:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 80043c2:	6818      	ldr	r0, [r3, #0]
 80043c4:	f7fc ffa4 	bl	8001310 <Update_File>
	Unmount_SD("/");
 80043c8:	4805      	ldr	r0, [pc, #20]	; (80043e0 <sendDataSD+0x138>)
 80043ca:	f7fc febb 	bl	8001144 <Unmount_SD>
 80043ce:	46d5      	mov	sp, sl
}
 80043d0:	bf00      	nop
 80043d2:	f507 7708 	add.w	r7, r7, #544	; 0x220
 80043d6:	46bd      	mov	sp, r7
 80043d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043dc:	0801aaa4 	.word	0x0801aaa4
 80043e0:	0801aaa8 	.word	0x0801aaa8

080043e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80043e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800441c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80043e8:	480d      	ldr	r0, [pc, #52]	; (8004420 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80043ea:	490e      	ldr	r1, [pc, #56]	; (8004424 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80043ec:	4a0e      	ldr	r2, [pc, #56]	; (8004428 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80043ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043f0:	e002      	b.n	80043f8 <LoopCopyDataInit>

080043f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043f6:	3304      	adds	r3, #4

080043f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043fc:	d3f9      	bcc.n	80043f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043fe:	4a0b      	ldr	r2, [pc, #44]	; (800442c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004400:	4c0b      	ldr	r4, [pc, #44]	; (8004430 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004404:	e001      	b.n	800440a <LoopFillZerobss>

08004406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004408:	3204      	adds	r2, #4

0800440a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800440a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800440c:	d3fb      	bcc.n	8004406 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800440e:	f7ff fa33 	bl	8003878 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004412:	f014 f997 	bl	8018744 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004416:	f7fe fbaf 	bl	8002b78 <main>
  bx  lr    
 800441a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800441c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004420:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004424:	20000338 	.word	0x20000338
  ldr r2, =_sidata
 8004428:	0801af84 	.word	0x0801af84
  ldr r2, =_sbss
 800442c:	20000338 	.word	0x20000338
  ldr r4, =_ebss
 8004430:	2000b28c 	.word	0x2000b28c

08004434 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004434:	e7fe      	b.n	8004434 <ADC_IRQHandler>
	...

08004438 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800443c:	4b0e      	ldr	r3, [pc, #56]	; (8004478 <HAL_Init+0x40>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a0d      	ldr	r2, [pc, #52]	; (8004478 <HAL_Init+0x40>)
 8004442:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004446:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004448:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <HAL_Init+0x40>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a0a      	ldr	r2, [pc, #40]	; (8004478 <HAL_Init+0x40>)
 800444e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004452:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004454:	4b08      	ldr	r3, [pc, #32]	; (8004478 <HAL_Init+0x40>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a07      	ldr	r2, [pc, #28]	; (8004478 <HAL_Init+0x40>)
 800445a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800445e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004460:	2003      	movs	r0, #3
 8004462:	f000 fd64 	bl	8004f2e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004466:	200f      	movs	r0, #15
 8004468:	f7ff f85a 	bl	8003520 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800446c:	f7ff f82c 	bl	80034c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	40023c00 	.word	0x40023c00

0800447c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004480:	4b06      	ldr	r3, [pc, #24]	; (800449c <HAL_IncTick+0x20>)
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	461a      	mov	r2, r3
 8004486:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <HAL_IncTick+0x24>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4413      	add	r3, r2
 800448c:	4a04      	ldr	r2, [pc, #16]	; (80044a0 <HAL_IncTick+0x24>)
 800448e:	6013      	str	r3, [r2, #0]
}
 8004490:	bf00      	nop
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	2000002c 	.word	0x2000002c
 80044a0:	20006708 	.word	0x20006708

080044a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  return uwTick;
 80044a8:	4b03      	ldr	r3, [pc, #12]	; (80044b8 <HAL_GetTick+0x14>)
 80044aa:	681b      	ldr	r3, [r3, #0]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	20006708 	.word	0x20006708

080044bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044c4:	f7ff ffee 	bl	80044a4 <HAL_GetTick>
 80044c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d4:	d005      	beq.n	80044e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044d6:	4b0a      	ldr	r3, [pc, #40]	; (8004500 <HAL_Delay+0x44>)
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	461a      	mov	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4413      	add	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80044e2:	bf00      	nop
 80044e4:	f7ff ffde 	bl	80044a4 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d8f7      	bhi.n	80044e4 <HAL_Delay+0x28>
  {
  }
}
 80044f4:	bf00      	nop
 80044f6:	bf00      	nop
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	2000002c 	.word	0x2000002c

08004504 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800450c:	2300      	movs	r3, #0
 800450e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e033      	b.n	8004582 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	2b00      	cmp	r3, #0
 8004520:	d109      	bne.n	8004536 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7fd f81c 	bl	8001560 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	f003 0310 	and.w	r3, r3, #16
 800453e:	2b00      	cmp	r3, #0
 8004540:	d118      	bne.n	8004574 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800454a:	f023 0302 	bic.w	r3, r3, #2
 800454e:	f043 0202 	orr.w	r2, r3, #2
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 fabe 	bl	8004ad8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004566:	f023 0303 	bic.w	r3, r3, #3
 800456a:	f043 0201 	orr.w	r2, r3, #1
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	641a      	str	r2, [r3, #64]	; 0x40
 8004572:	e001      	b.n	8004578 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004580:	7bfb      	ldrb	r3, [r7, #15]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d101      	bne.n	80045aa <HAL_ADC_Start_DMA+0x1e>
 80045a6:	2302      	movs	r3, #2
 80045a8:	e0e9      	b.n	800477e <HAL_ADC_Start_DMA+0x1f2>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d018      	beq.n	80045f2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0201 	orr.w	r2, r2, #1
 80045ce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80045d0:	4b6d      	ldr	r3, [pc, #436]	; (8004788 <HAL_ADC_Start_DMA+0x1fc>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a6d      	ldr	r2, [pc, #436]	; (800478c <HAL_ADC_Start_DMA+0x200>)
 80045d6:	fba2 2303 	umull	r2, r3, r2, r3
 80045da:	0c9a      	lsrs	r2, r3, #18
 80045dc:	4613      	mov	r3, r2
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	4413      	add	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80045e4:	e002      	b.n	80045ec <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	3b01      	subs	r3, #1
 80045ea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1f9      	bne.n	80045e6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004600:	d107      	bne.n	8004612 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004610:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b01      	cmp	r3, #1
 800461e:	f040 80a1 	bne.w	8004764 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800462a:	f023 0301 	bic.w	r3, r3, #1
 800462e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004640:	2b00      	cmp	r3, #0
 8004642:	d007      	beq.n	8004654 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800464c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004658:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800465c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004660:	d106      	bne.n	8004670 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004666:	f023 0206 	bic.w	r2, r3, #6
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	645a      	str	r2, [r3, #68]	; 0x44
 800466e:	e002      	b.n	8004676 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800467e:	4b44      	ldr	r3, [pc, #272]	; (8004790 <HAL_ADC_Start_DMA+0x204>)
 8004680:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	4a43      	ldr	r2, [pc, #268]	; (8004794 <HAL_ADC_Start_DMA+0x208>)
 8004688:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468e:	4a42      	ldr	r2, [pc, #264]	; (8004798 <HAL_ADC_Start_DMA+0x20c>)
 8004690:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004696:	4a41      	ldr	r2, [pc, #260]	; (800479c <HAL_ADC_Start_DMA+0x210>)
 8004698:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80046a2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80046b2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689a      	ldr	r2, [r3, #8]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046c2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	334c      	adds	r3, #76	; 0x4c
 80046ce:	4619      	mov	r1, r3
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f000 fd0e 	bl	80050f4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f003 031f 	and.w	r3, r3, #31
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d12a      	bne.n	800473a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a2d      	ldr	r2, [pc, #180]	; (80047a0 <HAL_ADC_Start_DMA+0x214>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d015      	beq.n	800471a <HAL_ADC_Start_DMA+0x18e>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a2c      	ldr	r2, [pc, #176]	; (80047a4 <HAL_ADC_Start_DMA+0x218>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d105      	bne.n	8004704 <HAL_ADC_Start_DMA+0x178>
 80046f8:	4b25      	ldr	r3, [pc, #148]	; (8004790 <HAL_ADC_Start_DMA+0x204>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f003 031f 	and.w	r3, r3, #31
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00a      	beq.n	800471a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a27      	ldr	r2, [pc, #156]	; (80047a8 <HAL_ADC_Start_DMA+0x21c>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d136      	bne.n	800477c <HAL_ADC_Start_DMA+0x1f0>
 800470e:	4b20      	ldr	r3, [pc, #128]	; (8004790 <HAL_ADC_Start_DMA+0x204>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f003 0310 	and.w	r3, r3, #16
 8004716:	2b00      	cmp	r3, #0
 8004718:	d130      	bne.n	800477c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d129      	bne.n	800477c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689a      	ldr	r2, [r3, #8]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004736:	609a      	str	r2, [r3, #8]
 8004738:	e020      	b.n	800477c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a18      	ldr	r2, [pc, #96]	; (80047a0 <HAL_ADC_Start_DMA+0x214>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d11b      	bne.n	800477c <HAL_ADC_Start_DMA+0x1f0>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d114      	bne.n	800477c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004760:	609a      	str	r2, [r3, #8]
 8004762:	e00b      	b.n	800477c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004768:	f043 0210 	orr.w	r2, r3, #16
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004774:	f043 0201 	orr.w	r2, r3, #1
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3718      	adds	r7, #24
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	20000014 	.word	0x20000014
 800478c:	431bde83 	.word	0x431bde83
 8004790:	40012300 	.word	0x40012300
 8004794:	08004cd1 	.word	0x08004cd1
 8004798:	08004d8b 	.word	0x08004d8b
 800479c:	08004da7 	.word	0x08004da7
 80047a0:	40012000 	.word	0x40012000
 80047a4:	40012100 	.word	0x40012100
 80047a8:	40012200 	.word	0x40012200

080047ac <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047b4:	2300      	movs	r3, #0
 80047b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d101      	bne.n	80047c6 <HAL_ADC_Stop_DMA+0x1a>
 80047c2:	2302      	movs	r3, #2
 80047c4:	e048      	b.n	8004858 <HAL_ADC_Stop_DMA+0xac>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 0201 	bic.w	r2, r2, #1
 80047dc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d130      	bne.n	800484e <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689a      	ldr	r2, [r3, #8]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047fa:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004800:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d10f      	bne.n	800482a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fcc8 	bl	80051a4 <HAL_DMA_Abort>
 8004814:	4603      	mov	r3, r0
 8004816:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004818:	7bfb      	ldrb	r3, [r7, #15]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d005      	beq.n	800482a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004838:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004842:	f023 0301 	bic.w	r3, r3, #1
 8004846:	f043 0201 	orr.w	r2, r3, #1
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004856:	7bfb      	ldrb	r3, [r7, #15]
}
 8004858:	4618      	mov	r0, r3
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800487e:	2300      	movs	r3, #0
 8004880:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004888:	2b01      	cmp	r3, #1
 800488a:	d101      	bne.n	8004890 <HAL_ADC_ConfigChannel+0x1c>
 800488c:	2302      	movs	r3, #2
 800488e:	e113      	b.n	8004ab8 <HAL_ADC_ConfigChannel+0x244>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2b09      	cmp	r3, #9
 800489e:	d925      	bls.n	80048ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68d9      	ldr	r1, [r3, #12]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	461a      	mov	r2, r3
 80048ae:	4613      	mov	r3, r2
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	4413      	add	r3, r2
 80048b4:	3b1e      	subs	r3, #30
 80048b6:	2207      	movs	r2, #7
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	43da      	mvns	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	400a      	ands	r2, r1
 80048c4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68d9      	ldr	r1, [r3, #12]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	4618      	mov	r0, r3
 80048d8:	4603      	mov	r3, r0
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	4403      	add	r3, r0
 80048de:	3b1e      	subs	r3, #30
 80048e0:	409a      	lsls	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	60da      	str	r2, [r3, #12]
 80048ea:	e022      	b.n	8004932 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6919      	ldr	r1, [r3, #16]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	461a      	mov	r2, r3
 80048fa:	4613      	mov	r3, r2
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	4413      	add	r3, r2
 8004900:	2207      	movs	r2, #7
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	43da      	mvns	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	400a      	ands	r2, r1
 800490e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6919      	ldr	r1, [r3, #16]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	b29b      	uxth	r3, r3
 8004920:	4618      	mov	r0, r3
 8004922:	4603      	mov	r3, r0
 8004924:	005b      	lsls	r3, r3, #1
 8004926:	4403      	add	r3, r0
 8004928:	409a      	lsls	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2b06      	cmp	r3, #6
 8004938:	d824      	bhi.n	8004984 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	4613      	mov	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	3b05      	subs	r3, #5
 800494c:	221f      	movs	r2, #31
 800494e:	fa02 f303 	lsl.w	r3, r2, r3
 8004952:	43da      	mvns	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	400a      	ands	r2, r1
 800495a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	b29b      	uxth	r3, r3
 8004968:	4618      	mov	r0, r3
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	4613      	mov	r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	4413      	add	r3, r2
 8004974:	3b05      	subs	r3, #5
 8004976:	fa00 f203 	lsl.w	r2, r0, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	635a      	str	r2, [r3, #52]	; 0x34
 8004982:	e04c      	b.n	8004a1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	2b0c      	cmp	r3, #12
 800498a:	d824      	bhi.n	80049d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	4613      	mov	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	3b23      	subs	r3, #35	; 0x23
 800499e:	221f      	movs	r2, #31
 80049a0:	fa02 f303 	lsl.w	r3, r2, r3
 80049a4:	43da      	mvns	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	400a      	ands	r2, r1
 80049ac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	4618      	mov	r0, r3
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	4613      	mov	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	3b23      	subs	r3, #35	; 0x23
 80049c8:	fa00 f203 	lsl.w	r2, r0, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	631a      	str	r2, [r3, #48]	; 0x30
 80049d4:	e023      	b.n	8004a1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	4613      	mov	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	4413      	add	r3, r2
 80049e6:	3b41      	subs	r3, #65	; 0x41
 80049e8:	221f      	movs	r2, #31
 80049ea:	fa02 f303 	lsl.w	r3, r2, r3
 80049ee:	43da      	mvns	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	400a      	ands	r2, r1
 80049f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	4618      	mov	r0, r3
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	3b41      	subs	r3, #65	; 0x41
 8004a12:	fa00 f203 	lsl.w	r2, r0, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a1e:	4b29      	ldr	r3, [pc, #164]	; (8004ac4 <HAL_ADC_ConfigChannel+0x250>)
 8004a20:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a28      	ldr	r2, [pc, #160]	; (8004ac8 <HAL_ADC_ConfigChannel+0x254>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d10f      	bne.n	8004a4c <HAL_ADC_ConfigChannel+0x1d8>
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b12      	cmp	r3, #18
 8004a32:	d10b      	bne.n	8004a4c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a1d      	ldr	r2, [pc, #116]	; (8004ac8 <HAL_ADC_ConfigChannel+0x254>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d12b      	bne.n	8004aae <HAL_ADC_ConfigChannel+0x23a>
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a1c      	ldr	r2, [pc, #112]	; (8004acc <HAL_ADC_ConfigChannel+0x258>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d003      	beq.n	8004a68 <HAL_ADC_ConfigChannel+0x1f4>
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b11      	cmp	r3, #17
 8004a66:	d122      	bne.n	8004aae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a11      	ldr	r2, [pc, #68]	; (8004acc <HAL_ADC_ConfigChannel+0x258>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d111      	bne.n	8004aae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004a8a:	4b11      	ldr	r3, [pc, #68]	; (8004ad0 <HAL_ADC_ConfigChannel+0x25c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a11      	ldr	r2, [pc, #68]	; (8004ad4 <HAL_ADC_ConfigChannel+0x260>)
 8004a90:	fba2 2303 	umull	r2, r3, r2, r3
 8004a94:	0c9a      	lsrs	r2, r3, #18
 8004a96:	4613      	mov	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004aa0:	e002      	b.n	8004aa8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1f9      	bne.n	8004aa2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	40012300 	.word	0x40012300
 8004ac8:	40012000 	.word	0x40012000
 8004acc:	10000012 	.word	0x10000012
 8004ad0:	20000014 	.word	0x20000014
 8004ad4:	431bde83 	.word	0x431bde83

08004ad8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ae0:	4b79      	ldr	r3, [pc, #484]	; (8004cc8 <ADC_Init+0x1f0>)
 8004ae2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	431a      	orrs	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	6859      	ldr	r1, [r3, #4]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	021a      	lsls	r2, r3, #8
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004b30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6859      	ldr	r1, [r3, #4]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689a      	ldr	r2, [r3, #8]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6899      	ldr	r1, [r3, #8]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6a:	4a58      	ldr	r2, [pc, #352]	; (8004ccc <ADC_Init+0x1f4>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d022      	beq.n	8004bb6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6899      	ldr	r1, [r3, #8]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ba0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6899      	ldr	r1, [r3, #8]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	609a      	str	r2, [r3, #8]
 8004bb4:	e00f      	b.n	8004bd6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004bc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004bd4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0202 	bic.w	r2, r2, #2
 8004be4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6899      	ldr	r1, [r3, #8]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	7e1b      	ldrb	r3, [r3, #24]
 8004bf0:	005a      	lsls	r2, r3, #1
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d01b      	beq.n	8004c3c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c12:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004c22:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6859      	ldr	r1, [r3, #4]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	035a      	lsls	r2, r3, #13
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	605a      	str	r2, [r3, #4]
 8004c3a:	e007      	b.n	8004c4c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c4a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004c5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	3b01      	subs	r3, #1
 8004c68:	051a      	lsls	r2, r3, #20
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689a      	ldr	r2, [r3, #8]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004c80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6899      	ldr	r1, [r3, #8]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c8e:	025a      	lsls	r2, r3, #9
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689a      	ldr	r2, [r3, #8]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ca6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6899      	ldr	r1, [r3, #8]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	029a      	lsls	r2, r3, #10
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	609a      	str	r2, [r3, #8]
}
 8004cbc:	bf00      	nop
 8004cbe:	3714      	adds	r7, #20
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr
 8004cc8:	40012300 	.word	0x40012300
 8004ccc:	0f000001 	.word	0x0f000001

08004cd0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cdc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d13c      	bne.n	8004d64 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d12b      	bne.n	8004d5c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d127      	bne.n	8004d5c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d12:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d006      	beq.n	8004d28 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d119      	bne.n	8004d5c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 0220 	bic.w	r2, r2, #32
 8004d36:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d105      	bne.n	8004d5c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d54:	f043 0201 	orr.w	r2, r3, #1
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f7ff f98d 	bl	800407c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004d62:	e00e      	b.n	8004d82 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d68:	f003 0310 	and.w	r3, r3, #16
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d003      	beq.n	8004d78 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f7ff fd75 	bl	8004860 <HAL_ADC_ErrorCallback>
}
 8004d76:	e004      	b.n	8004d82 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	4798      	blx	r3
}
 8004d82:	bf00      	nop
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b084      	sub	sp, #16
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d96:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f7ff f8c9 	bl	8003f30 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d9e:	bf00      	nop
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b084      	sub	sp, #16
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2240      	movs	r2, #64	; 0x40
 8004db8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dbe:	f043 0204 	orr.w	r2, r3, #4
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f7ff fd4a 	bl	8004860 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004dcc:	bf00      	nop
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <__NVIC_SetPriorityGrouping>:
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f003 0307 	and.w	r3, r3, #7
 8004de2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004de4:	4b0c      	ldr	r3, [pc, #48]	; (8004e18 <__NVIC_SetPriorityGrouping+0x44>)
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004df0:	4013      	ands	r3, r2
 8004df2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004dfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e06:	4a04      	ldr	r2, [pc, #16]	; (8004e18 <__NVIC_SetPriorityGrouping+0x44>)
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	60d3      	str	r3, [r2, #12]
}
 8004e0c:	bf00      	nop
 8004e0e:	3714      	adds	r7, #20
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr
 8004e18:	e000ed00 	.word	0xe000ed00

08004e1c <__NVIC_GetPriorityGrouping>:
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e20:	4b04      	ldr	r3, [pc, #16]	; (8004e34 <__NVIC_GetPriorityGrouping+0x18>)
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	0a1b      	lsrs	r3, r3, #8
 8004e26:	f003 0307 	and.w	r3, r3, #7
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	e000ed00 	.word	0xe000ed00

08004e38 <__NVIC_EnableIRQ>:
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	4603      	mov	r3, r0
 8004e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	db0b      	blt.n	8004e62 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e4a:	79fb      	ldrb	r3, [r7, #7]
 8004e4c:	f003 021f 	and.w	r2, r3, #31
 8004e50:	4907      	ldr	r1, [pc, #28]	; (8004e70 <__NVIC_EnableIRQ+0x38>)
 8004e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e56:	095b      	lsrs	r3, r3, #5
 8004e58:	2001      	movs	r0, #1
 8004e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8004e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004e62:	bf00      	nop
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	e000e100 	.word	0xe000e100

08004e74 <__NVIC_SetPriority>:
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	6039      	str	r1, [r7, #0]
 8004e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	db0a      	blt.n	8004e9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	490c      	ldr	r1, [pc, #48]	; (8004ec0 <__NVIC_SetPriority+0x4c>)
 8004e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e92:	0112      	lsls	r2, r2, #4
 8004e94:	b2d2      	uxtb	r2, r2
 8004e96:	440b      	add	r3, r1
 8004e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004e9c:	e00a      	b.n	8004eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	4908      	ldr	r1, [pc, #32]	; (8004ec4 <__NVIC_SetPriority+0x50>)
 8004ea4:	79fb      	ldrb	r3, [r7, #7]
 8004ea6:	f003 030f 	and.w	r3, r3, #15
 8004eaa:	3b04      	subs	r3, #4
 8004eac:	0112      	lsls	r2, r2, #4
 8004eae:	b2d2      	uxtb	r2, r2
 8004eb0:	440b      	add	r3, r1
 8004eb2:	761a      	strb	r2, [r3, #24]
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	e000e100 	.word	0xe000e100
 8004ec4:	e000ed00 	.word	0xe000ed00

08004ec8 <NVIC_EncodePriority>:
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b089      	sub	sp, #36	; 0x24
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f003 0307 	and.w	r3, r3, #7
 8004eda:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	f1c3 0307 	rsb	r3, r3, #7
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	bf28      	it	cs
 8004ee6:	2304      	movcs	r3, #4
 8004ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	3304      	adds	r3, #4
 8004eee:	2b06      	cmp	r3, #6
 8004ef0:	d902      	bls.n	8004ef8 <NVIC_EncodePriority+0x30>
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	3b03      	subs	r3, #3
 8004ef6:	e000      	b.n	8004efa <NVIC_EncodePriority+0x32>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004efc:	f04f 32ff 	mov.w	r2, #4294967295
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	fa02 f303 	lsl.w	r3, r2, r3
 8004f06:	43da      	mvns	r2, r3
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	401a      	ands	r2, r3
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f10:	f04f 31ff 	mov.w	r1, #4294967295
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	fa01 f303 	lsl.w	r3, r1, r3
 8004f1a:	43d9      	mvns	r1, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f20:	4313      	orrs	r3, r2
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3724      	adds	r7, #36	; 0x24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b082      	sub	sp, #8
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7ff ff4c 	bl	8004dd4 <__NVIC_SetPriorityGrouping>
}
 8004f3c:	bf00      	nop
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
 8004f50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f52:	2300      	movs	r3, #0
 8004f54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f56:	f7ff ff61 	bl	8004e1c <__NVIC_GetPriorityGrouping>
 8004f5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	68b9      	ldr	r1, [r7, #8]
 8004f60:	6978      	ldr	r0, [r7, #20]
 8004f62:	f7ff ffb1 	bl	8004ec8 <NVIC_EncodePriority>
 8004f66:	4602      	mov	r2, r0
 8004f68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f6c:	4611      	mov	r1, r2
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7ff ff80 	bl	8004e74 <__NVIC_SetPriority>
}
 8004f74:	bf00      	nop
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	4603      	mov	r3, r0
 8004f84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7ff ff54 	bl	8004e38 <__NVIC_EnableIRQ>
}
 8004f90:	bf00      	nop
 8004f92:	3708      	adds	r7, #8
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004fa4:	f7ff fa7e 	bl	80044a4 <HAL_GetTick>
 8004fa8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e099      	b.n	80050e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 0201 	bic.w	r2, r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fd4:	e00f      	b.n	8004ff6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004fd6:	f7ff fa65 	bl	80044a4 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	2b05      	cmp	r3, #5
 8004fe2:	d908      	bls.n	8004ff6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2203      	movs	r2, #3
 8004fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e078      	b.n	80050e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1e8      	bne.n	8004fd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	4b38      	ldr	r3, [pc, #224]	; (80050f0 <HAL_DMA_Init+0x158>)
 8005010:	4013      	ands	r3, r2
 8005012:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005022:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800502e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800503a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a1b      	ldr	r3, [r3, #32]
 8005040:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	4313      	orrs	r3, r2
 8005046:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	2b04      	cmp	r3, #4
 800504e:	d107      	bne.n	8005060 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005058:	4313      	orrs	r3, r2
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	4313      	orrs	r3, r2
 800505e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f023 0307 	bic.w	r3, r3, #7
 8005076:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	4313      	orrs	r3, r2
 8005080:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	2b04      	cmp	r3, #4
 8005088:	d117      	bne.n	80050ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	4313      	orrs	r3, r2
 8005092:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00e      	beq.n	80050ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 fadf 	bl	8005660 <DMA_CheckFifoParam>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d008      	beq.n	80050ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2240      	movs	r2, #64	; 0x40
 80050ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80050b6:	2301      	movs	r3, #1
 80050b8:	e016      	b.n	80050e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 fa96 	bl	80055f4 <DMA_CalcBaseAndBitshift>
 80050c8:	4603      	mov	r3, r0
 80050ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d0:	223f      	movs	r2, #63	; 0x3f
 80050d2:	409a      	lsls	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3718      	adds	r7, #24
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	f010803f 	.word	0xf010803f

080050f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
 8005100:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005102:	2300      	movs	r3, #0
 8005104:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800510a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005112:	2b01      	cmp	r3, #1
 8005114:	d101      	bne.n	800511a <HAL_DMA_Start_IT+0x26>
 8005116:	2302      	movs	r3, #2
 8005118:	e040      	b.n	800519c <HAL_DMA_Start_IT+0xa8>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b01      	cmp	r3, #1
 800512c:	d12f      	bne.n	800518e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2202      	movs	r2, #2
 8005132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	68b9      	ldr	r1, [r7, #8]
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f000 fa28 	bl	8005598 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800514c:	223f      	movs	r2, #63	; 0x3f
 800514e:	409a      	lsls	r2, r3
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0216 	orr.w	r2, r2, #22
 8005162:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005168:	2b00      	cmp	r3, #0
 800516a:	d007      	beq.n	800517c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f042 0208 	orr.w	r2, r2, #8
 800517a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0201 	orr.w	r2, r2, #1
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	e005      	b.n	800519a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005196:	2302      	movs	r3, #2
 8005198:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800519a:	7dfb      	ldrb	r3, [r7, #23]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3718      	adds	r7, #24
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80051b2:	f7ff f977 	bl	80044a4 <HAL_GetTick>
 80051b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d008      	beq.n	80051d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2280      	movs	r2, #128	; 0x80
 80051c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e052      	b.n	800527c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f022 0216 	bic.w	r2, r2, #22
 80051e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	695a      	ldr	r2, [r3, #20]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d103      	bne.n	8005206 <HAL_DMA_Abort+0x62>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005202:	2b00      	cmp	r3, #0
 8005204:	d007      	beq.n	8005216 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f022 0208 	bic.w	r2, r2, #8
 8005214:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 0201 	bic.w	r2, r2, #1
 8005224:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005226:	e013      	b.n	8005250 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005228:	f7ff f93c 	bl	80044a4 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b05      	cmp	r3, #5
 8005234:	d90c      	bls.n	8005250 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2220      	movs	r2, #32
 800523a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2203      	movs	r2, #3
 8005240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e015      	b.n	800527c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1e4      	bne.n	8005228 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005262:	223f      	movs	r2, #63	; 0x3f
 8005264:	409a      	lsls	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800528c:	2300      	movs	r3, #0
 800528e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005290:	4b8e      	ldr	r3, [pc, #568]	; (80054cc <HAL_DMA_IRQHandler+0x248>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a8e      	ldr	r2, [pc, #568]	; (80054d0 <HAL_DMA_IRQHandler+0x24c>)
 8005296:	fba2 2303 	umull	r2, r3, r2, r3
 800529a:	0a9b      	lsrs	r3, r3, #10
 800529c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ae:	2208      	movs	r2, #8
 80052b0:	409a      	lsls	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	4013      	ands	r3, r2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d01a      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0304 	and.w	r3, r3, #4
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d013      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 0204 	bic.w	r2, r2, #4
 80052d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052dc:	2208      	movs	r2, #8
 80052de:	409a      	lsls	r2, r3
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e8:	f043 0201 	orr.w	r2, r3, #1
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f4:	2201      	movs	r2, #1
 80052f6:	409a      	lsls	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4013      	ands	r3, r2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d012      	beq.n	8005326 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00b      	beq.n	8005326 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005312:	2201      	movs	r2, #1
 8005314:	409a      	lsls	r2, r3
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800531e:	f043 0202 	orr.w	r2, r3, #2
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800532a:	2204      	movs	r2, #4
 800532c:	409a      	lsls	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4013      	ands	r3, r2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d012      	beq.n	800535c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00b      	beq.n	800535c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005348:	2204      	movs	r2, #4
 800534a:	409a      	lsls	r2, r3
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005354:	f043 0204 	orr.w	r2, r3, #4
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005360:	2210      	movs	r2, #16
 8005362:	409a      	lsls	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4013      	ands	r3, r2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d043      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0308 	and.w	r3, r3, #8
 8005376:	2b00      	cmp	r3, #0
 8005378:	d03c      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800537e:	2210      	movs	r2, #16
 8005380:	409a      	lsls	r2, r3
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d018      	beq.n	80053c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d108      	bne.n	80053b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d024      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	4798      	blx	r3
 80053b2:	e01f      	b.n	80053f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d01b      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	4798      	blx	r3
 80053c4:	e016      	b.n	80053f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d107      	bne.n	80053e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f022 0208 	bic.w	r2, r2, #8
 80053e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d003      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053f8:	2220      	movs	r2, #32
 80053fa:	409a      	lsls	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4013      	ands	r3, r2
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 808f 	beq.w	8005524 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0310 	and.w	r3, r3, #16
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 8087 	beq.w	8005524 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800541a:	2220      	movs	r2, #32
 800541c:	409a      	lsls	r2, r3
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b05      	cmp	r3, #5
 800542c:	d136      	bne.n	800549c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f022 0216 	bic.w	r2, r2, #22
 800543c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	695a      	ldr	r2, [r3, #20]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800544c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	2b00      	cmp	r3, #0
 8005454:	d103      	bne.n	800545e <HAL_DMA_IRQHandler+0x1da>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800545a:	2b00      	cmp	r3, #0
 800545c:	d007      	beq.n	800546e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f022 0208 	bic.w	r2, r2, #8
 800546c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005472:	223f      	movs	r2, #63	; 0x3f
 8005474:	409a      	lsls	r2, r3
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800548e:	2b00      	cmp	r3, #0
 8005490:	d07e      	beq.n	8005590 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	4798      	blx	r3
        }
        return;
 800549a:	e079      	b.n	8005590 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d01d      	beq.n	80054e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d10d      	bne.n	80054d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d031      	beq.n	8005524 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	4798      	blx	r3
 80054c8:	e02c      	b.n	8005524 <HAL_DMA_IRQHandler+0x2a0>
 80054ca:	bf00      	nop
 80054cc:	20000014 	.word	0x20000014
 80054d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d023      	beq.n	8005524 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	4798      	blx	r3
 80054e4:	e01e      	b.n	8005524 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10f      	bne.n	8005514 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 0210 	bic.w	r2, r2, #16
 8005502:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005518:	2b00      	cmp	r3, #0
 800551a:	d003      	beq.n	8005524 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005528:	2b00      	cmp	r3, #0
 800552a:	d032      	beq.n	8005592 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b00      	cmp	r3, #0
 8005536:	d022      	beq.n	800557e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2205      	movs	r2, #5
 800553c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f022 0201 	bic.w	r2, r2, #1
 800554e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	3301      	adds	r3, #1
 8005554:	60bb      	str	r3, [r7, #8]
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	429a      	cmp	r2, r3
 800555a:	d307      	bcc.n	800556c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1f2      	bne.n	8005550 <HAL_DMA_IRQHandler+0x2cc>
 800556a:	e000      	b.n	800556e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800556c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005582:	2b00      	cmp	r3, #0
 8005584:	d005      	beq.n	8005592 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	4798      	blx	r3
 800558e:	e000      	b.n	8005592 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005590:	bf00      	nop
    }
  }
}
 8005592:	3718      	adds	r7, #24
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
 80055a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80055b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	683a      	ldr	r2, [r7, #0]
 80055bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	2b40      	cmp	r3, #64	; 0x40
 80055c4:	d108      	bne.n	80055d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80055d6:	e007      	b.n	80055e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	60da      	str	r2, [r3, #12]
}
 80055e8:	bf00      	nop
 80055ea:	3714      	adds	r7, #20
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	b2db      	uxtb	r3, r3
 8005602:	3b10      	subs	r3, #16
 8005604:	4a14      	ldr	r2, [pc, #80]	; (8005658 <DMA_CalcBaseAndBitshift+0x64>)
 8005606:	fba2 2303 	umull	r2, r3, r2, r3
 800560a:	091b      	lsrs	r3, r3, #4
 800560c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800560e:	4a13      	ldr	r2, [pc, #76]	; (800565c <DMA_CalcBaseAndBitshift+0x68>)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	4413      	add	r3, r2
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	461a      	mov	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2b03      	cmp	r3, #3
 8005620:	d909      	bls.n	8005636 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800562a:	f023 0303 	bic.w	r3, r3, #3
 800562e:	1d1a      	adds	r2, r3, #4
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	659a      	str	r2, [r3, #88]	; 0x58
 8005634:	e007      	b.n	8005646 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800563e:	f023 0303 	bic.w	r3, r3, #3
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800564a:	4618      	mov	r0, r3
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	aaaaaaab 	.word	0xaaaaaaab
 800565c:	0801ab54 	.word	0x0801ab54

08005660 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005668:	2300      	movs	r3, #0
 800566a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005670:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d11f      	bne.n	80056ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	2b03      	cmp	r3, #3
 800567e:	d856      	bhi.n	800572e <DMA_CheckFifoParam+0xce>
 8005680:	a201      	add	r2, pc, #4	; (adr r2, 8005688 <DMA_CheckFifoParam+0x28>)
 8005682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005686:	bf00      	nop
 8005688:	08005699 	.word	0x08005699
 800568c:	080056ab 	.word	0x080056ab
 8005690:	08005699 	.word	0x08005699
 8005694:	0800572f 	.word	0x0800572f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d046      	beq.n	8005732 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056a8:	e043      	b.n	8005732 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80056b2:	d140      	bne.n	8005736 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056b8:	e03d      	b.n	8005736 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056c2:	d121      	bne.n	8005708 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2b03      	cmp	r3, #3
 80056c8:	d837      	bhi.n	800573a <DMA_CheckFifoParam+0xda>
 80056ca:	a201      	add	r2, pc, #4	; (adr r2, 80056d0 <DMA_CheckFifoParam+0x70>)
 80056cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d0:	080056e1 	.word	0x080056e1
 80056d4:	080056e7 	.word	0x080056e7
 80056d8:	080056e1 	.word	0x080056e1
 80056dc:	080056f9 	.word	0x080056f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	73fb      	strb	r3, [r7, #15]
      break;
 80056e4:	e030      	b.n	8005748 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d025      	beq.n	800573e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056f6:	e022      	b.n	800573e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005700:	d11f      	bne.n	8005742 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005706:	e01c      	b.n	8005742 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	2b02      	cmp	r3, #2
 800570c:	d903      	bls.n	8005716 <DMA_CheckFifoParam+0xb6>
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	2b03      	cmp	r3, #3
 8005712:	d003      	beq.n	800571c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005714:	e018      	b.n	8005748 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	73fb      	strb	r3, [r7, #15]
      break;
 800571a:	e015      	b.n	8005748 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005720:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00e      	beq.n	8005746 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	73fb      	strb	r3, [r7, #15]
      break;
 800572c:	e00b      	b.n	8005746 <DMA_CheckFifoParam+0xe6>
      break;
 800572e:	bf00      	nop
 8005730:	e00a      	b.n	8005748 <DMA_CheckFifoParam+0xe8>
      break;
 8005732:	bf00      	nop
 8005734:	e008      	b.n	8005748 <DMA_CheckFifoParam+0xe8>
      break;
 8005736:	bf00      	nop
 8005738:	e006      	b.n	8005748 <DMA_CheckFifoParam+0xe8>
      break;
 800573a:	bf00      	nop
 800573c:	e004      	b.n	8005748 <DMA_CheckFifoParam+0xe8>
      break;
 800573e:	bf00      	nop
 8005740:	e002      	b.n	8005748 <DMA_CheckFifoParam+0xe8>
      break;   
 8005742:	bf00      	nop
 8005744:	e000      	b.n	8005748 <DMA_CheckFifoParam+0xe8>
      break;
 8005746:	bf00      	nop
    }
  } 
  
  return status; 
 8005748:	7bfb      	ldrb	r3, [r7, #15]
}
 800574a:	4618      	mov	r0, r3
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop

08005758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005758:	b480      	push	{r7}
 800575a:	b089      	sub	sp, #36	; 0x24
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005762:	2300      	movs	r3, #0
 8005764:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005766:	2300      	movs	r3, #0
 8005768:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800576a:	2300      	movs	r3, #0
 800576c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800576e:	2300      	movs	r3, #0
 8005770:	61fb      	str	r3, [r7, #28]
 8005772:	e165      	b.n	8005a40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005774:	2201      	movs	r2, #1
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	fa02 f303 	lsl.w	r3, r2, r3
 800577c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	4013      	ands	r3, r2
 8005786:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	429a      	cmp	r2, r3
 800578e:	f040 8154 	bne.w	8005a3a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f003 0303 	and.w	r3, r3, #3
 800579a:	2b01      	cmp	r3, #1
 800579c:	d005      	beq.n	80057aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d130      	bne.n	800580c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	005b      	lsls	r3, r3, #1
 80057b4:	2203      	movs	r2, #3
 80057b6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ba:	43db      	mvns	r3, r3
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	4013      	ands	r3, r2
 80057c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	68da      	ldr	r2, [r3, #12]
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	fa02 f303 	lsl.w	r3, r2, r3
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	69ba      	ldr	r2, [r7, #24]
 80057d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057e0:	2201      	movs	r2, #1
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	fa02 f303 	lsl.w	r3, r2, r3
 80057e8:	43db      	mvns	r3, r3
 80057ea:	69ba      	ldr	r2, [r7, #24]
 80057ec:	4013      	ands	r3, r2
 80057ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	091b      	lsrs	r3, r3, #4
 80057f6:	f003 0201 	and.w	r2, r3, #1
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	4313      	orrs	r3, r2
 8005804:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f003 0303 	and.w	r3, r3, #3
 8005814:	2b03      	cmp	r3, #3
 8005816:	d017      	beq.n	8005848 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	2203      	movs	r2, #3
 8005824:	fa02 f303 	lsl.w	r3, r2, r3
 8005828:	43db      	mvns	r3, r3
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	4013      	ands	r3, r2
 800582e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	689a      	ldr	r2, [r3, #8]
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	fa02 f303 	lsl.w	r3, r2, r3
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	4313      	orrs	r3, r2
 8005840:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	69ba      	ldr	r2, [r7, #24]
 8005846:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f003 0303 	and.w	r3, r3, #3
 8005850:	2b02      	cmp	r3, #2
 8005852:	d123      	bne.n	800589c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	08da      	lsrs	r2, r3, #3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	3208      	adds	r2, #8
 800585c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005860:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	f003 0307 	and.w	r3, r3, #7
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	220f      	movs	r2, #15
 800586c:	fa02 f303 	lsl.w	r3, r2, r3
 8005870:	43db      	mvns	r3, r3
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	4013      	ands	r3, r2
 8005876:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	691a      	ldr	r2, [r3, #16]
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	f003 0307 	and.w	r3, r3, #7
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	fa02 f303 	lsl.w	r3, r2, r3
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	4313      	orrs	r3, r2
 800588c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	08da      	lsrs	r2, r3, #3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	3208      	adds	r2, #8
 8005896:	69b9      	ldr	r1, [r7, #24]
 8005898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	2203      	movs	r2, #3
 80058a8:	fa02 f303 	lsl.w	r3, r2, r3
 80058ac:	43db      	mvns	r3, r3
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	4013      	ands	r3, r2
 80058b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f003 0203 	and.w	r2, r3, #3
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	fa02 f303 	lsl.w	r3, r2, r3
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 80ae 	beq.w	8005a3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058de:	2300      	movs	r3, #0
 80058e0:	60fb      	str	r3, [r7, #12]
 80058e2:	4b5d      	ldr	r3, [pc, #372]	; (8005a58 <HAL_GPIO_Init+0x300>)
 80058e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e6:	4a5c      	ldr	r2, [pc, #368]	; (8005a58 <HAL_GPIO_Init+0x300>)
 80058e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058ec:	6453      	str	r3, [r2, #68]	; 0x44
 80058ee:	4b5a      	ldr	r3, [pc, #360]	; (8005a58 <HAL_GPIO_Init+0x300>)
 80058f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058fa:	4a58      	ldr	r2, [pc, #352]	; (8005a5c <HAL_GPIO_Init+0x304>)
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	089b      	lsrs	r3, r3, #2
 8005900:	3302      	adds	r3, #2
 8005902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005906:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	f003 0303 	and.w	r3, r3, #3
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	220f      	movs	r2, #15
 8005912:	fa02 f303 	lsl.w	r3, r2, r3
 8005916:	43db      	mvns	r3, r3
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	4013      	ands	r3, r2
 800591c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a4f      	ldr	r2, [pc, #316]	; (8005a60 <HAL_GPIO_Init+0x308>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d025      	beq.n	8005972 <HAL_GPIO_Init+0x21a>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a4e      	ldr	r2, [pc, #312]	; (8005a64 <HAL_GPIO_Init+0x30c>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d01f      	beq.n	800596e <HAL_GPIO_Init+0x216>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a4d      	ldr	r2, [pc, #308]	; (8005a68 <HAL_GPIO_Init+0x310>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d019      	beq.n	800596a <HAL_GPIO_Init+0x212>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a4c      	ldr	r2, [pc, #304]	; (8005a6c <HAL_GPIO_Init+0x314>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d013      	beq.n	8005966 <HAL_GPIO_Init+0x20e>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a4b      	ldr	r2, [pc, #300]	; (8005a70 <HAL_GPIO_Init+0x318>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d00d      	beq.n	8005962 <HAL_GPIO_Init+0x20a>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a4a      	ldr	r2, [pc, #296]	; (8005a74 <HAL_GPIO_Init+0x31c>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d007      	beq.n	800595e <HAL_GPIO_Init+0x206>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a49      	ldr	r2, [pc, #292]	; (8005a78 <HAL_GPIO_Init+0x320>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d101      	bne.n	800595a <HAL_GPIO_Init+0x202>
 8005956:	2306      	movs	r3, #6
 8005958:	e00c      	b.n	8005974 <HAL_GPIO_Init+0x21c>
 800595a:	2307      	movs	r3, #7
 800595c:	e00a      	b.n	8005974 <HAL_GPIO_Init+0x21c>
 800595e:	2305      	movs	r3, #5
 8005960:	e008      	b.n	8005974 <HAL_GPIO_Init+0x21c>
 8005962:	2304      	movs	r3, #4
 8005964:	e006      	b.n	8005974 <HAL_GPIO_Init+0x21c>
 8005966:	2303      	movs	r3, #3
 8005968:	e004      	b.n	8005974 <HAL_GPIO_Init+0x21c>
 800596a:	2302      	movs	r3, #2
 800596c:	e002      	b.n	8005974 <HAL_GPIO_Init+0x21c>
 800596e:	2301      	movs	r3, #1
 8005970:	e000      	b.n	8005974 <HAL_GPIO_Init+0x21c>
 8005972:	2300      	movs	r3, #0
 8005974:	69fa      	ldr	r2, [r7, #28]
 8005976:	f002 0203 	and.w	r2, r2, #3
 800597a:	0092      	lsls	r2, r2, #2
 800597c:	4093      	lsls	r3, r2
 800597e:	69ba      	ldr	r2, [r7, #24]
 8005980:	4313      	orrs	r3, r2
 8005982:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005984:	4935      	ldr	r1, [pc, #212]	; (8005a5c <HAL_GPIO_Init+0x304>)
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	089b      	lsrs	r3, r3, #2
 800598a:	3302      	adds	r3, #2
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005992:	4b3a      	ldr	r3, [pc, #232]	; (8005a7c <HAL_GPIO_Init+0x324>)
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	43db      	mvns	r3, r3
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	4013      	ands	r3, r2
 80059a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059b6:	4a31      	ldr	r2, [pc, #196]	; (8005a7c <HAL_GPIO_Init+0x324>)
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059bc:	4b2f      	ldr	r3, [pc, #188]	; (8005a7c <HAL_GPIO_Init+0x324>)
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	43db      	mvns	r3, r3
 80059c6:	69ba      	ldr	r2, [r7, #24]
 80059c8:	4013      	ands	r3, r2
 80059ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	4313      	orrs	r3, r2
 80059de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80059e0:	4a26      	ldr	r2, [pc, #152]	; (8005a7c <HAL_GPIO_Init+0x324>)
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80059e6:	4b25      	ldr	r3, [pc, #148]	; (8005a7c <HAL_GPIO_Init+0x324>)
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	43db      	mvns	r3, r3
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	4013      	ands	r3, r2
 80059f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a0a:	4a1c      	ldr	r2, [pc, #112]	; (8005a7c <HAL_GPIO_Init+0x324>)
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a10:	4b1a      	ldr	r3, [pc, #104]	; (8005a7c <HAL_GPIO_Init+0x324>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	43db      	mvns	r3, r3
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d003      	beq.n	8005a34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a34:	4a11      	ldr	r2, [pc, #68]	; (8005a7c <HAL_GPIO_Init+0x324>)
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	61fb      	str	r3, [r7, #28]
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	2b0f      	cmp	r3, #15
 8005a44:	f67f ae96 	bls.w	8005774 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005a48:	bf00      	nop
 8005a4a:	bf00      	nop
 8005a4c:	3724      	adds	r7, #36	; 0x24
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	40023800 	.word	0x40023800
 8005a5c:	40013800 	.word	0x40013800
 8005a60:	40020000 	.word	0x40020000
 8005a64:	40020400 	.word	0x40020400
 8005a68:	40020800 	.word	0x40020800
 8005a6c:	40020c00 	.word	0x40020c00
 8005a70:	40021000 	.word	0x40021000
 8005a74:	40021400 	.word	0x40021400
 8005a78:	40021800 	.word	0x40021800
 8005a7c:	40013c00 	.word	0x40013c00

08005a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	807b      	strh	r3, [r7, #2]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a90:	787b      	ldrb	r3, [r7, #1]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a96:	887a      	ldrh	r2, [r7, #2]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a9c:	e003      	b.n	8005aa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a9e:	887b      	ldrh	r3, [r7, #2]
 8005aa0:	041a      	lsls	r2, r3, #16
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	619a      	str	r2, [r3, #24]
}
 8005aa6:	bf00      	nop
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
	...

08005ab4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e12b      	b.n	8005d1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d106      	bne.n	8005ae0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7fc fdc0 	bl	8002660 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2224      	movs	r2, #36	; 0x24
 8005ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f022 0201 	bic.w	r2, r2, #1
 8005af6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b18:	f002 fb64 	bl	80081e4 <HAL_RCC_GetPCLK1Freq>
 8005b1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	4a81      	ldr	r2, [pc, #516]	; (8005d28 <HAL_I2C_Init+0x274>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d807      	bhi.n	8005b38 <HAL_I2C_Init+0x84>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4a80      	ldr	r2, [pc, #512]	; (8005d2c <HAL_I2C_Init+0x278>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	bf94      	ite	ls
 8005b30:	2301      	movls	r3, #1
 8005b32:	2300      	movhi	r3, #0
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	e006      	b.n	8005b46 <HAL_I2C_Init+0x92>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4a7d      	ldr	r2, [pc, #500]	; (8005d30 <HAL_I2C_Init+0x27c>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	bf94      	ite	ls
 8005b40:	2301      	movls	r3, #1
 8005b42:	2300      	movhi	r3, #0
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d001      	beq.n	8005b4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e0e7      	b.n	8005d1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	4a78      	ldr	r2, [pc, #480]	; (8005d34 <HAL_I2C_Init+0x280>)
 8005b52:	fba2 2303 	umull	r2, r3, r2, r3
 8005b56:	0c9b      	lsrs	r3, r3, #18
 8005b58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	4a6a      	ldr	r2, [pc, #424]	; (8005d28 <HAL_I2C_Init+0x274>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d802      	bhi.n	8005b88 <HAL_I2C_Init+0xd4>
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	3301      	adds	r3, #1
 8005b86:	e009      	b.n	8005b9c <HAL_I2C_Init+0xe8>
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005b8e:	fb02 f303 	mul.w	r3, r2, r3
 8005b92:	4a69      	ldr	r2, [pc, #420]	; (8005d38 <HAL_I2C_Init+0x284>)
 8005b94:	fba2 2303 	umull	r2, r3, r2, r3
 8005b98:	099b      	lsrs	r3, r3, #6
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	6812      	ldr	r2, [r2, #0]
 8005ba0:	430b      	orrs	r3, r1
 8005ba2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	69db      	ldr	r3, [r3, #28]
 8005baa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005bae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	495c      	ldr	r1, [pc, #368]	; (8005d28 <HAL_I2C_Init+0x274>)
 8005bb8:	428b      	cmp	r3, r1
 8005bba:	d819      	bhi.n	8005bf0 <HAL_I2C_Init+0x13c>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	1e59      	subs	r1, r3, #1
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	005b      	lsls	r3, r3, #1
 8005bc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bca:	1c59      	adds	r1, r3, #1
 8005bcc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005bd0:	400b      	ands	r3, r1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00a      	beq.n	8005bec <HAL_I2C_Init+0x138>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	1e59      	subs	r1, r3, #1
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	005b      	lsls	r3, r3, #1
 8005be0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005be4:	3301      	adds	r3, #1
 8005be6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bea:	e051      	b.n	8005c90 <HAL_I2C_Init+0x1dc>
 8005bec:	2304      	movs	r3, #4
 8005bee:	e04f      	b.n	8005c90 <HAL_I2C_Init+0x1dc>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d111      	bne.n	8005c1c <HAL_I2C_Init+0x168>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	1e58      	subs	r0, r3, #1
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6859      	ldr	r1, [r3, #4]
 8005c00:	460b      	mov	r3, r1
 8005c02:	005b      	lsls	r3, r3, #1
 8005c04:	440b      	add	r3, r1
 8005c06:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	bf0c      	ite	eq
 8005c14:	2301      	moveq	r3, #1
 8005c16:	2300      	movne	r3, #0
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	e012      	b.n	8005c42 <HAL_I2C_Init+0x18e>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	1e58      	subs	r0, r3, #1
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6859      	ldr	r1, [r3, #4]
 8005c24:	460b      	mov	r3, r1
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	440b      	add	r3, r1
 8005c2a:	0099      	lsls	r1, r3, #2
 8005c2c:	440b      	add	r3, r1
 8005c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c32:	3301      	adds	r3, #1
 8005c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	bf0c      	ite	eq
 8005c3c:	2301      	moveq	r3, #1
 8005c3e:	2300      	movne	r3, #0
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <HAL_I2C_Init+0x196>
 8005c46:	2301      	movs	r3, #1
 8005c48:	e022      	b.n	8005c90 <HAL_I2C_Init+0x1dc>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10e      	bne.n	8005c70 <HAL_I2C_Init+0x1bc>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	1e58      	subs	r0, r3, #1
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6859      	ldr	r1, [r3, #4]
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	005b      	lsls	r3, r3, #1
 8005c5e:	440b      	add	r3, r1
 8005c60:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c64:	3301      	adds	r3, #1
 8005c66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c6e:	e00f      	b.n	8005c90 <HAL_I2C_Init+0x1dc>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	1e58      	subs	r0, r3, #1
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6859      	ldr	r1, [r3, #4]
 8005c78:	460b      	mov	r3, r1
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	440b      	add	r3, r1
 8005c7e:	0099      	lsls	r1, r3, #2
 8005c80:	440b      	add	r3, r1
 8005c82:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c86:	3301      	adds	r3, #1
 8005c88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c90:	6879      	ldr	r1, [r7, #4]
 8005c92:	6809      	ldr	r1, [r1, #0]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	69da      	ldr	r2, [r3, #28]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	431a      	orrs	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005cbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	6911      	ldr	r1, [r2, #16]
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	68d2      	ldr	r2, [r2, #12]
 8005cca:	4311      	orrs	r1, r2
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	6812      	ldr	r2, [r2, #0]
 8005cd0:	430b      	orrs	r3, r1
 8005cd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	695a      	ldr	r2, [r3, #20]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0201 	orr.w	r2, r2, #1
 8005cfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	000186a0 	.word	0x000186a0
 8005d2c:	001e847f 	.word	0x001e847f
 8005d30:	003d08ff 	.word	0x003d08ff
 8005d34:	431bde83 	.word	0x431bde83
 8005d38:	10624dd3 	.word	0x10624dd3

08005d3c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b088      	sub	sp, #32
 8005d40:	af02      	add	r7, sp, #8
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	607a      	str	r2, [r7, #4]
 8005d46:	461a      	mov	r2, r3
 8005d48:	460b      	mov	r3, r1
 8005d4a:	817b      	strh	r3, [r7, #10]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d50:	f7fe fba8 	bl	80044a4 <HAL_GetTick>
 8005d54:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2b20      	cmp	r3, #32
 8005d60:	f040 80e0 	bne.w	8005f24 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	2319      	movs	r3, #25
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	4970      	ldr	r1, [pc, #448]	; (8005f30 <HAL_I2C_Master_Transmit+0x1f4>)
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 fc72 	bl	8006658 <I2C_WaitOnFlagUntilTimeout>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005d7a:	2302      	movs	r3, #2
 8005d7c:	e0d3      	b.n	8005f26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d101      	bne.n	8005d8c <HAL_I2C_Master_Transmit+0x50>
 8005d88:	2302      	movs	r3, #2
 8005d8a:	e0cc      	b.n	8005f26 <HAL_I2C_Master_Transmit+0x1ea>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d007      	beq.n	8005db2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f042 0201 	orr.w	r2, r2, #1
 8005db0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dc0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2221      	movs	r2, #33	; 0x21
 8005dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2210      	movs	r2, #16
 8005dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	893a      	ldrh	r2, [r7, #8]
 8005de2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	4a50      	ldr	r2, [pc, #320]	; (8005f34 <HAL_I2C_Master_Transmit+0x1f8>)
 8005df2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005df4:	8979      	ldrh	r1, [r7, #10]
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	6a3a      	ldr	r2, [r7, #32]
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f000 fac2 	bl	8006384 <I2C_MasterRequestWrite>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e08d      	b.n	8005f26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	613b      	str	r3, [r7, #16]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	695b      	ldr	r3, [r3, #20]
 8005e14:	613b      	str	r3, [r7, #16]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	613b      	str	r3, [r7, #16]
 8005e1e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005e20:	e066      	b.n	8005ef0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	6a39      	ldr	r1, [r7, #32]
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f000 fcec 	bl	8006804 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00d      	beq.n	8005e4e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e36:	2b04      	cmp	r3, #4
 8005e38:	d107      	bne.n	8005e4a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e06b      	b.n	8005f26 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e52:	781a      	ldrb	r2, [r3, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5e:	1c5a      	adds	r2, r3, #1
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e76:	3b01      	subs	r3, #1
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	f003 0304 	and.w	r3, r3, #4
 8005e88:	2b04      	cmp	r3, #4
 8005e8a:	d11b      	bne.n	8005ec4 <HAL_I2C_Master_Transmit+0x188>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d017      	beq.n	8005ec4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e98:	781a      	ldrb	r2, [r3, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea4:	1c5a      	adds	r2, r3, #1
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	6a39      	ldr	r1, [r7, #32]
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f000 fcdc 	bl	8006886 <I2C_WaitOnBTFFlagUntilTimeout>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00d      	beq.n	8005ef0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed8:	2b04      	cmp	r3, #4
 8005eda:	d107      	bne.n	8005eec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e01a      	b.n	8005f26 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d194      	bne.n	8005e22 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f20:	2300      	movs	r3, #0
 8005f22:	e000      	b.n	8005f26 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005f24:	2302      	movs	r3, #2
  }
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3718      	adds	r7, #24
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	00100002 	.word	0x00100002
 8005f34:	ffff0000 	.word	0xffff0000

08005f38 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b08c      	sub	sp, #48	; 0x30
 8005f3c:	af02      	add	r7, sp, #8
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	4608      	mov	r0, r1
 8005f42:	4611      	mov	r1, r2
 8005f44:	461a      	mov	r2, r3
 8005f46:	4603      	mov	r3, r0
 8005f48:	817b      	strh	r3, [r7, #10]
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	813b      	strh	r3, [r7, #8]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f52:	f7fe faa7 	bl	80044a4 <HAL_GetTick>
 8005f56:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	2b20      	cmp	r3, #32
 8005f62:	f040 8208 	bne.w	8006376 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	2319      	movs	r3, #25
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	497b      	ldr	r1, [pc, #492]	; (800615c <HAL_I2C_Mem_Read+0x224>)
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f000 fb71 	bl	8006658 <I2C_WaitOnFlagUntilTimeout>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d001      	beq.n	8005f80 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	e1fb      	b.n	8006378 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d101      	bne.n	8005f8e <HAL_I2C_Mem_Read+0x56>
 8005f8a:	2302      	movs	r3, #2
 8005f8c:	e1f4      	b.n	8006378 <HAL_I2C_Mem_Read+0x440>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d007      	beq.n	8005fb4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f042 0201 	orr.w	r2, r2, #1
 8005fb2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fc2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2222      	movs	r2, #34	; 0x22
 8005fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2240      	movs	r2, #64	; 0x40
 8005fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005fe4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	4a5b      	ldr	r2, [pc, #364]	; (8006160 <HAL_I2C_Mem_Read+0x228>)
 8005ff4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ff6:	88f8      	ldrh	r0, [r7, #6]
 8005ff8:	893a      	ldrh	r2, [r7, #8]
 8005ffa:	8979      	ldrh	r1, [r7, #10]
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	9301      	str	r3, [sp, #4]
 8006000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	4603      	mov	r3, r0
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f000 fa3e 	bl	8006488 <I2C_RequestMemoryRead>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e1b0      	b.n	8006378 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800601a:	2b00      	cmp	r3, #0
 800601c:	d113      	bne.n	8006046 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800601e:	2300      	movs	r3, #0
 8006020:	623b      	str	r3, [r7, #32]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	695b      	ldr	r3, [r3, #20]
 8006028:	623b      	str	r3, [r7, #32]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	623b      	str	r3, [r7, #32]
 8006032:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006042:	601a      	str	r2, [r3, #0]
 8006044:	e184      	b.n	8006350 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800604a:	2b01      	cmp	r3, #1
 800604c:	d11b      	bne.n	8006086 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800605c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800605e:	2300      	movs	r3, #0
 8006060:	61fb      	str	r3, [r7, #28]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	61fb      	str	r3, [r7, #28]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	61fb      	str	r3, [r7, #28]
 8006072:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	e164      	b.n	8006350 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800608a:	2b02      	cmp	r3, #2
 800608c:	d11b      	bne.n	80060c6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800609c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060ae:	2300      	movs	r3, #0
 80060b0:	61bb      	str	r3, [r7, #24]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	695b      	ldr	r3, [r3, #20]
 80060b8:	61bb      	str	r3, [r7, #24]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	61bb      	str	r3, [r7, #24]
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	e144      	b.n	8006350 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060c6:	2300      	movs	r3, #0
 80060c8:	617b      	str	r3, [r7, #20]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	617b      	str	r3, [r7, #20]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	617b      	str	r3, [r7, #20]
 80060da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80060dc:	e138      	b.n	8006350 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060e2:	2b03      	cmp	r3, #3
 80060e4:	f200 80f1 	bhi.w	80062ca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d123      	bne.n	8006138 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 fc07 	bl	8006908 <I2C_WaitOnRXNEFlagUntilTimeout>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d001      	beq.n	8006104 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e139      	b.n	8006378 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	691a      	ldr	r2, [r3, #16]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610e:	b2d2      	uxtb	r2, r2
 8006110:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	1c5a      	adds	r2, r3, #1
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006120:	3b01      	subs	r3, #1
 8006122:	b29a      	uxth	r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800612c:	b29b      	uxth	r3, r3
 800612e:	3b01      	subs	r3, #1
 8006130:	b29a      	uxth	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006136:	e10b      	b.n	8006350 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800613c:	2b02      	cmp	r3, #2
 800613e:	d14e      	bne.n	80061de <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006146:	2200      	movs	r2, #0
 8006148:	4906      	ldr	r1, [pc, #24]	; (8006164 <HAL_I2C_Mem_Read+0x22c>)
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f000 fa84 	bl	8006658 <I2C_WaitOnFlagUntilTimeout>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d008      	beq.n	8006168 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e10e      	b.n	8006378 <HAL_I2C_Mem_Read+0x440>
 800615a:	bf00      	nop
 800615c:	00100002 	.word	0x00100002
 8006160:	ffff0000 	.word	0xffff0000
 8006164:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006176:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	691a      	ldr	r2, [r3, #16]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006182:	b2d2      	uxtb	r2, r2
 8006184:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006194:	3b01      	subs	r3, #1
 8006196:	b29a      	uxth	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	3b01      	subs	r3, #1
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	691a      	ldr	r2, [r3, #16]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b4:	b2d2      	uxtb	r2, r2
 80061b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061bc:	1c5a      	adds	r2, r3, #1
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061c6:	3b01      	subs	r3, #1
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	3b01      	subs	r3, #1
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80061dc:	e0b8      	b.n	8006350 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e4:	2200      	movs	r2, #0
 80061e6:	4966      	ldr	r1, [pc, #408]	; (8006380 <HAL_I2C_Mem_Read+0x448>)
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f000 fa35 	bl	8006658 <I2C_WaitOnFlagUntilTimeout>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d001      	beq.n	80061f8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e0bf      	b.n	8006378 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006206:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	691a      	ldr	r2, [r3, #16]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006212:	b2d2      	uxtb	r2, r2
 8006214:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621a:	1c5a      	adds	r2, r3, #1
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006224:	3b01      	subs	r3, #1
 8006226:	b29a      	uxth	r2, r3
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006230:	b29b      	uxth	r3, r3
 8006232:	3b01      	subs	r3, #1
 8006234:	b29a      	uxth	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006240:	2200      	movs	r2, #0
 8006242:	494f      	ldr	r1, [pc, #316]	; (8006380 <HAL_I2C_Mem_Read+0x448>)
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f000 fa07 	bl	8006658 <I2C_WaitOnFlagUntilTimeout>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d001      	beq.n	8006254 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e091      	b.n	8006378 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006262:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	691a      	ldr	r2, [r3, #16]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626e:	b2d2      	uxtb	r2, r2
 8006270:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006276:	1c5a      	adds	r2, r3, #1
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006280:	3b01      	subs	r3, #1
 8006282:	b29a      	uxth	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800628c:	b29b      	uxth	r3, r3
 800628e:	3b01      	subs	r3, #1
 8006290:	b29a      	uxth	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	691a      	ldr	r2, [r3, #16]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a0:	b2d2      	uxtb	r2, r2
 80062a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a8:	1c5a      	adds	r2, r3, #1
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062b2:	3b01      	subs	r3, #1
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062be:	b29b      	uxth	r3, r3
 80062c0:	3b01      	subs	r3, #1
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80062c8:	e042      	b.n	8006350 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f000 fb1a 	bl	8006908 <I2C_WaitOnRXNEFlagUntilTimeout>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d001      	beq.n	80062de <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e04c      	b.n	8006378 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	691a      	ldr	r2, [r3, #16]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	b2d2      	uxtb	r2, r2
 80062ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f0:	1c5a      	adds	r2, r3, #1
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062fa:	3b01      	subs	r3, #1
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006306:	b29b      	uxth	r3, r3
 8006308:	3b01      	subs	r3, #1
 800630a:	b29a      	uxth	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	f003 0304 	and.w	r3, r3, #4
 800631a:	2b04      	cmp	r3, #4
 800631c:	d118      	bne.n	8006350 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	691a      	ldr	r2, [r3, #16]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006328:	b2d2      	uxtb	r2, r2
 800632a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006330:	1c5a      	adds	r2, r3, #1
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800633a:	3b01      	subs	r3, #1
 800633c:	b29a      	uxth	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006346:	b29b      	uxth	r3, r3
 8006348:	3b01      	subs	r3, #1
 800634a:	b29a      	uxth	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006354:	2b00      	cmp	r3, #0
 8006356:	f47f aec2 	bne.w	80060de <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2220      	movs	r2, #32
 800635e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006372:	2300      	movs	r3, #0
 8006374:	e000      	b.n	8006378 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006376:	2302      	movs	r3, #2
  }
}
 8006378:	4618      	mov	r0, r3
 800637a:	3728      	adds	r7, #40	; 0x28
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	00010004 	.word	0x00010004

08006384 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b088      	sub	sp, #32
 8006388:	af02      	add	r7, sp, #8
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	607a      	str	r2, [r7, #4]
 800638e:	603b      	str	r3, [r7, #0]
 8006390:	460b      	mov	r3, r1
 8006392:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006398:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	2b08      	cmp	r3, #8
 800639e:	d006      	beq.n	80063ae <I2C_MasterRequestWrite+0x2a>
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d003      	beq.n	80063ae <I2C_MasterRequestWrite+0x2a>
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80063ac:	d108      	bne.n	80063c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063bc:	601a      	str	r2, [r3, #0]
 80063be:	e00b      	b.n	80063d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c4:	2b12      	cmp	r3, #18
 80063c6:	d107      	bne.n	80063d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	9300      	str	r3, [sp, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f000 f937 	bl	8006658 <I2C_WaitOnFlagUntilTimeout>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00d      	beq.n	800640c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063fe:	d103      	bne.n	8006408 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006406:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e035      	b.n	8006478 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006414:	d108      	bne.n	8006428 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006416:	897b      	ldrh	r3, [r7, #10]
 8006418:	b2db      	uxtb	r3, r3
 800641a:	461a      	mov	r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006424:	611a      	str	r2, [r3, #16]
 8006426:	e01b      	b.n	8006460 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006428:	897b      	ldrh	r3, [r7, #10]
 800642a:	11db      	asrs	r3, r3, #7
 800642c:	b2db      	uxtb	r3, r3
 800642e:	f003 0306 	and.w	r3, r3, #6
 8006432:	b2db      	uxtb	r3, r3
 8006434:	f063 030f 	orn	r3, r3, #15
 8006438:	b2da      	uxtb	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	490e      	ldr	r1, [pc, #56]	; (8006480 <I2C_MasterRequestWrite+0xfc>)
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f000 f95d 	bl	8006706 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e010      	b.n	8006478 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006456:	897b      	ldrh	r3, [r7, #10]
 8006458:	b2da      	uxtb	r2, r3
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	4907      	ldr	r1, [pc, #28]	; (8006484 <I2C_MasterRequestWrite+0x100>)
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f000 f94d 	bl	8006706 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e000      	b.n	8006478 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3718      	adds	r7, #24
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	00010008 	.word	0x00010008
 8006484:	00010002 	.word	0x00010002

08006488 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b088      	sub	sp, #32
 800648c:	af02      	add	r7, sp, #8
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	4608      	mov	r0, r1
 8006492:	4611      	mov	r1, r2
 8006494:	461a      	mov	r2, r3
 8006496:	4603      	mov	r3, r0
 8006498:	817b      	strh	r3, [r7, #10]
 800649a:	460b      	mov	r3, r1
 800649c:	813b      	strh	r3, [r7, #8]
 800649e:	4613      	mov	r3, r2
 80064a0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064b0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 f8c2 	bl	8006658 <I2C_WaitOnFlagUntilTimeout>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00d      	beq.n	80064f6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064e8:	d103      	bne.n	80064f2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e0aa      	b.n	800664c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064f6:	897b      	ldrh	r3, [r7, #10]
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	461a      	mov	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006504:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	6a3a      	ldr	r2, [r7, #32]
 800650a:	4952      	ldr	r1, [pc, #328]	; (8006654 <I2C_RequestMemoryRead+0x1cc>)
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f000 f8fa 	bl	8006706 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e097      	b.n	800664c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800651c:	2300      	movs	r3, #0
 800651e:	617b      	str	r3, [r7, #20]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	617b      	str	r3, [r7, #20]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	617b      	str	r3, [r7, #20]
 8006530:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006534:	6a39      	ldr	r1, [r7, #32]
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f000 f964 	bl	8006804 <I2C_WaitOnTXEFlagUntilTimeout>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00d      	beq.n	800655e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006546:	2b04      	cmp	r3, #4
 8006548:	d107      	bne.n	800655a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006558:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e076      	b.n	800664c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800655e:	88fb      	ldrh	r3, [r7, #6]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d105      	bne.n	8006570 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006564:	893b      	ldrh	r3, [r7, #8]
 8006566:	b2da      	uxtb	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	611a      	str	r2, [r3, #16]
 800656e:	e021      	b.n	80065b4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006570:	893b      	ldrh	r3, [r7, #8]
 8006572:	0a1b      	lsrs	r3, r3, #8
 8006574:	b29b      	uxth	r3, r3
 8006576:	b2da      	uxtb	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800657e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006580:	6a39      	ldr	r1, [r7, #32]
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f000 f93e 	bl	8006804 <I2C_WaitOnTXEFlagUntilTimeout>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00d      	beq.n	80065aa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006592:	2b04      	cmp	r3, #4
 8006594:	d107      	bne.n	80065a6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e050      	b.n	800664c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80065aa:	893b      	ldrh	r3, [r7, #8]
 80065ac:	b2da      	uxtb	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065b6:	6a39      	ldr	r1, [r7, #32]
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f000 f923 	bl	8006804 <I2C_WaitOnTXEFlagUntilTimeout>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00d      	beq.n	80065e0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c8:	2b04      	cmp	r3, #4
 80065ca:	d107      	bne.n	80065dc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065da:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e035      	b.n	800664c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065ee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	6a3b      	ldr	r3, [r7, #32]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f000 f82b 	bl	8006658 <I2C_WaitOnFlagUntilTimeout>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00d      	beq.n	8006624 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006616:	d103      	bne.n	8006620 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800661e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e013      	b.n	800664c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006624:	897b      	ldrh	r3, [r7, #10]
 8006626:	b2db      	uxtb	r3, r3
 8006628:	f043 0301 	orr.w	r3, r3, #1
 800662c:	b2da      	uxtb	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	6a3a      	ldr	r2, [r7, #32]
 8006638:	4906      	ldr	r1, [pc, #24]	; (8006654 <I2C_RequestMemoryRead+0x1cc>)
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f000 f863 	bl	8006706 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e000      	b.n	800664c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3718      	adds	r7, #24
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	00010002 	.word	0x00010002

08006658 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	603b      	str	r3, [r7, #0]
 8006664:	4613      	mov	r3, r2
 8006666:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006668:	e025      	b.n	80066b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006670:	d021      	beq.n	80066b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006672:	f7fd ff17 	bl	80044a4 <HAL_GetTick>
 8006676:	4602      	mov	r2, r0
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	683a      	ldr	r2, [r7, #0]
 800667e:	429a      	cmp	r2, r3
 8006680:	d302      	bcc.n	8006688 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d116      	bne.n	80066b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2220      	movs	r2, #32
 8006692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a2:	f043 0220 	orr.w	r2, r3, #32
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e023      	b.n	80066fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	0c1b      	lsrs	r3, r3, #16
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d10d      	bne.n	80066dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	43da      	mvns	r2, r3
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	4013      	ands	r3, r2
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	bf0c      	ite	eq
 80066d2:	2301      	moveq	r3, #1
 80066d4:	2300      	movne	r3, #0
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	461a      	mov	r2, r3
 80066da:	e00c      	b.n	80066f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	43da      	mvns	r2, r3
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	4013      	ands	r3, r2
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	bf0c      	ite	eq
 80066ee:	2301      	moveq	r3, #1
 80066f0:	2300      	movne	r3, #0
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	461a      	mov	r2, r3
 80066f6:	79fb      	ldrb	r3, [r7, #7]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d0b6      	beq.n	800666a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b084      	sub	sp, #16
 800670a:	af00      	add	r7, sp, #0
 800670c:	60f8      	str	r0, [r7, #12]
 800670e:	60b9      	str	r1, [r7, #8]
 8006710:	607a      	str	r2, [r7, #4]
 8006712:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006714:	e051      	b.n	80067ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006724:	d123      	bne.n	800676e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006734:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800673e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2220      	movs	r2, #32
 800674a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675a:	f043 0204 	orr.w	r2, r3, #4
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e046      	b.n	80067fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006774:	d021      	beq.n	80067ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006776:	f7fd fe95 	bl	80044a4 <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	429a      	cmp	r2, r3
 8006784:	d302      	bcc.n	800678c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d116      	bne.n	80067ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2220      	movs	r2, #32
 8006796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a6:	f043 0220 	orr.w	r2, r3, #32
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e020      	b.n	80067fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	0c1b      	lsrs	r3, r3, #16
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d10c      	bne.n	80067de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	43da      	mvns	r2, r3
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	4013      	ands	r3, r2
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	bf14      	ite	ne
 80067d6:	2301      	movne	r3, #1
 80067d8:	2300      	moveq	r3, #0
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	e00b      	b.n	80067f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	43da      	mvns	r2, r3
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	4013      	ands	r3, r2
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	bf14      	ite	ne
 80067f0:	2301      	movne	r3, #1
 80067f2:	2300      	moveq	r3, #0
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d18d      	bne.n	8006716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006810:	e02d      	b.n	800686e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f000 f8ce 	bl	80069b4 <I2C_IsAcknowledgeFailed>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d001      	beq.n	8006822 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e02d      	b.n	800687e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006828:	d021      	beq.n	800686e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800682a:	f7fd fe3b 	bl	80044a4 <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	429a      	cmp	r2, r3
 8006838:	d302      	bcc.n	8006840 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d116      	bne.n	800686e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2200      	movs	r2, #0
 8006844:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2220      	movs	r2, #32
 800684a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685a:	f043 0220 	orr.w	r2, r3, #32
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e007      	b.n	800687e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	695b      	ldr	r3, [r3, #20]
 8006874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006878:	2b80      	cmp	r3, #128	; 0x80
 800687a:	d1ca      	bne.n	8006812 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b084      	sub	sp, #16
 800688a:	af00      	add	r7, sp, #0
 800688c:	60f8      	str	r0, [r7, #12]
 800688e:	60b9      	str	r1, [r7, #8]
 8006890:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006892:	e02d      	b.n	80068f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f000 f88d 	bl	80069b4 <I2C_IsAcknowledgeFailed>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e02d      	b.n	8006900 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068aa:	d021      	beq.n	80068f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ac:	f7fd fdfa 	bl	80044a4 <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d302      	bcc.n	80068c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d116      	bne.n	80068f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2220      	movs	r2, #32
 80068cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068dc:	f043 0220 	orr.w	r2, r3, #32
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e007      	b.n	8006900 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	f003 0304 	and.w	r3, r3, #4
 80068fa:	2b04      	cmp	r3, #4
 80068fc:	d1ca      	bne.n	8006894 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006914:	e042      	b.n	800699c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	f003 0310 	and.w	r3, r3, #16
 8006920:	2b10      	cmp	r3, #16
 8006922:	d119      	bne.n	8006958 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f06f 0210 	mvn.w	r2, #16
 800692c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2220      	movs	r2, #32
 8006938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e029      	b.n	80069ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006958:	f7fd fda4 	bl	80044a4 <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	68ba      	ldr	r2, [r7, #8]
 8006964:	429a      	cmp	r2, r3
 8006966:	d302      	bcc.n	800696e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d116      	bne.n	800699c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2220      	movs	r2, #32
 8006978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006988:	f043 0220 	orr.w	r2, r3, #32
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e007      	b.n	80069ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a6:	2b40      	cmp	r3, #64	; 0x40
 80069a8:	d1b5      	bne.n	8006916 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069ca:	d11b      	bne.n	8006a04 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80069d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2220      	movs	r2, #32
 80069e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f0:	f043 0204 	orr.w	r2, r3, #4
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e000      	b.n	8006a06 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr

08006a12 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006a12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a14:	b08f      	sub	sp, #60	; 0x3c
 8006a16:	af0a      	add	r7, sp, #40	; 0x28
 8006a18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d101      	bne.n	8006a24 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e116      	b.n	8006c52 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d106      	bne.n	8006a44 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f010 fbaa 	bl	8017198 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2203      	movs	r2, #3
 8006a48:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d102      	bne.n	8006a5e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f006 f87f 	bl	800cb66 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	603b      	str	r3, [r7, #0]
 8006a6e:	687e      	ldr	r6, [r7, #4]
 8006a70:	466d      	mov	r5, sp
 8006a72:	f106 0410 	add.w	r4, r6, #16
 8006a76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006a82:	e885 0003 	stmia.w	r5, {r0, r1}
 8006a86:	1d33      	adds	r3, r6, #4
 8006a88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a8a:	6838      	ldr	r0, [r7, #0]
 8006a8c:	f005 ff56 	bl	800c93c <USB_CoreInit>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d005      	beq.n	8006aa2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2202      	movs	r2, #2
 8006a9a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e0d7      	b.n	8006c52 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f006 f86d 	bl	800cb88 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006aae:	2300      	movs	r3, #0
 8006ab0:	73fb      	strb	r3, [r7, #15]
 8006ab2:	e04a      	b.n	8006b4a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006ab4:	7bfa      	ldrb	r2, [r7, #15]
 8006ab6:	6879      	ldr	r1, [r7, #4]
 8006ab8:	4613      	mov	r3, r2
 8006aba:	00db      	lsls	r3, r3, #3
 8006abc:	4413      	add	r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	440b      	add	r3, r1
 8006ac2:	333d      	adds	r3, #61	; 0x3d
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006ac8:	7bfa      	ldrb	r2, [r7, #15]
 8006aca:	6879      	ldr	r1, [r7, #4]
 8006acc:	4613      	mov	r3, r2
 8006ace:	00db      	lsls	r3, r3, #3
 8006ad0:	4413      	add	r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	440b      	add	r3, r1
 8006ad6:	333c      	adds	r3, #60	; 0x3c
 8006ad8:	7bfa      	ldrb	r2, [r7, #15]
 8006ada:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006adc:	7bfa      	ldrb	r2, [r7, #15]
 8006ade:	7bfb      	ldrb	r3, [r7, #15]
 8006ae0:	b298      	uxth	r0, r3
 8006ae2:	6879      	ldr	r1, [r7, #4]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	00db      	lsls	r3, r3, #3
 8006ae8:	4413      	add	r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	440b      	add	r3, r1
 8006aee:	3344      	adds	r3, #68	; 0x44
 8006af0:	4602      	mov	r2, r0
 8006af2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006af4:	7bfa      	ldrb	r2, [r7, #15]
 8006af6:	6879      	ldr	r1, [r7, #4]
 8006af8:	4613      	mov	r3, r2
 8006afa:	00db      	lsls	r3, r3, #3
 8006afc:	4413      	add	r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	440b      	add	r3, r1
 8006b02:	3340      	adds	r3, #64	; 0x40
 8006b04:	2200      	movs	r2, #0
 8006b06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006b08:	7bfa      	ldrb	r2, [r7, #15]
 8006b0a:	6879      	ldr	r1, [r7, #4]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	00db      	lsls	r3, r3, #3
 8006b10:	4413      	add	r3, r2
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	440b      	add	r3, r1
 8006b16:	3348      	adds	r3, #72	; 0x48
 8006b18:	2200      	movs	r2, #0
 8006b1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006b1c:	7bfa      	ldrb	r2, [r7, #15]
 8006b1e:	6879      	ldr	r1, [r7, #4]
 8006b20:	4613      	mov	r3, r2
 8006b22:	00db      	lsls	r3, r3, #3
 8006b24:	4413      	add	r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	440b      	add	r3, r1
 8006b2a:	334c      	adds	r3, #76	; 0x4c
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006b30:	7bfa      	ldrb	r2, [r7, #15]
 8006b32:	6879      	ldr	r1, [r7, #4]
 8006b34:	4613      	mov	r3, r2
 8006b36:	00db      	lsls	r3, r3, #3
 8006b38:	4413      	add	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	440b      	add	r3, r1
 8006b3e:	3354      	adds	r3, #84	; 0x54
 8006b40:	2200      	movs	r2, #0
 8006b42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b44:	7bfb      	ldrb	r3, [r7, #15]
 8006b46:	3301      	adds	r3, #1
 8006b48:	73fb      	strb	r3, [r7, #15]
 8006b4a:	7bfa      	ldrb	r2, [r7, #15]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d3af      	bcc.n	8006ab4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b54:	2300      	movs	r3, #0
 8006b56:	73fb      	strb	r3, [r7, #15]
 8006b58:	e044      	b.n	8006be4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006b5a:	7bfa      	ldrb	r2, [r7, #15]
 8006b5c:	6879      	ldr	r1, [r7, #4]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	00db      	lsls	r3, r3, #3
 8006b62:	4413      	add	r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	440b      	add	r3, r1
 8006b68:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006b70:	7bfa      	ldrb	r2, [r7, #15]
 8006b72:	6879      	ldr	r1, [r7, #4]
 8006b74:	4613      	mov	r3, r2
 8006b76:	00db      	lsls	r3, r3, #3
 8006b78:	4413      	add	r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	440b      	add	r3, r1
 8006b7e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006b82:	7bfa      	ldrb	r2, [r7, #15]
 8006b84:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006b86:	7bfa      	ldrb	r2, [r7, #15]
 8006b88:	6879      	ldr	r1, [r7, #4]
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	00db      	lsls	r3, r3, #3
 8006b8e:	4413      	add	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	440b      	add	r3, r1
 8006b94:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006b98:	2200      	movs	r2, #0
 8006b9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006b9c:	7bfa      	ldrb	r2, [r7, #15]
 8006b9e:	6879      	ldr	r1, [r7, #4]
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	00db      	lsls	r3, r3, #3
 8006ba4:	4413      	add	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	440b      	add	r3, r1
 8006baa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006bae:	2200      	movs	r2, #0
 8006bb0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006bb2:	7bfa      	ldrb	r2, [r7, #15]
 8006bb4:	6879      	ldr	r1, [r7, #4]
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	00db      	lsls	r3, r3, #3
 8006bba:	4413      	add	r3, r2
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	440b      	add	r3, r1
 8006bc0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006bc8:	7bfa      	ldrb	r2, [r7, #15]
 8006bca:	6879      	ldr	r1, [r7, #4]
 8006bcc:	4613      	mov	r3, r2
 8006bce:	00db      	lsls	r3, r3, #3
 8006bd0:	4413      	add	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	440b      	add	r3, r1
 8006bd6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006bda:	2200      	movs	r2, #0
 8006bdc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006bde:	7bfb      	ldrb	r3, [r7, #15]
 8006be0:	3301      	adds	r3, #1
 8006be2:	73fb      	strb	r3, [r7, #15]
 8006be4:	7bfa      	ldrb	r2, [r7, #15]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d3b5      	bcc.n	8006b5a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	603b      	str	r3, [r7, #0]
 8006bf4:	687e      	ldr	r6, [r7, #4]
 8006bf6:	466d      	mov	r5, sp
 8006bf8:	f106 0410 	add.w	r4, r6, #16
 8006bfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006bfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006c00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006c04:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006c08:	e885 0003 	stmia.w	r5, {r0, r1}
 8006c0c:	1d33      	adds	r3, r6, #4
 8006c0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c10:	6838      	ldr	r0, [r7, #0]
 8006c12:	f006 f805 	bl	800cc20 <USB_DevInit>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d005      	beq.n	8006c28 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e014      	b.n	8006c52 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d102      	bne.n	8006c46 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f001 f9b9 	bl	8007fb8 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f007 f947 	bl	800dede <USB_DevDisconnect>

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006c5a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b084      	sub	sp, #16
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d101      	bne.n	8006c76 <HAL_PCD_Start+0x1c>
 8006c72:	2302      	movs	r3, #2
 8006c74:	e020      	b.n	8006cb8 <HAL_PCD_Start+0x5e>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d109      	bne.n	8006c9a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d005      	beq.n	8006c9a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f005 ff50 	bl	800cb44 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f007 f8f7 	bl	800de9c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006cc0:	b590      	push	{r4, r7, lr}
 8006cc2:	b08d      	sub	sp, #52	; 0x34
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cce:	6a3b      	ldr	r3, [r7, #32]
 8006cd0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f007 f9b5 	bl	800e046 <USB_GetMode>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f040 84b7 	bne.w	8007652 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f007 f919 	bl	800df20 <USB_ReadInterrupts>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f000 84ad 	beq.w	8007650 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	0a1b      	lsrs	r3, r3, #8
 8006d00:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f007 f906 	bl	800df20 <USB_ReadInterrupts>
 8006d14:	4603      	mov	r3, r0
 8006d16:	f003 0302 	and.w	r3, r3, #2
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d107      	bne.n	8006d2e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	695a      	ldr	r2, [r3, #20]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f002 0202 	and.w	r2, r2, #2
 8006d2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4618      	mov	r0, r3
 8006d34:	f007 f8f4 	bl	800df20 <USB_ReadInterrupts>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	f003 0310 	and.w	r3, r3, #16
 8006d3e:	2b10      	cmp	r3, #16
 8006d40:	d161      	bne.n	8006e06 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	699a      	ldr	r2, [r3, #24]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f022 0210 	bic.w	r2, r2, #16
 8006d50:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006d52:	6a3b      	ldr	r3, [r7, #32]
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	f003 020f 	and.w	r2, r3, #15
 8006d5e:	4613      	mov	r3, r2
 8006d60:	00db      	lsls	r3, r3, #3
 8006d62:	4413      	add	r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	3304      	adds	r3, #4
 8006d70:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	0c5b      	lsrs	r3, r3, #17
 8006d76:	f003 030f 	and.w	r3, r3, #15
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d124      	bne.n	8006dc8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006d7e:	69ba      	ldr	r2, [r7, #24]
 8006d80:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006d84:	4013      	ands	r3, r2
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d035      	beq.n	8006df6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	091b      	lsrs	r3, r3, #4
 8006d92:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006d94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	6a38      	ldr	r0, [r7, #32]
 8006d9e:	f006 ff2b 	bl	800dbf8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	691a      	ldr	r2, [r3, #16]
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	091b      	lsrs	r3, r3, #4
 8006daa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006dae:	441a      	add	r2, r3
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	6a1a      	ldr	r2, [r3, #32]
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	091b      	lsrs	r3, r3, #4
 8006dbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006dc0:	441a      	add	r2, r3
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	621a      	str	r2, [r3, #32]
 8006dc6:	e016      	b.n	8006df6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	0c5b      	lsrs	r3, r3, #17
 8006dcc:	f003 030f 	and.w	r3, r3, #15
 8006dd0:	2b06      	cmp	r3, #6
 8006dd2:	d110      	bne.n	8006df6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006dda:	2208      	movs	r2, #8
 8006ddc:	4619      	mov	r1, r3
 8006dde:	6a38      	ldr	r0, [r7, #32]
 8006de0:	f006 ff0a 	bl	800dbf8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	6a1a      	ldr	r2, [r3, #32]
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	091b      	lsrs	r3, r3, #4
 8006dec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006df0:	441a      	add	r2, r3
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	699a      	ldr	r2, [r3, #24]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f042 0210 	orr.w	r2, r2, #16
 8006e04:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f007 f888 	bl	800df20 <USB_ReadInterrupts>
 8006e10:	4603      	mov	r3, r0
 8006e12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e16:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006e1a:	f040 80a7 	bne.w	8006f6c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4618      	mov	r0, r3
 8006e28:	f007 f88d 	bl	800df46 <USB_ReadDevAllOutEpInterrupt>
 8006e2c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006e2e:	e099      	b.n	8006f64 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e32:	f003 0301 	and.w	r3, r3, #1
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	f000 808e 	beq.w	8006f58 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e42:	b2d2      	uxtb	r2, r2
 8006e44:	4611      	mov	r1, r2
 8006e46:	4618      	mov	r0, r3
 8006e48:	f007 f8b1 	bl	800dfae <USB_ReadDevOutEPInterrupt>
 8006e4c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	f003 0301 	and.w	r3, r3, #1
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00c      	beq.n	8006e72 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	015a      	lsls	r2, r3, #5
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	4413      	add	r3, r2
 8006e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e64:	461a      	mov	r2, r3
 8006e66:	2301      	movs	r3, #1
 8006e68:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006e6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 ff1d 	bl	8007cac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	f003 0308 	and.w	r3, r3, #8
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00c      	beq.n	8006e96 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e88:	461a      	mov	r2, r3
 8006e8a:	2308      	movs	r3, #8
 8006e8c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006e8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 fff3 	bl	8007e7c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	f003 0310 	and.w	r3, r3, #16
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d008      	beq.n	8006eb2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eac:	461a      	mov	r2, r3
 8006eae:	2310      	movs	r3, #16
 8006eb0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	f003 0302 	and.w	r3, r3, #2
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d030      	beq.n	8006f1e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006ebc:	6a3b      	ldr	r3, [r7, #32]
 8006ebe:	695b      	ldr	r3, [r3, #20]
 8006ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ec4:	2b80      	cmp	r3, #128	; 0x80
 8006ec6:	d109      	bne.n	8006edc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	69fa      	ldr	r2, [r7, #28]
 8006ed2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ed6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006eda:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ede:	4613      	mov	r3, r2
 8006ee0:	00db      	lsls	r3, r3, #3
 8006ee2:	4413      	add	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	4413      	add	r3, r2
 8006eee:	3304      	adds	r3, #4
 8006ef0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	78db      	ldrb	r3, [r3, #3]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d108      	bne.n	8006f0c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	2200      	movs	r2, #0
 8006efe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	4619      	mov	r1, r3
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f010 fa62 	bl	80173d0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0e:	015a      	lsls	r2, r3, #5
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	4413      	add	r3, r2
 8006f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f18:	461a      	mov	r2, r3
 8006f1a:	2302      	movs	r3, #2
 8006f1c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	f003 0320 	and.w	r3, r3, #32
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d008      	beq.n	8006f3a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2a:	015a      	lsls	r2, r3, #5
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	4413      	add	r3, r2
 8006f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f34:	461a      	mov	r2, r3
 8006f36:	2320      	movs	r3, #32
 8006f38:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d009      	beq.n	8006f58 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f46:	015a      	lsls	r2, r3, #5
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f50:	461a      	mov	r2, r3
 8006f52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f56:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f60:	085b      	lsrs	r3, r3, #1
 8006f62:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	f47f af62 	bne.w	8006e30 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4618      	mov	r0, r3
 8006f72:	f006 ffd5 	bl	800df20 <USB_ReadInterrupts>
 8006f76:	4603      	mov	r3, r0
 8006f78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f80:	f040 80db 	bne.w	800713a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f006 fff6 	bl	800df7a <USB_ReadDevAllInEpInterrupt>
 8006f8e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006f90:	2300      	movs	r3, #0
 8006f92:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006f94:	e0cd      	b.n	8007132 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f000 80c2 	beq.w	8007126 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fa8:	b2d2      	uxtb	r2, r2
 8006faa:	4611      	mov	r1, r2
 8006fac:	4618      	mov	r0, r3
 8006fae:	f007 f81c 	bl	800dfea <USB_ReadDevInEPInterrupt>
 8006fb2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	f003 0301 	and.w	r3, r3, #1
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d057      	beq.n	800706e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc0:	f003 030f 	and.w	r3, r3, #15
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fca:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	43db      	mvns	r3, r3
 8006fd8:	69f9      	ldr	r1, [r7, #28]
 8006fda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fde:	4013      	ands	r3, r2
 8006fe0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe4:	015a      	lsls	r2, r3, #5
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	4413      	add	r3, r2
 8006fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fee:	461a      	mov	r2, r3
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d132      	bne.n	8007062 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006ffc:	6879      	ldr	r1, [r7, #4]
 8006ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007000:	4613      	mov	r3, r2
 8007002:	00db      	lsls	r3, r3, #3
 8007004:	4413      	add	r3, r2
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	440b      	add	r3, r1
 800700a:	334c      	adds	r3, #76	; 0x4c
 800700c:	6819      	ldr	r1, [r3, #0]
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007012:	4613      	mov	r3, r2
 8007014:	00db      	lsls	r3, r3, #3
 8007016:	4413      	add	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	4403      	add	r3, r0
 800701c:	3348      	adds	r3, #72	; 0x48
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4419      	add	r1, r3
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007026:	4613      	mov	r3, r2
 8007028:	00db      	lsls	r3, r3, #3
 800702a:	4413      	add	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4403      	add	r3, r0
 8007030:	334c      	adds	r3, #76	; 0x4c
 8007032:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007036:	2b00      	cmp	r3, #0
 8007038:	d113      	bne.n	8007062 <HAL_PCD_IRQHandler+0x3a2>
 800703a:	6879      	ldr	r1, [r7, #4]
 800703c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800703e:	4613      	mov	r3, r2
 8007040:	00db      	lsls	r3, r3, #3
 8007042:	4413      	add	r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	440b      	add	r3, r1
 8007048:	3354      	adds	r3, #84	; 0x54
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d108      	bne.n	8007062 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6818      	ldr	r0, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800705a:	461a      	mov	r2, r3
 800705c:	2101      	movs	r1, #1
 800705e:	f007 f823 	bl	800e0a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007064:	b2db      	uxtb	r3, r3
 8007066:	4619      	mov	r1, r3
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f010 f92c 	bl	80172c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	f003 0308 	and.w	r3, r3, #8
 8007074:	2b00      	cmp	r3, #0
 8007076:	d008      	beq.n	800708a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	4413      	add	r3, r2
 8007080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007084:	461a      	mov	r2, r3
 8007086:	2308      	movs	r3, #8
 8007088:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	f003 0310 	and.w	r3, r3, #16
 8007090:	2b00      	cmp	r3, #0
 8007092:	d008      	beq.n	80070a6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007096:	015a      	lsls	r2, r3, #5
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	4413      	add	r3, r2
 800709c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a0:	461a      	mov	r2, r3
 80070a2:	2310      	movs	r3, #16
 80070a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d008      	beq.n	80070c2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80070b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b2:	015a      	lsls	r2, r3, #5
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	4413      	add	r3, r2
 80070b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070bc:	461a      	mov	r2, r3
 80070be:	2340      	movs	r3, #64	; 0x40
 80070c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	f003 0302 	and.w	r3, r3, #2
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d023      	beq.n	8007114 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80070cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070ce:	6a38      	ldr	r0, [r7, #32]
 80070d0:	f005 ff04 	bl	800cedc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80070d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070d6:	4613      	mov	r3, r2
 80070d8:	00db      	lsls	r3, r3, #3
 80070da:	4413      	add	r3, r2
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	3338      	adds	r3, #56	; 0x38
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	4413      	add	r3, r2
 80070e4:	3304      	adds	r3, #4
 80070e6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	78db      	ldrb	r3, [r3, #3]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d108      	bne.n	8007102 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	2200      	movs	r2, #0
 80070f4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80070f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f010 f979 	bl	80173f4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007104:	015a      	lsls	r2, r3, #5
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	4413      	add	r3, r2
 800710a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800710e:	461a      	mov	r2, r3
 8007110:	2302      	movs	r3, #2
 8007112:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800711a:	2b00      	cmp	r3, #0
 800711c:	d003      	beq.n	8007126 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800711e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 fd35 	bl	8007b90 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007128:	3301      	adds	r3, #1
 800712a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800712c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712e:	085b      	lsrs	r3, r3, #1
 8007130:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007134:	2b00      	cmp	r3, #0
 8007136:	f47f af2e 	bne.w	8006f96 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4618      	mov	r0, r3
 8007140:	f006 feee 	bl	800df20 <USB_ReadInterrupts>
 8007144:	4603      	mov	r3, r0
 8007146:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800714a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800714e:	d122      	bne.n	8007196 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	69fa      	ldr	r2, [r7, #28]
 800715a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800715e:	f023 0301 	bic.w	r3, r3, #1
 8007162:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800716a:	2b01      	cmp	r3, #1
 800716c:	d108      	bne.n	8007180 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007176:	2100      	movs	r1, #0
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f010 fb13 	bl	80177a4 <HAL_PCDEx_LPM_Callback>
 800717e:	e002      	b.n	8007186 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f010 f917 	bl	80173b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	695a      	ldr	r2, [r3, #20]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007194:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4618      	mov	r0, r3
 800719c:	f006 fec0 	bl	800df20 <USB_ReadInterrupts>
 80071a0:	4603      	mov	r3, r0
 80071a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071aa:	d112      	bne.n	80071d2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	f003 0301 	and.w	r3, r3, #1
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d102      	bne.n	80071c2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f010 f8d3 	bl	8017368 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	695a      	ldr	r2, [r3, #20]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80071d0:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4618      	mov	r0, r3
 80071d8:	f006 fea2 	bl	800df20 <USB_ReadInterrupts>
 80071dc:	4603      	mov	r3, r0
 80071de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071e6:	d121      	bne.n	800722c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	695a      	ldr	r2, [r3, #20]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80071f6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d111      	bne.n	8007226 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007210:	089b      	lsrs	r3, r3, #2
 8007212:	f003 020f 	and.w	r2, r3, #15
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800721c:	2101      	movs	r1, #1
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f010 fac0 	bl	80177a4 <HAL_PCDEx_LPM_Callback>
 8007224:	e002      	b.n	800722c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f010 f89e 	bl	8017368 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4618      	mov	r0, r3
 8007232:	f006 fe75 	bl	800df20 <USB_ReadInterrupts>
 8007236:	4603      	mov	r3, r0
 8007238:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800723c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007240:	f040 80b7 	bne.w	80073b2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	69fa      	ldr	r2, [r7, #28]
 800724e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007252:	f023 0301 	bic.w	r3, r3, #1
 8007256:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2110      	movs	r1, #16
 800725e:	4618      	mov	r0, r3
 8007260:	f005 fe3c 	bl	800cedc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007264:	2300      	movs	r3, #0
 8007266:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007268:	e046      	b.n	80072f8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800726a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726c:	015a      	lsls	r2, r3, #5
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	4413      	add	r3, r2
 8007272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007276:	461a      	mov	r2, r3
 8007278:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800727c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800727e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007280:	015a      	lsls	r2, r3, #5
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	4413      	add	r3, r2
 8007286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800728e:	0151      	lsls	r1, r2, #5
 8007290:	69fa      	ldr	r2, [r7, #28]
 8007292:	440a      	add	r2, r1
 8007294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007298:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800729c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800729e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072aa:	461a      	mov	r2, r3
 80072ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80072b0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80072b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b4:	015a      	lsls	r2, r3, #5
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	4413      	add	r3, r2
 80072ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072c2:	0151      	lsls	r1, r2, #5
 80072c4:	69fa      	ldr	r2, [r7, #28]
 80072c6:	440a      	add	r2, r1
 80072c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80072d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80072d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d4:	015a      	lsls	r2, r3, #5
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	4413      	add	r3, r2
 80072da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072e2:	0151      	lsls	r1, r2, #5
 80072e4:	69fa      	ldr	r2, [r7, #28]
 80072e6:	440a      	add	r2, r1
 80072e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80072f0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f4:	3301      	adds	r3, #1
 80072f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072fe:	429a      	cmp	r2, r3
 8007300:	d3b3      	bcc.n	800726a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007308:	69db      	ldr	r3, [r3, #28]
 800730a:	69fa      	ldr	r2, [r7, #28]
 800730c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007310:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007314:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731a:	2b00      	cmp	r3, #0
 800731c:	d016      	beq.n	800734c <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007328:	69fa      	ldr	r2, [r7, #28]
 800732a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800732e:	f043 030b 	orr.w	r3, r3, #11
 8007332:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800733c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800733e:	69fa      	ldr	r2, [r7, #28]
 8007340:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007344:	f043 030b 	orr.w	r3, r3, #11
 8007348:	6453      	str	r3, [r2, #68]	; 0x44
 800734a:	e015      	b.n	8007378 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007352:	695b      	ldr	r3, [r3, #20]
 8007354:	69fa      	ldr	r2, [r7, #28]
 8007356:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800735a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800735e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007362:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	69fa      	ldr	r2, [r7, #28]
 800736e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007372:	f043 030b 	orr.w	r3, r3, #11
 8007376:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	69fa      	ldr	r2, [r7, #28]
 8007382:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007386:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800738a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6818      	ldr	r0, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800739c:	461a      	mov	r2, r3
 800739e:	f006 fe83 	bl	800e0a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	695a      	ldr	r2, [r3, #20]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80073b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4618      	mov	r0, r3
 80073b8:	f006 fdb2 	bl	800df20 <USB_ReadInterrupts>
 80073bc:	4603      	mov	r3, r0
 80073be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073c6:	d124      	bne.n	8007412 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4618      	mov	r0, r3
 80073ce:	f006 fe48 	bl	800e062 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4618      	mov	r0, r3
 80073d8:	f005 fdfd 	bl	800cfd6 <USB_GetDevSpeed>
 80073dc:	4603      	mov	r3, r0
 80073de:	461a      	mov	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681c      	ldr	r4, [r3, #0]
 80073e8:	f000 fef0 	bl	80081cc <HAL_RCC_GetHCLKFreq>
 80073ec:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	461a      	mov	r2, r3
 80073f6:	4620      	mov	r0, r4
 80073f8:	f005 fb02 	bl	800ca00 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f00f ff8a 	bl	8017316 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	695a      	ldr	r2, [r3, #20]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007410:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4618      	mov	r0, r3
 8007418:	f006 fd82 	bl	800df20 <USB_ReadInterrupts>
 800741c:	4603      	mov	r3, r0
 800741e:	f003 0308 	and.w	r3, r3, #8
 8007422:	2b08      	cmp	r3, #8
 8007424:	d10a      	bne.n	800743c <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f00f ff67 	bl	80172fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	695a      	ldr	r2, [r3, #20]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f002 0208 	and.w	r2, r2, #8
 800743a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4618      	mov	r0, r3
 8007442:	f006 fd6d 	bl	800df20 <USB_ReadInterrupts>
 8007446:	4603      	mov	r3, r0
 8007448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800744c:	2b80      	cmp	r3, #128	; 0x80
 800744e:	d122      	bne.n	8007496 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007450:	6a3b      	ldr	r3, [r7, #32]
 8007452:	699b      	ldr	r3, [r3, #24]
 8007454:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007458:	6a3b      	ldr	r3, [r7, #32]
 800745a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800745c:	2301      	movs	r3, #1
 800745e:	627b      	str	r3, [r7, #36]	; 0x24
 8007460:	e014      	b.n	800748c <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007462:	6879      	ldr	r1, [r7, #4]
 8007464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007466:	4613      	mov	r3, r2
 8007468:	00db      	lsls	r3, r3, #3
 800746a:	4413      	add	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	440b      	add	r3, r1
 8007470:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	2b01      	cmp	r3, #1
 8007478:	d105      	bne.n	8007486 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800747a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747c:	b2db      	uxtb	r3, r3
 800747e:	4619      	mov	r1, r3
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 fb27 	bl	8007ad4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007488:	3301      	adds	r3, #1
 800748a:	627b      	str	r3, [r7, #36]	; 0x24
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007492:	429a      	cmp	r2, r3
 8007494:	d3e5      	bcc.n	8007462 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4618      	mov	r0, r3
 800749c:	f006 fd40 	bl	800df20 <USB_ReadInterrupts>
 80074a0:	4603      	mov	r3, r0
 80074a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074aa:	d13b      	bne.n	8007524 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80074ac:	2301      	movs	r3, #1
 80074ae:	627b      	str	r3, [r7, #36]	; 0x24
 80074b0:	e02b      	b.n	800750a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	015a      	lsls	r2, r3, #5
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	4413      	add	r3, r2
 80074ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80074c2:	6879      	ldr	r1, [r7, #4]
 80074c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074c6:	4613      	mov	r3, r2
 80074c8:	00db      	lsls	r3, r3, #3
 80074ca:	4413      	add	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	440b      	add	r3, r1
 80074d0:	3340      	adds	r3, #64	; 0x40
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d115      	bne.n	8007504 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80074d8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80074da:	2b00      	cmp	r3, #0
 80074dc:	da12      	bge.n	8007504 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80074de:	6879      	ldr	r1, [r7, #4]
 80074e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074e2:	4613      	mov	r3, r2
 80074e4:	00db      	lsls	r3, r3, #3
 80074e6:	4413      	add	r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	440b      	add	r3, r1
 80074ec:	333f      	adds	r3, #63	; 0x3f
 80074ee:	2201      	movs	r2, #1
 80074f0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80074f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	4619      	mov	r1, r3
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 fae8 	bl	8007ad4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	3301      	adds	r3, #1
 8007508:	627b      	str	r3, [r7, #36]	; 0x24
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007510:	429a      	cmp	r2, r3
 8007512:	d3ce      	bcc.n	80074b2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	695a      	ldr	r2, [r3, #20]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007522:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4618      	mov	r0, r3
 800752a:	f006 fcf9 	bl	800df20 <USB_ReadInterrupts>
 800752e:	4603      	mov	r3, r0
 8007530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007534:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007538:	d155      	bne.n	80075e6 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800753a:	2301      	movs	r3, #1
 800753c:	627b      	str	r3, [r7, #36]	; 0x24
 800753e:	e045      	b.n	80075cc <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007542:	015a      	lsls	r2, r3, #5
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	4413      	add	r3, r2
 8007548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007550:	6879      	ldr	r1, [r7, #4]
 8007552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007554:	4613      	mov	r3, r2
 8007556:	00db      	lsls	r3, r3, #3
 8007558:	4413      	add	r3, r2
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	440b      	add	r3, r1
 800755e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d12e      	bne.n	80075c6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007568:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800756a:	2b00      	cmp	r3, #0
 800756c:	da2b      	bge.n	80075c6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800757a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800757e:	429a      	cmp	r2, r3
 8007580:	d121      	bne.n	80075c6 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007582:	6879      	ldr	r1, [r7, #4]
 8007584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007586:	4613      	mov	r3, r2
 8007588:	00db      	lsls	r3, r3, #3
 800758a:	4413      	add	r3, r2
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	440b      	add	r3, r1
 8007590:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007594:	2201      	movs	r2, #1
 8007596:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007598:	6a3b      	ldr	r3, [r7, #32]
 800759a:	699b      	ldr	r3, [r3, #24]
 800759c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80075a0:	6a3b      	ldr	r3, [r7, #32]
 80075a2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80075a4:	6a3b      	ldr	r3, [r7, #32]
 80075a6:	695b      	ldr	r3, [r3, #20]
 80075a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d10a      	bne.n	80075c6 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	69fa      	ldr	r2, [r7, #28]
 80075ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80075c2:	6053      	str	r3, [r2, #4]
            break;
 80075c4:	e007      	b.n	80075d6 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80075c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c8:	3301      	adds	r3, #1
 80075ca:	627b      	str	r3, [r7, #36]	; 0x24
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d3b4      	bcc.n	8007540 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	695a      	ldr	r2, [r3, #20]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80075e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f006 fc98 	bl	800df20 <USB_ReadInterrupts>
 80075f0:	4603      	mov	r3, r0
 80075f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80075f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075fa:	d10a      	bne.n	8007612 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f00f ff0b 	bl	8017418 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	695a      	ldr	r2, [r3, #20]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007610:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4618      	mov	r0, r3
 8007618:	f006 fc82 	bl	800df20 <USB_ReadInterrupts>
 800761c:	4603      	mov	r3, r0
 800761e:	f003 0304 	and.w	r3, r3, #4
 8007622:	2b04      	cmp	r3, #4
 8007624:	d115      	bne.n	8007652 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	f003 0304 	and.w	r3, r3, #4
 8007634:	2b00      	cmp	r3, #0
 8007636:	d002      	beq.n	800763e <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f00f fefb 	bl	8017434 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	6859      	ldr	r1, [r3, #4]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	69ba      	ldr	r2, [r7, #24]
 800764a:	430a      	orrs	r2, r1
 800764c:	605a      	str	r2, [r3, #4]
 800764e:	e000      	b.n	8007652 <HAL_PCD_IRQHandler+0x992>
      return;
 8007650:	bf00      	nop
    }
  }
}
 8007652:	3734      	adds	r7, #52	; 0x34
 8007654:	46bd      	mov	sp, r7
 8007656:	bd90      	pop	{r4, r7, pc}

08007658 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	460b      	mov	r3, r1
 8007662:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800766a:	2b01      	cmp	r3, #1
 800766c:	d101      	bne.n	8007672 <HAL_PCD_SetAddress+0x1a>
 800766e:	2302      	movs	r3, #2
 8007670:	e013      	b.n	800769a <HAL_PCD_SetAddress+0x42>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2201      	movs	r2, #1
 8007676:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	78fa      	ldrb	r2, [r7, #3]
 800767e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	78fa      	ldrb	r2, [r7, #3]
 8007688:	4611      	mov	r1, r2
 800768a:	4618      	mov	r0, r3
 800768c:	f006 fbe0 	bl	800de50 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3708      	adds	r7, #8
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b084      	sub	sp, #16
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
 80076aa:	4608      	mov	r0, r1
 80076ac:	4611      	mov	r1, r2
 80076ae:	461a      	mov	r2, r3
 80076b0:	4603      	mov	r3, r0
 80076b2:	70fb      	strb	r3, [r7, #3]
 80076b4:	460b      	mov	r3, r1
 80076b6:	803b      	strh	r3, [r7, #0]
 80076b8:	4613      	mov	r3, r2
 80076ba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80076bc:	2300      	movs	r3, #0
 80076be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80076c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	da0f      	bge.n	80076e8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076c8:	78fb      	ldrb	r3, [r7, #3]
 80076ca:	f003 020f 	and.w	r2, r3, #15
 80076ce:	4613      	mov	r3, r2
 80076d0:	00db      	lsls	r3, r3, #3
 80076d2:	4413      	add	r3, r2
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	3338      	adds	r3, #56	; 0x38
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	4413      	add	r3, r2
 80076dc:	3304      	adds	r3, #4
 80076de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2201      	movs	r2, #1
 80076e4:	705a      	strb	r2, [r3, #1]
 80076e6:	e00f      	b.n	8007708 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80076e8:	78fb      	ldrb	r3, [r7, #3]
 80076ea:	f003 020f 	and.w	r2, r3, #15
 80076ee:	4613      	mov	r3, r2
 80076f0:	00db      	lsls	r3, r3, #3
 80076f2:	4413      	add	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	4413      	add	r3, r2
 80076fe:	3304      	adds	r3, #4
 8007700:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2200      	movs	r2, #0
 8007706:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007708:	78fb      	ldrb	r3, [r7, #3]
 800770a:	f003 030f 	and.w	r3, r3, #15
 800770e:	b2da      	uxtb	r2, r3
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007714:	883a      	ldrh	r2, [r7, #0]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	78ba      	ldrb	r2, [r7, #2]
 800771e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	785b      	ldrb	r3, [r3, #1]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d004      	beq.n	8007732 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	b29a      	uxth	r2, r3
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007732:	78bb      	ldrb	r3, [r7, #2]
 8007734:	2b02      	cmp	r3, #2
 8007736:	d102      	bne.n	800773e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007744:	2b01      	cmp	r3, #1
 8007746:	d101      	bne.n	800774c <HAL_PCD_EP_Open+0xaa>
 8007748:	2302      	movs	r3, #2
 800774a:	e00e      	b.n	800776a <HAL_PCD_EP_Open+0xc8>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	68f9      	ldr	r1, [r7, #12]
 800775a:	4618      	mov	r0, r3
 800775c:	f005 fc60 	bl	800d020 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8007768:	7afb      	ldrb	r3, [r7, #11]
}
 800776a:	4618      	mov	r0, r3
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b084      	sub	sp, #16
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
 800777a:	460b      	mov	r3, r1
 800777c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800777e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007782:	2b00      	cmp	r3, #0
 8007784:	da0f      	bge.n	80077a6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007786:	78fb      	ldrb	r3, [r7, #3]
 8007788:	f003 020f 	and.w	r2, r3, #15
 800778c:	4613      	mov	r3, r2
 800778e:	00db      	lsls	r3, r3, #3
 8007790:	4413      	add	r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	3338      	adds	r3, #56	; 0x38
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	4413      	add	r3, r2
 800779a:	3304      	adds	r3, #4
 800779c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2201      	movs	r2, #1
 80077a2:	705a      	strb	r2, [r3, #1]
 80077a4:	e00f      	b.n	80077c6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80077a6:	78fb      	ldrb	r3, [r7, #3]
 80077a8:	f003 020f 	and.w	r2, r3, #15
 80077ac:	4613      	mov	r3, r2
 80077ae:	00db      	lsls	r3, r3, #3
 80077b0:	4413      	add	r3, r2
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	4413      	add	r3, r2
 80077bc:	3304      	adds	r3, #4
 80077be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2200      	movs	r2, #0
 80077c4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80077c6:	78fb      	ldrb	r3, [r7, #3]
 80077c8:	f003 030f 	and.w	r3, r3, #15
 80077cc:	b2da      	uxtb	r2, r3
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d101      	bne.n	80077e0 <HAL_PCD_EP_Close+0x6e>
 80077dc:	2302      	movs	r3, #2
 80077de:	e00e      	b.n	80077fe <HAL_PCD_EP_Close+0x8c>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68f9      	ldr	r1, [r7, #12]
 80077ee:	4618      	mov	r0, r3
 80077f0:	f005 fc9e 	bl	800d130 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b086      	sub	sp, #24
 800780a:	af00      	add	r7, sp, #0
 800780c:	60f8      	str	r0, [r7, #12]
 800780e:	607a      	str	r2, [r7, #4]
 8007810:	603b      	str	r3, [r7, #0]
 8007812:	460b      	mov	r3, r1
 8007814:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007816:	7afb      	ldrb	r3, [r7, #11]
 8007818:	f003 020f 	and.w	r2, r3, #15
 800781c:	4613      	mov	r3, r2
 800781e:	00db      	lsls	r3, r3, #3
 8007820:	4413      	add	r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	4413      	add	r3, r2
 800782c:	3304      	adds	r3, #4
 800782e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	683a      	ldr	r2, [r7, #0]
 800783a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	2200      	movs	r2, #0
 8007840:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	2200      	movs	r2, #0
 8007846:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007848:	7afb      	ldrb	r3, [r7, #11]
 800784a:	f003 030f 	and.w	r3, r3, #15
 800784e:	b2da      	uxtb	r2, r3
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d102      	bne.n	8007862 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007862:	7afb      	ldrb	r3, [r7, #11]
 8007864:	f003 030f 	and.w	r3, r3, #15
 8007868:	2b00      	cmp	r3, #0
 800786a:	d109      	bne.n	8007880 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6818      	ldr	r0, [r3, #0]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	b2db      	uxtb	r3, r3
 8007876:	461a      	mov	r2, r3
 8007878:	6979      	ldr	r1, [r7, #20]
 800787a:	f005 ff7d 	bl	800d778 <USB_EP0StartXfer>
 800787e:	e008      	b.n	8007892 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6818      	ldr	r0, [r3, #0]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	b2db      	uxtb	r3, r3
 800788a:	461a      	mov	r2, r3
 800788c:	6979      	ldr	r1, [r7, #20]
 800788e:	f005 fd2b 	bl	800d2e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3718      	adds	r7, #24
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	460b      	mov	r3, r1
 80078a6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80078a8:	78fb      	ldrb	r3, [r7, #3]
 80078aa:	f003 020f 	and.w	r2, r3, #15
 80078ae:	6879      	ldr	r1, [r7, #4]
 80078b0:	4613      	mov	r3, r2
 80078b2:	00db      	lsls	r3, r3, #3
 80078b4:	4413      	add	r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	440b      	add	r3, r1
 80078ba:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80078be:	681b      	ldr	r3, [r3, #0]
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b086      	sub	sp, #24
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	607a      	str	r2, [r7, #4]
 80078d6:	603b      	str	r3, [r7, #0]
 80078d8:	460b      	mov	r3, r1
 80078da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80078dc:	7afb      	ldrb	r3, [r7, #11]
 80078de:	f003 020f 	and.w	r2, r3, #15
 80078e2:	4613      	mov	r3, r2
 80078e4:	00db      	lsls	r3, r3, #3
 80078e6:	4413      	add	r3, r2
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	3338      	adds	r3, #56	; 0x38
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	4413      	add	r3, r2
 80078f0:	3304      	adds	r3, #4
 80078f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	683a      	ldr	r2, [r7, #0]
 80078fe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	2200      	movs	r2, #0
 8007904:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	2201      	movs	r2, #1
 800790a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800790c:	7afb      	ldrb	r3, [r7, #11]
 800790e:	f003 030f 	and.w	r3, r3, #15
 8007912:	b2da      	uxtb	r2, r3
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	2b01      	cmp	r3, #1
 800791e:	d102      	bne.n	8007926 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007926:	7afb      	ldrb	r3, [r7, #11]
 8007928:	f003 030f 	and.w	r3, r3, #15
 800792c:	2b00      	cmp	r3, #0
 800792e:	d109      	bne.n	8007944 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6818      	ldr	r0, [r3, #0]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	b2db      	uxtb	r3, r3
 800793a:	461a      	mov	r2, r3
 800793c:	6979      	ldr	r1, [r7, #20]
 800793e:	f005 ff1b 	bl	800d778 <USB_EP0StartXfer>
 8007942:	e008      	b.n	8007956 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6818      	ldr	r0, [r3, #0]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	b2db      	uxtb	r3, r3
 800794e:	461a      	mov	r2, r3
 8007950:	6979      	ldr	r1, [r7, #20]
 8007952:	f005 fcc9 	bl	800d2e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3718      	adds	r7, #24
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	460b      	mov	r3, r1
 800796a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800796c:	78fb      	ldrb	r3, [r7, #3]
 800796e:	f003 020f 	and.w	r2, r3, #15
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	429a      	cmp	r2, r3
 8007978:	d901      	bls.n	800797e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	e050      	b.n	8007a20 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800797e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007982:	2b00      	cmp	r3, #0
 8007984:	da0f      	bge.n	80079a6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007986:	78fb      	ldrb	r3, [r7, #3]
 8007988:	f003 020f 	and.w	r2, r3, #15
 800798c:	4613      	mov	r3, r2
 800798e:	00db      	lsls	r3, r3, #3
 8007990:	4413      	add	r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	3338      	adds	r3, #56	; 0x38
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	4413      	add	r3, r2
 800799a:	3304      	adds	r3, #4
 800799c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2201      	movs	r2, #1
 80079a2:	705a      	strb	r2, [r3, #1]
 80079a4:	e00d      	b.n	80079c2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80079a6:	78fa      	ldrb	r2, [r7, #3]
 80079a8:	4613      	mov	r3, r2
 80079aa:	00db      	lsls	r3, r3, #3
 80079ac:	4413      	add	r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	4413      	add	r3, r2
 80079b8:	3304      	adds	r3, #4
 80079ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2201      	movs	r2, #1
 80079c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80079c8:	78fb      	ldrb	r3, [r7, #3]
 80079ca:	f003 030f 	and.w	r3, r3, #15
 80079ce:	b2da      	uxtb	r2, r3
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d101      	bne.n	80079e2 <HAL_PCD_EP_SetStall+0x82>
 80079de:	2302      	movs	r3, #2
 80079e0:	e01e      	b.n	8007a20 <HAL_PCD_EP_SetStall+0xc0>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68f9      	ldr	r1, [r7, #12]
 80079f0:	4618      	mov	r0, r3
 80079f2:	f006 f959 	bl	800dca8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80079f6:	78fb      	ldrb	r3, [r7, #3]
 80079f8:	f003 030f 	and.w	r3, r3, #15
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10a      	bne.n	8007a16 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6818      	ldr	r0, [r3, #0]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	b2d9      	uxtb	r1, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007a10:	461a      	mov	r2, r3
 8007a12:	f006 fb49 	bl	800e0a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	460b      	mov	r3, r1
 8007a32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007a34:	78fb      	ldrb	r3, [r7, #3]
 8007a36:	f003 020f 	and.w	r2, r3, #15
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d901      	bls.n	8007a46 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e042      	b.n	8007acc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007a46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	da0f      	bge.n	8007a6e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a4e:	78fb      	ldrb	r3, [r7, #3]
 8007a50:	f003 020f 	and.w	r2, r3, #15
 8007a54:	4613      	mov	r3, r2
 8007a56:	00db      	lsls	r3, r3, #3
 8007a58:	4413      	add	r3, r2
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	3338      	adds	r3, #56	; 0x38
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	4413      	add	r3, r2
 8007a62:	3304      	adds	r3, #4
 8007a64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	705a      	strb	r2, [r3, #1]
 8007a6c:	e00f      	b.n	8007a8e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a6e:	78fb      	ldrb	r3, [r7, #3]
 8007a70:	f003 020f 	and.w	r2, r3, #15
 8007a74:	4613      	mov	r3, r2
 8007a76:	00db      	lsls	r3, r3, #3
 8007a78:	4413      	add	r3, r2
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	4413      	add	r3, r2
 8007a84:	3304      	adds	r3, #4
 8007a86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a94:	78fb      	ldrb	r3, [r7, #3]
 8007a96:	f003 030f 	and.w	r3, r3, #15
 8007a9a:	b2da      	uxtb	r2, r3
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d101      	bne.n	8007aae <HAL_PCD_EP_ClrStall+0x86>
 8007aaa:	2302      	movs	r3, #2
 8007aac:	e00e      	b.n	8007acc <HAL_PCD_EP_ClrStall+0xa4>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68f9      	ldr	r1, [r7, #12]
 8007abc:	4618      	mov	r0, r3
 8007abe:	f006 f961 	bl	800dd84 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3710      	adds	r7, #16
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	460b      	mov	r3, r1
 8007ade:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007ae0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	da0c      	bge.n	8007b02 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ae8:	78fb      	ldrb	r3, [r7, #3]
 8007aea:	f003 020f 	and.w	r2, r3, #15
 8007aee:	4613      	mov	r3, r2
 8007af0:	00db      	lsls	r3, r3, #3
 8007af2:	4413      	add	r3, r2
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	3338      	adds	r3, #56	; 0x38
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	4413      	add	r3, r2
 8007afc:	3304      	adds	r3, #4
 8007afe:	60fb      	str	r3, [r7, #12]
 8007b00:	e00c      	b.n	8007b1c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b02:	78fb      	ldrb	r3, [r7, #3]
 8007b04:	f003 020f 	and.w	r2, r3, #15
 8007b08:	4613      	mov	r3, r2
 8007b0a:	00db      	lsls	r3, r3, #3
 8007b0c:	4413      	add	r3, r2
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	4413      	add	r3, r2
 8007b18:	3304      	adds	r3, #4
 8007b1a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	68f9      	ldr	r1, [r7, #12]
 8007b22:	4618      	mov	r0, r3
 8007b24:	f005 ff80 	bl	800da28 <USB_EPStopXfer>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007b2c:	7afb      	ldrb	r3, [r7, #11]
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b082      	sub	sp, #8
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
 8007b3e:	460b      	mov	r3, r1
 8007b40:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d101      	bne.n	8007b50 <HAL_PCD_EP_Flush+0x1a>
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	e01b      	b.n	8007b88 <HAL_PCD_EP_Flush+0x52>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8007b58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	da09      	bge.n	8007b74 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	78fb      	ldrb	r3, [r7, #3]
 8007b66:	f003 030f 	and.w	r3, r3, #15
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	4610      	mov	r0, r2
 8007b6e:	f005 f9b5 	bl	800cedc <USB_FlushTxFifo>
 8007b72:	e004      	b.n	8007b7e <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f005 f9e3 	bl	800cf44 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3708      	adds	r7, #8
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b08a      	sub	sp, #40	; 0x28
 8007b94:	af02      	add	r7, sp, #8
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007ba4:	683a      	ldr	r2, [r7, #0]
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	00db      	lsls	r3, r3, #3
 8007baa:	4413      	add	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	3338      	adds	r3, #56	; 0x38
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	3304      	adds	r3, #4
 8007bb6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6a1a      	ldr	r2, [r3, #32]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d901      	bls.n	8007bc8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e06c      	b.n	8007ca2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	699a      	ldr	r2, [r3, #24]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6a1b      	ldr	r3, [r3, #32]
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	69fa      	ldr	r2, [r7, #28]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d902      	bls.n	8007be4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	3303      	adds	r3, #3
 8007be8:	089b      	lsrs	r3, r3, #2
 8007bea:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007bec:	e02b      	b.n	8007c46 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	699a      	ldr	r2, [r3, #24]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	69fa      	ldr	r2, [r7, #28]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d902      	bls.n	8007c0a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	3303      	adds	r3, #3
 8007c0e:	089b      	lsrs	r3, r3, #2
 8007c10:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6919      	ldr	r1, [r3, #16]
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	b2da      	uxtb	r2, r3
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	9300      	str	r3, [sp, #0]
 8007c26:	4603      	mov	r3, r0
 8007c28:	6978      	ldr	r0, [r7, #20]
 8007c2a:	f005 ffa7 	bl	800db7c <USB_WritePacket>

    ep->xfer_buff  += len;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	691a      	ldr	r2, [r3, #16]
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	441a      	add	r2, r3
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6a1a      	ldr	r2, [r3, #32]
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	441a      	add	r2, r3
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	015a      	lsls	r2, r3, #5
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007c56:	69ba      	ldr	r2, [r7, #24]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d809      	bhi.n	8007c70 <PCD_WriteEmptyTxFifo+0xe0>
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6a1a      	ldr	r2, [r3, #32]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d203      	bcs.n	8007c70 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	699b      	ldr	r3, [r3, #24]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d1be      	bne.n	8007bee <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	699a      	ldr	r2, [r3, #24]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6a1b      	ldr	r3, [r3, #32]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d811      	bhi.n	8007ca0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	f003 030f 	and.w	r3, r3, #15
 8007c82:	2201      	movs	r2, #1
 8007c84:	fa02 f303 	lsl.w	r3, r2, r3
 8007c88:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	43db      	mvns	r3, r3
 8007c96:	6939      	ldr	r1, [r7, #16]
 8007c98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3720      	adds	r7, #32
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
	...

08007cac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b088      	sub	sp, #32
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	333c      	adds	r3, #60	; 0x3c
 8007cc4:	3304      	adds	r3, #4
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	015a      	lsls	r2, r3, #5
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d17b      	bne.n	8007dda <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	f003 0308 	and.w	r3, r3, #8
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d015      	beq.n	8007d18 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	4a61      	ldr	r2, [pc, #388]	; (8007e74 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	f240 80b9 	bls.w	8007e68 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	f000 80b3 	beq.w	8007e68 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	015a      	lsls	r2, r3, #5
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	4413      	add	r3, r2
 8007d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d0e:	461a      	mov	r2, r3
 8007d10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d14:	6093      	str	r3, [r2, #8]
 8007d16:	e0a7      	b.n	8007e68 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	f003 0320 	and.w	r3, r3, #32
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d009      	beq.n	8007d36 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	015a      	lsls	r2, r3, #5
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	4413      	add	r3, r2
 8007d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d2e:	461a      	mov	r2, r3
 8007d30:	2320      	movs	r3, #32
 8007d32:	6093      	str	r3, [r2, #8]
 8007d34:	e098      	b.n	8007e68 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f040 8093 	bne.w	8007e68 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	4a4b      	ldr	r2, [pc, #300]	; (8007e74 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d90f      	bls.n	8007d6a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00a      	beq.n	8007d6a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	015a      	lsls	r2, r3, #5
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d60:	461a      	mov	r2, r3
 8007d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d66:	6093      	str	r3, [r2, #8]
 8007d68:	e07e      	b.n	8007e68 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007d6a:	683a      	ldr	r2, [r7, #0]
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	00db      	lsls	r3, r3, #3
 8007d70:	4413      	add	r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	3304      	adds	r3, #4
 8007d7e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	69da      	ldr	r2, [r3, #28]
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	0159      	lsls	r1, r3, #5
 8007d88:	69bb      	ldr	r3, [r7, #24]
 8007d8a:	440b      	add	r3, r1
 8007d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d96:	1ad2      	subs	r2, r2, r3
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d114      	bne.n	8007dcc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	699b      	ldr	r3, [r3, #24]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d109      	bne.n	8007dbe <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6818      	ldr	r0, [r3, #0]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007db4:	461a      	mov	r2, r3
 8007db6:	2101      	movs	r1, #1
 8007db8:	f006 f976 	bl	800e0a8 <USB_EP0_OutStart>
 8007dbc:	e006      	b.n	8007dcc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	691a      	ldr	r2, [r3, #16]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6a1b      	ldr	r3, [r3, #32]
 8007dc6:	441a      	add	r2, r3
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f00f fa5c 	bl	8017290 <HAL_PCD_DataOutStageCallback>
 8007dd8:	e046      	b.n	8007e68 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	4a26      	ldr	r2, [pc, #152]	; (8007e78 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d124      	bne.n	8007e2c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00a      	beq.n	8007e02 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	015a      	lsls	r2, r3, #5
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	4413      	add	r3, r2
 8007df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007df8:	461a      	mov	r2, r3
 8007dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dfe:	6093      	str	r3, [r2, #8]
 8007e00:	e032      	b.n	8007e68 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	f003 0320 	and.w	r3, r3, #32
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d008      	beq.n	8007e1e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	015a      	lsls	r2, r3, #5
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	4413      	add	r3, r2
 8007e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e18:	461a      	mov	r2, r3
 8007e1a:	2320      	movs	r3, #32
 8007e1c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	4619      	mov	r1, r3
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f00f fa33 	bl	8017290 <HAL_PCD_DataOutStageCallback>
 8007e2a:	e01d      	b.n	8007e68 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d114      	bne.n	8007e5c <PCD_EP_OutXfrComplete_int+0x1b0>
 8007e32:	6879      	ldr	r1, [r7, #4]
 8007e34:	683a      	ldr	r2, [r7, #0]
 8007e36:	4613      	mov	r3, r2
 8007e38:	00db      	lsls	r3, r3, #3
 8007e3a:	4413      	add	r3, r2
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	440b      	add	r3, r1
 8007e40:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d108      	bne.n	8007e5c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6818      	ldr	r0, [r3, #0]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007e54:	461a      	mov	r2, r3
 8007e56:	2100      	movs	r1, #0
 8007e58:	f006 f926 	bl	800e0a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	4619      	mov	r1, r3
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f00f fa14 	bl	8017290 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3720      	adds	r7, #32
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	4f54300a 	.word	0x4f54300a
 8007e78:	4f54310a 	.word	0x4f54310a

08007e7c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b086      	sub	sp, #24
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	333c      	adds	r3, #60	; 0x3c
 8007e94:	3304      	adds	r3, #4
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	015a      	lsls	r2, r3, #5
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	4a15      	ldr	r2, [pc, #84]	; (8007f04 <PCD_EP_OutSetupPacket_int+0x88>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d90e      	bls.n	8007ed0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d009      	beq.n	8007ed0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	015a      	lsls	r2, r3, #5
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ec8:	461a      	mov	r2, r3
 8007eca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ece:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f00f f9cb 	bl	801726c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	4a0a      	ldr	r2, [pc, #40]	; (8007f04 <PCD_EP_OutSetupPacket_int+0x88>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d90c      	bls.n	8007ef8 <PCD_EP_OutSetupPacket_int+0x7c>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d108      	bne.n	8007ef8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6818      	ldr	r0, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	2101      	movs	r1, #1
 8007ef4:	f006 f8d8 	bl	800e0a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3718      	adds	r7, #24
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	4f54300a 	.word	0x4f54300a

08007f08 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	460b      	mov	r3, r1
 8007f12:	70fb      	strb	r3, [r7, #3]
 8007f14:	4613      	mov	r3, r2
 8007f16:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007f20:	78fb      	ldrb	r3, [r7, #3]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d107      	bne.n	8007f36 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007f26:	883b      	ldrh	r3, [r7, #0]
 8007f28:	0419      	lsls	r1, r3, #16
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68ba      	ldr	r2, [r7, #8]
 8007f30:	430a      	orrs	r2, r1
 8007f32:	629a      	str	r2, [r3, #40]	; 0x28
 8007f34:	e028      	b.n	8007f88 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f3c:	0c1b      	lsrs	r3, r3, #16
 8007f3e:	68ba      	ldr	r2, [r7, #8]
 8007f40:	4413      	add	r3, r2
 8007f42:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007f44:	2300      	movs	r3, #0
 8007f46:	73fb      	strb	r3, [r7, #15]
 8007f48:	e00d      	b.n	8007f66 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	7bfb      	ldrb	r3, [r7, #15]
 8007f50:	3340      	adds	r3, #64	; 0x40
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	4413      	add	r3, r2
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	0c1b      	lsrs	r3, r3, #16
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007f60:	7bfb      	ldrb	r3, [r7, #15]
 8007f62:	3301      	adds	r3, #1
 8007f64:	73fb      	strb	r3, [r7, #15]
 8007f66:	7bfa      	ldrb	r2, [r7, #15]
 8007f68:	78fb      	ldrb	r3, [r7, #3]
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d3ec      	bcc.n	8007f4a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007f70:	883b      	ldrh	r3, [r7, #0]
 8007f72:	0418      	lsls	r0, r3, #16
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6819      	ldr	r1, [r3, #0]
 8007f78:	78fb      	ldrb	r3, [r7, #3]
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	68ba      	ldr	r2, [r7, #8]
 8007f7e:	4302      	orrs	r2, r0
 8007f80:	3340      	adds	r3, #64	; 0x40
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	440b      	add	r3, r1
 8007f86:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3714      	adds	r7, #20
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007f96:	b480      	push	{r7}
 8007f98:	b083      	sub	sp, #12
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	887a      	ldrh	r2, [r7, #2]
 8007fa8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	699b      	ldr	r3, [r3, #24]
 8007fda:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fea:	f043 0303 	orr.w	r3, r3, #3
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3714      	adds	r7, #20
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d101      	bne.n	8008014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	e0cc      	b.n	80081ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008014:	4b68      	ldr	r3, [pc, #416]	; (80081b8 <HAL_RCC_ClockConfig+0x1b8>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f003 030f 	and.w	r3, r3, #15
 800801c:	683a      	ldr	r2, [r7, #0]
 800801e:	429a      	cmp	r2, r3
 8008020:	d90c      	bls.n	800803c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008022:	4b65      	ldr	r3, [pc, #404]	; (80081b8 <HAL_RCC_ClockConfig+0x1b8>)
 8008024:	683a      	ldr	r2, [r7, #0]
 8008026:	b2d2      	uxtb	r2, r2
 8008028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800802a:	4b63      	ldr	r3, [pc, #396]	; (80081b8 <HAL_RCC_ClockConfig+0x1b8>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f003 030f 	and.w	r3, r3, #15
 8008032:	683a      	ldr	r2, [r7, #0]
 8008034:	429a      	cmp	r2, r3
 8008036:	d001      	beq.n	800803c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	e0b8      	b.n	80081ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f003 0302 	and.w	r3, r3, #2
 8008044:	2b00      	cmp	r3, #0
 8008046:	d020      	beq.n	800808a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 0304 	and.w	r3, r3, #4
 8008050:	2b00      	cmp	r3, #0
 8008052:	d005      	beq.n	8008060 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008054:	4b59      	ldr	r3, [pc, #356]	; (80081bc <HAL_RCC_ClockConfig+0x1bc>)
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	4a58      	ldr	r2, [pc, #352]	; (80081bc <HAL_RCC_ClockConfig+0x1bc>)
 800805a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800805e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 0308 	and.w	r3, r3, #8
 8008068:	2b00      	cmp	r3, #0
 800806a:	d005      	beq.n	8008078 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800806c:	4b53      	ldr	r3, [pc, #332]	; (80081bc <HAL_RCC_ClockConfig+0x1bc>)
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	4a52      	ldr	r2, [pc, #328]	; (80081bc <HAL_RCC_ClockConfig+0x1bc>)
 8008072:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008076:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008078:	4b50      	ldr	r3, [pc, #320]	; (80081bc <HAL_RCC_ClockConfig+0x1bc>)
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	494d      	ldr	r1, [pc, #308]	; (80081bc <HAL_RCC_ClockConfig+0x1bc>)
 8008086:	4313      	orrs	r3, r2
 8008088:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 0301 	and.w	r3, r3, #1
 8008092:	2b00      	cmp	r3, #0
 8008094:	d044      	beq.n	8008120 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	2b01      	cmp	r3, #1
 800809c:	d107      	bne.n	80080ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800809e:	4b47      	ldr	r3, [pc, #284]	; (80081bc <HAL_RCC_ClockConfig+0x1bc>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d119      	bne.n	80080de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	e07f      	b.n	80081ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	2b02      	cmp	r3, #2
 80080b4:	d003      	beq.n	80080be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80080ba:	2b03      	cmp	r3, #3
 80080bc:	d107      	bne.n	80080ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080be:	4b3f      	ldr	r3, [pc, #252]	; (80081bc <HAL_RCC_ClockConfig+0x1bc>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d109      	bne.n	80080de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	e06f      	b.n	80081ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080ce:	4b3b      	ldr	r3, [pc, #236]	; (80081bc <HAL_RCC_ClockConfig+0x1bc>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f003 0302 	and.w	r3, r3, #2
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d101      	bne.n	80080de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e067      	b.n	80081ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80080de:	4b37      	ldr	r3, [pc, #220]	; (80081bc <HAL_RCC_ClockConfig+0x1bc>)
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	f023 0203 	bic.w	r2, r3, #3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	4934      	ldr	r1, [pc, #208]	; (80081bc <HAL_RCC_ClockConfig+0x1bc>)
 80080ec:	4313      	orrs	r3, r2
 80080ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80080f0:	f7fc f9d8 	bl	80044a4 <HAL_GetTick>
 80080f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080f6:	e00a      	b.n	800810e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080f8:	f7fc f9d4 	bl	80044a4 <HAL_GetTick>
 80080fc:	4602      	mov	r2, r0
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	f241 3288 	movw	r2, #5000	; 0x1388
 8008106:	4293      	cmp	r3, r2
 8008108:	d901      	bls.n	800810e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	e04f      	b.n	80081ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800810e:	4b2b      	ldr	r3, [pc, #172]	; (80081bc <HAL_RCC_ClockConfig+0x1bc>)
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	f003 020c 	and.w	r2, r3, #12
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	429a      	cmp	r2, r3
 800811e:	d1eb      	bne.n	80080f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008120:	4b25      	ldr	r3, [pc, #148]	; (80081b8 <HAL_RCC_ClockConfig+0x1b8>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 030f 	and.w	r3, r3, #15
 8008128:	683a      	ldr	r2, [r7, #0]
 800812a:	429a      	cmp	r2, r3
 800812c:	d20c      	bcs.n	8008148 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800812e:	4b22      	ldr	r3, [pc, #136]	; (80081b8 <HAL_RCC_ClockConfig+0x1b8>)
 8008130:	683a      	ldr	r2, [r7, #0]
 8008132:	b2d2      	uxtb	r2, r2
 8008134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008136:	4b20      	ldr	r3, [pc, #128]	; (80081b8 <HAL_RCC_ClockConfig+0x1b8>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f003 030f 	and.w	r3, r3, #15
 800813e:	683a      	ldr	r2, [r7, #0]
 8008140:	429a      	cmp	r2, r3
 8008142:	d001      	beq.n	8008148 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	e032      	b.n	80081ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f003 0304 	and.w	r3, r3, #4
 8008150:	2b00      	cmp	r3, #0
 8008152:	d008      	beq.n	8008166 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008154:	4b19      	ldr	r3, [pc, #100]	; (80081bc <HAL_RCC_ClockConfig+0x1bc>)
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	4916      	ldr	r1, [pc, #88]	; (80081bc <HAL_RCC_ClockConfig+0x1bc>)
 8008162:	4313      	orrs	r3, r2
 8008164:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 0308 	and.w	r3, r3, #8
 800816e:	2b00      	cmp	r3, #0
 8008170:	d009      	beq.n	8008186 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008172:	4b12      	ldr	r3, [pc, #72]	; (80081bc <HAL_RCC_ClockConfig+0x1bc>)
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	00db      	lsls	r3, r3, #3
 8008180:	490e      	ldr	r1, [pc, #56]	; (80081bc <HAL_RCC_ClockConfig+0x1bc>)
 8008182:	4313      	orrs	r3, r2
 8008184:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008186:	f000 fb9d 	bl	80088c4 <HAL_RCC_GetSysClockFreq>
 800818a:	4602      	mov	r2, r0
 800818c:	4b0b      	ldr	r3, [pc, #44]	; (80081bc <HAL_RCC_ClockConfig+0x1bc>)
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	091b      	lsrs	r3, r3, #4
 8008192:	f003 030f 	and.w	r3, r3, #15
 8008196:	490a      	ldr	r1, [pc, #40]	; (80081c0 <HAL_RCC_ClockConfig+0x1c0>)
 8008198:	5ccb      	ldrb	r3, [r1, r3]
 800819a:	fa22 f303 	lsr.w	r3, r2, r3
 800819e:	4a09      	ldr	r2, [pc, #36]	; (80081c4 <HAL_RCC_ClockConfig+0x1c4>)
 80081a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80081a2:	4b09      	ldr	r3, [pc, #36]	; (80081c8 <HAL_RCC_ClockConfig+0x1c8>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7fb f9ba 	bl	8003520 <HAL_InitTick>

  return HAL_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	40023c00 	.word	0x40023c00
 80081bc:	40023800 	.word	0x40023800
 80081c0:	0801ab3c 	.word	0x0801ab3c
 80081c4:	20000014 	.word	0x20000014
 80081c8:	20000028 	.word	0x20000028

080081cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80081cc:	b480      	push	{r7}
 80081ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80081d0:	4b03      	ldr	r3, [pc, #12]	; (80081e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80081d2:	681b      	ldr	r3, [r3, #0]
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	20000014 	.word	0x20000014

080081e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80081e8:	f7ff fff0 	bl	80081cc <HAL_RCC_GetHCLKFreq>
 80081ec:	4602      	mov	r2, r0
 80081ee:	4b05      	ldr	r3, [pc, #20]	; (8008204 <HAL_RCC_GetPCLK1Freq+0x20>)
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	0a9b      	lsrs	r3, r3, #10
 80081f4:	f003 0307 	and.w	r3, r3, #7
 80081f8:	4903      	ldr	r1, [pc, #12]	; (8008208 <HAL_RCC_GetPCLK1Freq+0x24>)
 80081fa:	5ccb      	ldrb	r3, [r1, r3]
 80081fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008200:	4618      	mov	r0, r3
 8008202:	bd80      	pop	{r7, pc}
 8008204:	40023800 	.word	0x40023800
 8008208:	0801ab4c 	.word	0x0801ab4c

0800820c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	220f      	movs	r2, #15
 800821a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800821c:	4b12      	ldr	r3, [pc, #72]	; (8008268 <HAL_RCC_GetClockConfig+0x5c>)
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	f003 0203 	and.w	r2, r3, #3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008228:	4b0f      	ldr	r3, [pc, #60]	; (8008268 <HAL_RCC_GetClockConfig+0x5c>)
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008234:	4b0c      	ldr	r3, [pc, #48]	; (8008268 <HAL_RCC_GetClockConfig+0x5c>)
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008240:	4b09      	ldr	r3, [pc, #36]	; (8008268 <HAL_RCC_GetClockConfig+0x5c>)
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	08db      	lsrs	r3, r3, #3
 8008246:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800824e:	4b07      	ldr	r3, [pc, #28]	; (800826c <HAL_RCC_GetClockConfig+0x60>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 020f 	and.w	r2, r3, #15
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	601a      	str	r2, [r3, #0]
}
 800825a:	bf00      	nop
 800825c:	370c      	adds	r7, #12
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop
 8008268:	40023800 	.word	0x40023800
 800826c:	40023c00 	.word	0x40023c00

08008270 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b08c      	sub	sp, #48	; 0x30
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008278:	2300      	movs	r3, #0
 800827a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800827c:	2300      	movs	r3, #0
 800827e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8008280:	2300      	movs	r3, #0
 8008282:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8008284:	2300      	movs	r3, #0
 8008286:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8008288:	2300      	movs	r3, #0
 800828a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800828c:	2300      	movs	r3, #0
 800828e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8008290:	2300      	movs	r3, #0
 8008292:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8008294:	2300      	movs	r3, #0
 8008296:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8008298:	2300      	movs	r3, #0
 800829a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f003 0301 	and.w	r3, r3, #1
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d010      	beq.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80082a8:	4b6f      	ldr	r3, [pc, #444]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80082aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082ae:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b6:	496c      	ldr	r1, [pc, #432]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80082b8:	4313      	orrs	r3, r2
 80082ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d101      	bne.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80082c6:	2301      	movs	r3, #1
 80082c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 0302 	and.w	r3, r3, #2
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d010      	beq.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80082d6:	4b64      	ldr	r3, [pc, #400]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80082d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082dc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082e4:	4960      	ldr	r1, [pc, #384]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80082e6:	4313      	orrs	r3, r2
 80082e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d101      	bne.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80082f4:	2301      	movs	r3, #1
 80082f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f003 0304 	and.w	r3, r3, #4
 8008300:	2b00      	cmp	r3, #0
 8008302:	d017      	beq.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008304:	4b58      	ldr	r3, [pc, #352]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008306:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800830a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008312:	4955      	ldr	r1, [pc, #340]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008314:	4313      	orrs	r3, r2
 8008316:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800831e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008322:	d101      	bne.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8008324:	2301      	movs	r3, #1
 8008326:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800832c:	2b00      	cmp	r3, #0
 800832e:	d101      	bne.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8008330:	2301      	movs	r3, #1
 8008332:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f003 0308 	and.w	r3, r3, #8
 800833c:	2b00      	cmp	r3, #0
 800833e:	d017      	beq.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008340:	4b49      	ldr	r3, [pc, #292]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008342:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008346:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800834e:	4946      	ldr	r1, [pc, #280]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008350:	4313      	orrs	r3, r2
 8008352:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800835a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800835e:	d101      	bne.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8008360:	2301      	movs	r3, #1
 8008362:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008368:	2b00      	cmp	r3, #0
 800836a:	d101      	bne.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800836c:	2301      	movs	r3, #1
 800836e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f003 0320 	and.w	r3, r3, #32
 8008378:	2b00      	cmp	r3, #0
 800837a:	f000 808a 	beq.w	8008492 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800837e:	2300      	movs	r3, #0
 8008380:	60bb      	str	r3, [r7, #8]
 8008382:	4b39      	ldr	r3, [pc, #228]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008386:	4a38      	ldr	r2, [pc, #224]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800838c:	6413      	str	r3, [r2, #64]	; 0x40
 800838e:	4b36      	ldr	r3, [pc, #216]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008396:	60bb      	str	r3, [r7, #8]
 8008398:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800839a:	4b34      	ldr	r3, [pc, #208]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a33      	ldr	r2, [pc, #204]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80083a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083a4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80083a6:	f7fc f87d 	bl	80044a4 <HAL_GetTick>
 80083aa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80083ac:	e008      	b.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80083ae:	f7fc f879 	bl	80044a4 <HAL_GetTick>
 80083b2:	4602      	mov	r2, r0
 80083b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b6:	1ad3      	subs	r3, r2, r3
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d901      	bls.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80083bc:	2303      	movs	r3, #3
 80083be:	e278      	b.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80083c0:	4b2a      	ldr	r3, [pc, #168]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d0f0      	beq.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80083cc:	4b26      	ldr	r3, [pc, #152]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80083ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083d4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80083d6:	6a3b      	ldr	r3, [r7, #32]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d02f      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083e4:	6a3a      	ldr	r2, [r7, #32]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d028      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80083ea:	4b1f      	ldr	r3, [pc, #124]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80083ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083f2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80083f4:	4b1e      	ldr	r3, [pc, #120]	; (8008470 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80083f6:	2201      	movs	r2, #1
 80083f8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80083fa:	4b1d      	ldr	r3, [pc, #116]	; (8008470 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80083fc:	2200      	movs	r2, #0
 80083fe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008400:	4a19      	ldr	r2, [pc, #100]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008402:	6a3b      	ldr	r3, [r7, #32]
 8008404:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008406:	4b18      	ldr	r3, [pc, #96]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800840a:	f003 0301 	and.w	r3, r3, #1
 800840e:	2b01      	cmp	r3, #1
 8008410:	d114      	bne.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008412:	f7fc f847 	bl	80044a4 <HAL_GetTick>
 8008416:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008418:	e00a      	b.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800841a:	f7fc f843 	bl	80044a4 <HAL_GetTick>
 800841e:	4602      	mov	r2, r0
 8008420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008422:	1ad3      	subs	r3, r2, r3
 8008424:	f241 3288 	movw	r2, #5000	; 0x1388
 8008428:	4293      	cmp	r3, r2
 800842a:	d901      	bls.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800842c:	2303      	movs	r3, #3
 800842e:	e240      	b.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008430:	4b0d      	ldr	r3, [pc, #52]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008434:	f003 0302 	and.w	r3, r3, #2
 8008438:	2b00      	cmp	r3, #0
 800843a:	d0ee      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008440:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008444:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008448:	d114      	bne.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800844a:	4b07      	ldr	r3, [pc, #28]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008456:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800845a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800845e:	4902      	ldr	r1, [pc, #8]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008460:	4313      	orrs	r3, r2
 8008462:	608b      	str	r3, [r1, #8]
 8008464:	e00c      	b.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8008466:	bf00      	nop
 8008468:	40023800 	.word	0x40023800
 800846c:	40007000 	.word	0x40007000
 8008470:	42470e40 	.word	0x42470e40
 8008474:	4b4a      	ldr	r3, [pc, #296]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	4a49      	ldr	r2, [pc, #292]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800847a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800847e:	6093      	str	r3, [r2, #8]
 8008480:	4b47      	ldr	r3, [pc, #284]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008482:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800848c:	4944      	ldr	r1, [pc, #272]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800848e:	4313      	orrs	r3, r2
 8008490:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 0310 	and.w	r3, r3, #16
 800849a:	2b00      	cmp	r3, #0
 800849c:	d004      	beq.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80084a4:	4b3f      	ldr	r3, [pc, #252]	; (80085a4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80084a6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00a      	beq.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80084b4:	4b3a      	ldr	r3, [pc, #232]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80084b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084c2:	4937      	ldr	r1, [pc, #220]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80084c4:	4313      	orrs	r3, r2
 80084c6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00a      	beq.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80084d6:	4b32      	ldr	r3, [pc, #200]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80084d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084dc:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084e4:	492e      	ldr	r1, [pc, #184]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80084e6:	4313      	orrs	r3, r2
 80084e8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d011      	beq.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80084f8:	4b29      	ldr	r3, [pc, #164]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80084fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084fe:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008506:	4926      	ldr	r1, [pc, #152]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008508:	4313      	orrs	r3, r2
 800850a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008512:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008516:	d101      	bne.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8008518:	2301      	movs	r3, #1
 800851a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00a      	beq.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8008528:	4b1d      	ldr	r3, [pc, #116]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800852a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800852e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008536:	491a      	ldr	r1, [pc, #104]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008538:	4313      	orrs	r3, r2
 800853a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008546:	2b00      	cmp	r3, #0
 8008548:	d011      	beq.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800854a:	4b15      	ldr	r3, [pc, #84]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800854c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008550:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008558:	4911      	ldr	r1, [pc, #68]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800855a:	4313      	orrs	r3, r2
 800855c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008564:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008568:	d101      	bne.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800856a:	2301      	movs	r3, #1
 800856c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800856e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008570:	2b01      	cmp	r3, #1
 8008572:	d005      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800857c:	f040 80ff 	bne.w	800877e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008580:	4b09      	ldr	r3, [pc, #36]	; (80085a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008582:	2200      	movs	r2, #0
 8008584:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008586:	f7fb ff8d 	bl	80044a4 <HAL_GetTick>
 800858a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800858c:	e00e      	b.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800858e:	f7fb ff89 	bl	80044a4 <HAL_GetTick>
 8008592:	4602      	mov	r2, r0
 8008594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008596:	1ad3      	subs	r3, r2, r3
 8008598:	2b02      	cmp	r3, #2
 800859a:	d907      	bls.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800859c:	2303      	movs	r3, #3
 800859e:	e188      	b.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80085a0:	40023800 	.word	0x40023800
 80085a4:	424711e0 	.word	0x424711e0
 80085a8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80085ac:	4b7e      	ldr	r3, [pc, #504]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d1ea      	bne.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f003 0301 	and.w	r3, r3, #1
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d003      	beq.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d009      	beq.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d028      	beq.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d124      	bne.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80085e0:	4b71      	ldr	r3, [pc, #452]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80085e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085e6:	0c1b      	lsrs	r3, r3, #16
 80085e8:	f003 0303 	and.w	r3, r3, #3
 80085ec:	3301      	adds	r3, #1
 80085ee:	005b      	lsls	r3, r3, #1
 80085f0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80085f2:	4b6d      	ldr	r3, [pc, #436]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80085f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085f8:	0e1b      	lsrs	r3, r3, #24
 80085fa:	f003 030f 	and.w	r3, r3, #15
 80085fe:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	685a      	ldr	r2, [r3, #4]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	019b      	lsls	r3, r3, #6
 800860a:	431a      	orrs	r2, r3
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	085b      	lsrs	r3, r3, #1
 8008610:	3b01      	subs	r3, #1
 8008612:	041b      	lsls	r3, r3, #16
 8008614:	431a      	orrs	r2, r3
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	061b      	lsls	r3, r3, #24
 800861a:	431a      	orrs	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	695b      	ldr	r3, [r3, #20]
 8008620:	071b      	lsls	r3, r3, #28
 8008622:	4961      	ldr	r1, [pc, #388]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008624:	4313      	orrs	r3, r2
 8008626:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f003 0304 	and.w	r3, r3, #4
 8008632:	2b00      	cmp	r3, #0
 8008634:	d004      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800863e:	d00a      	beq.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008648:	2b00      	cmp	r3, #0
 800864a:	d035      	beq.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008650:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008654:	d130      	bne.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8008656:	4b54      	ldr	r3, [pc, #336]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800865c:	0c1b      	lsrs	r3, r3, #16
 800865e:	f003 0303 	and.w	r3, r3, #3
 8008662:	3301      	adds	r3, #1
 8008664:	005b      	lsls	r3, r3, #1
 8008666:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008668:	4b4f      	ldr	r3, [pc, #316]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800866a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800866e:	0f1b      	lsrs	r3, r3, #28
 8008670:	f003 0307 	and.w	r3, r3, #7
 8008674:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	685a      	ldr	r2, [r3, #4]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	019b      	lsls	r3, r3, #6
 8008680:	431a      	orrs	r2, r3
 8008682:	69fb      	ldr	r3, [r7, #28]
 8008684:	085b      	lsrs	r3, r3, #1
 8008686:	3b01      	subs	r3, #1
 8008688:	041b      	lsls	r3, r3, #16
 800868a:	431a      	orrs	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	691b      	ldr	r3, [r3, #16]
 8008690:	061b      	lsls	r3, r3, #24
 8008692:	431a      	orrs	r2, r3
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	071b      	lsls	r3, r3, #28
 8008698:	4943      	ldr	r1, [pc, #268]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800869a:	4313      	orrs	r3, r2
 800869c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80086a0:	4b41      	ldr	r3, [pc, #260]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80086a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086a6:	f023 021f 	bic.w	r2, r3, #31
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ae:	3b01      	subs	r3, #1
 80086b0:	493d      	ldr	r1, [pc, #244]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80086b2:	4313      	orrs	r3, r2
 80086b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d029      	beq.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086cc:	d124      	bne.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80086ce:	4b36      	ldr	r3, [pc, #216]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80086d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086d4:	0c1b      	lsrs	r3, r3, #16
 80086d6:	f003 0303 	and.w	r3, r3, #3
 80086da:	3301      	adds	r3, #1
 80086dc:	005b      	lsls	r3, r3, #1
 80086de:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80086e0:	4b31      	ldr	r3, [pc, #196]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80086e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086e6:	0f1b      	lsrs	r3, r3, #28
 80086e8:	f003 0307 	and.w	r3, r3, #7
 80086ec:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	685a      	ldr	r2, [r3, #4]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	019b      	lsls	r3, r3, #6
 80086f8:	431a      	orrs	r2, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	085b      	lsrs	r3, r3, #1
 8008700:	3b01      	subs	r3, #1
 8008702:	041b      	lsls	r3, r3, #16
 8008704:	431a      	orrs	r2, r3
 8008706:	69bb      	ldr	r3, [r7, #24]
 8008708:	061b      	lsls	r3, r3, #24
 800870a:	431a      	orrs	r2, r3
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	071b      	lsls	r3, r3, #28
 8008710:	4925      	ldr	r1, [pc, #148]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008712:	4313      	orrs	r3, r2
 8008714:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008720:	2b00      	cmp	r3, #0
 8008722:	d016      	beq.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	685a      	ldr	r2, [r3, #4]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	019b      	lsls	r3, r3, #6
 800872e:	431a      	orrs	r2, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	085b      	lsrs	r3, r3, #1
 8008736:	3b01      	subs	r3, #1
 8008738:	041b      	lsls	r3, r3, #16
 800873a:	431a      	orrs	r2, r3
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	691b      	ldr	r3, [r3, #16]
 8008740:	061b      	lsls	r3, r3, #24
 8008742:	431a      	orrs	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	695b      	ldr	r3, [r3, #20]
 8008748:	071b      	lsls	r3, r3, #28
 800874a:	4917      	ldr	r1, [pc, #92]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800874c:	4313      	orrs	r3, r2
 800874e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008752:	4b16      	ldr	r3, [pc, #88]	; (80087ac <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8008754:	2201      	movs	r2, #1
 8008756:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008758:	f7fb fea4 	bl	80044a4 <HAL_GetTick>
 800875c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800875e:	e008      	b.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008760:	f7fb fea0 	bl	80044a4 <HAL_GetTick>
 8008764:	4602      	mov	r2, r0
 8008766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008768:	1ad3      	subs	r3, r2, r3
 800876a:	2b02      	cmp	r3, #2
 800876c:	d901      	bls.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800876e:	2303      	movs	r3, #3
 8008770:	e09f      	b.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008772:	4b0d      	ldr	r3, [pc, #52]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800877a:	2b00      	cmp	r3, #0
 800877c:	d0f0      	beq.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800877e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008780:	2b01      	cmp	r3, #1
 8008782:	f040 8095 	bne.w	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008786:	4b0a      	ldr	r3, [pc, #40]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008788:	2200      	movs	r2, #0
 800878a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800878c:	f7fb fe8a 	bl	80044a4 <HAL_GetTick>
 8008790:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008792:	e00f      	b.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008794:	f7fb fe86 	bl	80044a4 <HAL_GetTick>
 8008798:	4602      	mov	r2, r0
 800879a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879c:	1ad3      	subs	r3, r2, r3
 800879e:	2b02      	cmp	r3, #2
 80087a0:	d908      	bls.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80087a2:	2303      	movs	r3, #3
 80087a4:	e085      	b.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80087a6:	bf00      	nop
 80087a8:	40023800 	.word	0x40023800
 80087ac:	42470068 	.word	0x42470068
 80087b0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80087b4:	4b41      	ldr	r3, [pc, #260]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087c0:	d0e8      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 0304 	and.w	r3, r3, #4
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d003      	beq.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d009      	beq.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d02b      	beq.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d127      	bne.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80087ea:	4b34      	ldr	r3, [pc, #208]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80087ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087f0:	0c1b      	lsrs	r3, r3, #16
 80087f2:	f003 0303 	and.w	r3, r3, #3
 80087f6:	3301      	adds	r3, #1
 80087f8:	005b      	lsls	r3, r3, #1
 80087fa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	699a      	ldr	r2, [r3, #24]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	69db      	ldr	r3, [r3, #28]
 8008804:	019b      	lsls	r3, r3, #6
 8008806:	431a      	orrs	r2, r3
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	085b      	lsrs	r3, r3, #1
 800880c:	3b01      	subs	r3, #1
 800880e:	041b      	lsls	r3, r3, #16
 8008810:	431a      	orrs	r2, r3
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008816:	061b      	lsls	r3, r3, #24
 8008818:	4928      	ldr	r1, [pc, #160]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800881a:	4313      	orrs	r3, r2
 800881c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008820:	4b26      	ldr	r3, [pc, #152]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008822:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008826:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882e:	3b01      	subs	r3, #1
 8008830:	021b      	lsls	r3, r3, #8
 8008832:	4922      	ldr	r1, [pc, #136]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008834:	4313      	orrs	r3, r2
 8008836:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008842:	2b00      	cmp	r3, #0
 8008844:	d01d      	beq.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800884a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800884e:	d118      	bne.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008850:	4b1a      	ldr	r3, [pc, #104]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008856:	0e1b      	lsrs	r3, r3, #24
 8008858:	f003 030f 	and.w	r3, r3, #15
 800885c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	699a      	ldr	r2, [r3, #24]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	69db      	ldr	r3, [r3, #28]
 8008866:	019b      	lsls	r3, r3, #6
 8008868:	431a      	orrs	r2, r3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a1b      	ldr	r3, [r3, #32]
 800886e:	085b      	lsrs	r3, r3, #1
 8008870:	3b01      	subs	r3, #1
 8008872:	041b      	lsls	r3, r3, #16
 8008874:	431a      	orrs	r2, r3
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	061b      	lsls	r3, r3, #24
 800887a:	4910      	ldr	r1, [pc, #64]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800887c:	4313      	orrs	r3, r2
 800887e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008882:	4b0f      	ldr	r3, [pc, #60]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8008884:	2201      	movs	r2, #1
 8008886:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008888:	f7fb fe0c 	bl	80044a4 <HAL_GetTick>
 800888c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800888e:	e008      	b.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008890:	f7fb fe08 	bl	80044a4 <HAL_GetTick>
 8008894:	4602      	mov	r2, r0
 8008896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008898:	1ad3      	subs	r3, r2, r3
 800889a:	2b02      	cmp	r3, #2
 800889c:	d901      	bls.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800889e:	2303      	movs	r3, #3
 80088a0:	e007      	b.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80088a2:	4b06      	ldr	r3, [pc, #24]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088ae:	d1ef      	bne.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3730      	adds	r7, #48	; 0x30
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	40023800 	.word	0x40023800
 80088c0:	42470070 	.word	0x42470070

080088c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80088c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088c8:	b0ae      	sub	sp, #184	; 0xb8
 80088ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80088cc:	2300      	movs	r3, #0
 80088ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80088d2:	2300      	movs	r3, #0
 80088d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80088d8:	2300      	movs	r3, #0
 80088da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80088de:	2300      	movs	r3, #0
 80088e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80088e4:	2300      	movs	r3, #0
 80088e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80088ea:	4bcb      	ldr	r3, [pc, #812]	; (8008c18 <HAL_RCC_GetSysClockFreq+0x354>)
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	f003 030c 	and.w	r3, r3, #12
 80088f2:	2b0c      	cmp	r3, #12
 80088f4:	f200 8206 	bhi.w	8008d04 <HAL_RCC_GetSysClockFreq+0x440>
 80088f8:	a201      	add	r2, pc, #4	; (adr r2, 8008900 <HAL_RCC_GetSysClockFreq+0x3c>)
 80088fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088fe:	bf00      	nop
 8008900:	08008935 	.word	0x08008935
 8008904:	08008d05 	.word	0x08008d05
 8008908:	08008d05 	.word	0x08008d05
 800890c:	08008d05 	.word	0x08008d05
 8008910:	0800893d 	.word	0x0800893d
 8008914:	08008d05 	.word	0x08008d05
 8008918:	08008d05 	.word	0x08008d05
 800891c:	08008d05 	.word	0x08008d05
 8008920:	08008945 	.word	0x08008945
 8008924:	08008d05 	.word	0x08008d05
 8008928:	08008d05 	.word	0x08008d05
 800892c:	08008d05 	.word	0x08008d05
 8008930:	08008b35 	.word	0x08008b35
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008934:	4bb9      	ldr	r3, [pc, #740]	; (8008c1c <HAL_RCC_GetSysClockFreq+0x358>)
 8008936:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800893a:	e1e7      	b.n	8008d0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800893c:	4bb8      	ldr	r3, [pc, #736]	; (8008c20 <HAL_RCC_GetSysClockFreq+0x35c>)
 800893e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008942:	e1e3      	b.n	8008d0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008944:	4bb4      	ldr	r3, [pc, #720]	; (8008c18 <HAL_RCC_GetSysClockFreq+0x354>)
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800894c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008950:	4bb1      	ldr	r3, [pc, #708]	; (8008c18 <HAL_RCC_GetSysClockFreq+0x354>)
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008958:	2b00      	cmp	r3, #0
 800895a:	d071      	beq.n	8008a40 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800895c:	4bae      	ldr	r3, [pc, #696]	; (8008c18 <HAL_RCC_GetSysClockFreq+0x354>)
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	099b      	lsrs	r3, r3, #6
 8008962:	2200      	movs	r2, #0
 8008964:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008968:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800896c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008974:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008978:	2300      	movs	r3, #0
 800897a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800897e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008982:	4622      	mov	r2, r4
 8008984:	462b      	mov	r3, r5
 8008986:	f04f 0000 	mov.w	r0, #0
 800898a:	f04f 0100 	mov.w	r1, #0
 800898e:	0159      	lsls	r1, r3, #5
 8008990:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008994:	0150      	lsls	r0, r2, #5
 8008996:	4602      	mov	r2, r0
 8008998:	460b      	mov	r3, r1
 800899a:	4621      	mov	r1, r4
 800899c:	1a51      	subs	r1, r2, r1
 800899e:	6439      	str	r1, [r7, #64]	; 0x40
 80089a0:	4629      	mov	r1, r5
 80089a2:	eb63 0301 	sbc.w	r3, r3, r1
 80089a6:	647b      	str	r3, [r7, #68]	; 0x44
 80089a8:	f04f 0200 	mov.w	r2, #0
 80089ac:	f04f 0300 	mov.w	r3, #0
 80089b0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80089b4:	4649      	mov	r1, r9
 80089b6:	018b      	lsls	r3, r1, #6
 80089b8:	4641      	mov	r1, r8
 80089ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80089be:	4641      	mov	r1, r8
 80089c0:	018a      	lsls	r2, r1, #6
 80089c2:	4641      	mov	r1, r8
 80089c4:	1a51      	subs	r1, r2, r1
 80089c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80089c8:	4649      	mov	r1, r9
 80089ca:	eb63 0301 	sbc.w	r3, r3, r1
 80089ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089d0:	f04f 0200 	mov.w	r2, #0
 80089d4:	f04f 0300 	mov.w	r3, #0
 80089d8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80089dc:	4649      	mov	r1, r9
 80089de:	00cb      	lsls	r3, r1, #3
 80089e0:	4641      	mov	r1, r8
 80089e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80089e6:	4641      	mov	r1, r8
 80089e8:	00ca      	lsls	r2, r1, #3
 80089ea:	4610      	mov	r0, r2
 80089ec:	4619      	mov	r1, r3
 80089ee:	4603      	mov	r3, r0
 80089f0:	4622      	mov	r2, r4
 80089f2:	189b      	adds	r3, r3, r2
 80089f4:	633b      	str	r3, [r7, #48]	; 0x30
 80089f6:	462b      	mov	r3, r5
 80089f8:	460a      	mov	r2, r1
 80089fa:	eb42 0303 	adc.w	r3, r2, r3
 80089fe:	637b      	str	r3, [r7, #52]	; 0x34
 8008a00:	f04f 0200 	mov.w	r2, #0
 8008a04:	f04f 0300 	mov.w	r3, #0
 8008a08:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008a0c:	4629      	mov	r1, r5
 8008a0e:	024b      	lsls	r3, r1, #9
 8008a10:	4621      	mov	r1, r4
 8008a12:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008a16:	4621      	mov	r1, r4
 8008a18:	024a      	lsls	r2, r1, #9
 8008a1a:	4610      	mov	r0, r2
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008a22:	2200      	movs	r2, #0
 8008a24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008a28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008a2c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008a30:	f7f8 f93a 	bl	8000ca8 <__aeabi_uldivmod>
 8008a34:	4602      	mov	r2, r0
 8008a36:	460b      	mov	r3, r1
 8008a38:	4613      	mov	r3, r2
 8008a3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a3e:	e067      	b.n	8008b10 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a40:	4b75      	ldr	r3, [pc, #468]	; (8008c18 <HAL_RCC_GetSysClockFreq+0x354>)
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	099b      	lsrs	r3, r3, #6
 8008a46:	2200      	movs	r2, #0
 8008a48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a4c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8008a50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a58:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008a5e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8008a62:	4622      	mov	r2, r4
 8008a64:	462b      	mov	r3, r5
 8008a66:	f04f 0000 	mov.w	r0, #0
 8008a6a:	f04f 0100 	mov.w	r1, #0
 8008a6e:	0159      	lsls	r1, r3, #5
 8008a70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008a74:	0150      	lsls	r0, r2, #5
 8008a76:	4602      	mov	r2, r0
 8008a78:	460b      	mov	r3, r1
 8008a7a:	4621      	mov	r1, r4
 8008a7c:	1a51      	subs	r1, r2, r1
 8008a7e:	62b9      	str	r1, [r7, #40]	; 0x28
 8008a80:	4629      	mov	r1, r5
 8008a82:	eb63 0301 	sbc.w	r3, r3, r1
 8008a86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a88:	f04f 0200 	mov.w	r2, #0
 8008a8c:	f04f 0300 	mov.w	r3, #0
 8008a90:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8008a94:	4649      	mov	r1, r9
 8008a96:	018b      	lsls	r3, r1, #6
 8008a98:	4641      	mov	r1, r8
 8008a9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008a9e:	4641      	mov	r1, r8
 8008aa0:	018a      	lsls	r2, r1, #6
 8008aa2:	4641      	mov	r1, r8
 8008aa4:	ebb2 0a01 	subs.w	sl, r2, r1
 8008aa8:	4649      	mov	r1, r9
 8008aaa:	eb63 0b01 	sbc.w	fp, r3, r1
 8008aae:	f04f 0200 	mov.w	r2, #0
 8008ab2:	f04f 0300 	mov.w	r3, #0
 8008ab6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008aba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008abe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ac2:	4692      	mov	sl, r2
 8008ac4:	469b      	mov	fp, r3
 8008ac6:	4623      	mov	r3, r4
 8008ac8:	eb1a 0303 	adds.w	r3, sl, r3
 8008acc:	623b      	str	r3, [r7, #32]
 8008ace:	462b      	mov	r3, r5
 8008ad0:	eb4b 0303 	adc.w	r3, fp, r3
 8008ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8008ad6:	f04f 0200 	mov.w	r2, #0
 8008ada:	f04f 0300 	mov.w	r3, #0
 8008ade:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8008ae2:	4629      	mov	r1, r5
 8008ae4:	028b      	lsls	r3, r1, #10
 8008ae6:	4621      	mov	r1, r4
 8008ae8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008aec:	4621      	mov	r1, r4
 8008aee:	028a      	lsls	r2, r1, #10
 8008af0:	4610      	mov	r0, r2
 8008af2:	4619      	mov	r1, r3
 8008af4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008af8:	2200      	movs	r2, #0
 8008afa:	673b      	str	r3, [r7, #112]	; 0x70
 8008afc:	677a      	str	r2, [r7, #116]	; 0x74
 8008afe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008b02:	f7f8 f8d1 	bl	8000ca8 <__aeabi_uldivmod>
 8008b06:	4602      	mov	r2, r0
 8008b08:	460b      	mov	r3, r1
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008b10:	4b41      	ldr	r3, [pc, #260]	; (8008c18 <HAL_RCC_GetSysClockFreq+0x354>)
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	0c1b      	lsrs	r3, r3, #16
 8008b16:	f003 0303 	and.w	r3, r3, #3
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	005b      	lsls	r3, r3, #1
 8008b1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8008b22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008b26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008b32:	e0eb      	b.n	8008d0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008b34:	4b38      	ldr	r3, [pc, #224]	; (8008c18 <HAL_RCC_GetSysClockFreq+0x354>)
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008b40:	4b35      	ldr	r3, [pc, #212]	; (8008c18 <HAL_RCC_GetSysClockFreq+0x354>)
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d06b      	beq.n	8008c24 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b4c:	4b32      	ldr	r3, [pc, #200]	; (8008c18 <HAL_RCC_GetSysClockFreq+0x354>)
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	099b      	lsrs	r3, r3, #6
 8008b52:	2200      	movs	r2, #0
 8008b54:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008b58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b5e:	663b      	str	r3, [r7, #96]	; 0x60
 8008b60:	2300      	movs	r3, #0
 8008b62:	667b      	str	r3, [r7, #100]	; 0x64
 8008b64:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8008b68:	4622      	mov	r2, r4
 8008b6a:	462b      	mov	r3, r5
 8008b6c:	f04f 0000 	mov.w	r0, #0
 8008b70:	f04f 0100 	mov.w	r1, #0
 8008b74:	0159      	lsls	r1, r3, #5
 8008b76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008b7a:	0150      	lsls	r0, r2, #5
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	460b      	mov	r3, r1
 8008b80:	4621      	mov	r1, r4
 8008b82:	1a51      	subs	r1, r2, r1
 8008b84:	61b9      	str	r1, [r7, #24]
 8008b86:	4629      	mov	r1, r5
 8008b88:	eb63 0301 	sbc.w	r3, r3, r1
 8008b8c:	61fb      	str	r3, [r7, #28]
 8008b8e:	f04f 0200 	mov.w	r2, #0
 8008b92:	f04f 0300 	mov.w	r3, #0
 8008b96:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8008b9a:	4659      	mov	r1, fp
 8008b9c:	018b      	lsls	r3, r1, #6
 8008b9e:	4651      	mov	r1, sl
 8008ba0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008ba4:	4651      	mov	r1, sl
 8008ba6:	018a      	lsls	r2, r1, #6
 8008ba8:	4651      	mov	r1, sl
 8008baa:	ebb2 0801 	subs.w	r8, r2, r1
 8008bae:	4659      	mov	r1, fp
 8008bb0:	eb63 0901 	sbc.w	r9, r3, r1
 8008bb4:	f04f 0200 	mov.w	r2, #0
 8008bb8:	f04f 0300 	mov.w	r3, #0
 8008bbc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008bc0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008bc4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008bc8:	4690      	mov	r8, r2
 8008bca:	4699      	mov	r9, r3
 8008bcc:	4623      	mov	r3, r4
 8008bce:	eb18 0303 	adds.w	r3, r8, r3
 8008bd2:	613b      	str	r3, [r7, #16]
 8008bd4:	462b      	mov	r3, r5
 8008bd6:	eb49 0303 	adc.w	r3, r9, r3
 8008bda:	617b      	str	r3, [r7, #20]
 8008bdc:	f04f 0200 	mov.w	r2, #0
 8008be0:	f04f 0300 	mov.w	r3, #0
 8008be4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008be8:	4629      	mov	r1, r5
 8008bea:	024b      	lsls	r3, r1, #9
 8008bec:	4621      	mov	r1, r4
 8008bee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008bf2:	4621      	mov	r1, r4
 8008bf4:	024a      	lsls	r2, r1, #9
 8008bf6:	4610      	mov	r0, r2
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008bfe:	2200      	movs	r2, #0
 8008c00:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c02:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008c04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008c08:	f7f8 f84e 	bl	8000ca8 <__aeabi_uldivmod>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	460b      	mov	r3, r1
 8008c10:	4613      	mov	r3, r2
 8008c12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c16:	e065      	b.n	8008ce4 <HAL_RCC_GetSysClockFreq+0x420>
 8008c18:	40023800 	.word	0x40023800
 8008c1c:	00f42400 	.word	0x00f42400
 8008c20:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c24:	4b3d      	ldr	r3, [pc, #244]	; (8008d1c <HAL_RCC_GetSysClockFreq+0x458>)
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	099b      	lsrs	r3, r3, #6
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	4611      	mov	r1, r2
 8008c30:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008c34:	653b      	str	r3, [r7, #80]	; 0x50
 8008c36:	2300      	movs	r3, #0
 8008c38:	657b      	str	r3, [r7, #84]	; 0x54
 8008c3a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8008c3e:	4642      	mov	r2, r8
 8008c40:	464b      	mov	r3, r9
 8008c42:	f04f 0000 	mov.w	r0, #0
 8008c46:	f04f 0100 	mov.w	r1, #0
 8008c4a:	0159      	lsls	r1, r3, #5
 8008c4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008c50:	0150      	lsls	r0, r2, #5
 8008c52:	4602      	mov	r2, r0
 8008c54:	460b      	mov	r3, r1
 8008c56:	4641      	mov	r1, r8
 8008c58:	1a51      	subs	r1, r2, r1
 8008c5a:	60b9      	str	r1, [r7, #8]
 8008c5c:	4649      	mov	r1, r9
 8008c5e:	eb63 0301 	sbc.w	r3, r3, r1
 8008c62:	60fb      	str	r3, [r7, #12]
 8008c64:	f04f 0200 	mov.w	r2, #0
 8008c68:	f04f 0300 	mov.w	r3, #0
 8008c6c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008c70:	4659      	mov	r1, fp
 8008c72:	018b      	lsls	r3, r1, #6
 8008c74:	4651      	mov	r1, sl
 8008c76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008c7a:	4651      	mov	r1, sl
 8008c7c:	018a      	lsls	r2, r1, #6
 8008c7e:	4651      	mov	r1, sl
 8008c80:	1a54      	subs	r4, r2, r1
 8008c82:	4659      	mov	r1, fp
 8008c84:	eb63 0501 	sbc.w	r5, r3, r1
 8008c88:	f04f 0200 	mov.w	r2, #0
 8008c8c:	f04f 0300 	mov.w	r3, #0
 8008c90:	00eb      	lsls	r3, r5, #3
 8008c92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c96:	00e2      	lsls	r2, r4, #3
 8008c98:	4614      	mov	r4, r2
 8008c9a:	461d      	mov	r5, r3
 8008c9c:	4643      	mov	r3, r8
 8008c9e:	18e3      	adds	r3, r4, r3
 8008ca0:	603b      	str	r3, [r7, #0]
 8008ca2:	464b      	mov	r3, r9
 8008ca4:	eb45 0303 	adc.w	r3, r5, r3
 8008ca8:	607b      	str	r3, [r7, #4]
 8008caa:	f04f 0200 	mov.w	r2, #0
 8008cae:	f04f 0300 	mov.w	r3, #0
 8008cb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008cb6:	4629      	mov	r1, r5
 8008cb8:	028b      	lsls	r3, r1, #10
 8008cba:	4621      	mov	r1, r4
 8008cbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008cc0:	4621      	mov	r1, r4
 8008cc2:	028a      	lsls	r2, r1, #10
 8008cc4:	4610      	mov	r0, r2
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ccc:	2200      	movs	r2, #0
 8008cce:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cd0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008cd2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008cd6:	f7f7 ffe7 	bl	8000ca8 <__aeabi_uldivmod>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	460b      	mov	r3, r1
 8008cde:	4613      	mov	r3, r2
 8008ce0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008ce4:	4b0d      	ldr	r3, [pc, #52]	; (8008d1c <HAL_RCC_GetSysClockFreq+0x458>)
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	0f1b      	lsrs	r3, r3, #28
 8008cea:	f003 0307 	and.w	r3, r3, #7
 8008cee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8008cf2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008cf6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008d02:	e003      	b.n	8008d0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008d04:	4b06      	ldr	r3, [pc, #24]	; (8008d20 <HAL_RCC_GetSysClockFreq+0x45c>)
 8008d06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008d0a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008d0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	37b8      	adds	r7, #184	; 0xb8
 8008d14:	46bd      	mov	sp, r7
 8008d16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d1a:	bf00      	nop
 8008d1c:	40023800 	.word	0x40023800
 8008d20:	00f42400 	.word	0x00f42400

08008d24 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b086      	sub	sp, #24
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d101      	bne.n	8008d36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	e28d      	b.n	8009252 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f003 0301 	and.w	r3, r3, #1
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	f000 8083 	beq.w	8008e4a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008d44:	4b94      	ldr	r3, [pc, #592]	; (8008f98 <HAL_RCC_OscConfig+0x274>)
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	f003 030c 	and.w	r3, r3, #12
 8008d4c:	2b04      	cmp	r3, #4
 8008d4e:	d019      	beq.n	8008d84 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008d50:	4b91      	ldr	r3, [pc, #580]	; (8008f98 <HAL_RCC_OscConfig+0x274>)
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008d58:	2b08      	cmp	r3, #8
 8008d5a:	d106      	bne.n	8008d6a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008d5c:	4b8e      	ldr	r3, [pc, #568]	; (8008f98 <HAL_RCC_OscConfig+0x274>)
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d68:	d00c      	beq.n	8008d84 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008d6a:	4b8b      	ldr	r3, [pc, #556]	; (8008f98 <HAL_RCC_OscConfig+0x274>)
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008d72:	2b0c      	cmp	r3, #12
 8008d74:	d112      	bne.n	8008d9c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008d76:	4b88      	ldr	r3, [pc, #544]	; (8008f98 <HAL_RCC_OscConfig+0x274>)
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d82:	d10b      	bne.n	8008d9c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d84:	4b84      	ldr	r3, [pc, #528]	; (8008f98 <HAL_RCC_OscConfig+0x274>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d05b      	beq.n	8008e48 <HAL_RCC_OscConfig+0x124>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d157      	bne.n	8008e48 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e25a      	b.n	8009252 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008da4:	d106      	bne.n	8008db4 <HAL_RCC_OscConfig+0x90>
 8008da6:	4b7c      	ldr	r3, [pc, #496]	; (8008f98 <HAL_RCC_OscConfig+0x274>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a7b      	ldr	r2, [pc, #492]	; (8008f98 <HAL_RCC_OscConfig+0x274>)
 8008dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008db0:	6013      	str	r3, [r2, #0]
 8008db2:	e01d      	b.n	8008df0 <HAL_RCC_OscConfig+0xcc>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008dbc:	d10c      	bne.n	8008dd8 <HAL_RCC_OscConfig+0xb4>
 8008dbe:	4b76      	ldr	r3, [pc, #472]	; (8008f98 <HAL_RCC_OscConfig+0x274>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a75      	ldr	r2, [pc, #468]	; (8008f98 <HAL_RCC_OscConfig+0x274>)
 8008dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008dc8:	6013      	str	r3, [r2, #0]
 8008dca:	4b73      	ldr	r3, [pc, #460]	; (8008f98 <HAL_RCC_OscConfig+0x274>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a72      	ldr	r2, [pc, #456]	; (8008f98 <HAL_RCC_OscConfig+0x274>)
 8008dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008dd4:	6013      	str	r3, [r2, #0]
 8008dd6:	e00b      	b.n	8008df0 <HAL_RCC_OscConfig+0xcc>
 8008dd8:	4b6f      	ldr	r3, [pc, #444]	; (8008f98 <HAL_RCC_OscConfig+0x274>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a6e      	ldr	r2, [pc, #440]	; (8008f98 <HAL_RCC_OscConfig+0x274>)
 8008dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008de2:	6013      	str	r3, [r2, #0]
 8008de4:	4b6c      	ldr	r3, [pc, #432]	; (8008f98 <HAL_RCC_OscConfig+0x274>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a6b      	ldr	r2, [pc, #428]	; (8008f98 <HAL_RCC_OscConfig+0x274>)
 8008dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008dee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d013      	beq.n	8008e20 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008df8:	f7fb fb54 	bl	80044a4 <HAL_GetTick>
 8008dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008dfe:	e008      	b.n	8008e12 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008e00:	f7fb fb50 	bl	80044a4 <HAL_GetTick>
 8008e04:	4602      	mov	r2, r0
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	1ad3      	subs	r3, r2, r3
 8008e0a:	2b64      	cmp	r3, #100	; 0x64
 8008e0c:	d901      	bls.n	8008e12 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008e0e:	2303      	movs	r3, #3
 8008e10:	e21f      	b.n	8009252 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e12:	4b61      	ldr	r3, [pc, #388]	; (8008f98 <HAL_RCC_OscConfig+0x274>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d0f0      	beq.n	8008e00 <HAL_RCC_OscConfig+0xdc>
 8008e1e:	e014      	b.n	8008e4a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e20:	f7fb fb40 	bl	80044a4 <HAL_GetTick>
 8008e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008e26:	e008      	b.n	8008e3a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008e28:	f7fb fb3c 	bl	80044a4 <HAL_GetTick>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	1ad3      	subs	r3, r2, r3
 8008e32:	2b64      	cmp	r3, #100	; 0x64
 8008e34:	d901      	bls.n	8008e3a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008e36:	2303      	movs	r3, #3
 8008e38:	e20b      	b.n	8009252 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008e3a:	4b57      	ldr	r3, [pc, #348]	; (8008f98 <HAL_RCC_OscConfig+0x274>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1f0      	bne.n	8008e28 <HAL_RCC_OscConfig+0x104>
 8008e46:	e000      	b.n	8008e4a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f003 0302 	and.w	r3, r3, #2
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d06f      	beq.n	8008f36 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008e56:	4b50      	ldr	r3, [pc, #320]	; (8008f98 <HAL_RCC_OscConfig+0x274>)
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	f003 030c 	and.w	r3, r3, #12
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d017      	beq.n	8008e92 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008e62:	4b4d      	ldr	r3, [pc, #308]	; (8008f98 <HAL_RCC_OscConfig+0x274>)
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008e6a:	2b08      	cmp	r3, #8
 8008e6c:	d105      	bne.n	8008e7a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008e6e:	4b4a      	ldr	r3, [pc, #296]	; (8008f98 <HAL_RCC_OscConfig+0x274>)
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00b      	beq.n	8008e92 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008e7a:	4b47      	ldr	r3, [pc, #284]	; (8008f98 <HAL_RCC_OscConfig+0x274>)
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008e82:	2b0c      	cmp	r3, #12
 8008e84:	d11c      	bne.n	8008ec0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008e86:	4b44      	ldr	r3, [pc, #272]	; (8008f98 <HAL_RCC_OscConfig+0x274>)
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d116      	bne.n	8008ec0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e92:	4b41      	ldr	r3, [pc, #260]	; (8008f98 <HAL_RCC_OscConfig+0x274>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f003 0302 	and.w	r3, r3, #2
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d005      	beq.n	8008eaa <HAL_RCC_OscConfig+0x186>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d001      	beq.n	8008eaa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e1d3      	b.n	8009252 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008eaa:	4b3b      	ldr	r3, [pc, #236]	; (8008f98 <HAL_RCC_OscConfig+0x274>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	00db      	lsls	r3, r3, #3
 8008eb8:	4937      	ldr	r1, [pc, #220]	; (8008f98 <HAL_RCC_OscConfig+0x274>)
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ebe:	e03a      	b.n	8008f36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d020      	beq.n	8008f0a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008ec8:	4b34      	ldr	r3, [pc, #208]	; (8008f9c <HAL_RCC_OscConfig+0x278>)
 8008eca:	2201      	movs	r2, #1
 8008ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ece:	f7fb fae9 	bl	80044a4 <HAL_GetTick>
 8008ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ed4:	e008      	b.n	8008ee8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ed6:	f7fb fae5 	bl	80044a4 <HAL_GetTick>
 8008eda:	4602      	mov	r2, r0
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	1ad3      	subs	r3, r2, r3
 8008ee0:	2b02      	cmp	r3, #2
 8008ee2:	d901      	bls.n	8008ee8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008ee4:	2303      	movs	r3, #3
 8008ee6:	e1b4      	b.n	8009252 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ee8:	4b2b      	ldr	r3, [pc, #172]	; (8008f98 <HAL_RCC_OscConfig+0x274>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f003 0302 	and.w	r3, r3, #2
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d0f0      	beq.n	8008ed6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ef4:	4b28      	ldr	r3, [pc, #160]	; (8008f98 <HAL_RCC_OscConfig+0x274>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	691b      	ldr	r3, [r3, #16]
 8008f00:	00db      	lsls	r3, r3, #3
 8008f02:	4925      	ldr	r1, [pc, #148]	; (8008f98 <HAL_RCC_OscConfig+0x274>)
 8008f04:	4313      	orrs	r3, r2
 8008f06:	600b      	str	r3, [r1, #0]
 8008f08:	e015      	b.n	8008f36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008f0a:	4b24      	ldr	r3, [pc, #144]	; (8008f9c <HAL_RCC_OscConfig+0x278>)
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f10:	f7fb fac8 	bl	80044a4 <HAL_GetTick>
 8008f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008f16:	e008      	b.n	8008f2a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008f18:	f7fb fac4 	bl	80044a4 <HAL_GetTick>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	1ad3      	subs	r3, r2, r3
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	d901      	bls.n	8008f2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008f26:	2303      	movs	r3, #3
 8008f28:	e193      	b.n	8009252 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008f2a:	4b1b      	ldr	r3, [pc, #108]	; (8008f98 <HAL_RCC_OscConfig+0x274>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f003 0302 	and.w	r3, r3, #2
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d1f0      	bne.n	8008f18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f003 0308 	and.w	r3, r3, #8
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d036      	beq.n	8008fb0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	695b      	ldr	r3, [r3, #20]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d016      	beq.n	8008f78 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f4a:	4b15      	ldr	r3, [pc, #84]	; (8008fa0 <HAL_RCC_OscConfig+0x27c>)
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f50:	f7fb faa8 	bl	80044a4 <HAL_GetTick>
 8008f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008f56:	e008      	b.n	8008f6a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008f58:	f7fb faa4 	bl	80044a4 <HAL_GetTick>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	1ad3      	subs	r3, r2, r3
 8008f62:	2b02      	cmp	r3, #2
 8008f64:	d901      	bls.n	8008f6a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8008f66:	2303      	movs	r3, #3
 8008f68:	e173      	b.n	8009252 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008f6a:	4b0b      	ldr	r3, [pc, #44]	; (8008f98 <HAL_RCC_OscConfig+0x274>)
 8008f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f6e:	f003 0302 	and.w	r3, r3, #2
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d0f0      	beq.n	8008f58 <HAL_RCC_OscConfig+0x234>
 8008f76:	e01b      	b.n	8008fb0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f78:	4b09      	ldr	r3, [pc, #36]	; (8008fa0 <HAL_RCC_OscConfig+0x27c>)
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f7e:	f7fb fa91 	bl	80044a4 <HAL_GetTick>
 8008f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008f84:	e00e      	b.n	8008fa4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008f86:	f7fb fa8d 	bl	80044a4 <HAL_GetTick>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	1ad3      	subs	r3, r2, r3
 8008f90:	2b02      	cmp	r3, #2
 8008f92:	d907      	bls.n	8008fa4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008f94:	2303      	movs	r3, #3
 8008f96:	e15c      	b.n	8009252 <HAL_RCC_OscConfig+0x52e>
 8008f98:	40023800 	.word	0x40023800
 8008f9c:	42470000 	.word	0x42470000
 8008fa0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008fa4:	4b8a      	ldr	r3, [pc, #552]	; (80091d0 <HAL_RCC_OscConfig+0x4ac>)
 8008fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fa8:	f003 0302 	and.w	r3, r3, #2
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d1ea      	bne.n	8008f86 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f003 0304 	and.w	r3, r3, #4
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f000 8097 	beq.w	80090ec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008fc2:	4b83      	ldr	r3, [pc, #524]	; (80091d0 <HAL_RCC_OscConfig+0x4ac>)
 8008fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d10f      	bne.n	8008fee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008fce:	2300      	movs	r3, #0
 8008fd0:	60bb      	str	r3, [r7, #8]
 8008fd2:	4b7f      	ldr	r3, [pc, #508]	; (80091d0 <HAL_RCC_OscConfig+0x4ac>)
 8008fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd6:	4a7e      	ldr	r2, [pc, #504]	; (80091d0 <HAL_RCC_OscConfig+0x4ac>)
 8008fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8008fde:	4b7c      	ldr	r3, [pc, #496]	; (80091d0 <HAL_RCC_OscConfig+0x4ac>)
 8008fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fe6:	60bb      	str	r3, [r7, #8]
 8008fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008fea:	2301      	movs	r3, #1
 8008fec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008fee:	4b79      	ldr	r3, [pc, #484]	; (80091d4 <HAL_RCC_OscConfig+0x4b0>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d118      	bne.n	800902c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008ffa:	4b76      	ldr	r3, [pc, #472]	; (80091d4 <HAL_RCC_OscConfig+0x4b0>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a75      	ldr	r2, [pc, #468]	; (80091d4 <HAL_RCC_OscConfig+0x4b0>)
 8009000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009006:	f7fb fa4d 	bl	80044a4 <HAL_GetTick>
 800900a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800900c:	e008      	b.n	8009020 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800900e:	f7fb fa49 	bl	80044a4 <HAL_GetTick>
 8009012:	4602      	mov	r2, r0
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	1ad3      	subs	r3, r2, r3
 8009018:	2b02      	cmp	r3, #2
 800901a:	d901      	bls.n	8009020 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800901c:	2303      	movs	r3, #3
 800901e:	e118      	b.n	8009252 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009020:	4b6c      	ldr	r3, [pc, #432]	; (80091d4 <HAL_RCC_OscConfig+0x4b0>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009028:	2b00      	cmp	r3, #0
 800902a:	d0f0      	beq.n	800900e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	2b01      	cmp	r3, #1
 8009032:	d106      	bne.n	8009042 <HAL_RCC_OscConfig+0x31e>
 8009034:	4b66      	ldr	r3, [pc, #408]	; (80091d0 <HAL_RCC_OscConfig+0x4ac>)
 8009036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009038:	4a65      	ldr	r2, [pc, #404]	; (80091d0 <HAL_RCC_OscConfig+0x4ac>)
 800903a:	f043 0301 	orr.w	r3, r3, #1
 800903e:	6713      	str	r3, [r2, #112]	; 0x70
 8009040:	e01c      	b.n	800907c <HAL_RCC_OscConfig+0x358>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	2b05      	cmp	r3, #5
 8009048:	d10c      	bne.n	8009064 <HAL_RCC_OscConfig+0x340>
 800904a:	4b61      	ldr	r3, [pc, #388]	; (80091d0 <HAL_RCC_OscConfig+0x4ac>)
 800904c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800904e:	4a60      	ldr	r2, [pc, #384]	; (80091d0 <HAL_RCC_OscConfig+0x4ac>)
 8009050:	f043 0304 	orr.w	r3, r3, #4
 8009054:	6713      	str	r3, [r2, #112]	; 0x70
 8009056:	4b5e      	ldr	r3, [pc, #376]	; (80091d0 <HAL_RCC_OscConfig+0x4ac>)
 8009058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800905a:	4a5d      	ldr	r2, [pc, #372]	; (80091d0 <HAL_RCC_OscConfig+0x4ac>)
 800905c:	f043 0301 	orr.w	r3, r3, #1
 8009060:	6713      	str	r3, [r2, #112]	; 0x70
 8009062:	e00b      	b.n	800907c <HAL_RCC_OscConfig+0x358>
 8009064:	4b5a      	ldr	r3, [pc, #360]	; (80091d0 <HAL_RCC_OscConfig+0x4ac>)
 8009066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009068:	4a59      	ldr	r2, [pc, #356]	; (80091d0 <HAL_RCC_OscConfig+0x4ac>)
 800906a:	f023 0301 	bic.w	r3, r3, #1
 800906e:	6713      	str	r3, [r2, #112]	; 0x70
 8009070:	4b57      	ldr	r3, [pc, #348]	; (80091d0 <HAL_RCC_OscConfig+0x4ac>)
 8009072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009074:	4a56      	ldr	r2, [pc, #344]	; (80091d0 <HAL_RCC_OscConfig+0x4ac>)
 8009076:	f023 0304 	bic.w	r3, r3, #4
 800907a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d015      	beq.n	80090b0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009084:	f7fb fa0e 	bl	80044a4 <HAL_GetTick>
 8009088:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800908a:	e00a      	b.n	80090a2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800908c:	f7fb fa0a 	bl	80044a4 <HAL_GetTick>
 8009090:	4602      	mov	r2, r0
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	1ad3      	subs	r3, r2, r3
 8009096:	f241 3288 	movw	r2, #5000	; 0x1388
 800909a:	4293      	cmp	r3, r2
 800909c:	d901      	bls.n	80090a2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800909e:	2303      	movs	r3, #3
 80090a0:	e0d7      	b.n	8009252 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80090a2:	4b4b      	ldr	r3, [pc, #300]	; (80091d0 <HAL_RCC_OscConfig+0x4ac>)
 80090a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090a6:	f003 0302 	and.w	r3, r3, #2
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d0ee      	beq.n	800908c <HAL_RCC_OscConfig+0x368>
 80090ae:	e014      	b.n	80090da <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090b0:	f7fb f9f8 	bl	80044a4 <HAL_GetTick>
 80090b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80090b6:	e00a      	b.n	80090ce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80090b8:	f7fb f9f4 	bl	80044a4 <HAL_GetTick>
 80090bc:	4602      	mov	r2, r0
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	1ad3      	subs	r3, r2, r3
 80090c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d901      	bls.n	80090ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80090ca:	2303      	movs	r3, #3
 80090cc:	e0c1      	b.n	8009252 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80090ce:	4b40      	ldr	r3, [pc, #256]	; (80091d0 <HAL_RCC_OscConfig+0x4ac>)
 80090d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090d2:	f003 0302 	and.w	r3, r3, #2
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d1ee      	bne.n	80090b8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80090da:	7dfb      	ldrb	r3, [r7, #23]
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d105      	bne.n	80090ec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80090e0:	4b3b      	ldr	r3, [pc, #236]	; (80091d0 <HAL_RCC_OscConfig+0x4ac>)
 80090e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e4:	4a3a      	ldr	r2, [pc, #232]	; (80091d0 <HAL_RCC_OscConfig+0x4ac>)
 80090e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	699b      	ldr	r3, [r3, #24]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f000 80ad 	beq.w	8009250 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80090f6:	4b36      	ldr	r3, [pc, #216]	; (80091d0 <HAL_RCC_OscConfig+0x4ac>)
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	f003 030c 	and.w	r3, r3, #12
 80090fe:	2b08      	cmp	r3, #8
 8009100:	d060      	beq.n	80091c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	699b      	ldr	r3, [r3, #24]
 8009106:	2b02      	cmp	r3, #2
 8009108:	d145      	bne.n	8009196 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800910a:	4b33      	ldr	r3, [pc, #204]	; (80091d8 <HAL_RCC_OscConfig+0x4b4>)
 800910c:	2200      	movs	r2, #0
 800910e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009110:	f7fb f9c8 	bl	80044a4 <HAL_GetTick>
 8009114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009116:	e008      	b.n	800912a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009118:	f7fb f9c4 	bl	80044a4 <HAL_GetTick>
 800911c:	4602      	mov	r2, r0
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	1ad3      	subs	r3, r2, r3
 8009122:	2b02      	cmp	r3, #2
 8009124:	d901      	bls.n	800912a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8009126:	2303      	movs	r3, #3
 8009128:	e093      	b.n	8009252 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800912a:	4b29      	ldr	r3, [pc, #164]	; (80091d0 <HAL_RCC_OscConfig+0x4ac>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009132:	2b00      	cmp	r3, #0
 8009134:	d1f0      	bne.n	8009118 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	69da      	ldr	r2, [r3, #28]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6a1b      	ldr	r3, [r3, #32]
 800913e:	431a      	orrs	r2, r3
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009144:	019b      	lsls	r3, r3, #6
 8009146:	431a      	orrs	r2, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800914c:	085b      	lsrs	r3, r3, #1
 800914e:	3b01      	subs	r3, #1
 8009150:	041b      	lsls	r3, r3, #16
 8009152:	431a      	orrs	r2, r3
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009158:	061b      	lsls	r3, r3, #24
 800915a:	431a      	orrs	r2, r3
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009160:	071b      	lsls	r3, r3, #28
 8009162:	491b      	ldr	r1, [pc, #108]	; (80091d0 <HAL_RCC_OscConfig+0x4ac>)
 8009164:	4313      	orrs	r3, r2
 8009166:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009168:	4b1b      	ldr	r3, [pc, #108]	; (80091d8 <HAL_RCC_OscConfig+0x4b4>)
 800916a:	2201      	movs	r2, #1
 800916c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800916e:	f7fb f999 	bl	80044a4 <HAL_GetTick>
 8009172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009174:	e008      	b.n	8009188 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009176:	f7fb f995 	bl	80044a4 <HAL_GetTick>
 800917a:	4602      	mov	r2, r0
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	1ad3      	subs	r3, r2, r3
 8009180:	2b02      	cmp	r3, #2
 8009182:	d901      	bls.n	8009188 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8009184:	2303      	movs	r3, #3
 8009186:	e064      	b.n	8009252 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009188:	4b11      	ldr	r3, [pc, #68]	; (80091d0 <HAL_RCC_OscConfig+0x4ac>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009190:	2b00      	cmp	r3, #0
 8009192:	d0f0      	beq.n	8009176 <HAL_RCC_OscConfig+0x452>
 8009194:	e05c      	b.n	8009250 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009196:	4b10      	ldr	r3, [pc, #64]	; (80091d8 <HAL_RCC_OscConfig+0x4b4>)
 8009198:	2200      	movs	r2, #0
 800919a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800919c:	f7fb f982 	bl	80044a4 <HAL_GetTick>
 80091a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091a2:	e008      	b.n	80091b6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80091a4:	f7fb f97e 	bl	80044a4 <HAL_GetTick>
 80091a8:	4602      	mov	r2, r0
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	1ad3      	subs	r3, r2, r3
 80091ae:	2b02      	cmp	r3, #2
 80091b0:	d901      	bls.n	80091b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80091b2:	2303      	movs	r3, #3
 80091b4:	e04d      	b.n	8009252 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091b6:	4b06      	ldr	r3, [pc, #24]	; (80091d0 <HAL_RCC_OscConfig+0x4ac>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d1f0      	bne.n	80091a4 <HAL_RCC_OscConfig+0x480>
 80091c2:	e045      	b.n	8009250 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	699b      	ldr	r3, [r3, #24]
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d107      	bne.n	80091dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80091cc:	2301      	movs	r3, #1
 80091ce:	e040      	b.n	8009252 <HAL_RCC_OscConfig+0x52e>
 80091d0:	40023800 	.word	0x40023800
 80091d4:	40007000 	.word	0x40007000
 80091d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80091dc:	4b1f      	ldr	r3, [pc, #124]	; (800925c <HAL_RCC_OscConfig+0x538>)
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	699b      	ldr	r3, [r3, #24]
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d030      	beq.n	800924c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d129      	bne.n	800924c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009202:	429a      	cmp	r2, r3
 8009204:	d122      	bne.n	800924c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009206:	68fa      	ldr	r2, [r7, #12]
 8009208:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800920c:	4013      	ands	r3, r2
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009212:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009214:	4293      	cmp	r3, r2
 8009216:	d119      	bne.n	800924c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009222:	085b      	lsrs	r3, r3, #1
 8009224:	3b01      	subs	r3, #1
 8009226:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009228:	429a      	cmp	r2, r3
 800922a:	d10f      	bne.n	800924c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009236:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009238:	429a      	cmp	r2, r3
 800923a:	d107      	bne.n	800924c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009246:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009248:	429a      	cmp	r2, r3
 800924a:	d001      	beq.n	8009250 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800924c:	2301      	movs	r3, #1
 800924e:	e000      	b.n	8009252 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009250:	2300      	movs	r3, #0
}
 8009252:	4618      	mov	r0, r3
 8009254:	3718      	adds	r7, #24
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	40023800 	.word	0x40023800

08009260 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d101      	bne.n	8009272 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800926e:	2301      	movs	r3, #1
 8009270:	e022      	b.n	80092b8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009278:	b2db      	uxtb	r3, r3
 800927a:	2b00      	cmp	r3, #0
 800927c:	d105      	bne.n	800928a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f7f9 ffcb 	bl	8003220 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2203      	movs	r2, #3
 800928e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 f814 	bl	80092c0 <HAL_SD_InitCard>
 8009298:	4603      	mov	r3, r0
 800929a:	2b00      	cmp	r3, #0
 800929c:	d001      	beq.n	80092a2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800929e:	2301      	movs	r3, #1
 80092a0:	e00a      	b.n	80092b8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2201      	movs	r2, #1
 80092b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80092c0:	b5b0      	push	{r4, r5, r7, lr}
 80092c2:	b08e      	sub	sp, #56	; 0x38
 80092c4:	af04      	add	r7, sp, #16
 80092c6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80092c8:	2300      	movs	r3, #0
 80092ca:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80092cc:	2300      	movs	r3, #0
 80092ce:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80092d0:	2300      	movs	r3, #0
 80092d2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80092d4:	2300      	movs	r3, #0
 80092d6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80092d8:	2300      	movs	r3, #0
 80092da:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80092dc:	2376      	movs	r3, #118	; 0x76
 80092de:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681d      	ldr	r5, [r3, #0]
 80092e4:	466c      	mov	r4, sp
 80092e6:	f107 0314 	add.w	r3, r7, #20
 80092ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80092ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80092f2:	f107 0308 	add.w	r3, r7, #8
 80092f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80092f8:	4628      	mov	r0, r5
 80092fa:	f002 fdab 	bl	800be54 <SDIO_Init>
 80092fe:	4603      	mov	r3, r0
 8009300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8009304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009308:	2b00      	cmp	r3, #0
 800930a:	d001      	beq.n	8009310 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800930c:	2301      	movs	r3, #1
 800930e:	e04f      	b.n	80093b0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8009310:	4b29      	ldr	r3, [pc, #164]	; (80093b8 <HAL_SD_InitCard+0xf8>)
 8009312:	2200      	movs	r2, #0
 8009314:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4618      	mov	r0, r3
 800931c:	f002 fde3 	bl	800bee6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8009320:	4b25      	ldr	r3, [pc, #148]	; (80093b8 <HAL_SD_InitCard+0xf8>)
 8009322:	2201      	movs	r2, #1
 8009324:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8009326:	2002      	movs	r0, #2
 8009328:	f7fb f8c8 	bl	80044bc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 ff03 	bl	800a138 <SD_PowerON>
 8009332:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009334:	6a3b      	ldr	r3, [r7, #32]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d00b      	beq.n	8009352 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2201      	movs	r2, #1
 800933e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009346:	6a3b      	ldr	r3, [r7, #32]
 8009348:	431a      	orrs	r2, r3
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	e02e      	b.n	80093b0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 fe22 	bl	8009f9c <SD_InitCard>
 8009358:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800935a:	6a3b      	ldr	r3, [r7, #32]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d00b      	beq.n	8009378 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2201      	movs	r2, #1
 8009364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800936c:	6a3b      	ldr	r3, [r7, #32]
 800936e:	431a      	orrs	r2, r3
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	e01b      	b.n	80093b0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009380:	4618      	mov	r0, r3
 8009382:	f002 fe42 	bl	800c00a <SDMMC_CmdBlockLength>
 8009386:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009388:	6a3b      	ldr	r3, [r7, #32]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00f      	beq.n	80093ae <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4a0a      	ldr	r2, [pc, #40]	; (80093bc <HAL_SD_InitCard+0xfc>)
 8009394:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800939a:	6a3b      	ldr	r3, [r7, #32]
 800939c:	431a      	orrs	r2, r3
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2201      	movs	r2, #1
 80093a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80093aa:	2301      	movs	r3, #1
 80093ac:	e000      	b.n	80093b0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80093ae:	2300      	movs	r3, #0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3728      	adds	r7, #40	; 0x28
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bdb0      	pop	{r4, r5, r7, pc}
 80093b8:	422580a0 	.word	0x422580a0
 80093bc:	004005ff 	.word	0x004005ff

080093c0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b092      	sub	sp, #72	; 0x48
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	60b9      	str	r1, [r7, #8]
 80093ca:	607a      	str	r2, [r7, #4]
 80093cc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80093ce:	f7fb f869 	bl	80044a4 <HAL_GetTick>
 80093d2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d107      	bne.n	80093f2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80093ee:	2301      	movs	r3, #1
 80093f0:	e1bd      	b.n	800976e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	f040 81b0 	bne.w	8009760 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2200      	movs	r2, #0
 8009404:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009406:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	441a      	add	r2, r3
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009410:	429a      	cmp	r2, r3
 8009412:	d907      	bls.n	8009424 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009418:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009420:	2301      	movs	r3, #1
 8009422:	e1a4      	b.n	800976e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2203      	movs	r2, #3
 8009428:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2200      	movs	r2, #0
 8009432:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009438:	2b01      	cmp	r3, #1
 800943a:	d002      	beq.n	8009442 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800943c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800943e:	025b      	lsls	r3, r3, #9
 8009440:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009442:	f04f 33ff 	mov.w	r3, #4294967295
 8009446:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	025b      	lsls	r3, r3, #9
 800944c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800944e:	2390      	movs	r3, #144	; 0x90
 8009450:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009452:	2302      	movs	r3, #2
 8009454:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009456:	2300      	movs	r3, #0
 8009458:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800945a:	2301      	movs	r3, #1
 800945c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f107 0214 	add.w	r2, r7, #20
 8009466:	4611      	mov	r1, r2
 8009468:	4618      	mov	r0, r3
 800946a:	f002 fda2 	bl	800bfb2 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	2b01      	cmp	r3, #1
 8009472:	d90a      	bls.n	800948a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2202      	movs	r2, #2
 8009478:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009480:	4618      	mov	r0, r3
 8009482:	f002 fe06 	bl	800c092 <SDMMC_CmdReadMultiBlock>
 8009486:	6478      	str	r0, [r7, #68]	; 0x44
 8009488:	e009      	b.n	800949e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2201      	movs	r2, #1
 800948e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009496:	4618      	mov	r0, r3
 8009498:	f002 fdd9 	bl	800c04e <SDMMC_CmdReadSingleBlock>
 800949c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800949e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d012      	beq.n	80094ca <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a7a      	ldr	r2, [pc, #488]	; (8009694 <HAL_SD_ReadBlocks+0x2d4>)
 80094aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094b2:	431a      	orrs	r2, r3
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2201      	movs	r2, #1
 80094bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2200      	movs	r2, #0
 80094c4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80094c6:	2301      	movs	r3, #1
 80094c8:	e151      	b.n	800976e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80094ce:	e061      	b.n	8009594 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d03c      	beq.n	8009558 <HAL_SD_ReadBlocks+0x198>
 80094de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d039      	beq.n	8009558 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80094e4:	2300      	movs	r3, #0
 80094e6:	643b      	str	r3, [r7, #64]	; 0x40
 80094e8:	e033      	b.n	8009552 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4618      	mov	r0, r3
 80094f0:	f002 fcdb 	bl	800beaa <SDIO_ReadFIFO>
 80094f4:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80094f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f8:	b2da      	uxtb	r2, r3
 80094fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094fc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80094fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009500:	3301      	adds	r3, #1
 8009502:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009506:	3b01      	subs	r3, #1
 8009508:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800950a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800950c:	0a1b      	lsrs	r3, r3, #8
 800950e:	b2da      	uxtb	r2, r3
 8009510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009512:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009516:	3301      	adds	r3, #1
 8009518:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800951a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800951c:	3b01      	subs	r3, #1
 800951e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009522:	0c1b      	lsrs	r3, r3, #16
 8009524:	b2da      	uxtb	r2, r3
 8009526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009528:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800952a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800952c:	3301      	adds	r3, #1
 800952e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009532:	3b01      	subs	r3, #1
 8009534:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009538:	0e1b      	lsrs	r3, r3, #24
 800953a:	b2da      	uxtb	r2, r3
 800953c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800953e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009542:	3301      	adds	r3, #1
 8009544:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009548:	3b01      	subs	r3, #1
 800954a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800954c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800954e:	3301      	adds	r3, #1
 8009550:	643b      	str	r3, [r7, #64]	; 0x40
 8009552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009554:	2b07      	cmp	r3, #7
 8009556:	d9c8      	bls.n	80094ea <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009558:	f7fa ffa4 	bl	80044a4 <HAL_GetTick>
 800955c:	4602      	mov	r2, r0
 800955e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009560:	1ad3      	subs	r3, r2, r3
 8009562:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009564:	429a      	cmp	r2, r3
 8009566:	d902      	bls.n	800956e <HAL_SD_ReadBlocks+0x1ae>
 8009568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800956a:	2b00      	cmp	r3, #0
 800956c:	d112      	bne.n	8009594 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4a48      	ldr	r2, [pc, #288]	; (8009694 <HAL_SD_ReadBlocks+0x2d4>)
 8009574:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800957a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2201      	movs	r2, #1
 8009586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2200      	movs	r2, #0
 800958e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009590:	2303      	movs	r3, #3
 8009592:	e0ec      	b.n	800976e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800959a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d096      	beq.n	80094d0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d022      	beq.n	80095f6 <HAL_SD_ReadBlocks+0x236>
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d91f      	bls.n	80095f6 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ba:	2b03      	cmp	r3, #3
 80095bc:	d01b      	beq.n	80095f6 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4618      	mov	r0, r3
 80095c4:	f002 fdcc 	bl	800c160 <SDMMC_CmdStopTransfer>
 80095c8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80095ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d012      	beq.n	80095f6 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a2f      	ldr	r2, [pc, #188]	; (8009694 <HAL_SD_ReadBlocks+0x2d4>)
 80095d6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095de:	431a      	orrs	r2, r3
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2201      	movs	r2, #1
 80095e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2200      	movs	r2, #0
 80095f0:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80095f2:	2301      	movs	r3, #1
 80095f4:	e0bb      	b.n	800976e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095fc:	f003 0308 	and.w	r3, r3, #8
 8009600:	2b00      	cmp	r3, #0
 8009602:	d012      	beq.n	800962a <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a22      	ldr	r2, [pc, #136]	; (8009694 <HAL_SD_ReadBlocks+0x2d4>)
 800960a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009610:	f043 0208 	orr.w	r2, r3, #8
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2201      	movs	r2, #1
 800961c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2200      	movs	r2, #0
 8009624:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009626:	2301      	movs	r3, #1
 8009628:	e0a1      	b.n	800976e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009630:	f003 0302 	and.w	r3, r3, #2
 8009634:	2b00      	cmp	r3, #0
 8009636:	d012      	beq.n	800965e <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a15      	ldr	r2, [pc, #84]	; (8009694 <HAL_SD_ReadBlocks+0x2d4>)
 800963e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009644:	f043 0202 	orr.w	r2, r3, #2
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2201      	movs	r2, #1
 8009650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2200      	movs	r2, #0
 8009658:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800965a:	2301      	movs	r3, #1
 800965c:	e087      	b.n	800976e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009664:	f003 0320 	and.w	r3, r3, #32
 8009668:	2b00      	cmp	r3, #0
 800966a:	d064      	beq.n	8009736 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a08      	ldr	r2, [pc, #32]	; (8009694 <HAL_SD_ReadBlocks+0x2d4>)
 8009672:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009678:	f043 0220 	orr.w	r2, r3, #32
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2201      	movs	r2, #1
 8009684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2200      	movs	r2, #0
 800968c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	e06d      	b.n	800976e <HAL_SD_ReadBlocks+0x3ae>
 8009692:	bf00      	nop
 8009694:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4618      	mov	r0, r3
 800969e:	f002 fc04 	bl	800beaa <SDIO_ReadFIFO>
 80096a2:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80096a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a6:	b2da      	uxtb	r2, r3
 80096a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096aa:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80096ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ae:	3301      	adds	r3, #1
 80096b0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80096b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096b4:	3b01      	subs	r3, #1
 80096b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80096b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ba:	0a1b      	lsrs	r3, r3, #8
 80096bc:	b2da      	uxtb	r2, r3
 80096be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096c0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80096c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096c4:	3301      	adds	r3, #1
 80096c6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80096c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096ca:	3b01      	subs	r3, #1
 80096cc:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80096ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d0:	0c1b      	lsrs	r3, r3, #16
 80096d2:	b2da      	uxtb	r2, r3
 80096d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096d6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80096d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096da:	3301      	adds	r3, #1
 80096dc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80096de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096e0:	3b01      	subs	r3, #1
 80096e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80096e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e6:	0e1b      	lsrs	r3, r3, #24
 80096e8:	b2da      	uxtb	r2, r3
 80096ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ec:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80096ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096f0:	3301      	adds	r3, #1
 80096f2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80096f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096f6:	3b01      	subs	r3, #1
 80096f8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80096fa:	f7fa fed3 	bl	80044a4 <HAL_GetTick>
 80096fe:	4602      	mov	r2, r0
 8009700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009702:	1ad3      	subs	r3, r2, r3
 8009704:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009706:	429a      	cmp	r2, r3
 8009708:	d902      	bls.n	8009710 <HAL_SD_ReadBlocks+0x350>
 800970a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800970c:	2b00      	cmp	r3, #0
 800970e:	d112      	bne.n	8009736 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a18      	ldr	r2, [pc, #96]	; (8009778 <HAL_SD_ReadBlocks+0x3b8>)
 8009716:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800971c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2201      	movs	r2, #1
 8009728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2200      	movs	r2, #0
 8009730:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8009732:	2301      	movs	r3, #1
 8009734:	e01b      	b.n	800976e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800973c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009740:	2b00      	cmp	r3, #0
 8009742:	d002      	beq.n	800974a <HAL_SD_ReadBlocks+0x38a>
 8009744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009746:	2b00      	cmp	r3, #0
 8009748:	d1a6      	bne.n	8009698 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f240 523a 	movw	r2, #1338	; 0x53a
 8009752:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2201      	movs	r2, #1
 8009758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800975c:	2300      	movs	r3, #0
 800975e:	e006      	b.n	800976e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009764:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800976c:	2301      	movs	r3, #1
  }
}
 800976e:	4618      	mov	r0, r3
 8009770:	3748      	adds	r7, #72	; 0x48
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	004005ff 	.word	0x004005ff

0800977c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b092      	sub	sp, #72	; 0x48
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]
 8009788:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800978a:	f7fa fe8b 	bl	80044a4 <HAL_GetTick>
 800978e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d107      	bne.n	80097ae <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80097aa:	2301      	movs	r3, #1
 80097ac:	e165      	b.n	8009a7a <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	f040 8158 	bne.w	8009a6c <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2200      	movs	r2, #0
 80097c0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80097c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	441a      	add	r2, r3
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d907      	bls.n	80097e0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80097dc:	2301      	movs	r3, #1
 80097de:	e14c      	b.n	8009a7a <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2203      	movs	r2, #3
 80097e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2200      	movs	r2, #0
 80097ee:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d002      	beq.n	80097fe <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80097f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fa:	025b      	lsls	r3, r3, #9
 80097fc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80097fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009802:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	025b      	lsls	r3, r3, #9
 8009808:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800980a:	2390      	movs	r3, #144	; 0x90
 800980c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800980e:	2300      	movs	r3, #0
 8009810:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009812:	2300      	movs	r3, #0
 8009814:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8009816:	2301      	movs	r3, #1
 8009818:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f107 0218 	add.w	r2, r7, #24
 8009822:	4611      	mov	r1, r2
 8009824:	4618      	mov	r0, r3
 8009826:	f002 fbc4 	bl	800bfb2 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	2b01      	cmp	r3, #1
 800982e:	d90a      	bls.n	8009846 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2220      	movs	r2, #32
 8009834:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800983c:	4618      	mov	r0, r3
 800983e:	f002 fc6c 	bl	800c11a <SDMMC_CmdWriteMultiBlock>
 8009842:	6478      	str	r0, [r7, #68]	; 0x44
 8009844:	e009      	b.n	800985a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2210      	movs	r2, #16
 800984a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009852:	4618      	mov	r0, r3
 8009854:	f002 fc3f 	bl	800c0d6 <SDMMC_CmdWriteSingleBlock>
 8009858:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800985a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800985c:	2b00      	cmp	r3, #0
 800985e:	d012      	beq.n	8009886 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a87      	ldr	r2, [pc, #540]	; (8009a84 <HAL_SD_WriteBlocks+0x308>)
 8009866:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800986c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800986e:	431a      	orrs	r2, r3
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2201      	movs	r2, #1
 8009878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2200      	movs	r2, #0
 8009880:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	e0f9      	b.n	8009a7a <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8009886:	69fb      	ldr	r3, [r7, #28]
 8009888:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800988a:	e065      	b.n	8009958 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009896:	2b00      	cmp	r3, #0
 8009898:	d040      	beq.n	800991c <HAL_SD_WriteBlocks+0x1a0>
 800989a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800989c:	2b00      	cmp	r3, #0
 800989e:	d03d      	beq.n	800991c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80098a0:	2300      	movs	r3, #0
 80098a2:	643b      	str	r3, [r7, #64]	; 0x40
 80098a4:	e037      	b.n	8009916 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80098a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80098ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098ae:	3301      	adds	r3, #1
 80098b0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80098b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098b4:	3b01      	subs	r3, #1
 80098b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80098b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	021a      	lsls	r2, r3, #8
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	4313      	orrs	r3, r2
 80098c2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80098c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098c6:	3301      	adds	r3, #1
 80098c8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80098ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098cc:	3b01      	subs	r3, #1
 80098ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80098d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	041a      	lsls	r2, r3, #16
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	4313      	orrs	r3, r2
 80098da:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80098dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098de:	3301      	adds	r3, #1
 80098e0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80098e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098e4:	3b01      	subs	r3, #1
 80098e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80098e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	061a      	lsls	r2, r3, #24
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	4313      	orrs	r3, r2
 80098f2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80098f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098f6:	3301      	adds	r3, #1
 80098f8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80098fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098fc:	3b01      	subs	r3, #1
 80098fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f107 0214 	add.w	r2, r7, #20
 8009908:	4611      	mov	r1, r2
 800990a:	4618      	mov	r0, r3
 800990c:	f002 fada 	bl	800bec4 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8009910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009912:	3301      	adds	r3, #1
 8009914:	643b      	str	r3, [r7, #64]	; 0x40
 8009916:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009918:	2b07      	cmp	r3, #7
 800991a:	d9c4      	bls.n	80098a6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800991c:	f7fa fdc2 	bl	80044a4 <HAL_GetTick>
 8009920:	4602      	mov	r2, r0
 8009922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009924:	1ad3      	subs	r3, r2, r3
 8009926:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009928:	429a      	cmp	r2, r3
 800992a:	d902      	bls.n	8009932 <HAL_SD_WriteBlocks+0x1b6>
 800992c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800992e:	2b00      	cmp	r3, #0
 8009930:	d112      	bne.n	8009958 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4a53      	ldr	r2, [pc, #332]	; (8009a84 <HAL_SD_WriteBlocks+0x308>)
 8009938:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800993e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009940:	431a      	orrs	r2, r3
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2201      	movs	r2, #1
 800994a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2200      	movs	r2, #0
 8009952:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009954:	2303      	movs	r3, #3
 8009956:	e090      	b.n	8009a7a <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800995e:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8009962:	2b00      	cmp	r3, #0
 8009964:	d092      	beq.n	800988c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800996c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009970:	2b00      	cmp	r3, #0
 8009972:	d022      	beq.n	80099ba <HAL_SD_WriteBlocks+0x23e>
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	2b01      	cmp	r3, #1
 8009978:	d91f      	bls.n	80099ba <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800997e:	2b03      	cmp	r3, #3
 8009980:	d01b      	beq.n	80099ba <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4618      	mov	r0, r3
 8009988:	f002 fbea 	bl	800c160 <SDMMC_CmdStopTransfer>
 800998c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800998e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009990:	2b00      	cmp	r3, #0
 8009992:	d012      	beq.n	80099ba <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a3a      	ldr	r2, [pc, #232]	; (8009a84 <HAL_SD_WriteBlocks+0x308>)
 800999a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099a2:	431a      	orrs	r2, r3
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2201      	movs	r2, #1
 80099ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2200      	movs	r2, #0
 80099b4:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80099b6:	2301      	movs	r3, #1
 80099b8:	e05f      	b.n	8009a7a <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099c0:	f003 0308 	and.w	r3, r3, #8
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d012      	beq.n	80099ee <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a2d      	ldr	r2, [pc, #180]	; (8009a84 <HAL_SD_WriteBlocks+0x308>)
 80099ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d4:	f043 0208 	orr.w	r2, r3, #8
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2201      	movs	r2, #1
 80099e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2200      	movs	r2, #0
 80099e8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80099ea:	2301      	movs	r3, #1
 80099ec:	e045      	b.n	8009a7a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099f4:	f003 0302 	and.w	r3, r3, #2
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d012      	beq.n	8009a22 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a20      	ldr	r2, [pc, #128]	; (8009a84 <HAL_SD_WriteBlocks+0x308>)
 8009a02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a08:	f043 0202 	orr.w	r2, r3, #2
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2201      	movs	r2, #1
 8009a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e02b      	b.n	8009a7a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a28:	f003 0310 	and.w	r3, r3, #16
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d012      	beq.n	8009a56 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a13      	ldr	r2, [pc, #76]	; (8009a84 <HAL_SD_WriteBlocks+0x308>)
 8009a36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a3c:	f043 0210 	orr.w	r2, r3, #16
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2201      	movs	r2, #1
 8009a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
 8009a54:	e011      	b.n	8009a7a <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f240 523a 	movw	r2, #1338	; 0x53a
 8009a5e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2201      	movs	r2, #1
 8009a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	e006      	b.n	8009a7a <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a70:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009a78:	2301      	movs	r3, #1
  }
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3748      	adds	r7, #72	; 0x48
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	004005ff 	.word	0x004005ff

08009a88 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a96:	0f9b      	lsrs	r3, r3, #30
 8009a98:	b2da      	uxtb	r2, r3
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009aa2:	0e9b      	lsrs	r3, r3, #26
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	f003 030f 	and.w	r3, r3, #15
 8009aaa:	b2da      	uxtb	r2, r3
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ab4:	0e1b      	lsrs	r3, r3, #24
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	f003 0303 	and.w	r3, r3, #3
 8009abc:	b2da      	uxtb	r2, r3
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ac6:	0c1b      	lsrs	r3, r3, #16
 8009ac8:	b2da      	uxtb	r2, r3
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ad2:	0a1b      	lsrs	r3, r3, #8
 8009ad4:	b2da      	uxtb	r2, r3
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ade:	b2da      	uxtb	r2, r3
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ae8:	0d1b      	lsrs	r3, r3, #20
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009af4:	0c1b      	lsrs	r3, r3, #16
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	f003 030f 	and.w	r3, r3, #15
 8009afc:	b2da      	uxtb	r2, r3
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b06:	0bdb      	lsrs	r3, r3, #15
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	f003 0301 	and.w	r3, r3, #1
 8009b0e:	b2da      	uxtb	r2, r3
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b18:	0b9b      	lsrs	r3, r3, #14
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	f003 0301 	and.w	r3, r3, #1
 8009b20:	b2da      	uxtb	r2, r3
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b2a:	0b5b      	lsrs	r3, r3, #13
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	f003 0301 	and.w	r3, r3, #1
 8009b32:	b2da      	uxtb	r2, r3
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b3c:	0b1b      	lsrs	r3, r3, #12
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	f003 0301 	and.w	r3, r3, #1
 8009b44:	b2da      	uxtb	r2, r3
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d163      	bne.n	8009c20 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b5c:	009a      	lsls	r2, r3, #2
 8009b5e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009b62:	4013      	ands	r3, r2
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009b68:	0f92      	lsrs	r2, r2, #30
 8009b6a:	431a      	orrs	r2, r3
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b74:	0edb      	lsrs	r3, r3, #27
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	f003 0307 	and.w	r3, r3, #7
 8009b7c:	b2da      	uxtb	r2, r3
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b86:	0e1b      	lsrs	r3, r3, #24
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	f003 0307 	and.w	r3, r3, #7
 8009b8e:	b2da      	uxtb	r2, r3
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b98:	0d5b      	lsrs	r3, r3, #21
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	f003 0307 	and.w	r3, r3, #7
 8009ba0:	b2da      	uxtb	r2, r3
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009baa:	0c9b      	lsrs	r3, r3, #18
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	f003 0307 	and.w	r3, r3, #7
 8009bb2:	b2da      	uxtb	r2, r3
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bbc:	0bdb      	lsrs	r3, r3, #15
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	f003 0307 	and.w	r3, r3, #7
 8009bc4:	b2da      	uxtb	r2, r3
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	691b      	ldr	r3, [r3, #16]
 8009bce:	1c5a      	adds	r2, r3, #1
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	7e1b      	ldrb	r3, [r3, #24]
 8009bd8:	b2db      	uxtb	r3, r3
 8009bda:	f003 0307 	and.w	r3, r3, #7
 8009bde:	3302      	adds	r3, #2
 8009be0:	2201      	movs	r2, #1
 8009be2:	fa02 f303 	lsl.w	r3, r2, r3
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009bea:	fb03 f202 	mul.w	r2, r3, r2
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	7a1b      	ldrb	r3, [r3, #8]
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	f003 030f 	and.w	r3, r3, #15
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	409a      	lsls	r2, r3
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009c0c:	0a52      	lsrs	r2, r2, #9
 8009c0e:	fb03 f202 	mul.w	r2, r3, r2
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c1c:	661a      	str	r2, [r3, #96]	; 0x60
 8009c1e:	e031      	b.n	8009c84 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d11d      	bne.n	8009c64 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c2c:	041b      	lsls	r3, r3, #16
 8009c2e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c36:	0c1b      	lsrs	r3, r3, #16
 8009c38:	431a      	orrs	r2, r3
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	691b      	ldr	r3, [r3, #16]
 8009c42:	3301      	adds	r3, #1
 8009c44:	029a      	lsls	r2, r3, #10
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c58:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	661a      	str	r2, [r3, #96]	; 0x60
 8009c62:	e00f      	b.n	8009c84 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a58      	ldr	r2, [pc, #352]	; (8009dcc <HAL_SD_GetCardCSD+0x344>)
 8009c6a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009c80:	2301      	movs	r3, #1
 8009c82:	e09d      	b.n	8009dc0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c88:	0b9b      	lsrs	r3, r3, #14
 8009c8a:	b2db      	uxtb	r3, r3
 8009c8c:	f003 0301 	and.w	r3, r3, #1
 8009c90:	b2da      	uxtb	r2, r3
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c9a:	09db      	lsrs	r3, r3, #7
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ca2:	b2da      	uxtb	r2, r3
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cb2:	b2da      	uxtb	r2, r3
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cbc:	0fdb      	lsrs	r3, r3, #31
 8009cbe:	b2da      	uxtb	r2, r3
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cc8:	0f5b      	lsrs	r3, r3, #29
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	f003 0303 	and.w	r3, r3, #3
 8009cd0:	b2da      	uxtb	r2, r3
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cda:	0e9b      	lsrs	r3, r3, #26
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	f003 0307 	and.w	r3, r3, #7
 8009ce2:	b2da      	uxtb	r2, r3
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cec:	0d9b      	lsrs	r3, r3, #22
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	f003 030f 	and.w	r3, r3, #15
 8009cf4:	b2da      	uxtb	r2, r3
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cfe:	0d5b      	lsrs	r3, r3, #21
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	f003 0301 	and.w	r3, r3, #1
 8009d06:	b2da      	uxtb	r2, r3
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	2200      	movs	r2, #0
 8009d12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d1a:	0c1b      	lsrs	r3, r3, #16
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	f003 0301 	and.w	r3, r3, #1
 8009d22:	b2da      	uxtb	r2, r3
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d2e:	0bdb      	lsrs	r3, r3, #15
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	f003 0301 	and.w	r3, r3, #1
 8009d36:	b2da      	uxtb	r2, r3
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d42:	0b9b      	lsrs	r3, r3, #14
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	f003 0301 	and.w	r3, r3, #1
 8009d4a:	b2da      	uxtb	r2, r3
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d56:	0b5b      	lsrs	r3, r3, #13
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	f003 0301 	and.w	r3, r3, #1
 8009d5e:	b2da      	uxtb	r2, r3
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d6a:	0b1b      	lsrs	r3, r3, #12
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	f003 0301 	and.w	r3, r3, #1
 8009d72:	b2da      	uxtb	r2, r3
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d7e:	0a9b      	lsrs	r3, r3, #10
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	f003 0303 	and.w	r3, r3, #3
 8009d86:	b2da      	uxtb	r2, r3
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d92:	0a1b      	lsrs	r3, r3, #8
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	f003 0303 	and.w	r3, r3, #3
 8009d9a:	b2da      	uxtb	r2, r3
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009da6:	085b      	lsrs	r3, r3, #1
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dae:	b2da      	uxtb	r2, r3
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	2201      	movs	r2, #1
 8009dba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009dbe:	2300      	movs	r3, #0
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr
 8009dcc:	004005ff 	.word	0x004005ff

08009dd0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009e1a:	2300      	movs	r3, #0
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009e28:	b5b0      	push	{r4, r5, r7, lr}
 8009e2a:	b08e      	sub	sp, #56	; 0x38
 8009e2c:	af04      	add	r7, sp, #16
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009e32:	2300      	movs	r3, #0
 8009e34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2203      	movs	r2, #3
 8009e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e44:	2b03      	cmp	r3, #3
 8009e46:	d02e      	beq.n	8009ea6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e4e:	d106      	bne.n	8009e5e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	639a      	str	r2, [r3, #56]	; 0x38
 8009e5c:	e029      	b.n	8009eb2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e64:	d10a      	bne.n	8009e7c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 fa1c 	bl	800a2a4 <SD_WideBus_Enable>
 8009e6c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e72:	6a3b      	ldr	r3, [r7, #32]
 8009e74:	431a      	orrs	r2, r3
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	639a      	str	r2, [r3, #56]	; 0x38
 8009e7a:	e01a      	b.n	8009eb2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d10a      	bne.n	8009e98 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 fa59 	bl	800a33a <SD_WideBus_Disable>
 8009e88:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e8e:	6a3b      	ldr	r3, [r7, #32]
 8009e90:	431a      	orrs	r2, r3
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	639a      	str	r2, [r3, #56]	; 0x38
 8009e96:	e00c      	b.n	8009eb2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e9c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	639a      	str	r2, [r3, #56]	; 0x38
 8009ea4:	e005      	b.n	8009eb2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eaa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d00b      	beq.n	8009ed2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a26      	ldr	r2, [pc, #152]	; (8009f58 <HAL_SD_ConfigWideBusOperation+0x130>)
 8009ec0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009ed0:	e01f      	b.n	8009f12 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	689b      	ldr	r3, [r3, #8]
 8009edc:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	68db      	ldr	r3, [r3, #12]
 8009ee2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	695b      	ldr	r3, [r3, #20]
 8009eec:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	699b      	ldr	r3, [r3, #24]
 8009ef2:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681d      	ldr	r5, [r3, #0]
 8009ef8:	466c      	mov	r4, sp
 8009efa:	f107 0314 	add.w	r3, r7, #20
 8009efe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009f02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009f06:	f107 0308 	add.w	r3, r7, #8
 8009f0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	f001 ffa1 	bl	800be54 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f002 f875 	bl	800c00a <SDMMC_CmdBlockLength>
 8009f20:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f22:	6a3b      	ldr	r3, [r7, #32]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d00c      	beq.n	8009f42 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a0a      	ldr	r2, [pc, #40]	; (8009f58 <HAL_SD_ConfigWideBusOperation+0x130>)
 8009f2e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f34:	6a3b      	ldr	r3, [r7, #32]
 8009f36:	431a      	orrs	r2, r3
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2201      	movs	r2, #1
 8009f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8009f4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3728      	adds	r7, #40	; 0x28
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bdb0      	pop	{r4, r5, r7, pc}
 8009f56:	bf00      	nop
 8009f58:	004005ff 	.word	0x004005ff

08009f5c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b086      	sub	sp, #24
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009f64:	2300      	movs	r3, #0
 8009f66:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009f68:	f107 030c 	add.w	r3, r7, #12
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 f970 	bl	800a254 <SD_SendStatus>
 8009f74:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d005      	beq.n	8009f88 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	431a      	orrs	r2, r3
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	0a5b      	lsrs	r3, r3, #9
 8009f8c:	f003 030f 	and.w	r3, r3, #15
 8009f90:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009f92:	693b      	ldr	r3, [r7, #16]
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3718      	adds	r7, #24
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009f9c:	b5b0      	push	{r4, r5, r7, lr}
 8009f9e:	b094      	sub	sp, #80	; 0x50
 8009fa0:	af04      	add	r7, sp, #16
 8009fa2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4618      	mov	r0, r3
 8009fae:	f001 ffa8 	bl	800bf02 <SDIO_GetPowerState>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d102      	bne.n	8009fbe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009fb8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009fbc:	e0b8      	b.n	800a130 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fc2:	2b03      	cmp	r3, #3
 8009fc4:	d02f      	beq.n	800a026 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f002 f9d2 	bl	800c374 <SDMMC_CmdSendCID>
 8009fd0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d001      	beq.n	8009fdc <SD_InitCard+0x40>
    {
      return errorstate;
 8009fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fda:	e0a9      	b.n	800a130 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	2100      	movs	r1, #0
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f001 ffd2 	bl	800bf8c <SDIO_GetResponse>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	2104      	movs	r1, #4
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f001 ffc9 	bl	800bf8c <SDIO_GetResponse>
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	2108      	movs	r1, #8
 800a006:	4618      	mov	r0, r3
 800a008:	f001 ffc0 	bl	800bf8c <SDIO_GetResponse>
 800a00c:	4602      	mov	r2, r0
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	210c      	movs	r1, #12
 800a018:	4618      	mov	r0, r3
 800a01a:	f001 ffb7 	bl	800bf8c <SDIO_GetResponse>
 800a01e:	4602      	mov	r2, r0
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a02a:	2b03      	cmp	r3, #3
 800a02c:	d00d      	beq.n	800a04a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f107 020e 	add.w	r2, r7, #14
 800a036:	4611      	mov	r1, r2
 800a038:	4618      	mov	r0, r3
 800a03a:	f002 f9d8 	bl	800c3ee <SDMMC_CmdSetRelAdd>
 800a03e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a042:	2b00      	cmp	r3, #0
 800a044:	d001      	beq.n	800a04a <SD_InitCard+0xae>
    {
      return errorstate;
 800a046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a048:	e072      	b.n	800a130 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a04e:	2b03      	cmp	r3, #3
 800a050:	d036      	beq.n	800a0c0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a052:	89fb      	ldrh	r3, [r7, #14]
 800a054:	461a      	mov	r2, r3
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a062:	041b      	lsls	r3, r3, #16
 800a064:	4619      	mov	r1, r3
 800a066:	4610      	mov	r0, r2
 800a068:	f002 f9a2 	bl	800c3b0 <SDMMC_CmdSendCSD>
 800a06c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a06e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a070:	2b00      	cmp	r3, #0
 800a072:	d001      	beq.n	800a078 <SD_InitCard+0xdc>
    {
      return errorstate;
 800a074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a076:	e05b      	b.n	800a130 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	2100      	movs	r1, #0
 800a07e:	4618      	mov	r0, r3
 800a080:	f001 ff84 	bl	800bf8c <SDIO_GetResponse>
 800a084:	4602      	mov	r2, r0
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2104      	movs	r1, #4
 800a090:	4618      	mov	r0, r3
 800a092:	f001 ff7b 	bl	800bf8c <SDIO_GetResponse>
 800a096:	4602      	mov	r2, r0
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2108      	movs	r1, #8
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f001 ff72 	bl	800bf8c <SDIO_GetResponse>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	210c      	movs	r1, #12
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f001 ff69 	bl	800bf8c <SDIO_GetResponse>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	2104      	movs	r1, #4
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f001 ff60 	bl	800bf8c <SDIO_GetResponse>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	0d1a      	lsrs	r2, r3, #20
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a0d4:	f107 0310 	add.w	r3, r7, #16
 800a0d8:	4619      	mov	r1, r3
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f7ff fcd4 	bl	8009a88 <HAL_SD_GetCardCSD>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d002      	beq.n	800a0ec <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a0e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a0ea:	e021      	b.n	800a130 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6819      	ldr	r1, [r3, #0]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0f4:	041b      	lsls	r3, r3, #16
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	461c      	mov	r4, r3
 800a0fa:	4615      	mov	r5, r2
 800a0fc:	4622      	mov	r2, r4
 800a0fe:	462b      	mov	r3, r5
 800a100:	4608      	mov	r0, r1
 800a102:	f002 f84f 	bl	800c1a4 <SDMMC_CmdSelDesel>
 800a106:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d001      	beq.n	800a112 <SD_InitCard+0x176>
  {
    return errorstate;
 800a10e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a110:	e00e      	b.n	800a130 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681d      	ldr	r5, [r3, #0]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	466c      	mov	r4, sp
 800a11a:	f103 0210 	add.w	r2, r3, #16
 800a11e:	ca07      	ldmia	r2, {r0, r1, r2}
 800a120:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a124:	3304      	adds	r3, #4
 800a126:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a128:	4628      	mov	r0, r5
 800a12a:	f001 fe93 	bl	800be54 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a12e:	2300      	movs	r3, #0
}
 800a130:	4618      	mov	r0, r3
 800a132:	3740      	adds	r7, #64	; 0x40
 800a134:	46bd      	mov	sp, r7
 800a136:	bdb0      	pop	{r4, r5, r7, pc}

0800a138 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b086      	sub	sp, #24
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a140:	2300      	movs	r3, #0
 800a142:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a144:	2300      	movs	r3, #0
 800a146:	617b      	str	r3, [r7, #20]
 800a148:	2300      	movs	r3, #0
 800a14a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4618      	mov	r0, r3
 800a152:	f002 f84a 	bl	800c1ea <SDMMC_CmdGoIdleState>
 800a156:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d001      	beq.n	800a162 <SD_PowerON+0x2a>
  {
    return errorstate;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	e072      	b.n	800a248 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4618      	mov	r0, r3
 800a168:	f002 f85d 	bl	800c226 <SDMMC_CmdOperCond>
 800a16c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d00d      	beq.n	800a190 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	4618      	mov	r0, r3
 800a180:	f002 f833 	bl	800c1ea <SDMMC_CmdGoIdleState>
 800a184:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d004      	beq.n	800a196 <SD_PowerON+0x5e>
    {
      return errorstate;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	e05b      	b.n	800a248 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2201      	movs	r2, #1
 800a194:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d137      	bne.n	800a20e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	2100      	movs	r1, #0
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f002 f85d 	bl	800c264 <SDMMC_CmdAppCommand>
 800a1aa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d02d      	beq.n	800a20e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a1b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a1b6:	e047      	b.n	800a248 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	2100      	movs	r1, #0
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f002 f850 	bl	800c264 <SDMMC_CmdAppCommand>
 800a1c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d001      	beq.n	800a1d0 <SD_PowerON+0x98>
    {
      return errorstate;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	e03b      	b.n	800a248 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	491e      	ldr	r1, [pc, #120]	; (800a250 <SD_PowerON+0x118>)
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f002 f866 	bl	800c2a8 <SDMMC_CmdAppOperCommand>
 800a1dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d002      	beq.n	800a1ea <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a1e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a1e8:	e02e      	b.n	800a248 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2100      	movs	r1, #0
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f001 fecb 	bl	800bf8c <SDIO_GetResponse>
 800a1f6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	0fdb      	lsrs	r3, r3, #31
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d101      	bne.n	800a204 <SD_PowerON+0xcc>
 800a200:	2301      	movs	r3, #1
 800a202:	e000      	b.n	800a206 <SD_PowerON+0xce>
 800a204:	2300      	movs	r3, #0
 800a206:	613b      	str	r3, [r7, #16]

    count++;
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	3301      	adds	r3, #1
 800a20c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a214:	4293      	cmp	r3, r2
 800a216:	d802      	bhi.n	800a21e <SD_PowerON+0xe6>
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d0cc      	beq.n	800a1b8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a224:	4293      	cmp	r3, r2
 800a226:	d902      	bls.n	800a22e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a228:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a22c:	e00c      	b.n	800a248 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a234:	2b00      	cmp	r3, #0
 800a236:	d003      	beq.n	800a240 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2201      	movs	r2, #1
 800a23c:	645a      	str	r2, [r3, #68]	; 0x44
 800a23e:	e002      	b.n	800a246 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2200      	movs	r2, #0
 800a244:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a246:	2300      	movs	r3, #0
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3718      	adds	r7, #24
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}
 800a250:	c1100000 	.word	0xc1100000

0800a254 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b084      	sub	sp, #16
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d102      	bne.n	800a26a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a264:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a268:	e018      	b.n	800a29c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a272:	041b      	lsls	r3, r3, #16
 800a274:	4619      	mov	r1, r3
 800a276:	4610      	mov	r0, r2
 800a278:	f002 f8da 	bl	800c430 <SDMMC_CmdSendStatus>
 800a27c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d001      	beq.n	800a288 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	e009      	b.n	800a29c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	2100      	movs	r1, #0
 800a28e:	4618      	mov	r0, r3
 800a290:	f001 fe7c 	bl	800bf8c <SDIO_GetResponse>
 800a294:	4602      	mov	r2, r0
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a29a:	2300      	movs	r3, #0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3710      	adds	r7, #16
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b086      	sub	sp, #24
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	60fb      	str	r3, [r7, #12]
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f001 fe66 	bl	800bf8c <SDIO_GetResponse>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2ca:	d102      	bne.n	800a2d2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a2cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a2d0:	e02f      	b.n	800a332 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a2d2:	f107 030c 	add.w	r3, r7, #12
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f000 f879 	bl	800a3d0 <SD_FindSCR>
 800a2de:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d001      	beq.n	800a2ea <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	e023      	b.n	800a332 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d01c      	beq.n	800a32e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681a      	ldr	r2, [r3, #0]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2fc:	041b      	lsls	r3, r3, #16
 800a2fe:	4619      	mov	r1, r3
 800a300:	4610      	mov	r0, r2
 800a302:	f001 ffaf 	bl	800c264 <SDMMC_CmdAppCommand>
 800a306:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d001      	beq.n	800a312 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	e00f      	b.n	800a332 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2102      	movs	r1, #2
 800a318:	4618      	mov	r0, r3
 800a31a:	f001 ffe8 	bl	800c2ee <SDMMC_CmdBusWidth>
 800a31e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d001      	beq.n	800a32a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	e003      	b.n	800a332 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a32a:	2300      	movs	r3, #0
 800a32c:	e001      	b.n	800a332 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a32e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a332:	4618      	mov	r0, r3
 800a334:	3718      	adds	r7, #24
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}

0800a33a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a33a:	b580      	push	{r7, lr}
 800a33c:	b086      	sub	sp, #24
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a342:	2300      	movs	r3, #0
 800a344:	60fb      	str	r3, [r7, #12]
 800a346:	2300      	movs	r3, #0
 800a348:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	2100      	movs	r1, #0
 800a350:	4618      	mov	r0, r3
 800a352:	f001 fe1b 	bl	800bf8c <SDIO_GetResponse>
 800a356:	4603      	mov	r3, r0
 800a358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a35c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a360:	d102      	bne.n	800a368 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a362:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a366:	e02f      	b.n	800a3c8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a368:	f107 030c 	add.w	r3, r7, #12
 800a36c:	4619      	mov	r1, r3
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 f82e 	bl	800a3d0 <SD_FindSCR>
 800a374:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d001      	beq.n	800a380 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	e023      	b.n	800a3c8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a386:	2b00      	cmp	r3, #0
 800a388:	d01c      	beq.n	800a3c4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a392:	041b      	lsls	r3, r3, #16
 800a394:	4619      	mov	r1, r3
 800a396:	4610      	mov	r0, r2
 800a398:	f001 ff64 	bl	800c264 <SDMMC_CmdAppCommand>
 800a39c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d001      	beq.n	800a3a8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	e00f      	b.n	800a3c8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	2100      	movs	r1, #0
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f001 ff9d 	bl	800c2ee <SDMMC_CmdBusWidth>
 800a3b4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d001      	beq.n	800a3c0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	e003      	b.n	800a3c8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	e001      	b.n	800a3c8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a3c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3718      	adds	r7, #24
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a3d0:	b590      	push	{r4, r7, lr}
 800a3d2:	b08f      	sub	sp, #60	; 0x3c
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a3da:	f7fa f863 	bl	80044a4 <HAL_GetTick>
 800a3de:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	60bb      	str	r3, [r7, #8]
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	2108      	movs	r1, #8
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f001 fe07 	bl	800c00a <SDMMC_CmdBlockLength>
 800a3fc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a400:	2b00      	cmp	r3, #0
 800a402:	d001      	beq.n	800a408 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a406:	e0b2      	b.n	800a56e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a410:	041b      	lsls	r3, r3, #16
 800a412:	4619      	mov	r1, r3
 800a414:	4610      	mov	r0, r2
 800a416:	f001 ff25 	bl	800c264 <SDMMC_CmdAppCommand>
 800a41a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d001      	beq.n	800a426 <SD_FindSCR+0x56>
  {
    return errorstate;
 800a422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a424:	e0a3      	b.n	800a56e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a426:	f04f 33ff 	mov.w	r3, #4294967295
 800a42a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a42c:	2308      	movs	r3, #8
 800a42e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800a430:	2330      	movs	r3, #48	; 0x30
 800a432:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a434:	2302      	movs	r3, #2
 800a436:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a438:	2300      	movs	r3, #0
 800a43a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800a43c:	2301      	movs	r3, #1
 800a43e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f107 0210 	add.w	r2, r7, #16
 800a448:	4611      	mov	r1, r2
 800a44a:	4618      	mov	r0, r3
 800a44c:	f001 fdb1 	bl	800bfb2 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4618      	mov	r0, r3
 800a456:	f001 ff6c 	bl	800c332 <SDMMC_CmdSendSCR>
 800a45a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d02a      	beq.n	800a4b8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800a462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a464:	e083      	b.n	800a56e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a46c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a470:	2b00      	cmp	r3, #0
 800a472:	d00f      	beq.n	800a494 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6819      	ldr	r1, [r3, #0]
 800a478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	f107 0208 	add.w	r2, r7, #8
 800a480:	18d4      	adds	r4, r2, r3
 800a482:	4608      	mov	r0, r1
 800a484:	f001 fd11 	bl	800beaa <SDIO_ReadFIFO>
 800a488:	4603      	mov	r3, r0
 800a48a:	6023      	str	r3, [r4, #0]
      index++;
 800a48c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a48e:	3301      	adds	r3, #1
 800a490:	637b      	str	r3, [r7, #52]	; 0x34
 800a492:	e006      	b.n	800a4a2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a49a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d012      	beq.n	800a4c8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a4a2:	f7f9 ffff 	bl	80044a4 <HAL_GetTick>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4aa:	1ad3      	subs	r3, r2, r3
 800a4ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4b0:	d102      	bne.n	800a4b8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a4b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a4b6:	e05a      	b.n	800a56e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4be:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d0cf      	beq.n	800a466 <SD_FindSCR+0x96>
 800a4c6:	e000      	b.n	800a4ca <SD_FindSCR+0xfa>
      break;
 800a4c8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4d0:	f003 0308 	and.w	r3, r3, #8
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d005      	beq.n	800a4e4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	2208      	movs	r2, #8
 800a4de:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a4e0:	2308      	movs	r3, #8
 800a4e2:	e044      	b.n	800a56e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4ea:	f003 0302 	and.w	r3, r3, #2
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d005      	beq.n	800a4fe <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	2202      	movs	r2, #2
 800a4f8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a4fa:	2302      	movs	r3, #2
 800a4fc:	e037      	b.n	800a56e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a504:	f003 0320 	and.w	r3, r3, #32
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d005      	beq.n	800a518 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	2220      	movs	r2, #32
 800a512:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a514:	2320      	movs	r3, #32
 800a516:	e02a      	b.n	800a56e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f240 523a 	movw	r2, #1338	; 0x53a
 800a520:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	061a      	lsls	r2, r3, #24
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	021b      	lsls	r3, r3, #8
 800a52a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a52e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	0a1b      	lsrs	r3, r3, #8
 800a534:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a538:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	0e1b      	lsrs	r3, r3, #24
 800a53e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a542:	601a      	str	r2, [r3, #0]
    scr++;
 800a544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a546:	3304      	adds	r3, #4
 800a548:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	061a      	lsls	r2, r3, #24
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	021b      	lsls	r3, r3, #8
 800a552:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a556:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	0a1b      	lsrs	r3, r3, #8
 800a55c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a560:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	0e1b      	lsrs	r3, r3, #24
 800a566:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a56c:	2300      	movs	r3, #0
}
 800a56e:	4618      	mov	r0, r3
 800a570:	373c      	adds	r7, #60	; 0x3c
 800a572:	46bd      	mov	sp, r7
 800a574:	bd90      	pop	{r4, r7, pc}

0800a576 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a576:	b580      	push	{r7, lr}
 800a578:	b082      	sub	sp, #8
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d101      	bne.n	800a588 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a584:	2301      	movs	r3, #1
 800a586:	e07b      	b.n	800a680 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d108      	bne.n	800a5a2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a598:	d009      	beq.n	800a5ae <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2200      	movs	r2, #0
 800a59e:	61da      	str	r2, [r3, #28]
 800a5a0:	e005      	b.n	800a5ae <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d106      	bne.n	800a5ce <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f7f8 ff05 	bl	80033d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2202      	movs	r2, #2
 800a5d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5e4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	689b      	ldr	r3, [r3, #8]
 800a5f2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a5f6:	431a      	orrs	r2, r3
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	68db      	ldr	r3, [r3, #12]
 800a5fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a600:	431a      	orrs	r2, r3
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	691b      	ldr	r3, [r3, #16]
 800a606:	f003 0302 	and.w	r3, r3, #2
 800a60a:	431a      	orrs	r2, r3
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	695b      	ldr	r3, [r3, #20]
 800a610:	f003 0301 	and.w	r3, r3, #1
 800a614:	431a      	orrs	r2, r3
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	699b      	ldr	r3, [r3, #24]
 800a61a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a61e:	431a      	orrs	r2, r3
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	69db      	ldr	r3, [r3, #28]
 800a624:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a628:	431a      	orrs	r2, r3
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a1b      	ldr	r3, [r3, #32]
 800a62e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a632:	ea42 0103 	orr.w	r1, r2, r3
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a63a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	430a      	orrs	r2, r1
 800a644:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	699b      	ldr	r3, [r3, #24]
 800a64a:	0c1b      	lsrs	r3, r3, #16
 800a64c:	f003 0104 	and.w	r1, r3, #4
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a654:	f003 0210 	and.w	r2, r3, #16
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	430a      	orrs	r2, r1
 800a65e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	69da      	ldr	r2, [r3, #28]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a66e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2200      	movs	r2, #0
 800a674:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2201      	movs	r2, #1
 800a67a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a67e:	2300      	movs	r3, #0
}
 800a680:	4618      	mov	r0, r3
 800a682:	3708      	adds	r7, #8
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b088      	sub	sp, #32
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	60b9      	str	r1, [r7, #8]
 800a692:	603b      	str	r3, [r7, #0]
 800a694:	4613      	mov	r3, r2
 800a696:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a698:	2300      	movs	r3, #0
 800a69a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d101      	bne.n	800a6aa <HAL_SPI_Transmit+0x22>
 800a6a6:	2302      	movs	r3, #2
 800a6a8:	e126      	b.n	800a8f8 <HAL_SPI_Transmit+0x270>
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a6b2:	f7f9 fef7 	bl	80044a4 <HAL_GetTick>
 800a6b6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a6b8:	88fb      	ldrh	r3, [r7, #6]
 800a6ba:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d002      	beq.n	800a6ce <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a6c8:	2302      	movs	r3, #2
 800a6ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a6cc:	e10b      	b.n	800a8e6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d002      	beq.n	800a6da <HAL_SPI_Transmit+0x52>
 800a6d4:	88fb      	ldrh	r3, [r7, #6]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d102      	bne.n	800a6e0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a6de:	e102      	b.n	800a8e6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2203      	movs	r2, #3
 800a6e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	68ba      	ldr	r2, [r7, #8]
 800a6f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	88fa      	ldrh	r2, [r7, #6]
 800a6f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	88fa      	ldrh	r2, [r7, #6]
 800a6fe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2200      	movs	r2, #0
 800a704:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2200      	movs	r2, #0
 800a70a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2200      	movs	r2, #0
 800a710:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2200      	movs	r2, #0
 800a716:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2200      	movs	r2, #0
 800a71c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	689b      	ldr	r3, [r3, #8]
 800a722:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a726:	d10f      	bne.n	800a748 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a736:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	681a      	ldr	r2, [r3, #0]
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a746:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a752:	2b40      	cmp	r3, #64	; 0x40
 800a754:	d007      	beq.n	800a766 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a764:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a76e:	d14b      	bne.n	800a808 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d002      	beq.n	800a77e <HAL_SPI_Transmit+0xf6>
 800a778:	8afb      	ldrh	r3, [r7, #22]
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d13e      	bne.n	800a7fc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a782:	881a      	ldrh	r2, [r3, #0]
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a78e:	1c9a      	adds	r2, r3, #2
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a798:	b29b      	uxth	r3, r3
 800a79a:	3b01      	subs	r3, #1
 800a79c:	b29a      	uxth	r2, r3
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a7a2:	e02b      	b.n	800a7fc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	689b      	ldr	r3, [r3, #8]
 800a7aa:	f003 0302 	and.w	r3, r3, #2
 800a7ae:	2b02      	cmp	r3, #2
 800a7b0:	d112      	bne.n	800a7d8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7b6:	881a      	ldrh	r2, [r3, #0]
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7c2:	1c9a      	adds	r2, r3, #2
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	3b01      	subs	r3, #1
 800a7d0:	b29a      	uxth	r2, r3
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	86da      	strh	r2, [r3, #54]	; 0x36
 800a7d6:	e011      	b.n	800a7fc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a7d8:	f7f9 fe64 	bl	80044a4 <HAL_GetTick>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	1ad3      	subs	r3, r2, r3
 800a7e2:	683a      	ldr	r2, [r7, #0]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d803      	bhi.n	800a7f0 <HAL_SPI_Transmit+0x168>
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ee:	d102      	bne.n	800a7f6 <HAL_SPI_Transmit+0x16e>
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d102      	bne.n	800a7fc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800a7f6:	2303      	movs	r3, #3
 800a7f8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a7fa:	e074      	b.n	800a8e6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a800:	b29b      	uxth	r3, r3
 800a802:	2b00      	cmp	r3, #0
 800a804:	d1ce      	bne.n	800a7a4 <HAL_SPI_Transmit+0x11c>
 800a806:	e04c      	b.n	800a8a2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	685b      	ldr	r3, [r3, #4]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d002      	beq.n	800a816 <HAL_SPI_Transmit+0x18e>
 800a810:	8afb      	ldrh	r3, [r7, #22]
 800a812:	2b01      	cmp	r3, #1
 800a814:	d140      	bne.n	800a898 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	330c      	adds	r3, #12
 800a820:	7812      	ldrb	r2, [r2, #0]
 800a822:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a828:	1c5a      	adds	r2, r3, #1
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a832:	b29b      	uxth	r3, r3
 800a834:	3b01      	subs	r3, #1
 800a836:	b29a      	uxth	r2, r3
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a83c:	e02c      	b.n	800a898 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	689b      	ldr	r3, [r3, #8]
 800a844:	f003 0302 	and.w	r3, r3, #2
 800a848:	2b02      	cmp	r3, #2
 800a84a:	d113      	bne.n	800a874 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	330c      	adds	r3, #12
 800a856:	7812      	ldrb	r2, [r2, #0]
 800a858:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a85e:	1c5a      	adds	r2, r3, #1
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a868:	b29b      	uxth	r3, r3
 800a86a:	3b01      	subs	r3, #1
 800a86c:	b29a      	uxth	r2, r3
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	86da      	strh	r2, [r3, #54]	; 0x36
 800a872:	e011      	b.n	800a898 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a874:	f7f9 fe16 	bl	80044a4 <HAL_GetTick>
 800a878:	4602      	mov	r2, r0
 800a87a:	69bb      	ldr	r3, [r7, #24]
 800a87c:	1ad3      	subs	r3, r2, r3
 800a87e:	683a      	ldr	r2, [r7, #0]
 800a880:	429a      	cmp	r2, r3
 800a882:	d803      	bhi.n	800a88c <HAL_SPI_Transmit+0x204>
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a88a:	d102      	bne.n	800a892 <HAL_SPI_Transmit+0x20a>
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d102      	bne.n	800a898 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800a892:	2303      	movs	r3, #3
 800a894:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a896:	e026      	b.n	800a8e6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a89c:	b29b      	uxth	r3, r3
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d1cd      	bne.n	800a83e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a8a2:	69ba      	ldr	r2, [r7, #24]
 800a8a4:	6839      	ldr	r1, [r7, #0]
 800a8a6:	68f8      	ldr	r0, [r7, #12]
 800a8a8:	f000 fa62 	bl	800ad70 <SPI_EndRxTxTransaction>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d002      	beq.n	800a8b8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2220      	movs	r2, #32
 800a8b6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	689b      	ldr	r3, [r3, #8]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d10a      	bne.n	800a8d6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	613b      	str	r3, [r7, #16]
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	68db      	ldr	r3, [r3, #12]
 800a8ca:	613b      	str	r3, [r7, #16]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	689b      	ldr	r3, [r3, #8]
 800a8d2:	613b      	str	r3, [r7, #16]
 800a8d4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d002      	beq.n	800a8e4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	77fb      	strb	r3, [r7, #31]
 800a8e2:	e000      	b.n	800a8e6 <HAL_SPI_Transmit+0x25e>
  }

error:
 800a8e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a8f6:	7ffb      	ldrb	r3, [r7, #31]
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3720      	adds	r7, #32
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b08c      	sub	sp, #48	; 0x30
 800a904:	af00      	add	r7, sp, #0
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	60b9      	str	r1, [r7, #8]
 800a90a:	607a      	str	r2, [r7, #4]
 800a90c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a90e:	2301      	movs	r3, #1
 800a910:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a912:	2300      	movs	r3, #0
 800a914:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d101      	bne.n	800a926 <HAL_SPI_TransmitReceive+0x26>
 800a922:	2302      	movs	r3, #2
 800a924:	e18a      	b.n	800ac3c <HAL_SPI_TransmitReceive+0x33c>
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2201      	movs	r2, #1
 800a92a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a92e:	f7f9 fdb9 	bl	80044a4 <HAL_GetTick>
 800a932:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a93a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a944:	887b      	ldrh	r3, [r7, #2]
 800a946:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a948:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a94c:	2b01      	cmp	r3, #1
 800a94e:	d00f      	beq.n	800a970 <HAL_SPI_TransmitReceive+0x70>
 800a950:	69fb      	ldr	r3, [r7, #28]
 800a952:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a956:	d107      	bne.n	800a968 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	689b      	ldr	r3, [r3, #8]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d103      	bne.n	800a968 <HAL_SPI_TransmitReceive+0x68>
 800a960:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a964:	2b04      	cmp	r3, #4
 800a966:	d003      	beq.n	800a970 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a968:	2302      	movs	r3, #2
 800a96a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a96e:	e15b      	b.n	800ac28 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d005      	beq.n	800a982 <HAL_SPI_TransmitReceive+0x82>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d002      	beq.n	800a982 <HAL_SPI_TransmitReceive+0x82>
 800a97c:	887b      	ldrh	r3, [r7, #2]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d103      	bne.n	800a98a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a982:	2301      	movs	r3, #1
 800a984:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a988:	e14e      	b.n	800ac28 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a990:	b2db      	uxtb	r3, r3
 800a992:	2b04      	cmp	r3, #4
 800a994:	d003      	beq.n	800a99e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2205      	movs	r2, #5
 800a99a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	687a      	ldr	r2, [r7, #4]
 800a9a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	887a      	ldrh	r2, [r7, #2]
 800a9ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	887a      	ldrh	r2, [r7, #2]
 800a9b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	68ba      	ldr	r2, [r7, #8]
 800a9ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	887a      	ldrh	r2, [r7, #2]
 800a9c0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	887a      	ldrh	r2, [r7, #2]
 800a9c6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9de:	2b40      	cmp	r3, #64	; 0x40
 800a9e0:	d007      	beq.n	800a9f2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	681a      	ldr	r2, [r3, #0]
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a9f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	68db      	ldr	r3, [r3, #12]
 800a9f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9fa:	d178      	bne.n	800aaee <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d002      	beq.n	800aa0a <HAL_SPI_TransmitReceive+0x10a>
 800aa04:	8b7b      	ldrh	r3, [r7, #26]
 800aa06:	2b01      	cmp	r3, #1
 800aa08:	d166      	bne.n	800aad8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa0e:	881a      	ldrh	r2, [r3, #0]
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa1a:	1c9a      	adds	r2, r3, #2
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa24:	b29b      	uxth	r3, r3
 800aa26:	3b01      	subs	r3, #1
 800aa28:	b29a      	uxth	r2, r3
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aa2e:	e053      	b.n	800aad8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	689b      	ldr	r3, [r3, #8]
 800aa36:	f003 0302 	and.w	r3, r3, #2
 800aa3a:	2b02      	cmp	r3, #2
 800aa3c:	d11b      	bne.n	800aa76 <HAL_SPI_TransmitReceive+0x176>
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d016      	beq.n	800aa76 <HAL_SPI_TransmitReceive+0x176>
 800aa48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d113      	bne.n	800aa76 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa52:	881a      	ldrh	r2, [r3, #0]
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa5e:	1c9a      	adds	r2, r3, #2
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa68:	b29b      	uxth	r3, r3
 800aa6a:	3b01      	subs	r3, #1
 800aa6c:	b29a      	uxth	r2, r3
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aa72:	2300      	movs	r3, #0
 800aa74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	689b      	ldr	r3, [r3, #8]
 800aa7c:	f003 0301 	and.w	r3, r3, #1
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d119      	bne.n	800aab8 <HAL_SPI_TransmitReceive+0x1b8>
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa88:	b29b      	uxth	r3, r3
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d014      	beq.n	800aab8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	68da      	ldr	r2, [r3, #12]
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa98:	b292      	uxth	r2, r2
 800aa9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaa0:	1c9a      	adds	r2, r3, #2
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	3b01      	subs	r3, #1
 800aaae:	b29a      	uxth	r2, r3
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800aab4:	2301      	movs	r3, #1
 800aab6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800aab8:	f7f9 fcf4 	bl	80044a4 <HAL_GetTick>
 800aabc:	4602      	mov	r2, r0
 800aabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac0:	1ad3      	subs	r3, r2, r3
 800aac2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d807      	bhi.n	800aad8 <HAL_SPI_TransmitReceive+0x1d8>
 800aac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aace:	d003      	beq.n	800aad8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800aad0:	2303      	movs	r3, #3
 800aad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800aad6:	e0a7      	b.n	800ac28 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aadc:	b29b      	uxth	r3, r3
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d1a6      	bne.n	800aa30 <HAL_SPI_TransmitReceive+0x130>
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aae6:	b29b      	uxth	r3, r3
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d1a1      	bne.n	800aa30 <HAL_SPI_TransmitReceive+0x130>
 800aaec:	e07c      	b.n	800abe8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d002      	beq.n	800aafc <HAL_SPI_TransmitReceive+0x1fc>
 800aaf6:	8b7b      	ldrh	r3, [r7, #26]
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	d16b      	bne.n	800abd4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	330c      	adds	r3, #12
 800ab06:	7812      	ldrb	r2, [r2, #0]
 800ab08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab0e:	1c5a      	adds	r2, r3, #1
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab18:	b29b      	uxth	r3, r3
 800ab1a:	3b01      	subs	r3, #1
 800ab1c:	b29a      	uxth	r2, r3
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ab22:	e057      	b.n	800abd4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	689b      	ldr	r3, [r3, #8]
 800ab2a:	f003 0302 	and.w	r3, r3, #2
 800ab2e:	2b02      	cmp	r3, #2
 800ab30:	d11c      	bne.n	800ab6c <HAL_SPI_TransmitReceive+0x26c>
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab36:	b29b      	uxth	r3, r3
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d017      	beq.n	800ab6c <HAL_SPI_TransmitReceive+0x26c>
 800ab3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d114      	bne.n	800ab6c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	330c      	adds	r3, #12
 800ab4c:	7812      	ldrb	r2, [r2, #0]
 800ab4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab54:	1c5a      	adds	r2, r3, #1
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab5e:	b29b      	uxth	r3, r3
 800ab60:	3b01      	subs	r3, #1
 800ab62:	b29a      	uxth	r2, r3
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	689b      	ldr	r3, [r3, #8]
 800ab72:	f003 0301 	and.w	r3, r3, #1
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d119      	bne.n	800abae <HAL_SPI_TransmitReceive+0x2ae>
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab7e:	b29b      	uxth	r3, r3
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d014      	beq.n	800abae <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	68da      	ldr	r2, [r3, #12]
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab8e:	b2d2      	uxtb	r2, r2
 800ab90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab96:	1c5a      	adds	r2, r3, #1
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	3b01      	subs	r3, #1
 800aba4:	b29a      	uxth	r2, r3
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800abaa:	2301      	movs	r3, #1
 800abac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800abae:	f7f9 fc79 	bl	80044a4 <HAL_GetTick>
 800abb2:	4602      	mov	r2, r0
 800abb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb6:	1ad3      	subs	r3, r2, r3
 800abb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800abba:	429a      	cmp	r2, r3
 800abbc:	d803      	bhi.n	800abc6 <HAL_SPI_TransmitReceive+0x2c6>
 800abbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abc4:	d102      	bne.n	800abcc <HAL_SPI_TransmitReceive+0x2cc>
 800abc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d103      	bne.n	800abd4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800abcc:	2303      	movs	r3, #3
 800abce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800abd2:	e029      	b.n	800ac28 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800abd8:	b29b      	uxth	r3, r3
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d1a2      	bne.n	800ab24 <HAL_SPI_TransmitReceive+0x224>
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d19d      	bne.n	800ab24 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800abe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800abec:	68f8      	ldr	r0, [r7, #12]
 800abee:	f000 f8bf 	bl	800ad70 <SPI_EndRxTxTransaction>
 800abf2:	4603      	mov	r3, r0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d006      	beq.n	800ac06 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800abf8:	2301      	movs	r3, #1
 800abfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2220      	movs	r2, #32
 800ac02:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ac04:	e010      	b.n	800ac28 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	689b      	ldr	r3, [r3, #8]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d10b      	bne.n	800ac26 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ac0e:	2300      	movs	r3, #0
 800ac10:	617b      	str	r3, [r7, #20]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	68db      	ldr	r3, [r3, #12]
 800ac18:	617b      	str	r3, [r7, #20]
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	617b      	str	r3, [r7, #20]
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	e000      	b.n	800ac28 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ac26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2200      	movs	r2, #0
 800ac34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ac38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3730      	adds	r7, #48	; 0x30
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ac52:	b2db      	uxtb	r3, r3
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	370c      	adds	r7, #12
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr

0800ac60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b088      	sub	sp, #32
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	60f8      	str	r0, [r7, #12]
 800ac68:	60b9      	str	r1, [r7, #8]
 800ac6a:	603b      	str	r3, [r7, #0]
 800ac6c:	4613      	mov	r3, r2
 800ac6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ac70:	f7f9 fc18 	bl	80044a4 <HAL_GetTick>
 800ac74:	4602      	mov	r2, r0
 800ac76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac78:	1a9b      	subs	r3, r3, r2
 800ac7a:	683a      	ldr	r2, [r7, #0]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ac80:	f7f9 fc10 	bl	80044a4 <HAL_GetTick>
 800ac84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ac86:	4b39      	ldr	r3, [pc, #228]	; (800ad6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	015b      	lsls	r3, r3, #5
 800ac8c:	0d1b      	lsrs	r3, r3, #20
 800ac8e:	69fa      	ldr	r2, [r7, #28]
 800ac90:	fb02 f303 	mul.w	r3, r2, r3
 800ac94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ac96:	e054      	b.n	800ad42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac9e:	d050      	beq.n	800ad42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800aca0:	f7f9 fc00 	bl	80044a4 <HAL_GetTick>
 800aca4:	4602      	mov	r2, r0
 800aca6:	69bb      	ldr	r3, [r7, #24]
 800aca8:	1ad3      	subs	r3, r2, r3
 800acaa:	69fa      	ldr	r2, [r7, #28]
 800acac:	429a      	cmp	r2, r3
 800acae:	d902      	bls.n	800acb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800acb0:	69fb      	ldr	r3, [r7, #28]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d13d      	bne.n	800ad32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	685a      	ldr	r2, [r3, #4]
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800acc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800acce:	d111      	bne.n	800acf4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	689b      	ldr	r3, [r3, #8]
 800acd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800acd8:	d004      	beq.n	800ace4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	689b      	ldr	r3, [r3, #8]
 800acde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ace2:	d107      	bne.n	800acf4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800acf2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acfc:	d10f      	bne.n	800ad1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ad0c:	601a      	str	r2, [r3, #0]
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ad1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2201      	movs	r2, #1
 800ad22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ad2e:	2303      	movs	r3, #3
 800ad30:	e017      	b.n	800ad62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d101      	bne.n	800ad3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	3b01      	subs	r3, #1
 800ad40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	689a      	ldr	r2, [r3, #8]
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	4013      	ands	r3, r2
 800ad4c:	68ba      	ldr	r2, [r7, #8]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	bf0c      	ite	eq
 800ad52:	2301      	moveq	r3, #1
 800ad54:	2300      	movne	r3, #0
 800ad56:	b2db      	uxtb	r3, r3
 800ad58:	461a      	mov	r2, r3
 800ad5a:	79fb      	ldrb	r3, [r7, #7]
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	d19b      	bne.n	800ac98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ad60:	2300      	movs	r3, #0
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3720      	adds	r7, #32
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	20000014 	.word	0x20000014

0800ad70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b088      	sub	sp, #32
 800ad74:	af02      	add	r7, sp, #8
 800ad76:	60f8      	str	r0, [r7, #12]
 800ad78:	60b9      	str	r1, [r7, #8]
 800ad7a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ad7c:	4b1b      	ldr	r3, [pc, #108]	; (800adec <SPI_EndRxTxTransaction+0x7c>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4a1b      	ldr	r2, [pc, #108]	; (800adf0 <SPI_EndRxTxTransaction+0x80>)
 800ad82:	fba2 2303 	umull	r2, r3, r2, r3
 800ad86:	0d5b      	lsrs	r3, r3, #21
 800ad88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ad8c:	fb02 f303 	mul.w	r3, r2, r3
 800ad90:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ad9a:	d112      	bne.n	800adc2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	9300      	str	r3, [sp, #0]
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	2200      	movs	r2, #0
 800ada4:	2180      	movs	r1, #128	; 0x80
 800ada6:	68f8      	ldr	r0, [r7, #12]
 800ada8:	f7ff ff5a 	bl	800ac60 <SPI_WaitFlagStateUntilTimeout>
 800adac:	4603      	mov	r3, r0
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d016      	beq.n	800ade0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adb6:	f043 0220 	orr.w	r2, r3, #32
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800adbe:	2303      	movs	r3, #3
 800adc0:	e00f      	b.n	800ade2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d00a      	beq.n	800adde <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	3b01      	subs	r3, #1
 800adcc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	689b      	ldr	r3, [r3, #8]
 800add4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800add8:	2b80      	cmp	r3, #128	; 0x80
 800adda:	d0f2      	beq.n	800adc2 <SPI_EndRxTxTransaction+0x52>
 800addc:	e000      	b.n	800ade0 <SPI_EndRxTxTransaction+0x70>
        break;
 800adde:	bf00      	nop
  }

  return HAL_OK;
 800ade0:	2300      	movs	r3, #0
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3718      	adds	r7, #24
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	20000014 	.word	0x20000014
 800adf0:	165e9f81 	.word	0x165e9f81

0800adf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b082      	sub	sp, #8
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d101      	bne.n	800ae06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ae02:	2301      	movs	r3, #1
 800ae04:	e041      	b.n	800ae8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d106      	bne.n	800ae20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2200      	movs	r2, #0
 800ae16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f7f8 fe84 	bl	8003b28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2202      	movs	r2, #2
 800ae24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681a      	ldr	r2, [r3, #0]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	3304      	adds	r3, #4
 800ae30:	4619      	mov	r1, r3
 800ae32:	4610      	mov	r0, r2
 800ae34:	f000 fc42 	bl	800b6bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2201      	movs	r2, #1
 800ae44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2201      	movs	r2, #1
 800ae54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2201      	movs	r2, #1
 800ae64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2201      	movs	r2, #1
 800ae74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2201      	movs	r2, #1
 800ae84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ae88:	2300      	movs	r3, #0
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3708      	adds	r7, #8
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
	...

0800ae94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b085      	sub	sp, #20
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d001      	beq.n	800aeac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800aea8:	2301      	movs	r3, #1
 800aeaa:	e046      	b.n	800af3a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2202      	movs	r2, #2
 800aeb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4a23      	ldr	r2, [pc, #140]	; (800af48 <HAL_TIM_Base_Start+0xb4>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d022      	beq.n	800af04 <HAL_TIM_Base_Start+0x70>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aec6:	d01d      	beq.n	800af04 <HAL_TIM_Base_Start+0x70>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4a1f      	ldr	r2, [pc, #124]	; (800af4c <HAL_TIM_Base_Start+0xb8>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d018      	beq.n	800af04 <HAL_TIM_Base_Start+0x70>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4a1e      	ldr	r2, [pc, #120]	; (800af50 <HAL_TIM_Base_Start+0xbc>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d013      	beq.n	800af04 <HAL_TIM_Base_Start+0x70>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4a1c      	ldr	r2, [pc, #112]	; (800af54 <HAL_TIM_Base_Start+0xc0>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d00e      	beq.n	800af04 <HAL_TIM_Base_Start+0x70>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4a1b      	ldr	r2, [pc, #108]	; (800af58 <HAL_TIM_Base_Start+0xc4>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d009      	beq.n	800af04 <HAL_TIM_Base_Start+0x70>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	4a19      	ldr	r2, [pc, #100]	; (800af5c <HAL_TIM_Base_Start+0xc8>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d004      	beq.n	800af04 <HAL_TIM_Base_Start+0x70>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	4a18      	ldr	r2, [pc, #96]	; (800af60 <HAL_TIM_Base_Start+0xcc>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d111      	bne.n	800af28 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	689b      	ldr	r3, [r3, #8]
 800af0a:	f003 0307 	and.w	r3, r3, #7
 800af0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	2b06      	cmp	r3, #6
 800af14:	d010      	beq.n	800af38 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f042 0201 	orr.w	r2, r2, #1
 800af24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af26:	e007      	b.n	800af38 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	681a      	ldr	r2, [r3, #0]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f042 0201 	orr.w	r2, r2, #1
 800af36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800af38:	2300      	movs	r3, #0
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3714      	adds	r7, #20
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr
 800af46:	bf00      	nop
 800af48:	40010000 	.word	0x40010000
 800af4c:	40000400 	.word	0x40000400
 800af50:	40000800 	.word	0x40000800
 800af54:	40000c00 	.word	0x40000c00
 800af58:	40010400 	.word	0x40010400
 800af5c:	40014000 	.word	0x40014000
 800af60:	40001800 	.word	0x40001800

0800af64 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800af64:	b480      	push	{r7}
 800af66:	b083      	sub	sp, #12
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	6a1a      	ldr	r2, [r3, #32]
 800af72:	f241 1311 	movw	r3, #4369	; 0x1111
 800af76:	4013      	ands	r3, r2
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d10f      	bne.n	800af9c <HAL_TIM_Base_Stop+0x38>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	6a1a      	ldr	r2, [r3, #32]
 800af82:	f240 4344 	movw	r3, #1092	; 0x444
 800af86:	4013      	ands	r3, r2
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d107      	bne.n	800af9c <HAL_TIM_Base_Stop+0x38>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	681a      	ldr	r2, [r3, #0]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f022 0201 	bic.w	r2, r2, #1
 800af9a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2201      	movs	r2, #1
 800afa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800afa4:	2300      	movs	r3, #0
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	370c      	adds	r7, #12
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr
	...

0800afb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b085      	sub	sp, #20
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	d001      	beq.n	800afcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800afc8:	2301      	movs	r3, #1
 800afca:	e04e      	b.n	800b06a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2202      	movs	r2, #2
 800afd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	68da      	ldr	r2, [r3, #12]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f042 0201 	orr.w	r2, r2, #1
 800afe2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4a23      	ldr	r2, [pc, #140]	; (800b078 <HAL_TIM_Base_Start_IT+0xc4>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d022      	beq.n	800b034 <HAL_TIM_Base_Start_IT+0x80>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aff6:	d01d      	beq.n	800b034 <HAL_TIM_Base_Start_IT+0x80>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	4a1f      	ldr	r2, [pc, #124]	; (800b07c <HAL_TIM_Base_Start_IT+0xc8>)
 800affe:	4293      	cmp	r3, r2
 800b000:	d018      	beq.n	800b034 <HAL_TIM_Base_Start_IT+0x80>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	4a1e      	ldr	r2, [pc, #120]	; (800b080 <HAL_TIM_Base_Start_IT+0xcc>)
 800b008:	4293      	cmp	r3, r2
 800b00a:	d013      	beq.n	800b034 <HAL_TIM_Base_Start_IT+0x80>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4a1c      	ldr	r2, [pc, #112]	; (800b084 <HAL_TIM_Base_Start_IT+0xd0>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d00e      	beq.n	800b034 <HAL_TIM_Base_Start_IT+0x80>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4a1b      	ldr	r2, [pc, #108]	; (800b088 <HAL_TIM_Base_Start_IT+0xd4>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d009      	beq.n	800b034 <HAL_TIM_Base_Start_IT+0x80>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4a19      	ldr	r2, [pc, #100]	; (800b08c <HAL_TIM_Base_Start_IT+0xd8>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d004      	beq.n	800b034 <HAL_TIM_Base_Start_IT+0x80>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4a18      	ldr	r2, [pc, #96]	; (800b090 <HAL_TIM_Base_Start_IT+0xdc>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d111      	bne.n	800b058 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	689b      	ldr	r3, [r3, #8]
 800b03a:	f003 0307 	and.w	r3, r3, #7
 800b03e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2b06      	cmp	r3, #6
 800b044:	d010      	beq.n	800b068 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	681a      	ldr	r2, [r3, #0]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f042 0201 	orr.w	r2, r2, #1
 800b054:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b056:	e007      	b.n	800b068 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f042 0201 	orr.w	r2, r2, #1
 800b066:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b068:	2300      	movs	r3, #0
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3714      	adds	r7, #20
 800b06e:	46bd      	mov	sp, r7
 800b070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b074:	4770      	bx	lr
 800b076:	bf00      	nop
 800b078:	40010000 	.word	0x40010000
 800b07c:	40000400 	.word	0x40000400
 800b080:	40000800 	.word	0x40000800
 800b084:	40000c00 	.word	0x40000c00
 800b088:	40010400 	.word	0x40010400
 800b08c:	40014000 	.word	0x40014000
 800b090:	40001800 	.word	0x40001800

0800b094 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b082      	sub	sp, #8
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d101      	bne.n	800b0a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	e041      	b.n	800b12a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d106      	bne.n	800b0c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f000 f839 	bl	800b132 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2202      	movs	r2, #2
 800b0c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681a      	ldr	r2, [r3, #0]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	3304      	adds	r3, #4
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	4610      	mov	r0, r2
 800b0d4:	f000 faf2 	bl	800b6bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2201      	movs	r2, #1
 800b0dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2201      	movs	r2, #1
 800b104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2201      	movs	r2, #1
 800b10c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2201      	movs	r2, #1
 800b114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2201      	movs	r2, #1
 800b11c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2201      	movs	r2, #1
 800b124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b128:	2300      	movs	r3, #0
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3708      	adds	r7, #8
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}

0800b132 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b132:	b480      	push	{r7}
 800b134:	b083      	sub	sp, #12
 800b136:	af00      	add	r7, sp, #0
 800b138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b13a:	bf00      	nop
 800b13c:	370c      	adds	r7, #12
 800b13e:	46bd      	mov	sp, r7
 800b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b144:	4770      	bx	lr

0800b146 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b146:	b580      	push	{r7, lr}
 800b148:	b082      	sub	sp, #8
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	691b      	ldr	r3, [r3, #16]
 800b154:	f003 0302 	and.w	r3, r3, #2
 800b158:	2b02      	cmp	r3, #2
 800b15a:	d122      	bne.n	800b1a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	68db      	ldr	r3, [r3, #12]
 800b162:	f003 0302 	and.w	r3, r3, #2
 800b166:	2b02      	cmp	r3, #2
 800b168:	d11b      	bne.n	800b1a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f06f 0202 	mvn.w	r2, #2
 800b172:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2201      	movs	r2, #1
 800b178:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	699b      	ldr	r3, [r3, #24]
 800b180:	f003 0303 	and.w	r3, r3, #3
 800b184:	2b00      	cmp	r3, #0
 800b186:	d003      	beq.n	800b190 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 fa78 	bl	800b67e <HAL_TIM_IC_CaptureCallback>
 800b18e:	e005      	b.n	800b19c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f000 fa6a 	bl	800b66a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f000 fa7b 	bl	800b692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	691b      	ldr	r3, [r3, #16]
 800b1a8:	f003 0304 	and.w	r3, r3, #4
 800b1ac:	2b04      	cmp	r3, #4
 800b1ae:	d122      	bne.n	800b1f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	68db      	ldr	r3, [r3, #12]
 800b1b6:	f003 0304 	and.w	r3, r3, #4
 800b1ba:	2b04      	cmp	r3, #4
 800b1bc:	d11b      	bne.n	800b1f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f06f 0204 	mvn.w	r2, #4
 800b1c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2202      	movs	r2, #2
 800b1cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	699b      	ldr	r3, [r3, #24]
 800b1d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d003      	beq.n	800b1e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f000 fa4e 	bl	800b67e <HAL_TIM_IC_CaptureCallback>
 800b1e2:	e005      	b.n	800b1f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f000 fa40 	bl	800b66a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f000 fa51 	bl	800b692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	691b      	ldr	r3, [r3, #16]
 800b1fc:	f003 0308 	and.w	r3, r3, #8
 800b200:	2b08      	cmp	r3, #8
 800b202:	d122      	bne.n	800b24a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	68db      	ldr	r3, [r3, #12]
 800b20a:	f003 0308 	and.w	r3, r3, #8
 800b20e:	2b08      	cmp	r3, #8
 800b210:	d11b      	bne.n	800b24a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f06f 0208 	mvn.w	r2, #8
 800b21a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2204      	movs	r2, #4
 800b220:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	69db      	ldr	r3, [r3, #28]
 800b228:	f003 0303 	and.w	r3, r3, #3
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d003      	beq.n	800b238 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 fa24 	bl	800b67e <HAL_TIM_IC_CaptureCallback>
 800b236:	e005      	b.n	800b244 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f000 fa16 	bl	800b66a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f000 fa27 	bl	800b692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2200      	movs	r2, #0
 800b248:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	691b      	ldr	r3, [r3, #16]
 800b250:	f003 0310 	and.w	r3, r3, #16
 800b254:	2b10      	cmp	r3, #16
 800b256:	d122      	bne.n	800b29e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	68db      	ldr	r3, [r3, #12]
 800b25e:	f003 0310 	and.w	r3, r3, #16
 800b262:	2b10      	cmp	r3, #16
 800b264:	d11b      	bne.n	800b29e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f06f 0210 	mvn.w	r2, #16
 800b26e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2208      	movs	r2, #8
 800b274:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	69db      	ldr	r3, [r3, #28]
 800b27c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b280:	2b00      	cmp	r3, #0
 800b282:	d003      	beq.n	800b28c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f000 f9fa 	bl	800b67e <HAL_TIM_IC_CaptureCallback>
 800b28a:	e005      	b.n	800b298 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f000 f9ec 	bl	800b66a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f000 f9fd 	bl	800b692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2200      	movs	r2, #0
 800b29c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	691b      	ldr	r3, [r3, #16]
 800b2a4:	f003 0301 	and.w	r3, r3, #1
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	d10e      	bne.n	800b2ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	68db      	ldr	r3, [r3, #12]
 800b2b2:	f003 0301 	and.w	r3, r3, #1
 800b2b6:	2b01      	cmp	r3, #1
 800b2b8:	d107      	bne.n	800b2ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f06f 0201 	mvn.w	r2, #1
 800b2c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f7f7 fce5 	bl	8002c94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	691b      	ldr	r3, [r3, #16]
 800b2d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2d4:	2b80      	cmp	r3, #128	; 0x80
 800b2d6:	d10e      	bne.n	800b2f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	68db      	ldr	r3, [r3, #12]
 800b2de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2e2:	2b80      	cmp	r3, #128	; 0x80
 800b2e4:	d107      	bne.n	800b2f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b2ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f000 fda5 	bl	800be40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	691b      	ldr	r3, [r3, #16]
 800b2fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b300:	2b40      	cmp	r3, #64	; 0x40
 800b302:	d10e      	bne.n	800b322 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	68db      	ldr	r3, [r3, #12]
 800b30a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b30e:	2b40      	cmp	r3, #64	; 0x40
 800b310:	d107      	bne.n	800b322 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b31a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 f9c2 	bl	800b6a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	691b      	ldr	r3, [r3, #16]
 800b328:	f003 0320 	and.w	r3, r3, #32
 800b32c:	2b20      	cmp	r3, #32
 800b32e:	d10e      	bne.n	800b34e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	68db      	ldr	r3, [r3, #12]
 800b336:	f003 0320 	and.w	r3, r3, #32
 800b33a:	2b20      	cmp	r3, #32
 800b33c:	d107      	bne.n	800b34e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f06f 0220 	mvn.w	r2, #32
 800b346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f000 fd6f 	bl	800be2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b34e:	bf00      	nop
 800b350:	3708      	adds	r7, #8
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
	...

0800b358 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b086      	sub	sp, #24
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	60f8      	str	r0, [r7, #12]
 800b360:	60b9      	str	r1, [r7, #8]
 800b362:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b364:	2300      	movs	r3, #0
 800b366:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b36e:	2b01      	cmp	r3, #1
 800b370:	d101      	bne.n	800b376 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b372:	2302      	movs	r3, #2
 800b374:	e0ae      	b.n	800b4d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2201      	movs	r2, #1
 800b37a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2b0c      	cmp	r3, #12
 800b382:	f200 809f 	bhi.w	800b4c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b386:	a201      	add	r2, pc, #4	; (adr r2, 800b38c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b38c:	0800b3c1 	.word	0x0800b3c1
 800b390:	0800b4c5 	.word	0x0800b4c5
 800b394:	0800b4c5 	.word	0x0800b4c5
 800b398:	0800b4c5 	.word	0x0800b4c5
 800b39c:	0800b401 	.word	0x0800b401
 800b3a0:	0800b4c5 	.word	0x0800b4c5
 800b3a4:	0800b4c5 	.word	0x0800b4c5
 800b3a8:	0800b4c5 	.word	0x0800b4c5
 800b3ac:	0800b443 	.word	0x0800b443
 800b3b0:	0800b4c5 	.word	0x0800b4c5
 800b3b4:	0800b4c5 	.word	0x0800b4c5
 800b3b8:	0800b4c5 	.word	0x0800b4c5
 800b3bc:	0800b483 	.word	0x0800b483
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	68b9      	ldr	r1, [r7, #8]
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f000 fa18 	bl	800b7fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	699a      	ldr	r2, [r3, #24]
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f042 0208 	orr.w	r2, r2, #8
 800b3da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	699a      	ldr	r2, [r3, #24]
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f022 0204 	bic.w	r2, r2, #4
 800b3ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	6999      	ldr	r1, [r3, #24]
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	691a      	ldr	r2, [r3, #16]
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	430a      	orrs	r2, r1
 800b3fc:	619a      	str	r2, [r3, #24]
      break;
 800b3fe:	e064      	b.n	800b4ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	68b9      	ldr	r1, [r7, #8]
 800b406:	4618      	mov	r0, r3
 800b408:	f000 fa68 	bl	800b8dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	699a      	ldr	r2, [r3, #24]
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b41a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	699a      	ldr	r2, [r3, #24]
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b42a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	6999      	ldr	r1, [r3, #24]
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	691b      	ldr	r3, [r3, #16]
 800b436:	021a      	lsls	r2, r3, #8
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	430a      	orrs	r2, r1
 800b43e:	619a      	str	r2, [r3, #24]
      break;
 800b440:	e043      	b.n	800b4ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	68b9      	ldr	r1, [r7, #8]
 800b448:	4618      	mov	r0, r3
 800b44a:	f000 fabd 	bl	800b9c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	69da      	ldr	r2, [r3, #28]
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f042 0208 	orr.w	r2, r2, #8
 800b45c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	69da      	ldr	r2, [r3, #28]
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f022 0204 	bic.w	r2, r2, #4
 800b46c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	69d9      	ldr	r1, [r3, #28]
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	691a      	ldr	r2, [r3, #16]
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	430a      	orrs	r2, r1
 800b47e:	61da      	str	r2, [r3, #28]
      break;
 800b480:	e023      	b.n	800b4ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	68b9      	ldr	r1, [r7, #8]
 800b488:	4618      	mov	r0, r3
 800b48a:	f000 fb11 	bl	800bab0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	69da      	ldr	r2, [r3, #28]
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b49c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	69da      	ldr	r2, [r3, #28]
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	69d9      	ldr	r1, [r3, #28]
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	691b      	ldr	r3, [r3, #16]
 800b4b8:	021a      	lsls	r2, r3, #8
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	430a      	orrs	r2, r1
 800b4c0:	61da      	str	r2, [r3, #28]
      break;
 800b4c2:	e002      	b.n	800b4ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	75fb      	strb	r3, [r7, #23]
      break;
 800b4c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b4d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3718      	adds	r7, #24
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d101      	bne.n	800b4f8 <HAL_TIM_ConfigClockSource+0x1c>
 800b4f4:	2302      	movs	r3, #2
 800b4f6:	e0b4      	b.n	800b662 <HAL_TIM_ConfigClockSource+0x186>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2202      	movs	r2, #2
 800b504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	689b      	ldr	r3, [r3, #8]
 800b50e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b516:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b51e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	68ba      	ldr	r2, [r7, #8]
 800b526:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b530:	d03e      	beq.n	800b5b0 <HAL_TIM_ConfigClockSource+0xd4>
 800b532:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b536:	f200 8087 	bhi.w	800b648 <HAL_TIM_ConfigClockSource+0x16c>
 800b53a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b53e:	f000 8086 	beq.w	800b64e <HAL_TIM_ConfigClockSource+0x172>
 800b542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b546:	d87f      	bhi.n	800b648 <HAL_TIM_ConfigClockSource+0x16c>
 800b548:	2b70      	cmp	r3, #112	; 0x70
 800b54a:	d01a      	beq.n	800b582 <HAL_TIM_ConfigClockSource+0xa6>
 800b54c:	2b70      	cmp	r3, #112	; 0x70
 800b54e:	d87b      	bhi.n	800b648 <HAL_TIM_ConfigClockSource+0x16c>
 800b550:	2b60      	cmp	r3, #96	; 0x60
 800b552:	d050      	beq.n	800b5f6 <HAL_TIM_ConfigClockSource+0x11a>
 800b554:	2b60      	cmp	r3, #96	; 0x60
 800b556:	d877      	bhi.n	800b648 <HAL_TIM_ConfigClockSource+0x16c>
 800b558:	2b50      	cmp	r3, #80	; 0x50
 800b55a:	d03c      	beq.n	800b5d6 <HAL_TIM_ConfigClockSource+0xfa>
 800b55c:	2b50      	cmp	r3, #80	; 0x50
 800b55e:	d873      	bhi.n	800b648 <HAL_TIM_ConfigClockSource+0x16c>
 800b560:	2b40      	cmp	r3, #64	; 0x40
 800b562:	d058      	beq.n	800b616 <HAL_TIM_ConfigClockSource+0x13a>
 800b564:	2b40      	cmp	r3, #64	; 0x40
 800b566:	d86f      	bhi.n	800b648 <HAL_TIM_ConfigClockSource+0x16c>
 800b568:	2b30      	cmp	r3, #48	; 0x30
 800b56a:	d064      	beq.n	800b636 <HAL_TIM_ConfigClockSource+0x15a>
 800b56c:	2b30      	cmp	r3, #48	; 0x30
 800b56e:	d86b      	bhi.n	800b648 <HAL_TIM_ConfigClockSource+0x16c>
 800b570:	2b20      	cmp	r3, #32
 800b572:	d060      	beq.n	800b636 <HAL_TIM_ConfigClockSource+0x15a>
 800b574:	2b20      	cmp	r3, #32
 800b576:	d867      	bhi.n	800b648 <HAL_TIM_ConfigClockSource+0x16c>
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d05c      	beq.n	800b636 <HAL_TIM_ConfigClockSource+0x15a>
 800b57c:	2b10      	cmp	r3, #16
 800b57e:	d05a      	beq.n	800b636 <HAL_TIM_ConfigClockSource+0x15a>
 800b580:	e062      	b.n	800b648 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6818      	ldr	r0, [r3, #0]
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	6899      	ldr	r1, [r3, #8]
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	685a      	ldr	r2, [r3, #4]
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	68db      	ldr	r3, [r3, #12]
 800b592:	f000 fb5d 	bl	800bc50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	689b      	ldr	r3, [r3, #8]
 800b59c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b5a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	68ba      	ldr	r2, [r7, #8]
 800b5ac:	609a      	str	r2, [r3, #8]
      break;
 800b5ae:	e04f      	b.n	800b650 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6818      	ldr	r0, [r3, #0]
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	6899      	ldr	r1, [r3, #8]
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	685a      	ldr	r2, [r3, #4]
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	68db      	ldr	r3, [r3, #12]
 800b5c0:	f000 fb46 	bl	800bc50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	689a      	ldr	r2, [r3, #8]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b5d2:	609a      	str	r2, [r3, #8]
      break;
 800b5d4:	e03c      	b.n	800b650 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6818      	ldr	r0, [r3, #0]
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	6859      	ldr	r1, [r3, #4]
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	68db      	ldr	r3, [r3, #12]
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	f000 faba 	bl	800bb5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	2150      	movs	r1, #80	; 0x50
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f000 fb13 	bl	800bc1a <TIM_ITRx_SetConfig>
      break;
 800b5f4:	e02c      	b.n	800b650 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6818      	ldr	r0, [r3, #0]
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	6859      	ldr	r1, [r3, #4]
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	68db      	ldr	r3, [r3, #12]
 800b602:	461a      	mov	r2, r3
 800b604:	f000 fad9 	bl	800bbba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	2160      	movs	r1, #96	; 0x60
 800b60e:	4618      	mov	r0, r3
 800b610:	f000 fb03 	bl	800bc1a <TIM_ITRx_SetConfig>
      break;
 800b614:	e01c      	b.n	800b650 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6818      	ldr	r0, [r3, #0]
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	6859      	ldr	r1, [r3, #4]
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	68db      	ldr	r3, [r3, #12]
 800b622:	461a      	mov	r2, r3
 800b624:	f000 fa9a 	bl	800bb5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	2140      	movs	r1, #64	; 0x40
 800b62e:	4618      	mov	r0, r3
 800b630:	f000 faf3 	bl	800bc1a <TIM_ITRx_SetConfig>
      break;
 800b634:	e00c      	b.n	800b650 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681a      	ldr	r2, [r3, #0]
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	4619      	mov	r1, r3
 800b640:	4610      	mov	r0, r2
 800b642:	f000 faea 	bl	800bc1a <TIM_ITRx_SetConfig>
      break;
 800b646:	e003      	b.n	800b650 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b648:	2301      	movs	r3, #1
 800b64a:	73fb      	strb	r3, [r7, #15]
      break;
 800b64c:	e000      	b.n	800b650 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b64e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2201      	movs	r2, #1
 800b654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2200      	movs	r2, #0
 800b65c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b660:	7bfb      	ldrb	r3, [r7, #15]
}
 800b662:	4618      	mov	r0, r3
 800b664:	3710      	adds	r7, #16
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}

0800b66a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b66a:	b480      	push	{r7}
 800b66c:	b083      	sub	sp, #12
 800b66e:	af00      	add	r7, sp, #0
 800b670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b672:	bf00      	nop
 800b674:	370c      	adds	r7, #12
 800b676:	46bd      	mov	sp, r7
 800b678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67c:	4770      	bx	lr

0800b67e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b67e:	b480      	push	{r7}
 800b680:	b083      	sub	sp, #12
 800b682:	af00      	add	r7, sp, #0
 800b684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b686:	bf00      	nop
 800b688:	370c      	adds	r7, #12
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr

0800b692 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b692:	b480      	push	{r7}
 800b694:	b083      	sub	sp, #12
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b69a:	bf00      	nop
 800b69c:	370c      	adds	r7, #12
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr

0800b6a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b6a6:	b480      	push	{r7}
 800b6a8:	b083      	sub	sp, #12
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b6ae:	bf00      	nop
 800b6b0:	370c      	adds	r7, #12
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b8:	4770      	bx	lr
	...

0800b6bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b085      	sub	sp, #20
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	4a40      	ldr	r2, [pc, #256]	; (800b7d0 <TIM_Base_SetConfig+0x114>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d013      	beq.n	800b6fc <TIM_Base_SetConfig+0x40>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6da:	d00f      	beq.n	800b6fc <TIM_Base_SetConfig+0x40>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	4a3d      	ldr	r2, [pc, #244]	; (800b7d4 <TIM_Base_SetConfig+0x118>)
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d00b      	beq.n	800b6fc <TIM_Base_SetConfig+0x40>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	4a3c      	ldr	r2, [pc, #240]	; (800b7d8 <TIM_Base_SetConfig+0x11c>)
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d007      	beq.n	800b6fc <TIM_Base_SetConfig+0x40>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	4a3b      	ldr	r2, [pc, #236]	; (800b7dc <TIM_Base_SetConfig+0x120>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d003      	beq.n	800b6fc <TIM_Base_SetConfig+0x40>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	4a3a      	ldr	r2, [pc, #232]	; (800b7e0 <TIM_Base_SetConfig+0x124>)
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d108      	bne.n	800b70e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b702:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	68fa      	ldr	r2, [r7, #12]
 800b70a:	4313      	orrs	r3, r2
 800b70c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	4a2f      	ldr	r2, [pc, #188]	; (800b7d0 <TIM_Base_SetConfig+0x114>)
 800b712:	4293      	cmp	r3, r2
 800b714:	d02b      	beq.n	800b76e <TIM_Base_SetConfig+0xb2>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b71c:	d027      	beq.n	800b76e <TIM_Base_SetConfig+0xb2>
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	4a2c      	ldr	r2, [pc, #176]	; (800b7d4 <TIM_Base_SetConfig+0x118>)
 800b722:	4293      	cmp	r3, r2
 800b724:	d023      	beq.n	800b76e <TIM_Base_SetConfig+0xb2>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	4a2b      	ldr	r2, [pc, #172]	; (800b7d8 <TIM_Base_SetConfig+0x11c>)
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d01f      	beq.n	800b76e <TIM_Base_SetConfig+0xb2>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	4a2a      	ldr	r2, [pc, #168]	; (800b7dc <TIM_Base_SetConfig+0x120>)
 800b732:	4293      	cmp	r3, r2
 800b734:	d01b      	beq.n	800b76e <TIM_Base_SetConfig+0xb2>
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	4a29      	ldr	r2, [pc, #164]	; (800b7e0 <TIM_Base_SetConfig+0x124>)
 800b73a:	4293      	cmp	r3, r2
 800b73c:	d017      	beq.n	800b76e <TIM_Base_SetConfig+0xb2>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	4a28      	ldr	r2, [pc, #160]	; (800b7e4 <TIM_Base_SetConfig+0x128>)
 800b742:	4293      	cmp	r3, r2
 800b744:	d013      	beq.n	800b76e <TIM_Base_SetConfig+0xb2>
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	4a27      	ldr	r2, [pc, #156]	; (800b7e8 <TIM_Base_SetConfig+0x12c>)
 800b74a:	4293      	cmp	r3, r2
 800b74c:	d00f      	beq.n	800b76e <TIM_Base_SetConfig+0xb2>
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	4a26      	ldr	r2, [pc, #152]	; (800b7ec <TIM_Base_SetConfig+0x130>)
 800b752:	4293      	cmp	r3, r2
 800b754:	d00b      	beq.n	800b76e <TIM_Base_SetConfig+0xb2>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	4a25      	ldr	r2, [pc, #148]	; (800b7f0 <TIM_Base_SetConfig+0x134>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d007      	beq.n	800b76e <TIM_Base_SetConfig+0xb2>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	4a24      	ldr	r2, [pc, #144]	; (800b7f4 <TIM_Base_SetConfig+0x138>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d003      	beq.n	800b76e <TIM_Base_SetConfig+0xb2>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	4a23      	ldr	r2, [pc, #140]	; (800b7f8 <TIM_Base_SetConfig+0x13c>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d108      	bne.n	800b780 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	68db      	ldr	r3, [r3, #12]
 800b77a:	68fa      	ldr	r2, [r7, #12]
 800b77c:	4313      	orrs	r3, r2
 800b77e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	695b      	ldr	r3, [r3, #20]
 800b78a:	4313      	orrs	r3, r2
 800b78c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	68fa      	ldr	r2, [r7, #12]
 800b792:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	689a      	ldr	r2, [r3, #8]
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	681a      	ldr	r2, [r3, #0]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	4a0a      	ldr	r2, [pc, #40]	; (800b7d0 <TIM_Base_SetConfig+0x114>)
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d003      	beq.n	800b7b4 <TIM_Base_SetConfig+0xf8>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	4a0c      	ldr	r2, [pc, #48]	; (800b7e0 <TIM_Base_SetConfig+0x124>)
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	d103      	bne.n	800b7bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	691a      	ldr	r2, [r3, #16]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2201      	movs	r2, #1
 800b7c0:	615a      	str	r2, [r3, #20]
}
 800b7c2:	bf00      	nop
 800b7c4:	3714      	adds	r7, #20
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7cc:	4770      	bx	lr
 800b7ce:	bf00      	nop
 800b7d0:	40010000 	.word	0x40010000
 800b7d4:	40000400 	.word	0x40000400
 800b7d8:	40000800 	.word	0x40000800
 800b7dc:	40000c00 	.word	0x40000c00
 800b7e0:	40010400 	.word	0x40010400
 800b7e4:	40014000 	.word	0x40014000
 800b7e8:	40014400 	.word	0x40014400
 800b7ec:	40014800 	.word	0x40014800
 800b7f0:	40001800 	.word	0x40001800
 800b7f4:	40001c00 	.word	0x40001c00
 800b7f8:	40002000 	.word	0x40002000

0800b7fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b087      	sub	sp, #28
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6a1b      	ldr	r3, [r3, #32]
 800b80a:	f023 0201 	bic.w	r2, r3, #1
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6a1b      	ldr	r3, [r3, #32]
 800b816:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	699b      	ldr	r3, [r3, #24]
 800b822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b82a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	f023 0303 	bic.w	r3, r3, #3
 800b832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	68fa      	ldr	r2, [r7, #12]
 800b83a:	4313      	orrs	r3, r2
 800b83c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	f023 0302 	bic.w	r3, r3, #2
 800b844:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	689b      	ldr	r3, [r3, #8]
 800b84a:	697a      	ldr	r2, [r7, #20]
 800b84c:	4313      	orrs	r3, r2
 800b84e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	4a20      	ldr	r2, [pc, #128]	; (800b8d4 <TIM_OC1_SetConfig+0xd8>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d003      	beq.n	800b860 <TIM_OC1_SetConfig+0x64>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	4a1f      	ldr	r2, [pc, #124]	; (800b8d8 <TIM_OC1_SetConfig+0xdc>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d10c      	bne.n	800b87a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	f023 0308 	bic.w	r3, r3, #8
 800b866:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	68db      	ldr	r3, [r3, #12]
 800b86c:	697a      	ldr	r2, [r7, #20]
 800b86e:	4313      	orrs	r3, r2
 800b870:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	f023 0304 	bic.w	r3, r3, #4
 800b878:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	4a15      	ldr	r2, [pc, #84]	; (800b8d4 <TIM_OC1_SetConfig+0xd8>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d003      	beq.n	800b88a <TIM_OC1_SetConfig+0x8e>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	4a14      	ldr	r2, [pc, #80]	; (800b8d8 <TIM_OC1_SetConfig+0xdc>)
 800b886:	4293      	cmp	r3, r2
 800b888:	d111      	bne.n	800b8ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b890:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b898:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	695b      	ldr	r3, [r3, #20]
 800b89e:	693a      	ldr	r2, [r7, #16]
 800b8a0:	4313      	orrs	r3, r2
 800b8a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	699b      	ldr	r3, [r3, #24]
 800b8a8:	693a      	ldr	r2, [r7, #16]
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	693a      	ldr	r2, [r7, #16]
 800b8b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	68fa      	ldr	r2, [r7, #12]
 800b8b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	685a      	ldr	r2, [r3, #4]
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	697a      	ldr	r2, [r7, #20]
 800b8c6:	621a      	str	r2, [r3, #32]
}
 800b8c8:	bf00      	nop
 800b8ca:	371c      	adds	r7, #28
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr
 800b8d4:	40010000 	.word	0x40010000
 800b8d8:	40010400 	.word	0x40010400

0800b8dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b087      	sub	sp, #28
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6a1b      	ldr	r3, [r3, #32]
 800b8ea:	f023 0210 	bic.w	r2, r3, #16
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6a1b      	ldr	r3, [r3, #32]
 800b8f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	685b      	ldr	r3, [r3, #4]
 800b8fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	699b      	ldr	r3, [r3, #24]
 800b902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b90a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b912:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	021b      	lsls	r3, r3, #8
 800b91a:	68fa      	ldr	r2, [r7, #12]
 800b91c:	4313      	orrs	r3, r2
 800b91e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	f023 0320 	bic.w	r3, r3, #32
 800b926:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	689b      	ldr	r3, [r3, #8]
 800b92c:	011b      	lsls	r3, r3, #4
 800b92e:	697a      	ldr	r2, [r7, #20]
 800b930:	4313      	orrs	r3, r2
 800b932:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	4a22      	ldr	r2, [pc, #136]	; (800b9c0 <TIM_OC2_SetConfig+0xe4>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d003      	beq.n	800b944 <TIM_OC2_SetConfig+0x68>
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	4a21      	ldr	r2, [pc, #132]	; (800b9c4 <TIM_OC2_SetConfig+0xe8>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d10d      	bne.n	800b960 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b94a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	68db      	ldr	r3, [r3, #12]
 800b950:	011b      	lsls	r3, r3, #4
 800b952:	697a      	ldr	r2, [r7, #20]
 800b954:	4313      	orrs	r3, r2
 800b956:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b95e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	4a17      	ldr	r2, [pc, #92]	; (800b9c0 <TIM_OC2_SetConfig+0xe4>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d003      	beq.n	800b970 <TIM_OC2_SetConfig+0x94>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	4a16      	ldr	r2, [pc, #88]	; (800b9c4 <TIM_OC2_SetConfig+0xe8>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d113      	bne.n	800b998 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b976:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b97e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	695b      	ldr	r3, [r3, #20]
 800b984:	009b      	lsls	r3, r3, #2
 800b986:	693a      	ldr	r2, [r7, #16]
 800b988:	4313      	orrs	r3, r2
 800b98a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	699b      	ldr	r3, [r3, #24]
 800b990:	009b      	lsls	r3, r3, #2
 800b992:	693a      	ldr	r2, [r7, #16]
 800b994:	4313      	orrs	r3, r2
 800b996:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	693a      	ldr	r2, [r7, #16]
 800b99c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	68fa      	ldr	r2, [r7, #12]
 800b9a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	685a      	ldr	r2, [r3, #4]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	697a      	ldr	r2, [r7, #20]
 800b9b0:	621a      	str	r2, [r3, #32]
}
 800b9b2:	bf00      	nop
 800b9b4:	371c      	adds	r7, #28
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9bc:	4770      	bx	lr
 800b9be:	bf00      	nop
 800b9c0:	40010000 	.word	0x40010000
 800b9c4:	40010400 	.word	0x40010400

0800b9c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b087      	sub	sp, #28
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6a1b      	ldr	r3, [r3, #32]
 800b9d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6a1b      	ldr	r3, [r3, #32]
 800b9e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	685b      	ldr	r3, [r3, #4]
 800b9e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	69db      	ldr	r3, [r3, #28]
 800b9ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f023 0303 	bic.w	r3, r3, #3
 800b9fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	68fa      	ldr	r2, [r7, #12]
 800ba06:	4313      	orrs	r3, r2
 800ba08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ba10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	689b      	ldr	r3, [r3, #8]
 800ba16:	021b      	lsls	r3, r3, #8
 800ba18:	697a      	ldr	r2, [r7, #20]
 800ba1a:	4313      	orrs	r3, r2
 800ba1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	4a21      	ldr	r2, [pc, #132]	; (800baa8 <TIM_OC3_SetConfig+0xe0>)
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d003      	beq.n	800ba2e <TIM_OC3_SetConfig+0x66>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	4a20      	ldr	r2, [pc, #128]	; (800baac <TIM_OC3_SetConfig+0xe4>)
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d10d      	bne.n	800ba4a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ba34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	68db      	ldr	r3, [r3, #12]
 800ba3a:	021b      	lsls	r3, r3, #8
 800ba3c:	697a      	ldr	r2, [r7, #20]
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ba48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	4a16      	ldr	r2, [pc, #88]	; (800baa8 <TIM_OC3_SetConfig+0xe0>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d003      	beq.n	800ba5a <TIM_OC3_SetConfig+0x92>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	4a15      	ldr	r2, [pc, #84]	; (800baac <TIM_OC3_SetConfig+0xe4>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d113      	bne.n	800ba82 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ba68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	695b      	ldr	r3, [r3, #20]
 800ba6e:	011b      	lsls	r3, r3, #4
 800ba70:	693a      	ldr	r2, [r7, #16]
 800ba72:	4313      	orrs	r3, r2
 800ba74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	699b      	ldr	r3, [r3, #24]
 800ba7a:	011b      	lsls	r3, r3, #4
 800ba7c:	693a      	ldr	r2, [r7, #16]
 800ba7e:	4313      	orrs	r3, r2
 800ba80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	693a      	ldr	r2, [r7, #16]
 800ba86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	68fa      	ldr	r2, [r7, #12]
 800ba8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	685a      	ldr	r2, [r3, #4]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	697a      	ldr	r2, [r7, #20]
 800ba9a:	621a      	str	r2, [r3, #32]
}
 800ba9c:	bf00      	nop
 800ba9e:	371c      	adds	r7, #28
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr
 800baa8:	40010000 	.word	0x40010000
 800baac:	40010400 	.word	0x40010400

0800bab0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bab0:	b480      	push	{r7}
 800bab2:	b087      	sub	sp, #28
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
 800bab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6a1b      	ldr	r3, [r3, #32]
 800babe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6a1b      	ldr	r3, [r3, #32]
 800baca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	69db      	ldr	r3, [r3, #28]
 800bad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bae6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	021b      	lsls	r3, r3, #8
 800baee:	68fa      	ldr	r2, [r7, #12]
 800baf0:	4313      	orrs	r3, r2
 800baf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bafa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	689b      	ldr	r3, [r3, #8]
 800bb00:	031b      	lsls	r3, r3, #12
 800bb02:	693a      	ldr	r2, [r7, #16]
 800bb04:	4313      	orrs	r3, r2
 800bb06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	4a12      	ldr	r2, [pc, #72]	; (800bb54 <TIM_OC4_SetConfig+0xa4>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d003      	beq.n	800bb18 <TIM_OC4_SetConfig+0x68>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	4a11      	ldr	r2, [pc, #68]	; (800bb58 <TIM_OC4_SetConfig+0xa8>)
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d109      	bne.n	800bb2c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	695b      	ldr	r3, [r3, #20]
 800bb24:	019b      	lsls	r3, r3, #6
 800bb26:	697a      	ldr	r2, [r7, #20]
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	697a      	ldr	r2, [r7, #20]
 800bb30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	68fa      	ldr	r2, [r7, #12]
 800bb36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	685a      	ldr	r2, [r3, #4]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	693a      	ldr	r2, [r7, #16]
 800bb44:	621a      	str	r2, [r3, #32]
}
 800bb46:	bf00      	nop
 800bb48:	371c      	adds	r7, #28
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb50:	4770      	bx	lr
 800bb52:	bf00      	nop
 800bb54:	40010000 	.word	0x40010000
 800bb58:	40010400 	.word	0x40010400

0800bb5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b087      	sub	sp, #28
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	60f8      	str	r0, [r7, #12]
 800bb64:	60b9      	str	r1, [r7, #8]
 800bb66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	6a1b      	ldr	r3, [r3, #32]
 800bb6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	6a1b      	ldr	r3, [r3, #32]
 800bb72:	f023 0201 	bic.w	r2, r3, #1
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	699b      	ldr	r3, [r3, #24]
 800bb7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bb86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	011b      	lsls	r3, r3, #4
 800bb8c:	693a      	ldr	r2, [r7, #16]
 800bb8e:	4313      	orrs	r3, r2
 800bb90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	f023 030a 	bic.w	r3, r3, #10
 800bb98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bb9a:	697a      	ldr	r2, [r7, #20]
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	693a      	ldr	r2, [r7, #16]
 800bba6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	697a      	ldr	r2, [r7, #20]
 800bbac:	621a      	str	r2, [r3, #32]
}
 800bbae:	bf00      	nop
 800bbb0:	371c      	adds	r7, #28
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb8:	4770      	bx	lr

0800bbba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bbba:	b480      	push	{r7}
 800bbbc:	b087      	sub	sp, #28
 800bbbe:	af00      	add	r7, sp, #0
 800bbc0:	60f8      	str	r0, [r7, #12]
 800bbc2:	60b9      	str	r1, [r7, #8]
 800bbc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	6a1b      	ldr	r3, [r3, #32]
 800bbca:	f023 0210 	bic.w	r2, r3, #16
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	699b      	ldr	r3, [r3, #24]
 800bbd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	6a1b      	ldr	r3, [r3, #32]
 800bbdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bbe4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	031b      	lsls	r3, r3, #12
 800bbea:	697a      	ldr	r2, [r7, #20]
 800bbec:	4313      	orrs	r3, r2
 800bbee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bbf6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	011b      	lsls	r3, r3, #4
 800bbfc:	693a      	ldr	r2, [r7, #16]
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	697a      	ldr	r2, [r7, #20]
 800bc06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	693a      	ldr	r2, [r7, #16]
 800bc0c:	621a      	str	r2, [r3, #32]
}
 800bc0e:	bf00      	nop
 800bc10:	371c      	adds	r7, #28
 800bc12:	46bd      	mov	sp, r7
 800bc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc18:	4770      	bx	lr

0800bc1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bc1a:	b480      	push	{r7}
 800bc1c:	b085      	sub	sp, #20
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	6078      	str	r0, [r7, #4]
 800bc22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	689b      	ldr	r3, [r3, #8]
 800bc28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bc32:	683a      	ldr	r2, [r7, #0]
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	4313      	orrs	r3, r2
 800bc38:	f043 0307 	orr.w	r3, r3, #7
 800bc3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	68fa      	ldr	r2, [r7, #12]
 800bc42:	609a      	str	r2, [r3, #8]
}
 800bc44:	bf00      	nop
 800bc46:	3714      	adds	r7, #20
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4e:	4770      	bx	lr

0800bc50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b087      	sub	sp, #28
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	60f8      	str	r0, [r7, #12]
 800bc58:	60b9      	str	r1, [r7, #8]
 800bc5a:	607a      	str	r2, [r7, #4]
 800bc5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	689b      	ldr	r3, [r3, #8]
 800bc62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	021a      	lsls	r2, r3, #8
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	431a      	orrs	r2, r3
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	4313      	orrs	r3, r2
 800bc78:	697a      	ldr	r2, [r7, #20]
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	697a      	ldr	r2, [r7, #20]
 800bc82:	609a      	str	r2, [r3, #8]
}
 800bc84:	bf00      	nop
 800bc86:	371c      	adds	r7, #28
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr

0800bc90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b085      	sub	sp, #20
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	d101      	bne.n	800bca8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bca4:	2302      	movs	r3, #2
 800bca6:	e05a      	b.n	800bd5e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2201      	movs	r2, #1
 800bcac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2202      	movs	r2, #2
 800bcb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	689b      	ldr	r3, [r3, #8]
 800bcc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	68fa      	ldr	r2, [r7, #12]
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	68fa      	ldr	r2, [r7, #12]
 800bce0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	4a21      	ldr	r2, [pc, #132]	; (800bd6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d022      	beq.n	800bd32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcf4:	d01d      	beq.n	800bd32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	4a1d      	ldr	r2, [pc, #116]	; (800bd70 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d018      	beq.n	800bd32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	4a1b      	ldr	r2, [pc, #108]	; (800bd74 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d013      	beq.n	800bd32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	4a1a      	ldr	r2, [pc, #104]	; (800bd78 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d00e      	beq.n	800bd32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	4a18      	ldr	r2, [pc, #96]	; (800bd7c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d009      	beq.n	800bd32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	4a17      	ldr	r2, [pc, #92]	; (800bd80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d004      	beq.n	800bd32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	4a15      	ldr	r2, [pc, #84]	; (800bd84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d10c      	bne.n	800bd4c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	685b      	ldr	r3, [r3, #4]
 800bd3e:	68ba      	ldr	r2, [r7, #8]
 800bd40:	4313      	orrs	r3, r2
 800bd42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	68ba      	ldr	r2, [r7, #8]
 800bd4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2201      	movs	r2, #1
 800bd50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2200      	movs	r2, #0
 800bd58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bd5c:	2300      	movs	r3, #0
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3714      	adds	r7, #20
 800bd62:	46bd      	mov	sp, r7
 800bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd68:	4770      	bx	lr
 800bd6a:	bf00      	nop
 800bd6c:	40010000 	.word	0x40010000
 800bd70:	40000400 	.word	0x40000400
 800bd74:	40000800 	.word	0x40000800
 800bd78:	40000c00 	.word	0x40000c00
 800bd7c:	40010400 	.word	0x40010400
 800bd80:	40014000 	.word	0x40014000
 800bd84:	40001800 	.word	0x40001800

0800bd88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b085      	sub	sp, #20
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bd92:	2300      	movs	r3, #0
 800bd94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d101      	bne.n	800bda4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bda0:	2302      	movs	r3, #2
 800bda2:	e03d      	b.n	800be20 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2201      	movs	r2, #1
 800bda8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	68db      	ldr	r3, [r3, #12]
 800bdb6:	4313      	orrs	r3, r2
 800bdb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	689b      	ldr	r3, [r3, #8]
 800bdc4:	4313      	orrs	r3, r2
 800bdc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	4313      	orrs	r3, r2
 800bdd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	4313      	orrs	r3, r2
 800bde2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	691b      	ldr	r3, [r3, #16]
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	695b      	ldr	r3, [r3, #20]
 800bdfc:	4313      	orrs	r3, r2
 800bdfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	69db      	ldr	r3, [r3, #28]
 800be0a:	4313      	orrs	r3, r2
 800be0c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	68fa      	ldr	r2, [r7, #12]
 800be14:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2200      	movs	r2, #0
 800be1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800be1e:	2300      	movs	r3, #0
}
 800be20:	4618      	mov	r0, r3
 800be22:	3714      	adds	r7, #20
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr

0800be2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b083      	sub	sp, #12
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800be34:	bf00      	nop
 800be36:	370c      	adds	r7, #12
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr

0800be40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800be40:	b480      	push	{r7}
 800be42:	b083      	sub	sp, #12
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800be48:	bf00      	nop
 800be4a:	370c      	adds	r7, #12
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr

0800be54 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800be54:	b084      	sub	sp, #16
 800be56:	b480      	push	{r7}
 800be58:	b085      	sub	sp, #20
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	6078      	str	r0, [r7, #4]
 800be5e:	f107 001c 	add.w	r0, r7, #28
 800be62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800be66:	2300      	movs	r3, #0
 800be68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800be6a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800be6c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800be6e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800be70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800be72:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800be74:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800be76:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800be78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800be7a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800be7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800be7e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800be80:	68fa      	ldr	r2, [r7, #12]
 800be82:	4313      	orrs	r3, r2
 800be84:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	685b      	ldr	r3, [r3, #4]
 800be8a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800be8e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800be92:	68fa      	ldr	r2, [r7, #12]
 800be94:	431a      	orrs	r2, r3
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800be9a:	2300      	movs	r3, #0
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3714      	adds	r7, #20
 800bea0:	46bd      	mov	sp, r7
 800bea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea6:	b004      	add	sp, #16
 800bea8:	4770      	bx	lr

0800beaa <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800beaa:	b480      	push	{r7}
 800beac:	b083      	sub	sp, #12
 800beae:	af00      	add	r7, sp, #0
 800beb0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800beb8:	4618      	mov	r0, r3
 800beba:	370c      	adds	r7, #12
 800bebc:	46bd      	mov	sp, r7
 800bebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec2:	4770      	bx	lr

0800bec4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800bec4:	b480      	push	{r7}
 800bec6:	b083      	sub	sp, #12
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	681a      	ldr	r2, [r3, #0]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bed8:	2300      	movs	r3, #0
}
 800beda:	4618      	mov	r0, r3
 800bedc:	370c      	adds	r7, #12
 800bede:	46bd      	mov	sp, r7
 800bee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee4:	4770      	bx	lr

0800bee6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800bee6:	b480      	push	{r7}
 800bee8:	b083      	sub	sp, #12
 800beea:	af00      	add	r7, sp, #0
 800beec:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2203      	movs	r2, #3
 800bef2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800bef4:	2300      	movs	r3, #0
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	370c      	adds	r7, #12
 800befa:	46bd      	mov	sp, r7
 800befc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf00:	4770      	bx	lr

0800bf02 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800bf02:	b480      	push	{r7}
 800bf04:	b083      	sub	sp, #12
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f003 0303 	and.w	r3, r3, #3
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	370c      	adds	r7, #12
 800bf16:	46bd      	mov	sp, r7
 800bf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1c:	4770      	bx	lr

0800bf1e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800bf1e:	b480      	push	{r7}
 800bf20:	b085      	sub	sp, #20
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	6078      	str	r0, [r7, #4]
 800bf26:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	681a      	ldr	r2, [r3, #0]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bf3c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800bf42:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800bf48:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bf4a:	68fa      	ldr	r2, [r7, #12]
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	68db      	ldr	r3, [r3, #12]
 800bf54:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800bf58:	f023 030f 	bic.w	r3, r3, #15
 800bf5c:	68fa      	ldr	r2, [r7, #12]
 800bf5e:	431a      	orrs	r2, r3
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800bf64:	2300      	movs	r3, #0
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3714      	adds	r7, #20
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf70:	4770      	bx	lr

0800bf72 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800bf72:	b480      	push	{r7}
 800bf74:	b083      	sub	sp, #12
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	691b      	ldr	r3, [r3, #16]
 800bf7e:	b2db      	uxtb	r3, r3
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	370c      	adds	r7, #12
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr

0800bf8c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b085      	sub	sp, #20
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
 800bf94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	3314      	adds	r3, #20
 800bf9a:	461a      	mov	r2, r3
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	4413      	add	r3, r2
 800bfa0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	681b      	ldr	r3, [r3, #0]
}  
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	3714      	adds	r7, #20
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb0:	4770      	bx	lr

0800bfb2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800bfb2:	b480      	push	{r7}
 800bfb4:	b085      	sub	sp, #20
 800bfb6:	af00      	add	r7, sp, #0
 800bfb8:	6078      	str	r0, [r7, #4]
 800bfba:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	681a      	ldr	r2, [r3, #0]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	685a      	ldr	r2, [r3, #4]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bfd8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800bfde:	431a      	orrs	r2, r3
                       Data->DPSM);
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800bfe4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bfe6:	68fa      	ldr	r2, [r7, #12]
 800bfe8:	4313      	orrs	r3, r2
 800bfea:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bff0:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	431a      	orrs	r2, r3
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800bffc:	2300      	movs	r3, #0

}
 800bffe:	4618      	mov	r0, r3
 800c000:	3714      	adds	r7, #20
 800c002:	46bd      	mov	sp, r7
 800c004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c008:	4770      	bx	lr

0800c00a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800c00a:	b580      	push	{r7, lr}
 800c00c:	b088      	sub	sp, #32
 800c00e:	af00      	add	r7, sp, #0
 800c010:	6078      	str	r0, [r7, #4]
 800c012:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c018:	2310      	movs	r3, #16
 800c01a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c01c:	2340      	movs	r3, #64	; 0x40
 800c01e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c020:	2300      	movs	r3, #0
 800c022:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c024:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c028:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c02a:	f107 0308 	add.w	r3, r7, #8
 800c02e:	4619      	mov	r1, r3
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f7ff ff74 	bl	800bf1e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800c036:	f241 3288 	movw	r2, #5000	; 0x1388
 800c03a:	2110      	movs	r1, #16
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f000 fa19 	bl	800c474 <SDMMC_GetCmdResp1>
 800c042:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c044:	69fb      	ldr	r3, [r7, #28]
}
 800c046:	4618      	mov	r0, r3
 800c048:	3720      	adds	r7, #32
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}

0800c04e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c04e:	b580      	push	{r7, lr}
 800c050:	b088      	sub	sp, #32
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]
 800c056:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c05c:	2311      	movs	r3, #17
 800c05e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c060:	2340      	movs	r3, #64	; 0x40
 800c062:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c064:	2300      	movs	r3, #0
 800c066:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c06c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c06e:	f107 0308 	add.w	r3, r7, #8
 800c072:	4619      	mov	r1, r3
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f7ff ff52 	bl	800bf1e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c07a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c07e:	2111      	movs	r1, #17
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f000 f9f7 	bl	800c474 <SDMMC_GetCmdResp1>
 800c086:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c088:	69fb      	ldr	r3, [r7, #28]
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3720      	adds	r7, #32
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}

0800c092 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c092:	b580      	push	{r7, lr}
 800c094:	b088      	sub	sp, #32
 800c096:	af00      	add	r7, sp, #0
 800c098:	6078      	str	r0, [r7, #4]
 800c09a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c0a0:	2312      	movs	r3, #18
 800c0a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c0a4:	2340      	movs	r3, #64	; 0x40
 800c0a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c0ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c0b2:	f107 0308 	add.w	r3, r7, #8
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f7ff ff30 	bl	800bf1e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c0be:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0c2:	2112      	movs	r1, #18
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f000 f9d5 	bl	800c474 <SDMMC_GetCmdResp1>
 800c0ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0cc:	69fb      	ldr	r3, [r7, #28]
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3720      	adds	r7, #32
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}

0800c0d6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c0d6:	b580      	push	{r7, lr}
 800c0d8:	b088      	sub	sp, #32
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6078      	str	r0, [r7, #4]
 800c0de:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c0e4:	2318      	movs	r3, #24
 800c0e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c0e8:	2340      	movs	r3, #64	; 0x40
 800c0ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c0f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c0f6:	f107 0308 	add.w	r3, r7, #8
 800c0fa:	4619      	mov	r1, r3
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f7ff ff0e 	bl	800bf1e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c102:	f241 3288 	movw	r2, #5000	; 0x1388
 800c106:	2118      	movs	r1, #24
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f000 f9b3 	bl	800c474 <SDMMC_GetCmdResp1>
 800c10e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c110:	69fb      	ldr	r3, [r7, #28]
}
 800c112:	4618      	mov	r0, r3
 800c114:	3720      	adds	r7, #32
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}

0800c11a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c11a:	b580      	push	{r7, lr}
 800c11c:	b088      	sub	sp, #32
 800c11e:	af00      	add	r7, sp, #0
 800c120:	6078      	str	r0, [r7, #4]
 800c122:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c128:	2319      	movs	r3, #25
 800c12a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c12c:	2340      	movs	r3, #64	; 0x40
 800c12e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c130:	2300      	movs	r3, #0
 800c132:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c138:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c13a:	f107 0308 	add.w	r3, r7, #8
 800c13e:	4619      	mov	r1, r3
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f7ff feec 	bl	800bf1e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c146:	f241 3288 	movw	r2, #5000	; 0x1388
 800c14a:	2119      	movs	r1, #25
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f000 f991 	bl	800c474 <SDMMC_GetCmdResp1>
 800c152:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c154:	69fb      	ldr	r3, [r7, #28]
}
 800c156:	4618      	mov	r0, r3
 800c158:	3720      	adds	r7, #32
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}
	...

0800c160 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b088      	sub	sp, #32
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c168:	2300      	movs	r3, #0
 800c16a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c16c:	230c      	movs	r3, #12
 800c16e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c170:	2340      	movs	r3, #64	; 0x40
 800c172:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c174:	2300      	movs	r3, #0
 800c176:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c178:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c17c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c17e:	f107 0308 	add.w	r3, r7, #8
 800c182:	4619      	mov	r1, r3
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f7ff feca 	bl	800bf1e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800c18a:	4a05      	ldr	r2, [pc, #20]	; (800c1a0 <SDMMC_CmdStopTransfer+0x40>)
 800c18c:	210c      	movs	r1, #12
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f000 f970 	bl	800c474 <SDMMC_GetCmdResp1>
 800c194:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c196:	69fb      	ldr	r3, [r7, #28]
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3720      	adds	r7, #32
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}
 800c1a0:	05f5e100 	.word	0x05f5e100

0800c1a4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b08a      	sub	sp, #40	; 0x28
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	60f8      	str	r0, [r7, #12]
 800c1ac:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c1b4:	2307      	movs	r3, #7
 800c1b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c1b8:	2340      	movs	r3, #64	; 0x40
 800c1ba:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c1c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1c4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c1c6:	f107 0310 	add.w	r3, r7, #16
 800c1ca:	4619      	mov	r1, r3
 800c1cc:	68f8      	ldr	r0, [r7, #12]
 800c1ce:	f7ff fea6 	bl	800bf1e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800c1d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1d6:	2107      	movs	r1, #7
 800c1d8:	68f8      	ldr	r0, [r7, #12]
 800c1da:	f000 f94b 	bl	800c474 <SDMMC_GetCmdResp1>
 800c1de:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3728      	adds	r7, #40	; 0x28
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}

0800c1ea <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800c1ea:	b580      	push	{r7, lr}
 800c1ec:	b088      	sub	sp, #32
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c1fe:	2300      	movs	r3, #0
 800c200:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c206:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c208:	f107 0308 	add.w	r3, r7, #8
 800c20c:	4619      	mov	r1, r3
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f7ff fe85 	bl	800bf1e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f000 fb65 	bl	800c8e4 <SDMMC_GetCmdError>
 800c21a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c21c:	69fb      	ldr	r3, [r7, #28]
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3720      	adds	r7, #32
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}

0800c226 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800c226:	b580      	push	{r7, lr}
 800c228:	b088      	sub	sp, #32
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c22e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c232:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c234:	2308      	movs	r3, #8
 800c236:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c238:	2340      	movs	r3, #64	; 0x40
 800c23a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c23c:	2300      	movs	r3, #0
 800c23e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c244:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c246:	f107 0308 	add.w	r3, r7, #8
 800c24a:	4619      	mov	r1, r3
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f7ff fe66 	bl	800bf1e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f000 faf8 	bl	800c848 <SDMMC_GetCmdResp7>
 800c258:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c25a:	69fb      	ldr	r3, [r7, #28]
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3720      	adds	r7, #32
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b088      	sub	sp, #32
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c272:	2337      	movs	r3, #55	; 0x37
 800c274:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c276:	2340      	movs	r3, #64	; 0x40
 800c278:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c27a:	2300      	movs	r3, #0
 800c27c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c27e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c282:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c284:	f107 0308 	add.w	r3, r7, #8
 800c288:	4619      	mov	r1, r3
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f7ff fe47 	bl	800bf1e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800c290:	f241 3288 	movw	r2, #5000	; 0x1388
 800c294:	2137      	movs	r1, #55	; 0x37
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f000 f8ec 	bl	800c474 <SDMMC_GetCmdResp1>
 800c29c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c29e:	69fb      	ldr	r3, [r7, #28]
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3720      	adds	r7, #32
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b088      	sub	sp, #32
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c2b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c2bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c2be:	2329      	movs	r3, #41	; 0x29
 800c2c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c2c2:	2340      	movs	r3, #64	; 0x40
 800c2c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c2ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c2d0:	f107 0308 	add.w	r3, r7, #8
 800c2d4:	4619      	mov	r1, r3
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f7ff fe21 	bl	800bf1e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f000 f9ff 	bl	800c6e0 <SDMMC_GetCmdResp3>
 800c2e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2e4:	69fb      	ldr	r3, [r7, #28]
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3720      	adds	r7, #32
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}

0800c2ee <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800c2ee:	b580      	push	{r7, lr}
 800c2f0:	b088      	sub	sp, #32
 800c2f2:	af00      	add	r7, sp, #0
 800c2f4:	6078      	str	r0, [r7, #4]
 800c2f6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c2fc:	2306      	movs	r3, #6
 800c2fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c300:	2340      	movs	r3, #64	; 0x40
 800c302:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c304:	2300      	movs	r3, #0
 800c306:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c30c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c30e:	f107 0308 	add.w	r3, r7, #8
 800c312:	4619      	mov	r1, r3
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f7ff fe02 	bl	800bf1e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800c31a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c31e:	2106      	movs	r1, #6
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f000 f8a7 	bl	800c474 <SDMMC_GetCmdResp1>
 800c326:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c328:	69fb      	ldr	r3, [r7, #28]
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3720      	adds	r7, #32
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}

0800c332 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800c332:	b580      	push	{r7, lr}
 800c334:	b088      	sub	sp, #32
 800c336:	af00      	add	r7, sp, #0
 800c338:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c33a:	2300      	movs	r3, #0
 800c33c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c33e:	2333      	movs	r3, #51	; 0x33
 800c340:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c342:	2340      	movs	r3, #64	; 0x40
 800c344:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c346:	2300      	movs	r3, #0
 800c348:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c34a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c34e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c350:	f107 0308 	add.w	r3, r7, #8
 800c354:	4619      	mov	r1, r3
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f7ff fde1 	bl	800bf1e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800c35c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c360:	2133      	movs	r1, #51	; 0x33
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f000 f886 	bl	800c474 <SDMMC_GetCmdResp1>
 800c368:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c36a:	69fb      	ldr	r3, [r7, #28]
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3720      	adds	r7, #32
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}

0800c374 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b088      	sub	sp, #32
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c37c:	2300      	movs	r3, #0
 800c37e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c380:	2302      	movs	r3, #2
 800c382:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c384:	23c0      	movs	r3, #192	; 0xc0
 800c386:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c388:	2300      	movs	r3, #0
 800c38a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c38c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c390:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c392:	f107 0308 	add.w	r3, r7, #8
 800c396:	4619      	mov	r1, r3
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f7ff fdc0 	bl	800bf1e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f000 f956 	bl	800c650 <SDMMC_GetCmdResp2>
 800c3a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c3a6:	69fb      	ldr	r3, [r7, #28]
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3720      	adds	r7, #32
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b088      	sub	sp, #32
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c3be:	2309      	movs	r3, #9
 800c3c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c3c2:	23c0      	movs	r3, #192	; 0xc0
 800c3c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c3ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c3d0:	f107 0308 	add.w	r3, r7, #8
 800c3d4:	4619      	mov	r1, r3
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f7ff fda1 	bl	800bf1e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f000 f937 	bl	800c650 <SDMMC_GetCmdResp2>
 800c3e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c3e4:	69fb      	ldr	r3, [r7, #28]
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3720      	adds	r7, #32
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}

0800c3ee <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800c3ee:	b580      	push	{r7, lr}
 800c3f0:	b088      	sub	sp, #32
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	6078      	str	r0, [r7, #4]
 800c3f6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c3fc:	2303      	movs	r3, #3
 800c3fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c400:	2340      	movs	r3, #64	; 0x40
 800c402:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c404:	2300      	movs	r3, #0
 800c406:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c408:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c40c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c40e:	f107 0308 	add.w	r3, r7, #8
 800c412:	4619      	mov	r1, r3
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f7ff fd82 	bl	800bf1e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c41a:	683a      	ldr	r2, [r7, #0]
 800c41c:	2103      	movs	r1, #3
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f000 f99c 	bl	800c75c <SDMMC_GetCmdResp6>
 800c424:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c426:	69fb      	ldr	r3, [r7, #28]
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3720      	adds	r7, #32
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b088      	sub	sp, #32
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c43e:	230d      	movs	r3, #13
 800c440:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c442:	2340      	movs	r3, #64	; 0x40
 800c444:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c446:	2300      	movs	r3, #0
 800c448:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c44a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c44e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c450:	f107 0308 	add.w	r3, r7, #8
 800c454:	4619      	mov	r1, r3
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f7ff fd61 	bl	800bf1e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800c45c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c460:	210d      	movs	r1, #13
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f000 f806 	bl	800c474 <SDMMC_GetCmdResp1>
 800c468:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c46a:	69fb      	ldr	r3, [r7, #28]
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	3720      	adds	r7, #32
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}

0800c474 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b088      	sub	sp, #32
 800c478:	af00      	add	r7, sp, #0
 800c47a:	60f8      	str	r0, [r7, #12]
 800c47c:	460b      	mov	r3, r1
 800c47e:	607a      	str	r2, [r7, #4]
 800c480:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c482:	4b70      	ldr	r3, [pc, #448]	; (800c644 <SDMMC_GetCmdResp1+0x1d0>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	4a70      	ldr	r2, [pc, #448]	; (800c648 <SDMMC_GetCmdResp1+0x1d4>)
 800c488:	fba2 2303 	umull	r2, r3, r2, r3
 800c48c:	0a5a      	lsrs	r2, r3, #9
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	fb02 f303 	mul.w	r3, r2, r3
 800c494:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c496:	69fb      	ldr	r3, [r7, #28]
 800c498:	1e5a      	subs	r2, r3, #1
 800c49a:	61fa      	str	r2, [r7, #28]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d102      	bne.n	800c4a6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c4a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c4a4:	e0c9      	b.n	800c63a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4aa:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c4ac:	69bb      	ldr	r3, [r7, #24]
 800c4ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d0ef      	beq.n	800c496 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c4b6:	69bb      	ldr	r3, [r7, #24]
 800c4b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d1ea      	bne.n	800c496 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4c4:	f003 0304 	and.w	r3, r3, #4
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d004      	beq.n	800c4d6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	2204      	movs	r2, #4
 800c4d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c4d2:	2304      	movs	r3, #4
 800c4d4:	e0b1      	b.n	800c63a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4da:	f003 0301 	and.w	r3, r3, #1
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d004      	beq.n	800c4ec <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	2201      	movs	r2, #1
 800c4e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	e0a6      	b.n	800c63a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	22c5      	movs	r2, #197	; 0xc5
 800c4f0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c4f2:	68f8      	ldr	r0, [r7, #12]
 800c4f4:	f7ff fd3d 	bl	800bf72 <SDIO_GetCommandResponse>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	7afb      	ldrb	r3, [r7, #11]
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d001      	beq.n	800c506 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c502:	2301      	movs	r3, #1
 800c504:	e099      	b.n	800c63a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c506:	2100      	movs	r1, #0
 800c508:	68f8      	ldr	r0, [r7, #12]
 800c50a:	f7ff fd3f 	bl	800bf8c <SDIO_GetResponse>
 800c50e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c510:	697a      	ldr	r2, [r7, #20]
 800c512:	4b4e      	ldr	r3, [pc, #312]	; (800c64c <SDMMC_GetCmdResp1+0x1d8>)
 800c514:	4013      	ands	r3, r2
 800c516:	2b00      	cmp	r3, #0
 800c518:	d101      	bne.n	800c51e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c51a:	2300      	movs	r3, #0
 800c51c:	e08d      	b.n	800c63a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	2b00      	cmp	r3, #0
 800c522:	da02      	bge.n	800c52a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c524:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c528:	e087      	b.n	800c63a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c52a:	697b      	ldr	r3, [r7, #20]
 800c52c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c530:	2b00      	cmp	r3, #0
 800c532:	d001      	beq.n	800c538 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c534:	2340      	movs	r3, #64	; 0x40
 800c536:	e080      	b.n	800c63a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d001      	beq.n	800c546 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c542:	2380      	movs	r3, #128	; 0x80
 800c544:	e079      	b.n	800c63a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d002      	beq.n	800c556 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c550:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c554:	e071      	b.n	800c63a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d002      	beq.n	800c566 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c560:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c564:	e069      	b.n	800c63a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d002      	beq.n	800c576 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c574:	e061      	b.n	800c63a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d002      	beq.n	800c586 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c580:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c584:	e059      	b.n	800c63a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d002      	beq.n	800c596 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c590:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c594:	e051      	b.n	800c63a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d002      	beq.n	800c5a6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c5a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c5a4:	e049      	b.n	800c63a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d002      	beq.n	800c5b6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c5b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c5b4:	e041      	b.n	800c63a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d002      	beq.n	800c5c6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c5c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c5c4:	e039      	b.n	800c63a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d002      	beq.n	800c5d6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c5d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c5d4:	e031      	b.n	800c63a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d002      	beq.n	800c5e6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c5e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c5e4:	e029      	b.n	800c63a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d002      	beq.n	800c5f6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c5f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c5f4:	e021      	b.n	800c63a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d002      	beq.n	800c606 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c600:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c604:	e019      	b.n	800c63a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d002      	beq.n	800c616 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c610:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c614:	e011      	b.n	800c63a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c616:	697b      	ldr	r3, [r7, #20]
 800c618:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d002      	beq.n	800c626 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c620:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c624:	e009      	b.n	800c63a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	f003 0308 	and.w	r3, r3, #8
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d002      	beq.n	800c636 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c630:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c634:	e001      	b.n	800c63a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c636:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3720      	adds	r7, #32
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
 800c642:	bf00      	nop
 800c644:	20000014 	.word	0x20000014
 800c648:	10624dd3 	.word	0x10624dd3
 800c64c:	fdffe008 	.word	0xfdffe008

0800c650 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800c650:	b480      	push	{r7}
 800c652:	b085      	sub	sp, #20
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c658:	4b1f      	ldr	r3, [pc, #124]	; (800c6d8 <SDMMC_GetCmdResp2+0x88>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	4a1f      	ldr	r2, [pc, #124]	; (800c6dc <SDMMC_GetCmdResp2+0x8c>)
 800c65e:	fba2 2303 	umull	r2, r3, r2, r3
 800c662:	0a5b      	lsrs	r3, r3, #9
 800c664:	f241 3288 	movw	r2, #5000	; 0x1388
 800c668:	fb02 f303 	mul.w	r3, r2, r3
 800c66c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	1e5a      	subs	r2, r3, #1
 800c672:	60fa      	str	r2, [r7, #12]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d102      	bne.n	800c67e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c678:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c67c:	e026      	b.n	800c6cc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c682:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d0ef      	beq.n	800c66e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c694:	2b00      	cmp	r3, #0
 800c696:	d1ea      	bne.n	800c66e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c69c:	f003 0304 	and.w	r3, r3, #4
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d004      	beq.n	800c6ae <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2204      	movs	r2, #4
 800c6a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c6aa:	2304      	movs	r3, #4
 800c6ac:	e00e      	b.n	800c6cc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6b2:	f003 0301 	and.w	r3, r3, #1
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d004      	beq.n	800c6c4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2201      	movs	r2, #1
 800c6be:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	e003      	b.n	800c6cc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	22c5      	movs	r2, #197	; 0xc5
 800c6c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c6ca:	2300      	movs	r3, #0
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3714      	adds	r7, #20
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d6:	4770      	bx	lr
 800c6d8:	20000014 	.word	0x20000014
 800c6dc:	10624dd3 	.word	0x10624dd3

0800c6e0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b085      	sub	sp, #20
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c6e8:	4b1a      	ldr	r3, [pc, #104]	; (800c754 <SDMMC_GetCmdResp3+0x74>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	4a1a      	ldr	r2, [pc, #104]	; (800c758 <SDMMC_GetCmdResp3+0x78>)
 800c6ee:	fba2 2303 	umull	r2, r3, r2, r3
 800c6f2:	0a5b      	lsrs	r3, r3, #9
 800c6f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6f8:	fb02 f303 	mul.w	r3, r2, r3
 800c6fc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	1e5a      	subs	r2, r3, #1
 800c702:	60fa      	str	r2, [r7, #12]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d102      	bne.n	800c70e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c708:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c70c:	e01b      	b.n	800c746 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c712:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d0ef      	beq.n	800c6fe <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c724:	2b00      	cmp	r3, #0
 800c726:	d1ea      	bne.n	800c6fe <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c72c:	f003 0304 	and.w	r3, r3, #4
 800c730:	2b00      	cmp	r3, #0
 800c732:	d004      	beq.n	800c73e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2204      	movs	r2, #4
 800c738:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c73a:	2304      	movs	r3, #4
 800c73c:	e003      	b.n	800c746 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	22c5      	movs	r2, #197	; 0xc5
 800c742:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c744:	2300      	movs	r3, #0
}
 800c746:	4618      	mov	r0, r3
 800c748:	3714      	adds	r7, #20
 800c74a:	46bd      	mov	sp, r7
 800c74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c750:	4770      	bx	lr
 800c752:	bf00      	nop
 800c754:	20000014 	.word	0x20000014
 800c758:	10624dd3 	.word	0x10624dd3

0800c75c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b088      	sub	sp, #32
 800c760:	af00      	add	r7, sp, #0
 800c762:	60f8      	str	r0, [r7, #12]
 800c764:	460b      	mov	r3, r1
 800c766:	607a      	str	r2, [r7, #4]
 800c768:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c76a:	4b35      	ldr	r3, [pc, #212]	; (800c840 <SDMMC_GetCmdResp6+0xe4>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	4a35      	ldr	r2, [pc, #212]	; (800c844 <SDMMC_GetCmdResp6+0xe8>)
 800c770:	fba2 2303 	umull	r2, r3, r2, r3
 800c774:	0a5b      	lsrs	r3, r3, #9
 800c776:	f241 3288 	movw	r2, #5000	; 0x1388
 800c77a:	fb02 f303 	mul.w	r3, r2, r3
 800c77e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c780:	69fb      	ldr	r3, [r7, #28]
 800c782:	1e5a      	subs	r2, r3, #1
 800c784:	61fa      	str	r2, [r7, #28]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d102      	bne.n	800c790 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c78a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c78e:	e052      	b.n	800c836 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c794:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c796:	69bb      	ldr	r3, [r7, #24]
 800c798:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d0ef      	beq.n	800c780 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c7a0:	69bb      	ldr	r3, [r7, #24]
 800c7a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d1ea      	bne.n	800c780 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7ae:	f003 0304 	and.w	r3, r3, #4
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d004      	beq.n	800c7c0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	2204      	movs	r2, #4
 800c7ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c7bc:	2304      	movs	r3, #4
 800c7be:	e03a      	b.n	800c836 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7c4:	f003 0301 	and.w	r3, r3, #1
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d004      	beq.n	800c7d6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	e02f      	b.n	800c836 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c7d6:	68f8      	ldr	r0, [r7, #12]
 800c7d8:	f7ff fbcb 	bl	800bf72 <SDIO_GetCommandResponse>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	461a      	mov	r2, r3
 800c7e0:	7afb      	ldrb	r3, [r7, #11]
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d001      	beq.n	800c7ea <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	e025      	b.n	800c836 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	22c5      	movs	r2, #197	; 0xc5
 800c7ee:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c7f0:	2100      	movs	r1, #0
 800c7f2:	68f8      	ldr	r0, [r7, #12]
 800c7f4:	f7ff fbca 	bl	800bf8c <SDIO_GetResponse>
 800c7f8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c800:	2b00      	cmp	r3, #0
 800c802:	d106      	bne.n	800c812 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	0c1b      	lsrs	r3, r3, #16
 800c808:	b29a      	uxth	r2, r3
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c80e:	2300      	movs	r3, #0
 800c810:	e011      	b.n	800c836 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d002      	beq.n	800c822 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c81c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c820:	e009      	b.n	800c836 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d002      	beq.n	800c832 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c82c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c830:	e001      	b.n	800c836 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c832:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c836:	4618      	mov	r0, r3
 800c838:	3720      	adds	r7, #32
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
 800c83e:	bf00      	nop
 800c840:	20000014 	.word	0x20000014
 800c844:	10624dd3 	.word	0x10624dd3

0800c848 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800c848:	b480      	push	{r7}
 800c84a:	b085      	sub	sp, #20
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c850:	4b22      	ldr	r3, [pc, #136]	; (800c8dc <SDMMC_GetCmdResp7+0x94>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	4a22      	ldr	r2, [pc, #136]	; (800c8e0 <SDMMC_GetCmdResp7+0x98>)
 800c856:	fba2 2303 	umull	r2, r3, r2, r3
 800c85a:	0a5b      	lsrs	r3, r3, #9
 800c85c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c860:	fb02 f303 	mul.w	r3, r2, r3
 800c864:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	1e5a      	subs	r2, r3, #1
 800c86a:	60fa      	str	r2, [r7, #12]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d102      	bne.n	800c876 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c870:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c874:	e02c      	b.n	800c8d0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c87a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c882:	2b00      	cmp	r3, #0
 800c884:	d0ef      	beq.n	800c866 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d1ea      	bne.n	800c866 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c894:	f003 0304 	and.w	r3, r3, #4
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d004      	beq.n	800c8a6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2204      	movs	r2, #4
 800c8a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c8a2:	2304      	movs	r3, #4
 800c8a4:	e014      	b.n	800c8d0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8aa:	f003 0301 	and.w	r3, r3, #1
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d004      	beq.n	800c8bc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2201      	movs	r2, #1
 800c8b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	e009      	b.n	800c8d0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d002      	beq.n	800c8ce <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2240      	movs	r2, #64	; 0x40
 800c8cc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c8ce:	2300      	movs	r3, #0
  
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3714      	adds	r7, #20
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8da:	4770      	bx	lr
 800c8dc:	20000014 	.word	0x20000014
 800c8e0:	10624dd3 	.word	0x10624dd3

0800c8e4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b085      	sub	sp, #20
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c8ec:	4b11      	ldr	r3, [pc, #68]	; (800c934 <SDMMC_GetCmdError+0x50>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4a11      	ldr	r2, [pc, #68]	; (800c938 <SDMMC_GetCmdError+0x54>)
 800c8f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c8f6:	0a5b      	lsrs	r3, r3, #9
 800c8f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8fc:	fb02 f303 	mul.w	r3, r2, r3
 800c900:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	1e5a      	subs	r2, r3, #1
 800c906:	60fa      	str	r2, [r7, #12]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d102      	bne.n	800c912 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c90c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c910:	e009      	b.n	800c926 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d0f1      	beq.n	800c902 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	22c5      	movs	r2, #197	; 0xc5
 800c922:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c924:	2300      	movs	r3, #0
}
 800c926:	4618      	mov	r0, r3
 800c928:	3714      	adds	r7, #20
 800c92a:	46bd      	mov	sp, r7
 800c92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c930:	4770      	bx	lr
 800c932:	bf00      	nop
 800c934:	20000014 	.word	0x20000014
 800c938:	10624dd3 	.word	0x10624dd3

0800c93c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c93c:	b084      	sub	sp, #16
 800c93e:	b580      	push	{r7, lr}
 800c940:	b084      	sub	sp, #16
 800c942:	af00      	add	r7, sp, #0
 800c944:	6078      	str	r0, [r7, #4]
 800c946:	f107 001c 	add.w	r0, r7, #28
 800c94a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c950:	2b01      	cmp	r3, #1
 800c952:	d122      	bne.n	800c99a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c958:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	68db      	ldr	r3, [r3, #12]
 800c964:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800c968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c96c:	687a      	ldr	r2, [r7, #4]
 800c96e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	68db      	ldr	r3, [r3, #12]
 800c974:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c97c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c97e:	2b01      	cmp	r3, #1
 800c980:	d105      	bne.n	800c98e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	68db      	ldr	r3, [r3, #12]
 800c986:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f001 fbe8 	bl	800e164 <USB_CoreReset>
 800c994:	4603      	mov	r3, r0
 800c996:	73fb      	strb	r3, [r7, #15]
 800c998:	e01a      	b.n	800c9d0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	68db      	ldr	r3, [r3, #12]
 800c99e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f001 fbdc 	bl	800e164 <USB_CoreReset>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c9b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d106      	bne.n	800c9c4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	639a      	str	r2, [r3, #56]	; 0x38
 800c9c2:	e005      	b.n	800c9d0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d2:	2b01      	cmp	r3, #1
 800c9d4:	d10b      	bne.n	800c9ee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	689b      	ldr	r3, [r3, #8]
 800c9da:	f043 0206 	orr.w	r2, r3, #6
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	689b      	ldr	r3, [r3, #8]
 800c9e6:	f043 0220 	orr.w	r2, r3, #32
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c9ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3710      	adds	r7, #16
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c9fa:	b004      	add	sp, #16
 800c9fc:	4770      	bx	lr
	...

0800ca00 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ca00:	b480      	push	{r7}
 800ca02:	b087      	sub	sp, #28
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	60f8      	str	r0, [r7, #12]
 800ca08:	60b9      	str	r1, [r7, #8]
 800ca0a:	4613      	mov	r3, r2
 800ca0c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ca0e:	79fb      	ldrb	r3, [r7, #7]
 800ca10:	2b02      	cmp	r3, #2
 800ca12:	d165      	bne.n	800cae0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	4a41      	ldr	r2, [pc, #260]	; (800cb1c <USB_SetTurnaroundTime+0x11c>)
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	d906      	bls.n	800ca2a <USB_SetTurnaroundTime+0x2a>
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	4a40      	ldr	r2, [pc, #256]	; (800cb20 <USB_SetTurnaroundTime+0x120>)
 800ca20:	4293      	cmp	r3, r2
 800ca22:	d202      	bcs.n	800ca2a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ca24:	230f      	movs	r3, #15
 800ca26:	617b      	str	r3, [r7, #20]
 800ca28:	e062      	b.n	800caf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	4a3c      	ldr	r2, [pc, #240]	; (800cb20 <USB_SetTurnaroundTime+0x120>)
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d306      	bcc.n	800ca40 <USB_SetTurnaroundTime+0x40>
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	4a3b      	ldr	r2, [pc, #236]	; (800cb24 <USB_SetTurnaroundTime+0x124>)
 800ca36:	4293      	cmp	r3, r2
 800ca38:	d202      	bcs.n	800ca40 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ca3a:	230e      	movs	r3, #14
 800ca3c:	617b      	str	r3, [r7, #20]
 800ca3e:	e057      	b.n	800caf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	4a38      	ldr	r2, [pc, #224]	; (800cb24 <USB_SetTurnaroundTime+0x124>)
 800ca44:	4293      	cmp	r3, r2
 800ca46:	d306      	bcc.n	800ca56 <USB_SetTurnaroundTime+0x56>
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	4a37      	ldr	r2, [pc, #220]	; (800cb28 <USB_SetTurnaroundTime+0x128>)
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	d202      	bcs.n	800ca56 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ca50:	230d      	movs	r3, #13
 800ca52:	617b      	str	r3, [r7, #20]
 800ca54:	e04c      	b.n	800caf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	4a33      	ldr	r2, [pc, #204]	; (800cb28 <USB_SetTurnaroundTime+0x128>)
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d306      	bcc.n	800ca6c <USB_SetTurnaroundTime+0x6c>
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	4a32      	ldr	r2, [pc, #200]	; (800cb2c <USB_SetTurnaroundTime+0x12c>)
 800ca62:	4293      	cmp	r3, r2
 800ca64:	d802      	bhi.n	800ca6c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ca66:	230c      	movs	r3, #12
 800ca68:	617b      	str	r3, [r7, #20]
 800ca6a:	e041      	b.n	800caf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	4a2f      	ldr	r2, [pc, #188]	; (800cb2c <USB_SetTurnaroundTime+0x12c>)
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d906      	bls.n	800ca82 <USB_SetTurnaroundTime+0x82>
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	4a2e      	ldr	r2, [pc, #184]	; (800cb30 <USB_SetTurnaroundTime+0x130>)
 800ca78:	4293      	cmp	r3, r2
 800ca7a:	d802      	bhi.n	800ca82 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ca7c:	230b      	movs	r3, #11
 800ca7e:	617b      	str	r3, [r7, #20]
 800ca80:	e036      	b.n	800caf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	4a2a      	ldr	r2, [pc, #168]	; (800cb30 <USB_SetTurnaroundTime+0x130>)
 800ca86:	4293      	cmp	r3, r2
 800ca88:	d906      	bls.n	800ca98 <USB_SetTurnaroundTime+0x98>
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	4a29      	ldr	r2, [pc, #164]	; (800cb34 <USB_SetTurnaroundTime+0x134>)
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	d802      	bhi.n	800ca98 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ca92:	230a      	movs	r3, #10
 800ca94:	617b      	str	r3, [r7, #20]
 800ca96:	e02b      	b.n	800caf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	4a26      	ldr	r2, [pc, #152]	; (800cb34 <USB_SetTurnaroundTime+0x134>)
 800ca9c:	4293      	cmp	r3, r2
 800ca9e:	d906      	bls.n	800caae <USB_SetTurnaroundTime+0xae>
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	4a25      	ldr	r2, [pc, #148]	; (800cb38 <USB_SetTurnaroundTime+0x138>)
 800caa4:	4293      	cmp	r3, r2
 800caa6:	d202      	bcs.n	800caae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800caa8:	2309      	movs	r3, #9
 800caaa:	617b      	str	r3, [r7, #20]
 800caac:	e020      	b.n	800caf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	4a21      	ldr	r2, [pc, #132]	; (800cb38 <USB_SetTurnaroundTime+0x138>)
 800cab2:	4293      	cmp	r3, r2
 800cab4:	d306      	bcc.n	800cac4 <USB_SetTurnaroundTime+0xc4>
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	4a20      	ldr	r2, [pc, #128]	; (800cb3c <USB_SetTurnaroundTime+0x13c>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d802      	bhi.n	800cac4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800cabe:	2308      	movs	r3, #8
 800cac0:	617b      	str	r3, [r7, #20]
 800cac2:	e015      	b.n	800caf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	4a1d      	ldr	r2, [pc, #116]	; (800cb3c <USB_SetTurnaroundTime+0x13c>)
 800cac8:	4293      	cmp	r3, r2
 800caca:	d906      	bls.n	800cada <USB_SetTurnaroundTime+0xda>
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	4a1c      	ldr	r2, [pc, #112]	; (800cb40 <USB_SetTurnaroundTime+0x140>)
 800cad0:	4293      	cmp	r3, r2
 800cad2:	d202      	bcs.n	800cada <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800cad4:	2307      	movs	r3, #7
 800cad6:	617b      	str	r3, [r7, #20]
 800cad8:	e00a      	b.n	800caf0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800cada:	2306      	movs	r3, #6
 800cadc:	617b      	str	r3, [r7, #20]
 800cade:	e007      	b.n	800caf0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800cae0:	79fb      	ldrb	r3, [r7, #7]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d102      	bne.n	800caec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800cae6:	2309      	movs	r3, #9
 800cae8:	617b      	str	r3, [r7, #20]
 800caea:	e001      	b.n	800caf0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800caec:	2309      	movs	r3, #9
 800caee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	68db      	ldr	r3, [r3, #12]
 800caf4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	68da      	ldr	r2, [r3, #12]
 800cb00:	697b      	ldr	r3, [r7, #20]
 800cb02:	029b      	lsls	r3, r3, #10
 800cb04:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800cb08:	431a      	orrs	r2, r3
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cb0e:	2300      	movs	r3, #0
}
 800cb10:	4618      	mov	r0, r3
 800cb12:	371c      	adds	r7, #28
 800cb14:	46bd      	mov	sp, r7
 800cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1a:	4770      	bx	lr
 800cb1c:	00d8acbf 	.word	0x00d8acbf
 800cb20:	00e4e1c0 	.word	0x00e4e1c0
 800cb24:	00f42400 	.word	0x00f42400
 800cb28:	01067380 	.word	0x01067380
 800cb2c:	011a499f 	.word	0x011a499f
 800cb30:	01312cff 	.word	0x01312cff
 800cb34:	014ca43f 	.word	0x014ca43f
 800cb38:	016e3600 	.word	0x016e3600
 800cb3c:	01a6ab1f 	.word	0x01a6ab1f
 800cb40:	01e84800 	.word	0x01e84800

0800cb44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cb44:	b480      	push	{r7}
 800cb46:	b083      	sub	sp, #12
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	689b      	ldr	r3, [r3, #8]
 800cb50:	f043 0201 	orr.w	r2, r3, #1
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cb58:	2300      	movs	r3, #0
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	370c      	adds	r7, #12
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb64:	4770      	bx	lr

0800cb66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cb66:	b480      	push	{r7}
 800cb68:	b083      	sub	sp, #12
 800cb6a:	af00      	add	r7, sp, #0
 800cb6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	689b      	ldr	r3, [r3, #8]
 800cb72:	f023 0201 	bic.w	r2, r3, #1
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cb7a:	2300      	movs	r3, #0
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	370c      	adds	r7, #12
 800cb80:	46bd      	mov	sp, r7
 800cb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb86:	4770      	bx	lr

0800cb88 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b084      	sub	sp, #16
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
 800cb90:	460b      	mov	r3, r1
 800cb92:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800cb94:	2300      	movs	r3, #0
 800cb96:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	68db      	ldr	r3, [r3, #12]
 800cb9c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cba4:	78fb      	ldrb	r3, [r7, #3]
 800cba6:	2b01      	cmp	r3, #1
 800cba8:	d115      	bne.n	800cbd6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	68db      	ldr	r3, [r3, #12]
 800cbae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cbb6:	2001      	movs	r0, #1
 800cbb8:	f7f7 fc80 	bl	80044bc <HAL_Delay>
      ms++;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	3301      	adds	r3, #1
 800cbc0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f001 fa3f 	bl	800e046 <USB_GetMode>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	2b01      	cmp	r3, #1
 800cbcc:	d01e      	beq.n	800cc0c <USB_SetCurrentMode+0x84>
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	2b31      	cmp	r3, #49	; 0x31
 800cbd2:	d9f0      	bls.n	800cbb6 <USB_SetCurrentMode+0x2e>
 800cbd4:	e01a      	b.n	800cc0c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800cbd6:	78fb      	ldrb	r3, [r7, #3]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d115      	bne.n	800cc08 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	68db      	ldr	r3, [r3, #12]
 800cbe0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cbe8:	2001      	movs	r0, #1
 800cbea:	f7f7 fc67 	bl	80044bc <HAL_Delay>
      ms++;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	3301      	adds	r3, #1
 800cbf2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f001 fa26 	bl	800e046 <USB_GetMode>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d005      	beq.n	800cc0c <USB_SetCurrentMode+0x84>
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	2b31      	cmp	r3, #49	; 0x31
 800cc04:	d9f0      	bls.n	800cbe8 <USB_SetCurrentMode+0x60>
 800cc06:	e001      	b.n	800cc0c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800cc08:	2301      	movs	r3, #1
 800cc0a:	e005      	b.n	800cc18 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	2b32      	cmp	r3, #50	; 0x32
 800cc10:	d101      	bne.n	800cc16 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800cc12:	2301      	movs	r3, #1
 800cc14:	e000      	b.n	800cc18 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800cc16:	2300      	movs	r3, #0
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3710      	adds	r7, #16
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}

0800cc20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cc20:	b084      	sub	sp, #16
 800cc22:	b580      	push	{r7, lr}
 800cc24:	b086      	sub	sp, #24
 800cc26:	af00      	add	r7, sp, #0
 800cc28:	6078      	str	r0, [r7, #4]
 800cc2a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cc2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cc32:	2300      	movs	r3, #0
 800cc34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	613b      	str	r3, [r7, #16]
 800cc3e:	e009      	b.n	800cc54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800cc40:	687a      	ldr	r2, [r7, #4]
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	3340      	adds	r3, #64	; 0x40
 800cc46:	009b      	lsls	r3, r3, #2
 800cc48:	4413      	add	r3, r2
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	3301      	adds	r3, #1
 800cc52:	613b      	str	r3, [r7, #16]
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	2b0e      	cmp	r3, #14
 800cc58:	d9f2      	bls.n	800cc40 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cc5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d11c      	bne.n	800cc9a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc66:	685b      	ldr	r3, [r3, #4]
 800cc68:	68fa      	ldr	r2, [r7, #12]
 800cc6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc6e:	f043 0302 	orr.w	r3, r3, #2
 800cc72:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc78:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	601a      	str	r2, [r3, #0]
 800cc98:	e005      	b.n	800cca6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc9e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ccac:	461a      	mov	r2, r3
 800ccae:	2300      	movs	r3, #0
 800ccb0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccb8:	4619      	mov	r1, r3
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccc0:	461a      	mov	r2, r3
 800ccc2:	680b      	ldr	r3, [r1, #0]
 800ccc4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ccc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc8:	2b01      	cmp	r3, #1
 800ccca:	d10c      	bne.n	800cce6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d104      	bne.n	800ccdc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ccd2:	2100      	movs	r1, #0
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f000 f965 	bl	800cfa4 <USB_SetDevSpeed>
 800ccda:	e008      	b.n	800ccee <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ccdc:	2101      	movs	r1, #1
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f000 f960 	bl	800cfa4 <USB_SetDevSpeed>
 800cce4:	e003      	b.n	800ccee <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cce6:	2103      	movs	r1, #3
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f000 f95b 	bl	800cfa4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ccee:	2110      	movs	r1, #16
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f000 f8f3 	bl	800cedc <USB_FlushTxFifo>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d001      	beq.n	800cd00 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f000 f91f 	bl	800cf44 <USB_FlushRxFifo>
 800cd06:	4603      	mov	r3, r0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d001      	beq.n	800cd10 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd16:	461a      	mov	r2, r3
 800cd18:	2300      	movs	r3, #0
 800cd1a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd22:	461a      	mov	r2, r3
 800cd24:	2300      	movs	r3, #0
 800cd26:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd2e:	461a      	mov	r2, r3
 800cd30:	2300      	movs	r3, #0
 800cd32:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cd34:	2300      	movs	r3, #0
 800cd36:	613b      	str	r3, [r7, #16]
 800cd38:	e043      	b.n	800cdc2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	015a      	lsls	r2, r3, #5
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	4413      	add	r3, r2
 800cd42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cd4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd50:	d118      	bne.n	800cd84 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d10a      	bne.n	800cd6e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	015a      	lsls	r2, r3, #5
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	4413      	add	r3, r2
 800cd60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd64:	461a      	mov	r2, r3
 800cd66:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cd6a:	6013      	str	r3, [r2, #0]
 800cd6c:	e013      	b.n	800cd96 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	015a      	lsls	r2, r3, #5
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	4413      	add	r3, r2
 800cd76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd7a:	461a      	mov	r2, r3
 800cd7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cd80:	6013      	str	r3, [r2, #0]
 800cd82:	e008      	b.n	800cd96 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cd84:	693b      	ldr	r3, [r7, #16]
 800cd86:	015a      	lsls	r2, r3, #5
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	4413      	add	r3, r2
 800cd8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd90:	461a      	mov	r2, r3
 800cd92:	2300      	movs	r3, #0
 800cd94:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cd96:	693b      	ldr	r3, [r7, #16]
 800cd98:	015a      	lsls	r2, r3, #5
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	4413      	add	r3, r2
 800cd9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cda2:	461a      	mov	r2, r3
 800cda4:	2300      	movs	r3, #0
 800cda6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cda8:	693b      	ldr	r3, [r7, #16]
 800cdaa:	015a      	lsls	r2, r3, #5
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	4413      	add	r3, r2
 800cdb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdb4:	461a      	mov	r2, r3
 800cdb6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cdba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cdbc:	693b      	ldr	r3, [r7, #16]
 800cdbe:	3301      	adds	r3, #1
 800cdc0:	613b      	str	r3, [r7, #16]
 800cdc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc4:	693a      	ldr	r2, [r7, #16]
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	d3b7      	bcc.n	800cd3a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cdca:	2300      	movs	r3, #0
 800cdcc:	613b      	str	r3, [r7, #16]
 800cdce:	e043      	b.n	800ce58 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cdd0:	693b      	ldr	r3, [r7, #16]
 800cdd2:	015a      	lsls	r2, r3, #5
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	4413      	add	r3, r2
 800cdd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cde2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cde6:	d118      	bne.n	800ce1a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800cde8:	693b      	ldr	r3, [r7, #16]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d10a      	bne.n	800ce04 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cdee:	693b      	ldr	r3, [r7, #16]
 800cdf0:	015a      	lsls	r2, r3, #5
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	4413      	add	r3, r2
 800cdf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdfa:	461a      	mov	r2, r3
 800cdfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ce00:	6013      	str	r3, [r2, #0]
 800ce02:	e013      	b.n	800ce2c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	015a      	lsls	r2, r3, #5
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	4413      	add	r3, r2
 800ce0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce10:	461a      	mov	r2, r3
 800ce12:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ce16:	6013      	str	r3, [r2, #0]
 800ce18:	e008      	b.n	800ce2c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	015a      	lsls	r2, r3, #5
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	4413      	add	r3, r2
 800ce22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce26:	461a      	mov	r2, r3
 800ce28:	2300      	movs	r3, #0
 800ce2a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	015a      	lsls	r2, r3, #5
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	4413      	add	r3, r2
 800ce34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce38:	461a      	mov	r2, r3
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	015a      	lsls	r2, r3, #5
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	4413      	add	r3, r2
 800ce46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce4a:	461a      	mov	r2, r3
 800ce4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ce50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	3301      	adds	r3, #1
 800ce56:	613b      	str	r3, [r7, #16]
 800ce58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce5a:	693a      	ldr	r2, [r7, #16]
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d3b7      	bcc.n	800cdd0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce66:	691b      	ldr	r3, [r3, #16]
 800ce68:	68fa      	ldr	r2, [r7, #12]
 800ce6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ce6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ce72:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2200      	movs	r2, #0
 800ce78:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ce80:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ce82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d105      	bne.n	800ce94 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	699b      	ldr	r3, [r3, #24]
 800ce8c:	f043 0210 	orr.w	r2, r3, #16
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	699a      	ldr	r2, [r3, #24]
 800ce98:	4b0f      	ldr	r3, [pc, #60]	; (800ced8 <USB_DevInit+0x2b8>)
 800ce9a:	4313      	orrs	r3, r2
 800ce9c:	687a      	ldr	r2, [r7, #4]
 800ce9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d005      	beq.n	800ceb2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	699b      	ldr	r3, [r3, #24]
 800ceaa:	f043 0208 	orr.w	r2, r3, #8
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ceb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d107      	bne.n	800cec8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	699b      	ldr	r3, [r3, #24]
 800cebc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cec0:	f043 0304 	orr.w	r3, r3, #4
 800cec4:	687a      	ldr	r2, [r7, #4]
 800cec6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cec8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ceca:	4618      	mov	r0, r3
 800cecc:	3718      	adds	r7, #24
 800cece:	46bd      	mov	sp, r7
 800ced0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ced4:	b004      	add	sp, #16
 800ced6:	4770      	bx	lr
 800ced8:	803c3800 	.word	0x803c3800

0800cedc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cedc:	b480      	push	{r7}
 800cede:	b085      	sub	sp, #20
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
 800cee4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cee6:	2300      	movs	r3, #0
 800cee8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	3301      	adds	r3, #1
 800ceee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	4a13      	ldr	r2, [pc, #76]	; (800cf40 <USB_FlushTxFifo+0x64>)
 800cef4:	4293      	cmp	r3, r2
 800cef6:	d901      	bls.n	800cefc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800cef8:	2303      	movs	r3, #3
 800cefa:	e01b      	b.n	800cf34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	691b      	ldr	r3, [r3, #16]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	daf2      	bge.n	800ceea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800cf04:	2300      	movs	r3, #0
 800cf06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	019b      	lsls	r3, r3, #6
 800cf0c:	f043 0220 	orr.w	r2, r3, #32
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	3301      	adds	r3, #1
 800cf18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	4a08      	ldr	r2, [pc, #32]	; (800cf40 <USB_FlushTxFifo+0x64>)
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d901      	bls.n	800cf26 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800cf22:	2303      	movs	r3, #3
 800cf24:	e006      	b.n	800cf34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	691b      	ldr	r3, [r3, #16]
 800cf2a:	f003 0320 	and.w	r3, r3, #32
 800cf2e:	2b20      	cmp	r3, #32
 800cf30:	d0f0      	beq.n	800cf14 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800cf32:	2300      	movs	r3, #0
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3714      	adds	r7, #20
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3e:	4770      	bx	lr
 800cf40:	00030d40 	.word	0x00030d40

0800cf44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cf44:	b480      	push	{r7}
 800cf46:	b085      	sub	sp, #20
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	3301      	adds	r3, #1
 800cf54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	4a11      	ldr	r2, [pc, #68]	; (800cfa0 <USB_FlushRxFifo+0x5c>)
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d901      	bls.n	800cf62 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800cf5e:	2303      	movs	r3, #3
 800cf60:	e018      	b.n	800cf94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	691b      	ldr	r3, [r3, #16]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	daf2      	bge.n	800cf50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2210      	movs	r2, #16
 800cf72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	3301      	adds	r3, #1
 800cf78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	4a08      	ldr	r2, [pc, #32]	; (800cfa0 <USB_FlushRxFifo+0x5c>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d901      	bls.n	800cf86 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800cf82:	2303      	movs	r3, #3
 800cf84:	e006      	b.n	800cf94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	691b      	ldr	r3, [r3, #16]
 800cf8a:	f003 0310 	and.w	r3, r3, #16
 800cf8e:	2b10      	cmp	r3, #16
 800cf90:	d0f0      	beq.n	800cf74 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800cf92:	2300      	movs	r3, #0
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	3714      	adds	r7, #20
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9e:	4770      	bx	lr
 800cfa0:	00030d40 	.word	0x00030d40

0800cfa4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b085      	sub	sp, #20
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
 800cfac:	460b      	mov	r3, r1
 800cfae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfba:	681a      	ldr	r2, [r3, #0]
 800cfbc:	78fb      	ldrb	r3, [r7, #3]
 800cfbe:	68f9      	ldr	r1, [r7, #12]
 800cfc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cfc4:	4313      	orrs	r3, r2
 800cfc6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cfc8:	2300      	movs	r3, #0
}
 800cfca:	4618      	mov	r0, r3
 800cfcc:	3714      	adds	r7, #20
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd4:	4770      	bx	lr

0800cfd6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800cfd6:	b480      	push	{r7}
 800cfd8:	b087      	sub	sp, #28
 800cfda:	af00      	add	r7, sp, #0
 800cfdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfe8:	689b      	ldr	r3, [r3, #8]
 800cfea:	f003 0306 	and.w	r3, r3, #6
 800cfee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d102      	bne.n	800cffc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800cff6:	2300      	movs	r3, #0
 800cff8:	75fb      	strb	r3, [r7, #23]
 800cffa:	e00a      	b.n	800d012 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	2b02      	cmp	r3, #2
 800d000:	d002      	beq.n	800d008 <USB_GetDevSpeed+0x32>
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	2b06      	cmp	r3, #6
 800d006:	d102      	bne.n	800d00e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d008:	2302      	movs	r3, #2
 800d00a:	75fb      	strb	r3, [r7, #23]
 800d00c:	e001      	b.n	800d012 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d00e:	230f      	movs	r3, #15
 800d010:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d012:	7dfb      	ldrb	r3, [r7, #23]
}
 800d014:	4618      	mov	r0, r3
 800d016:	371c      	adds	r7, #28
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr

0800d020 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d020:	b480      	push	{r7}
 800d022:	b085      	sub	sp, #20
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	785b      	ldrb	r3, [r3, #1]
 800d038:	2b01      	cmp	r3, #1
 800d03a:	d13a      	bne.n	800d0b2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d042:	69da      	ldr	r2, [r3, #28]
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	781b      	ldrb	r3, [r3, #0]
 800d048:	f003 030f 	and.w	r3, r3, #15
 800d04c:	2101      	movs	r1, #1
 800d04e:	fa01 f303 	lsl.w	r3, r1, r3
 800d052:	b29b      	uxth	r3, r3
 800d054:	68f9      	ldr	r1, [r7, #12]
 800d056:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d05a:	4313      	orrs	r3, r2
 800d05c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	015a      	lsls	r2, r3, #5
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	4413      	add	r3, r2
 800d066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d070:	2b00      	cmp	r3, #0
 800d072:	d155      	bne.n	800d120 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	015a      	lsls	r2, r3, #5
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	4413      	add	r3, r2
 800d07c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d080:	681a      	ldr	r2, [r3, #0]
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	68db      	ldr	r3, [r3, #12]
 800d086:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	791b      	ldrb	r3, [r3, #4]
 800d08e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d090:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	059b      	lsls	r3, r3, #22
 800d096:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d098:	4313      	orrs	r3, r2
 800d09a:	68ba      	ldr	r2, [r7, #8]
 800d09c:	0151      	lsls	r1, r2, #5
 800d09e:	68fa      	ldr	r2, [r7, #12]
 800d0a0:	440a      	add	r2, r1
 800d0a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d0ae:	6013      	str	r3, [r2, #0]
 800d0b0:	e036      	b.n	800d120 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0b8:	69da      	ldr	r2, [r3, #28]
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	781b      	ldrb	r3, [r3, #0]
 800d0be:	f003 030f 	and.w	r3, r3, #15
 800d0c2:	2101      	movs	r1, #1
 800d0c4:	fa01 f303 	lsl.w	r3, r1, r3
 800d0c8:	041b      	lsls	r3, r3, #16
 800d0ca:	68f9      	ldr	r1, [r7, #12]
 800d0cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d0d0:	4313      	orrs	r3, r2
 800d0d2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	015a      	lsls	r2, r3, #5
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	4413      	add	r3, r2
 800d0dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d11a      	bne.n	800d120 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	015a      	lsls	r2, r3, #5
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	4413      	add	r3, r2
 800d0f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0f6:	681a      	ldr	r2, [r3, #0]
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	68db      	ldr	r3, [r3, #12]
 800d0fc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	791b      	ldrb	r3, [r3, #4]
 800d104:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d106:	430b      	orrs	r3, r1
 800d108:	4313      	orrs	r3, r2
 800d10a:	68ba      	ldr	r2, [r7, #8]
 800d10c:	0151      	lsls	r1, r2, #5
 800d10e:	68fa      	ldr	r2, [r7, #12]
 800d110:	440a      	add	r2, r1
 800d112:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d11a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d11e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d120:	2300      	movs	r3, #0
}
 800d122:	4618      	mov	r0, r3
 800d124:	3714      	adds	r7, #20
 800d126:	46bd      	mov	sp, r7
 800d128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12c:	4770      	bx	lr
	...

0800d130 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d130:	b480      	push	{r7}
 800d132:	b085      	sub	sp, #20
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
 800d138:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	781b      	ldrb	r3, [r3, #0]
 800d142:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	785b      	ldrb	r3, [r3, #1]
 800d148:	2b01      	cmp	r3, #1
 800d14a:	d161      	bne.n	800d210 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	015a      	lsls	r2, r3, #5
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	4413      	add	r3, r2
 800d154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d15e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d162:	d11f      	bne.n	800d1a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d164:	68bb      	ldr	r3, [r7, #8]
 800d166:	015a      	lsls	r2, r3, #5
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	4413      	add	r3, r2
 800d16c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	68ba      	ldr	r2, [r7, #8]
 800d174:	0151      	lsls	r1, r2, #5
 800d176:	68fa      	ldr	r2, [r7, #12]
 800d178:	440a      	add	r2, r1
 800d17a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d17e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d182:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	015a      	lsls	r2, r3, #5
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	4413      	add	r3, r2
 800d18c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	68ba      	ldr	r2, [r7, #8]
 800d194:	0151      	lsls	r1, r2, #5
 800d196:	68fa      	ldr	r2, [r7, #12]
 800d198:	440a      	add	r2, r1
 800d19a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d19e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d1a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	781b      	ldrb	r3, [r3, #0]
 800d1b0:	f003 030f 	and.w	r3, r3, #15
 800d1b4:	2101      	movs	r1, #1
 800d1b6:	fa01 f303 	lsl.w	r3, r1, r3
 800d1ba:	b29b      	uxth	r3, r3
 800d1bc:	43db      	mvns	r3, r3
 800d1be:	68f9      	ldr	r1, [r7, #12]
 800d1c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d1c4:	4013      	ands	r3, r2
 800d1c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1ce:	69da      	ldr	r2, [r3, #28]
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	781b      	ldrb	r3, [r3, #0]
 800d1d4:	f003 030f 	and.w	r3, r3, #15
 800d1d8:	2101      	movs	r1, #1
 800d1da:	fa01 f303 	lsl.w	r3, r1, r3
 800d1de:	b29b      	uxth	r3, r3
 800d1e0:	43db      	mvns	r3, r3
 800d1e2:	68f9      	ldr	r1, [r7, #12]
 800d1e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d1e8:	4013      	ands	r3, r2
 800d1ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	015a      	lsls	r2, r3, #5
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	4413      	add	r3, r2
 800d1f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1f8:	681a      	ldr	r2, [r3, #0]
 800d1fa:	68bb      	ldr	r3, [r7, #8]
 800d1fc:	0159      	lsls	r1, r3, #5
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	440b      	add	r3, r1
 800d202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d206:	4619      	mov	r1, r3
 800d208:	4b35      	ldr	r3, [pc, #212]	; (800d2e0 <USB_DeactivateEndpoint+0x1b0>)
 800d20a:	4013      	ands	r3, r2
 800d20c:	600b      	str	r3, [r1, #0]
 800d20e:	e060      	b.n	800d2d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	015a      	lsls	r2, r3, #5
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	4413      	add	r3, r2
 800d218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d222:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d226:	d11f      	bne.n	800d268 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	015a      	lsls	r2, r3, #5
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	4413      	add	r3, r2
 800d230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	68ba      	ldr	r2, [r7, #8]
 800d238:	0151      	lsls	r1, r2, #5
 800d23a:	68fa      	ldr	r2, [r7, #12]
 800d23c:	440a      	add	r2, r1
 800d23e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d242:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d246:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	015a      	lsls	r2, r3, #5
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	4413      	add	r3, r2
 800d250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	68ba      	ldr	r2, [r7, #8]
 800d258:	0151      	lsls	r1, r2, #5
 800d25a:	68fa      	ldr	r2, [r7, #12]
 800d25c:	440a      	add	r2, r1
 800d25e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d262:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d266:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d26e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	f003 030f 	and.w	r3, r3, #15
 800d278:	2101      	movs	r1, #1
 800d27a:	fa01 f303 	lsl.w	r3, r1, r3
 800d27e:	041b      	lsls	r3, r3, #16
 800d280:	43db      	mvns	r3, r3
 800d282:	68f9      	ldr	r1, [r7, #12]
 800d284:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d288:	4013      	ands	r3, r2
 800d28a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d292:	69da      	ldr	r2, [r3, #28]
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	781b      	ldrb	r3, [r3, #0]
 800d298:	f003 030f 	and.w	r3, r3, #15
 800d29c:	2101      	movs	r1, #1
 800d29e:	fa01 f303 	lsl.w	r3, r1, r3
 800d2a2:	041b      	lsls	r3, r3, #16
 800d2a4:	43db      	mvns	r3, r3
 800d2a6:	68f9      	ldr	r1, [r7, #12]
 800d2a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d2ac:	4013      	ands	r3, r2
 800d2ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d2b0:	68bb      	ldr	r3, [r7, #8]
 800d2b2:	015a      	lsls	r2, r3, #5
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	4413      	add	r3, r2
 800d2b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2bc:	681a      	ldr	r2, [r3, #0]
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	0159      	lsls	r1, r3, #5
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	440b      	add	r3, r1
 800d2c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2ca:	4619      	mov	r1, r3
 800d2cc:	4b05      	ldr	r3, [pc, #20]	; (800d2e4 <USB_DeactivateEndpoint+0x1b4>)
 800d2ce:	4013      	ands	r3, r2
 800d2d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d2d2:	2300      	movs	r3, #0
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3714      	adds	r7, #20
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2de:	4770      	bx	lr
 800d2e0:	ec337800 	.word	0xec337800
 800d2e4:	eff37800 	.word	0xeff37800

0800d2e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b08a      	sub	sp, #40	; 0x28
 800d2ec:	af02      	add	r7, sp, #8
 800d2ee:	60f8      	str	r0, [r7, #12]
 800d2f0:	60b9      	str	r1, [r7, #8]
 800d2f2:	4613      	mov	r3, r2
 800d2f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	781b      	ldrb	r3, [r3, #0]
 800d2fe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	785b      	ldrb	r3, [r3, #1]
 800d304:	2b01      	cmp	r3, #1
 800d306:	f040 815c 	bne.w	800d5c2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	699b      	ldr	r3, [r3, #24]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d132      	bne.n	800d378 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d312:	69bb      	ldr	r3, [r7, #24]
 800d314:	015a      	lsls	r2, r3, #5
 800d316:	69fb      	ldr	r3, [r7, #28]
 800d318:	4413      	add	r3, r2
 800d31a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d31e:	691b      	ldr	r3, [r3, #16]
 800d320:	69ba      	ldr	r2, [r7, #24]
 800d322:	0151      	lsls	r1, r2, #5
 800d324:	69fa      	ldr	r2, [r7, #28]
 800d326:	440a      	add	r2, r1
 800d328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d32c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d330:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d334:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d336:	69bb      	ldr	r3, [r7, #24]
 800d338:	015a      	lsls	r2, r3, #5
 800d33a:	69fb      	ldr	r3, [r7, #28]
 800d33c:	4413      	add	r3, r2
 800d33e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d342:	691b      	ldr	r3, [r3, #16]
 800d344:	69ba      	ldr	r2, [r7, #24]
 800d346:	0151      	lsls	r1, r2, #5
 800d348:	69fa      	ldr	r2, [r7, #28]
 800d34a:	440a      	add	r2, r1
 800d34c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d350:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d354:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d356:	69bb      	ldr	r3, [r7, #24]
 800d358:	015a      	lsls	r2, r3, #5
 800d35a:	69fb      	ldr	r3, [r7, #28]
 800d35c:	4413      	add	r3, r2
 800d35e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d362:	691b      	ldr	r3, [r3, #16]
 800d364:	69ba      	ldr	r2, [r7, #24]
 800d366:	0151      	lsls	r1, r2, #5
 800d368:	69fa      	ldr	r2, [r7, #28]
 800d36a:	440a      	add	r2, r1
 800d36c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d370:	0cdb      	lsrs	r3, r3, #19
 800d372:	04db      	lsls	r3, r3, #19
 800d374:	6113      	str	r3, [r2, #16]
 800d376:	e074      	b.n	800d462 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d378:	69bb      	ldr	r3, [r7, #24]
 800d37a:	015a      	lsls	r2, r3, #5
 800d37c:	69fb      	ldr	r3, [r7, #28]
 800d37e:	4413      	add	r3, r2
 800d380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d384:	691b      	ldr	r3, [r3, #16]
 800d386:	69ba      	ldr	r2, [r7, #24]
 800d388:	0151      	lsls	r1, r2, #5
 800d38a:	69fa      	ldr	r2, [r7, #28]
 800d38c:	440a      	add	r2, r1
 800d38e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d392:	0cdb      	lsrs	r3, r3, #19
 800d394:	04db      	lsls	r3, r3, #19
 800d396:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d398:	69bb      	ldr	r3, [r7, #24]
 800d39a:	015a      	lsls	r2, r3, #5
 800d39c:	69fb      	ldr	r3, [r7, #28]
 800d39e:	4413      	add	r3, r2
 800d3a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3a4:	691b      	ldr	r3, [r3, #16]
 800d3a6:	69ba      	ldr	r2, [r7, #24]
 800d3a8:	0151      	lsls	r1, r2, #5
 800d3aa:	69fa      	ldr	r2, [r7, #28]
 800d3ac:	440a      	add	r2, r1
 800d3ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d3b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d3ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d3bc:	69bb      	ldr	r3, [r7, #24]
 800d3be:	015a      	lsls	r2, r3, #5
 800d3c0:	69fb      	ldr	r3, [r7, #28]
 800d3c2:	4413      	add	r3, r2
 800d3c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3c8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d3ca:	68bb      	ldr	r3, [r7, #8]
 800d3cc:	6999      	ldr	r1, [r3, #24]
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	68db      	ldr	r3, [r3, #12]
 800d3d2:	440b      	add	r3, r1
 800d3d4:	1e59      	subs	r1, r3, #1
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	68db      	ldr	r3, [r3, #12]
 800d3da:	fbb1 f3f3 	udiv	r3, r1, r3
 800d3de:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d3e0:	4b9d      	ldr	r3, [pc, #628]	; (800d658 <USB_EPStartXfer+0x370>)
 800d3e2:	400b      	ands	r3, r1
 800d3e4:	69b9      	ldr	r1, [r7, #24]
 800d3e6:	0148      	lsls	r0, r1, #5
 800d3e8:	69f9      	ldr	r1, [r7, #28]
 800d3ea:	4401      	add	r1, r0
 800d3ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d3f0:	4313      	orrs	r3, r2
 800d3f2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d3f4:	69bb      	ldr	r3, [r7, #24]
 800d3f6:	015a      	lsls	r2, r3, #5
 800d3f8:	69fb      	ldr	r3, [r7, #28]
 800d3fa:	4413      	add	r3, r2
 800d3fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d400:	691a      	ldr	r2, [r3, #16]
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	699b      	ldr	r3, [r3, #24]
 800d406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d40a:	69b9      	ldr	r1, [r7, #24]
 800d40c:	0148      	lsls	r0, r1, #5
 800d40e:	69f9      	ldr	r1, [r7, #28]
 800d410:	4401      	add	r1, r0
 800d412:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d416:	4313      	orrs	r3, r2
 800d418:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	791b      	ldrb	r3, [r3, #4]
 800d41e:	2b01      	cmp	r3, #1
 800d420:	d11f      	bne.n	800d462 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d422:	69bb      	ldr	r3, [r7, #24]
 800d424:	015a      	lsls	r2, r3, #5
 800d426:	69fb      	ldr	r3, [r7, #28]
 800d428:	4413      	add	r3, r2
 800d42a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d42e:	691b      	ldr	r3, [r3, #16]
 800d430:	69ba      	ldr	r2, [r7, #24]
 800d432:	0151      	lsls	r1, r2, #5
 800d434:	69fa      	ldr	r2, [r7, #28]
 800d436:	440a      	add	r2, r1
 800d438:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d43c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d440:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d442:	69bb      	ldr	r3, [r7, #24]
 800d444:	015a      	lsls	r2, r3, #5
 800d446:	69fb      	ldr	r3, [r7, #28]
 800d448:	4413      	add	r3, r2
 800d44a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d44e:	691b      	ldr	r3, [r3, #16]
 800d450:	69ba      	ldr	r2, [r7, #24]
 800d452:	0151      	lsls	r1, r2, #5
 800d454:	69fa      	ldr	r2, [r7, #28]
 800d456:	440a      	add	r2, r1
 800d458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d45c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d460:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d462:	79fb      	ldrb	r3, [r7, #7]
 800d464:	2b01      	cmp	r3, #1
 800d466:	d14b      	bne.n	800d500 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	695b      	ldr	r3, [r3, #20]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d009      	beq.n	800d484 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d470:	69bb      	ldr	r3, [r7, #24]
 800d472:	015a      	lsls	r2, r3, #5
 800d474:	69fb      	ldr	r3, [r7, #28]
 800d476:	4413      	add	r3, r2
 800d478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d47c:	461a      	mov	r2, r3
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	695b      	ldr	r3, [r3, #20]
 800d482:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	791b      	ldrb	r3, [r3, #4]
 800d488:	2b01      	cmp	r3, #1
 800d48a:	d128      	bne.n	800d4de <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d48c:	69fb      	ldr	r3, [r7, #28]
 800d48e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d492:	689b      	ldr	r3, [r3, #8]
 800d494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d110      	bne.n	800d4be <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d49c:	69bb      	ldr	r3, [r7, #24]
 800d49e:	015a      	lsls	r2, r3, #5
 800d4a0:	69fb      	ldr	r3, [r7, #28]
 800d4a2:	4413      	add	r3, r2
 800d4a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	69ba      	ldr	r2, [r7, #24]
 800d4ac:	0151      	lsls	r1, r2, #5
 800d4ae:	69fa      	ldr	r2, [r7, #28]
 800d4b0:	440a      	add	r2, r1
 800d4b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d4ba:	6013      	str	r3, [r2, #0]
 800d4bc:	e00f      	b.n	800d4de <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d4be:	69bb      	ldr	r3, [r7, #24]
 800d4c0:	015a      	lsls	r2, r3, #5
 800d4c2:	69fb      	ldr	r3, [r7, #28]
 800d4c4:	4413      	add	r3, r2
 800d4c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	69ba      	ldr	r2, [r7, #24]
 800d4ce:	0151      	lsls	r1, r2, #5
 800d4d0:	69fa      	ldr	r2, [r7, #28]
 800d4d2:	440a      	add	r2, r1
 800d4d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d4dc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d4de:	69bb      	ldr	r3, [r7, #24]
 800d4e0:	015a      	lsls	r2, r3, #5
 800d4e2:	69fb      	ldr	r3, [r7, #28]
 800d4e4:	4413      	add	r3, r2
 800d4e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	69ba      	ldr	r2, [r7, #24]
 800d4ee:	0151      	lsls	r1, r2, #5
 800d4f0:	69fa      	ldr	r2, [r7, #28]
 800d4f2:	440a      	add	r2, r1
 800d4f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d4fc:	6013      	str	r3, [r2, #0]
 800d4fe:	e133      	b.n	800d768 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d500:	69bb      	ldr	r3, [r7, #24]
 800d502:	015a      	lsls	r2, r3, #5
 800d504:	69fb      	ldr	r3, [r7, #28]
 800d506:	4413      	add	r3, r2
 800d508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	69ba      	ldr	r2, [r7, #24]
 800d510:	0151      	lsls	r1, r2, #5
 800d512:	69fa      	ldr	r2, [r7, #28]
 800d514:	440a      	add	r2, r1
 800d516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d51a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d51e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	791b      	ldrb	r3, [r3, #4]
 800d524:	2b01      	cmp	r3, #1
 800d526:	d015      	beq.n	800d554 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	699b      	ldr	r3, [r3, #24]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	f000 811b 	beq.w	800d768 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d532:	69fb      	ldr	r3, [r7, #28]
 800d534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d538:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	781b      	ldrb	r3, [r3, #0]
 800d53e:	f003 030f 	and.w	r3, r3, #15
 800d542:	2101      	movs	r1, #1
 800d544:	fa01 f303 	lsl.w	r3, r1, r3
 800d548:	69f9      	ldr	r1, [r7, #28]
 800d54a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d54e:	4313      	orrs	r3, r2
 800d550:	634b      	str	r3, [r1, #52]	; 0x34
 800d552:	e109      	b.n	800d768 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d554:	69fb      	ldr	r3, [r7, #28]
 800d556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d55a:	689b      	ldr	r3, [r3, #8]
 800d55c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d560:	2b00      	cmp	r3, #0
 800d562:	d110      	bne.n	800d586 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d564:	69bb      	ldr	r3, [r7, #24]
 800d566:	015a      	lsls	r2, r3, #5
 800d568:	69fb      	ldr	r3, [r7, #28]
 800d56a:	4413      	add	r3, r2
 800d56c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	69ba      	ldr	r2, [r7, #24]
 800d574:	0151      	lsls	r1, r2, #5
 800d576:	69fa      	ldr	r2, [r7, #28]
 800d578:	440a      	add	r2, r1
 800d57a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d57e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d582:	6013      	str	r3, [r2, #0]
 800d584:	e00f      	b.n	800d5a6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d586:	69bb      	ldr	r3, [r7, #24]
 800d588:	015a      	lsls	r2, r3, #5
 800d58a:	69fb      	ldr	r3, [r7, #28]
 800d58c:	4413      	add	r3, r2
 800d58e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	69ba      	ldr	r2, [r7, #24]
 800d596:	0151      	lsls	r1, r2, #5
 800d598:	69fa      	ldr	r2, [r7, #28]
 800d59a:	440a      	add	r2, r1
 800d59c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d5a4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	6919      	ldr	r1, [r3, #16]
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	781a      	ldrb	r2, [r3, #0]
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	699b      	ldr	r3, [r3, #24]
 800d5b2:	b298      	uxth	r0, r3
 800d5b4:	79fb      	ldrb	r3, [r7, #7]
 800d5b6:	9300      	str	r3, [sp, #0]
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	68f8      	ldr	r0, [r7, #12]
 800d5bc:	f000 fade 	bl	800db7c <USB_WritePacket>
 800d5c0:	e0d2      	b.n	800d768 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d5c2:	69bb      	ldr	r3, [r7, #24]
 800d5c4:	015a      	lsls	r2, r3, #5
 800d5c6:	69fb      	ldr	r3, [r7, #28]
 800d5c8:	4413      	add	r3, r2
 800d5ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5ce:	691b      	ldr	r3, [r3, #16]
 800d5d0:	69ba      	ldr	r2, [r7, #24]
 800d5d2:	0151      	lsls	r1, r2, #5
 800d5d4:	69fa      	ldr	r2, [r7, #28]
 800d5d6:	440a      	add	r2, r1
 800d5d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d5dc:	0cdb      	lsrs	r3, r3, #19
 800d5de:	04db      	lsls	r3, r3, #19
 800d5e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d5e2:	69bb      	ldr	r3, [r7, #24]
 800d5e4:	015a      	lsls	r2, r3, #5
 800d5e6:	69fb      	ldr	r3, [r7, #28]
 800d5e8:	4413      	add	r3, r2
 800d5ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5ee:	691b      	ldr	r3, [r3, #16]
 800d5f0:	69ba      	ldr	r2, [r7, #24]
 800d5f2:	0151      	lsls	r1, r2, #5
 800d5f4:	69fa      	ldr	r2, [r7, #28]
 800d5f6:	440a      	add	r2, r1
 800d5f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d5fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d600:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d604:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	699b      	ldr	r3, [r3, #24]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d126      	bne.n	800d65c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d60e:	69bb      	ldr	r3, [r7, #24]
 800d610:	015a      	lsls	r2, r3, #5
 800d612:	69fb      	ldr	r3, [r7, #28]
 800d614:	4413      	add	r3, r2
 800d616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d61a:	691a      	ldr	r2, [r3, #16]
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	68db      	ldr	r3, [r3, #12]
 800d620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d624:	69b9      	ldr	r1, [r7, #24]
 800d626:	0148      	lsls	r0, r1, #5
 800d628:	69f9      	ldr	r1, [r7, #28]
 800d62a:	4401      	add	r1, r0
 800d62c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d630:	4313      	orrs	r3, r2
 800d632:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d634:	69bb      	ldr	r3, [r7, #24]
 800d636:	015a      	lsls	r2, r3, #5
 800d638:	69fb      	ldr	r3, [r7, #28]
 800d63a:	4413      	add	r3, r2
 800d63c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d640:	691b      	ldr	r3, [r3, #16]
 800d642:	69ba      	ldr	r2, [r7, #24]
 800d644:	0151      	lsls	r1, r2, #5
 800d646:	69fa      	ldr	r2, [r7, #28]
 800d648:	440a      	add	r2, r1
 800d64a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d64e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d652:	6113      	str	r3, [r2, #16]
 800d654:	e03a      	b.n	800d6cc <USB_EPStartXfer+0x3e4>
 800d656:	bf00      	nop
 800d658:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	699a      	ldr	r2, [r3, #24]
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	68db      	ldr	r3, [r3, #12]
 800d664:	4413      	add	r3, r2
 800d666:	1e5a      	subs	r2, r3, #1
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	68db      	ldr	r3, [r3, #12]
 800d66c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d670:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	68db      	ldr	r3, [r3, #12]
 800d676:	8afa      	ldrh	r2, [r7, #22]
 800d678:	fb03 f202 	mul.w	r2, r3, r2
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d680:	69bb      	ldr	r3, [r7, #24]
 800d682:	015a      	lsls	r2, r3, #5
 800d684:	69fb      	ldr	r3, [r7, #28]
 800d686:	4413      	add	r3, r2
 800d688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d68c:	691a      	ldr	r2, [r3, #16]
 800d68e:	8afb      	ldrh	r3, [r7, #22]
 800d690:	04d9      	lsls	r1, r3, #19
 800d692:	4b38      	ldr	r3, [pc, #224]	; (800d774 <USB_EPStartXfer+0x48c>)
 800d694:	400b      	ands	r3, r1
 800d696:	69b9      	ldr	r1, [r7, #24]
 800d698:	0148      	lsls	r0, r1, #5
 800d69a:	69f9      	ldr	r1, [r7, #28]
 800d69c:	4401      	add	r1, r0
 800d69e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d6a2:	4313      	orrs	r3, r2
 800d6a4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800d6a6:	69bb      	ldr	r3, [r7, #24]
 800d6a8:	015a      	lsls	r2, r3, #5
 800d6aa:	69fb      	ldr	r3, [r7, #28]
 800d6ac:	4413      	add	r3, r2
 800d6ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6b2:	691a      	ldr	r2, [r3, #16]
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	69db      	ldr	r3, [r3, #28]
 800d6b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d6bc:	69b9      	ldr	r1, [r7, #24]
 800d6be:	0148      	lsls	r0, r1, #5
 800d6c0:	69f9      	ldr	r1, [r7, #28]
 800d6c2:	4401      	add	r1, r0
 800d6c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d6c8:	4313      	orrs	r3, r2
 800d6ca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d6cc:	79fb      	ldrb	r3, [r7, #7]
 800d6ce:	2b01      	cmp	r3, #1
 800d6d0:	d10d      	bne.n	800d6ee <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	691b      	ldr	r3, [r3, #16]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d009      	beq.n	800d6ee <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	6919      	ldr	r1, [r3, #16]
 800d6de:	69bb      	ldr	r3, [r7, #24]
 800d6e0:	015a      	lsls	r2, r3, #5
 800d6e2:	69fb      	ldr	r3, [r7, #28]
 800d6e4:	4413      	add	r3, r2
 800d6e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6ea:	460a      	mov	r2, r1
 800d6ec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	791b      	ldrb	r3, [r3, #4]
 800d6f2:	2b01      	cmp	r3, #1
 800d6f4:	d128      	bne.n	800d748 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d6f6:	69fb      	ldr	r3, [r7, #28]
 800d6f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6fc:	689b      	ldr	r3, [r3, #8]
 800d6fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d702:	2b00      	cmp	r3, #0
 800d704:	d110      	bne.n	800d728 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d706:	69bb      	ldr	r3, [r7, #24]
 800d708:	015a      	lsls	r2, r3, #5
 800d70a:	69fb      	ldr	r3, [r7, #28]
 800d70c:	4413      	add	r3, r2
 800d70e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	69ba      	ldr	r2, [r7, #24]
 800d716:	0151      	lsls	r1, r2, #5
 800d718:	69fa      	ldr	r2, [r7, #28]
 800d71a:	440a      	add	r2, r1
 800d71c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d720:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d724:	6013      	str	r3, [r2, #0]
 800d726:	e00f      	b.n	800d748 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d728:	69bb      	ldr	r3, [r7, #24]
 800d72a:	015a      	lsls	r2, r3, #5
 800d72c:	69fb      	ldr	r3, [r7, #28]
 800d72e:	4413      	add	r3, r2
 800d730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	69ba      	ldr	r2, [r7, #24]
 800d738:	0151      	lsls	r1, r2, #5
 800d73a:	69fa      	ldr	r2, [r7, #28]
 800d73c:	440a      	add	r2, r1
 800d73e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d746:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d748:	69bb      	ldr	r3, [r7, #24]
 800d74a:	015a      	lsls	r2, r3, #5
 800d74c:	69fb      	ldr	r3, [r7, #28]
 800d74e:	4413      	add	r3, r2
 800d750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	69ba      	ldr	r2, [r7, #24]
 800d758:	0151      	lsls	r1, r2, #5
 800d75a:	69fa      	ldr	r2, [r7, #28]
 800d75c:	440a      	add	r2, r1
 800d75e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d762:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d766:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d768:	2300      	movs	r3, #0
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3720      	adds	r7, #32
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}
 800d772:	bf00      	nop
 800d774:	1ff80000 	.word	0x1ff80000

0800d778 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d778:	b480      	push	{r7}
 800d77a:	b087      	sub	sp, #28
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	60f8      	str	r0, [r7, #12]
 800d780:	60b9      	str	r1, [r7, #8]
 800d782:	4613      	mov	r3, r2
 800d784:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	781b      	ldrb	r3, [r3, #0]
 800d78e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	785b      	ldrb	r3, [r3, #1]
 800d794:	2b01      	cmp	r3, #1
 800d796:	f040 80ce 	bne.w	800d936 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	699b      	ldr	r3, [r3, #24]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d132      	bne.n	800d808 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d7a2:	693b      	ldr	r3, [r7, #16]
 800d7a4:	015a      	lsls	r2, r3, #5
 800d7a6:	697b      	ldr	r3, [r7, #20]
 800d7a8:	4413      	add	r3, r2
 800d7aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7ae:	691b      	ldr	r3, [r3, #16]
 800d7b0:	693a      	ldr	r2, [r7, #16]
 800d7b2:	0151      	lsls	r1, r2, #5
 800d7b4:	697a      	ldr	r2, [r7, #20]
 800d7b6:	440a      	add	r2, r1
 800d7b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d7c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d7c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	015a      	lsls	r2, r3, #5
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	4413      	add	r3, r2
 800d7ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7d2:	691b      	ldr	r3, [r3, #16]
 800d7d4:	693a      	ldr	r2, [r7, #16]
 800d7d6:	0151      	lsls	r1, r2, #5
 800d7d8:	697a      	ldr	r2, [r7, #20]
 800d7da:	440a      	add	r2, r1
 800d7dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d7e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d7e6:	693b      	ldr	r3, [r7, #16]
 800d7e8:	015a      	lsls	r2, r3, #5
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	4413      	add	r3, r2
 800d7ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7f2:	691b      	ldr	r3, [r3, #16]
 800d7f4:	693a      	ldr	r2, [r7, #16]
 800d7f6:	0151      	lsls	r1, r2, #5
 800d7f8:	697a      	ldr	r2, [r7, #20]
 800d7fa:	440a      	add	r2, r1
 800d7fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d800:	0cdb      	lsrs	r3, r3, #19
 800d802:	04db      	lsls	r3, r3, #19
 800d804:	6113      	str	r3, [r2, #16]
 800d806:	e04e      	b.n	800d8a6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d808:	693b      	ldr	r3, [r7, #16]
 800d80a:	015a      	lsls	r2, r3, #5
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	4413      	add	r3, r2
 800d810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d814:	691b      	ldr	r3, [r3, #16]
 800d816:	693a      	ldr	r2, [r7, #16]
 800d818:	0151      	lsls	r1, r2, #5
 800d81a:	697a      	ldr	r2, [r7, #20]
 800d81c:	440a      	add	r2, r1
 800d81e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d822:	0cdb      	lsrs	r3, r3, #19
 800d824:	04db      	lsls	r3, r3, #19
 800d826:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d828:	693b      	ldr	r3, [r7, #16]
 800d82a:	015a      	lsls	r2, r3, #5
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	4413      	add	r3, r2
 800d830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d834:	691b      	ldr	r3, [r3, #16]
 800d836:	693a      	ldr	r2, [r7, #16]
 800d838:	0151      	lsls	r1, r2, #5
 800d83a:	697a      	ldr	r2, [r7, #20]
 800d83c:	440a      	add	r2, r1
 800d83e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d842:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d846:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d84a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	699a      	ldr	r2, [r3, #24]
 800d850:	68bb      	ldr	r3, [r7, #8]
 800d852:	68db      	ldr	r3, [r3, #12]
 800d854:	429a      	cmp	r2, r3
 800d856:	d903      	bls.n	800d860 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	68da      	ldr	r2, [r3, #12]
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	015a      	lsls	r2, r3, #5
 800d864:	697b      	ldr	r3, [r7, #20]
 800d866:	4413      	add	r3, r2
 800d868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d86c:	691b      	ldr	r3, [r3, #16]
 800d86e:	693a      	ldr	r2, [r7, #16]
 800d870:	0151      	lsls	r1, r2, #5
 800d872:	697a      	ldr	r2, [r7, #20]
 800d874:	440a      	add	r2, r1
 800d876:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d87a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d87e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d880:	693b      	ldr	r3, [r7, #16]
 800d882:	015a      	lsls	r2, r3, #5
 800d884:	697b      	ldr	r3, [r7, #20]
 800d886:	4413      	add	r3, r2
 800d888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d88c:	691a      	ldr	r2, [r3, #16]
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	699b      	ldr	r3, [r3, #24]
 800d892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d896:	6939      	ldr	r1, [r7, #16]
 800d898:	0148      	lsls	r0, r1, #5
 800d89a:	6979      	ldr	r1, [r7, #20]
 800d89c:	4401      	add	r1, r0
 800d89e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d8a2:	4313      	orrs	r3, r2
 800d8a4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d8a6:	79fb      	ldrb	r3, [r7, #7]
 800d8a8:	2b01      	cmp	r3, #1
 800d8aa:	d11e      	bne.n	800d8ea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	695b      	ldr	r3, [r3, #20]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d009      	beq.n	800d8c8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	015a      	lsls	r2, r3, #5
 800d8b8:	697b      	ldr	r3, [r7, #20]
 800d8ba:	4413      	add	r3, r2
 800d8bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8c0:	461a      	mov	r2, r3
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	695b      	ldr	r3, [r3, #20]
 800d8c6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d8c8:	693b      	ldr	r3, [r7, #16]
 800d8ca:	015a      	lsls	r2, r3, #5
 800d8cc:	697b      	ldr	r3, [r7, #20]
 800d8ce:	4413      	add	r3, r2
 800d8d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	693a      	ldr	r2, [r7, #16]
 800d8d8:	0151      	lsls	r1, r2, #5
 800d8da:	697a      	ldr	r2, [r7, #20]
 800d8dc:	440a      	add	r2, r1
 800d8de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d8e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d8e6:	6013      	str	r3, [r2, #0]
 800d8e8:	e097      	b.n	800da1a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d8ea:	693b      	ldr	r3, [r7, #16]
 800d8ec:	015a      	lsls	r2, r3, #5
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	4413      	add	r3, r2
 800d8f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	693a      	ldr	r2, [r7, #16]
 800d8fa:	0151      	lsls	r1, r2, #5
 800d8fc:	697a      	ldr	r2, [r7, #20]
 800d8fe:	440a      	add	r2, r1
 800d900:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d904:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d908:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d90a:	68bb      	ldr	r3, [r7, #8]
 800d90c:	699b      	ldr	r3, [r3, #24]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	f000 8083 	beq.w	800da1a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d91a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	781b      	ldrb	r3, [r3, #0]
 800d920:	f003 030f 	and.w	r3, r3, #15
 800d924:	2101      	movs	r1, #1
 800d926:	fa01 f303 	lsl.w	r3, r1, r3
 800d92a:	6979      	ldr	r1, [r7, #20]
 800d92c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d930:	4313      	orrs	r3, r2
 800d932:	634b      	str	r3, [r1, #52]	; 0x34
 800d934:	e071      	b.n	800da1a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	015a      	lsls	r2, r3, #5
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	4413      	add	r3, r2
 800d93e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d942:	691b      	ldr	r3, [r3, #16]
 800d944:	693a      	ldr	r2, [r7, #16]
 800d946:	0151      	lsls	r1, r2, #5
 800d948:	697a      	ldr	r2, [r7, #20]
 800d94a:	440a      	add	r2, r1
 800d94c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d950:	0cdb      	lsrs	r3, r3, #19
 800d952:	04db      	lsls	r3, r3, #19
 800d954:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d956:	693b      	ldr	r3, [r7, #16]
 800d958:	015a      	lsls	r2, r3, #5
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	4413      	add	r3, r2
 800d95e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d962:	691b      	ldr	r3, [r3, #16]
 800d964:	693a      	ldr	r2, [r7, #16]
 800d966:	0151      	lsls	r1, r2, #5
 800d968:	697a      	ldr	r2, [r7, #20]
 800d96a:	440a      	add	r2, r1
 800d96c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d970:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d974:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d978:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	699b      	ldr	r3, [r3, #24]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d003      	beq.n	800d98a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	68da      	ldr	r2, [r3, #12]
 800d986:	68bb      	ldr	r3, [r7, #8]
 800d988:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	68da      	ldr	r2, [r3, #12]
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d992:	693b      	ldr	r3, [r7, #16]
 800d994:	015a      	lsls	r2, r3, #5
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	4413      	add	r3, r2
 800d99a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d99e:	691b      	ldr	r3, [r3, #16]
 800d9a0:	693a      	ldr	r2, [r7, #16]
 800d9a2:	0151      	lsls	r1, r2, #5
 800d9a4:	697a      	ldr	r2, [r7, #20]
 800d9a6:	440a      	add	r2, r1
 800d9a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d9b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800d9b2:	693b      	ldr	r3, [r7, #16]
 800d9b4:	015a      	lsls	r2, r3, #5
 800d9b6:	697b      	ldr	r3, [r7, #20]
 800d9b8:	4413      	add	r3, r2
 800d9ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9be:	691a      	ldr	r2, [r3, #16]
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	69db      	ldr	r3, [r3, #28]
 800d9c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d9c8:	6939      	ldr	r1, [r7, #16]
 800d9ca:	0148      	lsls	r0, r1, #5
 800d9cc:	6979      	ldr	r1, [r7, #20]
 800d9ce:	4401      	add	r1, r0
 800d9d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d9d4:	4313      	orrs	r3, r2
 800d9d6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800d9d8:	79fb      	ldrb	r3, [r7, #7]
 800d9da:	2b01      	cmp	r3, #1
 800d9dc:	d10d      	bne.n	800d9fa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	691b      	ldr	r3, [r3, #16]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d009      	beq.n	800d9fa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	6919      	ldr	r1, [r3, #16]
 800d9ea:	693b      	ldr	r3, [r7, #16]
 800d9ec:	015a      	lsls	r2, r3, #5
 800d9ee:	697b      	ldr	r3, [r7, #20]
 800d9f0:	4413      	add	r3, r2
 800d9f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9f6:	460a      	mov	r2, r1
 800d9f8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d9fa:	693b      	ldr	r3, [r7, #16]
 800d9fc:	015a      	lsls	r2, r3, #5
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	4413      	add	r3, r2
 800da02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	693a      	ldr	r2, [r7, #16]
 800da0a:	0151      	lsls	r1, r2, #5
 800da0c:	697a      	ldr	r2, [r7, #20]
 800da0e:	440a      	add	r2, r1
 800da10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800da18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800da1a:	2300      	movs	r3, #0
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	371c      	adds	r7, #28
 800da20:	46bd      	mov	sp, r7
 800da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da26:	4770      	bx	lr

0800da28 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800da28:	b480      	push	{r7}
 800da2a:	b087      	sub	sp, #28
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
 800da30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800da32:	2300      	movs	r3, #0
 800da34:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800da36:	2300      	movs	r3, #0
 800da38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	785b      	ldrb	r3, [r3, #1]
 800da42:	2b01      	cmp	r3, #1
 800da44:	d14a      	bne.n	800dadc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	781b      	ldrb	r3, [r3, #0]
 800da4a:	015a      	lsls	r2, r3, #5
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	4413      	add	r3, r2
 800da50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800da5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800da5e:	f040 8086 	bne.w	800db6e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	781b      	ldrb	r3, [r3, #0]
 800da66:	015a      	lsls	r2, r3, #5
 800da68:	693b      	ldr	r3, [r7, #16]
 800da6a:	4413      	add	r3, r2
 800da6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	683a      	ldr	r2, [r7, #0]
 800da74:	7812      	ldrb	r2, [r2, #0]
 800da76:	0151      	lsls	r1, r2, #5
 800da78:	693a      	ldr	r2, [r7, #16]
 800da7a:	440a      	add	r2, r1
 800da7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800da84:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	781b      	ldrb	r3, [r3, #0]
 800da8a:	015a      	lsls	r2, r3, #5
 800da8c:	693b      	ldr	r3, [r7, #16]
 800da8e:	4413      	add	r3, r2
 800da90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	683a      	ldr	r2, [r7, #0]
 800da98:	7812      	ldrb	r2, [r2, #0]
 800da9a:	0151      	lsls	r1, r2, #5
 800da9c:	693a      	ldr	r2, [r7, #16]
 800da9e:	440a      	add	r2, r1
 800daa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800daa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800daa8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	3301      	adds	r3, #1
 800daae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	f242 7210 	movw	r2, #10000	; 0x2710
 800dab6:	4293      	cmp	r3, r2
 800dab8:	d902      	bls.n	800dac0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800daba:	2301      	movs	r3, #1
 800dabc:	75fb      	strb	r3, [r7, #23]
          break;
 800dabe:	e056      	b.n	800db6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	015a      	lsls	r2, r3, #5
 800dac6:	693b      	ldr	r3, [r7, #16]
 800dac8:	4413      	add	r3, r2
 800daca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dad4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dad8:	d0e7      	beq.n	800daaa <USB_EPStopXfer+0x82>
 800dada:	e048      	b.n	800db6e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	781b      	ldrb	r3, [r3, #0]
 800dae0:	015a      	lsls	r2, r3, #5
 800dae2:	693b      	ldr	r3, [r7, #16]
 800dae4:	4413      	add	r3, r2
 800dae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800daf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800daf4:	d13b      	bne.n	800db6e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	781b      	ldrb	r3, [r3, #0]
 800dafa:	015a      	lsls	r2, r3, #5
 800dafc:	693b      	ldr	r3, [r7, #16]
 800dafe:	4413      	add	r3, r2
 800db00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	683a      	ldr	r2, [r7, #0]
 800db08:	7812      	ldrb	r2, [r2, #0]
 800db0a:	0151      	lsls	r1, r2, #5
 800db0c:	693a      	ldr	r2, [r7, #16]
 800db0e:	440a      	add	r2, r1
 800db10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800db18:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	781b      	ldrb	r3, [r3, #0]
 800db1e:	015a      	lsls	r2, r3, #5
 800db20:	693b      	ldr	r3, [r7, #16]
 800db22:	4413      	add	r3, r2
 800db24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	683a      	ldr	r2, [r7, #0]
 800db2c:	7812      	ldrb	r2, [r2, #0]
 800db2e:	0151      	lsls	r1, r2, #5
 800db30:	693a      	ldr	r2, [r7, #16]
 800db32:	440a      	add	r2, r1
 800db34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800db3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	3301      	adds	r3, #1
 800db42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	f242 7210 	movw	r2, #10000	; 0x2710
 800db4a:	4293      	cmp	r3, r2
 800db4c:	d902      	bls.n	800db54 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800db4e:	2301      	movs	r3, #1
 800db50:	75fb      	strb	r3, [r7, #23]
          break;
 800db52:	e00c      	b.n	800db6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	781b      	ldrb	r3, [r3, #0]
 800db58:	015a      	lsls	r2, r3, #5
 800db5a:	693b      	ldr	r3, [r7, #16]
 800db5c:	4413      	add	r3, r2
 800db5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800db68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800db6c:	d0e7      	beq.n	800db3e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800db6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800db70:	4618      	mov	r0, r3
 800db72:	371c      	adds	r7, #28
 800db74:	46bd      	mov	sp, r7
 800db76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7a:	4770      	bx	lr

0800db7c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800db7c:	b480      	push	{r7}
 800db7e:	b089      	sub	sp, #36	; 0x24
 800db80:	af00      	add	r7, sp, #0
 800db82:	60f8      	str	r0, [r7, #12]
 800db84:	60b9      	str	r1, [r7, #8]
 800db86:	4611      	mov	r1, r2
 800db88:	461a      	mov	r2, r3
 800db8a:	460b      	mov	r3, r1
 800db8c:	71fb      	strb	r3, [r7, #7]
 800db8e:	4613      	mov	r3, r2
 800db90:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800db9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d123      	bne.n	800dbea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800dba2:	88bb      	ldrh	r3, [r7, #4]
 800dba4:	3303      	adds	r3, #3
 800dba6:	089b      	lsrs	r3, r3, #2
 800dba8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800dbaa:	2300      	movs	r3, #0
 800dbac:	61bb      	str	r3, [r7, #24]
 800dbae:	e018      	b.n	800dbe2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800dbb0:	79fb      	ldrb	r3, [r7, #7]
 800dbb2:	031a      	lsls	r2, r3, #12
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	4413      	add	r3, r2
 800dbb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbbc:	461a      	mov	r2, r3
 800dbbe:	69fb      	ldr	r3, [r7, #28]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800dbc4:	69fb      	ldr	r3, [r7, #28]
 800dbc6:	3301      	adds	r3, #1
 800dbc8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800dbca:	69fb      	ldr	r3, [r7, #28]
 800dbcc:	3301      	adds	r3, #1
 800dbce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800dbd0:	69fb      	ldr	r3, [r7, #28]
 800dbd2:	3301      	adds	r3, #1
 800dbd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800dbd6:	69fb      	ldr	r3, [r7, #28]
 800dbd8:	3301      	adds	r3, #1
 800dbda:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800dbdc:	69bb      	ldr	r3, [r7, #24]
 800dbde:	3301      	adds	r3, #1
 800dbe0:	61bb      	str	r3, [r7, #24]
 800dbe2:	69ba      	ldr	r2, [r7, #24]
 800dbe4:	693b      	ldr	r3, [r7, #16]
 800dbe6:	429a      	cmp	r2, r3
 800dbe8:	d3e2      	bcc.n	800dbb0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800dbea:	2300      	movs	r3, #0
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3724      	adds	r7, #36	; 0x24
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf6:	4770      	bx	lr

0800dbf8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800dbf8:	b480      	push	{r7}
 800dbfa:	b08b      	sub	sp, #44	; 0x2c
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	60f8      	str	r0, [r7, #12]
 800dc00:	60b9      	str	r1, [r7, #8]
 800dc02:	4613      	mov	r3, r2
 800dc04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800dc0e:	88fb      	ldrh	r3, [r7, #6]
 800dc10:	089b      	lsrs	r3, r3, #2
 800dc12:	b29b      	uxth	r3, r3
 800dc14:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800dc16:	88fb      	ldrh	r3, [r7, #6]
 800dc18:	f003 0303 	and.w	r3, r3, #3
 800dc1c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800dc1e:	2300      	movs	r3, #0
 800dc20:	623b      	str	r3, [r7, #32]
 800dc22:	e014      	b.n	800dc4e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800dc24:	69bb      	ldr	r3, [r7, #24]
 800dc26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc2a:	681a      	ldr	r2, [r3, #0]
 800dc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc2e:	601a      	str	r2, [r3, #0]
    pDest++;
 800dc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc32:	3301      	adds	r3, #1
 800dc34:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800dc36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc38:	3301      	adds	r3, #1
 800dc3a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800dc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3e:	3301      	adds	r3, #1
 800dc40:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800dc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc44:	3301      	adds	r3, #1
 800dc46:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800dc48:	6a3b      	ldr	r3, [r7, #32]
 800dc4a:	3301      	adds	r3, #1
 800dc4c:	623b      	str	r3, [r7, #32]
 800dc4e:	6a3a      	ldr	r2, [r7, #32]
 800dc50:	697b      	ldr	r3, [r7, #20]
 800dc52:	429a      	cmp	r2, r3
 800dc54:	d3e6      	bcc.n	800dc24 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800dc56:	8bfb      	ldrh	r3, [r7, #30]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d01e      	beq.n	800dc9a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800dc60:	69bb      	ldr	r3, [r7, #24]
 800dc62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc66:	461a      	mov	r2, r3
 800dc68:	f107 0310 	add.w	r3, r7, #16
 800dc6c:	6812      	ldr	r2, [r2, #0]
 800dc6e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800dc70:	693a      	ldr	r2, [r7, #16]
 800dc72:	6a3b      	ldr	r3, [r7, #32]
 800dc74:	b2db      	uxtb	r3, r3
 800dc76:	00db      	lsls	r3, r3, #3
 800dc78:	fa22 f303 	lsr.w	r3, r2, r3
 800dc7c:	b2da      	uxtb	r2, r3
 800dc7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc80:	701a      	strb	r2, [r3, #0]
      i++;
 800dc82:	6a3b      	ldr	r3, [r7, #32]
 800dc84:	3301      	adds	r3, #1
 800dc86:	623b      	str	r3, [r7, #32]
      pDest++;
 800dc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc8a:	3301      	adds	r3, #1
 800dc8c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800dc8e:	8bfb      	ldrh	r3, [r7, #30]
 800dc90:	3b01      	subs	r3, #1
 800dc92:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800dc94:	8bfb      	ldrh	r3, [r7, #30]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d1ea      	bne.n	800dc70 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800dc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	372c      	adds	r7, #44	; 0x2c
 800dca0:	46bd      	mov	sp, r7
 800dca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca6:	4770      	bx	lr

0800dca8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b085      	sub	sp, #20
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
 800dcb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	781b      	ldrb	r3, [r3, #0]
 800dcba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	785b      	ldrb	r3, [r3, #1]
 800dcc0:	2b01      	cmp	r3, #1
 800dcc2:	d12c      	bne.n	800dd1e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	015a      	lsls	r2, r3, #5
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	4413      	add	r3, r2
 800dccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	db12      	blt.n	800dcfc <USB_EPSetStall+0x54>
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d00f      	beq.n	800dcfc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	015a      	lsls	r2, r3, #5
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	4413      	add	r3, r2
 800dce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	68ba      	ldr	r2, [r7, #8]
 800dcec:	0151      	lsls	r1, r2, #5
 800dcee:	68fa      	ldr	r2, [r7, #12]
 800dcf0:	440a      	add	r2, r1
 800dcf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dcf6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dcfa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	015a      	lsls	r2, r3, #5
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	4413      	add	r3, r2
 800dd04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	68ba      	ldr	r2, [r7, #8]
 800dd0c:	0151      	lsls	r1, r2, #5
 800dd0e:	68fa      	ldr	r2, [r7, #12]
 800dd10:	440a      	add	r2, r1
 800dd12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dd1a:	6013      	str	r3, [r2, #0]
 800dd1c:	e02b      	b.n	800dd76 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	015a      	lsls	r2, r3, #5
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	4413      	add	r3, r2
 800dd26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	db12      	blt.n	800dd56 <USB_EPSetStall+0xae>
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d00f      	beq.n	800dd56 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	015a      	lsls	r2, r3, #5
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	4413      	add	r3, r2
 800dd3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	68ba      	ldr	r2, [r7, #8]
 800dd46:	0151      	lsls	r1, r2, #5
 800dd48:	68fa      	ldr	r2, [r7, #12]
 800dd4a:	440a      	add	r2, r1
 800dd4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dd54:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	015a      	lsls	r2, r3, #5
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	4413      	add	r3, r2
 800dd5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	68ba      	ldr	r2, [r7, #8]
 800dd66:	0151      	lsls	r1, r2, #5
 800dd68:	68fa      	ldr	r2, [r7, #12]
 800dd6a:	440a      	add	r2, r1
 800dd6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dd74:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dd76:	2300      	movs	r3, #0
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3714      	adds	r7, #20
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd82:	4770      	bx	lr

0800dd84 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dd84:	b480      	push	{r7}
 800dd86:	b085      	sub	sp, #20
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	781b      	ldrb	r3, [r3, #0]
 800dd96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	785b      	ldrb	r3, [r3, #1]
 800dd9c:	2b01      	cmp	r3, #1
 800dd9e:	d128      	bne.n	800ddf2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	015a      	lsls	r2, r3, #5
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	4413      	add	r3, r2
 800dda8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	68ba      	ldr	r2, [r7, #8]
 800ddb0:	0151      	lsls	r1, r2, #5
 800ddb2:	68fa      	ldr	r2, [r7, #12]
 800ddb4:	440a      	add	r2, r1
 800ddb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ddba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ddbe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	791b      	ldrb	r3, [r3, #4]
 800ddc4:	2b03      	cmp	r3, #3
 800ddc6:	d003      	beq.n	800ddd0 <USB_EPClearStall+0x4c>
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	791b      	ldrb	r3, [r3, #4]
 800ddcc:	2b02      	cmp	r3, #2
 800ddce:	d138      	bne.n	800de42 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	015a      	lsls	r2, r3, #5
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	4413      	add	r3, r2
 800ddd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	68ba      	ldr	r2, [r7, #8]
 800dde0:	0151      	lsls	r1, r2, #5
 800dde2:	68fa      	ldr	r2, [r7, #12]
 800dde4:	440a      	add	r2, r1
 800dde6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ddea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ddee:	6013      	str	r3, [r2, #0]
 800ddf0:	e027      	b.n	800de42 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ddf2:	68bb      	ldr	r3, [r7, #8]
 800ddf4:	015a      	lsls	r2, r3, #5
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	4413      	add	r3, r2
 800ddfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	68ba      	ldr	r2, [r7, #8]
 800de02:	0151      	lsls	r1, r2, #5
 800de04:	68fa      	ldr	r2, [r7, #12]
 800de06:	440a      	add	r2, r1
 800de08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800de10:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	791b      	ldrb	r3, [r3, #4]
 800de16:	2b03      	cmp	r3, #3
 800de18:	d003      	beq.n	800de22 <USB_EPClearStall+0x9e>
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	791b      	ldrb	r3, [r3, #4]
 800de1e:	2b02      	cmp	r3, #2
 800de20:	d10f      	bne.n	800de42 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	015a      	lsls	r2, r3, #5
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	4413      	add	r3, r2
 800de2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	68ba      	ldr	r2, [r7, #8]
 800de32:	0151      	lsls	r1, r2, #5
 800de34:	68fa      	ldr	r2, [r7, #12]
 800de36:	440a      	add	r2, r1
 800de38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800de40:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800de42:	2300      	movs	r3, #0
}
 800de44:	4618      	mov	r0, r3
 800de46:	3714      	adds	r7, #20
 800de48:	46bd      	mov	sp, r7
 800de4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4e:	4770      	bx	lr

0800de50 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800de50:	b480      	push	{r7}
 800de52:	b085      	sub	sp, #20
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
 800de58:	460b      	mov	r3, r1
 800de5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	68fa      	ldr	r2, [r7, #12]
 800de6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800de6e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800de72:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de7a:	681a      	ldr	r2, [r3, #0]
 800de7c:	78fb      	ldrb	r3, [r7, #3]
 800de7e:	011b      	lsls	r3, r3, #4
 800de80:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800de84:	68f9      	ldr	r1, [r7, #12]
 800de86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800de8a:	4313      	orrs	r3, r2
 800de8c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800de8e:	2300      	movs	r3, #0
}
 800de90:	4618      	mov	r0, r3
 800de92:	3714      	adds	r7, #20
 800de94:	46bd      	mov	sp, r7
 800de96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9a:	4770      	bx	lr

0800de9c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800de9c:	b480      	push	{r7}
 800de9e:	b085      	sub	sp, #20
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	68fa      	ldr	r2, [r7, #12]
 800deb2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800deb6:	f023 0303 	bic.w	r3, r3, #3
 800deba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dec2:	685b      	ldr	r3, [r3, #4]
 800dec4:	68fa      	ldr	r2, [r7, #12]
 800dec6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800deca:	f023 0302 	bic.w	r3, r3, #2
 800dece:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ded0:	2300      	movs	r3, #0
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	3714      	adds	r7, #20
 800ded6:	46bd      	mov	sp, r7
 800ded8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dedc:	4770      	bx	lr

0800dede <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800dede:	b480      	push	{r7}
 800dee0:	b085      	sub	sp, #20
 800dee2:	af00      	add	r7, sp, #0
 800dee4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	68fa      	ldr	r2, [r7, #12]
 800def4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800def8:	f023 0303 	bic.w	r3, r3, #3
 800defc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df04:	685b      	ldr	r3, [r3, #4]
 800df06:	68fa      	ldr	r2, [r7, #12]
 800df08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800df0c:	f043 0302 	orr.w	r3, r3, #2
 800df10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800df12:	2300      	movs	r3, #0
}
 800df14:	4618      	mov	r0, r3
 800df16:	3714      	adds	r7, #20
 800df18:	46bd      	mov	sp, r7
 800df1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1e:	4770      	bx	lr

0800df20 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800df20:	b480      	push	{r7}
 800df22:	b085      	sub	sp, #20
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	695b      	ldr	r3, [r3, #20]
 800df2c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	699b      	ldr	r3, [r3, #24]
 800df32:	68fa      	ldr	r2, [r7, #12]
 800df34:	4013      	ands	r3, r2
 800df36:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800df38:	68fb      	ldr	r3, [r7, #12]
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3714      	adds	r7, #20
 800df3e:	46bd      	mov	sp, r7
 800df40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df44:	4770      	bx	lr

0800df46 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800df46:	b480      	push	{r7}
 800df48:	b085      	sub	sp, #20
 800df4a:	af00      	add	r7, sp, #0
 800df4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df58:	699b      	ldr	r3, [r3, #24]
 800df5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df62:	69db      	ldr	r3, [r3, #28]
 800df64:	68ba      	ldr	r2, [r7, #8]
 800df66:	4013      	ands	r3, r2
 800df68:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800df6a:	68bb      	ldr	r3, [r7, #8]
 800df6c:	0c1b      	lsrs	r3, r3, #16
}
 800df6e:	4618      	mov	r0, r3
 800df70:	3714      	adds	r7, #20
 800df72:	46bd      	mov	sp, r7
 800df74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df78:	4770      	bx	lr

0800df7a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800df7a:	b480      	push	{r7}
 800df7c:	b085      	sub	sp, #20
 800df7e:	af00      	add	r7, sp, #0
 800df80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df8c:	699b      	ldr	r3, [r3, #24]
 800df8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df96:	69db      	ldr	r3, [r3, #28]
 800df98:	68ba      	ldr	r2, [r7, #8]
 800df9a:	4013      	ands	r3, r2
 800df9c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800df9e:	68bb      	ldr	r3, [r7, #8]
 800dfa0:	b29b      	uxth	r3, r3
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3714      	adds	r7, #20
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfac:	4770      	bx	lr

0800dfae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dfae:	b480      	push	{r7}
 800dfb0:	b085      	sub	sp, #20
 800dfb2:	af00      	add	r7, sp, #0
 800dfb4:	6078      	str	r0, [r7, #4]
 800dfb6:	460b      	mov	r3, r1
 800dfb8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800dfbe:	78fb      	ldrb	r3, [r7, #3]
 800dfc0:	015a      	lsls	r2, r3, #5
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	4413      	add	r3, r2
 800dfc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfca:	689b      	ldr	r3, [r3, #8]
 800dfcc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dfd4:	695b      	ldr	r3, [r3, #20]
 800dfd6:	68ba      	ldr	r2, [r7, #8]
 800dfd8:	4013      	ands	r3, r2
 800dfda:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dfdc:	68bb      	ldr	r3, [r7, #8]
}
 800dfde:	4618      	mov	r0, r3
 800dfe0:	3714      	adds	r7, #20
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe8:	4770      	bx	lr

0800dfea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dfea:	b480      	push	{r7}
 800dfec:	b087      	sub	sp, #28
 800dfee:	af00      	add	r7, sp, #0
 800dff0:	6078      	str	r0, [r7, #4]
 800dff2:	460b      	mov	r3, r1
 800dff4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800dffa:	697b      	ldr	r3, [r7, #20]
 800dffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e000:	691b      	ldr	r3, [r3, #16]
 800e002:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e004:	697b      	ldr	r3, [r7, #20]
 800e006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e00a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e00c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e00e:	78fb      	ldrb	r3, [r7, #3]
 800e010:	f003 030f 	and.w	r3, r3, #15
 800e014:	68fa      	ldr	r2, [r7, #12]
 800e016:	fa22 f303 	lsr.w	r3, r2, r3
 800e01a:	01db      	lsls	r3, r3, #7
 800e01c:	b2db      	uxtb	r3, r3
 800e01e:	693a      	ldr	r2, [r7, #16]
 800e020:	4313      	orrs	r3, r2
 800e022:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e024:	78fb      	ldrb	r3, [r7, #3]
 800e026:	015a      	lsls	r2, r3, #5
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	4413      	add	r3, r2
 800e02c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e030:	689b      	ldr	r3, [r3, #8]
 800e032:	693a      	ldr	r2, [r7, #16]
 800e034:	4013      	ands	r3, r2
 800e036:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e038:	68bb      	ldr	r3, [r7, #8]
}
 800e03a:	4618      	mov	r0, r3
 800e03c:	371c      	adds	r7, #28
 800e03e:	46bd      	mov	sp, r7
 800e040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e044:	4770      	bx	lr

0800e046 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e046:	b480      	push	{r7}
 800e048:	b083      	sub	sp, #12
 800e04a:	af00      	add	r7, sp, #0
 800e04c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	695b      	ldr	r3, [r3, #20]
 800e052:	f003 0301 	and.w	r3, r3, #1
}
 800e056:	4618      	mov	r0, r3
 800e058:	370c      	adds	r7, #12
 800e05a:	46bd      	mov	sp, r7
 800e05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e060:	4770      	bx	lr

0800e062 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e062:	b480      	push	{r7}
 800e064:	b085      	sub	sp, #20
 800e066:	af00      	add	r7, sp, #0
 800e068:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	68fa      	ldr	r2, [r7, #12]
 800e078:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e07c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800e080:	f023 0307 	bic.w	r3, r3, #7
 800e084:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e08c:	685b      	ldr	r3, [r3, #4]
 800e08e:	68fa      	ldr	r2, [r7, #12]
 800e090:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e098:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e09a:	2300      	movs	r3, #0
}
 800e09c:	4618      	mov	r0, r3
 800e09e:	3714      	adds	r7, #20
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a6:	4770      	bx	lr

0800e0a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800e0a8:	b480      	push	{r7}
 800e0aa:	b087      	sub	sp, #28
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	60f8      	str	r0, [r7, #12]
 800e0b0:	460b      	mov	r3, r1
 800e0b2:	607a      	str	r2, [r7, #4]
 800e0b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	333c      	adds	r3, #60	; 0x3c
 800e0be:	3304      	adds	r3, #4
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e0c4:	693b      	ldr	r3, [r7, #16]
 800e0c6:	4a26      	ldr	r2, [pc, #152]	; (800e160 <USB_EP0_OutStart+0xb8>)
 800e0c8:	4293      	cmp	r3, r2
 800e0ca:	d90a      	bls.n	800e0e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e0cc:	697b      	ldr	r3, [r7, #20]
 800e0ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e0d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e0dc:	d101      	bne.n	800e0e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	e037      	b.n	800e152 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e0e2:	697b      	ldr	r3, [r7, #20]
 800e0e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0f4:	691b      	ldr	r3, [r3, #16]
 800e0f6:	697a      	ldr	r2, [r7, #20]
 800e0f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e100:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e108:	691b      	ldr	r3, [r3, #16]
 800e10a:	697a      	ldr	r2, [r7, #20]
 800e10c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e110:	f043 0318 	orr.w	r3, r3, #24
 800e114:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e116:	697b      	ldr	r3, [r7, #20]
 800e118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e11c:	691b      	ldr	r3, [r3, #16]
 800e11e:	697a      	ldr	r2, [r7, #20]
 800e120:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e124:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e128:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e12a:	7afb      	ldrb	r3, [r7, #11]
 800e12c:	2b01      	cmp	r3, #1
 800e12e:	d10f      	bne.n	800e150 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e130:	697b      	ldr	r3, [r7, #20]
 800e132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e136:	461a      	mov	r2, r3
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	697a      	ldr	r2, [r7, #20]
 800e146:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e14a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800e14e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e150:	2300      	movs	r3, #0
}
 800e152:	4618      	mov	r0, r3
 800e154:	371c      	adds	r7, #28
 800e156:	46bd      	mov	sp, r7
 800e158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15c:	4770      	bx	lr
 800e15e:	bf00      	nop
 800e160:	4f54300a 	.word	0x4f54300a

0800e164 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e164:	b480      	push	{r7}
 800e166:	b085      	sub	sp, #20
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e16c:	2300      	movs	r3, #0
 800e16e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	3301      	adds	r3, #1
 800e174:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	4a13      	ldr	r2, [pc, #76]	; (800e1c8 <USB_CoreReset+0x64>)
 800e17a:	4293      	cmp	r3, r2
 800e17c:	d901      	bls.n	800e182 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e17e:	2303      	movs	r3, #3
 800e180:	e01b      	b.n	800e1ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	691b      	ldr	r3, [r3, #16]
 800e186:	2b00      	cmp	r3, #0
 800e188:	daf2      	bge.n	800e170 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e18a:	2300      	movs	r3, #0
 800e18c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	691b      	ldr	r3, [r3, #16]
 800e192:	f043 0201 	orr.w	r2, r3, #1
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	3301      	adds	r3, #1
 800e19e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	4a09      	ldr	r2, [pc, #36]	; (800e1c8 <USB_CoreReset+0x64>)
 800e1a4:	4293      	cmp	r3, r2
 800e1a6:	d901      	bls.n	800e1ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e1a8:	2303      	movs	r3, #3
 800e1aa:	e006      	b.n	800e1ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	691b      	ldr	r3, [r3, #16]
 800e1b0:	f003 0301 	and.w	r3, r3, #1
 800e1b4:	2b01      	cmp	r3, #1
 800e1b6:	d0f0      	beq.n	800e19a <USB_CoreReset+0x36>

  return HAL_OK;
 800e1b8:	2300      	movs	r3, #0
}
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	3714      	adds	r7, #20
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c4:	4770      	bx	lr
 800e1c6:	bf00      	nop
 800e1c8:	00030d40 	.word	0x00030d40

0800e1cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800e1d0:	4904      	ldr	r1, [pc, #16]	; (800e1e4 <MX_FATFS_Init+0x18>)
 800e1d2:	4805      	ldr	r0, [pc, #20]	; (800e1e8 <MX_FATFS_Init+0x1c>)
 800e1d4:	f006 f93a 	bl	801444c <FATFS_LinkDriver>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	461a      	mov	r2, r3
 800e1dc:	4b03      	ldr	r3, [pc, #12]	; (800e1ec <MX_FATFS_Init+0x20>)
 800e1de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e1e0:	bf00      	nop
 800e1e2:	bd80      	pop	{r7, pc}
 800e1e4:	20006710 	.word	0x20006710
 800e1e8:	20000030 	.word	0x20000030
 800e1ec:	2000670c 	.word	0x2000670c

0800e1f0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e1f0:	b480      	push	{r7}
 800e1f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e1f4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fe:	4770      	bx	lr

0800e200 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b082      	sub	sp, #8
 800e204:	af00      	add	r7, sp, #0
 800e206:	4603      	mov	r3, r0
 800e208:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return (SD_disk_initialize(pdrv));
 800e20a:	79fb      	ldrb	r3, [r7, #7]
 800e20c:	4618      	mov	r0, r3
 800e20e:	f7f3 fc45 	bl	8001a9c <SD_disk_initialize>
 800e212:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800e214:	4618      	mov	r0, r3
 800e216:	3708      	adds	r7, #8
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}

0800e21c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b082      	sub	sp, #8
 800e220:	af00      	add	r7, sp, #0
 800e222:	4603      	mov	r3, r0
 800e224:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return (SD_disk_status(pdrv));
 800e226:	79fb      	ldrb	r3, [r7, #7]
 800e228:	4618      	mov	r0, r3
 800e22a:	f7f3 fd21 	bl	8001c70 <SD_disk_status>
 800e22e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800e230:	4618      	mov	r0, r3
 800e232:	3708      	adds	r7, #8
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}

0800e238 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b084      	sub	sp, #16
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	60b9      	str	r1, [r7, #8]
 800e240:	607a      	str	r2, [r7, #4]
 800e242:	603b      	str	r3, [r7, #0]
 800e244:	4603      	mov	r3, r0
 800e246:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return (SD_disk_read(pdrv,buff, sector, count));
 800e248:	7bf8      	ldrb	r0, [r7, #15]
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	687a      	ldr	r2, [r7, #4]
 800e24e:	68b9      	ldr	r1, [r7, #8]
 800e250:	f7f3 fd24 	bl	8001c9c <SD_disk_read>
 800e254:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800e256:	4618      	mov	r0, r3
 800e258:	3710      	adds	r7, #16
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}

0800e25e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800e25e:	b580      	push	{r7, lr}
 800e260:	b084      	sub	sp, #16
 800e262:	af00      	add	r7, sp, #0
 800e264:	60b9      	str	r1, [r7, #8]
 800e266:	607a      	str	r2, [r7, #4]
 800e268:	603b      	str	r3, [r7, #0]
 800e26a:	4603      	mov	r3, r0
 800e26c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return (SD_disk_write(pdrv, buff, sector, count));
 800e26e:	7bf8      	ldrb	r0, [r7, #15]
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	687a      	ldr	r2, [r7, #4]
 800e274:	68b9      	ldr	r1, [r7, #8]
 800e276:	f7f3 fd7b 	bl	8001d70 <SD_disk_write>
 800e27a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	3710      	adds	r7, #16
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}

0800e284 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b082      	sub	sp, #8
 800e288:	af00      	add	r7, sp, #0
 800e28a:	4603      	mov	r3, r0
 800e28c:	603a      	str	r2, [r7, #0]
 800e28e:	71fb      	strb	r3, [r7, #7]
 800e290:	460b      	mov	r3, r1
 800e292:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return (SD_disk_ioctl(pdrv, cmd, buff));
 800e294:	79b9      	ldrb	r1, [r7, #6]
 800e296:	79fb      	ldrb	r3, [r7, #7]
 800e298:	683a      	ldr	r2, [r7, #0]
 800e29a:	4618      	mov	r0, r3
 800e29c:	f7f3 fdec 	bl	8001e78 <SD_disk_ioctl>
 800e2a0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	3708      	adds	r7, #8
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}
	...

0800e2ac <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b084      	sub	sp, #16
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
 800e2b4:	460b      	mov	r3, r1
 800e2b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800e2b8:	f44f 701d 	mov.w	r0, #628	; 0x274
 800e2bc:	f009 fac0 	bl	8017840 <USBD_static_malloc>
 800e2c0:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d109      	bne.n	800e2dc <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	32b0      	adds	r2, #176	; 0xb0
 800e2d2:	2100      	movs	r1, #0
 800e2d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800e2d8:	2302      	movs	r3, #2
 800e2da:	e06e      	b.n	800e3ba <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	32b0      	adds	r2, #176	; 0xb0
 800e2e6:	68f9      	ldr	r1, [r7, #12]
 800e2e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	32b0      	adds	r2, #176	; 0xb0
 800e2f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	7c1b      	ldrb	r3, [r3, #16]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d12b      	bne.n	800e360 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800e308:	4b2e      	ldr	r3, [pc, #184]	; (800e3c4 <USBD_MSC_Init+0x118>)
 800e30a:	7819      	ldrb	r1, [r3, #0]
 800e30c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e310:	2202      	movs	r2, #2
 800e312:	6878      	ldr	r0, [r7, #4]
 800e314:	f009 f903 	bl	801751e <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800e318:	4b2a      	ldr	r3, [pc, #168]	; (800e3c4 <USBD_MSC_Init+0x118>)
 800e31a:	781b      	ldrb	r3, [r3, #0]
 800e31c:	f003 020f 	and.w	r2, r3, #15
 800e320:	6879      	ldr	r1, [r7, #4]
 800e322:	4613      	mov	r3, r2
 800e324:	009b      	lsls	r3, r3, #2
 800e326:	4413      	add	r3, r2
 800e328:	009b      	lsls	r3, r3, #2
 800e32a:	440b      	add	r3, r1
 800e32c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e330:	2201      	movs	r2, #1
 800e332:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800e334:	4b24      	ldr	r3, [pc, #144]	; (800e3c8 <USBD_MSC_Init+0x11c>)
 800e336:	7819      	ldrb	r1, [r3, #0]
 800e338:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e33c:	2202      	movs	r2, #2
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f009 f8ed 	bl	801751e <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800e344:	4b20      	ldr	r3, [pc, #128]	; (800e3c8 <USBD_MSC_Init+0x11c>)
 800e346:	781b      	ldrb	r3, [r3, #0]
 800e348:	f003 020f 	and.w	r2, r3, #15
 800e34c:	6879      	ldr	r1, [r7, #4]
 800e34e:	4613      	mov	r3, r2
 800e350:	009b      	lsls	r3, r3, #2
 800e352:	4413      	add	r3, r2
 800e354:	009b      	lsls	r3, r3, #2
 800e356:	440b      	add	r3, r1
 800e358:	3324      	adds	r3, #36	; 0x24
 800e35a:	2201      	movs	r2, #1
 800e35c:	801a      	strh	r2, [r3, #0]
 800e35e:	e028      	b.n	800e3b2 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800e360:	4b18      	ldr	r3, [pc, #96]	; (800e3c4 <USBD_MSC_Init+0x118>)
 800e362:	7819      	ldrb	r1, [r3, #0]
 800e364:	2340      	movs	r3, #64	; 0x40
 800e366:	2202      	movs	r2, #2
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f009 f8d8 	bl	801751e <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800e36e:	4b15      	ldr	r3, [pc, #84]	; (800e3c4 <USBD_MSC_Init+0x118>)
 800e370:	781b      	ldrb	r3, [r3, #0]
 800e372:	f003 020f 	and.w	r2, r3, #15
 800e376:	6879      	ldr	r1, [r7, #4]
 800e378:	4613      	mov	r3, r2
 800e37a:	009b      	lsls	r3, r3, #2
 800e37c:	4413      	add	r3, r2
 800e37e:	009b      	lsls	r3, r3, #2
 800e380:	440b      	add	r3, r1
 800e382:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e386:	2201      	movs	r2, #1
 800e388:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800e38a:	4b0f      	ldr	r3, [pc, #60]	; (800e3c8 <USBD_MSC_Init+0x11c>)
 800e38c:	7819      	ldrb	r1, [r3, #0]
 800e38e:	2340      	movs	r3, #64	; 0x40
 800e390:	2202      	movs	r2, #2
 800e392:	6878      	ldr	r0, [r7, #4]
 800e394:	f009 f8c3 	bl	801751e <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800e398:	4b0b      	ldr	r3, [pc, #44]	; (800e3c8 <USBD_MSC_Init+0x11c>)
 800e39a:	781b      	ldrb	r3, [r3, #0]
 800e39c:	f003 020f 	and.w	r2, r3, #15
 800e3a0:	6879      	ldr	r1, [r7, #4]
 800e3a2:	4613      	mov	r3, r2
 800e3a4:	009b      	lsls	r3, r3, #2
 800e3a6:	4413      	add	r3, r2
 800e3a8:	009b      	lsls	r3, r3, #2
 800e3aa:	440b      	add	r3, r1
 800e3ac:	3324      	adds	r3, #36	; 0x24
 800e3ae:	2201      	movs	r2, #1
 800e3b0:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f000 fa2c 	bl	800e810 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800e3b8:	2300      	movs	r3, #0
}
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	3710      	adds	r7, #16
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}
 800e3c2:	bf00      	nop
 800e3c4:	200000a7 	.word	0x200000a7
 800e3c8:	200000a6 	.word	0x200000a6

0800e3cc <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b082      	sub	sp, #8
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
 800e3d4:	460b      	mov	r3, r1
 800e3d6:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 800e3d8:	4b26      	ldr	r3, [pc, #152]	; (800e474 <USBD_MSC_DeInit+0xa8>)
 800e3da:	781b      	ldrb	r3, [r3, #0]
 800e3dc:	4619      	mov	r1, r3
 800e3de:	6878      	ldr	r0, [r7, #4]
 800e3e0:	f009 f8c3 	bl	801756a <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 800e3e4:	4b23      	ldr	r3, [pc, #140]	; (800e474 <USBD_MSC_DeInit+0xa8>)
 800e3e6:	781b      	ldrb	r3, [r3, #0]
 800e3e8:	f003 020f 	and.w	r2, r3, #15
 800e3ec:	6879      	ldr	r1, [r7, #4]
 800e3ee:	4613      	mov	r3, r2
 800e3f0:	009b      	lsls	r3, r3, #2
 800e3f2:	4413      	add	r3, r2
 800e3f4:	009b      	lsls	r3, r3, #2
 800e3f6:	440b      	add	r3, r1
 800e3f8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 800e400:	4b1d      	ldr	r3, [pc, #116]	; (800e478 <USBD_MSC_DeInit+0xac>)
 800e402:	781b      	ldrb	r3, [r3, #0]
 800e404:	4619      	mov	r1, r3
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f009 f8af 	bl	801756a <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 800e40c:	4b1a      	ldr	r3, [pc, #104]	; (800e478 <USBD_MSC_DeInit+0xac>)
 800e40e:	781b      	ldrb	r3, [r3, #0]
 800e410:	f003 020f 	and.w	r2, r3, #15
 800e414:	6879      	ldr	r1, [r7, #4]
 800e416:	4613      	mov	r3, r2
 800e418:	009b      	lsls	r3, r3, #2
 800e41a:	4413      	add	r3, r2
 800e41c:	009b      	lsls	r3, r3, #2
 800e41e:	440b      	add	r3, r1
 800e420:	3324      	adds	r3, #36	; 0x24
 800e422:	2200      	movs	r2, #0
 800e424:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	32b0      	adds	r2, #176	; 0xb0
 800e430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d018      	beq.n	800e46a <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800e438:	6878      	ldr	r0, [r7, #4]
 800e43a:	f000 fa67 	bl	800e90c <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	32b0      	adds	r2, #176	; 0xb0
 800e448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e44c:	4618      	mov	r0, r3
 800e44e:	f009 fa05 	bl	801785c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	32b0      	adds	r2, #176	; 0xb0
 800e45c:	2100      	movs	r1, #0
 800e45e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2200      	movs	r2, #0
 800e466:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e46a:	2300      	movs	r3, #0
}
 800e46c:	4618      	mov	r0, r3
 800e46e:	3708      	adds	r7, #8
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}
 800e474:	200000a7 	.word	0x200000a7
 800e478:	200000a6 	.word	0x200000a6

0800e47c <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b086      	sub	sp, #24
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
 800e484:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	32b0      	adds	r2, #176	; 0xb0
 800e490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e494:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800e496:	2300      	movs	r3, #0
 800e498:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800e49a:	2300      	movs	r3, #0
 800e49c:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800e49e:	693b      	ldr	r3, [r7, #16]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d101      	bne.n	800e4a8 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800e4a4:	2303      	movs	r3, #3
 800e4a6:	e0e1      	b.n	800e66c <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	781b      	ldrb	r3, [r3, #0]
 800e4ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d053      	beq.n	800e55c <USBD_MSC_Setup+0xe0>
 800e4b4:	2b20      	cmp	r3, #32
 800e4b6:	f040 80d1 	bne.w	800e65c <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	785b      	ldrb	r3, [r3, #1]
 800e4be:	2bfe      	cmp	r3, #254	; 0xfe
 800e4c0:	d002      	beq.n	800e4c8 <USBD_MSC_Setup+0x4c>
 800e4c2:	2bff      	cmp	r3, #255	; 0xff
 800e4c4:	d02a      	beq.n	800e51c <USBD_MSC_Setup+0xa0>
 800e4c6:	e041      	b.n	800e54c <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	885b      	ldrh	r3, [r3, #2]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d11e      	bne.n	800e50e <USBD_MSC_Setup+0x92>
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	88db      	ldrh	r3, [r3, #6]
 800e4d4:	2b01      	cmp	r3, #1
 800e4d6:	d11a      	bne.n	800e50e <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	781b      	ldrb	r3, [r3, #0]
 800e4dc:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	da15      	bge.n	800e50e <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e4e8:	687a      	ldr	r2, [r7, #4]
 800e4ea:	33b0      	adds	r3, #176	; 0xb0
 800e4ec:	009b      	lsls	r3, r3, #2
 800e4ee:	4413      	add	r3, r2
 800e4f0:	685b      	ldr	r3, [r3, #4]
 800e4f2:	699b      	ldr	r3, [r3, #24]
 800e4f4:	4798      	blx	r3
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	461a      	mov	r2, r3
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800e4fe:	693b      	ldr	r3, [r7, #16]
 800e500:	2201      	movs	r2, #1
 800e502:	4619      	mov	r1, r3
 800e504:	6878      	ldr	r0, [r7, #4]
 800e506:	f003 f923 	bl	8011750 <USBD_CtlSendData>
 800e50a:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e50c:	e025      	b.n	800e55a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800e50e:	6839      	ldr	r1, [r7, #0]
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f003 f8ac 	bl	801166e <USBD_CtlError>
            ret = USBD_FAIL;
 800e516:	2303      	movs	r3, #3
 800e518:	75fb      	strb	r3, [r7, #23]
          break;
 800e51a:	e01e      	b.n	800e55a <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	885b      	ldrh	r3, [r3, #2]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d10c      	bne.n	800e53e <USBD_MSC_Setup+0xc2>
 800e524:	683b      	ldr	r3, [r7, #0]
 800e526:	88db      	ldrh	r3, [r3, #6]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d108      	bne.n	800e53e <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	781b      	ldrb	r3, [r3, #0]
 800e530:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800e532:	2b00      	cmp	r3, #0
 800e534:	db03      	blt.n	800e53e <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 800e536:	6878      	ldr	r0, [r7, #4]
 800e538:	f000 f9b4 	bl	800e8a4 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e53c:	e00d      	b.n	800e55a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800e53e:	6839      	ldr	r1, [r7, #0]
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f003 f894 	bl	801166e <USBD_CtlError>
            ret = USBD_FAIL;
 800e546:	2303      	movs	r3, #3
 800e548:	75fb      	strb	r3, [r7, #23]
          break;
 800e54a:	e006      	b.n	800e55a <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 800e54c:	6839      	ldr	r1, [r7, #0]
 800e54e:	6878      	ldr	r0, [r7, #4]
 800e550:	f003 f88d 	bl	801166e <USBD_CtlError>
          ret = USBD_FAIL;
 800e554:	2303      	movs	r3, #3
 800e556:	75fb      	strb	r3, [r7, #23]
          break;
 800e558:	bf00      	nop
      }
      break;
 800e55a:	e086      	b.n	800e66a <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	785b      	ldrb	r3, [r3, #1]
 800e560:	2b0b      	cmp	r3, #11
 800e562:	d872      	bhi.n	800e64a <USBD_MSC_Setup+0x1ce>
 800e564:	a201      	add	r2, pc, #4	; (adr r2, 800e56c <USBD_MSC_Setup+0xf0>)
 800e566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e56a:	bf00      	nop
 800e56c:	0800e59d 	.word	0x0800e59d
 800e570:	0800e619 	.word	0x0800e619
 800e574:	0800e64b 	.word	0x0800e64b
 800e578:	0800e64b 	.word	0x0800e64b
 800e57c:	0800e64b 	.word	0x0800e64b
 800e580:	0800e64b 	.word	0x0800e64b
 800e584:	0800e64b 	.word	0x0800e64b
 800e588:	0800e64b 	.word	0x0800e64b
 800e58c:	0800e64b 	.word	0x0800e64b
 800e590:	0800e64b 	.word	0x0800e64b
 800e594:	0800e5c7 	.word	0x0800e5c7
 800e598:	0800e5f1 	.word	0x0800e5f1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5a2:	b2db      	uxtb	r3, r3
 800e5a4:	2b03      	cmp	r3, #3
 800e5a6:	d107      	bne.n	800e5b8 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e5a8:	f107 030e 	add.w	r3, r7, #14
 800e5ac:	2202      	movs	r2, #2
 800e5ae:	4619      	mov	r1, r3
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	f003 f8cd 	bl	8011750 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e5b6:	e050      	b.n	800e65a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800e5b8:	6839      	ldr	r1, [r7, #0]
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f003 f857 	bl	801166e <USBD_CtlError>
            ret = USBD_FAIL;
 800e5c0:	2303      	movs	r3, #3
 800e5c2:	75fb      	strb	r3, [r7, #23]
          break;
 800e5c4:	e049      	b.n	800e65a <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5cc:	b2db      	uxtb	r3, r3
 800e5ce:	2b03      	cmp	r3, #3
 800e5d0:	d107      	bne.n	800e5e2 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800e5d2:	693b      	ldr	r3, [r7, #16]
 800e5d4:	3304      	adds	r3, #4
 800e5d6:	2201      	movs	r2, #1
 800e5d8:	4619      	mov	r1, r3
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f003 f8b8 	bl	8011750 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e5e0:	e03b      	b.n	800e65a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800e5e2:	6839      	ldr	r1, [r7, #0]
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f003 f842 	bl	801166e <USBD_CtlError>
            ret = USBD_FAIL;
 800e5ea:	2303      	movs	r3, #3
 800e5ec:	75fb      	strb	r3, [r7, #23]
          break;
 800e5ee:	e034      	b.n	800e65a <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5f6:	b2db      	uxtb	r3, r3
 800e5f8:	2b03      	cmp	r3, #3
 800e5fa:	d106      	bne.n	800e60a <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	885b      	ldrh	r3, [r3, #2]
 800e600:	b2db      	uxtb	r3, r3
 800e602:	461a      	mov	r2, r3
 800e604:	693b      	ldr	r3, [r7, #16]
 800e606:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e608:	e027      	b.n	800e65a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800e60a:	6839      	ldr	r1, [r7, #0]
 800e60c:	6878      	ldr	r0, [r7, #4]
 800e60e:	f003 f82e 	bl	801166e <USBD_CtlError>
            ret = USBD_FAIL;
 800e612:	2303      	movs	r3, #3
 800e614:	75fb      	strb	r3, [r7, #23]
          break;
 800e616:	e020      	b.n	800e65a <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e61e:	b2db      	uxtb	r3, r3
 800e620:	2b03      	cmp	r3, #3
 800e622:	d119      	bne.n	800e658 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	885b      	ldrh	r3, [r3, #2]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d115      	bne.n	800e658 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	889b      	ldrh	r3, [r3, #4]
 800e630:	b2db      	uxtb	r3, r3
 800e632:	4619      	mov	r1, r3
 800e634:	6878      	ldr	r0, [r7, #4]
 800e636:	f008 ffb7 	bl	80175a8 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800e63a:	683b      	ldr	r3, [r7, #0]
 800e63c:	889b      	ldrh	r3, [r3, #4]
 800e63e:	b2db      	uxtb	r3, r3
 800e640:	4619      	mov	r1, r3
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f000 fb2e 	bl	800eca4 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800e648:	e006      	b.n	800e658 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 800e64a:	6839      	ldr	r1, [r7, #0]
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f003 f80e 	bl	801166e <USBD_CtlError>
          ret = USBD_FAIL;
 800e652:	2303      	movs	r3, #3
 800e654:	75fb      	strb	r3, [r7, #23]
          break;
 800e656:	e000      	b.n	800e65a <USBD_MSC_Setup+0x1de>
          break;
 800e658:	bf00      	nop
      }
      break;
 800e65a:	e006      	b.n	800e66a <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 800e65c:	6839      	ldr	r1, [r7, #0]
 800e65e:	6878      	ldr	r0, [r7, #4]
 800e660:	f003 f805 	bl	801166e <USBD_CtlError>
      ret = USBD_FAIL;
 800e664:	2303      	movs	r3, #3
 800e666:	75fb      	strb	r3, [r7, #23]
      break;
 800e668:	bf00      	nop
  }

  return (uint8_t)ret;
 800e66a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e66c:	4618      	mov	r0, r3
 800e66e:	3718      	adds	r7, #24
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}

0800e674 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b082      	sub	sp, #8
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
 800e67c:	460b      	mov	r3, r1
 800e67e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800e680:	78fb      	ldrb	r3, [r7, #3]
 800e682:	4619      	mov	r1, r3
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	f000 f959 	bl	800e93c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800e68a:	2300      	movs	r3, #0
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	3708      	adds	r7, #8
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}

0800e694 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b082      	sub	sp, #8
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
 800e69c:	460b      	mov	r3, r1
 800e69e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800e6a0:	78fb      	ldrb	r3, [r7, #3]
 800e6a2:	4619      	mov	r1, r3
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f000 f983 	bl	800e9b0 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800e6aa:	2300      	movs	r3, #0
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3708      	adds	r7, #8
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b084      	sub	sp, #16
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800e6bc:	2181      	movs	r1, #129	; 0x81
 800e6be:	4812      	ldr	r0, [pc, #72]	; (800e708 <USBD_MSC_GetHSCfgDesc+0x54>)
 800e6c0:	f002 f972 	bl	80109a8 <USBD_GetEpDesc>
 800e6c4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800e6c6:	2101      	movs	r1, #1
 800e6c8:	480f      	ldr	r0, [pc, #60]	; (800e708 <USBD_MSC_GetHSCfgDesc+0x54>)
 800e6ca:	f002 f96d 	bl	80109a8 <USBD_GetEpDesc>
 800e6ce:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d006      	beq.n	800e6e4 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	2200      	movs	r2, #0
 800e6da:	711a      	strb	r2, [r3, #4]
 800e6dc:	2200      	movs	r2, #0
 800e6de:	f042 0202 	orr.w	r2, r2, #2
 800e6e2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800e6e4:	68bb      	ldr	r3, [r7, #8]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d006      	beq.n	800e6f8 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800e6ea:	68bb      	ldr	r3, [r7, #8]
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	711a      	strb	r2, [r3, #4]
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	f042 0202 	orr.w	r2, r2, #2
 800e6f6:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2220      	movs	r2, #32
 800e6fc:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800e6fe:	4b02      	ldr	r3, [pc, #8]	; (800e708 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 800e700:	4618      	mov	r0, r3
 800e702:	3710      	adds	r7, #16
 800e704:	46bd      	mov	sp, r7
 800e706:	bd80      	pop	{r7, pc}
 800e708:	2000007c 	.word	0x2000007c

0800e70c <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b084      	sub	sp, #16
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800e714:	2181      	movs	r1, #129	; 0x81
 800e716:	4812      	ldr	r0, [pc, #72]	; (800e760 <USBD_MSC_GetFSCfgDesc+0x54>)
 800e718:	f002 f946 	bl	80109a8 <USBD_GetEpDesc>
 800e71c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800e71e:	2101      	movs	r1, #1
 800e720:	480f      	ldr	r0, [pc, #60]	; (800e760 <USBD_MSC_GetFSCfgDesc+0x54>)
 800e722:	f002 f941 	bl	80109a8 <USBD_GetEpDesc>
 800e726:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d006      	beq.n	800e73c <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	2200      	movs	r2, #0
 800e732:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e736:	711a      	strb	r2, [r3, #4]
 800e738:	2200      	movs	r2, #0
 800e73a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800e73c:	68bb      	ldr	r3, [r7, #8]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d006      	beq.n	800e750 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	2200      	movs	r2, #0
 800e746:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e74a:	711a      	strb	r2, [r3, #4]
 800e74c:	2200      	movs	r2, #0
 800e74e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2220      	movs	r2, #32
 800e754:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800e756:	4b02      	ldr	r3, [pc, #8]	; (800e760 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 800e758:	4618      	mov	r0, r3
 800e75a:	3710      	adds	r7, #16
 800e75c:	46bd      	mov	sp, r7
 800e75e:	bd80      	pop	{r7, pc}
 800e760:	2000007c 	.word	0x2000007c

0800e764 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b084      	sub	sp, #16
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800e76c:	2181      	movs	r1, #129	; 0x81
 800e76e:	4812      	ldr	r0, [pc, #72]	; (800e7b8 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800e770:	f002 f91a 	bl	80109a8 <USBD_GetEpDesc>
 800e774:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800e776:	2101      	movs	r1, #1
 800e778:	480f      	ldr	r0, [pc, #60]	; (800e7b8 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800e77a:	f002 f915 	bl	80109a8 <USBD_GetEpDesc>
 800e77e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d006      	beq.n	800e794 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	2200      	movs	r2, #0
 800e78a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e78e:	711a      	strb	r2, [r3, #4]
 800e790:	2200      	movs	r2, #0
 800e792:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800e794:	68bb      	ldr	r3, [r7, #8]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d006      	beq.n	800e7a8 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	2200      	movs	r2, #0
 800e79e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e7a2:	711a      	strb	r2, [r3, #4]
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2220      	movs	r2, #32
 800e7ac:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800e7ae:	4b02      	ldr	r3, [pc, #8]	; (800e7b8 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	3710      	adds	r7, #16
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}
 800e7b8:	2000007c 	.word	0x2000007c

0800e7bc <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b083      	sub	sp, #12
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	220a      	movs	r2, #10
 800e7c8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800e7ca:	4b03      	ldr	r3, [pc, #12]	; (800e7d8 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	370c      	adds	r7, #12
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d6:	4770      	bx	lr
 800e7d8:	2000009c 	.word	0x2000009c

0800e7dc <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800e7dc:	b480      	push	{r7}
 800e7de:	b083      	sub	sp, #12
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
 800e7e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d101      	bne.n	800e7f0 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e7ec:	2303      	movs	r3, #3
 800e7ee:	e009      	b.n	800e804 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e7f6:	687a      	ldr	r2, [r7, #4]
 800e7f8:	33b0      	adds	r3, #176	; 0xb0
 800e7fa:	009b      	lsls	r3, r3, #2
 800e7fc:	4413      	add	r3, r2
 800e7fe:	683a      	ldr	r2, [r7, #0]
 800e800:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e802:	2300      	movs	r3, #0
}
 800e804:	4618      	mov	r0, r3
 800e806:	370c      	adds	r7, #12
 800e808:	46bd      	mov	sp, r7
 800e80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80e:	4770      	bx	lr

0800e810 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b084      	sub	sp, #16
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	32b0      	adds	r2, #176	; 0xb0
 800e822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e826:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d032      	beq.n	800e894 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	2200      	movs	r2, #0
 800e832:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	2200      	movs	r2, #0
 800e838:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	2200      	movs	r2, #0
 800e83e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	2200      	movs	r2, #0
 800e846:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	2200      	movs	r2, #0
 800e84e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e858:	687a      	ldr	r2, [r7, #4]
 800e85a:	33b0      	adds	r3, #176	; 0xb0
 800e85c:	009b      	lsls	r3, r3, #2
 800e85e:	4413      	add	r3, r2
 800e860:	685b      	ldr	r3, [r3, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	2000      	movs	r0, #0
 800e866:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 800e868:	4b0c      	ldr	r3, [pc, #48]	; (800e89c <MSC_BOT_Init+0x8c>)
 800e86a:	781b      	ldrb	r3, [r3, #0]
 800e86c:	4619      	mov	r1, r3
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f008 fe9a 	bl	80175a8 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 800e874:	4b0a      	ldr	r3, [pc, #40]	; (800e8a0 <MSC_BOT_Init+0x90>)
 800e876:	781b      	ldrb	r3, [r3, #0]
 800e878:	4619      	mov	r1, r3
 800e87a:	6878      	ldr	r0, [r7, #4]
 800e87c:	f008 fe94 	bl	80175a8 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800e880:	4b06      	ldr	r3, [pc, #24]	; (800e89c <MSC_BOT_Init+0x8c>)
 800e882:	7819      	ldrb	r1, [r3, #0]
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800e88a:	231f      	movs	r3, #31
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	f008 ff54 	bl	801773a <USBD_LL_PrepareReceive>
 800e892:	e000      	b.n	800e896 <MSC_BOT_Init+0x86>
    return;
 800e894:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800e896:	3710      	adds	r7, #16
 800e898:	46bd      	mov	sp, r7
 800e89a:	bd80      	pop	{r7, pc}
 800e89c:	200000a7 	.word	0x200000a7
 800e8a0:	200000a6 	.word	0x200000a6

0800e8a4 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b084      	sub	sp, #16
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	32b0      	adds	r2, #176	; 0xb0
 800e8b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8ba:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d01b      	beq.n	800e8fa <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	2201      	movs	r2, #1
 800e8cc:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800e8ce:	4b0d      	ldr	r3, [pc, #52]	; (800e904 <MSC_BOT_Reset+0x60>)
 800e8d0:	781b      	ldrb	r3, [r3, #0]
 800e8d2:	4619      	mov	r1, r3
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f008 fea5 	bl	8017624 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800e8da:	4b0b      	ldr	r3, [pc, #44]	; (800e908 <MSC_BOT_Reset+0x64>)
 800e8dc:	781b      	ldrb	r3, [r3, #0]
 800e8de:	4619      	mov	r1, r3
 800e8e0:	6878      	ldr	r0, [r7, #4]
 800e8e2:	f008 fe9f 	bl	8017624 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800e8e6:	4b08      	ldr	r3, [pc, #32]	; (800e908 <MSC_BOT_Reset+0x64>)
 800e8e8:	7819      	ldrb	r1, [r3, #0]
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800e8f0:	231f      	movs	r3, #31
 800e8f2:	6878      	ldr	r0, [r7, #4]
 800e8f4:	f008 ff21 	bl	801773a <USBD_LL_PrepareReceive>
 800e8f8:	e000      	b.n	800e8fc <MSC_BOT_Reset+0x58>
    return;
 800e8fa:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800e8fc:	3710      	adds	r7, #16
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}
 800e902:	bf00      	nop
 800e904:	200000a6 	.word	0x200000a6
 800e908:	200000a7 	.word	0x200000a7

0800e90c <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800e90c:	b480      	push	{r7}
 800e90e:	b085      	sub	sp, #20
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	32b0      	adds	r2, #176	; 0xb0
 800e91e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e922:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d002      	beq.n	800e930 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	2200      	movs	r2, #0
 800e92e:	721a      	strb	r2, [r3, #8]
  }
}
 800e930:	bf00      	nop
 800e932:	3714      	adds	r7, #20
 800e934:	46bd      	mov	sp, r7
 800e936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93a:	4770      	bx	lr

0800e93c <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b084      	sub	sp, #16
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
 800e944:	460b      	mov	r3, r1
 800e946:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	32b0      	adds	r2, #176	; 0xb0
 800e952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e956:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d020      	beq.n	800e9a0 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	7a1b      	ldrb	r3, [r3, #8]
 800e962:	2b02      	cmp	r3, #2
 800e964:	d005      	beq.n	800e972 <MSC_BOT_DataIn+0x36>
 800e966:	2b02      	cmp	r3, #2
 800e968:	db1c      	blt.n	800e9a4 <MSC_BOT_DataIn+0x68>
 800e96a:	3b03      	subs	r3, #3
 800e96c:	2b01      	cmp	r3, #1
 800e96e:	d819      	bhi.n	800e9a4 <MSC_BOT_DataIn+0x68>
 800e970:	e011      	b.n	800e996 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800e97e:	461a      	mov	r2, r3
 800e980:	6878      	ldr	r0, [r7, #4]
 800e982:	f000 f9c9 	bl	800ed18 <SCSI_ProcessCmd>
 800e986:	4603      	mov	r3, r0
 800e988:	2b00      	cmp	r3, #0
 800e98a:	da0d      	bge.n	800e9a8 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800e98c:	2101      	movs	r1, #1
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f000 f90c 	bl	800ebac <MSC_BOT_SendCSW>
      }
      break;
 800e994:	e008      	b.n	800e9a8 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800e996:	2100      	movs	r1, #0
 800e998:	6878      	ldr	r0, [r7, #4]
 800e99a:	f000 f907 	bl	800ebac <MSC_BOT_SendCSW>
      break;
 800e99e:	e004      	b.n	800e9aa <MSC_BOT_DataIn+0x6e>
    return;
 800e9a0:	bf00      	nop
 800e9a2:	e002      	b.n	800e9aa <MSC_BOT_DataIn+0x6e>

    default:
      break;
 800e9a4:	bf00      	nop
 800e9a6:	e000      	b.n	800e9aa <MSC_BOT_DataIn+0x6e>
      break;
 800e9a8:	bf00      	nop
  }
}
 800e9aa:	3710      	adds	r7, #16
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}

0800e9b0 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b084      	sub	sp, #16
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
 800e9b8:	460b      	mov	r3, r1
 800e9ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	32b0      	adds	r2, #176	; 0xb0
 800e9c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9ca:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d01c      	beq.n	800ea0c <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	7a1b      	ldrb	r3, [r3, #8]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d002      	beq.n	800e9e0 <MSC_BOT_DataOut+0x30>
 800e9da:	2b01      	cmp	r3, #1
 800e9dc:	d004      	beq.n	800e9e8 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800e9de:	e018      	b.n	800ea12 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 800e9e0:	6878      	ldr	r0, [r7, #4]
 800e9e2:	f000 f819 	bl	800ea18 <MSC_BOT_CBW_Decode>
      break;
 800e9e6:	e014      	b.n	800ea12 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800e9f4:	461a      	mov	r2, r3
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f000 f98e 	bl	800ed18 <SCSI_ProcessCmd>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	da06      	bge.n	800ea10 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800ea02:	2101      	movs	r1, #1
 800ea04:	6878      	ldr	r0, [r7, #4]
 800ea06:	f000 f8d1 	bl	800ebac <MSC_BOT_SendCSW>
      break;
 800ea0a:	e001      	b.n	800ea10 <MSC_BOT_DataOut+0x60>
    return;
 800ea0c:	bf00      	nop
 800ea0e:	e000      	b.n	800ea12 <MSC_BOT_DataOut+0x62>
      break;
 800ea10:	bf00      	nop
  }
}
 800ea12:	3710      	adds	r7, #16
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}

0800ea18 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b084      	sub	sp, #16
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	32b0      	adds	r2, #176	; 0xb0
 800ea2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea2e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d079      	beq.n	800eb2a <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800ea4e:	4b3a      	ldr	r3, [pc, #232]	; (800eb38 <MSC_BOT_CBW_Decode+0x120>)
 800ea50:	781b      	ldrb	r3, [r3, #0]
 800ea52:	4619      	mov	r1, r3
 800ea54:	6878      	ldr	r0, [r7, #4]
 800ea56:	f008 fe91 	bl	801777c <USBD_LL_GetRxDataSize>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	2b1f      	cmp	r3, #31
 800ea5e:	d114      	bne.n	800ea8a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800ea66:	4a35      	ldr	r2, [pc, #212]	; (800eb3c <MSC_BOT_CBW_Decode+0x124>)
 800ea68:	4293      	cmp	r3, r2
 800ea6a:	d10e      	bne.n	800ea8a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800ea72:	2b01      	cmp	r3, #1
 800ea74:	d809      	bhi.n	800ea8a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d004      	beq.n	800ea8a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800ea86:	2b10      	cmp	r3, #16
 800ea88:	d90e      	bls.n	800eaa8 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ea90:	2320      	movs	r3, #32
 800ea92:	2205      	movs	r2, #5
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f000 fe28 	bl	800f6ea <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	2202      	movs	r2, #2
 800ea9e:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800eaa0:	6878      	ldr	r0, [r7, #4]
 800eaa2:	f000 f8bd 	bl	800ec20 <MSC_BOT_Abort>
 800eaa6:	e043      	b.n	800eb30 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800eab4:	461a      	mov	r2, r3
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	f000 f92e 	bl	800ed18 <SCSI_ProcessCmd>
 800eabc:	4603      	mov	r3, r0
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	da0c      	bge.n	800eadc <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	7a1b      	ldrb	r3, [r3, #8]
 800eac6:	2b05      	cmp	r3, #5
 800eac8:	d104      	bne.n	800ead4 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800eaca:	2101      	movs	r1, #1
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	f000 f86d 	bl	800ebac <MSC_BOT_SendCSW>
 800ead2:	e02d      	b.n	800eb30 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f000 f8a3 	bl	800ec20 <MSC_BOT_Abort>
 800eada:	e029      	b.n	800eb30 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	7a1b      	ldrb	r3, [r3, #8]
 800eae0:	2b02      	cmp	r3, #2
 800eae2:	d024      	beq.n	800eb2e <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800eae8:	2b01      	cmp	r3, #1
 800eaea:	d020      	beq.n	800eb2e <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800eaf0:	2b03      	cmp	r3, #3
 800eaf2:	d01c      	beq.n	800eb2e <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	68db      	ldr	r3, [r3, #12]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d009      	beq.n	800eb10 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	f103 0110 	add.w	r1, r3, #16
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	68db      	ldr	r3, [r3, #12]
 800eb06:	461a      	mov	r2, r3
 800eb08:	6878      	ldr	r0, [r7, #4]
 800eb0a:	f000 f819 	bl	800eb40 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800eb0e:	e00f      	b.n	800eb30 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	68db      	ldr	r3, [r3, #12]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d104      	bne.n	800eb22 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800eb18:	2100      	movs	r1, #0
 800eb1a:	6878      	ldr	r0, [r7, #4]
 800eb1c:	f000 f846 	bl	800ebac <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800eb20:	e006      	b.n	800eb30 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800eb22:	6878      	ldr	r0, [r7, #4]
 800eb24:	f000 f87c 	bl	800ec20 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800eb28:	e002      	b.n	800eb30 <MSC_BOT_CBW_Decode+0x118>
    return;
 800eb2a:	bf00      	nop
 800eb2c:	e000      	b.n	800eb30 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 800eb2e:	bf00      	nop
    }
  }
}
 800eb30:	3710      	adds	r7, #16
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bd80      	pop	{r7, pc}
 800eb36:	bf00      	nop
 800eb38:	200000a7 	.word	0x200000a7
 800eb3c:	43425355 	.word	0x43425355

0800eb40 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b086      	sub	sp, #24
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	60f8      	str	r0, [r7, #12]
 800eb48:	60b9      	str	r1, [r7, #8]
 800eb4a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	32b0      	adds	r2, #176	; 0xb0
 800eb56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb5a:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800eb5c:	697b      	ldr	r3, [r7, #20]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d01e      	beq.n	800eba0 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 800eb62:	697b      	ldr	r3, [r7, #20]
 800eb64:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800eb68:	687a      	ldr	r2, [r7, #4]
 800eb6a:	4293      	cmp	r3, r2
 800eb6c:	bf28      	it	cs
 800eb6e:	4613      	movcs	r3, r2
 800eb70:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800eb72:	697b      	ldr	r3, [r7, #20]
 800eb74:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	1ad2      	subs	r2, r2, r3
 800eb7c:	697b      	ldr	r3, [r7, #20]
 800eb7e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800eb82:	697b      	ldr	r3, [r7, #20]
 800eb84:	2200      	movs	r2, #0
 800eb86:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800eb8a:	697b      	ldr	r3, [r7, #20]
 800eb8c:	2204      	movs	r2, #4
 800eb8e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800eb90:	4b05      	ldr	r3, [pc, #20]	; (800eba8 <MSC_BOT_SendData+0x68>)
 800eb92:	7819      	ldrb	r1, [r3, #0]
 800eb94:	693b      	ldr	r3, [r7, #16]
 800eb96:	68ba      	ldr	r2, [r7, #8]
 800eb98:	68f8      	ldr	r0, [r7, #12]
 800eb9a:	f008 fdad 	bl	80176f8 <USBD_LL_Transmit>
 800eb9e:	e000      	b.n	800eba2 <MSC_BOT_SendData+0x62>
    return;
 800eba0:	bf00      	nop
}
 800eba2:	3718      	adds	r7, #24
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}
 800eba8:	200000a6 	.word	0x200000a6

0800ebac <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b084      	sub	sp, #16
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
 800ebb4:	460b      	mov	r3, r1
 800ebb6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	32b0      	adds	r2, #176	; 0xb0
 800ebc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebc6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d01d      	beq.n	800ec0a <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	4a10      	ldr	r2, [pc, #64]	; (800ec14 <MSC_BOT_SendCSW+0x68>)
 800ebd2:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	78fa      	ldrb	r2, [r7, #3]
 800ebda:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800ebe4:	4b0c      	ldr	r3, [pc, #48]	; (800ec18 <MSC_BOT_SendCSW+0x6c>)
 800ebe6:	7819      	ldrb	r1, [r3, #0]
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800ebee:	230d      	movs	r3, #13
 800ebf0:	6878      	ldr	r0, [r7, #4]
 800ebf2:	f008 fd81 	bl	80176f8 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800ebf6:	4b09      	ldr	r3, [pc, #36]	; (800ec1c <MSC_BOT_SendCSW+0x70>)
 800ebf8:	7819      	ldrb	r1, [r3, #0]
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800ec00:	231f      	movs	r3, #31
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f008 fd99 	bl	801773a <USBD_LL_PrepareReceive>
 800ec08:	e000      	b.n	800ec0c <MSC_BOT_SendCSW+0x60>
    return;
 800ec0a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800ec0c:	3710      	adds	r7, #16
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}
 800ec12:	bf00      	nop
 800ec14:	53425355 	.word	0x53425355
 800ec18:	200000a6 	.word	0x200000a6
 800ec1c:	200000a7 	.word	0x200000a7

0800ec20 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b084      	sub	sp, #16
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	32b0      	adds	r2, #176	; 0xb0
 800ec32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec36:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d02a      	beq.n	800ec94 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d10e      	bne.n	800ec66 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d009      	beq.n	800ec66 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d105      	bne.n	800ec66 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800ec5a:	4b10      	ldr	r3, [pc, #64]	; (800ec9c <MSC_BOT_Abort+0x7c>)
 800ec5c:	781b      	ldrb	r3, [r3, #0]
 800ec5e:	4619      	mov	r1, r3
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f008 fcc0 	bl	80175e6 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800ec66:	4b0e      	ldr	r3, [pc, #56]	; (800eca0 <MSC_BOT_Abort+0x80>)
 800ec68:	781b      	ldrb	r3, [r3, #0]
 800ec6a:	4619      	mov	r1, r3
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f008 fcba 	bl	80175e6 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	7a5b      	ldrb	r3, [r3, #9]
 800ec76:	2b02      	cmp	r3, #2
 800ec78:	d10d      	bne.n	800ec96 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800ec7a:	4b09      	ldr	r3, [pc, #36]	; (800eca0 <MSC_BOT_Abort+0x80>)
 800ec7c:	781b      	ldrb	r3, [r3, #0]
 800ec7e:	4619      	mov	r1, r3
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f008 fcb0 	bl	80175e6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800ec86:	4b05      	ldr	r3, [pc, #20]	; (800ec9c <MSC_BOT_Abort+0x7c>)
 800ec88:	781b      	ldrb	r3, [r3, #0]
 800ec8a:	4619      	mov	r1, r3
 800ec8c:	6878      	ldr	r0, [r7, #4]
 800ec8e:	f008 fcaa 	bl	80175e6 <USBD_LL_StallEP>
 800ec92:	e000      	b.n	800ec96 <MSC_BOT_Abort+0x76>
    return;
 800ec94:	bf00      	nop
  }
}
 800ec96:	3710      	adds	r7, #16
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}
 800ec9c:	200000a7 	.word	0x200000a7
 800eca0:	200000a6 	.word	0x200000a6

0800eca4 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b084      	sub	sp, #16
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
 800ecac:	460b      	mov	r3, r1
 800ecae:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	32b0      	adds	r2, #176	; 0xb0
 800ecba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecbe:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d01d      	beq.n	800ed02 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	7a5b      	ldrb	r3, [r3, #9]
 800ecca:	2b02      	cmp	r3, #2
 800eccc:	d10c      	bne.n	800ece8 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800ecce:	4b10      	ldr	r3, [pc, #64]	; (800ed10 <MSC_BOT_CplClrFeature+0x6c>)
 800ecd0:	781b      	ldrb	r3, [r3, #0]
 800ecd2:	4619      	mov	r1, r3
 800ecd4:	6878      	ldr	r0, [r7, #4]
 800ecd6:	f008 fc86 	bl	80175e6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800ecda:	4b0e      	ldr	r3, [pc, #56]	; (800ed14 <MSC_BOT_CplClrFeature+0x70>)
 800ecdc:	781b      	ldrb	r3, [r3, #0]
 800ecde:	4619      	mov	r1, r3
 800ece0:	6878      	ldr	r0, [r7, #4]
 800ece2:	f008 fc80 	bl	80175e6 <USBD_LL_StallEP>
 800ece6:	e00f      	b.n	800ed08 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800ece8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	da0a      	bge.n	800ed06 <MSC_BOT_CplClrFeature+0x62>
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	7a5b      	ldrb	r3, [r3, #9]
 800ecf4:	2b01      	cmp	r3, #1
 800ecf6:	d006      	beq.n	800ed06 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800ecf8:	2101      	movs	r1, #1
 800ecfa:	6878      	ldr	r0, [r7, #4]
 800ecfc:	f7ff ff56 	bl	800ebac <MSC_BOT_SendCSW>
 800ed00:	e002      	b.n	800ed08 <MSC_BOT_CplClrFeature+0x64>
    return;
 800ed02:	bf00      	nop
 800ed04:	e000      	b.n	800ed08 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800ed06:	bf00      	nop
  }
}
 800ed08:	3710      	adds	r7, #16
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd80      	pop	{r7, pc}
 800ed0e:	bf00      	nop
 800ed10:	200000a6 	.word	0x200000a6
 800ed14:	200000a7 	.word	0x200000a7

0800ed18 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b086      	sub	sp, #24
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	60f8      	str	r0, [r7, #12]
 800ed20:	460b      	mov	r3, r1
 800ed22:	607a      	str	r2, [r7, #4]
 800ed24:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	32b0      	adds	r2, #176	; 0xb0
 800ed30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed34:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800ed36:	693b      	ldr	r3, [r7, #16]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d102      	bne.n	800ed42 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 800ed3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ed40:	e168      	b.n	800f014 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	781b      	ldrb	r3, [r3, #0]
 800ed46:	2baa      	cmp	r3, #170	; 0xaa
 800ed48:	f000 8144 	beq.w	800efd4 <SCSI_ProcessCmd+0x2bc>
 800ed4c:	2baa      	cmp	r3, #170	; 0xaa
 800ed4e:	f300 8153 	bgt.w	800eff8 <SCSI_ProcessCmd+0x2e0>
 800ed52:	2ba8      	cmp	r3, #168	; 0xa8
 800ed54:	f000 812c 	beq.w	800efb0 <SCSI_ProcessCmd+0x298>
 800ed58:	2ba8      	cmp	r3, #168	; 0xa8
 800ed5a:	f300 814d 	bgt.w	800eff8 <SCSI_ProcessCmd+0x2e0>
 800ed5e:	2b5a      	cmp	r3, #90	; 0x5a
 800ed60:	f300 80c0 	bgt.w	800eee4 <SCSI_ProcessCmd+0x1cc>
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	f2c0 8147 	blt.w	800eff8 <SCSI_ProcessCmd+0x2e0>
 800ed6a:	2b5a      	cmp	r3, #90	; 0x5a
 800ed6c:	f200 8144 	bhi.w	800eff8 <SCSI_ProcessCmd+0x2e0>
 800ed70:	a201      	add	r2, pc, #4	; (adr r2, 800ed78 <SCSI_ProcessCmd+0x60>)
 800ed72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed76:	bf00      	nop
 800ed78:	0800eeeb 	.word	0x0800eeeb
 800ed7c:	0800eff9 	.word	0x0800eff9
 800ed80:	0800eff9 	.word	0x0800eff9
 800ed84:	0800eefd 	.word	0x0800eefd
 800ed88:	0800eff9 	.word	0x0800eff9
 800ed8c:	0800eff9 	.word	0x0800eff9
 800ed90:	0800eff9 	.word	0x0800eff9
 800ed94:	0800eff9 	.word	0x0800eff9
 800ed98:	0800eff9 	.word	0x0800eff9
 800ed9c:	0800eff9 	.word	0x0800eff9
 800eda0:	0800eff9 	.word	0x0800eff9
 800eda4:	0800eff9 	.word	0x0800eff9
 800eda8:	0800eff9 	.word	0x0800eff9
 800edac:	0800eff9 	.word	0x0800eff9
 800edb0:	0800eff9 	.word	0x0800eff9
 800edb4:	0800eff9 	.word	0x0800eff9
 800edb8:	0800eff9 	.word	0x0800eff9
 800edbc:	0800eff9 	.word	0x0800eff9
 800edc0:	0800ef0f 	.word	0x0800ef0f
 800edc4:	0800eff9 	.word	0x0800eff9
 800edc8:	0800eff9 	.word	0x0800eff9
 800edcc:	0800eff9 	.word	0x0800eff9
 800edd0:	0800eff9 	.word	0x0800eff9
 800edd4:	0800eff9 	.word	0x0800eff9
 800edd8:	0800eff9 	.word	0x0800eff9
 800eddc:	0800eff9 	.word	0x0800eff9
 800ede0:	0800ef45 	.word	0x0800ef45
 800ede4:	0800ef21 	.word	0x0800ef21
 800ede8:	0800eff9 	.word	0x0800eff9
 800edec:	0800eff9 	.word	0x0800eff9
 800edf0:	0800ef33 	.word	0x0800ef33
 800edf4:	0800eff9 	.word	0x0800eff9
 800edf8:	0800eff9 	.word	0x0800eff9
 800edfc:	0800eff9 	.word	0x0800eff9
 800ee00:	0800eff9 	.word	0x0800eff9
 800ee04:	0800ef69 	.word	0x0800ef69
 800ee08:	0800eff9 	.word	0x0800eff9
 800ee0c:	0800ef7b 	.word	0x0800ef7b
 800ee10:	0800eff9 	.word	0x0800eff9
 800ee14:	0800eff9 	.word	0x0800eff9
 800ee18:	0800ef9f 	.word	0x0800ef9f
 800ee1c:	0800eff9 	.word	0x0800eff9
 800ee20:	0800efc3 	.word	0x0800efc3
 800ee24:	0800eff9 	.word	0x0800eff9
 800ee28:	0800eff9 	.word	0x0800eff9
 800ee2c:	0800eff9 	.word	0x0800eff9
 800ee30:	0800eff9 	.word	0x0800eff9
 800ee34:	0800efe7 	.word	0x0800efe7
 800ee38:	0800eff9 	.word	0x0800eff9
 800ee3c:	0800eff9 	.word	0x0800eff9
 800ee40:	0800eff9 	.word	0x0800eff9
 800ee44:	0800eff9 	.word	0x0800eff9
 800ee48:	0800eff9 	.word	0x0800eff9
 800ee4c:	0800eff9 	.word	0x0800eff9
 800ee50:	0800eff9 	.word	0x0800eff9
 800ee54:	0800eff9 	.word	0x0800eff9
 800ee58:	0800eff9 	.word	0x0800eff9
 800ee5c:	0800eff9 	.word	0x0800eff9
 800ee60:	0800eff9 	.word	0x0800eff9
 800ee64:	0800eff9 	.word	0x0800eff9
 800ee68:	0800eff9 	.word	0x0800eff9
 800ee6c:	0800eff9 	.word	0x0800eff9
 800ee70:	0800eff9 	.word	0x0800eff9
 800ee74:	0800eff9 	.word	0x0800eff9
 800ee78:	0800eff9 	.word	0x0800eff9
 800ee7c:	0800eff9 	.word	0x0800eff9
 800ee80:	0800eff9 	.word	0x0800eff9
 800ee84:	0800eff9 	.word	0x0800eff9
 800ee88:	0800eff9 	.word	0x0800eff9
 800ee8c:	0800eff9 	.word	0x0800eff9
 800ee90:	0800eff9 	.word	0x0800eff9
 800ee94:	0800eff9 	.word	0x0800eff9
 800ee98:	0800eff9 	.word	0x0800eff9
 800ee9c:	0800eff9 	.word	0x0800eff9
 800eea0:	0800eff9 	.word	0x0800eff9
 800eea4:	0800eff9 	.word	0x0800eff9
 800eea8:	0800eff9 	.word	0x0800eff9
 800eeac:	0800eff9 	.word	0x0800eff9
 800eeb0:	0800eff9 	.word	0x0800eff9
 800eeb4:	0800eff9 	.word	0x0800eff9
 800eeb8:	0800eff9 	.word	0x0800eff9
 800eebc:	0800eff9 	.word	0x0800eff9
 800eec0:	0800eff9 	.word	0x0800eff9
 800eec4:	0800eff9 	.word	0x0800eff9
 800eec8:	0800eff9 	.word	0x0800eff9
 800eecc:	0800eff9 	.word	0x0800eff9
 800eed0:	0800eff9 	.word	0x0800eff9
 800eed4:	0800eff9 	.word	0x0800eff9
 800eed8:	0800eff9 	.word	0x0800eff9
 800eedc:	0800eff9 	.word	0x0800eff9
 800eee0:	0800ef57 	.word	0x0800ef57
 800eee4:	2b9e      	cmp	r3, #158	; 0x9e
 800eee6:	d051      	beq.n	800ef8c <SCSI_ProcessCmd+0x274>
 800eee8:	e086      	b.n	800eff8 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800eeea:	7afb      	ldrb	r3, [r7, #11]
 800eeec:	687a      	ldr	r2, [r7, #4]
 800eeee:	4619      	mov	r1, r3
 800eef0:	68f8      	ldr	r0, [r7, #12]
 800eef2:	f000 f893 	bl	800f01c <SCSI_TestUnitReady>
 800eef6:	4603      	mov	r3, r0
 800eef8:	75fb      	strb	r3, [r7, #23]
      break;
 800eefa:	e089      	b.n	800f010 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 800eefc:	7afb      	ldrb	r3, [r7, #11]
 800eefe:	687a      	ldr	r2, [r7, #4]
 800ef00:	4619      	mov	r1, r3
 800ef02:	68f8      	ldr	r0, [r7, #12]
 800ef04:	f000 fb6e 	bl	800f5e4 <SCSI_RequestSense>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	75fb      	strb	r3, [r7, #23]
      break;
 800ef0c:	e080      	b.n	800f010 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800ef0e:	7afb      	ldrb	r3, [r7, #11]
 800ef10:	687a      	ldr	r2, [r7, #4]
 800ef12:	4619      	mov	r1, r3
 800ef14:	68f8      	ldr	r0, [r7, #12]
 800ef16:	f000 f8db 	bl	800f0d0 <SCSI_Inquiry>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	75fb      	strb	r3, [r7, #23]
      break;
 800ef1e:	e077      	b.n	800f010 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800ef20:	7afb      	ldrb	r3, [r7, #11]
 800ef22:	687a      	ldr	r2, [r7, #4]
 800ef24:	4619      	mov	r1, r3
 800ef26:	68f8      	ldr	r0, [r7, #12]
 800ef28:	f000 fc2a 	bl	800f780 <SCSI_StartStopUnit>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	75fb      	strb	r3, [r7, #23]
      break;
 800ef30:	e06e      	b.n	800f010 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800ef32:	7afb      	ldrb	r3, [r7, #11]
 800ef34:	687a      	ldr	r2, [r7, #4]
 800ef36:	4619      	mov	r1, r3
 800ef38:	68f8      	ldr	r0, [r7, #12]
 800ef3a:	f000 fc76 	bl	800f82a <SCSI_AllowPreventRemovable>
 800ef3e:	4603      	mov	r3, r0
 800ef40:	75fb      	strb	r3, [r7, #23]
      break;
 800ef42:	e065      	b.n	800f010 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800ef44:	7afb      	ldrb	r3, [r7, #11]
 800ef46:	687a      	ldr	r2, [r7, #4]
 800ef48:	4619      	mov	r1, r3
 800ef4a:	68f8      	ldr	r0, [r7, #12]
 800ef4c:	f000 faea 	bl	800f524 <SCSI_ModeSense6>
 800ef50:	4603      	mov	r3, r0
 800ef52:	75fb      	strb	r3, [r7, #23]
      break;
 800ef54:	e05c      	b.n	800f010 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800ef56:	7afb      	ldrb	r3, [r7, #11]
 800ef58:	687a      	ldr	r2, [r7, #4]
 800ef5a:	4619      	mov	r1, r3
 800ef5c:	68f8      	ldr	r0, [r7, #12]
 800ef5e:	f000 fb11 	bl	800f584 <SCSI_ModeSense10>
 800ef62:	4603      	mov	r3, r0
 800ef64:	75fb      	strb	r3, [r7, #23]
      break;
 800ef66:	e053      	b.n	800f010 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800ef68:	7afb      	ldrb	r3, [r7, #11]
 800ef6a:	687a      	ldr	r2, [r7, #4]
 800ef6c:	4619      	mov	r1, r3
 800ef6e:	68f8      	ldr	r0, [r7, #12]
 800ef70:	f000 fa5d 	bl	800f42e <SCSI_ReadFormatCapacity>
 800ef74:	4603      	mov	r3, r0
 800ef76:	75fb      	strb	r3, [r7, #23]
      break;
 800ef78:	e04a      	b.n	800f010 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800ef7a:	7afb      	ldrb	r3, [r7, #11]
 800ef7c:	687a      	ldr	r2, [r7, #4]
 800ef7e:	4619      	mov	r1, r3
 800ef80:	68f8      	ldr	r0, [r7, #12]
 800ef82:	f000 f923 	bl	800f1cc <SCSI_ReadCapacity10>
 800ef86:	4603      	mov	r3, r0
 800ef88:	75fb      	strb	r3, [r7, #23]
      break;
 800ef8a:	e041      	b.n	800f010 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800ef8c:	7afb      	ldrb	r3, [r7, #11]
 800ef8e:	687a      	ldr	r2, [r7, #4]
 800ef90:	4619      	mov	r1, r3
 800ef92:	68f8      	ldr	r0, [r7, #12]
 800ef94:	f000 f998 	bl	800f2c8 <SCSI_ReadCapacity16>
 800ef98:	4603      	mov	r3, r0
 800ef9a:	75fb      	strb	r3, [r7, #23]
      break;
 800ef9c:	e038      	b.n	800f010 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800ef9e:	7afb      	ldrb	r3, [r7, #11]
 800efa0:	687a      	ldr	r2, [r7, #4]
 800efa2:	4619      	mov	r1, r3
 800efa4:	68f8      	ldr	r0, [r7, #12]
 800efa6:	f000 fc6d 	bl	800f884 <SCSI_Read10>
 800efaa:	4603      	mov	r3, r0
 800efac:	75fb      	strb	r3, [r7, #23]
      break;
 800efae:	e02f      	b.n	800f010 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800efb0:	7afb      	ldrb	r3, [r7, #11]
 800efb2:	687a      	ldr	r2, [r7, #4]
 800efb4:	4619      	mov	r1, r3
 800efb6:	68f8      	ldr	r0, [r7, #12]
 800efb8:	f000 fd0e 	bl	800f9d8 <SCSI_Read12>
 800efbc:	4603      	mov	r3, r0
 800efbe:	75fb      	strb	r3, [r7, #23]
      break;
 800efc0:	e026      	b.n	800f010 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800efc2:	7afb      	ldrb	r3, [r7, #11]
 800efc4:	687a      	ldr	r2, [r7, #4]
 800efc6:	4619      	mov	r1, r3
 800efc8:	68f8      	ldr	r0, [r7, #12]
 800efca:	f000 fdb9 	bl	800fb40 <SCSI_Write10>
 800efce:	4603      	mov	r3, r0
 800efd0:	75fb      	strb	r3, [r7, #23]
      break;
 800efd2:	e01d      	b.n	800f010 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800efd4:	7afb      	ldrb	r3, [r7, #11]
 800efd6:	687a      	ldr	r2, [r7, #4]
 800efd8:	4619      	mov	r1, r3
 800efda:	68f8      	ldr	r0, [r7, #12]
 800efdc:	f000 fe86 	bl	800fcec <SCSI_Write12>
 800efe0:	4603      	mov	r3, r0
 800efe2:	75fb      	strb	r3, [r7, #23]
      break;
 800efe4:	e014      	b.n	800f010 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800efe6:	7afb      	ldrb	r3, [r7, #11]
 800efe8:	687a      	ldr	r2, [r7, #4]
 800efea:	4619      	mov	r1, r3
 800efec:	68f8      	ldr	r0, [r7, #12]
 800efee:	f000 ff63 	bl	800feb8 <SCSI_Verify10>
 800eff2:	4603      	mov	r3, r0
 800eff4:	75fb      	strb	r3, [r7, #23]
      break;
 800eff6:	e00b      	b.n	800f010 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800eff8:	7af9      	ldrb	r1, [r7, #11]
 800effa:	2320      	movs	r3, #32
 800effc:	2205      	movs	r2, #5
 800effe:	68f8      	ldr	r0, [r7, #12]
 800f000:	f000 fb73 	bl	800f6ea <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800f004:	693b      	ldr	r3, [r7, #16]
 800f006:	2202      	movs	r2, #2
 800f008:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800f00a:	23ff      	movs	r3, #255	; 0xff
 800f00c:	75fb      	strb	r3, [r7, #23]
      break;
 800f00e:	bf00      	nop
  }

  return ret;
 800f010:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f014:	4618      	mov	r0, r3
 800f016:	3718      	adds	r7, #24
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd80      	pop	{r7, pc}

0800f01c <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b086      	sub	sp, #24
 800f020:	af00      	add	r7, sp, #0
 800f022:	60f8      	str	r0, [r7, #12]
 800f024:	460b      	mov	r3, r1
 800f026:	607a      	str	r2, [r7, #4]
 800f028:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	32b0      	adds	r2, #176	; 0xb0
 800f034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f038:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800f03a:	697b      	ldr	r3, [r7, #20]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d102      	bne.n	800f046 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 800f040:	f04f 33ff 	mov.w	r3, #4294967295
 800f044:	e03f      	b.n	800f0c6 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800f046:	697b      	ldr	r3, [r7, #20]
 800f048:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d00a      	beq.n	800f066 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f050:	697b      	ldr	r3, [r7, #20]
 800f052:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f056:	2320      	movs	r3, #32
 800f058:	2205      	movs	r2, #5
 800f05a:	68f8      	ldr	r0, [r7, #12]
 800f05c:	f000 fb45 	bl	800f6ea <SCSI_SenseCode>

    return -1;
 800f060:	f04f 33ff 	mov.w	r3, #4294967295
 800f064:	e02f      	b.n	800f0c6 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800f06c:	2b02      	cmp	r3, #2
 800f06e:	d10b      	bne.n	800f088 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f070:	7af9      	ldrb	r1, [r7, #11]
 800f072:	233a      	movs	r3, #58	; 0x3a
 800f074:	2202      	movs	r2, #2
 800f076:	68f8      	ldr	r0, [r7, #12]
 800f078:	f000 fb37 	bl	800f6ea <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800f07c:	697b      	ldr	r3, [r7, #20]
 800f07e:	2205      	movs	r2, #5
 800f080:	721a      	strb	r2, [r3, #8]
    return -1;
 800f082:	f04f 33ff 	mov.w	r3, #4294967295
 800f086:	e01e      	b.n	800f0c6 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f08e:	68fa      	ldr	r2, [r7, #12]
 800f090:	33b0      	adds	r3, #176	; 0xb0
 800f092:	009b      	lsls	r3, r3, #2
 800f094:	4413      	add	r3, r2
 800f096:	685b      	ldr	r3, [r3, #4]
 800f098:	689b      	ldr	r3, [r3, #8]
 800f09a:	7afa      	ldrb	r2, [r7, #11]
 800f09c:	4610      	mov	r0, r2
 800f09e:	4798      	blx	r3
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d00b      	beq.n	800f0be <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f0a6:	7af9      	ldrb	r1, [r7, #11]
 800f0a8:	233a      	movs	r3, #58	; 0x3a
 800f0aa:	2202      	movs	r2, #2
 800f0ac:	68f8      	ldr	r0, [r7, #12]
 800f0ae:	f000 fb1c 	bl	800f6ea <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800f0b2:	697b      	ldr	r3, [r7, #20]
 800f0b4:	2205      	movs	r2, #5
 800f0b6:	721a      	strb	r2, [r3, #8]

    return -1;
 800f0b8:	f04f 33ff 	mov.w	r3, #4294967295
 800f0bc:	e003      	b.n	800f0c6 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 800f0be:	697b      	ldr	r3, [r7, #20]
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	60da      	str	r2, [r3, #12]

  return 0;
 800f0c4:	2300      	movs	r3, #0
}
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	3718      	adds	r7, #24
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd80      	pop	{r7, pc}
	...

0800f0d0 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b088      	sub	sp, #32
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	60f8      	str	r0, [r7, #12]
 800f0d8:	460b      	mov	r3, r1
 800f0da:	607a      	str	r2, [r7, #4]
 800f0dc:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	32b0      	adds	r2, #176	; 0xb0
 800f0e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0ec:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800f0ee:	69bb      	ldr	r3, [r7, #24]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d102      	bne.n	800f0fa <SCSI_Inquiry+0x2a>
  {
    return -1;
 800f0f4:	f04f 33ff 	mov.w	r3, #4294967295
 800f0f8:	e05f      	b.n	800f1ba <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800f0fa:	69bb      	ldr	r3, [r7, #24]
 800f0fc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f100:	2b00      	cmp	r3, #0
 800f102:	d10a      	bne.n	800f11a <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f104:	69bb      	ldr	r3, [r7, #24]
 800f106:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f10a:	2320      	movs	r3, #32
 800f10c:	2205      	movs	r2, #5
 800f10e:	68f8      	ldr	r0, [r7, #12]
 800f110:	f000 faeb 	bl	800f6ea <SCSI_SenseCode>
    return -1;
 800f114:	f04f 33ff 	mov.w	r3, #4294967295
 800f118:	e04f      	b.n	800f1ba <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	3301      	adds	r3, #1
 800f11e:	781b      	ldrb	r3, [r3, #0]
 800f120:	f003 0301 	and.w	r3, r3, #1
 800f124:	2b00      	cmp	r3, #0
 800f126:	d020      	beq.n	800f16a <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	3302      	adds	r3, #2
 800f12c:	781b      	ldrb	r3, [r3, #0]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d105      	bne.n	800f13e <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800f132:	2206      	movs	r2, #6
 800f134:	4923      	ldr	r1, [pc, #140]	; (800f1c4 <SCSI_Inquiry+0xf4>)
 800f136:	69b8      	ldr	r0, [r7, #24]
 800f138:	f001 f844 	bl	80101c4 <SCSI_UpdateBotData>
 800f13c:	e03c      	b.n	800f1b8 <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	3302      	adds	r3, #2
 800f142:	781b      	ldrb	r3, [r3, #0]
 800f144:	2b80      	cmp	r3, #128	; 0x80
 800f146:	d105      	bne.n	800f154 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800f148:	2208      	movs	r2, #8
 800f14a:	491f      	ldr	r1, [pc, #124]	; (800f1c8 <SCSI_Inquiry+0xf8>)
 800f14c:	69b8      	ldr	r0, [r7, #24]
 800f14e:	f001 f839 	bl	80101c4 <SCSI_UpdateBotData>
 800f152:	e031      	b.n	800f1b8 <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800f154:	69bb      	ldr	r3, [r7, #24]
 800f156:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f15a:	2324      	movs	r3, #36	; 0x24
 800f15c:	2205      	movs	r2, #5
 800f15e:	68f8      	ldr	r0, [r7, #12]
 800f160:	f000 fac3 	bl	800f6ea <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800f164:	f04f 33ff 	mov.w	r3, #4294967295
 800f168:	e027      	b.n	800f1ba <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f170:	68fa      	ldr	r2, [r7, #12]
 800f172:	33b0      	adds	r3, #176	; 0xb0
 800f174:	009b      	lsls	r3, r3, #2
 800f176:	4413      	add	r3, r2
 800f178:	685b      	ldr	r3, [r3, #4]
 800f17a:	69d9      	ldr	r1, [r3, #28]
 800f17c:	7afa      	ldrb	r2, [r7, #11]
 800f17e:	4613      	mov	r3, r2
 800f180:	00db      	lsls	r3, r3, #3
 800f182:	4413      	add	r3, r2
 800f184:	009b      	lsls	r3, r3, #2
 800f186:	440b      	add	r3, r1
 800f188:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800f18a:	697b      	ldr	r3, [r7, #20]
 800f18c:	3304      	adds	r3, #4
 800f18e:	781b      	ldrb	r3, [r3, #0]
 800f190:	b29b      	uxth	r3, r3
 800f192:	3305      	adds	r3, #5
 800f194:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	3304      	adds	r3, #4
 800f19a:	781b      	ldrb	r3, [r3, #0]
 800f19c:	b29b      	uxth	r3, r3
 800f19e:	8bfa      	ldrh	r2, [r7, #30]
 800f1a0:	429a      	cmp	r2, r3
 800f1a2:	d303      	bcc.n	800f1ac <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	3304      	adds	r3, #4
 800f1a8:	781b      	ldrb	r3, [r3, #0]
 800f1aa:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800f1ac:	8bfb      	ldrh	r3, [r7, #30]
 800f1ae:	461a      	mov	r2, r3
 800f1b0:	6979      	ldr	r1, [r7, #20]
 800f1b2:	69b8      	ldr	r0, [r7, #24]
 800f1b4:	f001 f806 	bl	80101c4 <SCSI_UpdateBotData>
  }

  return 0;
 800f1b8:	2300      	movs	r3, #0
}
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	3720      	adds	r7, #32
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	bd80      	pop	{r7, pc}
 800f1c2:	bf00      	nop
 800f1c4:	200000a8 	.word	0x200000a8
 800f1c8:	200000b0 	.word	0x200000b0

0800f1cc <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b086      	sub	sp, #24
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	60f8      	str	r0, [r7, #12]
 800f1d4:	460b      	mov	r3, r1
 800f1d6:	607a      	str	r2, [r7, #4]
 800f1d8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	32b0      	adds	r2, #176	; 0xb0
 800f1e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1e8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800f1ea:	697b      	ldr	r3, [r7, #20]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d102      	bne.n	800f1f6 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 800f1f0:	f04f 33ff 	mov.w	r3, #4294967295
 800f1f4:	e064      	b.n	800f2c0 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f1fc:	68fa      	ldr	r2, [r7, #12]
 800f1fe:	33b0      	adds	r3, #176	; 0xb0
 800f200:	009b      	lsls	r3, r3, #2
 800f202:	4413      	add	r3, r2
 800f204:	685b      	ldr	r3, [r3, #4]
 800f206:	685b      	ldr	r3, [r3, #4]
 800f208:	697a      	ldr	r2, [r7, #20]
 800f20a:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800f20e:	697a      	ldr	r2, [r7, #20]
 800f210:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800f214:	7af8      	ldrb	r0, [r7, #11]
 800f216:	4798      	blx	r3
 800f218:	4603      	mov	r3, r0
 800f21a:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800f21c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d104      	bne.n	800f22e <SCSI_ReadCapacity10+0x62>
 800f224:	697b      	ldr	r3, [r7, #20]
 800f226:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800f22a:	2b02      	cmp	r3, #2
 800f22c:	d108      	bne.n	800f240 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f22e:	7af9      	ldrb	r1, [r7, #11]
 800f230:	233a      	movs	r3, #58	; 0x3a
 800f232:	2202      	movs	r2, #2
 800f234:	68f8      	ldr	r0, [r7, #12]
 800f236:	f000 fa58 	bl	800f6ea <SCSI_SenseCode>
    return -1;
 800f23a:	f04f 33ff 	mov.w	r3, #4294967295
 800f23e:	e03f      	b.n	800f2c0 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f246:	3b01      	subs	r3, #1
 800f248:	0e1b      	lsrs	r3, r3, #24
 800f24a:	b2da      	uxtb	r2, r3
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800f250:	697b      	ldr	r3, [r7, #20]
 800f252:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f256:	3b01      	subs	r3, #1
 800f258:	0c1b      	lsrs	r3, r3, #16
 800f25a:	b2da      	uxtb	r2, r3
 800f25c:	697b      	ldr	r3, [r7, #20]
 800f25e:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800f260:	697b      	ldr	r3, [r7, #20]
 800f262:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f266:	3b01      	subs	r3, #1
 800f268:	0a1b      	lsrs	r3, r3, #8
 800f26a:	b2da      	uxtb	r2, r3
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800f270:	697b      	ldr	r3, [r7, #20]
 800f272:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f276:	b2db      	uxtb	r3, r3
 800f278:	3b01      	subs	r3, #1
 800f27a:	b2da      	uxtb	r2, r3
 800f27c:	697b      	ldr	r3, [r7, #20]
 800f27e:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800f280:	697b      	ldr	r3, [r7, #20]
 800f282:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f286:	161b      	asrs	r3, r3, #24
 800f288:	b2da      	uxtb	r2, r3
 800f28a:	697b      	ldr	r3, [r7, #20]
 800f28c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800f28e:	697b      	ldr	r3, [r7, #20]
 800f290:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f294:	141b      	asrs	r3, r3, #16
 800f296:	b2da      	uxtb	r2, r3
 800f298:	697b      	ldr	r3, [r7, #20]
 800f29a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800f29c:	697b      	ldr	r3, [r7, #20]
 800f29e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f2a2:	0a1b      	lsrs	r3, r3, #8
 800f2a4:	b29b      	uxth	r3, r3
 800f2a6:	b2da      	uxtb	r2, r3
 800f2a8:	697b      	ldr	r3, [r7, #20]
 800f2aa:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800f2ac:	697b      	ldr	r3, [r7, #20]
 800f2ae:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f2b2:	b2da      	uxtb	r2, r3
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800f2b8:	697b      	ldr	r3, [r7, #20]
 800f2ba:	2208      	movs	r2, #8
 800f2bc:	60da      	str	r2, [r3, #12]

  return 0;
 800f2be:	2300      	movs	r3, #0

}
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	3718      	adds	r7, #24
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}

0800f2c8 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b088      	sub	sp, #32
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	60f8      	str	r0, [r7, #12]
 800f2d0:	460b      	mov	r3, r1
 800f2d2:	607a      	str	r2, [r7, #4]
 800f2d4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	32b0      	adds	r2, #176	; 0xb0
 800f2e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2e4:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800f2e6:	69bb      	ldr	r3, [r7, #24]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d102      	bne.n	800f2f2 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 800f2ec:	f04f 33ff 	mov.w	r3, #4294967295
 800f2f0:	e099      	b.n	800f426 <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f2f8:	68fa      	ldr	r2, [r7, #12]
 800f2fa:	33b0      	adds	r3, #176	; 0xb0
 800f2fc:	009b      	lsls	r3, r3, #2
 800f2fe:	4413      	add	r3, r2
 800f300:	685b      	ldr	r3, [r3, #4]
 800f302:	685b      	ldr	r3, [r3, #4]
 800f304:	69ba      	ldr	r2, [r7, #24]
 800f306:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800f30a:	69ba      	ldr	r2, [r7, #24]
 800f30c:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800f310:	7af8      	ldrb	r0, [r7, #11]
 800f312:	4798      	blx	r3
 800f314:	4603      	mov	r3, r0
 800f316:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800f318:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d104      	bne.n	800f32a <SCSI_ReadCapacity16+0x62>
 800f320:	69bb      	ldr	r3, [r7, #24]
 800f322:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800f326:	2b02      	cmp	r3, #2
 800f328:	d108      	bne.n	800f33c <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f32a:	7af9      	ldrb	r1, [r7, #11]
 800f32c:	233a      	movs	r3, #58	; 0x3a
 800f32e:	2202      	movs	r2, #2
 800f330:	68f8      	ldr	r0, [r7, #12]
 800f332:	f000 f9da 	bl	800f6ea <SCSI_SenseCode>
    return -1;
 800f336:	f04f 33ff 	mov.w	r3, #4294967295
 800f33a:	e074      	b.n	800f426 <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	330a      	adds	r3, #10
 800f340:	781b      	ldrb	r3, [r3, #0]
 800f342:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	330b      	adds	r3, #11
 800f348:	781b      	ldrb	r3, [r3, #0]
 800f34a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800f34c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	330c      	adds	r3, #12
 800f352:	781b      	ldrb	r3, [r3, #0]
 800f354:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800f356:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800f358:	687a      	ldr	r2, [r7, #4]
 800f35a:	320d      	adds	r2, #13
 800f35c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800f35e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800f360:	69bb      	ldr	r3, [r7, #24]
 800f362:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800f364:	2300      	movs	r3, #0
 800f366:	77fb      	strb	r3, [r7, #31]
 800f368:	e007      	b.n	800f37a <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 800f36a:	7ffb      	ldrb	r3, [r7, #31]
 800f36c:	69ba      	ldr	r2, [r7, #24]
 800f36e:	4413      	add	r3, r2
 800f370:	2200      	movs	r2, #0
 800f372:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800f374:	7ffb      	ldrb	r3, [r7, #31]
 800f376:	3301      	adds	r3, #1
 800f378:	77fb      	strb	r3, [r7, #31]
 800f37a:	7ffa      	ldrb	r2, [r7, #31]
 800f37c:	69bb      	ldr	r3, [r7, #24]
 800f37e:	68db      	ldr	r3, [r3, #12]
 800f380:	429a      	cmp	r2, r3
 800f382:	d3f2      	bcc.n	800f36a <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800f384:	69bb      	ldr	r3, [r7, #24]
 800f386:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f38a:	3b01      	subs	r3, #1
 800f38c:	0e1b      	lsrs	r3, r3, #24
 800f38e:	b2da      	uxtb	r2, r3
 800f390:	69bb      	ldr	r3, [r7, #24]
 800f392:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800f394:	69bb      	ldr	r3, [r7, #24]
 800f396:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f39a:	3b01      	subs	r3, #1
 800f39c:	0c1b      	lsrs	r3, r3, #16
 800f39e:	b2da      	uxtb	r2, r3
 800f3a0:	69bb      	ldr	r3, [r7, #24]
 800f3a2:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800f3a4:	69bb      	ldr	r3, [r7, #24]
 800f3a6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f3aa:	3b01      	subs	r3, #1
 800f3ac:	0a1b      	lsrs	r3, r3, #8
 800f3ae:	b2da      	uxtb	r2, r3
 800f3b0:	69bb      	ldr	r3, [r7, #24]
 800f3b2:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800f3b4:	69bb      	ldr	r3, [r7, #24]
 800f3b6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f3ba:	b2db      	uxtb	r3, r3
 800f3bc:	3b01      	subs	r3, #1
 800f3be:	b2da      	uxtb	r2, r3
 800f3c0:	69bb      	ldr	r3, [r7, #24]
 800f3c2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800f3c4:	69bb      	ldr	r3, [r7, #24]
 800f3c6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f3ca:	161b      	asrs	r3, r3, #24
 800f3cc:	b2da      	uxtb	r2, r3
 800f3ce:	69bb      	ldr	r3, [r7, #24]
 800f3d0:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800f3d2:	69bb      	ldr	r3, [r7, #24]
 800f3d4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f3d8:	141b      	asrs	r3, r3, #16
 800f3da:	b2da      	uxtb	r2, r3
 800f3dc:	69bb      	ldr	r3, [r7, #24]
 800f3de:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800f3e0:	69bb      	ldr	r3, [r7, #24]
 800f3e2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f3e6:	0a1b      	lsrs	r3, r3, #8
 800f3e8:	b29b      	uxth	r3, r3
 800f3ea:	b2da      	uxtb	r2, r3
 800f3ec:	69bb      	ldr	r3, [r7, #24]
 800f3ee:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800f3f0:	69bb      	ldr	r3, [r7, #24]
 800f3f2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f3f6:	b2da      	uxtb	r2, r3
 800f3f8:	69bb      	ldr	r3, [r7, #24]
 800f3fa:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	330a      	adds	r3, #10
 800f400:	781b      	ldrb	r3, [r3, #0]
 800f402:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	330b      	adds	r3, #11
 800f408:	781b      	ldrb	r3, [r3, #0]
 800f40a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800f40c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	330c      	adds	r3, #12
 800f412:	781b      	ldrb	r3, [r3, #0]
 800f414:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800f416:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800f418:	687a      	ldr	r2, [r7, #4]
 800f41a:	320d      	adds	r2, #13
 800f41c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800f41e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800f420:	69bb      	ldr	r3, [r7, #24]
 800f422:	60da      	str	r2, [r3, #12]

  return 0;
 800f424:	2300      	movs	r3, #0
}
 800f426:	4618      	mov	r0, r3
 800f428:	3720      	adds	r7, #32
 800f42a:	46bd      	mov	sp, r7
 800f42c:	bd80      	pop	{r7, pc}

0800f42e <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f42e:	b580      	push	{r7, lr}
 800f430:	b088      	sub	sp, #32
 800f432:	af00      	add	r7, sp, #0
 800f434:	60f8      	str	r0, [r7, #12]
 800f436:	460b      	mov	r3, r1
 800f438:	607a      	str	r2, [r7, #4]
 800f43a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	32b0      	adds	r2, #176	; 0xb0
 800f446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f44a:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800f44c:	69bb      	ldr	r3, [r7, #24]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d102      	bne.n	800f458 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 800f452:	f04f 33ff 	mov.w	r3, #4294967295
 800f456:	e061      	b.n	800f51c <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f45e:	68fa      	ldr	r2, [r7, #12]
 800f460:	33b0      	adds	r3, #176	; 0xb0
 800f462:	009b      	lsls	r3, r3, #2
 800f464:	4413      	add	r3, r2
 800f466:	685b      	ldr	r3, [r3, #4]
 800f468:	685b      	ldr	r3, [r3, #4]
 800f46a:	f107 0214 	add.w	r2, r7, #20
 800f46e:	f107 0110 	add.w	r1, r7, #16
 800f472:	7af8      	ldrb	r0, [r7, #11]
 800f474:	4798      	blx	r3
 800f476:	4603      	mov	r3, r0
 800f478:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800f47a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d104      	bne.n	800f48c <SCSI_ReadFormatCapacity+0x5e>
 800f482:	69bb      	ldr	r3, [r7, #24]
 800f484:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800f488:	2b02      	cmp	r3, #2
 800f48a:	d108      	bne.n	800f49e <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f48c:	7af9      	ldrb	r1, [r7, #11]
 800f48e:	233a      	movs	r3, #58	; 0x3a
 800f490:	2202      	movs	r2, #2
 800f492:	68f8      	ldr	r0, [r7, #12]
 800f494:	f000 f929 	bl	800f6ea <SCSI_SenseCode>
    return -1;
 800f498:	f04f 33ff 	mov.w	r3, #4294967295
 800f49c:	e03e      	b.n	800f51c <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 800f49e:	2300      	movs	r3, #0
 800f4a0:	83fb      	strh	r3, [r7, #30]
 800f4a2:	e007      	b.n	800f4b4 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 800f4a4:	8bfb      	ldrh	r3, [r7, #30]
 800f4a6:	69ba      	ldr	r2, [r7, #24]
 800f4a8:	4413      	add	r3, r2
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800f4ae:	8bfb      	ldrh	r3, [r7, #30]
 800f4b0:	3301      	adds	r3, #1
 800f4b2:	83fb      	strh	r3, [r7, #30]
 800f4b4:	8bfb      	ldrh	r3, [r7, #30]
 800f4b6:	2b0b      	cmp	r3, #11
 800f4b8:	d9f4      	bls.n	800f4a4 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 800f4ba:	69bb      	ldr	r3, [r7, #24]
 800f4bc:	2208      	movs	r2, #8
 800f4be:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800f4c0:	693b      	ldr	r3, [r7, #16]
 800f4c2:	3b01      	subs	r3, #1
 800f4c4:	0e1b      	lsrs	r3, r3, #24
 800f4c6:	b2da      	uxtb	r2, r3
 800f4c8:	69bb      	ldr	r3, [r7, #24]
 800f4ca:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800f4cc:	693b      	ldr	r3, [r7, #16]
 800f4ce:	3b01      	subs	r3, #1
 800f4d0:	0c1b      	lsrs	r3, r3, #16
 800f4d2:	b2da      	uxtb	r2, r3
 800f4d4:	69bb      	ldr	r3, [r7, #24]
 800f4d6:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800f4d8:	693b      	ldr	r3, [r7, #16]
 800f4da:	3b01      	subs	r3, #1
 800f4dc:	0a1b      	lsrs	r3, r3, #8
 800f4de:	b2da      	uxtb	r2, r3
 800f4e0:	69bb      	ldr	r3, [r7, #24]
 800f4e2:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800f4e4:	693b      	ldr	r3, [r7, #16]
 800f4e6:	b2db      	uxtb	r3, r3
 800f4e8:	3b01      	subs	r3, #1
 800f4ea:	b2da      	uxtb	r2, r3
 800f4ec:	69bb      	ldr	r3, [r7, #24]
 800f4ee:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800f4f0:	69bb      	ldr	r3, [r7, #24]
 800f4f2:	2202      	movs	r2, #2
 800f4f4:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800f4f6:	8abb      	ldrh	r3, [r7, #20]
 800f4f8:	141b      	asrs	r3, r3, #16
 800f4fa:	b2da      	uxtb	r2, r3
 800f4fc:	69bb      	ldr	r3, [r7, #24]
 800f4fe:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800f500:	8abb      	ldrh	r3, [r7, #20]
 800f502:	0a1b      	lsrs	r3, r3, #8
 800f504:	b29b      	uxth	r3, r3
 800f506:	b2da      	uxtb	r2, r3
 800f508:	69bb      	ldr	r3, [r7, #24]
 800f50a:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800f50c:	8abb      	ldrh	r3, [r7, #20]
 800f50e:	b2da      	uxtb	r2, r3
 800f510:	69bb      	ldr	r3, [r7, #24]
 800f512:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800f514:	69bb      	ldr	r3, [r7, #24]
 800f516:	220c      	movs	r2, #12
 800f518:	60da      	str	r2, [r3, #12]

  return 0;
 800f51a:	2300      	movs	r3, #0
}
 800f51c:	4618      	mov	r0, r3
 800f51e:	3720      	adds	r7, #32
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}

0800f524 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b086      	sub	sp, #24
 800f528:	af00      	add	r7, sp, #0
 800f52a:	60f8      	str	r0, [r7, #12]
 800f52c:	460b      	mov	r3, r1
 800f52e:	607a      	str	r2, [r7, #4]
 800f530:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	32b0      	adds	r2, #176	; 0xb0
 800f53c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f540:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800f542:	2317      	movs	r3, #23
 800f544:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800f546:	693b      	ldr	r3, [r7, #16]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d102      	bne.n	800f552 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800f54c:	f04f 33ff 	mov.w	r3, #4294967295
 800f550:	e011      	b.n	800f576 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	3304      	adds	r3, #4
 800f556:	781b      	ldrb	r3, [r3, #0]
 800f558:	b29b      	uxth	r3, r3
 800f55a:	8afa      	ldrh	r2, [r7, #22]
 800f55c:	429a      	cmp	r2, r3
 800f55e:	d303      	bcc.n	800f568 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	3304      	adds	r3, #4
 800f564:	781b      	ldrb	r3, [r3, #0]
 800f566:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800f568:	8afb      	ldrh	r3, [r7, #22]
 800f56a:	461a      	mov	r2, r3
 800f56c:	4904      	ldr	r1, [pc, #16]	; (800f580 <SCSI_ModeSense6+0x5c>)
 800f56e:	6938      	ldr	r0, [r7, #16]
 800f570:	f000 fe28 	bl	80101c4 <SCSI_UpdateBotData>

  return 0;
 800f574:	2300      	movs	r3, #0
}
 800f576:	4618      	mov	r0, r3
 800f578:	3718      	adds	r7, #24
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bd80      	pop	{r7, pc}
 800f57e:	bf00      	nop
 800f580:	200000b8 	.word	0x200000b8

0800f584 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b086      	sub	sp, #24
 800f588:	af00      	add	r7, sp, #0
 800f58a:	60f8      	str	r0, [r7, #12]
 800f58c:	460b      	mov	r3, r1
 800f58e:	607a      	str	r2, [r7, #4]
 800f590:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	32b0      	adds	r2, #176	; 0xb0
 800f59c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5a0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800f5a2:	231b      	movs	r3, #27
 800f5a4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800f5a6:	693b      	ldr	r3, [r7, #16]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d102      	bne.n	800f5b2 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800f5ac:	f04f 33ff 	mov.w	r3, #4294967295
 800f5b0:	e011      	b.n	800f5d6 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	3308      	adds	r3, #8
 800f5b6:	781b      	ldrb	r3, [r3, #0]
 800f5b8:	b29b      	uxth	r3, r3
 800f5ba:	8afa      	ldrh	r2, [r7, #22]
 800f5bc:	429a      	cmp	r2, r3
 800f5be:	d303      	bcc.n	800f5c8 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	3308      	adds	r3, #8
 800f5c4:	781b      	ldrb	r3, [r3, #0]
 800f5c6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800f5c8:	8afb      	ldrh	r3, [r7, #22]
 800f5ca:	461a      	mov	r2, r3
 800f5cc:	4904      	ldr	r1, [pc, #16]	; (800f5e0 <SCSI_ModeSense10+0x5c>)
 800f5ce:	6938      	ldr	r0, [r7, #16]
 800f5d0:	f000 fdf8 	bl	80101c4 <SCSI_UpdateBotData>

  return 0;
 800f5d4:	2300      	movs	r3, #0
}
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	3718      	adds	r7, #24
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bd80      	pop	{r7, pc}
 800f5de:	bf00      	nop
 800f5e0:	200000d0 	.word	0x200000d0

0800f5e4 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b086      	sub	sp, #24
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	60f8      	str	r0, [r7, #12]
 800f5ec:	460b      	mov	r3, r1
 800f5ee:	607a      	str	r2, [r7, #4]
 800f5f0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	32b0      	adds	r2, #176	; 0xb0
 800f5fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f600:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800f602:	693b      	ldr	r3, [r7, #16]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d102      	bne.n	800f60e <SCSI_RequestSense+0x2a>
  {
    return -1;
 800f608:	f04f 33ff 	mov.w	r3, #4294967295
 800f60c:	e069      	b.n	800f6e2 <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800f60e:	693b      	ldr	r3, [r7, #16]
 800f610:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f614:	2b00      	cmp	r3, #0
 800f616:	d10a      	bne.n	800f62e <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f618:	693b      	ldr	r3, [r7, #16]
 800f61a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f61e:	2320      	movs	r3, #32
 800f620:	2205      	movs	r2, #5
 800f622:	68f8      	ldr	r0, [r7, #12]
 800f624:	f000 f861 	bl	800f6ea <SCSI_SenseCode>
    return -1;
 800f628:	f04f 33ff 	mov.w	r3, #4294967295
 800f62c:	e059      	b.n	800f6e2 <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800f62e:	2300      	movs	r3, #0
 800f630:	75fb      	strb	r3, [r7, #23]
 800f632:	e007      	b.n	800f644 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 800f634:	7dfb      	ldrb	r3, [r7, #23]
 800f636:	693a      	ldr	r2, [r7, #16]
 800f638:	4413      	add	r3, r2
 800f63a:	2200      	movs	r2, #0
 800f63c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800f63e:	7dfb      	ldrb	r3, [r7, #23]
 800f640:	3301      	adds	r3, #1
 800f642:	75fb      	strb	r3, [r7, #23]
 800f644:	7dfb      	ldrb	r3, [r7, #23]
 800f646:	2b11      	cmp	r3, #17
 800f648:	d9f4      	bls.n	800f634 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 800f64a:	693b      	ldr	r3, [r7, #16]
 800f64c:	2270      	movs	r2, #112	; 0x70
 800f64e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800f650:	693b      	ldr	r3, [r7, #16]
 800f652:	220c      	movs	r2, #12
 800f654:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800f656:	693b      	ldr	r3, [r7, #16]
 800f658:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800f65c:	693b      	ldr	r3, [r7, #16]
 800f65e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800f662:	429a      	cmp	r2, r3
 800f664:	d02e      	beq.n	800f6c4 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800f666:	693b      	ldr	r3, [r7, #16]
 800f668:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800f66c:	461a      	mov	r2, r3
 800f66e:	693b      	ldr	r3, [r7, #16]
 800f670:	3248      	adds	r2, #72	; 0x48
 800f672:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800f676:	693b      	ldr	r3, [r7, #16]
 800f678:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800f67a:	693b      	ldr	r3, [r7, #16]
 800f67c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800f680:	693a      	ldr	r2, [r7, #16]
 800f682:	3348      	adds	r3, #72	; 0x48
 800f684:	00db      	lsls	r3, r3, #3
 800f686:	4413      	add	r3, r2
 800f688:	791a      	ldrb	r2, [r3, #4]
 800f68a:	693b      	ldr	r3, [r7, #16]
 800f68c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800f68e:	693b      	ldr	r3, [r7, #16]
 800f690:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800f694:	693a      	ldr	r2, [r7, #16]
 800f696:	3348      	adds	r3, #72	; 0x48
 800f698:	00db      	lsls	r3, r3, #3
 800f69a:	4413      	add	r3, r2
 800f69c:	795a      	ldrb	r2, [r3, #5]
 800f69e:	693b      	ldr	r3, [r7, #16]
 800f6a0:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800f6a2:	693b      	ldr	r3, [r7, #16]
 800f6a4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800f6a8:	3301      	adds	r3, #1
 800f6aa:	b2da      	uxtb	r2, r3
 800f6ac:	693b      	ldr	r3, [r7, #16]
 800f6ae:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800f6b2:	693b      	ldr	r3, [r7, #16]
 800f6b4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800f6b8:	2b04      	cmp	r3, #4
 800f6ba:	d103      	bne.n	800f6c4 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 800f6bc:	693b      	ldr	r3, [r7, #16]
 800f6be:	2200      	movs	r2, #0
 800f6c0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800f6c4:	693b      	ldr	r3, [r7, #16]
 800f6c6:	2212      	movs	r2, #18
 800f6c8:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	3304      	adds	r3, #4
 800f6ce:	781b      	ldrb	r3, [r3, #0]
 800f6d0:	2b12      	cmp	r3, #18
 800f6d2:	d805      	bhi.n	800f6e0 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	3304      	adds	r3, #4
 800f6d8:	781b      	ldrb	r3, [r3, #0]
 800f6da:	461a      	mov	r2, r3
 800f6dc:	693b      	ldr	r3, [r7, #16]
 800f6de:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800f6e0:	2300      	movs	r3, #0
}
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	3718      	adds	r7, #24
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	bd80      	pop	{r7, pc}

0800f6ea <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800f6ea:	b480      	push	{r7}
 800f6ec:	b085      	sub	sp, #20
 800f6ee:	af00      	add	r7, sp, #0
 800f6f0:	6078      	str	r0, [r7, #4]
 800f6f2:	4608      	mov	r0, r1
 800f6f4:	4611      	mov	r1, r2
 800f6f6:	461a      	mov	r2, r3
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	70fb      	strb	r3, [r7, #3]
 800f6fc:	460b      	mov	r3, r1
 800f6fe:	70bb      	strb	r3, [r7, #2]
 800f700:	4613      	mov	r3, r2
 800f702:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	32b0      	adds	r2, #176	; 0xb0
 800f70e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f712:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d02c      	beq.n	800f774 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800f720:	461a      	mov	r2, r3
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	3248      	adds	r2, #72	; 0x48
 800f726:	78b9      	ldrb	r1, [r7, #2]
 800f728:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800f732:	68fa      	ldr	r2, [r7, #12]
 800f734:	3348      	adds	r3, #72	; 0x48
 800f736:	00db      	lsls	r3, r3, #3
 800f738:	4413      	add	r3, r2
 800f73a:	787a      	ldrb	r2, [r7, #1]
 800f73c:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800f744:	68fa      	ldr	r2, [r7, #12]
 800f746:	3348      	adds	r3, #72	; 0x48
 800f748:	00db      	lsls	r3, r3, #3
 800f74a:	4413      	add	r3, r2
 800f74c:	2200      	movs	r2, #0
 800f74e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800f756:	3301      	adds	r3, #1
 800f758:	b2da      	uxtb	r2, r3
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800f766:	2b04      	cmp	r3, #4
 800f768:	d105      	bne.n	800f776 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	2200      	movs	r2, #0
 800f76e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 800f772:	e000      	b.n	800f776 <SCSI_SenseCode+0x8c>
    return;
 800f774:	bf00      	nop
  }
}
 800f776:	3714      	adds	r7, #20
 800f778:	46bd      	mov	sp, r7
 800f77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77e:	4770      	bx	lr

0800f780 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b086      	sub	sp, #24
 800f784:	af00      	add	r7, sp, #0
 800f786:	60f8      	str	r0, [r7, #12]
 800f788:	460b      	mov	r3, r1
 800f78a:	607a      	str	r2, [r7, #4]
 800f78c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	32b0      	adds	r2, #176	; 0xb0
 800f798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f79c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800f79e:	697b      	ldr	r3, [r7, #20]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d102      	bne.n	800f7aa <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800f7a4:	f04f 33ff 	mov.w	r3, #4294967295
 800f7a8:	e03b      	b.n	800f822 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800f7aa:	697b      	ldr	r3, [r7, #20]
 800f7ac:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800f7b0:	2b01      	cmp	r3, #1
 800f7b2:	d10f      	bne.n	800f7d4 <SCSI_StartStopUnit+0x54>
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	3304      	adds	r3, #4
 800f7b8:	781b      	ldrb	r3, [r3, #0]
 800f7ba:	f003 0303 	and.w	r3, r3, #3
 800f7be:	2b02      	cmp	r3, #2
 800f7c0:	d108      	bne.n	800f7d4 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800f7c2:	7af9      	ldrb	r1, [r7, #11]
 800f7c4:	2324      	movs	r3, #36	; 0x24
 800f7c6:	2205      	movs	r2, #5
 800f7c8:	68f8      	ldr	r0, [r7, #12]
 800f7ca:	f7ff ff8e 	bl	800f6ea <SCSI_SenseCode>

    return -1;
 800f7ce:	f04f 33ff 	mov.w	r3, #4294967295
 800f7d2:	e026      	b.n	800f822 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	3304      	adds	r3, #4
 800f7d8:	781b      	ldrb	r3, [r3, #0]
 800f7da:	f003 0303 	and.w	r3, r3, #3
 800f7de:	2b01      	cmp	r3, #1
 800f7e0:	d104      	bne.n	800f7ec <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800f7e2:	697b      	ldr	r3, [r7, #20]
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800f7ea:	e016      	b.n	800f81a <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	3304      	adds	r3, #4
 800f7f0:	781b      	ldrb	r3, [r3, #0]
 800f7f2:	f003 0303 	and.w	r3, r3, #3
 800f7f6:	2b02      	cmp	r3, #2
 800f7f8:	d104      	bne.n	800f804 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800f7fa:	697b      	ldr	r3, [r7, #20]
 800f7fc:	2202      	movs	r2, #2
 800f7fe:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800f802:	e00a      	b.n	800f81a <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	3304      	adds	r3, #4
 800f808:	781b      	ldrb	r3, [r3, #0]
 800f80a:	f003 0303 	and.w	r3, r3, #3
 800f80e:	2b03      	cmp	r3, #3
 800f810:	d103      	bne.n	800f81a <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800f812:	697b      	ldr	r3, [r7, #20]
 800f814:	2200      	movs	r2, #0
 800f816:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800f81a:	697b      	ldr	r3, [r7, #20]
 800f81c:	2200      	movs	r2, #0
 800f81e:	60da      	str	r2, [r3, #12]

  return 0;
 800f820:	2300      	movs	r3, #0
}
 800f822:	4618      	mov	r0, r3
 800f824:	3718      	adds	r7, #24
 800f826:	46bd      	mov	sp, r7
 800f828:	bd80      	pop	{r7, pc}

0800f82a <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f82a:	b480      	push	{r7}
 800f82c:	b087      	sub	sp, #28
 800f82e:	af00      	add	r7, sp, #0
 800f830:	60f8      	str	r0, [r7, #12]
 800f832:	460b      	mov	r3, r1
 800f834:	607a      	str	r2, [r7, #4]
 800f836:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	32b0      	adds	r2, #176	; 0xb0
 800f842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f846:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800f848:	697b      	ldr	r3, [r7, #20]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d102      	bne.n	800f854 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800f84e:	f04f 33ff 	mov.w	r3, #4294967295
 800f852:	e011      	b.n	800f878 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	3304      	adds	r3, #4
 800f858:	781b      	ldrb	r3, [r3, #0]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d104      	bne.n	800f868 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800f85e:	697b      	ldr	r3, [r7, #20]
 800f860:	2200      	movs	r2, #0
 800f862:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800f866:	e003      	b.n	800f870 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800f868:	697b      	ldr	r3, [r7, #20]
 800f86a:	2201      	movs	r2, #1
 800f86c:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800f870:	697b      	ldr	r3, [r7, #20]
 800f872:	2200      	movs	r2, #0
 800f874:	60da      	str	r2, [r3, #12]

  return 0;
 800f876:	2300      	movs	r3, #0
}
 800f878:	4618      	mov	r0, r3
 800f87a:	371c      	adds	r7, #28
 800f87c:	46bd      	mov	sp, r7
 800f87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f882:	4770      	bx	lr

0800f884 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b086      	sub	sp, #24
 800f888:	af00      	add	r7, sp, #0
 800f88a:	60f8      	str	r0, [r7, #12]
 800f88c:	460b      	mov	r3, r1
 800f88e:	607a      	str	r2, [r7, #4]
 800f890:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	32b0      	adds	r2, #176	; 0xb0
 800f89c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8a0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800f8a2:	697b      	ldr	r3, [r7, #20]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d102      	bne.n	800f8ae <SCSI_Read10+0x2a>
  {
    return -1;
 800f8a8:	f04f 33ff 	mov.w	r3, #4294967295
 800f8ac:	e090      	b.n	800f9d0 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800f8ae:	697b      	ldr	r3, [r7, #20]
 800f8b0:	7a1b      	ldrb	r3, [r3, #8]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	f040 8082 	bne.w	800f9bc <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800f8b8:	697b      	ldr	r3, [r7, #20]
 800f8ba:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800f8be:	b25b      	sxtb	r3, r3
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	db0a      	blt.n	800f8da <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f8c4:	697b      	ldr	r3, [r7, #20]
 800f8c6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f8ca:	2320      	movs	r3, #32
 800f8cc:	2205      	movs	r2, #5
 800f8ce:	68f8      	ldr	r0, [r7, #12]
 800f8d0:	f7ff ff0b 	bl	800f6ea <SCSI_SenseCode>
      return -1;
 800f8d4:	f04f 33ff 	mov.w	r3, #4294967295
 800f8d8:	e07a      	b.n	800f9d0 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800f8da:	697b      	ldr	r3, [r7, #20]
 800f8dc:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800f8e0:	2b02      	cmp	r3, #2
 800f8e2:	d108      	bne.n	800f8f6 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f8e4:	7af9      	ldrb	r1, [r7, #11]
 800f8e6:	233a      	movs	r3, #58	; 0x3a
 800f8e8:	2202      	movs	r2, #2
 800f8ea:	68f8      	ldr	r0, [r7, #12]
 800f8ec:	f7ff fefd 	bl	800f6ea <SCSI_SenseCode>

      return -1;
 800f8f0:	f04f 33ff 	mov.w	r3, #4294967295
 800f8f4:	e06c      	b.n	800f9d0 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f8fc:	68fa      	ldr	r2, [r7, #12]
 800f8fe:	33b0      	adds	r3, #176	; 0xb0
 800f900:	009b      	lsls	r3, r3, #2
 800f902:	4413      	add	r3, r2
 800f904:	685b      	ldr	r3, [r3, #4]
 800f906:	689b      	ldr	r3, [r3, #8]
 800f908:	7afa      	ldrb	r2, [r7, #11]
 800f90a:	4610      	mov	r0, r2
 800f90c:	4798      	blx	r3
 800f90e:	4603      	mov	r3, r0
 800f910:	2b00      	cmp	r3, #0
 800f912:	d008      	beq.n	800f926 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f914:	7af9      	ldrb	r1, [r7, #11]
 800f916:	233a      	movs	r3, #58	; 0x3a
 800f918:	2202      	movs	r2, #2
 800f91a:	68f8      	ldr	r0, [r7, #12]
 800f91c:	f7ff fee5 	bl	800f6ea <SCSI_SenseCode>
      return -1;
 800f920:	f04f 33ff 	mov.w	r3, #4294967295
 800f924:	e054      	b.n	800f9d0 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	3302      	adds	r3, #2
 800f92a:	781b      	ldrb	r3, [r3, #0]
 800f92c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	3303      	adds	r3, #3
 800f932:	781b      	ldrb	r3, [r3, #0]
 800f934:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f936:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	3304      	adds	r3, #4
 800f93c:	781b      	ldrb	r3, [r3, #0]
 800f93e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800f940:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800f942:	687a      	ldr	r2, [r7, #4]
 800f944:	3205      	adds	r2, #5
 800f946:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800f948:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f94a:	697b      	ldr	r3, [r7, #20]
 800f94c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	3307      	adds	r3, #7
 800f954:	781b      	ldrb	r3, [r3, #0]
 800f956:	021b      	lsls	r3, r3, #8
 800f958:	687a      	ldr	r2, [r7, #4]
 800f95a:	3208      	adds	r2, #8
 800f95c:	7812      	ldrb	r2, [r2, #0]
 800f95e:	431a      	orrs	r2, r3
 800f960:	697b      	ldr	r3, [r7, #20]
 800f962:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800f966:	697b      	ldr	r3, [r7, #20]
 800f968:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f96c:	697b      	ldr	r3, [r7, #20]
 800f96e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f972:	7af9      	ldrb	r1, [r7, #11]
 800f974:	68f8      	ldr	r0, [r7, #12]
 800f976:	f000 fadc 	bl	800ff32 <SCSI_CheckAddressRange>
 800f97a:	4603      	mov	r3, r0
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	da02      	bge.n	800f986 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800f980:	f04f 33ff 	mov.w	r3, #4294967295
 800f984:	e024      	b.n	800f9d0 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800f986:	697b      	ldr	r3, [r7, #20]
 800f988:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800f98c:	697b      	ldr	r3, [r7, #20]
 800f98e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f992:	6979      	ldr	r1, [r7, #20]
 800f994:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800f998:	fb01 f303 	mul.w	r3, r1, r3
 800f99c:	429a      	cmp	r2, r3
 800f99e:	d00a      	beq.n	800f9b6 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f9a0:	697b      	ldr	r3, [r7, #20]
 800f9a2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f9a6:	2320      	movs	r3, #32
 800f9a8:	2205      	movs	r2, #5
 800f9aa:	68f8      	ldr	r0, [r7, #12]
 800f9ac:	f7ff fe9d 	bl	800f6ea <SCSI_SenseCode>
      return -1;
 800f9b0:	f04f 33ff 	mov.w	r3, #4294967295
 800f9b4:	e00c      	b.n	800f9d0 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800f9b6:	697b      	ldr	r3, [r7, #20]
 800f9b8:	2202      	movs	r2, #2
 800f9ba:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800f9bc:	697b      	ldr	r3, [r7, #20]
 800f9be:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f9c2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800f9c4:	7afb      	ldrb	r3, [r7, #11]
 800f9c6:	4619      	mov	r1, r3
 800f9c8:	68f8      	ldr	r0, [r7, #12]
 800f9ca:	f000 fadf 	bl	800ff8c <SCSI_ProcessRead>
 800f9ce:	4603      	mov	r3, r0
}
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	3718      	adds	r7, #24
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd80      	pop	{r7, pc}

0800f9d8 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b086      	sub	sp, #24
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	60f8      	str	r0, [r7, #12]
 800f9e0:	460b      	mov	r3, r1
 800f9e2:	607a      	str	r2, [r7, #4]
 800f9e4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	32b0      	adds	r2, #176	; 0xb0
 800f9f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9f4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d102      	bne.n	800fa02 <SCSI_Read12+0x2a>
  {
    return -1;
 800f9fc:	f04f 33ff 	mov.w	r3, #4294967295
 800fa00:	e09a      	b.n	800fb38 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800fa02:	697b      	ldr	r3, [r7, #20]
 800fa04:	7a1b      	ldrb	r3, [r3, #8]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	f040 808c 	bne.w	800fb24 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800fa0c:	697b      	ldr	r3, [r7, #20]
 800fa0e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800fa12:	b25b      	sxtb	r3, r3
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	db0a      	blt.n	800fa2e <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800fa18:	697b      	ldr	r3, [r7, #20]
 800fa1a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800fa1e:	2320      	movs	r3, #32
 800fa20:	2205      	movs	r2, #5
 800fa22:	68f8      	ldr	r0, [r7, #12]
 800fa24:	f7ff fe61 	bl	800f6ea <SCSI_SenseCode>
      return -1;
 800fa28:	f04f 33ff 	mov.w	r3, #4294967295
 800fa2c:	e084      	b.n	800fb38 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800fa2e:	697b      	ldr	r3, [r7, #20]
 800fa30:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800fa34:	2b02      	cmp	r3, #2
 800fa36:	d108      	bne.n	800fa4a <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800fa38:	7af9      	ldrb	r1, [r7, #11]
 800fa3a:	233a      	movs	r3, #58	; 0x3a
 800fa3c:	2202      	movs	r2, #2
 800fa3e:	68f8      	ldr	r0, [r7, #12]
 800fa40:	f7ff fe53 	bl	800f6ea <SCSI_SenseCode>
      return -1;
 800fa44:	f04f 33ff 	mov.w	r3, #4294967295
 800fa48:	e076      	b.n	800fb38 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800fa50:	68fa      	ldr	r2, [r7, #12]
 800fa52:	33b0      	adds	r3, #176	; 0xb0
 800fa54:	009b      	lsls	r3, r3, #2
 800fa56:	4413      	add	r3, r2
 800fa58:	685b      	ldr	r3, [r3, #4]
 800fa5a:	689b      	ldr	r3, [r3, #8]
 800fa5c:	7afa      	ldrb	r2, [r7, #11]
 800fa5e:	4610      	mov	r0, r2
 800fa60:	4798      	blx	r3
 800fa62:	4603      	mov	r3, r0
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d008      	beq.n	800fa7a <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800fa68:	7af9      	ldrb	r1, [r7, #11]
 800fa6a:	233a      	movs	r3, #58	; 0x3a
 800fa6c:	2202      	movs	r2, #2
 800fa6e:	68f8      	ldr	r0, [r7, #12]
 800fa70:	f7ff fe3b 	bl	800f6ea <SCSI_SenseCode>
      return -1;
 800fa74:	f04f 33ff 	mov.w	r3, #4294967295
 800fa78:	e05e      	b.n	800fb38 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	3302      	adds	r3, #2
 800fa7e:	781b      	ldrb	r3, [r3, #0]
 800fa80:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	3303      	adds	r3, #3
 800fa86:	781b      	ldrb	r3, [r3, #0]
 800fa88:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fa8a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	3304      	adds	r3, #4
 800fa90:	781b      	ldrb	r3, [r3, #0]
 800fa92:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800fa94:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800fa96:	687a      	ldr	r2, [r7, #4]
 800fa98:	3205      	adds	r2, #5
 800fa9a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800fa9c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fa9e:	697b      	ldr	r3, [r7, #20]
 800faa0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	3306      	adds	r3, #6
 800faa8:	781b      	ldrb	r3, [r3, #0]
 800faaa:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	3307      	adds	r3, #7
 800fab0:	781b      	ldrb	r3, [r3, #0]
 800fab2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800fab4:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	3308      	adds	r3, #8
 800faba:	781b      	ldrb	r3, [r3, #0]
 800fabc:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800fabe:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800fac0:	687a      	ldr	r2, [r7, #4]
 800fac2:	3209      	adds	r2, #9
 800fac4:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800fac6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800fac8:	697b      	ldr	r3, [r7, #20]
 800faca:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800face:	697b      	ldr	r3, [r7, #20]
 800fad0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800fada:	7af9      	ldrb	r1, [r7, #11]
 800fadc:	68f8      	ldr	r0, [r7, #12]
 800fade:	f000 fa28 	bl	800ff32 <SCSI_CheckAddressRange>
 800fae2:	4603      	mov	r3, r0
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	da02      	bge.n	800faee <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800fae8:	f04f 33ff 	mov.w	r3, #4294967295
 800faec:	e024      	b.n	800fb38 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800faee:	697b      	ldr	r3, [r7, #20]
 800faf0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800faf4:	697b      	ldr	r3, [r7, #20]
 800faf6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800fafa:	6979      	ldr	r1, [r7, #20]
 800fafc:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800fb00:	fb01 f303 	mul.w	r3, r1, r3
 800fb04:	429a      	cmp	r2, r3
 800fb06:	d00a      	beq.n	800fb1e <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800fb08:	697b      	ldr	r3, [r7, #20]
 800fb0a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800fb0e:	2320      	movs	r3, #32
 800fb10:	2205      	movs	r2, #5
 800fb12:	68f8      	ldr	r0, [r7, #12]
 800fb14:	f7ff fde9 	bl	800f6ea <SCSI_SenseCode>
      return -1;
 800fb18:	f04f 33ff 	mov.w	r3, #4294967295
 800fb1c:	e00c      	b.n	800fb38 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800fb1e:	697b      	ldr	r3, [r7, #20]
 800fb20:	2202      	movs	r2, #2
 800fb22:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800fb24:	697b      	ldr	r3, [r7, #20]
 800fb26:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fb2a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800fb2c:	7afb      	ldrb	r3, [r7, #11]
 800fb2e:	4619      	mov	r1, r3
 800fb30:	68f8      	ldr	r0, [r7, #12]
 800fb32:	f000 fa2b 	bl	800ff8c <SCSI_ProcessRead>
 800fb36:	4603      	mov	r3, r0
}
 800fb38:	4618      	mov	r0, r3
 800fb3a:	3718      	adds	r7, #24
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}

0800fb40 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b086      	sub	sp, #24
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	60f8      	str	r0, [r7, #12]
 800fb48:	460b      	mov	r3, r1
 800fb4a:	607a      	str	r2, [r7, #4]
 800fb4c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	32b0      	adds	r2, #176	; 0xb0
 800fb58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb5c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800fb5e:	697b      	ldr	r3, [r7, #20]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d102      	bne.n	800fb6a <SCSI_Write10+0x2a>
  {
    return -1;
 800fb64:	f04f 33ff 	mov.w	r3, #4294967295
 800fb68:	e0ba      	b.n	800fce0 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800fb6a:	697b      	ldr	r3, [r7, #20]
 800fb6c:	7a1b      	ldrb	r3, [r3, #8]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	f040 80b0 	bne.w	800fcd4 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800fb74:	697b      	ldr	r3, [r7, #20]
 800fb76:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d10a      	bne.n	800fb94 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800fb7e:	697b      	ldr	r3, [r7, #20]
 800fb80:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800fb84:	2320      	movs	r3, #32
 800fb86:	2205      	movs	r2, #5
 800fb88:	68f8      	ldr	r0, [r7, #12]
 800fb8a:	f7ff fdae 	bl	800f6ea <SCSI_SenseCode>
      return -1;
 800fb8e:	f04f 33ff 	mov.w	r3, #4294967295
 800fb92:	e0a5      	b.n	800fce0 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800fb94:	697b      	ldr	r3, [r7, #20]
 800fb96:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800fb9a:	b25b      	sxtb	r3, r3
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	da0a      	bge.n	800fbb6 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800fba0:	697b      	ldr	r3, [r7, #20]
 800fba2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800fba6:	2320      	movs	r3, #32
 800fba8:	2205      	movs	r2, #5
 800fbaa:	68f8      	ldr	r0, [r7, #12]
 800fbac:	f7ff fd9d 	bl	800f6ea <SCSI_SenseCode>
      return -1;
 800fbb0:	f04f 33ff 	mov.w	r3, #4294967295
 800fbb4:	e094      	b.n	800fce0 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800fbbc:	68fa      	ldr	r2, [r7, #12]
 800fbbe:	33b0      	adds	r3, #176	; 0xb0
 800fbc0:	009b      	lsls	r3, r3, #2
 800fbc2:	4413      	add	r3, r2
 800fbc4:	685b      	ldr	r3, [r3, #4]
 800fbc6:	689b      	ldr	r3, [r3, #8]
 800fbc8:	7afa      	ldrb	r2, [r7, #11]
 800fbca:	4610      	mov	r0, r2
 800fbcc:	4798      	blx	r3
 800fbce:	4603      	mov	r3, r0
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d008      	beq.n	800fbe6 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800fbd4:	7af9      	ldrb	r1, [r7, #11]
 800fbd6:	233a      	movs	r3, #58	; 0x3a
 800fbd8:	2202      	movs	r2, #2
 800fbda:	68f8      	ldr	r0, [r7, #12]
 800fbdc:	f7ff fd85 	bl	800f6ea <SCSI_SenseCode>
      return -1;
 800fbe0:	f04f 33ff 	mov.w	r3, #4294967295
 800fbe4:	e07c      	b.n	800fce0 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800fbec:	68fa      	ldr	r2, [r7, #12]
 800fbee:	33b0      	adds	r3, #176	; 0xb0
 800fbf0:	009b      	lsls	r3, r3, #2
 800fbf2:	4413      	add	r3, r2
 800fbf4:	685b      	ldr	r3, [r3, #4]
 800fbf6:	68db      	ldr	r3, [r3, #12]
 800fbf8:	7afa      	ldrb	r2, [r7, #11]
 800fbfa:	4610      	mov	r0, r2
 800fbfc:	4798      	blx	r3
 800fbfe:	4603      	mov	r3, r0
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d008      	beq.n	800fc16 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800fc04:	7af9      	ldrb	r1, [r7, #11]
 800fc06:	2327      	movs	r3, #39	; 0x27
 800fc08:	2202      	movs	r2, #2
 800fc0a:	68f8      	ldr	r0, [r7, #12]
 800fc0c:	f7ff fd6d 	bl	800f6ea <SCSI_SenseCode>
      return -1;
 800fc10:	f04f 33ff 	mov.w	r3, #4294967295
 800fc14:	e064      	b.n	800fce0 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	3302      	adds	r3, #2
 800fc1a:	781b      	ldrb	r3, [r3, #0]
 800fc1c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	3303      	adds	r3, #3
 800fc22:	781b      	ldrb	r3, [r3, #0]
 800fc24:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fc26:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	3304      	adds	r3, #4
 800fc2c:	781b      	ldrb	r3, [r3, #0]
 800fc2e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800fc30:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800fc32:	687a      	ldr	r2, [r7, #4]
 800fc34:	3205      	adds	r2, #5
 800fc36:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800fc38:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fc3a:	697b      	ldr	r3, [r7, #20]
 800fc3c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	3307      	adds	r3, #7
 800fc44:	781b      	ldrb	r3, [r3, #0]
 800fc46:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800fc48:	687a      	ldr	r2, [r7, #4]
 800fc4a:	3208      	adds	r2, #8
 800fc4c:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800fc4e:	431a      	orrs	r2, r3
 800fc50:	697b      	ldr	r3, [r7, #20]
 800fc52:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800fc56:	697b      	ldr	r3, [r7, #20]
 800fc58:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800fc5c:	697b      	ldr	r3, [r7, #20]
 800fc5e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800fc62:	7af9      	ldrb	r1, [r7, #11]
 800fc64:	68f8      	ldr	r0, [r7, #12]
 800fc66:	f000 f964 	bl	800ff32 <SCSI_CheckAddressRange>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	da02      	bge.n	800fc76 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800fc70:	f04f 33ff 	mov.w	r3, #4294967295
 800fc74:	e034      	b.n	800fce0 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800fc76:	697b      	ldr	r3, [r7, #20]
 800fc78:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800fc7c:	697a      	ldr	r2, [r7, #20]
 800fc7e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800fc82:	fb02 f303 	mul.w	r3, r2, r3
 800fc86:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800fc88:	697b      	ldr	r3, [r7, #20]
 800fc8a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800fc8e:	693a      	ldr	r2, [r7, #16]
 800fc90:	429a      	cmp	r2, r3
 800fc92:	d00a      	beq.n	800fcaa <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800fc94:	697b      	ldr	r3, [r7, #20]
 800fc96:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800fc9a:	2320      	movs	r3, #32
 800fc9c:	2205      	movs	r2, #5
 800fc9e:	68f8      	ldr	r0, [r7, #12]
 800fca0:	f7ff fd23 	bl	800f6ea <SCSI_SenseCode>
      return -1;
 800fca4:	f04f 33ff 	mov.w	r3, #4294967295
 800fca8:	e01a      	b.n	800fce0 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800fcaa:	693b      	ldr	r3, [r7, #16]
 800fcac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fcb0:	bf28      	it	cs
 800fcb2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800fcb6:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800fcb8:	697b      	ldr	r3, [r7, #20]
 800fcba:	2201      	movs	r2, #1
 800fcbc:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800fcbe:	4b0a      	ldr	r3, [pc, #40]	; (800fce8 <SCSI_Write10+0x1a8>)
 800fcc0:	7819      	ldrb	r1, [r3, #0]
 800fcc2:	697b      	ldr	r3, [r7, #20]
 800fcc4:	f103 0210 	add.w	r2, r3, #16
 800fcc8:	693b      	ldr	r3, [r7, #16]
 800fcca:	68f8      	ldr	r0, [r7, #12]
 800fccc:	f007 fd35 	bl	801773a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	e005      	b.n	800fce0 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 800fcd4:	7afb      	ldrb	r3, [r7, #11]
 800fcd6:	4619      	mov	r1, r3
 800fcd8:	68f8      	ldr	r0, [r7, #12]
 800fcda:	f000 f9dd 	bl	8010098 <SCSI_ProcessWrite>
 800fcde:	4603      	mov	r3, r0
}
 800fce0:	4618      	mov	r0, r3
 800fce2:	3718      	adds	r7, #24
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bd80      	pop	{r7, pc}
 800fce8:	200000a7 	.word	0x200000a7

0800fcec <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b086      	sub	sp, #24
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	60f8      	str	r0, [r7, #12]
 800fcf4:	460b      	mov	r3, r1
 800fcf6:	607a      	str	r2, [r7, #4]
 800fcf8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	32b0      	adds	r2, #176	; 0xb0
 800fd04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd08:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800fd0a:	697b      	ldr	r3, [r7, #20]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d102      	bne.n	800fd16 <SCSI_Write12+0x2a>
  {
    return -1;
 800fd10:	f04f 33ff 	mov.w	r3, #4294967295
 800fd14:	e0ca      	b.n	800feac <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800fd16:	697b      	ldr	r3, [r7, #20]
 800fd18:	7a1b      	ldrb	r3, [r3, #8]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	f040 80c0 	bne.w	800fea0 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800fd20:	697b      	ldr	r3, [r7, #20]
 800fd22:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d10a      	bne.n	800fd40 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800fd2a:	697b      	ldr	r3, [r7, #20]
 800fd2c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800fd30:	2320      	movs	r3, #32
 800fd32:	2205      	movs	r2, #5
 800fd34:	68f8      	ldr	r0, [r7, #12]
 800fd36:	f7ff fcd8 	bl	800f6ea <SCSI_SenseCode>
      return -1;
 800fd3a:	f04f 33ff 	mov.w	r3, #4294967295
 800fd3e:	e0b5      	b.n	800feac <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800fd40:	697b      	ldr	r3, [r7, #20]
 800fd42:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800fd46:	b25b      	sxtb	r3, r3
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	da0a      	bge.n	800fd62 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800fd4c:	697b      	ldr	r3, [r7, #20]
 800fd4e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800fd52:	2320      	movs	r3, #32
 800fd54:	2205      	movs	r2, #5
 800fd56:	68f8      	ldr	r0, [r7, #12]
 800fd58:	f7ff fcc7 	bl	800f6ea <SCSI_SenseCode>
      return -1;
 800fd5c:	f04f 33ff 	mov.w	r3, #4294967295
 800fd60:	e0a4      	b.n	800feac <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800fd68:	68fa      	ldr	r2, [r7, #12]
 800fd6a:	33b0      	adds	r3, #176	; 0xb0
 800fd6c:	009b      	lsls	r3, r3, #2
 800fd6e:	4413      	add	r3, r2
 800fd70:	685b      	ldr	r3, [r3, #4]
 800fd72:	689b      	ldr	r3, [r3, #8]
 800fd74:	7afa      	ldrb	r2, [r7, #11]
 800fd76:	4610      	mov	r0, r2
 800fd78:	4798      	blx	r3
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d00b      	beq.n	800fd98 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800fd80:	7af9      	ldrb	r1, [r7, #11]
 800fd82:	233a      	movs	r3, #58	; 0x3a
 800fd84:	2202      	movs	r2, #2
 800fd86:	68f8      	ldr	r0, [r7, #12]
 800fd88:	f7ff fcaf 	bl	800f6ea <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800fd8c:	697b      	ldr	r3, [r7, #20]
 800fd8e:	2205      	movs	r2, #5
 800fd90:	721a      	strb	r2, [r3, #8]
      return -1;
 800fd92:	f04f 33ff 	mov.w	r3, #4294967295
 800fd96:	e089      	b.n	800feac <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800fd9e:	68fa      	ldr	r2, [r7, #12]
 800fda0:	33b0      	adds	r3, #176	; 0xb0
 800fda2:	009b      	lsls	r3, r3, #2
 800fda4:	4413      	add	r3, r2
 800fda6:	685b      	ldr	r3, [r3, #4]
 800fda8:	68db      	ldr	r3, [r3, #12]
 800fdaa:	7afa      	ldrb	r2, [r7, #11]
 800fdac:	4610      	mov	r0, r2
 800fdae:	4798      	blx	r3
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d00b      	beq.n	800fdce <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800fdb6:	7af9      	ldrb	r1, [r7, #11]
 800fdb8:	2327      	movs	r3, #39	; 0x27
 800fdba:	2202      	movs	r2, #2
 800fdbc:	68f8      	ldr	r0, [r7, #12]
 800fdbe:	f7ff fc94 	bl	800f6ea <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800fdc2:	697b      	ldr	r3, [r7, #20]
 800fdc4:	2205      	movs	r2, #5
 800fdc6:	721a      	strb	r2, [r3, #8]
      return -1;
 800fdc8:	f04f 33ff 	mov.w	r3, #4294967295
 800fdcc:	e06e      	b.n	800feac <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	3302      	adds	r3, #2
 800fdd2:	781b      	ldrb	r3, [r3, #0]
 800fdd4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	3303      	adds	r3, #3
 800fdda:	781b      	ldrb	r3, [r3, #0]
 800fddc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fdde:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	3304      	adds	r3, #4
 800fde4:	781b      	ldrb	r3, [r3, #0]
 800fde6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800fde8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800fdea:	687a      	ldr	r2, [r7, #4]
 800fdec:	3205      	adds	r2, #5
 800fdee:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800fdf0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fdf2:	697b      	ldr	r3, [r7, #20]
 800fdf4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	3306      	adds	r3, #6
 800fdfc:	781b      	ldrb	r3, [r3, #0]
 800fdfe:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	3307      	adds	r3, #7
 800fe04:	781b      	ldrb	r3, [r3, #0]
 800fe06:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800fe08:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	3308      	adds	r3, #8
 800fe0e:	781b      	ldrb	r3, [r3, #0]
 800fe10:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800fe12:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800fe14:	687a      	ldr	r2, [r7, #4]
 800fe16:	3209      	adds	r2, #9
 800fe18:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800fe1a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800fe1c:	697b      	ldr	r3, [r7, #20]
 800fe1e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800fe22:	697b      	ldr	r3, [r7, #20]
 800fe24:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800fe28:	697b      	ldr	r3, [r7, #20]
 800fe2a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800fe2e:	7af9      	ldrb	r1, [r7, #11]
 800fe30:	68f8      	ldr	r0, [r7, #12]
 800fe32:	f000 f87e 	bl	800ff32 <SCSI_CheckAddressRange>
 800fe36:	4603      	mov	r3, r0
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	da02      	bge.n	800fe42 <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800fe3c:	f04f 33ff 	mov.w	r3, #4294967295
 800fe40:	e034      	b.n	800feac <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800fe42:	697b      	ldr	r3, [r7, #20]
 800fe44:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800fe48:	697a      	ldr	r2, [r7, #20]
 800fe4a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800fe4e:	fb02 f303 	mul.w	r3, r2, r3
 800fe52:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800fe54:	697b      	ldr	r3, [r7, #20]
 800fe56:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800fe5a:	693a      	ldr	r2, [r7, #16]
 800fe5c:	429a      	cmp	r2, r3
 800fe5e:	d00a      	beq.n	800fe76 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800fe60:	697b      	ldr	r3, [r7, #20]
 800fe62:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800fe66:	2320      	movs	r3, #32
 800fe68:	2205      	movs	r2, #5
 800fe6a:	68f8      	ldr	r0, [r7, #12]
 800fe6c:	f7ff fc3d 	bl	800f6ea <SCSI_SenseCode>
      return -1;
 800fe70:	f04f 33ff 	mov.w	r3, #4294967295
 800fe74:	e01a      	b.n	800feac <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800fe76:	693b      	ldr	r3, [r7, #16]
 800fe78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fe7c:	bf28      	it	cs
 800fe7e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800fe82:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800fe84:	697b      	ldr	r3, [r7, #20]
 800fe86:	2201      	movs	r2, #1
 800fe88:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800fe8a:	4b0a      	ldr	r3, [pc, #40]	; (800feb4 <SCSI_Write12+0x1c8>)
 800fe8c:	7819      	ldrb	r1, [r3, #0]
 800fe8e:	697b      	ldr	r3, [r7, #20]
 800fe90:	f103 0210 	add.w	r2, r3, #16
 800fe94:	693b      	ldr	r3, [r7, #16]
 800fe96:	68f8      	ldr	r0, [r7, #12]
 800fe98:	f007 fc4f 	bl	801773a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	e005      	b.n	800feac <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 800fea0:	7afb      	ldrb	r3, [r7, #11]
 800fea2:	4619      	mov	r1, r3
 800fea4:	68f8      	ldr	r0, [r7, #12]
 800fea6:	f000 f8f7 	bl	8010098 <SCSI_ProcessWrite>
 800feaa:	4603      	mov	r3, r0
}
 800feac:	4618      	mov	r0, r3
 800feae:	3718      	adds	r7, #24
 800feb0:	46bd      	mov	sp, r7
 800feb2:	bd80      	pop	{r7, pc}
 800feb4:	200000a7 	.word	0x200000a7

0800feb8 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b086      	sub	sp, #24
 800febc:	af00      	add	r7, sp, #0
 800febe:	60f8      	str	r0, [r7, #12]
 800fec0:	460b      	mov	r3, r1
 800fec2:	607a      	str	r2, [r7, #4]
 800fec4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	32b0      	adds	r2, #176	; 0xb0
 800fed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fed4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800fed6:	697b      	ldr	r3, [r7, #20]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d102      	bne.n	800fee2 <SCSI_Verify10+0x2a>
  {
    return -1;
 800fedc:	f04f 33ff 	mov.w	r3, #4294967295
 800fee0:	e023      	b.n	800ff2a <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	3301      	adds	r3, #1
 800fee6:	781b      	ldrb	r3, [r3, #0]
 800fee8:	f003 0302 	and.w	r3, r3, #2
 800feec:	2b00      	cmp	r3, #0
 800feee:	d008      	beq.n	800ff02 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800fef0:	7af9      	ldrb	r1, [r7, #11]
 800fef2:	2324      	movs	r3, #36	; 0x24
 800fef4:	2205      	movs	r2, #5
 800fef6:	68f8      	ldr	r0, [r7, #12]
 800fef8:	f7ff fbf7 	bl	800f6ea <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800fefc:	f04f 33ff 	mov.w	r3, #4294967295
 800ff00:	e013      	b.n	800ff2a <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800ff02:	697b      	ldr	r3, [r7, #20]
 800ff04:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800ff08:	697b      	ldr	r3, [r7, #20]
 800ff0a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ff0e:	7af9      	ldrb	r1, [r7, #11]
 800ff10:	68f8      	ldr	r0, [r7, #12]
 800ff12:	f000 f80e 	bl	800ff32 <SCSI_CheckAddressRange>
 800ff16:	4603      	mov	r3, r0
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	da02      	bge.n	800ff22 <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 800ff1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ff20:	e003      	b.n	800ff2a <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 800ff22:	697b      	ldr	r3, [r7, #20]
 800ff24:	2200      	movs	r2, #0
 800ff26:	60da      	str	r2, [r3, #12]

  return 0;
 800ff28:	2300      	movs	r3, #0
}
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	3718      	adds	r7, #24
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	bd80      	pop	{r7, pc}

0800ff32 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800ff32:	b580      	push	{r7, lr}
 800ff34:	b086      	sub	sp, #24
 800ff36:	af00      	add	r7, sp, #0
 800ff38:	60f8      	str	r0, [r7, #12]
 800ff3a:	607a      	str	r2, [r7, #4]
 800ff3c:	603b      	str	r3, [r7, #0]
 800ff3e:	460b      	mov	r3, r1
 800ff40:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	32b0      	adds	r2, #176	; 0xb0
 800ff4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff50:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ff52:	697b      	ldr	r3, [r7, #20]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d102      	bne.n	800ff5e <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800ff58:	f04f 33ff 	mov.w	r3, #4294967295
 800ff5c:	e011      	b.n	800ff82 <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800ff5e:	687a      	ldr	r2, [r7, #4]
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	441a      	add	r2, r3
 800ff64:	697b      	ldr	r3, [r7, #20]
 800ff66:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ff6a:	429a      	cmp	r2, r3
 800ff6c:	d908      	bls.n	800ff80 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800ff6e:	7af9      	ldrb	r1, [r7, #11]
 800ff70:	2321      	movs	r3, #33	; 0x21
 800ff72:	2205      	movs	r2, #5
 800ff74:	68f8      	ldr	r0, [r7, #12]
 800ff76:	f7ff fbb8 	bl	800f6ea <SCSI_SenseCode>
    return -1;
 800ff7a:	f04f 33ff 	mov.w	r3, #4294967295
 800ff7e:	e000      	b.n	800ff82 <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 800ff80:	2300      	movs	r3, #0
}
 800ff82:	4618      	mov	r0, r3
 800ff84:	3718      	adds	r7, #24
 800ff86:	46bd      	mov	sp, r7
 800ff88:	bd80      	pop	{r7, pc}
	...

0800ff8c <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800ff8c:	b590      	push	{r4, r7, lr}
 800ff8e:	b085      	sub	sp, #20
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
 800ff94:	460b      	mov	r3, r1
 800ff96:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	32b0      	adds	r2, #176	; 0xb0
 800ffa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffa6:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d102      	bne.n	800ffb4 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800ffae:	f04f 33ff 	mov.w	r3, #4294967295
 800ffb2:	e06a      	b.n	801008a <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ffba:	68fa      	ldr	r2, [r7, #12]
 800ffbc:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800ffc0:	fb02 f303 	mul.w	r3, r2, r3
 800ffc4:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800ffc6:	68bb      	ldr	r3, [r7, #8]
 800ffc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ffcc:	bf28      	it	cs
 800ffce:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800ffd2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ffda:	687a      	ldr	r2, [r7, #4]
 800ffdc:	33b0      	adds	r3, #176	; 0xb0
 800ffde:	009b      	lsls	r3, r3, #2
 800ffe0:	4413      	add	r3, r2
 800ffe2:	685b      	ldr	r3, [r3, #4]
 800ffe4:	691c      	ldr	r4, [r3, #16]
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	f103 0110 	add.w	r1, r3, #16
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800fff8:	4618      	mov	r0, r3
 800fffa:	68bb      	ldr	r3, [r7, #8]
 800fffc:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8010000:	b29b      	uxth	r3, r3
 8010002:	78f8      	ldrb	r0, [r7, #3]
 8010004:	47a0      	blx	r4
 8010006:	4603      	mov	r3, r0
 8010008:	2b00      	cmp	r3, #0
 801000a:	da08      	bge.n	801001e <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 801000c:	78f9      	ldrb	r1, [r7, #3]
 801000e:	2311      	movs	r3, #17
 8010010:	2204      	movs	r2, #4
 8010012:	6878      	ldr	r0, [r7, #4]
 8010014:	f7ff fb69 	bl	800f6ea <SCSI_SenseCode>
    return -1;
 8010018:	f04f 33ff 	mov.w	r3, #4294967295
 801001c:	e035      	b.n	801008a <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 801001e:	4b1d      	ldr	r3, [pc, #116]	; (8010094 <SCSI_ProcessRead+0x108>)
 8010020:	7819      	ldrb	r1, [r3, #0]
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	f103 0210 	add.w	r2, r3, #16
 8010028:	68bb      	ldr	r3, [r7, #8]
 801002a:	6878      	ldr	r0, [r7, #4]
 801002c:	f007 fb64 	bl	80176f8 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801003c:	4619      	mov	r1, r3
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	fbb3 f3f1 	udiv	r3, r3, r1
 8010044:	441a      	add	r2, r3
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8010058:	4619      	mov	r1, r3
 801005a:	68bb      	ldr	r3, [r7, #8]
 801005c:	fbb3 f3f1 	udiv	r3, r3, r1
 8010060:	1ad2      	subs	r2, r2, r3
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801006e:	68bb      	ldr	r3, [r7, #8]
 8010070:	1ad2      	subs	r2, r2, r3
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801007e:	2b00      	cmp	r3, #0
 8010080:	d102      	bne.n	8010088 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	2203      	movs	r2, #3
 8010086:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8010088:	2300      	movs	r3, #0
}
 801008a:	4618      	mov	r0, r3
 801008c:	3714      	adds	r7, #20
 801008e:	46bd      	mov	sp, r7
 8010090:	bd90      	pop	{r4, r7, pc}
 8010092:	bf00      	nop
 8010094:	200000a6 	.word	0x200000a6

08010098 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8010098:	b590      	push	{r4, r7, lr}
 801009a:	b085      	sub	sp, #20
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
 80100a0:	460b      	mov	r3, r1
 80100a2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	32b0      	adds	r2, #176	; 0xb0
 80100ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100b2:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d102      	bne.n	80100c0 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 80100ba:	f04f 33ff 	mov.w	r3, #4294967295
 80100be:	e07a      	b.n	80101b6 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80100c6:	68fa      	ldr	r2, [r7, #12]
 80100c8:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80100cc:	fb02 f303 	mul.w	r3, r2, r3
 80100d0:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80100d2:	68bb      	ldr	r3, [r7, #8]
 80100d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80100d8:	bf28      	it	cs
 80100da:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80100de:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80100e6:	687a      	ldr	r2, [r7, #4]
 80100e8:	33b0      	adds	r3, #176	; 0xb0
 80100ea:	009b      	lsls	r3, r3, #2
 80100ec:	4413      	add	r3, r2
 80100ee:	685b      	ldr	r3, [r3, #4]
 80100f0:	695c      	ldr	r4, [r3, #20]
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	f103 0110 	add.w	r1, r3, #16
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8010104:	4618      	mov	r0, r3
 8010106:	68bb      	ldr	r3, [r7, #8]
 8010108:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 801010c:	b29b      	uxth	r3, r3
 801010e:	78f8      	ldrb	r0, [r7, #3]
 8010110:	47a0      	blx	r4
 8010112:	4603      	mov	r3, r0
 8010114:	2b00      	cmp	r3, #0
 8010116:	da08      	bge.n	801012a <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8010118:	78f9      	ldrb	r1, [r7, #3]
 801011a:	2303      	movs	r3, #3
 801011c:	2204      	movs	r2, #4
 801011e:	6878      	ldr	r0, [r7, #4]
 8010120:	f7ff fae3 	bl	800f6ea <SCSI_SenseCode>
    return -1;
 8010124:	f04f 33ff 	mov.w	r3, #4294967295
 8010128:	e045      	b.n	80101b6 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8010136:	4619      	mov	r1, r3
 8010138:	68bb      	ldr	r3, [r7, #8]
 801013a:	fbb3 f3f1 	udiv	r3, r3, r1
 801013e:	441a      	add	r2, r3
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8010152:	4619      	mov	r1, r3
 8010154:	68bb      	ldr	r3, [r7, #8]
 8010156:	fbb3 f3f1 	udiv	r3, r3, r1
 801015a:	1ad2      	subs	r2, r2, r3
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8010168:	68bb      	ldr	r3, [r7, #8]
 801016a:	1ad2      	subs	r2, r2, r3
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8010178:	2b00      	cmp	r3, #0
 801017a:	d104      	bne.n	8010186 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801017c:	2100      	movs	r1, #0
 801017e:	6878      	ldr	r0, [r7, #4]
 8010180:	f7fe fd14 	bl	800ebac <MSC_BOT_SendCSW>
 8010184:	e016      	b.n	80101b4 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801018c:	68fa      	ldr	r2, [r7, #12]
 801018e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8010192:	fb02 f303 	mul.w	r3, r2, r3
 8010196:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801019a:	bf28      	it	cs
 801019c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80101a0:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80101a2:	4b07      	ldr	r3, [pc, #28]	; (80101c0 <SCSI_ProcessWrite+0x128>)
 80101a4:	7819      	ldrb	r1, [r3, #0]
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	f103 0210 	add.w	r2, r3, #16
 80101ac:	68bb      	ldr	r3, [r7, #8]
 80101ae:	6878      	ldr	r0, [r7, #4]
 80101b0:	f007 fac3 	bl	801773a <USBD_LL_PrepareReceive>
  }

  return 0;
 80101b4:	2300      	movs	r3, #0
}
 80101b6:	4618      	mov	r0, r3
 80101b8:	3714      	adds	r7, #20
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd90      	pop	{r4, r7, pc}
 80101be:	bf00      	nop
 80101c0:	200000a7 	.word	0x200000a7

080101c4 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80101c4:	b480      	push	{r7}
 80101c6:	b087      	sub	sp, #28
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	60f8      	str	r0, [r7, #12]
 80101cc:	60b9      	str	r1, [r7, #8]
 80101ce:	4613      	mov	r3, r2
 80101d0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80101d2:	88fb      	ldrh	r3, [r7, #6]
 80101d4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d102      	bne.n	80101e2 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 80101dc:	f04f 33ff 	mov.w	r3, #4294967295
 80101e0:	e013      	b.n	801020a <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 80101e2:	8afa      	ldrh	r2, [r7, #22]
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80101e8:	e00b      	b.n	8010202 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 80101ea:	8afb      	ldrh	r3, [r7, #22]
 80101ec:	3b01      	subs	r3, #1
 80101ee:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 80101f0:	8afb      	ldrh	r3, [r7, #22]
 80101f2:	68ba      	ldr	r2, [r7, #8]
 80101f4:	441a      	add	r2, r3
 80101f6:	8afb      	ldrh	r3, [r7, #22]
 80101f8:	7811      	ldrb	r1, [r2, #0]
 80101fa:	68fa      	ldr	r2, [r7, #12]
 80101fc:	4413      	add	r3, r2
 80101fe:	460a      	mov	r2, r1
 8010200:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8010202:	8afb      	ldrh	r3, [r7, #22]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d1f0      	bne.n	80101ea <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8010208:	2300      	movs	r3, #0
}
 801020a:	4618      	mov	r0, r3
 801020c:	371c      	adds	r7, #28
 801020e:	46bd      	mov	sp, r7
 8010210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010214:	4770      	bx	lr

08010216 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010216:	b580      	push	{r7, lr}
 8010218:	b086      	sub	sp, #24
 801021a:	af00      	add	r7, sp, #0
 801021c:	60f8      	str	r0, [r7, #12]
 801021e:	60b9      	str	r1, [r7, #8]
 8010220:	4613      	mov	r3, r2
 8010222:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d101      	bne.n	801022e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801022a:	2303      	movs	r3, #3
 801022c:	e01f      	b.n	801026e <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	2200      	movs	r2, #0
 8010232:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	2200      	movs	r2, #0
 801023a:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	2200      	movs	r2, #0
 8010242:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010246:	68bb      	ldr	r3, [r7, #8]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d003      	beq.n	8010254 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	68ba      	ldr	r2, [r7, #8]
 8010250:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	2201      	movs	r2, #1
 8010258:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	79fa      	ldrb	r2, [r7, #7]
 8010260:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010262:	68f8      	ldr	r0, [r7, #12]
 8010264:	f007 f8f4 	bl	8017450 <USBD_LL_Init>
 8010268:	4603      	mov	r3, r0
 801026a:	75fb      	strb	r3, [r7, #23]

  return ret;
 801026c:	7dfb      	ldrb	r3, [r7, #23]
}
 801026e:	4618      	mov	r0, r3
 8010270:	3718      	adds	r7, #24
 8010272:	46bd      	mov	sp, r7
 8010274:	bd80      	pop	{r7, pc}

08010276 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010276:	b580      	push	{r7, lr}
 8010278:	b084      	sub	sp, #16
 801027a:	af00      	add	r7, sp, #0
 801027c:	6078      	str	r0, [r7, #4]
 801027e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010280:	2300      	movs	r3, #0
 8010282:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010284:	683b      	ldr	r3, [r7, #0]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d101      	bne.n	801028e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801028a:	2303      	movs	r3, #3
 801028c:	e025      	b.n	80102da <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	683a      	ldr	r2, [r7, #0]
 8010292:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	32ae      	adds	r2, #174	; 0xae
 80102a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d00f      	beq.n	80102ca <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	32ae      	adds	r2, #174	; 0xae
 80102b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102ba:	f107 020e 	add.w	r2, r7, #14
 80102be:	4610      	mov	r0, r2
 80102c0:	4798      	blx	r3
 80102c2:	4602      	mov	r2, r0
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80102d0:	1c5a      	adds	r2, r3, #1
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80102d8:	2300      	movs	r3, #0
}
 80102da:	4618      	mov	r0, r3
 80102dc:	3710      	adds	r7, #16
 80102de:	46bd      	mov	sp, r7
 80102e0:	bd80      	pop	{r7, pc}

080102e2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80102e2:	b580      	push	{r7, lr}
 80102e4:	b082      	sub	sp, #8
 80102e6:	af00      	add	r7, sp, #0
 80102e8:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80102ea:	6878      	ldr	r0, [r7, #4]
 80102ec:	f007 f8fc 	bl	80174e8 <USBD_LL_Start>
 80102f0:	4603      	mov	r3, r0
}
 80102f2:	4618      	mov	r0, r3
 80102f4:	3708      	adds	r7, #8
 80102f6:	46bd      	mov	sp, r7
 80102f8:	bd80      	pop	{r7, pc}

080102fa <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80102fa:	b480      	push	{r7}
 80102fc:	b083      	sub	sp, #12
 80102fe:	af00      	add	r7, sp, #0
 8010300:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010302:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8010304:	4618      	mov	r0, r3
 8010306:	370c      	adds	r7, #12
 8010308:	46bd      	mov	sp, r7
 801030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030e:	4770      	bx	lr

08010310 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b084      	sub	sp, #16
 8010314:	af00      	add	r7, sp, #0
 8010316:	6078      	str	r0, [r7, #4]
 8010318:	460b      	mov	r3, r1
 801031a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801031c:	2300      	movs	r3, #0
 801031e:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010326:	2b00      	cmp	r3, #0
 8010328:	d009      	beq.n	801033e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	78fa      	ldrb	r2, [r7, #3]
 8010334:	4611      	mov	r1, r2
 8010336:	6878      	ldr	r0, [r7, #4]
 8010338:	4798      	blx	r3
 801033a:	4603      	mov	r3, r0
 801033c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801033e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010340:	4618      	mov	r0, r3
 8010342:	3710      	adds	r7, #16
 8010344:	46bd      	mov	sp, r7
 8010346:	bd80      	pop	{r7, pc}

08010348 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b084      	sub	sp, #16
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
 8010350:	460b      	mov	r3, r1
 8010352:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010354:	2300      	movs	r3, #0
 8010356:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801035e:	685b      	ldr	r3, [r3, #4]
 8010360:	78fa      	ldrb	r2, [r7, #3]
 8010362:	4611      	mov	r1, r2
 8010364:	6878      	ldr	r0, [r7, #4]
 8010366:	4798      	blx	r3
 8010368:	4603      	mov	r3, r0
 801036a:	2b00      	cmp	r3, #0
 801036c:	d001      	beq.n	8010372 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801036e:	2303      	movs	r3, #3
 8010370:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010372:	7bfb      	ldrb	r3, [r7, #15]
}
 8010374:	4618      	mov	r0, r3
 8010376:	3710      	adds	r7, #16
 8010378:	46bd      	mov	sp, r7
 801037a:	bd80      	pop	{r7, pc}

0801037c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b084      	sub	sp, #16
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
 8010384:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801038c:	6839      	ldr	r1, [r7, #0]
 801038e:	4618      	mov	r0, r3
 8010390:	f001 f933 	bl	80115fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	2201      	movs	r2, #1
 8010398:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80103a2:	461a      	mov	r2, r3
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80103b0:	f003 031f 	and.w	r3, r3, #31
 80103b4:	2b02      	cmp	r3, #2
 80103b6:	d01a      	beq.n	80103ee <USBD_LL_SetupStage+0x72>
 80103b8:	2b02      	cmp	r3, #2
 80103ba:	d822      	bhi.n	8010402 <USBD_LL_SetupStage+0x86>
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d002      	beq.n	80103c6 <USBD_LL_SetupStage+0x4a>
 80103c0:	2b01      	cmp	r3, #1
 80103c2:	d00a      	beq.n	80103da <USBD_LL_SetupStage+0x5e>
 80103c4:	e01d      	b.n	8010402 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80103cc:	4619      	mov	r1, r3
 80103ce:	6878      	ldr	r0, [r7, #4]
 80103d0:	f000 fb60 	bl	8010a94 <USBD_StdDevReq>
 80103d4:	4603      	mov	r3, r0
 80103d6:	73fb      	strb	r3, [r7, #15]
      break;
 80103d8:	e020      	b.n	801041c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80103e0:	4619      	mov	r1, r3
 80103e2:	6878      	ldr	r0, [r7, #4]
 80103e4:	f000 fbc8 	bl	8010b78 <USBD_StdItfReq>
 80103e8:	4603      	mov	r3, r0
 80103ea:	73fb      	strb	r3, [r7, #15]
      break;
 80103ec:	e016      	b.n	801041c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80103f4:	4619      	mov	r1, r3
 80103f6:	6878      	ldr	r0, [r7, #4]
 80103f8:	f000 fc2a 	bl	8010c50 <USBD_StdEPReq>
 80103fc:	4603      	mov	r3, r0
 80103fe:	73fb      	strb	r3, [r7, #15]
      break;
 8010400:	e00c      	b.n	801041c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010408:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801040c:	b2db      	uxtb	r3, r3
 801040e:	4619      	mov	r1, r3
 8010410:	6878      	ldr	r0, [r7, #4]
 8010412:	f007 f8e8 	bl	80175e6 <USBD_LL_StallEP>
 8010416:	4603      	mov	r3, r0
 8010418:	73fb      	strb	r3, [r7, #15]
      break;
 801041a:	bf00      	nop
  }

  return ret;
 801041c:	7bfb      	ldrb	r3, [r7, #15]
}
 801041e:	4618      	mov	r0, r3
 8010420:	3710      	adds	r7, #16
 8010422:	46bd      	mov	sp, r7
 8010424:	bd80      	pop	{r7, pc}

08010426 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010426:	b580      	push	{r7, lr}
 8010428:	b086      	sub	sp, #24
 801042a:	af00      	add	r7, sp, #0
 801042c:	60f8      	str	r0, [r7, #12]
 801042e:	460b      	mov	r3, r1
 8010430:	607a      	str	r2, [r7, #4]
 8010432:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8010434:	2300      	movs	r3, #0
 8010436:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8010438:	7afb      	ldrb	r3, [r7, #11]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d16e      	bne.n	801051c <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8010444:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801044c:	2b03      	cmp	r3, #3
 801044e:	f040 8098 	bne.w	8010582 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8010452:	693b      	ldr	r3, [r7, #16]
 8010454:	689a      	ldr	r2, [r3, #8]
 8010456:	693b      	ldr	r3, [r7, #16]
 8010458:	68db      	ldr	r3, [r3, #12]
 801045a:	429a      	cmp	r2, r3
 801045c:	d913      	bls.n	8010486 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801045e:	693b      	ldr	r3, [r7, #16]
 8010460:	689a      	ldr	r2, [r3, #8]
 8010462:	693b      	ldr	r3, [r7, #16]
 8010464:	68db      	ldr	r3, [r3, #12]
 8010466:	1ad2      	subs	r2, r2, r3
 8010468:	693b      	ldr	r3, [r7, #16]
 801046a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801046c:	693b      	ldr	r3, [r7, #16]
 801046e:	68da      	ldr	r2, [r3, #12]
 8010470:	693b      	ldr	r3, [r7, #16]
 8010472:	689b      	ldr	r3, [r3, #8]
 8010474:	4293      	cmp	r3, r2
 8010476:	bf28      	it	cs
 8010478:	4613      	movcs	r3, r2
 801047a:	461a      	mov	r2, r3
 801047c:	6879      	ldr	r1, [r7, #4]
 801047e:	68f8      	ldr	r0, [r7, #12]
 8010480:	f001 f992 	bl	80117a8 <USBD_CtlContinueRx>
 8010484:	e07d      	b.n	8010582 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801048c:	f003 031f 	and.w	r3, r3, #31
 8010490:	2b02      	cmp	r3, #2
 8010492:	d014      	beq.n	80104be <USBD_LL_DataOutStage+0x98>
 8010494:	2b02      	cmp	r3, #2
 8010496:	d81d      	bhi.n	80104d4 <USBD_LL_DataOutStage+0xae>
 8010498:	2b00      	cmp	r3, #0
 801049a:	d002      	beq.n	80104a2 <USBD_LL_DataOutStage+0x7c>
 801049c:	2b01      	cmp	r3, #1
 801049e:	d003      	beq.n	80104a8 <USBD_LL_DataOutStage+0x82>
 80104a0:	e018      	b.n	80104d4 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80104a2:	2300      	movs	r3, #0
 80104a4:	75bb      	strb	r3, [r7, #22]
            break;
 80104a6:	e018      	b.n	80104da <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80104ae:	b2db      	uxtb	r3, r3
 80104b0:	4619      	mov	r1, r3
 80104b2:	68f8      	ldr	r0, [r7, #12]
 80104b4:	f000 fa5e 	bl	8010974 <USBD_CoreFindIF>
 80104b8:	4603      	mov	r3, r0
 80104ba:	75bb      	strb	r3, [r7, #22]
            break;
 80104bc:	e00d      	b.n	80104da <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80104c4:	b2db      	uxtb	r3, r3
 80104c6:	4619      	mov	r1, r3
 80104c8:	68f8      	ldr	r0, [r7, #12]
 80104ca:	f000 fa60 	bl	801098e <USBD_CoreFindEP>
 80104ce:	4603      	mov	r3, r0
 80104d0:	75bb      	strb	r3, [r7, #22]
            break;
 80104d2:	e002      	b.n	80104da <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80104d4:	2300      	movs	r3, #0
 80104d6:	75bb      	strb	r3, [r7, #22]
            break;
 80104d8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80104da:	7dbb      	ldrb	r3, [r7, #22]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d119      	bne.n	8010514 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80104e6:	b2db      	uxtb	r3, r3
 80104e8:	2b03      	cmp	r3, #3
 80104ea:	d113      	bne.n	8010514 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80104ec:	7dba      	ldrb	r2, [r7, #22]
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	32ae      	adds	r2, #174	; 0xae
 80104f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80104f6:	691b      	ldr	r3, [r3, #16]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d00b      	beq.n	8010514 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80104fc:	7dba      	ldrb	r2, [r7, #22]
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8010504:	7dba      	ldrb	r2, [r7, #22]
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	32ae      	adds	r2, #174	; 0xae
 801050a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801050e:	691b      	ldr	r3, [r3, #16]
 8010510:	68f8      	ldr	r0, [r7, #12]
 8010512:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010514:	68f8      	ldr	r0, [r7, #12]
 8010516:	f001 f958 	bl	80117ca <USBD_CtlSendStatus>
 801051a:	e032      	b.n	8010582 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801051c:	7afb      	ldrb	r3, [r7, #11]
 801051e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010522:	b2db      	uxtb	r3, r3
 8010524:	4619      	mov	r1, r3
 8010526:	68f8      	ldr	r0, [r7, #12]
 8010528:	f000 fa31 	bl	801098e <USBD_CoreFindEP>
 801052c:	4603      	mov	r3, r0
 801052e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010530:	7dbb      	ldrb	r3, [r7, #22]
 8010532:	2bff      	cmp	r3, #255	; 0xff
 8010534:	d025      	beq.n	8010582 <USBD_LL_DataOutStage+0x15c>
 8010536:	7dbb      	ldrb	r3, [r7, #22]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d122      	bne.n	8010582 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010542:	b2db      	uxtb	r3, r3
 8010544:	2b03      	cmp	r3, #3
 8010546:	d117      	bne.n	8010578 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8010548:	7dba      	ldrb	r2, [r7, #22]
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	32ae      	adds	r2, #174	; 0xae
 801054e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010552:	699b      	ldr	r3, [r3, #24]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d00f      	beq.n	8010578 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8010558:	7dba      	ldrb	r2, [r7, #22]
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8010560:	7dba      	ldrb	r2, [r7, #22]
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	32ae      	adds	r2, #174	; 0xae
 8010566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801056a:	699b      	ldr	r3, [r3, #24]
 801056c:	7afa      	ldrb	r2, [r7, #11]
 801056e:	4611      	mov	r1, r2
 8010570:	68f8      	ldr	r0, [r7, #12]
 8010572:	4798      	blx	r3
 8010574:	4603      	mov	r3, r0
 8010576:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8010578:	7dfb      	ldrb	r3, [r7, #23]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d001      	beq.n	8010582 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801057e:	7dfb      	ldrb	r3, [r7, #23]
 8010580:	e000      	b.n	8010584 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8010582:	2300      	movs	r3, #0
}
 8010584:	4618      	mov	r0, r3
 8010586:	3718      	adds	r7, #24
 8010588:	46bd      	mov	sp, r7
 801058a:	bd80      	pop	{r7, pc}

0801058c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b086      	sub	sp, #24
 8010590:	af00      	add	r7, sp, #0
 8010592:	60f8      	str	r0, [r7, #12]
 8010594:	460b      	mov	r3, r1
 8010596:	607a      	str	r2, [r7, #4]
 8010598:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801059a:	7afb      	ldrb	r3, [r7, #11]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d16f      	bne.n	8010680 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	3314      	adds	r3, #20
 80105a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80105ac:	2b02      	cmp	r3, #2
 80105ae:	d15a      	bne.n	8010666 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80105b0:	693b      	ldr	r3, [r7, #16]
 80105b2:	689a      	ldr	r2, [r3, #8]
 80105b4:	693b      	ldr	r3, [r7, #16]
 80105b6:	68db      	ldr	r3, [r3, #12]
 80105b8:	429a      	cmp	r2, r3
 80105ba:	d914      	bls.n	80105e6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80105bc:	693b      	ldr	r3, [r7, #16]
 80105be:	689a      	ldr	r2, [r3, #8]
 80105c0:	693b      	ldr	r3, [r7, #16]
 80105c2:	68db      	ldr	r3, [r3, #12]
 80105c4:	1ad2      	subs	r2, r2, r3
 80105c6:	693b      	ldr	r3, [r7, #16]
 80105c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80105ca:	693b      	ldr	r3, [r7, #16]
 80105cc:	689b      	ldr	r3, [r3, #8]
 80105ce:	461a      	mov	r2, r3
 80105d0:	6879      	ldr	r1, [r7, #4]
 80105d2:	68f8      	ldr	r0, [r7, #12]
 80105d4:	f001 f8d7 	bl	8011786 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80105d8:	2300      	movs	r3, #0
 80105da:	2200      	movs	r2, #0
 80105dc:	2100      	movs	r1, #0
 80105de:	68f8      	ldr	r0, [r7, #12]
 80105e0:	f007 f8ab 	bl	801773a <USBD_LL_PrepareReceive>
 80105e4:	e03f      	b.n	8010666 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80105e6:	693b      	ldr	r3, [r7, #16]
 80105e8:	68da      	ldr	r2, [r3, #12]
 80105ea:	693b      	ldr	r3, [r7, #16]
 80105ec:	689b      	ldr	r3, [r3, #8]
 80105ee:	429a      	cmp	r2, r3
 80105f0:	d11c      	bne.n	801062c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80105f2:	693b      	ldr	r3, [r7, #16]
 80105f4:	685a      	ldr	r2, [r3, #4]
 80105f6:	693b      	ldr	r3, [r7, #16]
 80105f8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80105fa:	429a      	cmp	r2, r3
 80105fc:	d316      	bcc.n	801062c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80105fe:	693b      	ldr	r3, [r7, #16]
 8010600:	685a      	ldr	r2, [r3, #4]
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010608:	429a      	cmp	r2, r3
 801060a:	d20f      	bcs.n	801062c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801060c:	2200      	movs	r2, #0
 801060e:	2100      	movs	r1, #0
 8010610:	68f8      	ldr	r0, [r7, #12]
 8010612:	f001 f8b8 	bl	8011786 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	2200      	movs	r2, #0
 801061a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801061e:	2300      	movs	r3, #0
 8010620:	2200      	movs	r2, #0
 8010622:	2100      	movs	r1, #0
 8010624:	68f8      	ldr	r0, [r7, #12]
 8010626:	f007 f888 	bl	801773a <USBD_LL_PrepareReceive>
 801062a:	e01c      	b.n	8010666 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010632:	b2db      	uxtb	r3, r3
 8010634:	2b03      	cmp	r3, #3
 8010636:	d10f      	bne.n	8010658 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801063e:	68db      	ldr	r3, [r3, #12]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d009      	beq.n	8010658 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	2200      	movs	r2, #0
 8010648:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010652:	68db      	ldr	r3, [r3, #12]
 8010654:	68f8      	ldr	r0, [r7, #12]
 8010656:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010658:	2180      	movs	r1, #128	; 0x80
 801065a:	68f8      	ldr	r0, [r7, #12]
 801065c:	f006 ffc3 	bl	80175e6 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010660:	68f8      	ldr	r0, [r7, #12]
 8010662:	f001 f8c5 	bl	80117f0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801066c:	2b00      	cmp	r3, #0
 801066e:	d03a      	beq.n	80106e6 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8010670:	68f8      	ldr	r0, [r7, #12]
 8010672:	f7ff fe42 	bl	80102fa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	2200      	movs	r2, #0
 801067a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801067e:	e032      	b.n	80106e6 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8010680:	7afb      	ldrb	r3, [r7, #11]
 8010682:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010686:	b2db      	uxtb	r3, r3
 8010688:	4619      	mov	r1, r3
 801068a:	68f8      	ldr	r0, [r7, #12]
 801068c:	f000 f97f 	bl	801098e <USBD_CoreFindEP>
 8010690:	4603      	mov	r3, r0
 8010692:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010694:	7dfb      	ldrb	r3, [r7, #23]
 8010696:	2bff      	cmp	r3, #255	; 0xff
 8010698:	d025      	beq.n	80106e6 <USBD_LL_DataInStage+0x15a>
 801069a:	7dfb      	ldrb	r3, [r7, #23]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d122      	bne.n	80106e6 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80106a6:	b2db      	uxtb	r3, r3
 80106a8:	2b03      	cmp	r3, #3
 80106aa:	d11c      	bne.n	80106e6 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80106ac:	7dfa      	ldrb	r2, [r7, #23]
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	32ae      	adds	r2, #174	; 0xae
 80106b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80106b6:	695b      	ldr	r3, [r3, #20]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d014      	beq.n	80106e6 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80106bc:	7dfa      	ldrb	r2, [r7, #23]
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80106c4:	7dfa      	ldrb	r2, [r7, #23]
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	32ae      	adds	r2, #174	; 0xae
 80106ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80106ce:	695b      	ldr	r3, [r3, #20]
 80106d0:	7afa      	ldrb	r2, [r7, #11]
 80106d2:	4611      	mov	r1, r2
 80106d4:	68f8      	ldr	r0, [r7, #12]
 80106d6:	4798      	blx	r3
 80106d8:	4603      	mov	r3, r0
 80106da:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80106dc:	7dbb      	ldrb	r3, [r7, #22]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d001      	beq.n	80106e6 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80106e2:	7dbb      	ldrb	r3, [r7, #22]
 80106e4:	e000      	b.n	80106e8 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80106e6:	2300      	movs	r3, #0
}
 80106e8:	4618      	mov	r0, r3
 80106ea:	3718      	adds	r7, #24
 80106ec:	46bd      	mov	sp, r7
 80106ee:	bd80      	pop	{r7, pc}

080106f0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b084      	sub	sp, #16
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80106f8:	2300      	movs	r3, #0
 80106fa:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	2201      	movs	r2, #1
 8010700:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	2200      	movs	r2, #0
 8010708:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	2200      	movs	r2, #0
 8010710:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	2200      	movs	r2, #0
 8010716:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	2200      	movs	r2, #0
 801071e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010728:	2b00      	cmp	r3, #0
 801072a:	d014      	beq.n	8010756 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010732:	685b      	ldr	r3, [r3, #4]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d00e      	beq.n	8010756 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801073e:	685b      	ldr	r3, [r3, #4]
 8010740:	687a      	ldr	r2, [r7, #4]
 8010742:	6852      	ldr	r2, [r2, #4]
 8010744:	b2d2      	uxtb	r2, r2
 8010746:	4611      	mov	r1, r2
 8010748:	6878      	ldr	r0, [r7, #4]
 801074a:	4798      	blx	r3
 801074c:	4603      	mov	r3, r0
 801074e:	2b00      	cmp	r3, #0
 8010750:	d001      	beq.n	8010756 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8010752:	2303      	movs	r3, #3
 8010754:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010756:	2340      	movs	r3, #64	; 0x40
 8010758:	2200      	movs	r2, #0
 801075a:	2100      	movs	r1, #0
 801075c:	6878      	ldr	r0, [r7, #4]
 801075e:	f006 fede 	bl	801751e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	2201      	movs	r2, #1
 8010766:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	2240      	movs	r2, #64	; 0x40
 801076e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010772:	2340      	movs	r3, #64	; 0x40
 8010774:	2200      	movs	r2, #0
 8010776:	2180      	movs	r1, #128	; 0x80
 8010778:	6878      	ldr	r0, [r7, #4]
 801077a:	f006 fed0 	bl	801751e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	2201      	movs	r2, #1
 8010782:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	2240      	movs	r2, #64	; 0x40
 8010788:	621a      	str	r2, [r3, #32]

  return ret;
 801078a:	7bfb      	ldrb	r3, [r7, #15]
}
 801078c:	4618      	mov	r0, r3
 801078e:	3710      	adds	r7, #16
 8010790:	46bd      	mov	sp, r7
 8010792:	bd80      	pop	{r7, pc}

08010794 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010794:	b480      	push	{r7}
 8010796:	b083      	sub	sp, #12
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
 801079c:	460b      	mov	r3, r1
 801079e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	78fa      	ldrb	r2, [r7, #3]
 80107a4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80107a6:	2300      	movs	r3, #0
}
 80107a8:	4618      	mov	r0, r3
 80107aa:	370c      	adds	r7, #12
 80107ac:	46bd      	mov	sp, r7
 80107ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b2:	4770      	bx	lr

080107b4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80107b4:	b480      	push	{r7}
 80107b6:	b083      	sub	sp, #12
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80107c2:	b2da      	uxtb	r2, r3
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	2204      	movs	r2, #4
 80107ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80107d2:	2300      	movs	r3, #0
}
 80107d4:	4618      	mov	r0, r3
 80107d6:	370c      	adds	r7, #12
 80107d8:	46bd      	mov	sp, r7
 80107da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107de:	4770      	bx	lr

080107e0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80107e0:	b480      	push	{r7}
 80107e2:	b083      	sub	sp, #12
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80107ee:	b2db      	uxtb	r3, r3
 80107f0:	2b04      	cmp	r3, #4
 80107f2:	d106      	bne.n	8010802 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80107fa:	b2da      	uxtb	r2, r3
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8010802:	2300      	movs	r3, #0
}
 8010804:	4618      	mov	r0, r3
 8010806:	370c      	adds	r7, #12
 8010808:	46bd      	mov	sp, r7
 801080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080e:	4770      	bx	lr

08010810 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b082      	sub	sp, #8
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801081e:	b2db      	uxtb	r3, r3
 8010820:	2b03      	cmp	r3, #3
 8010822:	d110      	bne.n	8010846 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801082a:	2b00      	cmp	r3, #0
 801082c:	d00b      	beq.n	8010846 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010834:	69db      	ldr	r3, [r3, #28]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d005      	beq.n	8010846 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010840:	69db      	ldr	r3, [r3, #28]
 8010842:	6878      	ldr	r0, [r7, #4]
 8010844:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8010846:	2300      	movs	r3, #0
}
 8010848:	4618      	mov	r0, r3
 801084a:	3708      	adds	r7, #8
 801084c:	46bd      	mov	sp, r7
 801084e:	bd80      	pop	{r7, pc}

08010850 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b082      	sub	sp, #8
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
 8010858:	460b      	mov	r3, r1
 801085a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	32ae      	adds	r2, #174	; 0xae
 8010866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d101      	bne.n	8010872 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801086e:	2303      	movs	r3, #3
 8010870:	e01c      	b.n	80108ac <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010878:	b2db      	uxtb	r3, r3
 801087a:	2b03      	cmp	r3, #3
 801087c:	d115      	bne.n	80108aa <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	32ae      	adds	r2, #174	; 0xae
 8010888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801088c:	6a1b      	ldr	r3, [r3, #32]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d00b      	beq.n	80108aa <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	32ae      	adds	r2, #174	; 0xae
 801089c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108a0:	6a1b      	ldr	r3, [r3, #32]
 80108a2:	78fa      	ldrb	r2, [r7, #3]
 80108a4:	4611      	mov	r1, r2
 80108a6:	6878      	ldr	r0, [r7, #4]
 80108a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80108aa:	2300      	movs	r3, #0
}
 80108ac:	4618      	mov	r0, r3
 80108ae:	3708      	adds	r7, #8
 80108b0:	46bd      	mov	sp, r7
 80108b2:	bd80      	pop	{r7, pc}

080108b4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b082      	sub	sp, #8
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
 80108bc:	460b      	mov	r3, r1
 80108be:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	32ae      	adds	r2, #174	; 0xae
 80108ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d101      	bne.n	80108d6 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80108d2:	2303      	movs	r3, #3
 80108d4:	e01c      	b.n	8010910 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80108dc:	b2db      	uxtb	r3, r3
 80108de:	2b03      	cmp	r3, #3
 80108e0:	d115      	bne.n	801090e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	32ae      	adds	r2, #174	; 0xae
 80108ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d00b      	beq.n	801090e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	32ae      	adds	r2, #174	; 0xae
 8010900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010906:	78fa      	ldrb	r2, [r7, #3]
 8010908:	4611      	mov	r1, r2
 801090a:	6878      	ldr	r0, [r7, #4]
 801090c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801090e:	2300      	movs	r3, #0
}
 8010910:	4618      	mov	r0, r3
 8010912:	3708      	adds	r7, #8
 8010914:	46bd      	mov	sp, r7
 8010916:	bd80      	pop	{r7, pc}

08010918 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8010918:	b480      	push	{r7}
 801091a:	b083      	sub	sp, #12
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010920:	2300      	movs	r3, #0
}
 8010922:	4618      	mov	r0, r3
 8010924:	370c      	adds	r7, #12
 8010926:	46bd      	mov	sp, r7
 8010928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092c:	4770      	bx	lr

0801092e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801092e:	b580      	push	{r7, lr}
 8010930:	b084      	sub	sp, #16
 8010932:	af00      	add	r7, sp, #0
 8010934:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8010936:	2300      	movs	r3, #0
 8010938:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	2201      	movs	r2, #1
 801093e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010948:	2b00      	cmp	r3, #0
 801094a:	d00e      	beq.n	801096a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010952:	685b      	ldr	r3, [r3, #4]
 8010954:	687a      	ldr	r2, [r7, #4]
 8010956:	6852      	ldr	r2, [r2, #4]
 8010958:	b2d2      	uxtb	r2, r2
 801095a:	4611      	mov	r1, r2
 801095c:	6878      	ldr	r0, [r7, #4]
 801095e:	4798      	blx	r3
 8010960:	4603      	mov	r3, r0
 8010962:	2b00      	cmp	r3, #0
 8010964:	d001      	beq.n	801096a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8010966:	2303      	movs	r3, #3
 8010968:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801096a:	7bfb      	ldrb	r3, [r7, #15]
}
 801096c:	4618      	mov	r0, r3
 801096e:	3710      	adds	r7, #16
 8010970:	46bd      	mov	sp, r7
 8010972:	bd80      	pop	{r7, pc}

08010974 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010974:	b480      	push	{r7}
 8010976:	b083      	sub	sp, #12
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
 801097c:	460b      	mov	r3, r1
 801097e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010980:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010982:	4618      	mov	r0, r3
 8010984:	370c      	adds	r7, #12
 8010986:	46bd      	mov	sp, r7
 8010988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098c:	4770      	bx	lr

0801098e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801098e:	b480      	push	{r7}
 8010990:	b083      	sub	sp, #12
 8010992:	af00      	add	r7, sp, #0
 8010994:	6078      	str	r0, [r7, #4]
 8010996:	460b      	mov	r3, r1
 8010998:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801099a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801099c:	4618      	mov	r0, r3
 801099e:	370c      	adds	r7, #12
 80109a0:	46bd      	mov	sp, r7
 80109a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a6:	4770      	bx	lr

080109a8 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b086      	sub	sp, #24
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
 80109b0:	460b      	mov	r3, r1
 80109b2:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80109bc:	2300      	movs	r3, #0
 80109be:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	885b      	ldrh	r3, [r3, #2]
 80109c4:	b29a      	uxth	r2, r3
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	781b      	ldrb	r3, [r3, #0]
 80109ca:	b29b      	uxth	r3, r3
 80109cc:	429a      	cmp	r2, r3
 80109ce:	d920      	bls.n	8010a12 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	781b      	ldrb	r3, [r3, #0]
 80109d4:	b29b      	uxth	r3, r3
 80109d6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80109d8:	e013      	b.n	8010a02 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80109da:	f107 030a 	add.w	r3, r7, #10
 80109de:	4619      	mov	r1, r3
 80109e0:	6978      	ldr	r0, [r7, #20]
 80109e2:	f000 f81b 	bl	8010a1c <USBD_GetNextDesc>
 80109e6:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80109e8:	697b      	ldr	r3, [r7, #20]
 80109ea:	785b      	ldrb	r3, [r3, #1]
 80109ec:	2b05      	cmp	r3, #5
 80109ee:	d108      	bne.n	8010a02 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80109f0:	697b      	ldr	r3, [r7, #20]
 80109f2:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80109f4:	693b      	ldr	r3, [r7, #16]
 80109f6:	789b      	ldrb	r3, [r3, #2]
 80109f8:	78fa      	ldrb	r2, [r7, #3]
 80109fa:	429a      	cmp	r2, r3
 80109fc:	d008      	beq.n	8010a10 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80109fe:	2300      	movs	r3, #0
 8010a00:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	885b      	ldrh	r3, [r3, #2]
 8010a06:	b29a      	uxth	r2, r3
 8010a08:	897b      	ldrh	r3, [r7, #10]
 8010a0a:	429a      	cmp	r2, r3
 8010a0c:	d8e5      	bhi.n	80109da <USBD_GetEpDesc+0x32>
 8010a0e:	e000      	b.n	8010a12 <USBD_GetEpDesc+0x6a>
          break;
 8010a10:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8010a12:	693b      	ldr	r3, [r7, #16]
}
 8010a14:	4618      	mov	r0, r3
 8010a16:	3718      	adds	r7, #24
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd80      	pop	{r7, pc}

08010a1c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8010a1c:	b480      	push	{r7}
 8010a1e:	b085      	sub	sp, #20
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
 8010a24:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8010a2a:	683b      	ldr	r3, [r7, #0]
 8010a2c:	881a      	ldrh	r2, [r3, #0]
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	781b      	ldrb	r3, [r3, #0]
 8010a32:	b29b      	uxth	r3, r3
 8010a34:	4413      	add	r3, r2
 8010a36:	b29a      	uxth	r2, r3
 8010a38:	683b      	ldr	r3, [r7, #0]
 8010a3a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	781b      	ldrb	r3, [r3, #0]
 8010a40:	461a      	mov	r2, r3
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	4413      	add	r3, r2
 8010a46:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010a48:	68fb      	ldr	r3, [r7, #12]
}
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	3714      	adds	r7, #20
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a54:	4770      	bx	lr

08010a56 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010a56:	b480      	push	{r7}
 8010a58:	b087      	sub	sp, #28
 8010a5a:	af00      	add	r7, sp, #0
 8010a5c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010a62:	697b      	ldr	r3, [r7, #20]
 8010a64:	781b      	ldrb	r3, [r3, #0]
 8010a66:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010a68:	697b      	ldr	r3, [r7, #20]
 8010a6a:	3301      	adds	r3, #1
 8010a6c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010a6e:	697b      	ldr	r3, [r7, #20]
 8010a70:	781b      	ldrb	r3, [r3, #0]
 8010a72:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010a74:	8a3b      	ldrh	r3, [r7, #16]
 8010a76:	021b      	lsls	r3, r3, #8
 8010a78:	b21a      	sxth	r2, r3
 8010a7a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010a7e:	4313      	orrs	r3, r2
 8010a80:	b21b      	sxth	r3, r3
 8010a82:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010a84:	89fb      	ldrh	r3, [r7, #14]
}
 8010a86:	4618      	mov	r0, r3
 8010a88:	371c      	adds	r7, #28
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a90:	4770      	bx	lr
	...

08010a94 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b084      	sub	sp, #16
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
 8010a9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010aa2:	683b      	ldr	r3, [r7, #0]
 8010aa4:	781b      	ldrb	r3, [r3, #0]
 8010aa6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010aaa:	2b40      	cmp	r3, #64	; 0x40
 8010aac:	d005      	beq.n	8010aba <USBD_StdDevReq+0x26>
 8010aae:	2b40      	cmp	r3, #64	; 0x40
 8010ab0:	d857      	bhi.n	8010b62 <USBD_StdDevReq+0xce>
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d00f      	beq.n	8010ad6 <USBD_StdDevReq+0x42>
 8010ab6:	2b20      	cmp	r3, #32
 8010ab8:	d153      	bne.n	8010b62 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	32ae      	adds	r2, #174	; 0xae
 8010ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ac8:	689b      	ldr	r3, [r3, #8]
 8010aca:	6839      	ldr	r1, [r7, #0]
 8010acc:	6878      	ldr	r0, [r7, #4]
 8010ace:	4798      	blx	r3
 8010ad0:	4603      	mov	r3, r0
 8010ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8010ad4:	e04a      	b.n	8010b6c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010ad6:	683b      	ldr	r3, [r7, #0]
 8010ad8:	785b      	ldrb	r3, [r3, #1]
 8010ada:	2b09      	cmp	r3, #9
 8010adc:	d83b      	bhi.n	8010b56 <USBD_StdDevReq+0xc2>
 8010ade:	a201      	add	r2, pc, #4	; (adr r2, 8010ae4 <USBD_StdDevReq+0x50>)
 8010ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ae4:	08010b39 	.word	0x08010b39
 8010ae8:	08010b4d 	.word	0x08010b4d
 8010aec:	08010b57 	.word	0x08010b57
 8010af0:	08010b43 	.word	0x08010b43
 8010af4:	08010b57 	.word	0x08010b57
 8010af8:	08010b17 	.word	0x08010b17
 8010afc:	08010b0d 	.word	0x08010b0d
 8010b00:	08010b57 	.word	0x08010b57
 8010b04:	08010b2f 	.word	0x08010b2f
 8010b08:	08010b21 	.word	0x08010b21
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010b0c:	6839      	ldr	r1, [r7, #0]
 8010b0e:	6878      	ldr	r0, [r7, #4]
 8010b10:	f000 fa3c 	bl	8010f8c <USBD_GetDescriptor>
          break;
 8010b14:	e024      	b.n	8010b60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010b16:	6839      	ldr	r1, [r7, #0]
 8010b18:	6878      	ldr	r0, [r7, #4]
 8010b1a:	f000 fbcb 	bl	80112b4 <USBD_SetAddress>
          break;
 8010b1e:	e01f      	b.n	8010b60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010b20:	6839      	ldr	r1, [r7, #0]
 8010b22:	6878      	ldr	r0, [r7, #4]
 8010b24:	f000 fc0a 	bl	801133c <USBD_SetConfig>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	73fb      	strb	r3, [r7, #15]
          break;
 8010b2c:	e018      	b.n	8010b60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010b2e:	6839      	ldr	r1, [r7, #0]
 8010b30:	6878      	ldr	r0, [r7, #4]
 8010b32:	f000 fcad 	bl	8011490 <USBD_GetConfig>
          break;
 8010b36:	e013      	b.n	8010b60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010b38:	6839      	ldr	r1, [r7, #0]
 8010b3a:	6878      	ldr	r0, [r7, #4]
 8010b3c:	f000 fcde 	bl	80114fc <USBD_GetStatus>
          break;
 8010b40:	e00e      	b.n	8010b60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010b42:	6839      	ldr	r1, [r7, #0]
 8010b44:	6878      	ldr	r0, [r7, #4]
 8010b46:	f000 fd0d 	bl	8011564 <USBD_SetFeature>
          break;
 8010b4a:	e009      	b.n	8010b60 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010b4c:	6839      	ldr	r1, [r7, #0]
 8010b4e:	6878      	ldr	r0, [r7, #4]
 8010b50:	f000 fd31 	bl	80115b6 <USBD_ClrFeature>
          break;
 8010b54:	e004      	b.n	8010b60 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8010b56:	6839      	ldr	r1, [r7, #0]
 8010b58:	6878      	ldr	r0, [r7, #4]
 8010b5a:	f000 fd88 	bl	801166e <USBD_CtlError>
          break;
 8010b5e:	bf00      	nop
      }
      break;
 8010b60:	e004      	b.n	8010b6c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8010b62:	6839      	ldr	r1, [r7, #0]
 8010b64:	6878      	ldr	r0, [r7, #4]
 8010b66:	f000 fd82 	bl	801166e <USBD_CtlError>
      break;
 8010b6a:	bf00      	nop
  }

  return ret;
 8010b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b6e:	4618      	mov	r0, r3
 8010b70:	3710      	adds	r7, #16
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bd80      	pop	{r7, pc}
 8010b76:	bf00      	nop

08010b78 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b084      	sub	sp, #16
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
 8010b80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010b82:	2300      	movs	r3, #0
 8010b84:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010b86:	683b      	ldr	r3, [r7, #0]
 8010b88:	781b      	ldrb	r3, [r3, #0]
 8010b8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010b8e:	2b40      	cmp	r3, #64	; 0x40
 8010b90:	d005      	beq.n	8010b9e <USBD_StdItfReq+0x26>
 8010b92:	2b40      	cmp	r3, #64	; 0x40
 8010b94:	d852      	bhi.n	8010c3c <USBD_StdItfReq+0xc4>
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d001      	beq.n	8010b9e <USBD_StdItfReq+0x26>
 8010b9a:	2b20      	cmp	r3, #32
 8010b9c:	d14e      	bne.n	8010c3c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010ba4:	b2db      	uxtb	r3, r3
 8010ba6:	3b01      	subs	r3, #1
 8010ba8:	2b02      	cmp	r3, #2
 8010baa:	d840      	bhi.n	8010c2e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010bac:	683b      	ldr	r3, [r7, #0]
 8010bae:	889b      	ldrh	r3, [r3, #4]
 8010bb0:	b2db      	uxtb	r3, r3
 8010bb2:	2b01      	cmp	r3, #1
 8010bb4:	d836      	bhi.n	8010c24 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8010bb6:	683b      	ldr	r3, [r7, #0]
 8010bb8:	889b      	ldrh	r3, [r3, #4]
 8010bba:	b2db      	uxtb	r3, r3
 8010bbc:	4619      	mov	r1, r3
 8010bbe:	6878      	ldr	r0, [r7, #4]
 8010bc0:	f7ff fed8 	bl	8010974 <USBD_CoreFindIF>
 8010bc4:	4603      	mov	r3, r0
 8010bc6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010bc8:	7bbb      	ldrb	r3, [r7, #14]
 8010bca:	2bff      	cmp	r3, #255	; 0xff
 8010bcc:	d01d      	beq.n	8010c0a <USBD_StdItfReq+0x92>
 8010bce:	7bbb      	ldrb	r3, [r7, #14]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d11a      	bne.n	8010c0a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8010bd4:	7bba      	ldrb	r2, [r7, #14]
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	32ae      	adds	r2, #174	; 0xae
 8010bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010bde:	689b      	ldr	r3, [r3, #8]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d00f      	beq.n	8010c04 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8010be4:	7bba      	ldrb	r2, [r7, #14]
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010bec:	7bba      	ldrb	r2, [r7, #14]
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	32ae      	adds	r2, #174	; 0xae
 8010bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010bf6:	689b      	ldr	r3, [r3, #8]
 8010bf8:	6839      	ldr	r1, [r7, #0]
 8010bfa:	6878      	ldr	r0, [r7, #4]
 8010bfc:	4798      	blx	r3
 8010bfe:	4603      	mov	r3, r0
 8010c00:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010c02:	e004      	b.n	8010c0e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8010c04:	2303      	movs	r3, #3
 8010c06:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010c08:	e001      	b.n	8010c0e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8010c0a:	2303      	movs	r3, #3
 8010c0c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010c0e:	683b      	ldr	r3, [r7, #0]
 8010c10:	88db      	ldrh	r3, [r3, #6]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d110      	bne.n	8010c38 <USBD_StdItfReq+0xc0>
 8010c16:	7bfb      	ldrb	r3, [r7, #15]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d10d      	bne.n	8010c38 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010c1c:	6878      	ldr	r0, [r7, #4]
 8010c1e:	f000 fdd4 	bl	80117ca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010c22:	e009      	b.n	8010c38 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8010c24:	6839      	ldr	r1, [r7, #0]
 8010c26:	6878      	ldr	r0, [r7, #4]
 8010c28:	f000 fd21 	bl	801166e <USBD_CtlError>
          break;
 8010c2c:	e004      	b.n	8010c38 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8010c2e:	6839      	ldr	r1, [r7, #0]
 8010c30:	6878      	ldr	r0, [r7, #4]
 8010c32:	f000 fd1c 	bl	801166e <USBD_CtlError>
          break;
 8010c36:	e000      	b.n	8010c3a <USBD_StdItfReq+0xc2>
          break;
 8010c38:	bf00      	nop
      }
      break;
 8010c3a:	e004      	b.n	8010c46 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8010c3c:	6839      	ldr	r1, [r7, #0]
 8010c3e:	6878      	ldr	r0, [r7, #4]
 8010c40:	f000 fd15 	bl	801166e <USBD_CtlError>
      break;
 8010c44:	bf00      	nop
  }

  return ret;
 8010c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c48:	4618      	mov	r0, r3
 8010c4a:	3710      	adds	r7, #16
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	bd80      	pop	{r7, pc}

08010c50 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b084      	sub	sp, #16
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
 8010c58:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8010c5e:	683b      	ldr	r3, [r7, #0]
 8010c60:	889b      	ldrh	r3, [r3, #4]
 8010c62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010c64:	683b      	ldr	r3, [r7, #0]
 8010c66:	781b      	ldrb	r3, [r3, #0]
 8010c68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010c6c:	2b40      	cmp	r3, #64	; 0x40
 8010c6e:	d007      	beq.n	8010c80 <USBD_StdEPReq+0x30>
 8010c70:	2b40      	cmp	r3, #64	; 0x40
 8010c72:	f200 817f 	bhi.w	8010f74 <USBD_StdEPReq+0x324>
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d02a      	beq.n	8010cd0 <USBD_StdEPReq+0x80>
 8010c7a:	2b20      	cmp	r3, #32
 8010c7c:	f040 817a 	bne.w	8010f74 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8010c80:	7bbb      	ldrb	r3, [r7, #14]
 8010c82:	4619      	mov	r1, r3
 8010c84:	6878      	ldr	r0, [r7, #4]
 8010c86:	f7ff fe82 	bl	801098e <USBD_CoreFindEP>
 8010c8a:	4603      	mov	r3, r0
 8010c8c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010c8e:	7b7b      	ldrb	r3, [r7, #13]
 8010c90:	2bff      	cmp	r3, #255	; 0xff
 8010c92:	f000 8174 	beq.w	8010f7e <USBD_StdEPReq+0x32e>
 8010c96:	7b7b      	ldrb	r3, [r7, #13]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	f040 8170 	bne.w	8010f7e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8010c9e:	7b7a      	ldrb	r2, [r7, #13]
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8010ca6:	7b7a      	ldrb	r2, [r7, #13]
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	32ae      	adds	r2, #174	; 0xae
 8010cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010cb0:	689b      	ldr	r3, [r3, #8]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	f000 8163 	beq.w	8010f7e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8010cb8:	7b7a      	ldrb	r2, [r7, #13]
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	32ae      	adds	r2, #174	; 0xae
 8010cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010cc2:	689b      	ldr	r3, [r3, #8]
 8010cc4:	6839      	ldr	r1, [r7, #0]
 8010cc6:	6878      	ldr	r0, [r7, #4]
 8010cc8:	4798      	blx	r3
 8010cca:	4603      	mov	r3, r0
 8010ccc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8010cce:	e156      	b.n	8010f7e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	785b      	ldrb	r3, [r3, #1]
 8010cd4:	2b03      	cmp	r3, #3
 8010cd6:	d008      	beq.n	8010cea <USBD_StdEPReq+0x9a>
 8010cd8:	2b03      	cmp	r3, #3
 8010cda:	f300 8145 	bgt.w	8010f68 <USBD_StdEPReq+0x318>
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	f000 809b 	beq.w	8010e1a <USBD_StdEPReq+0x1ca>
 8010ce4:	2b01      	cmp	r3, #1
 8010ce6:	d03c      	beq.n	8010d62 <USBD_StdEPReq+0x112>
 8010ce8:	e13e      	b.n	8010f68 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010cf0:	b2db      	uxtb	r3, r3
 8010cf2:	2b02      	cmp	r3, #2
 8010cf4:	d002      	beq.n	8010cfc <USBD_StdEPReq+0xac>
 8010cf6:	2b03      	cmp	r3, #3
 8010cf8:	d016      	beq.n	8010d28 <USBD_StdEPReq+0xd8>
 8010cfa:	e02c      	b.n	8010d56 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010cfc:	7bbb      	ldrb	r3, [r7, #14]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d00d      	beq.n	8010d1e <USBD_StdEPReq+0xce>
 8010d02:	7bbb      	ldrb	r3, [r7, #14]
 8010d04:	2b80      	cmp	r3, #128	; 0x80
 8010d06:	d00a      	beq.n	8010d1e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010d08:	7bbb      	ldrb	r3, [r7, #14]
 8010d0a:	4619      	mov	r1, r3
 8010d0c:	6878      	ldr	r0, [r7, #4]
 8010d0e:	f006 fc6a 	bl	80175e6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010d12:	2180      	movs	r1, #128	; 0x80
 8010d14:	6878      	ldr	r0, [r7, #4]
 8010d16:	f006 fc66 	bl	80175e6 <USBD_LL_StallEP>
 8010d1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010d1c:	e020      	b.n	8010d60 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8010d1e:	6839      	ldr	r1, [r7, #0]
 8010d20:	6878      	ldr	r0, [r7, #4]
 8010d22:	f000 fca4 	bl	801166e <USBD_CtlError>
              break;
 8010d26:	e01b      	b.n	8010d60 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010d28:	683b      	ldr	r3, [r7, #0]
 8010d2a:	885b      	ldrh	r3, [r3, #2]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d10e      	bne.n	8010d4e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010d30:	7bbb      	ldrb	r3, [r7, #14]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d00b      	beq.n	8010d4e <USBD_StdEPReq+0xfe>
 8010d36:	7bbb      	ldrb	r3, [r7, #14]
 8010d38:	2b80      	cmp	r3, #128	; 0x80
 8010d3a:	d008      	beq.n	8010d4e <USBD_StdEPReq+0xfe>
 8010d3c:	683b      	ldr	r3, [r7, #0]
 8010d3e:	88db      	ldrh	r3, [r3, #6]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d104      	bne.n	8010d4e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010d44:	7bbb      	ldrb	r3, [r7, #14]
 8010d46:	4619      	mov	r1, r3
 8010d48:	6878      	ldr	r0, [r7, #4]
 8010d4a:	f006 fc4c 	bl	80175e6 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010d4e:	6878      	ldr	r0, [r7, #4]
 8010d50:	f000 fd3b 	bl	80117ca <USBD_CtlSendStatus>

              break;
 8010d54:	e004      	b.n	8010d60 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8010d56:	6839      	ldr	r1, [r7, #0]
 8010d58:	6878      	ldr	r0, [r7, #4]
 8010d5a:	f000 fc88 	bl	801166e <USBD_CtlError>
              break;
 8010d5e:	bf00      	nop
          }
          break;
 8010d60:	e107      	b.n	8010f72 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d68:	b2db      	uxtb	r3, r3
 8010d6a:	2b02      	cmp	r3, #2
 8010d6c:	d002      	beq.n	8010d74 <USBD_StdEPReq+0x124>
 8010d6e:	2b03      	cmp	r3, #3
 8010d70:	d016      	beq.n	8010da0 <USBD_StdEPReq+0x150>
 8010d72:	e04b      	b.n	8010e0c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010d74:	7bbb      	ldrb	r3, [r7, #14]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d00d      	beq.n	8010d96 <USBD_StdEPReq+0x146>
 8010d7a:	7bbb      	ldrb	r3, [r7, #14]
 8010d7c:	2b80      	cmp	r3, #128	; 0x80
 8010d7e:	d00a      	beq.n	8010d96 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010d80:	7bbb      	ldrb	r3, [r7, #14]
 8010d82:	4619      	mov	r1, r3
 8010d84:	6878      	ldr	r0, [r7, #4]
 8010d86:	f006 fc2e 	bl	80175e6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010d8a:	2180      	movs	r1, #128	; 0x80
 8010d8c:	6878      	ldr	r0, [r7, #4]
 8010d8e:	f006 fc2a 	bl	80175e6 <USBD_LL_StallEP>
 8010d92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010d94:	e040      	b.n	8010e18 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8010d96:	6839      	ldr	r1, [r7, #0]
 8010d98:	6878      	ldr	r0, [r7, #4]
 8010d9a:	f000 fc68 	bl	801166e <USBD_CtlError>
              break;
 8010d9e:	e03b      	b.n	8010e18 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	885b      	ldrh	r3, [r3, #2]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d136      	bne.n	8010e16 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010da8:	7bbb      	ldrb	r3, [r7, #14]
 8010daa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d004      	beq.n	8010dbc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010db2:	7bbb      	ldrb	r3, [r7, #14]
 8010db4:	4619      	mov	r1, r3
 8010db6:	6878      	ldr	r0, [r7, #4]
 8010db8:	f006 fc34 	bl	8017624 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010dbc:	6878      	ldr	r0, [r7, #4]
 8010dbe:	f000 fd04 	bl	80117ca <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8010dc2:	7bbb      	ldrb	r3, [r7, #14]
 8010dc4:	4619      	mov	r1, r3
 8010dc6:	6878      	ldr	r0, [r7, #4]
 8010dc8:	f7ff fde1 	bl	801098e <USBD_CoreFindEP>
 8010dcc:	4603      	mov	r3, r0
 8010dce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010dd0:	7b7b      	ldrb	r3, [r7, #13]
 8010dd2:	2bff      	cmp	r3, #255	; 0xff
 8010dd4:	d01f      	beq.n	8010e16 <USBD_StdEPReq+0x1c6>
 8010dd6:	7b7b      	ldrb	r3, [r7, #13]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d11c      	bne.n	8010e16 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8010ddc:	7b7a      	ldrb	r2, [r7, #13]
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8010de4:	7b7a      	ldrb	r2, [r7, #13]
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	32ae      	adds	r2, #174	; 0xae
 8010dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010dee:	689b      	ldr	r3, [r3, #8]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d010      	beq.n	8010e16 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010df4:	7b7a      	ldrb	r2, [r7, #13]
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	32ae      	adds	r2, #174	; 0xae
 8010dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010dfe:	689b      	ldr	r3, [r3, #8]
 8010e00:	6839      	ldr	r1, [r7, #0]
 8010e02:	6878      	ldr	r0, [r7, #4]
 8010e04:	4798      	blx	r3
 8010e06:	4603      	mov	r3, r0
 8010e08:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8010e0a:	e004      	b.n	8010e16 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8010e0c:	6839      	ldr	r1, [r7, #0]
 8010e0e:	6878      	ldr	r0, [r7, #4]
 8010e10:	f000 fc2d 	bl	801166e <USBD_CtlError>
              break;
 8010e14:	e000      	b.n	8010e18 <USBD_StdEPReq+0x1c8>
              break;
 8010e16:	bf00      	nop
          }
          break;
 8010e18:	e0ab      	b.n	8010f72 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e20:	b2db      	uxtb	r3, r3
 8010e22:	2b02      	cmp	r3, #2
 8010e24:	d002      	beq.n	8010e2c <USBD_StdEPReq+0x1dc>
 8010e26:	2b03      	cmp	r3, #3
 8010e28:	d032      	beq.n	8010e90 <USBD_StdEPReq+0x240>
 8010e2a:	e097      	b.n	8010f5c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010e2c:	7bbb      	ldrb	r3, [r7, #14]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d007      	beq.n	8010e42 <USBD_StdEPReq+0x1f2>
 8010e32:	7bbb      	ldrb	r3, [r7, #14]
 8010e34:	2b80      	cmp	r3, #128	; 0x80
 8010e36:	d004      	beq.n	8010e42 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8010e38:	6839      	ldr	r1, [r7, #0]
 8010e3a:	6878      	ldr	r0, [r7, #4]
 8010e3c:	f000 fc17 	bl	801166e <USBD_CtlError>
                break;
 8010e40:	e091      	b.n	8010f66 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010e42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	da0b      	bge.n	8010e62 <USBD_StdEPReq+0x212>
 8010e4a:	7bbb      	ldrb	r3, [r7, #14]
 8010e4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010e50:	4613      	mov	r3, r2
 8010e52:	009b      	lsls	r3, r3, #2
 8010e54:	4413      	add	r3, r2
 8010e56:	009b      	lsls	r3, r3, #2
 8010e58:	3310      	adds	r3, #16
 8010e5a:	687a      	ldr	r2, [r7, #4]
 8010e5c:	4413      	add	r3, r2
 8010e5e:	3304      	adds	r3, #4
 8010e60:	e00b      	b.n	8010e7a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010e62:	7bbb      	ldrb	r3, [r7, #14]
 8010e64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010e68:	4613      	mov	r3, r2
 8010e6a:	009b      	lsls	r3, r3, #2
 8010e6c:	4413      	add	r3, r2
 8010e6e:	009b      	lsls	r3, r3, #2
 8010e70:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010e74:	687a      	ldr	r2, [r7, #4]
 8010e76:	4413      	add	r3, r2
 8010e78:	3304      	adds	r3, #4
 8010e7a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010e7c:	68bb      	ldr	r3, [r7, #8]
 8010e7e:	2200      	movs	r2, #0
 8010e80:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010e82:	68bb      	ldr	r3, [r7, #8]
 8010e84:	2202      	movs	r2, #2
 8010e86:	4619      	mov	r1, r3
 8010e88:	6878      	ldr	r0, [r7, #4]
 8010e8a:	f000 fc61 	bl	8011750 <USBD_CtlSendData>
              break;
 8010e8e:	e06a      	b.n	8010f66 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010e90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	da11      	bge.n	8010ebc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010e98:	7bbb      	ldrb	r3, [r7, #14]
 8010e9a:	f003 020f 	and.w	r2, r3, #15
 8010e9e:	6879      	ldr	r1, [r7, #4]
 8010ea0:	4613      	mov	r3, r2
 8010ea2:	009b      	lsls	r3, r3, #2
 8010ea4:	4413      	add	r3, r2
 8010ea6:	009b      	lsls	r3, r3, #2
 8010ea8:	440b      	add	r3, r1
 8010eaa:	3324      	adds	r3, #36	; 0x24
 8010eac:	881b      	ldrh	r3, [r3, #0]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d117      	bne.n	8010ee2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010eb2:	6839      	ldr	r1, [r7, #0]
 8010eb4:	6878      	ldr	r0, [r7, #4]
 8010eb6:	f000 fbda 	bl	801166e <USBD_CtlError>
                  break;
 8010eba:	e054      	b.n	8010f66 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010ebc:	7bbb      	ldrb	r3, [r7, #14]
 8010ebe:	f003 020f 	and.w	r2, r3, #15
 8010ec2:	6879      	ldr	r1, [r7, #4]
 8010ec4:	4613      	mov	r3, r2
 8010ec6:	009b      	lsls	r3, r3, #2
 8010ec8:	4413      	add	r3, r2
 8010eca:	009b      	lsls	r3, r3, #2
 8010ecc:	440b      	add	r3, r1
 8010ece:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010ed2:	881b      	ldrh	r3, [r3, #0]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d104      	bne.n	8010ee2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010ed8:	6839      	ldr	r1, [r7, #0]
 8010eda:	6878      	ldr	r0, [r7, #4]
 8010edc:	f000 fbc7 	bl	801166e <USBD_CtlError>
                  break;
 8010ee0:	e041      	b.n	8010f66 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010ee2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	da0b      	bge.n	8010f02 <USBD_StdEPReq+0x2b2>
 8010eea:	7bbb      	ldrb	r3, [r7, #14]
 8010eec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010ef0:	4613      	mov	r3, r2
 8010ef2:	009b      	lsls	r3, r3, #2
 8010ef4:	4413      	add	r3, r2
 8010ef6:	009b      	lsls	r3, r3, #2
 8010ef8:	3310      	adds	r3, #16
 8010efa:	687a      	ldr	r2, [r7, #4]
 8010efc:	4413      	add	r3, r2
 8010efe:	3304      	adds	r3, #4
 8010f00:	e00b      	b.n	8010f1a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010f02:	7bbb      	ldrb	r3, [r7, #14]
 8010f04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010f08:	4613      	mov	r3, r2
 8010f0a:	009b      	lsls	r3, r3, #2
 8010f0c:	4413      	add	r3, r2
 8010f0e:	009b      	lsls	r3, r3, #2
 8010f10:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010f14:	687a      	ldr	r2, [r7, #4]
 8010f16:	4413      	add	r3, r2
 8010f18:	3304      	adds	r3, #4
 8010f1a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010f1c:	7bbb      	ldrb	r3, [r7, #14]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d002      	beq.n	8010f28 <USBD_StdEPReq+0x2d8>
 8010f22:	7bbb      	ldrb	r3, [r7, #14]
 8010f24:	2b80      	cmp	r3, #128	; 0x80
 8010f26:	d103      	bne.n	8010f30 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8010f28:	68bb      	ldr	r3, [r7, #8]
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	601a      	str	r2, [r3, #0]
 8010f2e:	e00e      	b.n	8010f4e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010f30:	7bbb      	ldrb	r3, [r7, #14]
 8010f32:	4619      	mov	r1, r3
 8010f34:	6878      	ldr	r0, [r7, #4]
 8010f36:	f006 fb94 	bl	8017662 <USBD_LL_IsStallEP>
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d003      	beq.n	8010f48 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8010f40:	68bb      	ldr	r3, [r7, #8]
 8010f42:	2201      	movs	r2, #1
 8010f44:	601a      	str	r2, [r3, #0]
 8010f46:	e002      	b.n	8010f4e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8010f48:	68bb      	ldr	r3, [r7, #8]
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010f4e:	68bb      	ldr	r3, [r7, #8]
 8010f50:	2202      	movs	r2, #2
 8010f52:	4619      	mov	r1, r3
 8010f54:	6878      	ldr	r0, [r7, #4]
 8010f56:	f000 fbfb 	bl	8011750 <USBD_CtlSendData>
              break;
 8010f5a:	e004      	b.n	8010f66 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8010f5c:	6839      	ldr	r1, [r7, #0]
 8010f5e:	6878      	ldr	r0, [r7, #4]
 8010f60:	f000 fb85 	bl	801166e <USBD_CtlError>
              break;
 8010f64:	bf00      	nop
          }
          break;
 8010f66:	e004      	b.n	8010f72 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8010f68:	6839      	ldr	r1, [r7, #0]
 8010f6a:	6878      	ldr	r0, [r7, #4]
 8010f6c:	f000 fb7f 	bl	801166e <USBD_CtlError>
          break;
 8010f70:	bf00      	nop
      }
      break;
 8010f72:	e005      	b.n	8010f80 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8010f74:	6839      	ldr	r1, [r7, #0]
 8010f76:	6878      	ldr	r0, [r7, #4]
 8010f78:	f000 fb79 	bl	801166e <USBD_CtlError>
      break;
 8010f7c:	e000      	b.n	8010f80 <USBD_StdEPReq+0x330>
      break;
 8010f7e:	bf00      	nop
  }

  return ret;
 8010f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f82:	4618      	mov	r0, r3
 8010f84:	3710      	adds	r7, #16
 8010f86:	46bd      	mov	sp, r7
 8010f88:	bd80      	pop	{r7, pc}
	...

08010f8c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b084      	sub	sp, #16
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
 8010f94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010f96:	2300      	movs	r3, #0
 8010f98:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	885b      	ldrh	r3, [r3, #2]
 8010fa6:	0a1b      	lsrs	r3, r3, #8
 8010fa8:	b29b      	uxth	r3, r3
 8010faa:	3b01      	subs	r3, #1
 8010fac:	2b0e      	cmp	r3, #14
 8010fae:	f200 8152 	bhi.w	8011256 <USBD_GetDescriptor+0x2ca>
 8010fb2:	a201      	add	r2, pc, #4	; (adr r2, 8010fb8 <USBD_GetDescriptor+0x2c>)
 8010fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fb8:	08011029 	.word	0x08011029
 8010fbc:	08011041 	.word	0x08011041
 8010fc0:	08011081 	.word	0x08011081
 8010fc4:	08011257 	.word	0x08011257
 8010fc8:	08011257 	.word	0x08011257
 8010fcc:	080111f7 	.word	0x080111f7
 8010fd0:	08011223 	.word	0x08011223
 8010fd4:	08011257 	.word	0x08011257
 8010fd8:	08011257 	.word	0x08011257
 8010fdc:	08011257 	.word	0x08011257
 8010fe0:	08011257 	.word	0x08011257
 8010fe4:	08011257 	.word	0x08011257
 8010fe8:	08011257 	.word	0x08011257
 8010fec:	08011257 	.word	0x08011257
 8010ff0:	08010ff5 	.word	0x08010ff5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010ffa:	69db      	ldr	r3, [r3, #28]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d00b      	beq.n	8011018 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011006:	69db      	ldr	r3, [r3, #28]
 8011008:	687a      	ldr	r2, [r7, #4]
 801100a:	7c12      	ldrb	r2, [r2, #16]
 801100c:	f107 0108 	add.w	r1, r7, #8
 8011010:	4610      	mov	r0, r2
 8011012:	4798      	blx	r3
 8011014:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011016:	e126      	b.n	8011266 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011018:	6839      	ldr	r1, [r7, #0]
 801101a:	6878      	ldr	r0, [r7, #4]
 801101c:	f000 fb27 	bl	801166e <USBD_CtlError>
        err++;
 8011020:	7afb      	ldrb	r3, [r7, #11]
 8011022:	3301      	adds	r3, #1
 8011024:	72fb      	strb	r3, [r7, #11]
      break;
 8011026:	e11e      	b.n	8011266 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	687a      	ldr	r2, [r7, #4]
 8011032:	7c12      	ldrb	r2, [r2, #16]
 8011034:	f107 0108 	add.w	r1, r7, #8
 8011038:	4610      	mov	r0, r2
 801103a:	4798      	blx	r3
 801103c:	60f8      	str	r0, [r7, #12]
      break;
 801103e:	e112      	b.n	8011266 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	7c1b      	ldrb	r3, [r3, #16]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d10d      	bne.n	8011064 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801104e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011050:	f107 0208 	add.w	r2, r7, #8
 8011054:	4610      	mov	r0, r2
 8011056:	4798      	blx	r3
 8011058:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	3301      	adds	r3, #1
 801105e:	2202      	movs	r2, #2
 8011060:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011062:	e100      	b.n	8011266 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801106a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801106c:	f107 0208 	add.w	r2, r7, #8
 8011070:	4610      	mov	r0, r2
 8011072:	4798      	blx	r3
 8011074:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	3301      	adds	r3, #1
 801107a:	2202      	movs	r2, #2
 801107c:	701a      	strb	r2, [r3, #0]
      break;
 801107e:	e0f2      	b.n	8011266 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011080:	683b      	ldr	r3, [r7, #0]
 8011082:	885b      	ldrh	r3, [r3, #2]
 8011084:	b2db      	uxtb	r3, r3
 8011086:	2b05      	cmp	r3, #5
 8011088:	f200 80ac 	bhi.w	80111e4 <USBD_GetDescriptor+0x258>
 801108c:	a201      	add	r2, pc, #4	; (adr r2, 8011094 <USBD_GetDescriptor+0x108>)
 801108e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011092:	bf00      	nop
 8011094:	080110ad 	.word	0x080110ad
 8011098:	080110e1 	.word	0x080110e1
 801109c:	08011115 	.word	0x08011115
 80110a0:	08011149 	.word	0x08011149
 80110a4:	0801117d 	.word	0x0801117d
 80110a8:	080111b1 	.word	0x080111b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80110b2:	685b      	ldr	r3, [r3, #4]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d00b      	beq.n	80110d0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80110be:	685b      	ldr	r3, [r3, #4]
 80110c0:	687a      	ldr	r2, [r7, #4]
 80110c2:	7c12      	ldrb	r2, [r2, #16]
 80110c4:	f107 0108 	add.w	r1, r7, #8
 80110c8:	4610      	mov	r0, r2
 80110ca:	4798      	blx	r3
 80110cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80110ce:	e091      	b.n	80111f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80110d0:	6839      	ldr	r1, [r7, #0]
 80110d2:	6878      	ldr	r0, [r7, #4]
 80110d4:	f000 facb 	bl	801166e <USBD_CtlError>
            err++;
 80110d8:	7afb      	ldrb	r3, [r7, #11]
 80110da:	3301      	adds	r3, #1
 80110dc:	72fb      	strb	r3, [r7, #11]
          break;
 80110de:	e089      	b.n	80111f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80110e6:	689b      	ldr	r3, [r3, #8]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d00b      	beq.n	8011104 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80110f2:	689b      	ldr	r3, [r3, #8]
 80110f4:	687a      	ldr	r2, [r7, #4]
 80110f6:	7c12      	ldrb	r2, [r2, #16]
 80110f8:	f107 0108 	add.w	r1, r7, #8
 80110fc:	4610      	mov	r0, r2
 80110fe:	4798      	blx	r3
 8011100:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011102:	e077      	b.n	80111f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011104:	6839      	ldr	r1, [r7, #0]
 8011106:	6878      	ldr	r0, [r7, #4]
 8011108:	f000 fab1 	bl	801166e <USBD_CtlError>
            err++;
 801110c:	7afb      	ldrb	r3, [r7, #11]
 801110e:	3301      	adds	r3, #1
 8011110:	72fb      	strb	r3, [r7, #11]
          break;
 8011112:	e06f      	b.n	80111f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801111a:	68db      	ldr	r3, [r3, #12]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d00b      	beq.n	8011138 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011126:	68db      	ldr	r3, [r3, #12]
 8011128:	687a      	ldr	r2, [r7, #4]
 801112a:	7c12      	ldrb	r2, [r2, #16]
 801112c:	f107 0108 	add.w	r1, r7, #8
 8011130:	4610      	mov	r0, r2
 8011132:	4798      	blx	r3
 8011134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011136:	e05d      	b.n	80111f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011138:	6839      	ldr	r1, [r7, #0]
 801113a:	6878      	ldr	r0, [r7, #4]
 801113c:	f000 fa97 	bl	801166e <USBD_CtlError>
            err++;
 8011140:	7afb      	ldrb	r3, [r7, #11]
 8011142:	3301      	adds	r3, #1
 8011144:	72fb      	strb	r3, [r7, #11]
          break;
 8011146:	e055      	b.n	80111f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801114e:	691b      	ldr	r3, [r3, #16]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d00b      	beq.n	801116c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801115a:	691b      	ldr	r3, [r3, #16]
 801115c:	687a      	ldr	r2, [r7, #4]
 801115e:	7c12      	ldrb	r2, [r2, #16]
 8011160:	f107 0108 	add.w	r1, r7, #8
 8011164:	4610      	mov	r0, r2
 8011166:	4798      	blx	r3
 8011168:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801116a:	e043      	b.n	80111f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801116c:	6839      	ldr	r1, [r7, #0]
 801116e:	6878      	ldr	r0, [r7, #4]
 8011170:	f000 fa7d 	bl	801166e <USBD_CtlError>
            err++;
 8011174:	7afb      	ldrb	r3, [r7, #11]
 8011176:	3301      	adds	r3, #1
 8011178:	72fb      	strb	r3, [r7, #11]
          break;
 801117a:	e03b      	b.n	80111f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011182:	695b      	ldr	r3, [r3, #20]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d00b      	beq.n	80111a0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801118e:	695b      	ldr	r3, [r3, #20]
 8011190:	687a      	ldr	r2, [r7, #4]
 8011192:	7c12      	ldrb	r2, [r2, #16]
 8011194:	f107 0108 	add.w	r1, r7, #8
 8011198:	4610      	mov	r0, r2
 801119a:	4798      	blx	r3
 801119c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801119e:	e029      	b.n	80111f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80111a0:	6839      	ldr	r1, [r7, #0]
 80111a2:	6878      	ldr	r0, [r7, #4]
 80111a4:	f000 fa63 	bl	801166e <USBD_CtlError>
            err++;
 80111a8:	7afb      	ldrb	r3, [r7, #11]
 80111aa:	3301      	adds	r3, #1
 80111ac:	72fb      	strb	r3, [r7, #11]
          break;
 80111ae:	e021      	b.n	80111f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80111b6:	699b      	ldr	r3, [r3, #24]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d00b      	beq.n	80111d4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80111c2:	699b      	ldr	r3, [r3, #24]
 80111c4:	687a      	ldr	r2, [r7, #4]
 80111c6:	7c12      	ldrb	r2, [r2, #16]
 80111c8:	f107 0108 	add.w	r1, r7, #8
 80111cc:	4610      	mov	r0, r2
 80111ce:	4798      	blx	r3
 80111d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80111d2:	e00f      	b.n	80111f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80111d4:	6839      	ldr	r1, [r7, #0]
 80111d6:	6878      	ldr	r0, [r7, #4]
 80111d8:	f000 fa49 	bl	801166e <USBD_CtlError>
            err++;
 80111dc:	7afb      	ldrb	r3, [r7, #11]
 80111de:	3301      	adds	r3, #1
 80111e0:	72fb      	strb	r3, [r7, #11]
          break;
 80111e2:	e007      	b.n	80111f4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80111e4:	6839      	ldr	r1, [r7, #0]
 80111e6:	6878      	ldr	r0, [r7, #4]
 80111e8:	f000 fa41 	bl	801166e <USBD_CtlError>
          err++;
 80111ec:	7afb      	ldrb	r3, [r7, #11]
 80111ee:	3301      	adds	r3, #1
 80111f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80111f2:	bf00      	nop
      }
      break;
 80111f4:	e037      	b.n	8011266 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	7c1b      	ldrb	r3, [r3, #16]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d109      	bne.n	8011212 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011206:	f107 0208 	add.w	r2, r7, #8
 801120a:	4610      	mov	r0, r2
 801120c:	4798      	blx	r3
 801120e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011210:	e029      	b.n	8011266 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011212:	6839      	ldr	r1, [r7, #0]
 8011214:	6878      	ldr	r0, [r7, #4]
 8011216:	f000 fa2a 	bl	801166e <USBD_CtlError>
        err++;
 801121a:	7afb      	ldrb	r3, [r7, #11]
 801121c:	3301      	adds	r3, #1
 801121e:	72fb      	strb	r3, [r7, #11]
      break;
 8011220:	e021      	b.n	8011266 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	7c1b      	ldrb	r3, [r3, #16]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d10d      	bne.n	8011246 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011232:	f107 0208 	add.w	r2, r7, #8
 8011236:	4610      	mov	r0, r2
 8011238:	4798      	blx	r3
 801123a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	3301      	adds	r3, #1
 8011240:	2207      	movs	r2, #7
 8011242:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011244:	e00f      	b.n	8011266 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011246:	6839      	ldr	r1, [r7, #0]
 8011248:	6878      	ldr	r0, [r7, #4]
 801124a:	f000 fa10 	bl	801166e <USBD_CtlError>
        err++;
 801124e:	7afb      	ldrb	r3, [r7, #11]
 8011250:	3301      	adds	r3, #1
 8011252:	72fb      	strb	r3, [r7, #11]
      break;
 8011254:	e007      	b.n	8011266 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8011256:	6839      	ldr	r1, [r7, #0]
 8011258:	6878      	ldr	r0, [r7, #4]
 801125a:	f000 fa08 	bl	801166e <USBD_CtlError>
      err++;
 801125e:	7afb      	ldrb	r3, [r7, #11]
 8011260:	3301      	adds	r3, #1
 8011262:	72fb      	strb	r3, [r7, #11]
      break;
 8011264:	bf00      	nop
  }

  if (err != 0U)
 8011266:	7afb      	ldrb	r3, [r7, #11]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d11e      	bne.n	80112aa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 801126c:	683b      	ldr	r3, [r7, #0]
 801126e:	88db      	ldrh	r3, [r3, #6]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d016      	beq.n	80112a2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8011274:	893b      	ldrh	r3, [r7, #8]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d00e      	beq.n	8011298 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801127a:	683b      	ldr	r3, [r7, #0]
 801127c:	88da      	ldrh	r2, [r3, #6]
 801127e:	893b      	ldrh	r3, [r7, #8]
 8011280:	4293      	cmp	r3, r2
 8011282:	bf28      	it	cs
 8011284:	4613      	movcs	r3, r2
 8011286:	b29b      	uxth	r3, r3
 8011288:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801128a:	893b      	ldrh	r3, [r7, #8]
 801128c:	461a      	mov	r2, r3
 801128e:	68f9      	ldr	r1, [r7, #12]
 8011290:	6878      	ldr	r0, [r7, #4]
 8011292:	f000 fa5d 	bl	8011750 <USBD_CtlSendData>
 8011296:	e009      	b.n	80112ac <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011298:	6839      	ldr	r1, [r7, #0]
 801129a:	6878      	ldr	r0, [r7, #4]
 801129c:	f000 f9e7 	bl	801166e <USBD_CtlError>
 80112a0:	e004      	b.n	80112ac <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80112a2:	6878      	ldr	r0, [r7, #4]
 80112a4:	f000 fa91 	bl	80117ca <USBD_CtlSendStatus>
 80112a8:	e000      	b.n	80112ac <USBD_GetDescriptor+0x320>
    return;
 80112aa:	bf00      	nop
  }
}
 80112ac:	3710      	adds	r7, #16
 80112ae:	46bd      	mov	sp, r7
 80112b0:	bd80      	pop	{r7, pc}
 80112b2:	bf00      	nop

080112b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b084      	sub	sp, #16
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
 80112bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80112be:	683b      	ldr	r3, [r7, #0]
 80112c0:	889b      	ldrh	r3, [r3, #4]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d131      	bne.n	801132a <USBD_SetAddress+0x76>
 80112c6:	683b      	ldr	r3, [r7, #0]
 80112c8:	88db      	ldrh	r3, [r3, #6]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d12d      	bne.n	801132a <USBD_SetAddress+0x76>
 80112ce:	683b      	ldr	r3, [r7, #0]
 80112d0:	885b      	ldrh	r3, [r3, #2]
 80112d2:	2b7f      	cmp	r3, #127	; 0x7f
 80112d4:	d829      	bhi.n	801132a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80112d6:	683b      	ldr	r3, [r7, #0]
 80112d8:	885b      	ldrh	r3, [r3, #2]
 80112da:	b2db      	uxtb	r3, r3
 80112dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80112e8:	b2db      	uxtb	r3, r3
 80112ea:	2b03      	cmp	r3, #3
 80112ec:	d104      	bne.n	80112f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80112ee:	6839      	ldr	r1, [r7, #0]
 80112f0:	6878      	ldr	r0, [r7, #4]
 80112f2:	f000 f9bc 	bl	801166e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80112f6:	e01d      	b.n	8011334 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	7bfa      	ldrb	r2, [r7, #15]
 80112fc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011300:	7bfb      	ldrb	r3, [r7, #15]
 8011302:	4619      	mov	r1, r3
 8011304:	6878      	ldr	r0, [r7, #4]
 8011306:	f006 f9d8 	bl	80176ba <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801130a:	6878      	ldr	r0, [r7, #4]
 801130c:	f000 fa5d 	bl	80117ca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011310:	7bfb      	ldrb	r3, [r7, #15]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d004      	beq.n	8011320 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	2202      	movs	r2, #2
 801131a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801131e:	e009      	b.n	8011334 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	2201      	movs	r2, #1
 8011324:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011328:	e004      	b.n	8011334 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801132a:	6839      	ldr	r1, [r7, #0]
 801132c:	6878      	ldr	r0, [r7, #4]
 801132e:	f000 f99e 	bl	801166e <USBD_CtlError>
  }
}
 8011332:	bf00      	nop
 8011334:	bf00      	nop
 8011336:	3710      	adds	r7, #16
 8011338:	46bd      	mov	sp, r7
 801133a:	bd80      	pop	{r7, pc}

0801133c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801133c:	b580      	push	{r7, lr}
 801133e:	b084      	sub	sp, #16
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
 8011344:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011346:	2300      	movs	r3, #0
 8011348:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801134a:	683b      	ldr	r3, [r7, #0]
 801134c:	885b      	ldrh	r3, [r3, #2]
 801134e:	b2da      	uxtb	r2, r3
 8011350:	4b4e      	ldr	r3, [pc, #312]	; (801148c <USBD_SetConfig+0x150>)
 8011352:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011354:	4b4d      	ldr	r3, [pc, #308]	; (801148c <USBD_SetConfig+0x150>)
 8011356:	781b      	ldrb	r3, [r3, #0]
 8011358:	2b01      	cmp	r3, #1
 801135a:	d905      	bls.n	8011368 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801135c:	6839      	ldr	r1, [r7, #0]
 801135e:	6878      	ldr	r0, [r7, #4]
 8011360:	f000 f985 	bl	801166e <USBD_CtlError>
    return USBD_FAIL;
 8011364:	2303      	movs	r3, #3
 8011366:	e08c      	b.n	8011482 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801136e:	b2db      	uxtb	r3, r3
 8011370:	2b02      	cmp	r3, #2
 8011372:	d002      	beq.n	801137a <USBD_SetConfig+0x3e>
 8011374:	2b03      	cmp	r3, #3
 8011376:	d029      	beq.n	80113cc <USBD_SetConfig+0x90>
 8011378:	e075      	b.n	8011466 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801137a:	4b44      	ldr	r3, [pc, #272]	; (801148c <USBD_SetConfig+0x150>)
 801137c:	781b      	ldrb	r3, [r3, #0]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d020      	beq.n	80113c4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8011382:	4b42      	ldr	r3, [pc, #264]	; (801148c <USBD_SetConfig+0x150>)
 8011384:	781b      	ldrb	r3, [r3, #0]
 8011386:	461a      	mov	r2, r3
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801138c:	4b3f      	ldr	r3, [pc, #252]	; (801148c <USBD_SetConfig+0x150>)
 801138e:	781b      	ldrb	r3, [r3, #0]
 8011390:	4619      	mov	r1, r3
 8011392:	6878      	ldr	r0, [r7, #4]
 8011394:	f7fe ffbc 	bl	8010310 <USBD_SetClassConfig>
 8011398:	4603      	mov	r3, r0
 801139a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801139c:	7bfb      	ldrb	r3, [r7, #15]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d008      	beq.n	80113b4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80113a2:	6839      	ldr	r1, [r7, #0]
 80113a4:	6878      	ldr	r0, [r7, #4]
 80113a6:	f000 f962 	bl	801166e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	2202      	movs	r2, #2
 80113ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80113b2:	e065      	b.n	8011480 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80113b4:	6878      	ldr	r0, [r7, #4]
 80113b6:	f000 fa08 	bl	80117ca <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	2203      	movs	r2, #3
 80113be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80113c2:	e05d      	b.n	8011480 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80113c4:	6878      	ldr	r0, [r7, #4]
 80113c6:	f000 fa00 	bl	80117ca <USBD_CtlSendStatus>
      break;
 80113ca:	e059      	b.n	8011480 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80113cc:	4b2f      	ldr	r3, [pc, #188]	; (801148c <USBD_SetConfig+0x150>)
 80113ce:	781b      	ldrb	r3, [r3, #0]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d112      	bne.n	80113fa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	2202      	movs	r2, #2
 80113d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80113dc:	4b2b      	ldr	r3, [pc, #172]	; (801148c <USBD_SetConfig+0x150>)
 80113de:	781b      	ldrb	r3, [r3, #0]
 80113e0:	461a      	mov	r2, r3
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80113e6:	4b29      	ldr	r3, [pc, #164]	; (801148c <USBD_SetConfig+0x150>)
 80113e8:	781b      	ldrb	r3, [r3, #0]
 80113ea:	4619      	mov	r1, r3
 80113ec:	6878      	ldr	r0, [r7, #4]
 80113ee:	f7fe ffab 	bl	8010348 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80113f2:	6878      	ldr	r0, [r7, #4]
 80113f4:	f000 f9e9 	bl	80117ca <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80113f8:	e042      	b.n	8011480 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80113fa:	4b24      	ldr	r3, [pc, #144]	; (801148c <USBD_SetConfig+0x150>)
 80113fc:	781b      	ldrb	r3, [r3, #0]
 80113fe:	461a      	mov	r2, r3
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	685b      	ldr	r3, [r3, #4]
 8011404:	429a      	cmp	r2, r3
 8011406:	d02a      	beq.n	801145e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	685b      	ldr	r3, [r3, #4]
 801140c:	b2db      	uxtb	r3, r3
 801140e:	4619      	mov	r1, r3
 8011410:	6878      	ldr	r0, [r7, #4]
 8011412:	f7fe ff99 	bl	8010348 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011416:	4b1d      	ldr	r3, [pc, #116]	; (801148c <USBD_SetConfig+0x150>)
 8011418:	781b      	ldrb	r3, [r3, #0]
 801141a:	461a      	mov	r2, r3
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011420:	4b1a      	ldr	r3, [pc, #104]	; (801148c <USBD_SetConfig+0x150>)
 8011422:	781b      	ldrb	r3, [r3, #0]
 8011424:	4619      	mov	r1, r3
 8011426:	6878      	ldr	r0, [r7, #4]
 8011428:	f7fe ff72 	bl	8010310 <USBD_SetClassConfig>
 801142c:	4603      	mov	r3, r0
 801142e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011430:	7bfb      	ldrb	r3, [r7, #15]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d00f      	beq.n	8011456 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8011436:	6839      	ldr	r1, [r7, #0]
 8011438:	6878      	ldr	r0, [r7, #4]
 801143a:	f000 f918 	bl	801166e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	685b      	ldr	r3, [r3, #4]
 8011442:	b2db      	uxtb	r3, r3
 8011444:	4619      	mov	r1, r3
 8011446:	6878      	ldr	r0, [r7, #4]
 8011448:	f7fe ff7e 	bl	8010348 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	2202      	movs	r2, #2
 8011450:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011454:	e014      	b.n	8011480 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011456:	6878      	ldr	r0, [r7, #4]
 8011458:	f000 f9b7 	bl	80117ca <USBD_CtlSendStatus>
      break;
 801145c:	e010      	b.n	8011480 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801145e:	6878      	ldr	r0, [r7, #4]
 8011460:	f000 f9b3 	bl	80117ca <USBD_CtlSendStatus>
      break;
 8011464:	e00c      	b.n	8011480 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8011466:	6839      	ldr	r1, [r7, #0]
 8011468:	6878      	ldr	r0, [r7, #4]
 801146a:	f000 f900 	bl	801166e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801146e:	4b07      	ldr	r3, [pc, #28]	; (801148c <USBD_SetConfig+0x150>)
 8011470:	781b      	ldrb	r3, [r3, #0]
 8011472:	4619      	mov	r1, r3
 8011474:	6878      	ldr	r0, [r7, #4]
 8011476:	f7fe ff67 	bl	8010348 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801147a:	2303      	movs	r3, #3
 801147c:	73fb      	strb	r3, [r7, #15]
      break;
 801147e:	bf00      	nop
  }

  return ret;
 8011480:	7bfb      	ldrb	r3, [r7, #15]
}
 8011482:	4618      	mov	r0, r3
 8011484:	3710      	adds	r7, #16
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}
 801148a:	bf00      	nop
 801148c:	20006714 	.word	0x20006714

08011490 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b082      	sub	sp, #8
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
 8011498:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801149a:	683b      	ldr	r3, [r7, #0]
 801149c:	88db      	ldrh	r3, [r3, #6]
 801149e:	2b01      	cmp	r3, #1
 80114a0:	d004      	beq.n	80114ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80114a2:	6839      	ldr	r1, [r7, #0]
 80114a4:	6878      	ldr	r0, [r7, #4]
 80114a6:	f000 f8e2 	bl	801166e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80114aa:	e023      	b.n	80114f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80114b2:	b2db      	uxtb	r3, r3
 80114b4:	2b02      	cmp	r3, #2
 80114b6:	dc02      	bgt.n	80114be <USBD_GetConfig+0x2e>
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	dc03      	bgt.n	80114c4 <USBD_GetConfig+0x34>
 80114bc:	e015      	b.n	80114ea <USBD_GetConfig+0x5a>
 80114be:	2b03      	cmp	r3, #3
 80114c0:	d00b      	beq.n	80114da <USBD_GetConfig+0x4a>
 80114c2:	e012      	b.n	80114ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	2200      	movs	r2, #0
 80114c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	3308      	adds	r3, #8
 80114ce:	2201      	movs	r2, #1
 80114d0:	4619      	mov	r1, r3
 80114d2:	6878      	ldr	r0, [r7, #4]
 80114d4:	f000 f93c 	bl	8011750 <USBD_CtlSendData>
        break;
 80114d8:	e00c      	b.n	80114f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	3304      	adds	r3, #4
 80114de:	2201      	movs	r2, #1
 80114e0:	4619      	mov	r1, r3
 80114e2:	6878      	ldr	r0, [r7, #4]
 80114e4:	f000 f934 	bl	8011750 <USBD_CtlSendData>
        break;
 80114e8:	e004      	b.n	80114f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80114ea:	6839      	ldr	r1, [r7, #0]
 80114ec:	6878      	ldr	r0, [r7, #4]
 80114ee:	f000 f8be 	bl	801166e <USBD_CtlError>
        break;
 80114f2:	bf00      	nop
}
 80114f4:	bf00      	nop
 80114f6:	3708      	adds	r7, #8
 80114f8:	46bd      	mov	sp, r7
 80114fa:	bd80      	pop	{r7, pc}

080114fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80114fc:	b580      	push	{r7, lr}
 80114fe:	b082      	sub	sp, #8
 8011500:	af00      	add	r7, sp, #0
 8011502:	6078      	str	r0, [r7, #4]
 8011504:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801150c:	b2db      	uxtb	r3, r3
 801150e:	3b01      	subs	r3, #1
 8011510:	2b02      	cmp	r3, #2
 8011512:	d81e      	bhi.n	8011552 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011514:	683b      	ldr	r3, [r7, #0]
 8011516:	88db      	ldrh	r3, [r3, #6]
 8011518:	2b02      	cmp	r3, #2
 801151a:	d004      	beq.n	8011526 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801151c:	6839      	ldr	r1, [r7, #0]
 801151e:	6878      	ldr	r0, [r7, #4]
 8011520:	f000 f8a5 	bl	801166e <USBD_CtlError>
        break;
 8011524:	e01a      	b.n	801155c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	2201      	movs	r2, #1
 801152a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8011532:	2b00      	cmp	r3, #0
 8011534:	d005      	beq.n	8011542 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	68db      	ldr	r3, [r3, #12]
 801153a:	f043 0202 	orr.w	r2, r3, #2
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	330c      	adds	r3, #12
 8011546:	2202      	movs	r2, #2
 8011548:	4619      	mov	r1, r3
 801154a:	6878      	ldr	r0, [r7, #4]
 801154c:	f000 f900 	bl	8011750 <USBD_CtlSendData>
      break;
 8011550:	e004      	b.n	801155c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8011552:	6839      	ldr	r1, [r7, #0]
 8011554:	6878      	ldr	r0, [r7, #4]
 8011556:	f000 f88a 	bl	801166e <USBD_CtlError>
      break;
 801155a:	bf00      	nop
  }
}
 801155c:	bf00      	nop
 801155e:	3708      	adds	r7, #8
 8011560:	46bd      	mov	sp, r7
 8011562:	bd80      	pop	{r7, pc}

08011564 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011564:	b580      	push	{r7, lr}
 8011566:	b082      	sub	sp, #8
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
 801156c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801156e:	683b      	ldr	r3, [r7, #0]
 8011570:	885b      	ldrh	r3, [r3, #2]
 8011572:	2b01      	cmp	r3, #1
 8011574:	d107      	bne.n	8011586 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	2201      	movs	r2, #1
 801157a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801157e:	6878      	ldr	r0, [r7, #4]
 8011580:	f000 f923 	bl	80117ca <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8011584:	e013      	b.n	80115ae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8011586:	683b      	ldr	r3, [r7, #0]
 8011588:	885b      	ldrh	r3, [r3, #2]
 801158a:	2b02      	cmp	r3, #2
 801158c:	d10b      	bne.n	80115a6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 801158e:	683b      	ldr	r3, [r7, #0]
 8011590:	889b      	ldrh	r3, [r3, #4]
 8011592:	0a1b      	lsrs	r3, r3, #8
 8011594:	b29b      	uxth	r3, r3
 8011596:	b2da      	uxtb	r2, r3
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801159e:	6878      	ldr	r0, [r7, #4]
 80115a0:	f000 f913 	bl	80117ca <USBD_CtlSendStatus>
}
 80115a4:	e003      	b.n	80115ae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80115a6:	6839      	ldr	r1, [r7, #0]
 80115a8:	6878      	ldr	r0, [r7, #4]
 80115aa:	f000 f860 	bl	801166e <USBD_CtlError>
}
 80115ae:	bf00      	nop
 80115b0:	3708      	adds	r7, #8
 80115b2:	46bd      	mov	sp, r7
 80115b4:	bd80      	pop	{r7, pc}

080115b6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80115b6:	b580      	push	{r7, lr}
 80115b8:	b082      	sub	sp, #8
 80115ba:	af00      	add	r7, sp, #0
 80115bc:	6078      	str	r0, [r7, #4]
 80115be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80115c6:	b2db      	uxtb	r3, r3
 80115c8:	3b01      	subs	r3, #1
 80115ca:	2b02      	cmp	r3, #2
 80115cc:	d80b      	bhi.n	80115e6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80115ce:	683b      	ldr	r3, [r7, #0]
 80115d0:	885b      	ldrh	r3, [r3, #2]
 80115d2:	2b01      	cmp	r3, #1
 80115d4:	d10c      	bne.n	80115f0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	2200      	movs	r2, #0
 80115da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80115de:	6878      	ldr	r0, [r7, #4]
 80115e0:	f000 f8f3 	bl	80117ca <USBD_CtlSendStatus>
      }
      break;
 80115e4:	e004      	b.n	80115f0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80115e6:	6839      	ldr	r1, [r7, #0]
 80115e8:	6878      	ldr	r0, [r7, #4]
 80115ea:	f000 f840 	bl	801166e <USBD_CtlError>
      break;
 80115ee:	e000      	b.n	80115f2 <USBD_ClrFeature+0x3c>
      break;
 80115f0:	bf00      	nop
  }
}
 80115f2:	bf00      	nop
 80115f4:	3708      	adds	r7, #8
 80115f6:	46bd      	mov	sp, r7
 80115f8:	bd80      	pop	{r7, pc}

080115fa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80115fa:	b580      	push	{r7, lr}
 80115fc:	b084      	sub	sp, #16
 80115fe:	af00      	add	r7, sp, #0
 8011600:	6078      	str	r0, [r7, #4]
 8011602:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011604:	683b      	ldr	r3, [r7, #0]
 8011606:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	781a      	ldrb	r2, [r3, #0]
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	3301      	adds	r3, #1
 8011614:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	781a      	ldrb	r2, [r3, #0]
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	3301      	adds	r3, #1
 8011622:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011624:	68f8      	ldr	r0, [r7, #12]
 8011626:	f7ff fa16 	bl	8010a56 <SWAPBYTE>
 801162a:	4603      	mov	r3, r0
 801162c:	461a      	mov	r2, r3
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	3301      	adds	r3, #1
 8011636:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	3301      	adds	r3, #1
 801163c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801163e:	68f8      	ldr	r0, [r7, #12]
 8011640:	f7ff fa09 	bl	8010a56 <SWAPBYTE>
 8011644:	4603      	mov	r3, r0
 8011646:	461a      	mov	r2, r3
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	3301      	adds	r3, #1
 8011650:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	3301      	adds	r3, #1
 8011656:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011658:	68f8      	ldr	r0, [r7, #12]
 801165a:	f7ff f9fc 	bl	8010a56 <SWAPBYTE>
 801165e:	4603      	mov	r3, r0
 8011660:	461a      	mov	r2, r3
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	80da      	strh	r2, [r3, #6]
}
 8011666:	bf00      	nop
 8011668:	3710      	adds	r7, #16
 801166a:	46bd      	mov	sp, r7
 801166c:	bd80      	pop	{r7, pc}

0801166e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801166e:	b580      	push	{r7, lr}
 8011670:	b082      	sub	sp, #8
 8011672:	af00      	add	r7, sp, #0
 8011674:	6078      	str	r0, [r7, #4]
 8011676:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011678:	2180      	movs	r1, #128	; 0x80
 801167a:	6878      	ldr	r0, [r7, #4]
 801167c:	f005 ffb3 	bl	80175e6 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011680:	2100      	movs	r1, #0
 8011682:	6878      	ldr	r0, [r7, #4]
 8011684:	f005 ffaf 	bl	80175e6 <USBD_LL_StallEP>
}
 8011688:	bf00      	nop
 801168a:	3708      	adds	r7, #8
 801168c:	46bd      	mov	sp, r7
 801168e:	bd80      	pop	{r7, pc}

08011690 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b086      	sub	sp, #24
 8011694:	af00      	add	r7, sp, #0
 8011696:	60f8      	str	r0, [r7, #12]
 8011698:	60b9      	str	r1, [r7, #8]
 801169a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801169c:	2300      	movs	r3, #0
 801169e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d036      	beq.n	8011714 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80116aa:	6938      	ldr	r0, [r7, #16]
 80116ac:	f000 f836 	bl	801171c <USBD_GetLen>
 80116b0:	4603      	mov	r3, r0
 80116b2:	3301      	adds	r3, #1
 80116b4:	b29b      	uxth	r3, r3
 80116b6:	005b      	lsls	r3, r3, #1
 80116b8:	b29a      	uxth	r2, r3
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80116be:	7dfb      	ldrb	r3, [r7, #23]
 80116c0:	68ba      	ldr	r2, [r7, #8]
 80116c2:	4413      	add	r3, r2
 80116c4:	687a      	ldr	r2, [r7, #4]
 80116c6:	7812      	ldrb	r2, [r2, #0]
 80116c8:	701a      	strb	r2, [r3, #0]
  idx++;
 80116ca:	7dfb      	ldrb	r3, [r7, #23]
 80116cc:	3301      	adds	r3, #1
 80116ce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80116d0:	7dfb      	ldrb	r3, [r7, #23]
 80116d2:	68ba      	ldr	r2, [r7, #8]
 80116d4:	4413      	add	r3, r2
 80116d6:	2203      	movs	r2, #3
 80116d8:	701a      	strb	r2, [r3, #0]
  idx++;
 80116da:	7dfb      	ldrb	r3, [r7, #23]
 80116dc:	3301      	adds	r3, #1
 80116de:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80116e0:	e013      	b.n	801170a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80116e2:	7dfb      	ldrb	r3, [r7, #23]
 80116e4:	68ba      	ldr	r2, [r7, #8]
 80116e6:	4413      	add	r3, r2
 80116e8:	693a      	ldr	r2, [r7, #16]
 80116ea:	7812      	ldrb	r2, [r2, #0]
 80116ec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80116ee:	693b      	ldr	r3, [r7, #16]
 80116f0:	3301      	adds	r3, #1
 80116f2:	613b      	str	r3, [r7, #16]
    idx++;
 80116f4:	7dfb      	ldrb	r3, [r7, #23]
 80116f6:	3301      	adds	r3, #1
 80116f8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80116fa:	7dfb      	ldrb	r3, [r7, #23]
 80116fc:	68ba      	ldr	r2, [r7, #8]
 80116fe:	4413      	add	r3, r2
 8011700:	2200      	movs	r2, #0
 8011702:	701a      	strb	r2, [r3, #0]
    idx++;
 8011704:	7dfb      	ldrb	r3, [r7, #23]
 8011706:	3301      	adds	r3, #1
 8011708:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801170a:	693b      	ldr	r3, [r7, #16]
 801170c:	781b      	ldrb	r3, [r3, #0]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d1e7      	bne.n	80116e2 <USBD_GetString+0x52>
 8011712:	e000      	b.n	8011716 <USBD_GetString+0x86>
    return;
 8011714:	bf00      	nop
  }
}
 8011716:	3718      	adds	r7, #24
 8011718:	46bd      	mov	sp, r7
 801171a:	bd80      	pop	{r7, pc}

0801171c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801171c:	b480      	push	{r7}
 801171e:	b085      	sub	sp, #20
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011724:	2300      	movs	r3, #0
 8011726:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801172c:	e005      	b.n	801173a <USBD_GetLen+0x1e>
  {
    len++;
 801172e:	7bfb      	ldrb	r3, [r7, #15]
 8011730:	3301      	adds	r3, #1
 8011732:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011734:	68bb      	ldr	r3, [r7, #8]
 8011736:	3301      	adds	r3, #1
 8011738:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801173a:	68bb      	ldr	r3, [r7, #8]
 801173c:	781b      	ldrb	r3, [r3, #0]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d1f5      	bne.n	801172e <USBD_GetLen+0x12>
  }

  return len;
 8011742:	7bfb      	ldrb	r3, [r7, #15]
}
 8011744:	4618      	mov	r0, r3
 8011746:	3714      	adds	r7, #20
 8011748:	46bd      	mov	sp, r7
 801174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174e:	4770      	bx	lr

08011750 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011750:	b580      	push	{r7, lr}
 8011752:	b084      	sub	sp, #16
 8011754:	af00      	add	r7, sp, #0
 8011756:	60f8      	str	r0, [r7, #12]
 8011758:	60b9      	str	r1, [r7, #8]
 801175a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	2202      	movs	r2, #2
 8011760:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	687a      	ldr	r2, [r7, #4]
 8011768:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	687a      	ldr	r2, [r7, #4]
 801176e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	68ba      	ldr	r2, [r7, #8]
 8011774:	2100      	movs	r1, #0
 8011776:	68f8      	ldr	r0, [r7, #12]
 8011778:	f005 ffbe 	bl	80176f8 <USBD_LL_Transmit>

  return USBD_OK;
 801177c:	2300      	movs	r3, #0
}
 801177e:	4618      	mov	r0, r3
 8011780:	3710      	adds	r7, #16
 8011782:	46bd      	mov	sp, r7
 8011784:	bd80      	pop	{r7, pc}

08011786 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011786:	b580      	push	{r7, lr}
 8011788:	b084      	sub	sp, #16
 801178a:	af00      	add	r7, sp, #0
 801178c:	60f8      	str	r0, [r7, #12]
 801178e:	60b9      	str	r1, [r7, #8]
 8011790:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	68ba      	ldr	r2, [r7, #8]
 8011796:	2100      	movs	r1, #0
 8011798:	68f8      	ldr	r0, [r7, #12]
 801179a:	f005 ffad 	bl	80176f8 <USBD_LL_Transmit>

  return USBD_OK;
 801179e:	2300      	movs	r3, #0
}
 80117a0:	4618      	mov	r0, r3
 80117a2:	3710      	adds	r7, #16
 80117a4:	46bd      	mov	sp, r7
 80117a6:	bd80      	pop	{r7, pc}

080117a8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80117a8:	b580      	push	{r7, lr}
 80117aa:	b084      	sub	sp, #16
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	60f8      	str	r0, [r7, #12]
 80117b0:	60b9      	str	r1, [r7, #8]
 80117b2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	68ba      	ldr	r2, [r7, #8]
 80117b8:	2100      	movs	r1, #0
 80117ba:	68f8      	ldr	r0, [r7, #12]
 80117bc:	f005 ffbd 	bl	801773a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80117c0:	2300      	movs	r3, #0
}
 80117c2:	4618      	mov	r0, r3
 80117c4:	3710      	adds	r7, #16
 80117c6:	46bd      	mov	sp, r7
 80117c8:	bd80      	pop	{r7, pc}

080117ca <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80117ca:	b580      	push	{r7, lr}
 80117cc:	b082      	sub	sp, #8
 80117ce:	af00      	add	r7, sp, #0
 80117d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	2204      	movs	r2, #4
 80117d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80117da:	2300      	movs	r3, #0
 80117dc:	2200      	movs	r2, #0
 80117de:	2100      	movs	r1, #0
 80117e0:	6878      	ldr	r0, [r7, #4]
 80117e2:	f005 ff89 	bl	80176f8 <USBD_LL_Transmit>

  return USBD_OK;
 80117e6:	2300      	movs	r3, #0
}
 80117e8:	4618      	mov	r0, r3
 80117ea:	3708      	adds	r7, #8
 80117ec:	46bd      	mov	sp, r7
 80117ee:	bd80      	pop	{r7, pc}

080117f0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b082      	sub	sp, #8
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	2205      	movs	r2, #5
 80117fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011800:	2300      	movs	r3, #0
 8011802:	2200      	movs	r2, #0
 8011804:	2100      	movs	r1, #0
 8011806:	6878      	ldr	r0, [r7, #4]
 8011808:	f005 ff97 	bl	801773a <USBD_LL_PrepareReceive>

  return USBD_OK;
 801180c:	2300      	movs	r3, #0
}
 801180e:	4618      	mov	r0, r3
 8011810:	3708      	adds	r7, #8
 8011812:	46bd      	mov	sp, r7
 8011814:	bd80      	pop	{r7, pc}
	...

08011818 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011818:	b580      	push	{r7, lr}
 801181a:	b084      	sub	sp, #16
 801181c:	af00      	add	r7, sp, #0
 801181e:	4603      	mov	r3, r0
 8011820:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011822:	79fb      	ldrb	r3, [r7, #7]
 8011824:	4a08      	ldr	r2, [pc, #32]	; (8011848 <disk_status+0x30>)
 8011826:	009b      	lsls	r3, r3, #2
 8011828:	4413      	add	r3, r2
 801182a:	685b      	ldr	r3, [r3, #4]
 801182c:	685b      	ldr	r3, [r3, #4]
 801182e:	79fa      	ldrb	r2, [r7, #7]
 8011830:	4905      	ldr	r1, [pc, #20]	; (8011848 <disk_status+0x30>)
 8011832:	440a      	add	r2, r1
 8011834:	7a12      	ldrb	r2, [r2, #8]
 8011836:	4610      	mov	r0, r2
 8011838:	4798      	blx	r3
 801183a:	4603      	mov	r3, r0
 801183c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801183e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011840:	4618      	mov	r0, r3
 8011842:	3710      	adds	r7, #16
 8011844:	46bd      	mov	sp, r7
 8011846:	bd80      	pop	{r7, pc}
 8011848:	20006740 	.word	0x20006740

0801184c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801184c:	b580      	push	{r7, lr}
 801184e:	b084      	sub	sp, #16
 8011850:	af00      	add	r7, sp, #0
 8011852:	4603      	mov	r3, r0
 8011854:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011856:	2300      	movs	r3, #0
 8011858:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801185a:	79fb      	ldrb	r3, [r7, #7]
 801185c:	4a0d      	ldr	r2, [pc, #52]	; (8011894 <disk_initialize+0x48>)
 801185e:	5cd3      	ldrb	r3, [r2, r3]
 8011860:	2b00      	cmp	r3, #0
 8011862:	d111      	bne.n	8011888 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011864:	79fb      	ldrb	r3, [r7, #7]
 8011866:	4a0b      	ldr	r2, [pc, #44]	; (8011894 <disk_initialize+0x48>)
 8011868:	2101      	movs	r1, #1
 801186a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801186c:	79fb      	ldrb	r3, [r7, #7]
 801186e:	4a09      	ldr	r2, [pc, #36]	; (8011894 <disk_initialize+0x48>)
 8011870:	009b      	lsls	r3, r3, #2
 8011872:	4413      	add	r3, r2
 8011874:	685b      	ldr	r3, [r3, #4]
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	79fa      	ldrb	r2, [r7, #7]
 801187a:	4906      	ldr	r1, [pc, #24]	; (8011894 <disk_initialize+0x48>)
 801187c:	440a      	add	r2, r1
 801187e:	7a12      	ldrb	r2, [r2, #8]
 8011880:	4610      	mov	r0, r2
 8011882:	4798      	blx	r3
 8011884:	4603      	mov	r3, r0
 8011886:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8011888:	7bfb      	ldrb	r3, [r7, #15]
}
 801188a:	4618      	mov	r0, r3
 801188c:	3710      	adds	r7, #16
 801188e:	46bd      	mov	sp, r7
 8011890:	bd80      	pop	{r7, pc}
 8011892:	bf00      	nop
 8011894:	20006740 	.word	0x20006740

08011898 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011898:	b590      	push	{r4, r7, lr}
 801189a:	b087      	sub	sp, #28
 801189c:	af00      	add	r7, sp, #0
 801189e:	60b9      	str	r1, [r7, #8]
 80118a0:	607a      	str	r2, [r7, #4]
 80118a2:	603b      	str	r3, [r7, #0]
 80118a4:	4603      	mov	r3, r0
 80118a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80118a8:	7bfb      	ldrb	r3, [r7, #15]
 80118aa:	4a0a      	ldr	r2, [pc, #40]	; (80118d4 <disk_read+0x3c>)
 80118ac:	009b      	lsls	r3, r3, #2
 80118ae:	4413      	add	r3, r2
 80118b0:	685b      	ldr	r3, [r3, #4]
 80118b2:	689c      	ldr	r4, [r3, #8]
 80118b4:	7bfb      	ldrb	r3, [r7, #15]
 80118b6:	4a07      	ldr	r2, [pc, #28]	; (80118d4 <disk_read+0x3c>)
 80118b8:	4413      	add	r3, r2
 80118ba:	7a18      	ldrb	r0, [r3, #8]
 80118bc:	683b      	ldr	r3, [r7, #0]
 80118be:	687a      	ldr	r2, [r7, #4]
 80118c0:	68b9      	ldr	r1, [r7, #8]
 80118c2:	47a0      	blx	r4
 80118c4:	4603      	mov	r3, r0
 80118c6:	75fb      	strb	r3, [r7, #23]
  return res;
 80118c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80118ca:	4618      	mov	r0, r3
 80118cc:	371c      	adds	r7, #28
 80118ce:	46bd      	mov	sp, r7
 80118d0:	bd90      	pop	{r4, r7, pc}
 80118d2:	bf00      	nop
 80118d4:	20006740 	.word	0x20006740

080118d8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80118d8:	b590      	push	{r4, r7, lr}
 80118da:	b087      	sub	sp, #28
 80118dc:	af00      	add	r7, sp, #0
 80118de:	60b9      	str	r1, [r7, #8]
 80118e0:	607a      	str	r2, [r7, #4]
 80118e2:	603b      	str	r3, [r7, #0]
 80118e4:	4603      	mov	r3, r0
 80118e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80118e8:	7bfb      	ldrb	r3, [r7, #15]
 80118ea:	4a0a      	ldr	r2, [pc, #40]	; (8011914 <disk_write+0x3c>)
 80118ec:	009b      	lsls	r3, r3, #2
 80118ee:	4413      	add	r3, r2
 80118f0:	685b      	ldr	r3, [r3, #4]
 80118f2:	68dc      	ldr	r4, [r3, #12]
 80118f4:	7bfb      	ldrb	r3, [r7, #15]
 80118f6:	4a07      	ldr	r2, [pc, #28]	; (8011914 <disk_write+0x3c>)
 80118f8:	4413      	add	r3, r2
 80118fa:	7a18      	ldrb	r0, [r3, #8]
 80118fc:	683b      	ldr	r3, [r7, #0]
 80118fe:	687a      	ldr	r2, [r7, #4]
 8011900:	68b9      	ldr	r1, [r7, #8]
 8011902:	47a0      	blx	r4
 8011904:	4603      	mov	r3, r0
 8011906:	75fb      	strb	r3, [r7, #23]
  return res;
 8011908:	7dfb      	ldrb	r3, [r7, #23]
}
 801190a:	4618      	mov	r0, r3
 801190c:	371c      	adds	r7, #28
 801190e:	46bd      	mov	sp, r7
 8011910:	bd90      	pop	{r4, r7, pc}
 8011912:	bf00      	nop
 8011914:	20006740 	.word	0x20006740

08011918 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b084      	sub	sp, #16
 801191c:	af00      	add	r7, sp, #0
 801191e:	4603      	mov	r3, r0
 8011920:	603a      	str	r2, [r7, #0]
 8011922:	71fb      	strb	r3, [r7, #7]
 8011924:	460b      	mov	r3, r1
 8011926:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011928:	79fb      	ldrb	r3, [r7, #7]
 801192a:	4a09      	ldr	r2, [pc, #36]	; (8011950 <disk_ioctl+0x38>)
 801192c:	009b      	lsls	r3, r3, #2
 801192e:	4413      	add	r3, r2
 8011930:	685b      	ldr	r3, [r3, #4]
 8011932:	691b      	ldr	r3, [r3, #16]
 8011934:	79fa      	ldrb	r2, [r7, #7]
 8011936:	4906      	ldr	r1, [pc, #24]	; (8011950 <disk_ioctl+0x38>)
 8011938:	440a      	add	r2, r1
 801193a:	7a10      	ldrb	r0, [r2, #8]
 801193c:	79b9      	ldrb	r1, [r7, #6]
 801193e:	683a      	ldr	r2, [r7, #0]
 8011940:	4798      	blx	r3
 8011942:	4603      	mov	r3, r0
 8011944:	73fb      	strb	r3, [r7, #15]
  return res;
 8011946:	7bfb      	ldrb	r3, [r7, #15]
}
 8011948:	4618      	mov	r0, r3
 801194a:	3710      	adds	r7, #16
 801194c:	46bd      	mov	sp, r7
 801194e:	bd80      	pop	{r7, pc}
 8011950:	20006740 	.word	0x20006740

08011954 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011954:	b480      	push	{r7}
 8011956:	b085      	sub	sp, #20
 8011958:	af00      	add	r7, sp, #0
 801195a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	3301      	adds	r3, #1
 8011960:	781b      	ldrb	r3, [r3, #0]
 8011962:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011964:	89fb      	ldrh	r3, [r7, #14]
 8011966:	021b      	lsls	r3, r3, #8
 8011968:	b21a      	sxth	r2, r3
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	781b      	ldrb	r3, [r3, #0]
 801196e:	b21b      	sxth	r3, r3
 8011970:	4313      	orrs	r3, r2
 8011972:	b21b      	sxth	r3, r3
 8011974:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011976:	89fb      	ldrh	r3, [r7, #14]
}
 8011978:	4618      	mov	r0, r3
 801197a:	3714      	adds	r7, #20
 801197c:	46bd      	mov	sp, r7
 801197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011982:	4770      	bx	lr

08011984 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011984:	b480      	push	{r7}
 8011986:	b085      	sub	sp, #20
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	3303      	adds	r3, #3
 8011990:	781b      	ldrb	r3, [r3, #0]
 8011992:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	021b      	lsls	r3, r3, #8
 8011998:	687a      	ldr	r2, [r7, #4]
 801199a:	3202      	adds	r2, #2
 801199c:	7812      	ldrb	r2, [r2, #0]
 801199e:	4313      	orrs	r3, r2
 80119a0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	021b      	lsls	r3, r3, #8
 80119a6:	687a      	ldr	r2, [r7, #4]
 80119a8:	3201      	adds	r2, #1
 80119aa:	7812      	ldrb	r2, [r2, #0]
 80119ac:	4313      	orrs	r3, r2
 80119ae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	021b      	lsls	r3, r3, #8
 80119b4:	687a      	ldr	r2, [r7, #4]
 80119b6:	7812      	ldrb	r2, [r2, #0]
 80119b8:	4313      	orrs	r3, r2
 80119ba:	60fb      	str	r3, [r7, #12]
	return rv;
 80119bc:	68fb      	ldr	r3, [r7, #12]
}
 80119be:	4618      	mov	r0, r3
 80119c0:	3714      	adds	r7, #20
 80119c2:	46bd      	mov	sp, r7
 80119c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c8:	4770      	bx	lr

080119ca <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80119ca:	b480      	push	{r7}
 80119cc:	b083      	sub	sp, #12
 80119ce:	af00      	add	r7, sp, #0
 80119d0:	6078      	str	r0, [r7, #4]
 80119d2:	460b      	mov	r3, r1
 80119d4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	1c5a      	adds	r2, r3, #1
 80119da:	607a      	str	r2, [r7, #4]
 80119dc:	887a      	ldrh	r2, [r7, #2]
 80119de:	b2d2      	uxtb	r2, r2
 80119e0:	701a      	strb	r2, [r3, #0]
 80119e2:	887b      	ldrh	r3, [r7, #2]
 80119e4:	0a1b      	lsrs	r3, r3, #8
 80119e6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	1c5a      	adds	r2, r3, #1
 80119ec:	607a      	str	r2, [r7, #4]
 80119ee:	887a      	ldrh	r2, [r7, #2]
 80119f0:	b2d2      	uxtb	r2, r2
 80119f2:	701a      	strb	r2, [r3, #0]
}
 80119f4:	bf00      	nop
 80119f6:	370c      	adds	r7, #12
 80119f8:	46bd      	mov	sp, r7
 80119fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119fe:	4770      	bx	lr

08011a00 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011a00:	b480      	push	{r7}
 8011a02:	b083      	sub	sp, #12
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	6078      	str	r0, [r7, #4]
 8011a08:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	1c5a      	adds	r2, r3, #1
 8011a0e:	607a      	str	r2, [r7, #4]
 8011a10:	683a      	ldr	r2, [r7, #0]
 8011a12:	b2d2      	uxtb	r2, r2
 8011a14:	701a      	strb	r2, [r3, #0]
 8011a16:	683b      	ldr	r3, [r7, #0]
 8011a18:	0a1b      	lsrs	r3, r3, #8
 8011a1a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	1c5a      	adds	r2, r3, #1
 8011a20:	607a      	str	r2, [r7, #4]
 8011a22:	683a      	ldr	r2, [r7, #0]
 8011a24:	b2d2      	uxtb	r2, r2
 8011a26:	701a      	strb	r2, [r3, #0]
 8011a28:	683b      	ldr	r3, [r7, #0]
 8011a2a:	0a1b      	lsrs	r3, r3, #8
 8011a2c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	1c5a      	adds	r2, r3, #1
 8011a32:	607a      	str	r2, [r7, #4]
 8011a34:	683a      	ldr	r2, [r7, #0]
 8011a36:	b2d2      	uxtb	r2, r2
 8011a38:	701a      	strb	r2, [r3, #0]
 8011a3a:	683b      	ldr	r3, [r7, #0]
 8011a3c:	0a1b      	lsrs	r3, r3, #8
 8011a3e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	1c5a      	adds	r2, r3, #1
 8011a44:	607a      	str	r2, [r7, #4]
 8011a46:	683a      	ldr	r2, [r7, #0]
 8011a48:	b2d2      	uxtb	r2, r2
 8011a4a:	701a      	strb	r2, [r3, #0]
}
 8011a4c:	bf00      	nop
 8011a4e:	370c      	adds	r7, #12
 8011a50:	46bd      	mov	sp, r7
 8011a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a56:	4770      	bx	lr

08011a58 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011a58:	b480      	push	{r7}
 8011a5a:	b087      	sub	sp, #28
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	60f8      	str	r0, [r7, #12]
 8011a60:	60b9      	str	r1, [r7, #8]
 8011a62:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011a68:	68bb      	ldr	r3, [r7, #8]
 8011a6a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d00d      	beq.n	8011a8e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011a72:	693a      	ldr	r2, [r7, #16]
 8011a74:	1c53      	adds	r3, r2, #1
 8011a76:	613b      	str	r3, [r7, #16]
 8011a78:	697b      	ldr	r3, [r7, #20]
 8011a7a:	1c59      	adds	r1, r3, #1
 8011a7c:	6179      	str	r1, [r7, #20]
 8011a7e:	7812      	ldrb	r2, [r2, #0]
 8011a80:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	3b01      	subs	r3, #1
 8011a86:	607b      	str	r3, [r7, #4]
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d1f1      	bne.n	8011a72 <mem_cpy+0x1a>
	}
}
 8011a8e:	bf00      	nop
 8011a90:	371c      	adds	r7, #28
 8011a92:	46bd      	mov	sp, r7
 8011a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a98:	4770      	bx	lr

08011a9a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011a9a:	b480      	push	{r7}
 8011a9c:	b087      	sub	sp, #28
 8011a9e:	af00      	add	r7, sp, #0
 8011aa0:	60f8      	str	r0, [r7, #12]
 8011aa2:	60b9      	str	r1, [r7, #8]
 8011aa4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011aaa:	697b      	ldr	r3, [r7, #20]
 8011aac:	1c5a      	adds	r2, r3, #1
 8011aae:	617a      	str	r2, [r7, #20]
 8011ab0:	68ba      	ldr	r2, [r7, #8]
 8011ab2:	b2d2      	uxtb	r2, r2
 8011ab4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	3b01      	subs	r3, #1
 8011aba:	607b      	str	r3, [r7, #4]
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d1f3      	bne.n	8011aaa <mem_set+0x10>
}
 8011ac2:	bf00      	nop
 8011ac4:	bf00      	nop
 8011ac6:	371c      	adds	r7, #28
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ace:	4770      	bx	lr

08011ad0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011ad0:	b480      	push	{r7}
 8011ad2:	b089      	sub	sp, #36	; 0x24
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	60f8      	str	r0, [r7, #12]
 8011ad8:	60b9      	str	r1, [r7, #8]
 8011ada:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	61fb      	str	r3, [r7, #28]
 8011ae0:	68bb      	ldr	r3, [r7, #8]
 8011ae2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011ae8:	69fb      	ldr	r3, [r7, #28]
 8011aea:	1c5a      	adds	r2, r3, #1
 8011aec:	61fa      	str	r2, [r7, #28]
 8011aee:	781b      	ldrb	r3, [r3, #0]
 8011af0:	4619      	mov	r1, r3
 8011af2:	69bb      	ldr	r3, [r7, #24]
 8011af4:	1c5a      	adds	r2, r3, #1
 8011af6:	61ba      	str	r2, [r7, #24]
 8011af8:	781b      	ldrb	r3, [r3, #0]
 8011afa:	1acb      	subs	r3, r1, r3
 8011afc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	3b01      	subs	r3, #1
 8011b02:	607b      	str	r3, [r7, #4]
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d002      	beq.n	8011b10 <mem_cmp+0x40>
 8011b0a:	697b      	ldr	r3, [r7, #20]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d0eb      	beq.n	8011ae8 <mem_cmp+0x18>

	return r;
 8011b10:	697b      	ldr	r3, [r7, #20]
}
 8011b12:	4618      	mov	r0, r3
 8011b14:	3724      	adds	r7, #36	; 0x24
 8011b16:	46bd      	mov	sp, r7
 8011b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1c:	4770      	bx	lr

08011b1e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011b1e:	b480      	push	{r7}
 8011b20:	b083      	sub	sp, #12
 8011b22:	af00      	add	r7, sp, #0
 8011b24:	6078      	str	r0, [r7, #4]
 8011b26:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011b28:	e002      	b.n	8011b30 <chk_chr+0x12>
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	3301      	adds	r3, #1
 8011b2e:	607b      	str	r3, [r7, #4]
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	781b      	ldrb	r3, [r3, #0]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d005      	beq.n	8011b44 <chk_chr+0x26>
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	781b      	ldrb	r3, [r3, #0]
 8011b3c:	461a      	mov	r2, r3
 8011b3e:	683b      	ldr	r3, [r7, #0]
 8011b40:	4293      	cmp	r3, r2
 8011b42:	d1f2      	bne.n	8011b2a <chk_chr+0xc>
	return *str;
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	781b      	ldrb	r3, [r3, #0]
}
 8011b48:	4618      	mov	r0, r3
 8011b4a:	370c      	adds	r7, #12
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b52:	4770      	bx	lr

08011b54 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b082      	sub	sp, #8
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d009      	beq.n	8011b76 <lock_fs+0x22>
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	68db      	ldr	r3, [r3, #12]
 8011b66:	4618      	mov	r0, r3
 8011b68:	f002 fcab 	bl	80144c2 <ff_req_grant>
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d001      	beq.n	8011b76 <lock_fs+0x22>
 8011b72:	2301      	movs	r3, #1
 8011b74:	e000      	b.n	8011b78 <lock_fs+0x24>
 8011b76:	2300      	movs	r3, #0
}
 8011b78:	4618      	mov	r0, r3
 8011b7a:	3708      	adds	r7, #8
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	bd80      	pop	{r7, pc}

08011b80 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b082      	sub	sp, #8
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
 8011b88:	460b      	mov	r3, r1
 8011b8a:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d00d      	beq.n	8011bae <unlock_fs+0x2e>
 8011b92:	78fb      	ldrb	r3, [r7, #3]
 8011b94:	2b0c      	cmp	r3, #12
 8011b96:	d00a      	beq.n	8011bae <unlock_fs+0x2e>
 8011b98:	78fb      	ldrb	r3, [r7, #3]
 8011b9a:	2b0b      	cmp	r3, #11
 8011b9c:	d007      	beq.n	8011bae <unlock_fs+0x2e>
 8011b9e:	78fb      	ldrb	r3, [r7, #3]
 8011ba0:	2b0f      	cmp	r3, #15
 8011ba2:	d004      	beq.n	8011bae <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	68db      	ldr	r3, [r3, #12]
 8011ba8:	4618      	mov	r0, r3
 8011baa:	f002 fc9f 	bl	80144ec <ff_rel_grant>
	}
}
 8011bae:	bf00      	nop
 8011bb0:	3708      	adds	r7, #8
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	bd80      	pop	{r7, pc}
	...

08011bb8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011bb8:	b480      	push	{r7}
 8011bba:	b085      	sub	sp, #20
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	6078      	str	r0, [r7, #4]
 8011bc0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	60bb      	str	r3, [r7, #8]
 8011bc6:	68bb      	ldr	r3, [r7, #8]
 8011bc8:	60fb      	str	r3, [r7, #12]
 8011bca:	e029      	b.n	8011c20 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011bcc:	4a27      	ldr	r2, [pc, #156]	; (8011c6c <chk_lock+0xb4>)
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	011b      	lsls	r3, r3, #4
 8011bd2:	4413      	add	r3, r2
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d01d      	beq.n	8011c16 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011bda:	4a24      	ldr	r2, [pc, #144]	; (8011c6c <chk_lock+0xb4>)
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	011b      	lsls	r3, r3, #4
 8011be0:	4413      	add	r3, r2
 8011be2:	681a      	ldr	r2, [r3, #0]
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	429a      	cmp	r2, r3
 8011bea:	d116      	bne.n	8011c1a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011bec:	4a1f      	ldr	r2, [pc, #124]	; (8011c6c <chk_lock+0xb4>)
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	011b      	lsls	r3, r3, #4
 8011bf2:	4413      	add	r3, r2
 8011bf4:	3304      	adds	r3, #4
 8011bf6:	681a      	ldr	r2, [r3, #0]
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011bfc:	429a      	cmp	r2, r3
 8011bfe:	d10c      	bne.n	8011c1a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011c00:	4a1a      	ldr	r2, [pc, #104]	; (8011c6c <chk_lock+0xb4>)
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	011b      	lsls	r3, r3, #4
 8011c06:	4413      	add	r3, r2
 8011c08:	3308      	adds	r3, #8
 8011c0a:	681a      	ldr	r2, [r3, #0]
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011c10:	429a      	cmp	r2, r3
 8011c12:	d102      	bne.n	8011c1a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011c14:	e007      	b.n	8011c26 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8011c16:	2301      	movs	r3, #1
 8011c18:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	3301      	adds	r3, #1
 8011c1e:	60fb      	str	r3, [r7, #12]
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	2b01      	cmp	r3, #1
 8011c24:	d9d2      	bls.n	8011bcc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	2b02      	cmp	r3, #2
 8011c2a:	d109      	bne.n	8011c40 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011c2c:	68bb      	ldr	r3, [r7, #8]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d102      	bne.n	8011c38 <chk_lock+0x80>
 8011c32:	683b      	ldr	r3, [r7, #0]
 8011c34:	2b02      	cmp	r3, #2
 8011c36:	d101      	bne.n	8011c3c <chk_lock+0x84>
 8011c38:	2300      	movs	r3, #0
 8011c3a:	e010      	b.n	8011c5e <chk_lock+0xa6>
 8011c3c:	2312      	movs	r3, #18
 8011c3e:	e00e      	b.n	8011c5e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011c40:	683b      	ldr	r3, [r7, #0]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d108      	bne.n	8011c58 <chk_lock+0xa0>
 8011c46:	4a09      	ldr	r2, [pc, #36]	; (8011c6c <chk_lock+0xb4>)
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	011b      	lsls	r3, r3, #4
 8011c4c:	4413      	add	r3, r2
 8011c4e:	330c      	adds	r3, #12
 8011c50:	881b      	ldrh	r3, [r3, #0]
 8011c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011c56:	d101      	bne.n	8011c5c <chk_lock+0xa4>
 8011c58:	2310      	movs	r3, #16
 8011c5a:	e000      	b.n	8011c5e <chk_lock+0xa6>
 8011c5c:	2300      	movs	r3, #0
}
 8011c5e:	4618      	mov	r0, r3
 8011c60:	3714      	adds	r7, #20
 8011c62:	46bd      	mov	sp, r7
 8011c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c68:	4770      	bx	lr
 8011c6a:	bf00      	nop
 8011c6c:	20006720 	.word	0x20006720

08011c70 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011c70:	b480      	push	{r7}
 8011c72:	b083      	sub	sp, #12
 8011c74:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011c76:	2300      	movs	r3, #0
 8011c78:	607b      	str	r3, [r7, #4]
 8011c7a:	e002      	b.n	8011c82 <enq_lock+0x12>
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	3301      	adds	r3, #1
 8011c80:	607b      	str	r3, [r7, #4]
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	2b01      	cmp	r3, #1
 8011c86:	d806      	bhi.n	8011c96 <enq_lock+0x26>
 8011c88:	4a09      	ldr	r2, [pc, #36]	; (8011cb0 <enq_lock+0x40>)
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	011b      	lsls	r3, r3, #4
 8011c8e:	4413      	add	r3, r2
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d1f2      	bne.n	8011c7c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	2b02      	cmp	r3, #2
 8011c9a:	bf14      	ite	ne
 8011c9c:	2301      	movne	r3, #1
 8011c9e:	2300      	moveq	r3, #0
 8011ca0:	b2db      	uxtb	r3, r3
}
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	370c      	adds	r7, #12
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cac:	4770      	bx	lr
 8011cae:	bf00      	nop
 8011cb0:	20006720 	.word	0x20006720

08011cb4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011cb4:	b480      	push	{r7}
 8011cb6:	b085      	sub	sp, #20
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]
 8011cbc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	60fb      	str	r3, [r7, #12]
 8011cc2:	e01f      	b.n	8011d04 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011cc4:	4a41      	ldr	r2, [pc, #260]	; (8011dcc <inc_lock+0x118>)
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	011b      	lsls	r3, r3, #4
 8011cca:	4413      	add	r3, r2
 8011ccc:	681a      	ldr	r2, [r3, #0]
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	429a      	cmp	r2, r3
 8011cd4:	d113      	bne.n	8011cfe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011cd6:	4a3d      	ldr	r2, [pc, #244]	; (8011dcc <inc_lock+0x118>)
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	011b      	lsls	r3, r3, #4
 8011cdc:	4413      	add	r3, r2
 8011cde:	3304      	adds	r3, #4
 8011ce0:	681a      	ldr	r2, [r3, #0]
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011ce6:	429a      	cmp	r2, r3
 8011ce8:	d109      	bne.n	8011cfe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011cea:	4a38      	ldr	r2, [pc, #224]	; (8011dcc <inc_lock+0x118>)
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	011b      	lsls	r3, r3, #4
 8011cf0:	4413      	add	r3, r2
 8011cf2:	3308      	adds	r3, #8
 8011cf4:	681a      	ldr	r2, [r3, #0]
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011cfa:	429a      	cmp	r2, r3
 8011cfc:	d006      	beq.n	8011d0c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	3301      	adds	r3, #1
 8011d02:	60fb      	str	r3, [r7, #12]
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	2b01      	cmp	r3, #1
 8011d08:	d9dc      	bls.n	8011cc4 <inc_lock+0x10>
 8011d0a:	e000      	b.n	8011d0e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011d0c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	2b02      	cmp	r3, #2
 8011d12:	d132      	bne.n	8011d7a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011d14:	2300      	movs	r3, #0
 8011d16:	60fb      	str	r3, [r7, #12]
 8011d18:	e002      	b.n	8011d20 <inc_lock+0x6c>
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	3301      	adds	r3, #1
 8011d1e:	60fb      	str	r3, [r7, #12]
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	2b01      	cmp	r3, #1
 8011d24:	d806      	bhi.n	8011d34 <inc_lock+0x80>
 8011d26:	4a29      	ldr	r2, [pc, #164]	; (8011dcc <inc_lock+0x118>)
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	011b      	lsls	r3, r3, #4
 8011d2c:	4413      	add	r3, r2
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d1f2      	bne.n	8011d1a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	2b02      	cmp	r3, #2
 8011d38:	d101      	bne.n	8011d3e <inc_lock+0x8a>
 8011d3a:	2300      	movs	r3, #0
 8011d3c:	e040      	b.n	8011dc0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	681a      	ldr	r2, [r3, #0]
 8011d42:	4922      	ldr	r1, [pc, #136]	; (8011dcc <inc_lock+0x118>)
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	011b      	lsls	r3, r3, #4
 8011d48:	440b      	add	r3, r1
 8011d4a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	689a      	ldr	r2, [r3, #8]
 8011d50:	491e      	ldr	r1, [pc, #120]	; (8011dcc <inc_lock+0x118>)
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	011b      	lsls	r3, r3, #4
 8011d56:	440b      	add	r3, r1
 8011d58:	3304      	adds	r3, #4
 8011d5a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	695a      	ldr	r2, [r3, #20]
 8011d60:	491a      	ldr	r1, [pc, #104]	; (8011dcc <inc_lock+0x118>)
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	011b      	lsls	r3, r3, #4
 8011d66:	440b      	add	r3, r1
 8011d68:	3308      	adds	r3, #8
 8011d6a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011d6c:	4a17      	ldr	r2, [pc, #92]	; (8011dcc <inc_lock+0x118>)
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	011b      	lsls	r3, r3, #4
 8011d72:	4413      	add	r3, r2
 8011d74:	330c      	adds	r3, #12
 8011d76:	2200      	movs	r2, #0
 8011d78:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011d7a:	683b      	ldr	r3, [r7, #0]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d009      	beq.n	8011d94 <inc_lock+0xe0>
 8011d80:	4a12      	ldr	r2, [pc, #72]	; (8011dcc <inc_lock+0x118>)
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	011b      	lsls	r3, r3, #4
 8011d86:	4413      	add	r3, r2
 8011d88:	330c      	adds	r3, #12
 8011d8a:	881b      	ldrh	r3, [r3, #0]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d001      	beq.n	8011d94 <inc_lock+0xe0>
 8011d90:	2300      	movs	r3, #0
 8011d92:	e015      	b.n	8011dc0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011d94:	683b      	ldr	r3, [r7, #0]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d108      	bne.n	8011dac <inc_lock+0xf8>
 8011d9a:	4a0c      	ldr	r2, [pc, #48]	; (8011dcc <inc_lock+0x118>)
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	011b      	lsls	r3, r3, #4
 8011da0:	4413      	add	r3, r2
 8011da2:	330c      	adds	r3, #12
 8011da4:	881b      	ldrh	r3, [r3, #0]
 8011da6:	3301      	adds	r3, #1
 8011da8:	b29a      	uxth	r2, r3
 8011daa:	e001      	b.n	8011db0 <inc_lock+0xfc>
 8011dac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011db0:	4906      	ldr	r1, [pc, #24]	; (8011dcc <inc_lock+0x118>)
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	011b      	lsls	r3, r3, #4
 8011db6:	440b      	add	r3, r1
 8011db8:	330c      	adds	r3, #12
 8011dba:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	3301      	adds	r3, #1
}
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	3714      	adds	r7, #20
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dca:	4770      	bx	lr
 8011dcc:	20006720 	.word	0x20006720

08011dd0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011dd0:	b480      	push	{r7}
 8011dd2:	b085      	sub	sp, #20
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	3b01      	subs	r3, #1
 8011ddc:	607b      	str	r3, [r7, #4]
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	2b01      	cmp	r3, #1
 8011de2:	d825      	bhi.n	8011e30 <dec_lock+0x60>
		n = Files[i].ctr;
 8011de4:	4a17      	ldr	r2, [pc, #92]	; (8011e44 <dec_lock+0x74>)
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	011b      	lsls	r3, r3, #4
 8011dea:	4413      	add	r3, r2
 8011dec:	330c      	adds	r3, #12
 8011dee:	881b      	ldrh	r3, [r3, #0]
 8011df0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011df2:	89fb      	ldrh	r3, [r7, #14]
 8011df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011df8:	d101      	bne.n	8011dfe <dec_lock+0x2e>
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011dfe:	89fb      	ldrh	r3, [r7, #14]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d002      	beq.n	8011e0a <dec_lock+0x3a>
 8011e04:	89fb      	ldrh	r3, [r7, #14]
 8011e06:	3b01      	subs	r3, #1
 8011e08:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011e0a:	4a0e      	ldr	r2, [pc, #56]	; (8011e44 <dec_lock+0x74>)
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	011b      	lsls	r3, r3, #4
 8011e10:	4413      	add	r3, r2
 8011e12:	330c      	adds	r3, #12
 8011e14:	89fa      	ldrh	r2, [r7, #14]
 8011e16:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011e18:	89fb      	ldrh	r3, [r7, #14]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d105      	bne.n	8011e2a <dec_lock+0x5a>
 8011e1e:	4a09      	ldr	r2, [pc, #36]	; (8011e44 <dec_lock+0x74>)
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	011b      	lsls	r3, r3, #4
 8011e24:	4413      	add	r3, r2
 8011e26:	2200      	movs	r2, #0
 8011e28:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	737b      	strb	r3, [r7, #13]
 8011e2e:	e001      	b.n	8011e34 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011e30:	2302      	movs	r3, #2
 8011e32:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011e34:	7b7b      	ldrb	r3, [r7, #13]
}
 8011e36:	4618      	mov	r0, r3
 8011e38:	3714      	adds	r7, #20
 8011e3a:	46bd      	mov	sp, r7
 8011e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e40:	4770      	bx	lr
 8011e42:	bf00      	nop
 8011e44:	20006720 	.word	0x20006720

08011e48 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011e48:	b480      	push	{r7}
 8011e4a:	b085      	sub	sp, #20
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011e50:	2300      	movs	r3, #0
 8011e52:	60fb      	str	r3, [r7, #12]
 8011e54:	e010      	b.n	8011e78 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011e56:	4a0d      	ldr	r2, [pc, #52]	; (8011e8c <clear_lock+0x44>)
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	011b      	lsls	r3, r3, #4
 8011e5c:	4413      	add	r3, r2
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	687a      	ldr	r2, [r7, #4]
 8011e62:	429a      	cmp	r2, r3
 8011e64:	d105      	bne.n	8011e72 <clear_lock+0x2a>
 8011e66:	4a09      	ldr	r2, [pc, #36]	; (8011e8c <clear_lock+0x44>)
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	011b      	lsls	r3, r3, #4
 8011e6c:	4413      	add	r3, r2
 8011e6e:	2200      	movs	r2, #0
 8011e70:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	3301      	adds	r3, #1
 8011e76:	60fb      	str	r3, [r7, #12]
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	2b01      	cmp	r3, #1
 8011e7c:	d9eb      	bls.n	8011e56 <clear_lock+0xe>
	}
}
 8011e7e:	bf00      	nop
 8011e80:	bf00      	nop
 8011e82:	3714      	adds	r7, #20
 8011e84:	46bd      	mov	sp, r7
 8011e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e8a:	4770      	bx	lr
 8011e8c:	20006720 	.word	0x20006720

08011e90 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011e90:	b580      	push	{r7, lr}
 8011e92:	b086      	sub	sp, #24
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011e98:	2300      	movs	r3, #0
 8011e9a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	78db      	ldrb	r3, [r3, #3]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d034      	beq.n	8011f0e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ea8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	7858      	ldrb	r0, [r3, #1]
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011eb4:	2301      	movs	r3, #1
 8011eb6:	697a      	ldr	r2, [r7, #20]
 8011eb8:	f7ff fd0e 	bl	80118d8 <disk_write>
 8011ebc:	4603      	mov	r3, r0
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d002      	beq.n	8011ec8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011ec2:	2301      	movs	r3, #1
 8011ec4:	73fb      	strb	r3, [r7, #15]
 8011ec6:	e022      	b.n	8011f0e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	2200      	movs	r2, #0
 8011ecc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ed2:	697a      	ldr	r2, [r7, #20]
 8011ed4:	1ad2      	subs	r2, r2, r3
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	69db      	ldr	r3, [r3, #28]
 8011eda:	429a      	cmp	r2, r3
 8011edc:	d217      	bcs.n	8011f0e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	789b      	ldrb	r3, [r3, #2]
 8011ee2:	613b      	str	r3, [r7, #16]
 8011ee4:	e010      	b.n	8011f08 <sync_window+0x78>
					wsect += fs->fsize;
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	69db      	ldr	r3, [r3, #28]
 8011eea:	697a      	ldr	r2, [r7, #20]
 8011eec:	4413      	add	r3, r2
 8011eee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	7858      	ldrb	r0, [r3, #1]
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011efa:	2301      	movs	r3, #1
 8011efc:	697a      	ldr	r2, [r7, #20]
 8011efe:	f7ff fceb 	bl	80118d8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011f02:	693b      	ldr	r3, [r7, #16]
 8011f04:	3b01      	subs	r3, #1
 8011f06:	613b      	str	r3, [r7, #16]
 8011f08:	693b      	ldr	r3, [r7, #16]
 8011f0a:	2b01      	cmp	r3, #1
 8011f0c:	d8eb      	bhi.n	8011ee6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f10:	4618      	mov	r0, r3
 8011f12:	3718      	adds	r7, #24
 8011f14:	46bd      	mov	sp, r7
 8011f16:	bd80      	pop	{r7, pc}

08011f18 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b084      	sub	sp, #16
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
 8011f20:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011f22:	2300      	movs	r3, #0
 8011f24:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f2a:	683a      	ldr	r2, [r7, #0]
 8011f2c:	429a      	cmp	r2, r3
 8011f2e:	d01b      	beq.n	8011f68 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011f30:	6878      	ldr	r0, [r7, #4]
 8011f32:	f7ff ffad 	bl	8011e90 <sync_window>
 8011f36:	4603      	mov	r3, r0
 8011f38:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011f3a:	7bfb      	ldrb	r3, [r7, #15]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d113      	bne.n	8011f68 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	7858      	ldrb	r0, [r3, #1]
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011f4a:	2301      	movs	r3, #1
 8011f4c:	683a      	ldr	r2, [r7, #0]
 8011f4e:	f7ff fca3 	bl	8011898 <disk_read>
 8011f52:	4603      	mov	r3, r0
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d004      	beq.n	8011f62 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011f58:	f04f 33ff 	mov.w	r3, #4294967295
 8011f5c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011f5e:	2301      	movs	r3, #1
 8011f60:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	683a      	ldr	r2, [r7, #0]
 8011f66:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8011f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	3710      	adds	r7, #16
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	bd80      	pop	{r7, pc}
	...

08011f74 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b084      	sub	sp, #16
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011f7c:	6878      	ldr	r0, [r7, #4]
 8011f7e:	f7ff ff87 	bl	8011e90 <sync_window>
 8011f82:	4603      	mov	r3, r0
 8011f84:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011f86:	7bfb      	ldrb	r3, [r7, #15]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d158      	bne.n	801203e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	781b      	ldrb	r3, [r3, #0]
 8011f90:	2b03      	cmp	r3, #3
 8011f92:	d148      	bne.n	8012026 <sync_fs+0xb2>
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	791b      	ldrb	r3, [r3, #4]
 8011f98:	2b01      	cmp	r3, #1
 8011f9a:	d144      	bne.n	8012026 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	3334      	adds	r3, #52	; 0x34
 8011fa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011fa4:	2100      	movs	r1, #0
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	f7ff fd77 	bl	8011a9a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	3334      	adds	r3, #52	; 0x34
 8011fb0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011fb4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011fb8:	4618      	mov	r0, r3
 8011fba:	f7ff fd06 	bl	80119ca <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	3334      	adds	r3, #52	; 0x34
 8011fc2:	4921      	ldr	r1, [pc, #132]	; (8012048 <sync_fs+0xd4>)
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	f7ff fd1b 	bl	8011a00 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	3334      	adds	r3, #52	; 0x34
 8011fce:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011fd2:	491e      	ldr	r1, [pc, #120]	; (801204c <sync_fs+0xd8>)
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	f7ff fd13 	bl	8011a00 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	3334      	adds	r3, #52	; 0x34
 8011fde:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	695b      	ldr	r3, [r3, #20]
 8011fe6:	4619      	mov	r1, r3
 8011fe8:	4610      	mov	r0, r2
 8011fea:	f7ff fd09 	bl	8011a00 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	3334      	adds	r3, #52	; 0x34
 8011ff2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	691b      	ldr	r3, [r3, #16]
 8011ffa:	4619      	mov	r1, r3
 8011ffc:	4610      	mov	r0, r2
 8011ffe:	f7ff fcff 	bl	8011a00 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	6a1b      	ldr	r3, [r3, #32]
 8012006:	1c5a      	adds	r2, r3, #1
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	7858      	ldrb	r0, [r3, #1]
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801201a:	2301      	movs	r3, #1
 801201c:	f7ff fc5c 	bl	80118d8 <disk_write>
			fs->fsi_flag = 0;
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	2200      	movs	r2, #0
 8012024:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	785b      	ldrb	r3, [r3, #1]
 801202a:	2200      	movs	r2, #0
 801202c:	2100      	movs	r1, #0
 801202e:	4618      	mov	r0, r3
 8012030:	f7ff fc72 	bl	8011918 <disk_ioctl>
 8012034:	4603      	mov	r3, r0
 8012036:	2b00      	cmp	r3, #0
 8012038:	d001      	beq.n	801203e <sync_fs+0xca>
 801203a:	2301      	movs	r3, #1
 801203c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801203e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012040:	4618      	mov	r0, r3
 8012042:	3710      	adds	r7, #16
 8012044:	46bd      	mov	sp, r7
 8012046:	bd80      	pop	{r7, pc}
 8012048:	41615252 	.word	0x41615252
 801204c:	61417272 	.word	0x61417272

08012050 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8012050:	b480      	push	{r7}
 8012052:	b083      	sub	sp, #12
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
 8012058:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801205a:	683b      	ldr	r3, [r7, #0]
 801205c:	3b02      	subs	r3, #2
 801205e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	699b      	ldr	r3, [r3, #24]
 8012064:	3b02      	subs	r3, #2
 8012066:	683a      	ldr	r2, [r7, #0]
 8012068:	429a      	cmp	r2, r3
 801206a:	d301      	bcc.n	8012070 <clust2sect+0x20>
 801206c:	2300      	movs	r3, #0
 801206e:	e008      	b.n	8012082 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	895b      	ldrh	r3, [r3, #10]
 8012074:	461a      	mov	r2, r3
 8012076:	683b      	ldr	r3, [r7, #0]
 8012078:	fb03 f202 	mul.w	r2, r3, r2
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012080:	4413      	add	r3, r2
}
 8012082:	4618      	mov	r0, r3
 8012084:	370c      	adds	r7, #12
 8012086:	46bd      	mov	sp, r7
 8012088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801208c:	4770      	bx	lr

0801208e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801208e:	b580      	push	{r7, lr}
 8012090:	b086      	sub	sp, #24
 8012092:	af00      	add	r7, sp, #0
 8012094:	6078      	str	r0, [r7, #4]
 8012096:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801209e:	683b      	ldr	r3, [r7, #0]
 80120a0:	2b01      	cmp	r3, #1
 80120a2:	d904      	bls.n	80120ae <get_fat+0x20>
 80120a4:	693b      	ldr	r3, [r7, #16]
 80120a6:	699b      	ldr	r3, [r3, #24]
 80120a8:	683a      	ldr	r2, [r7, #0]
 80120aa:	429a      	cmp	r2, r3
 80120ac:	d302      	bcc.n	80120b4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80120ae:	2301      	movs	r3, #1
 80120b0:	617b      	str	r3, [r7, #20]
 80120b2:	e08f      	b.n	80121d4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80120b4:	f04f 33ff 	mov.w	r3, #4294967295
 80120b8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80120ba:	693b      	ldr	r3, [r7, #16]
 80120bc:	781b      	ldrb	r3, [r3, #0]
 80120be:	2b03      	cmp	r3, #3
 80120c0:	d062      	beq.n	8012188 <get_fat+0xfa>
 80120c2:	2b03      	cmp	r3, #3
 80120c4:	dc7c      	bgt.n	80121c0 <get_fat+0x132>
 80120c6:	2b01      	cmp	r3, #1
 80120c8:	d002      	beq.n	80120d0 <get_fat+0x42>
 80120ca:	2b02      	cmp	r3, #2
 80120cc:	d042      	beq.n	8012154 <get_fat+0xc6>
 80120ce:	e077      	b.n	80121c0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80120d0:	683b      	ldr	r3, [r7, #0]
 80120d2:	60fb      	str	r3, [r7, #12]
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	085b      	lsrs	r3, r3, #1
 80120d8:	68fa      	ldr	r2, [r7, #12]
 80120da:	4413      	add	r3, r2
 80120dc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80120de:	693b      	ldr	r3, [r7, #16]
 80120e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	0a5b      	lsrs	r3, r3, #9
 80120e6:	4413      	add	r3, r2
 80120e8:	4619      	mov	r1, r3
 80120ea:	6938      	ldr	r0, [r7, #16]
 80120ec:	f7ff ff14 	bl	8011f18 <move_window>
 80120f0:	4603      	mov	r3, r0
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d167      	bne.n	80121c6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	1c5a      	adds	r2, r3, #1
 80120fa:	60fa      	str	r2, [r7, #12]
 80120fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012100:	693a      	ldr	r2, [r7, #16]
 8012102:	4413      	add	r3, r2
 8012104:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012108:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801210a:	693b      	ldr	r3, [r7, #16]
 801210c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	0a5b      	lsrs	r3, r3, #9
 8012112:	4413      	add	r3, r2
 8012114:	4619      	mov	r1, r3
 8012116:	6938      	ldr	r0, [r7, #16]
 8012118:	f7ff fefe 	bl	8011f18 <move_window>
 801211c:	4603      	mov	r3, r0
 801211e:	2b00      	cmp	r3, #0
 8012120:	d153      	bne.n	80121ca <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012128:	693a      	ldr	r2, [r7, #16]
 801212a:	4413      	add	r3, r2
 801212c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012130:	021b      	lsls	r3, r3, #8
 8012132:	461a      	mov	r2, r3
 8012134:	68bb      	ldr	r3, [r7, #8]
 8012136:	4313      	orrs	r3, r2
 8012138:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801213a:	683b      	ldr	r3, [r7, #0]
 801213c:	f003 0301 	and.w	r3, r3, #1
 8012140:	2b00      	cmp	r3, #0
 8012142:	d002      	beq.n	801214a <get_fat+0xbc>
 8012144:	68bb      	ldr	r3, [r7, #8]
 8012146:	091b      	lsrs	r3, r3, #4
 8012148:	e002      	b.n	8012150 <get_fat+0xc2>
 801214a:	68bb      	ldr	r3, [r7, #8]
 801214c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012150:	617b      	str	r3, [r7, #20]
			break;
 8012152:	e03f      	b.n	80121d4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012154:	693b      	ldr	r3, [r7, #16]
 8012156:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012158:	683b      	ldr	r3, [r7, #0]
 801215a:	0a1b      	lsrs	r3, r3, #8
 801215c:	4413      	add	r3, r2
 801215e:	4619      	mov	r1, r3
 8012160:	6938      	ldr	r0, [r7, #16]
 8012162:	f7ff fed9 	bl	8011f18 <move_window>
 8012166:	4603      	mov	r3, r0
 8012168:	2b00      	cmp	r3, #0
 801216a:	d130      	bne.n	80121ce <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801216c:	693b      	ldr	r3, [r7, #16]
 801216e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012172:	683b      	ldr	r3, [r7, #0]
 8012174:	005b      	lsls	r3, r3, #1
 8012176:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801217a:	4413      	add	r3, r2
 801217c:	4618      	mov	r0, r3
 801217e:	f7ff fbe9 	bl	8011954 <ld_word>
 8012182:	4603      	mov	r3, r0
 8012184:	617b      	str	r3, [r7, #20]
			break;
 8012186:	e025      	b.n	80121d4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012188:	693b      	ldr	r3, [r7, #16]
 801218a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801218c:	683b      	ldr	r3, [r7, #0]
 801218e:	09db      	lsrs	r3, r3, #7
 8012190:	4413      	add	r3, r2
 8012192:	4619      	mov	r1, r3
 8012194:	6938      	ldr	r0, [r7, #16]
 8012196:	f7ff febf 	bl	8011f18 <move_window>
 801219a:	4603      	mov	r3, r0
 801219c:	2b00      	cmp	r3, #0
 801219e:	d118      	bne.n	80121d2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80121a0:	693b      	ldr	r3, [r7, #16]
 80121a2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80121a6:	683b      	ldr	r3, [r7, #0]
 80121a8:	009b      	lsls	r3, r3, #2
 80121aa:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80121ae:	4413      	add	r3, r2
 80121b0:	4618      	mov	r0, r3
 80121b2:	f7ff fbe7 	bl	8011984 <ld_dword>
 80121b6:	4603      	mov	r3, r0
 80121b8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80121bc:	617b      	str	r3, [r7, #20]
			break;
 80121be:	e009      	b.n	80121d4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80121c0:	2301      	movs	r3, #1
 80121c2:	617b      	str	r3, [r7, #20]
 80121c4:	e006      	b.n	80121d4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80121c6:	bf00      	nop
 80121c8:	e004      	b.n	80121d4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80121ca:	bf00      	nop
 80121cc:	e002      	b.n	80121d4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80121ce:	bf00      	nop
 80121d0:	e000      	b.n	80121d4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80121d2:	bf00      	nop
		}
	}

	return val;
 80121d4:	697b      	ldr	r3, [r7, #20]
}
 80121d6:	4618      	mov	r0, r3
 80121d8:	3718      	adds	r7, #24
 80121da:	46bd      	mov	sp, r7
 80121dc:	bd80      	pop	{r7, pc}

080121de <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80121de:	b590      	push	{r4, r7, lr}
 80121e0:	b089      	sub	sp, #36	; 0x24
 80121e2:	af00      	add	r7, sp, #0
 80121e4:	60f8      	str	r0, [r7, #12]
 80121e6:	60b9      	str	r1, [r7, #8]
 80121e8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80121ea:	2302      	movs	r3, #2
 80121ec:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80121ee:	68bb      	ldr	r3, [r7, #8]
 80121f0:	2b01      	cmp	r3, #1
 80121f2:	f240 80d9 	bls.w	80123a8 <put_fat+0x1ca>
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	699b      	ldr	r3, [r3, #24]
 80121fa:	68ba      	ldr	r2, [r7, #8]
 80121fc:	429a      	cmp	r2, r3
 80121fe:	f080 80d3 	bcs.w	80123a8 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	781b      	ldrb	r3, [r3, #0]
 8012206:	2b03      	cmp	r3, #3
 8012208:	f000 8096 	beq.w	8012338 <put_fat+0x15a>
 801220c:	2b03      	cmp	r3, #3
 801220e:	f300 80cb 	bgt.w	80123a8 <put_fat+0x1ca>
 8012212:	2b01      	cmp	r3, #1
 8012214:	d002      	beq.n	801221c <put_fat+0x3e>
 8012216:	2b02      	cmp	r3, #2
 8012218:	d06e      	beq.n	80122f8 <put_fat+0x11a>
 801221a:	e0c5      	b.n	80123a8 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801221c:	68bb      	ldr	r3, [r7, #8]
 801221e:	61bb      	str	r3, [r7, #24]
 8012220:	69bb      	ldr	r3, [r7, #24]
 8012222:	085b      	lsrs	r3, r3, #1
 8012224:	69ba      	ldr	r2, [r7, #24]
 8012226:	4413      	add	r3, r2
 8012228:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801222e:	69bb      	ldr	r3, [r7, #24]
 8012230:	0a5b      	lsrs	r3, r3, #9
 8012232:	4413      	add	r3, r2
 8012234:	4619      	mov	r1, r3
 8012236:	68f8      	ldr	r0, [r7, #12]
 8012238:	f7ff fe6e 	bl	8011f18 <move_window>
 801223c:	4603      	mov	r3, r0
 801223e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012240:	7ffb      	ldrb	r3, [r7, #31]
 8012242:	2b00      	cmp	r3, #0
 8012244:	f040 80a9 	bne.w	801239a <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801224e:	69bb      	ldr	r3, [r7, #24]
 8012250:	1c59      	adds	r1, r3, #1
 8012252:	61b9      	str	r1, [r7, #24]
 8012254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012258:	4413      	add	r3, r2
 801225a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801225c:	68bb      	ldr	r3, [r7, #8]
 801225e:	f003 0301 	and.w	r3, r3, #1
 8012262:	2b00      	cmp	r3, #0
 8012264:	d00d      	beq.n	8012282 <put_fat+0xa4>
 8012266:	697b      	ldr	r3, [r7, #20]
 8012268:	781b      	ldrb	r3, [r3, #0]
 801226a:	b25b      	sxtb	r3, r3
 801226c:	f003 030f 	and.w	r3, r3, #15
 8012270:	b25a      	sxtb	r2, r3
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	b2db      	uxtb	r3, r3
 8012276:	011b      	lsls	r3, r3, #4
 8012278:	b25b      	sxtb	r3, r3
 801227a:	4313      	orrs	r3, r2
 801227c:	b25b      	sxtb	r3, r3
 801227e:	b2db      	uxtb	r3, r3
 8012280:	e001      	b.n	8012286 <put_fat+0xa8>
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	b2db      	uxtb	r3, r3
 8012286:	697a      	ldr	r2, [r7, #20]
 8012288:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	2201      	movs	r2, #1
 801228e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012294:	69bb      	ldr	r3, [r7, #24]
 8012296:	0a5b      	lsrs	r3, r3, #9
 8012298:	4413      	add	r3, r2
 801229a:	4619      	mov	r1, r3
 801229c:	68f8      	ldr	r0, [r7, #12]
 801229e:	f7ff fe3b 	bl	8011f18 <move_window>
 80122a2:	4603      	mov	r3, r0
 80122a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80122a6:	7ffb      	ldrb	r3, [r7, #31]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d178      	bne.n	801239e <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80122b2:	69bb      	ldr	r3, [r7, #24]
 80122b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80122b8:	4413      	add	r3, r2
 80122ba:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80122bc:	68bb      	ldr	r3, [r7, #8]
 80122be:	f003 0301 	and.w	r3, r3, #1
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d003      	beq.n	80122ce <put_fat+0xf0>
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	091b      	lsrs	r3, r3, #4
 80122ca:	b2db      	uxtb	r3, r3
 80122cc:	e00e      	b.n	80122ec <put_fat+0x10e>
 80122ce:	697b      	ldr	r3, [r7, #20]
 80122d0:	781b      	ldrb	r3, [r3, #0]
 80122d2:	b25b      	sxtb	r3, r3
 80122d4:	f023 030f 	bic.w	r3, r3, #15
 80122d8:	b25a      	sxtb	r2, r3
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	0a1b      	lsrs	r3, r3, #8
 80122de:	b25b      	sxtb	r3, r3
 80122e0:	f003 030f 	and.w	r3, r3, #15
 80122e4:	b25b      	sxtb	r3, r3
 80122e6:	4313      	orrs	r3, r2
 80122e8:	b25b      	sxtb	r3, r3
 80122ea:	b2db      	uxtb	r3, r3
 80122ec:	697a      	ldr	r2, [r7, #20]
 80122ee:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	2201      	movs	r2, #1
 80122f4:	70da      	strb	r2, [r3, #3]
			break;
 80122f6:	e057      	b.n	80123a8 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80122fc:	68bb      	ldr	r3, [r7, #8]
 80122fe:	0a1b      	lsrs	r3, r3, #8
 8012300:	4413      	add	r3, r2
 8012302:	4619      	mov	r1, r3
 8012304:	68f8      	ldr	r0, [r7, #12]
 8012306:	f7ff fe07 	bl	8011f18 <move_window>
 801230a:	4603      	mov	r3, r0
 801230c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801230e:	7ffb      	ldrb	r3, [r7, #31]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d146      	bne.n	80123a2 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801231a:	68bb      	ldr	r3, [r7, #8]
 801231c:	005b      	lsls	r3, r3, #1
 801231e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012322:	4413      	add	r3, r2
 8012324:	687a      	ldr	r2, [r7, #4]
 8012326:	b292      	uxth	r2, r2
 8012328:	4611      	mov	r1, r2
 801232a:	4618      	mov	r0, r3
 801232c:	f7ff fb4d 	bl	80119ca <st_word>
			fs->wflag = 1;
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	2201      	movs	r2, #1
 8012334:	70da      	strb	r2, [r3, #3]
			break;
 8012336:	e037      	b.n	80123a8 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801233c:	68bb      	ldr	r3, [r7, #8]
 801233e:	09db      	lsrs	r3, r3, #7
 8012340:	4413      	add	r3, r2
 8012342:	4619      	mov	r1, r3
 8012344:	68f8      	ldr	r0, [r7, #12]
 8012346:	f7ff fde7 	bl	8011f18 <move_window>
 801234a:	4603      	mov	r3, r0
 801234c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801234e:	7ffb      	ldrb	r3, [r7, #31]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d128      	bne.n	80123a6 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012360:	68bb      	ldr	r3, [r7, #8]
 8012362:	009b      	lsls	r3, r3, #2
 8012364:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012368:	4413      	add	r3, r2
 801236a:	4618      	mov	r0, r3
 801236c:	f7ff fb0a 	bl	8011984 <ld_dword>
 8012370:	4603      	mov	r3, r0
 8012372:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8012376:	4323      	orrs	r3, r4
 8012378:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012380:	68bb      	ldr	r3, [r7, #8]
 8012382:	009b      	lsls	r3, r3, #2
 8012384:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012388:	4413      	add	r3, r2
 801238a:	6879      	ldr	r1, [r7, #4]
 801238c:	4618      	mov	r0, r3
 801238e:	f7ff fb37 	bl	8011a00 <st_dword>
			fs->wflag = 1;
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	2201      	movs	r2, #1
 8012396:	70da      	strb	r2, [r3, #3]
			break;
 8012398:	e006      	b.n	80123a8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801239a:	bf00      	nop
 801239c:	e004      	b.n	80123a8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801239e:	bf00      	nop
 80123a0:	e002      	b.n	80123a8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80123a2:	bf00      	nop
 80123a4:	e000      	b.n	80123a8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80123a6:	bf00      	nop
		}
	}
	return res;
 80123a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80123aa:	4618      	mov	r0, r3
 80123ac:	3724      	adds	r7, #36	; 0x24
 80123ae:	46bd      	mov	sp, r7
 80123b0:	bd90      	pop	{r4, r7, pc}

080123b2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80123b2:	b580      	push	{r7, lr}
 80123b4:	b088      	sub	sp, #32
 80123b6:	af00      	add	r7, sp, #0
 80123b8:	60f8      	str	r0, [r7, #12]
 80123ba:	60b9      	str	r1, [r7, #8]
 80123bc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80123be:	2300      	movs	r3, #0
 80123c0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80123c8:	68bb      	ldr	r3, [r7, #8]
 80123ca:	2b01      	cmp	r3, #1
 80123cc:	d904      	bls.n	80123d8 <remove_chain+0x26>
 80123ce:	69bb      	ldr	r3, [r7, #24]
 80123d0:	699b      	ldr	r3, [r3, #24]
 80123d2:	68ba      	ldr	r2, [r7, #8]
 80123d4:	429a      	cmp	r2, r3
 80123d6:	d301      	bcc.n	80123dc <remove_chain+0x2a>
 80123d8:	2302      	movs	r3, #2
 80123da:	e04b      	b.n	8012474 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d00c      	beq.n	80123fc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80123e2:	f04f 32ff 	mov.w	r2, #4294967295
 80123e6:	6879      	ldr	r1, [r7, #4]
 80123e8:	69b8      	ldr	r0, [r7, #24]
 80123ea:	f7ff fef8 	bl	80121de <put_fat>
 80123ee:	4603      	mov	r3, r0
 80123f0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80123f2:	7ffb      	ldrb	r3, [r7, #31]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d001      	beq.n	80123fc <remove_chain+0x4a>
 80123f8:	7ffb      	ldrb	r3, [r7, #31]
 80123fa:	e03b      	b.n	8012474 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80123fc:	68b9      	ldr	r1, [r7, #8]
 80123fe:	68f8      	ldr	r0, [r7, #12]
 8012400:	f7ff fe45 	bl	801208e <get_fat>
 8012404:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012406:	697b      	ldr	r3, [r7, #20]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d031      	beq.n	8012470 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801240c:	697b      	ldr	r3, [r7, #20]
 801240e:	2b01      	cmp	r3, #1
 8012410:	d101      	bne.n	8012416 <remove_chain+0x64>
 8012412:	2302      	movs	r3, #2
 8012414:	e02e      	b.n	8012474 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012416:	697b      	ldr	r3, [r7, #20]
 8012418:	f1b3 3fff 	cmp.w	r3, #4294967295
 801241c:	d101      	bne.n	8012422 <remove_chain+0x70>
 801241e:	2301      	movs	r3, #1
 8012420:	e028      	b.n	8012474 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012422:	2200      	movs	r2, #0
 8012424:	68b9      	ldr	r1, [r7, #8]
 8012426:	69b8      	ldr	r0, [r7, #24]
 8012428:	f7ff fed9 	bl	80121de <put_fat>
 801242c:	4603      	mov	r3, r0
 801242e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012430:	7ffb      	ldrb	r3, [r7, #31]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d001      	beq.n	801243a <remove_chain+0x88>
 8012436:	7ffb      	ldrb	r3, [r7, #31]
 8012438:	e01c      	b.n	8012474 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801243a:	69bb      	ldr	r3, [r7, #24]
 801243c:	695a      	ldr	r2, [r3, #20]
 801243e:	69bb      	ldr	r3, [r7, #24]
 8012440:	699b      	ldr	r3, [r3, #24]
 8012442:	3b02      	subs	r3, #2
 8012444:	429a      	cmp	r2, r3
 8012446:	d20b      	bcs.n	8012460 <remove_chain+0xae>
			fs->free_clst++;
 8012448:	69bb      	ldr	r3, [r7, #24]
 801244a:	695b      	ldr	r3, [r3, #20]
 801244c:	1c5a      	adds	r2, r3, #1
 801244e:	69bb      	ldr	r3, [r7, #24]
 8012450:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8012452:	69bb      	ldr	r3, [r7, #24]
 8012454:	791b      	ldrb	r3, [r3, #4]
 8012456:	f043 0301 	orr.w	r3, r3, #1
 801245a:	b2da      	uxtb	r2, r3
 801245c:	69bb      	ldr	r3, [r7, #24]
 801245e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8012460:	697b      	ldr	r3, [r7, #20]
 8012462:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8012464:	69bb      	ldr	r3, [r7, #24]
 8012466:	699b      	ldr	r3, [r3, #24]
 8012468:	68ba      	ldr	r2, [r7, #8]
 801246a:	429a      	cmp	r2, r3
 801246c:	d3c6      	bcc.n	80123fc <remove_chain+0x4a>
 801246e:	e000      	b.n	8012472 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8012470:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8012472:	2300      	movs	r3, #0
}
 8012474:	4618      	mov	r0, r3
 8012476:	3720      	adds	r7, #32
 8012478:	46bd      	mov	sp, r7
 801247a:	bd80      	pop	{r7, pc}

0801247c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801247c:	b580      	push	{r7, lr}
 801247e:	b088      	sub	sp, #32
 8012480:	af00      	add	r7, sp, #0
 8012482:	6078      	str	r0, [r7, #4]
 8012484:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801248c:	683b      	ldr	r3, [r7, #0]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d10d      	bne.n	80124ae <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012492:	693b      	ldr	r3, [r7, #16]
 8012494:	691b      	ldr	r3, [r3, #16]
 8012496:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012498:	69bb      	ldr	r3, [r7, #24]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d004      	beq.n	80124a8 <create_chain+0x2c>
 801249e:	693b      	ldr	r3, [r7, #16]
 80124a0:	699b      	ldr	r3, [r3, #24]
 80124a2:	69ba      	ldr	r2, [r7, #24]
 80124a4:	429a      	cmp	r2, r3
 80124a6:	d31b      	bcc.n	80124e0 <create_chain+0x64>
 80124a8:	2301      	movs	r3, #1
 80124aa:	61bb      	str	r3, [r7, #24]
 80124ac:	e018      	b.n	80124e0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80124ae:	6839      	ldr	r1, [r7, #0]
 80124b0:	6878      	ldr	r0, [r7, #4]
 80124b2:	f7ff fdec 	bl	801208e <get_fat>
 80124b6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	2b01      	cmp	r3, #1
 80124bc:	d801      	bhi.n	80124c2 <create_chain+0x46>
 80124be:	2301      	movs	r3, #1
 80124c0:	e070      	b.n	80125a4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124c8:	d101      	bne.n	80124ce <create_chain+0x52>
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	e06a      	b.n	80125a4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80124ce:	693b      	ldr	r3, [r7, #16]
 80124d0:	699b      	ldr	r3, [r3, #24]
 80124d2:	68fa      	ldr	r2, [r7, #12]
 80124d4:	429a      	cmp	r2, r3
 80124d6:	d201      	bcs.n	80124dc <create_chain+0x60>
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	e063      	b.n	80125a4 <create_chain+0x128>
		scl = clst;
 80124dc:	683b      	ldr	r3, [r7, #0]
 80124de:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80124e0:	69bb      	ldr	r3, [r7, #24]
 80124e2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80124e4:	69fb      	ldr	r3, [r7, #28]
 80124e6:	3301      	adds	r3, #1
 80124e8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80124ea:	693b      	ldr	r3, [r7, #16]
 80124ec:	699b      	ldr	r3, [r3, #24]
 80124ee:	69fa      	ldr	r2, [r7, #28]
 80124f0:	429a      	cmp	r2, r3
 80124f2:	d307      	bcc.n	8012504 <create_chain+0x88>
				ncl = 2;
 80124f4:	2302      	movs	r3, #2
 80124f6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80124f8:	69fa      	ldr	r2, [r7, #28]
 80124fa:	69bb      	ldr	r3, [r7, #24]
 80124fc:	429a      	cmp	r2, r3
 80124fe:	d901      	bls.n	8012504 <create_chain+0x88>
 8012500:	2300      	movs	r3, #0
 8012502:	e04f      	b.n	80125a4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012504:	69f9      	ldr	r1, [r7, #28]
 8012506:	6878      	ldr	r0, [r7, #4]
 8012508:	f7ff fdc1 	bl	801208e <get_fat>
 801250c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d00e      	beq.n	8012532 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	2b01      	cmp	r3, #1
 8012518:	d003      	beq.n	8012522 <create_chain+0xa6>
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012520:	d101      	bne.n	8012526 <create_chain+0xaa>
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	e03e      	b.n	80125a4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012526:	69fa      	ldr	r2, [r7, #28]
 8012528:	69bb      	ldr	r3, [r7, #24]
 801252a:	429a      	cmp	r2, r3
 801252c:	d1da      	bne.n	80124e4 <create_chain+0x68>
 801252e:	2300      	movs	r3, #0
 8012530:	e038      	b.n	80125a4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012532:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012534:	f04f 32ff 	mov.w	r2, #4294967295
 8012538:	69f9      	ldr	r1, [r7, #28]
 801253a:	6938      	ldr	r0, [r7, #16]
 801253c:	f7ff fe4f 	bl	80121de <put_fat>
 8012540:	4603      	mov	r3, r0
 8012542:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012544:	7dfb      	ldrb	r3, [r7, #23]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d109      	bne.n	801255e <create_chain+0xe2>
 801254a:	683b      	ldr	r3, [r7, #0]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d006      	beq.n	801255e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012550:	69fa      	ldr	r2, [r7, #28]
 8012552:	6839      	ldr	r1, [r7, #0]
 8012554:	6938      	ldr	r0, [r7, #16]
 8012556:	f7ff fe42 	bl	80121de <put_fat>
 801255a:	4603      	mov	r3, r0
 801255c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801255e:	7dfb      	ldrb	r3, [r7, #23]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d116      	bne.n	8012592 <create_chain+0x116>
		fs->last_clst = ncl;
 8012564:	693b      	ldr	r3, [r7, #16]
 8012566:	69fa      	ldr	r2, [r7, #28]
 8012568:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801256a:	693b      	ldr	r3, [r7, #16]
 801256c:	695a      	ldr	r2, [r3, #20]
 801256e:	693b      	ldr	r3, [r7, #16]
 8012570:	699b      	ldr	r3, [r3, #24]
 8012572:	3b02      	subs	r3, #2
 8012574:	429a      	cmp	r2, r3
 8012576:	d804      	bhi.n	8012582 <create_chain+0x106>
 8012578:	693b      	ldr	r3, [r7, #16]
 801257a:	695b      	ldr	r3, [r3, #20]
 801257c:	1e5a      	subs	r2, r3, #1
 801257e:	693b      	ldr	r3, [r7, #16]
 8012580:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8012582:	693b      	ldr	r3, [r7, #16]
 8012584:	791b      	ldrb	r3, [r3, #4]
 8012586:	f043 0301 	orr.w	r3, r3, #1
 801258a:	b2da      	uxtb	r2, r3
 801258c:	693b      	ldr	r3, [r7, #16]
 801258e:	711a      	strb	r2, [r3, #4]
 8012590:	e007      	b.n	80125a2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012592:	7dfb      	ldrb	r3, [r7, #23]
 8012594:	2b01      	cmp	r3, #1
 8012596:	d102      	bne.n	801259e <create_chain+0x122>
 8012598:	f04f 33ff 	mov.w	r3, #4294967295
 801259c:	e000      	b.n	80125a0 <create_chain+0x124>
 801259e:	2301      	movs	r3, #1
 80125a0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80125a2:	69fb      	ldr	r3, [r7, #28]
}
 80125a4:	4618      	mov	r0, r3
 80125a6:	3720      	adds	r7, #32
 80125a8:	46bd      	mov	sp, r7
 80125aa:	bd80      	pop	{r7, pc}

080125ac <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80125ac:	b480      	push	{r7}
 80125ae:	b087      	sub	sp, #28
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
 80125b4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125c0:	3304      	adds	r3, #4
 80125c2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80125c4:	683b      	ldr	r3, [r7, #0]
 80125c6:	0a5b      	lsrs	r3, r3, #9
 80125c8:	68fa      	ldr	r2, [r7, #12]
 80125ca:	8952      	ldrh	r2, [r2, #10]
 80125cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80125d0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80125d2:	693b      	ldr	r3, [r7, #16]
 80125d4:	1d1a      	adds	r2, r3, #4
 80125d6:	613a      	str	r2, [r7, #16]
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80125dc:	68bb      	ldr	r3, [r7, #8]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d101      	bne.n	80125e6 <clmt_clust+0x3a>
 80125e2:	2300      	movs	r3, #0
 80125e4:	e010      	b.n	8012608 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80125e6:	697a      	ldr	r2, [r7, #20]
 80125e8:	68bb      	ldr	r3, [r7, #8]
 80125ea:	429a      	cmp	r2, r3
 80125ec:	d307      	bcc.n	80125fe <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80125ee:	697a      	ldr	r2, [r7, #20]
 80125f0:	68bb      	ldr	r3, [r7, #8]
 80125f2:	1ad3      	subs	r3, r2, r3
 80125f4:	617b      	str	r3, [r7, #20]
 80125f6:	693b      	ldr	r3, [r7, #16]
 80125f8:	3304      	adds	r3, #4
 80125fa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80125fc:	e7e9      	b.n	80125d2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80125fe:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012600:	693b      	ldr	r3, [r7, #16]
 8012602:	681a      	ldr	r2, [r3, #0]
 8012604:	697b      	ldr	r3, [r7, #20]
 8012606:	4413      	add	r3, r2
}
 8012608:	4618      	mov	r0, r3
 801260a:	371c      	adds	r7, #28
 801260c:	46bd      	mov	sp, r7
 801260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012612:	4770      	bx	lr

08012614 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8012614:	b580      	push	{r7, lr}
 8012616:	b086      	sub	sp, #24
 8012618:	af00      	add	r7, sp, #0
 801261a:	6078      	str	r0, [r7, #4]
 801261c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8012624:	683b      	ldr	r3, [r7, #0]
 8012626:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801262a:	d204      	bcs.n	8012636 <dir_sdi+0x22>
 801262c:	683b      	ldr	r3, [r7, #0]
 801262e:	f003 031f 	and.w	r3, r3, #31
 8012632:	2b00      	cmp	r3, #0
 8012634:	d001      	beq.n	801263a <dir_sdi+0x26>
		return FR_INT_ERR;
 8012636:	2302      	movs	r3, #2
 8012638:	e063      	b.n	8012702 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	683a      	ldr	r2, [r7, #0]
 801263e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	689b      	ldr	r3, [r3, #8]
 8012644:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012646:	697b      	ldr	r3, [r7, #20]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d106      	bne.n	801265a <dir_sdi+0x46>
 801264c:	693b      	ldr	r3, [r7, #16]
 801264e:	781b      	ldrb	r3, [r3, #0]
 8012650:	2b02      	cmp	r3, #2
 8012652:	d902      	bls.n	801265a <dir_sdi+0x46>
		clst = fs->dirbase;
 8012654:	693b      	ldr	r3, [r7, #16]
 8012656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012658:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801265a:	697b      	ldr	r3, [r7, #20]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d10c      	bne.n	801267a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8012660:	683b      	ldr	r3, [r7, #0]
 8012662:	095b      	lsrs	r3, r3, #5
 8012664:	693a      	ldr	r2, [r7, #16]
 8012666:	8912      	ldrh	r2, [r2, #8]
 8012668:	4293      	cmp	r3, r2
 801266a:	d301      	bcc.n	8012670 <dir_sdi+0x5c>
 801266c:	2302      	movs	r3, #2
 801266e:	e048      	b.n	8012702 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8012670:	693b      	ldr	r3, [r7, #16]
 8012672:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	61da      	str	r2, [r3, #28]
 8012678:	e029      	b.n	80126ce <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801267a:	693b      	ldr	r3, [r7, #16]
 801267c:	895b      	ldrh	r3, [r3, #10]
 801267e:	025b      	lsls	r3, r3, #9
 8012680:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012682:	e019      	b.n	80126b8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	6979      	ldr	r1, [r7, #20]
 8012688:	4618      	mov	r0, r3
 801268a:	f7ff fd00 	bl	801208e <get_fat>
 801268e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012690:	697b      	ldr	r3, [r7, #20]
 8012692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012696:	d101      	bne.n	801269c <dir_sdi+0x88>
 8012698:	2301      	movs	r3, #1
 801269a:	e032      	b.n	8012702 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801269c:	697b      	ldr	r3, [r7, #20]
 801269e:	2b01      	cmp	r3, #1
 80126a0:	d904      	bls.n	80126ac <dir_sdi+0x98>
 80126a2:	693b      	ldr	r3, [r7, #16]
 80126a4:	699b      	ldr	r3, [r3, #24]
 80126a6:	697a      	ldr	r2, [r7, #20]
 80126a8:	429a      	cmp	r2, r3
 80126aa:	d301      	bcc.n	80126b0 <dir_sdi+0x9c>
 80126ac:	2302      	movs	r3, #2
 80126ae:	e028      	b.n	8012702 <dir_sdi+0xee>
			ofs -= csz;
 80126b0:	683a      	ldr	r2, [r7, #0]
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	1ad3      	subs	r3, r2, r3
 80126b6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80126b8:	683a      	ldr	r2, [r7, #0]
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	429a      	cmp	r2, r3
 80126be:	d2e1      	bcs.n	8012684 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80126c0:	6979      	ldr	r1, [r7, #20]
 80126c2:	6938      	ldr	r0, [r7, #16]
 80126c4:	f7ff fcc4 	bl	8012050 <clust2sect>
 80126c8:	4602      	mov	r2, r0
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	697a      	ldr	r2, [r7, #20]
 80126d2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	69db      	ldr	r3, [r3, #28]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d101      	bne.n	80126e0 <dir_sdi+0xcc>
 80126dc:	2302      	movs	r3, #2
 80126de:	e010      	b.n	8012702 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	69da      	ldr	r2, [r3, #28]
 80126e4:	683b      	ldr	r3, [r7, #0]
 80126e6:	0a5b      	lsrs	r3, r3, #9
 80126e8:	441a      	add	r2, r3
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80126ee:	693b      	ldr	r3, [r7, #16]
 80126f0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80126f4:	683b      	ldr	r3, [r7, #0]
 80126f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80126fa:	441a      	add	r2, r3
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012700:	2300      	movs	r3, #0
}
 8012702:	4618      	mov	r0, r3
 8012704:	3718      	adds	r7, #24
 8012706:	46bd      	mov	sp, r7
 8012708:	bd80      	pop	{r7, pc}

0801270a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801270a:	b580      	push	{r7, lr}
 801270c:	b086      	sub	sp, #24
 801270e:	af00      	add	r7, sp, #0
 8012710:	6078      	str	r0, [r7, #4]
 8012712:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	695b      	ldr	r3, [r3, #20]
 801271e:	3320      	adds	r3, #32
 8012720:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	69db      	ldr	r3, [r3, #28]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d003      	beq.n	8012732 <dir_next+0x28>
 801272a:	68bb      	ldr	r3, [r7, #8]
 801272c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012730:	d301      	bcc.n	8012736 <dir_next+0x2c>
 8012732:	2304      	movs	r3, #4
 8012734:	e0aa      	b.n	801288c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012736:	68bb      	ldr	r3, [r7, #8]
 8012738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801273c:	2b00      	cmp	r3, #0
 801273e:	f040 8098 	bne.w	8012872 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	69db      	ldr	r3, [r3, #28]
 8012746:	1c5a      	adds	r2, r3, #1
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	699b      	ldr	r3, [r3, #24]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d10b      	bne.n	801276c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012754:	68bb      	ldr	r3, [r7, #8]
 8012756:	095b      	lsrs	r3, r3, #5
 8012758:	68fa      	ldr	r2, [r7, #12]
 801275a:	8912      	ldrh	r2, [r2, #8]
 801275c:	4293      	cmp	r3, r2
 801275e:	f0c0 8088 	bcc.w	8012872 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	2200      	movs	r2, #0
 8012766:	61da      	str	r2, [r3, #28]
 8012768:	2304      	movs	r3, #4
 801276a:	e08f      	b.n	801288c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801276c:	68bb      	ldr	r3, [r7, #8]
 801276e:	0a5b      	lsrs	r3, r3, #9
 8012770:	68fa      	ldr	r2, [r7, #12]
 8012772:	8952      	ldrh	r2, [r2, #10]
 8012774:	3a01      	subs	r2, #1
 8012776:	4013      	ands	r3, r2
 8012778:	2b00      	cmp	r3, #0
 801277a:	d17a      	bne.n	8012872 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801277c:	687a      	ldr	r2, [r7, #4]
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	699b      	ldr	r3, [r3, #24]
 8012782:	4619      	mov	r1, r3
 8012784:	4610      	mov	r0, r2
 8012786:	f7ff fc82 	bl	801208e <get_fat>
 801278a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801278c:	697b      	ldr	r3, [r7, #20]
 801278e:	2b01      	cmp	r3, #1
 8012790:	d801      	bhi.n	8012796 <dir_next+0x8c>
 8012792:	2302      	movs	r3, #2
 8012794:	e07a      	b.n	801288c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012796:	697b      	ldr	r3, [r7, #20]
 8012798:	f1b3 3fff 	cmp.w	r3, #4294967295
 801279c:	d101      	bne.n	80127a2 <dir_next+0x98>
 801279e:	2301      	movs	r3, #1
 80127a0:	e074      	b.n	801288c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	699b      	ldr	r3, [r3, #24]
 80127a6:	697a      	ldr	r2, [r7, #20]
 80127a8:	429a      	cmp	r2, r3
 80127aa:	d358      	bcc.n	801285e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80127ac:	683b      	ldr	r3, [r7, #0]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d104      	bne.n	80127bc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	2200      	movs	r2, #0
 80127b6:	61da      	str	r2, [r3, #28]
 80127b8:	2304      	movs	r3, #4
 80127ba:	e067      	b.n	801288c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80127bc:	687a      	ldr	r2, [r7, #4]
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	699b      	ldr	r3, [r3, #24]
 80127c2:	4619      	mov	r1, r3
 80127c4:	4610      	mov	r0, r2
 80127c6:	f7ff fe59 	bl	801247c <create_chain>
 80127ca:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80127cc:	697b      	ldr	r3, [r7, #20]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d101      	bne.n	80127d6 <dir_next+0xcc>
 80127d2:	2307      	movs	r3, #7
 80127d4:	e05a      	b.n	801288c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80127d6:	697b      	ldr	r3, [r7, #20]
 80127d8:	2b01      	cmp	r3, #1
 80127da:	d101      	bne.n	80127e0 <dir_next+0xd6>
 80127dc:	2302      	movs	r3, #2
 80127de:	e055      	b.n	801288c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80127e0:	697b      	ldr	r3, [r7, #20]
 80127e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127e6:	d101      	bne.n	80127ec <dir_next+0xe2>
 80127e8:	2301      	movs	r3, #1
 80127ea:	e04f      	b.n	801288c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80127ec:	68f8      	ldr	r0, [r7, #12]
 80127ee:	f7ff fb4f 	bl	8011e90 <sync_window>
 80127f2:	4603      	mov	r3, r0
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d001      	beq.n	80127fc <dir_next+0xf2>
 80127f8:	2301      	movs	r3, #1
 80127fa:	e047      	b.n	801288c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	3334      	adds	r3, #52	; 0x34
 8012800:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012804:	2100      	movs	r1, #0
 8012806:	4618      	mov	r0, r3
 8012808:	f7ff f947 	bl	8011a9a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801280c:	2300      	movs	r3, #0
 801280e:	613b      	str	r3, [r7, #16]
 8012810:	6979      	ldr	r1, [r7, #20]
 8012812:	68f8      	ldr	r0, [r7, #12]
 8012814:	f7ff fc1c 	bl	8012050 <clust2sect>
 8012818:	4602      	mov	r2, r0
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	631a      	str	r2, [r3, #48]	; 0x30
 801281e:	e012      	b.n	8012846 <dir_next+0x13c>
						fs->wflag = 1;
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	2201      	movs	r2, #1
 8012824:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8012826:	68f8      	ldr	r0, [r7, #12]
 8012828:	f7ff fb32 	bl	8011e90 <sync_window>
 801282c:	4603      	mov	r3, r0
 801282e:	2b00      	cmp	r3, #0
 8012830:	d001      	beq.n	8012836 <dir_next+0x12c>
 8012832:	2301      	movs	r3, #1
 8012834:	e02a      	b.n	801288c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012836:	693b      	ldr	r3, [r7, #16]
 8012838:	3301      	adds	r3, #1
 801283a:	613b      	str	r3, [r7, #16]
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012840:	1c5a      	adds	r2, r3, #1
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	631a      	str	r2, [r3, #48]	; 0x30
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	895b      	ldrh	r3, [r3, #10]
 801284a:	461a      	mov	r2, r3
 801284c:	693b      	ldr	r3, [r7, #16]
 801284e:	4293      	cmp	r3, r2
 8012850:	d3e6      	bcc.n	8012820 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012856:	693b      	ldr	r3, [r7, #16]
 8012858:	1ad2      	subs	r2, r2, r3
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	697a      	ldr	r2, [r7, #20]
 8012862:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8012864:	6979      	ldr	r1, [r7, #20]
 8012866:	68f8      	ldr	r0, [r7, #12]
 8012868:	f7ff fbf2 	bl	8012050 <clust2sect>
 801286c:	4602      	mov	r2, r0
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	68ba      	ldr	r2, [r7, #8]
 8012876:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801287e:	68bb      	ldr	r3, [r7, #8]
 8012880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012884:	441a      	add	r2, r3
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801288a:	2300      	movs	r3, #0
}
 801288c:	4618      	mov	r0, r3
 801288e:	3718      	adds	r7, #24
 8012890:	46bd      	mov	sp, r7
 8012892:	bd80      	pop	{r7, pc}

08012894 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b086      	sub	sp, #24
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
 801289c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80128a4:	2100      	movs	r1, #0
 80128a6:	6878      	ldr	r0, [r7, #4]
 80128a8:	f7ff feb4 	bl	8012614 <dir_sdi>
 80128ac:	4603      	mov	r3, r0
 80128ae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80128b0:	7dfb      	ldrb	r3, [r7, #23]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d12b      	bne.n	801290e <dir_alloc+0x7a>
		n = 0;
 80128b6:	2300      	movs	r3, #0
 80128b8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	69db      	ldr	r3, [r3, #28]
 80128be:	4619      	mov	r1, r3
 80128c0:	68f8      	ldr	r0, [r7, #12]
 80128c2:	f7ff fb29 	bl	8011f18 <move_window>
 80128c6:	4603      	mov	r3, r0
 80128c8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80128ca:	7dfb      	ldrb	r3, [r7, #23]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d11d      	bne.n	801290c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	6a1b      	ldr	r3, [r3, #32]
 80128d4:	781b      	ldrb	r3, [r3, #0]
 80128d6:	2be5      	cmp	r3, #229	; 0xe5
 80128d8:	d004      	beq.n	80128e4 <dir_alloc+0x50>
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	6a1b      	ldr	r3, [r3, #32]
 80128de:	781b      	ldrb	r3, [r3, #0]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d107      	bne.n	80128f4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80128e4:	693b      	ldr	r3, [r7, #16]
 80128e6:	3301      	adds	r3, #1
 80128e8:	613b      	str	r3, [r7, #16]
 80128ea:	693a      	ldr	r2, [r7, #16]
 80128ec:	683b      	ldr	r3, [r7, #0]
 80128ee:	429a      	cmp	r2, r3
 80128f0:	d102      	bne.n	80128f8 <dir_alloc+0x64>
 80128f2:	e00c      	b.n	801290e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80128f4:	2300      	movs	r3, #0
 80128f6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80128f8:	2101      	movs	r1, #1
 80128fa:	6878      	ldr	r0, [r7, #4]
 80128fc:	f7ff ff05 	bl	801270a <dir_next>
 8012900:	4603      	mov	r3, r0
 8012902:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012904:	7dfb      	ldrb	r3, [r7, #23]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d0d7      	beq.n	80128ba <dir_alloc+0x26>
 801290a:	e000      	b.n	801290e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801290c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801290e:	7dfb      	ldrb	r3, [r7, #23]
 8012910:	2b04      	cmp	r3, #4
 8012912:	d101      	bne.n	8012918 <dir_alloc+0x84>
 8012914:	2307      	movs	r3, #7
 8012916:	75fb      	strb	r3, [r7, #23]
	return res;
 8012918:	7dfb      	ldrb	r3, [r7, #23]
}
 801291a:	4618      	mov	r0, r3
 801291c:	3718      	adds	r7, #24
 801291e:	46bd      	mov	sp, r7
 8012920:	bd80      	pop	{r7, pc}

08012922 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8012922:	b580      	push	{r7, lr}
 8012924:	b084      	sub	sp, #16
 8012926:	af00      	add	r7, sp, #0
 8012928:	6078      	str	r0, [r7, #4]
 801292a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801292c:	683b      	ldr	r3, [r7, #0]
 801292e:	331a      	adds	r3, #26
 8012930:	4618      	mov	r0, r3
 8012932:	f7ff f80f 	bl	8011954 <ld_word>
 8012936:	4603      	mov	r3, r0
 8012938:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	781b      	ldrb	r3, [r3, #0]
 801293e:	2b03      	cmp	r3, #3
 8012940:	d109      	bne.n	8012956 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012942:	683b      	ldr	r3, [r7, #0]
 8012944:	3314      	adds	r3, #20
 8012946:	4618      	mov	r0, r3
 8012948:	f7ff f804 	bl	8011954 <ld_word>
 801294c:	4603      	mov	r3, r0
 801294e:	041b      	lsls	r3, r3, #16
 8012950:	68fa      	ldr	r2, [r7, #12]
 8012952:	4313      	orrs	r3, r2
 8012954:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012956:	68fb      	ldr	r3, [r7, #12]
}
 8012958:	4618      	mov	r0, r3
 801295a:	3710      	adds	r7, #16
 801295c:	46bd      	mov	sp, r7
 801295e:	bd80      	pop	{r7, pc}

08012960 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012960:	b580      	push	{r7, lr}
 8012962:	b084      	sub	sp, #16
 8012964:	af00      	add	r7, sp, #0
 8012966:	60f8      	str	r0, [r7, #12]
 8012968:	60b9      	str	r1, [r7, #8]
 801296a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801296c:	68bb      	ldr	r3, [r7, #8]
 801296e:	331a      	adds	r3, #26
 8012970:	687a      	ldr	r2, [r7, #4]
 8012972:	b292      	uxth	r2, r2
 8012974:	4611      	mov	r1, r2
 8012976:	4618      	mov	r0, r3
 8012978:	f7ff f827 	bl	80119ca <st_word>
	if (fs->fs_type == FS_FAT32) {
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	781b      	ldrb	r3, [r3, #0]
 8012980:	2b03      	cmp	r3, #3
 8012982:	d109      	bne.n	8012998 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012984:	68bb      	ldr	r3, [r7, #8]
 8012986:	f103 0214 	add.w	r2, r3, #20
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	0c1b      	lsrs	r3, r3, #16
 801298e:	b29b      	uxth	r3, r3
 8012990:	4619      	mov	r1, r3
 8012992:	4610      	mov	r0, r2
 8012994:	f7ff f819 	bl	80119ca <st_word>
	}
}
 8012998:	bf00      	nop
 801299a:	3710      	adds	r7, #16
 801299c:	46bd      	mov	sp, r7
 801299e:	bd80      	pop	{r7, pc}

080129a0 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80129a0:	b580      	push	{r7, lr}
 80129a2:	b086      	sub	sp, #24
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	6078      	str	r0, [r7, #4]
 80129a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80129aa:	2304      	movs	r3, #4
 80129ac:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80129b4:	e03c      	b.n	8012a30 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	69db      	ldr	r3, [r3, #28]
 80129ba:	4619      	mov	r1, r3
 80129bc:	6938      	ldr	r0, [r7, #16]
 80129be:	f7ff faab 	bl	8011f18 <move_window>
 80129c2:	4603      	mov	r3, r0
 80129c4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80129c6:	7dfb      	ldrb	r3, [r7, #23]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d136      	bne.n	8012a3a <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	6a1b      	ldr	r3, [r3, #32]
 80129d0:	781b      	ldrb	r3, [r3, #0]
 80129d2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80129d4:	7bfb      	ldrb	r3, [r7, #15]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d102      	bne.n	80129e0 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80129da:	2304      	movs	r3, #4
 80129dc:	75fb      	strb	r3, [r7, #23]
 80129de:	e031      	b.n	8012a44 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	6a1b      	ldr	r3, [r3, #32]
 80129e4:	330b      	adds	r3, #11
 80129e6:	781b      	ldrb	r3, [r3, #0]
 80129e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80129ec:	73bb      	strb	r3, [r7, #14]
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	7bba      	ldrb	r2, [r7, #14]
 80129f2:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80129f4:	7bfb      	ldrb	r3, [r7, #15]
 80129f6:	2be5      	cmp	r3, #229	; 0xe5
 80129f8:	d011      	beq.n	8012a1e <dir_read+0x7e>
 80129fa:	7bfb      	ldrb	r3, [r7, #15]
 80129fc:	2b2e      	cmp	r3, #46	; 0x2e
 80129fe:	d00e      	beq.n	8012a1e <dir_read+0x7e>
 8012a00:	7bbb      	ldrb	r3, [r7, #14]
 8012a02:	2b0f      	cmp	r3, #15
 8012a04:	d00b      	beq.n	8012a1e <dir_read+0x7e>
 8012a06:	7bbb      	ldrb	r3, [r7, #14]
 8012a08:	f023 0320 	bic.w	r3, r3, #32
 8012a0c:	2b08      	cmp	r3, #8
 8012a0e:	bf0c      	ite	eq
 8012a10:	2301      	moveq	r3, #1
 8012a12:	2300      	movne	r3, #0
 8012a14:	b2db      	uxtb	r3, r3
 8012a16:	461a      	mov	r2, r3
 8012a18:	683b      	ldr	r3, [r7, #0]
 8012a1a:	4293      	cmp	r3, r2
 8012a1c:	d00f      	beq.n	8012a3e <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8012a1e:	2100      	movs	r1, #0
 8012a20:	6878      	ldr	r0, [r7, #4]
 8012a22:	f7ff fe72 	bl	801270a <dir_next>
 8012a26:	4603      	mov	r3, r0
 8012a28:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012a2a:	7dfb      	ldrb	r3, [r7, #23]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d108      	bne.n	8012a42 <dir_read+0xa2>
	while (dp->sect) {
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	69db      	ldr	r3, [r3, #28]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d1be      	bne.n	80129b6 <dir_read+0x16>
 8012a38:	e004      	b.n	8012a44 <dir_read+0xa4>
		if (res != FR_OK) break;
 8012a3a:	bf00      	nop
 8012a3c:	e002      	b.n	8012a44 <dir_read+0xa4>
				break;
 8012a3e:	bf00      	nop
 8012a40:	e000      	b.n	8012a44 <dir_read+0xa4>
		if (res != FR_OK) break;
 8012a42:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012a44:	7dfb      	ldrb	r3, [r7, #23]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d002      	beq.n	8012a50 <dir_read+0xb0>
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	2200      	movs	r2, #0
 8012a4e:	61da      	str	r2, [r3, #28]
	return res;
 8012a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a52:	4618      	mov	r0, r3
 8012a54:	3718      	adds	r7, #24
 8012a56:	46bd      	mov	sp, r7
 8012a58:	bd80      	pop	{r7, pc}

08012a5a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012a5a:	b580      	push	{r7, lr}
 8012a5c:	b086      	sub	sp, #24
 8012a5e:	af00      	add	r7, sp, #0
 8012a60:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012a68:	2100      	movs	r1, #0
 8012a6a:	6878      	ldr	r0, [r7, #4]
 8012a6c:	f7ff fdd2 	bl	8012614 <dir_sdi>
 8012a70:	4603      	mov	r3, r0
 8012a72:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012a74:	7dfb      	ldrb	r3, [r7, #23]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d001      	beq.n	8012a7e <dir_find+0x24>
 8012a7a:	7dfb      	ldrb	r3, [r7, #23]
 8012a7c:	e03e      	b.n	8012afc <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	69db      	ldr	r3, [r3, #28]
 8012a82:	4619      	mov	r1, r3
 8012a84:	6938      	ldr	r0, [r7, #16]
 8012a86:	f7ff fa47 	bl	8011f18 <move_window>
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012a8e:	7dfb      	ldrb	r3, [r7, #23]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d12f      	bne.n	8012af4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	6a1b      	ldr	r3, [r3, #32]
 8012a98:	781b      	ldrb	r3, [r3, #0]
 8012a9a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012a9c:	7bfb      	ldrb	r3, [r7, #15]
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d102      	bne.n	8012aa8 <dir_find+0x4e>
 8012aa2:	2304      	movs	r3, #4
 8012aa4:	75fb      	strb	r3, [r7, #23]
 8012aa6:	e028      	b.n	8012afa <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	6a1b      	ldr	r3, [r3, #32]
 8012aac:	330b      	adds	r3, #11
 8012aae:	781b      	ldrb	r3, [r3, #0]
 8012ab0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012ab4:	b2da      	uxtb	r2, r3
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	6a1b      	ldr	r3, [r3, #32]
 8012abe:	330b      	adds	r3, #11
 8012ac0:	781b      	ldrb	r3, [r3, #0]
 8012ac2:	f003 0308 	and.w	r3, r3, #8
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d10a      	bne.n	8012ae0 <dir_find+0x86>
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	6a18      	ldr	r0, [r3, #32]
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	3324      	adds	r3, #36	; 0x24
 8012ad2:	220b      	movs	r2, #11
 8012ad4:	4619      	mov	r1, r3
 8012ad6:	f7fe fffb 	bl	8011ad0 <mem_cmp>
 8012ada:	4603      	mov	r3, r0
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d00b      	beq.n	8012af8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012ae0:	2100      	movs	r1, #0
 8012ae2:	6878      	ldr	r0, [r7, #4]
 8012ae4:	f7ff fe11 	bl	801270a <dir_next>
 8012ae8:	4603      	mov	r3, r0
 8012aea:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012aec:	7dfb      	ldrb	r3, [r7, #23]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d0c5      	beq.n	8012a7e <dir_find+0x24>
 8012af2:	e002      	b.n	8012afa <dir_find+0xa0>
		if (res != FR_OK) break;
 8012af4:	bf00      	nop
 8012af6:	e000      	b.n	8012afa <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012af8:	bf00      	nop

	return res;
 8012afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8012afc:	4618      	mov	r0, r3
 8012afe:	3718      	adds	r7, #24
 8012b00:	46bd      	mov	sp, r7
 8012b02:	bd80      	pop	{r7, pc}

08012b04 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012b04:	b580      	push	{r7, lr}
 8012b06:	b084      	sub	sp, #16
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8012b12:	2101      	movs	r1, #1
 8012b14:	6878      	ldr	r0, [r7, #4]
 8012b16:	f7ff febd 	bl	8012894 <dir_alloc>
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012b1e:	7bfb      	ldrb	r3, [r7, #15]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d11c      	bne.n	8012b5e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	69db      	ldr	r3, [r3, #28]
 8012b28:	4619      	mov	r1, r3
 8012b2a:	68b8      	ldr	r0, [r7, #8]
 8012b2c:	f7ff f9f4 	bl	8011f18 <move_window>
 8012b30:	4603      	mov	r3, r0
 8012b32:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012b34:	7bfb      	ldrb	r3, [r7, #15]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d111      	bne.n	8012b5e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	6a1b      	ldr	r3, [r3, #32]
 8012b3e:	2220      	movs	r2, #32
 8012b40:	2100      	movs	r1, #0
 8012b42:	4618      	mov	r0, r3
 8012b44:	f7fe ffa9 	bl	8011a9a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	6a18      	ldr	r0, [r3, #32]
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	3324      	adds	r3, #36	; 0x24
 8012b50:	220b      	movs	r2, #11
 8012b52:	4619      	mov	r1, r3
 8012b54:	f7fe ff80 	bl	8011a58 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012b58:	68bb      	ldr	r3, [r7, #8]
 8012b5a:	2201      	movs	r2, #1
 8012b5c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b60:	4618      	mov	r0, r3
 8012b62:	3710      	adds	r7, #16
 8012b64:	46bd      	mov	sp, r7
 8012b66:	bd80      	pop	{r7, pc}

08012b68 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b084      	sub	sp, #16
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	69db      	ldr	r3, [r3, #28]
 8012b7a:	4619      	mov	r1, r3
 8012b7c:	68f8      	ldr	r0, [r7, #12]
 8012b7e:	f7ff f9cb 	bl	8011f18 <move_window>
 8012b82:	4603      	mov	r3, r0
 8012b84:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8012b86:	7afb      	ldrb	r3, [r7, #11]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d106      	bne.n	8012b9a <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	6a1b      	ldr	r3, [r3, #32]
 8012b90:	22e5      	movs	r2, #229	; 0xe5
 8012b92:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	2201      	movs	r2, #1
 8012b98:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8012b9a:	7afb      	ldrb	r3, [r7, #11]
}
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	3710      	adds	r7, #16
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	bd80      	pop	{r7, pc}

08012ba4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b086      	sub	sp, #24
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	6078      	str	r0, [r7, #4]
 8012bac:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8012bae:	683b      	ldr	r3, [r7, #0]
 8012bb0:	2200      	movs	r2, #0
 8012bb2:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	69db      	ldr	r3, [r3, #28]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d04e      	beq.n	8012c5a <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	613b      	str	r3, [r7, #16]
 8012bc0:	693b      	ldr	r3, [r7, #16]
 8012bc2:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8012bc4:	e021      	b.n	8012c0a <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	6a1a      	ldr	r2, [r3, #32]
 8012bca:	697b      	ldr	r3, [r7, #20]
 8012bcc:	1c59      	adds	r1, r3, #1
 8012bce:	6179      	str	r1, [r7, #20]
 8012bd0:	4413      	add	r3, r2
 8012bd2:	781b      	ldrb	r3, [r3, #0]
 8012bd4:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8012bd6:	7bfb      	ldrb	r3, [r7, #15]
 8012bd8:	2b20      	cmp	r3, #32
 8012bda:	d100      	bne.n	8012bde <get_fileinfo+0x3a>
 8012bdc:	e015      	b.n	8012c0a <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8012bde:	7bfb      	ldrb	r3, [r7, #15]
 8012be0:	2b05      	cmp	r3, #5
 8012be2:	d101      	bne.n	8012be8 <get_fileinfo+0x44>
 8012be4:	23e5      	movs	r3, #229	; 0xe5
 8012be6:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8012be8:	697b      	ldr	r3, [r7, #20]
 8012bea:	2b09      	cmp	r3, #9
 8012bec:	d106      	bne.n	8012bfc <get_fileinfo+0x58>
 8012bee:	693b      	ldr	r3, [r7, #16]
 8012bf0:	1c5a      	adds	r2, r3, #1
 8012bf2:	613a      	str	r2, [r7, #16]
 8012bf4:	683a      	ldr	r2, [r7, #0]
 8012bf6:	4413      	add	r3, r2
 8012bf8:	222e      	movs	r2, #46	; 0x2e
 8012bfa:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8012bfc:	693b      	ldr	r3, [r7, #16]
 8012bfe:	1c5a      	adds	r2, r3, #1
 8012c00:	613a      	str	r2, [r7, #16]
 8012c02:	683a      	ldr	r2, [r7, #0]
 8012c04:	4413      	add	r3, r2
 8012c06:	7bfa      	ldrb	r2, [r7, #15]
 8012c08:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8012c0a:	697b      	ldr	r3, [r7, #20]
 8012c0c:	2b0a      	cmp	r3, #10
 8012c0e:	d9da      	bls.n	8012bc6 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8012c10:	683a      	ldr	r2, [r7, #0]
 8012c12:	693b      	ldr	r3, [r7, #16]
 8012c14:	4413      	add	r3, r2
 8012c16:	3309      	adds	r3, #9
 8012c18:	2200      	movs	r2, #0
 8012c1a:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	6a1b      	ldr	r3, [r3, #32]
 8012c20:	7ada      	ldrb	r2, [r3, #11]
 8012c22:	683b      	ldr	r3, [r7, #0]
 8012c24:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	6a1b      	ldr	r3, [r3, #32]
 8012c2a:	331c      	adds	r3, #28
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	f7fe fea9 	bl	8011984 <ld_dword>
 8012c32:	4602      	mov	r2, r0
 8012c34:	683b      	ldr	r3, [r7, #0]
 8012c36:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	6a1b      	ldr	r3, [r3, #32]
 8012c3c:	3316      	adds	r3, #22
 8012c3e:	4618      	mov	r0, r3
 8012c40:	f7fe fea0 	bl	8011984 <ld_dword>
 8012c44:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8012c46:	68bb      	ldr	r3, [r7, #8]
 8012c48:	b29a      	uxth	r2, r3
 8012c4a:	683b      	ldr	r3, [r7, #0]
 8012c4c:	80da      	strh	r2, [r3, #6]
 8012c4e:	68bb      	ldr	r3, [r7, #8]
 8012c50:	0c1b      	lsrs	r3, r3, #16
 8012c52:	b29a      	uxth	r2, r3
 8012c54:	683b      	ldr	r3, [r7, #0]
 8012c56:	809a      	strh	r2, [r3, #4]
 8012c58:	e000      	b.n	8012c5c <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8012c5a:	bf00      	nop
}
 8012c5c:	3718      	adds	r7, #24
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	bd80      	pop	{r7, pc}
	...

08012c64 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b088      	sub	sp, #32
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	6078      	str	r0, [r7, #4]
 8012c6c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8012c6e:	683b      	ldr	r3, [r7, #0]
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	60fb      	str	r3, [r7, #12]
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	3324      	adds	r3, #36	; 0x24
 8012c78:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8012c7a:	220b      	movs	r2, #11
 8012c7c:	2120      	movs	r1, #32
 8012c7e:	68b8      	ldr	r0, [r7, #8]
 8012c80:	f7fe ff0b 	bl	8011a9a <mem_set>
	si = i = 0; ni = 8;
 8012c84:	2300      	movs	r3, #0
 8012c86:	613b      	str	r3, [r7, #16]
 8012c88:	693b      	ldr	r3, [r7, #16]
 8012c8a:	61fb      	str	r3, [r7, #28]
 8012c8c:	2308      	movs	r3, #8
 8012c8e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012c90:	69fb      	ldr	r3, [r7, #28]
 8012c92:	1c5a      	adds	r2, r3, #1
 8012c94:	61fa      	str	r2, [r7, #28]
 8012c96:	68fa      	ldr	r2, [r7, #12]
 8012c98:	4413      	add	r3, r2
 8012c9a:	781b      	ldrb	r3, [r3, #0]
 8012c9c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012c9e:	7efb      	ldrb	r3, [r7, #27]
 8012ca0:	2b20      	cmp	r3, #32
 8012ca2:	d94e      	bls.n	8012d42 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012ca4:	7efb      	ldrb	r3, [r7, #27]
 8012ca6:	2b2f      	cmp	r3, #47	; 0x2f
 8012ca8:	d006      	beq.n	8012cb8 <create_name+0x54>
 8012caa:	7efb      	ldrb	r3, [r7, #27]
 8012cac:	2b5c      	cmp	r3, #92	; 0x5c
 8012cae:	d110      	bne.n	8012cd2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012cb0:	e002      	b.n	8012cb8 <create_name+0x54>
 8012cb2:	69fb      	ldr	r3, [r7, #28]
 8012cb4:	3301      	adds	r3, #1
 8012cb6:	61fb      	str	r3, [r7, #28]
 8012cb8:	68fa      	ldr	r2, [r7, #12]
 8012cba:	69fb      	ldr	r3, [r7, #28]
 8012cbc:	4413      	add	r3, r2
 8012cbe:	781b      	ldrb	r3, [r3, #0]
 8012cc0:	2b2f      	cmp	r3, #47	; 0x2f
 8012cc2:	d0f6      	beq.n	8012cb2 <create_name+0x4e>
 8012cc4:	68fa      	ldr	r2, [r7, #12]
 8012cc6:	69fb      	ldr	r3, [r7, #28]
 8012cc8:	4413      	add	r3, r2
 8012cca:	781b      	ldrb	r3, [r3, #0]
 8012ccc:	2b5c      	cmp	r3, #92	; 0x5c
 8012cce:	d0f0      	beq.n	8012cb2 <create_name+0x4e>
			break;
 8012cd0:	e038      	b.n	8012d44 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012cd2:	7efb      	ldrb	r3, [r7, #27]
 8012cd4:	2b2e      	cmp	r3, #46	; 0x2e
 8012cd6:	d003      	beq.n	8012ce0 <create_name+0x7c>
 8012cd8:	693a      	ldr	r2, [r7, #16]
 8012cda:	697b      	ldr	r3, [r7, #20]
 8012cdc:	429a      	cmp	r2, r3
 8012cde:	d30c      	bcc.n	8012cfa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012ce0:	697b      	ldr	r3, [r7, #20]
 8012ce2:	2b0b      	cmp	r3, #11
 8012ce4:	d002      	beq.n	8012cec <create_name+0x88>
 8012ce6:	7efb      	ldrb	r3, [r7, #27]
 8012ce8:	2b2e      	cmp	r3, #46	; 0x2e
 8012cea:	d001      	beq.n	8012cf0 <create_name+0x8c>
 8012cec:	2306      	movs	r3, #6
 8012cee:	e044      	b.n	8012d7a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8012cf0:	2308      	movs	r3, #8
 8012cf2:	613b      	str	r3, [r7, #16]
 8012cf4:	230b      	movs	r3, #11
 8012cf6:	617b      	str	r3, [r7, #20]
			continue;
 8012cf8:	e022      	b.n	8012d40 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8012cfa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	da04      	bge.n	8012d0c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8012d02:	7efb      	ldrb	r3, [r7, #27]
 8012d04:	3b80      	subs	r3, #128	; 0x80
 8012d06:	4a1f      	ldr	r2, [pc, #124]	; (8012d84 <create_name+0x120>)
 8012d08:	5cd3      	ldrb	r3, [r2, r3]
 8012d0a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012d0c:	7efb      	ldrb	r3, [r7, #27]
 8012d0e:	4619      	mov	r1, r3
 8012d10:	481d      	ldr	r0, [pc, #116]	; (8012d88 <create_name+0x124>)
 8012d12:	f7fe ff04 	bl	8011b1e <chk_chr>
 8012d16:	4603      	mov	r3, r0
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d001      	beq.n	8012d20 <create_name+0xbc>
 8012d1c:	2306      	movs	r3, #6
 8012d1e:	e02c      	b.n	8012d7a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012d20:	7efb      	ldrb	r3, [r7, #27]
 8012d22:	2b60      	cmp	r3, #96	; 0x60
 8012d24:	d905      	bls.n	8012d32 <create_name+0xce>
 8012d26:	7efb      	ldrb	r3, [r7, #27]
 8012d28:	2b7a      	cmp	r3, #122	; 0x7a
 8012d2a:	d802      	bhi.n	8012d32 <create_name+0xce>
 8012d2c:	7efb      	ldrb	r3, [r7, #27]
 8012d2e:	3b20      	subs	r3, #32
 8012d30:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8012d32:	693b      	ldr	r3, [r7, #16]
 8012d34:	1c5a      	adds	r2, r3, #1
 8012d36:	613a      	str	r2, [r7, #16]
 8012d38:	68ba      	ldr	r2, [r7, #8]
 8012d3a:	4413      	add	r3, r2
 8012d3c:	7efa      	ldrb	r2, [r7, #27]
 8012d3e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012d40:	e7a6      	b.n	8012c90 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012d42:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012d44:	68fa      	ldr	r2, [r7, #12]
 8012d46:	69fb      	ldr	r3, [r7, #28]
 8012d48:	441a      	add	r2, r3
 8012d4a:	683b      	ldr	r3, [r7, #0]
 8012d4c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8012d4e:	693b      	ldr	r3, [r7, #16]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d101      	bne.n	8012d58 <create_name+0xf4>
 8012d54:	2306      	movs	r3, #6
 8012d56:	e010      	b.n	8012d7a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012d58:	68bb      	ldr	r3, [r7, #8]
 8012d5a:	781b      	ldrb	r3, [r3, #0]
 8012d5c:	2be5      	cmp	r3, #229	; 0xe5
 8012d5e:	d102      	bne.n	8012d66 <create_name+0x102>
 8012d60:	68bb      	ldr	r3, [r7, #8]
 8012d62:	2205      	movs	r2, #5
 8012d64:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012d66:	7efb      	ldrb	r3, [r7, #27]
 8012d68:	2b20      	cmp	r3, #32
 8012d6a:	d801      	bhi.n	8012d70 <create_name+0x10c>
 8012d6c:	2204      	movs	r2, #4
 8012d6e:	e000      	b.n	8012d72 <create_name+0x10e>
 8012d70:	2200      	movs	r2, #0
 8012d72:	68bb      	ldr	r3, [r7, #8]
 8012d74:	330b      	adds	r3, #11
 8012d76:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012d78:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	3720      	adds	r7, #32
 8012d7e:	46bd      	mov	sp, r7
 8012d80:	bd80      	pop	{r7, pc}
 8012d82:	bf00      	nop
 8012d84:	0801ab5c 	.word	0x0801ab5c
 8012d88:	0801aaac 	.word	0x0801aaac

08012d8c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012d8c:	b580      	push	{r7, lr}
 8012d8e:	b086      	sub	sp, #24
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	6078      	str	r0, [r7, #4]
 8012d94:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012d9a:	693b      	ldr	r3, [r7, #16]
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012da0:	e002      	b.n	8012da8 <follow_path+0x1c>
 8012da2:	683b      	ldr	r3, [r7, #0]
 8012da4:	3301      	adds	r3, #1
 8012da6:	603b      	str	r3, [r7, #0]
 8012da8:	683b      	ldr	r3, [r7, #0]
 8012daa:	781b      	ldrb	r3, [r3, #0]
 8012dac:	2b2f      	cmp	r3, #47	; 0x2f
 8012dae:	d0f8      	beq.n	8012da2 <follow_path+0x16>
 8012db0:	683b      	ldr	r3, [r7, #0]
 8012db2:	781b      	ldrb	r3, [r3, #0]
 8012db4:	2b5c      	cmp	r3, #92	; 0x5c
 8012db6:	d0f4      	beq.n	8012da2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8012db8:	693b      	ldr	r3, [r7, #16]
 8012dba:	2200      	movs	r2, #0
 8012dbc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012dbe:	683b      	ldr	r3, [r7, #0]
 8012dc0:	781b      	ldrb	r3, [r3, #0]
 8012dc2:	2b1f      	cmp	r3, #31
 8012dc4:	d80a      	bhi.n	8012ddc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	2280      	movs	r2, #128	; 0x80
 8012dca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8012dce:	2100      	movs	r1, #0
 8012dd0:	6878      	ldr	r0, [r7, #4]
 8012dd2:	f7ff fc1f 	bl	8012614 <dir_sdi>
 8012dd6:	4603      	mov	r3, r0
 8012dd8:	75fb      	strb	r3, [r7, #23]
 8012dda:	e043      	b.n	8012e64 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012ddc:	463b      	mov	r3, r7
 8012dde:	4619      	mov	r1, r3
 8012de0:	6878      	ldr	r0, [r7, #4]
 8012de2:	f7ff ff3f 	bl	8012c64 <create_name>
 8012de6:	4603      	mov	r3, r0
 8012de8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012dea:	7dfb      	ldrb	r3, [r7, #23]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d134      	bne.n	8012e5a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012df0:	6878      	ldr	r0, [r7, #4]
 8012df2:	f7ff fe32 	bl	8012a5a <dir_find>
 8012df6:	4603      	mov	r3, r0
 8012df8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012e00:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012e02:	7dfb      	ldrb	r3, [r7, #23]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d00a      	beq.n	8012e1e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012e08:	7dfb      	ldrb	r3, [r7, #23]
 8012e0a:	2b04      	cmp	r3, #4
 8012e0c:	d127      	bne.n	8012e5e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012e0e:	7afb      	ldrb	r3, [r7, #11]
 8012e10:	f003 0304 	and.w	r3, r3, #4
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d122      	bne.n	8012e5e <follow_path+0xd2>
 8012e18:	2305      	movs	r3, #5
 8012e1a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8012e1c:	e01f      	b.n	8012e5e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012e1e:	7afb      	ldrb	r3, [r7, #11]
 8012e20:	f003 0304 	and.w	r3, r3, #4
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d11c      	bne.n	8012e62 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012e28:	693b      	ldr	r3, [r7, #16]
 8012e2a:	799b      	ldrb	r3, [r3, #6]
 8012e2c:	f003 0310 	and.w	r3, r3, #16
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d102      	bne.n	8012e3a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8012e34:	2305      	movs	r3, #5
 8012e36:	75fb      	strb	r3, [r7, #23]
 8012e38:	e014      	b.n	8012e64 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	695b      	ldr	r3, [r3, #20]
 8012e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012e48:	4413      	add	r3, r2
 8012e4a:	4619      	mov	r1, r3
 8012e4c:	68f8      	ldr	r0, [r7, #12]
 8012e4e:	f7ff fd68 	bl	8012922 <ld_clust>
 8012e52:	4602      	mov	r2, r0
 8012e54:	693b      	ldr	r3, [r7, #16]
 8012e56:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012e58:	e7c0      	b.n	8012ddc <follow_path+0x50>
			if (res != FR_OK) break;
 8012e5a:	bf00      	nop
 8012e5c:	e002      	b.n	8012e64 <follow_path+0xd8>
				break;
 8012e5e:	bf00      	nop
 8012e60:	e000      	b.n	8012e64 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012e62:	bf00      	nop
			}
		}
	}

	return res;
 8012e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e66:	4618      	mov	r0, r3
 8012e68:	3718      	adds	r7, #24
 8012e6a:	46bd      	mov	sp, r7
 8012e6c:	bd80      	pop	{r7, pc}

08012e6e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012e6e:	b480      	push	{r7}
 8012e70:	b087      	sub	sp, #28
 8012e72:	af00      	add	r7, sp, #0
 8012e74:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012e76:	f04f 33ff 	mov.w	r3, #4294967295
 8012e7a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d031      	beq.n	8012ee8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	617b      	str	r3, [r7, #20]
 8012e8a:	e002      	b.n	8012e92 <get_ldnumber+0x24>
 8012e8c:	697b      	ldr	r3, [r7, #20]
 8012e8e:	3301      	adds	r3, #1
 8012e90:	617b      	str	r3, [r7, #20]
 8012e92:	697b      	ldr	r3, [r7, #20]
 8012e94:	781b      	ldrb	r3, [r3, #0]
 8012e96:	2b20      	cmp	r3, #32
 8012e98:	d903      	bls.n	8012ea2 <get_ldnumber+0x34>
 8012e9a:	697b      	ldr	r3, [r7, #20]
 8012e9c:	781b      	ldrb	r3, [r3, #0]
 8012e9e:	2b3a      	cmp	r3, #58	; 0x3a
 8012ea0:	d1f4      	bne.n	8012e8c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012ea2:	697b      	ldr	r3, [r7, #20]
 8012ea4:	781b      	ldrb	r3, [r3, #0]
 8012ea6:	2b3a      	cmp	r3, #58	; 0x3a
 8012ea8:	d11c      	bne.n	8012ee4 <get_ldnumber+0x76>
			tp = *path;
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	1c5a      	adds	r2, r3, #1
 8012eb4:	60fa      	str	r2, [r7, #12]
 8012eb6:	781b      	ldrb	r3, [r3, #0]
 8012eb8:	3b30      	subs	r3, #48	; 0x30
 8012eba:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012ebc:	68bb      	ldr	r3, [r7, #8]
 8012ebe:	2b09      	cmp	r3, #9
 8012ec0:	d80e      	bhi.n	8012ee0 <get_ldnumber+0x72>
 8012ec2:	68fa      	ldr	r2, [r7, #12]
 8012ec4:	697b      	ldr	r3, [r7, #20]
 8012ec6:	429a      	cmp	r2, r3
 8012ec8:	d10a      	bne.n	8012ee0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012eca:	68bb      	ldr	r3, [r7, #8]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d107      	bne.n	8012ee0 <get_ldnumber+0x72>
					vol = (int)i;
 8012ed0:	68bb      	ldr	r3, [r7, #8]
 8012ed2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012ed4:	697b      	ldr	r3, [r7, #20]
 8012ed6:	3301      	adds	r3, #1
 8012ed8:	617b      	str	r3, [r7, #20]
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	697a      	ldr	r2, [r7, #20]
 8012ede:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012ee0:	693b      	ldr	r3, [r7, #16]
 8012ee2:	e002      	b.n	8012eea <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012ee8:	693b      	ldr	r3, [r7, #16]
}
 8012eea:	4618      	mov	r0, r3
 8012eec:	371c      	adds	r7, #28
 8012eee:	46bd      	mov	sp, r7
 8012ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef4:	4770      	bx	lr
	...

08012ef8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012ef8:	b580      	push	{r7, lr}
 8012efa:	b082      	sub	sp, #8
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	6078      	str	r0, [r7, #4]
 8012f00:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	2200      	movs	r2, #0
 8012f06:	70da      	strb	r2, [r3, #3]
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8012f0e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012f10:	6839      	ldr	r1, [r7, #0]
 8012f12:	6878      	ldr	r0, [r7, #4]
 8012f14:	f7ff f800 	bl	8011f18 <move_window>
 8012f18:	4603      	mov	r3, r0
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d001      	beq.n	8012f22 <check_fs+0x2a>
 8012f1e:	2304      	movs	r3, #4
 8012f20:	e038      	b.n	8012f94 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	3334      	adds	r3, #52	; 0x34
 8012f26:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	f7fe fd12 	bl	8011954 <ld_word>
 8012f30:	4603      	mov	r3, r0
 8012f32:	461a      	mov	r2, r3
 8012f34:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012f38:	429a      	cmp	r2, r3
 8012f3a:	d001      	beq.n	8012f40 <check_fs+0x48>
 8012f3c:	2303      	movs	r3, #3
 8012f3e:	e029      	b.n	8012f94 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012f46:	2be9      	cmp	r3, #233	; 0xe9
 8012f48:	d009      	beq.n	8012f5e <check_fs+0x66>
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012f50:	2beb      	cmp	r3, #235	; 0xeb
 8012f52:	d11e      	bne.n	8012f92 <check_fs+0x9a>
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8012f5a:	2b90      	cmp	r3, #144	; 0x90
 8012f5c:	d119      	bne.n	8012f92 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	3334      	adds	r3, #52	; 0x34
 8012f62:	3336      	adds	r3, #54	; 0x36
 8012f64:	4618      	mov	r0, r3
 8012f66:	f7fe fd0d 	bl	8011984 <ld_dword>
 8012f6a:	4603      	mov	r3, r0
 8012f6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012f70:	4a0a      	ldr	r2, [pc, #40]	; (8012f9c <check_fs+0xa4>)
 8012f72:	4293      	cmp	r3, r2
 8012f74:	d101      	bne.n	8012f7a <check_fs+0x82>
 8012f76:	2300      	movs	r3, #0
 8012f78:	e00c      	b.n	8012f94 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	3334      	adds	r3, #52	; 0x34
 8012f7e:	3352      	adds	r3, #82	; 0x52
 8012f80:	4618      	mov	r0, r3
 8012f82:	f7fe fcff 	bl	8011984 <ld_dword>
 8012f86:	4603      	mov	r3, r0
 8012f88:	4a05      	ldr	r2, [pc, #20]	; (8012fa0 <check_fs+0xa8>)
 8012f8a:	4293      	cmp	r3, r2
 8012f8c:	d101      	bne.n	8012f92 <check_fs+0x9a>
 8012f8e:	2300      	movs	r3, #0
 8012f90:	e000      	b.n	8012f94 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012f92:	2302      	movs	r3, #2
}
 8012f94:	4618      	mov	r0, r3
 8012f96:	3708      	adds	r7, #8
 8012f98:	46bd      	mov	sp, r7
 8012f9a:	bd80      	pop	{r7, pc}
 8012f9c:	00544146 	.word	0x00544146
 8012fa0:	33544146 	.word	0x33544146

08012fa4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012fa4:	b580      	push	{r7, lr}
 8012fa6:	b096      	sub	sp, #88	; 0x58
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	60f8      	str	r0, [r7, #12]
 8012fac:	60b9      	str	r1, [r7, #8]
 8012fae:	4613      	mov	r3, r2
 8012fb0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012fb2:	68bb      	ldr	r3, [r7, #8]
 8012fb4:	2200      	movs	r2, #0
 8012fb6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012fb8:	68f8      	ldr	r0, [r7, #12]
 8012fba:	f7ff ff58 	bl	8012e6e <get_ldnumber>
 8012fbe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	da01      	bge.n	8012fca <find_volume+0x26>
 8012fc6:	230b      	movs	r3, #11
 8012fc8:	e235      	b.n	8013436 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012fca:	4aa5      	ldr	r2, [pc, #660]	; (8013260 <find_volume+0x2bc>)
 8012fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012fd2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d101      	bne.n	8012fde <find_volume+0x3a>
 8012fda:	230c      	movs	r3, #12
 8012fdc:	e22b      	b.n	8013436 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8012fde:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012fe0:	f7fe fdb8 	bl	8011b54 <lock_fs>
 8012fe4:	4603      	mov	r3, r0
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d101      	bne.n	8012fee <find_volume+0x4a>
 8012fea:	230f      	movs	r3, #15
 8012fec:	e223      	b.n	8013436 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8012fee:	68bb      	ldr	r3, [r7, #8]
 8012ff0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012ff2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012ff4:	79fb      	ldrb	r3, [r7, #7]
 8012ff6:	f023 0301 	bic.w	r3, r3, #1
 8012ffa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ffe:	781b      	ldrb	r3, [r3, #0]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d01a      	beq.n	801303a <find_volume+0x96>
		stat = disk_status(fs->drv);
 8013004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013006:	785b      	ldrb	r3, [r3, #1]
 8013008:	4618      	mov	r0, r3
 801300a:	f7fe fc05 	bl	8011818 <disk_status>
 801300e:	4603      	mov	r3, r0
 8013010:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013014:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013018:	f003 0301 	and.w	r3, r3, #1
 801301c:	2b00      	cmp	r3, #0
 801301e:	d10c      	bne.n	801303a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013020:	79fb      	ldrb	r3, [r7, #7]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d007      	beq.n	8013036 <find_volume+0x92>
 8013026:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801302a:	f003 0304 	and.w	r3, r3, #4
 801302e:	2b00      	cmp	r3, #0
 8013030:	d001      	beq.n	8013036 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8013032:	230a      	movs	r3, #10
 8013034:	e1ff      	b.n	8013436 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8013036:	2300      	movs	r3, #0
 8013038:	e1fd      	b.n	8013436 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801303a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801303c:	2200      	movs	r2, #0
 801303e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013042:	b2da      	uxtb	r2, r3
 8013044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013046:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801304a:	785b      	ldrb	r3, [r3, #1]
 801304c:	4618      	mov	r0, r3
 801304e:	f7fe fbfd 	bl	801184c <disk_initialize>
 8013052:	4603      	mov	r3, r0
 8013054:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013058:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801305c:	f003 0301 	and.w	r3, r3, #1
 8013060:	2b00      	cmp	r3, #0
 8013062:	d001      	beq.n	8013068 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013064:	2303      	movs	r3, #3
 8013066:	e1e6      	b.n	8013436 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013068:	79fb      	ldrb	r3, [r7, #7]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d007      	beq.n	801307e <find_volume+0xda>
 801306e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013072:	f003 0304 	and.w	r3, r3, #4
 8013076:	2b00      	cmp	r3, #0
 8013078:	d001      	beq.n	801307e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 801307a:	230a      	movs	r3, #10
 801307c:	e1db      	b.n	8013436 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801307e:	2300      	movs	r3, #0
 8013080:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8013082:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013084:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013086:	f7ff ff37 	bl	8012ef8 <check_fs>
 801308a:	4603      	mov	r3, r0
 801308c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013090:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013094:	2b02      	cmp	r3, #2
 8013096:	d149      	bne.n	801312c <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013098:	2300      	movs	r3, #0
 801309a:	643b      	str	r3, [r7, #64]	; 0x40
 801309c:	e01e      	b.n	80130dc <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801309e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130a0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80130a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80130a6:	011b      	lsls	r3, r3, #4
 80130a8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80130ac:	4413      	add	r3, r2
 80130ae:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80130b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130b2:	3304      	adds	r3, #4
 80130b4:	781b      	ldrb	r3, [r3, #0]
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d006      	beq.n	80130c8 <find_volume+0x124>
 80130ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130bc:	3308      	adds	r3, #8
 80130be:	4618      	mov	r0, r3
 80130c0:	f7fe fc60 	bl	8011984 <ld_dword>
 80130c4:	4602      	mov	r2, r0
 80130c6:	e000      	b.n	80130ca <find_volume+0x126>
 80130c8:	2200      	movs	r2, #0
 80130ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80130cc:	009b      	lsls	r3, r3, #2
 80130ce:	3358      	adds	r3, #88	; 0x58
 80130d0:	443b      	add	r3, r7
 80130d2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80130d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80130d8:	3301      	adds	r3, #1
 80130da:	643b      	str	r3, [r7, #64]	; 0x40
 80130dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80130de:	2b03      	cmp	r3, #3
 80130e0:	d9dd      	bls.n	801309e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80130e2:	2300      	movs	r3, #0
 80130e4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80130e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d002      	beq.n	80130f2 <find_volume+0x14e>
 80130ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80130ee:	3b01      	subs	r3, #1
 80130f0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80130f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80130f4:	009b      	lsls	r3, r3, #2
 80130f6:	3358      	adds	r3, #88	; 0x58
 80130f8:	443b      	add	r3, r7
 80130fa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80130fe:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013100:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013102:	2b00      	cmp	r3, #0
 8013104:	d005      	beq.n	8013112 <find_volume+0x16e>
 8013106:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013108:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801310a:	f7ff fef5 	bl	8012ef8 <check_fs>
 801310e:	4603      	mov	r3, r0
 8013110:	e000      	b.n	8013114 <find_volume+0x170>
 8013112:	2303      	movs	r3, #3
 8013114:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013118:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801311c:	2b01      	cmp	r3, #1
 801311e:	d905      	bls.n	801312c <find_volume+0x188>
 8013120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013122:	3301      	adds	r3, #1
 8013124:	643b      	str	r3, [r7, #64]	; 0x40
 8013126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013128:	2b03      	cmp	r3, #3
 801312a:	d9e2      	bls.n	80130f2 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801312c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013130:	2b04      	cmp	r3, #4
 8013132:	d101      	bne.n	8013138 <find_volume+0x194>
 8013134:	2301      	movs	r3, #1
 8013136:	e17e      	b.n	8013436 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013138:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801313c:	2b01      	cmp	r3, #1
 801313e:	d901      	bls.n	8013144 <find_volume+0x1a0>
 8013140:	230d      	movs	r3, #13
 8013142:	e178      	b.n	8013436 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013146:	3334      	adds	r3, #52	; 0x34
 8013148:	330b      	adds	r3, #11
 801314a:	4618      	mov	r0, r3
 801314c:	f7fe fc02 	bl	8011954 <ld_word>
 8013150:	4603      	mov	r3, r0
 8013152:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013156:	d001      	beq.n	801315c <find_volume+0x1b8>
 8013158:	230d      	movs	r3, #13
 801315a:	e16c      	b.n	8013436 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801315c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801315e:	3334      	adds	r3, #52	; 0x34
 8013160:	3316      	adds	r3, #22
 8013162:	4618      	mov	r0, r3
 8013164:	f7fe fbf6 	bl	8011954 <ld_word>
 8013168:	4603      	mov	r3, r0
 801316a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801316c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801316e:	2b00      	cmp	r3, #0
 8013170:	d106      	bne.n	8013180 <find_volume+0x1dc>
 8013172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013174:	3334      	adds	r3, #52	; 0x34
 8013176:	3324      	adds	r3, #36	; 0x24
 8013178:	4618      	mov	r0, r3
 801317a:	f7fe fc03 	bl	8011984 <ld_dword>
 801317e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8013180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013182:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013184:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013188:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 801318c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801318e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013192:	789b      	ldrb	r3, [r3, #2]
 8013194:	2b01      	cmp	r3, #1
 8013196:	d005      	beq.n	80131a4 <find_volume+0x200>
 8013198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801319a:	789b      	ldrb	r3, [r3, #2]
 801319c:	2b02      	cmp	r3, #2
 801319e:	d001      	beq.n	80131a4 <find_volume+0x200>
 80131a0:	230d      	movs	r3, #13
 80131a2:	e148      	b.n	8013436 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80131a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131a6:	789b      	ldrb	r3, [r3, #2]
 80131a8:	461a      	mov	r2, r3
 80131aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80131ac:	fb02 f303 	mul.w	r3, r2, r3
 80131b0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80131b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80131b8:	b29a      	uxth	r2, r3
 80131ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131bc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80131be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131c0:	895b      	ldrh	r3, [r3, #10]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d008      	beq.n	80131d8 <find_volume+0x234>
 80131c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131c8:	895b      	ldrh	r3, [r3, #10]
 80131ca:	461a      	mov	r2, r3
 80131cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131ce:	895b      	ldrh	r3, [r3, #10]
 80131d0:	3b01      	subs	r3, #1
 80131d2:	4013      	ands	r3, r2
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d001      	beq.n	80131dc <find_volume+0x238>
 80131d8:	230d      	movs	r3, #13
 80131da:	e12c      	b.n	8013436 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80131dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131de:	3334      	adds	r3, #52	; 0x34
 80131e0:	3311      	adds	r3, #17
 80131e2:	4618      	mov	r0, r3
 80131e4:	f7fe fbb6 	bl	8011954 <ld_word>
 80131e8:	4603      	mov	r3, r0
 80131ea:	461a      	mov	r2, r3
 80131ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131ee:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80131f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131f2:	891b      	ldrh	r3, [r3, #8]
 80131f4:	f003 030f 	and.w	r3, r3, #15
 80131f8:	b29b      	uxth	r3, r3
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d001      	beq.n	8013202 <find_volume+0x25e>
 80131fe:	230d      	movs	r3, #13
 8013200:	e119      	b.n	8013436 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013204:	3334      	adds	r3, #52	; 0x34
 8013206:	3313      	adds	r3, #19
 8013208:	4618      	mov	r0, r3
 801320a:	f7fe fba3 	bl	8011954 <ld_word>
 801320e:	4603      	mov	r3, r0
 8013210:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013214:	2b00      	cmp	r3, #0
 8013216:	d106      	bne.n	8013226 <find_volume+0x282>
 8013218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801321a:	3334      	adds	r3, #52	; 0x34
 801321c:	3320      	adds	r3, #32
 801321e:	4618      	mov	r0, r3
 8013220:	f7fe fbb0 	bl	8011984 <ld_dword>
 8013224:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013228:	3334      	adds	r3, #52	; 0x34
 801322a:	330e      	adds	r3, #14
 801322c:	4618      	mov	r0, r3
 801322e:	f7fe fb91 	bl	8011954 <ld_word>
 8013232:	4603      	mov	r3, r0
 8013234:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013236:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013238:	2b00      	cmp	r3, #0
 801323a:	d101      	bne.n	8013240 <find_volume+0x29c>
 801323c:	230d      	movs	r3, #13
 801323e:	e0fa      	b.n	8013436 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013240:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013244:	4413      	add	r3, r2
 8013246:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013248:	8912      	ldrh	r2, [r2, #8]
 801324a:	0912      	lsrs	r2, r2, #4
 801324c:	b292      	uxth	r2, r2
 801324e:	4413      	add	r3, r2
 8013250:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013252:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013256:	429a      	cmp	r2, r3
 8013258:	d204      	bcs.n	8013264 <find_volume+0x2c0>
 801325a:	230d      	movs	r3, #13
 801325c:	e0eb      	b.n	8013436 <find_volume+0x492>
 801325e:	bf00      	nop
 8013260:	20006718 	.word	0x20006718
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013264:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013268:	1ad3      	subs	r3, r2, r3
 801326a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801326c:	8952      	ldrh	r2, [r2, #10]
 801326e:	fbb3 f3f2 	udiv	r3, r3, r2
 8013272:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013276:	2b00      	cmp	r3, #0
 8013278:	d101      	bne.n	801327e <find_volume+0x2da>
 801327a:	230d      	movs	r3, #13
 801327c:	e0db      	b.n	8013436 <find_volume+0x492>
		fmt = FS_FAT32;
 801327e:	2303      	movs	r3, #3
 8013280:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013286:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801328a:	4293      	cmp	r3, r2
 801328c:	d802      	bhi.n	8013294 <find_volume+0x2f0>
 801328e:	2302      	movs	r3, #2
 8013290:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013296:	f640 72f5 	movw	r2, #4085	; 0xff5
 801329a:	4293      	cmp	r3, r2
 801329c:	d802      	bhi.n	80132a4 <find_volume+0x300>
 801329e:	2301      	movs	r3, #1
 80132a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80132a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132a6:	1c9a      	adds	r2, r3, #2
 80132a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132aa:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80132ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80132b0:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80132b2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80132b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132b6:	441a      	add	r2, r3
 80132b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132ba:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80132bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80132be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132c0:	441a      	add	r2, r3
 80132c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132c4:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80132c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80132ca:	2b03      	cmp	r3, #3
 80132cc:	d11e      	bne.n	801330c <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80132ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132d0:	3334      	adds	r3, #52	; 0x34
 80132d2:	332a      	adds	r3, #42	; 0x2a
 80132d4:	4618      	mov	r0, r3
 80132d6:	f7fe fb3d 	bl	8011954 <ld_word>
 80132da:	4603      	mov	r3, r0
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d001      	beq.n	80132e4 <find_volume+0x340>
 80132e0:	230d      	movs	r3, #13
 80132e2:	e0a8      	b.n	8013436 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80132e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132e6:	891b      	ldrh	r3, [r3, #8]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d001      	beq.n	80132f0 <find_volume+0x34c>
 80132ec:	230d      	movs	r3, #13
 80132ee:	e0a2      	b.n	8013436 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80132f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132f2:	3334      	adds	r3, #52	; 0x34
 80132f4:	332c      	adds	r3, #44	; 0x2c
 80132f6:	4618      	mov	r0, r3
 80132f8:	f7fe fb44 	bl	8011984 <ld_dword>
 80132fc:	4602      	mov	r2, r0
 80132fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013300:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013304:	699b      	ldr	r3, [r3, #24]
 8013306:	009b      	lsls	r3, r3, #2
 8013308:	647b      	str	r3, [r7, #68]	; 0x44
 801330a:	e01f      	b.n	801334c <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801330c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801330e:	891b      	ldrh	r3, [r3, #8]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d101      	bne.n	8013318 <find_volume+0x374>
 8013314:	230d      	movs	r3, #13
 8013316:	e08e      	b.n	8013436 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801331a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801331c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801331e:	441a      	add	r2, r3
 8013320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013322:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013324:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013328:	2b02      	cmp	r3, #2
 801332a:	d103      	bne.n	8013334 <find_volume+0x390>
 801332c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801332e:	699b      	ldr	r3, [r3, #24]
 8013330:	005b      	lsls	r3, r3, #1
 8013332:	e00a      	b.n	801334a <find_volume+0x3a6>
 8013334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013336:	699a      	ldr	r2, [r3, #24]
 8013338:	4613      	mov	r3, r2
 801333a:	005b      	lsls	r3, r3, #1
 801333c:	4413      	add	r3, r2
 801333e:	085a      	lsrs	r2, r3, #1
 8013340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013342:	699b      	ldr	r3, [r3, #24]
 8013344:	f003 0301 	and.w	r3, r3, #1
 8013348:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801334a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801334c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801334e:	69da      	ldr	r2, [r3, #28]
 8013350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013352:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8013356:	0a5b      	lsrs	r3, r3, #9
 8013358:	429a      	cmp	r2, r3
 801335a:	d201      	bcs.n	8013360 <find_volume+0x3bc>
 801335c:	230d      	movs	r3, #13
 801335e:	e06a      	b.n	8013436 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013362:	f04f 32ff 	mov.w	r2, #4294967295
 8013366:	615a      	str	r2, [r3, #20]
 8013368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801336a:	695a      	ldr	r2, [r3, #20]
 801336c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801336e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8013370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013372:	2280      	movs	r2, #128	; 0x80
 8013374:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013376:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801337a:	2b03      	cmp	r3, #3
 801337c:	d149      	bne.n	8013412 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801337e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013380:	3334      	adds	r3, #52	; 0x34
 8013382:	3330      	adds	r3, #48	; 0x30
 8013384:	4618      	mov	r0, r3
 8013386:	f7fe fae5 	bl	8011954 <ld_word>
 801338a:	4603      	mov	r3, r0
 801338c:	2b01      	cmp	r3, #1
 801338e:	d140      	bne.n	8013412 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013390:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013392:	3301      	adds	r3, #1
 8013394:	4619      	mov	r1, r3
 8013396:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013398:	f7fe fdbe 	bl	8011f18 <move_window>
 801339c:	4603      	mov	r3, r0
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d137      	bne.n	8013412 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 80133a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133a4:	2200      	movs	r2, #0
 80133a6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80133a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133aa:	3334      	adds	r3, #52	; 0x34
 80133ac:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80133b0:	4618      	mov	r0, r3
 80133b2:	f7fe facf 	bl	8011954 <ld_word>
 80133b6:	4603      	mov	r3, r0
 80133b8:	461a      	mov	r2, r3
 80133ba:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80133be:	429a      	cmp	r2, r3
 80133c0:	d127      	bne.n	8013412 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80133c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133c4:	3334      	adds	r3, #52	; 0x34
 80133c6:	4618      	mov	r0, r3
 80133c8:	f7fe fadc 	bl	8011984 <ld_dword>
 80133cc:	4603      	mov	r3, r0
 80133ce:	4a1c      	ldr	r2, [pc, #112]	; (8013440 <find_volume+0x49c>)
 80133d0:	4293      	cmp	r3, r2
 80133d2:	d11e      	bne.n	8013412 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80133d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133d6:	3334      	adds	r3, #52	; 0x34
 80133d8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80133dc:	4618      	mov	r0, r3
 80133de:	f7fe fad1 	bl	8011984 <ld_dword>
 80133e2:	4603      	mov	r3, r0
 80133e4:	4a17      	ldr	r2, [pc, #92]	; (8013444 <find_volume+0x4a0>)
 80133e6:	4293      	cmp	r3, r2
 80133e8:	d113      	bne.n	8013412 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80133ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133ec:	3334      	adds	r3, #52	; 0x34
 80133ee:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80133f2:	4618      	mov	r0, r3
 80133f4:	f7fe fac6 	bl	8011984 <ld_dword>
 80133f8:	4602      	mov	r2, r0
 80133fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133fc:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80133fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013400:	3334      	adds	r3, #52	; 0x34
 8013402:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013406:	4618      	mov	r0, r3
 8013408:	f7fe fabc 	bl	8011984 <ld_dword>
 801340c:	4602      	mov	r2, r0
 801340e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013410:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013414:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013418:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801341a:	4b0b      	ldr	r3, [pc, #44]	; (8013448 <find_volume+0x4a4>)
 801341c:	881b      	ldrh	r3, [r3, #0]
 801341e:	3301      	adds	r3, #1
 8013420:	b29a      	uxth	r2, r3
 8013422:	4b09      	ldr	r3, [pc, #36]	; (8013448 <find_volume+0x4a4>)
 8013424:	801a      	strh	r2, [r3, #0]
 8013426:	4b08      	ldr	r3, [pc, #32]	; (8013448 <find_volume+0x4a4>)
 8013428:	881a      	ldrh	r2, [r3, #0]
 801342a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801342c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801342e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013430:	f7fe fd0a 	bl	8011e48 <clear_lock>
#endif
	return FR_OK;
 8013434:	2300      	movs	r3, #0
}
 8013436:	4618      	mov	r0, r3
 8013438:	3758      	adds	r7, #88	; 0x58
 801343a:	46bd      	mov	sp, r7
 801343c:	bd80      	pop	{r7, pc}
 801343e:	bf00      	nop
 8013440:	41615252 	.word	0x41615252
 8013444:	61417272 	.word	0x61417272
 8013448:	2000671c 	.word	0x2000671c

0801344c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801344c:	b580      	push	{r7, lr}
 801344e:	b084      	sub	sp, #16
 8013450:	af00      	add	r7, sp, #0
 8013452:	6078      	str	r0, [r7, #4]
 8013454:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013456:	2309      	movs	r3, #9
 8013458:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	2b00      	cmp	r3, #0
 801345e:	d02e      	beq.n	80134be <validate+0x72>
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d02a      	beq.n	80134be <validate+0x72>
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	781b      	ldrb	r3, [r3, #0]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d025      	beq.n	80134be <validate+0x72>
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	889a      	ldrh	r2, [r3, #4]
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	88db      	ldrh	r3, [r3, #6]
 801347c:	429a      	cmp	r2, r3
 801347e:	d11e      	bne.n	80134be <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	4618      	mov	r0, r3
 8013486:	f7fe fb65 	bl	8011b54 <lock_fs>
 801348a:	4603      	mov	r3, r0
 801348c:	2b00      	cmp	r3, #0
 801348e:	d014      	beq.n	80134ba <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	785b      	ldrb	r3, [r3, #1]
 8013496:	4618      	mov	r0, r3
 8013498:	f7fe f9be 	bl	8011818 <disk_status>
 801349c:	4603      	mov	r3, r0
 801349e:	f003 0301 	and.w	r3, r3, #1
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d102      	bne.n	80134ac <validate+0x60>
				res = FR_OK;
 80134a6:	2300      	movs	r3, #0
 80134a8:	73fb      	strb	r3, [r7, #15]
 80134aa:	e008      	b.n	80134be <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	2100      	movs	r1, #0
 80134b2:	4618      	mov	r0, r3
 80134b4:	f7fe fb64 	bl	8011b80 <unlock_fs>
 80134b8:	e001      	b.n	80134be <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80134ba:	230f      	movs	r3, #15
 80134bc:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80134be:	7bfb      	ldrb	r3, [r7, #15]
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d102      	bne.n	80134ca <validate+0x7e>
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	e000      	b.n	80134cc <validate+0x80>
 80134ca:	2300      	movs	r3, #0
 80134cc:	683a      	ldr	r2, [r7, #0]
 80134ce:	6013      	str	r3, [r2, #0]
	return res;
 80134d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80134d2:	4618      	mov	r0, r3
 80134d4:	3710      	adds	r7, #16
 80134d6:	46bd      	mov	sp, r7
 80134d8:	bd80      	pop	{r7, pc}
	...

080134dc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80134dc:	b580      	push	{r7, lr}
 80134de:	b088      	sub	sp, #32
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	60f8      	str	r0, [r7, #12]
 80134e4:	60b9      	str	r1, [r7, #8]
 80134e6:	4613      	mov	r3, r2
 80134e8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80134ea:	68bb      	ldr	r3, [r7, #8]
 80134ec:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80134ee:	f107 0310 	add.w	r3, r7, #16
 80134f2:	4618      	mov	r0, r3
 80134f4:	f7ff fcbb 	bl	8012e6e <get_ldnumber>
 80134f8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80134fa:	69fb      	ldr	r3, [r7, #28]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	da01      	bge.n	8013504 <f_mount+0x28>
 8013500:	230b      	movs	r3, #11
 8013502:	e048      	b.n	8013596 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013504:	4a26      	ldr	r2, [pc, #152]	; (80135a0 <f_mount+0xc4>)
 8013506:	69fb      	ldr	r3, [r7, #28]
 8013508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801350c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801350e:	69bb      	ldr	r3, [r7, #24]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d00f      	beq.n	8013534 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013514:	69b8      	ldr	r0, [r7, #24]
 8013516:	f7fe fc97 	bl	8011e48 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 801351a:	69bb      	ldr	r3, [r7, #24]
 801351c:	68db      	ldr	r3, [r3, #12]
 801351e:	4618      	mov	r0, r3
 8013520:	f000 ffc3 	bl	80144aa <ff_del_syncobj>
 8013524:	4603      	mov	r3, r0
 8013526:	2b00      	cmp	r3, #0
 8013528:	d101      	bne.n	801352e <f_mount+0x52>
 801352a:	2302      	movs	r3, #2
 801352c:	e033      	b.n	8013596 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801352e:	69bb      	ldr	r3, [r7, #24]
 8013530:	2200      	movs	r2, #0
 8013532:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	2b00      	cmp	r3, #0
 8013538:	d00f      	beq.n	801355a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	2200      	movs	r2, #0
 801353e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8013540:	69fb      	ldr	r3, [r7, #28]
 8013542:	b2da      	uxtb	r2, r3
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	330c      	adds	r3, #12
 8013548:	4619      	mov	r1, r3
 801354a:	4610      	mov	r0, r2
 801354c:	f000 ff8d 	bl	801446a <ff_cre_syncobj>
 8013550:	4603      	mov	r3, r0
 8013552:	2b00      	cmp	r3, #0
 8013554:	d101      	bne.n	801355a <f_mount+0x7e>
 8013556:	2302      	movs	r3, #2
 8013558:	e01d      	b.n	8013596 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801355a:	68fa      	ldr	r2, [r7, #12]
 801355c:	4910      	ldr	r1, [pc, #64]	; (80135a0 <f_mount+0xc4>)
 801355e:	69fb      	ldr	r3, [r7, #28]
 8013560:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d002      	beq.n	8013570 <f_mount+0x94>
 801356a:	79fb      	ldrb	r3, [r7, #7]
 801356c:	2b01      	cmp	r3, #1
 801356e:	d001      	beq.n	8013574 <f_mount+0x98>
 8013570:	2300      	movs	r3, #0
 8013572:	e010      	b.n	8013596 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013574:	f107 010c 	add.w	r1, r7, #12
 8013578:	f107 0308 	add.w	r3, r7, #8
 801357c:	2200      	movs	r2, #0
 801357e:	4618      	mov	r0, r3
 8013580:	f7ff fd10 	bl	8012fa4 <find_volume>
 8013584:	4603      	mov	r3, r0
 8013586:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	7dfa      	ldrb	r2, [r7, #23]
 801358c:	4611      	mov	r1, r2
 801358e:	4618      	mov	r0, r3
 8013590:	f7fe faf6 	bl	8011b80 <unlock_fs>
 8013594:	7dfb      	ldrb	r3, [r7, #23]
}
 8013596:	4618      	mov	r0, r3
 8013598:	3720      	adds	r7, #32
 801359a:	46bd      	mov	sp, r7
 801359c:	bd80      	pop	{r7, pc}
 801359e:	bf00      	nop
 80135a0:	20006718 	.word	0x20006718

080135a4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80135a4:	b580      	push	{r7, lr}
 80135a6:	b098      	sub	sp, #96	; 0x60
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	60f8      	str	r0, [r7, #12]
 80135ac:	60b9      	str	r1, [r7, #8]
 80135ae:	4613      	mov	r3, r2
 80135b0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d101      	bne.n	80135bc <f_open+0x18>
 80135b8:	2309      	movs	r3, #9
 80135ba:	e1b4      	b.n	8013926 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80135bc:	79fb      	ldrb	r3, [r7, #7]
 80135be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80135c2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80135c4:	79fa      	ldrb	r2, [r7, #7]
 80135c6:	f107 0110 	add.w	r1, r7, #16
 80135ca:	f107 0308 	add.w	r3, r7, #8
 80135ce:	4618      	mov	r0, r3
 80135d0:	f7ff fce8 	bl	8012fa4 <find_volume>
 80135d4:	4603      	mov	r3, r0
 80135d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80135da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80135de:	2b00      	cmp	r3, #0
 80135e0:	f040 8191 	bne.w	8013906 <f_open+0x362>
		dj.obj.fs = fs;
 80135e4:	693b      	ldr	r3, [r7, #16]
 80135e6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80135e8:	68ba      	ldr	r2, [r7, #8]
 80135ea:	f107 0314 	add.w	r3, r7, #20
 80135ee:	4611      	mov	r1, r2
 80135f0:	4618      	mov	r0, r3
 80135f2:	f7ff fbcb 	bl	8012d8c <follow_path>
 80135f6:	4603      	mov	r3, r0
 80135f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80135fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013600:	2b00      	cmp	r3, #0
 8013602:	d11a      	bne.n	801363a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013604:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013608:	b25b      	sxtb	r3, r3
 801360a:	2b00      	cmp	r3, #0
 801360c:	da03      	bge.n	8013616 <f_open+0x72>
				res = FR_INVALID_NAME;
 801360e:	2306      	movs	r3, #6
 8013610:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013614:	e011      	b.n	801363a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013616:	79fb      	ldrb	r3, [r7, #7]
 8013618:	f023 0301 	bic.w	r3, r3, #1
 801361c:	2b00      	cmp	r3, #0
 801361e:	bf14      	ite	ne
 8013620:	2301      	movne	r3, #1
 8013622:	2300      	moveq	r3, #0
 8013624:	b2db      	uxtb	r3, r3
 8013626:	461a      	mov	r2, r3
 8013628:	f107 0314 	add.w	r3, r7, #20
 801362c:	4611      	mov	r1, r2
 801362e:	4618      	mov	r0, r3
 8013630:	f7fe fac2 	bl	8011bb8 <chk_lock>
 8013634:	4603      	mov	r3, r0
 8013636:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801363a:	79fb      	ldrb	r3, [r7, #7]
 801363c:	f003 031c 	and.w	r3, r3, #28
 8013640:	2b00      	cmp	r3, #0
 8013642:	d07f      	beq.n	8013744 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8013644:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013648:	2b00      	cmp	r3, #0
 801364a:	d017      	beq.n	801367c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801364c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013650:	2b04      	cmp	r3, #4
 8013652:	d10e      	bne.n	8013672 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013654:	f7fe fb0c 	bl	8011c70 <enq_lock>
 8013658:	4603      	mov	r3, r0
 801365a:	2b00      	cmp	r3, #0
 801365c:	d006      	beq.n	801366c <f_open+0xc8>
 801365e:	f107 0314 	add.w	r3, r7, #20
 8013662:	4618      	mov	r0, r3
 8013664:	f7ff fa4e 	bl	8012b04 <dir_register>
 8013668:	4603      	mov	r3, r0
 801366a:	e000      	b.n	801366e <f_open+0xca>
 801366c:	2312      	movs	r3, #18
 801366e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013672:	79fb      	ldrb	r3, [r7, #7]
 8013674:	f043 0308 	orr.w	r3, r3, #8
 8013678:	71fb      	strb	r3, [r7, #7]
 801367a:	e010      	b.n	801369e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801367c:	7ebb      	ldrb	r3, [r7, #26]
 801367e:	f003 0311 	and.w	r3, r3, #17
 8013682:	2b00      	cmp	r3, #0
 8013684:	d003      	beq.n	801368e <f_open+0xea>
					res = FR_DENIED;
 8013686:	2307      	movs	r3, #7
 8013688:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801368c:	e007      	b.n	801369e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801368e:	79fb      	ldrb	r3, [r7, #7]
 8013690:	f003 0304 	and.w	r3, r3, #4
 8013694:	2b00      	cmp	r3, #0
 8013696:	d002      	beq.n	801369e <f_open+0xfa>
 8013698:	2308      	movs	r3, #8
 801369a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801369e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d168      	bne.n	8013778 <f_open+0x1d4>
 80136a6:	79fb      	ldrb	r3, [r7, #7]
 80136a8:	f003 0308 	and.w	r3, r3, #8
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d063      	beq.n	8013778 <f_open+0x1d4>
				dw = GET_FATTIME();
 80136b0:	f7fa fd9e 	bl	800e1f0 <get_fattime>
 80136b4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80136b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136b8:	330e      	adds	r3, #14
 80136ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80136bc:	4618      	mov	r0, r3
 80136be:	f7fe f99f 	bl	8011a00 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80136c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136c4:	3316      	adds	r3, #22
 80136c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80136c8:	4618      	mov	r0, r3
 80136ca:	f7fe f999 	bl	8011a00 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80136ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136d0:	330b      	adds	r3, #11
 80136d2:	2220      	movs	r2, #32
 80136d4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80136d6:	693b      	ldr	r3, [r7, #16]
 80136d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80136da:	4611      	mov	r1, r2
 80136dc:	4618      	mov	r0, r3
 80136de:	f7ff f920 	bl	8012922 <ld_clust>
 80136e2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80136e4:	693b      	ldr	r3, [r7, #16]
 80136e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80136e8:	2200      	movs	r2, #0
 80136ea:	4618      	mov	r0, r3
 80136ec:	f7ff f938 	bl	8012960 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80136f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136f2:	331c      	adds	r3, #28
 80136f4:	2100      	movs	r1, #0
 80136f6:	4618      	mov	r0, r3
 80136f8:	f7fe f982 	bl	8011a00 <st_dword>
					fs->wflag = 1;
 80136fc:	693b      	ldr	r3, [r7, #16]
 80136fe:	2201      	movs	r2, #1
 8013700:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013704:	2b00      	cmp	r3, #0
 8013706:	d037      	beq.n	8013778 <f_open+0x1d4>
						dw = fs->winsect;
 8013708:	693b      	ldr	r3, [r7, #16]
 801370a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801370c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801370e:	f107 0314 	add.w	r3, r7, #20
 8013712:	2200      	movs	r2, #0
 8013714:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8013716:	4618      	mov	r0, r3
 8013718:	f7fe fe4b 	bl	80123b2 <remove_chain>
 801371c:	4603      	mov	r3, r0
 801371e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8013722:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013726:	2b00      	cmp	r3, #0
 8013728:	d126      	bne.n	8013778 <f_open+0x1d4>
							res = move_window(fs, dw);
 801372a:	693b      	ldr	r3, [r7, #16]
 801372c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801372e:	4618      	mov	r0, r3
 8013730:	f7fe fbf2 	bl	8011f18 <move_window>
 8013734:	4603      	mov	r3, r0
 8013736:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801373a:	693b      	ldr	r3, [r7, #16]
 801373c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801373e:	3a01      	subs	r2, #1
 8013740:	611a      	str	r2, [r3, #16]
 8013742:	e019      	b.n	8013778 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013744:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013748:	2b00      	cmp	r3, #0
 801374a:	d115      	bne.n	8013778 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801374c:	7ebb      	ldrb	r3, [r7, #26]
 801374e:	f003 0310 	and.w	r3, r3, #16
 8013752:	2b00      	cmp	r3, #0
 8013754:	d003      	beq.n	801375e <f_open+0x1ba>
					res = FR_NO_FILE;
 8013756:	2304      	movs	r3, #4
 8013758:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801375c:	e00c      	b.n	8013778 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801375e:	79fb      	ldrb	r3, [r7, #7]
 8013760:	f003 0302 	and.w	r3, r3, #2
 8013764:	2b00      	cmp	r3, #0
 8013766:	d007      	beq.n	8013778 <f_open+0x1d4>
 8013768:	7ebb      	ldrb	r3, [r7, #26]
 801376a:	f003 0301 	and.w	r3, r3, #1
 801376e:	2b00      	cmp	r3, #0
 8013770:	d002      	beq.n	8013778 <f_open+0x1d4>
						res = FR_DENIED;
 8013772:	2307      	movs	r3, #7
 8013774:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8013778:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801377c:	2b00      	cmp	r3, #0
 801377e:	d128      	bne.n	80137d2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013780:	79fb      	ldrb	r3, [r7, #7]
 8013782:	f003 0308 	and.w	r3, r3, #8
 8013786:	2b00      	cmp	r3, #0
 8013788:	d003      	beq.n	8013792 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801378a:	79fb      	ldrb	r3, [r7, #7]
 801378c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013790:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013792:	693b      	ldr	r3, [r7, #16]
 8013794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801379a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80137a0:	79fb      	ldrb	r3, [r7, #7]
 80137a2:	f023 0301 	bic.w	r3, r3, #1
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	bf14      	ite	ne
 80137aa:	2301      	movne	r3, #1
 80137ac:	2300      	moveq	r3, #0
 80137ae:	b2db      	uxtb	r3, r3
 80137b0:	461a      	mov	r2, r3
 80137b2:	f107 0314 	add.w	r3, r7, #20
 80137b6:	4611      	mov	r1, r2
 80137b8:	4618      	mov	r0, r3
 80137ba:	f7fe fa7b 	bl	8011cb4 <inc_lock>
 80137be:	4602      	mov	r2, r0
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	691b      	ldr	r3, [r3, #16]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d102      	bne.n	80137d2 <f_open+0x22e>
 80137cc:	2302      	movs	r3, #2
 80137ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80137d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	f040 8095 	bne.w	8013906 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80137dc:	693b      	ldr	r3, [r7, #16]
 80137de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80137e0:	4611      	mov	r1, r2
 80137e2:	4618      	mov	r0, r3
 80137e4:	f7ff f89d 	bl	8012922 <ld_clust>
 80137e8:	4602      	mov	r2, r0
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80137ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137f0:	331c      	adds	r3, #28
 80137f2:	4618      	mov	r0, r3
 80137f4:	f7fe f8c6 	bl	8011984 <ld_dword>
 80137f8:	4602      	mov	r2, r0
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	2200      	movs	r2, #0
 8013802:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013804:	693a      	ldr	r2, [r7, #16]
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801380a:	693b      	ldr	r3, [r7, #16]
 801380c:	88da      	ldrh	r2, [r3, #6]
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	79fa      	ldrb	r2, [r7, #7]
 8013816:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	2200      	movs	r2, #0
 801381c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	2200      	movs	r2, #0
 8013822:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	2200      	movs	r2, #0
 8013828:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	3330      	adds	r3, #48	; 0x30
 801382e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013832:	2100      	movs	r1, #0
 8013834:	4618      	mov	r0, r3
 8013836:	f7fe f930 	bl	8011a9a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801383a:	79fb      	ldrb	r3, [r7, #7]
 801383c:	f003 0320 	and.w	r3, r3, #32
 8013840:	2b00      	cmp	r3, #0
 8013842:	d060      	beq.n	8013906 <f_open+0x362>
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	68db      	ldr	r3, [r3, #12]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d05c      	beq.n	8013906 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	68da      	ldr	r2, [r3, #12]
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013854:	693b      	ldr	r3, [r7, #16]
 8013856:	895b      	ldrh	r3, [r3, #10]
 8013858:	025b      	lsls	r3, r3, #9
 801385a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	689b      	ldr	r3, [r3, #8]
 8013860:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	68db      	ldr	r3, [r3, #12]
 8013866:	657b      	str	r3, [r7, #84]	; 0x54
 8013868:	e016      	b.n	8013898 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801386e:	4618      	mov	r0, r3
 8013870:	f7fe fc0d 	bl	801208e <get_fat>
 8013874:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013876:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013878:	2b01      	cmp	r3, #1
 801387a:	d802      	bhi.n	8013882 <f_open+0x2de>
 801387c:	2302      	movs	r3, #2
 801387e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013882:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013888:	d102      	bne.n	8013890 <f_open+0x2ec>
 801388a:	2301      	movs	r3, #1
 801388c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013890:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013894:	1ad3      	subs	r3, r2, r3
 8013896:	657b      	str	r3, [r7, #84]	; 0x54
 8013898:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801389c:	2b00      	cmp	r3, #0
 801389e:	d103      	bne.n	80138a8 <f_open+0x304>
 80138a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80138a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80138a4:	429a      	cmp	r2, r3
 80138a6:	d8e0      	bhi.n	801386a <f_open+0x2c6>
				}
				fp->clust = clst;
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80138ac:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80138ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d127      	bne.n	8013906 <f_open+0x362>
 80138b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80138b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d022      	beq.n	8013906 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80138c0:	693b      	ldr	r3, [r7, #16]
 80138c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80138c4:	4618      	mov	r0, r3
 80138c6:	f7fe fbc3 	bl	8012050 <clust2sect>
 80138ca:	6478      	str	r0, [r7, #68]	; 0x44
 80138cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d103      	bne.n	80138da <f_open+0x336>
						res = FR_INT_ERR;
 80138d2:	2302      	movs	r3, #2
 80138d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80138d8:	e015      	b.n	8013906 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80138da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80138dc:	0a5a      	lsrs	r2, r3, #9
 80138de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138e0:	441a      	add	r2, r3
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80138e6:	693b      	ldr	r3, [r7, #16]
 80138e8:	7858      	ldrb	r0, [r3, #1]
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	6a1a      	ldr	r2, [r3, #32]
 80138f4:	2301      	movs	r3, #1
 80138f6:	f7fd ffcf 	bl	8011898 <disk_read>
 80138fa:	4603      	mov	r3, r0
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d002      	beq.n	8013906 <f_open+0x362>
 8013900:	2301      	movs	r3, #1
 8013902:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013906:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801390a:	2b00      	cmp	r3, #0
 801390c:	d002      	beq.n	8013914 <f_open+0x370>
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	2200      	movs	r2, #0
 8013912:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013914:	693b      	ldr	r3, [r7, #16]
 8013916:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801391a:	4611      	mov	r1, r2
 801391c:	4618      	mov	r0, r3
 801391e:	f7fe f92f 	bl	8011b80 <unlock_fs>
 8013922:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8013926:	4618      	mov	r0, r3
 8013928:	3760      	adds	r7, #96	; 0x60
 801392a:	46bd      	mov	sp, r7
 801392c:	bd80      	pop	{r7, pc}

0801392e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801392e:	b580      	push	{r7, lr}
 8013930:	b08c      	sub	sp, #48	; 0x30
 8013932:	af00      	add	r7, sp, #0
 8013934:	60f8      	str	r0, [r7, #12]
 8013936:	60b9      	str	r1, [r7, #8]
 8013938:	607a      	str	r2, [r7, #4]
 801393a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801393c:	68bb      	ldr	r3, [r7, #8]
 801393e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013940:	683b      	ldr	r3, [r7, #0]
 8013942:	2200      	movs	r2, #0
 8013944:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	f107 0210 	add.w	r2, r7, #16
 801394c:	4611      	mov	r1, r2
 801394e:	4618      	mov	r0, r3
 8013950:	f7ff fd7c 	bl	801344c <validate>
 8013954:	4603      	mov	r3, r0
 8013956:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801395a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801395e:	2b00      	cmp	r3, #0
 8013960:	d107      	bne.n	8013972 <f_write+0x44>
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	7d5b      	ldrb	r3, [r3, #21]
 8013966:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801396a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801396e:	2b00      	cmp	r3, #0
 8013970:	d009      	beq.n	8013986 <f_write+0x58>
 8013972:	693b      	ldr	r3, [r7, #16]
 8013974:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8013978:	4611      	mov	r1, r2
 801397a:	4618      	mov	r0, r3
 801397c:	f7fe f900 	bl	8011b80 <unlock_fs>
 8013980:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013984:	e173      	b.n	8013c6e <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	7d1b      	ldrb	r3, [r3, #20]
 801398a:	f003 0302 	and.w	r3, r3, #2
 801398e:	2b00      	cmp	r3, #0
 8013990:	d106      	bne.n	80139a0 <f_write+0x72>
 8013992:	693b      	ldr	r3, [r7, #16]
 8013994:	2107      	movs	r1, #7
 8013996:	4618      	mov	r0, r3
 8013998:	f7fe f8f2 	bl	8011b80 <unlock_fs>
 801399c:	2307      	movs	r3, #7
 801399e:	e166      	b.n	8013c6e <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	699a      	ldr	r2, [r3, #24]
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	441a      	add	r2, r3
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	699b      	ldr	r3, [r3, #24]
 80139ac:	429a      	cmp	r2, r3
 80139ae:	f080 814b 	bcs.w	8013c48 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	699b      	ldr	r3, [r3, #24]
 80139b6:	43db      	mvns	r3, r3
 80139b8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80139ba:	e145      	b.n	8013c48 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	699b      	ldr	r3, [r3, #24]
 80139c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	f040 8101 	bne.w	8013bcc <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	699b      	ldr	r3, [r3, #24]
 80139ce:	0a5b      	lsrs	r3, r3, #9
 80139d0:	693a      	ldr	r2, [r7, #16]
 80139d2:	8952      	ldrh	r2, [r2, #10]
 80139d4:	3a01      	subs	r2, #1
 80139d6:	4013      	ands	r3, r2
 80139d8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80139da:	69bb      	ldr	r3, [r7, #24]
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d14d      	bne.n	8013a7c <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	699b      	ldr	r3, [r3, #24]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d10c      	bne.n	8013a02 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	689b      	ldr	r3, [r3, #8]
 80139ec:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80139ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d11a      	bne.n	8013a2a <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	2100      	movs	r1, #0
 80139f8:	4618      	mov	r0, r3
 80139fa:	f7fe fd3f 	bl	801247c <create_chain>
 80139fe:	62b8      	str	r0, [r7, #40]	; 0x28
 8013a00:	e013      	b.n	8013a2a <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d007      	beq.n	8013a1a <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	699b      	ldr	r3, [r3, #24]
 8013a0e:	4619      	mov	r1, r3
 8013a10:	68f8      	ldr	r0, [r7, #12]
 8013a12:	f7fe fdcb 	bl	80125ac <clmt_clust>
 8013a16:	62b8      	str	r0, [r7, #40]	; 0x28
 8013a18:	e007      	b.n	8013a2a <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013a1a:	68fa      	ldr	r2, [r7, #12]
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	69db      	ldr	r3, [r3, #28]
 8013a20:	4619      	mov	r1, r3
 8013a22:	4610      	mov	r0, r2
 8013a24:	f7fe fd2a 	bl	801247c <create_chain>
 8013a28:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	f000 8110 	beq.w	8013c52 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a34:	2b01      	cmp	r3, #1
 8013a36:	d109      	bne.n	8013a4c <f_write+0x11e>
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	2202      	movs	r2, #2
 8013a3c:	755a      	strb	r2, [r3, #21]
 8013a3e:	693b      	ldr	r3, [r7, #16]
 8013a40:	2102      	movs	r1, #2
 8013a42:	4618      	mov	r0, r3
 8013a44:	f7fe f89c 	bl	8011b80 <unlock_fs>
 8013a48:	2302      	movs	r3, #2
 8013a4a:	e110      	b.n	8013c6e <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a52:	d109      	bne.n	8013a68 <f_write+0x13a>
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	2201      	movs	r2, #1
 8013a58:	755a      	strb	r2, [r3, #21]
 8013a5a:	693b      	ldr	r3, [r7, #16]
 8013a5c:	2101      	movs	r1, #1
 8013a5e:	4618      	mov	r0, r3
 8013a60:	f7fe f88e 	bl	8011b80 <unlock_fs>
 8013a64:	2301      	movs	r3, #1
 8013a66:	e102      	b.n	8013c6e <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013a6c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	689b      	ldr	r3, [r3, #8]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d102      	bne.n	8013a7c <f_write+0x14e>
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013a7a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	7d1b      	ldrb	r3, [r3, #20]
 8013a80:	b25b      	sxtb	r3, r3
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	da1d      	bge.n	8013ac2 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013a86:	693b      	ldr	r3, [r7, #16]
 8013a88:	7858      	ldrb	r0, [r3, #1]
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	6a1a      	ldr	r2, [r3, #32]
 8013a94:	2301      	movs	r3, #1
 8013a96:	f7fd ff1f 	bl	80118d8 <disk_write>
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d009      	beq.n	8013ab4 <f_write+0x186>
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	2201      	movs	r2, #1
 8013aa4:	755a      	strb	r2, [r3, #21]
 8013aa6:	693b      	ldr	r3, [r7, #16]
 8013aa8:	2101      	movs	r1, #1
 8013aaa:	4618      	mov	r0, r3
 8013aac:	f7fe f868 	bl	8011b80 <unlock_fs>
 8013ab0:	2301      	movs	r3, #1
 8013ab2:	e0dc      	b.n	8013c6e <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	7d1b      	ldrb	r3, [r3, #20]
 8013ab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013abc:	b2da      	uxtb	r2, r3
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013ac2:	693a      	ldr	r2, [r7, #16]
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	69db      	ldr	r3, [r3, #28]
 8013ac8:	4619      	mov	r1, r3
 8013aca:	4610      	mov	r0, r2
 8013acc:	f7fe fac0 	bl	8012050 <clust2sect>
 8013ad0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013ad2:	697b      	ldr	r3, [r7, #20]
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d109      	bne.n	8013aec <f_write+0x1be>
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	2202      	movs	r2, #2
 8013adc:	755a      	strb	r2, [r3, #21]
 8013ade:	693b      	ldr	r3, [r7, #16]
 8013ae0:	2102      	movs	r1, #2
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	f7fe f84c 	bl	8011b80 <unlock_fs>
 8013ae8:	2302      	movs	r3, #2
 8013aea:	e0c0      	b.n	8013c6e <f_write+0x340>
			sect += csect;
 8013aec:	697a      	ldr	r2, [r7, #20]
 8013aee:	69bb      	ldr	r3, [r7, #24]
 8013af0:	4413      	add	r3, r2
 8013af2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	0a5b      	lsrs	r3, r3, #9
 8013af8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013afa:	6a3b      	ldr	r3, [r7, #32]
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d041      	beq.n	8013b84 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013b00:	69ba      	ldr	r2, [r7, #24]
 8013b02:	6a3b      	ldr	r3, [r7, #32]
 8013b04:	4413      	add	r3, r2
 8013b06:	693a      	ldr	r2, [r7, #16]
 8013b08:	8952      	ldrh	r2, [r2, #10]
 8013b0a:	4293      	cmp	r3, r2
 8013b0c:	d905      	bls.n	8013b1a <f_write+0x1ec>
					cc = fs->csize - csect;
 8013b0e:	693b      	ldr	r3, [r7, #16]
 8013b10:	895b      	ldrh	r3, [r3, #10]
 8013b12:	461a      	mov	r2, r3
 8013b14:	69bb      	ldr	r3, [r7, #24]
 8013b16:	1ad3      	subs	r3, r2, r3
 8013b18:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013b1a:	693b      	ldr	r3, [r7, #16]
 8013b1c:	7858      	ldrb	r0, [r3, #1]
 8013b1e:	6a3b      	ldr	r3, [r7, #32]
 8013b20:	697a      	ldr	r2, [r7, #20]
 8013b22:	69f9      	ldr	r1, [r7, #28]
 8013b24:	f7fd fed8 	bl	80118d8 <disk_write>
 8013b28:	4603      	mov	r3, r0
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d009      	beq.n	8013b42 <f_write+0x214>
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	2201      	movs	r2, #1
 8013b32:	755a      	strb	r2, [r3, #21]
 8013b34:	693b      	ldr	r3, [r7, #16]
 8013b36:	2101      	movs	r1, #1
 8013b38:	4618      	mov	r0, r3
 8013b3a:	f7fe f821 	bl	8011b80 <unlock_fs>
 8013b3e:	2301      	movs	r3, #1
 8013b40:	e095      	b.n	8013c6e <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	6a1a      	ldr	r2, [r3, #32]
 8013b46:	697b      	ldr	r3, [r7, #20]
 8013b48:	1ad3      	subs	r3, r2, r3
 8013b4a:	6a3a      	ldr	r2, [r7, #32]
 8013b4c:	429a      	cmp	r2, r3
 8013b4e:	d915      	bls.n	8013b7c <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	6a1a      	ldr	r2, [r3, #32]
 8013b5a:	697b      	ldr	r3, [r7, #20]
 8013b5c:	1ad3      	subs	r3, r2, r3
 8013b5e:	025b      	lsls	r3, r3, #9
 8013b60:	69fa      	ldr	r2, [r7, #28]
 8013b62:	4413      	add	r3, r2
 8013b64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013b68:	4619      	mov	r1, r3
 8013b6a:	f7fd ff75 	bl	8011a58 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	7d1b      	ldrb	r3, [r3, #20]
 8013b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013b76:	b2da      	uxtb	r2, r3
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013b7c:	6a3b      	ldr	r3, [r7, #32]
 8013b7e:	025b      	lsls	r3, r3, #9
 8013b80:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013b82:	e044      	b.n	8013c0e <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	6a1b      	ldr	r3, [r3, #32]
 8013b88:	697a      	ldr	r2, [r7, #20]
 8013b8a:	429a      	cmp	r2, r3
 8013b8c:	d01b      	beq.n	8013bc6 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	699a      	ldr	r2, [r3, #24]
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013b96:	429a      	cmp	r2, r3
 8013b98:	d215      	bcs.n	8013bc6 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013b9a:	693b      	ldr	r3, [r7, #16]
 8013b9c:	7858      	ldrb	r0, [r3, #1]
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013ba4:	2301      	movs	r3, #1
 8013ba6:	697a      	ldr	r2, [r7, #20]
 8013ba8:	f7fd fe76 	bl	8011898 <disk_read>
 8013bac:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d009      	beq.n	8013bc6 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	2201      	movs	r2, #1
 8013bb6:	755a      	strb	r2, [r3, #21]
 8013bb8:	693b      	ldr	r3, [r7, #16]
 8013bba:	2101      	movs	r1, #1
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	f7fd ffdf 	bl	8011b80 <unlock_fs>
 8013bc2:	2301      	movs	r3, #1
 8013bc4:	e053      	b.n	8013c6e <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	697a      	ldr	r2, [r7, #20]
 8013bca:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	699b      	ldr	r3, [r3, #24]
 8013bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013bd4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8013bd8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	429a      	cmp	r2, r3
 8013be0:	d901      	bls.n	8013be6 <f_write+0x2b8>
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	699b      	ldr	r3, [r3, #24]
 8013bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013bf4:	4413      	add	r3, r2
 8013bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013bf8:	69f9      	ldr	r1, [r7, #28]
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	f7fd ff2c 	bl	8011a58 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	7d1b      	ldrb	r3, [r3, #20]
 8013c04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013c08:	b2da      	uxtb	r2, r3
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013c0e:	69fa      	ldr	r2, [r7, #28]
 8013c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c12:	4413      	add	r3, r2
 8013c14:	61fb      	str	r3, [r7, #28]
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	699a      	ldr	r2, [r3, #24]
 8013c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c1c:	441a      	add	r2, r3
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	619a      	str	r2, [r3, #24]
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	68da      	ldr	r2, [r3, #12]
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	699b      	ldr	r3, [r3, #24]
 8013c2a:	429a      	cmp	r2, r3
 8013c2c:	bf38      	it	cc
 8013c2e:	461a      	movcc	r2, r3
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	60da      	str	r2, [r3, #12]
 8013c34:	683b      	ldr	r3, [r7, #0]
 8013c36:	681a      	ldr	r2, [r3, #0]
 8013c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c3a:	441a      	add	r2, r3
 8013c3c:	683b      	ldr	r3, [r7, #0]
 8013c3e:	601a      	str	r2, [r3, #0]
 8013c40:	687a      	ldr	r2, [r7, #4]
 8013c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c44:	1ad3      	subs	r3, r2, r3
 8013c46:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	f47f aeb6 	bne.w	80139bc <f_write+0x8e>
 8013c50:	e000      	b.n	8013c54 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013c52:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	7d1b      	ldrb	r3, [r3, #20]
 8013c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c5c:	b2da      	uxtb	r2, r3
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013c62:	693b      	ldr	r3, [r7, #16]
 8013c64:	2100      	movs	r1, #0
 8013c66:	4618      	mov	r0, r3
 8013c68:	f7fd ff8a 	bl	8011b80 <unlock_fs>
 8013c6c:	2300      	movs	r3, #0
}
 8013c6e:	4618      	mov	r0, r3
 8013c70:	3730      	adds	r7, #48	; 0x30
 8013c72:	46bd      	mov	sp, r7
 8013c74:	bd80      	pop	{r7, pc}

08013c76 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013c76:	b580      	push	{r7, lr}
 8013c78:	b086      	sub	sp, #24
 8013c7a:	af00      	add	r7, sp, #0
 8013c7c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	f107 0208 	add.w	r2, r7, #8
 8013c84:	4611      	mov	r1, r2
 8013c86:	4618      	mov	r0, r3
 8013c88:	f7ff fbe0 	bl	801344c <validate>
 8013c8c:	4603      	mov	r3, r0
 8013c8e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013c90:	7dfb      	ldrb	r3, [r7, #23]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d16d      	bne.n	8013d72 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	7d1b      	ldrb	r3, [r3, #20]
 8013c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d067      	beq.n	8013d72 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	7d1b      	ldrb	r3, [r3, #20]
 8013ca6:	b25b      	sxtb	r3, r3
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	da1a      	bge.n	8013ce2 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013cac:	68bb      	ldr	r3, [r7, #8]
 8013cae:	7858      	ldrb	r0, [r3, #1]
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	6a1a      	ldr	r2, [r3, #32]
 8013cba:	2301      	movs	r3, #1
 8013cbc:	f7fd fe0c 	bl	80118d8 <disk_write>
 8013cc0:	4603      	mov	r3, r0
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d006      	beq.n	8013cd4 <f_sync+0x5e>
 8013cc6:	68bb      	ldr	r3, [r7, #8]
 8013cc8:	2101      	movs	r1, #1
 8013cca:	4618      	mov	r0, r3
 8013ccc:	f7fd ff58 	bl	8011b80 <unlock_fs>
 8013cd0:	2301      	movs	r3, #1
 8013cd2:	e055      	b.n	8013d80 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	7d1b      	ldrb	r3, [r3, #20]
 8013cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013cdc:	b2da      	uxtb	r2, r3
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013ce2:	f7fa fa85 	bl	800e1f0 <get_fattime>
 8013ce6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013ce8:	68ba      	ldr	r2, [r7, #8]
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cee:	4619      	mov	r1, r3
 8013cf0:	4610      	mov	r0, r2
 8013cf2:	f7fe f911 	bl	8011f18 <move_window>
 8013cf6:	4603      	mov	r3, r0
 8013cf8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013cfa:	7dfb      	ldrb	r3, [r7, #23]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d138      	bne.n	8013d72 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d04:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	330b      	adds	r3, #11
 8013d0a:	781a      	ldrb	r2, [r3, #0]
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	330b      	adds	r3, #11
 8013d10:	f042 0220 	orr.w	r2, r2, #32
 8013d14:	b2d2      	uxtb	r2, r2
 8013d16:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	6818      	ldr	r0, [r3, #0]
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	689b      	ldr	r3, [r3, #8]
 8013d20:	461a      	mov	r2, r3
 8013d22:	68f9      	ldr	r1, [r7, #12]
 8013d24:	f7fe fe1c 	bl	8012960 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	f103 021c 	add.w	r2, r3, #28
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	68db      	ldr	r3, [r3, #12]
 8013d32:	4619      	mov	r1, r3
 8013d34:	4610      	mov	r0, r2
 8013d36:	f7fd fe63 	bl	8011a00 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	3316      	adds	r3, #22
 8013d3e:	6939      	ldr	r1, [r7, #16]
 8013d40:	4618      	mov	r0, r3
 8013d42:	f7fd fe5d 	bl	8011a00 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	3312      	adds	r3, #18
 8013d4a:	2100      	movs	r1, #0
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	f7fd fe3c 	bl	80119ca <st_word>
					fs->wflag = 1;
 8013d52:	68bb      	ldr	r3, [r7, #8]
 8013d54:	2201      	movs	r2, #1
 8013d56:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013d58:	68bb      	ldr	r3, [r7, #8]
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	f7fe f90a 	bl	8011f74 <sync_fs>
 8013d60:	4603      	mov	r3, r0
 8013d62:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	7d1b      	ldrb	r3, [r3, #20]
 8013d68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013d6c:	b2da      	uxtb	r2, r3
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013d72:	68bb      	ldr	r3, [r7, #8]
 8013d74:	7dfa      	ldrb	r2, [r7, #23]
 8013d76:	4611      	mov	r1, r2
 8013d78:	4618      	mov	r0, r3
 8013d7a:	f7fd ff01 	bl	8011b80 <unlock_fs>
 8013d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d80:	4618      	mov	r0, r3
 8013d82:	3718      	adds	r7, #24
 8013d84:	46bd      	mov	sp, r7
 8013d86:	bd80      	pop	{r7, pc}

08013d88 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	b084      	sub	sp, #16
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013d90:	6878      	ldr	r0, [r7, #4]
 8013d92:	f7ff ff70 	bl	8013c76 <f_sync>
 8013d96:	4603      	mov	r3, r0
 8013d98:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013d9a:	7bfb      	ldrb	r3, [r7, #15]
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d11d      	bne.n	8013ddc <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	f107 0208 	add.w	r2, r7, #8
 8013da6:	4611      	mov	r1, r2
 8013da8:	4618      	mov	r0, r3
 8013daa:	f7ff fb4f 	bl	801344c <validate>
 8013dae:	4603      	mov	r3, r0
 8013db0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013db2:	7bfb      	ldrb	r3, [r7, #15]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d111      	bne.n	8013ddc <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	691b      	ldr	r3, [r3, #16]
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	f7fe f807 	bl	8011dd0 <dec_lock>
 8013dc2:	4603      	mov	r3, r0
 8013dc4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013dc6:	7bfb      	ldrb	r3, [r7, #15]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d102      	bne.n	8013dd2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	2200      	movs	r2, #0
 8013dd0:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8013dd2:	68bb      	ldr	r3, [r7, #8]
 8013dd4:	2100      	movs	r1, #0
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	f7fd fed2 	bl	8011b80 <unlock_fs>
#endif
		}
	}
	return res;
 8013ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8013dde:	4618      	mov	r0, r3
 8013de0:	3710      	adds	r7, #16
 8013de2:	46bd      	mov	sp, r7
 8013de4:	bd80      	pop	{r7, pc}

08013de6 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8013de6:	b580      	push	{r7, lr}
 8013de8:	b086      	sub	sp, #24
 8013dea:	af00      	add	r7, sp, #0
 8013dec:	6078      	str	r0, [r7, #4]
 8013dee:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d101      	bne.n	8013dfa <f_opendir+0x14>
 8013df6:	2309      	movs	r3, #9
 8013df8:	e06a      	b.n	8013ed0 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8013dfe:	f107 010c 	add.w	r1, r7, #12
 8013e02:	463b      	mov	r3, r7
 8013e04:	2200      	movs	r2, #0
 8013e06:	4618      	mov	r0, r3
 8013e08:	f7ff f8cc 	bl	8012fa4 <find_volume>
 8013e0c:	4603      	mov	r3, r0
 8013e0e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013e10:	7dfb      	ldrb	r3, [r7, #23]
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d14f      	bne.n	8013eb6 <f_opendir+0xd0>
		obj->fs = fs;
 8013e16:	68fa      	ldr	r2, [r7, #12]
 8013e18:	693b      	ldr	r3, [r7, #16]
 8013e1a:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8013e1c:	683b      	ldr	r3, [r7, #0]
 8013e1e:	4619      	mov	r1, r3
 8013e20:	6878      	ldr	r0, [r7, #4]
 8013e22:	f7fe ffb3 	bl	8012d8c <follow_path>
 8013e26:	4603      	mov	r3, r0
 8013e28:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8013e2a:	7dfb      	ldrb	r3, [r7, #23]
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d13d      	bne.n	8013eac <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013e36:	b25b      	sxtb	r3, r3
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	db12      	blt.n	8013e62 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8013e3c:	693b      	ldr	r3, [r7, #16]
 8013e3e:	799b      	ldrb	r3, [r3, #6]
 8013e40:	f003 0310 	and.w	r3, r3, #16
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d00a      	beq.n	8013e5e <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8013e48:	68fa      	ldr	r2, [r7, #12]
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	6a1b      	ldr	r3, [r3, #32]
 8013e4e:	4619      	mov	r1, r3
 8013e50:	4610      	mov	r0, r2
 8013e52:	f7fe fd66 	bl	8012922 <ld_clust>
 8013e56:	4602      	mov	r2, r0
 8013e58:	693b      	ldr	r3, [r7, #16]
 8013e5a:	609a      	str	r2, [r3, #8]
 8013e5c:	e001      	b.n	8013e62 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8013e5e:	2305      	movs	r3, #5
 8013e60:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8013e62:	7dfb      	ldrb	r3, [r7, #23]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d121      	bne.n	8013eac <f_opendir+0xc6>
				obj->id = fs->id;
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	88da      	ldrh	r2, [r3, #6]
 8013e6c:	693b      	ldr	r3, [r7, #16]
 8013e6e:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8013e70:	2100      	movs	r1, #0
 8013e72:	6878      	ldr	r0, [r7, #4]
 8013e74:	f7fe fbce 	bl	8012614 <dir_sdi>
 8013e78:	4603      	mov	r3, r0
 8013e7a:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8013e7c:	7dfb      	ldrb	r3, [r7, #23]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d114      	bne.n	8013eac <f_opendir+0xc6>
					if (obj->sclust) {
 8013e82:	693b      	ldr	r3, [r7, #16]
 8013e84:	689b      	ldr	r3, [r3, #8]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d00d      	beq.n	8013ea6 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8013e8a:	2100      	movs	r1, #0
 8013e8c:	6878      	ldr	r0, [r7, #4]
 8013e8e:	f7fd ff11 	bl	8011cb4 <inc_lock>
 8013e92:	4602      	mov	r2, r0
 8013e94:	693b      	ldr	r3, [r7, #16]
 8013e96:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8013e98:	693b      	ldr	r3, [r7, #16]
 8013e9a:	691b      	ldr	r3, [r3, #16]
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d105      	bne.n	8013eac <f_opendir+0xc6>
 8013ea0:	2312      	movs	r3, #18
 8013ea2:	75fb      	strb	r3, [r7, #23]
 8013ea4:	e002      	b.n	8013eac <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8013ea6:	693b      	ldr	r3, [r7, #16]
 8013ea8:	2200      	movs	r2, #0
 8013eaa:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013eac:	7dfb      	ldrb	r3, [r7, #23]
 8013eae:	2b04      	cmp	r3, #4
 8013eb0:	d101      	bne.n	8013eb6 <f_opendir+0xd0>
 8013eb2:	2305      	movs	r3, #5
 8013eb4:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8013eb6:	7dfb      	ldrb	r3, [r7, #23]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d002      	beq.n	8013ec2 <f_opendir+0xdc>
 8013ebc:	693b      	ldr	r3, [r7, #16]
 8013ebe:	2200      	movs	r2, #0
 8013ec0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	7dfa      	ldrb	r2, [r7, #23]
 8013ec6:	4611      	mov	r1, r2
 8013ec8:	4618      	mov	r0, r3
 8013eca:	f7fd fe59 	bl	8011b80 <unlock_fs>
 8013ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	3718      	adds	r7, #24
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	bd80      	pop	{r7, pc}

08013ed8 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8013ed8:	b580      	push	{r7, lr}
 8013eda:	b084      	sub	sp, #16
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	f107 0208 	add.w	r2, r7, #8
 8013ee6:	4611      	mov	r1, r2
 8013ee8:	4618      	mov	r0, r3
 8013eea:	f7ff faaf 	bl	801344c <validate>
 8013eee:	4603      	mov	r3, r0
 8013ef0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8013ef2:	7bfb      	ldrb	r3, [r7, #15]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d115      	bne.n	8013f24 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	691b      	ldr	r3, [r3, #16]
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d006      	beq.n	8013f0e <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	691b      	ldr	r3, [r3, #16]
 8013f04:	4618      	mov	r0, r3
 8013f06:	f7fd ff63 	bl	8011dd0 <dec_lock>
 8013f0a:	4603      	mov	r3, r0
 8013f0c:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8013f0e:	7bfb      	ldrb	r3, [r7, #15]
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d102      	bne.n	8013f1a <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	2200      	movs	r2, #0
 8013f18:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8013f1a:	68bb      	ldr	r3, [r7, #8]
 8013f1c:	2100      	movs	r1, #0
 8013f1e:	4618      	mov	r0, r3
 8013f20:	f7fd fe2e 	bl	8011b80 <unlock_fs>
#endif
	}
	return res;
 8013f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f26:	4618      	mov	r0, r3
 8013f28:	3710      	adds	r7, #16
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	bd80      	pop	{r7, pc}

08013f2e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8013f2e:	b580      	push	{r7, lr}
 8013f30:	b084      	sub	sp, #16
 8013f32:	af00      	add	r7, sp, #0
 8013f34:	6078      	str	r0, [r7, #4]
 8013f36:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	f107 0208 	add.w	r2, r7, #8
 8013f3e:	4611      	mov	r1, r2
 8013f40:	4618      	mov	r0, r3
 8013f42:	f7ff fa83 	bl	801344c <validate>
 8013f46:	4603      	mov	r3, r0
 8013f48:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8013f4a:	7bfb      	ldrb	r3, [r7, #15]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d126      	bne.n	8013f9e <f_readdir+0x70>
		if (!fno) {
 8013f50:	683b      	ldr	r3, [r7, #0]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d106      	bne.n	8013f64 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8013f56:	2100      	movs	r1, #0
 8013f58:	6878      	ldr	r0, [r7, #4]
 8013f5a:	f7fe fb5b 	bl	8012614 <dir_sdi>
 8013f5e:	4603      	mov	r3, r0
 8013f60:	73fb      	strb	r3, [r7, #15]
 8013f62:	e01c      	b.n	8013f9e <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8013f64:	2100      	movs	r1, #0
 8013f66:	6878      	ldr	r0, [r7, #4]
 8013f68:	f7fe fd1a 	bl	80129a0 <dir_read>
 8013f6c:	4603      	mov	r3, r0
 8013f6e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8013f70:	7bfb      	ldrb	r3, [r7, #15]
 8013f72:	2b04      	cmp	r3, #4
 8013f74:	d101      	bne.n	8013f7a <f_readdir+0x4c>
 8013f76:	2300      	movs	r3, #0
 8013f78:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8013f7a:	7bfb      	ldrb	r3, [r7, #15]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d10e      	bne.n	8013f9e <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8013f80:	6839      	ldr	r1, [r7, #0]
 8013f82:	6878      	ldr	r0, [r7, #4]
 8013f84:	f7fe fe0e 	bl	8012ba4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8013f88:	2100      	movs	r1, #0
 8013f8a:	6878      	ldr	r0, [r7, #4]
 8013f8c:	f7fe fbbd 	bl	801270a <dir_next>
 8013f90:	4603      	mov	r3, r0
 8013f92:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8013f94:	7bfb      	ldrb	r3, [r7, #15]
 8013f96:	2b04      	cmp	r3, #4
 8013f98:	d101      	bne.n	8013f9e <f_readdir+0x70>
 8013f9a:	2300      	movs	r3, #0
 8013f9c:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8013f9e:	68bb      	ldr	r3, [r7, #8]
 8013fa0:	7bfa      	ldrb	r2, [r7, #15]
 8013fa2:	4611      	mov	r1, r2
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	f7fd fdeb 	bl	8011b80 <unlock_fs>
 8013faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8013fac:	4618      	mov	r0, r3
 8013fae:	3710      	adds	r7, #16
 8013fb0:	46bd      	mov	sp, r7
 8013fb2:	bd80      	pop	{r7, pc}

08013fb4 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8013fb4:	b580      	push	{r7, lr}
 8013fb6:	b090      	sub	sp, #64	; 0x40
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	6078      	str	r0, [r7, #4]
 8013fbc:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8013fbe:	f107 010c 	add.w	r1, r7, #12
 8013fc2:	1d3b      	adds	r3, r7, #4
 8013fc4:	2200      	movs	r2, #0
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	f7fe ffec 	bl	8012fa4 <find_volume>
 8013fcc:	4603      	mov	r3, r0
 8013fce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8013fd2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d11f      	bne.n	801401a <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013fda:	687a      	ldr	r2, [r7, #4]
 8013fdc:	f107 030c 	add.w	r3, r7, #12
 8013fe0:	4611      	mov	r1, r2
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	f7fe fed2 	bl	8012d8c <follow_path>
 8013fe8:	4603      	mov	r3, r0
 8013fea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8013fee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d111      	bne.n	801401a <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8013ff6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013ffa:	b25b      	sxtb	r3, r3
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	da03      	bge.n	8014008 <f_stat+0x54>
				res = FR_INVALID_NAME;
 8014000:	2306      	movs	r3, #6
 8014002:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8014006:	e008      	b.n	801401a <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8014008:	683b      	ldr	r3, [r7, #0]
 801400a:	2b00      	cmp	r3, #0
 801400c:	d005      	beq.n	801401a <f_stat+0x66>
 801400e:	f107 030c 	add.w	r3, r7, #12
 8014012:	6839      	ldr	r1, [r7, #0]
 8014014:	4618      	mov	r0, r3
 8014016:	f7fe fdc5 	bl	8012ba4 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8014020:	4611      	mov	r1, r2
 8014022:	4618      	mov	r0, r3
 8014024:	f7fd fdac 	bl	8011b80 <unlock_fs>
 8014028:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801402c:	4618      	mov	r0, r3
 801402e:	3740      	adds	r7, #64	; 0x40
 8014030:	46bd      	mov	sp, r7
 8014032:	bd80      	pop	{r7, pc}

08014034 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8014034:	b580      	push	{r7, lr}
 8014036:	b09e      	sub	sp, #120	; 0x78
 8014038:	af00      	add	r7, sp, #0
 801403a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801403c:	2300      	movs	r3, #0
 801403e:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014040:	f107 010c 	add.w	r1, r7, #12
 8014044:	1d3b      	adds	r3, r7, #4
 8014046:	2202      	movs	r2, #2
 8014048:	4618      	mov	r0, r3
 801404a:	f7fe ffab 	bl	8012fa4 <find_volume>
 801404e:	4603      	mov	r3, r0
 8014050:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8014058:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801405c:	2b00      	cmp	r3, #0
 801405e:	f040 808e 	bne.w	801417e <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8014062:	687a      	ldr	r2, [r7, #4]
 8014064:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014068:	4611      	mov	r1, r2
 801406a:	4618      	mov	r0, r3
 801406c:	f7fe fe8e 	bl	8012d8c <follow_path>
 8014070:	4603      	mov	r3, r0
 8014072:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8014076:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801407a:	2b00      	cmp	r3, #0
 801407c:	d108      	bne.n	8014090 <f_unlink+0x5c>
 801407e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014082:	2102      	movs	r1, #2
 8014084:	4618      	mov	r0, r3
 8014086:	f7fd fd97 	bl	8011bb8 <chk_lock>
 801408a:	4603      	mov	r3, r0
 801408c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8014090:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014094:	2b00      	cmp	r3, #0
 8014096:	d172      	bne.n	801417e <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8014098:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801409c:	b25b      	sxtb	r3, r3
 801409e:	2b00      	cmp	r3, #0
 80140a0:	da03      	bge.n	80140aa <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80140a2:	2306      	movs	r3, #6
 80140a4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80140a8:	e008      	b.n	80140bc <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80140aa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80140ae:	f003 0301 	and.w	r3, r3, #1
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d002      	beq.n	80140bc <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80140b6:	2307      	movs	r3, #7
 80140b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 80140bc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d134      	bne.n	801412e <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80140c8:	4611      	mov	r1, r2
 80140ca:	4618      	mov	r0, r3
 80140cc:	f7fe fc29 	bl	8012922 <ld_clust>
 80140d0:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80140d2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80140d6:	f003 0310 	and.w	r3, r3, #16
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d027      	beq.n	801412e <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80140e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80140e4:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80140e6:	f107 0310 	add.w	r3, r7, #16
 80140ea:	2100      	movs	r1, #0
 80140ec:	4618      	mov	r0, r3
 80140ee:	f7fe fa91 	bl	8012614 <dir_sdi>
 80140f2:	4603      	mov	r3, r0
 80140f4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 80140f8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d116      	bne.n	801412e <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8014100:	f107 0310 	add.w	r3, r7, #16
 8014104:	2100      	movs	r1, #0
 8014106:	4618      	mov	r0, r3
 8014108:	f7fe fc4a 	bl	80129a0 <dir_read>
 801410c:	4603      	mov	r3, r0
 801410e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8014112:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014116:	2b00      	cmp	r3, #0
 8014118:	d102      	bne.n	8014120 <f_unlink+0xec>
 801411a:	2307      	movs	r3, #7
 801411c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8014120:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014124:	2b04      	cmp	r3, #4
 8014126:	d102      	bne.n	801412e <f_unlink+0xfa>
 8014128:	2300      	movs	r3, #0
 801412a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 801412e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014132:	2b00      	cmp	r3, #0
 8014134:	d123      	bne.n	801417e <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8014136:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801413a:	4618      	mov	r0, r3
 801413c:	f7fe fd14 	bl	8012b68 <dir_remove>
 8014140:	4603      	mov	r3, r0
 8014142:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8014146:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801414a:	2b00      	cmp	r3, #0
 801414c:	d10c      	bne.n	8014168 <f_unlink+0x134>
 801414e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014150:	2b00      	cmp	r3, #0
 8014152:	d009      	beq.n	8014168 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8014154:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014158:	2200      	movs	r2, #0
 801415a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801415c:	4618      	mov	r0, r3
 801415e:	f7fe f928 	bl	80123b2 <remove_chain>
 8014162:	4603      	mov	r3, r0
 8014164:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8014168:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801416c:	2b00      	cmp	r3, #0
 801416e:	d106      	bne.n	801417e <f_unlink+0x14a>
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	4618      	mov	r0, r3
 8014174:	f7fd fefe 	bl	8011f74 <sync_fs>
 8014178:	4603      	mov	r3, r0
 801417a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8014184:	4611      	mov	r1, r2
 8014186:	4618      	mov	r0, r3
 8014188:	f7fd fcfa 	bl	8011b80 <unlock_fs>
 801418c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8014190:	4618      	mov	r0, r3
 8014192:	3778      	adds	r7, #120	; 0x78
 8014194:	46bd      	mov	sp, r7
 8014196:	bd80      	pop	{r7, pc}

08014198 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8014198:	b580      	push	{r7, lr}
 801419a:	b096      	sub	sp, #88	; 0x58
 801419c:	af00      	add	r7, sp, #0
 801419e:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80141a0:	f107 0108 	add.w	r1, r7, #8
 80141a4:	1d3b      	adds	r3, r7, #4
 80141a6:	2202      	movs	r2, #2
 80141a8:	4618      	mov	r0, r3
 80141aa:	f7fe fefb 	bl	8012fa4 <find_volume>
 80141ae:	4603      	mov	r3, r0
 80141b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 80141b4:	68bb      	ldr	r3, [r7, #8]
 80141b6:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80141b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80141bc:	2b00      	cmp	r3, #0
 80141be:	f040 80ec 	bne.w	801439a <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80141c2:	687a      	ldr	r2, [r7, #4]
 80141c4:	f107 030c 	add.w	r3, r7, #12
 80141c8:	4611      	mov	r1, r2
 80141ca:	4618      	mov	r0, r3
 80141cc:	f7fe fdde 	bl	8012d8c <follow_path>
 80141d0:	4603      	mov	r3, r0
 80141d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80141d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d102      	bne.n	80141e4 <f_mkdir+0x4c>
 80141de:	2308      	movs	r3, #8
 80141e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80141e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80141e8:	2b04      	cmp	r3, #4
 80141ea:	f040 80d6 	bne.w	801439a <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80141ee:	f107 030c 	add.w	r3, r7, #12
 80141f2:	2100      	movs	r1, #0
 80141f4:	4618      	mov	r0, r3
 80141f6:	f7fe f941 	bl	801247c <create_chain>
 80141fa:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80141fc:	68bb      	ldr	r3, [r7, #8]
 80141fe:	895b      	ldrh	r3, [r3, #10]
 8014200:	025b      	lsls	r3, r3, #9
 8014202:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8014204:	2300      	movs	r3, #0
 8014206:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801420a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801420c:	2b00      	cmp	r3, #0
 801420e:	d102      	bne.n	8014216 <f_mkdir+0x7e>
 8014210:	2307      	movs	r3, #7
 8014212:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8014216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014218:	2b01      	cmp	r3, #1
 801421a:	d102      	bne.n	8014222 <f_mkdir+0x8a>
 801421c:	2302      	movs	r3, #2
 801421e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014228:	d102      	bne.n	8014230 <f_mkdir+0x98>
 801422a:	2301      	movs	r3, #1
 801422c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8014230:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014234:	2b00      	cmp	r3, #0
 8014236:	d106      	bne.n	8014246 <f_mkdir+0xae>
 8014238:	68bb      	ldr	r3, [r7, #8]
 801423a:	4618      	mov	r0, r3
 801423c:	f7fd fe28 	bl	8011e90 <sync_window>
 8014240:	4603      	mov	r3, r0
 8014242:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8014246:	f7f9 ffd3 	bl	800e1f0 <get_fattime>
 801424a:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 801424c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014250:	2b00      	cmp	r3, #0
 8014252:	d16a      	bne.n	801432a <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 8014254:	68bb      	ldr	r3, [r7, #8]
 8014256:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014258:	4618      	mov	r0, r3
 801425a:	f7fd fef9 	bl	8012050 <clust2sect>
 801425e:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8014260:	68bb      	ldr	r3, [r7, #8]
 8014262:	3334      	adds	r3, #52	; 0x34
 8014264:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8014266:	f44f 7200 	mov.w	r2, #512	; 0x200
 801426a:	2100      	movs	r1, #0
 801426c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801426e:	f7fd fc14 	bl	8011a9a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8014272:	220b      	movs	r2, #11
 8014274:	2120      	movs	r1, #32
 8014276:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014278:	f7fd fc0f 	bl	8011a9a <mem_set>
					dir[DIR_Name] = '.';
 801427c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801427e:	222e      	movs	r2, #46	; 0x2e
 8014280:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8014282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014284:	330b      	adds	r3, #11
 8014286:	2210      	movs	r2, #16
 8014288:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 801428a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801428c:	3316      	adds	r3, #22
 801428e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014290:	4618      	mov	r0, r3
 8014292:	f7fd fbb5 	bl	8011a00 <st_dword>
					st_clust(fs, dir, dcl);
 8014296:	68bb      	ldr	r3, [r7, #8]
 8014298:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801429a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801429c:	4618      	mov	r0, r3
 801429e:	f7fe fb5f 	bl	8012960 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80142a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80142a4:	3320      	adds	r3, #32
 80142a6:	2220      	movs	r2, #32
 80142a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80142aa:	4618      	mov	r0, r3
 80142ac:	f7fd fbd4 	bl	8011a58 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80142b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80142b2:	3321      	adds	r3, #33	; 0x21
 80142b4:	222e      	movs	r2, #46	; 0x2e
 80142b6:	701a      	strb	r2, [r3, #0]
 80142b8:	697b      	ldr	r3, [r7, #20]
 80142ba:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80142bc:	68bb      	ldr	r3, [r7, #8]
 80142be:	781b      	ldrb	r3, [r3, #0]
 80142c0:	2b03      	cmp	r3, #3
 80142c2:	d106      	bne.n	80142d2 <f_mkdir+0x13a>
 80142c4:	68bb      	ldr	r3, [r7, #8]
 80142c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80142ca:	429a      	cmp	r2, r3
 80142cc:	d101      	bne.n	80142d2 <f_mkdir+0x13a>
 80142ce:	2300      	movs	r3, #0
 80142d0:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80142d2:	68b8      	ldr	r0, [r7, #8]
 80142d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80142d6:	3320      	adds	r3, #32
 80142d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80142da:	4619      	mov	r1, r3
 80142dc:	f7fe fb40 	bl	8012960 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80142e0:	68bb      	ldr	r3, [r7, #8]
 80142e2:	895b      	ldrh	r3, [r3, #10]
 80142e4:	653b      	str	r3, [r7, #80]	; 0x50
 80142e6:	e01b      	b.n	8014320 <f_mkdir+0x188>
					fs->winsect = dsc++;
 80142e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142ea:	1c5a      	adds	r2, r3, #1
 80142ec:	64fa      	str	r2, [r7, #76]	; 0x4c
 80142ee:	68ba      	ldr	r2, [r7, #8]
 80142f0:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 80142f2:	68bb      	ldr	r3, [r7, #8]
 80142f4:	2201      	movs	r2, #1
 80142f6:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80142f8:	68bb      	ldr	r3, [r7, #8]
 80142fa:	4618      	mov	r0, r3
 80142fc:	f7fd fdc8 	bl	8011e90 <sync_window>
 8014300:	4603      	mov	r3, r0
 8014302:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8014306:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801430a:	2b00      	cmp	r3, #0
 801430c:	d10c      	bne.n	8014328 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 801430e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014312:	2100      	movs	r1, #0
 8014314:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014316:	f7fd fbc0 	bl	8011a9a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801431a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801431c:	3b01      	subs	r3, #1
 801431e:	653b      	str	r3, [r7, #80]	; 0x50
 8014320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014322:	2b00      	cmp	r3, #0
 8014324:	d1e0      	bne.n	80142e8 <f_mkdir+0x150>
 8014326:	e000      	b.n	801432a <f_mkdir+0x192>
					if (res != FR_OK) break;
 8014328:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 801432a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801432e:	2b00      	cmp	r3, #0
 8014330:	d107      	bne.n	8014342 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8014332:	f107 030c 	add.w	r3, r7, #12
 8014336:	4618      	mov	r0, r3
 8014338:	f7fe fbe4 	bl	8012b04 <dir_register>
 801433c:	4603      	mov	r3, r0
 801433e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8014342:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014346:	2b00      	cmp	r3, #0
 8014348:	d120      	bne.n	801438c <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 801434a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801434c:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 801434e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014350:	3316      	adds	r3, #22
 8014352:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014354:	4618      	mov	r0, r3
 8014356:	f7fd fb53 	bl	8011a00 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801435a:	68bb      	ldr	r3, [r7, #8]
 801435c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801435e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014360:	4618      	mov	r0, r3
 8014362:	f7fe fafd 	bl	8012960 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8014366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014368:	330b      	adds	r3, #11
 801436a:	2210      	movs	r2, #16
 801436c:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 801436e:	68bb      	ldr	r3, [r7, #8]
 8014370:	2201      	movs	r2, #1
 8014372:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8014374:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014378:	2b00      	cmp	r3, #0
 801437a:	d10e      	bne.n	801439a <f_mkdir+0x202>
					res = sync_fs(fs);
 801437c:	68bb      	ldr	r3, [r7, #8]
 801437e:	4618      	mov	r0, r3
 8014380:	f7fd fdf8 	bl	8011f74 <sync_fs>
 8014384:	4603      	mov	r3, r0
 8014386:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801438a:	e006      	b.n	801439a <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 801438c:	f107 030c 	add.w	r3, r7, #12
 8014390:	2200      	movs	r2, #0
 8014392:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014394:	4618      	mov	r0, r3
 8014396:	f7fe f80c 	bl	80123b2 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801439a:	68bb      	ldr	r3, [r7, #8]
 801439c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80143a0:	4611      	mov	r1, r2
 80143a2:	4618      	mov	r0, r3
 80143a4:	f7fd fbec 	bl	8011b80 <unlock_fs>
 80143a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80143ac:	4618      	mov	r0, r3
 80143ae:	3758      	adds	r7, #88	; 0x58
 80143b0:	46bd      	mov	sp, r7
 80143b2:	bd80      	pop	{r7, pc}

080143b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80143b4:	b480      	push	{r7}
 80143b6:	b087      	sub	sp, #28
 80143b8:	af00      	add	r7, sp, #0
 80143ba:	60f8      	str	r0, [r7, #12]
 80143bc:	60b9      	str	r1, [r7, #8]
 80143be:	4613      	mov	r3, r2
 80143c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80143c2:	2301      	movs	r3, #1
 80143c4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80143c6:	2300      	movs	r3, #0
 80143c8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80143ca:	4b1f      	ldr	r3, [pc, #124]	; (8014448 <FATFS_LinkDriverEx+0x94>)
 80143cc:	7a5b      	ldrb	r3, [r3, #9]
 80143ce:	b2db      	uxtb	r3, r3
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d131      	bne.n	8014438 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80143d4:	4b1c      	ldr	r3, [pc, #112]	; (8014448 <FATFS_LinkDriverEx+0x94>)
 80143d6:	7a5b      	ldrb	r3, [r3, #9]
 80143d8:	b2db      	uxtb	r3, r3
 80143da:	461a      	mov	r2, r3
 80143dc:	4b1a      	ldr	r3, [pc, #104]	; (8014448 <FATFS_LinkDriverEx+0x94>)
 80143de:	2100      	movs	r1, #0
 80143e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80143e2:	4b19      	ldr	r3, [pc, #100]	; (8014448 <FATFS_LinkDriverEx+0x94>)
 80143e4:	7a5b      	ldrb	r3, [r3, #9]
 80143e6:	b2db      	uxtb	r3, r3
 80143e8:	4a17      	ldr	r2, [pc, #92]	; (8014448 <FATFS_LinkDriverEx+0x94>)
 80143ea:	009b      	lsls	r3, r3, #2
 80143ec:	4413      	add	r3, r2
 80143ee:	68fa      	ldr	r2, [r7, #12]
 80143f0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80143f2:	4b15      	ldr	r3, [pc, #84]	; (8014448 <FATFS_LinkDriverEx+0x94>)
 80143f4:	7a5b      	ldrb	r3, [r3, #9]
 80143f6:	b2db      	uxtb	r3, r3
 80143f8:	461a      	mov	r2, r3
 80143fa:	4b13      	ldr	r3, [pc, #76]	; (8014448 <FATFS_LinkDriverEx+0x94>)
 80143fc:	4413      	add	r3, r2
 80143fe:	79fa      	ldrb	r2, [r7, #7]
 8014400:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014402:	4b11      	ldr	r3, [pc, #68]	; (8014448 <FATFS_LinkDriverEx+0x94>)
 8014404:	7a5b      	ldrb	r3, [r3, #9]
 8014406:	b2db      	uxtb	r3, r3
 8014408:	1c5a      	adds	r2, r3, #1
 801440a:	b2d1      	uxtb	r1, r2
 801440c:	4a0e      	ldr	r2, [pc, #56]	; (8014448 <FATFS_LinkDriverEx+0x94>)
 801440e:	7251      	strb	r1, [r2, #9]
 8014410:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014412:	7dbb      	ldrb	r3, [r7, #22]
 8014414:	3330      	adds	r3, #48	; 0x30
 8014416:	b2da      	uxtb	r2, r3
 8014418:	68bb      	ldr	r3, [r7, #8]
 801441a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801441c:	68bb      	ldr	r3, [r7, #8]
 801441e:	3301      	adds	r3, #1
 8014420:	223a      	movs	r2, #58	; 0x3a
 8014422:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014424:	68bb      	ldr	r3, [r7, #8]
 8014426:	3302      	adds	r3, #2
 8014428:	222f      	movs	r2, #47	; 0x2f
 801442a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801442c:	68bb      	ldr	r3, [r7, #8]
 801442e:	3303      	adds	r3, #3
 8014430:	2200      	movs	r2, #0
 8014432:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014434:	2300      	movs	r3, #0
 8014436:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014438:	7dfb      	ldrb	r3, [r7, #23]
}
 801443a:	4618      	mov	r0, r3
 801443c:	371c      	adds	r7, #28
 801443e:	46bd      	mov	sp, r7
 8014440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014444:	4770      	bx	lr
 8014446:	bf00      	nop
 8014448:	20006740 	.word	0x20006740

0801444c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801444c:	b580      	push	{r7, lr}
 801444e:	b082      	sub	sp, #8
 8014450:	af00      	add	r7, sp, #0
 8014452:	6078      	str	r0, [r7, #4]
 8014454:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014456:	2200      	movs	r2, #0
 8014458:	6839      	ldr	r1, [r7, #0]
 801445a:	6878      	ldr	r0, [r7, #4]
 801445c:	f7ff ffaa 	bl	80143b4 <FATFS_LinkDriverEx>
 8014460:	4603      	mov	r3, r0
}
 8014462:	4618      	mov	r0, r3
 8014464:	3708      	adds	r7, #8
 8014466:	46bd      	mov	sp, r7
 8014468:	bd80      	pop	{r7, pc}

0801446a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801446a:	b580      	push	{r7, lr}
 801446c:	b086      	sub	sp, #24
 801446e:	af00      	add	r7, sp, #0
 8014470:	4603      	mov	r3, r0
 8014472:	6039      	str	r1, [r7, #0]
 8014474:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8014476:	2300      	movs	r3, #0
 8014478:	60fb      	str	r3, [r7, #12]
 801447a:	2300      	movs	r3, #0
 801447c:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 801447e:	f107 030c 	add.w	r3, r7, #12
 8014482:	2101      	movs	r1, #1
 8014484:	4618      	mov	r0, r3
 8014486:	f000 f8dd 	bl	8014644 <osSemaphoreCreate>
 801448a:	4602      	mov	r2, r0
 801448c:	683b      	ldr	r3, [r7, #0]
 801448e:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8014490:	683b      	ldr	r3, [r7, #0]
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	2b00      	cmp	r3, #0
 8014496:	bf14      	ite	ne
 8014498:	2301      	movne	r3, #1
 801449a:	2300      	moveq	r3, #0
 801449c:	b2db      	uxtb	r3, r3
 801449e:	617b      	str	r3, [r7, #20]

    return ret;
 80144a0:	697b      	ldr	r3, [r7, #20]
}
 80144a2:	4618      	mov	r0, r3
 80144a4:	3718      	adds	r7, #24
 80144a6:	46bd      	mov	sp, r7
 80144a8:	bd80      	pop	{r7, pc}

080144aa <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80144aa:	b580      	push	{r7, lr}
 80144ac:	b082      	sub	sp, #8
 80144ae:	af00      	add	r7, sp, #0
 80144b0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80144b2:	6878      	ldr	r0, [r7, #4]
 80144b4:	f000 f97c 	bl	80147b0 <osSemaphoreDelete>
#endif
    return 1;
 80144b8:	2301      	movs	r3, #1
}
 80144ba:	4618      	mov	r0, r3
 80144bc:	3708      	adds	r7, #8
 80144be:	46bd      	mov	sp, r7
 80144c0:	bd80      	pop	{r7, pc}

080144c2 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80144c2:	b580      	push	{r7, lr}
 80144c4:	b084      	sub	sp, #16
 80144c6:	af00      	add	r7, sp, #0
 80144c8:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80144ca:	2300      	movs	r3, #0
 80144cc:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 80144ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80144d2:	6878      	ldr	r0, [r7, #4]
 80144d4:	f000 f8e8 	bl	80146a8 <osSemaphoreWait>
 80144d8:	4603      	mov	r3, r0
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d101      	bne.n	80144e2 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 80144de:	2301      	movs	r3, #1
 80144e0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80144e2:	68fb      	ldr	r3, [r7, #12]
}
 80144e4:	4618      	mov	r0, r3
 80144e6:	3710      	adds	r7, #16
 80144e8:	46bd      	mov	sp, r7
 80144ea:	bd80      	pop	{r7, pc}

080144ec <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80144ec:	b580      	push	{r7, lr}
 80144ee:	b082      	sub	sp, #8
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80144f4:	6878      	ldr	r0, [r7, #4]
 80144f6:	f000 f925 	bl	8014744 <osSemaphoreRelease>
#endif
}
 80144fa:	bf00      	nop
 80144fc:	3708      	adds	r7, #8
 80144fe:	46bd      	mov	sp, r7
 8014500:	bd80      	pop	{r7, pc}

08014502 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8014502:	b480      	push	{r7}
 8014504:	b085      	sub	sp, #20
 8014506:	af00      	add	r7, sp, #0
 8014508:	4603      	mov	r3, r0
 801450a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801450c:	2300      	movs	r3, #0
 801450e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8014510:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014514:	2b84      	cmp	r3, #132	; 0x84
 8014516:	d005      	beq.n	8014524 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8014518:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	4413      	add	r3, r2
 8014520:	3303      	adds	r3, #3
 8014522:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8014524:	68fb      	ldr	r3, [r7, #12]
}
 8014526:	4618      	mov	r0, r3
 8014528:	3714      	adds	r7, #20
 801452a:	46bd      	mov	sp, r7
 801452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014530:	4770      	bx	lr

08014532 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8014532:	b480      	push	{r7}
 8014534:	b083      	sub	sp, #12
 8014536:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014538:	f3ef 8305 	mrs	r3, IPSR
 801453c:	607b      	str	r3, [r7, #4]
  return(result);
 801453e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8014540:	2b00      	cmp	r3, #0
 8014542:	bf14      	ite	ne
 8014544:	2301      	movne	r3, #1
 8014546:	2300      	moveq	r3, #0
 8014548:	b2db      	uxtb	r3, r3
}
 801454a:	4618      	mov	r0, r3
 801454c:	370c      	adds	r7, #12
 801454e:	46bd      	mov	sp, r7
 8014550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014554:	4770      	bx	lr

08014556 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8014556:	b580      	push	{r7, lr}
 8014558:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801455a:	f001 f9a3 	bl	80158a4 <vTaskStartScheduler>
  
  return osOK;
 801455e:	2300      	movs	r3, #0
}
 8014560:	4618      	mov	r0, r3
 8014562:	bd80      	pop	{r7, pc}

08014564 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8014564:	b580      	push	{r7, lr}
 8014566:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8014568:	f7ff ffe3 	bl	8014532 <inHandlerMode>
 801456c:	4603      	mov	r3, r0
 801456e:	2b00      	cmp	r3, #0
 8014570:	d003      	beq.n	801457a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8014572:	f001 fabb 	bl	8015aec <xTaskGetTickCountFromISR>
 8014576:	4603      	mov	r3, r0
 8014578:	e002      	b.n	8014580 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 801457a:	f001 faa7 	bl	8015acc <xTaskGetTickCount>
 801457e:	4603      	mov	r3, r0
  }
}
 8014580:	4618      	mov	r0, r3
 8014582:	bd80      	pop	{r7, pc}

08014584 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8014584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014586:	b089      	sub	sp, #36	; 0x24
 8014588:	af04      	add	r7, sp, #16
 801458a:	6078      	str	r0, [r7, #4]
 801458c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	695b      	ldr	r3, [r3, #20]
 8014592:	2b00      	cmp	r3, #0
 8014594:	d020      	beq.n	80145d8 <osThreadCreate+0x54>
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	699b      	ldr	r3, [r3, #24]
 801459a:	2b00      	cmp	r3, #0
 801459c:	d01c      	beq.n	80145d8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	685c      	ldr	r4, [r3, #4]
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	691e      	ldr	r6, [r3, #16]
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80145b0:	4618      	mov	r0, r3
 80145b2:	f7ff ffa6 	bl	8014502 <makeFreeRtosPriority>
 80145b6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	695b      	ldr	r3, [r3, #20]
 80145bc:	687a      	ldr	r2, [r7, #4]
 80145be:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80145c0:	9202      	str	r2, [sp, #8]
 80145c2:	9301      	str	r3, [sp, #4]
 80145c4:	9100      	str	r1, [sp, #0]
 80145c6:	683b      	ldr	r3, [r7, #0]
 80145c8:	4632      	mov	r2, r6
 80145ca:	4629      	mov	r1, r5
 80145cc:	4620      	mov	r0, r4
 80145ce:	f000 ff8b 	bl	80154e8 <xTaskCreateStatic>
 80145d2:	4603      	mov	r3, r0
 80145d4:	60fb      	str	r3, [r7, #12]
 80145d6:	e01c      	b.n	8014612 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	685c      	ldr	r4, [r3, #4]
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80145e4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80145ec:	4618      	mov	r0, r3
 80145ee:	f7ff ff88 	bl	8014502 <makeFreeRtosPriority>
 80145f2:	4602      	mov	r2, r0
 80145f4:	f107 030c 	add.w	r3, r7, #12
 80145f8:	9301      	str	r3, [sp, #4]
 80145fa:	9200      	str	r2, [sp, #0]
 80145fc:	683b      	ldr	r3, [r7, #0]
 80145fe:	4632      	mov	r2, r6
 8014600:	4629      	mov	r1, r5
 8014602:	4620      	mov	r0, r4
 8014604:	f000 ffcd 	bl	80155a2 <xTaskCreate>
 8014608:	4603      	mov	r3, r0
 801460a:	2b01      	cmp	r3, #1
 801460c:	d001      	beq.n	8014612 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801460e:	2300      	movs	r3, #0
 8014610:	e000      	b.n	8014614 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8014612:	68fb      	ldr	r3, [r7, #12]
}
 8014614:	4618      	mov	r0, r3
 8014616:	3714      	adds	r7, #20
 8014618:	46bd      	mov	sp, r7
 801461a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801461c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801461c:	b580      	push	{r7, lr}
 801461e:	b084      	sub	sp, #16
 8014620:	af00      	add	r7, sp, #0
 8014622:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d001      	beq.n	8014632 <osDelay+0x16>
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	e000      	b.n	8014634 <osDelay+0x18>
 8014632:	2301      	movs	r3, #1
 8014634:	4618      	mov	r0, r3
 8014636:	f001 f901 	bl	801583c <vTaskDelay>
  
  return osOK;
 801463a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801463c:	4618      	mov	r0, r3
 801463e:	3710      	adds	r7, #16
 8014640:	46bd      	mov	sp, r7
 8014642:	bd80      	pop	{r7, pc}

08014644 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8014644:	b580      	push	{r7, lr}
 8014646:	b086      	sub	sp, #24
 8014648:	af02      	add	r7, sp, #8
 801464a:	6078      	str	r0, [r7, #4]
 801464c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	685b      	ldr	r3, [r3, #4]
 8014652:	2b00      	cmp	r3, #0
 8014654:	d00f      	beq.n	8014676 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8014656:	683b      	ldr	r3, [r7, #0]
 8014658:	2b01      	cmp	r3, #1
 801465a:	d10a      	bne.n	8014672 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	685b      	ldr	r3, [r3, #4]
 8014660:	2203      	movs	r2, #3
 8014662:	9200      	str	r2, [sp, #0]
 8014664:	2200      	movs	r2, #0
 8014666:	2100      	movs	r1, #0
 8014668:	2001      	movs	r0, #1
 801466a:	f000 f9dd 	bl	8014a28 <xQueueGenericCreateStatic>
 801466e:	4603      	mov	r3, r0
 8014670:	e016      	b.n	80146a0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8014672:	2300      	movs	r3, #0
 8014674:	e014      	b.n	80146a0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8014676:	683b      	ldr	r3, [r7, #0]
 8014678:	2b01      	cmp	r3, #1
 801467a:	d110      	bne.n	801469e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 801467c:	2203      	movs	r2, #3
 801467e:	2100      	movs	r1, #0
 8014680:	2001      	movs	r0, #1
 8014682:	f000 fa49 	bl	8014b18 <xQueueGenericCreate>
 8014686:	60f8      	str	r0, [r7, #12]
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d005      	beq.n	801469a <osSemaphoreCreate+0x56>
 801468e:	2300      	movs	r3, #0
 8014690:	2200      	movs	r2, #0
 8014692:	2100      	movs	r1, #0
 8014694:	68f8      	ldr	r0, [r7, #12]
 8014696:	f000 fa99 	bl	8014bcc <xQueueGenericSend>
      return sema;
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	e000      	b.n	80146a0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 801469e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80146a0:	4618      	mov	r0, r3
 80146a2:	3710      	adds	r7, #16
 80146a4:	46bd      	mov	sp, r7
 80146a6:	bd80      	pop	{r7, pc}

080146a8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80146a8:	b580      	push	{r7, lr}
 80146aa:	b084      	sub	sp, #16
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	6078      	str	r0, [r7, #4]
 80146b0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80146b2:	2300      	movs	r3, #0
 80146b4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d101      	bne.n	80146c0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80146bc:	2380      	movs	r3, #128	; 0x80
 80146be:	e03a      	b.n	8014736 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80146c0:	2300      	movs	r3, #0
 80146c2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80146c4:	683b      	ldr	r3, [r7, #0]
 80146c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146ca:	d103      	bne.n	80146d4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80146cc:	f04f 33ff 	mov.w	r3, #4294967295
 80146d0:	60fb      	str	r3, [r7, #12]
 80146d2:	e009      	b.n	80146e8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80146d4:	683b      	ldr	r3, [r7, #0]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d006      	beq.n	80146e8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80146da:	683b      	ldr	r3, [r7, #0]
 80146dc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d101      	bne.n	80146e8 <osSemaphoreWait+0x40>
      ticks = 1;
 80146e4:	2301      	movs	r3, #1
 80146e6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80146e8:	f7ff ff23 	bl	8014532 <inHandlerMode>
 80146ec:	4603      	mov	r3, r0
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d017      	beq.n	8014722 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80146f2:	f107 0308 	add.w	r3, r7, #8
 80146f6:	461a      	mov	r2, r3
 80146f8:	2100      	movs	r1, #0
 80146fa:	6878      	ldr	r0, [r7, #4]
 80146fc:	f000 fcfe 	bl	80150fc <xQueueReceiveFromISR>
 8014700:	4603      	mov	r3, r0
 8014702:	2b01      	cmp	r3, #1
 8014704:	d001      	beq.n	801470a <osSemaphoreWait+0x62>
      return osErrorOS;
 8014706:	23ff      	movs	r3, #255	; 0xff
 8014708:	e015      	b.n	8014736 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801470a:	68bb      	ldr	r3, [r7, #8]
 801470c:	2b00      	cmp	r3, #0
 801470e:	d011      	beq.n	8014734 <osSemaphoreWait+0x8c>
 8014710:	4b0b      	ldr	r3, [pc, #44]	; (8014740 <osSemaphoreWait+0x98>)
 8014712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014716:	601a      	str	r2, [r3, #0]
 8014718:	f3bf 8f4f 	dsb	sy
 801471c:	f3bf 8f6f 	isb	sy
 8014720:	e008      	b.n	8014734 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8014722:	68f9      	ldr	r1, [r7, #12]
 8014724:	6878      	ldr	r0, [r7, #4]
 8014726:	f000 fbdd 	bl	8014ee4 <xQueueSemaphoreTake>
 801472a:	4603      	mov	r3, r0
 801472c:	2b01      	cmp	r3, #1
 801472e:	d001      	beq.n	8014734 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8014730:	23ff      	movs	r3, #255	; 0xff
 8014732:	e000      	b.n	8014736 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8014734:	2300      	movs	r3, #0
}
 8014736:	4618      	mov	r0, r3
 8014738:	3710      	adds	r7, #16
 801473a:	46bd      	mov	sp, r7
 801473c:	bd80      	pop	{r7, pc}
 801473e:	bf00      	nop
 8014740:	e000ed04 	.word	0xe000ed04

08014744 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8014744:	b580      	push	{r7, lr}
 8014746:	b084      	sub	sp, #16
 8014748:	af00      	add	r7, sp, #0
 801474a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 801474c:	2300      	movs	r3, #0
 801474e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8014750:	2300      	movs	r3, #0
 8014752:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8014754:	f7ff feed 	bl	8014532 <inHandlerMode>
 8014758:	4603      	mov	r3, r0
 801475a:	2b00      	cmp	r3, #0
 801475c:	d016      	beq.n	801478c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801475e:	f107 0308 	add.w	r3, r7, #8
 8014762:	4619      	mov	r1, r3
 8014764:	6878      	ldr	r0, [r7, #4]
 8014766:	f000 fb2f 	bl	8014dc8 <xQueueGiveFromISR>
 801476a:	4603      	mov	r3, r0
 801476c:	2b01      	cmp	r3, #1
 801476e:	d001      	beq.n	8014774 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8014770:	23ff      	movs	r3, #255	; 0xff
 8014772:	e017      	b.n	80147a4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014774:	68bb      	ldr	r3, [r7, #8]
 8014776:	2b00      	cmp	r3, #0
 8014778:	d013      	beq.n	80147a2 <osSemaphoreRelease+0x5e>
 801477a:	4b0c      	ldr	r3, [pc, #48]	; (80147ac <osSemaphoreRelease+0x68>)
 801477c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014780:	601a      	str	r2, [r3, #0]
 8014782:	f3bf 8f4f 	dsb	sy
 8014786:	f3bf 8f6f 	isb	sy
 801478a:	e00a      	b.n	80147a2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 801478c:	2300      	movs	r3, #0
 801478e:	2200      	movs	r2, #0
 8014790:	2100      	movs	r1, #0
 8014792:	6878      	ldr	r0, [r7, #4]
 8014794:	f000 fa1a 	bl	8014bcc <xQueueGenericSend>
 8014798:	4603      	mov	r3, r0
 801479a:	2b01      	cmp	r3, #1
 801479c:	d001      	beq.n	80147a2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 801479e:	23ff      	movs	r3, #255	; 0xff
 80147a0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80147a2:	68fb      	ldr	r3, [r7, #12]
}
 80147a4:	4618      	mov	r0, r3
 80147a6:	3710      	adds	r7, #16
 80147a8:	46bd      	mov	sp, r7
 80147aa:	bd80      	pop	{r7, pc}
 80147ac:	e000ed04 	.word	0xe000ed04

080147b0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80147b0:	b580      	push	{r7, lr}
 80147b2:	b082      	sub	sp, #8
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80147b8:	f7ff febb 	bl	8014532 <inHandlerMode>
 80147bc:	4603      	mov	r3, r0
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d001      	beq.n	80147c6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80147c2:	2382      	movs	r3, #130	; 0x82
 80147c4:	e003      	b.n	80147ce <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80147c6:	6878      	ldr	r0, [r7, #4]
 80147c8:	f000 fd18 	bl	80151fc <vQueueDelete>

  return osOK; 
 80147cc:	2300      	movs	r3, #0
}
 80147ce:	4618      	mov	r0, r3
 80147d0:	3708      	adds	r7, #8
 80147d2:	46bd      	mov	sp, r7
 80147d4:	bd80      	pop	{r7, pc}

080147d6 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 80147d6:	b480      	push	{r7}
 80147d8:	b083      	sub	sp, #12
 80147da:	af00      	add	r7, sp, #0
 80147dc:	6078      	str	r0, [r7, #4]
 80147de:	6039      	str	r1, [r7, #0]
  return osOK;
#else
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
 80147e0:	2381      	movs	r3, #129	; 0x81
#endif
}
 80147e2:	4618      	mov	r0, r3
 80147e4:	370c      	adds	r7, #12
 80147e6:	46bd      	mov	sp, r7
 80147e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ec:	4770      	bx	lr

080147ee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80147ee:	b480      	push	{r7}
 80147f0:	b083      	sub	sp, #12
 80147f2:	af00      	add	r7, sp, #0
 80147f4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	f103 0208 	add.w	r2, r3, #8
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	f04f 32ff 	mov.w	r2, #4294967295
 8014806:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	f103 0208 	add.w	r2, r3, #8
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	f103 0208 	add.w	r2, r3, #8
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	2200      	movs	r2, #0
 8014820:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014822:	bf00      	nop
 8014824:	370c      	adds	r7, #12
 8014826:	46bd      	mov	sp, r7
 8014828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801482c:	4770      	bx	lr

0801482e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801482e:	b480      	push	{r7}
 8014830:	b083      	sub	sp, #12
 8014832:	af00      	add	r7, sp, #0
 8014834:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	2200      	movs	r2, #0
 801483a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801483c:	bf00      	nop
 801483e:	370c      	adds	r7, #12
 8014840:	46bd      	mov	sp, r7
 8014842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014846:	4770      	bx	lr

08014848 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014848:	b480      	push	{r7}
 801484a:	b085      	sub	sp, #20
 801484c:	af00      	add	r7, sp, #0
 801484e:	6078      	str	r0, [r7, #4]
 8014850:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	685b      	ldr	r3, [r3, #4]
 8014856:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014858:	683b      	ldr	r3, [r7, #0]
 801485a:	68fa      	ldr	r2, [r7, #12]
 801485c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	689a      	ldr	r2, [r3, #8]
 8014862:	683b      	ldr	r3, [r7, #0]
 8014864:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	689b      	ldr	r3, [r3, #8]
 801486a:	683a      	ldr	r2, [r7, #0]
 801486c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	683a      	ldr	r2, [r7, #0]
 8014872:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8014874:	683b      	ldr	r3, [r7, #0]
 8014876:	687a      	ldr	r2, [r7, #4]
 8014878:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	1c5a      	adds	r2, r3, #1
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	601a      	str	r2, [r3, #0]
}
 8014884:	bf00      	nop
 8014886:	3714      	adds	r7, #20
 8014888:	46bd      	mov	sp, r7
 801488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801488e:	4770      	bx	lr

08014890 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014890:	b480      	push	{r7}
 8014892:	b085      	sub	sp, #20
 8014894:	af00      	add	r7, sp, #0
 8014896:	6078      	str	r0, [r7, #4]
 8014898:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801489a:	683b      	ldr	r3, [r7, #0]
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80148a0:	68bb      	ldr	r3, [r7, #8]
 80148a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80148a6:	d103      	bne.n	80148b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	691b      	ldr	r3, [r3, #16]
 80148ac:	60fb      	str	r3, [r7, #12]
 80148ae:	e00c      	b.n	80148ca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	3308      	adds	r3, #8
 80148b4:	60fb      	str	r3, [r7, #12]
 80148b6:	e002      	b.n	80148be <vListInsert+0x2e>
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	685b      	ldr	r3, [r3, #4]
 80148bc:	60fb      	str	r3, [r7, #12]
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	685b      	ldr	r3, [r3, #4]
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	68ba      	ldr	r2, [r7, #8]
 80148c6:	429a      	cmp	r2, r3
 80148c8:	d2f6      	bcs.n	80148b8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	685a      	ldr	r2, [r3, #4]
 80148ce:	683b      	ldr	r3, [r7, #0]
 80148d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80148d2:	683b      	ldr	r3, [r7, #0]
 80148d4:	685b      	ldr	r3, [r3, #4]
 80148d6:	683a      	ldr	r2, [r7, #0]
 80148d8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80148da:	683b      	ldr	r3, [r7, #0]
 80148dc:	68fa      	ldr	r2, [r7, #12]
 80148de:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	683a      	ldr	r2, [r7, #0]
 80148e4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80148e6:	683b      	ldr	r3, [r7, #0]
 80148e8:	687a      	ldr	r2, [r7, #4]
 80148ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	1c5a      	adds	r2, r3, #1
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	601a      	str	r2, [r3, #0]
}
 80148f6:	bf00      	nop
 80148f8:	3714      	adds	r7, #20
 80148fa:	46bd      	mov	sp, r7
 80148fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014900:	4770      	bx	lr

08014902 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014902:	b480      	push	{r7}
 8014904:	b085      	sub	sp, #20
 8014906:	af00      	add	r7, sp, #0
 8014908:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	691b      	ldr	r3, [r3, #16]
 801490e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	685b      	ldr	r3, [r3, #4]
 8014914:	687a      	ldr	r2, [r7, #4]
 8014916:	6892      	ldr	r2, [r2, #8]
 8014918:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	689b      	ldr	r3, [r3, #8]
 801491e:	687a      	ldr	r2, [r7, #4]
 8014920:	6852      	ldr	r2, [r2, #4]
 8014922:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	685b      	ldr	r3, [r3, #4]
 8014928:	687a      	ldr	r2, [r7, #4]
 801492a:	429a      	cmp	r2, r3
 801492c:	d103      	bne.n	8014936 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	689a      	ldr	r2, [r3, #8]
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	2200      	movs	r2, #0
 801493a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	1e5a      	subs	r2, r3, #1
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	681b      	ldr	r3, [r3, #0]
}
 801494a:	4618      	mov	r0, r3
 801494c:	3714      	adds	r7, #20
 801494e:	46bd      	mov	sp, r7
 8014950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014954:	4770      	bx	lr
	...

08014958 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8014958:	b580      	push	{r7, lr}
 801495a:	b084      	sub	sp, #16
 801495c:	af00      	add	r7, sp, #0
 801495e:	6078      	str	r0, [r7, #4]
 8014960:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	2b00      	cmp	r3, #0
 801496a:	d10a      	bne.n	8014982 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801496c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014970:	f383 8811 	msr	BASEPRI, r3
 8014974:	f3bf 8f6f 	isb	sy
 8014978:	f3bf 8f4f 	dsb	sy
 801497c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801497e:	bf00      	nop
 8014980:	e7fe      	b.n	8014980 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8014982:	f001 ff0f 	bl	80167a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	681a      	ldr	r2, [r3, #0]
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801498e:	68f9      	ldr	r1, [r7, #12]
 8014990:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014992:	fb01 f303 	mul.w	r3, r1, r3
 8014996:	441a      	add	r2, r3
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	2200      	movs	r2, #0
 80149a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	681a      	ldr	r2, [r3, #0]
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	681a      	ldr	r2, [r3, #0]
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80149b2:	3b01      	subs	r3, #1
 80149b4:	68f9      	ldr	r1, [r7, #12]
 80149b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80149b8:	fb01 f303 	mul.w	r3, r1, r3
 80149bc:	441a      	add	r2, r3
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	22ff      	movs	r2, #255	; 0xff
 80149c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	22ff      	movs	r2, #255	; 0xff
 80149ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80149d2:	683b      	ldr	r3, [r7, #0]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d114      	bne.n	8014a02 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80149d8:	68fb      	ldr	r3, [r7, #12]
 80149da:	691b      	ldr	r3, [r3, #16]
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d01a      	beq.n	8014a16 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	3310      	adds	r3, #16
 80149e4:	4618      	mov	r0, r3
 80149e6:	f001 f9d1 	bl	8015d8c <xTaskRemoveFromEventList>
 80149ea:	4603      	mov	r3, r0
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d012      	beq.n	8014a16 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80149f0:	4b0c      	ldr	r3, [pc, #48]	; (8014a24 <xQueueGenericReset+0xcc>)
 80149f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80149f6:	601a      	str	r2, [r3, #0]
 80149f8:	f3bf 8f4f 	dsb	sy
 80149fc:	f3bf 8f6f 	isb	sy
 8014a00:	e009      	b.n	8014a16 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	3310      	adds	r3, #16
 8014a06:	4618      	mov	r0, r3
 8014a08:	f7ff fef1 	bl	80147ee <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	3324      	adds	r3, #36	; 0x24
 8014a10:	4618      	mov	r0, r3
 8014a12:	f7ff feec 	bl	80147ee <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8014a16:	f001 fef5 	bl	8016804 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8014a1a:	2301      	movs	r3, #1
}
 8014a1c:	4618      	mov	r0, r3
 8014a1e:	3710      	adds	r7, #16
 8014a20:	46bd      	mov	sp, r7
 8014a22:	bd80      	pop	{r7, pc}
 8014a24:	e000ed04 	.word	0xe000ed04

08014a28 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8014a28:	b580      	push	{r7, lr}
 8014a2a:	b08e      	sub	sp, #56	; 0x38
 8014a2c:	af02      	add	r7, sp, #8
 8014a2e:	60f8      	str	r0, [r7, #12]
 8014a30:	60b9      	str	r1, [r7, #8]
 8014a32:	607a      	str	r2, [r7, #4]
 8014a34:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d10a      	bne.n	8014a52 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8014a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a40:	f383 8811 	msr	BASEPRI, r3
 8014a44:	f3bf 8f6f 	isb	sy
 8014a48:	f3bf 8f4f 	dsb	sy
 8014a4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014a4e:	bf00      	nop
 8014a50:	e7fe      	b.n	8014a50 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8014a52:	683b      	ldr	r3, [r7, #0]
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d10a      	bne.n	8014a6e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8014a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a5c:	f383 8811 	msr	BASEPRI, r3
 8014a60:	f3bf 8f6f 	isb	sy
 8014a64:	f3bf 8f4f 	dsb	sy
 8014a68:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014a6a:	bf00      	nop
 8014a6c:	e7fe      	b.n	8014a6c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d002      	beq.n	8014a7a <xQueueGenericCreateStatic+0x52>
 8014a74:	68bb      	ldr	r3, [r7, #8]
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d001      	beq.n	8014a7e <xQueueGenericCreateStatic+0x56>
 8014a7a:	2301      	movs	r3, #1
 8014a7c:	e000      	b.n	8014a80 <xQueueGenericCreateStatic+0x58>
 8014a7e:	2300      	movs	r3, #0
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d10a      	bne.n	8014a9a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8014a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a88:	f383 8811 	msr	BASEPRI, r3
 8014a8c:	f3bf 8f6f 	isb	sy
 8014a90:	f3bf 8f4f 	dsb	sy
 8014a94:	623b      	str	r3, [r7, #32]
}
 8014a96:	bf00      	nop
 8014a98:	e7fe      	b.n	8014a98 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d102      	bne.n	8014aa6 <xQueueGenericCreateStatic+0x7e>
 8014aa0:	68bb      	ldr	r3, [r7, #8]
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d101      	bne.n	8014aaa <xQueueGenericCreateStatic+0x82>
 8014aa6:	2301      	movs	r3, #1
 8014aa8:	e000      	b.n	8014aac <xQueueGenericCreateStatic+0x84>
 8014aaa:	2300      	movs	r3, #0
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d10a      	bne.n	8014ac6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8014ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ab4:	f383 8811 	msr	BASEPRI, r3
 8014ab8:	f3bf 8f6f 	isb	sy
 8014abc:	f3bf 8f4f 	dsb	sy
 8014ac0:	61fb      	str	r3, [r7, #28]
}
 8014ac2:	bf00      	nop
 8014ac4:	e7fe      	b.n	8014ac4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8014ac6:	2348      	movs	r3, #72	; 0x48
 8014ac8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8014aca:	697b      	ldr	r3, [r7, #20]
 8014acc:	2b48      	cmp	r3, #72	; 0x48
 8014ace:	d00a      	beq.n	8014ae6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8014ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ad4:	f383 8811 	msr	BASEPRI, r3
 8014ad8:	f3bf 8f6f 	isb	sy
 8014adc:	f3bf 8f4f 	dsb	sy
 8014ae0:	61bb      	str	r3, [r7, #24]
}
 8014ae2:	bf00      	nop
 8014ae4:	e7fe      	b.n	8014ae4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8014ae6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014ae8:	683b      	ldr	r3, [r7, #0]
 8014aea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8014aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d00d      	beq.n	8014b0e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8014af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014af4:	2201      	movs	r2, #1
 8014af6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014afa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8014afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b00:	9300      	str	r3, [sp, #0]
 8014b02:	4613      	mov	r3, r2
 8014b04:	687a      	ldr	r2, [r7, #4]
 8014b06:	68b9      	ldr	r1, [r7, #8]
 8014b08:	68f8      	ldr	r0, [r7, #12]
 8014b0a:	f000 f83f 	bl	8014b8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8014b10:	4618      	mov	r0, r3
 8014b12:	3730      	adds	r7, #48	; 0x30
 8014b14:	46bd      	mov	sp, r7
 8014b16:	bd80      	pop	{r7, pc}

08014b18 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8014b18:	b580      	push	{r7, lr}
 8014b1a:	b08a      	sub	sp, #40	; 0x28
 8014b1c:	af02      	add	r7, sp, #8
 8014b1e:	60f8      	str	r0, [r7, #12]
 8014b20:	60b9      	str	r1, [r7, #8]
 8014b22:	4613      	mov	r3, r2
 8014b24:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d10a      	bne.n	8014b42 <xQueueGenericCreate+0x2a>
	__asm volatile
 8014b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b30:	f383 8811 	msr	BASEPRI, r3
 8014b34:	f3bf 8f6f 	isb	sy
 8014b38:	f3bf 8f4f 	dsb	sy
 8014b3c:	613b      	str	r3, [r7, #16]
}
 8014b3e:	bf00      	nop
 8014b40:	e7fe      	b.n	8014b40 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	68ba      	ldr	r2, [r7, #8]
 8014b46:	fb02 f303 	mul.w	r3, r2, r3
 8014b4a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014b4c:	69fb      	ldr	r3, [r7, #28]
 8014b4e:	3348      	adds	r3, #72	; 0x48
 8014b50:	4618      	mov	r0, r3
 8014b52:	f001 ff49 	bl	80169e8 <pvPortMalloc>
 8014b56:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014b58:	69bb      	ldr	r3, [r7, #24]
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d011      	beq.n	8014b82 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8014b5e:	69bb      	ldr	r3, [r7, #24]
 8014b60:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014b62:	697b      	ldr	r3, [r7, #20]
 8014b64:	3348      	adds	r3, #72	; 0x48
 8014b66:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014b68:	69bb      	ldr	r3, [r7, #24]
 8014b6a:	2200      	movs	r2, #0
 8014b6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014b70:	79fa      	ldrb	r2, [r7, #7]
 8014b72:	69bb      	ldr	r3, [r7, #24]
 8014b74:	9300      	str	r3, [sp, #0]
 8014b76:	4613      	mov	r3, r2
 8014b78:	697a      	ldr	r2, [r7, #20]
 8014b7a:	68b9      	ldr	r1, [r7, #8]
 8014b7c:	68f8      	ldr	r0, [r7, #12]
 8014b7e:	f000 f805 	bl	8014b8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014b82:	69bb      	ldr	r3, [r7, #24]
	}
 8014b84:	4618      	mov	r0, r3
 8014b86:	3720      	adds	r7, #32
 8014b88:	46bd      	mov	sp, r7
 8014b8a:	bd80      	pop	{r7, pc}

08014b8c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8014b8c:	b580      	push	{r7, lr}
 8014b8e:	b084      	sub	sp, #16
 8014b90:	af00      	add	r7, sp, #0
 8014b92:	60f8      	str	r0, [r7, #12]
 8014b94:	60b9      	str	r1, [r7, #8]
 8014b96:	607a      	str	r2, [r7, #4]
 8014b98:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8014b9a:	68bb      	ldr	r3, [r7, #8]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d103      	bne.n	8014ba8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014ba0:	69bb      	ldr	r3, [r7, #24]
 8014ba2:	69ba      	ldr	r2, [r7, #24]
 8014ba4:	601a      	str	r2, [r3, #0]
 8014ba6:	e002      	b.n	8014bae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014ba8:	69bb      	ldr	r3, [r7, #24]
 8014baa:	687a      	ldr	r2, [r7, #4]
 8014bac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8014bae:	69bb      	ldr	r3, [r7, #24]
 8014bb0:	68fa      	ldr	r2, [r7, #12]
 8014bb2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014bb4:	69bb      	ldr	r3, [r7, #24]
 8014bb6:	68ba      	ldr	r2, [r7, #8]
 8014bb8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014bba:	2101      	movs	r1, #1
 8014bbc:	69b8      	ldr	r0, [r7, #24]
 8014bbe:	f7ff fecb 	bl	8014958 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8014bc2:	bf00      	nop
 8014bc4:	3710      	adds	r7, #16
 8014bc6:	46bd      	mov	sp, r7
 8014bc8:	bd80      	pop	{r7, pc}
	...

08014bcc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014bcc:	b580      	push	{r7, lr}
 8014bce:	b08e      	sub	sp, #56	; 0x38
 8014bd0:	af00      	add	r7, sp, #0
 8014bd2:	60f8      	str	r0, [r7, #12]
 8014bd4:	60b9      	str	r1, [r7, #8]
 8014bd6:	607a      	str	r2, [r7, #4]
 8014bd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014bda:	2300      	movs	r3, #0
 8014bdc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d10a      	bne.n	8014bfe <xQueueGenericSend+0x32>
	__asm volatile
 8014be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bec:	f383 8811 	msr	BASEPRI, r3
 8014bf0:	f3bf 8f6f 	isb	sy
 8014bf4:	f3bf 8f4f 	dsb	sy
 8014bf8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014bfa:	bf00      	nop
 8014bfc:	e7fe      	b.n	8014bfc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014bfe:	68bb      	ldr	r3, [r7, #8]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d103      	bne.n	8014c0c <xQueueGenericSend+0x40>
 8014c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d101      	bne.n	8014c10 <xQueueGenericSend+0x44>
 8014c0c:	2301      	movs	r3, #1
 8014c0e:	e000      	b.n	8014c12 <xQueueGenericSend+0x46>
 8014c10:	2300      	movs	r3, #0
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d10a      	bne.n	8014c2c <xQueueGenericSend+0x60>
	__asm volatile
 8014c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c1a:	f383 8811 	msr	BASEPRI, r3
 8014c1e:	f3bf 8f6f 	isb	sy
 8014c22:	f3bf 8f4f 	dsb	sy
 8014c26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014c28:	bf00      	nop
 8014c2a:	e7fe      	b.n	8014c2a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014c2c:	683b      	ldr	r3, [r7, #0]
 8014c2e:	2b02      	cmp	r3, #2
 8014c30:	d103      	bne.n	8014c3a <xQueueGenericSend+0x6e>
 8014c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014c36:	2b01      	cmp	r3, #1
 8014c38:	d101      	bne.n	8014c3e <xQueueGenericSend+0x72>
 8014c3a:	2301      	movs	r3, #1
 8014c3c:	e000      	b.n	8014c40 <xQueueGenericSend+0x74>
 8014c3e:	2300      	movs	r3, #0
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d10a      	bne.n	8014c5a <xQueueGenericSend+0x8e>
	__asm volatile
 8014c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c48:	f383 8811 	msr	BASEPRI, r3
 8014c4c:	f3bf 8f6f 	isb	sy
 8014c50:	f3bf 8f4f 	dsb	sy
 8014c54:	623b      	str	r3, [r7, #32]
}
 8014c56:	bf00      	nop
 8014c58:	e7fe      	b.n	8014c58 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014c5a:	f001 fa57 	bl	801610c <xTaskGetSchedulerState>
 8014c5e:	4603      	mov	r3, r0
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d102      	bne.n	8014c6a <xQueueGenericSend+0x9e>
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d101      	bne.n	8014c6e <xQueueGenericSend+0xa2>
 8014c6a:	2301      	movs	r3, #1
 8014c6c:	e000      	b.n	8014c70 <xQueueGenericSend+0xa4>
 8014c6e:	2300      	movs	r3, #0
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d10a      	bne.n	8014c8a <xQueueGenericSend+0xbe>
	__asm volatile
 8014c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c78:	f383 8811 	msr	BASEPRI, r3
 8014c7c:	f3bf 8f6f 	isb	sy
 8014c80:	f3bf 8f4f 	dsb	sy
 8014c84:	61fb      	str	r3, [r7, #28]
}
 8014c86:	bf00      	nop
 8014c88:	e7fe      	b.n	8014c88 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014c8a:	f001 fd8b 	bl	80167a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014c96:	429a      	cmp	r2, r3
 8014c98:	d302      	bcc.n	8014ca0 <xQueueGenericSend+0xd4>
 8014c9a:	683b      	ldr	r3, [r7, #0]
 8014c9c:	2b02      	cmp	r3, #2
 8014c9e:	d129      	bne.n	8014cf4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014ca0:	683a      	ldr	r2, [r7, #0]
 8014ca2:	68b9      	ldr	r1, [r7, #8]
 8014ca4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014ca6:	f000 fae4 	bl	8015272 <prvCopyDataToQueue>
 8014caa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d010      	beq.n	8014cd6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cb6:	3324      	adds	r3, #36	; 0x24
 8014cb8:	4618      	mov	r0, r3
 8014cba:	f001 f867 	bl	8015d8c <xTaskRemoveFromEventList>
 8014cbe:	4603      	mov	r3, r0
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d013      	beq.n	8014cec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014cc4:	4b3f      	ldr	r3, [pc, #252]	; (8014dc4 <xQueueGenericSend+0x1f8>)
 8014cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014cca:	601a      	str	r2, [r3, #0]
 8014ccc:	f3bf 8f4f 	dsb	sy
 8014cd0:	f3bf 8f6f 	isb	sy
 8014cd4:	e00a      	b.n	8014cec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d007      	beq.n	8014cec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014cdc:	4b39      	ldr	r3, [pc, #228]	; (8014dc4 <xQueueGenericSend+0x1f8>)
 8014cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ce2:	601a      	str	r2, [r3, #0]
 8014ce4:	f3bf 8f4f 	dsb	sy
 8014ce8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014cec:	f001 fd8a 	bl	8016804 <vPortExitCritical>
				return pdPASS;
 8014cf0:	2301      	movs	r3, #1
 8014cf2:	e063      	b.n	8014dbc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d103      	bne.n	8014d02 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014cfa:	f001 fd83 	bl	8016804 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8014cfe:	2300      	movs	r3, #0
 8014d00:	e05c      	b.n	8014dbc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d106      	bne.n	8014d16 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014d08:	f107 0314 	add.w	r3, r7, #20
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	f001 f89f 	bl	8015e50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014d12:	2301      	movs	r3, #1
 8014d14:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014d16:	f001 fd75 	bl	8016804 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014d1a:	f000 fe2d 	bl	8015978 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014d1e:	f001 fd41 	bl	80167a4 <vPortEnterCritical>
 8014d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014d28:	b25b      	sxtb	r3, r3
 8014d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d2e:	d103      	bne.n	8014d38 <xQueueGenericSend+0x16c>
 8014d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d32:	2200      	movs	r2, #0
 8014d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014d3e:	b25b      	sxtb	r3, r3
 8014d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d44:	d103      	bne.n	8014d4e <xQueueGenericSend+0x182>
 8014d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d48:	2200      	movs	r2, #0
 8014d4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014d4e:	f001 fd59 	bl	8016804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014d52:	1d3a      	adds	r2, r7, #4
 8014d54:	f107 0314 	add.w	r3, r7, #20
 8014d58:	4611      	mov	r1, r2
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	f001 f88e 	bl	8015e7c <xTaskCheckForTimeOut>
 8014d60:	4603      	mov	r3, r0
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d124      	bne.n	8014db0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014d66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014d68:	f000 fb7b 	bl	8015462 <prvIsQueueFull>
 8014d6c:	4603      	mov	r3, r0
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d018      	beq.n	8014da4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d74:	3310      	adds	r3, #16
 8014d76:	687a      	ldr	r2, [r7, #4]
 8014d78:	4611      	mov	r1, r2
 8014d7a:	4618      	mov	r0, r3
 8014d7c:	f000 ffe2 	bl	8015d44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014d80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014d82:	f000 fb06 	bl	8015392 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8014d86:	f000 fe05 	bl	8015994 <xTaskResumeAll>
 8014d8a:	4603      	mov	r3, r0
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	f47f af7c 	bne.w	8014c8a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8014d92:	4b0c      	ldr	r3, [pc, #48]	; (8014dc4 <xQueueGenericSend+0x1f8>)
 8014d94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d98:	601a      	str	r2, [r3, #0]
 8014d9a:	f3bf 8f4f 	dsb	sy
 8014d9e:	f3bf 8f6f 	isb	sy
 8014da2:	e772      	b.n	8014c8a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014da4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014da6:	f000 faf4 	bl	8015392 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014daa:	f000 fdf3 	bl	8015994 <xTaskResumeAll>
 8014dae:	e76c      	b.n	8014c8a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014db0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014db2:	f000 faee 	bl	8015392 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014db6:	f000 fded 	bl	8015994 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8014dba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8014dbc:	4618      	mov	r0, r3
 8014dbe:	3738      	adds	r7, #56	; 0x38
 8014dc0:	46bd      	mov	sp, r7
 8014dc2:	bd80      	pop	{r7, pc}
 8014dc4:	e000ed04 	.word	0xe000ed04

08014dc8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014dc8:	b580      	push	{r7, lr}
 8014dca:	b08e      	sub	sp, #56	; 0x38
 8014dcc:	af00      	add	r7, sp, #0
 8014dce:	6078      	str	r0, [r7, #4]
 8014dd0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8014dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d10a      	bne.n	8014df2 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8014ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014de0:	f383 8811 	msr	BASEPRI, r3
 8014de4:	f3bf 8f6f 	isb	sy
 8014de8:	f3bf 8f4f 	dsb	sy
 8014dec:	623b      	str	r3, [r7, #32]
}
 8014dee:	bf00      	nop
 8014df0:	e7fe      	b.n	8014df0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d00a      	beq.n	8014e10 <xQueueGiveFromISR+0x48>
	__asm volatile
 8014dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dfe:	f383 8811 	msr	BASEPRI, r3
 8014e02:	f3bf 8f6f 	isb	sy
 8014e06:	f3bf 8f4f 	dsb	sy
 8014e0a:	61fb      	str	r3, [r7, #28]
}
 8014e0c:	bf00      	nop
 8014e0e:	e7fe      	b.n	8014e0e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8014e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d103      	bne.n	8014e20 <xQueueGiveFromISR+0x58>
 8014e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e1a:	689b      	ldr	r3, [r3, #8]
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d101      	bne.n	8014e24 <xQueueGiveFromISR+0x5c>
 8014e20:	2301      	movs	r3, #1
 8014e22:	e000      	b.n	8014e26 <xQueueGiveFromISR+0x5e>
 8014e24:	2300      	movs	r3, #0
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d10a      	bne.n	8014e40 <xQueueGiveFromISR+0x78>
	__asm volatile
 8014e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e2e:	f383 8811 	msr	BASEPRI, r3
 8014e32:	f3bf 8f6f 	isb	sy
 8014e36:	f3bf 8f4f 	dsb	sy
 8014e3a:	61bb      	str	r3, [r7, #24]
}
 8014e3c:	bf00      	nop
 8014e3e:	e7fe      	b.n	8014e3e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014e40:	f001 fd92 	bl	8016968 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8014e44:	f3ef 8211 	mrs	r2, BASEPRI
 8014e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e4c:	f383 8811 	msr	BASEPRI, r3
 8014e50:	f3bf 8f6f 	isb	sy
 8014e54:	f3bf 8f4f 	dsb	sy
 8014e58:	617a      	str	r2, [r7, #20]
 8014e5a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8014e5c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e64:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8014e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014e6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014e6c:	429a      	cmp	r2, r3
 8014e6e:	d22b      	bcs.n	8014ec8 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014e76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e7c:	1c5a      	adds	r2, r3, #1
 8014e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e80:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014e82:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e8a:	d112      	bne.n	8014eb2 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d016      	beq.n	8014ec2 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e96:	3324      	adds	r3, #36	; 0x24
 8014e98:	4618      	mov	r0, r3
 8014e9a:	f000 ff77 	bl	8015d8c <xTaskRemoveFromEventList>
 8014e9e:	4603      	mov	r3, r0
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d00e      	beq.n	8014ec2 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014ea4:	683b      	ldr	r3, [r7, #0]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d00b      	beq.n	8014ec2 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014eaa:	683b      	ldr	r3, [r7, #0]
 8014eac:	2201      	movs	r2, #1
 8014eae:	601a      	str	r2, [r3, #0]
 8014eb0:	e007      	b.n	8014ec2 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014eb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014eb6:	3301      	adds	r3, #1
 8014eb8:	b2db      	uxtb	r3, r3
 8014eba:	b25a      	sxtb	r2, r3
 8014ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ebe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8014ec2:	2301      	movs	r3, #1
 8014ec4:	637b      	str	r3, [r7, #52]	; 0x34
 8014ec6:	e001      	b.n	8014ecc <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014ec8:	2300      	movs	r3, #0
 8014eca:	637b      	str	r3, [r7, #52]	; 0x34
 8014ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ece:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8014ed0:	68fb      	ldr	r3, [r7, #12]
 8014ed2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8014ed6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014eda:	4618      	mov	r0, r3
 8014edc:	3738      	adds	r7, #56	; 0x38
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	bd80      	pop	{r7, pc}
	...

08014ee4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8014ee4:	b580      	push	{r7, lr}
 8014ee6:	b08e      	sub	sp, #56	; 0x38
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	6078      	str	r0, [r7, #4]
 8014eec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8014eee:	2300      	movs	r3, #0
 8014ef0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8014ef6:	2300      	movs	r3, #0
 8014ef8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d10a      	bne.n	8014f16 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8014f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f04:	f383 8811 	msr	BASEPRI, r3
 8014f08:	f3bf 8f6f 	isb	sy
 8014f0c:	f3bf 8f4f 	dsb	sy
 8014f10:	623b      	str	r3, [r7, #32]
}
 8014f12:	bf00      	nop
 8014f14:	e7fe      	b.n	8014f14 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d00a      	beq.n	8014f34 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8014f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f22:	f383 8811 	msr	BASEPRI, r3
 8014f26:	f3bf 8f6f 	isb	sy
 8014f2a:	f3bf 8f4f 	dsb	sy
 8014f2e:	61fb      	str	r3, [r7, #28]
}
 8014f30:	bf00      	nop
 8014f32:	e7fe      	b.n	8014f32 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014f34:	f001 f8ea 	bl	801610c <xTaskGetSchedulerState>
 8014f38:	4603      	mov	r3, r0
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d102      	bne.n	8014f44 <xQueueSemaphoreTake+0x60>
 8014f3e:	683b      	ldr	r3, [r7, #0]
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d101      	bne.n	8014f48 <xQueueSemaphoreTake+0x64>
 8014f44:	2301      	movs	r3, #1
 8014f46:	e000      	b.n	8014f4a <xQueueSemaphoreTake+0x66>
 8014f48:	2300      	movs	r3, #0
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d10a      	bne.n	8014f64 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8014f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f52:	f383 8811 	msr	BASEPRI, r3
 8014f56:	f3bf 8f6f 	isb	sy
 8014f5a:	f3bf 8f4f 	dsb	sy
 8014f5e:	61bb      	str	r3, [r7, #24]
}
 8014f60:	bf00      	nop
 8014f62:	e7fe      	b.n	8014f62 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014f64:	f001 fc1e 	bl	80167a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8014f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f6c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8014f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d024      	beq.n	8014fbe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8014f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f76:	1e5a      	subs	r2, r3, #1
 8014f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f7a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d104      	bne.n	8014f8e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8014f84:	f001 fa6a 	bl	801645c <pvTaskIncrementMutexHeldCount>
 8014f88:	4602      	mov	r2, r0
 8014f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f8c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f90:	691b      	ldr	r3, [r3, #16]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d00f      	beq.n	8014fb6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f98:	3310      	adds	r3, #16
 8014f9a:	4618      	mov	r0, r3
 8014f9c:	f000 fef6 	bl	8015d8c <xTaskRemoveFromEventList>
 8014fa0:	4603      	mov	r3, r0
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d007      	beq.n	8014fb6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014fa6:	4b54      	ldr	r3, [pc, #336]	; (80150f8 <xQueueSemaphoreTake+0x214>)
 8014fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014fac:	601a      	str	r2, [r3, #0]
 8014fae:	f3bf 8f4f 	dsb	sy
 8014fb2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014fb6:	f001 fc25 	bl	8016804 <vPortExitCritical>
				return pdPASS;
 8014fba:	2301      	movs	r3, #1
 8014fbc:	e097      	b.n	80150ee <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014fbe:	683b      	ldr	r3, [r7, #0]
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d111      	bne.n	8014fe8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8014fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d00a      	beq.n	8014fe0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8014fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fce:	f383 8811 	msr	BASEPRI, r3
 8014fd2:	f3bf 8f6f 	isb	sy
 8014fd6:	f3bf 8f4f 	dsb	sy
 8014fda:	617b      	str	r3, [r7, #20]
}
 8014fdc:	bf00      	nop
 8014fde:	e7fe      	b.n	8014fde <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8014fe0:	f001 fc10 	bl	8016804 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014fe4:	2300      	movs	r3, #0
 8014fe6:	e082      	b.n	80150ee <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d106      	bne.n	8014ffc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014fee:	f107 030c 	add.w	r3, r7, #12
 8014ff2:	4618      	mov	r0, r3
 8014ff4:	f000 ff2c 	bl	8015e50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014ff8:	2301      	movs	r3, #1
 8014ffa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014ffc:	f001 fc02 	bl	8016804 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015000:	f000 fcba 	bl	8015978 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015004:	f001 fbce 	bl	80167a4 <vPortEnterCritical>
 8015008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801500a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801500e:	b25b      	sxtb	r3, r3
 8015010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015014:	d103      	bne.n	801501e <xQueueSemaphoreTake+0x13a>
 8015016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015018:	2200      	movs	r2, #0
 801501a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801501e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015020:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015024:	b25b      	sxtb	r3, r3
 8015026:	f1b3 3fff 	cmp.w	r3, #4294967295
 801502a:	d103      	bne.n	8015034 <xQueueSemaphoreTake+0x150>
 801502c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801502e:	2200      	movs	r2, #0
 8015030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015034:	f001 fbe6 	bl	8016804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015038:	463a      	mov	r2, r7
 801503a:	f107 030c 	add.w	r3, r7, #12
 801503e:	4611      	mov	r1, r2
 8015040:	4618      	mov	r0, r3
 8015042:	f000 ff1b 	bl	8015e7c <xTaskCheckForTimeOut>
 8015046:	4603      	mov	r3, r0
 8015048:	2b00      	cmp	r3, #0
 801504a:	d132      	bne.n	80150b2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801504c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801504e:	f000 f9f2 	bl	8015436 <prvIsQueueEmpty>
 8015052:	4603      	mov	r3, r0
 8015054:	2b00      	cmp	r3, #0
 8015056:	d026      	beq.n	80150a6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d109      	bne.n	8015074 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8015060:	f001 fba0 	bl	80167a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015066:	689b      	ldr	r3, [r3, #8]
 8015068:	4618      	mov	r0, r3
 801506a:	f001 f86d 	bl	8016148 <xTaskPriorityInherit>
 801506e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8015070:	f001 fbc8 	bl	8016804 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015076:	3324      	adds	r3, #36	; 0x24
 8015078:	683a      	ldr	r2, [r7, #0]
 801507a:	4611      	mov	r1, r2
 801507c:	4618      	mov	r0, r3
 801507e:	f000 fe61 	bl	8015d44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015082:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015084:	f000 f985 	bl	8015392 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015088:	f000 fc84 	bl	8015994 <xTaskResumeAll>
 801508c:	4603      	mov	r3, r0
 801508e:	2b00      	cmp	r3, #0
 8015090:	f47f af68 	bne.w	8014f64 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8015094:	4b18      	ldr	r3, [pc, #96]	; (80150f8 <xQueueSemaphoreTake+0x214>)
 8015096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801509a:	601a      	str	r2, [r3, #0]
 801509c:	f3bf 8f4f 	dsb	sy
 80150a0:	f3bf 8f6f 	isb	sy
 80150a4:	e75e      	b.n	8014f64 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80150a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80150a8:	f000 f973 	bl	8015392 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80150ac:	f000 fc72 	bl	8015994 <xTaskResumeAll>
 80150b0:	e758      	b.n	8014f64 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80150b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80150b4:	f000 f96d 	bl	8015392 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80150b8:	f000 fc6c 	bl	8015994 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80150bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80150be:	f000 f9ba 	bl	8015436 <prvIsQueueEmpty>
 80150c2:	4603      	mov	r3, r0
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	f43f af4d 	beq.w	8014f64 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80150ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d00d      	beq.n	80150ec <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80150d0:	f001 fb68 	bl	80167a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80150d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80150d6:	f000 f8b4 	bl	8015242 <prvGetDisinheritPriorityAfterTimeout>
 80150da:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80150dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150de:	689b      	ldr	r3, [r3, #8]
 80150e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80150e2:	4618      	mov	r0, r3
 80150e4:	f001 f92c 	bl	8016340 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80150e8:	f001 fb8c 	bl	8016804 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80150ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80150ee:	4618      	mov	r0, r3
 80150f0:	3738      	adds	r7, #56	; 0x38
 80150f2:	46bd      	mov	sp, r7
 80150f4:	bd80      	pop	{r7, pc}
 80150f6:	bf00      	nop
 80150f8:	e000ed04 	.word	0xe000ed04

080150fc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80150fc:	b580      	push	{r7, lr}
 80150fe:	b08e      	sub	sp, #56	; 0x38
 8015100:	af00      	add	r7, sp, #0
 8015102:	60f8      	str	r0, [r7, #12]
 8015104:	60b9      	str	r1, [r7, #8]
 8015106:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801510c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801510e:	2b00      	cmp	r3, #0
 8015110:	d10a      	bne.n	8015128 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8015112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015116:	f383 8811 	msr	BASEPRI, r3
 801511a:	f3bf 8f6f 	isb	sy
 801511e:	f3bf 8f4f 	dsb	sy
 8015122:	623b      	str	r3, [r7, #32]
}
 8015124:	bf00      	nop
 8015126:	e7fe      	b.n	8015126 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015128:	68bb      	ldr	r3, [r7, #8]
 801512a:	2b00      	cmp	r3, #0
 801512c:	d103      	bne.n	8015136 <xQueueReceiveFromISR+0x3a>
 801512e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015132:	2b00      	cmp	r3, #0
 8015134:	d101      	bne.n	801513a <xQueueReceiveFromISR+0x3e>
 8015136:	2301      	movs	r3, #1
 8015138:	e000      	b.n	801513c <xQueueReceiveFromISR+0x40>
 801513a:	2300      	movs	r3, #0
 801513c:	2b00      	cmp	r3, #0
 801513e:	d10a      	bne.n	8015156 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8015140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015144:	f383 8811 	msr	BASEPRI, r3
 8015148:	f3bf 8f6f 	isb	sy
 801514c:	f3bf 8f4f 	dsb	sy
 8015150:	61fb      	str	r3, [r7, #28]
}
 8015152:	bf00      	nop
 8015154:	e7fe      	b.n	8015154 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015156:	f001 fc07 	bl	8016968 <vPortValidateInterruptPriority>
	__asm volatile
 801515a:	f3ef 8211 	mrs	r2, BASEPRI
 801515e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015162:	f383 8811 	msr	BASEPRI, r3
 8015166:	f3bf 8f6f 	isb	sy
 801516a:	f3bf 8f4f 	dsb	sy
 801516e:	61ba      	str	r2, [r7, #24]
 8015170:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8015172:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015174:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801517a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801517c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801517e:	2b00      	cmp	r3, #0
 8015180:	d02f      	beq.n	80151e2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8015182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015184:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015188:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801518c:	68b9      	ldr	r1, [r7, #8]
 801518e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015190:	f000 f8d9 	bl	8015346 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015196:	1e5a      	subs	r2, r3, #1
 8015198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801519a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801519c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80151a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151a4:	d112      	bne.n	80151cc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80151a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151a8:	691b      	ldr	r3, [r3, #16]
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d016      	beq.n	80151dc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80151ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151b0:	3310      	adds	r3, #16
 80151b2:	4618      	mov	r0, r3
 80151b4:	f000 fdea 	bl	8015d8c <xTaskRemoveFromEventList>
 80151b8:	4603      	mov	r3, r0
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d00e      	beq.n	80151dc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d00b      	beq.n	80151dc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	2201      	movs	r2, #1
 80151c8:	601a      	str	r2, [r3, #0]
 80151ca:	e007      	b.n	80151dc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80151cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80151d0:	3301      	adds	r3, #1
 80151d2:	b2db      	uxtb	r3, r3
 80151d4:	b25a      	sxtb	r2, r3
 80151d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80151dc:	2301      	movs	r3, #1
 80151de:	637b      	str	r3, [r7, #52]	; 0x34
 80151e0:	e001      	b.n	80151e6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80151e2:	2300      	movs	r3, #0
 80151e4:	637b      	str	r3, [r7, #52]	; 0x34
 80151e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80151ea:	693b      	ldr	r3, [r7, #16]
 80151ec:	f383 8811 	msr	BASEPRI, r3
}
 80151f0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80151f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80151f4:	4618      	mov	r0, r3
 80151f6:	3738      	adds	r7, #56	; 0x38
 80151f8:	46bd      	mov	sp, r7
 80151fa:	bd80      	pop	{r7, pc}

080151fc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80151fc:	b580      	push	{r7, lr}
 80151fe:	b084      	sub	sp, #16
 8015200:	af00      	add	r7, sp, #0
 8015202:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d10a      	bne.n	8015224 <vQueueDelete+0x28>
	__asm volatile
 801520e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015212:	f383 8811 	msr	BASEPRI, r3
 8015216:	f3bf 8f6f 	isb	sy
 801521a:	f3bf 8f4f 	dsb	sy
 801521e:	60bb      	str	r3, [r7, #8]
}
 8015220:	bf00      	nop
 8015222:	e7fe      	b.n	8015222 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8015224:	68f8      	ldr	r0, [r7, #12]
 8015226:	f000 f935 	bl	8015494 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8015230:	2b00      	cmp	r3, #0
 8015232:	d102      	bne.n	801523a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8015234:	68f8      	ldr	r0, [r7, #12]
 8015236:	f001 fca3 	bl	8016b80 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801523a:	bf00      	nop
 801523c:	3710      	adds	r7, #16
 801523e:	46bd      	mov	sp, r7
 8015240:	bd80      	pop	{r7, pc}

08015242 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8015242:	b480      	push	{r7}
 8015244:	b085      	sub	sp, #20
 8015246:	af00      	add	r7, sp, #0
 8015248:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801524e:	2b00      	cmp	r3, #0
 8015250:	d006      	beq.n	8015260 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	f1c3 0307 	rsb	r3, r3, #7
 801525c:	60fb      	str	r3, [r7, #12]
 801525e:	e001      	b.n	8015264 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8015260:	2300      	movs	r3, #0
 8015262:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8015264:	68fb      	ldr	r3, [r7, #12]
	}
 8015266:	4618      	mov	r0, r3
 8015268:	3714      	adds	r7, #20
 801526a:	46bd      	mov	sp, r7
 801526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015270:	4770      	bx	lr

08015272 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015272:	b580      	push	{r7, lr}
 8015274:	b086      	sub	sp, #24
 8015276:	af00      	add	r7, sp, #0
 8015278:	60f8      	str	r0, [r7, #12]
 801527a:	60b9      	str	r1, [r7, #8]
 801527c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801527e:	2300      	movs	r3, #0
 8015280:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015286:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801528c:	2b00      	cmp	r3, #0
 801528e:	d10d      	bne.n	80152ac <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	681b      	ldr	r3, [r3, #0]
 8015294:	2b00      	cmp	r3, #0
 8015296:	d14d      	bne.n	8015334 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	689b      	ldr	r3, [r3, #8]
 801529c:	4618      	mov	r0, r3
 801529e:	f000 ffc9 	bl	8016234 <xTaskPriorityDisinherit>
 80152a2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	2200      	movs	r2, #0
 80152a8:	609a      	str	r2, [r3, #8]
 80152aa:	e043      	b.n	8015334 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d119      	bne.n	80152e6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	6858      	ldr	r0, [r3, #4]
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80152ba:	461a      	mov	r2, r3
 80152bc:	68b9      	ldr	r1, [r7, #8]
 80152be:	f003 fa67 	bl	8018790 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	685a      	ldr	r2, [r3, #4]
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80152ca:	441a      	add	r2, r3
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	685a      	ldr	r2, [r3, #4]
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	689b      	ldr	r3, [r3, #8]
 80152d8:	429a      	cmp	r2, r3
 80152da:	d32b      	bcc.n	8015334 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	681a      	ldr	r2, [r3, #0]
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	605a      	str	r2, [r3, #4]
 80152e4:	e026      	b.n	8015334 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	68d8      	ldr	r0, [r3, #12]
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80152ee:	461a      	mov	r2, r3
 80152f0:	68b9      	ldr	r1, [r7, #8]
 80152f2:	f003 fa4d 	bl	8018790 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	68da      	ldr	r2, [r3, #12]
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80152fe:	425b      	negs	r3, r3
 8015300:	441a      	add	r2, r3
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	68da      	ldr	r2, [r3, #12]
 801530a:	68fb      	ldr	r3, [r7, #12]
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	429a      	cmp	r2, r3
 8015310:	d207      	bcs.n	8015322 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	689a      	ldr	r2, [r3, #8]
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801531a:	425b      	negs	r3, r3
 801531c:	441a      	add	r2, r3
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	2b02      	cmp	r3, #2
 8015326:	d105      	bne.n	8015334 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015328:	693b      	ldr	r3, [r7, #16]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d002      	beq.n	8015334 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801532e:	693b      	ldr	r3, [r7, #16]
 8015330:	3b01      	subs	r3, #1
 8015332:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015334:	693b      	ldr	r3, [r7, #16]
 8015336:	1c5a      	adds	r2, r3, #1
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801533c:	697b      	ldr	r3, [r7, #20]
}
 801533e:	4618      	mov	r0, r3
 8015340:	3718      	adds	r7, #24
 8015342:	46bd      	mov	sp, r7
 8015344:	bd80      	pop	{r7, pc}

08015346 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015346:	b580      	push	{r7, lr}
 8015348:	b082      	sub	sp, #8
 801534a:	af00      	add	r7, sp, #0
 801534c:	6078      	str	r0, [r7, #4]
 801534e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015354:	2b00      	cmp	r3, #0
 8015356:	d018      	beq.n	801538a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	68da      	ldr	r2, [r3, #12]
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015360:	441a      	add	r2, r3
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	68da      	ldr	r2, [r3, #12]
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	689b      	ldr	r3, [r3, #8]
 801536e:	429a      	cmp	r2, r3
 8015370:	d303      	bcc.n	801537a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	681a      	ldr	r2, [r3, #0]
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	68d9      	ldr	r1, [r3, #12]
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015382:	461a      	mov	r2, r3
 8015384:	6838      	ldr	r0, [r7, #0]
 8015386:	f003 fa03 	bl	8018790 <memcpy>
	}
}
 801538a:	bf00      	nop
 801538c:	3708      	adds	r7, #8
 801538e:	46bd      	mov	sp, r7
 8015390:	bd80      	pop	{r7, pc}

08015392 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015392:	b580      	push	{r7, lr}
 8015394:	b084      	sub	sp, #16
 8015396:	af00      	add	r7, sp, #0
 8015398:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801539a:	f001 fa03 	bl	80167a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80153a4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80153a6:	e011      	b.n	80153cc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d012      	beq.n	80153d6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	3324      	adds	r3, #36	; 0x24
 80153b4:	4618      	mov	r0, r3
 80153b6:	f000 fce9 	bl	8015d8c <xTaskRemoveFromEventList>
 80153ba:	4603      	mov	r3, r0
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d001      	beq.n	80153c4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80153c0:	f000 fdbe 	bl	8015f40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80153c4:	7bfb      	ldrb	r3, [r7, #15]
 80153c6:	3b01      	subs	r3, #1
 80153c8:	b2db      	uxtb	r3, r3
 80153ca:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80153cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	dce9      	bgt.n	80153a8 <prvUnlockQueue+0x16>
 80153d4:	e000      	b.n	80153d8 <prvUnlockQueue+0x46>
					break;
 80153d6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	22ff      	movs	r2, #255	; 0xff
 80153dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80153e0:	f001 fa10 	bl	8016804 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80153e4:	f001 f9de 	bl	80167a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80153ee:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80153f0:	e011      	b.n	8015416 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	691b      	ldr	r3, [r3, #16]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d012      	beq.n	8015420 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	3310      	adds	r3, #16
 80153fe:	4618      	mov	r0, r3
 8015400:	f000 fcc4 	bl	8015d8c <xTaskRemoveFromEventList>
 8015404:	4603      	mov	r3, r0
 8015406:	2b00      	cmp	r3, #0
 8015408:	d001      	beq.n	801540e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801540a:	f000 fd99 	bl	8015f40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801540e:	7bbb      	ldrb	r3, [r7, #14]
 8015410:	3b01      	subs	r3, #1
 8015412:	b2db      	uxtb	r3, r3
 8015414:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015416:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801541a:	2b00      	cmp	r3, #0
 801541c:	dce9      	bgt.n	80153f2 <prvUnlockQueue+0x60>
 801541e:	e000      	b.n	8015422 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8015420:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	22ff      	movs	r2, #255	; 0xff
 8015426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801542a:	f001 f9eb 	bl	8016804 <vPortExitCritical>
}
 801542e:	bf00      	nop
 8015430:	3710      	adds	r7, #16
 8015432:	46bd      	mov	sp, r7
 8015434:	bd80      	pop	{r7, pc}

08015436 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015436:	b580      	push	{r7, lr}
 8015438:	b084      	sub	sp, #16
 801543a:	af00      	add	r7, sp, #0
 801543c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801543e:	f001 f9b1 	bl	80167a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015446:	2b00      	cmp	r3, #0
 8015448:	d102      	bne.n	8015450 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801544a:	2301      	movs	r3, #1
 801544c:	60fb      	str	r3, [r7, #12]
 801544e:	e001      	b.n	8015454 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8015450:	2300      	movs	r3, #0
 8015452:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015454:	f001 f9d6 	bl	8016804 <vPortExitCritical>

	return xReturn;
 8015458:	68fb      	ldr	r3, [r7, #12]
}
 801545a:	4618      	mov	r0, r3
 801545c:	3710      	adds	r7, #16
 801545e:	46bd      	mov	sp, r7
 8015460:	bd80      	pop	{r7, pc}

08015462 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8015462:	b580      	push	{r7, lr}
 8015464:	b084      	sub	sp, #16
 8015466:	af00      	add	r7, sp, #0
 8015468:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801546a:	f001 f99b 	bl	80167a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015476:	429a      	cmp	r2, r3
 8015478:	d102      	bne.n	8015480 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801547a:	2301      	movs	r3, #1
 801547c:	60fb      	str	r3, [r7, #12]
 801547e:	e001      	b.n	8015484 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8015480:	2300      	movs	r3, #0
 8015482:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015484:	f001 f9be 	bl	8016804 <vPortExitCritical>

	return xReturn;
 8015488:	68fb      	ldr	r3, [r7, #12]
}
 801548a:	4618      	mov	r0, r3
 801548c:	3710      	adds	r7, #16
 801548e:	46bd      	mov	sp, r7
 8015490:	bd80      	pop	{r7, pc}
	...

08015494 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8015494:	b480      	push	{r7}
 8015496:	b085      	sub	sp, #20
 8015498:	af00      	add	r7, sp, #0
 801549a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801549c:	2300      	movs	r3, #0
 801549e:	60fb      	str	r3, [r7, #12]
 80154a0:	e016      	b.n	80154d0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80154a2:	4a10      	ldr	r2, [pc, #64]	; (80154e4 <vQueueUnregisterQueue+0x50>)
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	00db      	lsls	r3, r3, #3
 80154a8:	4413      	add	r3, r2
 80154aa:	685b      	ldr	r3, [r3, #4]
 80154ac:	687a      	ldr	r2, [r7, #4]
 80154ae:	429a      	cmp	r2, r3
 80154b0:	d10b      	bne.n	80154ca <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80154b2:	4a0c      	ldr	r2, [pc, #48]	; (80154e4 <vQueueUnregisterQueue+0x50>)
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	2100      	movs	r1, #0
 80154b8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80154bc:	4a09      	ldr	r2, [pc, #36]	; (80154e4 <vQueueUnregisterQueue+0x50>)
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	00db      	lsls	r3, r3, #3
 80154c2:	4413      	add	r3, r2
 80154c4:	2200      	movs	r2, #0
 80154c6:	605a      	str	r2, [r3, #4]
				break;
 80154c8:	e006      	b.n	80154d8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80154ca:	68fb      	ldr	r3, [r7, #12]
 80154cc:	3301      	adds	r3, #1
 80154ce:	60fb      	str	r3, [r7, #12]
 80154d0:	68fb      	ldr	r3, [r7, #12]
 80154d2:	2b07      	cmp	r3, #7
 80154d4:	d9e5      	bls.n	80154a2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80154d6:	bf00      	nop
 80154d8:	bf00      	nop
 80154da:	3714      	adds	r7, #20
 80154dc:	46bd      	mov	sp, r7
 80154de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e2:	4770      	bx	lr
 80154e4:	2000674c 	.word	0x2000674c

080154e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b08e      	sub	sp, #56	; 0x38
 80154ec:	af04      	add	r7, sp, #16
 80154ee:	60f8      	str	r0, [r7, #12]
 80154f0:	60b9      	str	r1, [r7, #8]
 80154f2:	607a      	str	r2, [r7, #4]
 80154f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80154f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	d10a      	bne.n	8015512 <xTaskCreateStatic+0x2a>
	__asm volatile
 80154fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015500:	f383 8811 	msr	BASEPRI, r3
 8015504:	f3bf 8f6f 	isb	sy
 8015508:	f3bf 8f4f 	dsb	sy
 801550c:	623b      	str	r3, [r7, #32]
}
 801550e:	bf00      	nop
 8015510:	e7fe      	b.n	8015510 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8015512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015514:	2b00      	cmp	r3, #0
 8015516:	d10a      	bne.n	801552e <xTaskCreateStatic+0x46>
	__asm volatile
 8015518:	f04f 0350 	mov.w	r3, #80	; 0x50
 801551c:	f383 8811 	msr	BASEPRI, r3
 8015520:	f3bf 8f6f 	isb	sy
 8015524:	f3bf 8f4f 	dsb	sy
 8015528:	61fb      	str	r3, [r7, #28]
}
 801552a:	bf00      	nop
 801552c:	e7fe      	b.n	801552c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801552e:	23a0      	movs	r3, #160	; 0xa0
 8015530:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8015532:	693b      	ldr	r3, [r7, #16]
 8015534:	2ba0      	cmp	r3, #160	; 0xa0
 8015536:	d00a      	beq.n	801554e <xTaskCreateStatic+0x66>
	__asm volatile
 8015538:	f04f 0350 	mov.w	r3, #80	; 0x50
 801553c:	f383 8811 	msr	BASEPRI, r3
 8015540:	f3bf 8f6f 	isb	sy
 8015544:	f3bf 8f4f 	dsb	sy
 8015548:	61bb      	str	r3, [r7, #24]
}
 801554a:	bf00      	nop
 801554c:	e7fe      	b.n	801554c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801554e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8015550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015552:	2b00      	cmp	r3, #0
 8015554:	d01e      	beq.n	8015594 <xTaskCreateStatic+0xac>
 8015556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015558:	2b00      	cmp	r3, #0
 801555a:	d01b      	beq.n	8015594 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801555c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801555e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8015560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015562:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015564:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8015566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015568:	2202      	movs	r2, #2
 801556a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801556e:	2300      	movs	r3, #0
 8015570:	9303      	str	r3, [sp, #12]
 8015572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015574:	9302      	str	r3, [sp, #8]
 8015576:	f107 0314 	add.w	r3, r7, #20
 801557a:	9301      	str	r3, [sp, #4]
 801557c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801557e:	9300      	str	r3, [sp, #0]
 8015580:	683b      	ldr	r3, [r7, #0]
 8015582:	687a      	ldr	r2, [r7, #4]
 8015584:	68b9      	ldr	r1, [r7, #8]
 8015586:	68f8      	ldr	r0, [r7, #12]
 8015588:	f000 f850 	bl	801562c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801558c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801558e:	f000 f8eb 	bl	8015768 <prvAddNewTaskToReadyList>
 8015592:	e001      	b.n	8015598 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8015594:	2300      	movs	r3, #0
 8015596:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8015598:	697b      	ldr	r3, [r7, #20]
	}
 801559a:	4618      	mov	r0, r3
 801559c:	3728      	adds	r7, #40	; 0x28
 801559e:	46bd      	mov	sp, r7
 80155a0:	bd80      	pop	{r7, pc}

080155a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80155a2:	b580      	push	{r7, lr}
 80155a4:	b08c      	sub	sp, #48	; 0x30
 80155a6:	af04      	add	r7, sp, #16
 80155a8:	60f8      	str	r0, [r7, #12]
 80155aa:	60b9      	str	r1, [r7, #8]
 80155ac:	603b      	str	r3, [r7, #0]
 80155ae:	4613      	mov	r3, r2
 80155b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80155b2:	88fb      	ldrh	r3, [r7, #6]
 80155b4:	009b      	lsls	r3, r3, #2
 80155b6:	4618      	mov	r0, r3
 80155b8:	f001 fa16 	bl	80169e8 <pvPortMalloc>
 80155bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80155be:	697b      	ldr	r3, [r7, #20]
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d00e      	beq.n	80155e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80155c4:	20a0      	movs	r0, #160	; 0xa0
 80155c6:	f001 fa0f 	bl	80169e8 <pvPortMalloc>
 80155ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80155cc:	69fb      	ldr	r3, [r7, #28]
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d003      	beq.n	80155da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80155d2:	69fb      	ldr	r3, [r7, #28]
 80155d4:	697a      	ldr	r2, [r7, #20]
 80155d6:	631a      	str	r2, [r3, #48]	; 0x30
 80155d8:	e005      	b.n	80155e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80155da:	6978      	ldr	r0, [r7, #20]
 80155dc:	f001 fad0 	bl	8016b80 <vPortFree>
 80155e0:	e001      	b.n	80155e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80155e2:	2300      	movs	r3, #0
 80155e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80155e6:	69fb      	ldr	r3, [r7, #28]
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d017      	beq.n	801561c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80155ec:	69fb      	ldr	r3, [r7, #28]
 80155ee:	2200      	movs	r2, #0
 80155f0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80155f4:	88fa      	ldrh	r2, [r7, #6]
 80155f6:	2300      	movs	r3, #0
 80155f8:	9303      	str	r3, [sp, #12]
 80155fa:	69fb      	ldr	r3, [r7, #28]
 80155fc:	9302      	str	r3, [sp, #8]
 80155fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015600:	9301      	str	r3, [sp, #4]
 8015602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015604:	9300      	str	r3, [sp, #0]
 8015606:	683b      	ldr	r3, [r7, #0]
 8015608:	68b9      	ldr	r1, [r7, #8]
 801560a:	68f8      	ldr	r0, [r7, #12]
 801560c:	f000 f80e 	bl	801562c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015610:	69f8      	ldr	r0, [r7, #28]
 8015612:	f000 f8a9 	bl	8015768 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8015616:	2301      	movs	r3, #1
 8015618:	61bb      	str	r3, [r7, #24]
 801561a:	e002      	b.n	8015622 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801561c:	f04f 33ff 	mov.w	r3, #4294967295
 8015620:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8015622:	69bb      	ldr	r3, [r7, #24]
	}
 8015624:	4618      	mov	r0, r3
 8015626:	3720      	adds	r7, #32
 8015628:	46bd      	mov	sp, r7
 801562a:	bd80      	pop	{r7, pc}

0801562c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801562c:	b580      	push	{r7, lr}
 801562e:	b088      	sub	sp, #32
 8015630:	af00      	add	r7, sp, #0
 8015632:	60f8      	str	r0, [r7, #12]
 8015634:	60b9      	str	r1, [r7, #8]
 8015636:	607a      	str	r2, [r7, #4]
 8015638:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801563a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801563c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015644:	3b01      	subs	r3, #1
 8015646:	009b      	lsls	r3, r3, #2
 8015648:	4413      	add	r3, r2
 801564a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801564c:	69bb      	ldr	r3, [r7, #24]
 801564e:	f023 0307 	bic.w	r3, r3, #7
 8015652:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8015654:	69bb      	ldr	r3, [r7, #24]
 8015656:	f003 0307 	and.w	r3, r3, #7
 801565a:	2b00      	cmp	r3, #0
 801565c:	d00a      	beq.n	8015674 <prvInitialiseNewTask+0x48>
	__asm volatile
 801565e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015662:	f383 8811 	msr	BASEPRI, r3
 8015666:	f3bf 8f6f 	isb	sy
 801566a:	f3bf 8f4f 	dsb	sy
 801566e:	617b      	str	r3, [r7, #20]
}
 8015670:	bf00      	nop
 8015672:	e7fe      	b.n	8015672 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8015674:	68bb      	ldr	r3, [r7, #8]
 8015676:	2b00      	cmp	r3, #0
 8015678:	d01f      	beq.n	80156ba <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801567a:	2300      	movs	r3, #0
 801567c:	61fb      	str	r3, [r7, #28]
 801567e:	e012      	b.n	80156a6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015680:	68ba      	ldr	r2, [r7, #8]
 8015682:	69fb      	ldr	r3, [r7, #28]
 8015684:	4413      	add	r3, r2
 8015686:	7819      	ldrb	r1, [r3, #0]
 8015688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801568a:	69fb      	ldr	r3, [r7, #28]
 801568c:	4413      	add	r3, r2
 801568e:	3334      	adds	r3, #52	; 0x34
 8015690:	460a      	mov	r2, r1
 8015692:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8015694:	68ba      	ldr	r2, [r7, #8]
 8015696:	69fb      	ldr	r3, [r7, #28]
 8015698:	4413      	add	r3, r2
 801569a:	781b      	ldrb	r3, [r3, #0]
 801569c:	2b00      	cmp	r3, #0
 801569e:	d006      	beq.n	80156ae <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80156a0:	69fb      	ldr	r3, [r7, #28]
 80156a2:	3301      	adds	r3, #1
 80156a4:	61fb      	str	r3, [r7, #28]
 80156a6:	69fb      	ldr	r3, [r7, #28]
 80156a8:	2b0f      	cmp	r3, #15
 80156aa:	d9e9      	bls.n	8015680 <prvInitialiseNewTask+0x54>
 80156ac:	e000      	b.n	80156b0 <prvInitialiseNewTask+0x84>
			{
				break;
 80156ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80156b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156b2:	2200      	movs	r2, #0
 80156b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80156b8:	e003      	b.n	80156c2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80156ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156bc:	2200      	movs	r2, #0
 80156be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80156c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156c4:	2b06      	cmp	r3, #6
 80156c6:	d901      	bls.n	80156cc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80156c8:	2306      	movs	r3, #6
 80156ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80156cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80156d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80156d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80156d6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80156d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156da:	2200      	movs	r2, #0
 80156dc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80156de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156e0:	3304      	adds	r3, #4
 80156e2:	4618      	mov	r0, r3
 80156e4:	f7ff f8a3 	bl	801482e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80156e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156ea:	3318      	adds	r3, #24
 80156ec:	4618      	mov	r0, r3
 80156ee:	f7ff f89e 	bl	801482e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80156f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80156f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80156f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156fa:	f1c3 0207 	rsb	r2, r3, #7
 80156fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015700:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015706:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8015708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801570a:	2200      	movs	r2, #0
 801570c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015712:	2200      	movs	r2, #0
 8015714:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8015718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801571a:	334c      	adds	r3, #76	; 0x4c
 801571c:	224c      	movs	r2, #76	; 0x4c
 801571e:	2100      	movs	r1, #0
 8015720:	4618      	mov	r0, r3
 8015722:	f002 ff4d 	bl	80185c0 <memset>
 8015726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015728:	4a0c      	ldr	r2, [pc, #48]	; (801575c <prvInitialiseNewTask+0x130>)
 801572a:	651a      	str	r2, [r3, #80]	; 0x50
 801572c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801572e:	4a0c      	ldr	r2, [pc, #48]	; (8015760 <prvInitialiseNewTask+0x134>)
 8015730:	655a      	str	r2, [r3, #84]	; 0x54
 8015732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015734:	4a0b      	ldr	r2, [pc, #44]	; (8015764 <prvInitialiseNewTask+0x138>)
 8015736:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015738:	683a      	ldr	r2, [r7, #0]
 801573a:	68f9      	ldr	r1, [r7, #12]
 801573c:	69b8      	ldr	r0, [r7, #24]
 801573e:	f000 ff07 	bl	8016550 <pxPortInitialiseStack>
 8015742:	4602      	mov	r2, r0
 8015744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015746:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8015748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801574a:	2b00      	cmp	r3, #0
 801574c:	d002      	beq.n	8015754 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801574e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015752:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015754:	bf00      	nop
 8015756:	3720      	adds	r7, #32
 8015758:	46bd      	mov	sp, r7
 801575a:	bd80      	pop	{r7, pc}
 801575c:	2000b140 	.word	0x2000b140
 8015760:	2000b1a8 	.word	0x2000b1a8
 8015764:	2000b210 	.word	0x2000b210

08015768 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015768:	b580      	push	{r7, lr}
 801576a:	b082      	sub	sp, #8
 801576c:	af00      	add	r7, sp, #0
 801576e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015770:	f001 f818 	bl	80167a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015774:	4b2a      	ldr	r3, [pc, #168]	; (8015820 <prvAddNewTaskToReadyList+0xb8>)
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	3301      	adds	r3, #1
 801577a:	4a29      	ldr	r2, [pc, #164]	; (8015820 <prvAddNewTaskToReadyList+0xb8>)
 801577c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801577e:	4b29      	ldr	r3, [pc, #164]	; (8015824 <prvAddNewTaskToReadyList+0xbc>)
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	2b00      	cmp	r3, #0
 8015784:	d109      	bne.n	801579a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8015786:	4a27      	ldr	r2, [pc, #156]	; (8015824 <prvAddNewTaskToReadyList+0xbc>)
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801578c:	4b24      	ldr	r3, [pc, #144]	; (8015820 <prvAddNewTaskToReadyList+0xb8>)
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	2b01      	cmp	r3, #1
 8015792:	d110      	bne.n	80157b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015794:	f000 fbf8 	bl	8015f88 <prvInitialiseTaskLists>
 8015798:	e00d      	b.n	80157b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801579a:	4b23      	ldr	r3, [pc, #140]	; (8015828 <prvAddNewTaskToReadyList+0xc0>)
 801579c:	681b      	ldr	r3, [r3, #0]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d109      	bne.n	80157b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80157a2:	4b20      	ldr	r3, [pc, #128]	; (8015824 <prvAddNewTaskToReadyList+0xbc>)
 80157a4:	681b      	ldr	r3, [r3, #0]
 80157a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157ac:	429a      	cmp	r2, r3
 80157ae:	d802      	bhi.n	80157b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80157b0:	4a1c      	ldr	r2, [pc, #112]	; (8015824 <prvAddNewTaskToReadyList+0xbc>)
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80157b6:	4b1d      	ldr	r3, [pc, #116]	; (801582c <prvAddNewTaskToReadyList+0xc4>)
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	3301      	adds	r3, #1
 80157bc:	4a1b      	ldr	r2, [pc, #108]	; (801582c <prvAddNewTaskToReadyList+0xc4>)
 80157be:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157c4:	2201      	movs	r2, #1
 80157c6:	409a      	lsls	r2, r3
 80157c8:	4b19      	ldr	r3, [pc, #100]	; (8015830 <prvAddNewTaskToReadyList+0xc8>)
 80157ca:	681b      	ldr	r3, [r3, #0]
 80157cc:	4313      	orrs	r3, r2
 80157ce:	4a18      	ldr	r2, [pc, #96]	; (8015830 <prvAddNewTaskToReadyList+0xc8>)
 80157d0:	6013      	str	r3, [r2, #0]
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157d6:	4613      	mov	r3, r2
 80157d8:	009b      	lsls	r3, r3, #2
 80157da:	4413      	add	r3, r2
 80157dc:	009b      	lsls	r3, r3, #2
 80157de:	4a15      	ldr	r2, [pc, #84]	; (8015834 <prvAddNewTaskToReadyList+0xcc>)
 80157e0:	441a      	add	r2, r3
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	3304      	adds	r3, #4
 80157e6:	4619      	mov	r1, r3
 80157e8:	4610      	mov	r0, r2
 80157ea:	f7ff f82d 	bl	8014848 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80157ee:	f001 f809 	bl	8016804 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80157f2:	4b0d      	ldr	r3, [pc, #52]	; (8015828 <prvAddNewTaskToReadyList+0xc0>)
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d00e      	beq.n	8015818 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80157fa:	4b0a      	ldr	r3, [pc, #40]	; (8015824 <prvAddNewTaskToReadyList+0xbc>)
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015804:	429a      	cmp	r2, r3
 8015806:	d207      	bcs.n	8015818 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8015808:	4b0b      	ldr	r3, [pc, #44]	; (8015838 <prvAddNewTaskToReadyList+0xd0>)
 801580a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801580e:	601a      	str	r2, [r3, #0]
 8015810:	f3bf 8f4f 	dsb	sy
 8015814:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015818:	bf00      	nop
 801581a:	3708      	adds	r7, #8
 801581c:	46bd      	mov	sp, r7
 801581e:	bd80      	pop	{r7, pc}
 8015820:	2000688c 	.word	0x2000688c
 8015824:	2000678c 	.word	0x2000678c
 8015828:	20006898 	.word	0x20006898
 801582c:	200068a8 	.word	0x200068a8
 8015830:	20006894 	.word	0x20006894
 8015834:	20006790 	.word	0x20006790
 8015838:	e000ed04 	.word	0xe000ed04

0801583c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801583c:	b580      	push	{r7, lr}
 801583e:	b084      	sub	sp, #16
 8015840:	af00      	add	r7, sp, #0
 8015842:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8015844:	2300      	movs	r3, #0
 8015846:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	2b00      	cmp	r3, #0
 801584c:	d017      	beq.n	801587e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801584e:	4b13      	ldr	r3, [pc, #76]	; (801589c <vTaskDelay+0x60>)
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	2b00      	cmp	r3, #0
 8015854:	d00a      	beq.n	801586c <vTaskDelay+0x30>
	__asm volatile
 8015856:	f04f 0350 	mov.w	r3, #80	; 0x50
 801585a:	f383 8811 	msr	BASEPRI, r3
 801585e:	f3bf 8f6f 	isb	sy
 8015862:	f3bf 8f4f 	dsb	sy
 8015866:	60bb      	str	r3, [r7, #8]
}
 8015868:	bf00      	nop
 801586a:	e7fe      	b.n	801586a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801586c:	f000 f884 	bl	8015978 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8015870:	2100      	movs	r1, #0
 8015872:	6878      	ldr	r0, [r7, #4]
 8015874:	f000 fe06 	bl	8016484 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8015878:	f000 f88c 	bl	8015994 <xTaskResumeAll>
 801587c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801587e:	68fb      	ldr	r3, [r7, #12]
 8015880:	2b00      	cmp	r3, #0
 8015882:	d107      	bne.n	8015894 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8015884:	4b06      	ldr	r3, [pc, #24]	; (80158a0 <vTaskDelay+0x64>)
 8015886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801588a:	601a      	str	r2, [r3, #0]
 801588c:	f3bf 8f4f 	dsb	sy
 8015890:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015894:	bf00      	nop
 8015896:	3710      	adds	r7, #16
 8015898:	46bd      	mov	sp, r7
 801589a:	bd80      	pop	{r7, pc}
 801589c:	200068b4 	.word	0x200068b4
 80158a0:	e000ed04 	.word	0xe000ed04

080158a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80158a4:	b580      	push	{r7, lr}
 80158a6:	b08a      	sub	sp, #40	; 0x28
 80158a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80158aa:	2300      	movs	r3, #0
 80158ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80158ae:	2300      	movs	r3, #0
 80158b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80158b2:	463a      	mov	r2, r7
 80158b4:	1d39      	adds	r1, r7, #4
 80158b6:	f107 0308 	add.w	r3, r7, #8
 80158ba:	4618      	mov	r0, r3
 80158bc:	f7ec fc0e 	bl	80020dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80158c0:	6839      	ldr	r1, [r7, #0]
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	68ba      	ldr	r2, [r7, #8]
 80158c6:	9202      	str	r2, [sp, #8]
 80158c8:	9301      	str	r3, [sp, #4]
 80158ca:	2300      	movs	r3, #0
 80158cc:	9300      	str	r3, [sp, #0]
 80158ce:	2300      	movs	r3, #0
 80158d0:	460a      	mov	r2, r1
 80158d2:	4921      	ldr	r1, [pc, #132]	; (8015958 <vTaskStartScheduler+0xb4>)
 80158d4:	4821      	ldr	r0, [pc, #132]	; (801595c <vTaskStartScheduler+0xb8>)
 80158d6:	f7ff fe07 	bl	80154e8 <xTaskCreateStatic>
 80158da:	4603      	mov	r3, r0
 80158dc:	4a20      	ldr	r2, [pc, #128]	; (8015960 <vTaskStartScheduler+0xbc>)
 80158de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80158e0:	4b1f      	ldr	r3, [pc, #124]	; (8015960 <vTaskStartScheduler+0xbc>)
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d002      	beq.n	80158ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80158e8:	2301      	movs	r3, #1
 80158ea:	617b      	str	r3, [r7, #20]
 80158ec:	e001      	b.n	80158f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80158ee:	2300      	movs	r3, #0
 80158f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80158f2:	697b      	ldr	r3, [r7, #20]
 80158f4:	2b01      	cmp	r3, #1
 80158f6:	d11b      	bne.n	8015930 <vTaskStartScheduler+0x8c>
	__asm volatile
 80158f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158fc:	f383 8811 	msr	BASEPRI, r3
 8015900:	f3bf 8f6f 	isb	sy
 8015904:	f3bf 8f4f 	dsb	sy
 8015908:	613b      	str	r3, [r7, #16]
}
 801590a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801590c:	4b15      	ldr	r3, [pc, #84]	; (8015964 <vTaskStartScheduler+0xc0>)
 801590e:	681b      	ldr	r3, [r3, #0]
 8015910:	334c      	adds	r3, #76	; 0x4c
 8015912:	4a15      	ldr	r2, [pc, #84]	; (8015968 <vTaskStartScheduler+0xc4>)
 8015914:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015916:	4b15      	ldr	r3, [pc, #84]	; (801596c <vTaskStartScheduler+0xc8>)
 8015918:	f04f 32ff 	mov.w	r2, #4294967295
 801591c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801591e:	4b14      	ldr	r3, [pc, #80]	; (8015970 <vTaskStartScheduler+0xcc>)
 8015920:	2201      	movs	r2, #1
 8015922:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8015924:	4b13      	ldr	r3, [pc, #76]	; (8015974 <vTaskStartScheduler+0xd0>)
 8015926:	2200      	movs	r2, #0
 8015928:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801592a:	f000 fe99 	bl	8016660 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801592e:	e00e      	b.n	801594e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015930:	697b      	ldr	r3, [r7, #20]
 8015932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015936:	d10a      	bne.n	801594e <vTaskStartScheduler+0xaa>
	__asm volatile
 8015938:	f04f 0350 	mov.w	r3, #80	; 0x50
 801593c:	f383 8811 	msr	BASEPRI, r3
 8015940:	f3bf 8f6f 	isb	sy
 8015944:	f3bf 8f4f 	dsb	sy
 8015948:	60fb      	str	r3, [r7, #12]
}
 801594a:	bf00      	nop
 801594c:	e7fe      	b.n	801594c <vTaskStartScheduler+0xa8>
}
 801594e:	bf00      	nop
 8015950:	3718      	adds	r7, #24
 8015952:	46bd      	mov	sp, r7
 8015954:	bd80      	pop	{r7, pc}
 8015956:	bf00      	nop
 8015958:	0801aaf0 	.word	0x0801aaf0
 801595c:	08015f59 	.word	0x08015f59
 8015960:	200068b0 	.word	0x200068b0
 8015964:	2000678c 	.word	0x2000678c
 8015968:	200001c8 	.word	0x200001c8
 801596c:	200068ac 	.word	0x200068ac
 8015970:	20006898 	.word	0x20006898
 8015974:	20006890 	.word	0x20006890

08015978 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015978:	b480      	push	{r7}
 801597a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801597c:	4b04      	ldr	r3, [pc, #16]	; (8015990 <vTaskSuspendAll+0x18>)
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	3301      	adds	r3, #1
 8015982:	4a03      	ldr	r2, [pc, #12]	; (8015990 <vTaskSuspendAll+0x18>)
 8015984:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8015986:	bf00      	nop
 8015988:	46bd      	mov	sp, r7
 801598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801598e:	4770      	bx	lr
 8015990:	200068b4 	.word	0x200068b4

08015994 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015994:	b580      	push	{r7, lr}
 8015996:	b084      	sub	sp, #16
 8015998:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801599a:	2300      	movs	r3, #0
 801599c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801599e:	2300      	movs	r3, #0
 80159a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80159a2:	4b41      	ldr	r3, [pc, #260]	; (8015aa8 <xTaskResumeAll+0x114>)
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d10a      	bne.n	80159c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80159aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159ae:	f383 8811 	msr	BASEPRI, r3
 80159b2:	f3bf 8f6f 	isb	sy
 80159b6:	f3bf 8f4f 	dsb	sy
 80159ba:	603b      	str	r3, [r7, #0]
}
 80159bc:	bf00      	nop
 80159be:	e7fe      	b.n	80159be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80159c0:	f000 fef0 	bl	80167a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80159c4:	4b38      	ldr	r3, [pc, #224]	; (8015aa8 <xTaskResumeAll+0x114>)
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	3b01      	subs	r3, #1
 80159ca:	4a37      	ldr	r2, [pc, #220]	; (8015aa8 <xTaskResumeAll+0x114>)
 80159cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80159ce:	4b36      	ldr	r3, [pc, #216]	; (8015aa8 <xTaskResumeAll+0x114>)
 80159d0:	681b      	ldr	r3, [r3, #0]
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d161      	bne.n	8015a9a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80159d6:	4b35      	ldr	r3, [pc, #212]	; (8015aac <xTaskResumeAll+0x118>)
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d05d      	beq.n	8015a9a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80159de:	e02e      	b.n	8015a3e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80159e0:	4b33      	ldr	r3, [pc, #204]	; (8015ab0 <xTaskResumeAll+0x11c>)
 80159e2:	68db      	ldr	r3, [r3, #12]
 80159e4:	68db      	ldr	r3, [r3, #12]
 80159e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	3318      	adds	r3, #24
 80159ec:	4618      	mov	r0, r3
 80159ee:	f7fe ff88 	bl	8014902 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80159f2:	68fb      	ldr	r3, [r7, #12]
 80159f4:	3304      	adds	r3, #4
 80159f6:	4618      	mov	r0, r3
 80159f8:	f7fe ff83 	bl	8014902 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a00:	2201      	movs	r2, #1
 8015a02:	409a      	lsls	r2, r3
 8015a04:	4b2b      	ldr	r3, [pc, #172]	; (8015ab4 <xTaskResumeAll+0x120>)
 8015a06:	681b      	ldr	r3, [r3, #0]
 8015a08:	4313      	orrs	r3, r2
 8015a0a:	4a2a      	ldr	r2, [pc, #168]	; (8015ab4 <xTaskResumeAll+0x120>)
 8015a0c:	6013      	str	r3, [r2, #0]
 8015a0e:	68fb      	ldr	r3, [r7, #12]
 8015a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a12:	4613      	mov	r3, r2
 8015a14:	009b      	lsls	r3, r3, #2
 8015a16:	4413      	add	r3, r2
 8015a18:	009b      	lsls	r3, r3, #2
 8015a1a:	4a27      	ldr	r2, [pc, #156]	; (8015ab8 <xTaskResumeAll+0x124>)
 8015a1c:	441a      	add	r2, r3
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	3304      	adds	r3, #4
 8015a22:	4619      	mov	r1, r3
 8015a24:	4610      	mov	r0, r2
 8015a26:	f7fe ff0f 	bl	8014848 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015a2a:	68fb      	ldr	r3, [r7, #12]
 8015a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a2e:	4b23      	ldr	r3, [pc, #140]	; (8015abc <xTaskResumeAll+0x128>)
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a34:	429a      	cmp	r2, r3
 8015a36:	d302      	bcc.n	8015a3e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8015a38:	4b21      	ldr	r3, [pc, #132]	; (8015ac0 <xTaskResumeAll+0x12c>)
 8015a3a:	2201      	movs	r2, #1
 8015a3c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015a3e:	4b1c      	ldr	r3, [pc, #112]	; (8015ab0 <xTaskResumeAll+0x11c>)
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d1cc      	bne.n	80159e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d001      	beq.n	8015a50 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8015a4c:	f000 fb3e 	bl	80160cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8015a50:	4b1c      	ldr	r3, [pc, #112]	; (8015ac4 <xTaskResumeAll+0x130>)
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d010      	beq.n	8015a7e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8015a5c:	f000 f858 	bl	8015b10 <xTaskIncrementTick>
 8015a60:	4603      	mov	r3, r0
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d002      	beq.n	8015a6c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8015a66:	4b16      	ldr	r3, [pc, #88]	; (8015ac0 <xTaskResumeAll+0x12c>)
 8015a68:	2201      	movs	r2, #1
 8015a6a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	3b01      	subs	r3, #1
 8015a70:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d1f1      	bne.n	8015a5c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8015a78:	4b12      	ldr	r3, [pc, #72]	; (8015ac4 <xTaskResumeAll+0x130>)
 8015a7a:	2200      	movs	r2, #0
 8015a7c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015a7e:	4b10      	ldr	r3, [pc, #64]	; (8015ac0 <xTaskResumeAll+0x12c>)
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d009      	beq.n	8015a9a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015a86:	2301      	movs	r3, #1
 8015a88:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015a8a:	4b0f      	ldr	r3, [pc, #60]	; (8015ac8 <xTaskResumeAll+0x134>)
 8015a8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015a90:	601a      	str	r2, [r3, #0]
 8015a92:	f3bf 8f4f 	dsb	sy
 8015a96:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015a9a:	f000 feb3 	bl	8016804 <vPortExitCritical>

	return xAlreadyYielded;
 8015a9e:	68bb      	ldr	r3, [r7, #8]
}
 8015aa0:	4618      	mov	r0, r3
 8015aa2:	3710      	adds	r7, #16
 8015aa4:	46bd      	mov	sp, r7
 8015aa6:	bd80      	pop	{r7, pc}
 8015aa8:	200068b4 	.word	0x200068b4
 8015aac:	2000688c 	.word	0x2000688c
 8015ab0:	2000684c 	.word	0x2000684c
 8015ab4:	20006894 	.word	0x20006894
 8015ab8:	20006790 	.word	0x20006790
 8015abc:	2000678c 	.word	0x2000678c
 8015ac0:	200068a0 	.word	0x200068a0
 8015ac4:	2000689c 	.word	0x2000689c
 8015ac8:	e000ed04 	.word	0xe000ed04

08015acc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015acc:	b480      	push	{r7}
 8015ace:	b083      	sub	sp, #12
 8015ad0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8015ad2:	4b05      	ldr	r3, [pc, #20]	; (8015ae8 <xTaskGetTickCount+0x1c>)
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8015ad8:	687b      	ldr	r3, [r7, #4]
}
 8015ada:	4618      	mov	r0, r3
 8015adc:	370c      	adds	r7, #12
 8015ade:	46bd      	mov	sp, r7
 8015ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ae4:	4770      	bx	lr
 8015ae6:	bf00      	nop
 8015ae8:	20006890 	.word	0x20006890

08015aec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8015aec:	b580      	push	{r7, lr}
 8015aee:	b082      	sub	sp, #8
 8015af0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015af2:	f000 ff39 	bl	8016968 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8015af6:	2300      	movs	r3, #0
 8015af8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8015afa:	4b04      	ldr	r3, [pc, #16]	; (8015b0c <xTaskGetTickCountFromISR+0x20>)
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015b00:	683b      	ldr	r3, [r7, #0]
}
 8015b02:	4618      	mov	r0, r3
 8015b04:	3708      	adds	r7, #8
 8015b06:	46bd      	mov	sp, r7
 8015b08:	bd80      	pop	{r7, pc}
 8015b0a:	bf00      	nop
 8015b0c:	20006890 	.word	0x20006890

08015b10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015b10:	b580      	push	{r7, lr}
 8015b12:	b086      	sub	sp, #24
 8015b14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015b16:	2300      	movs	r3, #0
 8015b18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015b1a:	4b4e      	ldr	r3, [pc, #312]	; (8015c54 <xTaskIncrementTick+0x144>)
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	f040 808e 	bne.w	8015c40 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015b24:	4b4c      	ldr	r3, [pc, #304]	; (8015c58 <xTaskIncrementTick+0x148>)
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	3301      	adds	r3, #1
 8015b2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015b2c:	4a4a      	ldr	r2, [pc, #296]	; (8015c58 <xTaskIncrementTick+0x148>)
 8015b2e:	693b      	ldr	r3, [r7, #16]
 8015b30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015b32:	693b      	ldr	r3, [r7, #16]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d120      	bne.n	8015b7a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8015b38:	4b48      	ldr	r3, [pc, #288]	; (8015c5c <xTaskIncrementTick+0x14c>)
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d00a      	beq.n	8015b58 <xTaskIncrementTick+0x48>
	__asm volatile
 8015b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b46:	f383 8811 	msr	BASEPRI, r3
 8015b4a:	f3bf 8f6f 	isb	sy
 8015b4e:	f3bf 8f4f 	dsb	sy
 8015b52:	603b      	str	r3, [r7, #0]
}
 8015b54:	bf00      	nop
 8015b56:	e7fe      	b.n	8015b56 <xTaskIncrementTick+0x46>
 8015b58:	4b40      	ldr	r3, [pc, #256]	; (8015c5c <xTaskIncrementTick+0x14c>)
 8015b5a:	681b      	ldr	r3, [r3, #0]
 8015b5c:	60fb      	str	r3, [r7, #12]
 8015b5e:	4b40      	ldr	r3, [pc, #256]	; (8015c60 <xTaskIncrementTick+0x150>)
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	4a3e      	ldr	r2, [pc, #248]	; (8015c5c <xTaskIncrementTick+0x14c>)
 8015b64:	6013      	str	r3, [r2, #0]
 8015b66:	4a3e      	ldr	r2, [pc, #248]	; (8015c60 <xTaskIncrementTick+0x150>)
 8015b68:	68fb      	ldr	r3, [r7, #12]
 8015b6a:	6013      	str	r3, [r2, #0]
 8015b6c:	4b3d      	ldr	r3, [pc, #244]	; (8015c64 <xTaskIncrementTick+0x154>)
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	3301      	adds	r3, #1
 8015b72:	4a3c      	ldr	r2, [pc, #240]	; (8015c64 <xTaskIncrementTick+0x154>)
 8015b74:	6013      	str	r3, [r2, #0]
 8015b76:	f000 faa9 	bl	80160cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015b7a:	4b3b      	ldr	r3, [pc, #236]	; (8015c68 <xTaskIncrementTick+0x158>)
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	693a      	ldr	r2, [r7, #16]
 8015b80:	429a      	cmp	r2, r3
 8015b82:	d348      	bcc.n	8015c16 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015b84:	4b35      	ldr	r3, [pc, #212]	; (8015c5c <xTaskIncrementTick+0x14c>)
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d104      	bne.n	8015b98 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015b8e:	4b36      	ldr	r3, [pc, #216]	; (8015c68 <xTaskIncrementTick+0x158>)
 8015b90:	f04f 32ff 	mov.w	r2, #4294967295
 8015b94:	601a      	str	r2, [r3, #0]
					break;
 8015b96:	e03e      	b.n	8015c16 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015b98:	4b30      	ldr	r3, [pc, #192]	; (8015c5c <xTaskIncrementTick+0x14c>)
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	68db      	ldr	r3, [r3, #12]
 8015b9e:	68db      	ldr	r3, [r3, #12]
 8015ba0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015ba2:	68bb      	ldr	r3, [r7, #8]
 8015ba4:	685b      	ldr	r3, [r3, #4]
 8015ba6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015ba8:	693a      	ldr	r2, [r7, #16]
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	429a      	cmp	r2, r3
 8015bae:	d203      	bcs.n	8015bb8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015bb0:	4a2d      	ldr	r2, [pc, #180]	; (8015c68 <xTaskIncrementTick+0x158>)
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015bb6:	e02e      	b.n	8015c16 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015bb8:	68bb      	ldr	r3, [r7, #8]
 8015bba:	3304      	adds	r3, #4
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	f7fe fea0 	bl	8014902 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015bc2:	68bb      	ldr	r3, [r7, #8]
 8015bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d004      	beq.n	8015bd4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015bca:	68bb      	ldr	r3, [r7, #8]
 8015bcc:	3318      	adds	r3, #24
 8015bce:	4618      	mov	r0, r3
 8015bd0:	f7fe fe97 	bl	8014902 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015bd4:	68bb      	ldr	r3, [r7, #8]
 8015bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015bd8:	2201      	movs	r2, #1
 8015bda:	409a      	lsls	r2, r3
 8015bdc:	4b23      	ldr	r3, [pc, #140]	; (8015c6c <xTaskIncrementTick+0x15c>)
 8015bde:	681b      	ldr	r3, [r3, #0]
 8015be0:	4313      	orrs	r3, r2
 8015be2:	4a22      	ldr	r2, [pc, #136]	; (8015c6c <xTaskIncrementTick+0x15c>)
 8015be4:	6013      	str	r3, [r2, #0]
 8015be6:	68bb      	ldr	r3, [r7, #8]
 8015be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015bea:	4613      	mov	r3, r2
 8015bec:	009b      	lsls	r3, r3, #2
 8015bee:	4413      	add	r3, r2
 8015bf0:	009b      	lsls	r3, r3, #2
 8015bf2:	4a1f      	ldr	r2, [pc, #124]	; (8015c70 <xTaskIncrementTick+0x160>)
 8015bf4:	441a      	add	r2, r3
 8015bf6:	68bb      	ldr	r3, [r7, #8]
 8015bf8:	3304      	adds	r3, #4
 8015bfa:	4619      	mov	r1, r3
 8015bfc:	4610      	mov	r0, r2
 8015bfe:	f7fe fe23 	bl	8014848 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015c02:	68bb      	ldr	r3, [r7, #8]
 8015c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c06:	4b1b      	ldr	r3, [pc, #108]	; (8015c74 <xTaskIncrementTick+0x164>)
 8015c08:	681b      	ldr	r3, [r3, #0]
 8015c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c0c:	429a      	cmp	r2, r3
 8015c0e:	d3b9      	bcc.n	8015b84 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8015c10:	2301      	movs	r3, #1
 8015c12:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015c14:	e7b6      	b.n	8015b84 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015c16:	4b17      	ldr	r3, [pc, #92]	; (8015c74 <xTaskIncrementTick+0x164>)
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c1c:	4914      	ldr	r1, [pc, #80]	; (8015c70 <xTaskIncrementTick+0x160>)
 8015c1e:	4613      	mov	r3, r2
 8015c20:	009b      	lsls	r3, r3, #2
 8015c22:	4413      	add	r3, r2
 8015c24:	009b      	lsls	r3, r3, #2
 8015c26:	440b      	add	r3, r1
 8015c28:	681b      	ldr	r3, [r3, #0]
 8015c2a:	2b01      	cmp	r3, #1
 8015c2c:	d901      	bls.n	8015c32 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8015c2e:	2301      	movs	r3, #1
 8015c30:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8015c32:	4b11      	ldr	r3, [pc, #68]	; (8015c78 <xTaskIncrementTick+0x168>)
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d007      	beq.n	8015c4a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8015c3a:	2301      	movs	r3, #1
 8015c3c:	617b      	str	r3, [r7, #20]
 8015c3e:	e004      	b.n	8015c4a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8015c40:	4b0e      	ldr	r3, [pc, #56]	; (8015c7c <xTaskIncrementTick+0x16c>)
 8015c42:	681b      	ldr	r3, [r3, #0]
 8015c44:	3301      	adds	r3, #1
 8015c46:	4a0d      	ldr	r2, [pc, #52]	; (8015c7c <xTaskIncrementTick+0x16c>)
 8015c48:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8015c4a:	697b      	ldr	r3, [r7, #20]
}
 8015c4c:	4618      	mov	r0, r3
 8015c4e:	3718      	adds	r7, #24
 8015c50:	46bd      	mov	sp, r7
 8015c52:	bd80      	pop	{r7, pc}
 8015c54:	200068b4 	.word	0x200068b4
 8015c58:	20006890 	.word	0x20006890
 8015c5c:	20006844 	.word	0x20006844
 8015c60:	20006848 	.word	0x20006848
 8015c64:	200068a4 	.word	0x200068a4
 8015c68:	200068ac 	.word	0x200068ac
 8015c6c:	20006894 	.word	0x20006894
 8015c70:	20006790 	.word	0x20006790
 8015c74:	2000678c 	.word	0x2000678c
 8015c78:	200068a0 	.word	0x200068a0
 8015c7c:	2000689c 	.word	0x2000689c

08015c80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015c80:	b480      	push	{r7}
 8015c82:	b087      	sub	sp, #28
 8015c84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015c86:	4b29      	ldr	r3, [pc, #164]	; (8015d2c <vTaskSwitchContext+0xac>)
 8015c88:	681b      	ldr	r3, [r3, #0]
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d003      	beq.n	8015c96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015c8e:	4b28      	ldr	r3, [pc, #160]	; (8015d30 <vTaskSwitchContext+0xb0>)
 8015c90:	2201      	movs	r2, #1
 8015c92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015c94:	e044      	b.n	8015d20 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8015c96:	4b26      	ldr	r3, [pc, #152]	; (8015d30 <vTaskSwitchContext+0xb0>)
 8015c98:	2200      	movs	r2, #0
 8015c9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015c9c:	4b25      	ldr	r3, [pc, #148]	; (8015d34 <vTaskSwitchContext+0xb4>)
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	fab3 f383 	clz	r3, r3
 8015ca8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8015caa:	7afb      	ldrb	r3, [r7, #11]
 8015cac:	f1c3 031f 	rsb	r3, r3, #31
 8015cb0:	617b      	str	r3, [r7, #20]
 8015cb2:	4921      	ldr	r1, [pc, #132]	; (8015d38 <vTaskSwitchContext+0xb8>)
 8015cb4:	697a      	ldr	r2, [r7, #20]
 8015cb6:	4613      	mov	r3, r2
 8015cb8:	009b      	lsls	r3, r3, #2
 8015cba:	4413      	add	r3, r2
 8015cbc:	009b      	lsls	r3, r3, #2
 8015cbe:	440b      	add	r3, r1
 8015cc0:	681b      	ldr	r3, [r3, #0]
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d10a      	bne.n	8015cdc <vTaskSwitchContext+0x5c>
	__asm volatile
 8015cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cca:	f383 8811 	msr	BASEPRI, r3
 8015cce:	f3bf 8f6f 	isb	sy
 8015cd2:	f3bf 8f4f 	dsb	sy
 8015cd6:	607b      	str	r3, [r7, #4]
}
 8015cd8:	bf00      	nop
 8015cda:	e7fe      	b.n	8015cda <vTaskSwitchContext+0x5a>
 8015cdc:	697a      	ldr	r2, [r7, #20]
 8015cde:	4613      	mov	r3, r2
 8015ce0:	009b      	lsls	r3, r3, #2
 8015ce2:	4413      	add	r3, r2
 8015ce4:	009b      	lsls	r3, r3, #2
 8015ce6:	4a14      	ldr	r2, [pc, #80]	; (8015d38 <vTaskSwitchContext+0xb8>)
 8015ce8:	4413      	add	r3, r2
 8015cea:	613b      	str	r3, [r7, #16]
 8015cec:	693b      	ldr	r3, [r7, #16]
 8015cee:	685b      	ldr	r3, [r3, #4]
 8015cf0:	685a      	ldr	r2, [r3, #4]
 8015cf2:	693b      	ldr	r3, [r7, #16]
 8015cf4:	605a      	str	r2, [r3, #4]
 8015cf6:	693b      	ldr	r3, [r7, #16]
 8015cf8:	685a      	ldr	r2, [r3, #4]
 8015cfa:	693b      	ldr	r3, [r7, #16]
 8015cfc:	3308      	adds	r3, #8
 8015cfe:	429a      	cmp	r2, r3
 8015d00:	d104      	bne.n	8015d0c <vTaskSwitchContext+0x8c>
 8015d02:	693b      	ldr	r3, [r7, #16]
 8015d04:	685b      	ldr	r3, [r3, #4]
 8015d06:	685a      	ldr	r2, [r3, #4]
 8015d08:	693b      	ldr	r3, [r7, #16]
 8015d0a:	605a      	str	r2, [r3, #4]
 8015d0c:	693b      	ldr	r3, [r7, #16]
 8015d0e:	685b      	ldr	r3, [r3, #4]
 8015d10:	68db      	ldr	r3, [r3, #12]
 8015d12:	4a0a      	ldr	r2, [pc, #40]	; (8015d3c <vTaskSwitchContext+0xbc>)
 8015d14:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8015d16:	4b09      	ldr	r3, [pc, #36]	; (8015d3c <vTaskSwitchContext+0xbc>)
 8015d18:	681b      	ldr	r3, [r3, #0]
 8015d1a:	334c      	adds	r3, #76	; 0x4c
 8015d1c:	4a08      	ldr	r2, [pc, #32]	; (8015d40 <vTaskSwitchContext+0xc0>)
 8015d1e:	6013      	str	r3, [r2, #0]
}
 8015d20:	bf00      	nop
 8015d22:	371c      	adds	r7, #28
 8015d24:	46bd      	mov	sp, r7
 8015d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d2a:	4770      	bx	lr
 8015d2c:	200068b4 	.word	0x200068b4
 8015d30:	200068a0 	.word	0x200068a0
 8015d34:	20006894 	.word	0x20006894
 8015d38:	20006790 	.word	0x20006790
 8015d3c:	2000678c 	.word	0x2000678c
 8015d40:	200001c8 	.word	0x200001c8

08015d44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015d44:	b580      	push	{r7, lr}
 8015d46:	b084      	sub	sp, #16
 8015d48:	af00      	add	r7, sp, #0
 8015d4a:	6078      	str	r0, [r7, #4]
 8015d4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d10a      	bne.n	8015d6a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8015d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d58:	f383 8811 	msr	BASEPRI, r3
 8015d5c:	f3bf 8f6f 	isb	sy
 8015d60:	f3bf 8f4f 	dsb	sy
 8015d64:	60fb      	str	r3, [r7, #12]
}
 8015d66:	bf00      	nop
 8015d68:	e7fe      	b.n	8015d68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015d6a:	4b07      	ldr	r3, [pc, #28]	; (8015d88 <vTaskPlaceOnEventList+0x44>)
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	3318      	adds	r3, #24
 8015d70:	4619      	mov	r1, r3
 8015d72:	6878      	ldr	r0, [r7, #4]
 8015d74:	f7fe fd8c 	bl	8014890 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015d78:	2101      	movs	r1, #1
 8015d7a:	6838      	ldr	r0, [r7, #0]
 8015d7c:	f000 fb82 	bl	8016484 <prvAddCurrentTaskToDelayedList>
}
 8015d80:	bf00      	nop
 8015d82:	3710      	adds	r7, #16
 8015d84:	46bd      	mov	sp, r7
 8015d86:	bd80      	pop	{r7, pc}
 8015d88:	2000678c 	.word	0x2000678c

08015d8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015d8c:	b580      	push	{r7, lr}
 8015d8e:	b086      	sub	sp, #24
 8015d90:	af00      	add	r7, sp, #0
 8015d92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	68db      	ldr	r3, [r3, #12]
 8015d98:	68db      	ldr	r3, [r3, #12]
 8015d9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015d9c:	693b      	ldr	r3, [r7, #16]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d10a      	bne.n	8015db8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8015da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015da6:	f383 8811 	msr	BASEPRI, r3
 8015daa:	f3bf 8f6f 	isb	sy
 8015dae:	f3bf 8f4f 	dsb	sy
 8015db2:	60fb      	str	r3, [r7, #12]
}
 8015db4:	bf00      	nop
 8015db6:	e7fe      	b.n	8015db6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015db8:	693b      	ldr	r3, [r7, #16]
 8015dba:	3318      	adds	r3, #24
 8015dbc:	4618      	mov	r0, r3
 8015dbe:	f7fe fda0 	bl	8014902 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015dc2:	4b1d      	ldr	r3, [pc, #116]	; (8015e38 <xTaskRemoveFromEventList+0xac>)
 8015dc4:	681b      	ldr	r3, [r3, #0]
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d11c      	bne.n	8015e04 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015dca:	693b      	ldr	r3, [r7, #16]
 8015dcc:	3304      	adds	r3, #4
 8015dce:	4618      	mov	r0, r3
 8015dd0:	f7fe fd97 	bl	8014902 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015dd4:	693b      	ldr	r3, [r7, #16]
 8015dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015dd8:	2201      	movs	r2, #1
 8015dda:	409a      	lsls	r2, r3
 8015ddc:	4b17      	ldr	r3, [pc, #92]	; (8015e3c <xTaskRemoveFromEventList+0xb0>)
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	4313      	orrs	r3, r2
 8015de2:	4a16      	ldr	r2, [pc, #88]	; (8015e3c <xTaskRemoveFromEventList+0xb0>)
 8015de4:	6013      	str	r3, [r2, #0]
 8015de6:	693b      	ldr	r3, [r7, #16]
 8015de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015dea:	4613      	mov	r3, r2
 8015dec:	009b      	lsls	r3, r3, #2
 8015dee:	4413      	add	r3, r2
 8015df0:	009b      	lsls	r3, r3, #2
 8015df2:	4a13      	ldr	r2, [pc, #76]	; (8015e40 <xTaskRemoveFromEventList+0xb4>)
 8015df4:	441a      	add	r2, r3
 8015df6:	693b      	ldr	r3, [r7, #16]
 8015df8:	3304      	adds	r3, #4
 8015dfa:	4619      	mov	r1, r3
 8015dfc:	4610      	mov	r0, r2
 8015dfe:	f7fe fd23 	bl	8014848 <vListInsertEnd>
 8015e02:	e005      	b.n	8015e10 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015e04:	693b      	ldr	r3, [r7, #16]
 8015e06:	3318      	adds	r3, #24
 8015e08:	4619      	mov	r1, r3
 8015e0a:	480e      	ldr	r0, [pc, #56]	; (8015e44 <xTaskRemoveFromEventList+0xb8>)
 8015e0c:	f7fe fd1c 	bl	8014848 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015e10:	693b      	ldr	r3, [r7, #16]
 8015e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015e14:	4b0c      	ldr	r3, [pc, #48]	; (8015e48 <xTaskRemoveFromEventList+0xbc>)
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e1a:	429a      	cmp	r2, r3
 8015e1c:	d905      	bls.n	8015e2a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015e1e:	2301      	movs	r3, #1
 8015e20:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015e22:	4b0a      	ldr	r3, [pc, #40]	; (8015e4c <xTaskRemoveFromEventList+0xc0>)
 8015e24:	2201      	movs	r2, #1
 8015e26:	601a      	str	r2, [r3, #0]
 8015e28:	e001      	b.n	8015e2e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8015e2a:	2300      	movs	r3, #0
 8015e2c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8015e2e:	697b      	ldr	r3, [r7, #20]
}
 8015e30:	4618      	mov	r0, r3
 8015e32:	3718      	adds	r7, #24
 8015e34:	46bd      	mov	sp, r7
 8015e36:	bd80      	pop	{r7, pc}
 8015e38:	200068b4 	.word	0x200068b4
 8015e3c:	20006894 	.word	0x20006894
 8015e40:	20006790 	.word	0x20006790
 8015e44:	2000684c 	.word	0x2000684c
 8015e48:	2000678c 	.word	0x2000678c
 8015e4c:	200068a0 	.word	0x200068a0

08015e50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015e50:	b480      	push	{r7}
 8015e52:	b083      	sub	sp, #12
 8015e54:	af00      	add	r7, sp, #0
 8015e56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015e58:	4b06      	ldr	r3, [pc, #24]	; (8015e74 <vTaskInternalSetTimeOutState+0x24>)
 8015e5a:	681a      	ldr	r2, [r3, #0]
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015e60:	4b05      	ldr	r3, [pc, #20]	; (8015e78 <vTaskInternalSetTimeOutState+0x28>)
 8015e62:	681a      	ldr	r2, [r3, #0]
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	605a      	str	r2, [r3, #4]
}
 8015e68:	bf00      	nop
 8015e6a:	370c      	adds	r7, #12
 8015e6c:	46bd      	mov	sp, r7
 8015e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e72:	4770      	bx	lr
 8015e74:	200068a4 	.word	0x200068a4
 8015e78:	20006890 	.word	0x20006890

08015e7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015e7c:	b580      	push	{r7, lr}
 8015e7e:	b088      	sub	sp, #32
 8015e80:	af00      	add	r7, sp, #0
 8015e82:	6078      	str	r0, [r7, #4]
 8015e84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d10a      	bne.n	8015ea2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8015e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e90:	f383 8811 	msr	BASEPRI, r3
 8015e94:	f3bf 8f6f 	isb	sy
 8015e98:	f3bf 8f4f 	dsb	sy
 8015e9c:	613b      	str	r3, [r7, #16]
}
 8015e9e:	bf00      	nop
 8015ea0:	e7fe      	b.n	8015ea0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8015ea2:	683b      	ldr	r3, [r7, #0]
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d10a      	bne.n	8015ebe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8015ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015eac:	f383 8811 	msr	BASEPRI, r3
 8015eb0:	f3bf 8f6f 	isb	sy
 8015eb4:	f3bf 8f4f 	dsb	sy
 8015eb8:	60fb      	str	r3, [r7, #12]
}
 8015eba:	bf00      	nop
 8015ebc:	e7fe      	b.n	8015ebc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8015ebe:	f000 fc71 	bl	80167a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015ec2:	4b1d      	ldr	r3, [pc, #116]	; (8015f38 <xTaskCheckForTimeOut+0xbc>)
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	685b      	ldr	r3, [r3, #4]
 8015ecc:	69ba      	ldr	r2, [r7, #24]
 8015ece:	1ad3      	subs	r3, r2, r3
 8015ed0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015ed2:	683b      	ldr	r3, [r7, #0]
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015eda:	d102      	bne.n	8015ee2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015edc:	2300      	movs	r3, #0
 8015ede:	61fb      	str	r3, [r7, #28]
 8015ee0:	e023      	b.n	8015f2a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	681a      	ldr	r2, [r3, #0]
 8015ee6:	4b15      	ldr	r3, [pc, #84]	; (8015f3c <xTaskCheckForTimeOut+0xc0>)
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	429a      	cmp	r2, r3
 8015eec:	d007      	beq.n	8015efe <xTaskCheckForTimeOut+0x82>
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	685b      	ldr	r3, [r3, #4]
 8015ef2:	69ba      	ldr	r2, [r7, #24]
 8015ef4:	429a      	cmp	r2, r3
 8015ef6:	d302      	bcc.n	8015efe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015ef8:	2301      	movs	r3, #1
 8015efa:	61fb      	str	r3, [r7, #28]
 8015efc:	e015      	b.n	8015f2a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015efe:	683b      	ldr	r3, [r7, #0]
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	697a      	ldr	r2, [r7, #20]
 8015f04:	429a      	cmp	r2, r3
 8015f06:	d20b      	bcs.n	8015f20 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015f08:	683b      	ldr	r3, [r7, #0]
 8015f0a:	681a      	ldr	r2, [r3, #0]
 8015f0c:	697b      	ldr	r3, [r7, #20]
 8015f0e:	1ad2      	subs	r2, r2, r3
 8015f10:	683b      	ldr	r3, [r7, #0]
 8015f12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015f14:	6878      	ldr	r0, [r7, #4]
 8015f16:	f7ff ff9b 	bl	8015e50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015f1a:	2300      	movs	r3, #0
 8015f1c:	61fb      	str	r3, [r7, #28]
 8015f1e:	e004      	b.n	8015f2a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8015f20:	683b      	ldr	r3, [r7, #0]
 8015f22:	2200      	movs	r2, #0
 8015f24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015f26:	2301      	movs	r3, #1
 8015f28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015f2a:	f000 fc6b 	bl	8016804 <vPortExitCritical>

	return xReturn;
 8015f2e:	69fb      	ldr	r3, [r7, #28]
}
 8015f30:	4618      	mov	r0, r3
 8015f32:	3720      	adds	r7, #32
 8015f34:	46bd      	mov	sp, r7
 8015f36:	bd80      	pop	{r7, pc}
 8015f38:	20006890 	.word	0x20006890
 8015f3c:	200068a4 	.word	0x200068a4

08015f40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015f40:	b480      	push	{r7}
 8015f42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015f44:	4b03      	ldr	r3, [pc, #12]	; (8015f54 <vTaskMissedYield+0x14>)
 8015f46:	2201      	movs	r2, #1
 8015f48:	601a      	str	r2, [r3, #0]
}
 8015f4a:	bf00      	nop
 8015f4c:	46bd      	mov	sp, r7
 8015f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f52:	4770      	bx	lr
 8015f54:	200068a0 	.word	0x200068a0

08015f58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015f58:	b580      	push	{r7, lr}
 8015f5a:	b082      	sub	sp, #8
 8015f5c:	af00      	add	r7, sp, #0
 8015f5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015f60:	f000 f852 	bl	8016008 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015f64:	4b06      	ldr	r3, [pc, #24]	; (8015f80 <prvIdleTask+0x28>)
 8015f66:	681b      	ldr	r3, [r3, #0]
 8015f68:	2b01      	cmp	r3, #1
 8015f6a:	d9f9      	bls.n	8015f60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8015f6c:	4b05      	ldr	r3, [pc, #20]	; (8015f84 <prvIdleTask+0x2c>)
 8015f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015f72:	601a      	str	r2, [r3, #0]
 8015f74:	f3bf 8f4f 	dsb	sy
 8015f78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8015f7c:	e7f0      	b.n	8015f60 <prvIdleTask+0x8>
 8015f7e:	bf00      	nop
 8015f80:	20006790 	.word	0x20006790
 8015f84:	e000ed04 	.word	0xe000ed04

08015f88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015f88:	b580      	push	{r7, lr}
 8015f8a:	b082      	sub	sp, #8
 8015f8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015f8e:	2300      	movs	r3, #0
 8015f90:	607b      	str	r3, [r7, #4]
 8015f92:	e00c      	b.n	8015fae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015f94:	687a      	ldr	r2, [r7, #4]
 8015f96:	4613      	mov	r3, r2
 8015f98:	009b      	lsls	r3, r3, #2
 8015f9a:	4413      	add	r3, r2
 8015f9c:	009b      	lsls	r3, r3, #2
 8015f9e:	4a12      	ldr	r2, [pc, #72]	; (8015fe8 <prvInitialiseTaskLists+0x60>)
 8015fa0:	4413      	add	r3, r2
 8015fa2:	4618      	mov	r0, r3
 8015fa4:	f7fe fc23 	bl	80147ee <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	3301      	adds	r3, #1
 8015fac:	607b      	str	r3, [r7, #4]
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	2b06      	cmp	r3, #6
 8015fb2:	d9ef      	bls.n	8015f94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015fb4:	480d      	ldr	r0, [pc, #52]	; (8015fec <prvInitialiseTaskLists+0x64>)
 8015fb6:	f7fe fc1a 	bl	80147ee <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015fba:	480d      	ldr	r0, [pc, #52]	; (8015ff0 <prvInitialiseTaskLists+0x68>)
 8015fbc:	f7fe fc17 	bl	80147ee <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015fc0:	480c      	ldr	r0, [pc, #48]	; (8015ff4 <prvInitialiseTaskLists+0x6c>)
 8015fc2:	f7fe fc14 	bl	80147ee <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015fc6:	480c      	ldr	r0, [pc, #48]	; (8015ff8 <prvInitialiseTaskLists+0x70>)
 8015fc8:	f7fe fc11 	bl	80147ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015fcc:	480b      	ldr	r0, [pc, #44]	; (8015ffc <prvInitialiseTaskLists+0x74>)
 8015fce:	f7fe fc0e 	bl	80147ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015fd2:	4b0b      	ldr	r3, [pc, #44]	; (8016000 <prvInitialiseTaskLists+0x78>)
 8015fd4:	4a05      	ldr	r2, [pc, #20]	; (8015fec <prvInitialiseTaskLists+0x64>)
 8015fd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015fd8:	4b0a      	ldr	r3, [pc, #40]	; (8016004 <prvInitialiseTaskLists+0x7c>)
 8015fda:	4a05      	ldr	r2, [pc, #20]	; (8015ff0 <prvInitialiseTaskLists+0x68>)
 8015fdc:	601a      	str	r2, [r3, #0]
}
 8015fde:	bf00      	nop
 8015fe0:	3708      	adds	r7, #8
 8015fe2:	46bd      	mov	sp, r7
 8015fe4:	bd80      	pop	{r7, pc}
 8015fe6:	bf00      	nop
 8015fe8:	20006790 	.word	0x20006790
 8015fec:	2000681c 	.word	0x2000681c
 8015ff0:	20006830 	.word	0x20006830
 8015ff4:	2000684c 	.word	0x2000684c
 8015ff8:	20006860 	.word	0x20006860
 8015ffc:	20006878 	.word	0x20006878
 8016000:	20006844 	.word	0x20006844
 8016004:	20006848 	.word	0x20006848

08016008 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016008:	b580      	push	{r7, lr}
 801600a:	b082      	sub	sp, #8
 801600c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801600e:	e019      	b.n	8016044 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016010:	f000 fbc8 	bl	80167a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016014:	4b10      	ldr	r3, [pc, #64]	; (8016058 <prvCheckTasksWaitingTermination+0x50>)
 8016016:	68db      	ldr	r3, [r3, #12]
 8016018:	68db      	ldr	r3, [r3, #12]
 801601a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	3304      	adds	r3, #4
 8016020:	4618      	mov	r0, r3
 8016022:	f7fe fc6e 	bl	8014902 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016026:	4b0d      	ldr	r3, [pc, #52]	; (801605c <prvCheckTasksWaitingTermination+0x54>)
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	3b01      	subs	r3, #1
 801602c:	4a0b      	ldr	r2, [pc, #44]	; (801605c <prvCheckTasksWaitingTermination+0x54>)
 801602e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016030:	4b0b      	ldr	r3, [pc, #44]	; (8016060 <prvCheckTasksWaitingTermination+0x58>)
 8016032:	681b      	ldr	r3, [r3, #0]
 8016034:	3b01      	subs	r3, #1
 8016036:	4a0a      	ldr	r2, [pc, #40]	; (8016060 <prvCheckTasksWaitingTermination+0x58>)
 8016038:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801603a:	f000 fbe3 	bl	8016804 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801603e:	6878      	ldr	r0, [r7, #4]
 8016040:	f000 f810 	bl	8016064 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016044:	4b06      	ldr	r3, [pc, #24]	; (8016060 <prvCheckTasksWaitingTermination+0x58>)
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	2b00      	cmp	r3, #0
 801604a:	d1e1      	bne.n	8016010 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801604c:	bf00      	nop
 801604e:	bf00      	nop
 8016050:	3708      	adds	r7, #8
 8016052:	46bd      	mov	sp, r7
 8016054:	bd80      	pop	{r7, pc}
 8016056:	bf00      	nop
 8016058:	20006860 	.word	0x20006860
 801605c:	2000688c 	.word	0x2000688c
 8016060:	20006874 	.word	0x20006874

08016064 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016064:	b580      	push	{r7, lr}
 8016066:	b084      	sub	sp, #16
 8016068:	af00      	add	r7, sp, #0
 801606a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	334c      	adds	r3, #76	; 0x4c
 8016070:	4618      	mov	r0, r3
 8016072:	f002 fad5 	bl	8018620 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 801607c:	2b00      	cmp	r3, #0
 801607e:	d108      	bne.n	8016092 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016084:	4618      	mov	r0, r3
 8016086:	f000 fd7b 	bl	8016b80 <vPortFree>
				vPortFree( pxTCB );
 801608a:	6878      	ldr	r0, [r7, #4]
 801608c:	f000 fd78 	bl	8016b80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016090:	e018      	b.n	80160c4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8016098:	2b01      	cmp	r3, #1
 801609a:	d103      	bne.n	80160a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801609c:	6878      	ldr	r0, [r7, #4]
 801609e:	f000 fd6f 	bl	8016b80 <vPortFree>
	}
 80160a2:	e00f      	b.n	80160c4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80160aa:	2b02      	cmp	r3, #2
 80160ac:	d00a      	beq.n	80160c4 <prvDeleteTCB+0x60>
	__asm volatile
 80160ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160b2:	f383 8811 	msr	BASEPRI, r3
 80160b6:	f3bf 8f6f 	isb	sy
 80160ba:	f3bf 8f4f 	dsb	sy
 80160be:	60fb      	str	r3, [r7, #12]
}
 80160c0:	bf00      	nop
 80160c2:	e7fe      	b.n	80160c2 <prvDeleteTCB+0x5e>
	}
 80160c4:	bf00      	nop
 80160c6:	3710      	adds	r7, #16
 80160c8:	46bd      	mov	sp, r7
 80160ca:	bd80      	pop	{r7, pc}

080160cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80160cc:	b480      	push	{r7}
 80160ce:	b083      	sub	sp, #12
 80160d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80160d2:	4b0c      	ldr	r3, [pc, #48]	; (8016104 <prvResetNextTaskUnblockTime+0x38>)
 80160d4:	681b      	ldr	r3, [r3, #0]
 80160d6:	681b      	ldr	r3, [r3, #0]
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d104      	bne.n	80160e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80160dc:	4b0a      	ldr	r3, [pc, #40]	; (8016108 <prvResetNextTaskUnblockTime+0x3c>)
 80160de:	f04f 32ff 	mov.w	r2, #4294967295
 80160e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80160e4:	e008      	b.n	80160f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80160e6:	4b07      	ldr	r3, [pc, #28]	; (8016104 <prvResetNextTaskUnblockTime+0x38>)
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	68db      	ldr	r3, [r3, #12]
 80160ec:	68db      	ldr	r3, [r3, #12]
 80160ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	685b      	ldr	r3, [r3, #4]
 80160f4:	4a04      	ldr	r2, [pc, #16]	; (8016108 <prvResetNextTaskUnblockTime+0x3c>)
 80160f6:	6013      	str	r3, [r2, #0]
}
 80160f8:	bf00      	nop
 80160fa:	370c      	adds	r7, #12
 80160fc:	46bd      	mov	sp, r7
 80160fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016102:	4770      	bx	lr
 8016104:	20006844 	.word	0x20006844
 8016108:	200068ac 	.word	0x200068ac

0801610c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801610c:	b480      	push	{r7}
 801610e:	b083      	sub	sp, #12
 8016110:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016112:	4b0b      	ldr	r3, [pc, #44]	; (8016140 <xTaskGetSchedulerState+0x34>)
 8016114:	681b      	ldr	r3, [r3, #0]
 8016116:	2b00      	cmp	r3, #0
 8016118:	d102      	bne.n	8016120 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801611a:	2301      	movs	r3, #1
 801611c:	607b      	str	r3, [r7, #4]
 801611e:	e008      	b.n	8016132 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016120:	4b08      	ldr	r3, [pc, #32]	; (8016144 <xTaskGetSchedulerState+0x38>)
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	2b00      	cmp	r3, #0
 8016126:	d102      	bne.n	801612e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016128:	2302      	movs	r3, #2
 801612a:	607b      	str	r3, [r7, #4]
 801612c:	e001      	b.n	8016132 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801612e:	2300      	movs	r3, #0
 8016130:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016132:	687b      	ldr	r3, [r7, #4]
	}
 8016134:	4618      	mov	r0, r3
 8016136:	370c      	adds	r7, #12
 8016138:	46bd      	mov	sp, r7
 801613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801613e:	4770      	bx	lr
 8016140:	20006898 	.word	0x20006898
 8016144:	200068b4 	.word	0x200068b4

08016148 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8016148:	b580      	push	{r7, lr}
 801614a:	b084      	sub	sp, #16
 801614c:	af00      	add	r7, sp, #0
 801614e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8016154:	2300      	movs	r3, #0
 8016156:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	2b00      	cmp	r3, #0
 801615c:	d05e      	beq.n	801621c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801615e:	68bb      	ldr	r3, [r7, #8]
 8016160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016162:	4b31      	ldr	r3, [pc, #196]	; (8016228 <xTaskPriorityInherit+0xe0>)
 8016164:	681b      	ldr	r3, [r3, #0]
 8016166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016168:	429a      	cmp	r2, r3
 801616a:	d24e      	bcs.n	801620a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801616c:	68bb      	ldr	r3, [r7, #8]
 801616e:	699b      	ldr	r3, [r3, #24]
 8016170:	2b00      	cmp	r3, #0
 8016172:	db06      	blt.n	8016182 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016174:	4b2c      	ldr	r3, [pc, #176]	; (8016228 <xTaskPriorityInherit+0xe0>)
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801617a:	f1c3 0207 	rsb	r2, r3, #7
 801617e:	68bb      	ldr	r3, [r7, #8]
 8016180:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8016182:	68bb      	ldr	r3, [r7, #8]
 8016184:	6959      	ldr	r1, [r3, #20]
 8016186:	68bb      	ldr	r3, [r7, #8]
 8016188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801618a:	4613      	mov	r3, r2
 801618c:	009b      	lsls	r3, r3, #2
 801618e:	4413      	add	r3, r2
 8016190:	009b      	lsls	r3, r3, #2
 8016192:	4a26      	ldr	r2, [pc, #152]	; (801622c <xTaskPriorityInherit+0xe4>)
 8016194:	4413      	add	r3, r2
 8016196:	4299      	cmp	r1, r3
 8016198:	d12f      	bne.n	80161fa <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801619a:	68bb      	ldr	r3, [r7, #8]
 801619c:	3304      	adds	r3, #4
 801619e:	4618      	mov	r0, r3
 80161a0:	f7fe fbaf 	bl	8014902 <uxListRemove>
 80161a4:	4603      	mov	r3, r0
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d10a      	bne.n	80161c0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80161aa:	68bb      	ldr	r3, [r7, #8]
 80161ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161ae:	2201      	movs	r2, #1
 80161b0:	fa02 f303 	lsl.w	r3, r2, r3
 80161b4:	43da      	mvns	r2, r3
 80161b6:	4b1e      	ldr	r3, [pc, #120]	; (8016230 <xTaskPriorityInherit+0xe8>)
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	4013      	ands	r3, r2
 80161bc:	4a1c      	ldr	r2, [pc, #112]	; (8016230 <xTaskPriorityInherit+0xe8>)
 80161be:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80161c0:	4b19      	ldr	r3, [pc, #100]	; (8016228 <xTaskPriorityInherit+0xe0>)
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80161c6:	68bb      	ldr	r3, [r7, #8]
 80161c8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80161ca:	68bb      	ldr	r3, [r7, #8]
 80161cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161ce:	2201      	movs	r2, #1
 80161d0:	409a      	lsls	r2, r3
 80161d2:	4b17      	ldr	r3, [pc, #92]	; (8016230 <xTaskPriorityInherit+0xe8>)
 80161d4:	681b      	ldr	r3, [r3, #0]
 80161d6:	4313      	orrs	r3, r2
 80161d8:	4a15      	ldr	r2, [pc, #84]	; (8016230 <xTaskPriorityInherit+0xe8>)
 80161da:	6013      	str	r3, [r2, #0]
 80161dc:	68bb      	ldr	r3, [r7, #8]
 80161de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80161e0:	4613      	mov	r3, r2
 80161e2:	009b      	lsls	r3, r3, #2
 80161e4:	4413      	add	r3, r2
 80161e6:	009b      	lsls	r3, r3, #2
 80161e8:	4a10      	ldr	r2, [pc, #64]	; (801622c <xTaskPriorityInherit+0xe4>)
 80161ea:	441a      	add	r2, r3
 80161ec:	68bb      	ldr	r3, [r7, #8]
 80161ee:	3304      	adds	r3, #4
 80161f0:	4619      	mov	r1, r3
 80161f2:	4610      	mov	r0, r2
 80161f4:	f7fe fb28 	bl	8014848 <vListInsertEnd>
 80161f8:	e004      	b.n	8016204 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80161fa:	4b0b      	ldr	r3, [pc, #44]	; (8016228 <xTaskPriorityInherit+0xe0>)
 80161fc:	681b      	ldr	r3, [r3, #0]
 80161fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016200:	68bb      	ldr	r3, [r7, #8]
 8016202:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8016204:	2301      	movs	r3, #1
 8016206:	60fb      	str	r3, [r7, #12]
 8016208:	e008      	b.n	801621c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801620a:	68bb      	ldr	r3, [r7, #8]
 801620c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801620e:	4b06      	ldr	r3, [pc, #24]	; (8016228 <xTaskPriorityInherit+0xe0>)
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016214:	429a      	cmp	r2, r3
 8016216:	d201      	bcs.n	801621c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8016218:	2301      	movs	r3, #1
 801621a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801621c:	68fb      	ldr	r3, [r7, #12]
	}
 801621e:	4618      	mov	r0, r3
 8016220:	3710      	adds	r7, #16
 8016222:	46bd      	mov	sp, r7
 8016224:	bd80      	pop	{r7, pc}
 8016226:	bf00      	nop
 8016228:	2000678c 	.word	0x2000678c
 801622c:	20006790 	.word	0x20006790
 8016230:	20006894 	.word	0x20006894

08016234 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016234:	b580      	push	{r7, lr}
 8016236:	b086      	sub	sp, #24
 8016238:	af00      	add	r7, sp, #0
 801623a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016240:	2300      	movs	r3, #0
 8016242:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	2b00      	cmp	r3, #0
 8016248:	d06e      	beq.n	8016328 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801624a:	4b3a      	ldr	r3, [pc, #232]	; (8016334 <xTaskPriorityDisinherit+0x100>)
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	693a      	ldr	r2, [r7, #16]
 8016250:	429a      	cmp	r2, r3
 8016252:	d00a      	beq.n	801626a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8016254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016258:	f383 8811 	msr	BASEPRI, r3
 801625c:	f3bf 8f6f 	isb	sy
 8016260:	f3bf 8f4f 	dsb	sy
 8016264:	60fb      	str	r3, [r7, #12]
}
 8016266:	bf00      	nop
 8016268:	e7fe      	b.n	8016268 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801626a:	693b      	ldr	r3, [r7, #16]
 801626c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801626e:	2b00      	cmp	r3, #0
 8016270:	d10a      	bne.n	8016288 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8016272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016276:	f383 8811 	msr	BASEPRI, r3
 801627a:	f3bf 8f6f 	isb	sy
 801627e:	f3bf 8f4f 	dsb	sy
 8016282:	60bb      	str	r3, [r7, #8]
}
 8016284:	bf00      	nop
 8016286:	e7fe      	b.n	8016286 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8016288:	693b      	ldr	r3, [r7, #16]
 801628a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801628c:	1e5a      	subs	r2, r3, #1
 801628e:	693b      	ldr	r3, [r7, #16]
 8016290:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016292:	693b      	ldr	r3, [r7, #16]
 8016294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016296:	693b      	ldr	r3, [r7, #16]
 8016298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801629a:	429a      	cmp	r2, r3
 801629c:	d044      	beq.n	8016328 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801629e:	693b      	ldr	r3, [r7, #16]
 80162a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d140      	bne.n	8016328 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80162a6:	693b      	ldr	r3, [r7, #16]
 80162a8:	3304      	adds	r3, #4
 80162aa:	4618      	mov	r0, r3
 80162ac:	f7fe fb29 	bl	8014902 <uxListRemove>
 80162b0:	4603      	mov	r3, r0
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d115      	bne.n	80162e2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80162b6:	693b      	ldr	r3, [r7, #16]
 80162b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80162ba:	491f      	ldr	r1, [pc, #124]	; (8016338 <xTaskPriorityDisinherit+0x104>)
 80162bc:	4613      	mov	r3, r2
 80162be:	009b      	lsls	r3, r3, #2
 80162c0:	4413      	add	r3, r2
 80162c2:	009b      	lsls	r3, r3, #2
 80162c4:	440b      	add	r3, r1
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d10a      	bne.n	80162e2 <xTaskPriorityDisinherit+0xae>
 80162cc:	693b      	ldr	r3, [r7, #16]
 80162ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162d0:	2201      	movs	r2, #1
 80162d2:	fa02 f303 	lsl.w	r3, r2, r3
 80162d6:	43da      	mvns	r2, r3
 80162d8:	4b18      	ldr	r3, [pc, #96]	; (801633c <xTaskPriorityDisinherit+0x108>)
 80162da:	681b      	ldr	r3, [r3, #0]
 80162dc:	4013      	ands	r3, r2
 80162de:	4a17      	ldr	r2, [pc, #92]	; (801633c <xTaskPriorityDisinherit+0x108>)
 80162e0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80162e2:	693b      	ldr	r3, [r7, #16]
 80162e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80162e6:	693b      	ldr	r3, [r7, #16]
 80162e8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80162ea:	693b      	ldr	r3, [r7, #16]
 80162ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162ee:	f1c3 0207 	rsb	r2, r3, #7
 80162f2:	693b      	ldr	r3, [r7, #16]
 80162f4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80162f6:	693b      	ldr	r3, [r7, #16]
 80162f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162fa:	2201      	movs	r2, #1
 80162fc:	409a      	lsls	r2, r3
 80162fe:	4b0f      	ldr	r3, [pc, #60]	; (801633c <xTaskPriorityDisinherit+0x108>)
 8016300:	681b      	ldr	r3, [r3, #0]
 8016302:	4313      	orrs	r3, r2
 8016304:	4a0d      	ldr	r2, [pc, #52]	; (801633c <xTaskPriorityDisinherit+0x108>)
 8016306:	6013      	str	r3, [r2, #0]
 8016308:	693b      	ldr	r3, [r7, #16]
 801630a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801630c:	4613      	mov	r3, r2
 801630e:	009b      	lsls	r3, r3, #2
 8016310:	4413      	add	r3, r2
 8016312:	009b      	lsls	r3, r3, #2
 8016314:	4a08      	ldr	r2, [pc, #32]	; (8016338 <xTaskPriorityDisinherit+0x104>)
 8016316:	441a      	add	r2, r3
 8016318:	693b      	ldr	r3, [r7, #16]
 801631a:	3304      	adds	r3, #4
 801631c:	4619      	mov	r1, r3
 801631e:	4610      	mov	r0, r2
 8016320:	f7fe fa92 	bl	8014848 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016324:	2301      	movs	r3, #1
 8016326:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016328:	697b      	ldr	r3, [r7, #20]
	}
 801632a:	4618      	mov	r0, r3
 801632c:	3718      	adds	r7, #24
 801632e:	46bd      	mov	sp, r7
 8016330:	bd80      	pop	{r7, pc}
 8016332:	bf00      	nop
 8016334:	2000678c 	.word	0x2000678c
 8016338:	20006790 	.word	0x20006790
 801633c:	20006894 	.word	0x20006894

08016340 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8016340:	b580      	push	{r7, lr}
 8016342:	b088      	sub	sp, #32
 8016344:	af00      	add	r7, sp, #0
 8016346:	6078      	str	r0, [r7, #4]
 8016348:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801634e:	2301      	movs	r3, #1
 8016350:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	2b00      	cmp	r3, #0
 8016356:	d077      	beq.n	8016448 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8016358:	69bb      	ldr	r3, [r7, #24]
 801635a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801635c:	2b00      	cmp	r3, #0
 801635e:	d10a      	bne.n	8016376 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8016360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016364:	f383 8811 	msr	BASEPRI, r3
 8016368:	f3bf 8f6f 	isb	sy
 801636c:	f3bf 8f4f 	dsb	sy
 8016370:	60fb      	str	r3, [r7, #12]
}
 8016372:	bf00      	nop
 8016374:	e7fe      	b.n	8016374 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8016376:	69bb      	ldr	r3, [r7, #24]
 8016378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801637a:	683a      	ldr	r2, [r7, #0]
 801637c:	429a      	cmp	r2, r3
 801637e:	d902      	bls.n	8016386 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8016380:	683b      	ldr	r3, [r7, #0]
 8016382:	61fb      	str	r3, [r7, #28]
 8016384:	e002      	b.n	801638c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8016386:	69bb      	ldr	r3, [r7, #24]
 8016388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801638a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801638c:	69bb      	ldr	r3, [r7, #24]
 801638e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016390:	69fa      	ldr	r2, [r7, #28]
 8016392:	429a      	cmp	r2, r3
 8016394:	d058      	beq.n	8016448 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8016396:	69bb      	ldr	r3, [r7, #24]
 8016398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801639a:	697a      	ldr	r2, [r7, #20]
 801639c:	429a      	cmp	r2, r3
 801639e:	d153      	bne.n	8016448 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80163a0:	4b2b      	ldr	r3, [pc, #172]	; (8016450 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	69ba      	ldr	r2, [r7, #24]
 80163a6:	429a      	cmp	r2, r3
 80163a8:	d10a      	bne.n	80163c0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80163aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163ae:	f383 8811 	msr	BASEPRI, r3
 80163b2:	f3bf 8f6f 	isb	sy
 80163b6:	f3bf 8f4f 	dsb	sy
 80163ba:	60bb      	str	r3, [r7, #8]
}
 80163bc:	bf00      	nop
 80163be:	e7fe      	b.n	80163be <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80163c0:	69bb      	ldr	r3, [r7, #24]
 80163c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163c4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80163c6:	69bb      	ldr	r3, [r7, #24]
 80163c8:	69fa      	ldr	r2, [r7, #28]
 80163ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80163cc:	69bb      	ldr	r3, [r7, #24]
 80163ce:	699b      	ldr	r3, [r3, #24]
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	db04      	blt.n	80163de <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80163d4:	69fb      	ldr	r3, [r7, #28]
 80163d6:	f1c3 0207 	rsb	r2, r3, #7
 80163da:	69bb      	ldr	r3, [r7, #24]
 80163dc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80163de:	69bb      	ldr	r3, [r7, #24]
 80163e0:	6959      	ldr	r1, [r3, #20]
 80163e2:	693a      	ldr	r2, [r7, #16]
 80163e4:	4613      	mov	r3, r2
 80163e6:	009b      	lsls	r3, r3, #2
 80163e8:	4413      	add	r3, r2
 80163ea:	009b      	lsls	r3, r3, #2
 80163ec:	4a19      	ldr	r2, [pc, #100]	; (8016454 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80163ee:	4413      	add	r3, r2
 80163f0:	4299      	cmp	r1, r3
 80163f2:	d129      	bne.n	8016448 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80163f4:	69bb      	ldr	r3, [r7, #24]
 80163f6:	3304      	adds	r3, #4
 80163f8:	4618      	mov	r0, r3
 80163fa:	f7fe fa82 	bl	8014902 <uxListRemove>
 80163fe:	4603      	mov	r3, r0
 8016400:	2b00      	cmp	r3, #0
 8016402:	d10a      	bne.n	801641a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8016404:	69bb      	ldr	r3, [r7, #24]
 8016406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016408:	2201      	movs	r2, #1
 801640a:	fa02 f303 	lsl.w	r3, r2, r3
 801640e:	43da      	mvns	r2, r3
 8016410:	4b11      	ldr	r3, [pc, #68]	; (8016458 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	4013      	ands	r3, r2
 8016416:	4a10      	ldr	r2, [pc, #64]	; (8016458 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8016418:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801641a:	69bb      	ldr	r3, [r7, #24]
 801641c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801641e:	2201      	movs	r2, #1
 8016420:	409a      	lsls	r2, r3
 8016422:	4b0d      	ldr	r3, [pc, #52]	; (8016458 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8016424:	681b      	ldr	r3, [r3, #0]
 8016426:	4313      	orrs	r3, r2
 8016428:	4a0b      	ldr	r2, [pc, #44]	; (8016458 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801642a:	6013      	str	r3, [r2, #0]
 801642c:	69bb      	ldr	r3, [r7, #24]
 801642e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016430:	4613      	mov	r3, r2
 8016432:	009b      	lsls	r3, r3, #2
 8016434:	4413      	add	r3, r2
 8016436:	009b      	lsls	r3, r3, #2
 8016438:	4a06      	ldr	r2, [pc, #24]	; (8016454 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801643a:	441a      	add	r2, r3
 801643c:	69bb      	ldr	r3, [r7, #24]
 801643e:	3304      	adds	r3, #4
 8016440:	4619      	mov	r1, r3
 8016442:	4610      	mov	r0, r2
 8016444:	f7fe fa00 	bl	8014848 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016448:	bf00      	nop
 801644a:	3720      	adds	r7, #32
 801644c:	46bd      	mov	sp, r7
 801644e:	bd80      	pop	{r7, pc}
 8016450:	2000678c 	.word	0x2000678c
 8016454:	20006790 	.word	0x20006790
 8016458:	20006894 	.word	0x20006894

0801645c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801645c:	b480      	push	{r7}
 801645e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8016460:	4b07      	ldr	r3, [pc, #28]	; (8016480 <pvTaskIncrementMutexHeldCount+0x24>)
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	2b00      	cmp	r3, #0
 8016466:	d004      	beq.n	8016472 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8016468:	4b05      	ldr	r3, [pc, #20]	; (8016480 <pvTaskIncrementMutexHeldCount+0x24>)
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801646e:	3201      	adds	r2, #1
 8016470:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8016472:	4b03      	ldr	r3, [pc, #12]	; (8016480 <pvTaskIncrementMutexHeldCount+0x24>)
 8016474:	681b      	ldr	r3, [r3, #0]
	}
 8016476:	4618      	mov	r0, r3
 8016478:	46bd      	mov	sp, r7
 801647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801647e:	4770      	bx	lr
 8016480:	2000678c 	.word	0x2000678c

08016484 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016484:	b580      	push	{r7, lr}
 8016486:	b084      	sub	sp, #16
 8016488:	af00      	add	r7, sp, #0
 801648a:	6078      	str	r0, [r7, #4]
 801648c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801648e:	4b29      	ldr	r3, [pc, #164]	; (8016534 <prvAddCurrentTaskToDelayedList+0xb0>)
 8016490:	681b      	ldr	r3, [r3, #0]
 8016492:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016494:	4b28      	ldr	r3, [pc, #160]	; (8016538 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	3304      	adds	r3, #4
 801649a:	4618      	mov	r0, r3
 801649c:	f7fe fa31 	bl	8014902 <uxListRemove>
 80164a0:	4603      	mov	r3, r0
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d10b      	bne.n	80164be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80164a6:	4b24      	ldr	r3, [pc, #144]	; (8016538 <prvAddCurrentTaskToDelayedList+0xb4>)
 80164a8:	681b      	ldr	r3, [r3, #0]
 80164aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164ac:	2201      	movs	r2, #1
 80164ae:	fa02 f303 	lsl.w	r3, r2, r3
 80164b2:	43da      	mvns	r2, r3
 80164b4:	4b21      	ldr	r3, [pc, #132]	; (801653c <prvAddCurrentTaskToDelayedList+0xb8>)
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	4013      	ands	r3, r2
 80164ba:	4a20      	ldr	r2, [pc, #128]	; (801653c <prvAddCurrentTaskToDelayedList+0xb8>)
 80164bc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80164c4:	d10a      	bne.n	80164dc <prvAddCurrentTaskToDelayedList+0x58>
 80164c6:	683b      	ldr	r3, [r7, #0]
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d007      	beq.n	80164dc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80164cc:	4b1a      	ldr	r3, [pc, #104]	; (8016538 <prvAddCurrentTaskToDelayedList+0xb4>)
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	3304      	adds	r3, #4
 80164d2:	4619      	mov	r1, r3
 80164d4:	481a      	ldr	r0, [pc, #104]	; (8016540 <prvAddCurrentTaskToDelayedList+0xbc>)
 80164d6:	f7fe f9b7 	bl	8014848 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80164da:	e026      	b.n	801652a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80164dc:	68fa      	ldr	r2, [r7, #12]
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	4413      	add	r3, r2
 80164e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80164e4:	4b14      	ldr	r3, [pc, #80]	; (8016538 <prvAddCurrentTaskToDelayedList+0xb4>)
 80164e6:	681b      	ldr	r3, [r3, #0]
 80164e8:	68ba      	ldr	r2, [r7, #8]
 80164ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80164ec:	68ba      	ldr	r2, [r7, #8]
 80164ee:	68fb      	ldr	r3, [r7, #12]
 80164f0:	429a      	cmp	r2, r3
 80164f2:	d209      	bcs.n	8016508 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80164f4:	4b13      	ldr	r3, [pc, #76]	; (8016544 <prvAddCurrentTaskToDelayedList+0xc0>)
 80164f6:	681a      	ldr	r2, [r3, #0]
 80164f8:	4b0f      	ldr	r3, [pc, #60]	; (8016538 <prvAddCurrentTaskToDelayedList+0xb4>)
 80164fa:	681b      	ldr	r3, [r3, #0]
 80164fc:	3304      	adds	r3, #4
 80164fe:	4619      	mov	r1, r3
 8016500:	4610      	mov	r0, r2
 8016502:	f7fe f9c5 	bl	8014890 <vListInsert>
}
 8016506:	e010      	b.n	801652a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016508:	4b0f      	ldr	r3, [pc, #60]	; (8016548 <prvAddCurrentTaskToDelayedList+0xc4>)
 801650a:	681a      	ldr	r2, [r3, #0]
 801650c:	4b0a      	ldr	r3, [pc, #40]	; (8016538 <prvAddCurrentTaskToDelayedList+0xb4>)
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	3304      	adds	r3, #4
 8016512:	4619      	mov	r1, r3
 8016514:	4610      	mov	r0, r2
 8016516:	f7fe f9bb 	bl	8014890 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801651a:	4b0c      	ldr	r3, [pc, #48]	; (801654c <prvAddCurrentTaskToDelayedList+0xc8>)
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	68ba      	ldr	r2, [r7, #8]
 8016520:	429a      	cmp	r2, r3
 8016522:	d202      	bcs.n	801652a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8016524:	4a09      	ldr	r2, [pc, #36]	; (801654c <prvAddCurrentTaskToDelayedList+0xc8>)
 8016526:	68bb      	ldr	r3, [r7, #8]
 8016528:	6013      	str	r3, [r2, #0]
}
 801652a:	bf00      	nop
 801652c:	3710      	adds	r7, #16
 801652e:	46bd      	mov	sp, r7
 8016530:	bd80      	pop	{r7, pc}
 8016532:	bf00      	nop
 8016534:	20006890 	.word	0x20006890
 8016538:	2000678c 	.word	0x2000678c
 801653c:	20006894 	.word	0x20006894
 8016540:	20006878 	.word	0x20006878
 8016544:	20006848 	.word	0x20006848
 8016548:	20006844 	.word	0x20006844
 801654c:	200068ac 	.word	0x200068ac

08016550 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016550:	b480      	push	{r7}
 8016552:	b085      	sub	sp, #20
 8016554:	af00      	add	r7, sp, #0
 8016556:	60f8      	str	r0, [r7, #12]
 8016558:	60b9      	str	r1, [r7, #8]
 801655a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	3b04      	subs	r3, #4
 8016560:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016562:	68fb      	ldr	r3, [r7, #12]
 8016564:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016568:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801656a:	68fb      	ldr	r3, [r7, #12]
 801656c:	3b04      	subs	r3, #4
 801656e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016570:	68bb      	ldr	r3, [r7, #8]
 8016572:	f023 0201 	bic.w	r2, r3, #1
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801657a:	68fb      	ldr	r3, [r7, #12]
 801657c:	3b04      	subs	r3, #4
 801657e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016580:	4a0c      	ldr	r2, [pc, #48]	; (80165b4 <pxPortInitialiseStack+0x64>)
 8016582:	68fb      	ldr	r3, [r7, #12]
 8016584:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016586:	68fb      	ldr	r3, [r7, #12]
 8016588:	3b14      	subs	r3, #20
 801658a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801658c:	687a      	ldr	r2, [r7, #4]
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016592:	68fb      	ldr	r3, [r7, #12]
 8016594:	3b04      	subs	r3, #4
 8016596:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	f06f 0202 	mvn.w	r2, #2
 801659e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	3b20      	subs	r3, #32
 80165a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80165a6:	68fb      	ldr	r3, [r7, #12]
}
 80165a8:	4618      	mov	r0, r3
 80165aa:	3714      	adds	r7, #20
 80165ac:	46bd      	mov	sp, r7
 80165ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165b2:	4770      	bx	lr
 80165b4:	080165b9 	.word	0x080165b9

080165b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80165b8:	b480      	push	{r7}
 80165ba:	b085      	sub	sp, #20
 80165bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80165be:	2300      	movs	r3, #0
 80165c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80165c2:	4b12      	ldr	r3, [pc, #72]	; (801660c <prvTaskExitError+0x54>)
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80165ca:	d00a      	beq.n	80165e2 <prvTaskExitError+0x2a>
	__asm volatile
 80165cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165d0:	f383 8811 	msr	BASEPRI, r3
 80165d4:	f3bf 8f6f 	isb	sy
 80165d8:	f3bf 8f4f 	dsb	sy
 80165dc:	60fb      	str	r3, [r7, #12]
}
 80165de:	bf00      	nop
 80165e0:	e7fe      	b.n	80165e0 <prvTaskExitError+0x28>
	__asm volatile
 80165e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165e6:	f383 8811 	msr	BASEPRI, r3
 80165ea:	f3bf 8f6f 	isb	sy
 80165ee:	f3bf 8f4f 	dsb	sy
 80165f2:	60bb      	str	r3, [r7, #8]
}
 80165f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80165f6:	bf00      	nop
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d0fc      	beq.n	80165f8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80165fe:	bf00      	nop
 8016600:	bf00      	nop
 8016602:	3714      	adds	r7, #20
 8016604:	46bd      	mov	sp, r7
 8016606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801660a:	4770      	bx	lr
 801660c:	200000ec 	.word	0x200000ec

08016610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016610:	4b07      	ldr	r3, [pc, #28]	; (8016630 <pxCurrentTCBConst2>)
 8016612:	6819      	ldr	r1, [r3, #0]
 8016614:	6808      	ldr	r0, [r1, #0]
 8016616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801661a:	f380 8809 	msr	PSP, r0
 801661e:	f3bf 8f6f 	isb	sy
 8016622:	f04f 0000 	mov.w	r0, #0
 8016626:	f380 8811 	msr	BASEPRI, r0
 801662a:	4770      	bx	lr
 801662c:	f3af 8000 	nop.w

08016630 <pxCurrentTCBConst2>:
 8016630:	2000678c 	.word	0x2000678c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016634:	bf00      	nop
 8016636:	bf00      	nop

08016638 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016638:	4808      	ldr	r0, [pc, #32]	; (801665c <prvPortStartFirstTask+0x24>)
 801663a:	6800      	ldr	r0, [r0, #0]
 801663c:	6800      	ldr	r0, [r0, #0]
 801663e:	f380 8808 	msr	MSP, r0
 8016642:	f04f 0000 	mov.w	r0, #0
 8016646:	f380 8814 	msr	CONTROL, r0
 801664a:	b662      	cpsie	i
 801664c:	b661      	cpsie	f
 801664e:	f3bf 8f4f 	dsb	sy
 8016652:	f3bf 8f6f 	isb	sy
 8016656:	df00      	svc	0
 8016658:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801665a:	bf00      	nop
 801665c:	e000ed08 	.word	0xe000ed08

08016660 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016660:	b580      	push	{r7, lr}
 8016662:	b086      	sub	sp, #24
 8016664:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016666:	4b46      	ldr	r3, [pc, #280]	; (8016780 <xPortStartScheduler+0x120>)
 8016668:	681b      	ldr	r3, [r3, #0]
 801666a:	4a46      	ldr	r2, [pc, #280]	; (8016784 <xPortStartScheduler+0x124>)
 801666c:	4293      	cmp	r3, r2
 801666e:	d10a      	bne.n	8016686 <xPortStartScheduler+0x26>
	__asm volatile
 8016670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016674:	f383 8811 	msr	BASEPRI, r3
 8016678:	f3bf 8f6f 	isb	sy
 801667c:	f3bf 8f4f 	dsb	sy
 8016680:	613b      	str	r3, [r7, #16]
}
 8016682:	bf00      	nop
 8016684:	e7fe      	b.n	8016684 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016686:	4b3e      	ldr	r3, [pc, #248]	; (8016780 <xPortStartScheduler+0x120>)
 8016688:	681b      	ldr	r3, [r3, #0]
 801668a:	4a3f      	ldr	r2, [pc, #252]	; (8016788 <xPortStartScheduler+0x128>)
 801668c:	4293      	cmp	r3, r2
 801668e:	d10a      	bne.n	80166a6 <xPortStartScheduler+0x46>
	__asm volatile
 8016690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016694:	f383 8811 	msr	BASEPRI, r3
 8016698:	f3bf 8f6f 	isb	sy
 801669c:	f3bf 8f4f 	dsb	sy
 80166a0:	60fb      	str	r3, [r7, #12]
}
 80166a2:	bf00      	nop
 80166a4:	e7fe      	b.n	80166a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80166a6:	4b39      	ldr	r3, [pc, #228]	; (801678c <xPortStartScheduler+0x12c>)
 80166a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80166aa:	697b      	ldr	r3, [r7, #20]
 80166ac:	781b      	ldrb	r3, [r3, #0]
 80166ae:	b2db      	uxtb	r3, r3
 80166b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80166b2:	697b      	ldr	r3, [r7, #20]
 80166b4:	22ff      	movs	r2, #255	; 0xff
 80166b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80166b8:	697b      	ldr	r3, [r7, #20]
 80166ba:	781b      	ldrb	r3, [r3, #0]
 80166bc:	b2db      	uxtb	r3, r3
 80166be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80166c0:	78fb      	ldrb	r3, [r7, #3]
 80166c2:	b2db      	uxtb	r3, r3
 80166c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80166c8:	b2da      	uxtb	r2, r3
 80166ca:	4b31      	ldr	r3, [pc, #196]	; (8016790 <xPortStartScheduler+0x130>)
 80166cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80166ce:	4b31      	ldr	r3, [pc, #196]	; (8016794 <xPortStartScheduler+0x134>)
 80166d0:	2207      	movs	r2, #7
 80166d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80166d4:	e009      	b.n	80166ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80166d6:	4b2f      	ldr	r3, [pc, #188]	; (8016794 <xPortStartScheduler+0x134>)
 80166d8:	681b      	ldr	r3, [r3, #0]
 80166da:	3b01      	subs	r3, #1
 80166dc:	4a2d      	ldr	r2, [pc, #180]	; (8016794 <xPortStartScheduler+0x134>)
 80166de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80166e0:	78fb      	ldrb	r3, [r7, #3]
 80166e2:	b2db      	uxtb	r3, r3
 80166e4:	005b      	lsls	r3, r3, #1
 80166e6:	b2db      	uxtb	r3, r3
 80166e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80166ea:	78fb      	ldrb	r3, [r7, #3]
 80166ec:	b2db      	uxtb	r3, r3
 80166ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80166f2:	2b80      	cmp	r3, #128	; 0x80
 80166f4:	d0ef      	beq.n	80166d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80166f6:	4b27      	ldr	r3, [pc, #156]	; (8016794 <xPortStartScheduler+0x134>)
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	f1c3 0307 	rsb	r3, r3, #7
 80166fe:	2b04      	cmp	r3, #4
 8016700:	d00a      	beq.n	8016718 <xPortStartScheduler+0xb8>
	__asm volatile
 8016702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016706:	f383 8811 	msr	BASEPRI, r3
 801670a:	f3bf 8f6f 	isb	sy
 801670e:	f3bf 8f4f 	dsb	sy
 8016712:	60bb      	str	r3, [r7, #8]
}
 8016714:	bf00      	nop
 8016716:	e7fe      	b.n	8016716 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016718:	4b1e      	ldr	r3, [pc, #120]	; (8016794 <xPortStartScheduler+0x134>)
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	021b      	lsls	r3, r3, #8
 801671e:	4a1d      	ldr	r2, [pc, #116]	; (8016794 <xPortStartScheduler+0x134>)
 8016720:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016722:	4b1c      	ldr	r3, [pc, #112]	; (8016794 <xPortStartScheduler+0x134>)
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801672a:	4a1a      	ldr	r2, [pc, #104]	; (8016794 <xPortStartScheduler+0x134>)
 801672c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	b2da      	uxtb	r2, r3
 8016732:	697b      	ldr	r3, [r7, #20]
 8016734:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016736:	4b18      	ldr	r3, [pc, #96]	; (8016798 <xPortStartScheduler+0x138>)
 8016738:	681b      	ldr	r3, [r3, #0]
 801673a:	4a17      	ldr	r2, [pc, #92]	; (8016798 <xPortStartScheduler+0x138>)
 801673c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016740:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016742:	4b15      	ldr	r3, [pc, #84]	; (8016798 <xPortStartScheduler+0x138>)
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	4a14      	ldr	r2, [pc, #80]	; (8016798 <xPortStartScheduler+0x138>)
 8016748:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801674c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801674e:	f000 f8dd 	bl	801690c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016752:	4b12      	ldr	r3, [pc, #72]	; (801679c <xPortStartScheduler+0x13c>)
 8016754:	2200      	movs	r2, #0
 8016756:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016758:	f000 f8fc 	bl	8016954 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801675c:	4b10      	ldr	r3, [pc, #64]	; (80167a0 <xPortStartScheduler+0x140>)
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	4a0f      	ldr	r2, [pc, #60]	; (80167a0 <xPortStartScheduler+0x140>)
 8016762:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016766:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016768:	f7ff ff66 	bl	8016638 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801676c:	f7ff fa88 	bl	8015c80 <vTaskSwitchContext>
	prvTaskExitError();
 8016770:	f7ff ff22 	bl	80165b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016774:	2300      	movs	r3, #0
}
 8016776:	4618      	mov	r0, r3
 8016778:	3718      	adds	r7, #24
 801677a:	46bd      	mov	sp, r7
 801677c:	bd80      	pop	{r7, pc}
 801677e:	bf00      	nop
 8016780:	e000ed00 	.word	0xe000ed00
 8016784:	410fc271 	.word	0x410fc271
 8016788:	410fc270 	.word	0x410fc270
 801678c:	e000e400 	.word	0xe000e400
 8016790:	200068b8 	.word	0x200068b8
 8016794:	200068bc 	.word	0x200068bc
 8016798:	e000ed20 	.word	0xe000ed20
 801679c:	200000ec 	.word	0x200000ec
 80167a0:	e000ef34 	.word	0xe000ef34

080167a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80167a4:	b480      	push	{r7}
 80167a6:	b083      	sub	sp, #12
 80167a8:	af00      	add	r7, sp, #0
	__asm volatile
 80167aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167ae:	f383 8811 	msr	BASEPRI, r3
 80167b2:	f3bf 8f6f 	isb	sy
 80167b6:	f3bf 8f4f 	dsb	sy
 80167ba:	607b      	str	r3, [r7, #4]
}
 80167bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80167be:	4b0f      	ldr	r3, [pc, #60]	; (80167fc <vPortEnterCritical+0x58>)
 80167c0:	681b      	ldr	r3, [r3, #0]
 80167c2:	3301      	adds	r3, #1
 80167c4:	4a0d      	ldr	r2, [pc, #52]	; (80167fc <vPortEnterCritical+0x58>)
 80167c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80167c8:	4b0c      	ldr	r3, [pc, #48]	; (80167fc <vPortEnterCritical+0x58>)
 80167ca:	681b      	ldr	r3, [r3, #0]
 80167cc:	2b01      	cmp	r3, #1
 80167ce:	d10f      	bne.n	80167f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80167d0:	4b0b      	ldr	r3, [pc, #44]	; (8016800 <vPortEnterCritical+0x5c>)
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	b2db      	uxtb	r3, r3
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d00a      	beq.n	80167f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80167da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167de:	f383 8811 	msr	BASEPRI, r3
 80167e2:	f3bf 8f6f 	isb	sy
 80167e6:	f3bf 8f4f 	dsb	sy
 80167ea:	603b      	str	r3, [r7, #0]
}
 80167ec:	bf00      	nop
 80167ee:	e7fe      	b.n	80167ee <vPortEnterCritical+0x4a>
	}
}
 80167f0:	bf00      	nop
 80167f2:	370c      	adds	r7, #12
 80167f4:	46bd      	mov	sp, r7
 80167f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167fa:	4770      	bx	lr
 80167fc:	200000ec 	.word	0x200000ec
 8016800:	e000ed04 	.word	0xe000ed04

08016804 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016804:	b480      	push	{r7}
 8016806:	b083      	sub	sp, #12
 8016808:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801680a:	4b12      	ldr	r3, [pc, #72]	; (8016854 <vPortExitCritical+0x50>)
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	2b00      	cmp	r3, #0
 8016810:	d10a      	bne.n	8016828 <vPortExitCritical+0x24>
	__asm volatile
 8016812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016816:	f383 8811 	msr	BASEPRI, r3
 801681a:	f3bf 8f6f 	isb	sy
 801681e:	f3bf 8f4f 	dsb	sy
 8016822:	607b      	str	r3, [r7, #4]
}
 8016824:	bf00      	nop
 8016826:	e7fe      	b.n	8016826 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8016828:	4b0a      	ldr	r3, [pc, #40]	; (8016854 <vPortExitCritical+0x50>)
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	3b01      	subs	r3, #1
 801682e:	4a09      	ldr	r2, [pc, #36]	; (8016854 <vPortExitCritical+0x50>)
 8016830:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016832:	4b08      	ldr	r3, [pc, #32]	; (8016854 <vPortExitCritical+0x50>)
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	2b00      	cmp	r3, #0
 8016838:	d105      	bne.n	8016846 <vPortExitCritical+0x42>
 801683a:	2300      	movs	r3, #0
 801683c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801683e:	683b      	ldr	r3, [r7, #0]
 8016840:	f383 8811 	msr	BASEPRI, r3
}
 8016844:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016846:	bf00      	nop
 8016848:	370c      	adds	r7, #12
 801684a:	46bd      	mov	sp, r7
 801684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016850:	4770      	bx	lr
 8016852:	bf00      	nop
 8016854:	200000ec 	.word	0x200000ec
	...

08016860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016860:	f3ef 8009 	mrs	r0, PSP
 8016864:	f3bf 8f6f 	isb	sy
 8016868:	4b15      	ldr	r3, [pc, #84]	; (80168c0 <pxCurrentTCBConst>)
 801686a:	681a      	ldr	r2, [r3, #0]
 801686c:	f01e 0f10 	tst.w	lr, #16
 8016870:	bf08      	it	eq
 8016872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801687a:	6010      	str	r0, [r2, #0]
 801687c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016880:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016884:	f380 8811 	msr	BASEPRI, r0
 8016888:	f3bf 8f4f 	dsb	sy
 801688c:	f3bf 8f6f 	isb	sy
 8016890:	f7ff f9f6 	bl	8015c80 <vTaskSwitchContext>
 8016894:	f04f 0000 	mov.w	r0, #0
 8016898:	f380 8811 	msr	BASEPRI, r0
 801689c:	bc09      	pop	{r0, r3}
 801689e:	6819      	ldr	r1, [r3, #0]
 80168a0:	6808      	ldr	r0, [r1, #0]
 80168a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168a6:	f01e 0f10 	tst.w	lr, #16
 80168aa:	bf08      	it	eq
 80168ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80168b0:	f380 8809 	msr	PSP, r0
 80168b4:	f3bf 8f6f 	isb	sy
 80168b8:	4770      	bx	lr
 80168ba:	bf00      	nop
 80168bc:	f3af 8000 	nop.w

080168c0 <pxCurrentTCBConst>:
 80168c0:	2000678c 	.word	0x2000678c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80168c4:	bf00      	nop
 80168c6:	bf00      	nop

080168c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80168c8:	b580      	push	{r7, lr}
 80168ca:	b082      	sub	sp, #8
 80168cc:	af00      	add	r7, sp, #0
	__asm volatile
 80168ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168d2:	f383 8811 	msr	BASEPRI, r3
 80168d6:	f3bf 8f6f 	isb	sy
 80168da:	f3bf 8f4f 	dsb	sy
 80168de:	607b      	str	r3, [r7, #4]
}
 80168e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80168e2:	f7ff f915 	bl	8015b10 <xTaskIncrementTick>
 80168e6:	4603      	mov	r3, r0
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d003      	beq.n	80168f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80168ec:	4b06      	ldr	r3, [pc, #24]	; (8016908 <SysTick_Handler+0x40>)
 80168ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80168f2:	601a      	str	r2, [r3, #0]
 80168f4:	2300      	movs	r3, #0
 80168f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80168f8:	683b      	ldr	r3, [r7, #0]
 80168fa:	f383 8811 	msr	BASEPRI, r3
}
 80168fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016900:	bf00      	nop
 8016902:	3708      	adds	r7, #8
 8016904:	46bd      	mov	sp, r7
 8016906:	bd80      	pop	{r7, pc}
 8016908:	e000ed04 	.word	0xe000ed04

0801690c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801690c:	b480      	push	{r7}
 801690e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016910:	4b0b      	ldr	r3, [pc, #44]	; (8016940 <vPortSetupTimerInterrupt+0x34>)
 8016912:	2200      	movs	r2, #0
 8016914:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016916:	4b0b      	ldr	r3, [pc, #44]	; (8016944 <vPortSetupTimerInterrupt+0x38>)
 8016918:	2200      	movs	r2, #0
 801691a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801691c:	4b0a      	ldr	r3, [pc, #40]	; (8016948 <vPortSetupTimerInterrupt+0x3c>)
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	4a0a      	ldr	r2, [pc, #40]	; (801694c <vPortSetupTimerInterrupt+0x40>)
 8016922:	fba2 2303 	umull	r2, r3, r2, r3
 8016926:	099b      	lsrs	r3, r3, #6
 8016928:	4a09      	ldr	r2, [pc, #36]	; (8016950 <vPortSetupTimerInterrupt+0x44>)
 801692a:	3b01      	subs	r3, #1
 801692c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801692e:	4b04      	ldr	r3, [pc, #16]	; (8016940 <vPortSetupTimerInterrupt+0x34>)
 8016930:	2207      	movs	r2, #7
 8016932:	601a      	str	r2, [r3, #0]
}
 8016934:	bf00      	nop
 8016936:	46bd      	mov	sp, r7
 8016938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801693c:	4770      	bx	lr
 801693e:	bf00      	nop
 8016940:	e000e010 	.word	0xe000e010
 8016944:	e000e018 	.word	0xe000e018
 8016948:	20000014 	.word	0x20000014
 801694c:	10624dd3 	.word	0x10624dd3
 8016950:	e000e014 	.word	0xe000e014

08016954 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016954:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016964 <vPortEnableVFP+0x10>
 8016958:	6801      	ldr	r1, [r0, #0]
 801695a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801695e:	6001      	str	r1, [r0, #0]
 8016960:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016962:	bf00      	nop
 8016964:	e000ed88 	.word	0xe000ed88

08016968 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016968:	b480      	push	{r7}
 801696a:	b085      	sub	sp, #20
 801696c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801696e:	f3ef 8305 	mrs	r3, IPSR
 8016972:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016974:	68fb      	ldr	r3, [r7, #12]
 8016976:	2b0f      	cmp	r3, #15
 8016978:	d914      	bls.n	80169a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801697a:	4a17      	ldr	r2, [pc, #92]	; (80169d8 <vPortValidateInterruptPriority+0x70>)
 801697c:	68fb      	ldr	r3, [r7, #12]
 801697e:	4413      	add	r3, r2
 8016980:	781b      	ldrb	r3, [r3, #0]
 8016982:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016984:	4b15      	ldr	r3, [pc, #84]	; (80169dc <vPortValidateInterruptPriority+0x74>)
 8016986:	781b      	ldrb	r3, [r3, #0]
 8016988:	7afa      	ldrb	r2, [r7, #11]
 801698a:	429a      	cmp	r2, r3
 801698c:	d20a      	bcs.n	80169a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801698e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016992:	f383 8811 	msr	BASEPRI, r3
 8016996:	f3bf 8f6f 	isb	sy
 801699a:	f3bf 8f4f 	dsb	sy
 801699e:	607b      	str	r3, [r7, #4]
}
 80169a0:	bf00      	nop
 80169a2:	e7fe      	b.n	80169a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80169a4:	4b0e      	ldr	r3, [pc, #56]	; (80169e0 <vPortValidateInterruptPriority+0x78>)
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80169ac:	4b0d      	ldr	r3, [pc, #52]	; (80169e4 <vPortValidateInterruptPriority+0x7c>)
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	429a      	cmp	r2, r3
 80169b2:	d90a      	bls.n	80169ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80169b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169b8:	f383 8811 	msr	BASEPRI, r3
 80169bc:	f3bf 8f6f 	isb	sy
 80169c0:	f3bf 8f4f 	dsb	sy
 80169c4:	603b      	str	r3, [r7, #0]
}
 80169c6:	bf00      	nop
 80169c8:	e7fe      	b.n	80169c8 <vPortValidateInterruptPriority+0x60>
	}
 80169ca:	bf00      	nop
 80169cc:	3714      	adds	r7, #20
 80169ce:	46bd      	mov	sp, r7
 80169d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169d4:	4770      	bx	lr
 80169d6:	bf00      	nop
 80169d8:	e000e3f0 	.word	0xe000e3f0
 80169dc:	200068b8 	.word	0x200068b8
 80169e0:	e000ed0c 	.word	0xe000ed0c
 80169e4:	200068bc 	.word	0x200068bc

080169e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80169e8:	b580      	push	{r7, lr}
 80169ea:	b08a      	sub	sp, #40	; 0x28
 80169ec:	af00      	add	r7, sp, #0
 80169ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80169f0:	2300      	movs	r3, #0
 80169f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80169f4:	f7fe ffc0 	bl	8015978 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80169f8:	4b5b      	ldr	r3, [pc, #364]	; (8016b68 <pvPortMalloc+0x180>)
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	d101      	bne.n	8016a04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016a00:	f000 f920 	bl	8016c44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016a04:	4b59      	ldr	r3, [pc, #356]	; (8016b6c <pvPortMalloc+0x184>)
 8016a06:	681a      	ldr	r2, [r3, #0]
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	4013      	ands	r3, r2
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	f040 8093 	bne.w	8016b38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d01d      	beq.n	8016a54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8016a18:	2208      	movs	r2, #8
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	4413      	add	r3, r2
 8016a1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	f003 0307 	and.w	r3, r3, #7
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d014      	beq.n	8016a54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	f023 0307 	bic.w	r3, r3, #7
 8016a30:	3308      	adds	r3, #8
 8016a32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	f003 0307 	and.w	r3, r3, #7
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d00a      	beq.n	8016a54 <pvPortMalloc+0x6c>
	__asm volatile
 8016a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a42:	f383 8811 	msr	BASEPRI, r3
 8016a46:	f3bf 8f6f 	isb	sy
 8016a4a:	f3bf 8f4f 	dsb	sy
 8016a4e:	617b      	str	r3, [r7, #20]
}
 8016a50:	bf00      	nop
 8016a52:	e7fe      	b.n	8016a52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d06e      	beq.n	8016b38 <pvPortMalloc+0x150>
 8016a5a:	4b45      	ldr	r3, [pc, #276]	; (8016b70 <pvPortMalloc+0x188>)
 8016a5c:	681b      	ldr	r3, [r3, #0]
 8016a5e:	687a      	ldr	r2, [r7, #4]
 8016a60:	429a      	cmp	r2, r3
 8016a62:	d869      	bhi.n	8016b38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016a64:	4b43      	ldr	r3, [pc, #268]	; (8016b74 <pvPortMalloc+0x18c>)
 8016a66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016a68:	4b42      	ldr	r3, [pc, #264]	; (8016b74 <pvPortMalloc+0x18c>)
 8016a6a:	681b      	ldr	r3, [r3, #0]
 8016a6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016a6e:	e004      	b.n	8016a7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8016a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a7c:	685b      	ldr	r3, [r3, #4]
 8016a7e:	687a      	ldr	r2, [r7, #4]
 8016a80:	429a      	cmp	r2, r3
 8016a82:	d903      	bls.n	8016a8c <pvPortMalloc+0xa4>
 8016a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a86:	681b      	ldr	r3, [r3, #0]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d1f1      	bne.n	8016a70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016a8c:	4b36      	ldr	r3, [pc, #216]	; (8016b68 <pvPortMalloc+0x180>)
 8016a8e:	681b      	ldr	r3, [r3, #0]
 8016a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016a92:	429a      	cmp	r2, r3
 8016a94:	d050      	beq.n	8016b38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016a96:	6a3b      	ldr	r3, [r7, #32]
 8016a98:	681b      	ldr	r3, [r3, #0]
 8016a9a:	2208      	movs	r2, #8
 8016a9c:	4413      	add	r3, r2
 8016a9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aa2:	681a      	ldr	r2, [r3, #0]
 8016aa4:	6a3b      	ldr	r3, [r7, #32]
 8016aa6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aaa:	685a      	ldr	r2, [r3, #4]
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	1ad2      	subs	r2, r2, r3
 8016ab0:	2308      	movs	r3, #8
 8016ab2:	005b      	lsls	r3, r3, #1
 8016ab4:	429a      	cmp	r2, r3
 8016ab6:	d91f      	bls.n	8016af8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	4413      	add	r3, r2
 8016abe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016ac0:	69bb      	ldr	r3, [r7, #24]
 8016ac2:	f003 0307 	and.w	r3, r3, #7
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d00a      	beq.n	8016ae0 <pvPortMalloc+0xf8>
	__asm volatile
 8016aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ace:	f383 8811 	msr	BASEPRI, r3
 8016ad2:	f3bf 8f6f 	isb	sy
 8016ad6:	f3bf 8f4f 	dsb	sy
 8016ada:	613b      	str	r3, [r7, #16]
}
 8016adc:	bf00      	nop
 8016ade:	e7fe      	b.n	8016ade <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ae2:	685a      	ldr	r2, [r3, #4]
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	1ad2      	subs	r2, r2, r3
 8016ae8:	69bb      	ldr	r3, [r7, #24]
 8016aea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aee:	687a      	ldr	r2, [r7, #4]
 8016af0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016af2:	69b8      	ldr	r0, [r7, #24]
 8016af4:	f000 f908 	bl	8016d08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016af8:	4b1d      	ldr	r3, [pc, #116]	; (8016b70 <pvPortMalloc+0x188>)
 8016afa:	681a      	ldr	r2, [r3, #0]
 8016afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016afe:	685b      	ldr	r3, [r3, #4]
 8016b00:	1ad3      	subs	r3, r2, r3
 8016b02:	4a1b      	ldr	r2, [pc, #108]	; (8016b70 <pvPortMalloc+0x188>)
 8016b04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016b06:	4b1a      	ldr	r3, [pc, #104]	; (8016b70 <pvPortMalloc+0x188>)
 8016b08:	681a      	ldr	r2, [r3, #0]
 8016b0a:	4b1b      	ldr	r3, [pc, #108]	; (8016b78 <pvPortMalloc+0x190>)
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	429a      	cmp	r2, r3
 8016b10:	d203      	bcs.n	8016b1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016b12:	4b17      	ldr	r3, [pc, #92]	; (8016b70 <pvPortMalloc+0x188>)
 8016b14:	681b      	ldr	r3, [r3, #0]
 8016b16:	4a18      	ldr	r2, [pc, #96]	; (8016b78 <pvPortMalloc+0x190>)
 8016b18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b1c:	685a      	ldr	r2, [r3, #4]
 8016b1e:	4b13      	ldr	r3, [pc, #76]	; (8016b6c <pvPortMalloc+0x184>)
 8016b20:	681b      	ldr	r3, [r3, #0]
 8016b22:	431a      	orrs	r2, r3
 8016b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b2a:	2200      	movs	r2, #0
 8016b2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8016b2e:	4b13      	ldr	r3, [pc, #76]	; (8016b7c <pvPortMalloc+0x194>)
 8016b30:	681b      	ldr	r3, [r3, #0]
 8016b32:	3301      	adds	r3, #1
 8016b34:	4a11      	ldr	r2, [pc, #68]	; (8016b7c <pvPortMalloc+0x194>)
 8016b36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016b38:	f7fe ff2c 	bl	8015994 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016b3c:	69fb      	ldr	r3, [r7, #28]
 8016b3e:	f003 0307 	and.w	r3, r3, #7
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d00a      	beq.n	8016b5c <pvPortMalloc+0x174>
	__asm volatile
 8016b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b4a:	f383 8811 	msr	BASEPRI, r3
 8016b4e:	f3bf 8f6f 	isb	sy
 8016b52:	f3bf 8f4f 	dsb	sy
 8016b56:	60fb      	str	r3, [r7, #12]
}
 8016b58:	bf00      	nop
 8016b5a:	e7fe      	b.n	8016b5a <pvPortMalloc+0x172>
	return pvReturn;
 8016b5c:	69fb      	ldr	r3, [r7, #28]
}
 8016b5e:	4618      	mov	r0, r3
 8016b60:	3728      	adds	r7, #40	; 0x28
 8016b62:	46bd      	mov	sp, r7
 8016b64:	bd80      	pop	{r7, pc}
 8016b66:	bf00      	nop
 8016b68:	2000a4c8 	.word	0x2000a4c8
 8016b6c:	2000a4dc 	.word	0x2000a4dc
 8016b70:	2000a4cc 	.word	0x2000a4cc
 8016b74:	2000a4c0 	.word	0x2000a4c0
 8016b78:	2000a4d0 	.word	0x2000a4d0
 8016b7c:	2000a4d4 	.word	0x2000a4d4

08016b80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016b80:	b580      	push	{r7, lr}
 8016b82:	b086      	sub	sp, #24
 8016b84:	af00      	add	r7, sp, #0
 8016b86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d04d      	beq.n	8016c2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016b92:	2308      	movs	r3, #8
 8016b94:	425b      	negs	r3, r3
 8016b96:	697a      	ldr	r2, [r7, #20]
 8016b98:	4413      	add	r3, r2
 8016b9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016b9c:	697b      	ldr	r3, [r7, #20]
 8016b9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016ba0:	693b      	ldr	r3, [r7, #16]
 8016ba2:	685a      	ldr	r2, [r3, #4]
 8016ba4:	4b24      	ldr	r3, [pc, #144]	; (8016c38 <vPortFree+0xb8>)
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	4013      	ands	r3, r2
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d10a      	bne.n	8016bc4 <vPortFree+0x44>
	__asm volatile
 8016bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bb2:	f383 8811 	msr	BASEPRI, r3
 8016bb6:	f3bf 8f6f 	isb	sy
 8016bba:	f3bf 8f4f 	dsb	sy
 8016bbe:	60fb      	str	r3, [r7, #12]
}
 8016bc0:	bf00      	nop
 8016bc2:	e7fe      	b.n	8016bc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016bc4:	693b      	ldr	r3, [r7, #16]
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d00a      	beq.n	8016be2 <vPortFree+0x62>
	__asm volatile
 8016bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bd0:	f383 8811 	msr	BASEPRI, r3
 8016bd4:	f3bf 8f6f 	isb	sy
 8016bd8:	f3bf 8f4f 	dsb	sy
 8016bdc:	60bb      	str	r3, [r7, #8]
}
 8016bde:	bf00      	nop
 8016be0:	e7fe      	b.n	8016be0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016be2:	693b      	ldr	r3, [r7, #16]
 8016be4:	685a      	ldr	r2, [r3, #4]
 8016be6:	4b14      	ldr	r3, [pc, #80]	; (8016c38 <vPortFree+0xb8>)
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	4013      	ands	r3, r2
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d01e      	beq.n	8016c2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016bf0:	693b      	ldr	r3, [r7, #16]
 8016bf2:	681b      	ldr	r3, [r3, #0]
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d11a      	bne.n	8016c2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016bf8:	693b      	ldr	r3, [r7, #16]
 8016bfa:	685a      	ldr	r2, [r3, #4]
 8016bfc:	4b0e      	ldr	r3, [pc, #56]	; (8016c38 <vPortFree+0xb8>)
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	43db      	mvns	r3, r3
 8016c02:	401a      	ands	r2, r3
 8016c04:	693b      	ldr	r3, [r7, #16]
 8016c06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016c08:	f7fe feb6 	bl	8015978 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016c0c:	693b      	ldr	r3, [r7, #16]
 8016c0e:	685a      	ldr	r2, [r3, #4]
 8016c10:	4b0a      	ldr	r3, [pc, #40]	; (8016c3c <vPortFree+0xbc>)
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	4413      	add	r3, r2
 8016c16:	4a09      	ldr	r2, [pc, #36]	; (8016c3c <vPortFree+0xbc>)
 8016c18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016c1a:	6938      	ldr	r0, [r7, #16]
 8016c1c:	f000 f874 	bl	8016d08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016c20:	4b07      	ldr	r3, [pc, #28]	; (8016c40 <vPortFree+0xc0>)
 8016c22:	681b      	ldr	r3, [r3, #0]
 8016c24:	3301      	adds	r3, #1
 8016c26:	4a06      	ldr	r2, [pc, #24]	; (8016c40 <vPortFree+0xc0>)
 8016c28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8016c2a:	f7fe feb3 	bl	8015994 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016c2e:	bf00      	nop
 8016c30:	3718      	adds	r7, #24
 8016c32:	46bd      	mov	sp, r7
 8016c34:	bd80      	pop	{r7, pc}
 8016c36:	bf00      	nop
 8016c38:	2000a4dc 	.word	0x2000a4dc
 8016c3c:	2000a4cc 	.word	0x2000a4cc
 8016c40:	2000a4d8 	.word	0x2000a4d8

08016c44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016c44:	b480      	push	{r7}
 8016c46:	b085      	sub	sp, #20
 8016c48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016c4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8016c4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016c50:	4b27      	ldr	r3, [pc, #156]	; (8016cf0 <prvHeapInit+0xac>)
 8016c52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	f003 0307 	and.w	r3, r3, #7
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d00c      	beq.n	8016c78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016c5e:	68fb      	ldr	r3, [r7, #12]
 8016c60:	3307      	adds	r3, #7
 8016c62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016c64:	68fb      	ldr	r3, [r7, #12]
 8016c66:	f023 0307 	bic.w	r3, r3, #7
 8016c6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016c6c:	68ba      	ldr	r2, [r7, #8]
 8016c6e:	68fb      	ldr	r3, [r7, #12]
 8016c70:	1ad3      	subs	r3, r2, r3
 8016c72:	4a1f      	ldr	r2, [pc, #124]	; (8016cf0 <prvHeapInit+0xac>)
 8016c74:	4413      	add	r3, r2
 8016c76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016c7c:	4a1d      	ldr	r2, [pc, #116]	; (8016cf4 <prvHeapInit+0xb0>)
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016c82:	4b1c      	ldr	r3, [pc, #112]	; (8016cf4 <prvHeapInit+0xb0>)
 8016c84:	2200      	movs	r2, #0
 8016c86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	68ba      	ldr	r2, [r7, #8]
 8016c8c:	4413      	add	r3, r2
 8016c8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016c90:	2208      	movs	r2, #8
 8016c92:	68fb      	ldr	r3, [r7, #12]
 8016c94:	1a9b      	subs	r3, r3, r2
 8016c96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016c98:	68fb      	ldr	r3, [r7, #12]
 8016c9a:	f023 0307 	bic.w	r3, r3, #7
 8016c9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016ca0:	68fb      	ldr	r3, [r7, #12]
 8016ca2:	4a15      	ldr	r2, [pc, #84]	; (8016cf8 <prvHeapInit+0xb4>)
 8016ca4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016ca6:	4b14      	ldr	r3, [pc, #80]	; (8016cf8 <prvHeapInit+0xb4>)
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	2200      	movs	r2, #0
 8016cac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016cae:	4b12      	ldr	r3, [pc, #72]	; (8016cf8 <prvHeapInit+0xb4>)
 8016cb0:	681b      	ldr	r3, [r3, #0]
 8016cb2:	2200      	movs	r2, #0
 8016cb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016cba:	683b      	ldr	r3, [r7, #0]
 8016cbc:	68fa      	ldr	r2, [r7, #12]
 8016cbe:	1ad2      	subs	r2, r2, r3
 8016cc0:	683b      	ldr	r3, [r7, #0]
 8016cc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016cc4:	4b0c      	ldr	r3, [pc, #48]	; (8016cf8 <prvHeapInit+0xb4>)
 8016cc6:	681a      	ldr	r2, [r3, #0]
 8016cc8:	683b      	ldr	r3, [r7, #0]
 8016cca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016ccc:	683b      	ldr	r3, [r7, #0]
 8016cce:	685b      	ldr	r3, [r3, #4]
 8016cd0:	4a0a      	ldr	r2, [pc, #40]	; (8016cfc <prvHeapInit+0xb8>)
 8016cd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016cd4:	683b      	ldr	r3, [r7, #0]
 8016cd6:	685b      	ldr	r3, [r3, #4]
 8016cd8:	4a09      	ldr	r2, [pc, #36]	; (8016d00 <prvHeapInit+0xbc>)
 8016cda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016cdc:	4b09      	ldr	r3, [pc, #36]	; (8016d04 <prvHeapInit+0xc0>)
 8016cde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016ce2:	601a      	str	r2, [r3, #0]
}
 8016ce4:	bf00      	nop
 8016ce6:	3714      	adds	r7, #20
 8016ce8:	46bd      	mov	sp, r7
 8016cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cee:	4770      	bx	lr
 8016cf0:	200068c0 	.word	0x200068c0
 8016cf4:	2000a4c0 	.word	0x2000a4c0
 8016cf8:	2000a4c8 	.word	0x2000a4c8
 8016cfc:	2000a4d0 	.word	0x2000a4d0
 8016d00:	2000a4cc 	.word	0x2000a4cc
 8016d04:	2000a4dc 	.word	0x2000a4dc

08016d08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016d08:	b480      	push	{r7}
 8016d0a:	b085      	sub	sp, #20
 8016d0c:	af00      	add	r7, sp, #0
 8016d0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016d10:	4b28      	ldr	r3, [pc, #160]	; (8016db4 <prvInsertBlockIntoFreeList+0xac>)
 8016d12:	60fb      	str	r3, [r7, #12]
 8016d14:	e002      	b.n	8016d1c <prvInsertBlockIntoFreeList+0x14>
 8016d16:	68fb      	ldr	r3, [r7, #12]
 8016d18:	681b      	ldr	r3, [r3, #0]
 8016d1a:	60fb      	str	r3, [r7, #12]
 8016d1c:	68fb      	ldr	r3, [r7, #12]
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	687a      	ldr	r2, [r7, #4]
 8016d22:	429a      	cmp	r2, r3
 8016d24:	d8f7      	bhi.n	8016d16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016d26:	68fb      	ldr	r3, [r7, #12]
 8016d28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016d2a:	68fb      	ldr	r3, [r7, #12]
 8016d2c:	685b      	ldr	r3, [r3, #4]
 8016d2e:	68ba      	ldr	r2, [r7, #8]
 8016d30:	4413      	add	r3, r2
 8016d32:	687a      	ldr	r2, [r7, #4]
 8016d34:	429a      	cmp	r2, r3
 8016d36:	d108      	bne.n	8016d4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016d38:	68fb      	ldr	r3, [r7, #12]
 8016d3a:	685a      	ldr	r2, [r3, #4]
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	685b      	ldr	r3, [r3, #4]
 8016d40:	441a      	add	r2, r3
 8016d42:	68fb      	ldr	r3, [r7, #12]
 8016d44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016d46:	68fb      	ldr	r3, [r7, #12]
 8016d48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	685b      	ldr	r3, [r3, #4]
 8016d52:	68ba      	ldr	r2, [r7, #8]
 8016d54:	441a      	add	r2, r3
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	681b      	ldr	r3, [r3, #0]
 8016d5a:	429a      	cmp	r2, r3
 8016d5c:	d118      	bne.n	8016d90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016d5e:	68fb      	ldr	r3, [r7, #12]
 8016d60:	681a      	ldr	r2, [r3, #0]
 8016d62:	4b15      	ldr	r3, [pc, #84]	; (8016db8 <prvInsertBlockIntoFreeList+0xb0>)
 8016d64:	681b      	ldr	r3, [r3, #0]
 8016d66:	429a      	cmp	r2, r3
 8016d68:	d00d      	beq.n	8016d86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	685a      	ldr	r2, [r3, #4]
 8016d6e:	68fb      	ldr	r3, [r7, #12]
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	685b      	ldr	r3, [r3, #4]
 8016d74:	441a      	add	r2, r3
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016d7a:	68fb      	ldr	r3, [r7, #12]
 8016d7c:	681b      	ldr	r3, [r3, #0]
 8016d7e:	681a      	ldr	r2, [r3, #0]
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	601a      	str	r2, [r3, #0]
 8016d84:	e008      	b.n	8016d98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016d86:	4b0c      	ldr	r3, [pc, #48]	; (8016db8 <prvInsertBlockIntoFreeList+0xb0>)
 8016d88:	681a      	ldr	r2, [r3, #0]
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	601a      	str	r2, [r3, #0]
 8016d8e:	e003      	b.n	8016d98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016d90:	68fb      	ldr	r3, [r7, #12]
 8016d92:	681a      	ldr	r2, [r3, #0]
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016d98:	68fa      	ldr	r2, [r7, #12]
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	429a      	cmp	r2, r3
 8016d9e:	d002      	beq.n	8016da6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	687a      	ldr	r2, [r7, #4]
 8016da4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016da6:	bf00      	nop
 8016da8:	3714      	adds	r7, #20
 8016daa:	46bd      	mov	sp, r7
 8016dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016db0:	4770      	bx	lr
 8016db2:	bf00      	nop
 8016db4:	2000a4c0 	.word	0x2000a4c0
 8016db8:	2000a4c8 	.word	0x2000a4c8

08016dbc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016dbc:	b580      	push	{r7, lr}
 8016dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016dc0:	2200      	movs	r2, #0
 8016dc2:	4912      	ldr	r1, [pc, #72]	; (8016e0c <MX_USB_DEVICE_Init+0x50>)
 8016dc4:	4812      	ldr	r0, [pc, #72]	; (8016e10 <MX_USB_DEVICE_Init+0x54>)
 8016dc6:	f7f9 fa26 	bl	8010216 <USBD_Init>
 8016dca:	4603      	mov	r3, r0
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d001      	beq.n	8016dd4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016dd0:	f7eb ff72 	bl	8002cb8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8016dd4:	490f      	ldr	r1, [pc, #60]	; (8016e14 <MX_USB_DEVICE_Init+0x58>)
 8016dd6:	480e      	ldr	r0, [pc, #56]	; (8016e10 <MX_USB_DEVICE_Init+0x54>)
 8016dd8:	f7f9 fa4d 	bl	8010276 <USBD_RegisterClass>
 8016ddc:	4603      	mov	r3, r0
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d001      	beq.n	8016de6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016de2:	f7eb ff69 	bl	8002cb8 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8016de6:	490c      	ldr	r1, [pc, #48]	; (8016e18 <MX_USB_DEVICE_Init+0x5c>)
 8016de8:	4809      	ldr	r0, [pc, #36]	; (8016e10 <MX_USB_DEVICE_Init+0x54>)
 8016dea:	f7f7 fcf7 	bl	800e7dc <USBD_MSC_RegisterStorage>
 8016dee:	4603      	mov	r3, r0
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d001      	beq.n	8016df8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016df4:	f7eb ff60 	bl	8002cb8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016df8:	4805      	ldr	r0, [pc, #20]	; (8016e10 <MX_USB_DEVICE_Init+0x54>)
 8016dfa:	f7f9 fa72 	bl	80102e2 <USBD_Start>
 8016dfe:	4603      	mov	r3, r0
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	d001      	beq.n	8016e08 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016e04:	f7eb ff58 	bl	8002cb8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016e08:	bf00      	nop
 8016e0a:	bd80      	pop	{r7, pc}
 8016e0c:	200000f0 	.word	0x200000f0
 8016e10:	2000a4e0 	.word	0x2000a4e0
 8016e14:	20000044 	.word	0x20000044
 8016e18:	20000150 	.word	0x20000150

08016e1c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016e1c:	b480      	push	{r7}
 8016e1e:	b083      	sub	sp, #12
 8016e20:	af00      	add	r7, sp, #0
 8016e22:	4603      	mov	r3, r0
 8016e24:	6039      	str	r1, [r7, #0]
 8016e26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016e28:	683b      	ldr	r3, [r7, #0]
 8016e2a:	2212      	movs	r2, #18
 8016e2c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8016e2e:	4b03      	ldr	r3, [pc, #12]	; (8016e3c <USBD_FS_DeviceDescriptor+0x20>)
}
 8016e30:	4618      	mov	r0, r3
 8016e32:	370c      	adds	r7, #12
 8016e34:	46bd      	mov	sp, r7
 8016e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e3a:	4770      	bx	lr
 8016e3c:	20000110 	.word	0x20000110

08016e40 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016e40:	b480      	push	{r7}
 8016e42:	b083      	sub	sp, #12
 8016e44:	af00      	add	r7, sp, #0
 8016e46:	4603      	mov	r3, r0
 8016e48:	6039      	str	r1, [r7, #0]
 8016e4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016e4c:	683b      	ldr	r3, [r7, #0]
 8016e4e:	2204      	movs	r2, #4
 8016e50:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016e52:	4b03      	ldr	r3, [pc, #12]	; (8016e60 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016e54:	4618      	mov	r0, r3
 8016e56:	370c      	adds	r7, #12
 8016e58:	46bd      	mov	sp, r7
 8016e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e5e:	4770      	bx	lr
 8016e60:	20000130 	.word	0x20000130

08016e64 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016e64:	b580      	push	{r7, lr}
 8016e66:	b082      	sub	sp, #8
 8016e68:	af00      	add	r7, sp, #0
 8016e6a:	4603      	mov	r3, r0
 8016e6c:	6039      	str	r1, [r7, #0]
 8016e6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016e70:	79fb      	ldrb	r3, [r7, #7]
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d105      	bne.n	8016e82 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016e76:	683a      	ldr	r2, [r7, #0]
 8016e78:	4907      	ldr	r1, [pc, #28]	; (8016e98 <USBD_FS_ProductStrDescriptor+0x34>)
 8016e7a:	4808      	ldr	r0, [pc, #32]	; (8016e9c <USBD_FS_ProductStrDescriptor+0x38>)
 8016e7c:	f7fa fc08 	bl	8011690 <USBD_GetString>
 8016e80:	e004      	b.n	8016e8c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016e82:	683a      	ldr	r2, [r7, #0]
 8016e84:	4904      	ldr	r1, [pc, #16]	; (8016e98 <USBD_FS_ProductStrDescriptor+0x34>)
 8016e86:	4805      	ldr	r0, [pc, #20]	; (8016e9c <USBD_FS_ProductStrDescriptor+0x38>)
 8016e88:	f7fa fc02 	bl	8011690 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016e8c:	4b02      	ldr	r3, [pc, #8]	; (8016e98 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8016e8e:	4618      	mov	r0, r3
 8016e90:	3708      	adds	r7, #8
 8016e92:	46bd      	mov	sp, r7
 8016e94:	bd80      	pop	{r7, pc}
 8016e96:	bf00      	nop
 8016e98:	2000a7bc 	.word	0x2000a7bc
 8016e9c:	0801aaf8 	.word	0x0801aaf8

08016ea0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016ea0:	b580      	push	{r7, lr}
 8016ea2:	b082      	sub	sp, #8
 8016ea4:	af00      	add	r7, sp, #0
 8016ea6:	4603      	mov	r3, r0
 8016ea8:	6039      	str	r1, [r7, #0]
 8016eaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016eac:	683a      	ldr	r2, [r7, #0]
 8016eae:	4904      	ldr	r1, [pc, #16]	; (8016ec0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016eb0:	4804      	ldr	r0, [pc, #16]	; (8016ec4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8016eb2:	f7fa fbed 	bl	8011690 <USBD_GetString>
  return USBD_StrDesc;
 8016eb6:	4b02      	ldr	r3, [pc, #8]	; (8016ec0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016eb8:	4618      	mov	r0, r3
 8016eba:	3708      	adds	r7, #8
 8016ebc:	46bd      	mov	sp, r7
 8016ebe:	bd80      	pop	{r7, pc}
 8016ec0:	2000a7bc 	.word	0x2000a7bc
 8016ec4:	0801ab0c 	.word	0x0801ab0c

08016ec8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016ec8:	b580      	push	{r7, lr}
 8016eca:	b082      	sub	sp, #8
 8016ecc:	af00      	add	r7, sp, #0
 8016ece:	4603      	mov	r3, r0
 8016ed0:	6039      	str	r1, [r7, #0]
 8016ed2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016ed4:	683b      	ldr	r3, [r7, #0]
 8016ed6:	221a      	movs	r2, #26
 8016ed8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016eda:	f000 f855 	bl	8016f88 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8016ede:	4b02      	ldr	r3, [pc, #8]	; (8016ee8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8016ee0:	4618      	mov	r0, r3
 8016ee2:	3708      	adds	r7, #8
 8016ee4:	46bd      	mov	sp, r7
 8016ee6:	bd80      	pop	{r7, pc}
 8016ee8:	20000134 	.word	0x20000134

08016eec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016eec:	b580      	push	{r7, lr}
 8016eee:	b082      	sub	sp, #8
 8016ef0:	af00      	add	r7, sp, #0
 8016ef2:	4603      	mov	r3, r0
 8016ef4:	6039      	str	r1, [r7, #0]
 8016ef6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016ef8:	79fb      	ldrb	r3, [r7, #7]
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	d105      	bne.n	8016f0a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016efe:	683a      	ldr	r2, [r7, #0]
 8016f00:	4907      	ldr	r1, [pc, #28]	; (8016f20 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016f02:	4808      	ldr	r0, [pc, #32]	; (8016f24 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016f04:	f7fa fbc4 	bl	8011690 <USBD_GetString>
 8016f08:	e004      	b.n	8016f14 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016f0a:	683a      	ldr	r2, [r7, #0]
 8016f0c:	4904      	ldr	r1, [pc, #16]	; (8016f20 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016f0e:	4805      	ldr	r0, [pc, #20]	; (8016f24 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016f10:	f7fa fbbe 	bl	8011690 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016f14:	4b02      	ldr	r3, [pc, #8]	; (8016f20 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8016f16:	4618      	mov	r0, r3
 8016f18:	3708      	adds	r7, #8
 8016f1a:	46bd      	mov	sp, r7
 8016f1c:	bd80      	pop	{r7, pc}
 8016f1e:	bf00      	nop
 8016f20:	2000a7bc 	.word	0x2000a7bc
 8016f24:	0801ab20 	.word	0x0801ab20

08016f28 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f28:	b580      	push	{r7, lr}
 8016f2a:	b082      	sub	sp, #8
 8016f2c:	af00      	add	r7, sp, #0
 8016f2e:	4603      	mov	r3, r0
 8016f30:	6039      	str	r1, [r7, #0]
 8016f32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016f34:	79fb      	ldrb	r3, [r7, #7]
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d105      	bne.n	8016f46 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016f3a:	683a      	ldr	r2, [r7, #0]
 8016f3c:	4907      	ldr	r1, [pc, #28]	; (8016f5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016f3e:	4808      	ldr	r0, [pc, #32]	; (8016f60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016f40:	f7fa fba6 	bl	8011690 <USBD_GetString>
 8016f44:	e004      	b.n	8016f50 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016f46:	683a      	ldr	r2, [r7, #0]
 8016f48:	4904      	ldr	r1, [pc, #16]	; (8016f5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016f4a:	4805      	ldr	r0, [pc, #20]	; (8016f60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016f4c:	f7fa fba0 	bl	8011690 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016f50:	4b02      	ldr	r3, [pc, #8]	; (8016f5c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8016f52:	4618      	mov	r0, r3
 8016f54:	3708      	adds	r7, #8
 8016f56:	46bd      	mov	sp, r7
 8016f58:	bd80      	pop	{r7, pc}
 8016f5a:	bf00      	nop
 8016f5c:	2000a7bc 	.word	0x2000a7bc
 8016f60:	0801ab2c 	.word	0x0801ab2c

08016f64 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f64:	b480      	push	{r7}
 8016f66:	b083      	sub	sp, #12
 8016f68:	af00      	add	r7, sp, #0
 8016f6a:	4603      	mov	r3, r0
 8016f6c:	6039      	str	r1, [r7, #0]
 8016f6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8016f70:	683b      	ldr	r3, [r7, #0]
 8016f72:	220c      	movs	r2, #12
 8016f74:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8016f76:	4b03      	ldr	r3, [pc, #12]	; (8016f84 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8016f78:	4618      	mov	r0, r3
 8016f7a:	370c      	adds	r7, #12
 8016f7c:	46bd      	mov	sp, r7
 8016f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f82:	4770      	bx	lr
 8016f84:	20000124 	.word	0x20000124

08016f88 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016f88:	b580      	push	{r7, lr}
 8016f8a:	b084      	sub	sp, #16
 8016f8c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016f8e:	4b0f      	ldr	r3, [pc, #60]	; (8016fcc <Get_SerialNum+0x44>)
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016f94:	4b0e      	ldr	r3, [pc, #56]	; (8016fd0 <Get_SerialNum+0x48>)
 8016f96:	681b      	ldr	r3, [r3, #0]
 8016f98:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016f9a:	4b0e      	ldr	r3, [pc, #56]	; (8016fd4 <Get_SerialNum+0x4c>)
 8016f9c:	681b      	ldr	r3, [r3, #0]
 8016f9e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016fa0:	68fa      	ldr	r2, [r7, #12]
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	4413      	add	r3, r2
 8016fa6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016fa8:	68fb      	ldr	r3, [r7, #12]
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d009      	beq.n	8016fc2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016fae:	2208      	movs	r2, #8
 8016fb0:	4909      	ldr	r1, [pc, #36]	; (8016fd8 <Get_SerialNum+0x50>)
 8016fb2:	68f8      	ldr	r0, [r7, #12]
 8016fb4:	f000 f814 	bl	8016fe0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016fb8:	2204      	movs	r2, #4
 8016fba:	4908      	ldr	r1, [pc, #32]	; (8016fdc <Get_SerialNum+0x54>)
 8016fbc:	68b8      	ldr	r0, [r7, #8]
 8016fbe:	f000 f80f 	bl	8016fe0 <IntToUnicode>
  }
}
 8016fc2:	bf00      	nop
 8016fc4:	3710      	adds	r7, #16
 8016fc6:	46bd      	mov	sp, r7
 8016fc8:	bd80      	pop	{r7, pc}
 8016fca:	bf00      	nop
 8016fcc:	1fff7a10 	.word	0x1fff7a10
 8016fd0:	1fff7a14 	.word	0x1fff7a14
 8016fd4:	1fff7a18 	.word	0x1fff7a18
 8016fd8:	20000136 	.word	0x20000136
 8016fdc:	20000146 	.word	0x20000146

08016fe0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016fe0:	b480      	push	{r7}
 8016fe2:	b087      	sub	sp, #28
 8016fe4:	af00      	add	r7, sp, #0
 8016fe6:	60f8      	str	r0, [r7, #12]
 8016fe8:	60b9      	str	r1, [r7, #8]
 8016fea:	4613      	mov	r3, r2
 8016fec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016fee:	2300      	movs	r3, #0
 8016ff0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016ff2:	2300      	movs	r3, #0
 8016ff4:	75fb      	strb	r3, [r7, #23]
 8016ff6:	e027      	b.n	8017048 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016ff8:	68fb      	ldr	r3, [r7, #12]
 8016ffa:	0f1b      	lsrs	r3, r3, #28
 8016ffc:	2b09      	cmp	r3, #9
 8016ffe:	d80b      	bhi.n	8017018 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017000:	68fb      	ldr	r3, [r7, #12]
 8017002:	0f1b      	lsrs	r3, r3, #28
 8017004:	b2da      	uxtb	r2, r3
 8017006:	7dfb      	ldrb	r3, [r7, #23]
 8017008:	005b      	lsls	r3, r3, #1
 801700a:	4619      	mov	r1, r3
 801700c:	68bb      	ldr	r3, [r7, #8]
 801700e:	440b      	add	r3, r1
 8017010:	3230      	adds	r2, #48	; 0x30
 8017012:	b2d2      	uxtb	r2, r2
 8017014:	701a      	strb	r2, [r3, #0]
 8017016:	e00a      	b.n	801702e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017018:	68fb      	ldr	r3, [r7, #12]
 801701a:	0f1b      	lsrs	r3, r3, #28
 801701c:	b2da      	uxtb	r2, r3
 801701e:	7dfb      	ldrb	r3, [r7, #23]
 8017020:	005b      	lsls	r3, r3, #1
 8017022:	4619      	mov	r1, r3
 8017024:	68bb      	ldr	r3, [r7, #8]
 8017026:	440b      	add	r3, r1
 8017028:	3237      	adds	r2, #55	; 0x37
 801702a:	b2d2      	uxtb	r2, r2
 801702c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801702e:	68fb      	ldr	r3, [r7, #12]
 8017030:	011b      	lsls	r3, r3, #4
 8017032:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017034:	7dfb      	ldrb	r3, [r7, #23]
 8017036:	005b      	lsls	r3, r3, #1
 8017038:	3301      	adds	r3, #1
 801703a:	68ba      	ldr	r2, [r7, #8]
 801703c:	4413      	add	r3, r2
 801703e:	2200      	movs	r2, #0
 8017040:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017042:	7dfb      	ldrb	r3, [r7, #23]
 8017044:	3301      	adds	r3, #1
 8017046:	75fb      	strb	r3, [r7, #23]
 8017048:	7dfa      	ldrb	r2, [r7, #23]
 801704a:	79fb      	ldrb	r3, [r7, #7]
 801704c:	429a      	cmp	r2, r3
 801704e:	d3d3      	bcc.n	8016ff8 <IntToUnicode+0x18>
  }
}
 8017050:	bf00      	nop
 8017052:	bf00      	nop
 8017054:	371c      	adds	r7, #28
 8017056:	46bd      	mov	sp, r7
 8017058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801705c:	4770      	bx	lr

0801705e <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801705e:	b480      	push	{r7}
 8017060:	b083      	sub	sp, #12
 8017062:	af00      	add	r7, sp, #0
 8017064:	4603      	mov	r3, r0
 8017066:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 8017068:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801706a:	4618      	mov	r0, r3
 801706c:	370c      	adds	r7, #12
 801706e:	46bd      	mov	sp, r7
 8017070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017074:	4770      	bx	lr
	...

08017078 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8017078:	b580      	push	{r7, lr}
 801707a:	b08e      	sub	sp, #56	; 0x38
 801707c:	af00      	add	r7, sp, #0
 801707e:	4603      	mov	r3, r0
 8017080:	60b9      	str	r1, [r7, #8]
 8017082:	607a      	str	r2, [r7, #4]
 8017084:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
		HAL_SD_CardInfoTypeDef info;

	  int8_t ret = -1;
 8017086:	23ff      	movs	r3, #255	; 0xff
 8017088:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd, &info);
 801708c:	f107 0314 	add.w	r3, r7, #20
 8017090:	4619      	mov	r1, r3
 8017092:	480a      	ldr	r0, [pc, #40]	; (80170bc <STORAGE_GetCapacity_FS+0x44>)
 8017094:	f7f2 fe9c 	bl	8009dd0 <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 8017098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801709a:	1e5a      	subs	r2, r3, #1
 801709c:	68bb      	ldr	r3, [r7, #8]
 801709e:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 80170a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170a2:	b29a      	uxth	r2, r3
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 80170a8:	2300      	movs	r3, #0
 80170aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 80170ae:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 80170b2:	4618      	mov	r0, r3
 80170b4:	3738      	adds	r7, #56	; 0x38
 80170b6:	46bd      	mov	sp, r7
 80170b8:	bd80      	pop	{r7, pc}
 80170ba:	bf00      	nop
 80170bc:	20005cec 	.word	0x20005cec

080170c0 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80170c0:	b480      	push	{r7}
 80170c2:	b083      	sub	sp, #12
 80170c4:	af00      	add	r7, sp, #0
 80170c6:	4603      	mov	r3, r0
 80170c8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 80170ca:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80170cc:	4618      	mov	r0, r3
 80170ce:	370c      	adds	r7, #12
 80170d0:	46bd      	mov	sp, r7
 80170d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170d6:	4770      	bx	lr

080170d8 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80170d8:	b480      	push	{r7}
 80170da:	b083      	sub	sp, #12
 80170dc:	af00      	add	r7, sp, #0
 80170de:	4603      	mov	r3, r0
 80170e0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 80170e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80170e4:	4618      	mov	r0, r3
 80170e6:	370c      	adds	r7, #12
 80170e8:	46bd      	mov	sp, r7
 80170ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ee:	4770      	bx	lr

080170f0 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80170f0:	b580      	push	{r7, lr}
 80170f2:	b088      	sub	sp, #32
 80170f4:	af02      	add	r7, sp, #8
 80170f6:	60b9      	str	r1, [r7, #8]
 80170f8:	607a      	str	r2, [r7, #4]
 80170fa:	461a      	mov	r2, r3
 80170fc:	4603      	mov	r3, r0
 80170fe:	73fb      	strb	r3, [r7, #15]
 8017100:	4613      	mov	r3, r2
 8017102:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	 int8_t ret = -1;
 8017104:	23ff      	movs	r3, #255	; 0xff
 8017106:	75fb      	strb	r3, [r7, #23]

	  HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8017108:	89bb      	ldrh	r3, [r7, #12]
 801710a:	f04f 32ff 	mov.w	r2, #4294967295
 801710e:	9200      	str	r2, [sp, #0]
 8017110:	687a      	ldr	r2, [r7, #4]
 8017112:	68b9      	ldr	r1, [r7, #8]
 8017114:	4808      	ldr	r0, [pc, #32]	; (8017138 <STORAGE_Read_FS+0x48>)
 8017116:	f7f2 f953 	bl	80093c0 <HAL_SD_ReadBlocks>

	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 801711a:	bf00      	nop
 801711c:	4806      	ldr	r0, [pc, #24]	; (8017138 <STORAGE_Read_FS+0x48>)
 801711e:	f7f2 ff1d 	bl	8009f5c <HAL_SD_GetCardState>
 8017122:	4603      	mov	r3, r0
 8017124:	2b04      	cmp	r3, #4
 8017126:	d1f9      	bne.n	801711c <STORAGE_Read_FS+0x2c>
	  ret = 0;
 8017128:	2300      	movs	r3, #0
 801712a:	75fb      	strb	r3, [r7, #23]
	  return ret;
 801712c:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 8017130:	4618      	mov	r0, r3
 8017132:	3718      	adds	r7, #24
 8017134:	46bd      	mov	sp, r7
 8017136:	bd80      	pop	{r7, pc}
 8017138:	20005cec 	.word	0x20005cec

0801713c <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801713c:	b580      	push	{r7, lr}
 801713e:	b088      	sub	sp, #32
 8017140:	af02      	add	r7, sp, #8
 8017142:	60b9      	str	r1, [r7, #8]
 8017144:	607a      	str	r2, [r7, #4]
 8017146:	461a      	mov	r2, r3
 8017148:	4603      	mov	r3, r0
 801714a:	73fb      	strb	r3, [r7, #15]
 801714c:	4613      	mov	r3, r2
 801714e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t ret = -1;
 8017150:	23ff      	movs	r3, #255	; 0xff
 8017152:	75fb      	strb	r3, [r7, #23]

	   HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8017154:	89bb      	ldrh	r3, [r7, #12]
 8017156:	f04f 32ff 	mov.w	r2, #4294967295
 801715a:	9200      	str	r2, [sp, #0]
 801715c:	687a      	ldr	r2, [r7, #4]
 801715e:	68b9      	ldr	r1, [r7, #8]
 8017160:	4808      	ldr	r0, [pc, #32]	; (8017184 <STORAGE_Write_FS+0x48>)
 8017162:	f7f2 fb0b 	bl	800977c <HAL_SD_WriteBlocks>


	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 8017166:	bf00      	nop
 8017168:	4806      	ldr	r0, [pc, #24]	; (8017184 <STORAGE_Write_FS+0x48>)
 801716a:	f7f2 fef7 	bl	8009f5c <HAL_SD_GetCardState>
 801716e:	4603      	mov	r3, r0
 8017170:	2b04      	cmp	r3, #4
 8017172:	d1f9      	bne.n	8017168 <STORAGE_Write_FS+0x2c>
	  ret = 0;
 8017174:	2300      	movs	r3, #0
 8017176:	75fb      	strb	r3, [r7, #23]
	  return ret;
 8017178:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801717c:	4618      	mov	r0, r3
 801717e:	3718      	adds	r7, #24
 8017180:	46bd      	mov	sp, r7
 8017182:	bd80      	pop	{r7, pc}
 8017184:	20005cec 	.word	0x20005cec

08017188 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8017188:	b480      	push	{r7}
 801718a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801718c:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801718e:	4618      	mov	r0, r3
 8017190:	46bd      	mov	sp, r7
 8017192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017196:	4770      	bx	lr

08017198 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017198:	b580      	push	{r7, lr}
 801719a:	b0a0      	sub	sp, #128	; 0x80
 801719c:	af00      	add	r7, sp, #0
 801719e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80171a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80171a4:	2200      	movs	r2, #0
 80171a6:	601a      	str	r2, [r3, #0]
 80171a8:	605a      	str	r2, [r3, #4]
 80171aa:	609a      	str	r2, [r3, #8]
 80171ac:	60da      	str	r2, [r3, #12]
 80171ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80171b0:	f107 0310 	add.w	r3, r7, #16
 80171b4:	225c      	movs	r2, #92	; 0x5c
 80171b6:	2100      	movs	r1, #0
 80171b8:	4618      	mov	r0, r3
 80171ba:	f001 fa01 	bl	80185c0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	681b      	ldr	r3, [r3, #0]
 80171c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80171c6:	d149      	bne.n	801725c <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80171c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80171cc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80171ce:	2300      	movs	r3, #0
 80171d0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80171d2:	f107 0310 	add.w	r3, r7, #16
 80171d6:	4618      	mov	r0, r3
 80171d8:	f7f1 f84a 	bl	8008270 <HAL_RCCEx_PeriphCLKConfig>
 80171dc:	4603      	mov	r3, r0
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d001      	beq.n	80171e6 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80171e2:	f7eb fd69 	bl	8002cb8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80171e6:	2300      	movs	r3, #0
 80171e8:	60fb      	str	r3, [r7, #12]
 80171ea:	4b1e      	ldr	r3, [pc, #120]	; (8017264 <HAL_PCD_MspInit+0xcc>)
 80171ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80171ee:	4a1d      	ldr	r2, [pc, #116]	; (8017264 <HAL_PCD_MspInit+0xcc>)
 80171f0:	f043 0301 	orr.w	r3, r3, #1
 80171f4:	6313      	str	r3, [r2, #48]	; 0x30
 80171f6:	4b1b      	ldr	r3, [pc, #108]	; (8017264 <HAL_PCD_MspInit+0xcc>)
 80171f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80171fa:	f003 0301 	and.w	r3, r3, #1
 80171fe:	60fb      	str	r3, [r7, #12]
 8017200:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8017202:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8017206:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017208:	2302      	movs	r3, #2
 801720a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801720c:	2300      	movs	r3, #0
 801720e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017210:	2303      	movs	r3, #3
 8017212:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8017214:	230a      	movs	r3, #10
 8017216:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017218:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801721c:	4619      	mov	r1, r3
 801721e:	4812      	ldr	r0, [pc, #72]	; (8017268 <HAL_PCD_MspInit+0xd0>)
 8017220:	f7ee fa9a 	bl	8005758 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017224:	4b0f      	ldr	r3, [pc, #60]	; (8017264 <HAL_PCD_MspInit+0xcc>)
 8017226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017228:	4a0e      	ldr	r2, [pc, #56]	; (8017264 <HAL_PCD_MspInit+0xcc>)
 801722a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801722e:	6353      	str	r3, [r2, #52]	; 0x34
 8017230:	2300      	movs	r3, #0
 8017232:	60bb      	str	r3, [r7, #8]
 8017234:	4b0b      	ldr	r3, [pc, #44]	; (8017264 <HAL_PCD_MspInit+0xcc>)
 8017236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017238:	4a0a      	ldr	r2, [pc, #40]	; (8017264 <HAL_PCD_MspInit+0xcc>)
 801723a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801723e:	6453      	str	r3, [r2, #68]	; 0x44
 8017240:	4b08      	ldr	r3, [pc, #32]	; (8017264 <HAL_PCD_MspInit+0xcc>)
 8017242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017244:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017248:	60bb      	str	r3, [r7, #8]
 801724a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801724c:	2200      	movs	r2, #0
 801724e:	2105      	movs	r1, #5
 8017250:	2043      	movs	r0, #67	; 0x43
 8017252:	f7ed fe77 	bl	8004f44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017256:	2043      	movs	r0, #67	; 0x43
 8017258:	f7ed fe90 	bl	8004f7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801725c:	bf00      	nop
 801725e:	3780      	adds	r7, #128	; 0x80
 8017260:	46bd      	mov	sp, r7
 8017262:	bd80      	pop	{r7, pc}
 8017264:	40023800 	.word	0x40023800
 8017268:	40020000 	.word	0x40020000

0801726c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801726c:	b580      	push	{r7, lr}
 801726e:	b082      	sub	sp, #8
 8017270:	af00      	add	r7, sp, #0
 8017272:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8017280:	4619      	mov	r1, r3
 8017282:	4610      	mov	r0, r2
 8017284:	f7f9 f87a 	bl	801037c <USBD_LL_SetupStage>
}
 8017288:	bf00      	nop
 801728a:	3708      	adds	r7, #8
 801728c:	46bd      	mov	sp, r7
 801728e:	bd80      	pop	{r7, pc}

08017290 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017290:	b580      	push	{r7, lr}
 8017292:	b082      	sub	sp, #8
 8017294:	af00      	add	r7, sp, #0
 8017296:	6078      	str	r0, [r7, #4]
 8017298:	460b      	mov	r3, r1
 801729a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80172a2:	78fa      	ldrb	r2, [r7, #3]
 80172a4:	6879      	ldr	r1, [r7, #4]
 80172a6:	4613      	mov	r3, r2
 80172a8:	00db      	lsls	r3, r3, #3
 80172aa:	4413      	add	r3, r2
 80172ac:	009b      	lsls	r3, r3, #2
 80172ae:	440b      	add	r3, r1
 80172b0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80172b4:	681a      	ldr	r2, [r3, #0]
 80172b6:	78fb      	ldrb	r3, [r7, #3]
 80172b8:	4619      	mov	r1, r3
 80172ba:	f7f9 f8b4 	bl	8010426 <USBD_LL_DataOutStage>
}
 80172be:	bf00      	nop
 80172c0:	3708      	adds	r7, #8
 80172c2:	46bd      	mov	sp, r7
 80172c4:	bd80      	pop	{r7, pc}

080172c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80172c6:	b580      	push	{r7, lr}
 80172c8:	b082      	sub	sp, #8
 80172ca:	af00      	add	r7, sp, #0
 80172cc:	6078      	str	r0, [r7, #4]
 80172ce:	460b      	mov	r3, r1
 80172d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80172d8:	78fa      	ldrb	r2, [r7, #3]
 80172da:	6879      	ldr	r1, [r7, #4]
 80172dc:	4613      	mov	r3, r2
 80172de:	00db      	lsls	r3, r3, #3
 80172e0:	4413      	add	r3, r2
 80172e2:	009b      	lsls	r3, r3, #2
 80172e4:	440b      	add	r3, r1
 80172e6:	334c      	adds	r3, #76	; 0x4c
 80172e8:	681a      	ldr	r2, [r3, #0]
 80172ea:	78fb      	ldrb	r3, [r7, #3]
 80172ec:	4619      	mov	r1, r3
 80172ee:	f7f9 f94d 	bl	801058c <USBD_LL_DataInStage>
}
 80172f2:	bf00      	nop
 80172f4:	3708      	adds	r7, #8
 80172f6:	46bd      	mov	sp, r7
 80172f8:	bd80      	pop	{r7, pc}

080172fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80172fa:	b580      	push	{r7, lr}
 80172fc:	b082      	sub	sp, #8
 80172fe:	af00      	add	r7, sp, #0
 8017300:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017308:	4618      	mov	r0, r3
 801730a:	f7f9 fa81 	bl	8010810 <USBD_LL_SOF>
}
 801730e:	bf00      	nop
 8017310:	3708      	adds	r7, #8
 8017312:	46bd      	mov	sp, r7
 8017314:	bd80      	pop	{r7, pc}

08017316 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017316:	b580      	push	{r7, lr}
 8017318:	b084      	sub	sp, #16
 801731a:	af00      	add	r7, sp, #0
 801731c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801731e:	2301      	movs	r3, #1
 8017320:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	68db      	ldr	r3, [r3, #12]
 8017326:	2b00      	cmp	r3, #0
 8017328:	d102      	bne.n	8017330 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801732a:	2300      	movs	r3, #0
 801732c:	73fb      	strb	r3, [r7, #15]
 801732e:	e008      	b.n	8017342 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	68db      	ldr	r3, [r3, #12]
 8017334:	2b02      	cmp	r3, #2
 8017336:	d102      	bne.n	801733e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017338:	2301      	movs	r3, #1
 801733a:	73fb      	strb	r3, [r7, #15]
 801733c:	e001      	b.n	8017342 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801733e:	f7eb fcbb 	bl	8002cb8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017348:	7bfa      	ldrb	r2, [r7, #15]
 801734a:	4611      	mov	r1, r2
 801734c:	4618      	mov	r0, r3
 801734e:	f7f9 fa21 	bl	8010794 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017358:	4618      	mov	r0, r3
 801735a:	f7f9 f9c9 	bl	80106f0 <USBD_LL_Reset>
}
 801735e:	bf00      	nop
 8017360:	3710      	adds	r7, #16
 8017362:	46bd      	mov	sp, r7
 8017364:	bd80      	pop	{r7, pc}
	...

08017368 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017368:	b580      	push	{r7, lr}
 801736a:	b082      	sub	sp, #8
 801736c:	af00      	add	r7, sp, #0
 801736e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017376:	4618      	mov	r0, r3
 8017378:	f7f9 fa1c 	bl	80107b4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	681b      	ldr	r3, [r3, #0]
 8017380:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017384:	681b      	ldr	r3, [r3, #0]
 8017386:	687a      	ldr	r2, [r7, #4]
 8017388:	6812      	ldr	r2, [r2, #0]
 801738a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801738e:	f043 0301 	orr.w	r3, r3, #1
 8017392:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	6a1b      	ldr	r3, [r3, #32]
 8017398:	2b00      	cmp	r3, #0
 801739a:	d005      	beq.n	80173a8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801739c:	4b04      	ldr	r3, [pc, #16]	; (80173b0 <HAL_PCD_SuspendCallback+0x48>)
 801739e:	691b      	ldr	r3, [r3, #16]
 80173a0:	4a03      	ldr	r2, [pc, #12]	; (80173b0 <HAL_PCD_SuspendCallback+0x48>)
 80173a2:	f043 0306 	orr.w	r3, r3, #6
 80173a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80173a8:	bf00      	nop
 80173aa:	3708      	adds	r7, #8
 80173ac:	46bd      	mov	sp, r7
 80173ae:	bd80      	pop	{r7, pc}
 80173b0:	e000ed00 	.word	0xe000ed00

080173b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80173b4:	b580      	push	{r7, lr}
 80173b6:	b082      	sub	sp, #8
 80173b8:	af00      	add	r7, sp, #0
 80173ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80173c2:	4618      	mov	r0, r3
 80173c4:	f7f9 fa0c 	bl	80107e0 <USBD_LL_Resume>
}
 80173c8:	bf00      	nop
 80173ca:	3708      	adds	r7, #8
 80173cc:	46bd      	mov	sp, r7
 80173ce:	bd80      	pop	{r7, pc}

080173d0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80173d0:	b580      	push	{r7, lr}
 80173d2:	b082      	sub	sp, #8
 80173d4:	af00      	add	r7, sp, #0
 80173d6:	6078      	str	r0, [r7, #4]
 80173d8:	460b      	mov	r3, r1
 80173da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80173e2:	78fa      	ldrb	r2, [r7, #3]
 80173e4:	4611      	mov	r1, r2
 80173e6:	4618      	mov	r0, r3
 80173e8:	f7f9 fa64 	bl	80108b4 <USBD_LL_IsoOUTIncomplete>
}
 80173ec:	bf00      	nop
 80173ee:	3708      	adds	r7, #8
 80173f0:	46bd      	mov	sp, r7
 80173f2:	bd80      	pop	{r7, pc}

080173f4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80173f4:	b580      	push	{r7, lr}
 80173f6:	b082      	sub	sp, #8
 80173f8:	af00      	add	r7, sp, #0
 80173fa:	6078      	str	r0, [r7, #4]
 80173fc:	460b      	mov	r3, r1
 80173fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017406:	78fa      	ldrb	r2, [r7, #3]
 8017408:	4611      	mov	r1, r2
 801740a:	4618      	mov	r0, r3
 801740c:	f7f9 fa20 	bl	8010850 <USBD_LL_IsoINIncomplete>
}
 8017410:	bf00      	nop
 8017412:	3708      	adds	r7, #8
 8017414:	46bd      	mov	sp, r7
 8017416:	bd80      	pop	{r7, pc}

08017418 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017418:	b580      	push	{r7, lr}
 801741a:	b082      	sub	sp, #8
 801741c:	af00      	add	r7, sp, #0
 801741e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017426:	4618      	mov	r0, r3
 8017428:	f7f9 fa76 	bl	8010918 <USBD_LL_DevConnected>
}
 801742c:	bf00      	nop
 801742e:	3708      	adds	r7, #8
 8017430:	46bd      	mov	sp, r7
 8017432:	bd80      	pop	{r7, pc}

08017434 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017434:	b580      	push	{r7, lr}
 8017436:	b082      	sub	sp, #8
 8017438:	af00      	add	r7, sp, #0
 801743a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017442:	4618      	mov	r0, r3
 8017444:	f7f9 fa73 	bl	801092e <USBD_LL_DevDisconnected>
}
 8017448:	bf00      	nop
 801744a:	3708      	adds	r7, #8
 801744c:	46bd      	mov	sp, r7
 801744e:	bd80      	pop	{r7, pc}

08017450 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017450:	b580      	push	{r7, lr}
 8017452:	b082      	sub	sp, #8
 8017454:	af00      	add	r7, sp, #0
 8017456:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	781b      	ldrb	r3, [r3, #0]
 801745c:	2b00      	cmp	r3, #0
 801745e:	d13c      	bne.n	80174da <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8017460:	4a20      	ldr	r2, [pc, #128]	; (80174e4 <USBD_LL_Init+0x94>)
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	4a1e      	ldr	r2, [pc, #120]	; (80174e4 <USBD_LL_Init+0x94>)
 801746c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017470:	4b1c      	ldr	r3, [pc, #112]	; (80174e4 <USBD_LL_Init+0x94>)
 8017472:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8017476:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8017478:	4b1a      	ldr	r3, [pc, #104]	; (80174e4 <USBD_LL_Init+0x94>)
 801747a:	2206      	movs	r2, #6
 801747c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801747e:	4b19      	ldr	r3, [pc, #100]	; (80174e4 <USBD_LL_Init+0x94>)
 8017480:	2202      	movs	r2, #2
 8017482:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017484:	4b17      	ldr	r3, [pc, #92]	; (80174e4 <USBD_LL_Init+0x94>)
 8017486:	2200      	movs	r2, #0
 8017488:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801748a:	4b16      	ldr	r3, [pc, #88]	; (80174e4 <USBD_LL_Init+0x94>)
 801748c:	2202      	movs	r2, #2
 801748e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017490:	4b14      	ldr	r3, [pc, #80]	; (80174e4 <USBD_LL_Init+0x94>)
 8017492:	2200      	movs	r2, #0
 8017494:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8017496:	4b13      	ldr	r3, [pc, #76]	; (80174e4 <USBD_LL_Init+0x94>)
 8017498:	2200      	movs	r2, #0
 801749a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801749c:	4b11      	ldr	r3, [pc, #68]	; (80174e4 <USBD_LL_Init+0x94>)
 801749e:	2200      	movs	r2, #0
 80174a0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80174a2:	4b10      	ldr	r3, [pc, #64]	; (80174e4 <USBD_LL_Init+0x94>)
 80174a4:	2200      	movs	r2, #0
 80174a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80174a8:	4b0e      	ldr	r3, [pc, #56]	; (80174e4 <USBD_LL_Init+0x94>)
 80174aa:	2200      	movs	r2, #0
 80174ac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80174ae:	480d      	ldr	r0, [pc, #52]	; (80174e4 <USBD_LL_Init+0x94>)
 80174b0:	f7ef faaf 	bl	8006a12 <HAL_PCD_Init>
 80174b4:	4603      	mov	r3, r0
 80174b6:	2b00      	cmp	r3, #0
 80174b8:	d001      	beq.n	80174be <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80174ba:	f7eb fbfd 	bl	8002cb8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80174be:	2180      	movs	r1, #128	; 0x80
 80174c0:	4808      	ldr	r0, [pc, #32]	; (80174e4 <USBD_LL_Init+0x94>)
 80174c2:	f7f0 fd68 	bl	8007f96 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80174c6:	2240      	movs	r2, #64	; 0x40
 80174c8:	2100      	movs	r1, #0
 80174ca:	4806      	ldr	r0, [pc, #24]	; (80174e4 <USBD_LL_Init+0x94>)
 80174cc:	f7f0 fd1c 	bl	8007f08 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80174d0:	2280      	movs	r2, #128	; 0x80
 80174d2:	2101      	movs	r1, #1
 80174d4:	4803      	ldr	r0, [pc, #12]	; (80174e4 <USBD_LL_Init+0x94>)
 80174d6:	f7f0 fd17 	bl	8007f08 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80174da:	2300      	movs	r3, #0
}
 80174dc:	4618      	mov	r0, r3
 80174de:	3708      	adds	r7, #8
 80174e0:	46bd      	mov	sp, r7
 80174e2:	bd80      	pop	{r7, pc}
 80174e4:	2000a9bc 	.word	0x2000a9bc

080174e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80174e8:	b580      	push	{r7, lr}
 80174ea:	b084      	sub	sp, #16
 80174ec:	af00      	add	r7, sp, #0
 80174ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80174f0:	2300      	movs	r3, #0
 80174f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80174f4:	2300      	movs	r3, #0
 80174f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80174fe:	4618      	mov	r0, r3
 8017500:	f7ef fbab 	bl	8006c5a <HAL_PCD_Start>
 8017504:	4603      	mov	r3, r0
 8017506:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017508:	7bfb      	ldrb	r3, [r7, #15]
 801750a:	4618      	mov	r0, r3
 801750c:	f000 f9b0 	bl	8017870 <USBD_Get_USB_Status>
 8017510:	4603      	mov	r3, r0
 8017512:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017514:	7bbb      	ldrb	r3, [r7, #14]
}
 8017516:	4618      	mov	r0, r3
 8017518:	3710      	adds	r7, #16
 801751a:	46bd      	mov	sp, r7
 801751c:	bd80      	pop	{r7, pc}

0801751e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801751e:	b580      	push	{r7, lr}
 8017520:	b084      	sub	sp, #16
 8017522:	af00      	add	r7, sp, #0
 8017524:	6078      	str	r0, [r7, #4]
 8017526:	4608      	mov	r0, r1
 8017528:	4611      	mov	r1, r2
 801752a:	461a      	mov	r2, r3
 801752c:	4603      	mov	r3, r0
 801752e:	70fb      	strb	r3, [r7, #3]
 8017530:	460b      	mov	r3, r1
 8017532:	70bb      	strb	r3, [r7, #2]
 8017534:	4613      	mov	r3, r2
 8017536:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017538:	2300      	movs	r3, #0
 801753a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801753c:	2300      	movs	r3, #0
 801753e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017546:	78bb      	ldrb	r3, [r7, #2]
 8017548:	883a      	ldrh	r2, [r7, #0]
 801754a:	78f9      	ldrb	r1, [r7, #3]
 801754c:	f7f0 f8a9 	bl	80076a2 <HAL_PCD_EP_Open>
 8017550:	4603      	mov	r3, r0
 8017552:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017554:	7bfb      	ldrb	r3, [r7, #15]
 8017556:	4618      	mov	r0, r3
 8017558:	f000 f98a 	bl	8017870 <USBD_Get_USB_Status>
 801755c:	4603      	mov	r3, r0
 801755e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017560:	7bbb      	ldrb	r3, [r7, #14]
}
 8017562:	4618      	mov	r0, r3
 8017564:	3710      	adds	r7, #16
 8017566:	46bd      	mov	sp, r7
 8017568:	bd80      	pop	{r7, pc}

0801756a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801756a:	b580      	push	{r7, lr}
 801756c:	b084      	sub	sp, #16
 801756e:	af00      	add	r7, sp, #0
 8017570:	6078      	str	r0, [r7, #4]
 8017572:	460b      	mov	r3, r1
 8017574:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017576:	2300      	movs	r3, #0
 8017578:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801757a:	2300      	movs	r3, #0
 801757c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017584:	78fa      	ldrb	r2, [r7, #3]
 8017586:	4611      	mov	r1, r2
 8017588:	4618      	mov	r0, r3
 801758a:	f7f0 f8f2 	bl	8007772 <HAL_PCD_EP_Close>
 801758e:	4603      	mov	r3, r0
 8017590:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017592:	7bfb      	ldrb	r3, [r7, #15]
 8017594:	4618      	mov	r0, r3
 8017596:	f000 f96b 	bl	8017870 <USBD_Get_USB_Status>
 801759a:	4603      	mov	r3, r0
 801759c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801759e:	7bbb      	ldrb	r3, [r7, #14]
}
 80175a0:	4618      	mov	r0, r3
 80175a2:	3710      	adds	r7, #16
 80175a4:	46bd      	mov	sp, r7
 80175a6:	bd80      	pop	{r7, pc}

080175a8 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80175a8:	b580      	push	{r7, lr}
 80175aa:	b084      	sub	sp, #16
 80175ac:	af00      	add	r7, sp, #0
 80175ae:	6078      	str	r0, [r7, #4]
 80175b0:	460b      	mov	r3, r1
 80175b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80175b4:	2300      	movs	r3, #0
 80175b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80175b8:	2300      	movs	r3, #0
 80175ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80175c2:	78fa      	ldrb	r2, [r7, #3]
 80175c4:	4611      	mov	r1, r2
 80175c6:	4618      	mov	r0, r3
 80175c8:	f7f0 fab5 	bl	8007b36 <HAL_PCD_EP_Flush>
 80175cc:	4603      	mov	r3, r0
 80175ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80175d0:	7bfb      	ldrb	r3, [r7, #15]
 80175d2:	4618      	mov	r0, r3
 80175d4:	f000 f94c 	bl	8017870 <USBD_Get_USB_Status>
 80175d8:	4603      	mov	r3, r0
 80175da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80175dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80175de:	4618      	mov	r0, r3
 80175e0:	3710      	adds	r7, #16
 80175e2:	46bd      	mov	sp, r7
 80175e4:	bd80      	pop	{r7, pc}

080175e6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80175e6:	b580      	push	{r7, lr}
 80175e8:	b084      	sub	sp, #16
 80175ea:	af00      	add	r7, sp, #0
 80175ec:	6078      	str	r0, [r7, #4]
 80175ee:	460b      	mov	r3, r1
 80175f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80175f2:	2300      	movs	r3, #0
 80175f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80175f6:	2300      	movs	r3, #0
 80175f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017600:	78fa      	ldrb	r2, [r7, #3]
 8017602:	4611      	mov	r1, r2
 8017604:	4618      	mov	r0, r3
 8017606:	f7f0 f9ab 	bl	8007960 <HAL_PCD_EP_SetStall>
 801760a:	4603      	mov	r3, r0
 801760c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801760e:	7bfb      	ldrb	r3, [r7, #15]
 8017610:	4618      	mov	r0, r3
 8017612:	f000 f92d 	bl	8017870 <USBD_Get_USB_Status>
 8017616:	4603      	mov	r3, r0
 8017618:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801761a:	7bbb      	ldrb	r3, [r7, #14]
}
 801761c:	4618      	mov	r0, r3
 801761e:	3710      	adds	r7, #16
 8017620:	46bd      	mov	sp, r7
 8017622:	bd80      	pop	{r7, pc}

08017624 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017624:	b580      	push	{r7, lr}
 8017626:	b084      	sub	sp, #16
 8017628:	af00      	add	r7, sp, #0
 801762a:	6078      	str	r0, [r7, #4]
 801762c:	460b      	mov	r3, r1
 801762e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017630:	2300      	movs	r3, #0
 8017632:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017634:	2300      	movs	r3, #0
 8017636:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801763e:	78fa      	ldrb	r2, [r7, #3]
 8017640:	4611      	mov	r1, r2
 8017642:	4618      	mov	r0, r3
 8017644:	f7f0 f9f0 	bl	8007a28 <HAL_PCD_EP_ClrStall>
 8017648:	4603      	mov	r3, r0
 801764a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801764c:	7bfb      	ldrb	r3, [r7, #15]
 801764e:	4618      	mov	r0, r3
 8017650:	f000 f90e 	bl	8017870 <USBD_Get_USB_Status>
 8017654:	4603      	mov	r3, r0
 8017656:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017658:	7bbb      	ldrb	r3, [r7, #14]
}
 801765a:	4618      	mov	r0, r3
 801765c:	3710      	adds	r7, #16
 801765e:	46bd      	mov	sp, r7
 8017660:	bd80      	pop	{r7, pc}

08017662 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017662:	b480      	push	{r7}
 8017664:	b085      	sub	sp, #20
 8017666:	af00      	add	r7, sp, #0
 8017668:	6078      	str	r0, [r7, #4]
 801766a:	460b      	mov	r3, r1
 801766c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017674:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017676:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801767a:	2b00      	cmp	r3, #0
 801767c:	da0b      	bge.n	8017696 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801767e:	78fb      	ldrb	r3, [r7, #3]
 8017680:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017684:	68f9      	ldr	r1, [r7, #12]
 8017686:	4613      	mov	r3, r2
 8017688:	00db      	lsls	r3, r3, #3
 801768a:	4413      	add	r3, r2
 801768c:	009b      	lsls	r3, r3, #2
 801768e:	440b      	add	r3, r1
 8017690:	333e      	adds	r3, #62	; 0x3e
 8017692:	781b      	ldrb	r3, [r3, #0]
 8017694:	e00b      	b.n	80176ae <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017696:	78fb      	ldrb	r3, [r7, #3]
 8017698:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801769c:	68f9      	ldr	r1, [r7, #12]
 801769e:	4613      	mov	r3, r2
 80176a0:	00db      	lsls	r3, r3, #3
 80176a2:	4413      	add	r3, r2
 80176a4:	009b      	lsls	r3, r3, #2
 80176a6:	440b      	add	r3, r1
 80176a8:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80176ac:	781b      	ldrb	r3, [r3, #0]
  }
}
 80176ae:	4618      	mov	r0, r3
 80176b0:	3714      	adds	r7, #20
 80176b2:	46bd      	mov	sp, r7
 80176b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176b8:	4770      	bx	lr

080176ba <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80176ba:	b580      	push	{r7, lr}
 80176bc:	b084      	sub	sp, #16
 80176be:	af00      	add	r7, sp, #0
 80176c0:	6078      	str	r0, [r7, #4]
 80176c2:	460b      	mov	r3, r1
 80176c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80176c6:	2300      	movs	r3, #0
 80176c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80176ca:	2300      	movs	r3, #0
 80176cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80176d4:	78fa      	ldrb	r2, [r7, #3]
 80176d6:	4611      	mov	r1, r2
 80176d8:	4618      	mov	r0, r3
 80176da:	f7ef ffbd 	bl	8007658 <HAL_PCD_SetAddress>
 80176de:	4603      	mov	r3, r0
 80176e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80176e2:	7bfb      	ldrb	r3, [r7, #15]
 80176e4:	4618      	mov	r0, r3
 80176e6:	f000 f8c3 	bl	8017870 <USBD_Get_USB_Status>
 80176ea:	4603      	mov	r3, r0
 80176ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80176ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80176f0:	4618      	mov	r0, r3
 80176f2:	3710      	adds	r7, #16
 80176f4:	46bd      	mov	sp, r7
 80176f6:	bd80      	pop	{r7, pc}

080176f8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80176f8:	b580      	push	{r7, lr}
 80176fa:	b086      	sub	sp, #24
 80176fc:	af00      	add	r7, sp, #0
 80176fe:	60f8      	str	r0, [r7, #12]
 8017700:	607a      	str	r2, [r7, #4]
 8017702:	603b      	str	r3, [r7, #0]
 8017704:	460b      	mov	r3, r1
 8017706:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017708:	2300      	movs	r3, #0
 801770a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801770c:	2300      	movs	r3, #0
 801770e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017710:	68fb      	ldr	r3, [r7, #12]
 8017712:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017716:	7af9      	ldrb	r1, [r7, #11]
 8017718:	683b      	ldr	r3, [r7, #0]
 801771a:	687a      	ldr	r2, [r7, #4]
 801771c:	f7f0 f8d6 	bl	80078cc <HAL_PCD_EP_Transmit>
 8017720:	4603      	mov	r3, r0
 8017722:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017724:	7dfb      	ldrb	r3, [r7, #23]
 8017726:	4618      	mov	r0, r3
 8017728:	f000 f8a2 	bl	8017870 <USBD_Get_USB_Status>
 801772c:	4603      	mov	r3, r0
 801772e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017730:	7dbb      	ldrb	r3, [r7, #22]
}
 8017732:	4618      	mov	r0, r3
 8017734:	3718      	adds	r7, #24
 8017736:	46bd      	mov	sp, r7
 8017738:	bd80      	pop	{r7, pc}

0801773a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801773a:	b580      	push	{r7, lr}
 801773c:	b086      	sub	sp, #24
 801773e:	af00      	add	r7, sp, #0
 8017740:	60f8      	str	r0, [r7, #12]
 8017742:	607a      	str	r2, [r7, #4]
 8017744:	603b      	str	r3, [r7, #0]
 8017746:	460b      	mov	r3, r1
 8017748:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801774a:	2300      	movs	r3, #0
 801774c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801774e:	2300      	movs	r3, #0
 8017750:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017752:	68fb      	ldr	r3, [r7, #12]
 8017754:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017758:	7af9      	ldrb	r1, [r7, #11]
 801775a:	683b      	ldr	r3, [r7, #0]
 801775c:	687a      	ldr	r2, [r7, #4]
 801775e:	f7f0 f852 	bl	8007806 <HAL_PCD_EP_Receive>
 8017762:	4603      	mov	r3, r0
 8017764:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017766:	7dfb      	ldrb	r3, [r7, #23]
 8017768:	4618      	mov	r0, r3
 801776a:	f000 f881 	bl	8017870 <USBD_Get_USB_Status>
 801776e:	4603      	mov	r3, r0
 8017770:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017772:	7dbb      	ldrb	r3, [r7, #22]
}
 8017774:	4618      	mov	r0, r3
 8017776:	3718      	adds	r7, #24
 8017778:	46bd      	mov	sp, r7
 801777a:	bd80      	pop	{r7, pc}

0801777c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801777c:	b580      	push	{r7, lr}
 801777e:	b082      	sub	sp, #8
 8017780:	af00      	add	r7, sp, #0
 8017782:	6078      	str	r0, [r7, #4]
 8017784:	460b      	mov	r3, r1
 8017786:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801778e:	78fa      	ldrb	r2, [r7, #3]
 8017790:	4611      	mov	r1, r2
 8017792:	4618      	mov	r0, r3
 8017794:	f7f0 f882 	bl	800789c <HAL_PCD_EP_GetRxCount>
 8017798:	4603      	mov	r3, r0
}
 801779a:	4618      	mov	r0, r3
 801779c:	3708      	adds	r7, #8
 801779e:	46bd      	mov	sp, r7
 80177a0:	bd80      	pop	{r7, pc}
	...

080177a4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80177a4:	b580      	push	{r7, lr}
 80177a6:	b082      	sub	sp, #8
 80177a8:	af00      	add	r7, sp, #0
 80177aa:	6078      	str	r0, [r7, #4]
 80177ac:	460b      	mov	r3, r1
 80177ae:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80177b0:	78fb      	ldrb	r3, [r7, #3]
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d002      	beq.n	80177bc <HAL_PCDEx_LPM_Callback+0x18>
 80177b6:	2b01      	cmp	r3, #1
 80177b8:	d01f      	beq.n	80177fa <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80177ba:	e03b      	b.n	8017834 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	6a1b      	ldr	r3, [r3, #32]
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d007      	beq.n	80177d4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 80177c4:	f7eb f9fa 	bl	8002bbc <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80177c8:	4b1c      	ldr	r3, [pc, #112]	; (801783c <HAL_PCDEx_LPM_Callback+0x98>)
 80177ca:	691b      	ldr	r3, [r3, #16]
 80177cc:	4a1b      	ldr	r2, [pc, #108]	; (801783c <HAL_PCDEx_LPM_Callback+0x98>)
 80177ce:	f023 0306 	bic.w	r3, r3, #6
 80177d2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	681b      	ldr	r3, [r3, #0]
 80177d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80177dc:	681b      	ldr	r3, [r3, #0]
 80177de:	687a      	ldr	r2, [r7, #4]
 80177e0:	6812      	ldr	r2, [r2, #0]
 80177e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80177e6:	f023 0301 	bic.w	r3, r3, #1
 80177ea:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80177f2:	4618      	mov	r0, r3
 80177f4:	f7f8 fff4 	bl	80107e0 <USBD_LL_Resume>
    break;
 80177f8:	e01c      	b.n	8017834 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	681b      	ldr	r3, [r3, #0]
 80177fe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	687a      	ldr	r2, [r7, #4]
 8017806:	6812      	ldr	r2, [r2, #0]
 8017808:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801780c:	f043 0301 	orr.w	r3, r3, #1
 8017810:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017818:	4618      	mov	r0, r3
 801781a:	f7f8 ffcb 	bl	80107b4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	6a1b      	ldr	r3, [r3, #32]
 8017822:	2b00      	cmp	r3, #0
 8017824:	d005      	beq.n	8017832 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017826:	4b05      	ldr	r3, [pc, #20]	; (801783c <HAL_PCDEx_LPM_Callback+0x98>)
 8017828:	691b      	ldr	r3, [r3, #16]
 801782a:	4a04      	ldr	r2, [pc, #16]	; (801783c <HAL_PCDEx_LPM_Callback+0x98>)
 801782c:	f043 0306 	orr.w	r3, r3, #6
 8017830:	6113      	str	r3, [r2, #16]
    break;
 8017832:	bf00      	nop
}
 8017834:	bf00      	nop
 8017836:	3708      	adds	r7, #8
 8017838:	46bd      	mov	sp, r7
 801783a:	bd80      	pop	{r7, pc}
 801783c:	e000ed00 	.word	0xe000ed00

08017840 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017840:	b480      	push	{r7}
 8017842:	b083      	sub	sp, #12
 8017844:	af00      	add	r7, sp, #0
 8017846:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017848:	4b03      	ldr	r3, [pc, #12]	; (8017858 <USBD_static_malloc+0x18>)
}
 801784a:	4618      	mov	r0, r3
 801784c:	370c      	adds	r7, #12
 801784e:	46bd      	mov	sp, r7
 8017850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017854:	4770      	bx	lr
 8017856:	bf00      	nop
 8017858:	2000aec8 	.word	0x2000aec8

0801785c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801785c:	b480      	push	{r7}
 801785e:	b083      	sub	sp, #12
 8017860:	af00      	add	r7, sp, #0
 8017862:	6078      	str	r0, [r7, #4]

}
 8017864:	bf00      	nop
 8017866:	370c      	adds	r7, #12
 8017868:	46bd      	mov	sp, r7
 801786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801786e:	4770      	bx	lr

08017870 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017870:	b480      	push	{r7}
 8017872:	b085      	sub	sp, #20
 8017874:	af00      	add	r7, sp, #0
 8017876:	4603      	mov	r3, r0
 8017878:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801787a:	2300      	movs	r3, #0
 801787c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801787e:	79fb      	ldrb	r3, [r7, #7]
 8017880:	2b03      	cmp	r3, #3
 8017882:	d817      	bhi.n	80178b4 <USBD_Get_USB_Status+0x44>
 8017884:	a201      	add	r2, pc, #4	; (adr r2, 801788c <USBD_Get_USB_Status+0x1c>)
 8017886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801788a:	bf00      	nop
 801788c:	0801789d 	.word	0x0801789d
 8017890:	080178a3 	.word	0x080178a3
 8017894:	080178a9 	.word	0x080178a9
 8017898:	080178af 	.word	0x080178af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801789c:	2300      	movs	r3, #0
 801789e:	73fb      	strb	r3, [r7, #15]
    break;
 80178a0:	e00b      	b.n	80178ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80178a2:	2303      	movs	r3, #3
 80178a4:	73fb      	strb	r3, [r7, #15]
    break;
 80178a6:	e008      	b.n	80178ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80178a8:	2301      	movs	r3, #1
 80178aa:	73fb      	strb	r3, [r7, #15]
    break;
 80178ac:	e005      	b.n	80178ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80178ae:	2303      	movs	r3, #3
 80178b0:	73fb      	strb	r3, [r7, #15]
    break;
 80178b2:	e002      	b.n	80178ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80178b4:	2303      	movs	r3, #3
 80178b6:	73fb      	strb	r3, [r7, #15]
    break;
 80178b8:	bf00      	nop
  }
  return usb_status;
 80178ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80178bc:	4618      	mov	r0, r3
 80178be:	3714      	adds	r7, #20
 80178c0:	46bd      	mov	sp, r7
 80178c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178c6:	4770      	bx	lr

080178c8 <__cvt>:
 80178c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80178cc:	ec55 4b10 	vmov	r4, r5, d0
 80178d0:	2d00      	cmp	r5, #0
 80178d2:	460e      	mov	r6, r1
 80178d4:	4619      	mov	r1, r3
 80178d6:	462b      	mov	r3, r5
 80178d8:	bfbb      	ittet	lt
 80178da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80178de:	461d      	movlt	r5, r3
 80178e0:	2300      	movge	r3, #0
 80178e2:	232d      	movlt	r3, #45	; 0x2d
 80178e4:	700b      	strb	r3, [r1, #0]
 80178e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80178e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80178ec:	4691      	mov	r9, r2
 80178ee:	f023 0820 	bic.w	r8, r3, #32
 80178f2:	bfbc      	itt	lt
 80178f4:	4622      	movlt	r2, r4
 80178f6:	4614      	movlt	r4, r2
 80178f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80178fc:	d005      	beq.n	801790a <__cvt+0x42>
 80178fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8017902:	d100      	bne.n	8017906 <__cvt+0x3e>
 8017904:	3601      	adds	r6, #1
 8017906:	2102      	movs	r1, #2
 8017908:	e000      	b.n	801790c <__cvt+0x44>
 801790a:	2103      	movs	r1, #3
 801790c:	ab03      	add	r3, sp, #12
 801790e:	9301      	str	r3, [sp, #4]
 8017910:	ab02      	add	r3, sp, #8
 8017912:	9300      	str	r3, [sp, #0]
 8017914:	ec45 4b10 	vmov	d0, r4, r5
 8017918:	4653      	mov	r3, sl
 801791a:	4632      	mov	r2, r6
 801791c:	f000 ffd0 	bl	80188c0 <_dtoa_r>
 8017920:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8017924:	4607      	mov	r7, r0
 8017926:	d102      	bne.n	801792e <__cvt+0x66>
 8017928:	f019 0f01 	tst.w	r9, #1
 801792c:	d022      	beq.n	8017974 <__cvt+0xac>
 801792e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8017932:	eb07 0906 	add.w	r9, r7, r6
 8017936:	d110      	bne.n	801795a <__cvt+0x92>
 8017938:	783b      	ldrb	r3, [r7, #0]
 801793a:	2b30      	cmp	r3, #48	; 0x30
 801793c:	d10a      	bne.n	8017954 <__cvt+0x8c>
 801793e:	2200      	movs	r2, #0
 8017940:	2300      	movs	r3, #0
 8017942:	4620      	mov	r0, r4
 8017944:	4629      	mov	r1, r5
 8017946:	f7e9 f8ef 	bl	8000b28 <__aeabi_dcmpeq>
 801794a:	b918      	cbnz	r0, 8017954 <__cvt+0x8c>
 801794c:	f1c6 0601 	rsb	r6, r6, #1
 8017950:	f8ca 6000 	str.w	r6, [sl]
 8017954:	f8da 3000 	ldr.w	r3, [sl]
 8017958:	4499      	add	r9, r3
 801795a:	2200      	movs	r2, #0
 801795c:	2300      	movs	r3, #0
 801795e:	4620      	mov	r0, r4
 8017960:	4629      	mov	r1, r5
 8017962:	f7e9 f8e1 	bl	8000b28 <__aeabi_dcmpeq>
 8017966:	b108      	cbz	r0, 801796c <__cvt+0xa4>
 8017968:	f8cd 900c 	str.w	r9, [sp, #12]
 801796c:	2230      	movs	r2, #48	; 0x30
 801796e:	9b03      	ldr	r3, [sp, #12]
 8017970:	454b      	cmp	r3, r9
 8017972:	d307      	bcc.n	8017984 <__cvt+0xbc>
 8017974:	9b03      	ldr	r3, [sp, #12]
 8017976:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017978:	1bdb      	subs	r3, r3, r7
 801797a:	4638      	mov	r0, r7
 801797c:	6013      	str	r3, [r2, #0]
 801797e:	b004      	add	sp, #16
 8017980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017984:	1c59      	adds	r1, r3, #1
 8017986:	9103      	str	r1, [sp, #12]
 8017988:	701a      	strb	r2, [r3, #0]
 801798a:	e7f0      	b.n	801796e <__cvt+0xa6>

0801798c <__exponent>:
 801798c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801798e:	4603      	mov	r3, r0
 8017990:	2900      	cmp	r1, #0
 8017992:	bfb8      	it	lt
 8017994:	4249      	neglt	r1, r1
 8017996:	f803 2b02 	strb.w	r2, [r3], #2
 801799a:	bfb4      	ite	lt
 801799c:	222d      	movlt	r2, #45	; 0x2d
 801799e:	222b      	movge	r2, #43	; 0x2b
 80179a0:	2909      	cmp	r1, #9
 80179a2:	7042      	strb	r2, [r0, #1]
 80179a4:	dd2a      	ble.n	80179fc <__exponent+0x70>
 80179a6:	f10d 0207 	add.w	r2, sp, #7
 80179aa:	4617      	mov	r7, r2
 80179ac:	260a      	movs	r6, #10
 80179ae:	4694      	mov	ip, r2
 80179b0:	fb91 f5f6 	sdiv	r5, r1, r6
 80179b4:	fb06 1415 	mls	r4, r6, r5, r1
 80179b8:	3430      	adds	r4, #48	; 0x30
 80179ba:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80179be:	460c      	mov	r4, r1
 80179c0:	2c63      	cmp	r4, #99	; 0x63
 80179c2:	f102 32ff 	add.w	r2, r2, #4294967295
 80179c6:	4629      	mov	r1, r5
 80179c8:	dcf1      	bgt.n	80179ae <__exponent+0x22>
 80179ca:	3130      	adds	r1, #48	; 0x30
 80179cc:	f1ac 0402 	sub.w	r4, ip, #2
 80179d0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80179d4:	1c41      	adds	r1, r0, #1
 80179d6:	4622      	mov	r2, r4
 80179d8:	42ba      	cmp	r2, r7
 80179da:	d30a      	bcc.n	80179f2 <__exponent+0x66>
 80179dc:	f10d 0209 	add.w	r2, sp, #9
 80179e0:	eba2 020c 	sub.w	r2, r2, ip
 80179e4:	42bc      	cmp	r4, r7
 80179e6:	bf88      	it	hi
 80179e8:	2200      	movhi	r2, #0
 80179ea:	4413      	add	r3, r2
 80179ec:	1a18      	subs	r0, r3, r0
 80179ee:	b003      	add	sp, #12
 80179f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80179f2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80179f6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80179fa:	e7ed      	b.n	80179d8 <__exponent+0x4c>
 80179fc:	2330      	movs	r3, #48	; 0x30
 80179fe:	3130      	adds	r1, #48	; 0x30
 8017a00:	7083      	strb	r3, [r0, #2]
 8017a02:	70c1      	strb	r1, [r0, #3]
 8017a04:	1d03      	adds	r3, r0, #4
 8017a06:	e7f1      	b.n	80179ec <__exponent+0x60>

08017a08 <_printf_float>:
 8017a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a0c:	ed2d 8b02 	vpush	{d8}
 8017a10:	b08d      	sub	sp, #52	; 0x34
 8017a12:	460c      	mov	r4, r1
 8017a14:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8017a18:	4616      	mov	r6, r2
 8017a1a:	461f      	mov	r7, r3
 8017a1c:	4605      	mov	r5, r0
 8017a1e:	f000 fdeb 	bl	80185f8 <_localeconv_r>
 8017a22:	f8d0 a000 	ldr.w	sl, [r0]
 8017a26:	4650      	mov	r0, sl
 8017a28:	f7e8 fc52 	bl	80002d0 <strlen>
 8017a2c:	2300      	movs	r3, #0
 8017a2e:	930a      	str	r3, [sp, #40]	; 0x28
 8017a30:	6823      	ldr	r3, [r4, #0]
 8017a32:	9305      	str	r3, [sp, #20]
 8017a34:	f8d8 3000 	ldr.w	r3, [r8]
 8017a38:	f894 b018 	ldrb.w	fp, [r4, #24]
 8017a3c:	3307      	adds	r3, #7
 8017a3e:	f023 0307 	bic.w	r3, r3, #7
 8017a42:	f103 0208 	add.w	r2, r3, #8
 8017a46:	f8c8 2000 	str.w	r2, [r8]
 8017a4a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017a4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017a52:	9307      	str	r3, [sp, #28]
 8017a54:	f8cd 8018 	str.w	r8, [sp, #24]
 8017a58:	ee08 0a10 	vmov	s16, r0
 8017a5c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8017a60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017a64:	4b9e      	ldr	r3, [pc, #632]	; (8017ce0 <_printf_float+0x2d8>)
 8017a66:	f04f 32ff 	mov.w	r2, #4294967295
 8017a6a:	f7e9 f88f 	bl	8000b8c <__aeabi_dcmpun>
 8017a6e:	bb88      	cbnz	r0, 8017ad4 <_printf_float+0xcc>
 8017a70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017a74:	4b9a      	ldr	r3, [pc, #616]	; (8017ce0 <_printf_float+0x2d8>)
 8017a76:	f04f 32ff 	mov.w	r2, #4294967295
 8017a7a:	f7e9 f869 	bl	8000b50 <__aeabi_dcmple>
 8017a7e:	bb48      	cbnz	r0, 8017ad4 <_printf_float+0xcc>
 8017a80:	2200      	movs	r2, #0
 8017a82:	2300      	movs	r3, #0
 8017a84:	4640      	mov	r0, r8
 8017a86:	4649      	mov	r1, r9
 8017a88:	f7e9 f858 	bl	8000b3c <__aeabi_dcmplt>
 8017a8c:	b110      	cbz	r0, 8017a94 <_printf_float+0x8c>
 8017a8e:	232d      	movs	r3, #45	; 0x2d
 8017a90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017a94:	4a93      	ldr	r2, [pc, #588]	; (8017ce4 <_printf_float+0x2dc>)
 8017a96:	4b94      	ldr	r3, [pc, #592]	; (8017ce8 <_printf_float+0x2e0>)
 8017a98:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8017a9c:	bf94      	ite	ls
 8017a9e:	4690      	movls	r8, r2
 8017aa0:	4698      	movhi	r8, r3
 8017aa2:	2303      	movs	r3, #3
 8017aa4:	6123      	str	r3, [r4, #16]
 8017aa6:	9b05      	ldr	r3, [sp, #20]
 8017aa8:	f023 0304 	bic.w	r3, r3, #4
 8017aac:	6023      	str	r3, [r4, #0]
 8017aae:	f04f 0900 	mov.w	r9, #0
 8017ab2:	9700      	str	r7, [sp, #0]
 8017ab4:	4633      	mov	r3, r6
 8017ab6:	aa0b      	add	r2, sp, #44	; 0x2c
 8017ab8:	4621      	mov	r1, r4
 8017aba:	4628      	mov	r0, r5
 8017abc:	f000 f9da 	bl	8017e74 <_printf_common>
 8017ac0:	3001      	adds	r0, #1
 8017ac2:	f040 8090 	bne.w	8017be6 <_printf_float+0x1de>
 8017ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8017aca:	b00d      	add	sp, #52	; 0x34
 8017acc:	ecbd 8b02 	vpop	{d8}
 8017ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ad4:	4642      	mov	r2, r8
 8017ad6:	464b      	mov	r3, r9
 8017ad8:	4640      	mov	r0, r8
 8017ada:	4649      	mov	r1, r9
 8017adc:	f7e9 f856 	bl	8000b8c <__aeabi_dcmpun>
 8017ae0:	b140      	cbz	r0, 8017af4 <_printf_float+0xec>
 8017ae2:	464b      	mov	r3, r9
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	bfbc      	itt	lt
 8017ae8:	232d      	movlt	r3, #45	; 0x2d
 8017aea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8017aee:	4a7f      	ldr	r2, [pc, #508]	; (8017cec <_printf_float+0x2e4>)
 8017af0:	4b7f      	ldr	r3, [pc, #508]	; (8017cf0 <_printf_float+0x2e8>)
 8017af2:	e7d1      	b.n	8017a98 <_printf_float+0x90>
 8017af4:	6863      	ldr	r3, [r4, #4]
 8017af6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8017afa:	9206      	str	r2, [sp, #24]
 8017afc:	1c5a      	adds	r2, r3, #1
 8017afe:	d13f      	bne.n	8017b80 <_printf_float+0x178>
 8017b00:	2306      	movs	r3, #6
 8017b02:	6063      	str	r3, [r4, #4]
 8017b04:	9b05      	ldr	r3, [sp, #20]
 8017b06:	6861      	ldr	r1, [r4, #4]
 8017b08:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8017b0c:	2300      	movs	r3, #0
 8017b0e:	9303      	str	r3, [sp, #12]
 8017b10:	ab0a      	add	r3, sp, #40	; 0x28
 8017b12:	e9cd b301 	strd	fp, r3, [sp, #4]
 8017b16:	ab09      	add	r3, sp, #36	; 0x24
 8017b18:	ec49 8b10 	vmov	d0, r8, r9
 8017b1c:	9300      	str	r3, [sp, #0]
 8017b1e:	6022      	str	r2, [r4, #0]
 8017b20:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8017b24:	4628      	mov	r0, r5
 8017b26:	f7ff fecf 	bl	80178c8 <__cvt>
 8017b2a:	9b06      	ldr	r3, [sp, #24]
 8017b2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017b2e:	2b47      	cmp	r3, #71	; 0x47
 8017b30:	4680      	mov	r8, r0
 8017b32:	d108      	bne.n	8017b46 <_printf_float+0x13e>
 8017b34:	1cc8      	adds	r0, r1, #3
 8017b36:	db02      	blt.n	8017b3e <_printf_float+0x136>
 8017b38:	6863      	ldr	r3, [r4, #4]
 8017b3a:	4299      	cmp	r1, r3
 8017b3c:	dd41      	ble.n	8017bc2 <_printf_float+0x1ba>
 8017b3e:	f1ab 0302 	sub.w	r3, fp, #2
 8017b42:	fa5f fb83 	uxtb.w	fp, r3
 8017b46:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017b4a:	d820      	bhi.n	8017b8e <_printf_float+0x186>
 8017b4c:	3901      	subs	r1, #1
 8017b4e:	465a      	mov	r2, fp
 8017b50:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8017b54:	9109      	str	r1, [sp, #36]	; 0x24
 8017b56:	f7ff ff19 	bl	801798c <__exponent>
 8017b5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017b5c:	1813      	adds	r3, r2, r0
 8017b5e:	2a01      	cmp	r2, #1
 8017b60:	4681      	mov	r9, r0
 8017b62:	6123      	str	r3, [r4, #16]
 8017b64:	dc02      	bgt.n	8017b6c <_printf_float+0x164>
 8017b66:	6822      	ldr	r2, [r4, #0]
 8017b68:	07d2      	lsls	r2, r2, #31
 8017b6a:	d501      	bpl.n	8017b70 <_printf_float+0x168>
 8017b6c:	3301      	adds	r3, #1
 8017b6e:	6123      	str	r3, [r4, #16]
 8017b70:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d09c      	beq.n	8017ab2 <_printf_float+0xaa>
 8017b78:	232d      	movs	r3, #45	; 0x2d
 8017b7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017b7e:	e798      	b.n	8017ab2 <_printf_float+0xaa>
 8017b80:	9a06      	ldr	r2, [sp, #24]
 8017b82:	2a47      	cmp	r2, #71	; 0x47
 8017b84:	d1be      	bne.n	8017b04 <_printf_float+0xfc>
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	d1bc      	bne.n	8017b04 <_printf_float+0xfc>
 8017b8a:	2301      	movs	r3, #1
 8017b8c:	e7b9      	b.n	8017b02 <_printf_float+0xfa>
 8017b8e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8017b92:	d118      	bne.n	8017bc6 <_printf_float+0x1be>
 8017b94:	2900      	cmp	r1, #0
 8017b96:	6863      	ldr	r3, [r4, #4]
 8017b98:	dd0b      	ble.n	8017bb2 <_printf_float+0x1aa>
 8017b9a:	6121      	str	r1, [r4, #16]
 8017b9c:	b913      	cbnz	r3, 8017ba4 <_printf_float+0x19c>
 8017b9e:	6822      	ldr	r2, [r4, #0]
 8017ba0:	07d0      	lsls	r0, r2, #31
 8017ba2:	d502      	bpl.n	8017baa <_printf_float+0x1a2>
 8017ba4:	3301      	adds	r3, #1
 8017ba6:	440b      	add	r3, r1
 8017ba8:	6123      	str	r3, [r4, #16]
 8017baa:	65a1      	str	r1, [r4, #88]	; 0x58
 8017bac:	f04f 0900 	mov.w	r9, #0
 8017bb0:	e7de      	b.n	8017b70 <_printf_float+0x168>
 8017bb2:	b913      	cbnz	r3, 8017bba <_printf_float+0x1b2>
 8017bb4:	6822      	ldr	r2, [r4, #0]
 8017bb6:	07d2      	lsls	r2, r2, #31
 8017bb8:	d501      	bpl.n	8017bbe <_printf_float+0x1b6>
 8017bba:	3302      	adds	r3, #2
 8017bbc:	e7f4      	b.n	8017ba8 <_printf_float+0x1a0>
 8017bbe:	2301      	movs	r3, #1
 8017bc0:	e7f2      	b.n	8017ba8 <_printf_float+0x1a0>
 8017bc2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8017bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017bc8:	4299      	cmp	r1, r3
 8017bca:	db05      	blt.n	8017bd8 <_printf_float+0x1d0>
 8017bcc:	6823      	ldr	r3, [r4, #0]
 8017bce:	6121      	str	r1, [r4, #16]
 8017bd0:	07d8      	lsls	r0, r3, #31
 8017bd2:	d5ea      	bpl.n	8017baa <_printf_float+0x1a2>
 8017bd4:	1c4b      	adds	r3, r1, #1
 8017bd6:	e7e7      	b.n	8017ba8 <_printf_float+0x1a0>
 8017bd8:	2900      	cmp	r1, #0
 8017bda:	bfd4      	ite	le
 8017bdc:	f1c1 0202 	rsble	r2, r1, #2
 8017be0:	2201      	movgt	r2, #1
 8017be2:	4413      	add	r3, r2
 8017be4:	e7e0      	b.n	8017ba8 <_printf_float+0x1a0>
 8017be6:	6823      	ldr	r3, [r4, #0]
 8017be8:	055a      	lsls	r2, r3, #21
 8017bea:	d407      	bmi.n	8017bfc <_printf_float+0x1f4>
 8017bec:	6923      	ldr	r3, [r4, #16]
 8017bee:	4642      	mov	r2, r8
 8017bf0:	4631      	mov	r1, r6
 8017bf2:	4628      	mov	r0, r5
 8017bf4:	47b8      	blx	r7
 8017bf6:	3001      	adds	r0, #1
 8017bf8:	d12c      	bne.n	8017c54 <_printf_float+0x24c>
 8017bfa:	e764      	b.n	8017ac6 <_printf_float+0xbe>
 8017bfc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017c00:	f240 80e0 	bls.w	8017dc4 <_printf_float+0x3bc>
 8017c04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017c08:	2200      	movs	r2, #0
 8017c0a:	2300      	movs	r3, #0
 8017c0c:	f7e8 ff8c 	bl	8000b28 <__aeabi_dcmpeq>
 8017c10:	2800      	cmp	r0, #0
 8017c12:	d034      	beq.n	8017c7e <_printf_float+0x276>
 8017c14:	4a37      	ldr	r2, [pc, #220]	; (8017cf4 <_printf_float+0x2ec>)
 8017c16:	2301      	movs	r3, #1
 8017c18:	4631      	mov	r1, r6
 8017c1a:	4628      	mov	r0, r5
 8017c1c:	47b8      	blx	r7
 8017c1e:	3001      	adds	r0, #1
 8017c20:	f43f af51 	beq.w	8017ac6 <_printf_float+0xbe>
 8017c24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017c28:	429a      	cmp	r2, r3
 8017c2a:	db02      	blt.n	8017c32 <_printf_float+0x22a>
 8017c2c:	6823      	ldr	r3, [r4, #0]
 8017c2e:	07d8      	lsls	r0, r3, #31
 8017c30:	d510      	bpl.n	8017c54 <_printf_float+0x24c>
 8017c32:	ee18 3a10 	vmov	r3, s16
 8017c36:	4652      	mov	r2, sl
 8017c38:	4631      	mov	r1, r6
 8017c3a:	4628      	mov	r0, r5
 8017c3c:	47b8      	blx	r7
 8017c3e:	3001      	adds	r0, #1
 8017c40:	f43f af41 	beq.w	8017ac6 <_printf_float+0xbe>
 8017c44:	f04f 0800 	mov.w	r8, #0
 8017c48:	f104 091a 	add.w	r9, r4, #26
 8017c4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c4e:	3b01      	subs	r3, #1
 8017c50:	4543      	cmp	r3, r8
 8017c52:	dc09      	bgt.n	8017c68 <_printf_float+0x260>
 8017c54:	6823      	ldr	r3, [r4, #0]
 8017c56:	079b      	lsls	r3, r3, #30
 8017c58:	f100 8107 	bmi.w	8017e6a <_printf_float+0x462>
 8017c5c:	68e0      	ldr	r0, [r4, #12]
 8017c5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017c60:	4298      	cmp	r0, r3
 8017c62:	bfb8      	it	lt
 8017c64:	4618      	movlt	r0, r3
 8017c66:	e730      	b.n	8017aca <_printf_float+0xc2>
 8017c68:	2301      	movs	r3, #1
 8017c6a:	464a      	mov	r2, r9
 8017c6c:	4631      	mov	r1, r6
 8017c6e:	4628      	mov	r0, r5
 8017c70:	47b8      	blx	r7
 8017c72:	3001      	adds	r0, #1
 8017c74:	f43f af27 	beq.w	8017ac6 <_printf_float+0xbe>
 8017c78:	f108 0801 	add.w	r8, r8, #1
 8017c7c:	e7e6      	b.n	8017c4c <_printf_float+0x244>
 8017c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	dc39      	bgt.n	8017cf8 <_printf_float+0x2f0>
 8017c84:	4a1b      	ldr	r2, [pc, #108]	; (8017cf4 <_printf_float+0x2ec>)
 8017c86:	2301      	movs	r3, #1
 8017c88:	4631      	mov	r1, r6
 8017c8a:	4628      	mov	r0, r5
 8017c8c:	47b8      	blx	r7
 8017c8e:	3001      	adds	r0, #1
 8017c90:	f43f af19 	beq.w	8017ac6 <_printf_float+0xbe>
 8017c94:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8017c98:	4313      	orrs	r3, r2
 8017c9a:	d102      	bne.n	8017ca2 <_printf_float+0x29a>
 8017c9c:	6823      	ldr	r3, [r4, #0]
 8017c9e:	07d9      	lsls	r1, r3, #31
 8017ca0:	d5d8      	bpl.n	8017c54 <_printf_float+0x24c>
 8017ca2:	ee18 3a10 	vmov	r3, s16
 8017ca6:	4652      	mov	r2, sl
 8017ca8:	4631      	mov	r1, r6
 8017caa:	4628      	mov	r0, r5
 8017cac:	47b8      	blx	r7
 8017cae:	3001      	adds	r0, #1
 8017cb0:	f43f af09 	beq.w	8017ac6 <_printf_float+0xbe>
 8017cb4:	f04f 0900 	mov.w	r9, #0
 8017cb8:	f104 0a1a 	add.w	sl, r4, #26
 8017cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017cbe:	425b      	negs	r3, r3
 8017cc0:	454b      	cmp	r3, r9
 8017cc2:	dc01      	bgt.n	8017cc8 <_printf_float+0x2c0>
 8017cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017cc6:	e792      	b.n	8017bee <_printf_float+0x1e6>
 8017cc8:	2301      	movs	r3, #1
 8017cca:	4652      	mov	r2, sl
 8017ccc:	4631      	mov	r1, r6
 8017cce:	4628      	mov	r0, r5
 8017cd0:	47b8      	blx	r7
 8017cd2:	3001      	adds	r0, #1
 8017cd4:	f43f aef7 	beq.w	8017ac6 <_printf_float+0xbe>
 8017cd8:	f109 0901 	add.w	r9, r9, #1
 8017cdc:	e7ee      	b.n	8017cbc <_printf_float+0x2b4>
 8017cde:	bf00      	nop
 8017ce0:	7fefffff 	.word	0x7fefffff
 8017ce4:	0801ac00 	.word	0x0801ac00
 8017ce8:	0801ac04 	.word	0x0801ac04
 8017cec:	0801ac08 	.word	0x0801ac08
 8017cf0:	0801ac0c 	.word	0x0801ac0c
 8017cf4:	0801ac10 	.word	0x0801ac10
 8017cf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017cfa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017cfc:	429a      	cmp	r2, r3
 8017cfe:	bfa8      	it	ge
 8017d00:	461a      	movge	r2, r3
 8017d02:	2a00      	cmp	r2, #0
 8017d04:	4691      	mov	r9, r2
 8017d06:	dc37      	bgt.n	8017d78 <_printf_float+0x370>
 8017d08:	f04f 0b00 	mov.w	fp, #0
 8017d0c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017d10:	f104 021a 	add.w	r2, r4, #26
 8017d14:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017d16:	9305      	str	r3, [sp, #20]
 8017d18:	eba3 0309 	sub.w	r3, r3, r9
 8017d1c:	455b      	cmp	r3, fp
 8017d1e:	dc33      	bgt.n	8017d88 <_printf_float+0x380>
 8017d20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017d24:	429a      	cmp	r2, r3
 8017d26:	db3b      	blt.n	8017da0 <_printf_float+0x398>
 8017d28:	6823      	ldr	r3, [r4, #0]
 8017d2a:	07da      	lsls	r2, r3, #31
 8017d2c:	d438      	bmi.n	8017da0 <_printf_float+0x398>
 8017d2e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8017d32:	eba2 0903 	sub.w	r9, r2, r3
 8017d36:	9b05      	ldr	r3, [sp, #20]
 8017d38:	1ad2      	subs	r2, r2, r3
 8017d3a:	4591      	cmp	r9, r2
 8017d3c:	bfa8      	it	ge
 8017d3e:	4691      	movge	r9, r2
 8017d40:	f1b9 0f00 	cmp.w	r9, #0
 8017d44:	dc35      	bgt.n	8017db2 <_printf_float+0x3aa>
 8017d46:	f04f 0800 	mov.w	r8, #0
 8017d4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017d4e:	f104 0a1a 	add.w	sl, r4, #26
 8017d52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017d56:	1a9b      	subs	r3, r3, r2
 8017d58:	eba3 0309 	sub.w	r3, r3, r9
 8017d5c:	4543      	cmp	r3, r8
 8017d5e:	f77f af79 	ble.w	8017c54 <_printf_float+0x24c>
 8017d62:	2301      	movs	r3, #1
 8017d64:	4652      	mov	r2, sl
 8017d66:	4631      	mov	r1, r6
 8017d68:	4628      	mov	r0, r5
 8017d6a:	47b8      	blx	r7
 8017d6c:	3001      	adds	r0, #1
 8017d6e:	f43f aeaa 	beq.w	8017ac6 <_printf_float+0xbe>
 8017d72:	f108 0801 	add.w	r8, r8, #1
 8017d76:	e7ec      	b.n	8017d52 <_printf_float+0x34a>
 8017d78:	4613      	mov	r3, r2
 8017d7a:	4631      	mov	r1, r6
 8017d7c:	4642      	mov	r2, r8
 8017d7e:	4628      	mov	r0, r5
 8017d80:	47b8      	blx	r7
 8017d82:	3001      	adds	r0, #1
 8017d84:	d1c0      	bne.n	8017d08 <_printf_float+0x300>
 8017d86:	e69e      	b.n	8017ac6 <_printf_float+0xbe>
 8017d88:	2301      	movs	r3, #1
 8017d8a:	4631      	mov	r1, r6
 8017d8c:	4628      	mov	r0, r5
 8017d8e:	9205      	str	r2, [sp, #20]
 8017d90:	47b8      	blx	r7
 8017d92:	3001      	adds	r0, #1
 8017d94:	f43f ae97 	beq.w	8017ac6 <_printf_float+0xbe>
 8017d98:	9a05      	ldr	r2, [sp, #20]
 8017d9a:	f10b 0b01 	add.w	fp, fp, #1
 8017d9e:	e7b9      	b.n	8017d14 <_printf_float+0x30c>
 8017da0:	ee18 3a10 	vmov	r3, s16
 8017da4:	4652      	mov	r2, sl
 8017da6:	4631      	mov	r1, r6
 8017da8:	4628      	mov	r0, r5
 8017daa:	47b8      	blx	r7
 8017dac:	3001      	adds	r0, #1
 8017dae:	d1be      	bne.n	8017d2e <_printf_float+0x326>
 8017db0:	e689      	b.n	8017ac6 <_printf_float+0xbe>
 8017db2:	9a05      	ldr	r2, [sp, #20]
 8017db4:	464b      	mov	r3, r9
 8017db6:	4442      	add	r2, r8
 8017db8:	4631      	mov	r1, r6
 8017dba:	4628      	mov	r0, r5
 8017dbc:	47b8      	blx	r7
 8017dbe:	3001      	adds	r0, #1
 8017dc0:	d1c1      	bne.n	8017d46 <_printf_float+0x33e>
 8017dc2:	e680      	b.n	8017ac6 <_printf_float+0xbe>
 8017dc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017dc6:	2a01      	cmp	r2, #1
 8017dc8:	dc01      	bgt.n	8017dce <_printf_float+0x3c6>
 8017dca:	07db      	lsls	r3, r3, #31
 8017dcc:	d53a      	bpl.n	8017e44 <_printf_float+0x43c>
 8017dce:	2301      	movs	r3, #1
 8017dd0:	4642      	mov	r2, r8
 8017dd2:	4631      	mov	r1, r6
 8017dd4:	4628      	mov	r0, r5
 8017dd6:	47b8      	blx	r7
 8017dd8:	3001      	adds	r0, #1
 8017dda:	f43f ae74 	beq.w	8017ac6 <_printf_float+0xbe>
 8017dde:	ee18 3a10 	vmov	r3, s16
 8017de2:	4652      	mov	r2, sl
 8017de4:	4631      	mov	r1, r6
 8017de6:	4628      	mov	r0, r5
 8017de8:	47b8      	blx	r7
 8017dea:	3001      	adds	r0, #1
 8017dec:	f43f ae6b 	beq.w	8017ac6 <_printf_float+0xbe>
 8017df0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017df4:	2200      	movs	r2, #0
 8017df6:	2300      	movs	r3, #0
 8017df8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8017dfc:	f7e8 fe94 	bl	8000b28 <__aeabi_dcmpeq>
 8017e00:	b9d8      	cbnz	r0, 8017e3a <_printf_float+0x432>
 8017e02:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017e06:	f108 0201 	add.w	r2, r8, #1
 8017e0a:	4631      	mov	r1, r6
 8017e0c:	4628      	mov	r0, r5
 8017e0e:	47b8      	blx	r7
 8017e10:	3001      	adds	r0, #1
 8017e12:	d10e      	bne.n	8017e32 <_printf_float+0x42a>
 8017e14:	e657      	b.n	8017ac6 <_printf_float+0xbe>
 8017e16:	2301      	movs	r3, #1
 8017e18:	4652      	mov	r2, sl
 8017e1a:	4631      	mov	r1, r6
 8017e1c:	4628      	mov	r0, r5
 8017e1e:	47b8      	blx	r7
 8017e20:	3001      	adds	r0, #1
 8017e22:	f43f ae50 	beq.w	8017ac6 <_printf_float+0xbe>
 8017e26:	f108 0801 	add.w	r8, r8, #1
 8017e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e2c:	3b01      	subs	r3, #1
 8017e2e:	4543      	cmp	r3, r8
 8017e30:	dcf1      	bgt.n	8017e16 <_printf_float+0x40e>
 8017e32:	464b      	mov	r3, r9
 8017e34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8017e38:	e6da      	b.n	8017bf0 <_printf_float+0x1e8>
 8017e3a:	f04f 0800 	mov.w	r8, #0
 8017e3e:	f104 0a1a 	add.w	sl, r4, #26
 8017e42:	e7f2      	b.n	8017e2a <_printf_float+0x422>
 8017e44:	2301      	movs	r3, #1
 8017e46:	4642      	mov	r2, r8
 8017e48:	e7df      	b.n	8017e0a <_printf_float+0x402>
 8017e4a:	2301      	movs	r3, #1
 8017e4c:	464a      	mov	r2, r9
 8017e4e:	4631      	mov	r1, r6
 8017e50:	4628      	mov	r0, r5
 8017e52:	47b8      	blx	r7
 8017e54:	3001      	adds	r0, #1
 8017e56:	f43f ae36 	beq.w	8017ac6 <_printf_float+0xbe>
 8017e5a:	f108 0801 	add.w	r8, r8, #1
 8017e5e:	68e3      	ldr	r3, [r4, #12]
 8017e60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017e62:	1a5b      	subs	r3, r3, r1
 8017e64:	4543      	cmp	r3, r8
 8017e66:	dcf0      	bgt.n	8017e4a <_printf_float+0x442>
 8017e68:	e6f8      	b.n	8017c5c <_printf_float+0x254>
 8017e6a:	f04f 0800 	mov.w	r8, #0
 8017e6e:	f104 0919 	add.w	r9, r4, #25
 8017e72:	e7f4      	b.n	8017e5e <_printf_float+0x456>

08017e74 <_printf_common>:
 8017e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e78:	4616      	mov	r6, r2
 8017e7a:	4699      	mov	r9, r3
 8017e7c:	688a      	ldr	r2, [r1, #8]
 8017e7e:	690b      	ldr	r3, [r1, #16]
 8017e80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017e84:	4293      	cmp	r3, r2
 8017e86:	bfb8      	it	lt
 8017e88:	4613      	movlt	r3, r2
 8017e8a:	6033      	str	r3, [r6, #0]
 8017e8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017e90:	4607      	mov	r7, r0
 8017e92:	460c      	mov	r4, r1
 8017e94:	b10a      	cbz	r2, 8017e9a <_printf_common+0x26>
 8017e96:	3301      	adds	r3, #1
 8017e98:	6033      	str	r3, [r6, #0]
 8017e9a:	6823      	ldr	r3, [r4, #0]
 8017e9c:	0699      	lsls	r1, r3, #26
 8017e9e:	bf42      	ittt	mi
 8017ea0:	6833      	ldrmi	r3, [r6, #0]
 8017ea2:	3302      	addmi	r3, #2
 8017ea4:	6033      	strmi	r3, [r6, #0]
 8017ea6:	6825      	ldr	r5, [r4, #0]
 8017ea8:	f015 0506 	ands.w	r5, r5, #6
 8017eac:	d106      	bne.n	8017ebc <_printf_common+0x48>
 8017eae:	f104 0a19 	add.w	sl, r4, #25
 8017eb2:	68e3      	ldr	r3, [r4, #12]
 8017eb4:	6832      	ldr	r2, [r6, #0]
 8017eb6:	1a9b      	subs	r3, r3, r2
 8017eb8:	42ab      	cmp	r3, r5
 8017eba:	dc26      	bgt.n	8017f0a <_printf_common+0x96>
 8017ebc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017ec0:	1e13      	subs	r3, r2, #0
 8017ec2:	6822      	ldr	r2, [r4, #0]
 8017ec4:	bf18      	it	ne
 8017ec6:	2301      	movne	r3, #1
 8017ec8:	0692      	lsls	r2, r2, #26
 8017eca:	d42b      	bmi.n	8017f24 <_printf_common+0xb0>
 8017ecc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017ed0:	4649      	mov	r1, r9
 8017ed2:	4638      	mov	r0, r7
 8017ed4:	47c0      	blx	r8
 8017ed6:	3001      	adds	r0, #1
 8017ed8:	d01e      	beq.n	8017f18 <_printf_common+0xa4>
 8017eda:	6823      	ldr	r3, [r4, #0]
 8017edc:	6922      	ldr	r2, [r4, #16]
 8017ede:	f003 0306 	and.w	r3, r3, #6
 8017ee2:	2b04      	cmp	r3, #4
 8017ee4:	bf02      	ittt	eq
 8017ee6:	68e5      	ldreq	r5, [r4, #12]
 8017ee8:	6833      	ldreq	r3, [r6, #0]
 8017eea:	1aed      	subeq	r5, r5, r3
 8017eec:	68a3      	ldr	r3, [r4, #8]
 8017eee:	bf0c      	ite	eq
 8017ef0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017ef4:	2500      	movne	r5, #0
 8017ef6:	4293      	cmp	r3, r2
 8017ef8:	bfc4      	itt	gt
 8017efa:	1a9b      	subgt	r3, r3, r2
 8017efc:	18ed      	addgt	r5, r5, r3
 8017efe:	2600      	movs	r6, #0
 8017f00:	341a      	adds	r4, #26
 8017f02:	42b5      	cmp	r5, r6
 8017f04:	d11a      	bne.n	8017f3c <_printf_common+0xc8>
 8017f06:	2000      	movs	r0, #0
 8017f08:	e008      	b.n	8017f1c <_printf_common+0xa8>
 8017f0a:	2301      	movs	r3, #1
 8017f0c:	4652      	mov	r2, sl
 8017f0e:	4649      	mov	r1, r9
 8017f10:	4638      	mov	r0, r7
 8017f12:	47c0      	blx	r8
 8017f14:	3001      	adds	r0, #1
 8017f16:	d103      	bne.n	8017f20 <_printf_common+0xac>
 8017f18:	f04f 30ff 	mov.w	r0, #4294967295
 8017f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f20:	3501      	adds	r5, #1
 8017f22:	e7c6      	b.n	8017eb2 <_printf_common+0x3e>
 8017f24:	18e1      	adds	r1, r4, r3
 8017f26:	1c5a      	adds	r2, r3, #1
 8017f28:	2030      	movs	r0, #48	; 0x30
 8017f2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017f2e:	4422      	add	r2, r4
 8017f30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017f34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017f38:	3302      	adds	r3, #2
 8017f3a:	e7c7      	b.n	8017ecc <_printf_common+0x58>
 8017f3c:	2301      	movs	r3, #1
 8017f3e:	4622      	mov	r2, r4
 8017f40:	4649      	mov	r1, r9
 8017f42:	4638      	mov	r0, r7
 8017f44:	47c0      	blx	r8
 8017f46:	3001      	adds	r0, #1
 8017f48:	d0e6      	beq.n	8017f18 <_printf_common+0xa4>
 8017f4a:	3601      	adds	r6, #1
 8017f4c:	e7d9      	b.n	8017f02 <_printf_common+0x8e>
	...

08017f50 <_printf_i>:
 8017f50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017f54:	7e0f      	ldrb	r7, [r1, #24]
 8017f56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017f58:	2f78      	cmp	r7, #120	; 0x78
 8017f5a:	4691      	mov	r9, r2
 8017f5c:	4680      	mov	r8, r0
 8017f5e:	460c      	mov	r4, r1
 8017f60:	469a      	mov	sl, r3
 8017f62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017f66:	d807      	bhi.n	8017f78 <_printf_i+0x28>
 8017f68:	2f62      	cmp	r7, #98	; 0x62
 8017f6a:	d80a      	bhi.n	8017f82 <_printf_i+0x32>
 8017f6c:	2f00      	cmp	r7, #0
 8017f6e:	f000 80d4 	beq.w	801811a <_printf_i+0x1ca>
 8017f72:	2f58      	cmp	r7, #88	; 0x58
 8017f74:	f000 80c0 	beq.w	80180f8 <_printf_i+0x1a8>
 8017f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017f7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017f80:	e03a      	b.n	8017ff8 <_printf_i+0xa8>
 8017f82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017f86:	2b15      	cmp	r3, #21
 8017f88:	d8f6      	bhi.n	8017f78 <_printf_i+0x28>
 8017f8a:	a101      	add	r1, pc, #4	; (adr r1, 8017f90 <_printf_i+0x40>)
 8017f8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017f90:	08017fe9 	.word	0x08017fe9
 8017f94:	08017ffd 	.word	0x08017ffd
 8017f98:	08017f79 	.word	0x08017f79
 8017f9c:	08017f79 	.word	0x08017f79
 8017fa0:	08017f79 	.word	0x08017f79
 8017fa4:	08017f79 	.word	0x08017f79
 8017fa8:	08017ffd 	.word	0x08017ffd
 8017fac:	08017f79 	.word	0x08017f79
 8017fb0:	08017f79 	.word	0x08017f79
 8017fb4:	08017f79 	.word	0x08017f79
 8017fb8:	08017f79 	.word	0x08017f79
 8017fbc:	08018101 	.word	0x08018101
 8017fc0:	08018029 	.word	0x08018029
 8017fc4:	080180bb 	.word	0x080180bb
 8017fc8:	08017f79 	.word	0x08017f79
 8017fcc:	08017f79 	.word	0x08017f79
 8017fd0:	08018123 	.word	0x08018123
 8017fd4:	08017f79 	.word	0x08017f79
 8017fd8:	08018029 	.word	0x08018029
 8017fdc:	08017f79 	.word	0x08017f79
 8017fe0:	08017f79 	.word	0x08017f79
 8017fe4:	080180c3 	.word	0x080180c3
 8017fe8:	682b      	ldr	r3, [r5, #0]
 8017fea:	1d1a      	adds	r2, r3, #4
 8017fec:	681b      	ldr	r3, [r3, #0]
 8017fee:	602a      	str	r2, [r5, #0]
 8017ff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017ff4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017ff8:	2301      	movs	r3, #1
 8017ffa:	e09f      	b.n	801813c <_printf_i+0x1ec>
 8017ffc:	6820      	ldr	r0, [r4, #0]
 8017ffe:	682b      	ldr	r3, [r5, #0]
 8018000:	0607      	lsls	r7, r0, #24
 8018002:	f103 0104 	add.w	r1, r3, #4
 8018006:	6029      	str	r1, [r5, #0]
 8018008:	d501      	bpl.n	801800e <_printf_i+0xbe>
 801800a:	681e      	ldr	r6, [r3, #0]
 801800c:	e003      	b.n	8018016 <_printf_i+0xc6>
 801800e:	0646      	lsls	r6, r0, #25
 8018010:	d5fb      	bpl.n	801800a <_printf_i+0xba>
 8018012:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018016:	2e00      	cmp	r6, #0
 8018018:	da03      	bge.n	8018022 <_printf_i+0xd2>
 801801a:	232d      	movs	r3, #45	; 0x2d
 801801c:	4276      	negs	r6, r6
 801801e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018022:	485a      	ldr	r0, [pc, #360]	; (801818c <_printf_i+0x23c>)
 8018024:	230a      	movs	r3, #10
 8018026:	e012      	b.n	801804e <_printf_i+0xfe>
 8018028:	682b      	ldr	r3, [r5, #0]
 801802a:	6820      	ldr	r0, [r4, #0]
 801802c:	1d19      	adds	r1, r3, #4
 801802e:	6029      	str	r1, [r5, #0]
 8018030:	0605      	lsls	r5, r0, #24
 8018032:	d501      	bpl.n	8018038 <_printf_i+0xe8>
 8018034:	681e      	ldr	r6, [r3, #0]
 8018036:	e002      	b.n	801803e <_printf_i+0xee>
 8018038:	0641      	lsls	r1, r0, #25
 801803a:	d5fb      	bpl.n	8018034 <_printf_i+0xe4>
 801803c:	881e      	ldrh	r6, [r3, #0]
 801803e:	4853      	ldr	r0, [pc, #332]	; (801818c <_printf_i+0x23c>)
 8018040:	2f6f      	cmp	r7, #111	; 0x6f
 8018042:	bf0c      	ite	eq
 8018044:	2308      	moveq	r3, #8
 8018046:	230a      	movne	r3, #10
 8018048:	2100      	movs	r1, #0
 801804a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801804e:	6865      	ldr	r5, [r4, #4]
 8018050:	60a5      	str	r5, [r4, #8]
 8018052:	2d00      	cmp	r5, #0
 8018054:	bfa2      	ittt	ge
 8018056:	6821      	ldrge	r1, [r4, #0]
 8018058:	f021 0104 	bicge.w	r1, r1, #4
 801805c:	6021      	strge	r1, [r4, #0]
 801805e:	b90e      	cbnz	r6, 8018064 <_printf_i+0x114>
 8018060:	2d00      	cmp	r5, #0
 8018062:	d04b      	beq.n	80180fc <_printf_i+0x1ac>
 8018064:	4615      	mov	r5, r2
 8018066:	fbb6 f1f3 	udiv	r1, r6, r3
 801806a:	fb03 6711 	mls	r7, r3, r1, r6
 801806e:	5dc7      	ldrb	r7, [r0, r7]
 8018070:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018074:	4637      	mov	r7, r6
 8018076:	42bb      	cmp	r3, r7
 8018078:	460e      	mov	r6, r1
 801807a:	d9f4      	bls.n	8018066 <_printf_i+0x116>
 801807c:	2b08      	cmp	r3, #8
 801807e:	d10b      	bne.n	8018098 <_printf_i+0x148>
 8018080:	6823      	ldr	r3, [r4, #0]
 8018082:	07de      	lsls	r6, r3, #31
 8018084:	d508      	bpl.n	8018098 <_printf_i+0x148>
 8018086:	6923      	ldr	r3, [r4, #16]
 8018088:	6861      	ldr	r1, [r4, #4]
 801808a:	4299      	cmp	r1, r3
 801808c:	bfde      	ittt	le
 801808e:	2330      	movle	r3, #48	; 0x30
 8018090:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018094:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018098:	1b52      	subs	r2, r2, r5
 801809a:	6122      	str	r2, [r4, #16]
 801809c:	f8cd a000 	str.w	sl, [sp]
 80180a0:	464b      	mov	r3, r9
 80180a2:	aa03      	add	r2, sp, #12
 80180a4:	4621      	mov	r1, r4
 80180a6:	4640      	mov	r0, r8
 80180a8:	f7ff fee4 	bl	8017e74 <_printf_common>
 80180ac:	3001      	adds	r0, #1
 80180ae:	d14a      	bne.n	8018146 <_printf_i+0x1f6>
 80180b0:	f04f 30ff 	mov.w	r0, #4294967295
 80180b4:	b004      	add	sp, #16
 80180b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180ba:	6823      	ldr	r3, [r4, #0]
 80180bc:	f043 0320 	orr.w	r3, r3, #32
 80180c0:	6023      	str	r3, [r4, #0]
 80180c2:	4833      	ldr	r0, [pc, #204]	; (8018190 <_printf_i+0x240>)
 80180c4:	2778      	movs	r7, #120	; 0x78
 80180c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80180ca:	6823      	ldr	r3, [r4, #0]
 80180cc:	6829      	ldr	r1, [r5, #0]
 80180ce:	061f      	lsls	r7, r3, #24
 80180d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80180d4:	d402      	bmi.n	80180dc <_printf_i+0x18c>
 80180d6:	065f      	lsls	r7, r3, #25
 80180d8:	bf48      	it	mi
 80180da:	b2b6      	uxthmi	r6, r6
 80180dc:	07df      	lsls	r7, r3, #31
 80180de:	bf48      	it	mi
 80180e0:	f043 0320 	orrmi.w	r3, r3, #32
 80180e4:	6029      	str	r1, [r5, #0]
 80180e6:	bf48      	it	mi
 80180e8:	6023      	strmi	r3, [r4, #0]
 80180ea:	b91e      	cbnz	r6, 80180f4 <_printf_i+0x1a4>
 80180ec:	6823      	ldr	r3, [r4, #0]
 80180ee:	f023 0320 	bic.w	r3, r3, #32
 80180f2:	6023      	str	r3, [r4, #0]
 80180f4:	2310      	movs	r3, #16
 80180f6:	e7a7      	b.n	8018048 <_printf_i+0xf8>
 80180f8:	4824      	ldr	r0, [pc, #144]	; (801818c <_printf_i+0x23c>)
 80180fa:	e7e4      	b.n	80180c6 <_printf_i+0x176>
 80180fc:	4615      	mov	r5, r2
 80180fe:	e7bd      	b.n	801807c <_printf_i+0x12c>
 8018100:	682b      	ldr	r3, [r5, #0]
 8018102:	6826      	ldr	r6, [r4, #0]
 8018104:	6961      	ldr	r1, [r4, #20]
 8018106:	1d18      	adds	r0, r3, #4
 8018108:	6028      	str	r0, [r5, #0]
 801810a:	0635      	lsls	r5, r6, #24
 801810c:	681b      	ldr	r3, [r3, #0]
 801810e:	d501      	bpl.n	8018114 <_printf_i+0x1c4>
 8018110:	6019      	str	r1, [r3, #0]
 8018112:	e002      	b.n	801811a <_printf_i+0x1ca>
 8018114:	0670      	lsls	r0, r6, #25
 8018116:	d5fb      	bpl.n	8018110 <_printf_i+0x1c0>
 8018118:	8019      	strh	r1, [r3, #0]
 801811a:	2300      	movs	r3, #0
 801811c:	6123      	str	r3, [r4, #16]
 801811e:	4615      	mov	r5, r2
 8018120:	e7bc      	b.n	801809c <_printf_i+0x14c>
 8018122:	682b      	ldr	r3, [r5, #0]
 8018124:	1d1a      	adds	r2, r3, #4
 8018126:	602a      	str	r2, [r5, #0]
 8018128:	681d      	ldr	r5, [r3, #0]
 801812a:	6862      	ldr	r2, [r4, #4]
 801812c:	2100      	movs	r1, #0
 801812e:	4628      	mov	r0, r5
 8018130:	f7e8 f87e 	bl	8000230 <memchr>
 8018134:	b108      	cbz	r0, 801813a <_printf_i+0x1ea>
 8018136:	1b40      	subs	r0, r0, r5
 8018138:	6060      	str	r0, [r4, #4]
 801813a:	6863      	ldr	r3, [r4, #4]
 801813c:	6123      	str	r3, [r4, #16]
 801813e:	2300      	movs	r3, #0
 8018140:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018144:	e7aa      	b.n	801809c <_printf_i+0x14c>
 8018146:	6923      	ldr	r3, [r4, #16]
 8018148:	462a      	mov	r2, r5
 801814a:	4649      	mov	r1, r9
 801814c:	4640      	mov	r0, r8
 801814e:	47d0      	blx	sl
 8018150:	3001      	adds	r0, #1
 8018152:	d0ad      	beq.n	80180b0 <_printf_i+0x160>
 8018154:	6823      	ldr	r3, [r4, #0]
 8018156:	079b      	lsls	r3, r3, #30
 8018158:	d413      	bmi.n	8018182 <_printf_i+0x232>
 801815a:	68e0      	ldr	r0, [r4, #12]
 801815c:	9b03      	ldr	r3, [sp, #12]
 801815e:	4298      	cmp	r0, r3
 8018160:	bfb8      	it	lt
 8018162:	4618      	movlt	r0, r3
 8018164:	e7a6      	b.n	80180b4 <_printf_i+0x164>
 8018166:	2301      	movs	r3, #1
 8018168:	4632      	mov	r2, r6
 801816a:	4649      	mov	r1, r9
 801816c:	4640      	mov	r0, r8
 801816e:	47d0      	blx	sl
 8018170:	3001      	adds	r0, #1
 8018172:	d09d      	beq.n	80180b0 <_printf_i+0x160>
 8018174:	3501      	adds	r5, #1
 8018176:	68e3      	ldr	r3, [r4, #12]
 8018178:	9903      	ldr	r1, [sp, #12]
 801817a:	1a5b      	subs	r3, r3, r1
 801817c:	42ab      	cmp	r3, r5
 801817e:	dcf2      	bgt.n	8018166 <_printf_i+0x216>
 8018180:	e7eb      	b.n	801815a <_printf_i+0x20a>
 8018182:	2500      	movs	r5, #0
 8018184:	f104 0619 	add.w	r6, r4, #25
 8018188:	e7f5      	b.n	8018176 <_printf_i+0x226>
 801818a:	bf00      	nop
 801818c:	0801ac12 	.word	0x0801ac12
 8018190:	0801ac23 	.word	0x0801ac23

08018194 <std>:
 8018194:	2300      	movs	r3, #0
 8018196:	b510      	push	{r4, lr}
 8018198:	4604      	mov	r4, r0
 801819a:	e9c0 3300 	strd	r3, r3, [r0]
 801819e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80181a2:	6083      	str	r3, [r0, #8]
 80181a4:	8181      	strh	r1, [r0, #12]
 80181a6:	6643      	str	r3, [r0, #100]	; 0x64
 80181a8:	81c2      	strh	r2, [r0, #14]
 80181aa:	6183      	str	r3, [r0, #24]
 80181ac:	4619      	mov	r1, r3
 80181ae:	2208      	movs	r2, #8
 80181b0:	305c      	adds	r0, #92	; 0x5c
 80181b2:	f000 fa05 	bl	80185c0 <memset>
 80181b6:	4b05      	ldr	r3, [pc, #20]	; (80181cc <std+0x38>)
 80181b8:	6263      	str	r3, [r4, #36]	; 0x24
 80181ba:	4b05      	ldr	r3, [pc, #20]	; (80181d0 <std+0x3c>)
 80181bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80181be:	4b05      	ldr	r3, [pc, #20]	; (80181d4 <std+0x40>)
 80181c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80181c2:	4b05      	ldr	r3, [pc, #20]	; (80181d8 <std+0x44>)
 80181c4:	6224      	str	r4, [r4, #32]
 80181c6:	6323      	str	r3, [r4, #48]	; 0x30
 80181c8:	bd10      	pop	{r4, pc}
 80181ca:	bf00      	nop
 80181cc:	08018411 	.word	0x08018411
 80181d0:	08018433 	.word	0x08018433
 80181d4:	0801846b 	.word	0x0801846b
 80181d8:	0801848f 	.word	0x0801848f

080181dc <stdio_exit_handler>:
 80181dc:	4a02      	ldr	r2, [pc, #8]	; (80181e8 <stdio_exit_handler+0xc>)
 80181de:	4903      	ldr	r1, [pc, #12]	; (80181ec <stdio_exit_handler+0x10>)
 80181e0:	4803      	ldr	r0, [pc, #12]	; (80181f0 <stdio_exit_handler+0x14>)
 80181e2:	f000 b869 	b.w	80182b8 <_fwalk_sglue>
 80181e6:	bf00      	nop
 80181e8:	20000170 	.word	0x20000170
 80181ec:	0801a3e1 	.word	0x0801a3e1
 80181f0:	2000017c 	.word	0x2000017c

080181f4 <cleanup_stdio>:
 80181f4:	6841      	ldr	r1, [r0, #4]
 80181f6:	4b0c      	ldr	r3, [pc, #48]	; (8018228 <cleanup_stdio+0x34>)
 80181f8:	4299      	cmp	r1, r3
 80181fa:	b510      	push	{r4, lr}
 80181fc:	4604      	mov	r4, r0
 80181fe:	d001      	beq.n	8018204 <cleanup_stdio+0x10>
 8018200:	f002 f8ee 	bl	801a3e0 <_fflush_r>
 8018204:	68a1      	ldr	r1, [r4, #8]
 8018206:	4b09      	ldr	r3, [pc, #36]	; (801822c <cleanup_stdio+0x38>)
 8018208:	4299      	cmp	r1, r3
 801820a:	d002      	beq.n	8018212 <cleanup_stdio+0x1e>
 801820c:	4620      	mov	r0, r4
 801820e:	f002 f8e7 	bl	801a3e0 <_fflush_r>
 8018212:	68e1      	ldr	r1, [r4, #12]
 8018214:	4b06      	ldr	r3, [pc, #24]	; (8018230 <cleanup_stdio+0x3c>)
 8018216:	4299      	cmp	r1, r3
 8018218:	d004      	beq.n	8018224 <cleanup_stdio+0x30>
 801821a:	4620      	mov	r0, r4
 801821c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018220:	f002 b8de 	b.w	801a3e0 <_fflush_r>
 8018224:	bd10      	pop	{r4, pc}
 8018226:	bf00      	nop
 8018228:	2000b140 	.word	0x2000b140
 801822c:	2000b1a8 	.word	0x2000b1a8
 8018230:	2000b210 	.word	0x2000b210

08018234 <global_stdio_init.part.0>:
 8018234:	b510      	push	{r4, lr}
 8018236:	4b0b      	ldr	r3, [pc, #44]	; (8018264 <global_stdio_init.part.0+0x30>)
 8018238:	4c0b      	ldr	r4, [pc, #44]	; (8018268 <global_stdio_init.part.0+0x34>)
 801823a:	4a0c      	ldr	r2, [pc, #48]	; (801826c <global_stdio_init.part.0+0x38>)
 801823c:	601a      	str	r2, [r3, #0]
 801823e:	4620      	mov	r0, r4
 8018240:	2200      	movs	r2, #0
 8018242:	2104      	movs	r1, #4
 8018244:	f7ff ffa6 	bl	8018194 <std>
 8018248:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801824c:	2201      	movs	r2, #1
 801824e:	2109      	movs	r1, #9
 8018250:	f7ff ffa0 	bl	8018194 <std>
 8018254:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8018258:	2202      	movs	r2, #2
 801825a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801825e:	2112      	movs	r1, #18
 8018260:	f7ff bf98 	b.w	8018194 <std>
 8018264:	2000b278 	.word	0x2000b278
 8018268:	2000b140 	.word	0x2000b140
 801826c:	080181dd 	.word	0x080181dd

08018270 <__sfp_lock_acquire>:
 8018270:	4801      	ldr	r0, [pc, #4]	; (8018278 <__sfp_lock_acquire+0x8>)
 8018272:	f000 ba8b 	b.w	801878c <__retarget_lock_acquire_recursive>
 8018276:	bf00      	nop
 8018278:	2000b281 	.word	0x2000b281

0801827c <__sfp_lock_release>:
 801827c:	4801      	ldr	r0, [pc, #4]	; (8018284 <__sfp_lock_release+0x8>)
 801827e:	f000 ba86 	b.w	801878e <__retarget_lock_release_recursive>
 8018282:	bf00      	nop
 8018284:	2000b281 	.word	0x2000b281

08018288 <__sinit>:
 8018288:	b510      	push	{r4, lr}
 801828a:	4604      	mov	r4, r0
 801828c:	f7ff fff0 	bl	8018270 <__sfp_lock_acquire>
 8018290:	6a23      	ldr	r3, [r4, #32]
 8018292:	b11b      	cbz	r3, 801829c <__sinit+0x14>
 8018294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018298:	f7ff bff0 	b.w	801827c <__sfp_lock_release>
 801829c:	4b04      	ldr	r3, [pc, #16]	; (80182b0 <__sinit+0x28>)
 801829e:	6223      	str	r3, [r4, #32]
 80182a0:	4b04      	ldr	r3, [pc, #16]	; (80182b4 <__sinit+0x2c>)
 80182a2:	681b      	ldr	r3, [r3, #0]
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	d1f5      	bne.n	8018294 <__sinit+0xc>
 80182a8:	f7ff ffc4 	bl	8018234 <global_stdio_init.part.0>
 80182ac:	e7f2      	b.n	8018294 <__sinit+0xc>
 80182ae:	bf00      	nop
 80182b0:	080181f5 	.word	0x080181f5
 80182b4:	2000b278 	.word	0x2000b278

080182b8 <_fwalk_sglue>:
 80182b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80182bc:	4607      	mov	r7, r0
 80182be:	4688      	mov	r8, r1
 80182c0:	4614      	mov	r4, r2
 80182c2:	2600      	movs	r6, #0
 80182c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80182c8:	f1b9 0901 	subs.w	r9, r9, #1
 80182cc:	d505      	bpl.n	80182da <_fwalk_sglue+0x22>
 80182ce:	6824      	ldr	r4, [r4, #0]
 80182d0:	2c00      	cmp	r4, #0
 80182d2:	d1f7      	bne.n	80182c4 <_fwalk_sglue+0xc>
 80182d4:	4630      	mov	r0, r6
 80182d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80182da:	89ab      	ldrh	r3, [r5, #12]
 80182dc:	2b01      	cmp	r3, #1
 80182de:	d907      	bls.n	80182f0 <_fwalk_sglue+0x38>
 80182e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80182e4:	3301      	adds	r3, #1
 80182e6:	d003      	beq.n	80182f0 <_fwalk_sglue+0x38>
 80182e8:	4629      	mov	r1, r5
 80182ea:	4638      	mov	r0, r7
 80182ec:	47c0      	blx	r8
 80182ee:	4306      	orrs	r6, r0
 80182f0:	3568      	adds	r5, #104	; 0x68
 80182f2:	e7e9      	b.n	80182c8 <_fwalk_sglue+0x10>

080182f4 <iprintf>:
 80182f4:	b40f      	push	{r0, r1, r2, r3}
 80182f6:	b507      	push	{r0, r1, r2, lr}
 80182f8:	4906      	ldr	r1, [pc, #24]	; (8018314 <iprintf+0x20>)
 80182fa:	ab04      	add	r3, sp, #16
 80182fc:	6808      	ldr	r0, [r1, #0]
 80182fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8018302:	6881      	ldr	r1, [r0, #8]
 8018304:	9301      	str	r3, [sp, #4]
 8018306:	f001 fecb 	bl	801a0a0 <_vfiprintf_r>
 801830a:	b003      	add	sp, #12
 801830c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018310:	b004      	add	sp, #16
 8018312:	4770      	bx	lr
 8018314:	200001c8 	.word	0x200001c8

08018318 <_puts_r>:
 8018318:	6a03      	ldr	r3, [r0, #32]
 801831a:	b570      	push	{r4, r5, r6, lr}
 801831c:	6884      	ldr	r4, [r0, #8]
 801831e:	4605      	mov	r5, r0
 8018320:	460e      	mov	r6, r1
 8018322:	b90b      	cbnz	r3, 8018328 <_puts_r+0x10>
 8018324:	f7ff ffb0 	bl	8018288 <__sinit>
 8018328:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801832a:	07db      	lsls	r3, r3, #31
 801832c:	d405      	bmi.n	801833a <_puts_r+0x22>
 801832e:	89a3      	ldrh	r3, [r4, #12]
 8018330:	0598      	lsls	r0, r3, #22
 8018332:	d402      	bmi.n	801833a <_puts_r+0x22>
 8018334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018336:	f000 fa29 	bl	801878c <__retarget_lock_acquire_recursive>
 801833a:	89a3      	ldrh	r3, [r4, #12]
 801833c:	0719      	lsls	r1, r3, #28
 801833e:	d513      	bpl.n	8018368 <_puts_r+0x50>
 8018340:	6923      	ldr	r3, [r4, #16]
 8018342:	b18b      	cbz	r3, 8018368 <_puts_r+0x50>
 8018344:	3e01      	subs	r6, #1
 8018346:	68a3      	ldr	r3, [r4, #8]
 8018348:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801834c:	3b01      	subs	r3, #1
 801834e:	60a3      	str	r3, [r4, #8]
 8018350:	b9e9      	cbnz	r1, 801838e <_puts_r+0x76>
 8018352:	2b00      	cmp	r3, #0
 8018354:	da2e      	bge.n	80183b4 <_puts_r+0x9c>
 8018356:	4622      	mov	r2, r4
 8018358:	210a      	movs	r1, #10
 801835a:	4628      	mov	r0, r5
 801835c:	f000 f89b 	bl	8018496 <__swbuf_r>
 8018360:	3001      	adds	r0, #1
 8018362:	d007      	beq.n	8018374 <_puts_r+0x5c>
 8018364:	250a      	movs	r5, #10
 8018366:	e007      	b.n	8018378 <_puts_r+0x60>
 8018368:	4621      	mov	r1, r4
 801836a:	4628      	mov	r0, r5
 801836c:	f000 f8d0 	bl	8018510 <__swsetup_r>
 8018370:	2800      	cmp	r0, #0
 8018372:	d0e7      	beq.n	8018344 <_puts_r+0x2c>
 8018374:	f04f 35ff 	mov.w	r5, #4294967295
 8018378:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801837a:	07da      	lsls	r2, r3, #31
 801837c:	d405      	bmi.n	801838a <_puts_r+0x72>
 801837e:	89a3      	ldrh	r3, [r4, #12]
 8018380:	059b      	lsls	r3, r3, #22
 8018382:	d402      	bmi.n	801838a <_puts_r+0x72>
 8018384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018386:	f000 fa02 	bl	801878e <__retarget_lock_release_recursive>
 801838a:	4628      	mov	r0, r5
 801838c:	bd70      	pop	{r4, r5, r6, pc}
 801838e:	2b00      	cmp	r3, #0
 8018390:	da04      	bge.n	801839c <_puts_r+0x84>
 8018392:	69a2      	ldr	r2, [r4, #24]
 8018394:	429a      	cmp	r2, r3
 8018396:	dc06      	bgt.n	80183a6 <_puts_r+0x8e>
 8018398:	290a      	cmp	r1, #10
 801839a:	d004      	beq.n	80183a6 <_puts_r+0x8e>
 801839c:	6823      	ldr	r3, [r4, #0]
 801839e:	1c5a      	adds	r2, r3, #1
 80183a0:	6022      	str	r2, [r4, #0]
 80183a2:	7019      	strb	r1, [r3, #0]
 80183a4:	e7cf      	b.n	8018346 <_puts_r+0x2e>
 80183a6:	4622      	mov	r2, r4
 80183a8:	4628      	mov	r0, r5
 80183aa:	f000 f874 	bl	8018496 <__swbuf_r>
 80183ae:	3001      	adds	r0, #1
 80183b0:	d1c9      	bne.n	8018346 <_puts_r+0x2e>
 80183b2:	e7df      	b.n	8018374 <_puts_r+0x5c>
 80183b4:	6823      	ldr	r3, [r4, #0]
 80183b6:	250a      	movs	r5, #10
 80183b8:	1c5a      	adds	r2, r3, #1
 80183ba:	6022      	str	r2, [r4, #0]
 80183bc:	701d      	strb	r5, [r3, #0]
 80183be:	e7db      	b.n	8018378 <_puts_r+0x60>

080183c0 <puts>:
 80183c0:	4b02      	ldr	r3, [pc, #8]	; (80183cc <puts+0xc>)
 80183c2:	4601      	mov	r1, r0
 80183c4:	6818      	ldr	r0, [r3, #0]
 80183c6:	f7ff bfa7 	b.w	8018318 <_puts_r>
 80183ca:	bf00      	nop
 80183cc:	200001c8 	.word	0x200001c8

080183d0 <siprintf>:
 80183d0:	b40e      	push	{r1, r2, r3}
 80183d2:	b500      	push	{lr}
 80183d4:	b09c      	sub	sp, #112	; 0x70
 80183d6:	ab1d      	add	r3, sp, #116	; 0x74
 80183d8:	9002      	str	r0, [sp, #8]
 80183da:	9006      	str	r0, [sp, #24]
 80183dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80183e0:	4809      	ldr	r0, [pc, #36]	; (8018408 <siprintf+0x38>)
 80183e2:	9107      	str	r1, [sp, #28]
 80183e4:	9104      	str	r1, [sp, #16]
 80183e6:	4909      	ldr	r1, [pc, #36]	; (801840c <siprintf+0x3c>)
 80183e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80183ec:	9105      	str	r1, [sp, #20]
 80183ee:	6800      	ldr	r0, [r0, #0]
 80183f0:	9301      	str	r3, [sp, #4]
 80183f2:	a902      	add	r1, sp, #8
 80183f4:	f001 fd2c 	bl	8019e50 <_svfiprintf_r>
 80183f8:	9b02      	ldr	r3, [sp, #8]
 80183fa:	2200      	movs	r2, #0
 80183fc:	701a      	strb	r2, [r3, #0]
 80183fe:	b01c      	add	sp, #112	; 0x70
 8018400:	f85d eb04 	ldr.w	lr, [sp], #4
 8018404:	b003      	add	sp, #12
 8018406:	4770      	bx	lr
 8018408:	200001c8 	.word	0x200001c8
 801840c:	ffff0208 	.word	0xffff0208

08018410 <__sread>:
 8018410:	b510      	push	{r4, lr}
 8018412:	460c      	mov	r4, r1
 8018414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018418:	f000 f96a 	bl	80186f0 <_read_r>
 801841c:	2800      	cmp	r0, #0
 801841e:	bfab      	itete	ge
 8018420:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018422:	89a3      	ldrhlt	r3, [r4, #12]
 8018424:	181b      	addge	r3, r3, r0
 8018426:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801842a:	bfac      	ite	ge
 801842c:	6563      	strge	r3, [r4, #84]	; 0x54
 801842e:	81a3      	strhlt	r3, [r4, #12]
 8018430:	bd10      	pop	{r4, pc}

08018432 <__swrite>:
 8018432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018436:	461f      	mov	r7, r3
 8018438:	898b      	ldrh	r3, [r1, #12]
 801843a:	05db      	lsls	r3, r3, #23
 801843c:	4605      	mov	r5, r0
 801843e:	460c      	mov	r4, r1
 8018440:	4616      	mov	r6, r2
 8018442:	d505      	bpl.n	8018450 <__swrite+0x1e>
 8018444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018448:	2302      	movs	r3, #2
 801844a:	2200      	movs	r2, #0
 801844c:	f000 f93e 	bl	80186cc <_lseek_r>
 8018450:	89a3      	ldrh	r3, [r4, #12]
 8018452:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018456:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801845a:	81a3      	strh	r3, [r4, #12]
 801845c:	4632      	mov	r2, r6
 801845e:	463b      	mov	r3, r7
 8018460:	4628      	mov	r0, r5
 8018462:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018466:	f000 b955 	b.w	8018714 <_write_r>

0801846a <__sseek>:
 801846a:	b510      	push	{r4, lr}
 801846c:	460c      	mov	r4, r1
 801846e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018472:	f000 f92b 	bl	80186cc <_lseek_r>
 8018476:	1c43      	adds	r3, r0, #1
 8018478:	89a3      	ldrh	r3, [r4, #12]
 801847a:	bf15      	itete	ne
 801847c:	6560      	strne	r0, [r4, #84]	; 0x54
 801847e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018482:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018486:	81a3      	strheq	r3, [r4, #12]
 8018488:	bf18      	it	ne
 801848a:	81a3      	strhne	r3, [r4, #12]
 801848c:	bd10      	pop	{r4, pc}

0801848e <__sclose>:
 801848e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018492:	f000 b8b5 	b.w	8018600 <_close_r>

08018496 <__swbuf_r>:
 8018496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018498:	460e      	mov	r6, r1
 801849a:	4614      	mov	r4, r2
 801849c:	4605      	mov	r5, r0
 801849e:	b118      	cbz	r0, 80184a8 <__swbuf_r+0x12>
 80184a0:	6a03      	ldr	r3, [r0, #32]
 80184a2:	b90b      	cbnz	r3, 80184a8 <__swbuf_r+0x12>
 80184a4:	f7ff fef0 	bl	8018288 <__sinit>
 80184a8:	69a3      	ldr	r3, [r4, #24]
 80184aa:	60a3      	str	r3, [r4, #8]
 80184ac:	89a3      	ldrh	r3, [r4, #12]
 80184ae:	071a      	lsls	r2, r3, #28
 80184b0:	d525      	bpl.n	80184fe <__swbuf_r+0x68>
 80184b2:	6923      	ldr	r3, [r4, #16]
 80184b4:	b31b      	cbz	r3, 80184fe <__swbuf_r+0x68>
 80184b6:	6823      	ldr	r3, [r4, #0]
 80184b8:	6922      	ldr	r2, [r4, #16]
 80184ba:	1a98      	subs	r0, r3, r2
 80184bc:	6963      	ldr	r3, [r4, #20]
 80184be:	b2f6      	uxtb	r6, r6
 80184c0:	4283      	cmp	r3, r0
 80184c2:	4637      	mov	r7, r6
 80184c4:	dc04      	bgt.n	80184d0 <__swbuf_r+0x3a>
 80184c6:	4621      	mov	r1, r4
 80184c8:	4628      	mov	r0, r5
 80184ca:	f001 ff89 	bl	801a3e0 <_fflush_r>
 80184ce:	b9e0      	cbnz	r0, 801850a <__swbuf_r+0x74>
 80184d0:	68a3      	ldr	r3, [r4, #8]
 80184d2:	3b01      	subs	r3, #1
 80184d4:	60a3      	str	r3, [r4, #8]
 80184d6:	6823      	ldr	r3, [r4, #0]
 80184d8:	1c5a      	adds	r2, r3, #1
 80184da:	6022      	str	r2, [r4, #0]
 80184dc:	701e      	strb	r6, [r3, #0]
 80184de:	6962      	ldr	r2, [r4, #20]
 80184e0:	1c43      	adds	r3, r0, #1
 80184e2:	429a      	cmp	r2, r3
 80184e4:	d004      	beq.n	80184f0 <__swbuf_r+0x5a>
 80184e6:	89a3      	ldrh	r3, [r4, #12]
 80184e8:	07db      	lsls	r3, r3, #31
 80184ea:	d506      	bpl.n	80184fa <__swbuf_r+0x64>
 80184ec:	2e0a      	cmp	r6, #10
 80184ee:	d104      	bne.n	80184fa <__swbuf_r+0x64>
 80184f0:	4621      	mov	r1, r4
 80184f2:	4628      	mov	r0, r5
 80184f4:	f001 ff74 	bl	801a3e0 <_fflush_r>
 80184f8:	b938      	cbnz	r0, 801850a <__swbuf_r+0x74>
 80184fa:	4638      	mov	r0, r7
 80184fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80184fe:	4621      	mov	r1, r4
 8018500:	4628      	mov	r0, r5
 8018502:	f000 f805 	bl	8018510 <__swsetup_r>
 8018506:	2800      	cmp	r0, #0
 8018508:	d0d5      	beq.n	80184b6 <__swbuf_r+0x20>
 801850a:	f04f 37ff 	mov.w	r7, #4294967295
 801850e:	e7f4      	b.n	80184fa <__swbuf_r+0x64>

08018510 <__swsetup_r>:
 8018510:	b538      	push	{r3, r4, r5, lr}
 8018512:	4b2a      	ldr	r3, [pc, #168]	; (80185bc <__swsetup_r+0xac>)
 8018514:	4605      	mov	r5, r0
 8018516:	6818      	ldr	r0, [r3, #0]
 8018518:	460c      	mov	r4, r1
 801851a:	b118      	cbz	r0, 8018524 <__swsetup_r+0x14>
 801851c:	6a03      	ldr	r3, [r0, #32]
 801851e:	b90b      	cbnz	r3, 8018524 <__swsetup_r+0x14>
 8018520:	f7ff feb2 	bl	8018288 <__sinit>
 8018524:	89a3      	ldrh	r3, [r4, #12]
 8018526:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801852a:	0718      	lsls	r0, r3, #28
 801852c:	d422      	bmi.n	8018574 <__swsetup_r+0x64>
 801852e:	06d9      	lsls	r1, r3, #27
 8018530:	d407      	bmi.n	8018542 <__swsetup_r+0x32>
 8018532:	2309      	movs	r3, #9
 8018534:	602b      	str	r3, [r5, #0]
 8018536:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801853a:	81a3      	strh	r3, [r4, #12]
 801853c:	f04f 30ff 	mov.w	r0, #4294967295
 8018540:	e034      	b.n	80185ac <__swsetup_r+0x9c>
 8018542:	0758      	lsls	r0, r3, #29
 8018544:	d512      	bpl.n	801856c <__swsetup_r+0x5c>
 8018546:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018548:	b141      	cbz	r1, 801855c <__swsetup_r+0x4c>
 801854a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801854e:	4299      	cmp	r1, r3
 8018550:	d002      	beq.n	8018558 <__swsetup_r+0x48>
 8018552:	4628      	mov	r0, r5
 8018554:	f000 ffa6 	bl	80194a4 <_free_r>
 8018558:	2300      	movs	r3, #0
 801855a:	6363      	str	r3, [r4, #52]	; 0x34
 801855c:	89a3      	ldrh	r3, [r4, #12]
 801855e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018562:	81a3      	strh	r3, [r4, #12]
 8018564:	2300      	movs	r3, #0
 8018566:	6063      	str	r3, [r4, #4]
 8018568:	6923      	ldr	r3, [r4, #16]
 801856a:	6023      	str	r3, [r4, #0]
 801856c:	89a3      	ldrh	r3, [r4, #12]
 801856e:	f043 0308 	orr.w	r3, r3, #8
 8018572:	81a3      	strh	r3, [r4, #12]
 8018574:	6923      	ldr	r3, [r4, #16]
 8018576:	b94b      	cbnz	r3, 801858c <__swsetup_r+0x7c>
 8018578:	89a3      	ldrh	r3, [r4, #12]
 801857a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801857e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018582:	d003      	beq.n	801858c <__swsetup_r+0x7c>
 8018584:	4621      	mov	r1, r4
 8018586:	4628      	mov	r0, r5
 8018588:	f001 ff78 	bl	801a47c <__smakebuf_r>
 801858c:	89a0      	ldrh	r0, [r4, #12]
 801858e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018592:	f010 0301 	ands.w	r3, r0, #1
 8018596:	d00a      	beq.n	80185ae <__swsetup_r+0x9e>
 8018598:	2300      	movs	r3, #0
 801859a:	60a3      	str	r3, [r4, #8]
 801859c:	6963      	ldr	r3, [r4, #20]
 801859e:	425b      	negs	r3, r3
 80185a0:	61a3      	str	r3, [r4, #24]
 80185a2:	6923      	ldr	r3, [r4, #16]
 80185a4:	b943      	cbnz	r3, 80185b8 <__swsetup_r+0xa8>
 80185a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80185aa:	d1c4      	bne.n	8018536 <__swsetup_r+0x26>
 80185ac:	bd38      	pop	{r3, r4, r5, pc}
 80185ae:	0781      	lsls	r1, r0, #30
 80185b0:	bf58      	it	pl
 80185b2:	6963      	ldrpl	r3, [r4, #20]
 80185b4:	60a3      	str	r3, [r4, #8]
 80185b6:	e7f4      	b.n	80185a2 <__swsetup_r+0x92>
 80185b8:	2000      	movs	r0, #0
 80185ba:	e7f7      	b.n	80185ac <__swsetup_r+0x9c>
 80185bc:	200001c8 	.word	0x200001c8

080185c0 <memset>:
 80185c0:	4402      	add	r2, r0
 80185c2:	4603      	mov	r3, r0
 80185c4:	4293      	cmp	r3, r2
 80185c6:	d100      	bne.n	80185ca <memset+0xa>
 80185c8:	4770      	bx	lr
 80185ca:	f803 1b01 	strb.w	r1, [r3], #1
 80185ce:	e7f9      	b.n	80185c4 <memset+0x4>

080185d0 <strncpy>:
 80185d0:	b510      	push	{r4, lr}
 80185d2:	3901      	subs	r1, #1
 80185d4:	4603      	mov	r3, r0
 80185d6:	b132      	cbz	r2, 80185e6 <strncpy+0x16>
 80185d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80185dc:	f803 4b01 	strb.w	r4, [r3], #1
 80185e0:	3a01      	subs	r2, #1
 80185e2:	2c00      	cmp	r4, #0
 80185e4:	d1f7      	bne.n	80185d6 <strncpy+0x6>
 80185e6:	441a      	add	r2, r3
 80185e8:	2100      	movs	r1, #0
 80185ea:	4293      	cmp	r3, r2
 80185ec:	d100      	bne.n	80185f0 <strncpy+0x20>
 80185ee:	bd10      	pop	{r4, pc}
 80185f0:	f803 1b01 	strb.w	r1, [r3], #1
 80185f4:	e7f9      	b.n	80185ea <strncpy+0x1a>
	...

080185f8 <_localeconv_r>:
 80185f8:	4800      	ldr	r0, [pc, #0]	; (80185fc <_localeconv_r+0x4>)
 80185fa:	4770      	bx	lr
 80185fc:	200002bc 	.word	0x200002bc

08018600 <_close_r>:
 8018600:	b538      	push	{r3, r4, r5, lr}
 8018602:	4d06      	ldr	r5, [pc, #24]	; (801861c <_close_r+0x1c>)
 8018604:	2300      	movs	r3, #0
 8018606:	4604      	mov	r4, r0
 8018608:	4608      	mov	r0, r1
 801860a:	602b      	str	r3, [r5, #0]
 801860c:	f7eb f8c9 	bl	80037a2 <_close>
 8018610:	1c43      	adds	r3, r0, #1
 8018612:	d102      	bne.n	801861a <_close_r+0x1a>
 8018614:	682b      	ldr	r3, [r5, #0]
 8018616:	b103      	cbz	r3, 801861a <_close_r+0x1a>
 8018618:	6023      	str	r3, [r4, #0]
 801861a:	bd38      	pop	{r3, r4, r5, pc}
 801861c:	2000b27c 	.word	0x2000b27c

08018620 <_reclaim_reent>:
 8018620:	4b29      	ldr	r3, [pc, #164]	; (80186c8 <_reclaim_reent+0xa8>)
 8018622:	681b      	ldr	r3, [r3, #0]
 8018624:	4283      	cmp	r3, r0
 8018626:	b570      	push	{r4, r5, r6, lr}
 8018628:	4604      	mov	r4, r0
 801862a:	d04b      	beq.n	80186c4 <_reclaim_reent+0xa4>
 801862c:	69c3      	ldr	r3, [r0, #28]
 801862e:	b143      	cbz	r3, 8018642 <_reclaim_reent+0x22>
 8018630:	68db      	ldr	r3, [r3, #12]
 8018632:	2b00      	cmp	r3, #0
 8018634:	d144      	bne.n	80186c0 <_reclaim_reent+0xa0>
 8018636:	69e3      	ldr	r3, [r4, #28]
 8018638:	6819      	ldr	r1, [r3, #0]
 801863a:	b111      	cbz	r1, 8018642 <_reclaim_reent+0x22>
 801863c:	4620      	mov	r0, r4
 801863e:	f000 ff31 	bl	80194a4 <_free_r>
 8018642:	6961      	ldr	r1, [r4, #20]
 8018644:	b111      	cbz	r1, 801864c <_reclaim_reent+0x2c>
 8018646:	4620      	mov	r0, r4
 8018648:	f000 ff2c 	bl	80194a4 <_free_r>
 801864c:	69e1      	ldr	r1, [r4, #28]
 801864e:	b111      	cbz	r1, 8018656 <_reclaim_reent+0x36>
 8018650:	4620      	mov	r0, r4
 8018652:	f000 ff27 	bl	80194a4 <_free_r>
 8018656:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018658:	b111      	cbz	r1, 8018660 <_reclaim_reent+0x40>
 801865a:	4620      	mov	r0, r4
 801865c:	f000 ff22 	bl	80194a4 <_free_r>
 8018660:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018662:	b111      	cbz	r1, 801866a <_reclaim_reent+0x4a>
 8018664:	4620      	mov	r0, r4
 8018666:	f000 ff1d 	bl	80194a4 <_free_r>
 801866a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801866c:	b111      	cbz	r1, 8018674 <_reclaim_reent+0x54>
 801866e:	4620      	mov	r0, r4
 8018670:	f000 ff18 	bl	80194a4 <_free_r>
 8018674:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8018676:	b111      	cbz	r1, 801867e <_reclaim_reent+0x5e>
 8018678:	4620      	mov	r0, r4
 801867a:	f000 ff13 	bl	80194a4 <_free_r>
 801867e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8018680:	b111      	cbz	r1, 8018688 <_reclaim_reent+0x68>
 8018682:	4620      	mov	r0, r4
 8018684:	f000 ff0e 	bl	80194a4 <_free_r>
 8018688:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801868a:	b111      	cbz	r1, 8018692 <_reclaim_reent+0x72>
 801868c:	4620      	mov	r0, r4
 801868e:	f000 ff09 	bl	80194a4 <_free_r>
 8018692:	6a23      	ldr	r3, [r4, #32]
 8018694:	b1b3      	cbz	r3, 80186c4 <_reclaim_reent+0xa4>
 8018696:	4620      	mov	r0, r4
 8018698:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801869c:	4718      	bx	r3
 801869e:	5949      	ldr	r1, [r1, r5]
 80186a0:	b941      	cbnz	r1, 80186b4 <_reclaim_reent+0x94>
 80186a2:	3504      	adds	r5, #4
 80186a4:	69e3      	ldr	r3, [r4, #28]
 80186a6:	2d80      	cmp	r5, #128	; 0x80
 80186a8:	68d9      	ldr	r1, [r3, #12]
 80186aa:	d1f8      	bne.n	801869e <_reclaim_reent+0x7e>
 80186ac:	4620      	mov	r0, r4
 80186ae:	f000 fef9 	bl	80194a4 <_free_r>
 80186b2:	e7c0      	b.n	8018636 <_reclaim_reent+0x16>
 80186b4:	680e      	ldr	r6, [r1, #0]
 80186b6:	4620      	mov	r0, r4
 80186b8:	f000 fef4 	bl	80194a4 <_free_r>
 80186bc:	4631      	mov	r1, r6
 80186be:	e7ef      	b.n	80186a0 <_reclaim_reent+0x80>
 80186c0:	2500      	movs	r5, #0
 80186c2:	e7ef      	b.n	80186a4 <_reclaim_reent+0x84>
 80186c4:	bd70      	pop	{r4, r5, r6, pc}
 80186c6:	bf00      	nop
 80186c8:	200001c8 	.word	0x200001c8

080186cc <_lseek_r>:
 80186cc:	b538      	push	{r3, r4, r5, lr}
 80186ce:	4d07      	ldr	r5, [pc, #28]	; (80186ec <_lseek_r+0x20>)
 80186d0:	4604      	mov	r4, r0
 80186d2:	4608      	mov	r0, r1
 80186d4:	4611      	mov	r1, r2
 80186d6:	2200      	movs	r2, #0
 80186d8:	602a      	str	r2, [r5, #0]
 80186da:	461a      	mov	r2, r3
 80186dc:	f7eb f888 	bl	80037f0 <_lseek>
 80186e0:	1c43      	adds	r3, r0, #1
 80186e2:	d102      	bne.n	80186ea <_lseek_r+0x1e>
 80186e4:	682b      	ldr	r3, [r5, #0]
 80186e6:	b103      	cbz	r3, 80186ea <_lseek_r+0x1e>
 80186e8:	6023      	str	r3, [r4, #0]
 80186ea:	bd38      	pop	{r3, r4, r5, pc}
 80186ec:	2000b27c 	.word	0x2000b27c

080186f0 <_read_r>:
 80186f0:	b538      	push	{r3, r4, r5, lr}
 80186f2:	4d07      	ldr	r5, [pc, #28]	; (8018710 <_read_r+0x20>)
 80186f4:	4604      	mov	r4, r0
 80186f6:	4608      	mov	r0, r1
 80186f8:	4611      	mov	r1, r2
 80186fa:	2200      	movs	r2, #0
 80186fc:	602a      	str	r2, [r5, #0]
 80186fe:	461a      	mov	r2, r3
 8018700:	f7eb f816 	bl	8003730 <_read>
 8018704:	1c43      	adds	r3, r0, #1
 8018706:	d102      	bne.n	801870e <_read_r+0x1e>
 8018708:	682b      	ldr	r3, [r5, #0]
 801870a:	b103      	cbz	r3, 801870e <_read_r+0x1e>
 801870c:	6023      	str	r3, [r4, #0]
 801870e:	bd38      	pop	{r3, r4, r5, pc}
 8018710:	2000b27c 	.word	0x2000b27c

08018714 <_write_r>:
 8018714:	b538      	push	{r3, r4, r5, lr}
 8018716:	4d07      	ldr	r5, [pc, #28]	; (8018734 <_write_r+0x20>)
 8018718:	4604      	mov	r4, r0
 801871a:	4608      	mov	r0, r1
 801871c:	4611      	mov	r1, r2
 801871e:	2200      	movs	r2, #0
 8018720:	602a      	str	r2, [r5, #0]
 8018722:	461a      	mov	r2, r3
 8018724:	f7eb f821 	bl	800376a <_write>
 8018728:	1c43      	adds	r3, r0, #1
 801872a:	d102      	bne.n	8018732 <_write_r+0x1e>
 801872c:	682b      	ldr	r3, [r5, #0]
 801872e:	b103      	cbz	r3, 8018732 <_write_r+0x1e>
 8018730:	6023      	str	r3, [r4, #0]
 8018732:	bd38      	pop	{r3, r4, r5, pc}
 8018734:	2000b27c 	.word	0x2000b27c

08018738 <__errno>:
 8018738:	4b01      	ldr	r3, [pc, #4]	; (8018740 <__errno+0x8>)
 801873a:	6818      	ldr	r0, [r3, #0]
 801873c:	4770      	bx	lr
 801873e:	bf00      	nop
 8018740:	200001c8 	.word	0x200001c8

08018744 <__libc_init_array>:
 8018744:	b570      	push	{r4, r5, r6, lr}
 8018746:	4d0d      	ldr	r5, [pc, #52]	; (801877c <__libc_init_array+0x38>)
 8018748:	4c0d      	ldr	r4, [pc, #52]	; (8018780 <__libc_init_array+0x3c>)
 801874a:	1b64      	subs	r4, r4, r5
 801874c:	10a4      	asrs	r4, r4, #2
 801874e:	2600      	movs	r6, #0
 8018750:	42a6      	cmp	r6, r4
 8018752:	d109      	bne.n	8018768 <__libc_init_array+0x24>
 8018754:	4d0b      	ldr	r5, [pc, #44]	; (8018784 <__libc_init_array+0x40>)
 8018756:	4c0c      	ldr	r4, [pc, #48]	; (8018788 <__libc_init_array+0x44>)
 8018758:	f002 f800 	bl	801a75c <_init>
 801875c:	1b64      	subs	r4, r4, r5
 801875e:	10a4      	asrs	r4, r4, #2
 8018760:	2600      	movs	r6, #0
 8018762:	42a6      	cmp	r6, r4
 8018764:	d105      	bne.n	8018772 <__libc_init_array+0x2e>
 8018766:	bd70      	pop	{r4, r5, r6, pc}
 8018768:	f855 3b04 	ldr.w	r3, [r5], #4
 801876c:	4798      	blx	r3
 801876e:	3601      	adds	r6, #1
 8018770:	e7ee      	b.n	8018750 <__libc_init_array+0xc>
 8018772:	f855 3b04 	ldr.w	r3, [r5], #4
 8018776:	4798      	blx	r3
 8018778:	3601      	adds	r6, #1
 801877a:	e7f2      	b.n	8018762 <__libc_init_array+0x1e>
 801877c:	0801af7c 	.word	0x0801af7c
 8018780:	0801af7c 	.word	0x0801af7c
 8018784:	0801af7c 	.word	0x0801af7c
 8018788:	0801af80 	.word	0x0801af80

0801878c <__retarget_lock_acquire_recursive>:
 801878c:	4770      	bx	lr

0801878e <__retarget_lock_release_recursive>:
 801878e:	4770      	bx	lr

08018790 <memcpy>:
 8018790:	440a      	add	r2, r1
 8018792:	4291      	cmp	r1, r2
 8018794:	f100 33ff 	add.w	r3, r0, #4294967295
 8018798:	d100      	bne.n	801879c <memcpy+0xc>
 801879a:	4770      	bx	lr
 801879c:	b510      	push	{r4, lr}
 801879e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80187a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80187a6:	4291      	cmp	r1, r2
 80187a8:	d1f9      	bne.n	801879e <memcpy+0xe>
 80187aa:	bd10      	pop	{r4, pc}

080187ac <quorem>:
 80187ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187b0:	6903      	ldr	r3, [r0, #16]
 80187b2:	690c      	ldr	r4, [r1, #16]
 80187b4:	42a3      	cmp	r3, r4
 80187b6:	4607      	mov	r7, r0
 80187b8:	db7e      	blt.n	80188b8 <quorem+0x10c>
 80187ba:	3c01      	subs	r4, #1
 80187bc:	f101 0814 	add.w	r8, r1, #20
 80187c0:	f100 0514 	add.w	r5, r0, #20
 80187c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80187c8:	9301      	str	r3, [sp, #4]
 80187ca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80187ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80187d2:	3301      	adds	r3, #1
 80187d4:	429a      	cmp	r2, r3
 80187d6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80187da:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80187de:	fbb2 f6f3 	udiv	r6, r2, r3
 80187e2:	d331      	bcc.n	8018848 <quorem+0x9c>
 80187e4:	f04f 0e00 	mov.w	lr, #0
 80187e8:	4640      	mov	r0, r8
 80187ea:	46ac      	mov	ip, r5
 80187ec:	46f2      	mov	sl, lr
 80187ee:	f850 2b04 	ldr.w	r2, [r0], #4
 80187f2:	b293      	uxth	r3, r2
 80187f4:	fb06 e303 	mla	r3, r6, r3, lr
 80187f8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80187fc:	0c1a      	lsrs	r2, r3, #16
 80187fe:	b29b      	uxth	r3, r3
 8018800:	ebaa 0303 	sub.w	r3, sl, r3
 8018804:	f8dc a000 	ldr.w	sl, [ip]
 8018808:	fa13 f38a 	uxtah	r3, r3, sl
 801880c:	fb06 220e 	mla	r2, r6, lr, r2
 8018810:	9300      	str	r3, [sp, #0]
 8018812:	9b00      	ldr	r3, [sp, #0]
 8018814:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8018818:	b292      	uxth	r2, r2
 801881a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801881e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018822:	f8bd 3000 	ldrh.w	r3, [sp]
 8018826:	4581      	cmp	r9, r0
 8018828:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801882c:	f84c 3b04 	str.w	r3, [ip], #4
 8018830:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8018834:	d2db      	bcs.n	80187ee <quorem+0x42>
 8018836:	f855 300b 	ldr.w	r3, [r5, fp]
 801883a:	b92b      	cbnz	r3, 8018848 <quorem+0x9c>
 801883c:	9b01      	ldr	r3, [sp, #4]
 801883e:	3b04      	subs	r3, #4
 8018840:	429d      	cmp	r5, r3
 8018842:	461a      	mov	r2, r3
 8018844:	d32c      	bcc.n	80188a0 <quorem+0xf4>
 8018846:	613c      	str	r4, [r7, #16]
 8018848:	4638      	mov	r0, r7
 801884a:	f001 f9a7 	bl	8019b9c <__mcmp>
 801884e:	2800      	cmp	r0, #0
 8018850:	db22      	blt.n	8018898 <quorem+0xec>
 8018852:	3601      	adds	r6, #1
 8018854:	4629      	mov	r1, r5
 8018856:	2000      	movs	r0, #0
 8018858:	f858 2b04 	ldr.w	r2, [r8], #4
 801885c:	f8d1 c000 	ldr.w	ip, [r1]
 8018860:	b293      	uxth	r3, r2
 8018862:	1ac3      	subs	r3, r0, r3
 8018864:	0c12      	lsrs	r2, r2, #16
 8018866:	fa13 f38c 	uxtah	r3, r3, ip
 801886a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801886e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018872:	b29b      	uxth	r3, r3
 8018874:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018878:	45c1      	cmp	r9, r8
 801887a:	f841 3b04 	str.w	r3, [r1], #4
 801887e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8018882:	d2e9      	bcs.n	8018858 <quorem+0xac>
 8018884:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018888:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801888c:	b922      	cbnz	r2, 8018898 <quorem+0xec>
 801888e:	3b04      	subs	r3, #4
 8018890:	429d      	cmp	r5, r3
 8018892:	461a      	mov	r2, r3
 8018894:	d30a      	bcc.n	80188ac <quorem+0x100>
 8018896:	613c      	str	r4, [r7, #16]
 8018898:	4630      	mov	r0, r6
 801889a:	b003      	add	sp, #12
 801889c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188a0:	6812      	ldr	r2, [r2, #0]
 80188a2:	3b04      	subs	r3, #4
 80188a4:	2a00      	cmp	r2, #0
 80188a6:	d1ce      	bne.n	8018846 <quorem+0x9a>
 80188a8:	3c01      	subs	r4, #1
 80188aa:	e7c9      	b.n	8018840 <quorem+0x94>
 80188ac:	6812      	ldr	r2, [r2, #0]
 80188ae:	3b04      	subs	r3, #4
 80188b0:	2a00      	cmp	r2, #0
 80188b2:	d1f0      	bne.n	8018896 <quorem+0xea>
 80188b4:	3c01      	subs	r4, #1
 80188b6:	e7eb      	b.n	8018890 <quorem+0xe4>
 80188b8:	2000      	movs	r0, #0
 80188ba:	e7ee      	b.n	801889a <quorem+0xee>
 80188bc:	0000      	movs	r0, r0
	...

080188c0 <_dtoa_r>:
 80188c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188c4:	ed2d 8b04 	vpush	{d8-d9}
 80188c8:	69c5      	ldr	r5, [r0, #28]
 80188ca:	b093      	sub	sp, #76	; 0x4c
 80188cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80188d0:	ec57 6b10 	vmov	r6, r7, d0
 80188d4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80188d8:	9107      	str	r1, [sp, #28]
 80188da:	4604      	mov	r4, r0
 80188dc:	920a      	str	r2, [sp, #40]	; 0x28
 80188de:	930d      	str	r3, [sp, #52]	; 0x34
 80188e0:	b975      	cbnz	r5, 8018900 <_dtoa_r+0x40>
 80188e2:	2010      	movs	r0, #16
 80188e4:	f000 fe2a 	bl	801953c <malloc>
 80188e8:	4602      	mov	r2, r0
 80188ea:	61e0      	str	r0, [r4, #28]
 80188ec:	b920      	cbnz	r0, 80188f8 <_dtoa_r+0x38>
 80188ee:	4bae      	ldr	r3, [pc, #696]	; (8018ba8 <_dtoa_r+0x2e8>)
 80188f0:	21ef      	movs	r1, #239	; 0xef
 80188f2:	48ae      	ldr	r0, [pc, #696]	; (8018bac <_dtoa_r+0x2ec>)
 80188f4:	f001 fe4a 	bl	801a58c <__assert_func>
 80188f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80188fc:	6005      	str	r5, [r0, #0]
 80188fe:	60c5      	str	r5, [r0, #12]
 8018900:	69e3      	ldr	r3, [r4, #28]
 8018902:	6819      	ldr	r1, [r3, #0]
 8018904:	b151      	cbz	r1, 801891c <_dtoa_r+0x5c>
 8018906:	685a      	ldr	r2, [r3, #4]
 8018908:	604a      	str	r2, [r1, #4]
 801890a:	2301      	movs	r3, #1
 801890c:	4093      	lsls	r3, r2
 801890e:	608b      	str	r3, [r1, #8]
 8018910:	4620      	mov	r0, r4
 8018912:	f000 ff07 	bl	8019724 <_Bfree>
 8018916:	69e3      	ldr	r3, [r4, #28]
 8018918:	2200      	movs	r2, #0
 801891a:	601a      	str	r2, [r3, #0]
 801891c:	1e3b      	subs	r3, r7, #0
 801891e:	bfbb      	ittet	lt
 8018920:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8018924:	9303      	strlt	r3, [sp, #12]
 8018926:	2300      	movge	r3, #0
 8018928:	2201      	movlt	r2, #1
 801892a:	bfac      	ite	ge
 801892c:	f8c8 3000 	strge.w	r3, [r8]
 8018930:	f8c8 2000 	strlt.w	r2, [r8]
 8018934:	4b9e      	ldr	r3, [pc, #632]	; (8018bb0 <_dtoa_r+0x2f0>)
 8018936:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801893a:	ea33 0308 	bics.w	r3, r3, r8
 801893e:	d11b      	bne.n	8018978 <_dtoa_r+0xb8>
 8018940:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018942:	f242 730f 	movw	r3, #9999	; 0x270f
 8018946:	6013      	str	r3, [r2, #0]
 8018948:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801894c:	4333      	orrs	r3, r6
 801894e:	f000 8593 	beq.w	8019478 <_dtoa_r+0xbb8>
 8018952:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018954:	b963      	cbnz	r3, 8018970 <_dtoa_r+0xb0>
 8018956:	4b97      	ldr	r3, [pc, #604]	; (8018bb4 <_dtoa_r+0x2f4>)
 8018958:	e027      	b.n	80189aa <_dtoa_r+0xea>
 801895a:	4b97      	ldr	r3, [pc, #604]	; (8018bb8 <_dtoa_r+0x2f8>)
 801895c:	9300      	str	r3, [sp, #0]
 801895e:	3308      	adds	r3, #8
 8018960:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018962:	6013      	str	r3, [r2, #0]
 8018964:	9800      	ldr	r0, [sp, #0]
 8018966:	b013      	add	sp, #76	; 0x4c
 8018968:	ecbd 8b04 	vpop	{d8-d9}
 801896c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018970:	4b90      	ldr	r3, [pc, #576]	; (8018bb4 <_dtoa_r+0x2f4>)
 8018972:	9300      	str	r3, [sp, #0]
 8018974:	3303      	adds	r3, #3
 8018976:	e7f3      	b.n	8018960 <_dtoa_r+0xa0>
 8018978:	ed9d 7b02 	vldr	d7, [sp, #8]
 801897c:	2200      	movs	r2, #0
 801897e:	ec51 0b17 	vmov	r0, r1, d7
 8018982:	eeb0 8a47 	vmov.f32	s16, s14
 8018986:	eef0 8a67 	vmov.f32	s17, s15
 801898a:	2300      	movs	r3, #0
 801898c:	f7e8 f8cc 	bl	8000b28 <__aeabi_dcmpeq>
 8018990:	4681      	mov	r9, r0
 8018992:	b160      	cbz	r0, 80189ae <_dtoa_r+0xee>
 8018994:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018996:	2301      	movs	r3, #1
 8018998:	6013      	str	r3, [r2, #0]
 801899a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801899c:	2b00      	cmp	r3, #0
 801899e:	f000 8568 	beq.w	8019472 <_dtoa_r+0xbb2>
 80189a2:	4b86      	ldr	r3, [pc, #536]	; (8018bbc <_dtoa_r+0x2fc>)
 80189a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80189a6:	6013      	str	r3, [r2, #0]
 80189a8:	3b01      	subs	r3, #1
 80189aa:	9300      	str	r3, [sp, #0]
 80189ac:	e7da      	b.n	8018964 <_dtoa_r+0xa4>
 80189ae:	aa10      	add	r2, sp, #64	; 0x40
 80189b0:	a911      	add	r1, sp, #68	; 0x44
 80189b2:	4620      	mov	r0, r4
 80189b4:	eeb0 0a48 	vmov.f32	s0, s16
 80189b8:	eef0 0a68 	vmov.f32	s1, s17
 80189bc:	f001 f994 	bl	8019ce8 <__d2b>
 80189c0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80189c4:	4682      	mov	sl, r0
 80189c6:	2d00      	cmp	r5, #0
 80189c8:	d07f      	beq.n	8018aca <_dtoa_r+0x20a>
 80189ca:	ee18 3a90 	vmov	r3, s17
 80189ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80189d2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80189d6:	ec51 0b18 	vmov	r0, r1, d8
 80189da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80189de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80189e2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80189e6:	4619      	mov	r1, r3
 80189e8:	2200      	movs	r2, #0
 80189ea:	4b75      	ldr	r3, [pc, #468]	; (8018bc0 <_dtoa_r+0x300>)
 80189ec:	f7e7 fc7c 	bl	80002e8 <__aeabi_dsub>
 80189f0:	a367      	add	r3, pc, #412	; (adr r3, 8018b90 <_dtoa_r+0x2d0>)
 80189f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189f6:	f7e7 fe2f 	bl	8000658 <__aeabi_dmul>
 80189fa:	a367      	add	r3, pc, #412	; (adr r3, 8018b98 <_dtoa_r+0x2d8>)
 80189fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a00:	f7e7 fc74 	bl	80002ec <__adddf3>
 8018a04:	4606      	mov	r6, r0
 8018a06:	4628      	mov	r0, r5
 8018a08:	460f      	mov	r7, r1
 8018a0a:	f7e7 fdbb 	bl	8000584 <__aeabi_i2d>
 8018a0e:	a364      	add	r3, pc, #400	; (adr r3, 8018ba0 <_dtoa_r+0x2e0>)
 8018a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a14:	f7e7 fe20 	bl	8000658 <__aeabi_dmul>
 8018a18:	4602      	mov	r2, r0
 8018a1a:	460b      	mov	r3, r1
 8018a1c:	4630      	mov	r0, r6
 8018a1e:	4639      	mov	r1, r7
 8018a20:	f7e7 fc64 	bl	80002ec <__adddf3>
 8018a24:	4606      	mov	r6, r0
 8018a26:	460f      	mov	r7, r1
 8018a28:	f7e8 f8c6 	bl	8000bb8 <__aeabi_d2iz>
 8018a2c:	2200      	movs	r2, #0
 8018a2e:	4683      	mov	fp, r0
 8018a30:	2300      	movs	r3, #0
 8018a32:	4630      	mov	r0, r6
 8018a34:	4639      	mov	r1, r7
 8018a36:	f7e8 f881 	bl	8000b3c <__aeabi_dcmplt>
 8018a3a:	b148      	cbz	r0, 8018a50 <_dtoa_r+0x190>
 8018a3c:	4658      	mov	r0, fp
 8018a3e:	f7e7 fda1 	bl	8000584 <__aeabi_i2d>
 8018a42:	4632      	mov	r2, r6
 8018a44:	463b      	mov	r3, r7
 8018a46:	f7e8 f86f 	bl	8000b28 <__aeabi_dcmpeq>
 8018a4a:	b908      	cbnz	r0, 8018a50 <_dtoa_r+0x190>
 8018a4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018a50:	f1bb 0f16 	cmp.w	fp, #22
 8018a54:	d857      	bhi.n	8018b06 <_dtoa_r+0x246>
 8018a56:	4b5b      	ldr	r3, [pc, #364]	; (8018bc4 <_dtoa_r+0x304>)
 8018a58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8018a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a60:	ec51 0b18 	vmov	r0, r1, d8
 8018a64:	f7e8 f86a 	bl	8000b3c <__aeabi_dcmplt>
 8018a68:	2800      	cmp	r0, #0
 8018a6a:	d04e      	beq.n	8018b0a <_dtoa_r+0x24a>
 8018a6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018a70:	2300      	movs	r3, #0
 8018a72:	930c      	str	r3, [sp, #48]	; 0x30
 8018a74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018a76:	1b5b      	subs	r3, r3, r5
 8018a78:	1e5a      	subs	r2, r3, #1
 8018a7a:	bf45      	ittet	mi
 8018a7c:	f1c3 0301 	rsbmi	r3, r3, #1
 8018a80:	9305      	strmi	r3, [sp, #20]
 8018a82:	2300      	movpl	r3, #0
 8018a84:	2300      	movmi	r3, #0
 8018a86:	9206      	str	r2, [sp, #24]
 8018a88:	bf54      	ite	pl
 8018a8a:	9305      	strpl	r3, [sp, #20]
 8018a8c:	9306      	strmi	r3, [sp, #24]
 8018a8e:	f1bb 0f00 	cmp.w	fp, #0
 8018a92:	db3c      	blt.n	8018b0e <_dtoa_r+0x24e>
 8018a94:	9b06      	ldr	r3, [sp, #24]
 8018a96:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8018a9a:	445b      	add	r3, fp
 8018a9c:	9306      	str	r3, [sp, #24]
 8018a9e:	2300      	movs	r3, #0
 8018aa0:	9308      	str	r3, [sp, #32]
 8018aa2:	9b07      	ldr	r3, [sp, #28]
 8018aa4:	2b09      	cmp	r3, #9
 8018aa6:	d868      	bhi.n	8018b7a <_dtoa_r+0x2ba>
 8018aa8:	2b05      	cmp	r3, #5
 8018aaa:	bfc4      	itt	gt
 8018aac:	3b04      	subgt	r3, #4
 8018aae:	9307      	strgt	r3, [sp, #28]
 8018ab0:	9b07      	ldr	r3, [sp, #28]
 8018ab2:	f1a3 0302 	sub.w	r3, r3, #2
 8018ab6:	bfcc      	ite	gt
 8018ab8:	2500      	movgt	r5, #0
 8018aba:	2501      	movle	r5, #1
 8018abc:	2b03      	cmp	r3, #3
 8018abe:	f200 8085 	bhi.w	8018bcc <_dtoa_r+0x30c>
 8018ac2:	e8df f003 	tbb	[pc, r3]
 8018ac6:	3b2e      	.short	0x3b2e
 8018ac8:	5839      	.short	0x5839
 8018aca:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8018ace:	441d      	add	r5, r3
 8018ad0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8018ad4:	2b20      	cmp	r3, #32
 8018ad6:	bfc1      	itttt	gt
 8018ad8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8018adc:	fa08 f803 	lslgt.w	r8, r8, r3
 8018ae0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8018ae4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8018ae8:	bfd6      	itet	le
 8018aea:	f1c3 0320 	rsble	r3, r3, #32
 8018aee:	ea48 0003 	orrgt.w	r0, r8, r3
 8018af2:	fa06 f003 	lslle.w	r0, r6, r3
 8018af6:	f7e7 fd35 	bl	8000564 <__aeabi_ui2d>
 8018afa:	2201      	movs	r2, #1
 8018afc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8018b00:	3d01      	subs	r5, #1
 8018b02:	920e      	str	r2, [sp, #56]	; 0x38
 8018b04:	e76f      	b.n	80189e6 <_dtoa_r+0x126>
 8018b06:	2301      	movs	r3, #1
 8018b08:	e7b3      	b.n	8018a72 <_dtoa_r+0x1b2>
 8018b0a:	900c      	str	r0, [sp, #48]	; 0x30
 8018b0c:	e7b2      	b.n	8018a74 <_dtoa_r+0x1b4>
 8018b0e:	9b05      	ldr	r3, [sp, #20]
 8018b10:	eba3 030b 	sub.w	r3, r3, fp
 8018b14:	9305      	str	r3, [sp, #20]
 8018b16:	f1cb 0300 	rsb	r3, fp, #0
 8018b1a:	9308      	str	r3, [sp, #32]
 8018b1c:	2300      	movs	r3, #0
 8018b1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8018b20:	e7bf      	b.n	8018aa2 <_dtoa_r+0x1e2>
 8018b22:	2300      	movs	r3, #0
 8018b24:	9309      	str	r3, [sp, #36]	; 0x24
 8018b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	dc52      	bgt.n	8018bd2 <_dtoa_r+0x312>
 8018b2c:	2301      	movs	r3, #1
 8018b2e:	9301      	str	r3, [sp, #4]
 8018b30:	9304      	str	r3, [sp, #16]
 8018b32:	461a      	mov	r2, r3
 8018b34:	920a      	str	r2, [sp, #40]	; 0x28
 8018b36:	e00b      	b.n	8018b50 <_dtoa_r+0x290>
 8018b38:	2301      	movs	r3, #1
 8018b3a:	e7f3      	b.n	8018b24 <_dtoa_r+0x264>
 8018b3c:	2300      	movs	r3, #0
 8018b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8018b40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018b42:	445b      	add	r3, fp
 8018b44:	9301      	str	r3, [sp, #4]
 8018b46:	3301      	adds	r3, #1
 8018b48:	2b01      	cmp	r3, #1
 8018b4a:	9304      	str	r3, [sp, #16]
 8018b4c:	bfb8      	it	lt
 8018b4e:	2301      	movlt	r3, #1
 8018b50:	69e0      	ldr	r0, [r4, #28]
 8018b52:	2100      	movs	r1, #0
 8018b54:	2204      	movs	r2, #4
 8018b56:	f102 0614 	add.w	r6, r2, #20
 8018b5a:	429e      	cmp	r6, r3
 8018b5c:	d93d      	bls.n	8018bda <_dtoa_r+0x31a>
 8018b5e:	6041      	str	r1, [r0, #4]
 8018b60:	4620      	mov	r0, r4
 8018b62:	f000 fd9f 	bl	80196a4 <_Balloc>
 8018b66:	9000      	str	r0, [sp, #0]
 8018b68:	2800      	cmp	r0, #0
 8018b6a:	d139      	bne.n	8018be0 <_dtoa_r+0x320>
 8018b6c:	4b16      	ldr	r3, [pc, #88]	; (8018bc8 <_dtoa_r+0x308>)
 8018b6e:	4602      	mov	r2, r0
 8018b70:	f240 11af 	movw	r1, #431	; 0x1af
 8018b74:	e6bd      	b.n	80188f2 <_dtoa_r+0x32>
 8018b76:	2301      	movs	r3, #1
 8018b78:	e7e1      	b.n	8018b3e <_dtoa_r+0x27e>
 8018b7a:	2501      	movs	r5, #1
 8018b7c:	2300      	movs	r3, #0
 8018b7e:	9307      	str	r3, [sp, #28]
 8018b80:	9509      	str	r5, [sp, #36]	; 0x24
 8018b82:	f04f 33ff 	mov.w	r3, #4294967295
 8018b86:	9301      	str	r3, [sp, #4]
 8018b88:	9304      	str	r3, [sp, #16]
 8018b8a:	2200      	movs	r2, #0
 8018b8c:	2312      	movs	r3, #18
 8018b8e:	e7d1      	b.n	8018b34 <_dtoa_r+0x274>
 8018b90:	636f4361 	.word	0x636f4361
 8018b94:	3fd287a7 	.word	0x3fd287a7
 8018b98:	8b60c8b3 	.word	0x8b60c8b3
 8018b9c:	3fc68a28 	.word	0x3fc68a28
 8018ba0:	509f79fb 	.word	0x509f79fb
 8018ba4:	3fd34413 	.word	0x3fd34413
 8018ba8:	0801ac41 	.word	0x0801ac41
 8018bac:	0801ac58 	.word	0x0801ac58
 8018bb0:	7ff00000 	.word	0x7ff00000
 8018bb4:	0801ac3d 	.word	0x0801ac3d
 8018bb8:	0801ac34 	.word	0x0801ac34
 8018bbc:	0801ac11 	.word	0x0801ac11
 8018bc0:	3ff80000 	.word	0x3ff80000
 8018bc4:	0801ad48 	.word	0x0801ad48
 8018bc8:	0801acb0 	.word	0x0801acb0
 8018bcc:	2301      	movs	r3, #1
 8018bce:	9309      	str	r3, [sp, #36]	; 0x24
 8018bd0:	e7d7      	b.n	8018b82 <_dtoa_r+0x2c2>
 8018bd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018bd4:	9301      	str	r3, [sp, #4]
 8018bd6:	9304      	str	r3, [sp, #16]
 8018bd8:	e7ba      	b.n	8018b50 <_dtoa_r+0x290>
 8018bda:	3101      	adds	r1, #1
 8018bdc:	0052      	lsls	r2, r2, #1
 8018bde:	e7ba      	b.n	8018b56 <_dtoa_r+0x296>
 8018be0:	69e3      	ldr	r3, [r4, #28]
 8018be2:	9a00      	ldr	r2, [sp, #0]
 8018be4:	601a      	str	r2, [r3, #0]
 8018be6:	9b04      	ldr	r3, [sp, #16]
 8018be8:	2b0e      	cmp	r3, #14
 8018bea:	f200 80a8 	bhi.w	8018d3e <_dtoa_r+0x47e>
 8018bee:	2d00      	cmp	r5, #0
 8018bf0:	f000 80a5 	beq.w	8018d3e <_dtoa_r+0x47e>
 8018bf4:	f1bb 0f00 	cmp.w	fp, #0
 8018bf8:	dd38      	ble.n	8018c6c <_dtoa_r+0x3ac>
 8018bfa:	4bc0      	ldr	r3, [pc, #768]	; (8018efc <_dtoa_r+0x63c>)
 8018bfc:	f00b 020f 	and.w	r2, fp, #15
 8018c00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018c04:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8018c08:	e9d3 6700 	ldrd	r6, r7, [r3]
 8018c0c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8018c10:	d019      	beq.n	8018c46 <_dtoa_r+0x386>
 8018c12:	4bbb      	ldr	r3, [pc, #748]	; (8018f00 <_dtoa_r+0x640>)
 8018c14:	ec51 0b18 	vmov	r0, r1, d8
 8018c18:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018c1c:	f7e7 fe46 	bl	80008ac <__aeabi_ddiv>
 8018c20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018c24:	f008 080f 	and.w	r8, r8, #15
 8018c28:	2503      	movs	r5, #3
 8018c2a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8018f00 <_dtoa_r+0x640>
 8018c2e:	f1b8 0f00 	cmp.w	r8, #0
 8018c32:	d10a      	bne.n	8018c4a <_dtoa_r+0x38a>
 8018c34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018c38:	4632      	mov	r2, r6
 8018c3a:	463b      	mov	r3, r7
 8018c3c:	f7e7 fe36 	bl	80008ac <__aeabi_ddiv>
 8018c40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018c44:	e02b      	b.n	8018c9e <_dtoa_r+0x3de>
 8018c46:	2502      	movs	r5, #2
 8018c48:	e7ef      	b.n	8018c2a <_dtoa_r+0x36a>
 8018c4a:	f018 0f01 	tst.w	r8, #1
 8018c4e:	d008      	beq.n	8018c62 <_dtoa_r+0x3a2>
 8018c50:	4630      	mov	r0, r6
 8018c52:	4639      	mov	r1, r7
 8018c54:	e9d9 2300 	ldrd	r2, r3, [r9]
 8018c58:	f7e7 fcfe 	bl	8000658 <__aeabi_dmul>
 8018c5c:	3501      	adds	r5, #1
 8018c5e:	4606      	mov	r6, r0
 8018c60:	460f      	mov	r7, r1
 8018c62:	ea4f 0868 	mov.w	r8, r8, asr #1
 8018c66:	f109 0908 	add.w	r9, r9, #8
 8018c6a:	e7e0      	b.n	8018c2e <_dtoa_r+0x36e>
 8018c6c:	f000 809f 	beq.w	8018dae <_dtoa_r+0x4ee>
 8018c70:	f1cb 0600 	rsb	r6, fp, #0
 8018c74:	4ba1      	ldr	r3, [pc, #644]	; (8018efc <_dtoa_r+0x63c>)
 8018c76:	4fa2      	ldr	r7, [pc, #648]	; (8018f00 <_dtoa_r+0x640>)
 8018c78:	f006 020f 	and.w	r2, r6, #15
 8018c7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c84:	ec51 0b18 	vmov	r0, r1, d8
 8018c88:	f7e7 fce6 	bl	8000658 <__aeabi_dmul>
 8018c8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018c90:	1136      	asrs	r6, r6, #4
 8018c92:	2300      	movs	r3, #0
 8018c94:	2502      	movs	r5, #2
 8018c96:	2e00      	cmp	r6, #0
 8018c98:	d17e      	bne.n	8018d98 <_dtoa_r+0x4d8>
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d1d0      	bne.n	8018c40 <_dtoa_r+0x380>
 8018c9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018ca0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8018ca4:	2b00      	cmp	r3, #0
 8018ca6:	f000 8084 	beq.w	8018db2 <_dtoa_r+0x4f2>
 8018caa:	4b96      	ldr	r3, [pc, #600]	; (8018f04 <_dtoa_r+0x644>)
 8018cac:	2200      	movs	r2, #0
 8018cae:	4640      	mov	r0, r8
 8018cb0:	4649      	mov	r1, r9
 8018cb2:	f7e7 ff43 	bl	8000b3c <__aeabi_dcmplt>
 8018cb6:	2800      	cmp	r0, #0
 8018cb8:	d07b      	beq.n	8018db2 <_dtoa_r+0x4f2>
 8018cba:	9b04      	ldr	r3, [sp, #16]
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	d078      	beq.n	8018db2 <_dtoa_r+0x4f2>
 8018cc0:	9b01      	ldr	r3, [sp, #4]
 8018cc2:	2b00      	cmp	r3, #0
 8018cc4:	dd39      	ble.n	8018d3a <_dtoa_r+0x47a>
 8018cc6:	4b90      	ldr	r3, [pc, #576]	; (8018f08 <_dtoa_r+0x648>)
 8018cc8:	2200      	movs	r2, #0
 8018cca:	4640      	mov	r0, r8
 8018ccc:	4649      	mov	r1, r9
 8018cce:	f7e7 fcc3 	bl	8000658 <__aeabi_dmul>
 8018cd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018cd6:	9e01      	ldr	r6, [sp, #4]
 8018cd8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8018cdc:	3501      	adds	r5, #1
 8018cde:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8018ce2:	4628      	mov	r0, r5
 8018ce4:	f7e7 fc4e 	bl	8000584 <__aeabi_i2d>
 8018ce8:	4642      	mov	r2, r8
 8018cea:	464b      	mov	r3, r9
 8018cec:	f7e7 fcb4 	bl	8000658 <__aeabi_dmul>
 8018cf0:	4b86      	ldr	r3, [pc, #536]	; (8018f0c <_dtoa_r+0x64c>)
 8018cf2:	2200      	movs	r2, #0
 8018cf4:	f7e7 fafa 	bl	80002ec <__adddf3>
 8018cf8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8018cfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018d00:	9303      	str	r3, [sp, #12]
 8018d02:	2e00      	cmp	r6, #0
 8018d04:	d158      	bne.n	8018db8 <_dtoa_r+0x4f8>
 8018d06:	4b82      	ldr	r3, [pc, #520]	; (8018f10 <_dtoa_r+0x650>)
 8018d08:	2200      	movs	r2, #0
 8018d0a:	4640      	mov	r0, r8
 8018d0c:	4649      	mov	r1, r9
 8018d0e:	f7e7 faeb 	bl	80002e8 <__aeabi_dsub>
 8018d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018d16:	4680      	mov	r8, r0
 8018d18:	4689      	mov	r9, r1
 8018d1a:	f7e7 ff2d 	bl	8000b78 <__aeabi_dcmpgt>
 8018d1e:	2800      	cmp	r0, #0
 8018d20:	f040 8296 	bne.w	8019250 <_dtoa_r+0x990>
 8018d24:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8018d28:	4640      	mov	r0, r8
 8018d2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018d2e:	4649      	mov	r1, r9
 8018d30:	f7e7 ff04 	bl	8000b3c <__aeabi_dcmplt>
 8018d34:	2800      	cmp	r0, #0
 8018d36:	f040 8289 	bne.w	801924c <_dtoa_r+0x98c>
 8018d3a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8018d3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	f2c0 814e 	blt.w	8018fe2 <_dtoa_r+0x722>
 8018d46:	f1bb 0f0e 	cmp.w	fp, #14
 8018d4a:	f300 814a 	bgt.w	8018fe2 <_dtoa_r+0x722>
 8018d4e:	4b6b      	ldr	r3, [pc, #428]	; (8018efc <_dtoa_r+0x63c>)
 8018d50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8018d54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	f280 80dc 	bge.w	8018f18 <_dtoa_r+0x658>
 8018d60:	9b04      	ldr	r3, [sp, #16]
 8018d62:	2b00      	cmp	r3, #0
 8018d64:	f300 80d8 	bgt.w	8018f18 <_dtoa_r+0x658>
 8018d68:	f040 826f 	bne.w	801924a <_dtoa_r+0x98a>
 8018d6c:	4b68      	ldr	r3, [pc, #416]	; (8018f10 <_dtoa_r+0x650>)
 8018d6e:	2200      	movs	r2, #0
 8018d70:	4640      	mov	r0, r8
 8018d72:	4649      	mov	r1, r9
 8018d74:	f7e7 fc70 	bl	8000658 <__aeabi_dmul>
 8018d78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018d7c:	f7e7 fef2 	bl	8000b64 <__aeabi_dcmpge>
 8018d80:	9e04      	ldr	r6, [sp, #16]
 8018d82:	4637      	mov	r7, r6
 8018d84:	2800      	cmp	r0, #0
 8018d86:	f040 8245 	bne.w	8019214 <_dtoa_r+0x954>
 8018d8a:	9d00      	ldr	r5, [sp, #0]
 8018d8c:	2331      	movs	r3, #49	; 0x31
 8018d8e:	f805 3b01 	strb.w	r3, [r5], #1
 8018d92:	f10b 0b01 	add.w	fp, fp, #1
 8018d96:	e241      	b.n	801921c <_dtoa_r+0x95c>
 8018d98:	07f2      	lsls	r2, r6, #31
 8018d9a:	d505      	bpl.n	8018da8 <_dtoa_r+0x4e8>
 8018d9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018da0:	f7e7 fc5a 	bl	8000658 <__aeabi_dmul>
 8018da4:	3501      	adds	r5, #1
 8018da6:	2301      	movs	r3, #1
 8018da8:	1076      	asrs	r6, r6, #1
 8018daa:	3708      	adds	r7, #8
 8018dac:	e773      	b.n	8018c96 <_dtoa_r+0x3d6>
 8018dae:	2502      	movs	r5, #2
 8018db0:	e775      	b.n	8018c9e <_dtoa_r+0x3de>
 8018db2:	9e04      	ldr	r6, [sp, #16]
 8018db4:	465f      	mov	r7, fp
 8018db6:	e792      	b.n	8018cde <_dtoa_r+0x41e>
 8018db8:	9900      	ldr	r1, [sp, #0]
 8018dba:	4b50      	ldr	r3, [pc, #320]	; (8018efc <_dtoa_r+0x63c>)
 8018dbc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018dc0:	4431      	add	r1, r6
 8018dc2:	9102      	str	r1, [sp, #8]
 8018dc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018dc6:	eeb0 9a47 	vmov.f32	s18, s14
 8018dca:	eef0 9a67 	vmov.f32	s19, s15
 8018dce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8018dd2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018dd6:	2900      	cmp	r1, #0
 8018dd8:	d044      	beq.n	8018e64 <_dtoa_r+0x5a4>
 8018dda:	494e      	ldr	r1, [pc, #312]	; (8018f14 <_dtoa_r+0x654>)
 8018ddc:	2000      	movs	r0, #0
 8018dde:	f7e7 fd65 	bl	80008ac <__aeabi_ddiv>
 8018de2:	ec53 2b19 	vmov	r2, r3, d9
 8018de6:	f7e7 fa7f 	bl	80002e8 <__aeabi_dsub>
 8018dea:	9d00      	ldr	r5, [sp, #0]
 8018dec:	ec41 0b19 	vmov	d9, r0, r1
 8018df0:	4649      	mov	r1, r9
 8018df2:	4640      	mov	r0, r8
 8018df4:	f7e7 fee0 	bl	8000bb8 <__aeabi_d2iz>
 8018df8:	4606      	mov	r6, r0
 8018dfa:	f7e7 fbc3 	bl	8000584 <__aeabi_i2d>
 8018dfe:	4602      	mov	r2, r0
 8018e00:	460b      	mov	r3, r1
 8018e02:	4640      	mov	r0, r8
 8018e04:	4649      	mov	r1, r9
 8018e06:	f7e7 fa6f 	bl	80002e8 <__aeabi_dsub>
 8018e0a:	3630      	adds	r6, #48	; 0x30
 8018e0c:	f805 6b01 	strb.w	r6, [r5], #1
 8018e10:	ec53 2b19 	vmov	r2, r3, d9
 8018e14:	4680      	mov	r8, r0
 8018e16:	4689      	mov	r9, r1
 8018e18:	f7e7 fe90 	bl	8000b3c <__aeabi_dcmplt>
 8018e1c:	2800      	cmp	r0, #0
 8018e1e:	d164      	bne.n	8018eea <_dtoa_r+0x62a>
 8018e20:	4642      	mov	r2, r8
 8018e22:	464b      	mov	r3, r9
 8018e24:	4937      	ldr	r1, [pc, #220]	; (8018f04 <_dtoa_r+0x644>)
 8018e26:	2000      	movs	r0, #0
 8018e28:	f7e7 fa5e 	bl	80002e8 <__aeabi_dsub>
 8018e2c:	ec53 2b19 	vmov	r2, r3, d9
 8018e30:	f7e7 fe84 	bl	8000b3c <__aeabi_dcmplt>
 8018e34:	2800      	cmp	r0, #0
 8018e36:	f040 80b6 	bne.w	8018fa6 <_dtoa_r+0x6e6>
 8018e3a:	9b02      	ldr	r3, [sp, #8]
 8018e3c:	429d      	cmp	r5, r3
 8018e3e:	f43f af7c 	beq.w	8018d3a <_dtoa_r+0x47a>
 8018e42:	4b31      	ldr	r3, [pc, #196]	; (8018f08 <_dtoa_r+0x648>)
 8018e44:	ec51 0b19 	vmov	r0, r1, d9
 8018e48:	2200      	movs	r2, #0
 8018e4a:	f7e7 fc05 	bl	8000658 <__aeabi_dmul>
 8018e4e:	4b2e      	ldr	r3, [pc, #184]	; (8018f08 <_dtoa_r+0x648>)
 8018e50:	ec41 0b19 	vmov	d9, r0, r1
 8018e54:	2200      	movs	r2, #0
 8018e56:	4640      	mov	r0, r8
 8018e58:	4649      	mov	r1, r9
 8018e5a:	f7e7 fbfd 	bl	8000658 <__aeabi_dmul>
 8018e5e:	4680      	mov	r8, r0
 8018e60:	4689      	mov	r9, r1
 8018e62:	e7c5      	b.n	8018df0 <_dtoa_r+0x530>
 8018e64:	ec51 0b17 	vmov	r0, r1, d7
 8018e68:	f7e7 fbf6 	bl	8000658 <__aeabi_dmul>
 8018e6c:	9b02      	ldr	r3, [sp, #8]
 8018e6e:	9d00      	ldr	r5, [sp, #0]
 8018e70:	930f      	str	r3, [sp, #60]	; 0x3c
 8018e72:	ec41 0b19 	vmov	d9, r0, r1
 8018e76:	4649      	mov	r1, r9
 8018e78:	4640      	mov	r0, r8
 8018e7a:	f7e7 fe9d 	bl	8000bb8 <__aeabi_d2iz>
 8018e7e:	4606      	mov	r6, r0
 8018e80:	f7e7 fb80 	bl	8000584 <__aeabi_i2d>
 8018e84:	3630      	adds	r6, #48	; 0x30
 8018e86:	4602      	mov	r2, r0
 8018e88:	460b      	mov	r3, r1
 8018e8a:	4640      	mov	r0, r8
 8018e8c:	4649      	mov	r1, r9
 8018e8e:	f7e7 fa2b 	bl	80002e8 <__aeabi_dsub>
 8018e92:	f805 6b01 	strb.w	r6, [r5], #1
 8018e96:	9b02      	ldr	r3, [sp, #8]
 8018e98:	429d      	cmp	r5, r3
 8018e9a:	4680      	mov	r8, r0
 8018e9c:	4689      	mov	r9, r1
 8018e9e:	f04f 0200 	mov.w	r2, #0
 8018ea2:	d124      	bne.n	8018eee <_dtoa_r+0x62e>
 8018ea4:	4b1b      	ldr	r3, [pc, #108]	; (8018f14 <_dtoa_r+0x654>)
 8018ea6:	ec51 0b19 	vmov	r0, r1, d9
 8018eaa:	f7e7 fa1f 	bl	80002ec <__adddf3>
 8018eae:	4602      	mov	r2, r0
 8018eb0:	460b      	mov	r3, r1
 8018eb2:	4640      	mov	r0, r8
 8018eb4:	4649      	mov	r1, r9
 8018eb6:	f7e7 fe5f 	bl	8000b78 <__aeabi_dcmpgt>
 8018eba:	2800      	cmp	r0, #0
 8018ebc:	d173      	bne.n	8018fa6 <_dtoa_r+0x6e6>
 8018ebe:	ec53 2b19 	vmov	r2, r3, d9
 8018ec2:	4914      	ldr	r1, [pc, #80]	; (8018f14 <_dtoa_r+0x654>)
 8018ec4:	2000      	movs	r0, #0
 8018ec6:	f7e7 fa0f 	bl	80002e8 <__aeabi_dsub>
 8018eca:	4602      	mov	r2, r0
 8018ecc:	460b      	mov	r3, r1
 8018ece:	4640      	mov	r0, r8
 8018ed0:	4649      	mov	r1, r9
 8018ed2:	f7e7 fe33 	bl	8000b3c <__aeabi_dcmplt>
 8018ed6:	2800      	cmp	r0, #0
 8018ed8:	f43f af2f 	beq.w	8018d3a <_dtoa_r+0x47a>
 8018edc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8018ede:	1e6b      	subs	r3, r5, #1
 8018ee0:	930f      	str	r3, [sp, #60]	; 0x3c
 8018ee2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018ee6:	2b30      	cmp	r3, #48	; 0x30
 8018ee8:	d0f8      	beq.n	8018edc <_dtoa_r+0x61c>
 8018eea:	46bb      	mov	fp, r7
 8018eec:	e04a      	b.n	8018f84 <_dtoa_r+0x6c4>
 8018eee:	4b06      	ldr	r3, [pc, #24]	; (8018f08 <_dtoa_r+0x648>)
 8018ef0:	f7e7 fbb2 	bl	8000658 <__aeabi_dmul>
 8018ef4:	4680      	mov	r8, r0
 8018ef6:	4689      	mov	r9, r1
 8018ef8:	e7bd      	b.n	8018e76 <_dtoa_r+0x5b6>
 8018efa:	bf00      	nop
 8018efc:	0801ad48 	.word	0x0801ad48
 8018f00:	0801ad20 	.word	0x0801ad20
 8018f04:	3ff00000 	.word	0x3ff00000
 8018f08:	40240000 	.word	0x40240000
 8018f0c:	401c0000 	.word	0x401c0000
 8018f10:	40140000 	.word	0x40140000
 8018f14:	3fe00000 	.word	0x3fe00000
 8018f18:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018f1c:	9d00      	ldr	r5, [sp, #0]
 8018f1e:	4642      	mov	r2, r8
 8018f20:	464b      	mov	r3, r9
 8018f22:	4630      	mov	r0, r6
 8018f24:	4639      	mov	r1, r7
 8018f26:	f7e7 fcc1 	bl	80008ac <__aeabi_ddiv>
 8018f2a:	f7e7 fe45 	bl	8000bb8 <__aeabi_d2iz>
 8018f2e:	9001      	str	r0, [sp, #4]
 8018f30:	f7e7 fb28 	bl	8000584 <__aeabi_i2d>
 8018f34:	4642      	mov	r2, r8
 8018f36:	464b      	mov	r3, r9
 8018f38:	f7e7 fb8e 	bl	8000658 <__aeabi_dmul>
 8018f3c:	4602      	mov	r2, r0
 8018f3e:	460b      	mov	r3, r1
 8018f40:	4630      	mov	r0, r6
 8018f42:	4639      	mov	r1, r7
 8018f44:	f7e7 f9d0 	bl	80002e8 <__aeabi_dsub>
 8018f48:	9e01      	ldr	r6, [sp, #4]
 8018f4a:	9f04      	ldr	r7, [sp, #16]
 8018f4c:	3630      	adds	r6, #48	; 0x30
 8018f4e:	f805 6b01 	strb.w	r6, [r5], #1
 8018f52:	9e00      	ldr	r6, [sp, #0]
 8018f54:	1bae      	subs	r6, r5, r6
 8018f56:	42b7      	cmp	r7, r6
 8018f58:	4602      	mov	r2, r0
 8018f5a:	460b      	mov	r3, r1
 8018f5c:	d134      	bne.n	8018fc8 <_dtoa_r+0x708>
 8018f5e:	f7e7 f9c5 	bl	80002ec <__adddf3>
 8018f62:	4642      	mov	r2, r8
 8018f64:	464b      	mov	r3, r9
 8018f66:	4606      	mov	r6, r0
 8018f68:	460f      	mov	r7, r1
 8018f6a:	f7e7 fe05 	bl	8000b78 <__aeabi_dcmpgt>
 8018f6e:	b9c8      	cbnz	r0, 8018fa4 <_dtoa_r+0x6e4>
 8018f70:	4642      	mov	r2, r8
 8018f72:	464b      	mov	r3, r9
 8018f74:	4630      	mov	r0, r6
 8018f76:	4639      	mov	r1, r7
 8018f78:	f7e7 fdd6 	bl	8000b28 <__aeabi_dcmpeq>
 8018f7c:	b110      	cbz	r0, 8018f84 <_dtoa_r+0x6c4>
 8018f7e:	9b01      	ldr	r3, [sp, #4]
 8018f80:	07db      	lsls	r3, r3, #31
 8018f82:	d40f      	bmi.n	8018fa4 <_dtoa_r+0x6e4>
 8018f84:	4651      	mov	r1, sl
 8018f86:	4620      	mov	r0, r4
 8018f88:	f000 fbcc 	bl	8019724 <_Bfree>
 8018f8c:	2300      	movs	r3, #0
 8018f8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018f90:	702b      	strb	r3, [r5, #0]
 8018f92:	f10b 0301 	add.w	r3, fp, #1
 8018f96:	6013      	str	r3, [r2, #0]
 8018f98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018f9a:	2b00      	cmp	r3, #0
 8018f9c:	f43f ace2 	beq.w	8018964 <_dtoa_r+0xa4>
 8018fa0:	601d      	str	r5, [r3, #0]
 8018fa2:	e4df      	b.n	8018964 <_dtoa_r+0xa4>
 8018fa4:	465f      	mov	r7, fp
 8018fa6:	462b      	mov	r3, r5
 8018fa8:	461d      	mov	r5, r3
 8018faa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018fae:	2a39      	cmp	r2, #57	; 0x39
 8018fb0:	d106      	bne.n	8018fc0 <_dtoa_r+0x700>
 8018fb2:	9a00      	ldr	r2, [sp, #0]
 8018fb4:	429a      	cmp	r2, r3
 8018fb6:	d1f7      	bne.n	8018fa8 <_dtoa_r+0x6e8>
 8018fb8:	9900      	ldr	r1, [sp, #0]
 8018fba:	2230      	movs	r2, #48	; 0x30
 8018fbc:	3701      	adds	r7, #1
 8018fbe:	700a      	strb	r2, [r1, #0]
 8018fc0:	781a      	ldrb	r2, [r3, #0]
 8018fc2:	3201      	adds	r2, #1
 8018fc4:	701a      	strb	r2, [r3, #0]
 8018fc6:	e790      	b.n	8018eea <_dtoa_r+0x62a>
 8018fc8:	4ba3      	ldr	r3, [pc, #652]	; (8019258 <_dtoa_r+0x998>)
 8018fca:	2200      	movs	r2, #0
 8018fcc:	f7e7 fb44 	bl	8000658 <__aeabi_dmul>
 8018fd0:	2200      	movs	r2, #0
 8018fd2:	2300      	movs	r3, #0
 8018fd4:	4606      	mov	r6, r0
 8018fd6:	460f      	mov	r7, r1
 8018fd8:	f7e7 fda6 	bl	8000b28 <__aeabi_dcmpeq>
 8018fdc:	2800      	cmp	r0, #0
 8018fde:	d09e      	beq.n	8018f1e <_dtoa_r+0x65e>
 8018fe0:	e7d0      	b.n	8018f84 <_dtoa_r+0x6c4>
 8018fe2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018fe4:	2a00      	cmp	r2, #0
 8018fe6:	f000 80ca 	beq.w	801917e <_dtoa_r+0x8be>
 8018fea:	9a07      	ldr	r2, [sp, #28]
 8018fec:	2a01      	cmp	r2, #1
 8018fee:	f300 80ad 	bgt.w	801914c <_dtoa_r+0x88c>
 8018ff2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018ff4:	2a00      	cmp	r2, #0
 8018ff6:	f000 80a5 	beq.w	8019144 <_dtoa_r+0x884>
 8018ffa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018ffe:	9e08      	ldr	r6, [sp, #32]
 8019000:	9d05      	ldr	r5, [sp, #20]
 8019002:	9a05      	ldr	r2, [sp, #20]
 8019004:	441a      	add	r2, r3
 8019006:	9205      	str	r2, [sp, #20]
 8019008:	9a06      	ldr	r2, [sp, #24]
 801900a:	2101      	movs	r1, #1
 801900c:	441a      	add	r2, r3
 801900e:	4620      	mov	r0, r4
 8019010:	9206      	str	r2, [sp, #24]
 8019012:	f000 fc3d 	bl	8019890 <__i2b>
 8019016:	4607      	mov	r7, r0
 8019018:	b165      	cbz	r5, 8019034 <_dtoa_r+0x774>
 801901a:	9b06      	ldr	r3, [sp, #24]
 801901c:	2b00      	cmp	r3, #0
 801901e:	dd09      	ble.n	8019034 <_dtoa_r+0x774>
 8019020:	42ab      	cmp	r3, r5
 8019022:	9a05      	ldr	r2, [sp, #20]
 8019024:	bfa8      	it	ge
 8019026:	462b      	movge	r3, r5
 8019028:	1ad2      	subs	r2, r2, r3
 801902a:	9205      	str	r2, [sp, #20]
 801902c:	9a06      	ldr	r2, [sp, #24]
 801902e:	1aed      	subs	r5, r5, r3
 8019030:	1ad3      	subs	r3, r2, r3
 8019032:	9306      	str	r3, [sp, #24]
 8019034:	9b08      	ldr	r3, [sp, #32]
 8019036:	b1f3      	cbz	r3, 8019076 <_dtoa_r+0x7b6>
 8019038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801903a:	2b00      	cmp	r3, #0
 801903c:	f000 80a3 	beq.w	8019186 <_dtoa_r+0x8c6>
 8019040:	2e00      	cmp	r6, #0
 8019042:	dd10      	ble.n	8019066 <_dtoa_r+0x7a6>
 8019044:	4639      	mov	r1, r7
 8019046:	4632      	mov	r2, r6
 8019048:	4620      	mov	r0, r4
 801904a:	f000 fce1 	bl	8019a10 <__pow5mult>
 801904e:	4652      	mov	r2, sl
 8019050:	4601      	mov	r1, r0
 8019052:	4607      	mov	r7, r0
 8019054:	4620      	mov	r0, r4
 8019056:	f000 fc31 	bl	80198bc <__multiply>
 801905a:	4651      	mov	r1, sl
 801905c:	4680      	mov	r8, r0
 801905e:	4620      	mov	r0, r4
 8019060:	f000 fb60 	bl	8019724 <_Bfree>
 8019064:	46c2      	mov	sl, r8
 8019066:	9b08      	ldr	r3, [sp, #32]
 8019068:	1b9a      	subs	r2, r3, r6
 801906a:	d004      	beq.n	8019076 <_dtoa_r+0x7b6>
 801906c:	4651      	mov	r1, sl
 801906e:	4620      	mov	r0, r4
 8019070:	f000 fcce 	bl	8019a10 <__pow5mult>
 8019074:	4682      	mov	sl, r0
 8019076:	2101      	movs	r1, #1
 8019078:	4620      	mov	r0, r4
 801907a:	f000 fc09 	bl	8019890 <__i2b>
 801907e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019080:	2b00      	cmp	r3, #0
 8019082:	4606      	mov	r6, r0
 8019084:	f340 8081 	ble.w	801918a <_dtoa_r+0x8ca>
 8019088:	461a      	mov	r2, r3
 801908a:	4601      	mov	r1, r0
 801908c:	4620      	mov	r0, r4
 801908e:	f000 fcbf 	bl	8019a10 <__pow5mult>
 8019092:	9b07      	ldr	r3, [sp, #28]
 8019094:	2b01      	cmp	r3, #1
 8019096:	4606      	mov	r6, r0
 8019098:	dd7a      	ble.n	8019190 <_dtoa_r+0x8d0>
 801909a:	f04f 0800 	mov.w	r8, #0
 801909e:	6933      	ldr	r3, [r6, #16]
 80190a0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80190a4:	6918      	ldr	r0, [r3, #16]
 80190a6:	f000 fba5 	bl	80197f4 <__hi0bits>
 80190aa:	f1c0 0020 	rsb	r0, r0, #32
 80190ae:	9b06      	ldr	r3, [sp, #24]
 80190b0:	4418      	add	r0, r3
 80190b2:	f010 001f 	ands.w	r0, r0, #31
 80190b6:	f000 8094 	beq.w	80191e2 <_dtoa_r+0x922>
 80190ba:	f1c0 0320 	rsb	r3, r0, #32
 80190be:	2b04      	cmp	r3, #4
 80190c0:	f340 8085 	ble.w	80191ce <_dtoa_r+0x90e>
 80190c4:	9b05      	ldr	r3, [sp, #20]
 80190c6:	f1c0 001c 	rsb	r0, r0, #28
 80190ca:	4403      	add	r3, r0
 80190cc:	9305      	str	r3, [sp, #20]
 80190ce:	9b06      	ldr	r3, [sp, #24]
 80190d0:	4403      	add	r3, r0
 80190d2:	4405      	add	r5, r0
 80190d4:	9306      	str	r3, [sp, #24]
 80190d6:	9b05      	ldr	r3, [sp, #20]
 80190d8:	2b00      	cmp	r3, #0
 80190da:	dd05      	ble.n	80190e8 <_dtoa_r+0x828>
 80190dc:	4651      	mov	r1, sl
 80190de:	461a      	mov	r2, r3
 80190e0:	4620      	mov	r0, r4
 80190e2:	f000 fcef 	bl	8019ac4 <__lshift>
 80190e6:	4682      	mov	sl, r0
 80190e8:	9b06      	ldr	r3, [sp, #24]
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	dd05      	ble.n	80190fa <_dtoa_r+0x83a>
 80190ee:	4631      	mov	r1, r6
 80190f0:	461a      	mov	r2, r3
 80190f2:	4620      	mov	r0, r4
 80190f4:	f000 fce6 	bl	8019ac4 <__lshift>
 80190f8:	4606      	mov	r6, r0
 80190fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	d072      	beq.n	80191e6 <_dtoa_r+0x926>
 8019100:	4631      	mov	r1, r6
 8019102:	4650      	mov	r0, sl
 8019104:	f000 fd4a 	bl	8019b9c <__mcmp>
 8019108:	2800      	cmp	r0, #0
 801910a:	da6c      	bge.n	80191e6 <_dtoa_r+0x926>
 801910c:	2300      	movs	r3, #0
 801910e:	4651      	mov	r1, sl
 8019110:	220a      	movs	r2, #10
 8019112:	4620      	mov	r0, r4
 8019114:	f000 fb28 	bl	8019768 <__multadd>
 8019118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801911a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801911e:	4682      	mov	sl, r0
 8019120:	2b00      	cmp	r3, #0
 8019122:	f000 81b0 	beq.w	8019486 <_dtoa_r+0xbc6>
 8019126:	2300      	movs	r3, #0
 8019128:	4639      	mov	r1, r7
 801912a:	220a      	movs	r2, #10
 801912c:	4620      	mov	r0, r4
 801912e:	f000 fb1b 	bl	8019768 <__multadd>
 8019132:	9b01      	ldr	r3, [sp, #4]
 8019134:	2b00      	cmp	r3, #0
 8019136:	4607      	mov	r7, r0
 8019138:	f300 8096 	bgt.w	8019268 <_dtoa_r+0x9a8>
 801913c:	9b07      	ldr	r3, [sp, #28]
 801913e:	2b02      	cmp	r3, #2
 8019140:	dc59      	bgt.n	80191f6 <_dtoa_r+0x936>
 8019142:	e091      	b.n	8019268 <_dtoa_r+0x9a8>
 8019144:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019146:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801914a:	e758      	b.n	8018ffe <_dtoa_r+0x73e>
 801914c:	9b04      	ldr	r3, [sp, #16]
 801914e:	1e5e      	subs	r6, r3, #1
 8019150:	9b08      	ldr	r3, [sp, #32]
 8019152:	42b3      	cmp	r3, r6
 8019154:	bfbf      	itttt	lt
 8019156:	9b08      	ldrlt	r3, [sp, #32]
 8019158:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801915a:	9608      	strlt	r6, [sp, #32]
 801915c:	1af3      	sublt	r3, r6, r3
 801915e:	bfb4      	ite	lt
 8019160:	18d2      	addlt	r2, r2, r3
 8019162:	1b9e      	subge	r6, r3, r6
 8019164:	9b04      	ldr	r3, [sp, #16]
 8019166:	bfbc      	itt	lt
 8019168:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801916a:	2600      	movlt	r6, #0
 801916c:	2b00      	cmp	r3, #0
 801916e:	bfb7      	itett	lt
 8019170:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8019174:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8019178:	1a9d      	sublt	r5, r3, r2
 801917a:	2300      	movlt	r3, #0
 801917c:	e741      	b.n	8019002 <_dtoa_r+0x742>
 801917e:	9e08      	ldr	r6, [sp, #32]
 8019180:	9d05      	ldr	r5, [sp, #20]
 8019182:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8019184:	e748      	b.n	8019018 <_dtoa_r+0x758>
 8019186:	9a08      	ldr	r2, [sp, #32]
 8019188:	e770      	b.n	801906c <_dtoa_r+0x7ac>
 801918a:	9b07      	ldr	r3, [sp, #28]
 801918c:	2b01      	cmp	r3, #1
 801918e:	dc19      	bgt.n	80191c4 <_dtoa_r+0x904>
 8019190:	9b02      	ldr	r3, [sp, #8]
 8019192:	b9bb      	cbnz	r3, 80191c4 <_dtoa_r+0x904>
 8019194:	9b03      	ldr	r3, [sp, #12]
 8019196:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801919a:	b99b      	cbnz	r3, 80191c4 <_dtoa_r+0x904>
 801919c:	9b03      	ldr	r3, [sp, #12]
 801919e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80191a2:	0d1b      	lsrs	r3, r3, #20
 80191a4:	051b      	lsls	r3, r3, #20
 80191a6:	b183      	cbz	r3, 80191ca <_dtoa_r+0x90a>
 80191a8:	9b05      	ldr	r3, [sp, #20]
 80191aa:	3301      	adds	r3, #1
 80191ac:	9305      	str	r3, [sp, #20]
 80191ae:	9b06      	ldr	r3, [sp, #24]
 80191b0:	3301      	adds	r3, #1
 80191b2:	9306      	str	r3, [sp, #24]
 80191b4:	f04f 0801 	mov.w	r8, #1
 80191b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80191ba:	2b00      	cmp	r3, #0
 80191bc:	f47f af6f 	bne.w	801909e <_dtoa_r+0x7de>
 80191c0:	2001      	movs	r0, #1
 80191c2:	e774      	b.n	80190ae <_dtoa_r+0x7ee>
 80191c4:	f04f 0800 	mov.w	r8, #0
 80191c8:	e7f6      	b.n	80191b8 <_dtoa_r+0x8f8>
 80191ca:	4698      	mov	r8, r3
 80191cc:	e7f4      	b.n	80191b8 <_dtoa_r+0x8f8>
 80191ce:	d082      	beq.n	80190d6 <_dtoa_r+0x816>
 80191d0:	9a05      	ldr	r2, [sp, #20]
 80191d2:	331c      	adds	r3, #28
 80191d4:	441a      	add	r2, r3
 80191d6:	9205      	str	r2, [sp, #20]
 80191d8:	9a06      	ldr	r2, [sp, #24]
 80191da:	441a      	add	r2, r3
 80191dc:	441d      	add	r5, r3
 80191de:	9206      	str	r2, [sp, #24]
 80191e0:	e779      	b.n	80190d6 <_dtoa_r+0x816>
 80191e2:	4603      	mov	r3, r0
 80191e4:	e7f4      	b.n	80191d0 <_dtoa_r+0x910>
 80191e6:	9b04      	ldr	r3, [sp, #16]
 80191e8:	2b00      	cmp	r3, #0
 80191ea:	dc37      	bgt.n	801925c <_dtoa_r+0x99c>
 80191ec:	9b07      	ldr	r3, [sp, #28]
 80191ee:	2b02      	cmp	r3, #2
 80191f0:	dd34      	ble.n	801925c <_dtoa_r+0x99c>
 80191f2:	9b04      	ldr	r3, [sp, #16]
 80191f4:	9301      	str	r3, [sp, #4]
 80191f6:	9b01      	ldr	r3, [sp, #4]
 80191f8:	b963      	cbnz	r3, 8019214 <_dtoa_r+0x954>
 80191fa:	4631      	mov	r1, r6
 80191fc:	2205      	movs	r2, #5
 80191fe:	4620      	mov	r0, r4
 8019200:	f000 fab2 	bl	8019768 <__multadd>
 8019204:	4601      	mov	r1, r0
 8019206:	4606      	mov	r6, r0
 8019208:	4650      	mov	r0, sl
 801920a:	f000 fcc7 	bl	8019b9c <__mcmp>
 801920e:	2800      	cmp	r0, #0
 8019210:	f73f adbb 	bgt.w	8018d8a <_dtoa_r+0x4ca>
 8019214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019216:	9d00      	ldr	r5, [sp, #0]
 8019218:	ea6f 0b03 	mvn.w	fp, r3
 801921c:	f04f 0800 	mov.w	r8, #0
 8019220:	4631      	mov	r1, r6
 8019222:	4620      	mov	r0, r4
 8019224:	f000 fa7e 	bl	8019724 <_Bfree>
 8019228:	2f00      	cmp	r7, #0
 801922a:	f43f aeab 	beq.w	8018f84 <_dtoa_r+0x6c4>
 801922e:	f1b8 0f00 	cmp.w	r8, #0
 8019232:	d005      	beq.n	8019240 <_dtoa_r+0x980>
 8019234:	45b8      	cmp	r8, r7
 8019236:	d003      	beq.n	8019240 <_dtoa_r+0x980>
 8019238:	4641      	mov	r1, r8
 801923a:	4620      	mov	r0, r4
 801923c:	f000 fa72 	bl	8019724 <_Bfree>
 8019240:	4639      	mov	r1, r7
 8019242:	4620      	mov	r0, r4
 8019244:	f000 fa6e 	bl	8019724 <_Bfree>
 8019248:	e69c      	b.n	8018f84 <_dtoa_r+0x6c4>
 801924a:	2600      	movs	r6, #0
 801924c:	4637      	mov	r7, r6
 801924e:	e7e1      	b.n	8019214 <_dtoa_r+0x954>
 8019250:	46bb      	mov	fp, r7
 8019252:	4637      	mov	r7, r6
 8019254:	e599      	b.n	8018d8a <_dtoa_r+0x4ca>
 8019256:	bf00      	nop
 8019258:	40240000 	.word	0x40240000
 801925c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801925e:	2b00      	cmp	r3, #0
 8019260:	f000 80c8 	beq.w	80193f4 <_dtoa_r+0xb34>
 8019264:	9b04      	ldr	r3, [sp, #16]
 8019266:	9301      	str	r3, [sp, #4]
 8019268:	2d00      	cmp	r5, #0
 801926a:	dd05      	ble.n	8019278 <_dtoa_r+0x9b8>
 801926c:	4639      	mov	r1, r7
 801926e:	462a      	mov	r2, r5
 8019270:	4620      	mov	r0, r4
 8019272:	f000 fc27 	bl	8019ac4 <__lshift>
 8019276:	4607      	mov	r7, r0
 8019278:	f1b8 0f00 	cmp.w	r8, #0
 801927c:	d05b      	beq.n	8019336 <_dtoa_r+0xa76>
 801927e:	6879      	ldr	r1, [r7, #4]
 8019280:	4620      	mov	r0, r4
 8019282:	f000 fa0f 	bl	80196a4 <_Balloc>
 8019286:	4605      	mov	r5, r0
 8019288:	b928      	cbnz	r0, 8019296 <_dtoa_r+0x9d6>
 801928a:	4b83      	ldr	r3, [pc, #524]	; (8019498 <_dtoa_r+0xbd8>)
 801928c:	4602      	mov	r2, r0
 801928e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8019292:	f7ff bb2e 	b.w	80188f2 <_dtoa_r+0x32>
 8019296:	693a      	ldr	r2, [r7, #16]
 8019298:	3202      	adds	r2, #2
 801929a:	0092      	lsls	r2, r2, #2
 801929c:	f107 010c 	add.w	r1, r7, #12
 80192a0:	300c      	adds	r0, #12
 80192a2:	f7ff fa75 	bl	8018790 <memcpy>
 80192a6:	2201      	movs	r2, #1
 80192a8:	4629      	mov	r1, r5
 80192aa:	4620      	mov	r0, r4
 80192ac:	f000 fc0a 	bl	8019ac4 <__lshift>
 80192b0:	9b00      	ldr	r3, [sp, #0]
 80192b2:	3301      	adds	r3, #1
 80192b4:	9304      	str	r3, [sp, #16]
 80192b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80192ba:	4413      	add	r3, r2
 80192bc:	9308      	str	r3, [sp, #32]
 80192be:	9b02      	ldr	r3, [sp, #8]
 80192c0:	f003 0301 	and.w	r3, r3, #1
 80192c4:	46b8      	mov	r8, r7
 80192c6:	9306      	str	r3, [sp, #24]
 80192c8:	4607      	mov	r7, r0
 80192ca:	9b04      	ldr	r3, [sp, #16]
 80192cc:	4631      	mov	r1, r6
 80192ce:	3b01      	subs	r3, #1
 80192d0:	4650      	mov	r0, sl
 80192d2:	9301      	str	r3, [sp, #4]
 80192d4:	f7ff fa6a 	bl	80187ac <quorem>
 80192d8:	4641      	mov	r1, r8
 80192da:	9002      	str	r0, [sp, #8]
 80192dc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80192e0:	4650      	mov	r0, sl
 80192e2:	f000 fc5b 	bl	8019b9c <__mcmp>
 80192e6:	463a      	mov	r2, r7
 80192e8:	9005      	str	r0, [sp, #20]
 80192ea:	4631      	mov	r1, r6
 80192ec:	4620      	mov	r0, r4
 80192ee:	f000 fc71 	bl	8019bd4 <__mdiff>
 80192f2:	68c2      	ldr	r2, [r0, #12]
 80192f4:	4605      	mov	r5, r0
 80192f6:	bb02      	cbnz	r2, 801933a <_dtoa_r+0xa7a>
 80192f8:	4601      	mov	r1, r0
 80192fa:	4650      	mov	r0, sl
 80192fc:	f000 fc4e 	bl	8019b9c <__mcmp>
 8019300:	4602      	mov	r2, r0
 8019302:	4629      	mov	r1, r5
 8019304:	4620      	mov	r0, r4
 8019306:	9209      	str	r2, [sp, #36]	; 0x24
 8019308:	f000 fa0c 	bl	8019724 <_Bfree>
 801930c:	9b07      	ldr	r3, [sp, #28]
 801930e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019310:	9d04      	ldr	r5, [sp, #16]
 8019312:	ea43 0102 	orr.w	r1, r3, r2
 8019316:	9b06      	ldr	r3, [sp, #24]
 8019318:	4319      	orrs	r1, r3
 801931a:	d110      	bne.n	801933e <_dtoa_r+0xa7e>
 801931c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8019320:	d029      	beq.n	8019376 <_dtoa_r+0xab6>
 8019322:	9b05      	ldr	r3, [sp, #20]
 8019324:	2b00      	cmp	r3, #0
 8019326:	dd02      	ble.n	801932e <_dtoa_r+0xa6e>
 8019328:	9b02      	ldr	r3, [sp, #8]
 801932a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801932e:	9b01      	ldr	r3, [sp, #4]
 8019330:	f883 9000 	strb.w	r9, [r3]
 8019334:	e774      	b.n	8019220 <_dtoa_r+0x960>
 8019336:	4638      	mov	r0, r7
 8019338:	e7ba      	b.n	80192b0 <_dtoa_r+0x9f0>
 801933a:	2201      	movs	r2, #1
 801933c:	e7e1      	b.n	8019302 <_dtoa_r+0xa42>
 801933e:	9b05      	ldr	r3, [sp, #20]
 8019340:	2b00      	cmp	r3, #0
 8019342:	db04      	blt.n	801934e <_dtoa_r+0xa8e>
 8019344:	9907      	ldr	r1, [sp, #28]
 8019346:	430b      	orrs	r3, r1
 8019348:	9906      	ldr	r1, [sp, #24]
 801934a:	430b      	orrs	r3, r1
 801934c:	d120      	bne.n	8019390 <_dtoa_r+0xad0>
 801934e:	2a00      	cmp	r2, #0
 8019350:	dded      	ble.n	801932e <_dtoa_r+0xa6e>
 8019352:	4651      	mov	r1, sl
 8019354:	2201      	movs	r2, #1
 8019356:	4620      	mov	r0, r4
 8019358:	f000 fbb4 	bl	8019ac4 <__lshift>
 801935c:	4631      	mov	r1, r6
 801935e:	4682      	mov	sl, r0
 8019360:	f000 fc1c 	bl	8019b9c <__mcmp>
 8019364:	2800      	cmp	r0, #0
 8019366:	dc03      	bgt.n	8019370 <_dtoa_r+0xab0>
 8019368:	d1e1      	bne.n	801932e <_dtoa_r+0xa6e>
 801936a:	f019 0f01 	tst.w	r9, #1
 801936e:	d0de      	beq.n	801932e <_dtoa_r+0xa6e>
 8019370:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8019374:	d1d8      	bne.n	8019328 <_dtoa_r+0xa68>
 8019376:	9a01      	ldr	r2, [sp, #4]
 8019378:	2339      	movs	r3, #57	; 0x39
 801937a:	7013      	strb	r3, [r2, #0]
 801937c:	462b      	mov	r3, r5
 801937e:	461d      	mov	r5, r3
 8019380:	3b01      	subs	r3, #1
 8019382:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8019386:	2a39      	cmp	r2, #57	; 0x39
 8019388:	d06c      	beq.n	8019464 <_dtoa_r+0xba4>
 801938a:	3201      	adds	r2, #1
 801938c:	701a      	strb	r2, [r3, #0]
 801938e:	e747      	b.n	8019220 <_dtoa_r+0x960>
 8019390:	2a00      	cmp	r2, #0
 8019392:	dd07      	ble.n	80193a4 <_dtoa_r+0xae4>
 8019394:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8019398:	d0ed      	beq.n	8019376 <_dtoa_r+0xab6>
 801939a:	9a01      	ldr	r2, [sp, #4]
 801939c:	f109 0301 	add.w	r3, r9, #1
 80193a0:	7013      	strb	r3, [r2, #0]
 80193a2:	e73d      	b.n	8019220 <_dtoa_r+0x960>
 80193a4:	9b04      	ldr	r3, [sp, #16]
 80193a6:	9a08      	ldr	r2, [sp, #32]
 80193a8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80193ac:	4293      	cmp	r3, r2
 80193ae:	d043      	beq.n	8019438 <_dtoa_r+0xb78>
 80193b0:	4651      	mov	r1, sl
 80193b2:	2300      	movs	r3, #0
 80193b4:	220a      	movs	r2, #10
 80193b6:	4620      	mov	r0, r4
 80193b8:	f000 f9d6 	bl	8019768 <__multadd>
 80193bc:	45b8      	cmp	r8, r7
 80193be:	4682      	mov	sl, r0
 80193c0:	f04f 0300 	mov.w	r3, #0
 80193c4:	f04f 020a 	mov.w	r2, #10
 80193c8:	4641      	mov	r1, r8
 80193ca:	4620      	mov	r0, r4
 80193cc:	d107      	bne.n	80193de <_dtoa_r+0xb1e>
 80193ce:	f000 f9cb 	bl	8019768 <__multadd>
 80193d2:	4680      	mov	r8, r0
 80193d4:	4607      	mov	r7, r0
 80193d6:	9b04      	ldr	r3, [sp, #16]
 80193d8:	3301      	adds	r3, #1
 80193da:	9304      	str	r3, [sp, #16]
 80193dc:	e775      	b.n	80192ca <_dtoa_r+0xa0a>
 80193de:	f000 f9c3 	bl	8019768 <__multadd>
 80193e2:	4639      	mov	r1, r7
 80193e4:	4680      	mov	r8, r0
 80193e6:	2300      	movs	r3, #0
 80193e8:	220a      	movs	r2, #10
 80193ea:	4620      	mov	r0, r4
 80193ec:	f000 f9bc 	bl	8019768 <__multadd>
 80193f0:	4607      	mov	r7, r0
 80193f2:	e7f0      	b.n	80193d6 <_dtoa_r+0xb16>
 80193f4:	9b04      	ldr	r3, [sp, #16]
 80193f6:	9301      	str	r3, [sp, #4]
 80193f8:	9d00      	ldr	r5, [sp, #0]
 80193fa:	4631      	mov	r1, r6
 80193fc:	4650      	mov	r0, sl
 80193fe:	f7ff f9d5 	bl	80187ac <quorem>
 8019402:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8019406:	9b00      	ldr	r3, [sp, #0]
 8019408:	f805 9b01 	strb.w	r9, [r5], #1
 801940c:	1aea      	subs	r2, r5, r3
 801940e:	9b01      	ldr	r3, [sp, #4]
 8019410:	4293      	cmp	r3, r2
 8019412:	dd07      	ble.n	8019424 <_dtoa_r+0xb64>
 8019414:	4651      	mov	r1, sl
 8019416:	2300      	movs	r3, #0
 8019418:	220a      	movs	r2, #10
 801941a:	4620      	mov	r0, r4
 801941c:	f000 f9a4 	bl	8019768 <__multadd>
 8019420:	4682      	mov	sl, r0
 8019422:	e7ea      	b.n	80193fa <_dtoa_r+0xb3a>
 8019424:	9b01      	ldr	r3, [sp, #4]
 8019426:	2b00      	cmp	r3, #0
 8019428:	bfc8      	it	gt
 801942a:	461d      	movgt	r5, r3
 801942c:	9b00      	ldr	r3, [sp, #0]
 801942e:	bfd8      	it	le
 8019430:	2501      	movle	r5, #1
 8019432:	441d      	add	r5, r3
 8019434:	f04f 0800 	mov.w	r8, #0
 8019438:	4651      	mov	r1, sl
 801943a:	2201      	movs	r2, #1
 801943c:	4620      	mov	r0, r4
 801943e:	f000 fb41 	bl	8019ac4 <__lshift>
 8019442:	4631      	mov	r1, r6
 8019444:	4682      	mov	sl, r0
 8019446:	f000 fba9 	bl	8019b9c <__mcmp>
 801944a:	2800      	cmp	r0, #0
 801944c:	dc96      	bgt.n	801937c <_dtoa_r+0xabc>
 801944e:	d102      	bne.n	8019456 <_dtoa_r+0xb96>
 8019450:	f019 0f01 	tst.w	r9, #1
 8019454:	d192      	bne.n	801937c <_dtoa_r+0xabc>
 8019456:	462b      	mov	r3, r5
 8019458:	461d      	mov	r5, r3
 801945a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801945e:	2a30      	cmp	r2, #48	; 0x30
 8019460:	d0fa      	beq.n	8019458 <_dtoa_r+0xb98>
 8019462:	e6dd      	b.n	8019220 <_dtoa_r+0x960>
 8019464:	9a00      	ldr	r2, [sp, #0]
 8019466:	429a      	cmp	r2, r3
 8019468:	d189      	bne.n	801937e <_dtoa_r+0xabe>
 801946a:	f10b 0b01 	add.w	fp, fp, #1
 801946e:	2331      	movs	r3, #49	; 0x31
 8019470:	e796      	b.n	80193a0 <_dtoa_r+0xae0>
 8019472:	4b0a      	ldr	r3, [pc, #40]	; (801949c <_dtoa_r+0xbdc>)
 8019474:	f7ff ba99 	b.w	80189aa <_dtoa_r+0xea>
 8019478:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801947a:	2b00      	cmp	r3, #0
 801947c:	f47f aa6d 	bne.w	801895a <_dtoa_r+0x9a>
 8019480:	4b07      	ldr	r3, [pc, #28]	; (80194a0 <_dtoa_r+0xbe0>)
 8019482:	f7ff ba92 	b.w	80189aa <_dtoa_r+0xea>
 8019486:	9b01      	ldr	r3, [sp, #4]
 8019488:	2b00      	cmp	r3, #0
 801948a:	dcb5      	bgt.n	80193f8 <_dtoa_r+0xb38>
 801948c:	9b07      	ldr	r3, [sp, #28]
 801948e:	2b02      	cmp	r3, #2
 8019490:	f73f aeb1 	bgt.w	80191f6 <_dtoa_r+0x936>
 8019494:	e7b0      	b.n	80193f8 <_dtoa_r+0xb38>
 8019496:	bf00      	nop
 8019498:	0801acb0 	.word	0x0801acb0
 801949c:	0801ac10 	.word	0x0801ac10
 80194a0:	0801ac34 	.word	0x0801ac34

080194a4 <_free_r>:
 80194a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80194a6:	2900      	cmp	r1, #0
 80194a8:	d044      	beq.n	8019534 <_free_r+0x90>
 80194aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80194ae:	9001      	str	r0, [sp, #4]
 80194b0:	2b00      	cmp	r3, #0
 80194b2:	f1a1 0404 	sub.w	r4, r1, #4
 80194b6:	bfb8      	it	lt
 80194b8:	18e4      	addlt	r4, r4, r3
 80194ba:	f000 f8e7 	bl	801968c <__malloc_lock>
 80194be:	4a1e      	ldr	r2, [pc, #120]	; (8019538 <_free_r+0x94>)
 80194c0:	9801      	ldr	r0, [sp, #4]
 80194c2:	6813      	ldr	r3, [r2, #0]
 80194c4:	b933      	cbnz	r3, 80194d4 <_free_r+0x30>
 80194c6:	6063      	str	r3, [r4, #4]
 80194c8:	6014      	str	r4, [r2, #0]
 80194ca:	b003      	add	sp, #12
 80194cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80194d0:	f000 b8e2 	b.w	8019698 <__malloc_unlock>
 80194d4:	42a3      	cmp	r3, r4
 80194d6:	d908      	bls.n	80194ea <_free_r+0x46>
 80194d8:	6825      	ldr	r5, [r4, #0]
 80194da:	1961      	adds	r1, r4, r5
 80194dc:	428b      	cmp	r3, r1
 80194de:	bf01      	itttt	eq
 80194e0:	6819      	ldreq	r1, [r3, #0]
 80194e2:	685b      	ldreq	r3, [r3, #4]
 80194e4:	1949      	addeq	r1, r1, r5
 80194e6:	6021      	streq	r1, [r4, #0]
 80194e8:	e7ed      	b.n	80194c6 <_free_r+0x22>
 80194ea:	461a      	mov	r2, r3
 80194ec:	685b      	ldr	r3, [r3, #4]
 80194ee:	b10b      	cbz	r3, 80194f4 <_free_r+0x50>
 80194f0:	42a3      	cmp	r3, r4
 80194f2:	d9fa      	bls.n	80194ea <_free_r+0x46>
 80194f4:	6811      	ldr	r1, [r2, #0]
 80194f6:	1855      	adds	r5, r2, r1
 80194f8:	42a5      	cmp	r5, r4
 80194fa:	d10b      	bne.n	8019514 <_free_r+0x70>
 80194fc:	6824      	ldr	r4, [r4, #0]
 80194fe:	4421      	add	r1, r4
 8019500:	1854      	adds	r4, r2, r1
 8019502:	42a3      	cmp	r3, r4
 8019504:	6011      	str	r1, [r2, #0]
 8019506:	d1e0      	bne.n	80194ca <_free_r+0x26>
 8019508:	681c      	ldr	r4, [r3, #0]
 801950a:	685b      	ldr	r3, [r3, #4]
 801950c:	6053      	str	r3, [r2, #4]
 801950e:	440c      	add	r4, r1
 8019510:	6014      	str	r4, [r2, #0]
 8019512:	e7da      	b.n	80194ca <_free_r+0x26>
 8019514:	d902      	bls.n	801951c <_free_r+0x78>
 8019516:	230c      	movs	r3, #12
 8019518:	6003      	str	r3, [r0, #0]
 801951a:	e7d6      	b.n	80194ca <_free_r+0x26>
 801951c:	6825      	ldr	r5, [r4, #0]
 801951e:	1961      	adds	r1, r4, r5
 8019520:	428b      	cmp	r3, r1
 8019522:	bf04      	itt	eq
 8019524:	6819      	ldreq	r1, [r3, #0]
 8019526:	685b      	ldreq	r3, [r3, #4]
 8019528:	6063      	str	r3, [r4, #4]
 801952a:	bf04      	itt	eq
 801952c:	1949      	addeq	r1, r1, r5
 801952e:	6021      	streq	r1, [r4, #0]
 8019530:	6054      	str	r4, [r2, #4]
 8019532:	e7ca      	b.n	80194ca <_free_r+0x26>
 8019534:	b003      	add	sp, #12
 8019536:	bd30      	pop	{r4, r5, pc}
 8019538:	2000b284 	.word	0x2000b284

0801953c <malloc>:
 801953c:	4b02      	ldr	r3, [pc, #8]	; (8019548 <malloc+0xc>)
 801953e:	4601      	mov	r1, r0
 8019540:	6818      	ldr	r0, [r3, #0]
 8019542:	f000 b823 	b.w	801958c <_malloc_r>
 8019546:	bf00      	nop
 8019548:	200001c8 	.word	0x200001c8

0801954c <sbrk_aligned>:
 801954c:	b570      	push	{r4, r5, r6, lr}
 801954e:	4e0e      	ldr	r6, [pc, #56]	; (8019588 <sbrk_aligned+0x3c>)
 8019550:	460c      	mov	r4, r1
 8019552:	6831      	ldr	r1, [r6, #0]
 8019554:	4605      	mov	r5, r0
 8019556:	b911      	cbnz	r1, 801955e <sbrk_aligned+0x12>
 8019558:	f001 f808 	bl	801a56c <_sbrk_r>
 801955c:	6030      	str	r0, [r6, #0]
 801955e:	4621      	mov	r1, r4
 8019560:	4628      	mov	r0, r5
 8019562:	f001 f803 	bl	801a56c <_sbrk_r>
 8019566:	1c43      	adds	r3, r0, #1
 8019568:	d00a      	beq.n	8019580 <sbrk_aligned+0x34>
 801956a:	1cc4      	adds	r4, r0, #3
 801956c:	f024 0403 	bic.w	r4, r4, #3
 8019570:	42a0      	cmp	r0, r4
 8019572:	d007      	beq.n	8019584 <sbrk_aligned+0x38>
 8019574:	1a21      	subs	r1, r4, r0
 8019576:	4628      	mov	r0, r5
 8019578:	f000 fff8 	bl	801a56c <_sbrk_r>
 801957c:	3001      	adds	r0, #1
 801957e:	d101      	bne.n	8019584 <sbrk_aligned+0x38>
 8019580:	f04f 34ff 	mov.w	r4, #4294967295
 8019584:	4620      	mov	r0, r4
 8019586:	bd70      	pop	{r4, r5, r6, pc}
 8019588:	2000b288 	.word	0x2000b288

0801958c <_malloc_r>:
 801958c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019590:	1ccd      	adds	r5, r1, #3
 8019592:	f025 0503 	bic.w	r5, r5, #3
 8019596:	3508      	adds	r5, #8
 8019598:	2d0c      	cmp	r5, #12
 801959a:	bf38      	it	cc
 801959c:	250c      	movcc	r5, #12
 801959e:	2d00      	cmp	r5, #0
 80195a0:	4607      	mov	r7, r0
 80195a2:	db01      	blt.n	80195a8 <_malloc_r+0x1c>
 80195a4:	42a9      	cmp	r1, r5
 80195a6:	d905      	bls.n	80195b4 <_malloc_r+0x28>
 80195a8:	230c      	movs	r3, #12
 80195aa:	603b      	str	r3, [r7, #0]
 80195ac:	2600      	movs	r6, #0
 80195ae:	4630      	mov	r0, r6
 80195b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80195b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8019688 <_malloc_r+0xfc>
 80195b8:	f000 f868 	bl	801968c <__malloc_lock>
 80195bc:	f8d8 3000 	ldr.w	r3, [r8]
 80195c0:	461c      	mov	r4, r3
 80195c2:	bb5c      	cbnz	r4, 801961c <_malloc_r+0x90>
 80195c4:	4629      	mov	r1, r5
 80195c6:	4638      	mov	r0, r7
 80195c8:	f7ff ffc0 	bl	801954c <sbrk_aligned>
 80195cc:	1c43      	adds	r3, r0, #1
 80195ce:	4604      	mov	r4, r0
 80195d0:	d155      	bne.n	801967e <_malloc_r+0xf2>
 80195d2:	f8d8 4000 	ldr.w	r4, [r8]
 80195d6:	4626      	mov	r6, r4
 80195d8:	2e00      	cmp	r6, #0
 80195da:	d145      	bne.n	8019668 <_malloc_r+0xdc>
 80195dc:	2c00      	cmp	r4, #0
 80195de:	d048      	beq.n	8019672 <_malloc_r+0xe6>
 80195e0:	6823      	ldr	r3, [r4, #0]
 80195e2:	4631      	mov	r1, r6
 80195e4:	4638      	mov	r0, r7
 80195e6:	eb04 0903 	add.w	r9, r4, r3
 80195ea:	f000 ffbf 	bl	801a56c <_sbrk_r>
 80195ee:	4581      	cmp	r9, r0
 80195f0:	d13f      	bne.n	8019672 <_malloc_r+0xe6>
 80195f2:	6821      	ldr	r1, [r4, #0]
 80195f4:	1a6d      	subs	r5, r5, r1
 80195f6:	4629      	mov	r1, r5
 80195f8:	4638      	mov	r0, r7
 80195fa:	f7ff ffa7 	bl	801954c <sbrk_aligned>
 80195fe:	3001      	adds	r0, #1
 8019600:	d037      	beq.n	8019672 <_malloc_r+0xe6>
 8019602:	6823      	ldr	r3, [r4, #0]
 8019604:	442b      	add	r3, r5
 8019606:	6023      	str	r3, [r4, #0]
 8019608:	f8d8 3000 	ldr.w	r3, [r8]
 801960c:	2b00      	cmp	r3, #0
 801960e:	d038      	beq.n	8019682 <_malloc_r+0xf6>
 8019610:	685a      	ldr	r2, [r3, #4]
 8019612:	42a2      	cmp	r2, r4
 8019614:	d12b      	bne.n	801966e <_malloc_r+0xe2>
 8019616:	2200      	movs	r2, #0
 8019618:	605a      	str	r2, [r3, #4]
 801961a:	e00f      	b.n	801963c <_malloc_r+0xb0>
 801961c:	6822      	ldr	r2, [r4, #0]
 801961e:	1b52      	subs	r2, r2, r5
 8019620:	d41f      	bmi.n	8019662 <_malloc_r+0xd6>
 8019622:	2a0b      	cmp	r2, #11
 8019624:	d917      	bls.n	8019656 <_malloc_r+0xca>
 8019626:	1961      	adds	r1, r4, r5
 8019628:	42a3      	cmp	r3, r4
 801962a:	6025      	str	r5, [r4, #0]
 801962c:	bf18      	it	ne
 801962e:	6059      	strne	r1, [r3, #4]
 8019630:	6863      	ldr	r3, [r4, #4]
 8019632:	bf08      	it	eq
 8019634:	f8c8 1000 	streq.w	r1, [r8]
 8019638:	5162      	str	r2, [r4, r5]
 801963a:	604b      	str	r3, [r1, #4]
 801963c:	4638      	mov	r0, r7
 801963e:	f104 060b 	add.w	r6, r4, #11
 8019642:	f000 f829 	bl	8019698 <__malloc_unlock>
 8019646:	f026 0607 	bic.w	r6, r6, #7
 801964a:	1d23      	adds	r3, r4, #4
 801964c:	1af2      	subs	r2, r6, r3
 801964e:	d0ae      	beq.n	80195ae <_malloc_r+0x22>
 8019650:	1b9b      	subs	r3, r3, r6
 8019652:	50a3      	str	r3, [r4, r2]
 8019654:	e7ab      	b.n	80195ae <_malloc_r+0x22>
 8019656:	42a3      	cmp	r3, r4
 8019658:	6862      	ldr	r2, [r4, #4]
 801965a:	d1dd      	bne.n	8019618 <_malloc_r+0x8c>
 801965c:	f8c8 2000 	str.w	r2, [r8]
 8019660:	e7ec      	b.n	801963c <_malloc_r+0xb0>
 8019662:	4623      	mov	r3, r4
 8019664:	6864      	ldr	r4, [r4, #4]
 8019666:	e7ac      	b.n	80195c2 <_malloc_r+0x36>
 8019668:	4634      	mov	r4, r6
 801966a:	6876      	ldr	r6, [r6, #4]
 801966c:	e7b4      	b.n	80195d8 <_malloc_r+0x4c>
 801966e:	4613      	mov	r3, r2
 8019670:	e7cc      	b.n	801960c <_malloc_r+0x80>
 8019672:	230c      	movs	r3, #12
 8019674:	603b      	str	r3, [r7, #0]
 8019676:	4638      	mov	r0, r7
 8019678:	f000 f80e 	bl	8019698 <__malloc_unlock>
 801967c:	e797      	b.n	80195ae <_malloc_r+0x22>
 801967e:	6025      	str	r5, [r4, #0]
 8019680:	e7dc      	b.n	801963c <_malloc_r+0xb0>
 8019682:	605b      	str	r3, [r3, #4]
 8019684:	deff      	udf	#255	; 0xff
 8019686:	bf00      	nop
 8019688:	2000b284 	.word	0x2000b284

0801968c <__malloc_lock>:
 801968c:	4801      	ldr	r0, [pc, #4]	; (8019694 <__malloc_lock+0x8>)
 801968e:	f7ff b87d 	b.w	801878c <__retarget_lock_acquire_recursive>
 8019692:	bf00      	nop
 8019694:	2000b280 	.word	0x2000b280

08019698 <__malloc_unlock>:
 8019698:	4801      	ldr	r0, [pc, #4]	; (80196a0 <__malloc_unlock+0x8>)
 801969a:	f7ff b878 	b.w	801878e <__retarget_lock_release_recursive>
 801969e:	bf00      	nop
 80196a0:	2000b280 	.word	0x2000b280

080196a4 <_Balloc>:
 80196a4:	b570      	push	{r4, r5, r6, lr}
 80196a6:	69c6      	ldr	r6, [r0, #28]
 80196a8:	4604      	mov	r4, r0
 80196aa:	460d      	mov	r5, r1
 80196ac:	b976      	cbnz	r6, 80196cc <_Balloc+0x28>
 80196ae:	2010      	movs	r0, #16
 80196b0:	f7ff ff44 	bl	801953c <malloc>
 80196b4:	4602      	mov	r2, r0
 80196b6:	61e0      	str	r0, [r4, #28]
 80196b8:	b920      	cbnz	r0, 80196c4 <_Balloc+0x20>
 80196ba:	4b18      	ldr	r3, [pc, #96]	; (801971c <_Balloc+0x78>)
 80196bc:	4818      	ldr	r0, [pc, #96]	; (8019720 <_Balloc+0x7c>)
 80196be:	216b      	movs	r1, #107	; 0x6b
 80196c0:	f000 ff64 	bl	801a58c <__assert_func>
 80196c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80196c8:	6006      	str	r6, [r0, #0]
 80196ca:	60c6      	str	r6, [r0, #12]
 80196cc:	69e6      	ldr	r6, [r4, #28]
 80196ce:	68f3      	ldr	r3, [r6, #12]
 80196d0:	b183      	cbz	r3, 80196f4 <_Balloc+0x50>
 80196d2:	69e3      	ldr	r3, [r4, #28]
 80196d4:	68db      	ldr	r3, [r3, #12]
 80196d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80196da:	b9b8      	cbnz	r0, 801970c <_Balloc+0x68>
 80196dc:	2101      	movs	r1, #1
 80196de:	fa01 f605 	lsl.w	r6, r1, r5
 80196e2:	1d72      	adds	r2, r6, #5
 80196e4:	0092      	lsls	r2, r2, #2
 80196e6:	4620      	mov	r0, r4
 80196e8:	f000 ff6e 	bl	801a5c8 <_calloc_r>
 80196ec:	b160      	cbz	r0, 8019708 <_Balloc+0x64>
 80196ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80196f2:	e00e      	b.n	8019712 <_Balloc+0x6e>
 80196f4:	2221      	movs	r2, #33	; 0x21
 80196f6:	2104      	movs	r1, #4
 80196f8:	4620      	mov	r0, r4
 80196fa:	f000 ff65 	bl	801a5c8 <_calloc_r>
 80196fe:	69e3      	ldr	r3, [r4, #28]
 8019700:	60f0      	str	r0, [r6, #12]
 8019702:	68db      	ldr	r3, [r3, #12]
 8019704:	2b00      	cmp	r3, #0
 8019706:	d1e4      	bne.n	80196d2 <_Balloc+0x2e>
 8019708:	2000      	movs	r0, #0
 801970a:	bd70      	pop	{r4, r5, r6, pc}
 801970c:	6802      	ldr	r2, [r0, #0]
 801970e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019712:	2300      	movs	r3, #0
 8019714:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019718:	e7f7      	b.n	801970a <_Balloc+0x66>
 801971a:	bf00      	nop
 801971c:	0801ac41 	.word	0x0801ac41
 8019720:	0801acc1 	.word	0x0801acc1

08019724 <_Bfree>:
 8019724:	b570      	push	{r4, r5, r6, lr}
 8019726:	69c6      	ldr	r6, [r0, #28]
 8019728:	4605      	mov	r5, r0
 801972a:	460c      	mov	r4, r1
 801972c:	b976      	cbnz	r6, 801974c <_Bfree+0x28>
 801972e:	2010      	movs	r0, #16
 8019730:	f7ff ff04 	bl	801953c <malloc>
 8019734:	4602      	mov	r2, r0
 8019736:	61e8      	str	r0, [r5, #28]
 8019738:	b920      	cbnz	r0, 8019744 <_Bfree+0x20>
 801973a:	4b09      	ldr	r3, [pc, #36]	; (8019760 <_Bfree+0x3c>)
 801973c:	4809      	ldr	r0, [pc, #36]	; (8019764 <_Bfree+0x40>)
 801973e:	218f      	movs	r1, #143	; 0x8f
 8019740:	f000 ff24 	bl	801a58c <__assert_func>
 8019744:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019748:	6006      	str	r6, [r0, #0]
 801974a:	60c6      	str	r6, [r0, #12]
 801974c:	b13c      	cbz	r4, 801975e <_Bfree+0x3a>
 801974e:	69eb      	ldr	r3, [r5, #28]
 8019750:	6862      	ldr	r2, [r4, #4]
 8019752:	68db      	ldr	r3, [r3, #12]
 8019754:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019758:	6021      	str	r1, [r4, #0]
 801975a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801975e:	bd70      	pop	{r4, r5, r6, pc}
 8019760:	0801ac41 	.word	0x0801ac41
 8019764:	0801acc1 	.word	0x0801acc1

08019768 <__multadd>:
 8019768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801976c:	690d      	ldr	r5, [r1, #16]
 801976e:	4607      	mov	r7, r0
 8019770:	460c      	mov	r4, r1
 8019772:	461e      	mov	r6, r3
 8019774:	f101 0c14 	add.w	ip, r1, #20
 8019778:	2000      	movs	r0, #0
 801977a:	f8dc 3000 	ldr.w	r3, [ip]
 801977e:	b299      	uxth	r1, r3
 8019780:	fb02 6101 	mla	r1, r2, r1, r6
 8019784:	0c1e      	lsrs	r6, r3, #16
 8019786:	0c0b      	lsrs	r3, r1, #16
 8019788:	fb02 3306 	mla	r3, r2, r6, r3
 801978c:	b289      	uxth	r1, r1
 801978e:	3001      	adds	r0, #1
 8019790:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8019794:	4285      	cmp	r5, r0
 8019796:	f84c 1b04 	str.w	r1, [ip], #4
 801979a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801979e:	dcec      	bgt.n	801977a <__multadd+0x12>
 80197a0:	b30e      	cbz	r6, 80197e6 <__multadd+0x7e>
 80197a2:	68a3      	ldr	r3, [r4, #8]
 80197a4:	42ab      	cmp	r3, r5
 80197a6:	dc19      	bgt.n	80197dc <__multadd+0x74>
 80197a8:	6861      	ldr	r1, [r4, #4]
 80197aa:	4638      	mov	r0, r7
 80197ac:	3101      	adds	r1, #1
 80197ae:	f7ff ff79 	bl	80196a4 <_Balloc>
 80197b2:	4680      	mov	r8, r0
 80197b4:	b928      	cbnz	r0, 80197c2 <__multadd+0x5a>
 80197b6:	4602      	mov	r2, r0
 80197b8:	4b0c      	ldr	r3, [pc, #48]	; (80197ec <__multadd+0x84>)
 80197ba:	480d      	ldr	r0, [pc, #52]	; (80197f0 <__multadd+0x88>)
 80197bc:	21ba      	movs	r1, #186	; 0xba
 80197be:	f000 fee5 	bl	801a58c <__assert_func>
 80197c2:	6922      	ldr	r2, [r4, #16]
 80197c4:	3202      	adds	r2, #2
 80197c6:	f104 010c 	add.w	r1, r4, #12
 80197ca:	0092      	lsls	r2, r2, #2
 80197cc:	300c      	adds	r0, #12
 80197ce:	f7fe ffdf 	bl	8018790 <memcpy>
 80197d2:	4621      	mov	r1, r4
 80197d4:	4638      	mov	r0, r7
 80197d6:	f7ff ffa5 	bl	8019724 <_Bfree>
 80197da:	4644      	mov	r4, r8
 80197dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80197e0:	3501      	adds	r5, #1
 80197e2:	615e      	str	r6, [r3, #20]
 80197e4:	6125      	str	r5, [r4, #16]
 80197e6:	4620      	mov	r0, r4
 80197e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197ec:	0801acb0 	.word	0x0801acb0
 80197f0:	0801acc1 	.word	0x0801acc1

080197f4 <__hi0bits>:
 80197f4:	0c03      	lsrs	r3, r0, #16
 80197f6:	041b      	lsls	r3, r3, #16
 80197f8:	b9d3      	cbnz	r3, 8019830 <__hi0bits+0x3c>
 80197fa:	0400      	lsls	r0, r0, #16
 80197fc:	2310      	movs	r3, #16
 80197fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019802:	bf04      	itt	eq
 8019804:	0200      	lsleq	r0, r0, #8
 8019806:	3308      	addeq	r3, #8
 8019808:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801980c:	bf04      	itt	eq
 801980e:	0100      	lsleq	r0, r0, #4
 8019810:	3304      	addeq	r3, #4
 8019812:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8019816:	bf04      	itt	eq
 8019818:	0080      	lsleq	r0, r0, #2
 801981a:	3302      	addeq	r3, #2
 801981c:	2800      	cmp	r0, #0
 801981e:	db05      	blt.n	801982c <__hi0bits+0x38>
 8019820:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019824:	f103 0301 	add.w	r3, r3, #1
 8019828:	bf08      	it	eq
 801982a:	2320      	moveq	r3, #32
 801982c:	4618      	mov	r0, r3
 801982e:	4770      	bx	lr
 8019830:	2300      	movs	r3, #0
 8019832:	e7e4      	b.n	80197fe <__hi0bits+0xa>

08019834 <__lo0bits>:
 8019834:	6803      	ldr	r3, [r0, #0]
 8019836:	f013 0207 	ands.w	r2, r3, #7
 801983a:	d00c      	beq.n	8019856 <__lo0bits+0x22>
 801983c:	07d9      	lsls	r1, r3, #31
 801983e:	d422      	bmi.n	8019886 <__lo0bits+0x52>
 8019840:	079a      	lsls	r2, r3, #30
 8019842:	bf49      	itett	mi
 8019844:	085b      	lsrmi	r3, r3, #1
 8019846:	089b      	lsrpl	r3, r3, #2
 8019848:	6003      	strmi	r3, [r0, #0]
 801984a:	2201      	movmi	r2, #1
 801984c:	bf5c      	itt	pl
 801984e:	6003      	strpl	r3, [r0, #0]
 8019850:	2202      	movpl	r2, #2
 8019852:	4610      	mov	r0, r2
 8019854:	4770      	bx	lr
 8019856:	b299      	uxth	r1, r3
 8019858:	b909      	cbnz	r1, 801985e <__lo0bits+0x2a>
 801985a:	0c1b      	lsrs	r3, r3, #16
 801985c:	2210      	movs	r2, #16
 801985e:	b2d9      	uxtb	r1, r3
 8019860:	b909      	cbnz	r1, 8019866 <__lo0bits+0x32>
 8019862:	3208      	adds	r2, #8
 8019864:	0a1b      	lsrs	r3, r3, #8
 8019866:	0719      	lsls	r1, r3, #28
 8019868:	bf04      	itt	eq
 801986a:	091b      	lsreq	r3, r3, #4
 801986c:	3204      	addeq	r2, #4
 801986e:	0799      	lsls	r1, r3, #30
 8019870:	bf04      	itt	eq
 8019872:	089b      	lsreq	r3, r3, #2
 8019874:	3202      	addeq	r2, #2
 8019876:	07d9      	lsls	r1, r3, #31
 8019878:	d403      	bmi.n	8019882 <__lo0bits+0x4e>
 801987a:	085b      	lsrs	r3, r3, #1
 801987c:	f102 0201 	add.w	r2, r2, #1
 8019880:	d003      	beq.n	801988a <__lo0bits+0x56>
 8019882:	6003      	str	r3, [r0, #0]
 8019884:	e7e5      	b.n	8019852 <__lo0bits+0x1e>
 8019886:	2200      	movs	r2, #0
 8019888:	e7e3      	b.n	8019852 <__lo0bits+0x1e>
 801988a:	2220      	movs	r2, #32
 801988c:	e7e1      	b.n	8019852 <__lo0bits+0x1e>
	...

08019890 <__i2b>:
 8019890:	b510      	push	{r4, lr}
 8019892:	460c      	mov	r4, r1
 8019894:	2101      	movs	r1, #1
 8019896:	f7ff ff05 	bl	80196a4 <_Balloc>
 801989a:	4602      	mov	r2, r0
 801989c:	b928      	cbnz	r0, 80198aa <__i2b+0x1a>
 801989e:	4b05      	ldr	r3, [pc, #20]	; (80198b4 <__i2b+0x24>)
 80198a0:	4805      	ldr	r0, [pc, #20]	; (80198b8 <__i2b+0x28>)
 80198a2:	f240 1145 	movw	r1, #325	; 0x145
 80198a6:	f000 fe71 	bl	801a58c <__assert_func>
 80198aa:	2301      	movs	r3, #1
 80198ac:	6144      	str	r4, [r0, #20]
 80198ae:	6103      	str	r3, [r0, #16]
 80198b0:	bd10      	pop	{r4, pc}
 80198b2:	bf00      	nop
 80198b4:	0801acb0 	.word	0x0801acb0
 80198b8:	0801acc1 	.word	0x0801acc1

080198bc <__multiply>:
 80198bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198c0:	4691      	mov	r9, r2
 80198c2:	690a      	ldr	r2, [r1, #16]
 80198c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80198c8:	429a      	cmp	r2, r3
 80198ca:	bfb8      	it	lt
 80198cc:	460b      	movlt	r3, r1
 80198ce:	460c      	mov	r4, r1
 80198d0:	bfbc      	itt	lt
 80198d2:	464c      	movlt	r4, r9
 80198d4:	4699      	movlt	r9, r3
 80198d6:	6927      	ldr	r7, [r4, #16]
 80198d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80198dc:	68a3      	ldr	r3, [r4, #8]
 80198de:	6861      	ldr	r1, [r4, #4]
 80198e0:	eb07 060a 	add.w	r6, r7, sl
 80198e4:	42b3      	cmp	r3, r6
 80198e6:	b085      	sub	sp, #20
 80198e8:	bfb8      	it	lt
 80198ea:	3101      	addlt	r1, #1
 80198ec:	f7ff feda 	bl	80196a4 <_Balloc>
 80198f0:	b930      	cbnz	r0, 8019900 <__multiply+0x44>
 80198f2:	4602      	mov	r2, r0
 80198f4:	4b44      	ldr	r3, [pc, #272]	; (8019a08 <__multiply+0x14c>)
 80198f6:	4845      	ldr	r0, [pc, #276]	; (8019a0c <__multiply+0x150>)
 80198f8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80198fc:	f000 fe46 	bl	801a58c <__assert_func>
 8019900:	f100 0514 	add.w	r5, r0, #20
 8019904:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8019908:	462b      	mov	r3, r5
 801990a:	2200      	movs	r2, #0
 801990c:	4543      	cmp	r3, r8
 801990e:	d321      	bcc.n	8019954 <__multiply+0x98>
 8019910:	f104 0314 	add.w	r3, r4, #20
 8019914:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8019918:	f109 0314 	add.w	r3, r9, #20
 801991c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8019920:	9202      	str	r2, [sp, #8]
 8019922:	1b3a      	subs	r2, r7, r4
 8019924:	3a15      	subs	r2, #21
 8019926:	f022 0203 	bic.w	r2, r2, #3
 801992a:	3204      	adds	r2, #4
 801992c:	f104 0115 	add.w	r1, r4, #21
 8019930:	428f      	cmp	r7, r1
 8019932:	bf38      	it	cc
 8019934:	2204      	movcc	r2, #4
 8019936:	9201      	str	r2, [sp, #4]
 8019938:	9a02      	ldr	r2, [sp, #8]
 801993a:	9303      	str	r3, [sp, #12]
 801993c:	429a      	cmp	r2, r3
 801993e:	d80c      	bhi.n	801995a <__multiply+0x9e>
 8019940:	2e00      	cmp	r6, #0
 8019942:	dd03      	ble.n	801994c <__multiply+0x90>
 8019944:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8019948:	2b00      	cmp	r3, #0
 801994a:	d05b      	beq.n	8019a04 <__multiply+0x148>
 801994c:	6106      	str	r6, [r0, #16]
 801994e:	b005      	add	sp, #20
 8019950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019954:	f843 2b04 	str.w	r2, [r3], #4
 8019958:	e7d8      	b.n	801990c <__multiply+0x50>
 801995a:	f8b3 a000 	ldrh.w	sl, [r3]
 801995e:	f1ba 0f00 	cmp.w	sl, #0
 8019962:	d024      	beq.n	80199ae <__multiply+0xf2>
 8019964:	f104 0e14 	add.w	lr, r4, #20
 8019968:	46a9      	mov	r9, r5
 801996a:	f04f 0c00 	mov.w	ip, #0
 801996e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8019972:	f8d9 1000 	ldr.w	r1, [r9]
 8019976:	fa1f fb82 	uxth.w	fp, r2
 801997a:	b289      	uxth	r1, r1
 801997c:	fb0a 110b 	mla	r1, sl, fp, r1
 8019980:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8019984:	f8d9 2000 	ldr.w	r2, [r9]
 8019988:	4461      	add	r1, ip
 801998a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801998e:	fb0a c20b 	mla	r2, sl, fp, ip
 8019992:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8019996:	b289      	uxth	r1, r1
 8019998:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801999c:	4577      	cmp	r7, lr
 801999e:	f849 1b04 	str.w	r1, [r9], #4
 80199a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80199a6:	d8e2      	bhi.n	801996e <__multiply+0xb2>
 80199a8:	9a01      	ldr	r2, [sp, #4]
 80199aa:	f845 c002 	str.w	ip, [r5, r2]
 80199ae:	9a03      	ldr	r2, [sp, #12]
 80199b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80199b4:	3304      	adds	r3, #4
 80199b6:	f1b9 0f00 	cmp.w	r9, #0
 80199ba:	d021      	beq.n	8019a00 <__multiply+0x144>
 80199bc:	6829      	ldr	r1, [r5, #0]
 80199be:	f104 0c14 	add.w	ip, r4, #20
 80199c2:	46ae      	mov	lr, r5
 80199c4:	f04f 0a00 	mov.w	sl, #0
 80199c8:	f8bc b000 	ldrh.w	fp, [ip]
 80199cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80199d0:	fb09 220b 	mla	r2, r9, fp, r2
 80199d4:	4452      	add	r2, sl
 80199d6:	b289      	uxth	r1, r1
 80199d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80199dc:	f84e 1b04 	str.w	r1, [lr], #4
 80199e0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80199e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80199e8:	f8be 1000 	ldrh.w	r1, [lr]
 80199ec:	fb09 110a 	mla	r1, r9, sl, r1
 80199f0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80199f4:	4567      	cmp	r7, ip
 80199f6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80199fa:	d8e5      	bhi.n	80199c8 <__multiply+0x10c>
 80199fc:	9a01      	ldr	r2, [sp, #4]
 80199fe:	50a9      	str	r1, [r5, r2]
 8019a00:	3504      	adds	r5, #4
 8019a02:	e799      	b.n	8019938 <__multiply+0x7c>
 8019a04:	3e01      	subs	r6, #1
 8019a06:	e79b      	b.n	8019940 <__multiply+0x84>
 8019a08:	0801acb0 	.word	0x0801acb0
 8019a0c:	0801acc1 	.word	0x0801acc1

08019a10 <__pow5mult>:
 8019a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019a14:	4615      	mov	r5, r2
 8019a16:	f012 0203 	ands.w	r2, r2, #3
 8019a1a:	4606      	mov	r6, r0
 8019a1c:	460f      	mov	r7, r1
 8019a1e:	d007      	beq.n	8019a30 <__pow5mult+0x20>
 8019a20:	4c25      	ldr	r4, [pc, #148]	; (8019ab8 <__pow5mult+0xa8>)
 8019a22:	3a01      	subs	r2, #1
 8019a24:	2300      	movs	r3, #0
 8019a26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019a2a:	f7ff fe9d 	bl	8019768 <__multadd>
 8019a2e:	4607      	mov	r7, r0
 8019a30:	10ad      	asrs	r5, r5, #2
 8019a32:	d03d      	beq.n	8019ab0 <__pow5mult+0xa0>
 8019a34:	69f4      	ldr	r4, [r6, #28]
 8019a36:	b97c      	cbnz	r4, 8019a58 <__pow5mult+0x48>
 8019a38:	2010      	movs	r0, #16
 8019a3a:	f7ff fd7f 	bl	801953c <malloc>
 8019a3e:	4602      	mov	r2, r0
 8019a40:	61f0      	str	r0, [r6, #28]
 8019a42:	b928      	cbnz	r0, 8019a50 <__pow5mult+0x40>
 8019a44:	4b1d      	ldr	r3, [pc, #116]	; (8019abc <__pow5mult+0xac>)
 8019a46:	481e      	ldr	r0, [pc, #120]	; (8019ac0 <__pow5mult+0xb0>)
 8019a48:	f240 11b3 	movw	r1, #435	; 0x1b3
 8019a4c:	f000 fd9e 	bl	801a58c <__assert_func>
 8019a50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019a54:	6004      	str	r4, [r0, #0]
 8019a56:	60c4      	str	r4, [r0, #12]
 8019a58:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8019a5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019a60:	b94c      	cbnz	r4, 8019a76 <__pow5mult+0x66>
 8019a62:	f240 2171 	movw	r1, #625	; 0x271
 8019a66:	4630      	mov	r0, r6
 8019a68:	f7ff ff12 	bl	8019890 <__i2b>
 8019a6c:	2300      	movs	r3, #0
 8019a6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8019a72:	4604      	mov	r4, r0
 8019a74:	6003      	str	r3, [r0, #0]
 8019a76:	f04f 0900 	mov.w	r9, #0
 8019a7a:	07eb      	lsls	r3, r5, #31
 8019a7c:	d50a      	bpl.n	8019a94 <__pow5mult+0x84>
 8019a7e:	4639      	mov	r1, r7
 8019a80:	4622      	mov	r2, r4
 8019a82:	4630      	mov	r0, r6
 8019a84:	f7ff ff1a 	bl	80198bc <__multiply>
 8019a88:	4639      	mov	r1, r7
 8019a8a:	4680      	mov	r8, r0
 8019a8c:	4630      	mov	r0, r6
 8019a8e:	f7ff fe49 	bl	8019724 <_Bfree>
 8019a92:	4647      	mov	r7, r8
 8019a94:	106d      	asrs	r5, r5, #1
 8019a96:	d00b      	beq.n	8019ab0 <__pow5mult+0xa0>
 8019a98:	6820      	ldr	r0, [r4, #0]
 8019a9a:	b938      	cbnz	r0, 8019aac <__pow5mult+0x9c>
 8019a9c:	4622      	mov	r2, r4
 8019a9e:	4621      	mov	r1, r4
 8019aa0:	4630      	mov	r0, r6
 8019aa2:	f7ff ff0b 	bl	80198bc <__multiply>
 8019aa6:	6020      	str	r0, [r4, #0]
 8019aa8:	f8c0 9000 	str.w	r9, [r0]
 8019aac:	4604      	mov	r4, r0
 8019aae:	e7e4      	b.n	8019a7a <__pow5mult+0x6a>
 8019ab0:	4638      	mov	r0, r7
 8019ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019ab6:	bf00      	nop
 8019ab8:	0801ae10 	.word	0x0801ae10
 8019abc:	0801ac41 	.word	0x0801ac41
 8019ac0:	0801acc1 	.word	0x0801acc1

08019ac4 <__lshift>:
 8019ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ac8:	460c      	mov	r4, r1
 8019aca:	6849      	ldr	r1, [r1, #4]
 8019acc:	6923      	ldr	r3, [r4, #16]
 8019ace:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019ad2:	68a3      	ldr	r3, [r4, #8]
 8019ad4:	4607      	mov	r7, r0
 8019ad6:	4691      	mov	r9, r2
 8019ad8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019adc:	f108 0601 	add.w	r6, r8, #1
 8019ae0:	42b3      	cmp	r3, r6
 8019ae2:	db0b      	blt.n	8019afc <__lshift+0x38>
 8019ae4:	4638      	mov	r0, r7
 8019ae6:	f7ff fddd 	bl	80196a4 <_Balloc>
 8019aea:	4605      	mov	r5, r0
 8019aec:	b948      	cbnz	r0, 8019b02 <__lshift+0x3e>
 8019aee:	4602      	mov	r2, r0
 8019af0:	4b28      	ldr	r3, [pc, #160]	; (8019b94 <__lshift+0xd0>)
 8019af2:	4829      	ldr	r0, [pc, #164]	; (8019b98 <__lshift+0xd4>)
 8019af4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8019af8:	f000 fd48 	bl	801a58c <__assert_func>
 8019afc:	3101      	adds	r1, #1
 8019afe:	005b      	lsls	r3, r3, #1
 8019b00:	e7ee      	b.n	8019ae0 <__lshift+0x1c>
 8019b02:	2300      	movs	r3, #0
 8019b04:	f100 0114 	add.w	r1, r0, #20
 8019b08:	f100 0210 	add.w	r2, r0, #16
 8019b0c:	4618      	mov	r0, r3
 8019b0e:	4553      	cmp	r3, sl
 8019b10:	db33      	blt.n	8019b7a <__lshift+0xb6>
 8019b12:	6920      	ldr	r0, [r4, #16]
 8019b14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019b18:	f104 0314 	add.w	r3, r4, #20
 8019b1c:	f019 091f 	ands.w	r9, r9, #31
 8019b20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019b24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019b28:	d02b      	beq.n	8019b82 <__lshift+0xbe>
 8019b2a:	f1c9 0e20 	rsb	lr, r9, #32
 8019b2e:	468a      	mov	sl, r1
 8019b30:	2200      	movs	r2, #0
 8019b32:	6818      	ldr	r0, [r3, #0]
 8019b34:	fa00 f009 	lsl.w	r0, r0, r9
 8019b38:	4310      	orrs	r0, r2
 8019b3a:	f84a 0b04 	str.w	r0, [sl], #4
 8019b3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019b42:	459c      	cmp	ip, r3
 8019b44:	fa22 f20e 	lsr.w	r2, r2, lr
 8019b48:	d8f3      	bhi.n	8019b32 <__lshift+0x6e>
 8019b4a:	ebac 0304 	sub.w	r3, ip, r4
 8019b4e:	3b15      	subs	r3, #21
 8019b50:	f023 0303 	bic.w	r3, r3, #3
 8019b54:	3304      	adds	r3, #4
 8019b56:	f104 0015 	add.w	r0, r4, #21
 8019b5a:	4584      	cmp	ip, r0
 8019b5c:	bf38      	it	cc
 8019b5e:	2304      	movcc	r3, #4
 8019b60:	50ca      	str	r2, [r1, r3]
 8019b62:	b10a      	cbz	r2, 8019b68 <__lshift+0xa4>
 8019b64:	f108 0602 	add.w	r6, r8, #2
 8019b68:	3e01      	subs	r6, #1
 8019b6a:	4638      	mov	r0, r7
 8019b6c:	612e      	str	r6, [r5, #16]
 8019b6e:	4621      	mov	r1, r4
 8019b70:	f7ff fdd8 	bl	8019724 <_Bfree>
 8019b74:	4628      	mov	r0, r5
 8019b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8019b7e:	3301      	adds	r3, #1
 8019b80:	e7c5      	b.n	8019b0e <__lshift+0x4a>
 8019b82:	3904      	subs	r1, #4
 8019b84:	f853 2b04 	ldr.w	r2, [r3], #4
 8019b88:	f841 2f04 	str.w	r2, [r1, #4]!
 8019b8c:	459c      	cmp	ip, r3
 8019b8e:	d8f9      	bhi.n	8019b84 <__lshift+0xc0>
 8019b90:	e7ea      	b.n	8019b68 <__lshift+0xa4>
 8019b92:	bf00      	nop
 8019b94:	0801acb0 	.word	0x0801acb0
 8019b98:	0801acc1 	.word	0x0801acc1

08019b9c <__mcmp>:
 8019b9c:	b530      	push	{r4, r5, lr}
 8019b9e:	6902      	ldr	r2, [r0, #16]
 8019ba0:	690c      	ldr	r4, [r1, #16]
 8019ba2:	1b12      	subs	r2, r2, r4
 8019ba4:	d10e      	bne.n	8019bc4 <__mcmp+0x28>
 8019ba6:	f100 0314 	add.w	r3, r0, #20
 8019baa:	3114      	adds	r1, #20
 8019bac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019bb0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019bb4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019bb8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019bbc:	42a5      	cmp	r5, r4
 8019bbe:	d003      	beq.n	8019bc8 <__mcmp+0x2c>
 8019bc0:	d305      	bcc.n	8019bce <__mcmp+0x32>
 8019bc2:	2201      	movs	r2, #1
 8019bc4:	4610      	mov	r0, r2
 8019bc6:	bd30      	pop	{r4, r5, pc}
 8019bc8:	4283      	cmp	r3, r0
 8019bca:	d3f3      	bcc.n	8019bb4 <__mcmp+0x18>
 8019bcc:	e7fa      	b.n	8019bc4 <__mcmp+0x28>
 8019bce:	f04f 32ff 	mov.w	r2, #4294967295
 8019bd2:	e7f7      	b.n	8019bc4 <__mcmp+0x28>

08019bd4 <__mdiff>:
 8019bd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bd8:	460c      	mov	r4, r1
 8019bda:	4606      	mov	r6, r0
 8019bdc:	4611      	mov	r1, r2
 8019bde:	4620      	mov	r0, r4
 8019be0:	4690      	mov	r8, r2
 8019be2:	f7ff ffdb 	bl	8019b9c <__mcmp>
 8019be6:	1e05      	subs	r5, r0, #0
 8019be8:	d110      	bne.n	8019c0c <__mdiff+0x38>
 8019bea:	4629      	mov	r1, r5
 8019bec:	4630      	mov	r0, r6
 8019bee:	f7ff fd59 	bl	80196a4 <_Balloc>
 8019bf2:	b930      	cbnz	r0, 8019c02 <__mdiff+0x2e>
 8019bf4:	4b3a      	ldr	r3, [pc, #232]	; (8019ce0 <__mdiff+0x10c>)
 8019bf6:	4602      	mov	r2, r0
 8019bf8:	f240 2137 	movw	r1, #567	; 0x237
 8019bfc:	4839      	ldr	r0, [pc, #228]	; (8019ce4 <__mdiff+0x110>)
 8019bfe:	f000 fcc5 	bl	801a58c <__assert_func>
 8019c02:	2301      	movs	r3, #1
 8019c04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019c08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c0c:	bfa4      	itt	ge
 8019c0e:	4643      	movge	r3, r8
 8019c10:	46a0      	movge	r8, r4
 8019c12:	4630      	mov	r0, r6
 8019c14:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019c18:	bfa6      	itte	ge
 8019c1a:	461c      	movge	r4, r3
 8019c1c:	2500      	movge	r5, #0
 8019c1e:	2501      	movlt	r5, #1
 8019c20:	f7ff fd40 	bl	80196a4 <_Balloc>
 8019c24:	b920      	cbnz	r0, 8019c30 <__mdiff+0x5c>
 8019c26:	4b2e      	ldr	r3, [pc, #184]	; (8019ce0 <__mdiff+0x10c>)
 8019c28:	4602      	mov	r2, r0
 8019c2a:	f240 2145 	movw	r1, #581	; 0x245
 8019c2e:	e7e5      	b.n	8019bfc <__mdiff+0x28>
 8019c30:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8019c34:	6926      	ldr	r6, [r4, #16]
 8019c36:	60c5      	str	r5, [r0, #12]
 8019c38:	f104 0914 	add.w	r9, r4, #20
 8019c3c:	f108 0514 	add.w	r5, r8, #20
 8019c40:	f100 0e14 	add.w	lr, r0, #20
 8019c44:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8019c48:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8019c4c:	f108 0210 	add.w	r2, r8, #16
 8019c50:	46f2      	mov	sl, lr
 8019c52:	2100      	movs	r1, #0
 8019c54:	f859 3b04 	ldr.w	r3, [r9], #4
 8019c58:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019c5c:	fa11 f88b 	uxtah	r8, r1, fp
 8019c60:	b299      	uxth	r1, r3
 8019c62:	0c1b      	lsrs	r3, r3, #16
 8019c64:	eba8 0801 	sub.w	r8, r8, r1
 8019c68:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8019c6c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019c70:	fa1f f888 	uxth.w	r8, r8
 8019c74:	1419      	asrs	r1, r3, #16
 8019c76:	454e      	cmp	r6, r9
 8019c78:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8019c7c:	f84a 3b04 	str.w	r3, [sl], #4
 8019c80:	d8e8      	bhi.n	8019c54 <__mdiff+0x80>
 8019c82:	1b33      	subs	r3, r6, r4
 8019c84:	3b15      	subs	r3, #21
 8019c86:	f023 0303 	bic.w	r3, r3, #3
 8019c8a:	3304      	adds	r3, #4
 8019c8c:	3415      	adds	r4, #21
 8019c8e:	42a6      	cmp	r6, r4
 8019c90:	bf38      	it	cc
 8019c92:	2304      	movcc	r3, #4
 8019c94:	441d      	add	r5, r3
 8019c96:	4473      	add	r3, lr
 8019c98:	469e      	mov	lr, r3
 8019c9a:	462e      	mov	r6, r5
 8019c9c:	4566      	cmp	r6, ip
 8019c9e:	d30e      	bcc.n	8019cbe <__mdiff+0xea>
 8019ca0:	f10c 0203 	add.w	r2, ip, #3
 8019ca4:	1b52      	subs	r2, r2, r5
 8019ca6:	f022 0203 	bic.w	r2, r2, #3
 8019caa:	3d03      	subs	r5, #3
 8019cac:	45ac      	cmp	ip, r5
 8019cae:	bf38      	it	cc
 8019cb0:	2200      	movcc	r2, #0
 8019cb2:	4413      	add	r3, r2
 8019cb4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8019cb8:	b17a      	cbz	r2, 8019cda <__mdiff+0x106>
 8019cba:	6107      	str	r7, [r0, #16]
 8019cbc:	e7a4      	b.n	8019c08 <__mdiff+0x34>
 8019cbe:	f856 8b04 	ldr.w	r8, [r6], #4
 8019cc2:	fa11 f288 	uxtah	r2, r1, r8
 8019cc6:	1414      	asrs	r4, r2, #16
 8019cc8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8019ccc:	b292      	uxth	r2, r2
 8019cce:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8019cd2:	f84e 2b04 	str.w	r2, [lr], #4
 8019cd6:	1421      	asrs	r1, r4, #16
 8019cd8:	e7e0      	b.n	8019c9c <__mdiff+0xc8>
 8019cda:	3f01      	subs	r7, #1
 8019cdc:	e7ea      	b.n	8019cb4 <__mdiff+0xe0>
 8019cde:	bf00      	nop
 8019ce0:	0801acb0 	.word	0x0801acb0
 8019ce4:	0801acc1 	.word	0x0801acc1

08019ce8 <__d2b>:
 8019ce8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019cec:	460f      	mov	r7, r1
 8019cee:	2101      	movs	r1, #1
 8019cf0:	ec59 8b10 	vmov	r8, r9, d0
 8019cf4:	4616      	mov	r6, r2
 8019cf6:	f7ff fcd5 	bl	80196a4 <_Balloc>
 8019cfa:	4604      	mov	r4, r0
 8019cfc:	b930      	cbnz	r0, 8019d0c <__d2b+0x24>
 8019cfe:	4602      	mov	r2, r0
 8019d00:	4b24      	ldr	r3, [pc, #144]	; (8019d94 <__d2b+0xac>)
 8019d02:	4825      	ldr	r0, [pc, #148]	; (8019d98 <__d2b+0xb0>)
 8019d04:	f240 310f 	movw	r1, #783	; 0x30f
 8019d08:	f000 fc40 	bl	801a58c <__assert_func>
 8019d0c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8019d10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019d14:	bb2d      	cbnz	r5, 8019d62 <__d2b+0x7a>
 8019d16:	9301      	str	r3, [sp, #4]
 8019d18:	f1b8 0300 	subs.w	r3, r8, #0
 8019d1c:	d026      	beq.n	8019d6c <__d2b+0x84>
 8019d1e:	4668      	mov	r0, sp
 8019d20:	9300      	str	r3, [sp, #0]
 8019d22:	f7ff fd87 	bl	8019834 <__lo0bits>
 8019d26:	e9dd 1200 	ldrd	r1, r2, [sp]
 8019d2a:	b1e8      	cbz	r0, 8019d68 <__d2b+0x80>
 8019d2c:	f1c0 0320 	rsb	r3, r0, #32
 8019d30:	fa02 f303 	lsl.w	r3, r2, r3
 8019d34:	430b      	orrs	r3, r1
 8019d36:	40c2      	lsrs	r2, r0
 8019d38:	6163      	str	r3, [r4, #20]
 8019d3a:	9201      	str	r2, [sp, #4]
 8019d3c:	9b01      	ldr	r3, [sp, #4]
 8019d3e:	61a3      	str	r3, [r4, #24]
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	bf14      	ite	ne
 8019d44:	2202      	movne	r2, #2
 8019d46:	2201      	moveq	r2, #1
 8019d48:	6122      	str	r2, [r4, #16]
 8019d4a:	b1bd      	cbz	r5, 8019d7c <__d2b+0x94>
 8019d4c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019d50:	4405      	add	r5, r0
 8019d52:	603d      	str	r5, [r7, #0]
 8019d54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019d58:	6030      	str	r0, [r6, #0]
 8019d5a:	4620      	mov	r0, r4
 8019d5c:	b003      	add	sp, #12
 8019d5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019d62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019d66:	e7d6      	b.n	8019d16 <__d2b+0x2e>
 8019d68:	6161      	str	r1, [r4, #20]
 8019d6a:	e7e7      	b.n	8019d3c <__d2b+0x54>
 8019d6c:	a801      	add	r0, sp, #4
 8019d6e:	f7ff fd61 	bl	8019834 <__lo0bits>
 8019d72:	9b01      	ldr	r3, [sp, #4]
 8019d74:	6163      	str	r3, [r4, #20]
 8019d76:	3020      	adds	r0, #32
 8019d78:	2201      	movs	r2, #1
 8019d7a:	e7e5      	b.n	8019d48 <__d2b+0x60>
 8019d7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019d80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019d84:	6038      	str	r0, [r7, #0]
 8019d86:	6918      	ldr	r0, [r3, #16]
 8019d88:	f7ff fd34 	bl	80197f4 <__hi0bits>
 8019d8c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019d90:	e7e2      	b.n	8019d58 <__d2b+0x70>
 8019d92:	bf00      	nop
 8019d94:	0801acb0 	.word	0x0801acb0
 8019d98:	0801acc1 	.word	0x0801acc1

08019d9c <__ssputs_r>:
 8019d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019da0:	688e      	ldr	r6, [r1, #8]
 8019da2:	461f      	mov	r7, r3
 8019da4:	42be      	cmp	r6, r7
 8019da6:	680b      	ldr	r3, [r1, #0]
 8019da8:	4682      	mov	sl, r0
 8019daa:	460c      	mov	r4, r1
 8019dac:	4690      	mov	r8, r2
 8019dae:	d82c      	bhi.n	8019e0a <__ssputs_r+0x6e>
 8019db0:	898a      	ldrh	r2, [r1, #12]
 8019db2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019db6:	d026      	beq.n	8019e06 <__ssputs_r+0x6a>
 8019db8:	6965      	ldr	r5, [r4, #20]
 8019dba:	6909      	ldr	r1, [r1, #16]
 8019dbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019dc0:	eba3 0901 	sub.w	r9, r3, r1
 8019dc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019dc8:	1c7b      	adds	r3, r7, #1
 8019dca:	444b      	add	r3, r9
 8019dcc:	106d      	asrs	r5, r5, #1
 8019dce:	429d      	cmp	r5, r3
 8019dd0:	bf38      	it	cc
 8019dd2:	461d      	movcc	r5, r3
 8019dd4:	0553      	lsls	r3, r2, #21
 8019dd6:	d527      	bpl.n	8019e28 <__ssputs_r+0x8c>
 8019dd8:	4629      	mov	r1, r5
 8019dda:	f7ff fbd7 	bl	801958c <_malloc_r>
 8019dde:	4606      	mov	r6, r0
 8019de0:	b360      	cbz	r0, 8019e3c <__ssputs_r+0xa0>
 8019de2:	6921      	ldr	r1, [r4, #16]
 8019de4:	464a      	mov	r2, r9
 8019de6:	f7fe fcd3 	bl	8018790 <memcpy>
 8019dea:	89a3      	ldrh	r3, [r4, #12]
 8019dec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019df4:	81a3      	strh	r3, [r4, #12]
 8019df6:	6126      	str	r6, [r4, #16]
 8019df8:	6165      	str	r5, [r4, #20]
 8019dfa:	444e      	add	r6, r9
 8019dfc:	eba5 0509 	sub.w	r5, r5, r9
 8019e00:	6026      	str	r6, [r4, #0]
 8019e02:	60a5      	str	r5, [r4, #8]
 8019e04:	463e      	mov	r6, r7
 8019e06:	42be      	cmp	r6, r7
 8019e08:	d900      	bls.n	8019e0c <__ssputs_r+0x70>
 8019e0a:	463e      	mov	r6, r7
 8019e0c:	6820      	ldr	r0, [r4, #0]
 8019e0e:	4632      	mov	r2, r6
 8019e10:	4641      	mov	r1, r8
 8019e12:	f000 fb6f 	bl	801a4f4 <memmove>
 8019e16:	68a3      	ldr	r3, [r4, #8]
 8019e18:	1b9b      	subs	r3, r3, r6
 8019e1a:	60a3      	str	r3, [r4, #8]
 8019e1c:	6823      	ldr	r3, [r4, #0]
 8019e1e:	4433      	add	r3, r6
 8019e20:	6023      	str	r3, [r4, #0]
 8019e22:	2000      	movs	r0, #0
 8019e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e28:	462a      	mov	r2, r5
 8019e2a:	f000 fbf5 	bl	801a618 <_realloc_r>
 8019e2e:	4606      	mov	r6, r0
 8019e30:	2800      	cmp	r0, #0
 8019e32:	d1e0      	bne.n	8019df6 <__ssputs_r+0x5a>
 8019e34:	6921      	ldr	r1, [r4, #16]
 8019e36:	4650      	mov	r0, sl
 8019e38:	f7ff fb34 	bl	80194a4 <_free_r>
 8019e3c:	230c      	movs	r3, #12
 8019e3e:	f8ca 3000 	str.w	r3, [sl]
 8019e42:	89a3      	ldrh	r3, [r4, #12]
 8019e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019e48:	81a3      	strh	r3, [r4, #12]
 8019e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8019e4e:	e7e9      	b.n	8019e24 <__ssputs_r+0x88>

08019e50 <_svfiprintf_r>:
 8019e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e54:	4698      	mov	r8, r3
 8019e56:	898b      	ldrh	r3, [r1, #12]
 8019e58:	061b      	lsls	r3, r3, #24
 8019e5a:	b09d      	sub	sp, #116	; 0x74
 8019e5c:	4607      	mov	r7, r0
 8019e5e:	460d      	mov	r5, r1
 8019e60:	4614      	mov	r4, r2
 8019e62:	d50e      	bpl.n	8019e82 <_svfiprintf_r+0x32>
 8019e64:	690b      	ldr	r3, [r1, #16]
 8019e66:	b963      	cbnz	r3, 8019e82 <_svfiprintf_r+0x32>
 8019e68:	2140      	movs	r1, #64	; 0x40
 8019e6a:	f7ff fb8f 	bl	801958c <_malloc_r>
 8019e6e:	6028      	str	r0, [r5, #0]
 8019e70:	6128      	str	r0, [r5, #16]
 8019e72:	b920      	cbnz	r0, 8019e7e <_svfiprintf_r+0x2e>
 8019e74:	230c      	movs	r3, #12
 8019e76:	603b      	str	r3, [r7, #0]
 8019e78:	f04f 30ff 	mov.w	r0, #4294967295
 8019e7c:	e0d0      	b.n	801a020 <_svfiprintf_r+0x1d0>
 8019e7e:	2340      	movs	r3, #64	; 0x40
 8019e80:	616b      	str	r3, [r5, #20]
 8019e82:	2300      	movs	r3, #0
 8019e84:	9309      	str	r3, [sp, #36]	; 0x24
 8019e86:	2320      	movs	r3, #32
 8019e88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019e8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8019e90:	2330      	movs	r3, #48	; 0x30
 8019e92:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801a038 <_svfiprintf_r+0x1e8>
 8019e96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019e9a:	f04f 0901 	mov.w	r9, #1
 8019e9e:	4623      	mov	r3, r4
 8019ea0:	469a      	mov	sl, r3
 8019ea2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019ea6:	b10a      	cbz	r2, 8019eac <_svfiprintf_r+0x5c>
 8019ea8:	2a25      	cmp	r2, #37	; 0x25
 8019eaa:	d1f9      	bne.n	8019ea0 <_svfiprintf_r+0x50>
 8019eac:	ebba 0b04 	subs.w	fp, sl, r4
 8019eb0:	d00b      	beq.n	8019eca <_svfiprintf_r+0x7a>
 8019eb2:	465b      	mov	r3, fp
 8019eb4:	4622      	mov	r2, r4
 8019eb6:	4629      	mov	r1, r5
 8019eb8:	4638      	mov	r0, r7
 8019eba:	f7ff ff6f 	bl	8019d9c <__ssputs_r>
 8019ebe:	3001      	adds	r0, #1
 8019ec0:	f000 80a9 	beq.w	801a016 <_svfiprintf_r+0x1c6>
 8019ec4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019ec6:	445a      	add	r2, fp
 8019ec8:	9209      	str	r2, [sp, #36]	; 0x24
 8019eca:	f89a 3000 	ldrb.w	r3, [sl]
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	f000 80a1 	beq.w	801a016 <_svfiprintf_r+0x1c6>
 8019ed4:	2300      	movs	r3, #0
 8019ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8019eda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019ede:	f10a 0a01 	add.w	sl, sl, #1
 8019ee2:	9304      	str	r3, [sp, #16]
 8019ee4:	9307      	str	r3, [sp, #28]
 8019ee6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019eea:	931a      	str	r3, [sp, #104]	; 0x68
 8019eec:	4654      	mov	r4, sl
 8019eee:	2205      	movs	r2, #5
 8019ef0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019ef4:	4850      	ldr	r0, [pc, #320]	; (801a038 <_svfiprintf_r+0x1e8>)
 8019ef6:	f7e6 f99b 	bl	8000230 <memchr>
 8019efa:	9a04      	ldr	r2, [sp, #16]
 8019efc:	b9d8      	cbnz	r0, 8019f36 <_svfiprintf_r+0xe6>
 8019efe:	06d0      	lsls	r0, r2, #27
 8019f00:	bf44      	itt	mi
 8019f02:	2320      	movmi	r3, #32
 8019f04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019f08:	0711      	lsls	r1, r2, #28
 8019f0a:	bf44      	itt	mi
 8019f0c:	232b      	movmi	r3, #43	; 0x2b
 8019f0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019f12:	f89a 3000 	ldrb.w	r3, [sl]
 8019f16:	2b2a      	cmp	r3, #42	; 0x2a
 8019f18:	d015      	beq.n	8019f46 <_svfiprintf_r+0xf6>
 8019f1a:	9a07      	ldr	r2, [sp, #28]
 8019f1c:	4654      	mov	r4, sl
 8019f1e:	2000      	movs	r0, #0
 8019f20:	f04f 0c0a 	mov.w	ip, #10
 8019f24:	4621      	mov	r1, r4
 8019f26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019f2a:	3b30      	subs	r3, #48	; 0x30
 8019f2c:	2b09      	cmp	r3, #9
 8019f2e:	d94d      	bls.n	8019fcc <_svfiprintf_r+0x17c>
 8019f30:	b1b0      	cbz	r0, 8019f60 <_svfiprintf_r+0x110>
 8019f32:	9207      	str	r2, [sp, #28]
 8019f34:	e014      	b.n	8019f60 <_svfiprintf_r+0x110>
 8019f36:	eba0 0308 	sub.w	r3, r0, r8
 8019f3a:	fa09 f303 	lsl.w	r3, r9, r3
 8019f3e:	4313      	orrs	r3, r2
 8019f40:	9304      	str	r3, [sp, #16]
 8019f42:	46a2      	mov	sl, r4
 8019f44:	e7d2      	b.n	8019eec <_svfiprintf_r+0x9c>
 8019f46:	9b03      	ldr	r3, [sp, #12]
 8019f48:	1d19      	adds	r1, r3, #4
 8019f4a:	681b      	ldr	r3, [r3, #0]
 8019f4c:	9103      	str	r1, [sp, #12]
 8019f4e:	2b00      	cmp	r3, #0
 8019f50:	bfbb      	ittet	lt
 8019f52:	425b      	neglt	r3, r3
 8019f54:	f042 0202 	orrlt.w	r2, r2, #2
 8019f58:	9307      	strge	r3, [sp, #28]
 8019f5a:	9307      	strlt	r3, [sp, #28]
 8019f5c:	bfb8      	it	lt
 8019f5e:	9204      	strlt	r2, [sp, #16]
 8019f60:	7823      	ldrb	r3, [r4, #0]
 8019f62:	2b2e      	cmp	r3, #46	; 0x2e
 8019f64:	d10c      	bne.n	8019f80 <_svfiprintf_r+0x130>
 8019f66:	7863      	ldrb	r3, [r4, #1]
 8019f68:	2b2a      	cmp	r3, #42	; 0x2a
 8019f6a:	d134      	bne.n	8019fd6 <_svfiprintf_r+0x186>
 8019f6c:	9b03      	ldr	r3, [sp, #12]
 8019f6e:	1d1a      	adds	r2, r3, #4
 8019f70:	681b      	ldr	r3, [r3, #0]
 8019f72:	9203      	str	r2, [sp, #12]
 8019f74:	2b00      	cmp	r3, #0
 8019f76:	bfb8      	it	lt
 8019f78:	f04f 33ff 	movlt.w	r3, #4294967295
 8019f7c:	3402      	adds	r4, #2
 8019f7e:	9305      	str	r3, [sp, #20]
 8019f80:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801a048 <_svfiprintf_r+0x1f8>
 8019f84:	7821      	ldrb	r1, [r4, #0]
 8019f86:	2203      	movs	r2, #3
 8019f88:	4650      	mov	r0, sl
 8019f8a:	f7e6 f951 	bl	8000230 <memchr>
 8019f8e:	b138      	cbz	r0, 8019fa0 <_svfiprintf_r+0x150>
 8019f90:	9b04      	ldr	r3, [sp, #16]
 8019f92:	eba0 000a 	sub.w	r0, r0, sl
 8019f96:	2240      	movs	r2, #64	; 0x40
 8019f98:	4082      	lsls	r2, r0
 8019f9a:	4313      	orrs	r3, r2
 8019f9c:	3401      	adds	r4, #1
 8019f9e:	9304      	str	r3, [sp, #16]
 8019fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019fa4:	4825      	ldr	r0, [pc, #148]	; (801a03c <_svfiprintf_r+0x1ec>)
 8019fa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019faa:	2206      	movs	r2, #6
 8019fac:	f7e6 f940 	bl	8000230 <memchr>
 8019fb0:	2800      	cmp	r0, #0
 8019fb2:	d038      	beq.n	801a026 <_svfiprintf_r+0x1d6>
 8019fb4:	4b22      	ldr	r3, [pc, #136]	; (801a040 <_svfiprintf_r+0x1f0>)
 8019fb6:	bb1b      	cbnz	r3, 801a000 <_svfiprintf_r+0x1b0>
 8019fb8:	9b03      	ldr	r3, [sp, #12]
 8019fba:	3307      	adds	r3, #7
 8019fbc:	f023 0307 	bic.w	r3, r3, #7
 8019fc0:	3308      	adds	r3, #8
 8019fc2:	9303      	str	r3, [sp, #12]
 8019fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019fc6:	4433      	add	r3, r6
 8019fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8019fca:	e768      	b.n	8019e9e <_svfiprintf_r+0x4e>
 8019fcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8019fd0:	460c      	mov	r4, r1
 8019fd2:	2001      	movs	r0, #1
 8019fd4:	e7a6      	b.n	8019f24 <_svfiprintf_r+0xd4>
 8019fd6:	2300      	movs	r3, #0
 8019fd8:	3401      	adds	r4, #1
 8019fda:	9305      	str	r3, [sp, #20]
 8019fdc:	4619      	mov	r1, r3
 8019fde:	f04f 0c0a 	mov.w	ip, #10
 8019fe2:	4620      	mov	r0, r4
 8019fe4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019fe8:	3a30      	subs	r2, #48	; 0x30
 8019fea:	2a09      	cmp	r2, #9
 8019fec:	d903      	bls.n	8019ff6 <_svfiprintf_r+0x1a6>
 8019fee:	2b00      	cmp	r3, #0
 8019ff0:	d0c6      	beq.n	8019f80 <_svfiprintf_r+0x130>
 8019ff2:	9105      	str	r1, [sp, #20]
 8019ff4:	e7c4      	b.n	8019f80 <_svfiprintf_r+0x130>
 8019ff6:	fb0c 2101 	mla	r1, ip, r1, r2
 8019ffa:	4604      	mov	r4, r0
 8019ffc:	2301      	movs	r3, #1
 8019ffe:	e7f0      	b.n	8019fe2 <_svfiprintf_r+0x192>
 801a000:	ab03      	add	r3, sp, #12
 801a002:	9300      	str	r3, [sp, #0]
 801a004:	462a      	mov	r2, r5
 801a006:	4b0f      	ldr	r3, [pc, #60]	; (801a044 <_svfiprintf_r+0x1f4>)
 801a008:	a904      	add	r1, sp, #16
 801a00a:	4638      	mov	r0, r7
 801a00c:	f7fd fcfc 	bl	8017a08 <_printf_float>
 801a010:	1c42      	adds	r2, r0, #1
 801a012:	4606      	mov	r6, r0
 801a014:	d1d6      	bne.n	8019fc4 <_svfiprintf_r+0x174>
 801a016:	89ab      	ldrh	r3, [r5, #12]
 801a018:	065b      	lsls	r3, r3, #25
 801a01a:	f53f af2d 	bmi.w	8019e78 <_svfiprintf_r+0x28>
 801a01e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a020:	b01d      	add	sp, #116	; 0x74
 801a022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a026:	ab03      	add	r3, sp, #12
 801a028:	9300      	str	r3, [sp, #0]
 801a02a:	462a      	mov	r2, r5
 801a02c:	4b05      	ldr	r3, [pc, #20]	; (801a044 <_svfiprintf_r+0x1f4>)
 801a02e:	a904      	add	r1, sp, #16
 801a030:	4638      	mov	r0, r7
 801a032:	f7fd ff8d 	bl	8017f50 <_printf_i>
 801a036:	e7eb      	b.n	801a010 <_svfiprintf_r+0x1c0>
 801a038:	0801ae1c 	.word	0x0801ae1c
 801a03c:	0801ae26 	.word	0x0801ae26
 801a040:	08017a09 	.word	0x08017a09
 801a044:	08019d9d 	.word	0x08019d9d
 801a048:	0801ae22 	.word	0x0801ae22

0801a04c <__sfputc_r>:
 801a04c:	6893      	ldr	r3, [r2, #8]
 801a04e:	3b01      	subs	r3, #1
 801a050:	2b00      	cmp	r3, #0
 801a052:	b410      	push	{r4}
 801a054:	6093      	str	r3, [r2, #8]
 801a056:	da08      	bge.n	801a06a <__sfputc_r+0x1e>
 801a058:	6994      	ldr	r4, [r2, #24]
 801a05a:	42a3      	cmp	r3, r4
 801a05c:	db01      	blt.n	801a062 <__sfputc_r+0x16>
 801a05e:	290a      	cmp	r1, #10
 801a060:	d103      	bne.n	801a06a <__sfputc_r+0x1e>
 801a062:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a066:	f7fe ba16 	b.w	8018496 <__swbuf_r>
 801a06a:	6813      	ldr	r3, [r2, #0]
 801a06c:	1c58      	adds	r0, r3, #1
 801a06e:	6010      	str	r0, [r2, #0]
 801a070:	7019      	strb	r1, [r3, #0]
 801a072:	4608      	mov	r0, r1
 801a074:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a078:	4770      	bx	lr

0801a07a <__sfputs_r>:
 801a07a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a07c:	4606      	mov	r6, r0
 801a07e:	460f      	mov	r7, r1
 801a080:	4614      	mov	r4, r2
 801a082:	18d5      	adds	r5, r2, r3
 801a084:	42ac      	cmp	r4, r5
 801a086:	d101      	bne.n	801a08c <__sfputs_r+0x12>
 801a088:	2000      	movs	r0, #0
 801a08a:	e007      	b.n	801a09c <__sfputs_r+0x22>
 801a08c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a090:	463a      	mov	r2, r7
 801a092:	4630      	mov	r0, r6
 801a094:	f7ff ffda 	bl	801a04c <__sfputc_r>
 801a098:	1c43      	adds	r3, r0, #1
 801a09a:	d1f3      	bne.n	801a084 <__sfputs_r+0xa>
 801a09c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a0a0 <_vfiprintf_r>:
 801a0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0a4:	460d      	mov	r5, r1
 801a0a6:	b09d      	sub	sp, #116	; 0x74
 801a0a8:	4614      	mov	r4, r2
 801a0aa:	4698      	mov	r8, r3
 801a0ac:	4606      	mov	r6, r0
 801a0ae:	b118      	cbz	r0, 801a0b8 <_vfiprintf_r+0x18>
 801a0b0:	6a03      	ldr	r3, [r0, #32]
 801a0b2:	b90b      	cbnz	r3, 801a0b8 <_vfiprintf_r+0x18>
 801a0b4:	f7fe f8e8 	bl	8018288 <__sinit>
 801a0b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a0ba:	07d9      	lsls	r1, r3, #31
 801a0bc:	d405      	bmi.n	801a0ca <_vfiprintf_r+0x2a>
 801a0be:	89ab      	ldrh	r3, [r5, #12]
 801a0c0:	059a      	lsls	r2, r3, #22
 801a0c2:	d402      	bmi.n	801a0ca <_vfiprintf_r+0x2a>
 801a0c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a0c6:	f7fe fb61 	bl	801878c <__retarget_lock_acquire_recursive>
 801a0ca:	89ab      	ldrh	r3, [r5, #12]
 801a0cc:	071b      	lsls	r3, r3, #28
 801a0ce:	d501      	bpl.n	801a0d4 <_vfiprintf_r+0x34>
 801a0d0:	692b      	ldr	r3, [r5, #16]
 801a0d2:	b99b      	cbnz	r3, 801a0fc <_vfiprintf_r+0x5c>
 801a0d4:	4629      	mov	r1, r5
 801a0d6:	4630      	mov	r0, r6
 801a0d8:	f7fe fa1a 	bl	8018510 <__swsetup_r>
 801a0dc:	b170      	cbz	r0, 801a0fc <_vfiprintf_r+0x5c>
 801a0de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a0e0:	07dc      	lsls	r4, r3, #31
 801a0e2:	d504      	bpl.n	801a0ee <_vfiprintf_r+0x4e>
 801a0e4:	f04f 30ff 	mov.w	r0, #4294967295
 801a0e8:	b01d      	add	sp, #116	; 0x74
 801a0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0ee:	89ab      	ldrh	r3, [r5, #12]
 801a0f0:	0598      	lsls	r0, r3, #22
 801a0f2:	d4f7      	bmi.n	801a0e4 <_vfiprintf_r+0x44>
 801a0f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a0f6:	f7fe fb4a 	bl	801878e <__retarget_lock_release_recursive>
 801a0fa:	e7f3      	b.n	801a0e4 <_vfiprintf_r+0x44>
 801a0fc:	2300      	movs	r3, #0
 801a0fe:	9309      	str	r3, [sp, #36]	; 0x24
 801a100:	2320      	movs	r3, #32
 801a102:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a106:	f8cd 800c 	str.w	r8, [sp, #12]
 801a10a:	2330      	movs	r3, #48	; 0x30
 801a10c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801a2c0 <_vfiprintf_r+0x220>
 801a110:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a114:	f04f 0901 	mov.w	r9, #1
 801a118:	4623      	mov	r3, r4
 801a11a:	469a      	mov	sl, r3
 801a11c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a120:	b10a      	cbz	r2, 801a126 <_vfiprintf_r+0x86>
 801a122:	2a25      	cmp	r2, #37	; 0x25
 801a124:	d1f9      	bne.n	801a11a <_vfiprintf_r+0x7a>
 801a126:	ebba 0b04 	subs.w	fp, sl, r4
 801a12a:	d00b      	beq.n	801a144 <_vfiprintf_r+0xa4>
 801a12c:	465b      	mov	r3, fp
 801a12e:	4622      	mov	r2, r4
 801a130:	4629      	mov	r1, r5
 801a132:	4630      	mov	r0, r6
 801a134:	f7ff ffa1 	bl	801a07a <__sfputs_r>
 801a138:	3001      	adds	r0, #1
 801a13a:	f000 80a9 	beq.w	801a290 <_vfiprintf_r+0x1f0>
 801a13e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a140:	445a      	add	r2, fp
 801a142:	9209      	str	r2, [sp, #36]	; 0x24
 801a144:	f89a 3000 	ldrb.w	r3, [sl]
 801a148:	2b00      	cmp	r3, #0
 801a14a:	f000 80a1 	beq.w	801a290 <_vfiprintf_r+0x1f0>
 801a14e:	2300      	movs	r3, #0
 801a150:	f04f 32ff 	mov.w	r2, #4294967295
 801a154:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a158:	f10a 0a01 	add.w	sl, sl, #1
 801a15c:	9304      	str	r3, [sp, #16]
 801a15e:	9307      	str	r3, [sp, #28]
 801a160:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a164:	931a      	str	r3, [sp, #104]	; 0x68
 801a166:	4654      	mov	r4, sl
 801a168:	2205      	movs	r2, #5
 801a16a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a16e:	4854      	ldr	r0, [pc, #336]	; (801a2c0 <_vfiprintf_r+0x220>)
 801a170:	f7e6 f85e 	bl	8000230 <memchr>
 801a174:	9a04      	ldr	r2, [sp, #16]
 801a176:	b9d8      	cbnz	r0, 801a1b0 <_vfiprintf_r+0x110>
 801a178:	06d1      	lsls	r1, r2, #27
 801a17a:	bf44      	itt	mi
 801a17c:	2320      	movmi	r3, #32
 801a17e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a182:	0713      	lsls	r3, r2, #28
 801a184:	bf44      	itt	mi
 801a186:	232b      	movmi	r3, #43	; 0x2b
 801a188:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a18c:	f89a 3000 	ldrb.w	r3, [sl]
 801a190:	2b2a      	cmp	r3, #42	; 0x2a
 801a192:	d015      	beq.n	801a1c0 <_vfiprintf_r+0x120>
 801a194:	9a07      	ldr	r2, [sp, #28]
 801a196:	4654      	mov	r4, sl
 801a198:	2000      	movs	r0, #0
 801a19a:	f04f 0c0a 	mov.w	ip, #10
 801a19e:	4621      	mov	r1, r4
 801a1a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a1a4:	3b30      	subs	r3, #48	; 0x30
 801a1a6:	2b09      	cmp	r3, #9
 801a1a8:	d94d      	bls.n	801a246 <_vfiprintf_r+0x1a6>
 801a1aa:	b1b0      	cbz	r0, 801a1da <_vfiprintf_r+0x13a>
 801a1ac:	9207      	str	r2, [sp, #28]
 801a1ae:	e014      	b.n	801a1da <_vfiprintf_r+0x13a>
 801a1b0:	eba0 0308 	sub.w	r3, r0, r8
 801a1b4:	fa09 f303 	lsl.w	r3, r9, r3
 801a1b8:	4313      	orrs	r3, r2
 801a1ba:	9304      	str	r3, [sp, #16]
 801a1bc:	46a2      	mov	sl, r4
 801a1be:	e7d2      	b.n	801a166 <_vfiprintf_r+0xc6>
 801a1c0:	9b03      	ldr	r3, [sp, #12]
 801a1c2:	1d19      	adds	r1, r3, #4
 801a1c4:	681b      	ldr	r3, [r3, #0]
 801a1c6:	9103      	str	r1, [sp, #12]
 801a1c8:	2b00      	cmp	r3, #0
 801a1ca:	bfbb      	ittet	lt
 801a1cc:	425b      	neglt	r3, r3
 801a1ce:	f042 0202 	orrlt.w	r2, r2, #2
 801a1d2:	9307      	strge	r3, [sp, #28]
 801a1d4:	9307      	strlt	r3, [sp, #28]
 801a1d6:	bfb8      	it	lt
 801a1d8:	9204      	strlt	r2, [sp, #16]
 801a1da:	7823      	ldrb	r3, [r4, #0]
 801a1dc:	2b2e      	cmp	r3, #46	; 0x2e
 801a1de:	d10c      	bne.n	801a1fa <_vfiprintf_r+0x15a>
 801a1e0:	7863      	ldrb	r3, [r4, #1]
 801a1e2:	2b2a      	cmp	r3, #42	; 0x2a
 801a1e4:	d134      	bne.n	801a250 <_vfiprintf_r+0x1b0>
 801a1e6:	9b03      	ldr	r3, [sp, #12]
 801a1e8:	1d1a      	adds	r2, r3, #4
 801a1ea:	681b      	ldr	r3, [r3, #0]
 801a1ec:	9203      	str	r2, [sp, #12]
 801a1ee:	2b00      	cmp	r3, #0
 801a1f0:	bfb8      	it	lt
 801a1f2:	f04f 33ff 	movlt.w	r3, #4294967295
 801a1f6:	3402      	adds	r4, #2
 801a1f8:	9305      	str	r3, [sp, #20]
 801a1fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801a2d0 <_vfiprintf_r+0x230>
 801a1fe:	7821      	ldrb	r1, [r4, #0]
 801a200:	2203      	movs	r2, #3
 801a202:	4650      	mov	r0, sl
 801a204:	f7e6 f814 	bl	8000230 <memchr>
 801a208:	b138      	cbz	r0, 801a21a <_vfiprintf_r+0x17a>
 801a20a:	9b04      	ldr	r3, [sp, #16]
 801a20c:	eba0 000a 	sub.w	r0, r0, sl
 801a210:	2240      	movs	r2, #64	; 0x40
 801a212:	4082      	lsls	r2, r0
 801a214:	4313      	orrs	r3, r2
 801a216:	3401      	adds	r4, #1
 801a218:	9304      	str	r3, [sp, #16]
 801a21a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a21e:	4829      	ldr	r0, [pc, #164]	; (801a2c4 <_vfiprintf_r+0x224>)
 801a220:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a224:	2206      	movs	r2, #6
 801a226:	f7e6 f803 	bl	8000230 <memchr>
 801a22a:	2800      	cmp	r0, #0
 801a22c:	d03f      	beq.n	801a2ae <_vfiprintf_r+0x20e>
 801a22e:	4b26      	ldr	r3, [pc, #152]	; (801a2c8 <_vfiprintf_r+0x228>)
 801a230:	bb1b      	cbnz	r3, 801a27a <_vfiprintf_r+0x1da>
 801a232:	9b03      	ldr	r3, [sp, #12]
 801a234:	3307      	adds	r3, #7
 801a236:	f023 0307 	bic.w	r3, r3, #7
 801a23a:	3308      	adds	r3, #8
 801a23c:	9303      	str	r3, [sp, #12]
 801a23e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a240:	443b      	add	r3, r7
 801a242:	9309      	str	r3, [sp, #36]	; 0x24
 801a244:	e768      	b.n	801a118 <_vfiprintf_r+0x78>
 801a246:	fb0c 3202 	mla	r2, ip, r2, r3
 801a24a:	460c      	mov	r4, r1
 801a24c:	2001      	movs	r0, #1
 801a24e:	e7a6      	b.n	801a19e <_vfiprintf_r+0xfe>
 801a250:	2300      	movs	r3, #0
 801a252:	3401      	adds	r4, #1
 801a254:	9305      	str	r3, [sp, #20]
 801a256:	4619      	mov	r1, r3
 801a258:	f04f 0c0a 	mov.w	ip, #10
 801a25c:	4620      	mov	r0, r4
 801a25e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a262:	3a30      	subs	r2, #48	; 0x30
 801a264:	2a09      	cmp	r2, #9
 801a266:	d903      	bls.n	801a270 <_vfiprintf_r+0x1d0>
 801a268:	2b00      	cmp	r3, #0
 801a26a:	d0c6      	beq.n	801a1fa <_vfiprintf_r+0x15a>
 801a26c:	9105      	str	r1, [sp, #20]
 801a26e:	e7c4      	b.n	801a1fa <_vfiprintf_r+0x15a>
 801a270:	fb0c 2101 	mla	r1, ip, r1, r2
 801a274:	4604      	mov	r4, r0
 801a276:	2301      	movs	r3, #1
 801a278:	e7f0      	b.n	801a25c <_vfiprintf_r+0x1bc>
 801a27a:	ab03      	add	r3, sp, #12
 801a27c:	9300      	str	r3, [sp, #0]
 801a27e:	462a      	mov	r2, r5
 801a280:	4b12      	ldr	r3, [pc, #72]	; (801a2cc <_vfiprintf_r+0x22c>)
 801a282:	a904      	add	r1, sp, #16
 801a284:	4630      	mov	r0, r6
 801a286:	f7fd fbbf 	bl	8017a08 <_printf_float>
 801a28a:	4607      	mov	r7, r0
 801a28c:	1c78      	adds	r0, r7, #1
 801a28e:	d1d6      	bne.n	801a23e <_vfiprintf_r+0x19e>
 801a290:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a292:	07d9      	lsls	r1, r3, #31
 801a294:	d405      	bmi.n	801a2a2 <_vfiprintf_r+0x202>
 801a296:	89ab      	ldrh	r3, [r5, #12]
 801a298:	059a      	lsls	r2, r3, #22
 801a29a:	d402      	bmi.n	801a2a2 <_vfiprintf_r+0x202>
 801a29c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a29e:	f7fe fa76 	bl	801878e <__retarget_lock_release_recursive>
 801a2a2:	89ab      	ldrh	r3, [r5, #12]
 801a2a4:	065b      	lsls	r3, r3, #25
 801a2a6:	f53f af1d 	bmi.w	801a0e4 <_vfiprintf_r+0x44>
 801a2aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a2ac:	e71c      	b.n	801a0e8 <_vfiprintf_r+0x48>
 801a2ae:	ab03      	add	r3, sp, #12
 801a2b0:	9300      	str	r3, [sp, #0]
 801a2b2:	462a      	mov	r2, r5
 801a2b4:	4b05      	ldr	r3, [pc, #20]	; (801a2cc <_vfiprintf_r+0x22c>)
 801a2b6:	a904      	add	r1, sp, #16
 801a2b8:	4630      	mov	r0, r6
 801a2ba:	f7fd fe49 	bl	8017f50 <_printf_i>
 801a2be:	e7e4      	b.n	801a28a <_vfiprintf_r+0x1ea>
 801a2c0:	0801ae1c 	.word	0x0801ae1c
 801a2c4:	0801ae26 	.word	0x0801ae26
 801a2c8:	08017a09 	.word	0x08017a09
 801a2cc:	0801a07b 	.word	0x0801a07b
 801a2d0:	0801ae22 	.word	0x0801ae22

0801a2d4 <__sflush_r>:
 801a2d4:	898a      	ldrh	r2, [r1, #12]
 801a2d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2da:	4605      	mov	r5, r0
 801a2dc:	0710      	lsls	r0, r2, #28
 801a2de:	460c      	mov	r4, r1
 801a2e0:	d458      	bmi.n	801a394 <__sflush_r+0xc0>
 801a2e2:	684b      	ldr	r3, [r1, #4]
 801a2e4:	2b00      	cmp	r3, #0
 801a2e6:	dc05      	bgt.n	801a2f4 <__sflush_r+0x20>
 801a2e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a2ea:	2b00      	cmp	r3, #0
 801a2ec:	dc02      	bgt.n	801a2f4 <__sflush_r+0x20>
 801a2ee:	2000      	movs	r0, #0
 801a2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a2f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a2f6:	2e00      	cmp	r6, #0
 801a2f8:	d0f9      	beq.n	801a2ee <__sflush_r+0x1a>
 801a2fa:	2300      	movs	r3, #0
 801a2fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a300:	682f      	ldr	r7, [r5, #0]
 801a302:	6a21      	ldr	r1, [r4, #32]
 801a304:	602b      	str	r3, [r5, #0]
 801a306:	d032      	beq.n	801a36e <__sflush_r+0x9a>
 801a308:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a30a:	89a3      	ldrh	r3, [r4, #12]
 801a30c:	075a      	lsls	r2, r3, #29
 801a30e:	d505      	bpl.n	801a31c <__sflush_r+0x48>
 801a310:	6863      	ldr	r3, [r4, #4]
 801a312:	1ac0      	subs	r0, r0, r3
 801a314:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a316:	b10b      	cbz	r3, 801a31c <__sflush_r+0x48>
 801a318:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a31a:	1ac0      	subs	r0, r0, r3
 801a31c:	2300      	movs	r3, #0
 801a31e:	4602      	mov	r2, r0
 801a320:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a322:	6a21      	ldr	r1, [r4, #32]
 801a324:	4628      	mov	r0, r5
 801a326:	47b0      	blx	r6
 801a328:	1c43      	adds	r3, r0, #1
 801a32a:	89a3      	ldrh	r3, [r4, #12]
 801a32c:	d106      	bne.n	801a33c <__sflush_r+0x68>
 801a32e:	6829      	ldr	r1, [r5, #0]
 801a330:	291d      	cmp	r1, #29
 801a332:	d82b      	bhi.n	801a38c <__sflush_r+0xb8>
 801a334:	4a29      	ldr	r2, [pc, #164]	; (801a3dc <__sflush_r+0x108>)
 801a336:	410a      	asrs	r2, r1
 801a338:	07d6      	lsls	r6, r2, #31
 801a33a:	d427      	bmi.n	801a38c <__sflush_r+0xb8>
 801a33c:	2200      	movs	r2, #0
 801a33e:	6062      	str	r2, [r4, #4]
 801a340:	04d9      	lsls	r1, r3, #19
 801a342:	6922      	ldr	r2, [r4, #16]
 801a344:	6022      	str	r2, [r4, #0]
 801a346:	d504      	bpl.n	801a352 <__sflush_r+0x7e>
 801a348:	1c42      	adds	r2, r0, #1
 801a34a:	d101      	bne.n	801a350 <__sflush_r+0x7c>
 801a34c:	682b      	ldr	r3, [r5, #0]
 801a34e:	b903      	cbnz	r3, 801a352 <__sflush_r+0x7e>
 801a350:	6560      	str	r0, [r4, #84]	; 0x54
 801a352:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a354:	602f      	str	r7, [r5, #0]
 801a356:	2900      	cmp	r1, #0
 801a358:	d0c9      	beq.n	801a2ee <__sflush_r+0x1a>
 801a35a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a35e:	4299      	cmp	r1, r3
 801a360:	d002      	beq.n	801a368 <__sflush_r+0x94>
 801a362:	4628      	mov	r0, r5
 801a364:	f7ff f89e 	bl	80194a4 <_free_r>
 801a368:	2000      	movs	r0, #0
 801a36a:	6360      	str	r0, [r4, #52]	; 0x34
 801a36c:	e7c0      	b.n	801a2f0 <__sflush_r+0x1c>
 801a36e:	2301      	movs	r3, #1
 801a370:	4628      	mov	r0, r5
 801a372:	47b0      	blx	r6
 801a374:	1c41      	adds	r1, r0, #1
 801a376:	d1c8      	bne.n	801a30a <__sflush_r+0x36>
 801a378:	682b      	ldr	r3, [r5, #0]
 801a37a:	2b00      	cmp	r3, #0
 801a37c:	d0c5      	beq.n	801a30a <__sflush_r+0x36>
 801a37e:	2b1d      	cmp	r3, #29
 801a380:	d001      	beq.n	801a386 <__sflush_r+0xb2>
 801a382:	2b16      	cmp	r3, #22
 801a384:	d101      	bne.n	801a38a <__sflush_r+0xb6>
 801a386:	602f      	str	r7, [r5, #0]
 801a388:	e7b1      	b.n	801a2ee <__sflush_r+0x1a>
 801a38a:	89a3      	ldrh	r3, [r4, #12]
 801a38c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a390:	81a3      	strh	r3, [r4, #12]
 801a392:	e7ad      	b.n	801a2f0 <__sflush_r+0x1c>
 801a394:	690f      	ldr	r7, [r1, #16]
 801a396:	2f00      	cmp	r7, #0
 801a398:	d0a9      	beq.n	801a2ee <__sflush_r+0x1a>
 801a39a:	0793      	lsls	r3, r2, #30
 801a39c:	680e      	ldr	r6, [r1, #0]
 801a39e:	bf08      	it	eq
 801a3a0:	694b      	ldreq	r3, [r1, #20]
 801a3a2:	600f      	str	r7, [r1, #0]
 801a3a4:	bf18      	it	ne
 801a3a6:	2300      	movne	r3, #0
 801a3a8:	eba6 0807 	sub.w	r8, r6, r7
 801a3ac:	608b      	str	r3, [r1, #8]
 801a3ae:	f1b8 0f00 	cmp.w	r8, #0
 801a3b2:	dd9c      	ble.n	801a2ee <__sflush_r+0x1a>
 801a3b4:	6a21      	ldr	r1, [r4, #32]
 801a3b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a3b8:	4643      	mov	r3, r8
 801a3ba:	463a      	mov	r2, r7
 801a3bc:	4628      	mov	r0, r5
 801a3be:	47b0      	blx	r6
 801a3c0:	2800      	cmp	r0, #0
 801a3c2:	dc06      	bgt.n	801a3d2 <__sflush_r+0xfe>
 801a3c4:	89a3      	ldrh	r3, [r4, #12]
 801a3c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a3ca:	81a3      	strh	r3, [r4, #12]
 801a3cc:	f04f 30ff 	mov.w	r0, #4294967295
 801a3d0:	e78e      	b.n	801a2f0 <__sflush_r+0x1c>
 801a3d2:	4407      	add	r7, r0
 801a3d4:	eba8 0800 	sub.w	r8, r8, r0
 801a3d8:	e7e9      	b.n	801a3ae <__sflush_r+0xda>
 801a3da:	bf00      	nop
 801a3dc:	dfbffffe 	.word	0xdfbffffe

0801a3e0 <_fflush_r>:
 801a3e0:	b538      	push	{r3, r4, r5, lr}
 801a3e2:	690b      	ldr	r3, [r1, #16]
 801a3e4:	4605      	mov	r5, r0
 801a3e6:	460c      	mov	r4, r1
 801a3e8:	b913      	cbnz	r3, 801a3f0 <_fflush_r+0x10>
 801a3ea:	2500      	movs	r5, #0
 801a3ec:	4628      	mov	r0, r5
 801a3ee:	bd38      	pop	{r3, r4, r5, pc}
 801a3f0:	b118      	cbz	r0, 801a3fa <_fflush_r+0x1a>
 801a3f2:	6a03      	ldr	r3, [r0, #32]
 801a3f4:	b90b      	cbnz	r3, 801a3fa <_fflush_r+0x1a>
 801a3f6:	f7fd ff47 	bl	8018288 <__sinit>
 801a3fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a3fe:	2b00      	cmp	r3, #0
 801a400:	d0f3      	beq.n	801a3ea <_fflush_r+0xa>
 801a402:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a404:	07d0      	lsls	r0, r2, #31
 801a406:	d404      	bmi.n	801a412 <_fflush_r+0x32>
 801a408:	0599      	lsls	r1, r3, #22
 801a40a:	d402      	bmi.n	801a412 <_fflush_r+0x32>
 801a40c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a40e:	f7fe f9bd 	bl	801878c <__retarget_lock_acquire_recursive>
 801a412:	4628      	mov	r0, r5
 801a414:	4621      	mov	r1, r4
 801a416:	f7ff ff5d 	bl	801a2d4 <__sflush_r>
 801a41a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a41c:	07da      	lsls	r2, r3, #31
 801a41e:	4605      	mov	r5, r0
 801a420:	d4e4      	bmi.n	801a3ec <_fflush_r+0xc>
 801a422:	89a3      	ldrh	r3, [r4, #12]
 801a424:	059b      	lsls	r3, r3, #22
 801a426:	d4e1      	bmi.n	801a3ec <_fflush_r+0xc>
 801a428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a42a:	f7fe f9b0 	bl	801878e <__retarget_lock_release_recursive>
 801a42e:	e7dd      	b.n	801a3ec <_fflush_r+0xc>

0801a430 <__swhatbuf_r>:
 801a430:	b570      	push	{r4, r5, r6, lr}
 801a432:	460c      	mov	r4, r1
 801a434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a438:	2900      	cmp	r1, #0
 801a43a:	b096      	sub	sp, #88	; 0x58
 801a43c:	4615      	mov	r5, r2
 801a43e:	461e      	mov	r6, r3
 801a440:	da0d      	bge.n	801a45e <__swhatbuf_r+0x2e>
 801a442:	89a3      	ldrh	r3, [r4, #12]
 801a444:	f013 0f80 	tst.w	r3, #128	; 0x80
 801a448:	f04f 0100 	mov.w	r1, #0
 801a44c:	bf0c      	ite	eq
 801a44e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801a452:	2340      	movne	r3, #64	; 0x40
 801a454:	2000      	movs	r0, #0
 801a456:	6031      	str	r1, [r6, #0]
 801a458:	602b      	str	r3, [r5, #0]
 801a45a:	b016      	add	sp, #88	; 0x58
 801a45c:	bd70      	pop	{r4, r5, r6, pc}
 801a45e:	466a      	mov	r2, sp
 801a460:	f000 f862 	bl	801a528 <_fstat_r>
 801a464:	2800      	cmp	r0, #0
 801a466:	dbec      	blt.n	801a442 <__swhatbuf_r+0x12>
 801a468:	9901      	ldr	r1, [sp, #4]
 801a46a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801a46e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801a472:	4259      	negs	r1, r3
 801a474:	4159      	adcs	r1, r3
 801a476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a47a:	e7eb      	b.n	801a454 <__swhatbuf_r+0x24>

0801a47c <__smakebuf_r>:
 801a47c:	898b      	ldrh	r3, [r1, #12]
 801a47e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a480:	079d      	lsls	r5, r3, #30
 801a482:	4606      	mov	r6, r0
 801a484:	460c      	mov	r4, r1
 801a486:	d507      	bpl.n	801a498 <__smakebuf_r+0x1c>
 801a488:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a48c:	6023      	str	r3, [r4, #0]
 801a48e:	6123      	str	r3, [r4, #16]
 801a490:	2301      	movs	r3, #1
 801a492:	6163      	str	r3, [r4, #20]
 801a494:	b002      	add	sp, #8
 801a496:	bd70      	pop	{r4, r5, r6, pc}
 801a498:	ab01      	add	r3, sp, #4
 801a49a:	466a      	mov	r2, sp
 801a49c:	f7ff ffc8 	bl	801a430 <__swhatbuf_r>
 801a4a0:	9900      	ldr	r1, [sp, #0]
 801a4a2:	4605      	mov	r5, r0
 801a4a4:	4630      	mov	r0, r6
 801a4a6:	f7ff f871 	bl	801958c <_malloc_r>
 801a4aa:	b948      	cbnz	r0, 801a4c0 <__smakebuf_r+0x44>
 801a4ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a4b0:	059a      	lsls	r2, r3, #22
 801a4b2:	d4ef      	bmi.n	801a494 <__smakebuf_r+0x18>
 801a4b4:	f023 0303 	bic.w	r3, r3, #3
 801a4b8:	f043 0302 	orr.w	r3, r3, #2
 801a4bc:	81a3      	strh	r3, [r4, #12]
 801a4be:	e7e3      	b.n	801a488 <__smakebuf_r+0xc>
 801a4c0:	89a3      	ldrh	r3, [r4, #12]
 801a4c2:	6020      	str	r0, [r4, #0]
 801a4c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a4c8:	81a3      	strh	r3, [r4, #12]
 801a4ca:	9b00      	ldr	r3, [sp, #0]
 801a4cc:	6163      	str	r3, [r4, #20]
 801a4ce:	9b01      	ldr	r3, [sp, #4]
 801a4d0:	6120      	str	r0, [r4, #16]
 801a4d2:	b15b      	cbz	r3, 801a4ec <__smakebuf_r+0x70>
 801a4d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a4d8:	4630      	mov	r0, r6
 801a4da:	f000 f837 	bl	801a54c <_isatty_r>
 801a4de:	b128      	cbz	r0, 801a4ec <__smakebuf_r+0x70>
 801a4e0:	89a3      	ldrh	r3, [r4, #12]
 801a4e2:	f023 0303 	bic.w	r3, r3, #3
 801a4e6:	f043 0301 	orr.w	r3, r3, #1
 801a4ea:	81a3      	strh	r3, [r4, #12]
 801a4ec:	89a3      	ldrh	r3, [r4, #12]
 801a4ee:	431d      	orrs	r5, r3
 801a4f0:	81a5      	strh	r5, [r4, #12]
 801a4f2:	e7cf      	b.n	801a494 <__smakebuf_r+0x18>

0801a4f4 <memmove>:
 801a4f4:	4288      	cmp	r0, r1
 801a4f6:	b510      	push	{r4, lr}
 801a4f8:	eb01 0402 	add.w	r4, r1, r2
 801a4fc:	d902      	bls.n	801a504 <memmove+0x10>
 801a4fe:	4284      	cmp	r4, r0
 801a500:	4623      	mov	r3, r4
 801a502:	d807      	bhi.n	801a514 <memmove+0x20>
 801a504:	1e43      	subs	r3, r0, #1
 801a506:	42a1      	cmp	r1, r4
 801a508:	d008      	beq.n	801a51c <memmove+0x28>
 801a50a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a50e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a512:	e7f8      	b.n	801a506 <memmove+0x12>
 801a514:	4402      	add	r2, r0
 801a516:	4601      	mov	r1, r0
 801a518:	428a      	cmp	r2, r1
 801a51a:	d100      	bne.n	801a51e <memmove+0x2a>
 801a51c:	bd10      	pop	{r4, pc}
 801a51e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a522:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a526:	e7f7      	b.n	801a518 <memmove+0x24>

0801a528 <_fstat_r>:
 801a528:	b538      	push	{r3, r4, r5, lr}
 801a52a:	4d07      	ldr	r5, [pc, #28]	; (801a548 <_fstat_r+0x20>)
 801a52c:	2300      	movs	r3, #0
 801a52e:	4604      	mov	r4, r0
 801a530:	4608      	mov	r0, r1
 801a532:	4611      	mov	r1, r2
 801a534:	602b      	str	r3, [r5, #0]
 801a536:	f7e9 f940 	bl	80037ba <_fstat>
 801a53a:	1c43      	adds	r3, r0, #1
 801a53c:	d102      	bne.n	801a544 <_fstat_r+0x1c>
 801a53e:	682b      	ldr	r3, [r5, #0]
 801a540:	b103      	cbz	r3, 801a544 <_fstat_r+0x1c>
 801a542:	6023      	str	r3, [r4, #0]
 801a544:	bd38      	pop	{r3, r4, r5, pc}
 801a546:	bf00      	nop
 801a548:	2000b27c 	.word	0x2000b27c

0801a54c <_isatty_r>:
 801a54c:	b538      	push	{r3, r4, r5, lr}
 801a54e:	4d06      	ldr	r5, [pc, #24]	; (801a568 <_isatty_r+0x1c>)
 801a550:	2300      	movs	r3, #0
 801a552:	4604      	mov	r4, r0
 801a554:	4608      	mov	r0, r1
 801a556:	602b      	str	r3, [r5, #0]
 801a558:	f7e9 f93f 	bl	80037da <_isatty>
 801a55c:	1c43      	adds	r3, r0, #1
 801a55e:	d102      	bne.n	801a566 <_isatty_r+0x1a>
 801a560:	682b      	ldr	r3, [r5, #0]
 801a562:	b103      	cbz	r3, 801a566 <_isatty_r+0x1a>
 801a564:	6023      	str	r3, [r4, #0]
 801a566:	bd38      	pop	{r3, r4, r5, pc}
 801a568:	2000b27c 	.word	0x2000b27c

0801a56c <_sbrk_r>:
 801a56c:	b538      	push	{r3, r4, r5, lr}
 801a56e:	4d06      	ldr	r5, [pc, #24]	; (801a588 <_sbrk_r+0x1c>)
 801a570:	2300      	movs	r3, #0
 801a572:	4604      	mov	r4, r0
 801a574:	4608      	mov	r0, r1
 801a576:	602b      	str	r3, [r5, #0]
 801a578:	f7e9 f948 	bl	800380c <_sbrk>
 801a57c:	1c43      	adds	r3, r0, #1
 801a57e:	d102      	bne.n	801a586 <_sbrk_r+0x1a>
 801a580:	682b      	ldr	r3, [r5, #0]
 801a582:	b103      	cbz	r3, 801a586 <_sbrk_r+0x1a>
 801a584:	6023      	str	r3, [r4, #0]
 801a586:	bd38      	pop	{r3, r4, r5, pc}
 801a588:	2000b27c 	.word	0x2000b27c

0801a58c <__assert_func>:
 801a58c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a58e:	4614      	mov	r4, r2
 801a590:	461a      	mov	r2, r3
 801a592:	4b09      	ldr	r3, [pc, #36]	; (801a5b8 <__assert_func+0x2c>)
 801a594:	681b      	ldr	r3, [r3, #0]
 801a596:	4605      	mov	r5, r0
 801a598:	68d8      	ldr	r0, [r3, #12]
 801a59a:	b14c      	cbz	r4, 801a5b0 <__assert_func+0x24>
 801a59c:	4b07      	ldr	r3, [pc, #28]	; (801a5bc <__assert_func+0x30>)
 801a59e:	9100      	str	r1, [sp, #0]
 801a5a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a5a4:	4906      	ldr	r1, [pc, #24]	; (801a5c0 <__assert_func+0x34>)
 801a5a6:	462b      	mov	r3, r5
 801a5a8:	f000 f872 	bl	801a690 <fiprintf>
 801a5ac:	f000 f882 	bl	801a6b4 <abort>
 801a5b0:	4b04      	ldr	r3, [pc, #16]	; (801a5c4 <__assert_func+0x38>)
 801a5b2:	461c      	mov	r4, r3
 801a5b4:	e7f3      	b.n	801a59e <__assert_func+0x12>
 801a5b6:	bf00      	nop
 801a5b8:	200001c8 	.word	0x200001c8
 801a5bc:	0801ae37 	.word	0x0801ae37
 801a5c0:	0801ae44 	.word	0x0801ae44
 801a5c4:	0801ae72 	.word	0x0801ae72

0801a5c8 <_calloc_r>:
 801a5c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a5ca:	fba1 2402 	umull	r2, r4, r1, r2
 801a5ce:	b94c      	cbnz	r4, 801a5e4 <_calloc_r+0x1c>
 801a5d0:	4611      	mov	r1, r2
 801a5d2:	9201      	str	r2, [sp, #4]
 801a5d4:	f7fe ffda 	bl	801958c <_malloc_r>
 801a5d8:	9a01      	ldr	r2, [sp, #4]
 801a5da:	4605      	mov	r5, r0
 801a5dc:	b930      	cbnz	r0, 801a5ec <_calloc_r+0x24>
 801a5de:	4628      	mov	r0, r5
 801a5e0:	b003      	add	sp, #12
 801a5e2:	bd30      	pop	{r4, r5, pc}
 801a5e4:	220c      	movs	r2, #12
 801a5e6:	6002      	str	r2, [r0, #0]
 801a5e8:	2500      	movs	r5, #0
 801a5ea:	e7f8      	b.n	801a5de <_calloc_r+0x16>
 801a5ec:	4621      	mov	r1, r4
 801a5ee:	f7fd ffe7 	bl	80185c0 <memset>
 801a5f2:	e7f4      	b.n	801a5de <_calloc_r+0x16>

0801a5f4 <__ascii_mbtowc>:
 801a5f4:	b082      	sub	sp, #8
 801a5f6:	b901      	cbnz	r1, 801a5fa <__ascii_mbtowc+0x6>
 801a5f8:	a901      	add	r1, sp, #4
 801a5fa:	b142      	cbz	r2, 801a60e <__ascii_mbtowc+0x1a>
 801a5fc:	b14b      	cbz	r3, 801a612 <__ascii_mbtowc+0x1e>
 801a5fe:	7813      	ldrb	r3, [r2, #0]
 801a600:	600b      	str	r3, [r1, #0]
 801a602:	7812      	ldrb	r2, [r2, #0]
 801a604:	1e10      	subs	r0, r2, #0
 801a606:	bf18      	it	ne
 801a608:	2001      	movne	r0, #1
 801a60a:	b002      	add	sp, #8
 801a60c:	4770      	bx	lr
 801a60e:	4610      	mov	r0, r2
 801a610:	e7fb      	b.n	801a60a <__ascii_mbtowc+0x16>
 801a612:	f06f 0001 	mvn.w	r0, #1
 801a616:	e7f8      	b.n	801a60a <__ascii_mbtowc+0x16>

0801a618 <_realloc_r>:
 801a618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a61c:	4680      	mov	r8, r0
 801a61e:	4614      	mov	r4, r2
 801a620:	460e      	mov	r6, r1
 801a622:	b921      	cbnz	r1, 801a62e <_realloc_r+0x16>
 801a624:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a628:	4611      	mov	r1, r2
 801a62a:	f7fe bfaf 	b.w	801958c <_malloc_r>
 801a62e:	b92a      	cbnz	r2, 801a63c <_realloc_r+0x24>
 801a630:	f7fe ff38 	bl	80194a4 <_free_r>
 801a634:	4625      	mov	r5, r4
 801a636:	4628      	mov	r0, r5
 801a638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a63c:	f000 f841 	bl	801a6c2 <_malloc_usable_size_r>
 801a640:	4284      	cmp	r4, r0
 801a642:	4607      	mov	r7, r0
 801a644:	d802      	bhi.n	801a64c <_realloc_r+0x34>
 801a646:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a64a:	d812      	bhi.n	801a672 <_realloc_r+0x5a>
 801a64c:	4621      	mov	r1, r4
 801a64e:	4640      	mov	r0, r8
 801a650:	f7fe ff9c 	bl	801958c <_malloc_r>
 801a654:	4605      	mov	r5, r0
 801a656:	2800      	cmp	r0, #0
 801a658:	d0ed      	beq.n	801a636 <_realloc_r+0x1e>
 801a65a:	42bc      	cmp	r4, r7
 801a65c:	4622      	mov	r2, r4
 801a65e:	4631      	mov	r1, r6
 801a660:	bf28      	it	cs
 801a662:	463a      	movcs	r2, r7
 801a664:	f7fe f894 	bl	8018790 <memcpy>
 801a668:	4631      	mov	r1, r6
 801a66a:	4640      	mov	r0, r8
 801a66c:	f7fe ff1a 	bl	80194a4 <_free_r>
 801a670:	e7e1      	b.n	801a636 <_realloc_r+0x1e>
 801a672:	4635      	mov	r5, r6
 801a674:	e7df      	b.n	801a636 <_realloc_r+0x1e>

0801a676 <__ascii_wctomb>:
 801a676:	b149      	cbz	r1, 801a68c <__ascii_wctomb+0x16>
 801a678:	2aff      	cmp	r2, #255	; 0xff
 801a67a:	bf85      	ittet	hi
 801a67c:	238a      	movhi	r3, #138	; 0x8a
 801a67e:	6003      	strhi	r3, [r0, #0]
 801a680:	700a      	strbls	r2, [r1, #0]
 801a682:	f04f 30ff 	movhi.w	r0, #4294967295
 801a686:	bf98      	it	ls
 801a688:	2001      	movls	r0, #1
 801a68a:	4770      	bx	lr
 801a68c:	4608      	mov	r0, r1
 801a68e:	4770      	bx	lr

0801a690 <fiprintf>:
 801a690:	b40e      	push	{r1, r2, r3}
 801a692:	b503      	push	{r0, r1, lr}
 801a694:	4601      	mov	r1, r0
 801a696:	ab03      	add	r3, sp, #12
 801a698:	4805      	ldr	r0, [pc, #20]	; (801a6b0 <fiprintf+0x20>)
 801a69a:	f853 2b04 	ldr.w	r2, [r3], #4
 801a69e:	6800      	ldr	r0, [r0, #0]
 801a6a0:	9301      	str	r3, [sp, #4]
 801a6a2:	f7ff fcfd 	bl	801a0a0 <_vfiprintf_r>
 801a6a6:	b002      	add	sp, #8
 801a6a8:	f85d eb04 	ldr.w	lr, [sp], #4
 801a6ac:	b003      	add	sp, #12
 801a6ae:	4770      	bx	lr
 801a6b0:	200001c8 	.word	0x200001c8

0801a6b4 <abort>:
 801a6b4:	b508      	push	{r3, lr}
 801a6b6:	2006      	movs	r0, #6
 801a6b8:	f000 f834 	bl	801a724 <raise>
 801a6bc:	2001      	movs	r0, #1
 801a6be:	f7e9 f82d 	bl	800371c <_exit>

0801a6c2 <_malloc_usable_size_r>:
 801a6c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a6c6:	1f18      	subs	r0, r3, #4
 801a6c8:	2b00      	cmp	r3, #0
 801a6ca:	bfbc      	itt	lt
 801a6cc:	580b      	ldrlt	r3, [r1, r0]
 801a6ce:	18c0      	addlt	r0, r0, r3
 801a6d0:	4770      	bx	lr

0801a6d2 <_raise_r>:
 801a6d2:	291f      	cmp	r1, #31
 801a6d4:	b538      	push	{r3, r4, r5, lr}
 801a6d6:	4604      	mov	r4, r0
 801a6d8:	460d      	mov	r5, r1
 801a6da:	d904      	bls.n	801a6e6 <_raise_r+0x14>
 801a6dc:	2316      	movs	r3, #22
 801a6de:	6003      	str	r3, [r0, #0]
 801a6e0:	f04f 30ff 	mov.w	r0, #4294967295
 801a6e4:	bd38      	pop	{r3, r4, r5, pc}
 801a6e6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801a6e8:	b112      	cbz	r2, 801a6f0 <_raise_r+0x1e>
 801a6ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a6ee:	b94b      	cbnz	r3, 801a704 <_raise_r+0x32>
 801a6f0:	4620      	mov	r0, r4
 801a6f2:	f000 f831 	bl	801a758 <_getpid_r>
 801a6f6:	462a      	mov	r2, r5
 801a6f8:	4601      	mov	r1, r0
 801a6fa:	4620      	mov	r0, r4
 801a6fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a700:	f000 b818 	b.w	801a734 <_kill_r>
 801a704:	2b01      	cmp	r3, #1
 801a706:	d00a      	beq.n	801a71e <_raise_r+0x4c>
 801a708:	1c59      	adds	r1, r3, #1
 801a70a:	d103      	bne.n	801a714 <_raise_r+0x42>
 801a70c:	2316      	movs	r3, #22
 801a70e:	6003      	str	r3, [r0, #0]
 801a710:	2001      	movs	r0, #1
 801a712:	e7e7      	b.n	801a6e4 <_raise_r+0x12>
 801a714:	2400      	movs	r4, #0
 801a716:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a71a:	4628      	mov	r0, r5
 801a71c:	4798      	blx	r3
 801a71e:	2000      	movs	r0, #0
 801a720:	e7e0      	b.n	801a6e4 <_raise_r+0x12>
	...

0801a724 <raise>:
 801a724:	4b02      	ldr	r3, [pc, #8]	; (801a730 <raise+0xc>)
 801a726:	4601      	mov	r1, r0
 801a728:	6818      	ldr	r0, [r3, #0]
 801a72a:	f7ff bfd2 	b.w	801a6d2 <_raise_r>
 801a72e:	bf00      	nop
 801a730:	200001c8 	.word	0x200001c8

0801a734 <_kill_r>:
 801a734:	b538      	push	{r3, r4, r5, lr}
 801a736:	4d07      	ldr	r5, [pc, #28]	; (801a754 <_kill_r+0x20>)
 801a738:	2300      	movs	r3, #0
 801a73a:	4604      	mov	r4, r0
 801a73c:	4608      	mov	r0, r1
 801a73e:	4611      	mov	r1, r2
 801a740:	602b      	str	r3, [r5, #0]
 801a742:	f7e8 ffdb 	bl	80036fc <_kill>
 801a746:	1c43      	adds	r3, r0, #1
 801a748:	d102      	bne.n	801a750 <_kill_r+0x1c>
 801a74a:	682b      	ldr	r3, [r5, #0]
 801a74c:	b103      	cbz	r3, 801a750 <_kill_r+0x1c>
 801a74e:	6023      	str	r3, [r4, #0]
 801a750:	bd38      	pop	{r3, r4, r5, pc}
 801a752:	bf00      	nop
 801a754:	2000b27c 	.word	0x2000b27c

0801a758 <_getpid_r>:
 801a758:	f7e8 bfc8 	b.w	80036ec <_getpid>

0801a75c <_init>:
 801a75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a75e:	bf00      	nop
 801a760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a762:	bc08      	pop	{r3}
 801a764:	469e      	mov	lr, r3
 801a766:	4770      	bx	lr

0801a768 <_fini>:
 801a768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a76a:	bf00      	nop
 801a76c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a76e:	bc08      	pop	{r3}
 801a770:	469e      	mov	lr, r3
 801a772:	4770      	bx	lr
