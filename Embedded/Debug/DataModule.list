
DataModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cae4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001224  0801ccb8  0801ccb8  0002ccb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801dedc  0801dedc  00030308  2**0
                  CONTENTS
  4 .ARM          00000008  0801dedc  0801dedc  0002dedc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801dee4  0801dee4  00030308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801dee4  0801dee4  0002dee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801dee8  0801dee8  0002dee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000308  20000000  0801deec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007a88  20000308  0801e1f4  00030308  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20007d90  0801e1f4  00037d90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030308  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030338  2**0
                  CONTENTS, READONLY
 13 .debug_info   00030664  00000000  00000000  0003037b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008561  00000000  00000000  000609df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002850  00000000  00000000  00068f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001eae  00000000  00000000  0006b790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000dd51  00000000  00000000  0006d63e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003c6a3  00000000  00000000  0007b38f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5a59  00000000  00000000  000b7a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000bca4  00000000  00000000  001ad48c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  001b9130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000308 	.word	0x20000308
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801cc9c 	.word	0x0801cc9c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000030c 	.word	0x2000030c
 800020c:	0801cc9c 	.word	0x0801cc9c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9a6 	b.w	800104c <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9e08      	ldr	r6, [sp, #32]
 8000d8a:	460d      	mov	r5, r1
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	460f      	mov	r7, r1
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d14a      	bne.n	8000e2a <__udivmoddi4+0xa6>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	4694      	mov	ip, r2
 8000d98:	d965      	bls.n	8000e66 <__udivmoddi4+0xe2>
 8000d9a:	fab2 f382 	clz	r3, r2
 8000d9e:	b143      	cbz	r3, 8000db2 <__udivmoddi4+0x2e>
 8000da0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000da4:	f1c3 0220 	rsb	r2, r3, #32
 8000da8:	409f      	lsls	r7, r3
 8000daa:	fa20 f202 	lsr.w	r2, r0, r2
 8000dae:	4317      	orrs	r7, r2
 8000db0:	409c      	lsls	r4, r3
 8000db2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000db6:	fa1f f58c 	uxth.w	r5, ip
 8000dba:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dbe:	0c22      	lsrs	r2, r4, #16
 8000dc0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dc4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000dc8:	fb01 f005 	mul.w	r0, r1, r5
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x62>
 8000dd0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dd4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dd8:	f080 811c 	bcs.w	8001014 <__udivmoddi4+0x290>
 8000ddc:	4290      	cmp	r0, r2
 8000dde:	f240 8119 	bls.w	8001014 <__udivmoddi4+0x290>
 8000de2:	3902      	subs	r1, #2
 8000de4:	4462      	add	r2, ip
 8000de6:	1a12      	subs	r2, r2, r0
 8000de8:	b2a4      	uxth	r4, r4
 8000dea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000df2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000df6:	fb00 f505 	mul.w	r5, r0, r5
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	d90a      	bls.n	8000e14 <__udivmoddi4+0x90>
 8000dfe:	eb1c 0404 	adds.w	r4, ip, r4
 8000e02:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e06:	f080 8107 	bcs.w	8001018 <__udivmoddi4+0x294>
 8000e0a:	42a5      	cmp	r5, r4
 8000e0c:	f240 8104 	bls.w	8001018 <__udivmoddi4+0x294>
 8000e10:	4464      	add	r4, ip
 8000e12:	3802      	subs	r0, #2
 8000e14:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e18:	1b64      	subs	r4, r4, r5
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	b11e      	cbz	r6, 8000e26 <__udivmoddi4+0xa2>
 8000e1e:	40dc      	lsrs	r4, r3
 8000e20:	2300      	movs	r3, #0
 8000e22:	e9c6 4300 	strd	r4, r3, [r6]
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0xbc>
 8000e2e:	2e00      	cmp	r6, #0
 8000e30:	f000 80ed 	beq.w	800100e <__udivmoddi4+0x28a>
 8000e34:	2100      	movs	r1, #0
 8000e36:	e9c6 0500 	strd	r0, r5, [r6]
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e40:	fab3 f183 	clz	r1, r3
 8000e44:	2900      	cmp	r1, #0
 8000e46:	d149      	bne.n	8000edc <__udivmoddi4+0x158>
 8000e48:	42ab      	cmp	r3, r5
 8000e4a:	d302      	bcc.n	8000e52 <__udivmoddi4+0xce>
 8000e4c:	4282      	cmp	r2, r0
 8000e4e:	f200 80f8 	bhi.w	8001042 <__udivmoddi4+0x2be>
 8000e52:	1a84      	subs	r4, r0, r2
 8000e54:	eb65 0203 	sbc.w	r2, r5, r3
 8000e58:	2001      	movs	r0, #1
 8000e5a:	4617      	mov	r7, r2
 8000e5c:	2e00      	cmp	r6, #0
 8000e5e:	d0e2      	beq.n	8000e26 <__udivmoddi4+0xa2>
 8000e60:	e9c6 4700 	strd	r4, r7, [r6]
 8000e64:	e7df      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e66:	b902      	cbnz	r2, 8000e6a <__udivmoddi4+0xe6>
 8000e68:	deff      	udf	#255	; 0xff
 8000e6a:	fab2 f382 	clz	r3, r2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f040 8090 	bne.w	8000f94 <__udivmoddi4+0x210>
 8000e74:	1a8a      	subs	r2, r1, r2
 8000e76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e7a:	fa1f fe8c 	uxth.w	lr, ip
 8000e7e:	2101      	movs	r1, #1
 8000e80:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e84:	fb07 2015 	mls	r0, r7, r5, r2
 8000e88:	0c22      	lsrs	r2, r4, #16
 8000e8a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e8e:	fb0e f005 	mul.w	r0, lr, r5
 8000e92:	4290      	cmp	r0, r2
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x124>
 8000e96:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x122>
 8000ea0:	4290      	cmp	r0, r2
 8000ea2:	f200 80cb 	bhi.w	800103c <__udivmoddi4+0x2b8>
 8000ea6:	4645      	mov	r5, r8
 8000ea8:	1a12      	subs	r2, r2, r0
 8000eaa:	b2a4      	uxth	r4, r4
 8000eac:	fbb2 f0f7 	udiv	r0, r2, r7
 8000eb0:	fb07 2210 	mls	r2, r7, r0, r2
 8000eb4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000eb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000ebc:	45a6      	cmp	lr, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x14e>
 8000ec0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ec8:	d202      	bcs.n	8000ed0 <__udivmoddi4+0x14c>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f200 80bb 	bhi.w	8001046 <__udivmoddi4+0x2c2>
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	eba4 040e 	sub.w	r4, r4, lr
 8000ed6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eda:	e79f      	b.n	8000e1c <__udivmoddi4+0x98>
 8000edc:	f1c1 0720 	rsb	r7, r1, #32
 8000ee0:	408b      	lsls	r3, r1
 8000ee2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ee6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eea:	fa05 f401 	lsl.w	r4, r5, r1
 8000eee:	fa20 f307 	lsr.w	r3, r0, r7
 8000ef2:	40fd      	lsrs	r5, r7
 8000ef4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef8:	4323      	orrs	r3, r4
 8000efa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000efe:	fa1f fe8c 	uxth.w	lr, ip
 8000f02:	fb09 5518 	mls	r5, r9, r8, r5
 8000f06:	0c1c      	lsrs	r4, r3, #16
 8000f08:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f0c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f10:	42a5      	cmp	r5, r4
 8000f12:	fa02 f201 	lsl.w	r2, r2, r1
 8000f16:	fa00 f001 	lsl.w	r0, r0, r1
 8000f1a:	d90b      	bls.n	8000f34 <__udivmoddi4+0x1b0>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f24:	f080 8088 	bcs.w	8001038 <__udivmoddi4+0x2b4>
 8000f28:	42a5      	cmp	r5, r4
 8000f2a:	f240 8085 	bls.w	8001038 <__udivmoddi4+0x2b4>
 8000f2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f32:	4464      	add	r4, ip
 8000f34:	1b64      	subs	r4, r4, r5
 8000f36:	b29d      	uxth	r5, r3
 8000f38:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f3c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f40:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f44:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f48:	45a6      	cmp	lr, r4
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x1da>
 8000f4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f50:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f54:	d26c      	bcs.n	8001030 <__udivmoddi4+0x2ac>
 8000f56:	45a6      	cmp	lr, r4
 8000f58:	d96a      	bls.n	8001030 <__udivmoddi4+0x2ac>
 8000f5a:	3b02      	subs	r3, #2
 8000f5c:	4464      	add	r4, ip
 8000f5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f62:	fba3 9502 	umull	r9, r5, r3, r2
 8000f66:	eba4 040e 	sub.w	r4, r4, lr
 8000f6a:	42ac      	cmp	r4, r5
 8000f6c:	46c8      	mov	r8, r9
 8000f6e:	46ae      	mov	lr, r5
 8000f70:	d356      	bcc.n	8001020 <__udivmoddi4+0x29c>
 8000f72:	d053      	beq.n	800101c <__udivmoddi4+0x298>
 8000f74:	b156      	cbz	r6, 8000f8c <__udivmoddi4+0x208>
 8000f76:	ebb0 0208 	subs.w	r2, r0, r8
 8000f7a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f7e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f82:	40ca      	lsrs	r2, r1
 8000f84:	40cc      	lsrs	r4, r1
 8000f86:	4317      	orrs	r7, r2
 8000f88:	e9c6 7400 	strd	r7, r4, [r6]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	2100      	movs	r1, #0
 8000f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f94:	f1c3 0120 	rsb	r1, r3, #32
 8000f98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f9c:	fa20 f201 	lsr.w	r2, r0, r1
 8000fa0:	fa25 f101 	lsr.w	r1, r5, r1
 8000fa4:	409d      	lsls	r5, r3
 8000fa6:	432a      	orrs	r2, r5
 8000fa8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fac:	fa1f fe8c 	uxth.w	lr, ip
 8000fb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fb4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fbe:	fb00 f50e 	mul.w	r5, r0, lr
 8000fc2:	428d      	cmp	r5, r1
 8000fc4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fc8:	d908      	bls.n	8000fdc <__udivmoddi4+0x258>
 8000fca:	eb1c 0101 	adds.w	r1, ip, r1
 8000fce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fd2:	d22f      	bcs.n	8001034 <__udivmoddi4+0x2b0>
 8000fd4:	428d      	cmp	r5, r1
 8000fd6:	d92d      	bls.n	8001034 <__udivmoddi4+0x2b0>
 8000fd8:	3802      	subs	r0, #2
 8000fda:	4461      	add	r1, ip
 8000fdc:	1b49      	subs	r1, r1, r5
 8000fde:	b292      	uxth	r2, r2
 8000fe0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fe4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fe8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fec:	fb05 f10e 	mul.w	r1, r5, lr
 8000ff0:	4291      	cmp	r1, r2
 8000ff2:	d908      	bls.n	8001006 <__udivmoddi4+0x282>
 8000ff4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ff8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ffc:	d216      	bcs.n	800102c <__udivmoddi4+0x2a8>
 8000ffe:	4291      	cmp	r1, r2
 8001000:	d914      	bls.n	800102c <__udivmoddi4+0x2a8>
 8001002:	3d02      	subs	r5, #2
 8001004:	4462      	add	r2, ip
 8001006:	1a52      	subs	r2, r2, r1
 8001008:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800100c:	e738      	b.n	8000e80 <__udivmoddi4+0xfc>
 800100e:	4631      	mov	r1, r6
 8001010:	4630      	mov	r0, r6
 8001012:	e708      	b.n	8000e26 <__udivmoddi4+0xa2>
 8001014:	4639      	mov	r1, r7
 8001016:	e6e6      	b.n	8000de6 <__udivmoddi4+0x62>
 8001018:	4610      	mov	r0, r2
 800101a:	e6fb      	b.n	8000e14 <__udivmoddi4+0x90>
 800101c:	4548      	cmp	r0, r9
 800101e:	d2a9      	bcs.n	8000f74 <__udivmoddi4+0x1f0>
 8001020:	ebb9 0802 	subs.w	r8, r9, r2
 8001024:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001028:	3b01      	subs	r3, #1
 800102a:	e7a3      	b.n	8000f74 <__udivmoddi4+0x1f0>
 800102c:	4645      	mov	r5, r8
 800102e:	e7ea      	b.n	8001006 <__udivmoddi4+0x282>
 8001030:	462b      	mov	r3, r5
 8001032:	e794      	b.n	8000f5e <__udivmoddi4+0x1da>
 8001034:	4640      	mov	r0, r8
 8001036:	e7d1      	b.n	8000fdc <__udivmoddi4+0x258>
 8001038:	46d0      	mov	r8, sl
 800103a:	e77b      	b.n	8000f34 <__udivmoddi4+0x1b0>
 800103c:	3d02      	subs	r5, #2
 800103e:	4462      	add	r2, ip
 8001040:	e732      	b.n	8000ea8 <__udivmoddi4+0x124>
 8001042:	4608      	mov	r0, r1
 8001044:	e70a      	b.n	8000e5c <__udivmoddi4+0xd8>
 8001046:	4464      	add	r4, ip
 8001048:	3802      	subs	r0, #2
 800104a:	e742      	b.n	8000ed2 <__udivmoddi4+0x14e>

0800104c <__aeabi_idiv0>:
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <setPath>:
FATFS *pfs;
DWORD fre_clust;
uint32_t total, free_space;

void setPath(char *dir, char *sensorData, uint8_t path)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	4613      	mov	r3, r2
 800105c:	71fb      	strb	r3, [r7, #7]
	sprintf(dir, "Data%d", path);
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	461a      	mov	r2, r3
 8001062:	4907      	ldr	r1, [pc, #28]	; (8001080 <setPath+0x30>)
 8001064:	68f8      	ldr	r0, [r7, #12]
 8001066:	f017 fdad 	bl	8018bc4 <siprintf>
	sprintf(sensorData, "Data%d/Data%d.csv", path, path);
 800106a:	79fa      	ldrb	r2, [r7, #7]
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	4905      	ldr	r1, [pc, #20]	; (8001084 <setPath+0x34>)
 8001070:	68b8      	ldr	r0, [r7, #8]
 8001072:	f017 fda7 	bl	8018bc4 <siprintf>

}
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	0801ccb8 	.word	0x0801ccb8
 8001084:	0801ccc0 	.word	0x0801ccc0

08001088 <createNewFile>:
void createNewFile(char *dir, char *sensorData, uint8_t *pathPtr)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
	uint8_t path = *pathPtr;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	75fb      	strb	r3, [r7, #23]
	Mount_SD("/");
 800109a:	480f      	ldr	r0, [pc, #60]	; (80010d8 <createNewFile+0x50>)
 800109c:	f000 f820 	bl	80010e0 <Mount_SD>
	Format_SD(path);
 80010a0:	7dfb      	ldrb	r3, [r7, #23]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 f846 	bl	8001134 <Format_SD>
	Create_Dir(dir);
 80010a8:	68f8      	ldr	r0, [r7, #12]
 80010aa:	f000 f95b 	bl	8001364 <Create_Dir>
	Create_File(sensorData);
 80010ae:	68b8      	ldr	r0, [r7, #8]
 80010b0:	f000 f8dc 	bl	800126c <Create_File>
	Update_File(sensorData,"FrontTravel;RearTravel;FrontPressure;RearPressure;LeftBrake;RightBrake\n");
 80010b4:	4909      	ldr	r1, [pc, #36]	; (80010dc <createNewFile+0x54>)
 80010b6:	68b8      	ldr	r0, [r7, #8]
 80010b8:	f000 f90e 	bl	80012d8 <Update_File>
	Unmount_SD("/");
 80010bc:	4806      	ldr	r0, [pc, #24]	; (80010d8 <createNewFile+0x50>)
 80010be:	f000 f825 	bl	800110c <Unmount_SD>
	(*pathPtr)++;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	3301      	adds	r3, #1
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	701a      	strb	r2, [r3, #0]
}
 80010ce:	bf00      	nop
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	0801ccd4 	.word	0x0801ccd4
 80010dc:	0801ccd8 	.word	0x0801ccd8

080010e0 <Mount_SD>:
	HAL_UART_Transmit(UART, (uint8_t*) string, strlen(string), HAL_MAX_DELAY);
#endif
}

void Mount_SD(const TCHAR *path)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&SDFatFs, path, 1);
 80010e8:	2201      	movs	r2, #1
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	4805      	ldr	r0, [pc, #20]	; (8001104 <Mount_SD+0x24>)
 80010ee:	f011 fc63 	bl	80129b8 <f_mount>
 80010f2:	4603      	mov	r3, r0
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b04      	ldr	r3, [pc, #16]	; (8001108 <Mount_SD+0x28>)
 80010f8:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
		Send_Uart("ERROR!!! in mounting SD CARD...\n\n");
	else
		Send_Uart("SD CARD mounted successfully...\n");
#endif
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000324 	.word	0x20000324
 8001108:	200009d4 	.word	0x200009d4

0800110c <Unmount_SD>:

void Unmount_SD(const TCHAR *path)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8001114:	2201      	movs	r2, #1
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	2000      	movs	r0, #0
 800111a:	f011 fc4d 	bl	80129b8 <f_mount>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	4b03      	ldr	r3, [pc, #12]	; (8001130 <Unmount_SD+0x24>)
 8001124:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
		Send_Uart("SD CARD UNMOUNTED successfully...\n\n\n");
	else
		Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
#endif
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200009d4 	.word	0x200009d4

08001134 <Format_SD>:
	return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD(uint8_t dirNumber)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b096      	sub	sp, #88	; 0x58
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
	DIR dir;
	FILINFO fno;
	char *path = pvPortMalloc(20 * sizeof(char));
 800113e:	2014      	movs	r0, #20
 8001140:	f015 fd62 	bl	8016c08 <pvPortMalloc>
 8001144:	6578      	str	r0, [r7, #84]	; 0x54
	sprintf(path, "/Data%d", dirNumber);
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	461a      	mov	r2, r3
 800114a:	4943      	ldr	r1, [pc, #268]	; (8001258 <Format_SD+0x124>)
 800114c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800114e:	f017 fd39 	bl	8018bc4 <siprintf>
	fresult = f_opendir(&dir, path);
 8001152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001156:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001158:	4618      	mov	r0, r3
 800115a:	f012 fa20 	bl	801359e <f_opendir>
 800115e:	4603      	mov	r3, r0
 8001160:	461a      	mov	r2, r3
 8001162:	4b3e      	ldr	r3, [pc, #248]	; (800125c <Format_SD+0x128>)
 8001164:	701a      	strb	r2, [r3, #0]

	if (fresult == FR_OK)
 8001166:	4b3d      	ldr	r3, [pc, #244]	; (800125c <Format_SD+0x128>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d154      	bne.n	8001218 <Format_SD+0xe4>
	{
		while (1)
		{
			fresult = f_readdir(&dir, &fno); /* Read a directory item */
 800116e:	f107 020c 	add.w	r2, r7, #12
 8001172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f012 fab4 	bl	80136e6 <f_readdir>
 800117e:	4603      	mov	r3, r0
 8001180:	461a      	mov	r2, r3
 8001182:	4b36      	ldr	r3, [pc, #216]	; (800125c <Format_SD+0x128>)
 8001184:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK || fno.fname[0] == 0)
 8001186:	4b35      	ldr	r3, [pc, #212]	; (800125c <Format_SD+0x128>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d13f      	bne.n	800120e <Format_SD+0xda>
 800118e:	7d7b      	ldrb	r3, [r7, #21]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d03c      	beq.n	800120e <Format_SD+0xda>
				break; /* Break on error or end of dir */
			if (!(strcmp(".", fno.fname)) || !(strcmp("..", fno.fname)))
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	3309      	adds	r3, #9
 800119a:	4619      	mov	r1, r3
 800119c:	4830      	ldr	r0, [pc, #192]	; (8001260 <Format_SD+0x12c>)
 800119e:	f7ff f837 	bl	8000210 <strcmp>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d02f      	beq.n	8001208 <Format_SD+0xd4>
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	3309      	adds	r3, #9
 80011ae:	4619      	mov	r1, r3
 80011b0:	482c      	ldr	r0, [pc, #176]	; (8001264 <Format_SD+0x130>)
 80011b2:	f7ff f82d 	bl	8000210 <strcmp>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d025      	beq.n	8001208 <Format_SD+0xd4>
			{
				continue;
			}

			sprintf(path, "/Data%d/%s", dirNumber, fno.fname);
 80011bc:	79fa      	ldrb	r2, [r7, #7]
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	3309      	adds	r3, #9
 80011c4:	4928      	ldr	r1, [pc, #160]	; (8001268 <Format_SD+0x134>)
 80011c6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80011c8:	f017 fcfc 	bl	8018bc4 <siprintf>
			if (fno.fattrib & AM_DIR) /* It is a directory */
 80011cc:	7d3b      	ldrb	r3, [r7, #20]
 80011ce:	f003 0310 	and.w	r3, r3, #16
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00c      	beq.n	80011f0 <Format_SD+0xbc>
			{

				fresult = Format_SD(dirNumber);
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ffab 	bl	8001134 <Format_SD>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b1e      	ldr	r3, [pc, #120]	; (800125c <Format_SD+0x128>)
 80011e4:	701a      	strb	r2, [r3, #0]
				if (fresult != FR_OK)
 80011e6:	4b1d      	ldr	r3, [pc, #116]	; (800125c <Format_SD+0x128>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d0bf      	beq.n	800116e <Format_SD+0x3a>
					break;
 80011ee:	e00e      	b.n	800120e <Format_SD+0xda>
			}
			else
			{
				fresult = f_unlink(path);
 80011f0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80011f2:	f012 fafb 	bl	80137ec <f_unlink>
 80011f6:	4603      	mov	r3, r0
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <Format_SD+0x128>)
 80011fc:	701a      	strb	r2, [r3, #0]
				if (fresult != FR_OK)
 80011fe:	4b17      	ldr	r3, [pc, #92]	; (800125c <Format_SD+0x128>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d102      	bne.n	800120c <Format_SD+0xd8>
 8001206:	e7b2      	b.n	800116e <Format_SD+0x3a>
				continue;
 8001208:	bf00      	nop
			fresult = f_readdir(&dir, &fno); /* Read a directory item */
 800120a:	e7b0      	b.n	800116e <Format_SD+0x3a>
					break;
 800120c:	bf00      	nop
			}
		}
		f_closedir(&dir);
 800120e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001212:	4618      	mov	r0, r3
 8001214:	f012 fa3c 	bl	8013690 <f_closedir>
	}

	if (fresult == FR_OK)
 8001218:	4b10      	ldr	r3, [pc, #64]	; (800125c <Format_SD+0x128>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d111      	bne.n	8001244 <Format_SD+0x110>
	{
		memset(path, 0, 20);
 8001220:	2214      	movs	r2, #20
 8001222:	2100      	movs	r1, #0
 8001224:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001226:	f017 fdf3 	bl	8018e10 <memset>
		sprintf(path, "/Data%d", dirNumber);
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	461a      	mov	r2, r3
 800122e:	490a      	ldr	r1, [pc, #40]	; (8001258 <Format_SD+0x124>)
 8001230:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001232:	f017 fcc7 	bl	8018bc4 <siprintf>
		fresult = f_unlink(path);
 8001236:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001238:	f012 fad8 	bl	80137ec <f_unlink>
 800123c:	4603      	mov	r3, r0
 800123e:	461a      	mov	r2, r3
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <Format_SD+0x128>)
 8001242:	701a      	strb	r2, [r3, #0]
	}

	vPortFree(path);
 8001244:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001246:	f015 fdab 	bl	8016da0 <vPortFree>
	return (fresult);
 800124a:	4b04      	ldr	r3, [pc, #16]	; (800125c <Format_SD+0x128>)
 800124c:	781b      	ldrb	r3, [r3, #0]
}
 800124e:	4618      	mov	r0, r3
 8001250:	3758      	adds	r7, #88	; 0x58
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	0801cd34 	.word	0x0801cd34
 800125c:	200009d4 	.word	0x200009d4
 8001260:	0801cd3c 	.word	0x0801cd3c
 8001264:	0801cd40 	.word	0x0801cd40
 8001268:	0801cd44 	.word	0x0801cd44

0800126c <Create_File>:
		return fresult;
	}
}

FRESULT Create_File(char *name)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	fresult = f_stat(name, &fno);
 8001274:	4915      	ldr	r1, [pc, #84]	; (80012cc <Create_File+0x60>)
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f012 fa78 	bl	801376c <f_stat>
 800127c:	4603      	mov	r3, r0
 800127e:	461a      	mov	r2, r3
 8001280:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <Create_File+0x64>)
 8001282:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <Create_File+0x64>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d102      	bne.n	8001292 <Create_File+0x26>
		sprintf(buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",
				name);
		Send_Uart(buf);
		vPortFree(buf);
#endif
		return fresult;
 800128c:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <Create_File+0x64>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	e018      	b.n	80012c4 <Create_File+0x58>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 8001292:	220b      	movs	r2, #11
 8001294:	6879      	ldr	r1, [r7, #4]
 8001296:	480f      	ldr	r0, [pc, #60]	; (80012d4 <Create_File+0x68>)
 8001298:	f011 fbf2 	bl	8012a80 <f_open>
 800129c:	4603      	mov	r3, r0
 800129e:	461a      	mov	r2, r3
 80012a0:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <Create_File+0x64>)
 80012a2:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80012a4:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <Create_File+0x64>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d002      	beq.n	80012b2 <Create_File+0x46>
			sprintf(buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult,
					name);
			Send_Uart(buf);
			vPortFree(buf);
#endif
			return fresult;
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <Create_File+0x64>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	e008      	b.n	80012c4 <Create_File+0x58>
			Send_Uart(buf);
			vPortFree(buf);
#endif
		}

		fresult = f_close(&fil);
 80012b2:	4808      	ldr	r0, [pc, #32]	; (80012d4 <Create_File+0x68>)
 80012b4:	f012 f944 	bl	8013540 <f_close>
 80012b8:	4603      	mov	r3, r0
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <Create_File+0x64>)
 80012be:	701a      	strb	r2, [r3, #0]
			Send_Uart(buf);
			vPortFree(buf);
#endif
		}
	}
	return fresult;
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <Create_File+0x64>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	200009bc 	.word	0x200009bc
 80012d0:	200009d4 	.word	0x200009d4
 80012d4:	20000558 	.word	0x20000558

080012d8 <Update_File>:

FRESULT Update_File(char *name, char *data)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat(name, &fno);
 80012e2:	491c      	ldr	r1, [pc, #112]	; (8001354 <Update_File+0x7c>)
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f012 fa41 	bl	801376c <f_stat>
 80012ea:	4603      	mov	r3, r0
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <Update_File+0x80>)
 80012f0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80012f2:	4b19      	ldr	r3, [pc, #100]	; (8001358 <Update_File+0x80>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d002      	beq.n	8001300 <Update_File+0x28>
		char *buf = pvPortMalloc(100 * sizeof(char));
		sprintf(buf, "ERROR!!! *%s* does not exists\n\n", name);
		Send_Uart(buf);
		vPortFree(buf);
#endif
		return fresult;
 80012fa:	4b17      	ldr	r3, [pc, #92]	; (8001358 <Update_File+0x80>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	e025      	b.n	800134c <Update_File+0x74>
	}

	else
	{
		/* Create a file with read write access and open it */
		fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 8001300:	2232      	movs	r2, #50	; 0x32
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	4815      	ldr	r0, [pc, #84]	; (800135c <Update_File+0x84>)
 8001306:	f011 fbbb 	bl	8012a80 <f_open>
 800130a:	4603      	mov	r3, r0
 800130c:	461a      	mov	r2, r3
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <Update_File+0x80>)
 8001310:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <Update_File+0x80>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d002      	beq.n	8001320 <Update_File+0x48>
			sprintf(buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult,
					name);
			Send_Uart(buf);
			vPortFree(buf);
#endif
			return fresult;
 800131a:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <Update_File+0x80>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	e015      	b.n	800134c <Update_File+0x74>
		}

		/* Writing text */
		fresult = f_write(&fil, data, strlen(data), &bw);
 8001320:	6838      	ldr	r0, [r7, #0]
 8001322:	f7fe ffd5 	bl	80002d0 <strlen>
 8001326:	4602      	mov	r2, r0
 8001328:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <Update_File+0x88>)
 800132a:	6839      	ldr	r1, [r7, #0]
 800132c:	480b      	ldr	r0, [pc, #44]	; (800135c <Update_File+0x84>)
 800132e:	f011 feda 	bl	80130e6 <f_write>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <Update_File+0x80>)
 8001338:	701a      	strb	r2, [r3, #0]
			vPortFree(buf);
#endif
		}

		/* Close file */
		fresult = f_close(&fil);
 800133a:	4808      	ldr	r0, [pc, #32]	; (800135c <Update_File+0x84>)
 800133c:	f012 f900 	bl	8013540 <f_close>
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	4b04      	ldr	r3, [pc, #16]	; (8001358 <Update_File+0x80>)
 8001346:	701a      	strb	r2, [r3, #0]
			Send_Uart(buf);
			vPortFree(buf);
#endif
		}
	}
	return fresult;
 8001348:	4b03      	ldr	r3, [pc, #12]	; (8001358 <Update_File+0x80>)
 800134a:	781b      	ldrb	r3, [r3, #0]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	200009bc 	.word	0x200009bc
 8001358:	200009d4 	.word	0x200009d4
 800135c:	20000558 	.word	0x20000558
 8001360:	200009d8 	.word	0x200009d8

08001364 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir(char *name)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	fresult = f_mkdir(name);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f012 faef 	bl	8013950 <f_mkdir>
 8001372:	4603      	mov	r3, r0
 8001374:	461a      	mov	r2, r3
 8001376:	4b04      	ldr	r3, [pc, #16]	; (8001388 <Create_Dir+0x24>)
 8001378:	701a      	strb	r2, [r3, #0]
				name);
		Send_Uart(buf);
		vPortFree(buf);
#endif
	}
	return fresult;
 800137a:	4b03      	ldr	r3, [pc, #12]	; (8001388 <Create_Dir+0x24>)
 800137c:	781b      	ldrb	r3, [r3, #0]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200009d4 	.word	0x200009d4

0800138c <sendDataSD>:
	Send_Uart(buf);
	vPortFree(buf);
#endif
}
void sendDataSD(char *file, volatile int16_t *sensor)
{
 800138c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138e:	b089      	sub	sp, #36	; 0x24
 8001390:	af04      	add	r7, sp, #16
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
	char *buffer = pvPortMalloc(
 8001396:	f44f 7028 	mov.w	r0, #672	; 0x2a0
 800139a:	f015 fc35 	bl	8016c08 <pvPortMalloc>
 800139e:	60b8      	str	r0, [r7, #8]
			(7 * TRAVEL_SENSOR_BUFFER_SIZE / 2) * sizeof(char));
	if (NULL != buffer)
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d059      	beq.n	800145a <sendDataSD+0xce>
	{
		memset(buffer, 0, (7 * TRAVEL_SENSOR_BUFFER_SIZE / 2));
 80013a6:	f44f 7228 	mov.w	r2, #672	; 0x2a0
 80013aa:	2100      	movs	r1, #0
 80013ac:	68b8      	ldr	r0, [r7, #8]
 80013ae:	f017 fd2f 	bl	8018e10 <memset>
		for (int i = 0; i < (TRAVEL_SENSOR_BUFFER_SIZE) / 2; i +=
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	e03f      	b.n	8001438 <sendDataSD+0xac>
				NUMBER_OF_SENSORS)
		{
			sprintf(buffer + strlen(buffer), "%d;%d;%d;%d;%d;%d\n",
 80013b8:	68b8      	ldr	r0, [r7, #8]
 80013ba:	f7fe ff89 	bl	80002d0 <strlen>
 80013be:	4602      	mov	r2, r0
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	1898      	adds	r0, r3, r2
					sensor[i + FRONT_TRAVEL_BUFFER_POSITION],
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	4413      	add	r3, r2
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	b21b      	sxth	r3, r3
			sprintf(buffer + strlen(buffer), "%d;%d;%d;%d;%d;%d\n",
 80013d0:	461e      	mov	r6, r3
					sensor[i + REAR_TRAVEL_BUFFER_POSITION],
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	3301      	adds	r3, #1
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	4413      	add	r3, r2
 80013dc:	881b      	ldrh	r3, [r3, #0]
 80013de:	b21b      	sxth	r3, r3
			sprintf(buffer + strlen(buffer), "%d;%d;%d;%d;%d;%d\n",
 80013e0:	469c      	mov	ip, r3
					sensor[i + FRONT_PRESSURE_BUFFER_POSITION],
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	3302      	adds	r3, #2
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	881b      	ldrh	r3, [r3, #0]
 80013ee:	b21b      	sxth	r3, r3
			sprintf(buffer + strlen(buffer), "%d;%d;%d;%d;%d;%d\n",
 80013f0:	4619      	mov	r1, r3
					sensor[i + REAR_PRESSURE_BUFFER_POSITION],
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	3303      	adds	r3, #3
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	4413      	add	r3, r2
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	b21b      	sxth	r3, r3
			sprintf(buffer + strlen(buffer), "%d;%d;%d;%d;%d;%d\n",
 8001400:	461c      	mov	r4, r3
					sensor[i + LEFT_BRAKE_POSITION],
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3304      	adds	r3, #4
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	4413      	add	r3, r2
 800140c:	881b      	ldrh	r3, [r3, #0]
 800140e:	b21b      	sxth	r3, r3
			sprintf(buffer + strlen(buffer), "%d;%d;%d;%d;%d;%d\n",
 8001410:	461d      	mov	r5, r3
					sensor[i + RIGHT_BRAKE_POSITION]);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	3305      	adds	r3, #5
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	4413      	add	r3, r2
 800141c:	881b      	ldrh	r3, [r3, #0]
 800141e:	b21b      	sxth	r3, r3
			sprintf(buffer + strlen(buffer), "%d;%d;%d;%d;%d;%d\n",
 8001420:	9303      	str	r3, [sp, #12]
 8001422:	9502      	str	r5, [sp, #8]
 8001424:	9401      	str	r4, [sp, #4]
 8001426:	9100      	str	r1, [sp, #0]
 8001428:	4663      	mov	r3, ip
 800142a:	4632      	mov	r2, r6
 800142c:	490e      	ldr	r1, [pc, #56]	; (8001468 <sendDataSD+0xdc>)
 800142e:	f017 fbc9 	bl	8018bc4 <siprintf>
		for (int i = 0; i < (TRAVEL_SENSOR_BUFFER_SIZE) / 2; i +=
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	3306      	adds	r3, #6
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2b5f      	cmp	r3, #95	; 0x5f
 800143c:	d9bc      	bls.n	80013b8 <sendDataSD+0x2c>
		}
		Mount_SD("/");
 800143e:	480b      	ldr	r0, [pc, #44]	; (800146c <sendDataSD+0xe0>)
 8001440:	f7ff fe4e 	bl	80010e0 <Mount_SD>
		Update_File(file, buffer);
 8001444:	68b9      	ldr	r1, [r7, #8]
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff ff46 	bl	80012d8 <Update_File>
		Unmount_SD("/");
 800144c:	4807      	ldr	r0, [pc, #28]	; (800146c <sendDataSD+0xe0>)
 800144e:	f7ff fe5d 	bl	800110c <Unmount_SD>
		vPortFree(buffer);
 8001452:	68b8      	ldr	r0, [r7, #8]
 8001454:	f015 fca4 	bl	8016da0 <vPortFree>
	else
	{
		puts("Wrong alocation pressureTravel Buffer SD Card");
	}

}
 8001458:	e002      	b.n	8001460 <sendDataSD+0xd4>
		puts("Wrong alocation pressureTravel Buffer SD Card");
 800145a:	4805      	ldr	r0, [pc, #20]	; (8001470 <sendDataSD+0xe4>)
 800145c:	f017 fbaa 	bl	8018bb4 <puts>
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001468:	0801cd54 	.word	0x0801cd54
 800146c:	0801ccd4 	.word	0x0801ccd4
 8001470:	0801cd68 	.word	0x0801cd68

08001474 <readCalibrationData>:

int readCalibrationData(calibration_t *calibration)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b096      	sub	sp, #88	; 0x58
 8001478:	af04      	add	r7, sp, #16
 800147a:	6078      	str	r0, [r7, #4]


	Mount_SD("/");
 800147c:	4837      	ldr	r0, [pc, #220]	; (800155c <readCalibrationData+0xe8>)
 800147e:	f7ff fe2f 	bl	80010e0 <Mount_SD>
	resultCalibration = f_open(&fileCalibration, CONFIG_FILE_NAME, FA_READ);
 8001482:	2201      	movs	r2, #1
 8001484:	4936      	ldr	r1, [pc, #216]	; (8001560 <readCalibrationData+0xec>)
 8001486:	4837      	ldr	r0, [pc, #220]	; (8001564 <readCalibrationData+0xf0>)
 8001488:	f011 fafa 	bl	8012a80 <f_open>
 800148c:	4603      	mov	r3, r0
 800148e:	461a      	mov	r2, r3
 8001490:	4b35      	ldr	r3, [pc, #212]	; (8001568 <readCalibrationData+0xf4>)
 8001492:	701a      	strb	r2, [r3, #0]
	if (resultCalibration != FR_OK)
 8001494:	4b34      	ldr	r3, [pc, #208]	; (8001568 <readCalibrationData+0xf4>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d005      	beq.n	80014a8 <readCalibrationData+0x34>
	{
		printf("Nie można otworzyć pliku do odczytu\n");
 800149c:	4833      	ldr	r0, [pc, #204]	; (800156c <readCalibrationData+0xf8>)
 800149e:	f017 fb89 	bl	8018bb4 <puts>
		return -1;
 80014a2:	f04f 33ff 	mov.w	r3, #4294967295
 80014a6:	e054      	b.n	8001552 <readCalibrationData+0xde>
	}

	char *buffer = (char*) calloc(160, sizeof(char));
 80014a8:	2101      	movs	r1, #1
 80014aa:	20a0      	movs	r0, #160	; 0xa0
 80014ac:	f016 fb1c 	bl	8017ae8 <calloc>
 80014b0:	4603      	mov	r3, r0
 80014b2:	647b      	str	r3, [r7, #68]	; 0x44
	if (buffer == NULL)
 80014b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10a      	bne.n	80014d0 <readCalibrationData+0x5c>
	{
		printf("Błąd alokacji pamięci dla bufora.\n");
 80014ba:	482d      	ldr	r0, [pc, #180]	; (8001570 <readCalibrationData+0xfc>)
 80014bc:	f017 fb7a 	bl	8018bb4 <puts>
		return 1;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e046      	b.n	8001552 <readCalibrationData+0xde>

	char line[30];

	while (f_gets(line, sizeof(line), &fileCalibration) != NULL)
	{
		strcat(buffer, line);
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	4619      	mov	r1, r3
 80014ca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80014cc:	f017 fca8 	bl	8018e20 <strcat>
	while (f_gets(line, sizeof(line), &fileCalibration) != NULL)
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	4a23      	ldr	r2, [pc, #140]	; (8001564 <readCalibrationData+0xf0>)
 80014d6:	211e      	movs	r1, #30
 80014d8:	4618      	mov	r0, r3
 80014da:	f012 fb47 	bl	8013b6c <f_gets>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1ef      	bne.n	80014c4 <readCalibrationData+0x50>
	}
	sscanf(buffer,
 80014e4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80014e8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80014ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014f0:	9303      	str	r3, [sp, #12]
 80014f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014f6:	9302      	str	r3, [sp, #8]
 80014f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014fc:	9301      	str	r3, [sp, #4]
 80014fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	460b      	mov	r3, r1
 8001506:	491b      	ldr	r1, [pc, #108]	; (8001574 <readCalibrationData+0x100>)
 8001508:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800150a:	f017 fb7b 	bl	8018c04 <siscanf>
			"Front travel sensor: %d\nRear travel sensor: %d\nFront pressure sensor: %d\nRear pressure sensor: %d\nLeft brake sensor: %d\nRight brake sensor: %d",
			&frontTravelInt, &rearTravelInt, &frontPressureInt,
			&rearPressureInt, &leftBrakeInt, &rightBrakeInt);
	free(buffer);
 800150e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001510:	f016 fb10 	bl	8017b34 <free>

	f_close(&fileCalibration);
 8001514:	4813      	ldr	r0, [pc, #76]	; (8001564 <readCalibrationData+0xf0>)
 8001516:	f012 f813 	bl	8013540 <f_close>

	// Konwertuj i przypisz do struktury calibration
	calibration->frontTravelSensor = frontTravelInt;
 800151a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800151c:	b21a      	sxth	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	801a      	strh	r2, [r3, #0]
	calibration->rearTravelSensor = rearTravelInt;
 8001522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001524:	b21a      	sxth	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	805a      	strh	r2, [r3, #2]
	calibration->frontPressureSensor = frontPressureInt;
 800152a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800152c:	b21a      	sxth	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	809a      	strh	r2, [r3, #4]
	calibration->rearPressureSensor = rearPressureInt;
 8001532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001534:	b21a      	sxth	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	80da      	strh	r2, [r3, #6]
	calibration->leftBrakeSensor = leftBrakeInt;
 800153a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800153c:	b21a      	sxth	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	811a      	strh	r2, [r3, #8]
	calibration->rightBrakeSensor = rightBrakeInt;
 8001542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001544:	b21a      	sxth	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	815a      	strh	r2, [r3, #10]
	Unmount_SD("/");
 800154a:	4804      	ldr	r0, [pc, #16]	; (800155c <readCalibrationData+0xe8>)
 800154c:	f7ff fdde 	bl	800110c <Unmount_SD>

	return 0;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3748      	adds	r7, #72	; 0x48
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	0801ccd4 	.word	0x0801ccd4
 8001560:	0801cd98 	.word	0x0801cd98
 8001564:	20000788 	.word	0x20000788
 8001568:	200009b8 	.word	0x200009b8
 800156c:	0801cda4 	.word	0x0801cda4
 8001570:	0801cdcc 	.word	0x0801cdcc
 8001574:	0801cdf4 	.word	0x0801cdf4

08001578 <writeCalibrationData>:

int writeCalibrationData(const calibration_t *calibration)
{
 8001578:	b5b0      	push	{r4, r5, r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af04      	add	r7, sp, #16
 800157e:	6078      	str	r0, [r7, #4]

	Mount_SD("/");
 8001580:	4820      	ldr	r0, [pc, #128]	; (8001604 <writeCalibrationData+0x8c>)
 8001582:	f7ff fdad 	bl	80010e0 <Mount_SD>
	resultCalibration = f_open(&fileCalibration, CONFIG_FILE_NAME, FA_WRITE | FA_CREATE_ALWAYS);
 8001586:	220a      	movs	r2, #10
 8001588:	491f      	ldr	r1, [pc, #124]	; (8001608 <writeCalibrationData+0x90>)
 800158a:	4820      	ldr	r0, [pc, #128]	; (800160c <writeCalibrationData+0x94>)
 800158c:	f011 fa78 	bl	8012a80 <f_open>
 8001590:	4603      	mov	r3, r0
 8001592:	461a      	mov	r2, r3
 8001594:	4b1e      	ldr	r3, [pc, #120]	; (8001610 <writeCalibrationData+0x98>)
 8001596:	701a      	strb	r2, [r3, #0]
	if (resultCalibration != FR_OK)
 8001598:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <writeCalibrationData+0x98>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d005      	beq.n	80015ac <writeCalibrationData+0x34>
	{
		printf("Nie można otworzyć pliku do zapisu\n");
 80015a0:	481c      	ldr	r0, [pc, #112]	; (8001614 <writeCalibrationData+0x9c>)
 80015a2:	f017 fb07 	bl	8018bb4 <puts>
		return -1;
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295
 80015aa:	e027      	b.n	80015fc <writeCalibrationData+0x84>
	}

	f_printf(&fileCalibration,
			"Front travel sensor: %d\nRear travel sensor: %d\nFront pressure sensor: %d\nRear pressure sensor: %d\nLeft brake sensor: %d\nRight brake sensor: %d\n",
			(int16_t) calibration->frontTravelSensor,
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f9b3 3000 	ldrsh.w	r3, [r3]
	f_printf(&fileCalibration,
 80015b2:	461c      	mov	r4, r3
			(int16_t) calibration->rearTravelSensor,
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	f_printf(&fileCalibration,
 80015ba:	461d      	mov	r5, r3
			(int16_t) calibration->frontPressureSensor,
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	f_printf(&fileCalibration,
 80015c2:	461a      	mov	r2, r3
			(int16_t) calibration->rearPressureSensor,
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
	f_printf(&fileCalibration,
 80015ca:	4619      	mov	r1, r3
			(int16_t) calibration->leftBrakeSensor,
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
	f_printf(&fileCalibration,
 80015d2:	4618      	mov	r0, r3
			(int16_t) calibration->rightBrakeSensor);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
	f_printf(&fileCalibration,
 80015da:	9303      	str	r3, [sp, #12]
 80015dc:	9002      	str	r0, [sp, #8]
 80015de:	9101      	str	r1, [sp, #4]
 80015e0:	9200      	str	r2, [sp, #0]
 80015e2:	462b      	mov	r3, r5
 80015e4:	4622      	mov	r2, r4
 80015e6:	490c      	ldr	r1, [pc, #48]	; (8001618 <writeCalibrationData+0xa0>)
 80015e8:	4808      	ldr	r0, [pc, #32]	; (800160c <writeCalibrationData+0x94>)
 80015ea:	f012 fb73 	bl	8013cd4 <f_printf>

	f_close(&fileCalibration);
 80015ee:	4807      	ldr	r0, [pc, #28]	; (800160c <writeCalibrationData+0x94>)
 80015f0:	f011 ffa6 	bl	8013540 <f_close>
	Unmount_SD("/");
 80015f4:	4803      	ldr	r0, [pc, #12]	; (8001604 <writeCalibrationData+0x8c>)
 80015f6:	f7ff fd89 	bl	800110c <Unmount_SD>

	return 0;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bdb0      	pop	{r4, r5, r7, pc}
 8001604:	0801ccd4 	.word	0x0801ccd4
 8001608:	0801cd98 	.word	0x0801cd98
 800160c:	20000788 	.word	0x20000788
 8001610:	200009b8 	.word	0x200009b8
 8001614:	0801ce84 	.word	0x0801ce84
 8001618:	0801ceac 	.word	0x0801ceac

0800161c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001622:	463b      	mov	r3, r7
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800162e:	4b21      	ldr	r3, [pc, #132]	; (80016b4 <MX_ADC1_Init+0x98>)
 8001630:	4a21      	ldr	r2, [pc, #132]	; (80016b8 <MX_ADC1_Init+0x9c>)
 8001632:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001634:	4b1f      	ldr	r3, [pc, #124]	; (80016b4 <MX_ADC1_Init+0x98>)
 8001636:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800163a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800163c:	4b1d      	ldr	r3, [pc, #116]	; (80016b4 <MX_ADC1_Init+0x98>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001642:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <MX_ADC1_Init+0x98>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001648:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <MX_ADC1_Init+0x98>)
 800164a:	2200      	movs	r2, #0
 800164c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800164e:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <MX_ADC1_Init+0x98>)
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001656:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <MX_ADC1_Init+0x98>)
 8001658:	2200      	movs	r2, #0
 800165a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800165c:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <MX_ADC1_Init+0x98>)
 800165e:	4a17      	ldr	r2, [pc, #92]	; (80016bc <MX_ADC1_Init+0xa0>)
 8001660:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001662:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <MX_ADC1_Init+0x98>)
 8001664:	2200      	movs	r2, #0
 8001666:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <MX_ADC1_Init+0x98>)
 800166a:	2201      	movs	r2, #1
 800166c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800166e:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <MX_ADC1_Init+0x98>)
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001676:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <MX_ADC1_Init+0x98>)
 8001678:	2201      	movs	r2, #1
 800167a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800167c:	480d      	ldr	r0, [pc, #52]	; (80016b4 <MX_ADC1_Init+0x98>)
 800167e:	f002 fb45 	bl	8003d0c <HAL_ADC_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001688:	f000 fe90 	bl	80023ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800168c:	2304      	movs	r3, #4
 800168e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001690:	2301      	movs	r3, #1
 8001692:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001694:	2300      	movs	r3, #0
 8001696:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001698:	463b      	mov	r3, r7
 800169a:	4619      	mov	r1, r3
 800169c:	4805      	ldr	r0, [pc, #20]	; (80016b4 <MX_ADC1_Init+0x98>)
 800169e:	f002 fced 	bl	800407c <HAL_ADC_ConfigChannel>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80016a8:	f000 fe80 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016ac:	bf00      	nop
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	200009dc 	.word	0x200009dc
 80016b8:	40012000 	.word	0x40012000
 80016bc:	0f000001 	.word	0x0f000001

080016c0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016c6:	463b      	mov	r3, r7
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80016d2:	4b45      	ldr	r3, [pc, #276]	; (80017e8 <MX_ADC2_Init+0x128>)
 80016d4:	4a45      	ldr	r2, [pc, #276]	; (80017ec <MX_ADC2_Init+0x12c>)
 80016d6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016d8:	4b43      	ldr	r3, [pc, #268]	; (80017e8 <MX_ADC2_Init+0x128>)
 80016da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016de:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80016e0:	4b41      	ldr	r3, [pc, #260]	; (80017e8 <MX_ADC2_Init+0x128>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80016e6:	4b40      	ldr	r3, [pc, #256]	; (80017e8 <MX_ADC2_Init+0x128>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80016ec:	4b3e      	ldr	r3, [pc, #248]	; (80017e8 <MX_ADC2_Init+0x128>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80016f2:	4b3d      	ldr	r3, [pc, #244]	; (80017e8 <MX_ADC2_Init+0x128>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80016fa:	4b3b      	ldr	r3, [pc, #236]	; (80017e8 <MX_ADC2_Init+0x128>)
 80016fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001700:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001702:	4b39      	ldr	r3, [pc, #228]	; (80017e8 <MX_ADC2_Init+0x128>)
 8001704:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001708:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800170a:	4b37      	ldr	r3, [pc, #220]	; (80017e8 <MX_ADC2_Init+0x128>)
 800170c:	2200      	movs	r2, #0
 800170e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 6;
 8001710:	4b35      	ldr	r3, [pc, #212]	; (80017e8 <MX_ADC2_Init+0x128>)
 8001712:	2206      	movs	r2, #6
 8001714:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001716:	4b34      	ldr	r3, [pc, #208]	; (80017e8 <MX_ADC2_Init+0x128>)
 8001718:	2201      	movs	r2, #1
 800171a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800171e:	4b32      	ldr	r3, [pc, #200]	; (80017e8 <MX_ADC2_Init+0x128>)
 8001720:	2201      	movs	r2, #1
 8001722:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001724:	4830      	ldr	r0, [pc, #192]	; (80017e8 <MX_ADC2_Init+0x128>)
 8001726:	f002 faf1 	bl	8003d0c <HAL_ADC_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8001730:	f000 fe3c 	bl	80023ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001734:	230c      	movs	r3, #12
 8001736:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001738:	2301      	movs	r3, #1
 800173a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800173c:	2301      	movs	r3, #1
 800173e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001740:	463b      	mov	r3, r7
 8001742:	4619      	mov	r1, r3
 8001744:	4828      	ldr	r0, [pc, #160]	; (80017e8 <MX_ADC2_Init+0x128>)
 8001746:	f002 fc99 	bl	800407c <HAL_ADC_ConfigChannel>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8001750:	f000 fe2c 	bl	80023ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001754:	230d      	movs	r3, #13
 8001756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001758:	2302      	movs	r3, #2
 800175a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800175c:	463b      	mov	r3, r7
 800175e:	4619      	mov	r1, r3
 8001760:	4821      	ldr	r0, [pc, #132]	; (80017e8 <MX_ADC2_Init+0x128>)
 8001762:	f002 fc8b 	bl	800407c <HAL_ADC_ConfigChannel>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 800176c:	f000 fe1e 	bl	80023ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001770:	2301      	movs	r3, #1
 8001772:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001774:	2303      	movs	r3, #3
 8001776:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001778:	463b      	mov	r3, r7
 800177a:	4619      	mov	r1, r3
 800177c:	481a      	ldr	r0, [pc, #104]	; (80017e8 <MX_ADC2_Init+0x128>)
 800177e:	f002 fc7d 	bl	800407c <HAL_ADC_ConfigChannel>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 8001788:	f000 fe10 	bl	80023ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800178c:	2302      	movs	r3, #2
 800178e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001790:	2304      	movs	r3, #4
 8001792:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001794:	463b      	mov	r3, r7
 8001796:	4619      	mov	r1, r3
 8001798:	4813      	ldr	r0, [pc, #76]	; (80017e8 <MX_ADC2_Init+0x128>)
 800179a:	f002 fc6f 	bl	800407c <HAL_ADC_ConfigChannel>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_ADC2_Init+0xe8>
  {
    Error_Handler();
 80017a4:	f000 fe02 	bl	80023ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80017a8:	230b      	movs	r3, #11
 80017aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80017ac:	2305      	movs	r3, #5
 80017ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017b0:	463b      	mov	r3, r7
 80017b2:	4619      	mov	r1, r3
 80017b4:	480c      	ldr	r0, [pc, #48]	; (80017e8 <MX_ADC2_Init+0x128>)
 80017b6:	f002 fc61 	bl	800407c <HAL_ADC_ConfigChannel>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_ADC2_Init+0x104>
  {
    Error_Handler();
 80017c0:	f000 fdf4 	bl	80023ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80017c4:	230a      	movs	r3, #10
 80017c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80017c8:	2306      	movs	r3, #6
 80017ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017cc:	463b      	mov	r3, r7
 80017ce:	4619      	mov	r1, r3
 80017d0:	4805      	ldr	r0, [pc, #20]	; (80017e8 <MX_ADC2_Init+0x128>)
 80017d2:	f002 fc53 	bl	800407c <HAL_ADC_ConfigChannel>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_ADC2_Init+0x120>
  {
    Error_Handler();
 80017dc:	f000 fde6 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000a24 	.word	0x20000a24
 80017ec:	40012100 	.word	0x40012100

080017f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08c      	sub	sp, #48	; 0x30
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	f107 031c 	add.w	r3, r7, #28
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a53      	ldr	r2, [pc, #332]	; (800195c <HAL_ADC_MspInit+0x16c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d128      	bne.n	8001864 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	61bb      	str	r3, [r7, #24]
 8001816:	4b52      	ldr	r3, [pc, #328]	; (8001960 <HAL_ADC_MspInit+0x170>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	4a51      	ldr	r2, [pc, #324]	; (8001960 <HAL_ADC_MspInit+0x170>)
 800181c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001820:	6453      	str	r3, [r2, #68]	; 0x44
 8001822:	4b4f      	ldr	r3, [pc, #316]	; (8001960 <HAL_ADC_MspInit+0x170>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182a:	61bb      	str	r3, [r7, #24]
 800182c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	4b4b      	ldr	r3, [pc, #300]	; (8001960 <HAL_ADC_MspInit+0x170>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a4a      	ldr	r2, [pc, #296]	; (8001960 <HAL_ADC_MspInit+0x170>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b48      	ldr	r3, [pc, #288]	; (8001960 <HAL_ADC_MspInit+0x170>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = BATTERY_LEVEL_Pin;
 800184a:	2310      	movs	r3, #16
 800184c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800184e:	2303      	movs	r3, #3
 8001850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BATTERY_LEVEL_GPIO_Port, &GPIO_InitStruct);
 8001856:	f107 031c 	add.w	r3, r7, #28
 800185a:	4619      	mov	r1, r3
 800185c:	4841      	ldr	r0, [pc, #260]	; (8001964 <HAL_ADC_MspInit+0x174>)
 800185e:	f003 fbad 	bl	8004fbc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001862:	e077      	b.n	8001954 <HAL_ADC_MspInit+0x164>
  else if(adcHandle->Instance==ADC2)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a3f      	ldr	r2, [pc, #252]	; (8001968 <HAL_ADC_MspInit+0x178>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d172      	bne.n	8001954 <HAL_ADC_MspInit+0x164>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	4b3b      	ldr	r3, [pc, #236]	; (8001960 <HAL_ADC_MspInit+0x170>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	4a3a      	ldr	r2, [pc, #232]	; (8001960 <HAL_ADC_MspInit+0x170>)
 8001878:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800187c:	6453      	str	r3, [r2, #68]	; 0x44
 800187e:	4b38      	ldr	r3, [pc, #224]	; (8001960 <HAL_ADC_MspInit+0x170>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	4b34      	ldr	r3, [pc, #208]	; (8001960 <HAL_ADC_MspInit+0x170>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	4a33      	ldr	r2, [pc, #204]	; (8001960 <HAL_ADC_MspInit+0x170>)
 8001894:	f043 0304 	orr.w	r3, r3, #4
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b31      	ldr	r3, [pc, #196]	; (8001960 <HAL_ADC_MspInit+0x170>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	4b2d      	ldr	r3, [pc, #180]	; (8001960 <HAL_ADC_MspInit+0x170>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a2c      	ldr	r2, [pc, #176]	; (8001960 <HAL_ADC_MspInit+0x170>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b2a      	ldr	r3, [pc, #168]	; (8001960 <HAL_ADC_MspInit+0x170>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BRAKE_SENSOR_RIGHT_Pin|BRAKE_SENSOR_LEFT_Pin|TRAVEL_SENSOR_FRONT_Pin|TRAVEL_SENSOR_REAR_Pin;
 80018c2:	230f      	movs	r3, #15
 80018c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018c6:	2303      	movs	r3, #3
 80018c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ce:	f107 031c 	add.w	r3, r7, #28
 80018d2:	4619      	mov	r1, r3
 80018d4:	4825      	ldr	r0, [pc, #148]	; (800196c <HAL_ADC_MspInit+0x17c>)
 80018d6:	f003 fb71 	bl	8004fbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PRESSURE_SENSOR_FRONT_Pin|PRESSURE_SENSOR_REAR_Pin;
 80018da:	2306      	movs	r3, #6
 80018dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018de:	2303      	movs	r3, #3
 80018e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e6:	f107 031c 	add.w	r3, r7, #28
 80018ea:	4619      	mov	r1, r3
 80018ec:	481d      	ldr	r0, [pc, #116]	; (8001964 <HAL_ADC_MspInit+0x174>)
 80018ee:	f003 fb65 	bl	8004fbc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80018f2:	4b1f      	ldr	r3, [pc, #124]	; (8001970 <HAL_ADC_MspInit+0x180>)
 80018f4:	4a1f      	ldr	r2, [pc, #124]	; (8001974 <HAL_ADC_MspInit+0x184>)
 80018f6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80018f8:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <HAL_ADC_MspInit+0x180>)
 80018fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018fe:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001900:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <HAL_ADC_MspInit+0x180>)
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001906:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <HAL_ADC_MspInit+0x180>)
 8001908:	2200      	movs	r2, #0
 800190a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800190c:	4b18      	ldr	r3, [pc, #96]	; (8001970 <HAL_ADC_MspInit+0x180>)
 800190e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001912:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001914:	4b16      	ldr	r3, [pc, #88]	; (8001970 <HAL_ADC_MspInit+0x180>)
 8001916:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800191a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800191c:	4b14      	ldr	r3, [pc, #80]	; (8001970 <HAL_ADC_MspInit+0x180>)
 800191e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001922:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_ADC_MspInit+0x180>)
 8001926:	f44f 7280 	mov.w	r2, #256	; 0x100
 800192a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800192c:	4b10      	ldr	r3, [pc, #64]	; (8001970 <HAL_ADC_MspInit+0x180>)
 800192e:	2200      	movs	r2, #0
 8001930:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001932:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <HAL_ADC_MspInit+0x180>)
 8001934:	2200      	movs	r2, #0
 8001936:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001938:	480d      	ldr	r0, [pc, #52]	; (8001970 <HAL_ADC_MspInit+0x180>)
 800193a:	f002 ff31 	bl	80047a0 <HAL_DMA_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <HAL_ADC_MspInit+0x158>
      Error_Handler();
 8001944:	f000 fd32 	bl	80023ac <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a09      	ldr	r2, [pc, #36]	; (8001970 <HAL_ADC_MspInit+0x180>)
 800194c:	639a      	str	r2, [r3, #56]	; 0x38
 800194e:	4a08      	ldr	r2, [pc, #32]	; (8001970 <HAL_ADC_MspInit+0x180>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001954:	bf00      	nop
 8001956:	3730      	adds	r7, #48	; 0x30
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40012000 	.word	0x40012000
 8001960:	40023800 	.word	0x40023800
 8001964:	40020000 	.word	0x40020000
 8001968:	40012100 	.word	0x40012100
 800196c:	40020800 	.word	0x40020800
 8001970:	20000a6c 	.word	0x20000a6c
 8001974:	40026440 	.word	0x40026440

08001978 <readButton>:
/******************************************************************************
 * Function Definitions
 *******************************************************************************/

button_t readButton(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	807b      	strh	r3, [r7, #2]
	button_t button = BUTTON_SNA;
 8001984:	2304      	movs	r3, #4
 8001986:	73fb      	strb	r3, [r7, #15]
	static uint8_t buttonPressedCounter = 0;
	while (GPIO_PIN_RESET == HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)
 8001988:	e01b      	b.n	80019c2 <readButton+0x4a>
			&& (BUTTON_PRESSED_COUNT >= buttonPressedCounter))
	{
		if ( BUTTON_PRESSED_COUNT > buttonPressedCounter)
 800198a:	4b18      	ldr	r3, [pc, #96]	; (80019ec <readButton+0x74>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b13      	cmp	r3, #19
 8001990:	d80d      	bhi.n	80019ae <readButton+0x36>
		{

			++buttonPressedCounter;
 8001992:	4b16      	ldr	r3, [pc, #88]	; (80019ec <readButton+0x74>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	3301      	adds	r3, #1
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4b14      	ldr	r3, [pc, #80]	; (80019ec <readButton+0x74>)
 800199c:	701a      	strb	r2, [r3, #0]
			button =
					(LEFT_BUTTON_Pin == GPIO_Pin) ?
							(BUTTON_LEFT) : (BUTTON_RIGHT);
 800199e:	887b      	ldrh	r3, [r7, #2]
 80019a0:	2b80      	cmp	r3, #128	; 0x80
 80019a2:	bf14      	ite	ne
 80019a4:	2301      	movne	r3, #1
 80019a6:	2300      	moveq	r3, #0
 80019a8:	b2db      	uxtb	r3, r3
			button =
 80019aa:	73fb      	strb	r3, [r7, #15]
 80019ac:	e006      	b.n	80019bc <readButton+0x44>
		}
		else
		{
			button =
					(LEFT_BUTTON_Pin == GPIO_Pin) ?
							(BUTTON_LEFT_PRESSED) : (BUTTON_RIGHT_PRESSED);
 80019ae:	887b      	ldrh	r3, [r7, #2]
 80019b0:	2b80      	cmp	r3, #128	; 0x80
 80019b2:	d101      	bne.n	80019b8 <readButton+0x40>
 80019b4:	2302      	movs	r3, #2
 80019b6:	e000      	b.n	80019ba <readButton+0x42>
 80019b8:	2303      	movs	r3, #3
			button =
 80019ba:	73fb      	strb	r3, [r7, #15]
		}
		osDelay(BUTTON_DELAY);
 80019bc:	201e      	movs	r0, #30
 80019be:	f012 fce7 	bl	8014390 <osDelay>
	while (GPIO_PIN_RESET == HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)
 80019c2:	887b      	ldrh	r3, [r7, #2]
 80019c4:	4619      	mov	r1, r3
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f003 fc8c 	bl	80052e4 <HAL_GPIO_ReadPin>
 80019cc:	4603      	mov	r3, r0
			&& (BUTTON_PRESSED_COUNT >= buttonPressedCounter))
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d103      	bne.n	80019da <readButton+0x62>
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <readButton+0x74>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b14      	cmp	r3, #20
 80019d8:	d9d7      	bls.n	800198a <readButton+0x12>
	}
	buttonPressedCounter = 0;
 80019da:	4b04      	ldr	r3, [pc, #16]	; (80019ec <readButton+0x74>)
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]
	return (button);
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000acc 	.word	0x20000acc

080019f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <MX_DMA_Init+0x5c>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4a13      	ldr	r2, [pc, #76]	; (8001a4c <MX_DMA_Init+0x5c>)
 8001a00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <MX_DMA_Init+0x5c>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a0e:	607b      	str	r3, [r7, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2105      	movs	r1, #5
 8001a16:	203a      	movs	r0, #58	; 0x3a
 8001a18:	f002 fe98 	bl	800474c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001a1c:	203a      	movs	r0, #58	; 0x3a
 8001a1e:	f002 feb1 	bl	8004784 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2105      	movs	r1, #5
 8001a26:	203b      	movs	r0, #59	; 0x3b
 8001a28:	f002 fe90 	bl	800474c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001a2c:	203b      	movs	r0, #59	; 0x3b
 8001a2e:	f002 fea9 	bl	8004784 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2105      	movs	r1, #5
 8001a36:	2045      	movs	r0, #69	; 0x45
 8001a38:	f002 fe88 	bl	800474c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001a3c:	2045      	movs	r0, #69	; 0x45
 8001a3e:	f002 fea1 	bl	8004784 <HAL_NVIC_EnableIRQ>

}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800

08001a50 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4a07      	ldr	r2, [pc, #28]	; (8001a7c <vApplicationGetIdleTaskMemory+0x2c>)
 8001a60:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	4a06      	ldr	r2, [pc, #24]	; (8001a80 <vApplicationGetIdleTaskMemory+0x30>)
 8001a66:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2280      	movs	r2, #128	; 0x80
 8001a6c:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8001a6e:	bf00      	nop
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20002554 	.word	0x20002554
 8001a80:	200025f4 	.word	0x200025f4

08001a84 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001a84:	b5b0      	push	{r4, r5, r7, lr}
 8001a86:	b09e      	sub	sp, #120	; 0x78
 8001a88:	af00      	add	r7, sp, #0
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of travelSensorSem */
  osSemaphoreStaticDef(travelSensorSem, &travelSensorSemControlBlock);
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	673b      	str	r3, [r7, #112]	; 0x70
 8001a8e:	4b36      	ldr	r3, [pc, #216]	; (8001b68 <MX_FREERTOS_Init+0xe4>)
 8001a90:	677b      	str	r3, [r7, #116]	; 0x74
  travelSensorSemHandle = osSemaphoreCreate(osSemaphore(travelSensorSem), 1);
 8001a92:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a96:	2101      	movs	r1, #1
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f012 fc8d 	bl	80143b8 <osSemaphoreCreate>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	4a32      	ldr	r2, [pc, #200]	; (8001b6c <MX_FREERTOS_Init+0xe8>)
 8001aa2:	6013      	str	r3, [r2, #0]

  /* definition and creation of SendData */
  osSemaphoreStaticDef(SendData, &SendDataControlBlock);
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	66bb      	str	r3, [r7, #104]	; 0x68
 8001aa8:	4b31      	ldr	r3, [pc, #196]	; (8001b70 <MX_FREERTOS_Init+0xec>)
 8001aaa:	66fb      	str	r3, [r7, #108]	; 0x6c
  SendDataHandle = osSemaphoreCreate(osSemaphore(SendData), 1);
 8001aac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f012 fc80 	bl	80143b8 <osSemaphoreCreate>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	4a2e      	ldr	r2, [pc, #184]	; (8001b74 <MX_FREERTOS_Init+0xf0>)
 8001abc:	6013      	str	r3, [r2, #0]

  /* definition and creation of writeCalibrationSem */
  osSemaphoreStaticDef(writeCalibrationSem, &writeCalibrationSemControlBlock);
 8001abe:	2300      	movs	r3, #0
 8001ac0:	663b      	str	r3, [r7, #96]	; 0x60
 8001ac2:	4b2d      	ldr	r3, [pc, #180]	; (8001b78 <MX_FREERTOS_Init+0xf4>)
 8001ac4:	667b      	str	r3, [r7, #100]	; 0x64
  writeCalibrationSemHandle = osSemaphoreCreate(osSemaphore(writeCalibrationSem), 1);
 8001ac6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001aca:	2101      	movs	r1, #1
 8001acc:	4618      	mov	r0, r3
 8001ace:	f012 fc73 	bl	80143b8 <osSemaphoreCreate>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	4a29      	ldr	r2, [pc, #164]	; (8001b7c <MX_FREERTOS_Init+0xf8>)
 8001ad6:	6013      	str	r3, [r2, #0]

  /* definition and creation of SagMeasurement */
  osSemaphoreStaticDef(SagMeasurement, &SagMeasurementControlBlock);
 8001ad8:	2300      	movs	r3, #0
 8001ada:	65bb      	str	r3, [r7, #88]	; 0x58
 8001adc:	4b28      	ldr	r3, [pc, #160]	; (8001b80 <MX_FREERTOS_Init+0xfc>)
 8001ade:	65fb      	str	r3, [r7, #92]	; 0x5c
  SagMeasurementHandle = osSemaphoreCreate(osSemaphore(SagMeasurement), 1);
 8001ae0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f012 fc66 	bl	80143b8 <osSemaphoreCreate>
 8001aec:	4603      	mov	r3, r0
 8001aee:	4a25      	ldr	r2, [pc, #148]	; (8001b84 <MX_FREERTOS_Init+0x100>)
 8001af0:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of SdCard */
  osThreadDef(SdCard, SdCardInit, osPriorityNormal, 0, 1024);
 8001af2:	4b25      	ldr	r3, [pc, #148]	; (8001b88 <MX_FREERTOS_Init+0x104>)
 8001af4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001af8:	461d      	mov	r5, r3
 8001afa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001afc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001afe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SdCardHandle = osThreadCreate(osThread(SdCard), NULL);
 8001b06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f012 fbf3 	bl	80142f8 <osThreadCreate>
 8001b12:	4603      	mov	r3, r0
 8001b14:	4a1d      	ldr	r2, [pc, #116]	; (8001b8c <MX_FREERTOS_Init+0x108>)
 8001b16:	6013      	str	r3, [r2, #0]

  /* definition and creation of sensorRead */
  osThreadStaticDef(sensorRead, sensorReadInit, osPriorityNormal, 0, 1024, sensorReadBuffer, &sensorReadControlBlock);
 8001b18:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <MX_FREERTOS_Init+0x10c>)
 8001b1a:	f107 0420 	add.w	r4, r7, #32
 8001b1e:	461d      	mov	r5, r3
 8001b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sensorReadHandle = osThreadCreate(osThread(sensorRead), NULL);
 8001b2c:	f107 0320 	add.w	r3, r7, #32
 8001b30:	2100      	movs	r1, #0
 8001b32:	4618      	mov	r0, r3
 8001b34:	f012 fbe0 	bl	80142f8 <osThreadCreate>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	4a16      	ldr	r2, [pc, #88]	; (8001b94 <MX_FREERTOS_Init+0x110>)
 8001b3c:	6013      	str	r3, [r2, #0]

  /* definition and creation of menuProcessData */
  osThreadStaticDef(menuProcessData, menuProcessDataInit, osPriorityNormal, 0, 512, menuProcessDataBuffer, &menuProcessDataControlBlock);
 8001b3e:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <MX_FREERTOS_Init+0x114>)
 8001b40:	1d3c      	adds	r4, r7, #4
 8001b42:	461d      	mov	r5, r3
 8001b44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  menuProcessDataHandle = osThreadCreate(osThread(menuProcessData), NULL);
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	2100      	movs	r1, #0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f012 fbcf 	bl	80142f8 <osThreadCreate>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	4a0f      	ldr	r2, [pc, #60]	; (8001b9c <MX_FREERTOS_Init+0x118>)
 8001b5e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001b60:	bf00      	nop
 8001b62:	3778      	adds	r7, #120	; 0x78
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bdb0      	pop	{r4, r5, r7, pc}
 8001b68:	20002428 	.word	0x20002428
 8001b6c:	20002424 	.word	0x20002424
 8001b70:	20002474 	.word	0x20002474
 8001b74:	20002470 	.word	0x20002470
 8001b78:	200024c0 	.word	0x200024c0
 8001b7c:	200024bc 	.word	0x200024bc
 8001b80:	2000250c 	.word	0x2000250c
 8001b84:	20002508 	.word	0x20002508
 8001b88:	0801cf44 	.word	0x0801cf44
 8001b8c:	20000ad8 	.word	0x20000ad8
 8001b90:	0801cf6c 	.word	0x0801cf6c
 8001b94:	20000adc 	.word	0x20000adc
 8001b98:	0801cf98 	.word	0x0801cf98
 8001b9c:	20001b80 	.word	0x20001b80

08001ba0 <SdCardInit>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_SdCardInit */
void SdCardInit(void const * argument)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001ba8:	f015 fa18 	bl	8016fdc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN SdCardInit */
	Mount_SD("/");
 8001bac:	4805      	ldr	r0, [pc, #20]	; (8001bc4 <SdCardInit+0x24>)
 8001bae:	f7ff fa97 	bl	80010e0 <Mount_SD>
	Unmount_SD("/");
 8001bb2:	4804      	ldr	r0, [pc, #16]	; (8001bc4 <SdCardInit+0x24>)
 8001bb4:	f7ff faaa 	bl	800110c <Unmount_SD>
	/* Infinite loop */
	for (;;)
	{

		osDelay(1000);
 8001bb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bbc:	f012 fbe8 	bl	8014390 <osDelay>
 8001bc0:	e7fa      	b.n	8001bb8 <SdCardInit+0x18>
 8001bc2:	bf00      	nop
 8001bc4:	0801cfb4 	.word	0x0801cfb4

08001bc8 <sensorReadInit>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_sensorReadInit */
void sensorReadInit(void const * argument)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensorReadInit */

	/* Infinite loop */
	for (;;)
	{
		if (osOK == osSemaphoreWait(travelSensorSemHandle, osWaitForever))
 8001bd0:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <sensorReadInit+0x7c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f012 fc1f 	bl	801441c <osSemaphoreWait>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d12a      	bne.n	8001c3a <sensorReadInit+0x72>
		{
			if (MENU_MEASURMENT_START == getMenuSelector())
 8001be4:	f000 fbe8 	bl	80023b8 <getMenuSelector>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b05      	cmp	r3, #5
 8001bec:	d106      	bne.n	8001bfc <sensorReadInit+0x34>
			{
				char *sensorDataPtr = getSensorDataFileName();
 8001bee:	f000 fbff 	bl	80023f0 <getSensorDataFileName>
 8001bf2:	60f8      	str	r0, [r7, #12]
				processData(sensorDataPtr);
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f001 fd7b 	bl	80036f0 <processData>
 8001bfa:	e01e      	b.n	8001c3a <sensorReadInit+0x72>
			}
			else if (MENU_SAG_START == getMenuSelector())
 8001bfc:	f000 fbdc 	bl	80023b8 <getMenuSelector>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b03      	cmp	r3, #3
 8001c04:	d108      	bne.n	8001c18 <sensorReadInit+0x50>
			{
				processDataSag(result, resultPressure);
 8001c06:	4910      	ldr	r1, [pc, #64]	; (8001c48 <sensorReadInit+0x80>)
 8001c08:	4810      	ldr	r0, [pc, #64]	; (8001c4c <sensorReadInit+0x84>)
 8001c0a:	f001 fd89 	bl	8003720 <processDataSag>
				lcdMenuSagStart(result, resultPressure);
 8001c0e:	490e      	ldr	r1, [pc, #56]	; (8001c48 <sensorReadInit+0x80>)
 8001c10:	480e      	ldr	r0, [pc, #56]	; (8001c4c <sensorReadInit+0x84>)
 8001c12:	f000 f951 	bl	8001eb8 <lcdMenuSagStart>
 8001c16:	e010      	b.n	8001c3a <sensorReadInit+0x72>
			}
			else if (MENU_CALIBRATION == getMenuSelector()){
 8001c18:	f000 fbce 	bl	80023b8 <getMenuSelector>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d10b      	bne.n	8001c3a <sensorReadInit+0x72>
				stopAdcDma();
 8001c22:	f001 fc97 	bl	8003554 <stopAdcDma>
				travelPressureSensorCalibration();
 8001c26:	f001 fca9 	bl	800357c <travelPressureSensorCalibration>
				lcdMenuFinishedNotification("Cal Finished");
 8001c2a:	4809      	ldr	r0, [pc, #36]	; (8001c50 <sensorReadInit+0x88>)
 8001c2c:	f000 f9cc 	bl	8001fc8 <lcdMenuFinishedNotification>
				lcdMenuStart();
 8001c30:	f000 f9e6 	bl	8002000 <lcdMenuStart>
				setMenuSelector(MENU_START);
 8001c34:	2000      	movs	r0, #0
 8001c36:	f000 fbcb 	bl	80023d0 <setMenuSelector>

		else
		{

		}
		osDelay(50);
 8001c3a:	2032      	movs	r0, #50	; 0x32
 8001c3c:	f012 fba8 	bl	8014390 <osDelay>
		if (osOK == osSemaphoreWait(travelSensorSemHandle, osWaitForever))
 8001c40:	e7c6      	b.n	8001bd0 <sensorReadInit+0x8>
 8001c42:	bf00      	nop
 8001c44:	20002424 	.word	0x20002424
 8001c48:	20000ad4 	.word	0x20000ad4
 8001c4c:	20000ad0 	.word	0x20000ad0
 8001c50:	0801cfb8 	.word	0x0801cfb8

08001c54 <menuProcessDataInit>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_menuProcessDataInit */
void menuProcessDataInit(void const * argument)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN menuProcessDataInit */
	button_t buttonLeft;
	button_t buttonRight;
	HAL_I2C_Init(&hi2c1);
 8001c5c:	4811      	ldr	r0, [pc, #68]	; (8001ca4 <menuProcessDataInit+0x50>)
 8001c5e:	f003 fb59 	bl	8005314 <HAL_I2C_Init>
	SSD1306_Init();
 8001c62:	f000 fdf7 	bl	8002854 <SSD1306_Init>
	lcdMenuStart();
 8001c66:	f000 f9cb 	bl	8002000 <lcdMenuStart>
	/* Infinite loop */
	for (;;)
	{
		buttonLeft = readButton(LEFT_BUTTON_GPIO_Port, LEFT_BUTTON_Pin);
 8001c6a:	2180      	movs	r1, #128	; 0x80
 8001c6c:	480e      	ldr	r0, [pc, #56]	; (8001ca8 <menuProcessDataInit+0x54>)
 8001c6e:	f7ff fe83 	bl	8001978 <readButton>
 8001c72:	4603      	mov	r3, r0
 8001c74:	73fb      	strb	r3, [r7, #15]
		buttonRight = readButton(RIGHT_BUTTON_GPIO_Port, RIGHT_BUTTON_Pin);
 8001c76:	2140      	movs	r1, #64	; 0x40
 8001c78:	480b      	ldr	r0, [pc, #44]	; (8001ca8 <menuProcessDataInit+0x54>)
 8001c7a:	f7ff fe7d 	bl	8001978 <readButton>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	73bb      	strb	r3, [r7, #14]
		if ((BUTTON_SNA != buttonLeft) || (BUTTON_SNA != buttonRight))
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d102      	bne.n	8001c8e <menuProcessDataInit+0x3a>
 8001c88:	7bbb      	ldrb	r3, [r7, #14]
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d005      	beq.n	8001c9a <menuProcessDataInit+0x46>
		{
			menuSelector(buttonLeft, buttonRight);
 8001c8e:	7bba      	ldrb	r2, [r7, #14]
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
 8001c92:	4611      	mov	r1, r2
 8001c94:	4618      	mov	r0, r3
 8001c96:	f000 fbb5 	bl	8002404 <menuSelector>
		}

		osDelay(10);
 8001c9a:	200a      	movs	r0, #10
 8001c9c:	f012 fb78 	bl	8014390 <osDelay>
		buttonLeft = readButton(LEFT_BUTTON_GPIO_Port, LEFT_BUTTON_Pin);
 8001ca0:	e7e3      	b.n	8001c6a <menuProcessDataInit+0x16>
 8001ca2:	bf00      	nop
 8001ca4:	200027f4 	.word	0x200027f4
 8001ca8:	40020400 	.word	0x40020400

08001cac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08a      	sub	sp, #40	; 0x28
 8001cb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb2:	f107 0314 	add.w	r3, r7, #20
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	609a      	str	r2, [r3, #8]
 8001cbe:	60da      	str	r2, [r3, #12]
 8001cc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	4b3d      	ldr	r3, [pc, #244]	; (8001dbc <MX_GPIO_Init+0x110>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	4a3c      	ldr	r2, [pc, #240]	; (8001dbc <MX_GPIO_Init+0x110>)
 8001ccc:	f043 0304 	orr.w	r3, r3, #4
 8001cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd2:	4b3a      	ldr	r3, [pc, #232]	; (8001dbc <MX_GPIO_Init+0x110>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	4b36      	ldr	r3, [pc, #216]	; (8001dbc <MX_GPIO_Init+0x110>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	4a35      	ldr	r2, [pc, #212]	; (8001dbc <MX_GPIO_Init+0x110>)
 8001ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cec:	6313      	str	r3, [r2, #48]	; 0x30
 8001cee:	4b33      	ldr	r3, [pc, #204]	; (8001dbc <MX_GPIO_Init+0x110>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	4b2f      	ldr	r3, [pc, #188]	; (8001dbc <MX_GPIO_Init+0x110>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4a2e      	ldr	r2, [pc, #184]	; (8001dbc <MX_GPIO_Init+0x110>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4b2c      	ldr	r3, [pc, #176]	; (8001dbc <MX_GPIO_Init+0x110>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	607b      	str	r3, [r7, #4]
 8001d1a:	4b28      	ldr	r3, [pc, #160]	; (8001dbc <MX_GPIO_Init+0x110>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	4a27      	ldr	r2, [pc, #156]	; (8001dbc <MX_GPIO_Init+0x110>)
 8001d20:	f043 0302 	orr.w	r3, r3, #2
 8001d24:	6313      	str	r3, [r2, #48]	; 0x30
 8001d26:	4b25      	ldr	r3, [pc, #148]	; (8001dbc <MX_GPIO_Init+0x110>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	607b      	str	r3, [r7, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	603b      	str	r3, [r7, #0]
 8001d36:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <MX_GPIO_Init+0x110>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	4a20      	ldr	r2, [pc, #128]	; (8001dbc <MX_GPIO_Init+0x110>)
 8001d3c:	f043 0308 	orr.w	r3, r3, #8
 8001d40:	6313      	str	r3, [r2, #48]	; 0x30
 8001d42:	4b1e      	ldr	r3, [pc, #120]	; (8001dbc <MX_GPIO_Init+0x110>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	603b      	str	r3, [r7, #0]
 8001d4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACCELEROMETER_INT0_Pin;
 8001d4e:	2380      	movs	r3, #128	; 0x80
 8001d50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d52:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACCELEROMETER_INT0_GPIO_Port, &GPIO_InitStruct);
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	4619      	mov	r1, r3
 8001d62:	4817      	ldr	r0, [pc, #92]	; (8001dc0 <MX_GPIO_Init+0x114>)
 8001d64:	f003 f92a 	bl	8004fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_detection_Pin;
 8001d68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d72:	2301      	movs	r3, #1
 8001d74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_detection_GPIO_Port, &GPIO_InitStruct);
 8001d76:	f107 0314 	add.w	r3, r7, #20
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4811      	ldr	r0, [pc, #68]	; (8001dc4 <MX_GPIO_Init+0x118>)
 8001d7e:	f003 f91d 	bl	8004fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CHARGE_DETECTION_Pin;
 8001d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CHARGE_DETECTION_GPIO_Port, &GPIO_InitStruct);
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	4619      	mov	r1, r3
 8001d96:	480b      	ldr	r0, [pc, #44]	; (8001dc4 <MX_GPIO_Init+0x118>)
 8001d98:	f003 f910 	bl	8004fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RIGHT_BUTTON_Pin|LEFT_BUTTON_Pin;
 8001d9c:	23c0      	movs	r3, #192	; 0xc0
 8001d9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001da4:	2301      	movs	r3, #1
 8001da6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da8:	f107 0314 	add.w	r3, r7, #20
 8001dac:	4619      	mov	r1, r3
 8001dae:	4806      	ldr	r0, [pc, #24]	; (8001dc8 <MX_GPIO_Init+0x11c>)
 8001db0:	f003 f904 	bl	8004fbc <HAL_GPIO_Init>

}
 8001db4:	bf00      	nop
 8001db6:	3728      	adds	r7, #40	; 0x28
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40020800 	.word	0x40020800
 8001dc4:	40020000 	.word	0x40020000
 8001dc8:	40020400 	.word	0x40020400

08001dcc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001dd0:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <MX_I2C1_Init+0x50>)
 8001dd2:	4a13      	ldr	r2, [pc, #76]	; (8001e20 <MX_I2C1_Init+0x54>)
 8001dd4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001dd6:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <MX_I2C1_Init+0x50>)
 8001dd8:	4a12      	ldr	r2, [pc, #72]	; (8001e24 <MX_I2C1_Init+0x58>)
 8001dda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ddc:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <MX_I2C1_Init+0x50>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001de2:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <MX_I2C1_Init+0x50>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001de8:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <MX_I2C1_Init+0x50>)
 8001dea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001df0:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <MX_I2C1_Init+0x50>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <MX_I2C1_Init+0x50>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dfc:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <MX_I2C1_Init+0x50>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <MX_I2C1_Init+0x50>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e08:	4804      	ldr	r0, [pc, #16]	; (8001e1c <MX_I2C1_Init+0x50>)
 8001e0a:	f003 fa83 	bl	8005314 <HAL_I2C_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e14:	f000 faca 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	200027f4 	.word	0x200027f4
 8001e20:	40005400 	.word	0x40005400
 8001e24:	00061a80 	.word	0x00061a80

08001e28 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08a      	sub	sp, #40	; 0x28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a19      	ldr	r2, [pc, #100]	; (8001eac <HAL_I2C_MspInit+0x84>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d12c      	bne.n	8001ea4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	4b18      	ldr	r3, [pc, #96]	; (8001eb0 <HAL_I2C_MspInit+0x88>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	4a17      	ldr	r2, [pc, #92]	; (8001eb0 <HAL_I2C_MspInit+0x88>)
 8001e54:	f043 0302 	orr.w	r3, r3, #2
 8001e58:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5a:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <HAL_I2C_MspInit+0x88>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e6c:	2312      	movs	r3, #18
 8001e6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e74:	2303      	movs	r3, #3
 8001e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e78:	2304      	movs	r3, #4
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7c:	f107 0314 	add.w	r3, r7, #20
 8001e80:	4619      	mov	r1, r3
 8001e82:	480c      	ldr	r0, [pc, #48]	; (8001eb4 <HAL_I2C_MspInit+0x8c>)
 8001e84:	f003 f89a 	bl	8004fbc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <HAL_I2C_MspInit+0x88>)
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e90:	4a07      	ldr	r2, [pc, #28]	; (8001eb0 <HAL_I2C_MspInit+0x88>)
 8001e92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e96:	6413      	str	r3, [r2, #64]	; 0x40
 8001e98:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <HAL_I2C_MspInit+0x88>)
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	3728      	adds	r7, #40	; 0x28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40005400 	.word	0x40005400
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40020400 	.word	0x40020400

08001eb8 <lcdMenuSagStart>:

/******************************************************************************
 * Function Definitions
 *******************************************************************************/
void lcdMenuSagStart(int16_t *result, int16_t *resultPressure)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	; 0x28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
	char lcdFirstLineTravel[8] =
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	623b      	str	r3, [r7, #32]
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
	{ 0 };
	char lcSecondLineTravel[8] =
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61bb      	str	r3, [r7, #24]
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61fb      	str	r3, [r7, #28]
	{ 0 };
	char lcdFirstLinePressure[8] =
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
	{ 0 };
	char lcSecondLinePressure[8] =
 8001eda:	2300      	movs	r3, #0
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
	{ 0 };
	sprintf(lcdFirstLineTravel, "FT: %d", result[0]);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	f107 0320 	add.w	r3, r7, #32
 8001eee:	4930      	ldr	r1, [pc, #192]	; (8001fb0 <lcdMenuSagStart+0xf8>)
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f016 fe67 	bl	8018bc4 <siprintf>
	sprintf(lcSecondLineTravel, "RT: %d", result[1]);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3302      	adds	r3, #2
 8001efa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001efe:	461a      	mov	r2, r3
 8001f00:	f107 0318 	add.w	r3, r7, #24
 8001f04:	492b      	ldr	r1, [pc, #172]	; (8001fb4 <lcdMenuSagStart+0xfc>)
 8001f06:	4618      	mov	r0, r3
 8001f08:	f016 fe5c 	bl	8018bc4 <siprintf>
	sprintf(lcdFirstLinePressure, "FP: %d", resultPressure[0]);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f12:	461a      	mov	r2, r3
 8001f14:	f107 0310 	add.w	r3, r7, #16
 8001f18:	4927      	ldr	r1, [pc, #156]	; (8001fb8 <lcdMenuSagStart+0x100>)
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f016 fe52 	bl	8018bc4 <siprintf>
	sprintf(lcSecondLinePressure, "RP: %d", resultPressure[1]);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	3302      	adds	r3, #2
 8001f24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	f107 0308 	add.w	r3, r7, #8
 8001f2e:	4923      	ldr	r1, [pc, #140]	; (8001fbc <lcdMenuSagStart+0x104>)
 8001f30:	4618      	mov	r0, r3
 8001f32:	f016 fe47 	bl	8018bc4 <siprintf>
	SSD1306_Clear();
 8001f36:	f000 feb2 	bl	8002c9e <SSD1306_Clear>
	SSD1306_GotoXY(10, 10);
 8001f3a:	210a      	movs	r1, #10
 8001f3c:	200a      	movs	r0, #10
 8001f3e:	f000 fdf3 	bl	8002b28 <SSD1306_GotoXY>
	SSD1306_Puts(lcdFirstLineTravel, &Font_7x10, SSD1306_COLOR_WHITE);
 8001f42:	f107 0320 	add.w	r3, r7, #32
 8001f46:	2201      	movs	r2, #1
 8001f48:	491d      	ldr	r1, [pc, #116]	; (8001fc0 <lcdMenuSagStart+0x108>)
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 fe82 	bl	8002c54 <SSD1306_Puts>
	SSD1306_GotoXY(10, 30);
 8001f50:	211e      	movs	r1, #30
 8001f52:	200a      	movs	r0, #10
 8001f54:	f000 fde8 	bl	8002b28 <SSD1306_GotoXY>
	SSD1306_Puts(lcSecondLineTravel, &Font_7x10, SSD1306_COLOR_WHITE);
 8001f58:	f107 0318 	add.w	r3, r7, #24
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	4918      	ldr	r1, [pc, #96]	; (8001fc0 <lcdMenuSagStart+0x108>)
 8001f60:	4618      	mov	r0, r3
 8001f62:	f000 fe77 	bl	8002c54 <SSD1306_Puts>
	SSD1306_GotoXY(78, 10);
 8001f66:	210a      	movs	r1, #10
 8001f68:	204e      	movs	r0, #78	; 0x4e
 8001f6a:	f000 fddd 	bl	8002b28 <SSD1306_GotoXY>
	SSD1306_Puts(lcdFirstLinePressure, &Font_7x10, SSD1306_COLOR_WHITE);
 8001f6e:	f107 0310 	add.w	r3, r7, #16
 8001f72:	2201      	movs	r2, #1
 8001f74:	4912      	ldr	r1, [pc, #72]	; (8001fc0 <lcdMenuSagStart+0x108>)
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 fe6c 	bl	8002c54 <SSD1306_Puts>
	SSD1306_GotoXY(78, 30);
 8001f7c:	211e      	movs	r1, #30
 8001f7e:	204e      	movs	r0, #78	; 0x4e
 8001f80:	f000 fdd2 	bl	8002b28 <SSD1306_GotoXY>
	SSD1306_Puts(lcSecondLinePressure, &Font_7x10, SSD1306_COLOR_WHITE);
 8001f84:	f107 0308 	add.w	r3, r7, #8
 8001f88:	2201      	movs	r2, #1
 8001f8a:	490d      	ldr	r1, [pc, #52]	; (8001fc0 <lcdMenuSagStart+0x108>)
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f000 fe61 	bl	8002c54 <SSD1306_Puts>
	SSD1306_GotoXY(10, 50);
 8001f92:	2132      	movs	r1, #50	; 0x32
 8001f94:	200a      	movs	r0, #10
 8001f96:	f000 fdc7 	bl	8002b28 <SSD1306_GotoXY>
	SSD1306_Puts("FINISH hold LEFT", &Font_7x10, SSD1306_COLOR_WHITE);
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	4908      	ldr	r1, [pc, #32]	; (8001fc0 <lcdMenuSagStart+0x108>)
 8001f9e:	4809      	ldr	r0, [pc, #36]	; (8001fc4 <lcdMenuSagStart+0x10c>)
 8001fa0:	f000 fe58 	bl	8002c54 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001fa4:	f000 fd1a 	bl	80029dc <SSD1306_UpdateScreen>
}
 8001fa8:	bf00      	nop
 8001faa:	3728      	adds	r7, #40	; 0x28
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	0801cfc8 	.word	0x0801cfc8
 8001fb4:	0801cfd0 	.word	0x0801cfd0
 8001fb8:	0801cfd8 	.word	0x0801cfd8
 8001fbc:	0801cfe0 	.word	0x0801cfe0
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	0801cfe8 	.word	0x0801cfe8

08001fc8 <lcdMenuFinishedNotification>:
void lcdMenuFinishedNotification(char *notification)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
	SSD1306_Clear();
 8001fd0:	f000 fe65 	bl	8002c9e <SSD1306_Clear>
	SSD1306_GotoXY(30, 30);
 8001fd4:	211e      	movs	r1, #30
 8001fd6:	201e      	movs	r0, #30
 8001fd8:	f000 fda6 	bl	8002b28 <SSD1306_GotoXY>
	SSD1306_Puts(notification, &Font_7x10, SSD1306_COLOR_WHITE);
 8001fdc:	2201      	movs	r2, #1
 8001fde:	4907      	ldr	r1, [pc, #28]	; (8001ffc <lcdMenuFinishedNotification+0x34>)
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 fe37 	bl	8002c54 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001fe6:	f000 fcf9 	bl	80029dc <SSD1306_UpdateScreen>
	osDelay(2000);
 8001fea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001fee:	f012 f9cf 	bl	8014390 <osDelay>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000000 	.word	0x20000000

08002000 <lcdMenuStart>:

void lcdMenuStart()
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 8002004:	f000 fe4b 	bl	8002c9e <SSD1306_Clear>
	SSD1306_GotoXY(10, 10);
 8002008:	210a      	movs	r1, #10
 800200a:	200a      	movs	r0, #10
 800200c:	f000 fd8c 	bl	8002b28 <SSD1306_GotoXY>
	SSD1306_Puts("SAG", &Font_7x10, SSD1306_COLOR_WHITE);
 8002010:	2201      	movs	r2, #1
 8002012:	4911      	ldr	r1, [pc, #68]	; (8002058 <lcdMenuStart+0x58>)
 8002014:	4811      	ldr	r0, [pc, #68]	; (800205c <lcdMenuStart+0x5c>)
 8002016:	f000 fe1d 	bl	8002c54 <SSD1306_Puts>
	SSD1306_GotoXY(10, 30);
 800201a:	211e      	movs	r1, #30
 800201c:	200a      	movs	r0, #10
 800201e:	f000 fd83 	bl	8002b28 <SSD1306_GotoXY>
	SSD1306_Puts("LEFT", &Font_7x10, SSD1306_COLOR_WHITE);
 8002022:	2201      	movs	r2, #1
 8002024:	490c      	ldr	r1, [pc, #48]	; (8002058 <lcdMenuStart+0x58>)
 8002026:	480e      	ldr	r0, [pc, #56]	; (8002060 <lcdMenuStart+0x60>)
 8002028:	f000 fe14 	bl	8002c54 <SSD1306_Puts>
	SSD1306_GotoXY(68, 10);
 800202c:	210a      	movs	r1, #10
 800202e:	2044      	movs	r0, #68	; 0x44
 8002030:	f000 fd7a 	bl	8002b28 <SSD1306_GotoXY>
	SSD1306_Puts("MESSURE", &Font_7x10, SSD1306_COLOR_WHITE);
 8002034:	2201      	movs	r2, #1
 8002036:	4908      	ldr	r1, [pc, #32]	; (8002058 <lcdMenuStart+0x58>)
 8002038:	480a      	ldr	r0, [pc, #40]	; (8002064 <lcdMenuStart+0x64>)
 800203a:	f000 fe0b 	bl	8002c54 <SSD1306_Puts>
	SSD1306_GotoXY(68, 30);
 800203e:	211e      	movs	r1, #30
 8002040:	2044      	movs	r0, #68	; 0x44
 8002042:	f000 fd71 	bl	8002b28 <SSD1306_GotoXY>
	SSD1306_Puts("RIGHT", &Font_7x10, SSD1306_COLOR_WHITE);
 8002046:	2201      	movs	r2, #1
 8002048:	4903      	ldr	r1, [pc, #12]	; (8002058 <lcdMenuStart+0x58>)
 800204a:	4807      	ldr	r0, [pc, #28]	; (8002068 <lcdMenuStart+0x68>)
 800204c:	f000 fe02 	bl	8002c54 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002050:	f000 fcc4 	bl	80029dc <SSD1306_UpdateScreen>
}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20000000 	.word	0x20000000
 800205c:	0801cffc 	.word	0x0801cffc
 8002060:	0801d000 	.word	0x0801d000
 8002064:	0801d008 	.word	0x0801d008
 8002068:	0801d010 	.word	0x0801d010

0800206c <lcdMenuSag>:

void lcdMenuSag()
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 8002070:	f000 fe15 	bl	8002c9e <SSD1306_Clear>
	SSD1306_GotoXY(10, 10);
 8002074:	210a      	movs	r1, #10
 8002076:	200a      	movs	r0, #10
 8002078:	f000 fd56 	bl	8002b28 <SSD1306_GotoXY>
	SSD1306_Puts("CALIB", &Font_7x10, SSD1306_COLOR_WHITE);
 800207c:	2201      	movs	r2, #1
 800207e:	4916      	ldr	r1, [pc, #88]	; (80020d8 <lcdMenuSag+0x6c>)
 8002080:	4816      	ldr	r0, [pc, #88]	; (80020dc <lcdMenuSag+0x70>)
 8002082:	f000 fde7 	bl	8002c54 <SSD1306_Puts>
	SSD1306_GotoXY(10, 30);
 8002086:	211e      	movs	r1, #30
 8002088:	200a      	movs	r0, #10
 800208a:	f000 fd4d 	bl	8002b28 <SSD1306_GotoXY>
	SSD1306_Puts("LEFT", &Font_7x10, SSD1306_COLOR_WHITE);
 800208e:	2201      	movs	r2, #1
 8002090:	4911      	ldr	r1, [pc, #68]	; (80020d8 <lcdMenuSag+0x6c>)
 8002092:	4813      	ldr	r0, [pc, #76]	; (80020e0 <lcdMenuSag+0x74>)
 8002094:	f000 fdde 	bl	8002c54 <SSD1306_Puts>
	SSD1306_GotoXY(68, 10);
 8002098:	210a      	movs	r1, #10
 800209a:	2044      	movs	r0, #68	; 0x44
 800209c:	f000 fd44 	bl	8002b28 <SSD1306_GotoXY>
	SSD1306_Puts("MENU", &Font_7x10, SSD1306_COLOR_WHITE);
 80020a0:	2201      	movs	r2, #1
 80020a2:	490d      	ldr	r1, [pc, #52]	; (80020d8 <lcdMenuSag+0x6c>)
 80020a4:	480f      	ldr	r0, [pc, #60]	; (80020e4 <lcdMenuSag+0x78>)
 80020a6:	f000 fdd5 	bl	8002c54 <SSD1306_Puts>
	SSD1306_GotoXY(68, 30);
 80020aa:	211e      	movs	r1, #30
 80020ac:	2044      	movs	r0, #68	; 0x44
 80020ae:	f000 fd3b 	bl	8002b28 <SSD1306_GotoXY>
	SSD1306_Puts("RIGHT", &Font_7x10, SSD1306_COLOR_WHITE);
 80020b2:	2201      	movs	r2, #1
 80020b4:	4908      	ldr	r1, [pc, #32]	; (80020d8 <lcdMenuSag+0x6c>)
 80020b6:	480c      	ldr	r0, [pc, #48]	; (80020e8 <lcdMenuSag+0x7c>)
 80020b8:	f000 fdcc 	bl	8002c54 <SSD1306_Puts>
	SSD1306_GotoXY(10, 50);
 80020bc:	2132      	movs	r1, #50	; 0x32
 80020be:	200a      	movs	r0, #10
 80020c0:	f000 fd32 	bl	8002b28 <SSD1306_GotoXY>
	SSD1306_Puts("START hold LEFT", &Font_7x10, SSD1306_COLOR_WHITE);
 80020c4:	2201      	movs	r2, #1
 80020c6:	4904      	ldr	r1, [pc, #16]	; (80020d8 <lcdMenuSag+0x6c>)
 80020c8:	4808      	ldr	r0, [pc, #32]	; (80020ec <lcdMenuSag+0x80>)
 80020ca:	f000 fdc3 	bl	8002c54 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80020ce:	f000 fc85 	bl	80029dc <SSD1306_UpdateScreen>
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000000 	.word	0x20000000
 80020dc:	0801d018 	.word	0x0801d018
 80020e0:	0801d000 	.word	0x0801d000
 80020e4:	0801d020 	.word	0x0801d020
 80020e8:	0801d010 	.word	0x0801d010
 80020ec:	0801d028 	.word	0x0801d028

080020f0 <lcdStartMeasurement>:

void lcdStartMeasurement()
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 80020f4:	f000 fdd3 	bl	8002c9e <SSD1306_Clear>
	SSD1306_GotoXY(10, 10);
 80020f8:	210a      	movs	r1, #10
 80020fa:	200a      	movs	r0, #10
 80020fc:	f000 fd14 	bl	8002b28 <SSD1306_GotoXY>
	SSD1306_Puts("MENU", &Font_7x10, SSD1306_COLOR_WHITE);
 8002100:	2201      	movs	r2, #1
 8002102:	4911      	ldr	r1, [pc, #68]	; (8002148 <lcdStartMeasurement+0x58>)
 8002104:	4811      	ldr	r0, [pc, #68]	; (800214c <lcdStartMeasurement+0x5c>)
 8002106:	f000 fda5 	bl	8002c54 <SSD1306_Puts>
	SSD1306_GotoXY(10, 30);
 800210a:	211e      	movs	r1, #30
 800210c:	200a      	movs	r0, #10
 800210e:	f000 fd0b 	bl	8002b28 <SSD1306_GotoXY>
	SSD1306_Puts("LEFT", &Font_7x10, SSD1306_COLOR_WHITE);
 8002112:	2201      	movs	r2, #1
 8002114:	490c      	ldr	r1, [pc, #48]	; (8002148 <lcdStartMeasurement+0x58>)
 8002116:	480e      	ldr	r0, [pc, #56]	; (8002150 <lcdStartMeasurement+0x60>)
 8002118:	f000 fd9c 	bl	8002c54 <SSD1306_Puts>
	SSD1306_GotoXY(68, 10);
 800211c:	210a      	movs	r1, #10
 800211e:	2044      	movs	r0, #68	; 0x44
 8002120:	f000 fd02 	bl	8002b28 <SSD1306_GotoXY>
	SSD1306_Puts("MESSURE", &Font_7x10, SSD1306_COLOR_WHITE);
 8002124:	2201      	movs	r2, #1
 8002126:	4908      	ldr	r1, [pc, #32]	; (8002148 <lcdStartMeasurement+0x58>)
 8002128:	480a      	ldr	r0, [pc, #40]	; (8002154 <lcdStartMeasurement+0x64>)
 800212a:	f000 fd93 	bl	8002c54 <SSD1306_Puts>
	SSD1306_GotoXY(10, 50);
 800212e:	2132      	movs	r1, #50	; 0x32
 8002130:	200a      	movs	r0, #10
 8002132:	f000 fcf9 	bl	8002b28 <SSD1306_GotoXY>
	SSD1306_Puts("START hold RIGHT", &Font_7x10, SSD1306_COLOR_WHITE);
 8002136:	2201      	movs	r2, #1
 8002138:	4903      	ldr	r1, [pc, #12]	; (8002148 <lcdStartMeasurement+0x58>)
 800213a:	4807      	ldr	r0, [pc, #28]	; (8002158 <lcdStartMeasurement+0x68>)
 800213c:	f000 fd8a 	bl	8002c54 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002140:	f000 fc4c 	bl	80029dc <SSD1306_UpdateScreen>
}
 8002144:	bf00      	nop
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20000000 	.word	0x20000000
 800214c:	0801d020 	.word	0x0801d020
 8002150:	0801d000 	.word	0x0801d000
 8002154:	0801d008 	.word	0x0801d008
 8002158:	0801d038 	.word	0x0801d038

0800215c <lcdCalibration>:

void lcdCalibration()
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 8002160:	f000 fd9d 	bl	8002c9e <SSD1306_Clear>
	SSD1306_GotoXY(10, 10);
 8002164:	210a      	movs	r1, #10
 8002166:	200a      	movs	r0, #10
 8002168:	f000 fcde 	bl	8002b28 <SSD1306_GotoXY>
	SSD1306_Puts("CALIB", &Font_7x10, SSD1306_COLOR_WHITE);
 800216c:	2201      	movs	r2, #1
 800216e:	4911      	ldr	r1, [pc, #68]	; (80021b4 <lcdCalibration+0x58>)
 8002170:	4811      	ldr	r0, [pc, #68]	; (80021b8 <lcdCalibration+0x5c>)
 8002172:	f000 fd6f 	bl	8002c54 <SSD1306_Puts>
	SSD1306_GotoXY(68, 10);
 8002176:	210a      	movs	r1, #10
 8002178:	2044      	movs	r0, #68	; 0x44
 800217a:	f000 fcd5 	bl	8002b28 <SSD1306_GotoXY>
	SSD1306_Puts("MENU", &Font_7x10, SSD1306_COLOR_WHITE);
 800217e:	2201      	movs	r2, #1
 8002180:	490c      	ldr	r1, [pc, #48]	; (80021b4 <lcdCalibration+0x58>)
 8002182:	480e      	ldr	r0, [pc, #56]	; (80021bc <lcdCalibration+0x60>)
 8002184:	f000 fd66 	bl	8002c54 <SSD1306_Puts>
	SSD1306_GotoXY(68, 30);
 8002188:	211e      	movs	r1, #30
 800218a:	2044      	movs	r0, #68	; 0x44
 800218c:	f000 fccc 	bl	8002b28 <SSD1306_GotoXY>
	SSD1306_Puts("RIGHT", &Font_7x10, SSD1306_COLOR_WHITE);
 8002190:	2201      	movs	r2, #1
 8002192:	4908      	ldr	r1, [pc, #32]	; (80021b4 <lcdCalibration+0x58>)
 8002194:	480a      	ldr	r0, [pc, #40]	; (80021c0 <lcdCalibration+0x64>)
 8002196:	f000 fd5d 	bl	8002c54 <SSD1306_Puts>
	SSD1306_GotoXY(10, 50);
 800219a:	2132      	movs	r1, #50	; 0x32
 800219c:	200a      	movs	r0, #10
 800219e:	f000 fcc3 	bl	8002b28 <SSD1306_GotoXY>
	SSD1306_Puts("START hold LEFT", &Font_7x10, SSD1306_COLOR_WHITE);
 80021a2:	2201      	movs	r2, #1
 80021a4:	4903      	ldr	r1, [pc, #12]	; (80021b4 <lcdCalibration+0x58>)
 80021a6:	4807      	ldr	r0, [pc, #28]	; (80021c4 <lcdCalibration+0x68>)
 80021a8:	f000 fd54 	bl	8002c54 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80021ac:	f000 fc16 	bl	80029dc <SSD1306_UpdateScreen>
}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20000000 	.word	0x20000000
 80021b8:	0801d018 	.word	0x0801d018
 80021bc:	0801d020 	.word	0x0801d020
 80021c0:	0801d010 	.word	0x0801d010
 80021c4:	0801d028 	.word	0x0801d028

080021c8 <lcdMeasurementStart>:

void lcdMeasurementStart()
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 80021cc:	f000 fd67 	bl	8002c9e <SSD1306_Clear>
	SSD1306_GotoXY(30, 30);
 80021d0:	211e      	movs	r1, #30
 80021d2:	201e      	movs	r0, #30
 80021d4:	f000 fca8 	bl	8002b28 <SSD1306_GotoXY>
	SSD1306_Puts("STARTING", &Font_7x10, SSD1306_COLOR_WHITE);
 80021d8:	2201      	movs	r2, #1
 80021da:	4908      	ldr	r1, [pc, #32]	; (80021fc <lcdMeasurementStart+0x34>)
 80021dc:	4808      	ldr	r0, [pc, #32]	; (8002200 <lcdMeasurementStart+0x38>)
 80021de:	f000 fd39 	bl	8002c54 <SSD1306_Puts>
	SSD1306_GotoXY(10, 50);
 80021e2:	2132      	movs	r1, #50	; 0x32
 80021e4:	200a      	movs	r0, #10
 80021e6:	f000 fc9f 	bl	8002b28 <SSD1306_GotoXY>
	SSD1306_Puts("FINISH hold RIGHT", &Font_7x10, SSD1306_COLOR_WHITE);
 80021ea:	2201      	movs	r2, #1
 80021ec:	4903      	ldr	r1, [pc, #12]	; (80021fc <lcdMeasurementStart+0x34>)
 80021ee:	4805      	ldr	r0, [pc, #20]	; (8002204 <lcdMeasurementStart+0x3c>)
 80021f0:	f000 fd30 	bl	8002c54 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80021f4:	f000 fbf2 	bl	80029dc <SSD1306_UpdateScreen>
}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000000 	.word	0x20000000
 8002200:	0801d04c 	.word	0x0801d04c
 8002204:	0801d058 	.word	0x0801d058

08002208 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002210:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002214:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b00      	cmp	r3, #0
 800221e:	d013      	beq.n	8002248 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002220:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002224:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002228:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00b      	beq.n	8002248 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002230:	e000      	b.n	8002234 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002232:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002234:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0f9      	beq.n	8002232 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800223e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002248:	687b      	ldr	r3, [r7, #4]
}
 800224a:	4618      	mov	r0, r3
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff ffd1 	bl	8002208 <ITM_SendChar>
	return (ch);
 8002266:	687b      	ldr	r3, [r7, #4]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002274:	f001 fce4 	bl	8003c40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002278:	f000 f81a 	bl	80022b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800227c:	f7ff fd16 	bl	8001cac <MX_GPIO_Init>
  MX_DMA_Init();
 8002280:	f7ff fbb6 	bl	80019f0 <MX_DMA_Init>
  MX_TIM6_Init();
 8002284:	f001 f828 	bl	80032d8 <MX_TIM6_Init>
  MX_TIM8_Init();
 8002288:	f001 f85c 	bl	8003344 <MX_TIM8_Init>
  MX_TIM2_Init();
 800228c:	f000 ffb2 	bl	80031f4 <MX_TIM2_Init>
  MX_ADC2_Init();
 8002290:	f7ff fa16 	bl	80016c0 <MX_ADC2_Init>
  MX_I2C1_Init();
 8002294:	f7ff fd9a 	bl	8001dcc <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 8002298:	f000 f98e 	bl	80025b8 <MX_SDIO_SD_Init>
  MX_ADC1_Init();
 800229c:	f7ff f9be 	bl	800161c <MX_ADC1_Init>
  MX_FATFS_Init();
 80022a0:	f00a fffe 	bl	800d2a0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
	//MX_SDIO_SD_Init_4B();
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80022a4:	f7ff fbee 	bl	8001a84 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80022a8:	f012 f803 	bl	80142b2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80022ac:	e7fe      	b.n	80022ac <main+0x3c>
	...

080022b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b094      	sub	sp, #80	; 0x50
 80022b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022b6:	f107 031c 	add.w	r3, r7, #28
 80022ba:	2234      	movs	r2, #52	; 0x34
 80022bc:	2100      	movs	r1, #0
 80022be:	4618      	mov	r0, r3
 80022c0:	f016 fda6 	bl	8018e10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022c4:	f107 0308 	add.w	r3, r7, #8
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	60da      	str	r2, [r3, #12]
 80022d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022d4:	2300      	movs	r3, #0
 80022d6:	607b      	str	r3, [r7, #4]
 80022d8:	4b29      	ldr	r3, [pc, #164]	; (8002380 <SystemClock_Config+0xd0>)
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	4a28      	ldr	r2, [pc, #160]	; (8002380 <SystemClock_Config+0xd0>)
 80022de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e2:	6413      	str	r3, [r2, #64]	; 0x40
 80022e4:	4b26      	ldr	r3, [pc, #152]	; (8002380 <SystemClock_Config+0xd0>)
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ec:	607b      	str	r3, [r7, #4]
 80022ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022f0:	2300      	movs	r3, #0
 80022f2:	603b      	str	r3, [r7, #0]
 80022f4:	4b23      	ldr	r3, [pc, #140]	; (8002384 <SystemClock_Config+0xd4>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a22      	ldr	r2, [pc, #136]	; (8002384 <SystemClock_Config+0xd4>)
 80022fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022fe:	6013      	str	r3, [r2, #0]
 8002300:	4b20      	ldr	r3, [pc, #128]	; (8002384 <SystemClock_Config+0xd4>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002308:	603b      	str	r3, [r7, #0]
 800230a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800230c:	2301      	movs	r3, #1
 800230e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002310:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002314:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002316:	2302      	movs	r3, #2
 8002318:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800231a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800231e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002320:	2308      	movs	r3, #8
 8002322:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002324:	23a8      	movs	r3, #168	; 0xa8
 8002326:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002328:	2302      	movs	r3, #2
 800232a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800232c:	2307      	movs	r3, #7
 800232e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002330:	2302      	movs	r3, #2
 8002332:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002334:	f107 031c 	add.w	r3, r7, #28
 8002338:	4618      	mov	r0, r3
 800233a:	f005 feeb 	bl	8008114 <HAL_RCC_OscConfig>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002344:	f000 f832 	bl	80023ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002348:	230f      	movs	r3, #15
 800234a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800234c:	2302      	movs	r3, #2
 800234e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002350:	2300      	movs	r3, #0
 8002352:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002354:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002358:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800235a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800235e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002360:	f107 0308 	add.w	r3, r7, #8
 8002364:	2105      	movs	r1, #5
 8002366:	4618      	mov	r0, r3
 8002368:	f005 f844 	bl	80073f4 <HAL_RCC_ClockConfig>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002372:	f000 f81b 	bl	80023ac <Error_Handler>
  }
}
 8002376:	bf00      	nop
 8002378:	3750      	adds	r7, #80	; 0x50
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800
 8002384:	40007000 	.word	0x40007000

08002388 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a04      	ldr	r2, [pc, #16]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d101      	bne.n	800239e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800239a:	f001 fc73 	bl	8003c84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40000400 	.word	0x40000400

080023ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023b0:	b672      	cpsid	i
}
 80023b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80023b4:	e7fe      	b.n	80023b4 <Error_Handler+0x8>
	...

080023b8 <getMenuSelector>:

/******************************************************************************
 * Function Definitions
 *******************************************************************************/
menu_t getMenuSelector(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
	return (selector);
 80023bc:	4b03      	ldr	r3, [pc, #12]	; (80023cc <getMenuSelector+0x14>)
 80023be:	781b      	ldrb	r3, [r3, #0]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	20002848 	.word	0x20002848

080023d0 <setMenuSelector>:
void setMenuSelector(menu_t selectorState)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	71fb      	strb	r3, [r7, #7]
	selector = selectorState;
 80023da:	4a04      	ldr	r2, [pc, #16]	; (80023ec <setMenuSelector+0x1c>)
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	7013      	strb	r3, [r2, #0]
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	20002848 	.word	0x20002848

080023f0 <getSensorDataFileName>:
char* getSensorDataFileName(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
	return (sensorData);
 80023f4:	4b02      	ldr	r3, [pc, #8]	; (8002400 <getSensorDataFileName+0x10>)
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	20002860 	.word	0x20002860

08002404 <menuSelector>:

void menuSelector(button_t buttonLeft, button_t buttonRight)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	460a      	mov	r2, r1
 800240e:	71fb      	strb	r3, [r7, #7]
 8002410:	4613      	mov	r3, r2
 8002412:	71bb      	strb	r3, [r7, #6]

	switch (selector)
 8002414:	4b5c      	ldr	r3, [pc, #368]	; (8002588 <menuSelector+0x184>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b05      	cmp	r3, #5
 800241a:	f200 80b0 	bhi.w	800257e <menuSelector+0x17a>
 800241e:	a201      	add	r2, pc, #4	; (adr r2, 8002424 <menuSelector+0x20>)
 8002420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002424:	0800243d 	.word	0x0800243d
 8002428:	08002467 	.word	0x08002467
 800242c:	080024b7 	.word	0x080024b7
 8002430:	080024dd 	.word	0x080024dd
 8002434:	080024fb 	.word	0x080024fb
 8002438:	08002555 	.word	0x08002555
	{

	case (MENU_START):

		if (BUTTON_LEFT == buttonLeft)
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d105      	bne.n	800244e <menuSelector+0x4a>
		{
			lcdMenuSag();
 8002442:	f7ff fe13 	bl	800206c <lcdMenuSag>
			selector = MENU_SAG;
 8002446:	4b50      	ldr	r3, [pc, #320]	; (8002588 <menuSelector+0x184>)
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]
		else
		{
			lcdMenuStart();
		}

		break;
 800244c:	e097      	b.n	800257e <menuSelector+0x17a>
		else if (BUTTON_RIGHT == buttonRight)
 800244e:	79bb      	ldrb	r3, [r7, #6]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d105      	bne.n	8002460 <menuSelector+0x5c>
			lcdStartMeasurement();
 8002454:	f7ff fe4c 	bl	80020f0 <lcdStartMeasurement>
			selector = MENU_MEASURMENT;
 8002458:	4b4b      	ldr	r3, [pc, #300]	; (8002588 <menuSelector+0x184>)
 800245a:	2204      	movs	r2, #4
 800245c:	701a      	strb	r2, [r3, #0]
		break;
 800245e:	e08e      	b.n	800257e <menuSelector+0x17a>
			lcdMenuStart();
 8002460:	f7ff fdce 	bl	8002000 <lcdMenuStart>
		break;
 8002464:	e08b      	b.n	800257e <menuSelector+0x17a>

	case (MENU_SAG):
		if (BUTTON_LEFT_PRESSED == buttonLeft)
 8002466:	79fb      	ldrb	r3, [r7, #7]
 8002468:	2b02      	cmp	r3, #2
 800246a:	d10e      	bne.n	800248a <menuSelector+0x86>
		{
			if(0 == readCalibrationData(&calibrationValues)){
 800246c:	4847      	ldr	r0, [pc, #284]	; (800258c <menuSelector+0x188>)
 800246e:	f7ff f801 	bl	8001474 <readCalibrationData>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d17f      	bne.n	8002578 <menuSelector+0x174>
			startAdcDma();
 8002478:	f001 f84e 	bl	8003518 <startAdcDma>
			puts("pomiar rozpoczety, Przytrzymaj LEFT aby zakonczyc\n");
 800247c:	4844      	ldr	r0, [pc, #272]	; (8002590 <menuSelector+0x18c>)
 800247e:	f016 fb99 	bl	8018bb4 <puts>
			selector = MENU_SAG_START;
 8002482:	4b41      	ldr	r3, [pc, #260]	; (8002588 <menuSelector+0x184>)
 8002484:	2203      	movs	r2, #3
 8002486:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			puts("PRZYTRZYMAJ LEFT aby rozpoczac pomiar\n");
		}
		break;
 8002488:	e076      	b.n	8002578 <menuSelector+0x174>
		else if (BUTTON_LEFT == buttonLeft)
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d105      	bne.n	800249c <menuSelector+0x98>
			lcdCalibration();
 8002490:	f7ff fe64 	bl	800215c <lcdCalibration>
			selector = MENU_CALIBRATION;
 8002494:	4b3c      	ldr	r3, [pc, #240]	; (8002588 <menuSelector+0x184>)
 8002496:	2202      	movs	r2, #2
 8002498:	701a      	strb	r2, [r3, #0]
		break;
 800249a:	e06d      	b.n	8002578 <menuSelector+0x174>
		else if (BUTTON_RIGHT == buttonRight)
 800249c:	79bb      	ldrb	r3, [r7, #6]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d105      	bne.n	80024ae <menuSelector+0xaa>
			lcdMenuStart();
 80024a2:	f7ff fdad 	bl	8002000 <lcdMenuStart>
			selector = MENU_START;
 80024a6:	4b38      	ldr	r3, [pc, #224]	; (8002588 <menuSelector+0x184>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]
		break;
 80024ac:	e064      	b.n	8002578 <menuSelector+0x174>
			puts("PRZYTRZYMAJ LEFT aby rozpoczac pomiar\n");
 80024ae:	4839      	ldr	r0, [pc, #228]	; (8002594 <menuSelector+0x190>)
 80024b0:	f016 fb80 	bl	8018bb4 <puts>
		break;
 80024b4:	e060      	b.n	8002578 <menuSelector+0x174>
	case (MENU_CALIBRATION):
		if (BUTTON_LEFT_PRESSED == buttonLeft)
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d102      	bne.n	80024c2 <menuSelector+0xbe>
		{
			startAdcDma();
 80024bc:	f001 f82c 	bl	8003518 <startAdcDma>
		}
		else
		{
			puts("PRZYTRZYMAJ LEFT aby rozpoczac pomiar\n");
		}
		break;
 80024c0:	e05d      	b.n	800257e <menuSelector+0x17a>
		else if (BUTTON_RIGHT == buttonRight)
 80024c2:	79bb      	ldrb	r3, [r7, #6]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d105      	bne.n	80024d4 <menuSelector+0xd0>
			selector = MENU_START;
 80024c8:	4b2f      	ldr	r3, [pc, #188]	; (8002588 <menuSelector+0x184>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	701a      	strb	r2, [r3, #0]
			lcdMenuStart();
 80024ce:	f7ff fd97 	bl	8002000 <lcdMenuStart>
		break;
 80024d2:	e054      	b.n	800257e <menuSelector+0x17a>
			puts("PRZYTRZYMAJ LEFT aby rozpoczac pomiar\n");
 80024d4:	482f      	ldr	r0, [pc, #188]	; (8002594 <menuSelector+0x190>)
 80024d6:	f016 fb6d 	bl	8018bb4 <puts>
		break;
 80024da:	e050      	b.n	800257e <menuSelector+0x17a>
	case (MENU_SAG_START):
		if (BUTTON_LEFT_PRESSED == buttonLeft)
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d107      	bne.n	80024f2 <menuSelector+0xee>
		{
			stopAdcDma();
 80024e2:	f001 f837 	bl	8003554 <stopAdcDma>
			selector = MENU_START;
 80024e6:	4b28      	ldr	r3, [pc, #160]	; (8002588 <menuSelector+0x184>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	701a      	strb	r2, [r3, #0]
			lcdMenuStart();
 80024ec:	f7ff fd88 	bl	8002000 <lcdMenuStart>
		}
		else
		{
			puts("PRZYTRZYMAJ LEFT aby wrocic do menu start");
		}
		break;
 80024f0:	e045      	b.n	800257e <menuSelector+0x17a>
			puts("PRZYTRZYMAJ LEFT aby wrocic do menu start");
 80024f2:	4829      	ldr	r0, [pc, #164]	; (8002598 <menuSelector+0x194>)
 80024f4:	f016 fb5e 	bl	8018bb4 <puts>
		break;
 80024f8:	e041      	b.n	800257e <menuSelector+0x17a>

	case (MENU_MEASURMENT):
		if (BUTTON_RIGHT_PRESSED == buttonRight)
 80024fa:	79bb      	ldrb	r3, [r7, #6]
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	d11c      	bne.n	800253a <menuSelector+0x136>
		{
			lcdMeasurementStart();
 8002500:	f7ff fe62 	bl	80021c8 <lcdMeasurementStart>
			setPath(dir, sensorData, path);
 8002504:	4b25      	ldr	r3, [pc, #148]	; (800259c <menuSelector+0x198>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	461a      	mov	r2, r3
 800250a:	4925      	ldr	r1, [pc, #148]	; (80025a0 <menuSelector+0x19c>)
 800250c:	4825      	ldr	r0, [pc, #148]	; (80025a4 <menuSelector+0x1a0>)
 800250e:	f7fe fd9f 	bl	8001050 <setPath>
			createNewFile(dir, sensorData, &path);
 8002512:	4a22      	ldr	r2, [pc, #136]	; (800259c <menuSelector+0x198>)
 8002514:	4922      	ldr	r1, [pc, #136]	; (80025a0 <menuSelector+0x19c>)
 8002516:	4823      	ldr	r0, [pc, #140]	; (80025a4 <menuSelector+0x1a0>)
 8002518:	f7fe fdb6 	bl	8001088 <createNewFile>
			if(0 == readCalibrationData(&calibrationValues)){
 800251c:	481b      	ldr	r0, [pc, #108]	; (800258c <menuSelector+0x188>)
 800251e:	f7fe ffa9 	bl	8001474 <readCalibrationData>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d129      	bne.n	800257c <menuSelector+0x178>
			startAdcDma();
 8002528:	f000 fff6 	bl	8003518 <startAdcDma>
			selector = MENU_MEASURMENT_START;
 800252c:	4b16      	ldr	r3, [pc, #88]	; (8002588 <menuSelector+0x184>)
 800252e:	2205      	movs	r2, #5
 8002530:	701a      	strb	r2, [r3, #0]
			puts("pomiar ciagly rozpoczety, PRZYTRZYMAJ RIGHT aby zakonczyc\n");
 8002532:	481d      	ldr	r0, [pc, #116]	; (80025a8 <menuSelector+0x1a4>)
 8002534:	f016 fb3e 	bl	8018bb4 <puts>
		}
		else
		{
			puts("PRZYTRZYMAJ RIGHT aby rozpoczac pomiar\n");
		}
		break;
 8002538:	e020      	b.n	800257c <menuSelector+0x178>
		else if (BUTTON_LEFT == buttonLeft)
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d105      	bne.n	800254c <menuSelector+0x148>
			lcdMenuStart();
 8002540:	f7ff fd5e 	bl	8002000 <lcdMenuStart>
			selector = MENU_START;
 8002544:	4b10      	ldr	r3, [pc, #64]	; (8002588 <menuSelector+0x184>)
 8002546:	2200      	movs	r2, #0
 8002548:	701a      	strb	r2, [r3, #0]
		break;
 800254a:	e017      	b.n	800257c <menuSelector+0x178>
			puts("PRZYTRZYMAJ RIGHT aby rozpoczac pomiar\n");
 800254c:	4817      	ldr	r0, [pc, #92]	; (80025ac <menuSelector+0x1a8>)
 800254e:	f016 fb31 	bl	8018bb4 <puts>
		break;
 8002552:	e013      	b.n	800257c <menuSelector+0x178>

	case (MENU_MEASURMENT_START):
		if (BUTTON_RIGHT_PRESSED == buttonRight)
 8002554:	79bb      	ldrb	r3, [r7, #6]
 8002556:	2b03      	cmp	r3, #3
 8002558:	d10a      	bne.n	8002570 <menuSelector+0x16c>
		{
			stopAdcDma();
 800255a:	f000 fffb 	bl	8003554 <stopAdcDma>
			lcdMenuFinishedNotification("Mes Finished");
 800255e:	4814      	ldr	r0, [pc, #80]	; (80025b0 <menuSelector+0x1ac>)
 8002560:	f7ff fd32 	bl	8001fc8 <lcdMenuFinishedNotification>
			lcdMenuStart();
 8002564:	f7ff fd4c 	bl	8002000 <lcdMenuStart>
			selector = MENU_START;
 8002568:	4b07      	ldr	r3, [pc, #28]	; (8002588 <menuSelector+0x184>)
 800256a:	2200      	movs	r2, #0
 800256c:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			puts("PRZYTRZYMAJ RIGHT aby zakończyć pomiar\n");
		}
		break;
 800256e:	e006      	b.n	800257e <menuSelector+0x17a>
			puts("PRZYTRZYMAJ RIGHT aby zakończyć pomiar\n");
 8002570:	4810      	ldr	r0, [pc, #64]	; (80025b4 <menuSelector+0x1b0>)
 8002572:	f016 fb1f 	bl	8018bb4 <puts>
		break;
 8002576:	e002      	b.n	800257e <menuSelector+0x17a>
		break;
 8002578:	bf00      	nop
 800257a:	e000      	b.n	800257e <menuSelector+0x17a>
		break;
 800257c:	bf00      	nop

	default:
	}

}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20002848 	.word	0x20002848
 800258c:	20002ee8 	.word	0x20002ee8
 8002590:	0801d06c 	.word	0x0801d06c
 8002594:	0801d0a0 	.word	0x0801d0a0
 8002598:	0801d0c8 	.word	0x0801d0c8
 800259c:	20002849 	.word	0x20002849
 80025a0:	20002860 	.word	0x20002860
 80025a4:	2000284c 	.word	0x2000284c
 80025a8:	0801d0f4 	.word	0x0801d0f4
 80025ac:	0801d130 	.word	0x0801d130
 80025b0:	0801d158 	.word	0x0801d158
 80025b4:	0801d168 	.word	0x0801d168

080025b8 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <MX_SDIO_SD_Init+0x38>)
 80025be:	4a0d      	ldr	r2, [pc, #52]	; (80025f4 <MX_SDIO_SD_Init+0x3c>)
 80025c0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <MX_SDIO_SD_Init+0x38>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80025c8:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <MX_SDIO_SD_Init+0x38>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <MX_SDIO_SD_Init+0x38>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80025d4:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <MX_SDIO_SD_Init+0x38>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80025da:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <MX_SDIO_SD_Init+0x38>)
 80025dc:	2200      	movs	r2, #0
 80025de:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80025e0:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <MX_SDIO_SD_Init+0x38>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80025e6:	bf00      	nop
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	20002874 	.word	0x20002874
 80025f4:	40012c00 	.word	0x40012c00

080025f8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b0a2      	sub	sp, #136	; 0x88
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002600:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002610:	f107 0318 	add.w	r3, r7, #24
 8002614:	225c      	movs	r2, #92	; 0x5c
 8002616:	2100      	movs	r1, #0
 8002618:	4618      	mov	r0, r3
 800261a:	f016 fbf9 	bl	8018e10 <memset>
  if(sdHandle->Instance==SDIO)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a83      	ldr	r2, [pc, #524]	; (8002830 <HAL_SD_MspInit+0x238>)
 8002624:	4293      	cmp	r3, r2
 8002626:	f040 80fe 	bne.w	8002826 <HAL_SD_MspInit+0x22e>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800262a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800262e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8002630:	2300      	movs	r3, #0
 8002632:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8002634:	2300      	movs	r3, #0
 8002636:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002638:	f107 0318 	add.w	r3, r7, #24
 800263c:	4618      	mov	r0, r3
 800263e:	f005 f811 	bl	8007664 <HAL_RCCEx_PeriphCLKConfig>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8002648:	f7ff feb0 	bl	80023ac <Error_Handler>
    }

    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	4b78      	ldr	r3, [pc, #480]	; (8002834 <HAL_SD_MspInit+0x23c>)
 8002652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002654:	4a77      	ldr	r2, [pc, #476]	; (8002834 <HAL_SD_MspInit+0x23c>)
 8002656:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800265a:	6453      	str	r3, [r2, #68]	; 0x44
 800265c:	4b75      	ldr	r3, [pc, #468]	; (8002834 <HAL_SD_MspInit+0x23c>)
 800265e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002660:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002664:	617b      	str	r3, [r7, #20]
 8002666:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002668:	2300      	movs	r3, #0
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	4b71      	ldr	r3, [pc, #452]	; (8002834 <HAL_SD_MspInit+0x23c>)
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	4a70      	ldr	r2, [pc, #448]	; (8002834 <HAL_SD_MspInit+0x23c>)
 8002672:	f043 0302 	orr.w	r3, r3, #2
 8002676:	6313      	str	r3, [r2, #48]	; 0x30
 8002678:	4b6e      	ldr	r3, [pc, #440]	; (8002834 <HAL_SD_MspInit+0x23c>)
 800267a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002684:	2300      	movs	r3, #0
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	4b6a      	ldr	r3, [pc, #424]	; (8002834 <HAL_SD_MspInit+0x23c>)
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	4a69      	ldr	r2, [pc, #420]	; (8002834 <HAL_SD_MspInit+0x23c>)
 800268e:	f043 0304 	orr.w	r3, r3, #4
 8002692:	6313      	str	r3, [r2, #48]	; 0x30
 8002694:	4b67      	ldr	r3, [pc, #412]	; (8002834 <HAL_SD_MspInit+0x23c>)
 8002696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026a0:	2300      	movs	r3, #0
 80026a2:	60bb      	str	r3, [r7, #8]
 80026a4:	4b63      	ldr	r3, [pc, #396]	; (8002834 <HAL_SD_MspInit+0x23c>)
 80026a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a8:	4a62      	ldr	r2, [pc, #392]	; (8002834 <HAL_SD_MspInit+0x23c>)
 80026aa:	f043 0308 	orr.w	r3, r3, #8
 80026ae:	6313      	str	r3, [r2, #48]	; 0x30
 80026b0:	4b60      	ldr	r3, [pc, #384]	; (8002834 <HAL_SD_MspInit+0x23c>)
 80026b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026bc:	2304      	movs	r3, #4
 80026be:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c0:	2302      	movs	r3, #2
 80026c2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c8:	2303      	movs	r3, #3
 80026ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80026ce:	230c      	movs	r3, #12
 80026d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80026d8:	4619      	mov	r1, r3
 80026da:	4857      	ldr	r0, [pc, #348]	; (8002838 <HAL_SD_MspInit+0x240>)
 80026dc:	f002 fc6e 	bl	8004fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026e4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e6:	2302      	movs	r3, #2
 80026e8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026ea:	2301      	movs	r3, #1
 80026ec:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ee:	2303      	movs	r3, #3
 80026f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80026f4:	230c      	movs	r3, #12
 80026f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026fa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80026fe:	4619      	mov	r1, r3
 8002700:	484e      	ldr	r0, [pc, #312]	; (800283c <HAL_SD_MspInit+0x244>)
 8002702:	f002 fc5b 	bl	8004fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002706:	2304      	movs	r3, #4
 8002708:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270a:	2302      	movs	r3, #2
 800270c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800270e:	2301      	movs	r3, #1
 8002710:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002712:	2303      	movs	r3, #3
 8002714:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002718:	230c      	movs	r3, #12
 800271a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800271e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002722:	4619      	mov	r1, r3
 8002724:	4846      	ldr	r0, [pc, #280]	; (8002840 <HAL_SD_MspInit+0x248>)
 8002726:	f002 fc49 	bl	8004fbc <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800272a:	4b46      	ldr	r3, [pc, #280]	; (8002844 <HAL_SD_MspInit+0x24c>)
 800272c:	4a46      	ldr	r2, [pc, #280]	; (8002848 <HAL_SD_MspInit+0x250>)
 800272e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8002730:	4b44      	ldr	r3, [pc, #272]	; (8002844 <HAL_SD_MspInit+0x24c>)
 8002732:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002736:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002738:	4b42      	ldr	r3, [pc, #264]	; (8002844 <HAL_SD_MspInit+0x24c>)
 800273a:	2200      	movs	r2, #0
 800273c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800273e:	4b41      	ldr	r3, [pc, #260]	; (8002844 <HAL_SD_MspInit+0x24c>)
 8002740:	2200      	movs	r2, #0
 8002742:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002744:	4b3f      	ldr	r3, [pc, #252]	; (8002844 <HAL_SD_MspInit+0x24c>)
 8002746:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800274a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800274c:	4b3d      	ldr	r3, [pc, #244]	; (8002844 <HAL_SD_MspInit+0x24c>)
 800274e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002752:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002754:	4b3b      	ldr	r3, [pc, #236]	; (8002844 <HAL_SD_MspInit+0x24c>)
 8002756:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800275a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800275c:	4b39      	ldr	r3, [pc, #228]	; (8002844 <HAL_SD_MspInit+0x24c>)
 800275e:	2220      	movs	r2, #32
 8002760:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002762:	4b38      	ldr	r3, [pc, #224]	; (8002844 <HAL_SD_MspInit+0x24c>)
 8002764:	2200      	movs	r2, #0
 8002766:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002768:	4b36      	ldr	r3, [pc, #216]	; (8002844 <HAL_SD_MspInit+0x24c>)
 800276a:	2204      	movs	r2, #4
 800276c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800276e:	4b35      	ldr	r3, [pc, #212]	; (8002844 <HAL_SD_MspInit+0x24c>)
 8002770:	2203      	movs	r2, #3
 8002772:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002774:	4b33      	ldr	r3, [pc, #204]	; (8002844 <HAL_SD_MspInit+0x24c>)
 8002776:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800277a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800277c:	4b31      	ldr	r3, [pc, #196]	; (8002844 <HAL_SD_MspInit+0x24c>)
 800277e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002782:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8002784:	482f      	ldr	r0, [pc, #188]	; (8002844 <HAL_SD_MspInit+0x24c>)
 8002786:	f002 f80b 	bl	80047a0 <HAL_DMA_Init>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <HAL_SD_MspInit+0x19c>
    {
      Error_Handler();
 8002790:	f7ff fe0c 	bl	80023ac <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a2b      	ldr	r2, [pc, #172]	; (8002844 <HAL_SD_MspInit+0x24c>)
 8002798:	641a      	str	r2, [r3, #64]	; 0x40
 800279a:	4a2a      	ldr	r2, [pc, #168]	; (8002844 <HAL_SD_MspInit+0x24c>)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80027a0:	4b2a      	ldr	r3, [pc, #168]	; (800284c <HAL_SD_MspInit+0x254>)
 80027a2:	4a2b      	ldr	r2, [pc, #172]	; (8002850 <HAL_SD_MspInit+0x258>)
 80027a4:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80027a6:	4b29      	ldr	r3, [pc, #164]	; (800284c <HAL_SD_MspInit+0x254>)
 80027a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027ac:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027ae:	4b27      	ldr	r3, [pc, #156]	; (800284c <HAL_SD_MspInit+0x254>)
 80027b0:	2240      	movs	r2, #64	; 0x40
 80027b2:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027b4:	4b25      	ldr	r3, [pc, #148]	; (800284c <HAL_SD_MspInit+0x254>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027ba:	4b24      	ldr	r3, [pc, #144]	; (800284c <HAL_SD_MspInit+0x254>)
 80027bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027c0:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027c2:	4b22      	ldr	r3, [pc, #136]	; (800284c <HAL_SD_MspInit+0x254>)
 80027c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027c8:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80027ca:	4b20      	ldr	r3, [pc, #128]	; (800284c <HAL_SD_MspInit+0x254>)
 80027cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027d0:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80027d2:	4b1e      	ldr	r3, [pc, #120]	; (800284c <HAL_SD_MspInit+0x254>)
 80027d4:	2220      	movs	r2, #32
 80027d6:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027d8:	4b1c      	ldr	r3, [pc, #112]	; (800284c <HAL_SD_MspInit+0x254>)
 80027da:	2200      	movs	r2, #0
 80027dc:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80027de:	4b1b      	ldr	r3, [pc, #108]	; (800284c <HAL_SD_MspInit+0x254>)
 80027e0:	2204      	movs	r2, #4
 80027e2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80027e4:	4b19      	ldr	r3, [pc, #100]	; (800284c <HAL_SD_MspInit+0x254>)
 80027e6:	2203      	movs	r2, #3
 80027e8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80027ea:	4b18      	ldr	r3, [pc, #96]	; (800284c <HAL_SD_MspInit+0x254>)
 80027ec:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80027f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80027f2:	4b16      	ldr	r3, [pc, #88]	; (800284c <HAL_SD_MspInit+0x254>)
 80027f4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80027f8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80027fa:	4814      	ldr	r0, [pc, #80]	; (800284c <HAL_SD_MspInit+0x254>)
 80027fc:	f001 ffd0 	bl	80047a0 <HAL_DMA_Init>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_SD_MspInit+0x212>
    {
      Error_Handler();
 8002806:	f7ff fdd1 	bl	80023ac <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a0f      	ldr	r2, [pc, #60]	; (800284c <HAL_SD_MspInit+0x254>)
 800280e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002810:	4a0e      	ldr	r2, [pc, #56]	; (800284c <HAL_SD_MspInit+0x254>)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8002816:	2200      	movs	r2, #0
 8002818:	2105      	movs	r1, #5
 800281a:	2031      	movs	r0, #49	; 0x31
 800281c:	f001 ff96 	bl	800474c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002820:	2031      	movs	r0, #49	; 0x31
 8002822:	f001 ffaf 	bl	8004784 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8002826:	bf00      	nop
 8002828:	3788      	adds	r7, #136	; 0x88
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40012c00 	.word	0x40012c00
 8002834:	40023800 	.word	0x40023800
 8002838:	40020400 	.word	0x40020400
 800283c:	40020800 	.word	0x40020800
 8002840:	40020c00 	.word	0x40020c00
 8002844:	200028f8 	.word	0x200028f8
 8002848:	40026458 	.word	0x40026458
 800284c:	20002958 	.word	0x20002958
 8002850:	400264a0 	.word	0x400264a0

08002854 <SSD1306_Init>:
		}
	}
}

uint8_t SSD1306_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800285a:	f000 fa29 	bl	8002cb0 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK)
 800285e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002862:	2201      	movs	r2, #1
 8002864:	2178      	movs	r1, #120	; 0x78
 8002866:	485b      	ldr	r0, [pc, #364]	; (80029d4 <SSD1306_Init+0x180>)
 8002868:	f002 ff96 	bl	8005798 <HAL_I2C_IsDeviceReady>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <SSD1306_Init+0x22>
	{
		/* Return false */
		return 0;
 8002872:	2300      	movs	r3, #0
 8002874:	e0a9      	b.n	80029ca <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8002876:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800287a:	607b      	str	r3, [r7, #4]
	while (p > 0)
 800287c:	e002      	b.n	8002884 <SSD1306_Init+0x30>
		p--;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	3b01      	subs	r3, #1
 8002882:	607b      	str	r3, [r7, #4]
	while (p > 0)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f9      	bne.n	800287e <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800288a:	22ae      	movs	r2, #174	; 0xae
 800288c:	2100      	movs	r1, #0
 800288e:	2078      	movs	r0, #120	; 0x78
 8002890:	f000 fa8a 	bl	8002da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002894:	2220      	movs	r2, #32
 8002896:	2100      	movs	r1, #0
 8002898:	2078      	movs	r0, #120	; 0x78
 800289a:	f000 fa85 	bl	8002da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800289e:	2210      	movs	r2, #16
 80028a0:	2100      	movs	r1, #0
 80028a2:	2078      	movs	r0, #120	; 0x78
 80028a4:	f000 fa80 	bl	8002da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80028a8:	22b0      	movs	r2, #176	; 0xb0
 80028aa:	2100      	movs	r1, #0
 80028ac:	2078      	movs	r0, #120	; 0x78
 80028ae:	f000 fa7b 	bl	8002da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80028b2:	22c8      	movs	r2, #200	; 0xc8
 80028b4:	2100      	movs	r1, #0
 80028b6:	2078      	movs	r0, #120	; 0x78
 80028b8:	f000 fa76 	bl	8002da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80028bc:	2200      	movs	r2, #0
 80028be:	2100      	movs	r1, #0
 80028c0:	2078      	movs	r0, #120	; 0x78
 80028c2:	f000 fa71 	bl	8002da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80028c6:	2210      	movs	r2, #16
 80028c8:	2100      	movs	r1, #0
 80028ca:	2078      	movs	r0, #120	; 0x78
 80028cc:	f000 fa6c 	bl	8002da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80028d0:	2240      	movs	r2, #64	; 0x40
 80028d2:	2100      	movs	r1, #0
 80028d4:	2078      	movs	r0, #120	; 0x78
 80028d6:	f000 fa67 	bl	8002da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80028da:	2281      	movs	r2, #129	; 0x81
 80028dc:	2100      	movs	r1, #0
 80028de:	2078      	movs	r0, #120	; 0x78
 80028e0:	f000 fa62 	bl	8002da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80028e4:	22ff      	movs	r2, #255	; 0xff
 80028e6:	2100      	movs	r1, #0
 80028e8:	2078      	movs	r0, #120	; 0x78
 80028ea:	f000 fa5d 	bl	8002da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80028ee:	22a1      	movs	r2, #161	; 0xa1
 80028f0:	2100      	movs	r1, #0
 80028f2:	2078      	movs	r0, #120	; 0x78
 80028f4:	f000 fa58 	bl	8002da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80028f8:	22a6      	movs	r2, #166	; 0xa6
 80028fa:	2100      	movs	r1, #0
 80028fc:	2078      	movs	r0, #120	; 0x78
 80028fe:	f000 fa53 	bl	8002da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002902:	22a8      	movs	r2, #168	; 0xa8
 8002904:	2100      	movs	r1, #0
 8002906:	2078      	movs	r0, #120	; 0x78
 8002908:	f000 fa4e 	bl	8002da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800290c:	223f      	movs	r2, #63	; 0x3f
 800290e:	2100      	movs	r1, #0
 8002910:	2078      	movs	r0, #120	; 0x78
 8002912:	f000 fa49 	bl	8002da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002916:	22a4      	movs	r2, #164	; 0xa4
 8002918:	2100      	movs	r1, #0
 800291a:	2078      	movs	r0, #120	; 0x78
 800291c:	f000 fa44 	bl	8002da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002920:	22d3      	movs	r2, #211	; 0xd3
 8002922:	2100      	movs	r1, #0
 8002924:	2078      	movs	r0, #120	; 0x78
 8002926:	f000 fa3f 	bl	8002da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800292a:	2200      	movs	r2, #0
 800292c:	2100      	movs	r1, #0
 800292e:	2078      	movs	r0, #120	; 0x78
 8002930:	f000 fa3a 	bl	8002da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002934:	22d5      	movs	r2, #213	; 0xd5
 8002936:	2100      	movs	r1, #0
 8002938:	2078      	movs	r0, #120	; 0x78
 800293a:	f000 fa35 	bl	8002da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800293e:	22f0      	movs	r2, #240	; 0xf0
 8002940:	2100      	movs	r1, #0
 8002942:	2078      	movs	r0, #120	; 0x78
 8002944:	f000 fa30 	bl	8002da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002948:	22d9      	movs	r2, #217	; 0xd9
 800294a:	2100      	movs	r1, #0
 800294c:	2078      	movs	r0, #120	; 0x78
 800294e:	f000 fa2b 	bl	8002da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002952:	2222      	movs	r2, #34	; 0x22
 8002954:	2100      	movs	r1, #0
 8002956:	2078      	movs	r0, #120	; 0x78
 8002958:	f000 fa26 	bl	8002da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800295c:	22da      	movs	r2, #218	; 0xda
 800295e:	2100      	movs	r1, #0
 8002960:	2078      	movs	r0, #120	; 0x78
 8002962:	f000 fa21 	bl	8002da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002966:	2212      	movs	r2, #18
 8002968:	2100      	movs	r1, #0
 800296a:	2078      	movs	r0, #120	; 0x78
 800296c:	f000 fa1c 	bl	8002da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002970:	22db      	movs	r2, #219	; 0xdb
 8002972:	2100      	movs	r1, #0
 8002974:	2078      	movs	r0, #120	; 0x78
 8002976:	f000 fa17 	bl	8002da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800297a:	2220      	movs	r2, #32
 800297c:	2100      	movs	r1, #0
 800297e:	2078      	movs	r0, #120	; 0x78
 8002980:	f000 fa12 	bl	8002da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002984:	228d      	movs	r2, #141	; 0x8d
 8002986:	2100      	movs	r1, #0
 8002988:	2078      	movs	r0, #120	; 0x78
 800298a:	f000 fa0d 	bl	8002da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800298e:	2214      	movs	r2, #20
 8002990:	2100      	movs	r1, #0
 8002992:	2078      	movs	r0, #120	; 0x78
 8002994:	f000 fa08 	bl	8002da8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002998:	22af      	movs	r2, #175	; 0xaf
 800299a:	2100      	movs	r1, #0
 800299c:	2078      	movs	r0, #120	; 0x78
 800299e:	f000 fa03 	bl	8002da8 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80029a2:	222e      	movs	r2, #46	; 0x2e
 80029a4:	2100      	movs	r1, #0
 80029a6:	2078      	movs	r0, #120	; 0x78
 80029a8:	f000 f9fe 	bl	8002da8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80029ac:	2000      	movs	r0, #0
 80029ae:	f000 f843 	bl	8002a38 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80029b2:	f000 f813 	bl	80029dc <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80029b6:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <SSD1306_Init+0x184>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80029bc:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <SSD1306_Init+0x184>)
 80029be:	2200      	movs	r2, #0
 80029c0:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80029c2:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <SSD1306_Init+0x184>)
 80029c4:	2201      	movs	r2, #1
 80029c6:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80029c8:	2301      	movs	r3, #1
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	200027f4 	.word	0x200027f4
 80029d8:	20002db8 	.word	0x20002db8

080029dc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++)
 80029e2:	2300      	movs	r3, #0
 80029e4:	71fb      	strb	r3, [r7, #7]
 80029e6:	e01d      	b.n	8002a24 <SSD1306_UpdateScreen+0x48>
	{
		SSD1306_WRITECOMMAND(0xB0 + m);
 80029e8:	79fb      	ldrb	r3, [r7, #7]
 80029ea:	3b50      	subs	r3, #80	; 0x50
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	461a      	mov	r2, r3
 80029f0:	2100      	movs	r1, #0
 80029f2:	2078      	movs	r0, #120	; 0x78
 80029f4:	f000 f9d8 	bl	8002da8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80029f8:	2200      	movs	r2, #0
 80029fa:	2100      	movs	r1, #0
 80029fc:	2078      	movs	r0, #120	; 0x78
 80029fe:	f000 f9d3 	bl	8002da8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002a02:	2210      	movs	r2, #16
 8002a04:	2100      	movs	r1, #0
 8002a06:	2078      	movs	r0, #120	; 0x78
 8002a08:	f000 f9ce 	bl	8002da8 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40,
				&SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	01db      	lsls	r3, r3, #7
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40,
 8002a10:	4a08      	ldr	r2, [pc, #32]	; (8002a34 <SSD1306_UpdateScreen+0x58>)
 8002a12:	441a      	add	r2, r3
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	2140      	movs	r1, #64	; 0x40
 8002a18:	2078      	movs	r0, #120	; 0x78
 8002a1a:	f000 f95f 	bl	8002cdc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++)
 8002a1e:	79fb      	ldrb	r3, [r7, #7]
 8002a20:	3301      	adds	r3, #1
 8002a22:	71fb      	strb	r3, [r7, #7]
 8002a24:	79fb      	ldrb	r3, [r7, #7]
 8002a26:	2b07      	cmp	r3, #7
 8002a28:	d9de      	bls.n	80029e8 <SSD1306_UpdateScreen+0xc>
	}
}
 8002a2a:	bf00      	nop
 8002a2c:	bf00      	nop
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	200029b8 	.word	0x200029b8

08002a38 <SSD1306_Fill>:
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF,
 8002a42:	79fb      	ldrb	r3, [r7, #7]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <SSD1306_Fill+0x14>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	e000      	b.n	8002a4e <SSD1306_Fill+0x16>
 8002a4c:	23ff      	movs	r3, #255	; 0xff
 8002a4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a52:	4619      	mov	r1, r3
 8002a54:	4803      	ldr	r0, [pc, #12]	; (8002a64 <SSD1306_Fill+0x2c>)
 8002a56:	f016 f9db 	bl	8018e10 <memset>
			sizeof(SSD1306_Buffer));
}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	200029b8 	.word	0x200029b8

08002a68 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	80fb      	strh	r3, [r7, #6]
 8002a72:	460b      	mov	r3, r1
 8002a74:	80bb      	strh	r3, [r7, #4]
 8002a76:	4613      	mov	r3, r2
 8002a78:	70fb      	strb	r3, [r7, #3]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8002a7a:	88fb      	ldrh	r3, [r7, #6]
 8002a7c:	2b7f      	cmp	r3, #127	; 0x7f
 8002a7e:	d848      	bhi.n	8002b12 <SSD1306_DrawPixel+0xaa>
 8002a80:	88bb      	ldrh	r3, [r7, #4]
 8002a82:	2b3f      	cmp	r3, #63	; 0x3f
 8002a84:	d845      	bhi.n	8002b12 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted)
 8002a86:	4b26      	ldr	r3, [pc, #152]	; (8002b20 <SSD1306_DrawPixel+0xb8>)
 8002a88:	791b      	ldrb	r3, [r3, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d006      	beq.n	8002a9c <SSD1306_DrawPixel+0x34>
	{
		color = (SSD1306_COLOR_t) !color;
 8002a8e:	78fb      	ldrb	r3, [r7, #3]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	bf0c      	ite	eq
 8002a94:	2301      	moveq	r3, #1
 8002a96:	2300      	movne	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE)
 8002a9c:	78fb      	ldrb	r3, [r7, #3]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d11a      	bne.n	8002ad8 <SSD1306_DrawPixel+0x70>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002aa2:	88fa      	ldrh	r2, [r7, #6]
 8002aa4:	88bb      	ldrh	r3, [r7, #4]
 8002aa6:	08db      	lsrs	r3, r3, #3
 8002aa8:	b298      	uxth	r0, r3
 8002aaa:	4603      	mov	r3, r0
 8002aac:	01db      	lsls	r3, r3, #7
 8002aae:	4413      	add	r3, r2
 8002ab0:	4a1c      	ldr	r2, [pc, #112]	; (8002b24 <SSD1306_DrawPixel+0xbc>)
 8002ab2:	5cd3      	ldrb	r3, [r2, r3]
 8002ab4:	b25a      	sxtb	r2, r3
 8002ab6:	88bb      	ldrh	r3, [r7, #4]
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	2101      	movs	r1, #1
 8002abe:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac2:	b25b      	sxtb	r3, r3
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	b259      	sxtb	r1, r3
 8002ac8:	88fa      	ldrh	r2, [r7, #6]
 8002aca:	4603      	mov	r3, r0
 8002acc:	01db      	lsls	r3, r3, #7
 8002ace:	4413      	add	r3, r2
 8002ad0:	b2c9      	uxtb	r1, r1
 8002ad2:	4a14      	ldr	r2, [pc, #80]	; (8002b24 <SSD1306_DrawPixel+0xbc>)
 8002ad4:	54d1      	strb	r1, [r2, r3]
 8002ad6:	e01d      	b.n	8002b14 <SSD1306_DrawPixel+0xac>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002ad8:	88fa      	ldrh	r2, [r7, #6]
 8002ada:	88bb      	ldrh	r3, [r7, #4]
 8002adc:	08db      	lsrs	r3, r3, #3
 8002ade:	b298      	uxth	r0, r3
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	01db      	lsls	r3, r3, #7
 8002ae4:	4413      	add	r3, r2
 8002ae6:	4a0f      	ldr	r2, [pc, #60]	; (8002b24 <SSD1306_DrawPixel+0xbc>)
 8002ae8:	5cd3      	ldrb	r3, [r2, r3]
 8002aea:	b25a      	sxtb	r2, r3
 8002aec:	88bb      	ldrh	r3, [r7, #4]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	2101      	movs	r1, #1
 8002af4:	fa01 f303 	lsl.w	r3, r1, r3
 8002af8:	b25b      	sxtb	r3, r3
 8002afa:	43db      	mvns	r3, r3
 8002afc:	b25b      	sxtb	r3, r3
 8002afe:	4013      	ands	r3, r2
 8002b00:	b259      	sxtb	r1, r3
 8002b02:	88fa      	ldrh	r2, [r7, #6]
 8002b04:	4603      	mov	r3, r0
 8002b06:	01db      	lsls	r3, r3, #7
 8002b08:	4413      	add	r3, r2
 8002b0a:	b2c9      	uxtb	r1, r1
 8002b0c:	4a05      	ldr	r2, [pc, #20]	; (8002b24 <SSD1306_DrawPixel+0xbc>)
 8002b0e:	54d1      	strb	r1, [r2, r3]
 8002b10:	e000      	b.n	8002b14 <SSD1306_DrawPixel+0xac>
		return;
 8002b12:	bf00      	nop
	}
}
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	20002db8 	.word	0x20002db8
 8002b24:	200029b8 	.word	0x200029b8

08002b28 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	460a      	mov	r2, r1
 8002b32:	80fb      	strh	r3, [r7, #6]
 8002b34:	4613      	mov	r3, r2
 8002b36:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002b38:	4a05      	ldr	r2, [pc, #20]	; (8002b50 <SSD1306_GotoXY+0x28>)
 8002b3a:	88fb      	ldrh	r3, [r7, #6]
 8002b3c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002b3e:	4a04      	ldr	r2, [pc, #16]	; (8002b50 <SSD1306_GotoXY+0x28>)
 8002b40:	88bb      	ldrh	r3, [r7, #4]
 8002b42:	8053      	strh	r3, [r2, #2]
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	20002db8 	.word	0x20002db8

08002b54 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t *Font, SSD1306_COLOR_t color)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	6039      	str	r1, [r7, #0]
 8002b5e:	71fb      	strb	r3, [r7, #7]
 8002b60:	4613      	mov	r3, r2
 8002b62:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
	SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002b64:	4b3a      	ldr	r3, [pc, #232]	; (8002c50 <SSD1306_Putc+0xfc>)
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	4413      	add	r3, r2
	if (
 8002b70:	2b7f      	cmp	r3, #127	; 0x7f
 8002b72:	dc07      	bgt.n	8002b84 <SSD1306_Putc+0x30>
	SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight))
 8002b74:	4b36      	ldr	r3, [pc, #216]	; (8002c50 <SSD1306_Putc+0xfc>)
 8002b76:	885b      	ldrh	r3, [r3, #2]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	785b      	ldrb	r3, [r3, #1]
 8002b7e:	4413      	add	r3, r2
	SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002b80:	2b3f      	cmp	r3, #63	; 0x3f
 8002b82:	dd01      	ble.n	8002b88 <SSD1306_Putc+0x34>
	{
		/* Error */
		return 0;
 8002b84:	2300      	movs	r3, #0
 8002b86:	e05e      	b.n	8002c46 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++)
 8002b88:	2300      	movs	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	e04b      	b.n	8002c26 <SSD1306_Putc+0xd2>
	{
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	3b20      	subs	r3, #32
 8002b96:	6839      	ldr	r1, [r7, #0]
 8002b98:	7849      	ldrb	r1, [r1, #1]
 8002b9a:	fb01 f303 	mul.w	r3, r1, r3
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	440b      	add	r3, r1
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	4413      	add	r3, r2
 8002ba8:	881b      	ldrh	r3, [r3, #0]
 8002baa:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++)
 8002bac:	2300      	movs	r3, #0
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	e030      	b.n	8002c14 <SSD1306_Putc+0xc0>
		{
			if ((b << j) & 0x8000)
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d010      	beq.n	8002be4 <SSD1306_Putc+0x90>
			{
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 8002bc2:	4b23      	ldr	r3, [pc, #140]	; (8002c50 <SSD1306_Putc+0xfc>)
 8002bc4:	881a      	ldrh	r2, [r3, #0]
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	4413      	add	r3, r2
 8002bcc:	b298      	uxth	r0, r3
 8002bce:	4b20      	ldr	r3, [pc, #128]	; (8002c50 <SSD1306_Putc+0xfc>)
 8002bd0:	885a      	ldrh	r2, [r3, #2]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	79ba      	ldrb	r2, [r7, #6]
 8002bdc:	4619      	mov	r1, r3
 8002bde:	f7ff ff43 	bl	8002a68 <SSD1306_DrawPixel>
 8002be2:	e014      	b.n	8002c0e <SSD1306_Putc+0xba>
						(SSD1306_COLOR_t) color);
			}
			else
			{
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 8002be4:	4b1a      	ldr	r3, [pc, #104]	; (8002c50 <SSD1306_Putc+0xfc>)
 8002be6:	881a      	ldrh	r2, [r3, #0]
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	4413      	add	r3, r2
 8002bee:	b298      	uxth	r0, r3
 8002bf0:	4b17      	ldr	r3, [pc, #92]	; (8002c50 <SSD1306_Putc+0xfc>)
 8002bf2:	885a      	ldrh	r2, [r3, #2]
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	b299      	uxth	r1, r3
 8002bfc:	79bb      	ldrb	r3, [r7, #6]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	bf0c      	ite	eq
 8002c02:	2301      	moveq	r3, #1
 8002c04:	2300      	movne	r3, #0
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	461a      	mov	r2, r3
 8002c0a:	f7ff ff2d 	bl	8002a68 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	3301      	adds	r3, #1
 8002c12:	613b      	str	r3, [r7, #16]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	461a      	mov	r2, r3
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d3c8      	bcc.n	8002bb2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++)
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	3301      	adds	r3, #1
 8002c24:	617b      	str	r3, [r7, #20]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	785b      	ldrb	r3, [r3, #1]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d3ad      	bcc.n	8002b8e <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002c32:	4b07      	ldr	r3, [pc, #28]	; (8002c50 <SSD1306_Putc+0xfc>)
 8002c34:	881a      	ldrh	r2, [r3, #0]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	4b03      	ldr	r3, [pc, #12]	; (8002c50 <SSD1306_Putc+0xfc>)
 8002c42:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8002c44:	79fb      	ldrb	r3, [r7, #7]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3718      	adds	r7, #24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20002db8 	.word	0x20002db8

08002c54 <SSD1306_Puts>:

char SSD1306_Puts(char *str, FontDef_t *Font, SSD1306_COLOR_t color)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str)
 8002c62:	e012      	b.n	8002c8a <SSD1306_Puts+0x36>
	{
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	79fa      	ldrb	r2, [r7, #7]
 8002c6a:	68b9      	ldr	r1, [r7, #8]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff ff71 	bl	8002b54 <SSD1306_Putc>
 8002c72:	4603      	mov	r3, r0
 8002c74:	461a      	mov	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d002      	beq.n	8002c84 <SSD1306_Puts+0x30>
		{
			/* Return error */
			return *str;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	e008      	b.n	8002c96 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	3301      	adds	r3, #1
 8002c88:	60fb      	str	r3, [r7, #12]
	while (*str)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1e8      	bne.n	8002c64 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	781b      	ldrb	r3, [r3, #0]
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <SSD1306_Clear>:
		SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
	}
}

void SSD1306_Clear(void)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	af00      	add	r7, sp, #0
	SSD1306_Fill(0);
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	f7ff fec8 	bl	8002a38 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8002ca8:	f7ff fe98 	bl	80029dc <SSD1306_UpdateScreen>
}
 8002cac:	bf00      	nop
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <ssd1306_I2C_Init>:
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init()
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
	uint32_t p = 250000;
 8002cb6:	4b08      	ldr	r3, [pc, #32]	; (8002cd8 <ssd1306_I2C_Init+0x28>)
 8002cb8:	607b      	str	r3, [r7, #4]
	while (p > 0)
 8002cba:	e002      	b.n	8002cc2 <ssd1306_I2C_Init+0x12>
		p--;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	607b      	str	r3, [r7, #4]
	while (p > 0)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1f9      	bne.n	8002cbc <ssd1306_I2C_Init+0xc>
}
 8002cc8:	bf00      	nop
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	0003d090 	.word	0x0003d090

08002cdc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t *data,
		uint16_t count)
{
 8002cdc:	b590      	push	{r4, r7, lr}
 8002cde:	b0c7      	sub	sp, #284	; 0x11c
 8002ce0:	af02      	add	r7, sp, #8
 8002ce2:	4604      	mov	r4, r0
 8002ce4:	4608      	mov	r0, r1
 8002ce6:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002cea:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8002cee:	600a      	str	r2, [r1, #0]
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002cf6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002cfa:	4622      	mov	r2, r4
 8002cfc:	701a      	strb	r2, [r3, #0]
 8002cfe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d02:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8002d06:	4602      	mov	r2, r0
 8002d08:	701a      	strb	r2, [r3, #0]
 8002d0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d0e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002d12:	460a      	mov	r2, r1
 8002d14:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8002d16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002d1e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002d22:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8002d26:	7812      	ldrb	r2, [r2, #0]
 8002d28:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for (i = 0; i < count; i++)
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002d30:	e015      	b.n	8002d5e <ssd1306_I2C_WriteMulti+0x82>
		dt[i + 1] = data[i];
 8002d32:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002d36:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002d3a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	441a      	add	r2, r3
 8002d42:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002d46:	3301      	adds	r3, #1
 8002d48:	7811      	ldrb	r1, [r2, #0]
 8002d4a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002d4e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8002d52:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < count; i++)
 8002d54:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002d58:	3301      	adds	r3, #1
 8002d5a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002d5e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002d68:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002d6c:	8812      	ldrh	r2, [r2, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d8df      	bhi.n	8002d32 <ssd1306_I2C_WriteMulti+0x56>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count + 1, 10);
 8002d72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d76:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	b299      	uxth	r1, r3
 8002d7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d82:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	f107 020c 	add.w	r2, r7, #12
 8002d90:	200a      	movs	r0, #10
 8002d92:	9000      	str	r0, [sp, #0]
 8002d94:	4803      	ldr	r0, [pc, #12]	; (8002da4 <ssd1306_I2C_WriteMulti+0xc8>)
 8002d96:	f002 fc01 	bl	800559c <HAL_I2C_Master_Transmit>
}
 8002d9a:	bf00      	nop
 8002d9c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd90      	pop	{r4, r7, pc}
 8002da4:	200027f4 	.word	0x200027f4

08002da8 <ssd1306_I2C_Write>:

void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af02      	add	r7, sp, #8
 8002dae:	4603      	mov	r3, r0
 8002db0:	71fb      	strb	r3, [r7, #7]
 8002db2:	460b      	mov	r3, r1
 8002db4:	71bb      	strb	r3, [r7, #6]
 8002db6:	4613      	mov	r3, r2
 8002db8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002dba:	79bb      	ldrb	r3, [r7, #6]
 8002dbc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002dbe:	797b      	ldrb	r3, [r7, #5]
 8002dc0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	b299      	uxth	r1, r3
 8002dc6:	f107 020c 	add.w	r2, r7, #12
 8002dca:	230a      	movs	r3, #10
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	2302      	movs	r3, #2
 8002dd0:	4803      	ldr	r0, [pc, #12]	; (8002de0 <ssd1306_I2C_Write+0x38>)
 8002dd2:	f002 fbe3 	bl	800559c <HAL_I2C_Master_Transmit>
}
 8002dd6:	bf00      	nop
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	200027f4 	.word	0x200027f4

08002de4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	607b      	str	r3, [r7, #4]
 8002dee:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <HAL_MspInit+0x54>)
 8002df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df2:	4a11      	ldr	r2, [pc, #68]	; (8002e38 <HAL_MspInit+0x54>)
 8002df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002df8:	6453      	str	r3, [r2, #68]	; 0x44
 8002dfa:	4b0f      	ldr	r3, [pc, #60]	; (8002e38 <HAL_MspInit+0x54>)
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e02:	607b      	str	r3, [r7, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	603b      	str	r3, [r7, #0]
 8002e0a:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <HAL_MspInit+0x54>)
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	4a0a      	ldr	r2, [pc, #40]	; (8002e38 <HAL_MspInit+0x54>)
 8002e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e14:	6413      	str	r3, [r2, #64]	; 0x40
 8002e16:	4b08      	ldr	r3, [pc, #32]	; (8002e38 <HAL_MspInit+0x54>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1e:	603b      	str	r3, [r7, #0]
 8002e20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e22:	2200      	movs	r2, #0
 8002e24:	210f      	movs	r1, #15
 8002e26:	f06f 0001 	mvn.w	r0, #1
 8002e2a:	f001 fc8f 	bl	800474c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40023800 	.word	0x40023800

08002e3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08e      	sub	sp, #56	; 0x38
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	4b33      	ldr	r3, [pc, #204]	; (8002f20 <HAL_InitTick+0xe4>)
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	4a32      	ldr	r2, [pc, #200]	; (8002f20 <HAL_InitTick+0xe4>)
 8002e56:	f043 0302 	orr.w	r3, r3, #2
 8002e5a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e5c:	4b30      	ldr	r3, [pc, #192]	; (8002f20 <HAL_InitTick+0xe4>)
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e68:	f107 0210 	add.w	r2, r7, #16
 8002e6c:	f107 0314 	add.w	r3, r7, #20
 8002e70:	4611      	mov	r1, r2
 8002e72:	4618      	mov	r0, r3
 8002e74:	f004 fbc4 	bl	8007600 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d103      	bne.n	8002e8a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002e82:	f004 fba9 	bl	80075d8 <HAL_RCC_GetPCLK1Freq>
 8002e86:	6378      	str	r0, [r7, #52]	; 0x34
 8002e88:	e004      	b.n	8002e94 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002e8a:	f004 fba5 	bl	80075d8 <HAL_RCC_GetPCLK1Freq>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e96:	4a23      	ldr	r2, [pc, #140]	; (8002f24 <HAL_InitTick+0xe8>)
 8002e98:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9c:	0c9b      	lsrs	r3, r3, #18
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8002ea2:	4b21      	ldr	r3, [pc, #132]	; (8002f28 <HAL_InitTick+0xec>)
 8002ea4:	4a21      	ldr	r2, [pc, #132]	; (8002f2c <HAL_InitTick+0xf0>)
 8002ea6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8002ea8:	4b1f      	ldr	r3, [pc, #124]	; (8002f28 <HAL_InitTick+0xec>)
 8002eaa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002eae:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8002eb0:	4a1d      	ldr	r2, [pc, #116]	; (8002f28 <HAL_InitTick+0xec>)
 8002eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb4:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8002eb6:	4b1c      	ldr	r3, [pc, #112]	; (8002f28 <HAL_InitTick+0xec>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ebc:	4b1a      	ldr	r3, [pc, #104]	; (8002f28 <HAL_InitTick+0xec>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ec2:	4b19      	ldr	r3, [pc, #100]	; (8002f28 <HAL_InitTick+0xec>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8002ec8:	4817      	ldr	r0, [pc, #92]	; (8002f28 <HAL_InitTick+0xec>)
 8002eca:	f007 f83f 	bl	8009f4c <HAL_TIM_Base_Init>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002ed4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d11b      	bne.n	8002f14 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8002edc:	4812      	ldr	r0, [pc, #72]	; (8002f28 <HAL_InitTick+0xec>)
 8002ede:	f007 f915 	bl	800a10c <HAL_TIM_Base_Start_IT>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002ee8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d111      	bne.n	8002f14 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ef0:	201d      	movs	r0, #29
 8002ef2:	f001 fc47 	bl	8004784 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b0f      	cmp	r3, #15
 8002efa:	d808      	bhi.n	8002f0e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8002efc:	2200      	movs	r2, #0
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	201d      	movs	r0, #29
 8002f02:	f001 fc23 	bl	800474c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f06:	4a0a      	ldr	r2, [pc, #40]	; (8002f30 <HAL_InitTick+0xf4>)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6013      	str	r3, [r2, #0]
 8002f0c:	e002      	b.n	8002f14 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002f14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3738      	adds	r7, #56	; 0x38
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40023800 	.word	0x40023800
 8002f24:	431bde83 	.word	0x431bde83
 8002f28:	20002dc0 	.word	0x20002dc0
 8002f2c:	40000400 	.word	0x40000400
 8002f30:	2000000c 	.word	0x2000000c

08002f34 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1;
volatile uint8_t Timer2;
void SDTimer_Handler(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
	if (Timer1 > 0)
 8002f38:	4b0e      	ldr	r3, [pc, #56]	; (8002f74 <SDTimer_Handler+0x40>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d006      	beq.n	8002f50 <SDTimer_Handler+0x1c>
		Timer1--;
 8002f42:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <SDTimer_Handler+0x40>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <SDTimer_Handler+0x40>)
 8002f4e:	701a      	strb	r2, [r3, #0]

	if (Timer2 > 0)
 8002f50:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <SDTimer_Handler+0x44>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d006      	beq.n	8002f68 <SDTimer_Handler+0x34>
		Timer2--;
 8002f5a:	4b07      	ldr	r3, [pc, #28]	; (8002f78 <SDTimer_Handler+0x44>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	3b01      	subs	r3, #1
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	4b04      	ldr	r3, [pc, #16]	; (8002f78 <SDTimer_Handler+0x44>)
 8002f66:	701a      	strb	r2, [r3, #0]
}
 8002f68:	bf00      	nop
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	20002e09 	.word	0x20002e09
 8002f78:	20002e0a 	.word	0x20002e0a

08002f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8002f80:	e7fe      	b.n	8002f80 <NMI_Handler+0x4>

08002f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f82:	b480      	push	{r7}
 8002f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f86:	e7fe      	b.n	8002f86 <HardFault_Handler+0x4>

08002f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f8c:	e7fe      	b.n	8002f8c <MemManage_Handler+0x4>

08002f8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f92:	e7fe      	b.n	8002f92 <BusFault_Handler+0x4>

08002f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f98:	e7fe      	b.n	8002f98 <UsageFault_Handler+0x4>

08002f9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f9e:	bf00      	nop
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	FatFsCnt++;
 8002fac:	4b0a      	ldr	r3, [pc, #40]	; (8002fd8 <TIM3_IRQHandler+0x30>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	4b08      	ldr	r3, [pc, #32]	; (8002fd8 <TIM3_IRQHandler+0x30>)
 8002fb8:	701a      	strb	r2, [r3, #0]
	if (FatFsCnt >= 10)
 8002fba:	4b07      	ldr	r3, [pc, #28]	; (8002fd8 <TIM3_IRQHandler+0x30>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b09      	cmp	r3, #9
 8002fc2:	d904      	bls.n	8002fce <TIM3_IRQHandler+0x26>
	{
		FatFsCnt = 0;
 8002fc4:	4b04      	ldr	r3, [pc, #16]	; (8002fd8 <TIM3_IRQHandler+0x30>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8002fca:	f7ff ffb3 	bl	8002f34 <SDTimer_Handler>
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002fce:	4803      	ldr	r0, [pc, #12]	; (8002fdc <TIM3_IRQHandler+0x34>)
 8002fd0:	f007 f965 	bl	800a29e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002fd4:	bf00      	nop
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	20002e08 	.word	0x20002e08
 8002fdc:	20002dc0 	.word	0x20002dc0

08002fe0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002fe4:	4802      	ldr	r0, [pc, #8]	; (8002ff0 <SDIO_IRQHandler+0x10>)
 8002fe6:	f006 f909 	bl	80091fc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002fea:	bf00      	nop
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	20002874 	.word	0x20002874

08002ff4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002ff8:	4802      	ldr	r0, [pc, #8]	; (8003004 <DMA2_Stream2_IRQHandler+0x10>)
 8002ffa:	f001 fd69 	bl	8004ad0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002ffe:	bf00      	nop
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	20000a6c 	.word	0x20000a6c

08003008 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800300c:	4802      	ldr	r0, [pc, #8]	; (8003018 <DMA2_Stream3_IRQHandler+0x10>)
 800300e:	f001 fd5f 	bl	8004ad0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003012:	bf00      	nop
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	200028f8 	.word	0x200028f8

0800301c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003020:	4802      	ldr	r0, [pc, #8]	; (800302c <OTG_FS_IRQHandler+0x10>)
 8003022:	f003 f847 	bl	80060b4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003026:	bf00      	nop
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	200074c0 	.word	0x200074c0

08003030 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8003034:	4802      	ldr	r0, [pc, #8]	; (8003040 <DMA2_Stream6_IRQHandler+0x10>)
 8003036:	f001 fd4b 	bl	8004ad0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800303a:	bf00      	nop
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	20002958 	.word	0x20002958

08003044 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
	return 1;
 8003048:	2301      	movs	r3, #1
}
 800304a:	4618      	mov	r0, r3
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <_kill>:

int _kill(int pid, int sig)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 800305e:	f015 ff9f 	bl	8018fa0 <__errno>
 8003062:	4603      	mov	r3, r0
 8003064:	2216      	movs	r2, #22
 8003066:	601a      	str	r2, [r3, #0]
	return -1;
 8003068:	f04f 33ff 	mov.w	r3, #4294967295
}
 800306c:	4618      	mov	r0, r3
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <_exit>:

void _exit(int status)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800307c:	f04f 31ff 	mov.w	r1, #4294967295
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7ff ffe7 	bl	8003054 <_kill>
	while (1)
 8003086:	e7fe      	b.n	8003086 <_exit+0x12>

08003088 <_read>:
	{
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	e00a      	b.n	80030b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800309a:	f3af 8000 	nop.w
 800309e:	4601      	mov	r1, r0
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	1c5a      	adds	r2, r3, #1
 80030a4:	60ba      	str	r2, [r7, #8]
 80030a6:	b2ca      	uxtb	r2, r1
 80030a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	3301      	adds	r3, #1
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	dbf0      	blt.n	800309a <_read+0x12>
	}

	return len;
 80030b8:	687b      	ldr	r3, [r7, #4]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3718      	adds	r7, #24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b086      	sub	sp, #24
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	60f8      	str	r0, [r7, #12]
 80030ca:	60b9      	str	r1, [r7, #8]
 80030cc:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	e009      	b.n	80030e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	60ba      	str	r2, [r7, #8]
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff f8ba 	bl	8002256 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	3301      	adds	r3, #1
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	dbf1      	blt.n	80030d4 <_write+0x12>
	}
	return len;
 80030f0:	687b      	ldr	r3, [r7, #4]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3718      	adds	r7, #24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <_close>:

int _close(int file)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b083      	sub	sp, #12
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8003102:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003106:	4618      	mov	r0, r3
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <_fstat>:

int _fstat(int file, struct stat *st)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003122:	605a      	str	r2, [r3, #4]
	return 0;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <_isatty>:

int _isatty(int file)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 800313a:	2301      	movs	r3, #1
}
 800313c:	4618      	mov	r0, r3
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3714      	adds	r7, #20
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
	...

08003164 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 800316c:	4a14      	ldr	r2, [pc, #80]	; (80031c0 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800316e:	4b15      	ldr	r3, [pc, #84]	; (80031c4 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end)
 8003178:	4b13      	ldr	r3, [pc, #76]	; (80031c8 <_sbrk+0x64>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d102      	bne.n	8003186 <_sbrk+0x22>
	{
		__sbrk_heap_end = &_end;
 8003180:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <_sbrk+0x64>)
 8003182:	4a12      	ldr	r2, [pc, #72]	; (80031cc <_sbrk+0x68>)
 8003184:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap)
 8003186:	4b10      	ldr	r3, [pc, #64]	; (80031c8 <_sbrk+0x64>)
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4413      	add	r3, r2
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	429a      	cmp	r2, r3
 8003192:	d207      	bcs.n	80031a4 <_sbrk+0x40>
	{
		errno = ENOMEM;
 8003194:	f015 ff04 	bl	8018fa0 <__errno>
 8003198:	4603      	mov	r3, r0
 800319a:	220c      	movs	r2, #12
 800319c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800319e:	f04f 33ff 	mov.w	r3, #4294967295
 80031a2:	e009      	b.n	80031b8 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80031a4:	4b08      	ldr	r3, [pc, #32]	; (80031c8 <_sbrk+0x64>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80031aa:	4b07      	ldr	r3, [pc, #28]	; (80031c8 <_sbrk+0x64>)
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4413      	add	r3, r2
 80031b2:	4a05      	ldr	r2, [pc, #20]	; (80031c8 <_sbrk+0x64>)
 80031b4:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80031b6:	68fb      	ldr	r3, [r7, #12]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3718      	adds	r7, #24
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	20020000 	.word	0x20020000
 80031c4:	00000800 	.word	0x00000800
 80031c8:	20002e0c 	.word	0x20002e0c
 80031cc:	20007d90 	.word	0x20007d90

080031d0 <SystemInit>:
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 80031d4:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <SystemInit+0x20>)
 80031d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031da:	4a05      	ldr	r2, [pc, #20]	; (80031f0 <SystemInit+0x20>)
 80031dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031e4:	bf00      	nop
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	e000ed00 	.word	0xe000ed00

080031f4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08e      	sub	sp, #56	; 0x38
 80031f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	605a      	str	r2, [r3, #4]
 8003204:	609a      	str	r2, [r3, #8]
 8003206:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003208:	f107 0320 	add.w	r3, r7, #32
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003212:	1d3b      	adds	r3, r7, #4
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	605a      	str	r2, [r3, #4]
 800321a:	609a      	str	r2, [r3, #8]
 800321c:	60da      	str	r2, [r3, #12]
 800321e:	611a      	str	r2, [r3, #16]
 8003220:	615a      	str	r2, [r3, #20]
 8003222:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003224:	4b2b      	ldr	r3, [pc, #172]	; (80032d4 <MX_TIM2_Init+0xe0>)
 8003226:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800322a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4200-1;
 800322c:	4b29      	ldr	r3, [pc, #164]	; (80032d4 <MX_TIM2_Init+0xe0>)
 800322e:	f241 0267 	movw	r2, #4199	; 0x1067
 8003232:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003234:	4b27      	ldr	r3, [pc, #156]	; (80032d4 <MX_TIM2_Init+0xe0>)
 8003236:	2200      	movs	r2, #0
 8003238:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800323a:	4b26      	ldr	r3, [pc, #152]	; (80032d4 <MX_TIM2_Init+0xe0>)
 800323c:	2263      	movs	r2, #99	; 0x63
 800323e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003240:	4b24      	ldr	r3, [pc, #144]	; (80032d4 <MX_TIM2_Init+0xe0>)
 8003242:	2200      	movs	r2, #0
 8003244:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003246:	4b23      	ldr	r3, [pc, #140]	; (80032d4 <MX_TIM2_Init+0xe0>)
 8003248:	2200      	movs	r2, #0
 800324a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800324c:	4821      	ldr	r0, [pc, #132]	; (80032d4 <MX_TIM2_Init+0xe0>)
 800324e:	f006 fe7d 	bl	8009f4c <HAL_TIM_Base_Init>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003258:	f7ff f8a8 	bl	80023ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800325c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003260:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003262:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003266:	4619      	mov	r1, r3
 8003268:	481a      	ldr	r0, [pc, #104]	; (80032d4 <MX_TIM2_Init+0xe0>)
 800326a:	f007 f9e3 	bl	800a634 <HAL_TIM_ConfigClockSource>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003274:	f7ff f89a 	bl	80023ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003278:	4816      	ldr	r0, [pc, #88]	; (80032d4 <MX_TIM2_Init+0xe0>)
 800327a:	f006 ffb7 	bl	800a1ec <HAL_TIM_PWM_Init>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003284:	f7ff f892 	bl	80023ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003288:	2320      	movs	r3, #32
 800328a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800328c:	2300      	movs	r3, #0
 800328e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003290:	f107 0320 	add.w	r3, r7, #32
 8003294:	4619      	mov	r1, r3
 8003296:	480f      	ldr	r0, [pc, #60]	; (80032d4 <MX_TIM2_Init+0xe0>)
 8003298:	f007 fda6 	bl	800ade8 <HAL_TIMEx_MasterConfigSynchronization>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80032a2:	f7ff f883 	bl	80023ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032a6:	2360      	movs	r3, #96	; 0x60
 80032a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80032aa:	2300      	movs	r3, #0
 80032ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032ae:	2300      	movs	r3, #0
 80032b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032b2:	2300      	movs	r3, #0
 80032b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032b6:	1d3b      	adds	r3, r7, #4
 80032b8:	2200      	movs	r2, #0
 80032ba:	4619      	mov	r1, r3
 80032bc:	4805      	ldr	r0, [pc, #20]	; (80032d4 <MX_TIM2_Init+0xe0>)
 80032be:	f007 f8f7 	bl	800a4b0 <HAL_TIM_PWM_ConfigChannel>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80032c8:	f7ff f870 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80032cc:	bf00      	nop
 80032ce:	3738      	adds	r7, #56	; 0x38
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	20002e10 	.word	0x20002e10

080032d8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032de:	463b      	mov	r3, r7
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80032e6:	4b15      	ldr	r3, [pc, #84]	; (800333c <MX_TIM6_Init+0x64>)
 80032e8:	4a15      	ldr	r2, [pc, #84]	; (8003340 <MX_TIM6_Init+0x68>)
 80032ea:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 42000-1;
 80032ec:	4b13      	ldr	r3, [pc, #76]	; (800333c <MX_TIM6_Init+0x64>)
 80032ee:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80032f2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032f4:	4b11      	ldr	r3, [pc, #68]	; (800333c <MX_TIM6_Init+0x64>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80032fa:	4b10      	ldr	r3, [pc, #64]	; (800333c <MX_TIM6_Init+0x64>)
 80032fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003300:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003302:	4b0e      	ldr	r3, [pc, #56]	; (800333c <MX_TIM6_Init+0x64>)
 8003304:	2200      	movs	r2, #0
 8003306:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003308:	480c      	ldr	r0, [pc, #48]	; (800333c <MX_TIM6_Init+0x64>)
 800330a:	f006 fe1f 	bl	8009f4c <HAL_TIM_Base_Init>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003314:	f7ff f84a 	bl	80023ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003318:	2300      	movs	r3, #0
 800331a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800331c:	2300      	movs	r3, #0
 800331e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003320:	463b      	mov	r3, r7
 8003322:	4619      	mov	r1, r3
 8003324:	4805      	ldr	r0, [pc, #20]	; (800333c <MX_TIM6_Init+0x64>)
 8003326:	f007 fd5f 	bl	800ade8 <HAL_TIMEx_MasterConfigSynchronization>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003330:	f7ff f83c 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003334:	bf00      	nop
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	20002e58 	.word	0x20002e58
 8003340:	40001000 	.word	0x40001000

08003344 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b096      	sub	sp, #88	; 0x58
 8003348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800334a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	605a      	str	r2, [r3, #4]
 8003354:	609a      	str	r2, [r3, #8]
 8003356:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003358:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	605a      	str	r2, [r3, #4]
 800336c:	609a      	str	r2, [r3, #8]
 800336e:	60da      	str	r2, [r3, #12]
 8003370:	611a      	str	r2, [r3, #16]
 8003372:	615a      	str	r2, [r3, #20]
 8003374:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003376:	1d3b      	adds	r3, r7, #4
 8003378:	2220      	movs	r2, #32
 800337a:	2100      	movs	r1, #0
 800337c:	4618      	mov	r0, r3
 800337e:	f015 fd47 	bl	8018e10 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003382:	4b3d      	ldr	r3, [pc, #244]	; (8003478 <MX_TIM8_Init+0x134>)
 8003384:	4a3d      	ldr	r2, [pc, #244]	; (800347c <MX_TIM8_Init+0x138>)
 8003386:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1800-1;
 8003388:	4b3b      	ldr	r3, [pc, #236]	; (8003478 <MX_TIM8_Init+0x134>)
 800338a:	f240 7207 	movw	r2, #1799	; 0x707
 800338e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003390:	4b39      	ldr	r3, [pc, #228]	; (8003478 <MX_TIM8_Init+0x134>)
 8003392:	2200      	movs	r2, #0
 8003394:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 270-1;
 8003396:	4b38      	ldr	r3, [pc, #224]	; (8003478 <MX_TIM8_Init+0x134>)
 8003398:	f240 120d 	movw	r2, #269	; 0x10d
 800339c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800339e:	4b36      	ldr	r3, [pc, #216]	; (8003478 <MX_TIM8_Init+0x134>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80033a4:	4b34      	ldr	r3, [pc, #208]	; (8003478 <MX_TIM8_Init+0x134>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033aa:	4b33      	ldr	r3, [pc, #204]	; (8003478 <MX_TIM8_Init+0x134>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80033b0:	4831      	ldr	r0, [pc, #196]	; (8003478 <MX_TIM8_Init+0x134>)
 80033b2:	f006 fdcb 	bl	8009f4c <HAL_TIM_Base_Init>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80033bc:	f7fe fff6 	bl	80023ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033c4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80033c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80033ca:	4619      	mov	r1, r3
 80033cc:	482a      	ldr	r0, [pc, #168]	; (8003478 <MX_TIM8_Init+0x134>)
 80033ce:	f007 f931 	bl	800a634 <HAL_TIM_ConfigClockSource>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80033d8:	f7fe ffe8 	bl	80023ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80033dc:	4826      	ldr	r0, [pc, #152]	; (8003478 <MX_TIM8_Init+0x134>)
 80033de:	f006 ff05 	bl	800a1ec <HAL_TIM_PWM_Init>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80033e8:	f7fe ffe0 	bl	80023ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80033ec:	2320      	movs	r3, #32
 80033ee:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033f0:	2300      	movs	r3, #0
 80033f2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80033f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80033f8:	4619      	mov	r1, r3
 80033fa:	481f      	ldr	r0, [pc, #124]	; (8003478 <MX_TIM8_Init+0x134>)
 80033fc:	f007 fcf4 	bl	800ade8 <HAL_TIMEx_MasterConfigSynchronization>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8003406:	f7fe ffd1 	bl	80023ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800340a:	2360      	movs	r3, #96	; 0x60
 800340c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800340e:	2300      	movs	r3, #0
 8003410:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003412:	2300      	movs	r3, #0
 8003414:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003416:	2300      	movs	r3, #0
 8003418:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800341a:	2300      	movs	r3, #0
 800341c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800341e:	2300      	movs	r3, #0
 8003420:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003422:	2300      	movs	r3, #0
 8003424:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800342a:	2200      	movs	r2, #0
 800342c:	4619      	mov	r1, r3
 800342e:	4812      	ldr	r0, [pc, #72]	; (8003478 <MX_TIM8_Init+0x134>)
 8003430:	f007 f83e 	bl	800a4b0 <HAL_TIM_PWM_ConfigChannel>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 800343a:	f7fe ffb7 	bl	80023ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800343e:	2300      	movs	r3, #0
 8003440:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003442:	2300      	movs	r3, #0
 8003444:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003446:	2300      	movs	r3, #0
 8003448:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800344a:	2300      	movs	r3, #0
 800344c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800344e:	2300      	movs	r3, #0
 8003450:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003452:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003456:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003458:	2300      	movs	r3, #0
 800345a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800345c:	1d3b      	adds	r3, r7, #4
 800345e:	4619      	mov	r1, r3
 8003460:	4805      	ldr	r0, [pc, #20]	; (8003478 <MX_TIM8_Init+0x134>)
 8003462:	f007 fd3d 	bl	800aee0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 800346c:	f7fe ff9e 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003470:	bf00      	nop
 8003472:	3758      	adds	r7, #88	; 0x58
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	20002ea0 	.word	0x20002ea0
 800347c:	40010400 	.word	0x40010400

08003480 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003480:	b480      	push	{r7}
 8003482:	b087      	sub	sp, #28
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003490:	d10e      	bne.n	80034b0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003492:	2300      	movs	r3, #0
 8003494:	617b      	str	r3, [r7, #20]
 8003496:	4b1d      	ldr	r3, [pc, #116]	; (800350c <HAL_TIM_Base_MspInit+0x8c>)
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	4a1c      	ldr	r2, [pc, #112]	; (800350c <HAL_TIM_Base_MspInit+0x8c>)
 800349c:	f043 0301 	orr.w	r3, r3, #1
 80034a0:	6413      	str	r3, [r2, #64]	; 0x40
 80034a2:	4b1a      	ldr	r3, [pc, #104]	; (800350c <HAL_TIM_Base_MspInit+0x8c>)
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80034ae:	e026      	b.n	80034fe <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM6)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a16      	ldr	r2, [pc, #88]	; (8003510 <HAL_TIM_Base_MspInit+0x90>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d10e      	bne.n	80034d8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80034ba:	2300      	movs	r3, #0
 80034bc:	613b      	str	r3, [r7, #16]
 80034be:	4b13      	ldr	r3, [pc, #76]	; (800350c <HAL_TIM_Base_MspInit+0x8c>)
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	4a12      	ldr	r2, [pc, #72]	; (800350c <HAL_TIM_Base_MspInit+0x8c>)
 80034c4:	f043 0310 	orr.w	r3, r3, #16
 80034c8:	6413      	str	r3, [r2, #64]	; 0x40
 80034ca:	4b10      	ldr	r3, [pc, #64]	; (800350c <HAL_TIM_Base_MspInit+0x8c>)
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	f003 0310 	and.w	r3, r3, #16
 80034d2:	613b      	str	r3, [r7, #16]
 80034d4:	693b      	ldr	r3, [r7, #16]
}
 80034d6:	e012      	b.n	80034fe <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM8)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a0d      	ldr	r2, [pc, #52]	; (8003514 <HAL_TIM_Base_MspInit+0x94>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d10d      	bne.n	80034fe <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80034e2:	2300      	movs	r3, #0
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	4b09      	ldr	r3, [pc, #36]	; (800350c <HAL_TIM_Base_MspInit+0x8c>)
 80034e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ea:	4a08      	ldr	r2, [pc, #32]	; (800350c <HAL_TIM_Base_MspInit+0x8c>)
 80034ec:	f043 0302 	orr.w	r3, r3, #2
 80034f0:	6453      	str	r3, [r2, #68]	; 0x44
 80034f2:	4b06      	ldr	r3, [pc, #24]	; (800350c <HAL_TIM_Base_MspInit+0x8c>)
 80034f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	68fb      	ldr	r3, [r7, #12]
}
 80034fe:	bf00      	nop
 8003500:	371c      	adds	r7, #28
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	40023800 	.word	0x40023800
 8003510:	40001000 	.word	0x40001000
 8003514:	40010400 	.word	0x40010400

08003518 <startAdcDma>:
 */
/******************************************************************************
 * Function Definitions
 *******************************************************************************/
void startAdcDma(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
	osDelayUntil((uint32_t*) osKernelSysTick(), SD_INIT_TIME);
 800351c:	f010 fedc 	bl	80142d8 <osKernelSysTick>
 8003520:	4603      	mov	r3, r0
 8003522:	210a      	movs	r1, #10
 8003524:	4618      	mov	r0, r3
 8003526:	f011 f8ed 	bl	8014704 <osDelayUntil>
	HAL_ADC_Start_DMA(TRAVEL_SENSOR_ADC_CHANNEL, (uint32_t*) adcDataWrite,
 800352a:	22c0      	movs	r2, #192	; 0xc0
 800352c:	4905      	ldr	r1, [pc, #20]	; (8003544 <startAdcDma+0x2c>)
 800352e:	4806      	ldr	r0, [pc, #24]	; (8003548 <startAdcDma+0x30>)
 8003530:	f000 fc30 	bl	8003d94 <HAL_ADC_Start_DMA>
	TRAVEL_SENSOR_BUFFER_SIZE);
#ifdef CHECK_SAMPLE_TIME
	HAL_TIM_Base_Start(TRAVEL_SENSOR_TIMER_SAMPLE_CHECK);
 8003534:	4805      	ldr	r0, [pc, #20]	; (800354c <startAdcDma+0x34>)
 8003536:	f006 fd59 	bl	8009fec <HAL_TIM_Base_Start>
#endif
	HAL_TIM_Base_Start(TRAVEL_SENSOR_ADC_TRIGER_TIMER);
 800353a:	4805      	ldr	r0, [pc, #20]	; (8003550 <startAdcDma+0x38>)
 800353c:	f006 fd56 	bl	8009fec <HAL_TIM_Base_Start>
}
 8003540:	bf00      	nop
 8003542:	bd80      	pop	{r7, pc}
 8003544:	20002ef4 	.word	0x20002ef4
 8003548:	20000a24 	.word	0x20000a24
 800354c:	20002e58 	.word	0x20002e58
 8003550:	20002e10 	.word	0x20002e10

08003554 <stopAdcDma>:
void stopAdcDma(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(TRAVEL_SENSOR_ADC_CHANNEL);
 8003558:	4805      	ldr	r0, [pc, #20]	; (8003570 <stopAdcDma+0x1c>)
 800355a:	f000 fd2b 	bl	8003fb4 <HAL_ADC_Stop_DMA>
#ifdef CHECK_SAMPLE_TIME
	HAL_TIM_Base_Stop(TRAVEL_SENSOR_TIMER_SAMPLE_CHECK);
 800355e:	4805      	ldr	r0, [pc, #20]	; (8003574 <stopAdcDma+0x20>)
 8003560:	f006 fdac 	bl	800a0bc <HAL_TIM_Base_Stop>
#endif
	HAL_TIM_Base_Stop(TRAVEL_SENSOR_ADC_TRIGER_TIMER);
 8003564:	4804      	ldr	r0, [pc, #16]	; (8003578 <stopAdcDma+0x24>)
 8003566:	f006 fda9 	bl	800a0bc <HAL_TIM_Base_Stop>
}
 800356a:	bf00      	nop
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	20000a24 	.word	0x20000a24
 8003574:	20002e58 	.word	0x20002e58
 8003578:	20002e10 	.word	0x20002e10

0800357c <travelPressureSensorCalibration>:
int travelPressureSensorCalibration(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
	int status;

		memset(&calibrationValues, 0, sizeof(calibration_t));
 8003582:	220c      	movs	r2, #12
 8003584:	2100      	movs	r1, #0
 8003586:	4857      	ldr	r0, [pc, #348]	; (80036e4 <travelPressureSensorCalibration+0x168>)
 8003588:	f015 fc42 	bl	8018e10 <memset>
		normalizeTravelData(inBufPtr);
 800358c:	4b56      	ldr	r3, [pc, #344]	; (80036e8 <travelPressureSensorCalibration+0x16c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f000 fa7f 	bl	8003a94 <normalizeTravelData>
		for (int i = 0; i <= TRAVEL_SENSOR_BUFFER_SIZE / 2 - NUMBER_OF_SENSORS;
 8003596:	2300      	movs	r3, #0
 8003598:	607b      	str	r3, [r7, #4]
 800359a:	e06d      	b.n	8003678 <travelPressureSensorCalibration+0xfc>
				i += NUMBER_OF_SENSORS)
		{
			calibrationValues.rearTravelSensor += outBufPtr[i
 800359c:	4b53      	ldr	r3, [pc, #332]	; (80036ec <travelPressureSensorCalibration+0x170>)
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3301      	adds	r3, #1
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	4413      	add	r3, r2
 80035a8:	881b      	ldrh	r3, [r3, #0]
 80035aa:	b219      	sxth	r1, r3
 80035ac:	4b4d      	ldr	r3, [pc, #308]	; (80036e4 <travelPressureSensorCalibration+0x168>)
 80035ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	b28b      	uxth	r3, r1
 80035b6:	4413      	add	r3, r2
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	b21a      	sxth	r2, r3
 80035bc:	4b49      	ldr	r3, [pc, #292]	; (80036e4 <travelPressureSensorCalibration+0x168>)
 80035be:	805a      	strh	r2, [r3, #2]
					+ REAR_TRAVEL_BUFFER_POSITION];
			calibrationValues.frontTravelSensor += outBufPtr[i
 80035c0:	4b4a      	ldr	r3, [pc, #296]	; (80036ec <travelPressureSensorCalibration+0x170>)
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	4413      	add	r3, r2
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	b219      	sxth	r1, r3
 80035ce:	4b45      	ldr	r3, [pc, #276]	; (80036e4 <travelPressureSensorCalibration+0x168>)
 80035d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	b28b      	uxth	r3, r1
 80035d8:	4413      	add	r3, r2
 80035da:	b29b      	uxth	r3, r3
 80035dc:	b21a      	sxth	r2, r3
 80035de:	4b41      	ldr	r3, [pc, #260]	; (80036e4 <travelPressureSensorCalibration+0x168>)
 80035e0:	801a      	strh	r2, [r3, #0]
					+ FRONT_TRAVEL_BUFFER_POSITION];
			calibrationValues.rearPressureSensor += outBufPtr[i
 80035e2:	4b42      	ldr	r3, [pc, #264]	; (80036ec <travelPressureSensorCalibration+0x170>)
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	3303      	adds	r3, #3
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	4413      	add	r3, r2
 80035ee:	881b      	ldrh	r3, [r3, #0]
 80035f0:	b219      	sxth	r1, r3
 80035f2:	4b3c      	ldr	r3, [pc, #240]	; (80036e4 <travelPressureSensorCalibration+0x168>)
 80035f4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	b28b      	uxth	r3, r1
 80035fc:	4413      	add	r3, r2
 80035fe:	b29b      	uxth	r3, r3
 8003600:	b21a      	sxth	r2, r3
 8003602:	4b38      	ldr	r3, [pc, #224]	; (80036e4 <travelPressureSensorCalibration+0x168>)
 8003604:	80da      	strh	r2, [r3, #6]
					+ REAR_PRESSURE_BUFFER_POSITION];
			calibrationValues.frontPressureSensor += outBufPtr[i
 8003606:	4b39      	ldr	r3, [pc, #228]	; (80036ec <travelPressureSensorCalibration+0x170>)
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3302      	adds	r3, #2
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	4413      	add	r3, r2
 8003612:	881b      	ldrh	r3, [r3, #0]
 8003614:	b219      	sxth	r1, r3
 8003616:	4b33      	ldr	r3, [pc, #204]	; (80036e4 <travelPressureSensorCalibration+0x168>)
 8003618:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800361c:	b29a      	uxth	r2, r3
 800361e:	b28b      	uxth	r3, r1
 8003620:	4413      	add	r3, r2
 8003622:	b29b      	uxth	r3, r3
 8003624:	b21a      	sxth	r2, r3
 8003626:	4b2f      	ldr	r3, [pc, #188]	; (80036e4 <travelPressureSensorCalibration+0x168>)
 8003628:	809a      	strh	r2, [r3, #4]
					+ FRONT_PRESSURE_BUFFER_POSITION];
			calibrationValues.leftBrakeSensor += outBufPtr[i
 800362a:	4b30      	ldr	r3, [pc, #192]	; (80036ec <travelPressureSensorCalibration+0x170>)
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	3304      	adds	r3, #4
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	4413      	add	r3, r2
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	b219      	sxth	r1, r3
 800363a:	4b2a      	ldr	r3, [pc, #168]	; (80036e4 <travelPressureSensorCalibration+0x168>)
 800363c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003640:	b29a      	uxth	r2, r3
 8003642:	b28b      	uxth	r3, r1
 8003644:	4413      	add	r3, r2
 8003646:	b29b      	uxth	r3, r3
 8003648:	b21a      	sxth	r2, r3
 800364a:	4b26      	ldr	r3, [pc, #152]	; (80036e4 <travelPressureSensorCalibration+0x168>)
 800364c:	811a      	strh	r2, [r3, #8]
					+ LEFT_BRAKE_POSITION];
			calibrationValues.rightBrakeSensor += outBufPtr[i
 800364e:	4b27      	ldr	r3, [pc, #156]	; (80036ec <travelPressureSensorCalibration+0x170>)
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3305      	adds	r3, #5
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	4413      	add	r3, r2
 800365a:	881b      	ldrh	r3, [r3, #0]
 800365c:	b219      	sxth	r1, r3
 800365e:	4b21      	ldr	r3, [pc, #132]	; (80036e4 <travelPressureSensorCalibration+0x168>)
 8003660:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003664:	b29a      	uxth	r2, r3
 8003666:	b28b      	uxth	r3, r1
 8003668:	4413      	add	r3, r2
 800366a:	b29b      	uxth	r3, r3
 800366c:	b21a      	sxth	r2, r3
 800366e:	4b1d      	ldr	r3, [pc, #116]	; (80036e4 <travelPressureSensorCalibration+0x168>)
 8003670:	815a      	strh	r2, [r3, #10]
				i += NUMBER_OF_SENSORS)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3306      	adds	r3, #6
 8003676:	607b      	str	r3, [r7, #4]
		for (int i = 0; i <= TRAVEL_SENSOR_BUFFER_SIZE / 2 - NUMBER_OF_SENSORS;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b5a      	cmp	r3, #90	; 0x5a
 800367c:	d98e      	bls.n	800359c <travelPressureSensorCalibration+0x20>
					+ RIGHT_BRAKE_POSITION];

		}
		calibrationValues.rearTravelSensor = calibrationValues.rearTravelSensor
 800367e:	4b19      	ldr	r3, [pc, #100]	; (80036e4 <travelPressureSensorCalibration+0x168>)
 8003680:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
				/ (TRAVEL_SENSOR_BUFFER_SIZE / HALF_BUFF_SINGLE_SENSOR);
 8003684:	091b      	lsrs	r3, r3, #4
		calibrationValues.rearTravelSensor = calibrationValues.rearTravelSensor
 8003686:	b21a      	sxth	r2, r3
 8003688:	4b16      	ldr	r3, [pc, #88]	; (80036e4 <travelPressureSensorCalibration+0x168>)
 800368a:	805a      	strh	r2, [r3, #2]
		calibrationValues.frontTravelSensor =
				calibrationValues.frontTravelSensor
 800368c:	4b15      	ldr	r3, [pc, #84]	; (80036e4 <travelPressureSensorCalibration+0x168>)
 800368e:	f9b3 3000 	ldrsh.w	r3, [r3]
						/ (TRAVEL_SENSOR_BUFFER_SIZE / HALF_BUFF_SINGLE_SENSOR);
 8003692:	091b      	lsrs	r3, r3, #4
		calibrationValues.frontTravelSensor =
 8003694:	b21a      	sxth	r2, r3
 8003696:	4b13      	ldr	r3, [pc, #76]	; (80036e4 <travelPressureSensorCalibration+0x168>)
 8003698:	801a      	strh	r2, [r3, #0]
		calibrationValues.rearPressureSensor =
				calibrationValues.rearPressureSensor
 800369a:	4b12      	ldr	r3, [pc, #72]	; (80036e4 <travelPressureSensorCalibration+0x168>)
 800369c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
						/ (TRAVEL_SENSOR_BUFFER_SIZE / HALF_BUFF_SINGLE_SENSOR);
 80036a0:	091b      	lsrs	r3, r3, #4
		calibrationValues.rearPressureSensor =
 80036a2:	b21a      	sxth	r2, r3
 80036a4:	4b0f      	ldr	r3, [pc, #60]	; (80036e4 <travelPressureSensorCalibration+0x168>)
 80036a6:	80da      	strh	r2, [r3, #6]
		calibrationValues.frontPressureSensor =
				calibrationValues.frontPressureSensor
 80036a8:	4b0e      	ldr	r3, [pc, #56]	; (80036e4 <travelPressureSensorCalibration+0x168>)
 80036aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
						/ (TRAVEL_SENSOR_BUFFER_SIZE / HALF_BUFF_SINGLE_SENSOR);
 80036ae:	091b      	lsrs	r3, r3, #4
		calibrationValues.frontPressureSensor =
 80036b0:	b21a      	sxth	r2, r3
 80036b2:	4b0c      	ldr	r3, [pc, #48]	; (80036e4 <travelPressureSensorCalibration+0x168>)
 80036b4:	809a      	strh	r2, [r3, #4]
		calibrationValues.leftBrakeSensor = calibrationValues.leftBrakeSensor
 80036b6:	4b0b      	ldr	r3, [pc, #44]	; (80036e4 <travelPressureSensorCalibration+0x168>)
 80036b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
				/ (TRAVEL_SENSOR_BUFFER_SIZE / HALF_BUFF_SINGLE_SENSOR);
 80036bc:	091b      	lsrs	r3, r3, #4
		calibrationValues.leftBrakeSensor = calibrationValues.leftBrakeSensor
 80036be:	b21a      	sxth	r2, r3
 80036c0:	4b08      	ldr	r3, [pc, #32]	; (80036e4 <travelPressureSensorCalibration+0x168>)
 80036c2:	811a      	strh	r2, [r3, #8]
		calibrationValues.rightBrakeSensor = calibrationValues.rightBrakeSensor
 80036c4:	4b07      	ldr	r3, [pc, #28]	; (80036e4 <travelPressureSensorCalibration+0x168>)
 80036c6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
				/ (TRAVEL_SENSOR_BUFFER_SIZE / HALF_BUFF_SINGLE_SENSOR);
 80036ca:	091b      	lsrs	r3, r3, #4
		calibrationValues.rightBrakeSensor = calibrationValues.rightBrakeSensor
 80036cc:	b21a      	sxth	r2, r3
 80036ce:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <travelPressureSensorCalibration+0x168>)
 80036d0:	815a      	strh	r2, [r3, #10]

		status = writeCalibrationData(&calibrationValues);
 80036d2:	4804      	ldr	r0, [pc, #16]	; (80036e4 <travelPressureSensorCalibration+0x168>)
 80036d4:	f7fd ff50 	bl	8001578 <writeCalibrationData>
 80036d8:	6038      	str	r0, [r7, #0]


	return (status);
 80036da:	683b      	ldr	r3, [r7, #0]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	20002ee8 	.word	0x20002ee8
 80036e8:	200031f4 	.word	0x200031f4
 80036ec:	200031f8 	.word	0x200031f8

080036f0 <processData>:

void processData(char *sensorsData)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
	normalizeTravelData(inBufPtr);
 80036f8:	4b07      	ldr	r3, [pc, #28]	; (8003718 <processData+0x28>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 f9c9 	bl	8003a94 <normalizeTravelData>
	sendDataSD(sensorsData, outBufPtr);
 8003702:	4b06      	ldr	r3, [pc, #24]	; (800371c <processData+0x2c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4619      	mov	r1, r3
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7fd fe3f 	bl	800138c <sendDataSD>
}
 800370e:	bf00      	nop
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	200031f4 	.word	0x200031f4
 800371c:	200031f8 	.word	0x200031f8

08003720 <processDataSag>:

void processDataSag(int16_t *sagFrontRear, int16_t *pressureFrontRear)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
	int numberOfElements = (TRAVEL_SENSOR_BUFFER_SIZE / HALF_BUFF_SINGLE_SENSOR);
 800372a:	2310      	movs	r3, #16
 800372c:	60bb      	str	r3, [r7, #8]
	int i;
	normalizeTravelData(inBufPtr);
 800372e:	4b60      	ldr	r3, [pc, #384]	; (80038b0 <processDataSag+0x190>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f000 f9ae 	bl	8003a94 <normalizeTravelData>
	sagFrontRear[0] = 0;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	801a      	strh	r2, [r3, #0]
	sagFrontRear[1] = 0;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	3302      	adds	r3, #2
 8003742:	2200      	movs	r2, #0
 8003744:	801a      	strh	r2, [r3, #0]
	pressureFrontRear[0] = 0;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	2200      	movs	r2, #0
 800374a:	801a      	strh	r2, [r3, #0]
	pressureFrontRear[1] = 0;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	3302      	adds	r3, #2
 8003750:	2200      	movs	r2, #0
 8003752:	801a      	strh	r2, [r3, #0]
	for (i = 0; i <= TRAVEL_SENSOR_BUFFER_SIZE / 2 - NUMBER_OF_SENSORS; i +=
 8003754:	2300      	movs	r3, #0
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	e04d      	b.n	80037f6 <processDataSag+0xd6>
	NUMBER_OF_SENSORS)
	{
		sagFrontRear[0] += outBufPtr[i + FRONT_TRAVEL_BUFFER_POSITION];
 800375a:	4b56      	ldr	r3, [pc, #344]	; (80038b4 <processDataSag+0x194>)
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	4413      	add	r3, r2
 8003764:	881b      	ldrh	r3, [r3, #0]
 8003766:	b219      	sxth	r1, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800376e:	b29a      	uxth	r2, r3
 8003770:	b28b      	uxth	r3, r1
 8003772:	4413      	add	r3, r2
 8003774:	b29b      	uxth	r3, r3
 8003776:	b21a      	sxth	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	801a      	strh	r2, [r3, #0]
		sagFrontRear[1] += outBufPtr[i + REAR_TRAVEL_BUFFER_POSITION];
 800377c:	4b4d      	ldr	r3, [pc, #308]	; (80038b4 <processDataSag+0x194>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	3301      	adds	r3, #1
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	4413      	add	r3, r2
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	b219      	sxth	r1, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3302      	adds	r3, #2
 8003790:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003794:	b29a      	uxth	r2, r3
 8003796:	b28b      	uxth	r3, r1
 8003798:	4413      	add	r3, r2
 800379a:	b29a      	uxth	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3302      	adds	r3, #2
 80037a0:	b212      	sxth	r2, r2
 80037a2:	801a      	strh	r2, [r3, #0]
		pressureFrontRear[0] += outBufPtr[i + FRONT_PRESSURE_BUFFER_POSITION];
 80037a4:	4b43      	ldr	r3, [pc, #268]	; (80038b4 <processDataSag+0x194>)
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	3302      	adds	r3, #2
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	4413      	add	r3, r2
 80037b0:	881b      	ldrh	r3, [r3, #0]
 80037b2:	b219      	sxth	r1, r3
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	b28b      	uxth	r3, r1
 80037be:	4413      	add	r3, r2
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	b21a      	sxth	r2, r3
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	801a      	strh	r2, [r3, #0]
		pressureFrontRear[1] += outBufPtr[i + REAR_PRESSURE_BUFFER_POSITION];
 80037c8:	4b3a      	ldr	r3, [pc, #232]	; (80038b4 <processDataSag+0x194>)
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	3303      	adds	r3, #3
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	4413      	add	r3, r2
 80037d4:	881b      	ldrh	r3, [r3, #0]
 80037d6:	b219      	sxth	r1, r3
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	3302      	adds	r3, #2
 80037dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	b28b      	uxth	r3, r1
 80037e4:	4413      	add	r3, r2
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	3302      	adds	r3, #2
 80037ec:	b212      	sxth	r2, r2
 80037ee:	801a      	strh	r2, [r3, #0]
	for (i = 0; i <= TRAVEL_SENSOR_BUFFER_SIZE / 2 - NUMBER_OF_SENSORS; i +=
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	3306      	adds	r3, #6
 80037f4:	60fb      	str	r3, [r7, #12]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2b5a      	cmp	r3, #90	; 0x5a
 80037fa:	d9ae      	bls.n	800375a <processDataSag+0x3a>

	}
	sagFrontRear[0] = sagFrontRear[0] / numberOfElements;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003802:	461a      	mov	r2, r3
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	fb92 f3f3 	sdiv	r3, r2, r3
 800380a:	b21a      	sxth	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	801a      	strh	r2, [r3, #0]
	sagFrontRear[1] = sagFrontRear[1] / numberOfElements;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3302      	adds	r3, #2
 8003814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003818:	461a      	mov	r2, r3
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	fb92 f2f3 	sdiv	r2, r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3302      	adds	r3, #2
 8003824:	b212      	sxth	r2, r2
 8003826:	801a      	strh	r2, [r3, #0]
	pressureFrontRear[0] = pressureFrontRear[0] / numberOfElements;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800382e:	461a      	mov	r2, r3
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	fb92 f3f3 	sdiv	r3, r2, r3
 8003836:	b21a      	sxth	r2, r3
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	801a      	strh	r2, [r3, #0]
	pressureFrontRear[1] = pressureFrontRear[1] / numberOfElements;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	3302      	adds	r3, #2
 8003840:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003844:	461a      	mov	r2, r3
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	fb92 f2f3 	sdiv	r2, r2, r3
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	3302      	adds	r3, #2
 8003850:	b212      	sxth	r2, r2
 8003852:	801a      	strh	r2, [r3, #0]

	sagFrontRear[0] = ((int16_t)CONVERT_TO_PERCENT * sagFrontRear[0])/(int16_t)(FRONT_SUSPENSION_TRAVEL - calibrationValues.frontTravelSensor);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f9b3 3000 	ldrsh.w	r3, [r3]
 800385a:	461a      	mov	r2, r3
 800385c:	2364      	movs	r3, #100	; 0x64
 800385e:	fb02 f303 	mul.w	r3, r2, r3
 8003862:	4a15      	ldr	r2, [pc, #84]	; (80038b8 <processDataSag+0x198>)
 8003864:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003868:	b292      	uxth	r2, r2
 800386a:	f5c2 7296 	rsb	r2, r2, #300	; 0x12c
 800386e:	b292      	uxth	r2, r2
 8003870:	b212      	sxth	r2, r2
 8003872:	fb93 f3f2 	sdiv	r3, r3, r2
 8003876:	b21a      	sxth	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	801a      	strh	r2, [r3, #0]
	sagFrontRear[1] = ((int16_t)CONVERT_TO_PERCENT * sagFrontRear[1])/ (int16_t)(REAR_SUSPENSION_TRAVEL - calibrationValues.rearTravelSensor);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3302      	adds	r3, #2
 8003880:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003884:	461a      	mov	r2, r3
 8003886:	2364      	movs	r3, #100	; 0x64
 8003888:	fb02 f303 	mul.w	r3, r2, r3
 800388c:	4a0a      	ldr	r2, [pc, #40]	; (80038b8 <processDataSag+0x198>)
 800388e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8003892:	b292      	uxth	r2, r2
 8003894:	f1c2 027d 	rsb	r2, r2, #125	; 0x7d
 8003898:	b292      	uxth	r2, r2
 800389a:	b212      	sxth	r2, r2
 800389c:	fb93 f2f2 	sdiv	r2, r3, r2
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3302      	adds	r3, #2
 80038a4:	b212      	sxth	r2, r2
 80038a6:	801a      	strh	r2, [r3, #0]
	UNUSED(0);
}
 80038a8:	bf00      	nop
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	200031f4 	.word	0x200031f4
 80038b4:	200031f8 	.word	0x200031f8
 80038b8:	20002ee8 	.word	0x20002ee8

080038bc <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
	inBufPtr = &adcDataWrite[0];
 80038c4:	4b07      	ldr	r3, [pc, #28]	; (80038e4 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 80038c6:	4a08      	ldr	r2, [pc, #32]	; (80038e8 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 80038c8:	601a      	str	r2, [r3, #0]
	outBufPtr = &adcDataRead[0];
 80038ca:	4b08      	ldr	r3, [pc, #32]	; (80038ec <HAL_ADC_ConvHalfCpltCallback+0x30>)
 80038cc:	4a08      	ldr	r2, [pc, #32]	; (80038f0 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 80038ce:	601a      	str	r2, [r3, #0]
	osSemaphoreRelease(travelSensorSemHandle);
 80038d0:	4b08      	ldr	r3, [pc, #32]	; (80038f4 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f010 fdef 	bl	80144b8 <osSemaphoreRelease>
}
 80038da:	bf00      	nop
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	200031f4 	.word	0x200031f4
 80038e8:	20002ef4 	.word	0x20002ef4
 80038ec:	200031f8 	.word	0x200031f8
 80038f0:	20003074 	.word	0x20003074
 80038f4:	20002424 	.word	0x20002424

080038f8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
#ifdef CHECK_SAMPLE_TIME
	previousTime = time_end;
 8003900:	4b1b      	ldr	r3, [pc, #108]	; (8003970 <HAL_ADC_ConvCpltCallback+0x78>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a1b      	ldr	r2, [pc, #108]	; (8003974 <HAL_ADC_ConvCpltCallback+0x7c>)
 8003906:	6013      	str	r3, [r2, #0]
	time_end = __HAL_TIM_GET_COUNTER(&htim6);
 8003908:	4b1b      	ldr	r3, [pc, #108]	; (8003978 <HAL_ADC_ConvCpltCallback+0x80>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	461a      	mov	r2, r3
 8003910:	4b17      	ldr	r3, [pc, #92]	; (8003970 <HAL_ADC_ConvCpltCallback+0x78>)
 8003912:	601a      	str	r2, [r3, #0]
	sample_time = NUMBER_OF_SENSORS
			* ((time_end - previousTime)
 8003914:	4b16      	ldr	r3, [pc, #88]	; (8003970 <HAL_ADC_ConvCpltCallback+0x78>)
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	4b16      	ldr	r3, [pc, #88]	; (8003974 <HAL_ADC_ConvCpltCallback+0x7c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	1ad3      	subs	r3, r2, r3
					/ (2 * ((float) (TRAVEL_SENSOR_BUFFER_SIZE))));
 800391e:	ee07 3a90 	vmov	s15, r3
 8003922:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003926:	eddf 6a15 	vldr	s13, [pc, #84]	; 800397c <HAL_ADC_ConvCpltCallback+0x84>
 800392a:	eec7 7a26 	vdiv.f32	s15, s14, s13
			* ((time_end - previousTime)
 800392e:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8003932:	ee67 7a87 	vmul.f32	s15, s15, s14
	sample_time = NUMBER_OF_SENSORS
 8003936:	4b12      	ldr	r3, [pc, #72]	; (8003980 <HAL_ADC_ConvCpltCallback+0x88>)
 8003938:	edc3 7a00 	vstr	s15, [r3]
	printf("semFullTime: %f\n", sample_time);
 800393c:	4b10      	ldr	r3, [pc, #64]	; (8003980 <HAL_ADC_ConvCpltCallback+0x88>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f7fc fe31 	bl	80005a8 <__aeabi_f2d>
 8003946:	4602      	mov	r2, r0
 8003948:	460b      	mov	r3, r1
 800394a:	480e      	ldr	r0, [pc, #56]	; (8003984 <HAL_ADC_ConvCpltCallback+0x8c>)
 800394c:	f015 f8cc 	bl	8018ae8 <iprintf>
#endif

	inBufPtr = &adcDataWrite[TRAVEL_SENSOR_BUFFER_SIZE / 2];
 8003950:	4b0d      	ldr	r3, [pc, #52]	; (8003988 <HAL_ADC_ConvCpltCallback+0x90>)
 8003952:	4a0e      	ldr	r2, [pc, #56]	; (800398c <HAL_ADC_ConvCpltCallback+0x94>)
 8003954:	601a      	str	r2, [r3, #0]
	outBufPtr = &adcDataRead[TRAVEL_SENSOR_BUFFER_SIZE / 2];
 8003956:	4b0e      	ldr	r3, [pc, #56]	; (8003990 <HAL_ADC_ConvCpltCallback+0x98>)
 8003958:	4a0e      	ldr	r2, [pc, #56]	; (8003994 <HAL_ADC_ConvCpltCallback+0x9c>)
 800395a:	601a      	str	r2, [r3, #0]
	osSemaphoreRelease(travelSensorSemHandle);
 800395c:	4b0e      	ldr	r3, [pc, #56]	; (8003998 <HAL_ADC_ConvCpltCallback+0xa0>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f010 fda9 	bl	80144b8 <osSemaphoreRelease>

}
 8003966:	bf00      	nop
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	200031fc 	.word	0x200031fc
 8003974:	20003200 	.word	0x20003200
 8003978:	20002e58 	.word	0x20002e58
 800397c:	43c00000 	.word	0x43c00000
 8003980:	20003204 	.word	0x20003204
 8003984:	0801d194 	.word	0x0801d194
 8003988:	200031f4 	.word	0x200031f4
 800398c:	20002fb4 	.word	0x20002fb4
 8003990:	200031f8 	.word	0x200031f8
 8003994:	20003134 	.word	0x20003134
 8003998:	20002424 	.word	0x20002424

0800399c <convertAdcToTravel>:

static int16_t convertAdcToTravel(volatile int16_t *adcDataWrite,
		int16_t sensorTravel)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	460b      	mov	r3, r1
 80039a6:	807b      	strh	r3, [r7, #2]

	return (*adcDataWrite * sensorTravel /  (float)ADC_RESOLUTION);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	881b      	ldrh	r3, [r3, #0]
 80039ac:	b21b      	sxth	r3, r3
 80039ae:	461a      	mov	r2, r3
 80039b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80039b4:	fb02 f303 	mul.w	r3, r2, r3
 80039b8:	ee07 3a90 	vmov	s15, r3
 80039bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039c0:	eddf 6a07 	vldr	s13, [pc, #28]	; 80039e0 <convertAdcToTravel+0x44>
 80039c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039cc:	ee17 3a90 	vmov	r3, s15
 80039d0:	b21b      	sxth	r3, r3
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	45800000 	.word	0x45800000
 80039e4:	00000000 	.word	0x00000000

080039e8 <convertAdcToPressure>:

static int16_t convertAdcToPressure(volatile int16_t *adcDataWrite,
		int16_t sensorMaxPressure)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	807b      	strh	r3, [r7, #2]

	return ((2.5 * CONVERT_MPa_to_PSI)
			* (*adcDataWrite * sensorMaxPressure / (float)(ADC_RESOLUTION)));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	b21b      	sxth	r3, r3
 80039fa:	461a      	mov	r2, r3
 80039fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a00:	fb02 f303 	mul.w	r3, r2, r3
 8003a04:	ee07 3a90 	vmov	s15, r3
 8003a08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a0c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003a48 <convertAdcToPressure+0x60>
 8003a10:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003a14:	ee16 0a90 	vmov	r0, s13
 8003a18:	f7fc fdc6 	bl	80005a8 <__aeabi_f2d>
 8003a1c:	a308      	add	r3, pc, #32	; (adr r3, 8003a40 <convertAdcToPressure+0x58>)
 8003a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a22:	f7fc fe19 	bl	8000658 <__aeabi_dmul>
 8003a26:	4602      	mov	r2, r0
 8003a28:	460b      	mov	r3, r1
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	f7fd f8c3 	bl	8000bb8 <__aeabi_d2iz>
 8003a32:	4603      	mov	r3, r0
 8003a34:	b21b      	sxth	r3, r3
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	00000000 	.word	0x00000000
 8003a44:	4076a800 	.word	0x4076a800
 8003a48:	45800000 	.word	0x45800000

08003a4c <convertAdcToBrakeForce>:

static int16_t convertAdcToBrakeForce(volatile int16_t *adcDataWrite,
		int16_t sensorBrakeMaxForce)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	807b      	strh	r3, [r7, #2]
	return (*adcDataWrite * sensorBrakeMaxForce /  (float)ADC_RESOLUTION);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	b21b      	sxth	r3, r3
 8003a5e:	461a      	mov	r2, r3
 8003a60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a64:	fb02 f303 	mul.w	r3, r2, r3
 8003a68:	ee07 3a90 	vmov	s15, r3
 8003a6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a70:	eddf 6a07 	vldr	s13, [pc, #28]	; 8003a90 <convertAdcToBrakeForce+0x44>
 8003a74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a7c:	ee17 3a90 	vmov	r3, s15
 8003a80:	b21b      	sxth	r3, r3
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	45800000 	.word	0x45800000

08003a94 <normalizeTravelData>:
static void normalizeTravelData(volatile int16_t *inBufPtr)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
	for (int n = 0; n <= (TRAVEL_SENSOR_BUFFER_SIZE / 2) - NUMBER_OF_SENSORS;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	e097      	b.n	8003bd2 <normalizeTravelData+0x13e>
			n += NUMBER_OF_SENSORS)
	{
		outBufPtr[n + FRONT_TRAVEL_BUFFER_POSITION] = convertAdcToTravel(
				&inBufPtr[n + FRONT_TRAVEL_BUFFER_POSITION],
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	005b      	lsls	r3, r3, #1
		outBufPtr[n + FRONT_TRAVEL_BUFFER_POSITION] = convertAdcToTravel(
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff ff74 	bl	800399c <convertAdcToTravel>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	b29a      	uxth	r2, r3
				FRONT_SENSOR_TRAVEL) - calibrationValues.frontTravelSensor;
 8003ab8:	4b4a      	ldr	r3, [pc, #296]	; (8003be4 <normalizeTravelData+0x150>)
 8003aba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	b299      	uxth	r1, r3
		outBufPtr[n + FRONT_TRAVEL_BUFFER_POSITION] = convertAdcToTravel(
 8003ac4:	4b48      	ldr	r3, [pc, #288]	; (8003be8 <normalizeTravelData+0x154>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	4413      	add	r3, r2
				FRONT_SENSOR_TRAVEL) - calibrationValues.frontTravelSensor;
 8003ace:	b20a      	sxth	r2, r1
		outBufPtr[n + FRONT_TRAVEL_BUFFER_POSITION] = convertAdcToTravel(
 8003ad0:	801a      	strh	r2, [r3, #0]
		outBufPtr[n + REAR_TRAVEL_BUFFER_POSITION] = convertAdcToTravel(
				&inBufPtr[n + REAR_TRAVEL_BUFFER_POSITION], REAR_SENSOR_TRAVEL)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	005b      	lsls	r3, r3, #1
		outBufPtr[n + REAR_TRAVEL_BUFFER_POSITION] = convertAdcToTravel(
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	4413      	add	r3, r2
 8003adc:	217d      	movs	r1, #125	; 0x7d
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7ff ff5c 	bl	800399c <convertAdcToTravel>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	b29a      	uxth	r2, r3
				- calibrationValues.rearTravelSensor;
 8003ae8:	4b3e      	ldr	r3, [pc, #248]	; (8003be4 <normalizeTravelData+0x150>)
 8003aea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	b299      	uxth	r1, r3
		outBufPtr[n + REAR_TRAVEL_BUFFER_POSITION] = convertAdcToTravel(
 8003af4:	4b3c      	ldr	r3, [pc, #240]	; (8003be8 <normalizeTravelData+0x154>)
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	3301      	adds	r3, #1
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	4413      	add	r3, r2
				- calibrationValues.rearTravelSensor;
 8003b00:	b20a      	sxth	r2, r1
		outBufPtr[n + REAR_TRAVEL_BUFFER_POSITION] = convertAdcToTravel(
 8003b02:	801a      	strh	r2, [r3, #0]
		outBufPtr[n + FRONT_PRESSURE_BUFFER_POSITION] = convertAdcToPressure(
				&inBufPtr[n + FRONT_PRESSURE_BUFFER_POSITION],
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	3302      	adds	r3, #2
 8003b08:	005b      	lsls	r3, r3, #1
		outBufPtr[n + FRONT_PRESSURE_BUFFER_POSITION] = convertAdcToPressure(
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	2106      	movs	r1, #6
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7ff ff69 	bl	80039e8 <convertAdcToPressure>
 8003b16:	4603      	mov	r3, r0
 8003b18:	b29a      	uxth	r2, r3
				PRESSURE_SENSOR_MAX_VALUE)
				- calibrationValues.frontPressureSensor;
 8003b1a:	4b32      	ldr	r3, [pc, #200]	; (8003be4 <normalizeTravelData+0x150>)
 8003b1c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	b299      	uxth	r1, r3
		outBufPtr[n + FRONT_PRESSURE_BUFFER_POSITION] = convertAdcToPressure(
 8003b26:	4b30      	ldr	r3, [pc, #192]	; (8003be8 <normalizeTravelData+0x154>)
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	3302      	adds	r3, #2
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	4413      	add	r3, r2
				- calibrationValues.frontPressureSensor;
 8003b32:	b20a      	sxth	r2, r1
		outBufPtr[n + FRONT_PRESSURE_BUFFER_POSITION] = convertAdcToPressure(
 8003b34:	801a      	strh	r2, [r3, #0]
		outBufPtr[n + REAR_PRESSURE_BUFFER_POSITION] = convertAdcToPressure(
				&inBufPtr[n + REAR_PRESSURE_BUFFER_POSITION],
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	3303      	adds	r3, #3
 8003b3a:	005b      	lsls	r3, r3, #1
		outBufPtr[n + REAR_PRESSURE_BUFFER_POSITION] = convertAdcToPressure(
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	4413      	add	r3, r2
 8003b40:	2106      	movs	r1, #6
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7ff ff50 	bl	80039e8 <convertAdcToPressure>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	b29a      	uxth	r2, r3
				PRESSURE_SENSOR_MAX_VALUE)
				- calibrationValues.rearPressureSensor;
 8003b4c:	4b25      	ldr	r3, [pc, #148]	; (8003be4 <normalizeTravelData+0x150>)
 8003b4e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	b299      	uxth	r1, r3
		outBufPtr[n + REAR_PRESSURE_BUFFER_POSITION] = convertAdcToPressure(
 8003b58:	4b23      	ldr	r3, [pc, #140]	; (8003be8 <normalizeTravelData+0x154>)
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	3303      	adds	r3, #3
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	4413      	add	r3, r2
				- calibrationValues.rearPressureSensor;
 8003b64:	b20a      	sxth	r2, r1
		outBufPtr[n + REAR_PRESSURE_BUFFER_POSITION] = convertAdcToPressure(
 8003b66:	801a      	strh	r2, [r3, #0]
		outBufPtr[n + LEFT_BRAKE_POSITION] = convertAdcToBrakeForce(
				&inBufPtr[n + LEFT_BRAKE_POSITION],
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	005b      	lsls	r3, r3, #1
		outBufPtr[n + LEFT_BRAKE_POSITION] = convertAdcToBrakeForce(
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	4413      	add	r3, r2
 8003b72:	2164      	movs	r1, #100	; 0x64
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7ff ff69 	bl	8003a4c <convertAdcToBrakeForce>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	b29a      	uxth	r2, r3
				BRAKE_SENSOR_MAX_FORCE) - calibrationValues.leftBrakeSensor;
 8003b7e:	4b19      	ldr	r3, [pc, #100]	; (8003be4 <normalizeTravelData+0x150>)
 8003b80:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	b299      	uxth	r1, r3
		outBufPtr[n + LEFT_BRAKE_POSITION] = convertAdcToBrakeForce(
 8003b8a:	4b17      	ldr	r3, [pc, #92]	; (8003be8 <normalizeTravelData+0x154>)
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	3304      	adds	r3, #4
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	4413      	add	r3, r2
				BRAKE_SENSOR_MAX_FORCE) - calibrationValues.leftBrakeSensor;
 8003b96:	b20a      	sxth	r2, r1
		outBufPtr[n + LEFT_BRAKE_POSITION] = convertAdcToBrakeForce(
 8003b98:	801a      	strh	r2, [r3, #0]
		outBufPtr[n + RIGHT_BRAKE_POSITION] = convertAdcToBrakeForce(
				&inBufPtr[n + RIGHT_BRAKE_POSITION],
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	3305      	adds	r3, #5
 8003b9e:	005b      	lsls	r3, r3, #1
		outBufPtr[n + RIGHT_BRAKE_POSITION] = convertAdcToBrakeForce(
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	2164      	movs	r1, #100	; 0x64
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7ff ff50 	bl	8003a4c <convertAdcToBrakeForce>
 8003bac:	4603      	mov	r3, r0
 8003bae:	b29a      	uxth	r2, r3
				BRAKE_SENSOR_MAX_FORCE) - calibrationValues.rightBrakeSensor;
 8003bb0:	4b0c      	ldr	r3, [pc, #48]	; (8003be4 <normalizeTravelData+0x150>)
 8003bb2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	b299      	uxth	r1, r3
		outBufPtr[n + RIGHT_BRAKE_POSITION] = convertAdcToBrakeForce(
 8003bbc:	4b0a      	ldr	r3, [pc, #40]	; (8003be8 <normalizeTravelData+0x154>)
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	3305      	adds	r3, #5
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	4413      	add	r3, r2
				BRAKE_SENSOR_MAX_FORCE) - calibrationValues.rightBrakeSensor;
 8003bc8:	b20a      	sxth	r2, r1
		outBufPtr[n + RIGHT_BRAKE_POSITION] = convertAdcToBrakeForce(
 8003bca:	801a      	strh	r2, [r3, #0]
			n += NUMBER_OF_SENSORS)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	3306      	adds	r3, #6
 8003bd0:	60fb      	str	r3, [r7, #12]
	for (int n = 0; n <= (TRAVEL_SENSOR_BUFFER_SIZE / 2) - NUMBER_OF_SENSORS;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2b5a      	cmp	r3, #90	; 0x5a
 8003bd6:	f67f af64 	bls.w	8003aa2 <normalizeTravelData+0xe>

	}
}
 8003bda:	bf00      	nop
 8003bdc:	bf00      	nop
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	20002ee8 	.word	0x20002ee8
 8003be8:	200031f8 	.word	0x200031f8

08003bec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003bec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003bf0:	480d      	ldr	r0, [pc, #52]	; (8003c28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003bf2:	490e      	ldr	r1, [pc, #56]	; (8003c2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003bf4:	4a0e      	ldr	r2, [pc, #56]	; (8003c30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bf8:	e002      	b.n	8003c00 <LoopCopyDataInit>

08003bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bfe:	3304      	adds	r3, #4

08003c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c04:	d3f9      	bcc.n	8003bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c06:	4a0b      	ldr	r2, [pc, #44]	; (8003c34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003c08:	4c0b      	ldr	r4, [pc, #44]	; (8003c38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c0c:	e001      	b.n	8003c12 <LoopFillZerobss>

08003c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c10:	3204      	adds	r2, #4

08003c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c14:	d3fb      	bcc.n	8003c0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c16:	f7ff fadb 	bl	80031d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c1a:	f015 f9c7 	bl	8018fac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c1e:	f7fe fb27 	bl	8002270 <main>
  bx  lr    
 8003c22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c2c:	20000308 	.word	0x20000308
  ldr r2, =_sidata
 8003c30:	0801deec 	.word	0x0801deec
  ldr r2, =_sbss
 8003c34:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 8003c38:	20007d90 	.word	0x20007d90

08003c3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c3c:	e7fe      	b.n	8003c3c <ADC_IRQHandler>
	...

08003c40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c44:	4b0e      	ldr	r3, [pc, #56]	; (8003c80 <HAL_Init+0x40>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a0d      	ldr	r2, [pc, #52]	; (8003c80 <HAL_Init+0x40>)
 8003c4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <HAL_Init+0x40>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a0a      	ldr	r2, [pc, #40]	; (8003c80 <HAL_Init+0x40>)
 8003c56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c5c:	4b08      	ldr	r3, [pc, #32]	; (8003c80 <HAL_Init+0x40>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a07      	ldr	r2, [pc, #28]	; (8003c80 <HAL_Init+0x40>)
 8003c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c68:	2003      	movs	r0, #3
 8003c6a:	f000 fd64 	bl	8004736 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c6e:	200f      	movs	r0, #15
 8003c70:	f7ff f8e4 	bl	8002e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c74:	f7ff f8b6 	bl	8002de4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40023c00 	.word	0x40023c00

08003c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c88:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <HAL_IncTick+0x20>)
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <HAL_IncTick+0x24>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4413      	add	r3, r2
 8003c94:	4a04      	ldr	r2, [pc, #16]	; (8003ca8 <HAL_IncTick+0x24>)
 8003c96:	6013      	str	r3, [r2, #0]
}
 8003c98:	bf00      	nop
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	20000010 	.word	0x20000010
 8003ca8:	20003208 	.word	0x20003208

08003cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  return uwTick;
 8003cb0:	4b03      	ldr	r3, [pc, #12]	; (8003cc0 <HAL_GetTick+0x14>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	20003208 	.word	0x20003208

08003cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ccc:	f7ff ffee 	bl	8003cac <HAL_GetTick>
 8003cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cdc:	d005      	beq.n	8003cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cde:	4b0a      	ldr	r3, [pc, #40]	; (8003d08 <HAL_Delay+0x44>)
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003cea:	bf00      	nop
 8003cec:	f7ff ffde 	bl	8003cac <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d8f7      	bhi.n	8003cec <HAL_Delay+0x28>
  {
  }
}
 8003cfc:	bf00      	nop
 8003cfe:	bf00      	nop
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	20000010 	.word	0x20000010

08003d0c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e033      	b.n	8003d8a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d109      	bne.n	8003d3e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7fd fd60 	bl	80017f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	f003 0310 	and.w	r3, r3, #16
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d118      	bne.n	8003d7c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d52:	f023 0302 	bic.w	r3, r3, #2
 8003d56:	f043 0202 	orr.w	r2, r3, #2
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 fabe 	bl	80042e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f023 0303 	bic.w	r3, r3, #3
 8003d72:	f043 0201 	orr.w	r2, r3, #1
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	641a      	str	r2, [r3, #64]	; 0x40
 8003d7a:	e001      	b.n	8003d80 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d101      	bne.n	8003db2 <HAL_ADC_Start_DMA+0x1e>
 8003dae:	2302      	movs	r3, #2
 8003db0:	e0e9      	b.n	8003f86 <HAL_ADC_Start_DMA+0x1f2>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d018      	beq.n	8003dfa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689a      	ldr	r2, [r3, #8]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0201 	orr.w	r2, r2, #1
 8003dd6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003dd8:	4b6d      	ldr	r3, [pc, #436]	; (8003f90 <HAL_ADC_Start_DMA+0x1fc>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a6d      	ldr	r2, [pc, #436]	; (8003f94 <HAL_ADC_Start_DMA+0x200>)
 8003dde:	fba2 2303 	umull	r2, r3, r2, r3
 8003de2:	0c9a      	lsrs	r2, r3, #18
 8003de4:	4613      	mov	r3, r2
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	4413      	add	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003dec:	e002      	b.n	8003df4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	3b01      	subs	r3, #1
 8003df2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1f9      	bne.n	8003dee <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e08:	d107      	bne.n	8003e1a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689a      	ldr	r2, [r3, #8]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e18:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	f040 80a1 	bne.w	8003f6c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e32:	f023 0301 	bic.w	r3, r3, #1
 8003e36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d007      	beq.n	8003e5c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e54:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e68:	d106      	bne.n	8003e78 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6e:	f023 0206 	bic.w	r2, r3, #6
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	645a      	str	r2, [r3, #68]	; 0x44
 8003e76:	e002      	b.n	8003e7e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e86:	4b44      	ldr	r3, [pc, #272]	; (8003f98 <HAL_ADC_Start_DMA+0x204>)
 8003e88:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8e:	4a43      	ldr	r2, [pc, #268]	; (8003f9c <HAL_ADC_Start_DMA+0x208>)
 8003e90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e96:	4a42      	ldr	r2, [pc, #264]	; (8003fa0 <HAL_ADC_Start_DMA+0x20c>)
 8003e98:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9e:	4a41      	ldr	r2, [pc, #260]	; (8003fa4 <HAL_ADC_Start_DMA+0x210>)
 8003ea0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003eaa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003eba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	334c      	adds	r3, #76	; 0x4c
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f000 fd0e 	bl	80048fc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f003 031f 	and.w	r3, r3, #31
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d12a      	bne.n	8003f42 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a2d      	ldr	r2, [pc, #180]	; (8003fa8 <HAL_ADC_Start_DMA+0x214>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d015      	beq.n	8003f22 <HAL_ADC_Start_DMA+0x18e>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a2c      	ldr	r2, [pc, #176]	; (8003fac <HAL_ADC_Start_DMA+0x218>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d105      	bne.n	8003f0c <HAL_ADC_Start_DMA+0x178>
 8003f00:	4b25      	ldr	r3, [pc, #148]	; (8003f98 <HAL_ADC_Start_DMA+0x204>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f003 031f 	and.w	r3, r3, #31
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00a      	beq.n	8003f22 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a27      	ldr	r2, [pc, #156]	; (8003fb0 <HAL_ADC_Start_DMA+0x21c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d136      	bne.n	8003f84 <HAL_ADC_Start_DMA+0x1f0>
 8003f16:	4b20      	ldr	r3, [pc, #128]	; (8003f98 <HAL_ADC_Start_DMA+0x204>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f003 0310 	and.w	r3, r3, #16
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d130      	bne.n	8003f84 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d129      	bne.n	8003f84 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689a      	ldr	r2, [r3, #8]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f3e:	609a      	str	r2, [r3, #8]
 8003f40:	e020      	b.n	8003f84 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a18      	ldr	r2, [pc, #96]	; (8003fa8 <HAL_ADC_Start_DMA+0x214>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d11b      	bne.n	8003f84 <HAL_ADC_Start_DMA+0x1f0>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d114      	bne.n	8003f84 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f68:	609a      	str	r2, [r3, #8]
 8003f6a:	e00b      	b.n	8003f84 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f70:	f043 0210 	orr.w	r2, r3, #16
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7c:	f043 0201 	orr.w	r2, r3, #1
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	20000008 	.word	0x20000008
 8003f94:	431bde83 	.word	0x431bde83
 8003f98:	40012300 	.word	0x40012300
 8003f9c:	080044d9 	.word	0x080044d9
 8003fa0:	08004593 	.word	0x08004593
 8003fa4:	080045af 	.word	0x080045af
 8003fa8:	40012000 	.word	0x40012000
 8003fac:	40012100 	.word	0x40012100
 8003fb0:	40012200 	.word	0x40012200

08003fb4 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d101      	bne.n	8003fce <HAL_ADC_Stop_DMA+0x1a>
 8003fca:	2302      	movs	r3, #2
 8003fcc:	e048      	b.n	8004060 <HAL_ADC_Stop_DMA+0xac>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 0201 	bic.w	r2, r2, #1
 8003fe4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d130      	bne.n	8004056 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004002:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004008:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d10f      	bne.n	8004032 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fcc8 	bl	80049ac <HAL_DMA_Abort>
 800401c:	4603      	mov	r3, r0
 800401e:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004020:	7bfb      	ldrb	r3, [r7, #15]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d005      	beq.n	8004032 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004040:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800404a:	f023 0301 	bic.w	r3, r3, #1
 800404e:	f043 0201 	orr.w	r2, r3, #1
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800405e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004086:	2300      	movs	r3, #0
 8004088:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004090:	2b01      	cmp	r3, #1
 8004092:	d101      	bne.n	8004098 <HAL_ADC_ConfigChannel+0x1c>
 8004094:	2302      	movs	r3, #2
 8004096:	e113      	b.n	80042c0 <HAL_ADC_ConfigChannel+0x244>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b09      	cmp	r3, #9
 80040a6:	d925      	bls.n	80040f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68d9      	ldr	r1, [r3, #12]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	461a      	mov	r2, r3
 80040b6:	4613      	mov	r3, r2
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	4413      	add	r3, r2
 80040bc:	3b1e      	subs	r3, #30
 80040be:	2207      	movs	r2, #7
 80040c0:	fa02 f303 	lsl.w	r3, r2, r3
 80040c4:	43da      	mvns	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	400a      	ands	r2, r1
 80040cc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68d9      	ldr	r1, [r3, #12]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	b29b      	uxth	r3, r3
 80040de:	4618      	mov	r0, r3
 80040e0:	4603      	mov	r3, r0
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	4403      	add	r3, r0
 80040e6:	3b1e      	subs	r3, #30
 80040e8:	409a      	lsls	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	60da      	str	r2, [r3, #12]
 80040f2:	e022      	b.n	800413a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6919      	ldr	r1, [r3, #16]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	b29b      	uxth	r3, r3
 8004100:	461a      	mov	r2, r3
 8004102:	4613      	mov	r3, r2
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	4413      	add	r3, r2
 8004108:	2207      	movs	r2, #7
 800410a:	fa02 f303 	lsl.w	r3, r2, r3
 800410e:	43da      	mvns	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	400a      	ands	r2, r1
 8004116:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6919      	ldr	r1, [r3, #16]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	689a      	ldr	r2, [r3, #8]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	b29b      	uxth	r3, r3
 8004128:	4618      	mov	r0, r3
 800412a:	4603      	mov	r3, r0
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	4403      	add	r3, r0
 8004130:	409a      	lsls	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2b06      	cmp	r3, #6
 8004140:	d824      	bhi.n	800418c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	4613      	mov	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	3b05      	subs	r3, #5
 8004154:	221f      	movs	r2, #31
 8004156:	fa02 f303 	lsl.w	r3, r2, r3
 800415a:	43da      	mvns	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	400a      	ands	r2, r1
 8004162:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	b29b      	uxth	r3, r3
 8004170:	4618      	mov	r0, r3
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	4613      	mov	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4413      	add	r3, r2
 800417c:	3b05      	subs	r3, #5
 800417e:	fa00 f203 	lsl.w	r2, r0, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	635a      	str	r2, [r3, #52]	; 0x34
 800418a:	e04c      	b.n	8004226 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	2b0c      	cmp	r3, #12
 8004192:	d824      	bhi.n	80041de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	4613      	mov	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	3b23      	subs	r3, #35	; 0x23
 80041a6:	221f      	movs	r2, #31
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	43da      	mvns	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	400a      	ands	r2, r1
 80041b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	4618      	mov	r0, r3
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	4613      	mov	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	3b23      	subs	r3, #35	; 0x23
 80041d0:	fa00 f203 	lsl.w	r2, r0, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	631a      	str	r2, [r3, #48]	; 0x30
 80041dc:	e023      	b.n	8004226 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	4613      	mov	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	3b41      	subs	r3, #65	; 0x41
 80041f0:	221f      	movs	r2, #31
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	43da      	mvns	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	400a      	ands	r2, r1
 80041fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	b29b      	uxth	r3, r3
 800420c:	4618      	mov	r0, r3
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	4613      	mov	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	3b41      	subs	r3, #65	; 0x41
 800421a:	fa00 f203 	lsl.w	r2, r0, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004226:	4b29      	ldr	r3, [pc, #164]	; (80042cc <HAL_ADC_ConfigChannel+0x250>)
 8004228:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a28      	ldr	r2, [pc, #160]	; (80042d0 <HAL_ADC_ConfigChannel+0x254>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d10f      	bne.n	8004254 <HAL_ADC_ConfigChannel+0x1d8>
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b12      	cmp	r3, #18
 800423a:	d10b      	bne.n	8004254 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a1d      	ldr	r2, [pc, #116]	; (80042d0 <HAL_ADC_ConfigChannel+0x254>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d12b      	bne.n	80042b6 <HAL_ADC_ConfigChannel+0x23a>
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a1c      	ldr	r2, [pc, #112]	; (80042d4 <HAL_ADC_ConfigChannel+0x258>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d003      	beq.n	8004270 <HAL_ADC_ConfigChannel+0x1f4>
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b11      	cmp	r3, #17
 800426e:	d122      	bne.n	80042b6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a11      	ldr	r2, [pc, #68]	; (80042d4 <HAL_ADC_ConfigChannel+0x258>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d111      	bne.n	80042b6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004292:	4b11      	ldr	r3, [pc, #68]	; (80042d8 <HAL_ADC_ConfigChannel+0x25c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a11      	ldr	r2, [pc, #68]	; (80042dc <HAL_ADC_ConfigChannel+0x260>)
 8004298:	fba2 2303 	umull	r2, r3, r2, r3
 800429c:	0c9a      	lsrs	r2, r3, #18
 800429e:	4613      	mov	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80042a8:	e002      	b.n	80042b0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	3b01      	subs	r3, #1
 80042ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1f9      	bne.n	80042aa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3714      	adds	r7, #20
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	40012300 	.word	0x40012300
 80042d0:	40012000 	.word	0x40012000
 80042d4:	10000012 	.word	0x10000012
 80042d8:	20000008 	.word	0x20000008
 80042dc:	431bde83 	.word	0x431bde83

080042e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042e8:	4b79      	ldr	r3, [pc, #484]	; (80044d0 <ADC_Init+0x1f0>)
 80042ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	431a      	orrs	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004314:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6859      	ldr	r1, [r3, #4]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	021a      	lsls	r2, r3, #8
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004338:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6859      	ldr	r1, [r3, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800435a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6899      	ldr	r1, [r3, #8]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004372:	4a58      	ldr	r2, [pc, #352]	; (80044d4 <ADC_Init+0x1f4>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d022      	beq.n	80043be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004386:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6899      	ldr	r1, [r3, #8]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6899      	ldr	r1, [r3, #8]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	609a      	str	r2, [r3, #8]
 80043bc:	e00f      	b.n	80043de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0202 	bic.w	r2, r2, #2
 80043ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6899      	ldr	r1, [r3, #8]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	7e1b      	ldrb	r3, [r3, #24]
 80043f8:	005a      	lsls	r2, r3, #1
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d01b      	beq.n	8004444 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800441a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800442a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6859      	ldr	r1, [r3, #4]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	3b01      	subs	r3, #1
 8004438:	035a      	lsls	r2, r3, #13
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	605a      	str	r2, [r3, #4]
 8004442:	e007      	b.n	8004454 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004452:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004462:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	3b01      	subs	r3, #1
 8004470:	051a      	lsls	r2, r3, #20
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	430a      	orrs	r2, r1
 8004478:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004488:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6899      	ldr	r1, [r3, #8]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004496:	025a      	lsls	r2, r3, #9
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689a      	ldr	r2, [r3, #8]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6899      	ldr	r1, [r3, #8]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	029a      	lsls	r2, r3, #10
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	609a      	str	r2, [r3, #8]
}
 80044c4:	bf00      	nop
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	40012300 	.word	0x40012300
 80044d4:	0f000001 	.word	0x0f000001

080044d8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d13c      	bne.n	800456c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d12b      	bne.n	8004564 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004510:	2b00      	cmp	r3, #0
 8004512:	d127      	bne.n	8004564 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800451e:	2b00      	cmp	r3, #0
 8004520:	d006      	beq.n	8004530 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800452c:	2b00      	cmp	r3, #0
 800452e:	d119      	bne.n	8004564 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0220 	bic.w	r2, r2, #32
 800453e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004544:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004550:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d105      	bne.n	8004564 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455c:	f043 0201 	orr.w	r2, r3, #1
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f7ff f9c7 	bl	80038f8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800456a:	e00e      	b.n	800458a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	f003 0310 	and.w	r3, r3, #16
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f7ff fd75 	bl	8004068 <HAL_ADC_ErrorCallback>
}
 800457e:	e004      	b.n	800458a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	4798      	blx	r3
}
 800458a:	bf00      	nop
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b084      	sub	sp, #16
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f7ff f98b 	bl	80038bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045a6:	bf00      	nop
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b084      	sub	sp, #16
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ba:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2240      	movs	r2, #64	; 0x40
 80045c0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c6:	f043 0204 	orr.w	r2, r3, #4
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f7ff fd4a 	bl	8004068 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045d4:	bf00      	nop
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <__NVIC_SetPriorityGrouping>:
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f003 0307 	and.w	r3, r3, #7
 80045ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045ec:	4b0c      	ldr	r3, [pc, #48]	; (8004620 <__NVIC_SetPriorityGrouping+0x44>)
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045f8:	4013      	ands	r3, r2
 80045fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800460c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800460e:	4a04      	ldr	r2, [pc, #16]	; (8004620 <__NVIC_SetPriorityGrouping+0x44>)
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	60d3      	str	r3, [r2, #12]
}
 8004614:	bf00      	nop
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	e000ed00 	.word	0xe000ed00

08004624 <__NVIC_GetPriorityGrouping>:
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004628:	4b04      	ldr	r3, [pc, #16]	; (800463c <__NVIC_GetPriorityGrouping+0x18>)
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	0a1b      	lsrs	r3, r3, #8
 800462e:	f003 0307 	and.w	r3, r3, #7
}
 8004632:	4618      	mov	r0, r3
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	e000ed00 	.word	0xe000ed00

08004640 <__NVIC_EnableIRQ>:
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	4603      	mov	r3, r0
 8004648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800464a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800464e:	2b00      	cmp	r3, #0
 8004650:	db0b      	blt.n	800466a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004652:	79fb      	ldrb	r3, [r7, #7]
 8004654:	f003 021f 	and.w	r2, r3, #31
 8004658:	4907      	ldr	r1, [pc, #28]	; (8004678 <__NVIC_EnableIRQ+0x38>)
 800465a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800465e:	095b      	lsrs	r3, r3, #5
 8004660:	2001      	movs	r0, #1
 8004662:	fa00 f202 	lsl.w	r2, r0, r2
 8004666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800466a:	bf00      	nop
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	e000e100 	.word	0xe000e100

0800467c <__NVIC_SetPriority>:
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	4603      	mov	r3, r0
 8004684:	6039      	str	r1, [r7, #0]
 8004686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468c:	2b00      	cmp	r3, #0
 800468e:	db0a      	blt.n	80046a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	b2da      	uxtb	r2, r3
 8004694:	490c      	ldr	r1, [pc, #48]	; (80046c8 <__NVIC_SetPriority+0x4c>)
 8004696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800469a:	0112      	lsls	r2, r2, #4
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	440b      	add	r3, r1
 80046a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80046a4:	e00a      	b.n	80046bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	4908      	ldr	r1, [pc, #32]	; (80046cc <__NVIC_SetPriority+0x50>)
 80046ac:	79fb      	ldrb	r3, [r7, #7]
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	3b04      	subs	r3, #4
 80046b4:	0112      	lsls	r2, r2, #4
 80046b6:	b2d2      	uxtb	r2, r2
 80046b8:	440b      	add	r3, r1
 80046ba:	761a      	strb	r2, [r3, #24]
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	e000e100 	.word	0xe000e100
 80046cc:	e000ed00 	.word	0xe000ed00

080046d0 <NVIC_EncodePriority>:
{
 80046d0:	b480      	push	{r7}
 80046d2:	b089      	sub	sp, #36	; 0x24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	f1c3 0307 	rsb	r3, r3, #7
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	bf28      	it	cs
 80046ee:	2304      	movcs	r3, #4
 80046f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	3304      	adds	r3, #4
 80046f6:	2b06      	cmp	r3, #6
 80046f8:	d902      	bls.n	8004700 <NVIC_EncodePriority+0x30>
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	3b03      	subs	r3, #3
 80046fe:	e000      	b.n	8004702 <NVIC_EncodePriority+0x32>
 8004700:	2300      	movs	r3, #0
 8004702:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004704:	f04f 32ff 	mov.w	r2, #4294967295
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	43da      	mvns	r2, r3
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	401a      	ands	r2, r3
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004718:	f04f 31ff 	mov.w	r1, #4294967295
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	fa01 f303 	lsl.w	r3, r1, r3
 8004722:	43d9      	mvns	r1, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004728:	4313      	orrs	r3, r2
}
 800472a:	4618      	mov	r0, r3
 800472c:	3724      	adds	r7, #36	; 0x24
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b082      	sub	sp, #8
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7ff ff4c 	bl	80045dc <__NVIC_SetPriorityGrouping>
}
 8004744:	bf00      	nop
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	4603      	mov	r3, r0
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
 8004758:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800475a:	2300      	movs	r3, #0
 800475c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800475e:	f7ff ff61 	bl	8004624 <__NVIC_GetPriorityGrouping>
 8004762:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	68b9      	ldr	r1, [r7, #8]
 8004768:	6978      	ldr	r0, [r7, #20]
 800476a:	f7ff ffb1 	bl	80046d0 <NVIC_EncodePriority>
 800476e:	4602      	mov	r2, r0
 8004770:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004774:	4611      	mov	r1, r2
 8004776:	4618      	mov	r0, r3
 8004778:	f7ff ff80 	bl	800467c <__NVIC_SetPriority>
}
 800477c:	bf00      	nop
 800477e:	3718      	adds	r7, #24
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	4603      	mov	r3, r0
 800478c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800478e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff ff54 	bl	8004640 <__NVIC_EnableIRQ>
}
 8004798:	bf00      	nop
 800479a:	3708      	adds	r7, #8
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80047ac:	f7ff fa7e 	bl	8003cac <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d101      	bne.n	80047bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e099      	b.n	80048f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0201 	bic.w	r2, r2, #1
 80047da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047dc:	e00f      	b.n	80047fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047de:	f7ff fa65 	bl	8003cac <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b05      	cmp	r3, #5
 80047ea:	d908      	bls.n	80047fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2220      	movs	r2, #32
 80047f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2203      	movs	r2, #3
 80047f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e078      	b.n	80048f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1e8      	bne.n	80047de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	4b38      	ldr	r3, [pc, #224]	; (80048f8 <HAL_DMA_Init+0x158>)
 8004818:	4013      	ands	r3, r2
 800481a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800482a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004836:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004842:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	4313      	orrs	r3, r2
 800484e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	2b04      	cmp	r3, #4
 8004856:	d107      	bne.n	8004868 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004860:	4313      	orrs	r3, r2
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	4313      	orrs	r3, r2
 8004866:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	f023 0307 	bic.w	r3, r3, #7
 800487e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	4313      	orrs	r3, r2
 8004888:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	2b04      	cmp	r3, #4
 8004890:	d117      	bne.n	80048c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	4313      	orrs	r3, r2
 800489a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00e      	beq.n	80048c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 fb0d 	bl	8004ec4 <DMA_CheckFifoParam>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d008      	beq.n	80048c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2240      	movs	r2, #64	; 0x40
 80048b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80048be:	2301      	movs	r3, #1
 80048c0:	e016      	b.n	80048f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 fac4 	bl	8004e58 <DMA_CalcBaseAndBitshift>
 80048d0:	4603      	mov	r3, r0
 80048d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d8:	223f      	movs	r2, #63	; 0x3f
 80048da:	409a      	lsls	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3718      	adds	r7, #24
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	f010803f 	.word	0xf010803f

080048fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800490a:	2300      	movs	r3, #0
 800490c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004912:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800491a:	2b01      	cmp	r3, #1
 800491c:	d101      	bne.n	8004922 <HAL_DMA_Start_IT+0x26>
 800491e:	2302      	movs	r3, #2
 8004920:	e040      	b.n	80049a4 <HAL_DMA_Start_IT+0xa8>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b01      	cmp	r3, #1
 8004934:	d12f      	bne.n	8004996 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2202      	movs	r2, #2
 800493a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	68b9      	ldr	r1, [r7, #8]
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f000 fa56 	bl	8004dfc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004954:	223f      	movs	r2, #63	; 0x3f
 8004956:	409a      	lsls	r2, r3
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0216 	orr.w	r2, r2, #22
 800496a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004970:	2b00      	cmp	r3, #0
 8004972:	d007      	beq.n	8004984 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0208 	orr.w	r2, r2, #8
 8004982:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0201 	orr.w	r2, r2, #1
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	e005      	b.n	80049a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800499e:	2302      	movs	r3, #2
 80049a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80049a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3718      	adds	r7, #24
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80049ba:	f7ff f977 	bl	8003cac <HAL_GetTick>
 80049be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d008      	beq.n	80049de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2280      	movs	r2, #128	; 0x80
 80049d0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e052      	b.n	8004a84 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 0216 	bic.w	r2, r2, #22
 80049ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	695a      	ldr	r2, [r3, #20]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d103      	bne.n	8004a0e <HAL_DMA_Abort+0x62>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d007      	beq.n	8004a1e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0208 	bic.w	r2, r2, #8
 8004a1c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0201 	bic.w	r2, r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a2e:	e013      	b.n	8004a58 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a30:	f7ff f93c 	bl	8003cac <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b05      	cmp	r3, #5
 8004a3c:	d90c      	bls.n	8004a58 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2220      	movs	r2, #32
 8004a42:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2203      	movs	r2, #3
 8004a48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e015      	b.n	8004a84 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1e4      	bne.n	8004a30 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a6a:	223f      	movs	r2, #63	; 0x3f
 8004a6c:	409a      	lsls	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d004      	beq.n	8004aaa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2280      	movs	r2, #128	; 0x80
 8004aa4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e00c      	b.n	8004ac4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2205      	movs	r2, #5
 8004aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0201 	bic.w	r2, r2, #1
 8004ac0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004adc:	4b8e      	ldr	r3, [pc, #568]	; (8004d18 <HAL_DMA_IRQHandler+0x248>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a8e      	ldr	r2, [pc, #568]	; (8004d1c <HAL_DMA_IRQHandler+0x24c>)
 8004ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae6:	0a9b      	lsrs	r3, r3, #10
 8004ae8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afa:	2208      	movs	r2, #8
 8004afc:	409a      	lsls	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	4013      	ands	r3, r2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d01a      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d013      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 0204 	bic.w	r2, r2, #4
 8004b22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b28:	2208      	movs	r2, #8
 8004b2a:	409a      	lsls	r2, r3
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b34:	f043 0201 	orr.w	r2, r3, #1
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b40:	2201      	movs	r2, #1
 8004b42:	409a      	lsls	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4013      	ands	r3, r2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d012      	beq.n	8004b72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00b      	beq.n	8004b72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b5e:	2201      	movs	r2, #1
 8004b60:	409a      	lsls	r2, r3
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6a:	f043 0202 	orr.w	r2, r3, #2
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b76:	2204      	movs	r2, #4
 8004b78:	409a      	lsls	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d012      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00b      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b94:	2204      	movs	r2, #4
 8004b96:	409a      	lsls	r2, r3
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba0:	f043 0204 	orr.w	r2, r3, #4
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bac:	2210      	movs	r2, #16
 8004bae:	409a      	lsls	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d043      	beq.n	8004c40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0308 	and.w	r3, r3, #8
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d03c      	beq.n	8004c40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bca:	2210      	movs	r2, #16
 8004bcc:	409a      	lsls	r2, r3
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d018      	beq.n	8004c12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d108      	bne.n	8004c00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d024      	beq.n	8004c40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	4798      	blx	r3
 8004bfe:	e01f      	b.n	8004c40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d01b      	beq.n	8004c40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	4798      	blx	r3
 8004c10:	e016      	b.n	8004c40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d107      	bne.n	8004c30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0208 	bic.w	r2, r2, #8
 8004c2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d003      	beq.n	8004c40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c44:	2220      	movs	r2, #32
 8004c46:	409a      	lsls	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 808f 	beq.w	8004d70 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0310 	and.w	r3, r3, #16
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f000 8087 	beq.w	8004d70 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c66:	2220      	movs	r2, #32
 8004c68:	409a      	lsls	r2, r3
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b05      	cmp	r3, #5
 8004c78:	d136      	bne.n	8004ce8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 0216 	bic.w	r2, r2, #22
 8004c88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	695a      	ldr	r2, [r3, #20]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d103      	bne.n	8004caa <HAL_DMA_IRQHandler+0x1da>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d007      	beq.n	8004cba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0208 	bic.w	r2, r2, #8
 8004cb8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cbe:	223f      	movs	r2, #63	; 0x3f
 8004cc0:	409a      	lsls	r2, r3
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d07e      	beq.n	8004ddc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	4798      	blx	r3
        }
        return;
 8004ce6:	e079      	b.n	8004ddc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d01d      	beq.n	8004d32 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10d      	bne.n	8004d20 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d031      	beq.n	8004d70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	4798      	blx	r3
 8004d14:	e02c      	b.n	8004d70 <HAL_DMA_IRQHandler+0x2a0>
 8004d16:	bf00      	nop
 8004d18:	20000008 	.word	0x20000008
 8004d1c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d023      	beq.n	8004d70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	4798      	blx	r3
 8004d30:	e01e      	b.n	8004d70 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10f      	bne.n	8004d60 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 0210 	bic.w	r2, r2, #16
 8004d4e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d003      	beq.n	8004d70 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d032      	beq.n	8004dde <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d022      	beq.n	8004dca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2205      	movs	r2, #5
 8004d88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 0201 	bic.w	r2, r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	60bb      	str	r3, [r7, #8]
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d307      	bcc.n	8004db8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1f2      	bne.n	8004d9c <HAL_DMA_IRQHandler+0x2cc>
 8004db6:	e000      	b.n	8004dba <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004db8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d005      	beq.n	8004dde <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	4798      	blx	r3
 8004dda:	e000      	b.n	8004dde <HAL_DMA_IRQHandler+0x30e>
        return;
 8004ddc:	bf00      	nop
    }
  }
}
 8004dde:	3718      	adds	r7, #24
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
 8004e08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	2b40      	cmp	r3, #64	; 0x40
 8004e28:	d108      	bne.n	8004e3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e3a:	e007      	b.n	8004e4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	60da      	str	r2, [r3, #12]
}
 8004e4c:	bf00      	nop
 8004e4e:	3714      	adds	r7, #20
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	3b10      	subs	r3, #16
 8004e68:	4a14      	ldr	r2, [pc, #80]	; (8004ebc <DMA_CalcBaseAndBitshift+0x64>)
 8004e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6e:	091b      	lsrs	r3, r3, #4
 8004e70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e72:	4a13      	ldr	r2, [pc, #76]	; (8004ec0 <DMA_CalcBaseAndBitshift+0x68>)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4413      	add	r3, r2
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2b03      	cmp	r3, #3
 8004e84:	d909      	bls.n	8004e9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e8e:	f023 0303 	bic.w	r3, r3, #3
 8004e92:	1d1a      	adds	r2, r3, #4
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	659a      	str	r2, [r3, #88]	; 0x58
 8004e98:	e007      	b.n	8004eaa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ea2:	f023 0303 	bic.w	r3, r3, #3
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	aaaaaaab 	.word	0xaaaaaaab
 8004ec0:	0801d9d8 	.word	0x0801d9d8

08004ec4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d11f      	bne.n	8004f1e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	2b03      	cmp	r3, #3
 8004ee2:	d856      	bhi.n	8004f92 <DMA_CheckFifoParam+0xce>
 8004ee4:	a201      	add	r2, pc, #4	; (adr r2, 8004eec <DMA_CheckFifoParam+0x28>)
 8004ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eea:	bf00      	nop
 8004eec:	08004efd 	.word	0x08004efd
 8004ef0:	08004f0f 	.word	0x08004f0f
 8004ef4:	08004efd 	.word	0x08004efd
 8004ef8:	08004f93 	.word	0x08004f93
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d046      	beq.n	8004f96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f0c:	e043      	b.n	8004f96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f12:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f16:	d140      	bne.n	8004f9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f1c:	e03d      	b.n	8004f9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f26:	d121      	bne.n	8004f6c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2b03      	cmp	r3, #3
 8004f2c:	d837      	bhi.n	8004f9e <DMA_CheckFifoParam+0xda>
 8004f2e:	a201      	add	r2, pc, #4	; (adr r2, 8004f34 <DMA_CheckFifoParam+0x70>)
 8004f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f34:	08004f45 	.word	0x08004f45
 8004f38:	08004f4b 	.word	0x08004f4b
 8004f3c:	08004f45 	.word	0x08004f45
 8004f40:	08004f5d 	.word	0x08004f5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	73fb      	strb	r3, [r7, #15]
      break;
 8004f48:	e030      	b.n	8004fac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d025      	beq.n	8004fa2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f5a:	e022      	b.n	8004fa2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f60:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f64:	d11f      	bne.n	8004fa6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f6a:	e01c      	b.n	8004fa6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d903      	bls.n	8004f7a <DMA_CheckFifoParam+0xb6>
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	2b03      	cmp	r3, #3
 8004f76:	d003      	beq.n	8004f80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f78:	e018      	b.n	8004fac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	73fb      	strb	r3, [r7, #15]
      break;
 8004f7e:	e015      	b.n	8004fac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00e      	beq.n	8004faa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f90:	e00b      	b.n	8004faa <DMA_CheckFifoParam+0xe6>
      break;
 8004f92:	bf00      	nop
 8004f94:	e00a      	b.n	8004fac <DMA_CheckFifoParam+0xe8>
      break;
 8004f96:	bf00      	nop
 8004f98:	e008      	b.n	8004fac <DMA_CheckFifoParam+0xe8>
      break;
 8004f9a:	bf00      	nop
 8004f9c:	e006      	b.n	8004fac <DMA_CheckFifoParam+0xe8>
      break;
 8004f9e:	bf00      	nop
 8004fa0:	e004      	b.n	8004fac <DMA_CheckFifoParam+0xe8>
      break;
 8004fa2:	bf00      	nop
 8004fa4:	e002      	b.n	8004fac <DMA_CheckFifoParam+0xe8>
      break;   
 8004fa6:	bf00      	nop
 8004fa8:	e000      	b.n	8004fac <DMA_CheckFifoParam+0xe8>
      break;
 8004faa:	bf00      	nop
    }
  } 
  
  return status; 
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop

08004fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b089      	sub	sp, #36	; 0x24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	61fb      	str	r3, [r7, #28]
 8004fd6:	e165      	b.n	80052a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004fd8:	2201      	movs	r2, #1
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	f040 8154 	bne.w	800529e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f003 0303 	and.w	r3, r3, #3
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d005      	beq.n	800500e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800500a:	2b02      	cmp	r3, #2
 800500c:	d130      	bne.n	8005070 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	2203      	movs	r2, #3
 800501a:	fa02 f303 	lsl.w	r3, r2, r3
 800501e:	43db      	mvns	r3, r3
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	4013      	ands	r3, r2
 8005024:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	fa02 f303 	lsl.w	r3, r2, r3
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	4313      	orrs	r3, r2
 8005036:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	69ba      	ldr	r2, [r7, #24]
 800503c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005044:	2201      	movs	r2, #1
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	fa02 f303 	lsl.w	r3, r2, r3
 800504c:	43db      	mvns	r3, r3
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	4013      	ands	r3, r2
 8005052:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	091b      	lsrs	r3, r3, #4
 800505a:	f003 0201 	and.w	r2, r3, #1
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	fa02 f303 	lsl.w	r3, r2, r3
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	4313      	orrs	r3, r2
 8005068:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f003 0303 	and.w	r3, r3, #3
 8005078:	2b03      	cmp	r3, #3
 800507a:	d017      	beq.n	80050ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	2203      	movs	r2, #3
 8005088:	fa02 f303 	lsl.w	r3, r2, r3
 800508c:	43db      	mvns	r3, r3
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	4013      	ands	r3, r2
 8005092:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	fa02 f303 	lsl.w	r3, r2, r3
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f003 0303 	and.w	r3, r3, #3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d123      	bne.n	8005100 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	08da      	lsrs	r2, r3, #3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3208      	adds	r2, #8
 80050c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	220f      	movs	r2, #15
 80050d0:	fa02 f303 	lsl.w	r3, r2, r3
 80050d4:	43db      	mvns	r3, r3
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	4013      	ands	r3, r2
 80050da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	691a      	ldr	r2, [r3, #16]
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	f003 0307 	and.w	r3, r3, #7
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	08da      	lsrs	r2, r3, #3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	3208      	adds	r2, #8
 80050fa:	69b9      	ldr	r1, [r7, #24]
 80050fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	2203      	movs	r2, #3
 800510c:	fa02 f303 	lsl.w	r3, r2, r3
 8005110:	43db      	mvns	r3, r3
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	4013      	ands	r3, r2
 8005116:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f003 0203 	and.w	r2, r3, #3
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	fa02 f303 	lsl.w	r3, r2, r3
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	4313      	orrs	r3, r2
 800512c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 80ae 	beq.w	800529e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005142:	2300      	movs	r3, #0
 8005144:	60fb      	str	r3, [r7, #12]
 8005146:	4b5d      	ldr	r3, [pc, #372]	; (80052bc <HAL_GPIO_Init+0x300>)
 8005148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800514a:	4a5c      	ldr	r2, [pc, #368]	; (80052bc <HAL_GPIO_Init+0x300>)
 800514c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005150:	6453      	str	r3, [r2, #68]	; 0x44
 8005152:	4b5a      	ldr	r3, [pc, #360]	; (80052bc <HAL_GPIO_Init+0x300>)
 8005154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800515e:	4a58      	ldr	r2, [pc, #352]	; (80052c0 <HAL_GPIO_Init+0x304>)
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	089b      	lsrs	r3, r3, #2
 8005164:	3302      	adds	r3, #2
 8005166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800516a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	f003 0303 	and.w	r3, r3, #3
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	220f      	movs	r2, #15
 8005176:	fa02 f303 	lsl.w	r3, r2, r3
 800517a:	43db      	mvns	r3, r3
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	4013      	ands	r3, r2
 8005180:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a4f      	ldr	r2, [pc, #316]	; (80052c4 <HAL_GPIO_Init+0x308>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d025      	beq.n	80051d6 <HAL_GPIO_Init+0x21a>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a4e      	ldr	r2, [pc, #312]	; (80052c8 <HAL_GPIO_Init+0x30c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d01f      	beq.n	80051d2 <HAL_GPIO_Init+0x216>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a4d      	ldr	r2, [pc, #308]	; (80052cc <HAL_GPIO_Init+0x310>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d019      	beq.n	80051ce <HAL_GPIO_Init+0x212>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a4c      	ldr	r2, [pc, #304]	; (80052d0 <HAL_GPIO_Init+0x314>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d013      	beq.n	80051ca <HAL_GPIO_Init+0x20e>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a4b      	ldr	r2, [pc, #300]	; (80052d4 <HAL_GPIO_Init+0x318>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d00d      	beq.n	80051c6 <HAL_GPIO_Init+0x20a>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a4a      	ldr	r2, [pc, #296]	; (80052d8 <HAL_GPIO_Init+0x31c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d007      	beq.n	80051c2 <HAL_GPIO_Init+0x206>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a49      	ldr	r2, [pc, #292]	; (80052dc <HAL_GPIO_Init+0x320>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d101      	bne.n	80051be <HAL_GPIO_Init+0x202>
 80051ba:	2306      	movs	r3, #6
 80051bc:	e00c      	b.n	80051d8 <HAL_GPIO_Init+0x21c>
 80051be:	2307      	movs	r3, #7
 80051c0:	e00a      	b.n	80051d8 <HAL_GPIO_Init+0x21c>
 80051c2:	2305      	movs	r3, #5
 80051c4:	e008      	b.n	80051d8 <HAL_GPIO_Init+0x21c>
 80051c6:	2304      	movs	r3, #4
 80051c8:	e006      	b.n	80051d8 <HAL_GPIO_Init+0x21c>
 80051ca:	2303      	movs	r3, #3
 80051cc:	e004      	b.n	80051d8 <HAL_GPIO_Init+0x21c>
 80051ce:	2302      	movs	r3, #2
 80051d0:	e002      	b.n	80051d8 <HAL_GPIO_Init+0x21c>
 80051d2:	2301      	movs	r3, #1
 80051d4:	e000      	b.n	80051d8 <HAL_GPIO_Init+0x21c>
 80051d6:	2300      	movs	r3, #0
 80051d8:	69fa      	ldr	r2, [r7, #28]
 80051da:	f002 0203 	and.w	r2, r2, #3
 80051de:	0092      	lsls	r2, r2, #2
 80051e0:	4093      	lsls	r3, r2
 80051e2:	69ba      	ldr	r2, [r7, #24]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051e8:	4935      	ldr	r1, [pc, #212]	; (80052c0 <HAL_GPIO_Init+0x304>)
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	089b      	lsrs	r3, r3, #2
 80051ee:	3302      	adds	r3, #2
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80051f6:	4b3a      	ldr	r3, [pc, #232]	; (80052e0 <HAL_GPIO_Init+0x324>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	43db      	mvns	r3, r3
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	4013      	ands	r3, r2
 8005204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d003      	beq.n	800521a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	4313      	orrs	r3, r2
 8005218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800521a:	4a31      	ldr	r2, [pc, #196]	; (80052e0 <HAL_GPIO_Init+0x324>)
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005220:	4b2f      	ldr	r3, [pc, #188]	; (80052e0 <HAL_GPIO_Init+0x324>)
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	43db      	mvns	r3, r3
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	4013      	ands	r3, r2
 800522e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d003      	beq.n	8005244 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800523c:	69ba      	ldr	r2, [r7, #24]
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	4313      	orrs	r3, r2
 8005242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005244:	4a26      	ldr	r2, [pc, #152]	; (80052e0 <HAL_GPIO_Init+0x324>)
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800524a:	4b25      	ldr	r3, [pc, #148]	; (80052e0 <HAL_GPIO_Init+0x324>)
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	43db      	mvns	r3, r3
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	4013      	ands	r3, r2
 8005258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d003      	beq.n	800526e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	4313      	orrs	r3, r2
 800526c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800526e:	4a1c      	ldr	r2, [pc, #112]	; (80052e0 <HAL_GPIO_Init+0x324>)
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005274:	4b1a      	ldr	r3, [pc, #104]	; (80052e0 <HAL_GPIO_Init+0x324>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	43db      	mvns	r3, r3
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	4013      	ands	r3, r2
 8005282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d003      	beq.n	8005298 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	4313      	orrs	r3, r2
 8005296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005298:	4a11      	ldr	r2, [pc, #68]	; (80052e0 <HAL_GPIO_Init+0x324>)
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	3301      	adds	r3, #1
 80052a2:	61fb      	str	r3, [r7, #28]
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	2b0f      	cmp	r3, #15
 80052a8:	f67f ae96 	bls.w	8004fd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80052ac:	bf00      	nop
 80052ae:	bf00      	nop
 80052b0:	3724      	adds	r7, #36	; 0x24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	40023800 	.word	0x40023800
 80052c0:	40013800 	.word	0x40013800
 80052c4:	40020000 	.word	0x40020000
 80052c8:	40020400 	.word	0x40020400
 80052cc:	40020800 	.word	0x40020800
 80052d0:	40020c00 	.word	0x40020c00
 80052d4:	40021000 	.word	0x40021000
 80052d8:	40021400 	.word	0x40021400
 80052dc:	40021800 	.word	0x40021800
 80052e0:	40013c00 	.word	0x40013c00

080052e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	460b      	mov	r3, r1
 80052ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691a      	ldr	r2, [r3, #16]
 80052f4:	887b      	ldrh	r3, [r7, #2]
 80052f6:	4013      	ands	r3, r2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d002      	beq.n	8005302 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80052fc:	2301      	movs	r3, #1
 80052fe:	73fb      	strb	r3, [r7, #15]
 8005300:	e001      	b.n	8005306 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005302:	2300      	movs	r3, #0
 8005304:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005306:	7bfb      	ldrb	r3, [r7, #15]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e12b      	b.n	800557e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d106      	bne.n	8005340 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7fc fd74 	bl	8001e28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2224      	movs	r2, #36	; 0x24
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f022 0201 	bic.w	r2, r2, #1
 8005356:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005366:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005376:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005378:	f002 f92e 	bl	80075d8 <HAL_RCC_GetPCLK1Freq>
 800537c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	4a81      	ldr	r2, [pc, #516]	; (8005588 <HAL_I2C_Init+0x274>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d807      	bhi.n	8005398 <HAL_I2C_Init+0x84>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4a80      	ldr	r2, [pc, #512]	; (800558c <HAL_I2C_Init+0x278>)
 800538c:	4293      	cmp	r3, r2
 800538e:	bf94      	ite	ls
 8005390:	2301      	movls	r3, #1
 8005392:	2300      	movhi	r3, #0
 8005394:	b2db      	uxtb	r3, r3
 8005396:	e006      	b.n	80053a6 <HAL_I2C_Init+0x92>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	4a7d      	ldr	r2, [pc, #500]	; (8005590 <HAL_I2C_Init+0x27c>)
 800539c:	4293      	cmp	r3, r2
 800539e:	bf94      	ite	ls
 80053a0:	2301      	movls	r3, #1
 80053a2:	2300      	movhi	r3, #0
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e0e7      	b.n	800557e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	4a78      	ldr	r2, [pc, #480]	; (8005594 <HAL_I2C_Init+0x280>)
 80053b2:	fba2 2303 	umull	r2, r3, r2, r3
 80053b6:	0c9b      	lsrs	r3, r3, #18
 80053b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	6a1b      	ldr	r3, [r3, #32]
 80053d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	4a6a      	ldr	r2, [pc, #424]	; (8005588 <HAL_I2C_Init+0x274>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d802      	bhi.n	80053e8 <HAL_I2C_Init+0xd4>
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	3301      	adds	r3, #1
 80053e6:	e009      	b.n	80053fc <HAL_I2C_Init+0xe8>
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80053ee:	fb02 f303 	mul.w	r3, r2, r3
 80053f2:	4a69      	ldr	r2, [pc, #420]	; (8005598 <HAL_I2C_Init+0x284>)
 80053f4:	fba2 2303 	umull	r2, r3, r2, r3
 80053f8:	099b      	lsrs	r3, r3, #6
 80053fa:	3301      	adds	r3, #1
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6812      	ldr	r2, [r2, #0]
 8005400:	430b      	orrs	r3, r1
 8005402:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800540e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	495c      	ldr	r1, [pc, #368]	; (8005588 <HAL_I2C_Init+0x274>)
 8005418:	428b      	cmp	r3, r1
 800541a:	d819      	bhi.n	8005450 <HAL_I2C_Init+0x13c>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	1e59      	subs	r1, r3, #1
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	fbb1 f3f3 	udiv	r3, r1, r3
 800542a:	1c59      	adds	r1, r3, #1
 800542c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005430:	400b      	ands	r3, r1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00a      	beq.n	800544c <HAL_I2C_Init+0x138>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	1e59      	subs	r1, r3, #1
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	005b      	lsls	r3, r3, #1
 8005440:	fbb1 f3f3 	udiv	r3, r1, r3
 8005444:	3301      	adds	r3, #1
 8005446:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800544a:	e051      	b.n	80054f0 <HAL_I2C_Init+0x1dc>
 800544c:	2304      	movs	r3, #4
 800544e:	e04f      	b.n	80054f0 <HAL_I2C_Init+0x1dc>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d111      	bne.n	800547c <HAL_I2C_Init+0x168>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	1e58      	subs	r0, r3, #1
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6859      	ldr	r1, [r3, #4]
 8005460:	460b      	mov	r3, r1
 8005462:	005b      	lsls	r3, r3, #1
 8005464:	440b      	add	r3, r1
 8005466:	fbb0 f3f3 	udiv	r3, r0, r3
 800546a:	3301      	adds	r3, #1
 800546c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005470:	2b00      	cmp	r3, #0
 8005472:	bf0c      	ite	eq
 8005474:	2301      	moveq	r3, #1
 8005476:	2300      	movne	r3, #0
 8005478:	b2db      	uxtb	r3, r3
 800547a:	e012      	b.n	80054a2 <HAL_I2C_Init+0x18e>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	1e58      	subs	r0, r3, #1
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6859      	ldr	r1, [r3, #4]
 8005484:	460b      	mov	r3, r1
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	440b      	add	r3, r1
 800548a:	0099      	lsls	r1, r3, #2
 800548c:	440b      	add	r3, r1
 800548e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005492:	3301      	adds	r3, #1
 8005494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005498:	2b00      	cmp	r3, #0
 800549a:	bf0c      	ite	eq
 800549c:	2301      	moveq	r3, #1
 800549e:	2300      	movne	r3, #0
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <HAL_I2C_Init+0x196>
 80054a6:	2301      	movs	r3, #1
 80054a8:	e022      	b.n	80054f0 <HAL_I2C_Init+0x1dc>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10e      	bne.n	80054d0 <HAL_I2C_Init+0x1bc>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	1e58      	subs	r0, r3, #1
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6859      	ldr	r1, [r3, #4]
 80054ba:	460b      	mov	r3, r1
 80054bc:	005b      	lsls	r3, r3, #1
 80054be:	440b      	add	r3, r1
 80054c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80054c4:	3301      	adds	r3, #1
 80054c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054ce:	e00f      	b.n	80054f0 <HAL_I2C_Init+0x1dc>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	1e58      	subs	r0, r3, #1
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6859      	ldr	r1, [r3, #4]
 80054d8:	460b      	mov	r3, r1
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	440b      	add	r3, r1
 80054de:	0099      	lsls	r1, r3, #2
 80054e0:	440b      	add	r3, r1
 80054e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80054e6:	3301      	adds	r3, #1
 80054e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054f0:	6879      	ldr	r1, [r7, #4]
 80054f2:	6809      	ldr	r1, [r1, #0]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	69da      	ldr	r2, [r3, #28]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	431a      	orrs	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800551e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	6911      	ldr	r1, [r2, #16]
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	68d2      	ldr	r2, [r2, #12]
 800552a:	4311      	orrs	r1, r2
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6812      	ldr	r2, [r2, #0]
 8005530:	430b      	orrs	r3, r1
 8005532:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	695a      	ldr	r2, [r3, #20]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	431a      	orrs	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	430a      	orrs	r2, r1
 800554e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f042 0201 	orr.w	r2, r2, #1
 800555e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2220      	movs	r2, #32
 800556a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	000186a0 	.word	0x000186a0
 800558c:	001e847f 	.word	0x001e847f
 8005590:	003d08ff 	.word	0x003d08ff
 8005594:	431bde83 	.word	0x431bde83
 8005598:	10624dd3 	.word	0x10624dd3

0800559c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b088      	sub	sp, #32
 80055a0:	af02      	add	r7, sp, #8
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	607a      	str	r2, [r7, #4]
 80055a6:	461a      	mov	r2, r3
 80055a8:	460b      	mov	r3, r1
 80055aa:	817b      	strh	r3, [r7, #10]
 80055ac:	4613      	mov	r3, r2
 80055ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80055b0:	f7fe fb7c 	bl	8003cac <HAL_GetTick>
 80055b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b20      	cmp	r3, #32
 80055c0:	f040 80e0 	bne.w	8005784 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	2319      	movs	r3, #25
 80055ca:	2201      	movs	r2, #1
 80055cc:	4970      	ldr	r1, [pc, #448]	; (8005790 <HAL_I2C_Master_Transmit+0x1f4>)
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f000 fa92 	bl	8005af8 <I2C_WaitOnFlagUntilTimeout>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80055da:	2302      	movs	r3, #2
 80055dc:	e0d3      	b.n	8005786 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <HAL_I2C_Master_Transmit+0x50>
 80055e8:	2302      	movs	r3, #2
 80055ea:	e0cc      	b.n	8005786 <HAL_I2C_Master_Transmit+0x1ea>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d007      	beq.n	8005612 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f042 0201 	orr.w	r2, r2, #1
 8005610:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005620:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2221      	movs	r2, #33	; 0x21
 8005626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2210      	movs	r2, #16
 800562e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	893a      	ldrh	r2, [r7, #8]
 8005642:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005648:	b29a      	uxth	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	4a50      	ldr	r2, [pc, #320]	; (8005794 <HAL_I2C_Master_Transmit+0x1f8>)
 8005652:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005654:	8979      	ldrh	r1, [r7, #10]
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	6a3a      	ldr	r2, [r7, #32]
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f000 f9ca 	bl	80059f4 <I2C_MasterRequestWrite>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e08d      	b.n	8005786 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800566a:	2300      	movs	r3, #0
 800566c:	613b      	str	r3, [r7, #16]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	613b      	str	r3, [r7, #16]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	613b      	str	r3, [r7, #16]
 800567e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005680:	e066      	b.n	8005750 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	6a39      	ldr	r1, [r7, #32]
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f000 fb0c 	bl	8005ca4 <I2C_WaitOnTXEFlagUntilTimeout>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00d      	beq.n	80056ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005696:	2b04      	cmp	r3, #4
 8005698:	d107      	bne.n	80056aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e06b      	b.n	8005786 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b2:	781a      	ldrb	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056be:	1c5a      	adds	r2, r3, #1
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	3b01      	subs	r3, #1
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056d6:	3b01      	subs	r3, #1
 80056d8:	b29a      	uxth	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	f003 0304 	and.w	r3, r3, #4
 80056e8:	2b04      	cmp	r3, #4
 80056ea:	d11b      	bne.n	8005724 <HAL_I2C_Master_Transmit+0x188>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d017      	beq.n	8005724 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f8:	781a      	ldrb	r2, [r3, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005704:	1c5a      	adds	r2, r3, #1
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800570e:	b29b      	uxth	r3, r3
 8005710:	3b01      	subs	r3, #1
 8005712:	b29a      	uxth	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800571c:	3b01      	subs	r3, #1
 800571e:	b29a      	uxth	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	6a39      	ldr	r1, [r7, #32]
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f000 fafc 	bl	8005d26 <I2C_WaitOnBTFFlagUntilTimeout>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00d      	beq.n	8005750 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005738:	2b04      	cmp	r3, #4
 800573a:	d107      	bne.n	800574c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800574a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e01a      	b.n	8005786 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005754:	2b00      	cmp	r3, #0
 8005756:	d194      	bne.n	8005682 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005766:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2220      	movs	r2, #32
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005780:	2300      	movs	r3, #0
 8005782:	e000      	b.n	8005786 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005784:	2302      	movs	r3, #2
  }
}
 8005786:	4618      	mov	r0, r3
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	00100002 	.word	0x00100002
 8005794:	ffff0000 	.word	0xffff0000

08005798 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b08a      	sub	sp, #40	; 0x28
 800579c:	af02      	add	r7, sp, #8
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	607a      	str	r2, [r7, #4]
 80057a2:	603b      	str	r3, [r7, #0]
 80057a4:	460b      	mov	r3, r1
 80057a6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80057a8:	f7fe fa80 	bl	8003cac <HAL_GetTick>
 80057ac:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80057ae:	2300      	movs	r3, #0
 80057b0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b20      	cmp	r3, #32
 80057bc:	f040 8111 	bne.w	80059e2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	2319      	movs	r3, #25
 80057c6:	2201      	movs	r2, #1
 80057c8:	4988      	ldr	r1, [pc, #544]	; (80059ec <HAL_I2C_IsDeviceReady+0x254>)
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f000 f994 	bl	8005af8 <I2C_WaitOnFlagUntilTimeout>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d001      	beq.n	80057da <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80057d6:	2302      	movs	r3, #2
 80057d8:	e104      	b.n	80059e4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d101      	bne.n	80057e8 <HAL_I2C_IsDeviceReady+0x50>
 80057e4:	2302      	movs	r3, #2
 80057e6:	e0fd      	b.n	80059e4 <HAL_I2C_IsDeviceReady+0x24c>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d007      	beq.n	800580e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f042 0201 	orr.w	r2, r2, #1
 800580c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800581c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2224      	movs	r2, #36	; 0x24
 8005822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4a70      	ldr	r2, [pc, #448]	; (80059f0 <HAL_I2C_IsDeviceReady+0x258>)
 8005830:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005840:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	2200      	movs	r2, #0
 800584a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f000 f952 	bl	8005af8 <I2C_WaitOnFlagUntilTimeout>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00d      	beq.n	8005876 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005864:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005868:	d103      	bne.n	8005872 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005870:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e0b6      	b.n	80059e4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005876:	897b      	ldrh	r3, [r7, #10]
 8005878:	b2db      	uxtb	r3, r3
 800587a:	461a      	mov	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005884:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005886:	f7fe fa11 	bl	8003cac <HAL_GetTick>
 800588a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b02      	cmp	r3, #2
 8005898:	bf0c      	ite	eq
 800589a:	2301      	moveq	r3, #1
 800589c:	2300      	movne	r3, #0
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058b0:	bf0c      	ite	eq
 80058b2:	2301      	moveq	r3, #1
 80058b4:	2300      	movne	r3, #0
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80058ba:	e025      	b.n	8005908 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80058bc:	f7fe f9f6 	bl	8003cac <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	683a      	ldr	r2, [r7, #0]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d302      	bcc.n	80058d2 <HAL_I2C_IsDeviceReady+0x13a>
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d103      	bne.n	80058da <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	22a0      	movs	r2, #160	; 0xa0
 80058d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	f003 0302 	and.w	r3, r3, #2
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	bf0c      	ite	eq
 80058e8:	2301      	moveq	r3, #1
 80058ea:	2300      	movne	r3, #0
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058fe:	bf0c      	ite	eq
 8005900:	2301      	moveq	r3, #1
 8005902:	2300      	movne	r3, #0
 8005904:	b2db      	uxtb	r3, r3
 8005906:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2ba0      	cmp	r3, #160	; 0xa0
 8005912:	d005      	beq.n	8005920 <HAL_I2C_IsDeviceReady+0x188>
 8005914:	7dfb      	ldrb	r3, [r7, #23]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d102      	bne.n	8005920 <HAL_I2C_IsDeviceReady+0x188>
 800591a:	7dbb      	ldrb	r3, [r7, #22]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d0cd      	beq.n	80058bc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2220      	movs	r2, #32
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b02      	cmp	r3, #2
 8005934:	d129      	bne.n	800598a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005944:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005946:	2300      	movs	r3, #0
 8005948:	613b      	str	r3, [r7, #16]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	613b      	str	r3, [r7, #16]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	613b      	str	r3, [r7, #16]
 800595a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	2319      	movs	r3, #25
 8005962:	2201      	movs	r2, #1
 8005964:	4921      	ldr	r1, [pc, #132]	; (80059ec <HAL_I2C_IsDeviceReady+0x254>)
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f000 f8c6 	bl	8005af8 <I2C_WaitOnFlagUntilTimeout>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d001      	beq.n	8005976 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e036      	b.n	80059e4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2220      	movs	r2, #32
 800597a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005986:	2300      	movs	r3, #0
 8005988:	e02c      	b.n	80059e4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005998:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059a2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	2319      	movs	r3, #25
 80059aa:	2201      	movs	r2, #1
 80059ac:	490f      	ldr	r1, [pc, #60]	; (80059ec <HAL_I2C_IsDeviceReady+0x254>)
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f000 f8a2 	bl	8005af8 <I2C_WaitOnFlagUntilTimeout>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e012      	b.n	80059e4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	3301      	adds	r3, #1
 80059c2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80059c4:	69ba      	ldr	r2, [r7, #24]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	f4ff af32 	bcc.w	8005832 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2220      	movs	r2, #32
 80059d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e000      	b.n	80059e4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80059e2:	2302      	movs	r3, #2
  }
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3720      	adds	r7, #32
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	00100002 	.word	0x00100002
 80059f0:	ffff0000 	.word	0xffff0000

080059f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b088      	sub	sp, #32
 80059f8:	af02      	add	r7, sp, #8
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	607a      	str	r2, [r7, #4]
 80059fe:	603b      	str	r3, [r7, #0]
 8005a00:	460b      	mov	r3, r1
 8005a02:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a08:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	2b08      	cmp	r3, #8
 8005a0e:	d006      	beq.n	8005a1e <I2C_MasterRequestWrite+0x2a>
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d003      	beq.n	8005a1e <I2C_MasterRequestWrite+0x2a>
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a1c:	d108      	bne.n	8005a30 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a2c:	601a      	str	r2, [r3, #0]
 8005a2e:	e00b      	b.n	8005a48 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a34:	2b12      	cmp	r3, #18
 8005a36:	d107      	bne.n	8005a48 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	9300      	str	r3, [sp, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f000 f84f 	bl	8005af8 <I2C_WaitOnFlagUntilTimeout>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00d      	beq.n	8005a7c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a6e:	d103      	bne.n	8005a78 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e035      	b.n	8005ae8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a84:	d108      	bne.n	8005a98 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a86:	897b      	ldrh	r3, [r7, #10]
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a94:	611a      	str	r2, [r3, #16]
 8005a96:	e01b      	b.n	8005ad0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005a98:	897b      	ldrh	r3, [r7, #10]
 8005a9a:	11db      	asrs	r3, r3, #7
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	f003 0306 	and.w	r3, r3, #6
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	f063 030f 	orn	r3, r3, #15
 8005aa8:	b2da      	uxtb	r2, r3
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	490e      	ldr	r1, [pc, #56]	; (8005af0 <I2C_MasterRequestWrite+0xfc>)
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f000 f875 	bl	8005ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d001      	beq.n	8005ac6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e010      	b.n	8005ae8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005ac6:	897b      	ldrh	r3, [r7, #10]
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	4907      	ldr	r1, [pc, #28]	; (8005af4 <I2C_MasterRequestWrite+0x100>)
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f000 f865 	bl	8005ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e000      	b.n	8005ae8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3718      	adds	r7, #24
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	00010008 	.word	0x00010008
 8005af4:	00010002 	.word	0x00010002

08005af8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	603b      	str	r3, [r7, #0]
 8005b04:	4613      	mov	r3, r2
 8005b06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b08:	e025      	b.n	8005b56 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b10:	d021      	beq.n	8005b56 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b12:	f7fe f8cb 	bl	8003cac <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d302      	bcc.n	8005b28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d116      	bne.n	8005b56 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2220      	movs	r2, #32
 8005b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	f043 0220 	orr.w	r2, r3, #32
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e023      	b.n	8005b9e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	0c1b      	lsrs	r3, r3, #16
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d10d      	bne.n	8005b7c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	43da      	mvns	r2, r3
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	bf0c      	ite	eq
 8005b72:	2301      	moveq	r3, #1
 8005b74:	2300      	movne	r3, #0
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	461a      	mov	r2, r3
 8005b7a:	e00c      	b.n	8005b96 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	43da      	mvns	r2, r3
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	4013      	ands	r3, r2
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	bf0c      	ite	eq
 8005b8e:	2301      	moveq	r3, #1
 8005b90:	2300      	movne	r3, #0
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	461a      	mov	r2, r3
 8005b96:	79fb      	ldrb	r3, [r7, #7]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d0b6      	beq.n	8005b0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b084      	sub	sp, #16
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	60f8      	str	r0, [r7, #12]
 8005bae:	60b9      	str	r1, [r7, #8]
 8005bb0:	607a      	str	r2, [r7, #4]
 8005bb2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005bb4:	e051      	b.n	8005c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	695b      	ldr	r3, [r3, #20]
 8005bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bc4:	d123      	bne.n	8005c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bd4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bde:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2220      	movs	r2, #32
 8005bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	f043 0204 	orr.w	r2, r3, #4
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e046      	b.n	8005c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c14:	d021      	beq.n	8005c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c16:	f7fe f849 	bl	8003cac <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d302      	bcc.n	8005c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d116      	bne.n	8005c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c46:	f043 0220 	orr.w	r2, r3, #32
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e020      	b.n	8005c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	0c1b      	lsrs	r3, r3, #16
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d10c      	bne.n	8005c7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	43da      	mvns	r2, r3
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	bf14      	ite	ne
 8005c76:	2301      	movne	r3, #1
 8005c78:	2300      	moveq	r3, #0
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	e00b      	b.n	8005c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	43da      	mvns	r2, r3
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	4013      	ands	r3, r2
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	bf14      	ite	ne
 8005c90:	2301      	movne	r3, #1
 8005c92:	2300      	moveq	r3, #0
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d18d      	bne.n	8005bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cb0:	e02d      	b.n	8005d0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f000 f878 	bl	8005da8 <I2C_IsAcknowledgeFailed>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d001      	beq.n	8005cc2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e02d      	b.n	8005d1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc8:	d021      	beq.n	8005d0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cca:	f7fd ffef 	bl	8003cac <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d302      	bcc.n	8005ce0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d116      	bne.n	8005d0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	f043 0220 	orr.w	r2, r3, #32
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e007      	b.n	8005d1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	695b      	ldr	r3, [r3, #20]
 8005d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d18:	2b80      	cmp	r3, #128	; 0x80
 8005d1a:	d1ca      	bne.n	8005cb2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b084      	sub	sp, #16
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	60f8      	str	r0, [r7, #12]
 8005d2e:	60b9      	str	r1, [r7, #8]
 8005d30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d32:	e02d      	b.n	8005d90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f000 f837 	bl	8005da8 <I2C_IsAcknowledgeFailed>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d001      	beq.n	8005d44 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e02d      	b.n	8005da0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4a:	d021      	beq.n	8005d90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d4c:	f7fd ffae 	bl	8003cac <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d302      	bcc.n	8005d62 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d116      	bne.n	8005d90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2220      	movs	r2, #32
 8005d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7c:	f043 0220 	orr.w	r2, r3, #32
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e007      	b.n	8005da0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	f003 0304 	and.w	r3, r3, #4
 8005d9a:	2b04      	cmp	r3, #4
 8005d9c:	d1ca      	bne.n	8005d34 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dbe:	d11b      	bne.n	8005df8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005dc8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de4:	f043 0204 	orr.w	r2, r3, #4
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e000      	b.n	8005dfa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	370c      	adds	r7, #12
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005e06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e08:	b08f      	sub	sp, #60	; 0x3c
 8005e0a:	af0a      	add	r7, sp, #40	; 0x28
 8005e0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d101      	bne.n	8005e18 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e116      	b.n	8006046 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d106      	bne.n	8005e38 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f011 fac0 	bl	80173b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2203      	movs	r2, #3
 8005e3c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d102      	bne.n	8005e52 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f005 feef 	bl	800bc3a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	603b      	str	r3, [r7, #0]
 8005e62:	687e      	ldr	r6, [r7, #4]
 8005e64:	466d      	mov	r5, sp
 8005e66:	f106 0410 	add.w	r4, r6, #16
 8005e6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005e76:	e885 0003 	stmia.w	r5, {r0, r1}
 8005e7a:	1d33      	adds	r3, r6, #4
 8005e7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e7e:	6838      	ldr	r0, [r7, #0]
 8005e80:	f005 fdc6 	bl	800ba10 <USB_CoreInit>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d005      	beq.n	8005e96 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2202      	movs	r2, #2
 8005e8e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e0d7      	b.n	8006046 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f005 fedd 	bl	800bc5c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	73fb      	strb	r3, [r7, #15]
 8005ea6:	e04a      	b.n	8005f3e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005ea8:	7bfa      	ldrb	r2, [r7, #15]
 8005eaa:	6879      	ldr	r1, [r7, #4]
 8005eac:	4613      	mov	r3, r2
 8005eae:	00db      	lsls	r3, r3, #3
 8005eb0:	4413      	add	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	440b      	add	r3, r1
 8005eb6:	333d      	adds	r3, #61	; 0x3d
 8005eb8:	2201      	movs	r2, #1
 8005eba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005ebc:	7bfa      	ldrb	r2, [r7, #15]
 8005ebe:	6879      	ldr	r1, [r7, #4]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	00db      	lsls	r3, r3, #3
 8005ec4:	4413      	add	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	440b      	add	r3, r1
 8005eca:	333c      	adds	r3, #60	; 0x3c
 8005ecc:	7bfa      	ldrb	r2, [r7, #15]
 8005ece:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005ed0:	7bfa      	ldrb	r2, [r7, #15]
 8005ed2:	7bfb      	ldrb	r3, [r7, #15]
 8005ed4:	b298      	uxth	r0, r3
 8005ed6:	6879      	ldr	r1, [r7, #4]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	00db      	lsls	r3, r3, #3
 8005edc:	4413      	add	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	440b      	add	r3, r1
 8005ee2:	3344      	adds	r3, #68	; 0x44
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005ee8:	7bfa      	ldrb	r2, [r7, #15]
 8005eea:	6879      	ldr	r1, [r7, #4]
 8005eec:	4613      	mov	r3, r2
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	4413      	add	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	440b      	add	r3, r1
 8005ef6:	3340      	adds	r3, #64	; 0x40
 8005ef8:	2200      	movs	r2, #0
 8005efa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005efc:	7bfa      	ldrb	r2, [r7, #15]
 8005efe:	6879      	ldr	r1, [r7, #4]
 8005f00:	4613      	mov	r3, r2
 8005f02:	00db      	lsls	r3, r3, #3
 8005f04:	4413      	add	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	440b      	add	r3, r1
 8005f0a:	3348      	adds	r3, #72	; 0x48
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005f10:	7bfa      	ldrb	r2, [r7, #15]
 8005f12:	6879      	ldr	r1, [r7, #4]
 8005f14:	4613      	mov	r3, r2
 8005f16:	00db      	lsls	r3, r3, #3
 8005f18:	4413      	add	r3, r2
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	440b      	add	r3, r1
 8005f1e:	334c      	adds	r3, #76	; 0x4c
 8005f20:	2200      	movs	r2, #0
 8005f22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005f24:	7bfa      	ldrb	r2, [r7, #15]
 8005f26:	6879      	ldr	r1, [r7, #4]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	00db      	lsls	r3, r3, #3
 8005f2c:	4413      	add	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	440b      	add	r3, r1
 8005f32:	3354      	adds	r3, #84	; 0x54
 8005f34:	2200      	movs	r2, #0
 8005f36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f38:	7bfb      	ldrb	r3, [r7, #15]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	73fb      	strb	r3, [r7, #15]
 8005f3e:	7bfa      	ldrb	r2, [r7, #15]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d3af      	bcc.n	8005ea8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f48:	2300      	movs	r3, #0
 8005f4a:	73fb      	strb	r3, [r7, #15]
 8005f4c:	e044      	b.n	8005fd8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005f4e:	7bfa      	ldrb	r2, [r7, #15]
 8005f50:	6879      	ldr	r1, [r7, #4]
 8005f52:	4613      	mov	r3, r2
 8005f54:	00db      	lsls	r3, r3, #3
 8005f56:	4413      	add	r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	440b      	add	r3, r1
 8005f5c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005f60:	2200      	movs	r2, #0
 8005f62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005f64:	7bfa      	ldrb	r2, [r7, #15]
 8005f66:	6879      	ldr	r1, [r7, #4]
 8005f68:	4613      	mov	r3, r2
 8005f6a:	00db      	lsls	r3, r3, #3
 8005f6c:	4413      	add	r3, r2
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	440b      	add	r3, r1
 8005f72:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005f76:	7bfa      	ldrb	r2, [r7, #15]
 8005f78:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005f7a:	7bfa      	ldrb	r2, [r7, #15]
 8005f7c:	6879      	ldr	r1, [r7, #4]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	00db      	lsls	r3, r3, #3
 8005f82:	4413      	add	r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	440b      	add	r3, r1
 8005f88:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005f90:	7bfa      	ldrb	r2, [r7, #15]
 8005f92:	6879      	ldr	r1, [r7, #4]
 8005f94:	4613      	mov	r3, r2
 8005f96:	00db      	lsls	r3, r3, #3
 8005f98:	4413      	add	r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	440b      	add	r3, r1
 8005f9e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005fa6:	7bfa      	ldrb	r2, [r7, #15]
 8005fa8:	6879      	ldr	r1, [r7, #4]
 8005faa:	4613      	mov	r3, r2
 8005fac:	00db      	lsls	r3, r3, #3
 8005fae:	4413      	add	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	440b      	add	r3, r1
 8005fb4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005fb8:	2200      	movs	r2, #0
 8005fba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005fbc:	7bfa      	ldrb	r2, [r7, #15]
 8005fbe:	6879      	ldr	r1, [r7, #4]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	00db      	lsls	r3, r3, #3
 8005fc4:	4413      	add	r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	440b      	add	r3, r1
 8005fca:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005fce:	2200      	movs	r2, #0
 8005fd0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fd2:	7bfb      	ldrb	r3, [r7, #15]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	73fb      	strb	r3, [r7, #15]
 8005fd8:	7bfa      	ldrb	r2, [r7, #15]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d3b5      	bcc.n	8005f4e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	603b      	str	r3, [r7, #0]
 8005fe8:	687e      	ldr	r6, [r7, #4]
 8005fea:	466d      	mov	r5, sp
 8005fec:	f106 0410 	add.w	r4, r6, #16
 8005ff0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ff2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ff4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ff6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ff8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005ffc:	e885 0003 	stmia.w	r5, {r0, r1}
 8006000:	1d33      	adds	r3, r6, #4
 8006002:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006004:	6838      	ldr	r0, [r7, #0]
 8006006:	f005 fe75 	bl	800bcf4 <USB_DevInit>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d005      	beq.n	800601c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e014      	b.n	8006046 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006030:	2b01      	cmp	r3, #1
 8006032:	d102      	bne.n	800603a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f001 f9b9 	bl	80073ac <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4618      	mov	r0, r3
 8006040:	f006 ffb7 	bl	800cfb2 <USB_DevDisconnect>

  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800604e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b084      	sub	sp, #16
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006062:	2b01      	cmp	r3, #1
 8006064:	d101      	bne.n	800606a <HAL_PCD_Start+0x1c>
 8006066:	2302      	movs	r3, #2
 8006068:	e020      	b.n	80060ac <HAL_PCD_Start+0x5e>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006076:	2b01      	cmp	r3, #1
 8006078:	d109      	bne.n	800608e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800607e:	2b01      	cmp	r3, #1
 8006080:	d005      	beq.n	800608e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006086:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4618      	mov	r0, r3
 8006094:	f005 fdc0 	bl	800bc18 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4618      	mov	r0, r3
 800609e:	f006 ff67 	bl	800cf70 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80060b4:	b590      	push	{r4, r7, lr}
 80060b6:	b08d      	sub	sp, #52	; 0x34
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f007 f825 	bl	800d11a <USB_GetMode>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f040 84b7 	bne.w	8006a46 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4618      	mov	r0, r3
 80060de:	f006 ff89 	bl	800cff4 <USB_ReadInterrupts>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 84ad 	beq.w	8006a44 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	0a1b      	lsrs	r3, r3, #8
 80060f4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4618      	mov	r0, r3
 8006104:	f006 ff76 	bl	800cff4 <USB_ReadInterrupts>
 8006108:	4603      	mov	r3, r0
 800610a:	f003 0302 	and.w	r3, r3, #2
 800610e:	2b02      	cmp	r3, #2
 8006110:	d107      	bne.n	8006122 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	695a      	ldr	r2, [r3, #20]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f002 0202 	and.w	r2, r2, #2
 8006120:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4618      	mov	r0, r3
 8006128:	f006 ff64 	bl	800cff4 <USB_ReadInterrupts>
 800612c:	4603      	mov	r3, r0
 800612e:	f003 0310 	and.w	r3, r3, #16
 8006132:	2b10      	cmp	r3, #16
 8006134:	d161      	bne.n	80061fa <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	699a      	ldr	r2, [r3, #24]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f022 0210 	bic.w	r2, r2, #16
 8006144:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006146:	6a3b      	ldr	r3, [r7, #32]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	f003 020f 	and.w	r2, r3, #15
 8006152:	4613      	mov	r3, r2
 8006154:	00db      	lsls	r3, r3, #3
 8006156:	4413      	add	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	4413      	add	r3, r2
 8006162:	3304      	adds	r3, #4
 8006164:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	0c5b      	lsrs	r3, r3, #17
 800616a:	f003 030f 	and.w	r3, r3, #15
 800616e:	2b02      	cmp	r3, #2
 8006170:	d124      	bne.n	80061bc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006172:	69ba      	ldr	r2, [r7, #24]
 8006174:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006178:	4013      	ands	r3, r2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d035      	beq.n	80061ea <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	091b      	lsrs	r3, r3, #4
 8006186:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006188:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800618c:	b29b      	uxth	r3, r3
 800618e:	461a      	mov	r2, r3
 8006190:	6a38      	ldr	r0, [r7, #32]
 8006192:	f006 fd9b 	bl	800cccc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	691a      	ldr	r2, [r3, #16]
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	091b      	lsrs	r3, r3, #4
 800619e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061a2:	441a      	add	r2, r3
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	6a1a      	ldr	r2, [r3, #32]
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	091b      	lsrs	r3, r3, #4
 80061b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061b4:	441a      	add	r2, r3
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	621a      	str	r2, [r3, #32]
 80061ba:	e016      	b.n	80061ea <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	0c5b      	lsrs	r3, r3, #17
 80061c0:	f003 030f 	and.w	r3, r3, #15
 80061c4:	2b06      	cmp	r3, #6
 80061c6:	d110      	bne.n	80061ea <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80061ce:	2208      	movs	r2, #8
 80061d0:	4619      	mov	r1, r3
 80061d2:	6a38      	ldr	r0, [r7, #32]
 80061d4:	f006 fd7a 	bl	800cccc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	6a1a      	ldr	r2, [r3, #32]
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	091b      	lsrs	r3, r3, #4
 80061e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061e4:	441a      	add	r2, r3
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	699a      	ldr	r2, [r3, #24]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f042 0210 	orr.w	r2, r2, #16
 80061f8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4618      	mov	r0, r3
 8006200:	f006 fef8 	bl	800cff4 <USB_ReadInterrupts>
 8006204:	4603      	mov	r3, r0
 8006206:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800620a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800620e:	f040 80a7 	bne.w	8006360 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006212:	2300      	movs	r3, #0
 8006214:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4618      	mov	r0, r3
 800621c:	f006 fefd 	bl	800d01a <USB_ReadDevAllOutEpInterrupt>
 8006220:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006222:	e099      	b.n	8006358 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	2b00      	cmp	r3, #0
 800622c:	f000 808e 	beq.w	800634c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006236:	b2d2      	uxtb	r2, r2
 8006238:	4611      	mov	r1, r2
 800623a:	4618      	mov	r0, r3
 800623c:	f006 ff21 	bl	800d082 <USB_ReadDevOutEPInterrupt>
 8006240:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00c      	beq.n	8006266 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	4413      	add	r3, r2
 8006254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006258:	461a      	mov	r2, r3
 800625a:	2301      	movs	r3, #1
 800625c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800625e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 ff1d 	bl	80070a0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f003 0308 	and.w	r3, r3, #8
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00c      	beq.n	800628a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627c:	461a      	mov	r2, r3
 800627e:	2308      	movs	r3, #8
 8006280:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006282:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 fff3 	bl	8007270 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	f003 0310 	and.w	r3, r3, #16
 8006290:	2b00      	cmp	r3, #0
 8006292:	d008      	beq.n	80062a6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006296:	015a      	lsls	r2, r3, #5
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	4413      	add	r3, r2
 800629c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a0:	461a      	mov	r2, r3
 80062a2:	2310      	movs	r3, #16
 80062a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	f003 0302 	and.w	r3, r3, #2
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d030      	beq.n	8006312 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062b8:	2b80      	cmp	r3, #128	; 0x80
 80062ba:	d109      	bne.n	80062d0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	69fa      	ldr	r2, [r7, #28]
 80062c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80062ce:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80062d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062d2:	4613      	mov	r3, r2
 80062d4:	00db      	lsls	r3, r3, #3
 80062d6:	4413      	add	r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	4413      	add	r3, r2
 80062e2:	3304      	adds	r3, #4
 80062e4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	78db      	ldrb	r3, [r3, #3]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d108      	bne.n	8006300 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	2200      	movs	r2, #0
 80062f2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80062f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	4619      	mov	r1, r3
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f011 f978 	bl	80175f0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	4413      	add	r3, r2
 8006308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800630c:	461a      	mov	r2, r3
 800630e:	2302      	movs	r3, #2
 8006310:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	f003 0320 	and.w	r3, r3, #32
 8006318:	2b00      	cmp	r3, #0
 800631a:	d008      	beq.n	800632e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800631c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	4413      	add	r3, r2
 8006324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006328:	461a      	mov	r2, r3
 800632a:	2320      	movs	r3, #32
 800632c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d009      	beq.n	800634c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	4413      	add	r3, r2
 8006340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006344:	461a      	mov	r2, r3
 8006346:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800634a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800634c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634e:	3301      	adds	r3, #1
 8006350:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006354:	085b      	lsrs	r3, r3, #1
 8006356:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635a:	2b00      	cmp	r3, #0
 800635c:	f47f af62 	bne.w	8006224 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4618      	mov	r0, r3
 8006366:	f006 fe45 	bl	800cff4 <USB_ReadInterrupts>
 800636a:	4603      	mov	r3, r0
 800636c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006370:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006374:	f040 80db 	bne.w	800652e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4618      	mov	r0, r3
 800637e:	f006 fe66 	bl	800d04e <USB_ReadDevAllInEpInterrupt>
 8006382:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006384:	2300      	movs	r3, #0
 8006386:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006388:	e0cd      	b.n	8006526 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800638a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638c:	f003 0301 	and.w	r3, r3, #1
 8006390:	2b00      	cmp	r3, #0
 8006392:	f000 80c2 	beq.w	800651a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800639c:	b2d2      	uxtb	r2, r2
 800639e:	4611      	mov	r1, r2
 80063a0:	4618      	mov	r0, r3
 80063a2:	f006 fe8c 	bl	800d0be <USB_ReadDevInEPInterrupt>
 80063a6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	f003 0301 	and.w	r3, r3, #1
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d057      	beq.n	8006462 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80063b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b4:	f003 030f 	and.w	r3, r3, #15
 80063b8:	2201      	movs	r2, #1
 80063ba:	fa02 f303 	lsl.w	r3, r2, r3
 80063be:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	43db      	mvns	r3, r3
 80063cc:	69f9      	ldr	r1, [r7, #28]
 80063ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063d2:	4013      	ands	r3, r2
 80063d4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80063d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e2:	461a      	mov	r2, r3
 80063e4:	2301      	movs	r3, #1
 80063e6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d132      	bne.n	8006456 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80063f0:	6879      	ldr	r1, [r7, #4]
 80063f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063f4:	4613      	mov	r3, r2
 80063f6:	00db      	lsls	r3, r3, #3
 80063f8:	4413      	add	r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	440b      	add	r3, r1
 80063fe:	334c      	adds	r3, #76	; 0x4c
 8006400:	6819      	ldr	r1, [r3, #0]
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006406:	4613      	mov	r3, r2
 8006408:	00db      	lsls	r3, r3, #3
 800640a:	4413      	add	r3, r2
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	4403      	add	r3, r0
 8006410:	3348      	adds	r3, #72	; 0x48
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4419      	add	r1, r3
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800641a:	4613      	mov	r3, r2
 800641c:	00db      	lsls	r3, r3, #3
 800641e:	4413      	add	r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4403      	add	r3, r0
 8006424:	334c      	adds	r3, #76	; 0x4c
 8006426:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	2b00      	cmp	r3, #0
 800642c:	d113      	bne.n	8006456 <HAL_PCD_IRQHandler+0x3a2>
 800642e:	6879      	ldr	r1, [r7, #4]
 8006430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006432:	4613      	mov	r3, r2
 8006434:	00db      	lsls	r3, r3, #3
 8006436:	4413      	add	r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	440b      	add	r3, r1
 800643c:	3354      	adds	r3, #84	; 0x54
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d108      	bne.n	8006456 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6818      	ldr	r0, [r3, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800644e:	461a      	mov	r2, r3
 8006450:	2101      	movs	r1, #1
 8006452:	f006 fe93 	bl	800d17c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006458:	b2db      	uxtb	r3, r3
 800645a:	4619      	mov	r1, r3
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f011 f842 	bl	80174e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	f003 0308 	and.w	r3, r3, #8
 8006468:	2b00      	cmp	r3, #0
 800646a:	d008      	beq.n	800647e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800646c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646e:	015a      	lsls	r2, r3, #5
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	4413      	add	r3, r2
 8006474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006478:	461a      	mov	r2, r3
 800647a:	2308      	movs	r3, #8
 800647c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	f003 0310 	and.w	r3, r3, #16
 8006484:	2b00      	cmp	r3, #0
 8006486:	d008      	beq.n	800649a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	015a      	lsls	r2, r3, #5
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	4413      	add	r3, r2
 8006490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006494:	461a      	mov	r2, r3
 8006496:	2310      	movs	r3, #16
 8006498:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d008      	beq.n	80064b6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	015a      	lsls	r2, r3, #5
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	4413      	add	r3, r2
 80064ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064b0:	461a      	mov	r2, r3
 80064b2:	2340      	movs	r3, #64	; 0x40
 80064b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	f003 0302 	and.w	r3, r3, #2
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d023      	beq.n	8006508 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80064c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064c2:	6a38      	ldr	r0, [r7, #32]
 80064c4:	f005 fd74 	bl	800bfb0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80064c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ca:	4613      	mov	r3, r2
 80064cc:	00db      	lsls	r3, r3, #3
 80064ce:	4413      	add	r3, r2
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	3338      	adds	r3, #56	; 0x38
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	4413      	add	r3, r2
 80064d8:	3304      	adds	r3, #4
 80064da:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	78db      	ldrb	r3, [r3, #3]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d108      	bne.n	80064f6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	2200      	movs	r2, #0
 80064e8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	4619      	mov	r1, r3
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f011 f88f 	bl	8017614 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006502:	461a      	mov	r2, r3
 8006504:	2302      	movs	r3, #2
 8006506:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006512:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 fd35 	bl	8006f84 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	3301      	adds	r3, #1
 800651e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006522:	085b      	lsrs	r3, r3, #1
 8006524:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006528:	2b00      	cmp	r3, #0
 800652a:	f47f af2e 	bne.w	800638a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4618      	mov	r0, r3
 8006534:	f006 fd5e 	bl	800cff4 <USB_ReadInterrupts>
 8006538:	4603      	mov	r3, r0
 800653a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800653e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006542:	d122      	bne.n	800658a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	69fa      	ldr	r2, [r7, #28]
 800654e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006552:	f023 0301 	bic.w	r3, r3, #1
 8006556:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800655e:	2b01      	cmp	r3, #1
 8006560:	d108      	bne.n	8006574 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800656a:	2100      	movs	r1, #0
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f011 fa29 	bl	80179c4 <HAL_PCDEx_LPM_Callback>
 8006572:	e002      	b.n	800657a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f011 f82d 	bl	80175d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	695a      	ldr	r2, [r3, #20]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006588:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4618      	mov	r0, r3
 8006590:	f006 fd30 	bl	800cff4 <USB_ReadInterrupts>
 8006594:	4603      	mov	r3, r0
 8006596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800659a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800659e:	d112      	bne.n	80065c6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d102      	bne.n	80065b6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f010 ffe9 	bl	8017588 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	695a      	ldr	r2, [r3, #20]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80065c4:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4618      	mov	r0, r3
 80065cc:	f006 fd12 	bl	800cff4 <USB_ReadInterrupts>
 80065d0:	4603      	mov	r3, r0
 80065d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065da:	d121      	bne.n	8006620 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	695a      	ldr	r2, [r3, #20]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80065ea:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d111      	bne.n	800661a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006604:	089b      	lsrs	r3, r3, #2
 8006606:	f003 020f 	and.w	r2, r3, #15
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006610:	2101      	movs	r1, #1
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f011 f9d6 	bl	80179c4 <HAL_PCDEx_LPM_Callback>
 8006618:	e002      	b.n	8006620 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f010 ffb4 	bl	8017588 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4618      	mov	r0, r3
 8006626:	f006 fce5 	bl	800cff4 <USB_ReadInterrupts>
 800662a:	4603      	mov	r3, r0
 800662c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006634:	f040 80b7 	bne.w	80067a6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	69fa      	ldr	r2, [r7, #28]
 8006642:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006646:	f023 0301 	bic.w	r3, r3, #1
 800664a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2110      	movs	r1, #16
 8006652:	4618      	mov	r0, r3
 8006654:	f005 fcac 	bl	800bfb0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006658:	2300      	movs	r3, #0
 800665a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800665c:	e046      	b.n	80066ec <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800665e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	4413      	add	r3, r2
 8006666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800666a:	461a      	mov	r2, r3
 800666c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006670:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006674:	015a      	lsls	r2, r3, #5
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	4413      	add	r3, r2
 800667a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006682:	0151      	lsls	r1, r2, #5
 8006684:	69fa      	ldr	r2, [r7, #28]
 8006686:	440a      	add	r2, r1
 8006688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800668c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006690:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006694:	015a      	lsls	r2, r3, #5
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	4413      	add	r3, r2
 800669a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800669e:	461a      	mov	r2, r3
 80066a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80066a4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80066a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a8:	015a      	lsls	r2, r3, #5
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066b6:	0151      	lsls	r1, r2, #5
 80066b8:	69fa      	ldr	r2, [r7, #28]
 80066ba:	440a      	add	r2, r1
 80066bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80066c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c8:	015a      	lsls	r2, r3, #5
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	4413      	add	r3, r2
 80066ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066d6:	0151      	lsls	r1, r2, #5
 80066d8:	69fa      	ldr	r2, [r7, #28]
 80066da:	440a      	add	r2, r1
 80066dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066e4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e8:	3301      	adds	r3, #1
 80066ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d3b3      	bcc.n	800665e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	69fa      	ldr	r2, [r7, #28]
 8006700:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006704:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006708:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670e:	2b00      	cmp	r3, #0
 8006710:	d016      	beq.n	8006740 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006718:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800671c:	69fa      	ldr	r2, [r7, #28]
 800671e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006722:	f043 030b 	orr.w	r3, r3, #11
 8006726:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006732:	69fa      	ldr	r2, [r7, #28]
 8006734:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006738:	f043 030b 	orr.w	r3, r3, #11
 800673c:	6453      	str	r3, [r2, #68]	; 0x44
 800673e:	e015      	b.n	800676c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006746:	695b      	ldr	r3, [r3, #20]
 8006748:	69fa      	ldr	r2, [r7, #28]
 800674a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800674e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006752:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006756:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	69fa      	ldr	r2, [r7, #28]
 8006762:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006766:	f043 030b 	orr.w	r3, r3, #11
 800676a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	69fa      	ldr	r2, [r7, #28]
 8006776:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800677a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800677e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6818      	ldr	r0, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006790:	461a      	mov	r2, r3
 8006792:	f006 fcf3 	bl	800d17c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	695a      	ldr	r2, [r3, #20]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80067a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f006 fc22 	bl	800cff4 <USB_ReadInterrupts>
 80067b0:	4603      	mov	r3, r0
 80067b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067ba:	d124      	bne.n	8006806 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4618      	mov	r0, r3
 80067c2:	f006 fcb8 	bl	800d136 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f005 fc6d 	bl	800c0aa <USB_GetDevSpeed>
 80067d0:	4603      	mov	r3, r0
 80067d2:	461a      	mov	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681c      	ldr	r4, [r3, #0]
 80067dc:	f000 fef0 	bl	80075c0 <HAL_RCC_GetHCLKFreq>
 80067e0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	461a      	mov	r2, r3
 80067ea:	4620      	mov	r0, r4
 80067ec:	f005 f972 	bl	800bad4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f010 fea0 	bl	8017536 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	695a      	ldr	r2, [r3, #20]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006804:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4618      	mov	r0, r3
 800680c:	f006 fbf2 	bl	800cff4 <USB_ReadInterrupts>
 8006810:	4603      	mov	r3, r0
 8006812:	f003 0308 	and.w	r3, r3, #8
 8006816:	2b08      	cmp	r3, #8
 8006818:	d10a      	bne.n	8006830 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f010 fe7d 	bl	801751a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	695a      	ldr	r2, [r3, #20]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f002 0208 	and.w	r2, r2, #8
 800682e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4618      	mov	r0, r3
 8006836:	f006 fbdd 	bl	800cff4 <USB_ReadInterrupts>
 800683a:	4603      	mov	r3, r0
 800683c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006840:	2b80      	cmp	r3, #128	; 0x80
 8006842:	d122      	bne.n	800688a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006844:	6a3b      	ldr	r3, [r7, #32]
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800684c:	6a3b      	ldr	r3, [r7, #32]
 800684e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006850:	2301      	movs	r3, #1
 8006852:	627b      	str	r3, [r7, #36]	; 0x24
 8006854:	e014      	b.n	8006880 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006856:	6879      	ldr	r1, [r7, #4]
 8006858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800685a:	4613      	mov	r3, r2
 800685c:	00db      	lsls	r3, r3, #3
 800685e:	4413      	add	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	440b      	add	r3, r1
 8006864:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d105      	bne.n	800687a <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006870:	b2db      	uxtb	r3, r3
 8006872:	4619      	mov	r1, r3
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fb27 	bl	8006ec8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687c:	3301      	adds	r3, #1
 800687e:	627b      	str	r3, [r7, #36]	; 0x24
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006886:	429a      	cmp	r2, r3
 8006888:	d3e5      	bcc.n	8006856 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4618      	mov	r0, r3
 8006890:	f006 fbb0 	bl	800cff4 <USB_ReadInterrupts>
 8006894:	4603      	mov	r3, r0
 8006896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800689a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800689e:	d13b      	bne.n	8006918 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80068a0:	2301      	movs	r3, #1
 80068a2:	627b      	str	r3, [r7, #36]	; 0x24
 80068a4:	e02b      	b.n	80068fe <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80068a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a8:	015a      	lsls	r2, r3, #5
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80068b6:	6879      	ldr	r1, [r7, #4]
 80068b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ba:	4613      	mov	r3, r2
 80068bc:	00db      	lsls	r3, r3, #3
 80068be:	4413      	add	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	440b      	add	r3, r1
 80068c4:	3340      	adds	r3, #64	; 0x40
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d115      	bne.n	80068f8 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80068cc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	da12      	bge.n	80068f8 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80068d2:	6879      	ldr	r1, [r7, #4]
 80068d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d6:	4613      	mov	r3, r2
 80068d8:	00db      	lsls	r3, r3, #3
 80068da:	4413      	add	r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	440b      	add	r3, r1
 80068e0:	333f      	adds	r3, #63	; 0x3f
 80068e2:	2201      	movs	r2, #1
 80068e4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80068e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	4619      	mov	r1, r3
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 fae8 	bl	8006ec8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	3301      	adds	r3, #1
 80068fc:	627b      	str	r3, [r7, #36]	; 0x24
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006904:	429a      	cmp	r2, r3
 8006906:	d3ce      	bcc.n	80068a6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	695a      	ldr	r2, [r3, #20]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006916:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4618      	mov	r0, r3
 800691e:	f006 fb69 	bl	800cff4 <USB_ReadInterrupts>
 8006922:	4603      	mov	r3, r0
 8006924:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006928:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800692c:	d155      	bne.n	80069da <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800692e:	2301      	movs	r3, #1
 8006930:	627b      	str	r3, [r7, #36]	; 0x24
 8006932:	e045      	b.n	80069c0 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006936:	015a      	lsls	r2, r3, #5
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	4413      	add	r3, r2
 800693c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006944:	6879      	ldr	r1, [r7, #4]
 8006946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006948:	4613      	mov	r3, r2
 800694a:	00db      	lsls	r3, r3, #3
 800694c:	4413      	add	r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	440b      	add	r3, r1
 8006952:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d12e      	bne.n	80069ba <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800695c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800695e:	2b00      	cmp	r3, #0
 8006960:	da2b      	bge.n	80069ba <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800696e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006972:	429a      	cmp	r2, r3
 8006974:	d121      	bne.n	80069ba <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006976:	6879      	ldr	r1, [r7, #4]
 8006978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800697a:	4613      	mov	r3, r2
 800697c:	00db      	lsls	r3, r3, #3
 800697e:	4413      	add	r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	440b      	add	r3, r1
 8006984:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006988:	2201      	movs	r2, #1
 800698a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800698c:	6a3b      	ldr	r3, [r7, #32]
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006994:	6a3b      	ldr	r3, [r7, #32]
 8006996:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006998:	6a3b      	ldr	r3, [r7, #32]
 800699a:	695b      	ldr	r3, [r3, #20]
 800699c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d10a      	bne.n	80069ba <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	69fa      	ldr	r2, [r7, #28]
 80069ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80069b6:	6053      	str	r3, [r2, #4]
            break;
 80069b8:	e007      	b.n	80069ca <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80069ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069bc:	3301      	adds	r3, #1
 80069be:	627b      	str	r3, [r7, #36]	; 0x24
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d3b4      	bcc.n	8006934 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	695a      	ldr	r2, [r3, #20]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80069d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4618      	mov	r0, r3
 80069e0:	f006 fb08 	bl	800cff4 <USB_ReadInterrupts>
 80069e4:	4603      	mov	r3, r0
 80069e6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80069ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069ee:	d10a      	bne.n	8006a06 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f010 fe21 	bl	8017638 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	695a      	ldr	r2, [r3, #20]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006a04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f006 faf2 	bl	800cff4 <USB_ReadInterrupts>
 8006a10:	4603      	mov	r3, r0
 8006a12:	f003 0304 	and.w	r3, r3, #4
 8006a16:	2b04      	cmp	r3, #4
 8006a18:	d115      	bne.n	8006a46 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	f003 0304 	and.w	r3, r3, #4
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d002      	beq.n	8006a32 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f010 fe11 	bl	8017654 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6859      	ldr	r1, [r3, #4]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	69ba      	ldr	r2, [r7, #24]
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	605a      	str	r2, [r3, #4]
 8006a42:	e000      	b.n	8006a46 <HAL_PCD_IRQHandler+0x992>
      return;
 8006a44:	bf00      	nop
    }
  }
}
 8006a46:	3734      	adds	r7, #52	; 0x34
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd90      	pop	{r4, r7, pc}

08006a4c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	460b      	mov	r3, r1
 8006a56:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d101      	bne.n	8006a66 <HAL_PCD_SetAddress+0x1a>
 8006a62:	2302      	movs	r3, #2
 8006a64:	e013      	b.n	8006a8e <HAL_PCD_SetAddress+0x42>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	78fa      	ldrb	r2, [r7, #3]
 8006a72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	78fa      	ldrb	r2, [r7, #3]
 8006a7c:	4611      	mov	r1, r2
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f006 fa50 	bl	800cf24 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3708      	adds	r7, #8
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b084      	sub	sp, #16
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
 8006a9e:	4608      	mov	r0, r1
 8006aa0:	4611      	mov	r1, r2
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	70fb      	strb	r3, [r7, #3]
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	803b      	strh	r3, [r7, #0]
 8006aac:	4613      	mov	r3, r2
 8006aae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006ab4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	da0f      	bge.n	8006adc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006abc:	78fb      	ldrb	r3, [r7, #3]
 8006abe:	f003 020f 	and.w	r2, r3, #15
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	00db      	lsls	r3, r3, #3
 8006ac6:	4413      	add	r3, r2
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	3338      	adds	r3, #56	; 0x38
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	4413      	add	r3, r2
 8006ad0:	3304      	adds	r3, #4
 8006ad2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	705a      	strb	r2, [r3, #1]
 8006ada:	e00f      	b.n	8006afc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006adc:	78fb      	ldrb	r3, [r7, #3]
 8006ade:	f003 020f 	and.w	r2, r3, #15
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	00db      	lsls	r3, r3, #3
 8006ae6:	4413      	add	r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	4413      	add	r3, r2
 8006af2:	3304      	adds	r3, #4
 8006af4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006afc:	78fb      	ldrb	r3, [r7, #3]
 8006afe:	f003 030f 	and.w	r3, r3, #15
 8006b02:	b2da      	uxtb	r2, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006b08:	883a      	ldrh	r2, [r7, #0]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	78ba      	ldrb	r2, [r7, #2]
 8006b12:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	785b      	ldrb	r3, [r3, #1]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d004      	beq.n	8006b26 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006b26:	78bb      	ldrb	r3, [r7, #2]
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d102      	bne.n	8006b32 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d101      	bne.n	8006b40 <HAL_PCD_EP_Open+0xaa>
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	e00e      	b.n	8006b5e <HAL_PCD_EP_Open+0xc8>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68f9      	ldr	r1, [r7, #12]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f005 fad0 	bl	800c0f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006b5c:	7afb      	ldrb	r3, [r7, #11]
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b084      	sub	sp, #16
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
 8006b6e:	460b      	mov	r3, r1
 8006b70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006b72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	da0f      	bge.n	8006b9a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b7a:	78fb      	ldrb	r3, [r7, #3]
 8006b7c:	f003 020f 	and.w	r2, r3, #15
 8006b80:	4613      	mov	r3, r2
 8006b82:	00db      	lsls	r3, r3, #3
 8006b84:	4413      	add	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	3338      	adds	r3, #56	; 0x38
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	3304      	adds	r3, #4
 8006b90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2201      	movs	r2, #1
 8006b96:	705a      	strb	r2, [r3, #1]
 8006b98:	e00f      	b.n	8006bba <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b9a:	78fb      	ldrb	r3, [r7, #3]
 8006b9c:	f003 020f 	and.w	r2, r3, #15
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	00db      	lsls	r3, r3, #3
 8006ba4:	4413      	add	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	4413      	add	r3, r2
 8006bb0:	3304      	adds	r3, #4
 8006bb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006bba:	78fb      	ldrb	r3, [r7, #3]
 8006bbc:	f003 030f 	and.w	r3, r3, #15
 8006bc0:	b2da      	uxtb	r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d101      	bne.n	8006bd4 <HAL_PCD_EP_Close+0x6e>
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	e00e      	b.n	8006bf2 <HAL_PCD_EP_Close+0x8c>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68f9      	ldr	r1, [r7, #12]
 8006be2:	4618      	mov	r0, r3
 8006be4:	f005 fb0e 	bl	800c204 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b086      	sub	sp, #24
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	60f8      	str	r0, [r7, #12]
 8006c02:	607a      	str	r2, [r7, #4]
 8006c04:	603b      	str	r3, [r7, #0]
 8006c06:	460b      	mov	r3, r1
 8006c08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c0a:	7afb      	ldrb	r3, [r7, #11]
 8006c0c:	f003 020f 	and.w	r2, r3, #15
 8006c10:	4613      	mov	r3, r2
 8006c12:	00db      	lsls	r3, r3, #3
 8006c14:	4413      	add	r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	4413      	add	r3, r2
 8006c20:	3304      	adds	r3, #4
 8006c22:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	2200      	movs	r2, #0
 8006c34:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c3c:	7afb      	ldrb	r3, [r7, #11]
 8006c3e:	f003 030f 	and.w	r3, r3, #15
 8006c42:	b2da      	uxtb	r2, r3
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d102      	bne.n	8006c56 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006c56:	7afb      	ldrb	r3, [r7, #11]
 8006c58:	f003 030f 	and.w	r3, r3, #15
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d109      	bne.n	8006c74 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6818      	ldr	r0, [r3, #0]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	6979      	ldr	r1, [r7, #20]
 8006c6e:	f005 fded 	bl	800c84c <USB_EP0StartXfer>
 8006c72:	e008      	b.n	8006c86 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6818      	ldr	r0, [r3, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	461a      	mov	r2, r3
 8006c80:	6979      	ldr	r1, [r7, #20]
 8006c82:	f005 fb9b 	bl	800c3bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3718      	adds	r7, #24
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	460b      	mov	r3, r1
 8006c9a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006c9c:	78fb      	ldrb	r3, [r7, #3]
 8006c9e:	f003 020f 	and.w	r2, r3, #15
 8006ca2:	6879      	ldr	r1, [r7, #4]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	00db      	lsls	r3, r3, #3
 8006ca8:	4413      	add	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	440b      	add	r3, r1
 8006cae:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006cb2:	681b      	ldr	r3, [r3, #0]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	607a      	str	r2, [r7, #4]
 8006cca:	603b      	str	r3, [r7, #0]
 8006ccc:	460b      	mov	r3, r1
 8006cce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006cd0:	7afb      	ldrb	r3, [r7, #11]
 8006cd2:	f003 020f 	and.w	r2, r3, #15
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	00db      	lsls	r3, r3, #3
 8006cda:	4413      	add	r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	3338      	adds	r3, #56	; 0x38
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	3304      	adds	r3, #4
 8006ce6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d00:	7afb      	ldrb	r3, [r7, #11]
 8006d02:	f003 030f 	and.w	r3, r3, #15
 8006d06:	b2da      	uxtb	r2, r3
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d102      	bne.n	8006d1a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006d1a:	7afb      	ldrb	r3, [r7, #11]
 8006d1c:	f003 030f 	and.w	r3, r3, #15
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d109      	bne.n	8006d38 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6818      	ldr	r0, [r3, #0]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	461a      	mov	r2, r3
 8006d30:	6979      	ldr	r1, [r7, #20]
 8006d32:	f005 fd8b 	bl	800c84c <USB_EP0StartXfer>
 8006d36:	e008      	b.n	8006d4a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6818      	ldr	r0, [r3, #0]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	461a      	mov	r2, r3
 8006d44:	6979      	ldr	r1, [r7, #20]
 8006d46:	f005 fb39 	bl	800c3bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3718      	adds	r7, #24
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006d60:	78fb      	ldrb	r3, [r7, #3]
 8006d62:	f003 020f 	and.w	r2, r3, #15
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d901      	bls.n	8006d72 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e050      	b.n	8006e14 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006d72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	da0f      	bge.n	8006d9a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d7a:	78fb      	ldrb	r3, [r7, #3]
 8006d7c:	f003 020f 	and.w	r2, r3, #15
 8006d80:	4613      	mov	r3, r2
 8006d82:	00db      	lsls	r3, r3, #3
 8006d84:	4413      	add	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	3338      	adds	r3, #56	; 0x38
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	3304      	adds	r3, #4
 8006d90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2201      	movs	r2, #1
 8006d96:	705a      	strb	r2, [r3, #1]
 8006d98:	e00d      	b.n	8006db6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006d9a:	78fa      	ldrb	r2, [r7, #3]
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	00db      	lsls	r3, r3, #3
 8006da0:	4413      	add	r3, r2
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	4413      	add	r3, r2
 8006dac:	3304      	adds	r3, #4
 8006dae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2200      	movs	r2, #0
 8006db4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2201      	movs	r2, #1
 8006dba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006dbc:	78fb      	ldrb	r3, [r7, #3]
 8006dbe:	f003 030f 	and.w	r3, r3, #15
 8006dc2:	b2da      	uxtb	r2, r3
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d101      	bne.n	8006dd6 <HAL_PCD_EP_SetStall+0x82>
 8006dd2:	2302      	movs	r3, #2
 8006dd4:	e01e      	b.n	8006e14 <HAL_PCD_EP_SetStall+0xc0>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68f9      	ldr	r1, [r7, #12]
 8006de4:	4618      	mov	r0, r3
 8006de6:	f005 ffc9 	bl	800cd7c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006dea:	78fb      	ldrb	r3, [r7, #3]
 8006dec:	f003 030f 	and.w	r3, r3, #15
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d10a      	bne.n	8006e0a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6818      	ldr	r0, [r3, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	b2d9      	uxtb	r1, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006e04:	461a      	mov	r2, r3
 8006e06:	f006 f9b9 	bl	800d17c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	460b      	mov	r3, r1
 8006e26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006e28:	78fb      	ldrb	r3, [r7, #3]
 8006e2a:	f003 020f 	and.w	r2, r3, #15
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d901      	bls.n	8006e3a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e042      	b.n	8006ec0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006e3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	da0f      	bge.n	8006e62 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e42:	78fb      	ldrb	r3, [r7, #3]
 8006e44:	f003 020f 	and.w	r2, r3, #15
 8006e48:	4613      	mov	r3, r2
 8006e4a:	00db      	lsls	r3, r3, #3
 8006e4c:	4413      	add	r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	3338      	adds	r3, #56	; 0x38
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	4413      	add	r3, r2
 8006e56:	3304      	adds	r3, #4
 8006e58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	705a      	strb	r2, [r3, #1]
 8006e60:	e00f      	b.n	8006e82 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e62:	78fb      	ldrb	r3, [r7, #3]
 8006e64:	f003 020f 	and.w	r2, r3, #15
 8006e68:	4613      	mov	r3, r2
 8006e6a:	00db      	lsls	r3, r3, #3
 8006e6c:	4413      	add	r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	4413      	add	r3, r2
 8006e78:	3304      	adds	r3, #4
 8006e7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e88:	78fb      	ldrb	r3, [r7, #3]
 8006e8a:	f003 030f 	and.w	r3, r3, #15
 8006e8e:	b2da      	uxtb	r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d101      	bne.n	8006ea2 <HAL_PCD_EP_ClrStall+0x86>
 8006e9e:	2302      	movs	r3, #2
 8006ea0:	e00e      	b.n	8006ec0 <HAL_PCD_EP_ClrStall+0xa4>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68f9      	ldr	r1, [r7, #12]
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f005 ffd1 	bl	800ce58 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006ed4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	da0c      	bge.n	8006ef6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006edc:	78fb      	ldrb	r3, [r7, #3]
 8006ede:	f003 020f 	and.w	r2, r3, #15
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	00db      	lsls	r3, r3, #3
 8006ee6:	4413      	add	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	3338      	adds	r3, #56	; 0x38
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	4413      	add	r3, r2
 8006ef0:	3304      	adds	r3, #4
 8006ef2:	60fb      	str	r3, [r7, #12]
 8006ef4:	e00c      	b.n	8006f10 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ef6:	78fb      	ldrb	r3, [r7, #3]
 8006ef8:	f003 020f 	and.w	r2, r3, #15
 8006efc:	4613      	mov	r3, r2
 8006efe:	00db      	lsls	r3, r3, #3
 8006f00:	4413      	add	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	3304      	adds	r3, #4
 8006f0e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68f9      	ldr	r1, [r7, #12]
 8006f16:	4618      	mov	r0, r3
 8006f18:	f005 fdf0 	bl	800cafc <USB_EPStopXfer>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006f20:	7afb      	ldrb	r3, [r7, #11]
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b082      	sub	sp, #8
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
 8006f32:	460b      	mov	r3, r1
 8006f34:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d101      	bne.n	8006f44 <HAL_PCD_EP_Flush+0x1a>
 8006f40:	2302      	movs	r3, #2
 8006f42:	e01b      	b.n	8006f7c <HAL_PCD_EP_Flush+0x52>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8006f4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	da09      	bge.n	8006f68 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	78fb      	ldrb	r3, [r7, #3]
 8006f5a:	f003 030f 	and.w	r3, r3, #15
 8006f5e:	4619      	mov	r1, r3
 8006f60:	4610      	mov	r0, r2
 8006f62:	f005 f825 	bl	800bfb0 <USB_FlushTxFifo>
 8006f66:	e004      	b.n	8006f72 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f005 f853 	bl	800c018 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b08a      	sub	sp, #40	; 0x28
 8006f88:	af02      	add	r7, sp, #8
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006f98:	683a      	ldr	r2, [r7, #0]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	00db      	lsls	r3, r3, #3
 8006f9e:	4413      	add	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	3338      	adds	r3, #56	; 0x38
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	3304      	adds	r3, #4
 8006faa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6a1a      	ldr	r2, [r3, #32]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	699b      	ldr	r3, [r3, #24]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d901      	bls.n	8006fbc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e06c      	b.n	8007096 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	699a      	ldr	r2, [r3, #24]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6a1b      	ldr	r3, [r3, #32]
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	69fa      	ldr	r2, [r7, #28]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d902      	bls.n	8006fd8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	3303      	adds	r3, #3
 8006fdc:	089b      	lsrs	r3, r3, #2
 8006fde:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006fe0:	e02b      	b.n	800703a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	699a      	ldr	r2, [r3, #24]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	69fa      	ldr	r2, [r7, #28]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d902      	bls.n	8006ffe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	3303      	adds	r3, #3
 8007002:	089b      	lsrs	r3, r3, #2
 8007004:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6919      	ldr	r1, [r3, #16]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	b2da      	uxtb	r2, r3
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007016:	b2db      	uxtb	r3, r3
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	4603      	mov	r3, r0
 800701c:	6978      	ldr	r0, [r7, #20]
 800701e:	f005 fe17 	bl	800cc50 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	691a      	ldr	r2, [r3, #16]
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	441a      	add	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6a1a      	ldr	r2, [r3, #32]
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	441a      	add	r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	015a      	lsls	r2, r3, #5
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	4413      	add	r3, r2
 8007042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007046:	699b      	ldr	r3, [r3, #24]
 8007048:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800704a:	69ba      	ldr	r2, [r7, #24]
 800704c:	429a      	cmp	r2, r3
 800704e:	d809      	bhi.n	8007064 <PCD_WriteEmptyTxFifo+0xe0>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6a1a      	ldr	r2, [r3, #32]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007058:	429a      	cmp	r2, r3
 800705a:	d203      	bcs.n	8007064 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	699b      	ldr	r3, [r3, #24]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1be      	bne.n	8006fe2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	699a      	ldr	r2, [r3, #24]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6a1b      	ldr	r3, [r3, #32]
 800706c:	429a      	cmp	r2, r3
 800706e:	d811      	bhi.n	8007094 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	f003 030f 	and.w	r3, r3, #15
 8007076:	2201      	movs	r2, #1
 8007078:	fa02 f303 	lsl.w	r3, r2, r3
 800707c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007084:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	43db      	mvns	r3, r3
 800708a:	6939      	ldr	r1, [r7, #16]
 800708c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007090:	4013      	ands	r3, r2
 8007092:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3720      	adds	r7, #32
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
	...

080070a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b088      	sub	sp, #32
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	333c      	adds	r3, #60	; 0x3c
 80070b8:	3304      	adds	r3, #4
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	015a      	lsls	r2, r3, #5
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	4413      	add	r3, r2
 80070c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d17b      	bne.n	80071ce <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	f003 0308 	and.w	r3, r3, #8
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d015      	beq.n	800710c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	4a61      	ldr	r2, [pc, #388]	; (8007268 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	f240 80b9 	bls.w	800725c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f000 80b3 	beq.w	800725c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	015a      	lsls	r2, r3, #5
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	4413      	add	r3, r2
 80070fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007102:	461a      	mov	r2, r3
 8007104:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007108:	6093      	str	r3, [r2, #8]
 800710a:	e0a7      	b.n	800725c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	f003 0320 	and.w	r3, r3, #32
 8007112:	2b00      	cmp	r3, #0
 8007114:	d009      	beq.n	800712a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	015a      	lsls	r2, r3, #5
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	4413      	add	r3, r2
 800711e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007122:	461a      	mov	r2, r3
 8007124:	2320      	movs	r3, #32
 8007126:	6093      	str	r3, [r2, #8]
 8007128:	e098      	b.n	800725c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007130:	2b00      	cmp	r3, #0
 8007132:	f040 8093 	bne.w	800725c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	4a4b      	ldr	r2, [pc, #300]	; (8007268 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d90f      	bls.n	800715e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00a      	beq.n	800715e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	015a      	lsls	r2, r3, #5
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	4413      	add	r3, r2
 8007150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007154:	461a      	mov	r2, r3
 8007156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800715a:	6093      	str	r3, [r2, #8]
 800715c:	e07e      	b.n	800725c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800715e:	683a      	ldr	r2, [r7, #0]
 8007160:	4613      	mov	r3, r2
 8007162:	00db      	lsls	r3, r3, #3
 8007164:	4413      	add	r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	4413      	add	r3, r2
 8007170:	3304      	adds	r3, #4
 8007172:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	69da      	ldr	r2, [r3, #28]
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	0159      	lsls	r1, r3, #5
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	440b      	add	r3, r1
 8007180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800718a:	1ad2      	subs	r2, r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d114      	bne.n	80071c0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d109      	bne.n	80071b2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6818      	ldr	r0, [r3, #0]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80071a8:	461a      	mov	r2, r3
 80071aa:	2101      	movs	r1, #1
 80071ac:	f005 ffe6 	bl	800d17c <USB_EP0_OutStart>
 80071b0:	e006      	b.n	80071c0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	691a      	ldr	r2, [r3, #16]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6a1b      	ldr	r3, [r3, #32]
 80071ba:	441a      	add	r2, r3
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	4619      	mov	r1, r3
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f010 f972 	bl	80174b0 <HAL_PCD_DataOutStageCallback>
 80071cc:	e046      	b.n	800725c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	4a26      	ldr	r2, [pc, #152]	; (800726c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d124      	bne.n	8007220 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d00a      	beq.n	80071f6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	015a      	lsls	r2, r3, #5
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	4413      	add	r3, r2
 80071e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ec:	461a      	mov	r2, r3
 80071ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071f2:	6093      	str	r3, [r2, #8]
 80071f4:	e032      	b.n	800725c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	f003 0320 	and.w	r3, r3, #32
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d008      	beq.n	8007212 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	015a      	lsls	r2, r3, #5
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	4413      	add	r3, r2
 8007208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800720c:	461a      	mov	r2, r3
 800720e:	2320      	movs	r3, #32
 8007210:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	b2db      	uxtb	r3, r3
 8007216:	4619      	mov	r1, r3
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f010 f949 	bl	80174b0 <HAL_PCD_DataOutStageCallback>
 800721e:	e01d      	b.n	800725c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d114      	bne.n	8007250 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007226:	6879      	ldr	r1, [r7, #4]
 8007228:	683a      	ldr	r2, [r7, #0]
 800722a:	4613      	mov	r3, r2
 800722c:	00db      	lsls	r3, r3, #3
 800722e:	4413      	add	r3, r2
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	440b      	add	r3, r1
 8007234:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d108      	bne.n	8007250 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6818      	ldr	r0, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007248:	461a      	mov	r2, r3
 800724a:	2100      	movs	r1, #0
 800724c:	f005 ff96 	bl	800d17c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	b2db      	uxtb	r3, r3
 8007254:	4619      	mov	r1, r3
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f010 f92a 	bl	80174b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3720      	adds	r7, #32
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	4f54300a 	.word	0x4f54300a
 800726c:	4f54310a 	.word	0x4f54310a

08007270 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	333c      	adds	r3, #60	; 0x3c
 8007288:	3304      	adds	r3, #4
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	015a      	lsls	r2, r3, #5
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	4413      	add	r3, r2
 8007296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	4a15      	ldr	r2, [pc, #84]	; (80072f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d90e      	bls.n	80072c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d009      	beq.n	80072c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	015a      	lsls	r2, r3, #5
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	4413      	add	r3, r2
 80072b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072bc:	461a      	mov	r2, r3
 80072be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f010 f8e1 	bl	801748c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	4a0a      	ldr	r2, [pc, #40]	; (80072f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d90c      	bls.n	80072ec <PCD_EP_OutSetupPacket_int+0x7c>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d108      	bne.n	80072ec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6818      	ldr	r0, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80072e4:	461a      	mov	r2, r3
 80072e6:	2101      	movs	r1, #1
 80072e8:	f005 ff48 	bl	800d17c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3718      	adds	r7, #24
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	4f54300a 	.word	0x4f54300a

080072fc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	460b      	mov	r3, r1
 8007306:	70fb      	strb	r3, [r7, #3]
 8007308:	4613      	mov	r3, r2
 800730a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007312:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007314:	78fb      	ldrb	r3, [r7, #3]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d107      	bne.n	800732a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800731a:	883b      	ldrh	r3, [r7, #0]
 800731c:	0419      	lsls	r1, r3, #16
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68ba      	ldr	r2, [r7, #8]
 8007324:	430a      	orrs	r2, r1
 8007326:	629a      	str	r2, [r3, #40]	; 0x28
 8007328:	e028      	b.n	800737c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007330:	0c1b      	lsrs	r3, r3, #16
 8007332:	68ba      	ldr	r2, [r7, #8]
 8007334:	4413      	add	r3, r2
 8007336:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007338:	2300      	movs	r3, #0
 800733a:	73fb      	strb	r3, [r7, #15]
 800733c:	e00d      	b.n	800735a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	7bfb      	ldrb	r3, [r7, #15]
 8007344:	3340      	adds	r3, #64	; 0x40
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4413      	add	r3, r2
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	0c1b      	lsrs	r3, r3, #16
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	4413      	add	r3, r2
 8007352:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007354:	7bfb      	ldrb	r3, [r7, #15]
 8007356:	3301      	adds	r3, #1
 8007358:	73fb      	strb	r3, [r7, #15]
 800735a:	7bfa      	ldrb	r2, [r7, #15]
 800735c:	78fb      	ldrb	r3, [r7, #3]
 800735e:	3b01      	subs	r3, #1
 8007360:	429a      	cmp	r2, r3
 8007362:	d3ec      	bcc.n	800733e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007364:	883b      	ldrh	r3, [r7, #0]
 8007366:	0418      	lsls	r0, r3, #16
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6819      	ldr	r1, [r3, #0]
 800736c:	78fb      	ldrb	r3, [r7, #3]
 800736e:	3b01      	subs	r3, #1
 8007370:	68ba      	ldr	r2, [r7, #8]
 8007372:	4302      	orrs	r2, r0
 8007374:	3340      	adds	r3, #64	; 0x40
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	440b      	add	r3, r1
 800737a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3714      	adds	r7, #20
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr

0800738a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800738a:	b480      	push	{r7}
 800738c:	b083      	sub	sp, #12
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
 8007392:	460b      	mov	r3, r1
 8007394:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	887a      	ldrh	r2, [r7, #2]
 800739c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2201      	movs	r2, #1
 80073be:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	699b      	ldr	r3, [r3, #24]
 80073ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073de:	f043 0303 	orr.w	r3, r3, #3
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3714      	adds	r7, #20
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d101      	bne.n	8007408 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e0cc      	b.n	80075a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007408:	4b68      	ldr	r3, [pc, #416]	; (80075ac <HAL_RCC_ClockConfig+0x1b8>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 030f 	and.w	r3, r3, #15
 8007410:	683a      	ldr	r2, [r7, #0]
 8007412:	429a      	cmp	r2, r3
 8007414:	d90c      	bls.n	8007430 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007416:	4b65      	ldr	r3, [pc, #404]	; (80075ac <HAL_RCC_ClockConfig+0x1b8>)
 8007418:	683a      	ldr	r2, [r7, #0]
 800741a:	b2d2      	uxtb	r2, r2
 800741c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800741e:	4b63      	ldr	r3, [pc, #396]	; (80075ac <HAL_RCC_ClockConfig+0x1b8>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 030f 	and.w	r3, r3, #15
 8007426:	683a      	ldr	r2, [r7, #0]
 8007428:	429a      	cmp	r2, r3
 800742a:	d001      	beq.n	8007430 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	e0b8      	b.n	80075a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 0302 	and.w	r3, r3, #2
 8007438:	2b00      	cmp	r3, #0
 800743a:	d020      	beq.n	800747e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 0304 	and.w	r3, r3, #4
 8007444:	2b00      	cmp	r3, #0
 8007446:	d005      	beq.n	8007454 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007448:	4b59      	ldr	r3, [pc, #356]	; (80075b0 <HAL_RCC_ClockConfig+0x1bc>)
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	4a58      	ldr	r2, [pc, #352]	; (80075b0 <HAL_RCC_ClockConfig+0x1bc>)
 800744e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007452:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0308 	and.w	r3, r3, #8
 800745c:	2b00      	cmp	r3, #0
 800745e:	d005      	beq.n	800746c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007460:	4b53      	ldr	r3, [pc, #332]	; (80075b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	4a52      	ldr	r2, [pc, #328]	; (80075b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007466:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800746a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800746c:	4b50      	ldr	r3, [pc, #320]	; (80075b0 <HAL_RCC_ClockConfig+0x1bc>)
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	494d      	ldr	r1, [pc, #308]	; (80075b0 <HAL_RCC_ClockConfig+0x1bc>)
 800747a:	4313      	orrs	r3, r2
 800747c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 0301 	and.w	r3, r3, #1
 8007486:	2b00      	cmp	r3, #0
 8007488:	d044      	beq.n	8007514 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d107      	bne.n	80074a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007492:	4b47      	ldr	r3, [pc, #284]	; (80075b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d119      	bne.n	80074d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e07f      	b.n	80075a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d003      	beq.n	80074b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074ae:	2b03      	cmp	r3, #3
 80074b0:	d107      	bne.n	80074c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074b2:	4b3f      	ldr	r3, [pc, #252]	; (80075b0 <HAL_RCC_ClockConfig+0x1bc>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d109      	bne.n	80074d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e06f      	b.n	80075a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074c2:	4b3b      	ldr	r3, [pc, #236]	; (80075b0 <HAL_RCC_ClockConfig+0x1bc>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0302 	and.w	r3, r3, #2
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d101      	bne.n	80074d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e067      	b.n	80075a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80074d2:	4b37      	ldr	r3, [pc, #220]	; (80075b0 <HAL_RCC_ClockConfig+0x1bc>)
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f023 0203 	bic.w	r2, r3, #3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	4934      	ldr	r1, [pc, #208]	; (80075b0 <HAL_RCC_ClockConfig+0x1bc>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80074e4:	f7fc fbe2 	bl	8003cac <HAL_GetTick>
 80074e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074ea:	e00a      	b.n	8007502 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074ec:	f7fc fbde 	bl	8003cac <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d901      	bls.n	8007502 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e04f      	b.n	80075a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007502:	4b2b      	ldr	r3, [pc, #172]	; (80075b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f003 020c 	and.w	r2, r3, #12
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	429a      	cmp	r2, r3
 8007512:	d1eb      	bne.n	80074ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007514:	4b25      	ldr	r3, [pc, #148]	; (80075ac <HAL_RCC_ClockConfig+0x1b8>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 030f 	and.w	r3, r3, #15
 800751c:	683a      	ldr	r2, [r7, #0]
 800751e:	429a      	cmp	r2, r3
 8007520:	d20c      	bcs.n	800753c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007522:	4b22      	ldr	r3, [pc, #136]	; (80075ac <HAL_RCC_ClockConfig+0x1b8>)
 8007524:	683a      	ldr	r2, [r7, #0]
 8007526:	b2d2      	uxtb	r2, r2
 8007528:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800752a:	4b20      	ldr	r3, [pc, #128]	; (80075ac <HAL_RCC_ClockConfig+0x1b8>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 030f 	and.w	r3, r3, #15
 8007532:	683a      	ldr	r2, [r7, #0]
 8007534:	429a      	cmp	r2, r3
 8007536:	d001      	beq.n	800753c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	e032      	b.n	80075a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 0304 	and.w	r3, r3, #4
 8007544:	2b00      	cmp	r3, #0
 8007546:	d008      	beq.n	800755a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007548:	4b19      	ldr	r3, [pc, #100]	; (80075b0 <HAL_RCC_ClockConfig+0x1bc>)
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	4916      	ldr	r1, [pc, #88]	; (80075b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007556:	4313      	orrs	r3, r2
 8007558:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0308 	and.w	r3, r3, #8
 8007562:	2b00      	cmp	r3, #0
 8007564:	d009      	beq.n	800757a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007566:	4b12      	ldr	r3, [pc, #72]	; (80075b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	00db      	lsls	r3, r3, #3
 8007574:	490e      	ldr	r1, [pc, #56]	; (80075b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007576:	4313      	orrs	r3, r2
 8007578:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800757a:	f000 fb9d 	bl	8007cb8 <HAL_RCC_GetSysClockFreq>
 800757e:	4602      	mov	r2, r0
 8007580:	4b0b      	ldr	r3, [pc, #44]	; (80075b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	091b      	lsrs	r3, r3, #4
 8007586:	f003 030f 	and.w	r3, r3, #15
 800758a:	490a      	ldr	r1, [pc, #40]	; (80075b4 <HAL_RCC_ClockConfig+0x1c0>)
 800758c:	5ccb      	ldrb	r3, [r1, r3]
 800758e:	fa22 f303 	lsr.w	r3, r2, r3
 8007592:	4a09      	ldr	r2, [pc, #36]	; (80075b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007596:	4b09      	ldr	r3, [pc, #36]	; (80075bc <HAL_RCC_ClockConfig+0x1c8>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4618      	mov	r0, r3
 800759c:	f7fb fc4e 	bl	8002e3c <HAL_InitTick>

  return HAL_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	40023c00 	.word	0x40023c00
 80075b0:	40023800 	.word	0x40023800
 80075b4:	0801d9c0 	.word	0x0801d9c0
 80075b8:	20000008 	.word	0x20000008
 80075bc:	2000000c 	.word	0x2000000c

080075c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075c0:	b480      	push	{r7}
 80075c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075c4:	4b03      	ldr	r3, [pc, #12]	; (80075d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80075c6:	681b      	ldr	r3, [r3, #0]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	20000008 	.word	0x20000008

080075d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80075dc:	f7ff fff0 	bl	80075c0 <HAL_RCC_GetHCLKFreq>
 80075e0:	4602      	mov	r2, r0
 80075e2:	4b05      	ldr	r3, [pc, #20]	; (80075f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	0a9b      	lsrs	r3, r3, #10
 80075e8:	f003 0307 	and.w	r3, r3, #7
 80075ec:	4903      	ldr	r1, [pc, #12]	; (80075fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80075ee:	5ccb      	ldrb	r3, [r1, r3]
 80075f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	40023800 	.word	0x40023800
 80075fc:	0801d9d0 	.word	0x0801d9d0

08007600 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	220f      	movs	r2, #15
 800760e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007610:	4b12      	ldr	r3, [pc, #72]	; (800765c <HAL_RCC_GetClockConfig+0x5c>)
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	f003 0203 	and.w	r2, r3, #3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800761c:	4b0f      	ldr	r3, [pc, #60]	; (800765c <HAL_RCC_GetClockConfig+0x5c>)
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007628:	4b0c      	ldr	r3, [pc, #48]	; (800765c <HAL_RCC_GetClockConfig+0x5c>)
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007634:	4b09      	ldr	r3, [pc, #36]	; (800765c <HAL_RCC_GetClockConfig+0x5c>)
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	08db      	lsrs	r3, r3, #3
 800763a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007642:	4b07      	ldr	r3, [pc, #28]	; (8007660 <HAL_RCC_GetClockConfig+0x60>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 020f 	and.w	r2, r3, #15
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	601a      	str	r2, [r3, #0]
}
 800764e:	bf00      	nop
 8007650:	370c      	adds	r7, #12
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	40023800 	.word	0x40023800
 8007660:	40023c00 	.word	0x40023c00

08007664 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b08c      	sub	sp, #48	; 0x30
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800766c:	2300      	movs	r3, #0
 800766e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8007670:	2300      	movs	r3, #0
 8007672:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8007674:	2300      	movs	r3, #0
 8007676:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8007678:	2300      	movs	r3, #0
 800767a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800767c:	2300      	movs	r3, #0
 800767e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8007680:	2300      	movs	r3, #0
 8007682:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8007684:	2300      	movs	r3, #0
 8007686:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8007688:	2300      	movs	r3, #0
 800768a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800768c:	2300      	movs	r3, #0
 800768e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	2b00      	cmp	r3, #0
 800769a:	d010      	beq.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800769c:	4b6f      	ldr	r3, [pc, #444]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800769e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076a2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076aa:	496c      	ldr	r1, [pc, #432]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80076ac:	4313      	orrs	r3, r2
 80076ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d101      	bne.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80076ba:	2301      	movs	r3, #1
 80076bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 0302 	and.w	r3, r3, #2
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d010      	beq.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80076ca:	4b64      	ldr	r3, [pc, #400]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80076cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076d0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076d8:	4960      	ldr	r1, [pc, #384]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80076da:	4313      	orrs	r3, r2
 80076dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d101      	bne.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80076e8:	2301      	movs	r3, #1
 80076ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 0304 	and.w	r3, r3, #4
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d017      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80076f8:	4b58      	ldr	r3, [pc, #352]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80076fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007706:	4955      	ldr	r1, [pc, #340]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007708:	4313      	orrs	r3, r2
 800770a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007716:	d101      	bne.n	800771c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8007718:	2301      	movs	r3, #1
 800771a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007720:	2b00      	cmp	r3, #0
 8007722:	d101      	bne.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8007724:	2301      	movs	r3, #1
 8007726:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 0308 	and.w	r3, r3, #8
 8007730:	2b00      	cmp	r3, #0
 8007732:	d017      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007734:	4b49      	ldr	r3, [pc, #292]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007736:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800773a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007742:	4946      	ldr	r1, [pc, #280]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007744:	4313      	orrs	r3, r2
 8007746:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800774e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007752:	d101      	bne.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8007754:	2301      	movs	r3, #1
 8007756:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800775c:	2b00      	cmp	r3, #0
 800775e:	d101      	bne.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8007760:	2301      	movs	r3, #1
 8007762:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 0320 	and.w	r3, r3, #32
 800776c:	2b00      	cmp	r3, #0
 800776e:	f000 808a 	beq.w	8007886 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007772:	2300      	movs	r3, #0
 8007774:	60bb      	str	r3, [r7, #8]
 8007776:	4b39      	ldr	r3, [pc, #228]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777a:	4a38      	ldr	r2, [pc, #224]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800777c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007780:	6413      	str	r3, [r2, #64]	; 0x40
 8007782:	4b36      	ldr	r3, [pc, #216]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800778a:	60bb      	str	r3, [r7, #8]
 800778c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800778e:	4b34      	ldr	r3, [pc, #208]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a33      	ldr	r2, [pc, #204]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007798:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800779a:	f7fc fa87 	bl	8003cac <HAL_GetTick>
 800779e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80077a0:	e008      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80077a2:	f7fc fa83 	bl	8003cac <HAL_GetTick>
 80077a6:	4602      	mov	r2, r0
 80077a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077aa:	1ad3      	subs	r3, r2, r3
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	d901      	bls.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80077b0:	2303      	movs	r3, #3
 80077b2:	e278      	b.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80077b4:	4b2a      	ldr	r3, [pc, #168]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d0f0      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80077c0:	4b26      	ldr	r3, [pc, #152]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80077c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077c8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80077ca:	6a3b      	ldr	r3, [r7, #32]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d02f      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077d8:	6a3a      	ldr	r2, [r7, #32]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d028      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80077de:	4b1f      	ldr	r3, [pc, #124]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80077e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077e6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80077e8:	4b1e      	ldr	r3, [pc, #120]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80077ea:	2201      	movs	r2, #1
 80077ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80077ee:	4b1d      	ldr	r3, [pc, #116]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80077f0:	2200      	movs	r2, #0
 80077f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80077f4:	4a19      	ldr	r2, [pc, #100]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80077f6:	6a3b      	ldr	r3, [r7, #32]
 80077f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80077fa:	4b18      	ldr	r3, [pc, #96]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80077fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077fe:	f003 0301 	and.w	r3, r3, #1
 8007802:	2b01      	cmp	r3, #1
 8007804:	d114      	bne.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007806:	f7fc fa51 	bl	8003cac <HAL_GetTick>
 800780a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800780c:	e00a      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800780e:	f7fc fa4d 	bl	8003cac <HAL_GetTick>
 8007812:	4602      	mov	r2, r0
 8007814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	f241 3288 	movw	r2, #5000	; 0x1388
 800781c:	4293      	cmp	r3, r2
 800781e:	d901      	bls.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8007820:	2303      	movs	r3, #3
 8007822:	e240      	b.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007824:	4b0d      	ldr	r3, [pc, #52]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007828:	f003 0302 	and.w	r3, r3, #2
 800782c:	2b00      	cmp	r3, #0
 800782e:	d0ee      	beq.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007834:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007838:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800783c:	d114      	bne.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800783e:	4b07      	ldr	r3, [pc, #28]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800784e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007852:	4902      	ldr	r1, [pc, #8]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007854:	4313      	orrs	r3, r2
 8007856:	608b      	str	r3, [r1, #8]
 8007858:	e00c      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800785a:	bf00      	nop
 800785c:	40023800 	.word	0x40023800
 8007860:	40007000 	.word	0x40007000
 8007864:	42470e40 	.word	0x42470e40
 8007868:	4b4a      	ldr	r3, [pc, #296]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	4a49      	ldr	r2, [pc, #292]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800786e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007872:	6093      	str	r3, [r2, #8]
 8007874:	4b47      	ldr	r3, [pc, #284]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007876:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007880:	4944      	ldr	r1, [pc, #272]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007882:	4313      	orrs	r3, r2
 8007884:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 0310 	and.w	r3, r3, #16
 800788e:	2b00      	cmp	r3, #0
 8007890:	d004      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8007898:	4b3f      	ldr	r3, [pc, #252]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800789a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00a      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80078a8:	4b3a      	ldr	r3, [pc, #232]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80078aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078b6:	4937      	ldr	r1, [pc, #220]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80078b8:	4313      	orrs	r3, r2
 80078ba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00a      	beq.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80078ca:	4b32      	ldr	r3, [pc, #200]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80078cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078d0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078d8:	492e      	ldr	r1, [pc, #184]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80078da:	4313      	orrs	r3, r2
 80078dc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d011      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80078ec:	4b29      	ldr	r3, [pc, #164]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80078ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078f2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078fa:	4926      	ldr	r1, [pc, #152]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80078fc:	4313      	orrs	r3, r2
 80078fe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007906:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800790a:	d101      	bne.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800790c:	2301      	movs	r3, #1
 800790e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00a      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800791c:	4b1d      	ldr	r3, [pc, #116]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800791e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007922:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800792a:	491a      	ldr	r1, [pc, #104]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800792c:	4313      	orrs	r3, r2
 800792e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800793a:	2b00      	cmp	r3, #0
 800793c:	d011      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800793e:	4b15      	ldr	r3, [pc, #84]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007944:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800794c:	4911      	ldr	r1, [pc, #68]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800794e:	4313      	orrs	r3, r2
 8007950:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007958:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800795c:	d101      	bne.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800795e:	2301      	movs	r3, #1
 8007960:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007964:	2b01      	cmp	r3, #1
 8007966:	d005      	beq.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007970:	f040 80ff 	bne.w	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007974:	4b09      	ldr	r3, [pc, #36]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007976:	2200      	movs	r2, #0
 8007978:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800797a:	f7fc f997 	bl	8003cac <HAL_GetTick>
 800797e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007980:	e00e      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007982:	f7fc f993 	bl	8003cac <HAL_GetTick>
 8007986:	4602      	mov	r2, r0
 8007988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798a:	1ad3      	subs	r3, r2, r3
 800798c:	2b02      	cmp	r3, #2
 800798e:	d907      	bls.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007990:	2303      	movs	r3, #3
 8007992:	e188      	b.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007994:	40023800 	.word	0x40023800
 8007998:	424711e0 	.word	0x424711e0
 800799c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80079a0:	4b7e      	ldr	r3, [pc, #504]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1ea      	bne.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 0301 	and.w	r3, r3, #1
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d003      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d009      	beq.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d028      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d124      	bne.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80079d4:	4b71      	ldr	r3, [pc, #452]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80079d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079da:	0c1b      	lsrs	r3, r3, #16
 80079dc:	f003 0303 	and.w	r3, r3, #3
 80079e0:	3301      	adds	r3, #1
 80079e2:	005b      	lsls	r3, r3, #1
 80079e4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80079e6:	4b6d      	ldr	r3, [pc, #436]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80079e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079ec:	0e1b      	lsrs	r3, r3, #24
 80079ee:	f003 030f 	and.w	r3, r3, #15
 80079f2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685a      	ldr	r2, [r3, #4]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	019b      	lsls	r3, r3, #6
 80079fe:	431a      	orrs	r2, r3
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	085b      	lsrs	r3, r3, #1
 8007a04:	3b01      	subs	r3, #1
 8007a06:	041b      	lsls	r3, r3, #16
 8007a08:	431a      	orrs	r2, r3
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	061b      	lsls	r3, r3, #24
 8007a0e:	431a      	orrs	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	695b      	ldr	r3, [r3, #20]
 8007a14:	071b      	lsls	r3, r3, #28
 8007a16:	4961      	ldr	r1, [pc, #388]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 0304 	and.w	r3, r3, #4
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d004      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a32:	d00a      	beq.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d035      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a48:	d130      	bne.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007a4a:	4b54      	ldr	r3, [pc, #336]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a50:	0c1b      	lsrs	r3, r3, #16
 8007a52:	f003 0303 	and.w	r3, r3, #3
 8007a56:	3301      	adds	r3, #1
 8007a58:	005b      	lsls	r3, r3, #1
 8007a5a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007a5c:	4b4f      	ldr	r3, [pc, #316]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a62:	0f1b      	lsrs	r3, r3, #28
 8007a64:	f003 0307 	and.w	r3, r3, #7
 8007a68:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	685a      	ldr	r2, [r3, #4]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	019b      	lsls	r3, r3, #6
 8007a74:	431a      	orrs	r2, r3
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	085b      	lsrs	r3, r3, #1
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	041b      	lsls	r3, r3, #16
 8007a7e:	431a      	orrs	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	691b      	ldr	r3, [r3, #16]
 8007a84:	061b      	lsls	r3, r3, #24
 8007a86:	431a      	orrs	r2, r3
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	071b      	lsls	r3, r3, #28
 8007a8c:	4943      	ldr	r1, [pc, #268]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007a94:	4b41      	ldr	r3, [pc, #260]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a9a:	f023 021f 	bic.w	r2, r3, #31
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	493d      	ldr	r1, [pc, #244]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d029      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007abc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ac0:	d124      	bne.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007ac2:	4b36      	ldr	r3, [pc, #216]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ac8:	0c1b      	lsrs	r3, r3, #16
 8007aca:	f003 0303 	and.w	r3, r3, #3
 8007ace:	3301      	adds	r3, #1
 8007ad0:	005b      	lsls	r3, r3, #1
 8007ad2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007ad4:	4b31      	ldr	r3, [pc, #196]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ada:	0f1b      	lsrs	r3, r3, #28
 8007adc:	f003 0307 	and.w	r3, r3, #7
 8007ae0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	685a      	ldr	r2, [r3, #4]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	019b      	lsls	r3, r3, #6
 8007aec:	431a      	orrs	r2, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	085b      	lsrs	r3, r3, #1
 8007af4:	3b01      	subs	r3, #1
 8007af6:	041b      	lsls	r3, r3, #16
 8007af8:	431a      	orrs	r2, r3
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	061b      	lsls	r3, r3, #24
 8007afe:	431a      	orrs	r2, r3
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	071b      	lsls	r3, r3, #28
 8007b04:	4925      	ldr	r1, [pc, #148]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007b06:	4313      	orrs	r3, r2
 8007b08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d016      	beq.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	019b      	lsls	r3, r3, #6
 8007b22:	431a      	orrs	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	085b      	lsrs	r3, r3, #1
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	041b      	lsls	r3, r3, #16
 8007b2e:	431a      	orrs	r2, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	061b      	lsls	r3, r3, #24
 8007b36:	431a      	orrs	r2, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	695b      	ldr	r3, [r3, #20]
 8007b3c:	071b      	lsls	r3, r3, #28
 8007b3e:	4917      	ldr	r1, [pc, #92]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007b40:	4313      	orrs	r3, r2
 8007b42:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007b46:	4b16      	ldr	r3, [pc, #88]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8007b48:	2201      	movs	r2, #1
 8007b4a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b4c:	f7fc f8ae 	bl	8003cac <HAL_GetTick>
 8007b50:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b52:	e008      	b.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007b54:	f7fc f8aa 	bl	8003cac <HAL_GetTick>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5c:	1ad3      	subs	r3, r2, r3
 8007b5e:	2b02      	cmp	r3, #2
 8007b60:	d901      	bls.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b62:	2303      	movs	r3, #3
 8007b64:	e09f      	b.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b66:	4b0d      	ldr	r3, [pc, #52]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d0f0      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8007b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	f040 8095 	bne.w	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007b7a:	4b0a      	ldr	r3, [pc, #40]	; (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b80:	f7fc f894 	bl	8003cac <HAL_GetTick>
 8007b84:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007b86:	e00f      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007b88:	f7fc f890 	bl	8003cac <HAL_GetTick>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d908      	bls.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e085      	b.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007b9a:	bf00      	nop
 8007b9c:	40023800 	.word	0x40023800
 8007ba0:	42470068 	.word	0x42470068
 8007ba4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007ba8:	4b41      	ldr	r3, [pc, #260]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bb4:	d0e8      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 0304 	and.w	r3, r3, #4
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d003      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x566>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d009      	beq.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d02b      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d127      	bne.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8007bde:	4b34      	ldr	r3, [pc, #208]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007be4:	0c1b      	lsrs	r3, r3, #16
 8007be6:	f003 0303 	and.w	r3, r3, #3
 8007bea:	3301      	adds	r3, #1
 8007bec:	005b      	lsls	r3, r3, #1
 8007bee:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	699a      	ldr	r2, [r3, #24]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	69db      	ldr	r3, [r3, #28]
 8007bf8:	019b      	lsls	r3, r3, #6
 8007bfa:	431a      	orrs	r2, r3
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	085b      	lsrs	r3, r3, #1
 8007c00:	3b01      	subs	r3, #1
 8007c02:	041b      	lsls	r3, r3, #16
 8007c04:	431a      	orrs	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0a:	061b      	lsls	r3, r3, #24
 8007c0c:	4928      	ldr	r1, [pc, #160]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007c14:	4b26      	ldr	r3, [pc, #152]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007c16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c1a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c22:	3b01      	subs	r3, #1
 8007c24:	021b      	lsls	r3, r3, #8
 8007c26:	4922      	ldr	r1, [pc, #136]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d01d      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c42:	d118      	bne.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007c44:	4b1a      	ldr	r3, [pc, #104]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c4a:	0e1b      	lsrs	r3, r3, #24
 8007c4c:	f003 030f 	and.w	r3, r3, #15
 8007c50:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	699a      	ldr	r2, [r3, #24]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	69db      	ldr	r3, [r3, #28]
 8007c5a:	019b      	lsls	r3, r3, #6
 8007c5c:	431a      	orrs	r2, r3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a1b      	ldr	r3, [r3, #32]
 8007c62:	085b      	lsrs	r3, r3, #1
 8007c64:	3b01      	subs	r3, #1
 8007c66:	041b      	lsls	r3, r3, #16
 8007c68:	431a      	orrs	r2, r3
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	061b      	lsls	r3, r3, #24
 8007c6e:	4910      	ldr	r1, [pc, #64]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007c70:	4313      	orrs	r3, r2
 8007c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007c76:	4b0f      	ldr	r3, [pc, #60]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8007c78:	2201      	movs	r2, #1
 8007c7a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007c7c:	f7fc f816 	bl	8003cac <HAL_GetTick>
 8007c80:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007c82:	e008      	b.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007c84:	f7fc f812 	bl	8003cac <HAL_GetTick>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8c:	1ad3      	subs	r3, r2, r3
 8007c8e:	2b02      	cmp	r3, #2
 8007c90:	d901      	bls.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c92:	2303      	movs	r3, #3
 8007c94:	e007      	b.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007c96:	4b06      	ldr	r3, [pc, #24]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ca2:	d1ef      	bne.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3730      	adds	r7, #48	; 0x30
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	40023800 	.word	0x40023800
 8007cb4:	42470070 	.word	0x42470070

08007cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cbc:	b0ae      	sub	sp, #184	; 0xb8
 8007cbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007cde:	4bcb      	ldr	r3, [pc, #812]	; (800800c <HAL_RCC_GetSysClockFreq+0x354>)
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	f003 030c 	and.w	r3, r3, #12
 8007ce6:	2b0c      	cmp	r3, #12
 8007ce8:	f200 8204 	bhi.w	80080f4 <HAL_RCC_GetSysClockFreq+0x43c>
 8007cec:	a201      	add	r2, pc, #4	; (adr r2, 8007cf4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8007cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf2:	bf00      	nop
 8007cf4:	08007d29 	.word	0x08007d29
 8007cf8:	080080f5 	.word	0x080080f5
 8007cfc:	080080f5 	.word	0x080080f5
 8007d00:	080080f5 	.word	0x080080f5
 8007d04:	08007d31 	.word	0x08007d31
 8007d08:	080080f5 	.word	0x080080f5
 8007d0c:	080080f5 	.word	0x080080f5
 8007d10:	080080f5 	.word	0x080080f5
 8007d14:	08007d39 	.word	0x08007d39
 8007d18:	080080f5 	.word	0x080080f5
 8007d1c:	080080f5 	.word	0x080080f5
 8007d20:	080080f5 	.word	0x080080f5
 8007d24:	08007f29 	.word	0x08007f29
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d28:	4bb9      	ldr	r3, [pc, #740]	; (8008010 <HAL_RCC_GetSysClockFreq+0x358>)
 8007d2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8007d2e:	e1e5      	b.n	80080fc <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d30:	4bb7      	ldr	r3, [pc, #732]	; (8008010 <HAL_RCC_GetSysClockFreq+0x358>)
 8007d32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007d36:	e1e1      	b.n	80080fc <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d38:	4bb4      	ldr	r3, [pc, #720]	; (800800c <HAL_RCC_GetSysClockFreq+0x354>)
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d44:	4bb1      	ldr	r3, [pc, #708]	; (800800c <HAL_RCC_GetSysClockFreq+0x354>)
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d071      	beq.n	8007e34 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d50:	4bae      	ldr	r3, [pc, #696]	; (800800c <HAL_RCC_GetSysClockFreq+0x354>)
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	099b      	lsrs	r3, r3, #6
 8007d56:	2200      	movs	r2, #0
 8007d58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d5c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8007d60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007d72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007d76:	4622      	mov	r2, r4
 8007d78:	462b      	mov	r3, r5
 8007d7a:	f04f 0000 	mov.w	r0, #0
 8007d7e:	f04f 0100 	mov.w	r1, #0
 8007d82:	0159      	lsls	r1, r3, #5
 8007d84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d88:	0150      	lsls	r0, r2, #5
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	4621      	mov	r1, r4
 8007d90:	1a51      	subs	r1, r2, r1
 8007d92:	6439      	str	r1, [r7, #64]	; 0x40
 8007d94:	4629      	mov	r1, r5
 8007d96:	eb63 0301 	sbc.w	r3, r3, r1
 8007d9a:	647b      	str	r3, [r7, #68]	; 0x44
 8007d9c:	f04f 0200 	mov.w	r2, #0
 8007da0:	f04f 0300 	mov.w	r3, #0
 8007da4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8007da8:	4649      	mov	r1, r9
 8007daa:	018b      	lsls	r3, r1, #6
 8007dac:	4641      	mov	r1, r8
 8007dae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007db2:	4641      	mov	r1, r8
 8007db4:	018a      	lsls	r2, r1, #6
 8007db6:	4641      	mov	r1, r8
 8007db8:	1a51      	subs	r1, r2, r1
 8007dba:	63b9      	str	r1, [r7, #56]	; 0x38
 8007dbc:	4649      	mov	r1, r9
 8007dbe:	eb63 0301 	sbc.w	r3, r3, r1
 8007dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dc4:	f04f 0200 	mov.w	r2, #0
 8007dc8:	f04f 0300 	mov.w	r3, #0
 8007dcc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8007dd0:	4649      	mov	r1, r9
 8007dd2:	00cb      	lsls	r3, r1, #3
 8007dd4:	4641      	mov	r1, r8
 8007dd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dda:	4641      	mov	r1, r8
 8007ddc:	00ca      	lsls	r2, r1, #3
 8007dde:	4610      	mov	r0, r2
 8007de0:	4619      	mov	r1, r3
 8007de2:	4603      	mov	r3, r0
 8007de4:	4622      	mov	r2, r4
 8007de6:	189b      	adds	r3, r3, r2
 8007de8:	633b      	str	r3, [r7, #48]	; 0x30
 8007dea:	462b      	mov	r3, r5
 8007dec:	460a      	mov	r2, r1
 8007dee:	eb42 0303 	adc.w	r3, r2, r3
 8007df2:	637b      	str	r3, [r7, #52]	; 0x34
 8007df4:	f04f 0200 	mov.w	r2, #0
 8007df8:	f04f 0300 	mov.w	r3, #0
 8007dfc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007e00:	4629      	mov	r1, r5
 8007e02:	028b      	lsls	r3, r1, #10
 8007e04:	4621      	mov	r1, r4
 8007e06:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007e0a:	4621      	mov	r1, r4
 8007e0c:	028a      	lsls	r2, r1, #10
 8007e0e:	4610      	mov	r0, r2
 8007e10:	4619      	mov	r1, r3
 8007e12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e16:	2200      	movs	r2, #0
 8007e18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007e1c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007e20:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007e24:	f7f8 ff60 	bl	8000ce8 <__aeabi_uldivmod>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e32:	e067      	b.n	8007f04 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e34:	4b75      	ldr	r3, [pc, #468]	; (800800c <HAL_RCC_GetSysClockFreq+0x354>)
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	099b      	lsrs	r3, r3, #6
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e40:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8007e44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e4e:	2300      	movs	r3, #0
 8007e50:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007e52:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8007e56:	4622      	mov	r2, r4
 8007e58:	462b      	mov	r3, r5
 8007e5a:	f04f 0000 	mov.w	r0, #0
 8007e5e:	f04f 0100 	mov.w	r1, #0
 8007e62:	0159      	lsls	r1, r3, #5
 8007e64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e68:	0150      	lsls	r0, r2, #5
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	4621      	mov	r1, r4
 8007e70:	1a51      	subs	r1, r2, r1
 8007e72:	62b9      	str	r1, [r7, #40]	; 0x28
 8007e74:	4629      	mov	r1, r5
 8007e76:	eb63 0301 	sbc.w	r3, r3, r1
 8007e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e7c:	f04f 0200 	mov.w	r2, #0
 8007e80:	f04f 0300 	mov.w	r3, #0
 8007e84:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8007e88:	4649      	mov	r1, r9
 8007e8a:	018b      	lsls	r3, r1, #6
 8007e8c:	4641      	mov	r1, r8
 8007e8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007e92:	4641      	mov	r1, r8
 8007e94:	018a      	lsls	r2, r1, #6
 8007e96:	4641      	mov	r1, r8
 8007e98:	ebb2 0a01 	subs.w	sl, r2, r1
 8007e9c:	4649      	mov	r1, r9
 8007e9e:	eb63 0b01 	sbc.w	fp, r3, r1
 8007ea2:	f04f 0200 	mov.w	r2, #0
 8007ea6:	f04f 0300 	mov.w	r3, #0
 8007eaa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007eae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007eb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007eb6:	4692      	mov	sl, r2
 8007eb8:	469b      	mov	fp, r3
 8007eba:	4623      	mov	r3, r4
 8007ebc:	eb1a 0303 	adds.w	r3, sl, r3
 8007ec0:	623b      	str	r3, [r7, #32]
 8007ec2:	462b      	mov	r3, r5
 8007ec4:	eb4b 0303 	adc.w	r3, fp, r3
 8007ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8007eca:	f04f 0200 	mov.w	r2, #0
 8007ece:	f04f 0300 	mov.w	r3, #0
 8007ed2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007ed6:	4629      	mov	r1, r5
 8007ed8:	028b      	lsls	r3, r1, #10
 8007eda:	4621      	mov	r1, r4
 8007edc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007ee0:	4621      	mov	r1, r4
 8007ee2:	028a      	lsls	r2, r1, #10
 8007ee4:	4610      	mov	r0, r2
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007eec:	2200      	movs	r2, #0
 8007eee:	673b      	str	r3, [r7, #112]	; 0x70
 8007ef0:	677a      	str	r2, [r7, #116]	; 0x74
 8007ef2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007ef6:	f7f8 fef7 	bl	8000ce8 <__aeabi_uldivmod>
 8007efa:	4602      	mov	r2, r0
 8007efc:	460b      	mov	r3, r1
 8007efe:	4613      	mov	r3, r2
 8007f00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007f04:	4b41      	ldr	r3, [pc, #260]	; (800800c <HAL_RCC_GetSysClockFreq+0x354>)
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	0c1b      	lsrs	r3, r3, #16
 8007f0a:	f003 0303 	and.w	r3, r3, #3
 8007f0e:	3301      	adds	r3, #1
 8007f10:	005b      	lsls	r3, r3, #1
 8007f12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8007f16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007f1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007f26:	e0e9      	b.n	80080fc <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f28:	4b38      	ldr	r3, [pc, #224]	; (800800c <HAL_RCC_GetSysClockFreq+0x354>)
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007f34:	4b35      	ldr	r3, [pc, #212]	; (800800c <HAL_RCC_GetSysClockFreq+0x354>)
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d069      	beq.n	8008014 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f40:	4b32      	ldr	r3, [pc, #200]	; (800800c <HAL_RCC_GetSysClockFreq+0x354>)
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	099b      	lsrs	r3, r3, #6
 8007f46:	2200      	movs	r2, #0
 8007f48:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007f4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f52:	663b      	str	r3, [r7, #96]	; 0x60
 8007f54:	2300      	movs	r3, #0
 8007f56:	667b      	str	r3, [r7, #100]	; 0x64
 8007f58:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007f5c:	4622      	mov	r2, r4
 8007f5e:	462b      	mov	r3, r5
 8007f60:	f04f 0000 	mov.w	r0, #0
 8007f64:	f04f 0100 	mov.w	r1, #0
 8007f68:	0159      	lsls	r1, r3, #5
 8007f6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f6e:	0150      	lsls	r0, r2, #5
 8007f70:	4602      	mov	r2, r0
 8007f72:	460b      	mov	r3, r1
 8007f74:	4621      	mov	r1, r4
 8007f76:	1a51      	subs	r1, r2, r1
 8007f78:	61b9      	str	r1, [r7, #24]
 8007f7a:	4629      	mov	r1, r5
 8007f7c:	eb63 0301 	sbc.w	r3, r3, r1
 8007f80:	61fb      	str	r3, [r7, #28]
 8007f82:	f04f 0200 	mov.w	r2, #0
 8007f86:	f04f 0300 	mov.w	r3, #0
 8007f8a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007f8e:	4659      	mov	r1, fp
 8007f90:	018b      	lsls	r3, r1, #6
 8007f92:	4651      	mov	r1, sl
 8007f94:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007f98:	4651      	mov	r1, sl
 8007f9a:	018a      	lsls	r2, r1, #6
 8007f9c:	4651      	mov	r1, sl
 8007f9e:	ebb2 0801 	subs.w	r8, r2, r1
 8007fa2:	4659      	mov	r1, fp
 8007fa4:	eb63 0901 	sbc.w	r9, r3, r1
 8007fa8:	f04f 0200 	mov.w	r2, #0
 8007fac:	f04f 0300 	mov.w	r3, #0
 8007fb0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007fb4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007fb8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007fbc:	4690      	mov	r8, r2
 8007fbe:	4699      	mov	r9, r3
 8007fc0:	4623      	mov	r3, r4
 8007fc2:	eb18 0303 	adds.w	r3, r8, r3
 8007fc6:	613b      	str	r3, [r7, #16]
 8007fc8:	462b      	mov	r3, r5
 8007fca:	eb49 0303 	adc.w	r3, r9, r3
 8007fce:	617b      	str	r3, [r7, #20]
 8007fd0:	f04f 0200 	mov.w	r2, #0
 8007fd4:	f04f 0300 	mov.w	r3, #0
 8007fd8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007fdc:	4629      	mov	r1, r5
 8007fde:	028b      	lsls	r3, r1, #10
 8007fe0:	4621      	mov	r1, r4
 8007fe2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007fe6:	4621      	mov	r1, r4
 8007fe8:	028a      	lsls	r2, r1, #10
 8007fea:	4610      	mov	r0, r2
 8007fec:	4619      	mov	r1, r3
 8007fee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ff6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007ff8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007ffc:	f7f8 fe74 	bl	8000ce8 <__aeabi_uldivmod>
 8008000:	4602      	mov	r2, r0
 8008002:	460b      	mov	r3, r1
 8008004:	4613      	mov	r3, r2
 8008006:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800800a:	e063      	b.n	80080d4 <HAL_RCC_GetSysClockFreq+0x41c>
 800800c:	40023800 	.word	0x40023800
 8008010:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008014:	4b3d      	ldr	r3, [pc, #244]	; (800810c <HAL_RCC_GetSysClockFreq+0x454>)
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	099b      	lsrs	r3, r3, #6
 800801a:	2200      	movs	r2, #0
 800801c:	4618      	mov	r0, r3
 800801e:	4611      	mov	r1, r2
 8008020:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008024:	653b      	str	r3, [r7, #80]	; 0x50
 8008026:	2300      	movs	r3, #0
 8008028:	657b      	str	r3, [r7, #84]	; 0x54
 800802a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800802e:	4642      	mov	r2, r8
 8008030:	464b      	mov	r3, r9
 8008032:	f04f 0000 	mov.w	r0, #0
 8008036:	f04f 0100 	mov.w	r1, #0
 800803a:	0159      	lsls	r1, r3, #5
 800803c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008040:	0150      	lsls	r0, r2, #5
 8008042:	4602      	mov	r2, r0
 8008044:	460b      	mov	r3, r1
 8008046:	4641      	mov	r1, r8
 8008048:	1a51      	subs	r1, r2, r1
 800804a:	60b9      	str	r1, [r7, #8]
 800804c:	4649      	mov	r1, r9
 800804e:	eb63 0301 	sbc.w	r3, r3, r1
 8008052:	60fb      	str	r3, [r7, #12]
 8008054:	f04f 0200 	mov.w	r2, #0
 8008058:	f04f 0300 	mov.w	r3, #0
 800805c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008060:	4659      	mov	r1, fp
 8008062:	018b      	lsls	r3, r1, #6
 8008064:	4651      	mov	r1, sl
 8008066:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800806a:	4651      	mov	r1, sl
 800806c:	018a      	lsls	r2, r1, #6
 800806e:	4651      	mov	r1, sl
 8008070:	1a54      	subs	r4, r2, r1
 8008072:	4659      	mov	r1, fp
 8008074:	eb63 0501 	sbc.w	r5, r3, r1
 8008078:	f04f 0200 	mov.w	r2, #0
 800807c:	f04f 0300 	mov.w	r3, #0
 8008080:	00eb      	lsls	r3, r5, #3
 8008082:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008086:	00e2      	lsls	r2, r4, #3
 8008088:	4614      	mov	r4, r2
 800808a:	461d      	mov	r5, r3
 800808c:	4643      	mov	r3, r8
 800808e:	18e3      	adds	r3, r4, r3
 8008090:	603b      	str	r3, [r7, #0]
 8008092:	464b      	mov	r3, r9
 8008094:	eb45 0303 	adc.w	r3, r5, r3
 8008098:	607b      	str	r3, [r7, #4]
 800809a:	f04f 0200 	mov.w	r2, #0
 800809e:	f04f 0300 	mov.w	r3, #0
 80080a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80080a6:	4629      	mov	r1, r5
 80080a8:	028b      	lsls	r3, r1, #10
 80080aa:	4621      	mov	r1, r4
 80080ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80080b0:	4621      	mov	r1, r4
 80080b2:	028a      	lsls	r2, r1, #10
 80080b4:	4610      	mov	r0, r2
 80080b6:	4619      	mov	r1, r3
 80080b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80080bc:	2200      	movs	r2, #0
 80080be:	64bb      	str	r3, [r7, #72]	; 0x48
 80080c0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80080c2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80080c6:	f7f8 fe0f 	bl	8000ce8 <__aeabi_uldivmod>
 80080ca:	4602      	mov	r2, r0
 80080cc:	460b      	mov	r3, r1
 80080ce:	4613      	mov	r3, r2
 80080d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80080d4:	4b0d      	ldr	r3, [pc, #52]	; (800810c <HAL_RCC_GetSysClockFreq+0x454>)
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	0f1b      	lsrs	r3, r3, #28
 80080da:	f003 0307 	and.w	r3, r3, #7
 80080de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80080e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80080e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80080ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80080f2:	e003      	b.n	80080fc <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80080f4:	4b06      	ldr	r3, [pc, #24]	; (8008110 <HAL_RCC_GetSysClockFreq+0x458>)
 80080f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80080fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80080fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8008100:	4618      	mov	r0, r3
 8008102:	37b8      	adds	r7, #184	; 0xb8
 8008104:	46bd      	mov	sp, r7
 8008106:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800810a:	bf00      	nop
 800810c:	40023800 	.word	0x40023800
 8008110:	00f42400 	.word	0x00f42400

08008114 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b086      	sub	sp, #24
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d101      	bne.n	8008126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e28d      	b.n	8008642 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f003 0301 	and.w	r3, r3, #1
 800812e:	2b00      	cmp	r3, #0
 8008130:	f000 8083 	beq.w	800823a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008134:	4b94      	ldr	r3, [pc, #592]	; (8008388 <HAL_RCC_OscConfig+0x274>)
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	f003 030c 	and.w	r3, r3, #12
 800813c:	2b04      	cmp	r3, #4
 800813e:	d019      	beq.n	8008174 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008140:	4b91      	ldr	r3, [pc, #580]	; (8008388 <HAL_RCC_OscConfig+0x274>)
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008148:	2b08      	cmp	r3, #8
 800814a:	d106      	bne.n	800815a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800814c:	4b8e      	ldr	r3, [pc, #568]	; (8008388 <HAL_RCC_OscConfig+0x274>)
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008154:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008158:	d00c      	beq.n	8008174 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800815a:	4b8b      	ldr	r3, [pc, #556]	; (8008388 <HAL_RCC_OscConfig+0x274>)
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008162:	2b0c      	cmp	r3, #12
 8008164:	d112      	bne.n	800818c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008166:	4b88      	ldr	r3, [pc, #544]	; (8008388 <HAL_RCC_OscConfig+0x274>)
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800816e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008172:	d10b      	bne.n	800818c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008174:	4b84      	ldr	r3, [pc, #528]	; (8008388 <HAL_RCC_OscConfig+0x274>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800817c:	2b00      	cmp	r3, #0
 800817e:	d05b      	beq.n	8008238 <HAL_RCC_OscConfig+0x124>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d157      	bne.n	8008238 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	e25a      	b.n	8008642 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008194:	d106      	bne.n	80081a4 <HAL_RCC_OscConfig+0x90>
 8008196:	4b7c      	ldr	r3, [pc, #496]	; (8008388 <HAL_RCC_OscConfig+0x274>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a7b      	ldr	r2, [pc, #492]	; (8008388 <HAL_RCC_OscConfig+0x274>)
 800819c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081a0:	6013      	str	r3, [r2, #0]
 80081a2:	e01d      	b.n	80081e0 <HAL_RCC_OscConfig+0xcc>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081ac:	d10c      	bne.n	80081c8 <HAL_RCC_OscConfig+0xb4>
 80081ae:	4b76      	ldr	r3, [pc, #472]	; (8008388 <HAL_RCC_OscConfig+0x274>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a75      	ldr	r2, [pc, #468]	; (8008388 <HAL_RCC_OscConfig+0x274>)
 80081b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80081b8:	6013      	str	r3, [r2, #0]
 80081ba:	4b73      	ldr	r3, [pc, #460]	; (8008388 <HAL_RCC_OscConfig+0x274>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a72      	ldr	r2, [pc, #456]	; (8008388 <HAL_RCC_OscConfig+0x274>)
 80081c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081c4:	6013      	str	r3, [r2, #0]
 80081c6:	e00b      	b.n	80081e0 <HAL_RCC_OscConfig+0xcc>
 80081c8:	4b6f      	ldr	r3, [pc, #444]	; (8008388 <HAL_RCC_OscConfig+0x274>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a6e      	ldr	r2, [pc, #440]	; (8008388 <HAL_RCC_OscConfig+0x274>)
 80081ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081d2:	6013      	str	r3, [r2, #0]
 80081d4:	4b6c      	ldr	r3, [pc, #432]	; (8008388 <HAL_RCC_OscConfig+0x274>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a6b      	ldr	r2, [pc, #428]	; (8008388 <HAL_RCC_OscConfig+0x274>)
 80081da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80081de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d013      	beq.n	8008210 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081e8:	f7fb fd60 	bl	8003cac <HAL_GetTick>
 80081ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081ee:	e008      	b.n	8008202 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80081f0:	f7fb fd5c 	bl	8003cac <HAL_GetTick>
 80081f4:	4602      	mov	r2, r0
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	2b64      	cmp	r3, #100	; 0x64
 80081fc:	d901      	bls.n	8008202 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	e21f      	b.n	8008642 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008202:	4b61      	ldr	r3, [pc, #388]	; (8008388 <HAL_RCC_OscConfig+0x274>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800820a:	2b00      	cmp	r3, #0
 800820c:	d0f0      	beq.n	80081f0 <HAL_RCC_OscConfig+0xdc>
 800820e:	e014      	b.n	800823a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008210:	f7fb fd4c 	bl	8003cac <HAL_GetTick>
 8008214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008216:	e008      	b.n	800822a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008218:	f7fb fd48 	bl	8003cac <HAL_GetTick>
 800821c:	4602      	mov	r2, r0
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	2b64      	cmp	r3, #100	; 0x64
 8008224:	d901      	bls.n	800822a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008226:	2303      	movs	r3, #3
 8008228:	e20b      	b.n	8008642 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800822a:	4b57      	ldr	r3, [pc, #348]	; (8008388 <HAL_RCC_OscConfig+0x274>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1f0      	bne.n	8008218 <HAL_RCC_OscConfig+0x104>
 8008236:	e000      	b.n	800823a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f003 0302 	and.w	r3, r3, #2
 8008242:	2b00      	cmp	r3, #0
 8008244:	d06f      	beq.n	8008326 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008246:	4b50      	ldr	r3, [pc, #320]	; (8008388 <HAL_RCC_OscConfig+0x274>)
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	f003 030c 	and.w	r3, r3, #12
 800824e:	2b00      	cmp	r3, #0
 8008250:	d017      	beq.n	8008282 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008252:	4b4d      	ldr	r3, [pc, #308]	; (8008388 <HAL_RCC_OscConfig+0x274>)
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800825a:	2b08      	cmp	r3, #8
 800825c:	d105      	bne.n	800826a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800825e:	4b4a      	ldr	r3, [pc, #296]	; (8008388 <HAL_RCC_OscConfig+0x274>)
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00b      	beq.n	8008282 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800826a:	4b47      	ldr	r3, [pc, #284]	; (8008388 <HAL_RCC_OscConfig+0x274>)
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008272:	2b0c      	cmp	r3, #12
 8008274:	d11c      	bne.n	80082b0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008276:	4b44      	ldr	r3, [pc, #272]	; (8008388 <HAL_RCC_OscConfig+0x274>)
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800827e:	2b00      	cmp	r3, #0
 8008280:	d116      	bne.n	80082b0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008282:	4b41      	ldr	r3, [pc, #260]	; (8008388 <HAL_RCC_OscConfig+0x274>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f003 0302 	and.w	r3, r3, #2
 800828a:	2b00      	cmp	r3, #0
 800828c:	d005      	beq.n	800829a <HAL_RCC_OscConfig+0x186>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	2b01      	cmp	r3, #1
 8008294:	d001      	beq.n	800829a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	e1d3      	b.n	8008642 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800829a:	4b3b      	ldr	r3, [pc, #236]	; (8008388 <HAL_RCC_OscConfig+0x274>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	00db      	lsls	r3, r3, #3
 80082a8:	4937      	ldr	r1, [pc, #220]	; (8008388 <HAL_RCC_OscConfig+0x274>)
 80082aa:	4313      	orrs	r3, r2
 80082ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80082ae:	e03a      	b.n	8008326 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d020      	beq.n	80082fa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80082b8:	4b34      	ldr	r3, [pc, #208]	; (800838c <HAL_RCC_OscConfig+0x278>)
 80082ba:	2201      	movs	r2, #1
 80082bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082be:	f7fb fcf5 	bl	8003cac <HAL_GetTick>
 80082c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082c4:	e008      	b.n	80082d8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082c6:	f7fb fcf1 	bl	8003cac <HAL_GetTick>
 80082ca:	4602      	mov	r2, r0
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	1ad3      	subs	r3, r2, r3
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	d901      	bls.n	80082d8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80082d4:	2303      	movs	r3, #3
 80082d6:	e1b4      	b.n	8008642 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082d8:	4b2b      	ldr	r3, [pc, #172]	; (8008388 <HAL_RCC_OscConfig+0x274>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f003 0302 	and.w	r3, r3, #2
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d0f0      	beq.n	80082c6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082e4:	4b28      	ldr	r3, [pc, #160]	; (8008388 <HAL_RCC_OscConfig+0x274>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	691b      	ldr	r3, [r3, #16]
 80082f0:	00db      	lsls	r3, r3, #3
 80082f2:	4925      	ldr	r1, [pc, #148]	; (8008388 <HAL_RCC_OscConfig+0x274>)
 80082f4:	4313      	orrs	r3, r2
 80082f6:	600b      	str	r3, [r1, #0]
 80082f8:	e015      	b.n	8008326 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082fa:	4b24      	ldr	r3, [pc, #144]	; (800838c <HAL_RCC_OscConfig+0x278>)
 80082fc:	2200      	movs	r2, #0
 80082fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008300:	f7fb fcd4 	bl	8003cac <HAL_GetTick>
 8008304:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008306:	e008      	b.n	800831a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008308:	f7fb fcd0 	bl	8003cac <HAL_GetTick>
 800830c:	4602      	mov	r2, r0
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	2b02      	cmp	r3, #2
 8008314:	d901      	bls.n	800831a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008316:	2303      	movs	r3, #3
 8008318:	e193      	b.n	8008642 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800831a:	4b1b      	ldr	r3, [pc, #108]	; (8008388 <HAL_RCC_OscConfig+0x274>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f003 0302 	and.w	r3, r3, #2
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1f0      	bne.n	8008308 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f003 0308 	and.w	r3, r3, #8
 800832e:	2b00      	cmp	r3, #0
 8008330:	d036      	beq.n	80083a0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	695b      	ldr	r3, [r3, #20]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d016      	beq.n	8008368 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800833a:	4b15      	ldr	r3, [pc, #84]	; (8008390 <HAL_RCC_OscConfig+0x27c>)
 800833c:	2201      	movs	r2, #1
 800833e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008340:	f7fb fcb4 	bl	8003cac <HAL_GetTick>
 8008344:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008346:	e008      	b.n	800835a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008348:	f7fb fcb0 	bl	8003cac <HAL_GetTick>
 800834c:	4602      	mov	r2, r0
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	1ad3      	subs	r3, r2, r3
 8008352:	2b02      	cmp	r3, #2
 8008354:	d901      	bls.n	800835a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8008356:	2303      	movs	r3, #3
 8008358:	e173      	b.n	8008642 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800835a:	4b0b      	ldr	r3, [pc, #44]	; (8008388 <HAL_RCC_OscConfig+0x274>)
 800835c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800835e:	f003 0302 	and.w	r3, r3, #2
 8008362:	2b00      	cmp	r3, #0
 8008364:	d0f0      	beq.n	8008348 <HAL_RCC_OscConfig+0x234>
 8008366:	e01b      	b.n	80083a0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008368:	4b09      	ldr	r3, [pc, #36]	; (8008390 <HAL_RCC_OscConfig+0x27c>)
 800836a:	2200      	movs	r2, #0
 800836c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800836e:	f7fb fc9d 	bl	8003cac <HAL_GetTick>
 8008372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008374:	e00e      	b.n	8008394 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008376:	f7fb fc99 	bl	8003cac <HAL_GetTick>
 800837a:	4602      	mov	r2, r0
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	1ad3      	subs	r3, r2, r3
 8008380:	2b02      	cmp	r3, #2
 8008382:	d907      	bls.n	8008394 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008384:	2303      	movs	r3, #3
 8008386:	e15c      	b.n	8008642 <HAL_RCC_OscConfig+0x52e>
 8008388:	40023800 	.word	0x40023800
 800838c:	42470000 	.word	0x42470000
 8008390:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008394:	4b8a      	ldr	r3, [pc, #552]	; (80085c0 <HAL_RCC_OscConfig+0x4ac>)
 8008396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008398:	f003 0302 	and.w	r3, r3, #2
 800839c:	2b00      	cmp	r3, #0
 800839e:	d1ea      	bne.n	8008376 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 0304 	and.w	r3, r3, #4
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f000 8097 	beq.w	80084dc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80083ae:	2300      	movs	r3, #0
 80083b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80083b2:	4b83      	ldr	r3, [pc, #524]	; (80085c0 <HAL_RCC_OscConfig+0x4ac>)
 80083b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d10f      	bne.n	80083de <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80083be:	2300      	movs	r3, #0
 80083c0:	60bb      	str	r3, [r7, #8]
 80083c2:	4b7f      	ldr	r3, [pc, #508]	; (80085c0 <HAL_RCC_OscConfig+0x4ac>)
 80083c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c6:	4a7e      	ldr	r2, [pc, #504]	; (80085c0 <HAL_RCC_OscConfig+0x4ac>)
 80083c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083cc:	6413      	str	r3, [r2, #64]	; 0x40
 80083ce:	4b7c      	ldr	r3, [pc, #496]	; (80085c0 <HAL_RCC_OscConfig+0x4ac>)
 80083d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083d6:	60bb      	str	r3, [r7, #8]
 80083d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80083da:	2301      	movs	r3, #1
 80083dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083de:	4b79      	ldr	r3, [pc, #484]	; (80085c4 <HAL_RCC_OscConfig+0x4b0>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d118      	bne.n	800841c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80083ea:	4b76      	ldr	r3, [pc, #472]	; (80085c4 <HAL_RCC_OscConfig+0x4b0>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a75      	ldr	r2, [pc, #468]	; (80085c4 <HAL_RCC_OscConfig+0x4b0>)
 80083f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80083f6:	f7fb fc59 	bl	8003cac <HAL_GetTick>
 80083fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083fc:	e008      	b.n	8008410 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083fe:	f7fb fc55 	bl	8003cac <HAL_GetTick>
 8008402:	4602      	mov	r2, r0
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	1ad3      	subs	r3, r2, r3
 8008408:	2b02      	cmp	r3, #2
 800840a:	d901      	bls.n	8008410 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800840c:	2303      	movs	r3, #3
 800840e:	e118      	b.n	8008642 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008410:	4b6c      	ldr	r3, [pc, #432]	; (80085c4 <HAL_RCC_OscConfig+0x4b0>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008418:	2b00      	cmp	r3, #0
 800841a:	d0f0      	beq.n	80083fe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	2b01      	cmp	r3, #1
 8008422:	d106      	bne.n	8008432 <HAL_RCC_OscConfig+0x31e>
 8008424:	4b66      	ldr	r3, [pc, #408]	; (80085c0 <HAL_RCC_OscConfig+0x4ac>)
 8008426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008428:	4a65      	ldr	r2, [pc, #404]	; (80085c0 <HAL_RCC_OscConfig+0x4ac>)
 800842a:	f043 0301 	orr.w	r3, r3, #1
 800842e:	6713      	str	r3, [r2, #112]	; 0x70
 8008430:	e01c      	b.n	800846c <HAL_RCC_OscConfig+0x358>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	2b05      	cmp	r3, #5
 8008438:	d10c      	bne.n	8008454 <HAL_RCC_OscConfig+0x340>
 800843a:	4b61      	ldr	r3, [pc, #388]	; (80085c0 <HAL_RCC_OscConfig+0x4ac>)
 800843c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800843e:	4a60      	ldr	r2, [pc, #384]	; (80085c0 <HAL_RCC_OscConfig+0x4ac>)
 8008440:	f043 0304 	orr.w	r3, r3, #4
 8008444:	6713      	str	r3, [r2, #112]	; 0x70
 8008446:	4b5e      	ldr	r3, [pc, #376]	; (80085c0 <HAL_RCC_OscConfig+0x4ac>)
 8008448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800844a:	4a5d      	ldr	r2, [pc, #372]	; (80085c0 <HAL_RCC_OscConfig+0x4ac>)
 800844c:	f043 0301 	orr.w	r3, r3, #1
 8008450:	6713      	str	r3, [r2, #112]	; 0x70
 8008452:	e00b      	b.n	800846c <HAL_RCC_OscConfig+0x358>
 8008454:	4b5a      	ldr	r3, [pc, #360]	; (80085c0 <HAL_RCC_OscConfig+0x4ac>)
 8008456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008458:	4a59      	ldr	r2, [pc, #356]	; (80085c0 <HAL_RCC_OscConfig+0x4ac>)
 800845a:	f023 0301 	bic.w	r3, r3, #1
 800845e:	6713      	str	r3, [r2, #112]	; 0x70
 8008460:	4b57      	ldr	r3, [pc, #348]	; (80085c0 <HAL_RCC_OscConfig+0x4ac>)
 8008462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008464:	4a56      	ldr	r2, [pc, #344]	; (80085c0 <HAL_RCC_OscConfig+0x4ac>)
 8008466:	f023 0304 	bic.w	r3, r3, #4
 800846a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d015      	beq.n	80084a0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008474:	f7fb fc1a 	bl	8003cac <HAL_GetTick>
 8008478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800847a:	e00a      	b.n	8008492 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800847c:	f7fb fc16 	bl	8003cac <HAL_GetTick>
 8008480:	4602      	mov	r2, r0
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	1ad3      	subs	r3, r2, r3
 8008486:	f241 3288 	movw	r2, #5000	; 0x1388
 800848a:	4293      	cmp	r3, r2
 800848c:	d901      	bls.n	8008492 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800848e:	2303      	movs	r3, #3
 8008490:	e0d7      	b.n	8008642 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008492:	4b4b      	ldr	r3, [pc, #300]	; (80085c0 <HAL_RCC_OscConfig+0x4ac>)
 8008494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008496:	f003 0302 	and.w	r3, r3, #2
 800849a:	2b00      	cmp	r3, #0
 800849c:	d0ee      	beq.n	800847c <HAL_RCC_OscConfig+0x368>
 800849e:	e014      	b.n	80084ca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084a0:	f7fb fc04 	bl	8003cac <HAL_GetTick>
 80084a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80084a6:	e00a      	b.n	80084be <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084a8:	f7fb fc00 	bl	8003cac <HAL_GetTick>
 80084ac:	4602      	mov	r2, r0
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	1ad3      	subs	r3, r2, r3
 80084b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d901      	bls.n	80084be <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80084ba:	2303      	movs	r3, #3
 80084bc:	e0c1      	b.n	8008642 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80084be:	4b40      	ldr	r3, [pc, #256]	; (80085c0 <HAL_RCC_OscConfig+0x4ac>)
 80084c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084c2:	f003 0302 	and.w	r3, r3, #2
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1ee      	bne.n	80084a8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80084ca:	7dfb      	ldrb	r3, [r7, #23]
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d105      	bne.n	80084dc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80084d0:	4b3b      	ldr	r3, [pc, #236]	; (80085c0 <HAL_RCC_OscConfig+0x4ac>)
 80084d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d4:	4a3a      	ldr	r2, [pc, #232]	; (80085c0 <HAL_RCC_OscConfig+0x4ac>)
 80084d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	699b      	ldr	r3, [r3, #24]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	f000 80ad 	beq.w	8008640 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80084e6:	4b36      	ldr	r3, [pc, #216]	; (80085c0 <HAL_RCC_OscConfig+0x4ac>)
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	f003 030c 	and.w	r3, r3, #12
 80084ee:	2b08      	cmp	r3, #8
 80084f0:	d060      	beq.n	80085b4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	699b      	ldr	r3, [r3, #24]
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d145      	bne.n	8008586 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084fa:	4b33      	ldr	r3, [pc, #204]	; (80085c8 <HAL_RCC_OscConfig+0x4b4>)
 80084fc:	2200      	movs	r2, #0
 80084fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008500:	f7fb fbd4 	bl	8003cac <HAL_GetTick>
 8008504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008506:	e008      	b.n	800851a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008508:	f7fb fbd0 	bl	8003cac <HAL_GetTick>
 800850c:	4602      	mov	r2, r0
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	2b02      	cmp	r3, #2
 8008514:	d901      	bls.n	800851a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008516:	2303      	movs	r3, #3
 8008518:	e093      	b.n	8008642 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800851a:	4b29      	ldr	r3, [pc, #164]	; (80085c0 <HAL_RCC_OscConfig+0x4ac>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1f0      	bne.n	8008508 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	69da      	ldr	r2, [r3, #28]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a1b      	ldr	r3, [r3, #32]
 800852e:	431a      	orrs	r2, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008534:	019b      	lsls	r3, r3, #6
 8008536:	431a      	orrs	r2, r3
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800853c:	085b      	lsrs	r3, r3, #1
 800853e:	3b01      	subs	r3, #1
 8008540:	041b      	lsls	r3, r3, #16
 8008542:	431a      	orrs	r2, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008548:	061b      	lsls	r3, r3, #24
 800854a:	431a      	orrs	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008550:	071b      	lsls	r3, r3, #28
 8008552:	491b      	ldr	r1, [pc, #108]	; (80085c0 <HAL_RCC_OscConfig+0x4ac>)
 8008554:	4313      	orrs	r3, r2
 8008556:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008558:	4b1b      	ldr	r3, [pc, #108]	; (80085c8 <HAL_RCC_OscConfig+0x4b4>)
 800855a:	2201      	movs	r2, #1
 800855c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800855e:	f7fb fba5 	bl	8003cac <HAL_GetTick>
 8008562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008564:	e008      	b.n	8008578 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008566:	f7fb fba1 	bl	8003cac <HAL_GetTick>
 800856a:	4602      	mov	r2, r0
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	1ad3      	subs	r3, r2, r3
 8008570:	2b02      	cmp	r3, #2
 8008572:	d901      	bls.n	8008578 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008574:	2303      	movs	r3, #3
 8008576:	e064      	b.n	8008642 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008578:	4b11      	ldr	r3, [pc, #68]	; (80085c0 <HAL_RCC_OscConfig+0x4ac>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008580:	2b00      	cmp	r3, #0
 8008582:	d0f0      	beq.n	8008566 <HAL_RCC_OscConfig+0x452>
 8008584:	e05c      	b.n	8008640 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008586:	4b10      	ldr	r3, [pc, #64]	; (80085c8 <HAL_RCC_OscConfig+0x4b4>)
 8008588:	2200      	movs	r2, #0
 800858a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800858c:	f7fb fb8e 	bl	8003cac <HAL_GetTick>
 8008590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008592:	e008      	b.n	80085a6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008594:	f7fb fb8a 	bl	8003cac <HAL_GetTick>
 8008598:	4602      	mov	r2, r0
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	1ad3      	subs	r3, r2, r3
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d901      	bls.n	80085a6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80085a2:	2303      	movs	r3, #3
 80085a4:	e04d      	b.n	8008642 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085a6:	4b06      	ldr	r3, [pc, #24]	; (80085c0 <HAL_RCC_OscConfig+0x4ac>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d1f0      	bne.n	8008594 <HAL_RCC_OscConfig+0x480>
 80085b2:	e045      	b.n	8008640 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	699b      	ldr	r3, [r3, #24]
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d107      	bne.n	80085cc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	e040      	b.n	8008642 <HAL_RCC_OscConfig+0x52e>
 80085c0:	40023800 	.word	0x40023800
 80085c4:	40007000 	.word	0x40007000
 80085c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80085cc:	4b1f      	ldr	r3, [pc, #124]	; (800864c <HAL_RCC_OscConfig+0x538>)
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d030      	beq.n	800863c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d129      	bne.n	800863c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d122      	bne.n	800863c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80085fc:	4013      	ands	r3, r2
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008602:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008604:	4293      	cmp	r3, r2
 8008606:	d119      	bne.n	800863c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008612:	085b      	lsrs	r3, r3, #1
 8008614:	3b01      	subs	r3, #1
 8008616:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008618:	429a      	cmp	r2, r3
 800861a:	d10f      	bne.n	800863c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008626:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008628:	429a      	cmp	r2, r3
 800862a:	d107      	bne.n	800863c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008636:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008638:	429a      	cmp	r2, r3
 800863a:	d001      	beq.n	8008640 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	e000      	b.n	8008642 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008640:	2300      	movs	r3, #0
}
 8008642:	4618      	mov	r0, r3
 8008644:	3718      	adds	r7, #24
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	40023800 	.word	0x40023800

08008650 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d101      	bne.n	8008662 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	e022      	b.n	80086a8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008668:	b2db      	uxtb	r3, r3
 800866a:	2b00      	cmp	r3, #0
 800866c:	d105      	bne.n	800867a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f7f9 ffbf 	bl	80025f8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2203      	movs	r2, #3
 800867e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f814 	bl	80086b0 <HAL_SD_InitCard>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d001      	beq.n	8008692 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	e00a      	b.n	80086a8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2201      	movs	r2, #1
 80086a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3708      	adds	r7, #8
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80086b0:	b5b0      	push	{r4, r5, r7, lr}
 80086b2:	b08e      	sub	sp, #56	; 0x38
 80086b4:	af04      	add	r7, sp, #16
 80086b6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80086b8:	2300      	movs	r3, #0
 80086ba:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80086bc:	2300      	movs	r3, #0
 80086be:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80086c0:	2300      	movs	r3, #0
 80086c2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80086c4:	2300      	movs	r3, #0
 80086c6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80086c8:	2300      	movs	r3, #0
 80086ca:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80086cc:	2376      	movs	r3, #118	; 0x76
 80086ce:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681d      	ldr	r5, [r3, #0]
 80086d4:	466c      	mov	r4, sp
 80086d6:	f107 0314 	add.w	r3, r7, #20
 80086da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80086de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80086e2:	f107 0308 	add.w	r3, r7, #8
 80086e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80086e8:	4628      	mov	r0, r5
 80086ea:	f002 fc5f 	bl	800afac <SDIO_Init>
 80086ee:	4603      	mov	r3, r0
 80086f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80086f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d001      	beq.n	8008700 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	e04f      	b.n	80087a0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008700:	4b29      	ldr	r3, [pc, #164]	; (80087a8 <HAL_SD_InitCard+0xf8>)
 8008702:	2200      	movs	r2, #0
 8008704:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4618      	mov	r0, r3
 800870c:	f002 fc97 	bl	800b03e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008710:	4b25      	ldr	r3, [pc, #148]	; (80087a8 <HAL_SD_InitCard+0xf8>)
 8008712:	2201      	movs	r2, #1
 8008714:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8008716:	2002      	movs	r0, #2
 8008718:	f7fb fad4 	bl	8003cc4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f001 fab9 	bl	8009c94 <SD_PowerON>
 8008722:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008724:	6a3b      	ldr	r3, [r7, #32]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00b      	beq.n	8008742 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2201      	movs	r2, #1
 800872e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008736:	6a3b      	ldr	r3, [r7, #32]
 8008738:	431a      	orrs	r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	e02e      	b.n	80087a0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f001 f9d8 	bl	8009af8 <SD_InitCard>
 8008748:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800874a:	6a3b      	ldr	r3, [r7, #32]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d00b      	beq.n	8008768 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800875c:	6a3b      	ldr	r3, [r7, #32]
 800875e:	431a      	orrs	r2, r3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	e01b      	b.n	80087a0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008770:	4618      	mov	r0, r3
 8008772:	f002 fcf6 	bl	800b162 <SDMMC_CmdBlockLength>
 8008776:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008778:	6a3b      	ldr	r3, [r7, #32]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00f      	beq.n	800879e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a0a      	ldr	r2, [pc, #40]	; (80087ac <HAL_SD_InitCard+0xfc>)
 8008784:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800878a:	6a3b      	ldr	r3, [r7, #32]
 800878c:	431a      	orrs	r2, r3
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2201      	movs	r2, #1
 8008796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	e000      	b.n	80087a0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3728      	adds	r7, #40	; 0x28
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bdb0      	pop	{r4, r5, r7, pc}
 80087a8:	422580a0 	.word	0x422580a0
 80087ac:	004005ff 	.word	0x004005ff

080087b0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b092      	sub	sp, #72	; 0x48
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]
 80087bc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80087be:	f7fb fa75 	bl	8003cac <HAL_GetTick>
 80087c2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d107      	bne.n	80087e2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	e1bd      	b.n	8008b5e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	f040 81b0 	bne.w	8008b50 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2200      	movs	r2, #0
 80087f4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80087f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	441a      	add	r2, r3
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008800:	429a      	cmp	r2, r3
 8008802:	d907      	bls.n	8008814 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008808:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	e1a4      	b.n	8008b5e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2203      	movs	r2, #3
 8008818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2200      	movs	r2, #0
 8008822:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008828:	2b01      	cmp	r3, #1
 800882a:	d002      	beq.n	8008832 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800882c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800882e:	025b      	lsls	r3, r3, #9
 8008830:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008832:	f04f 33ff 	mov.w	r3, #4294967295
 8008836:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	025b      	lsls	r3, r3, #9
 800883c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800883e:	2390      	movs	r3, #144	; 0x90
 8008840:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008842:	2302      	movs	r3, #2
 8008844:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008846:	2300      	movs	r3, #0
 8008848:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800884a:	2301      	movs	r3, #1
 800884c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f107 0214 	add.w	r2, r7, #20
 8008856:	4611      	mov	r1, r2
 8008858:	4618      	mov	r0, r3
 800885a:	f002 fc56 	bl	800b10a <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d90a      	bls.n	800887a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2202      	movs	r2, #2
 8008868:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008870:	4618      	mov	r0, r3
 8008872:	f002 fcba 	bl	800b1ea <SDMMC_CmdReadMultiBlock>
 8008876:	6478      	str	r0, [r7, #68]	; 0x44
 8008878:	e009      	b.n	800888e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2201      	movs	r2, #1
 800887e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008886:	4618      	mov	r0, r3
 8008888:	f002 fc8d 	bl	800b1a6 <SDMMC_CmdReadSingleBlock>
 800888c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800888e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008890:	2b00      	cmp	r3, #0
 8008892:	d012      	beq.n	80088ba <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a7a      	ldr	r2, [pc, #488]	; (8008a84 <HAL_SD_ReadBlocks+0x2d4>)
 800889a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088a2:	431a      	orrs	r2, r3
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2200      	movs	r2, #0
 80088b4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	e151      	b.n	8008b5e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80088be:	e061      	b.n	8008984 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d03c      	beq.n	8008948 <HAL_SD_ReadBlocks+0x198>
 80088ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d039      	beq.n	8008948 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80088d4:	2300      	movs	r3, #0
 80088d6:	643b      	str	r3, [r7, #64]	; 0x40
 80088d8:	e033      	b.n	8008942 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4618      	mov	r0, r3
 80088e0:	f002 fb8f 	bl	800b002 <SDIO_ReadFIFO>
 80088e4:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80088e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e8:	b2da      	uxtb	r2, r3
 80088ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ec:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80088ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088f0:	3301      	adds	r3, #1
 80088f2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80088f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088f6:	3b01      	subs	r3, #1
 80088f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80088fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fc:	0a1b      	lsrs	r3, r3, #8
 80088fe:	b2da      	uxtb	r2, r3
 8008900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008902:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008906:	3301      	adds	r3, #1
 8008908:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800890a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800890c:	3b01      	subs	r3, #1
 800890e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008912:	0c1b      	lsrs	r3, r3, #16
 8008914:	b2da      	uxtb	r2, r3
 8008916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008918:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800891a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800891c:	3301      	adds	r3, #1
 800891e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008922:	3b01      	subs	r3, #1
 8008924:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008928:	0e1b      	lsrs	r3, r3, #24
 800892a:	b2da      	uxtb	r2, r3
 800892c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800892e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008932:	3301      	adds	r3, #1
 8008934:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008938:	3b01      	subs	r3, #1
 800893a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800893c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800893e:	3301      	adds	r3, #1
 8008940:	643b      	str	r3, [r7, #64]	; 0x40
 8008942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008944:	2b07      	cmp	r3, #7
 8008946:	d9c8      	bls.n	80088da <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008948:	f7fb f9b0 	bl	8003cac <HAL_GetTick>
 800894c:	4602      	mov	r2, r0
 800894e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008950:	1ad3      	subs	r3, r2, r3
 8008952:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008954:	429a      	cmp	r2, r3
 8008956:	d902      	bls.n	800895e <HAL_SD_ReadBlocks+0x1ae>
 8008958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800895a:	2b00      	cmp	r3, #0
 800895c:	d112      	bne.n	8008984 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a48      	ldr	r2, [pc, #288]	; (8008a84 <HAL_SD_ReadBlocks+0x2d4>)
 8008964:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800896a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2201      	movs	r2, #1
 8008976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2200      	movs	r2, #0
 800897e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008980:	2303      	movs	r3, #3
 8008982:	e0ec      	b.n	8008b5e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800898a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800898e:	2b00      	cmp	r3, #0
 8008990:	d096      	beq.n	80088c0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800899c:	2b00      	cmp	r3, #0
 800899e:	d022      	beq.n	80089e6 <HAL_SD_ReadBlocks+0x236>
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d91f      	bls.n	80089e6 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089aa:	2b03      	cmp	r3, #3
 80089ac:	d01b      	beq.n	80089e6 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4618      	mov	r0, r3
 80089b4:	f002 fc80 	bl	800b2b8 <SDMMC_CmdStopTransfer>
 80089b8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80089ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d012      	beq.n	80089e6 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a2f      	ldr	r2, [pc, #188]	; (8008a84 <HAL_SD_ReadBlocks+0x2d4>)
 80089c6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089ce:	431a      	orrs	r2, r3
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2200      	movs	r2, #0
 80089e0:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	e0bb      	b.n	8008b5e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ec:	f003 0308 	and.w	r3, r3, #8
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d012      	beq.n	8008a1a <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a22      	ldr	r2, [pc, #136]	; (8008a84 <HAL_SD_ReadBlocks+0x2d4>)
 80089fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a00:	f043 0208 	orr.w	r2, r3, #8
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2200      	movs	r2, #0
 8008a14:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	e0a1      	b.n	8008b5e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a20:	f003 0302 	and.w	r3, r3, #2
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d012      	beq.n	8008a4e <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a15      	ldr	r2, [pc, #84]	; (8008a84 <HAL_SD_ReadBlocks+0x2d4>)
 8008a2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a34:	f043 0202 	orr.w	r2, r3, #2
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2200      	movs	r2, #0
 8008a48:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e087      	b.n	8008b5e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a54:	f003 0320 	and.w	r3, r3, #32
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d064      	beq.n	8008b26 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a08      	ldr	r2, [pc, #32]	; (8008a84 <HAL_SD_ReadBlocks+0x2d4>)
 8008a62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a68:	f043 0220 	orr.w	r2, r3, #32
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e06d      	b.n	8008b5e <HAL_SD_ReadBlocks+0x3ae>
 8008a82:	bf00      	nop
 8008a84:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f002 fab8 	bl	800b002 <SDIO_ReadFIFO>
 8008a92:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8008a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a96:	b2da      	uxtb	r2, r3
 8008a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a9a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aa4:	3b01      	subs	r3, #1
 8008aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aaa:	0a1b      	lsrs	r3, r3, #8
 8008aac:	b2da      	uxtb	r2, r3
 8008aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aba:	3b01      	subs	r3, #1
 8008abc:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac0:	0c1b      	lsrs	r3, r3, #16
 8008ac2:	b2da      	uxtb	r2, r3
 8008ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aca:	3301      	adds	r3, #1
 8008acc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad6:	0e1b      	lsrs	r3, r3, #24
 8008ad8:	b2da      	uxtb	r2, r3
 8008ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008adc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008aea:	f7fb f8df 	bl	8003cac <HAL_GetTick>
 8008aee:	4602      	mov	r2, r0
 8008af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af2:	1ad3      	subs	r3, r2, r3
 8008af4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d902      	bls.n	8008b00 <HAL_SD_ReadBlocks+0x350>
 8008afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d112      	bne.n	8008b26 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a18      	ldr	r2, [pc, #96]	; (8008b68 <HAL_SD_ReadBlocks+0x3b8>)
 8008b06:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b0c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	e01b      	b.n	8008b5e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d002      	beq.n	8008b3a <HAL_SD_ReadBlocks+0x38a>
 8008b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d1a6      	bne.n	8008a88 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f240 523a 	movw	r2, #1338	; 0x53a
 8008b42:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	e006      	b.n	8008b5e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b54:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008b5c:	2301      	movs	r3, #1
  }
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3748      	adds	r7, #72	; 0x48
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	004005ff 	.word	0x004005ff

08008b6c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b092      	sub	sp, #72	; 0x48
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	607a      	str	r2, [r7, #4]
 8008b78:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008b7a:	f7fb f897 	bl	8003cac <HAL_GetTick>
 8008b7e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d107      	bne.n	8008b9e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b92:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e165      	b.n	8008e6a <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	f040 8158 	bne.w	8008e5c <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008bb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	441a      	add	r2, r3
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d907      	bls.n	8008bd0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e14c      	b.n	8008e6a <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2203      	movs	r2, #3
 8008bd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d002      	beq.n	8008bee <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bea:	025b      	lsls	r3, r3, #9
 8008bec:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008bee:	f04f 33ff 	mov.w	r3, #4294967295
 8008bf2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	025b      	lsls	r3, r3, #9
 8008bf8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008bfa:	2390      	movs	r3, #144	; 0x90
 8008bfc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008c02:	2300      	movs	r3, #0
 8008c04:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008c06:	2301      	movs	r3, #1
 8008c08:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f107 0218 	add.w	r2, r7, #24
 8008c12:	4611      	mov	r1, r2
 8008c14:	4618      	mov	r0, r3
 8008c16:	f002 fa78 	bl	800b10a <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d90a      	bls.n	8008c36 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2220      	movs	r2, #32
 8008c24:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f002 fb20 	bl	800b272 <SDMMC_CmdWriteMultiBlock>
 8008c32:	6478      	str	r0, [r7, #68]	; 0x44
 8008c34:	e009      	b.n	8008c4a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2210      	movs	r2, #16
 8008c3a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008c42:	4618      	mov	r0, r3
 8008c44:	f002 faf3 	bl	800b22e <SDMMC_CmdWriteSingleBlock>
 8008c48:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d012      	beq.n	8008c76 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a87      	ldr	r2, [pc, #540]	; (8008e74 <HAL_SD_WriteBlocks+0x308>)
 8008c56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c5e:	431a      	orrs	r2, r3
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	e0f9      	b.n	8008e6a <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8008c7a:	e065      	b.n	8008d48 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d040      	beq.n	8008d0c <HAL_SD_WriteBlocks+0x1a0>
 8008c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d03d      	beq.n	8008d0c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8008c90:	2300      	movs	r3, #0
 8008c92:	643b      	str	r3, [r7, #64]	; 0x40
 8008c94:	e037      	b.n	8008d06 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8008c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ca4:	3b01      	subs	r3, #1
 8008ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	021a      	lsls	r2, r3, #8
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	041a      	lsls	r2, r3, #16
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cce:	3301      	adds	r3, #1
 8008cd0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cd4:	3b01      	subs	r3, #1
 8008cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	061a      	lsls	r2, r3, #24
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cec:	3b01      	subs	r3, #1
 8008cee:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f107 0214 	add.w	r2, r7, #20
 8008cf8:	4611      	mov	r1, r2
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f002 f98e 	bl	800b01c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d02:	3301      	adds	r3, #1
 8008d04:	643b      	str	r3, [r7, #64]	; 0x40
 8008d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d08:	2b07      	cmp	r3, #7
 8008d0a:	d9c4      	bls.n	8008c96 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008d0c:	f7fa ffce 	bl	8003cac <HAL_GetTick>
 8008d10:	4602      	mov	r2, r0
 8008d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d14:	1ad3      	subs	r3, r2, r3
 8008d16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d902      	bls.n	8008d22 <HAL_SD_WriteBlocks+0x1b6>
 8008d1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d112      	bne.n	8008d48 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a53      	ldr	r2, [pc, #332]	; (8008e74 <HAL_SD_WriteBlocks+0x308>)
 8008d28:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d30:	431a      	orrs	r2, r3
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2200      	movs	r2, #0
 8008d42:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008d44:	2303      	movs	r3, #3
 8008d46:	e090      	b.n	8008e6a <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d4e:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d092      	beq.n	8008c7c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d022      	beq.n	8008daa <HAL_SD_WriteBlocks+0x23e>
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d91f      	bls.n	8008daa <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d6e:	2b03      	cmp	r3, #3
 8008d70:	d01b      	beq.n	8008daa <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4618      	mov	r0, r3
 8008d78:	f002 fa9e 	bl	800b2b8 <SDMMC_CmdStopTransfer>
 8008d7c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d012      	beq.n	8008daa <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a3a      	ldr	r2, [pc, #232]	; (8008e74 <HAL_SD_WriteBlocks+0x308>)
 8008d8a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d92:	431a      	orrs	r2, r3
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2200      	movs	r2, #0
 8008da4:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e05f      	b.n	8008e6a <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008db0:	f003 0308 	and.w	r3, r3, #8
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d012      	beq.n	8008dde <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a2d      	ldr	r2, [pc, #180]	; (8008e74 <HAL_SD_WriteBlocks+0x308>)
 8008dbe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc4:	f043 0208 	orr.w	r2, r3, #8
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e045      	b.n	8008e6a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008de4:	f003 0302 	and.w	r3, r3, #2
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d012      	beq.n	8008e12 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a20      	ldr	r2, [pc, #128]	; (8008e74 <HAL_SD_WriteBlocks+0x308>)
 8008df2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df8:	f043 0202 	orr.w	r2, r3, #2
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e02b      	b.n	8008e6a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e18:	f003 0310 	and.w	r3, r3, #16
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d012      	beq.n	8008e46 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a13      	ldr	r2, [pc, #76]	; (8008e74 <HAL_SD_WriteBlocks+0x308>)
 8008e26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e2c:	f043 0210 	orr.w	r2, r3, #16
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e011      	b.n	8008e6a <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f240 523a 	movw	r2, #1338	; 0x53a
 8008e4e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	e006      	b.n	8008e6a <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e60:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
  }
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3748      	adds	r7, #72	; 0x48
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	004005ff 	.word	0x004005ff

08008e78 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b08c      	sub	sp, #48	; 0x30
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	607a      	str	r2, [r7, #4]
 8008e84:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d107      	bne.n	8008ea0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e94:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e0be      	b.n	800901e <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	f040 80b7 	bne.w	800901c <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008eb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	441a      	add	r2, r3
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d907      	bls.n	8008ed2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e0a5      	b.n	800901e <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2203      	movs	r2, #3
 8008ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008ef0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef6:	4a4c      	ldr	r2, [pc, #304]	; (8009028 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 8008ef8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efe:	4a4b      	ldr	r2, [pc, #300]	; (800902c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8008f00:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f06:	2200      	movs	r2, #0
 8008f08:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f0e:	2200      	movs	r2, #0
 8008f10:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f22:	689a      	ldr	r2, [r3, #8]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	430a      	orrs	r2, r1
 8008f2c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	3380      	adds	r3, #128	; 0x80
 8008f38:	4619      	mov	r1, r3
 8008f3a:	68ba      	ldr	r2, [r7, #8]
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	025b      	lsls	r3, r3, #9
 8008f40:	089b      	lsrs	r3, r3, #2
 8008f42:	f7fb fcdb 	bl	80048fc <HAL_DMA_Start_IT>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d017      	beq.n	8008f7c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008f5a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a33      	ldr	r2, [pc, #204]	; (8009030 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8008f62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2201      	movs	r2, #1
 8008f74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e050      	b.n	800901e <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008f7c:	4b2d      	ldr	r3, [pc, #180]	; (8009034 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8008f7e:	2201      	movs	r2, #1
 8008f80:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d002      	beq.n	8008f90 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 8008f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f8c:	025b      	lsls	r3, r3, #9
 8008f8e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008f90:	f04f 33ff 	mov.w	r3, #4294967295
 8008f94:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	025b      	lsls	r3, r3, #9
 8008f9a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008f9c:	2390      	movs	r3, #144	; 0x90
 8008f9e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008fa0:	2302      	movs	r3, #2
 8008fa2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f107 0210 	add.w	r2, r7, #16
 8008fb4:	4611      	mov	r1, r2
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f002 f8a7 	bl	800b10a <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d90a      	bls.n	8008fd8 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2282      	movs	r2, #130	; 0x82
 8008fc6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f002 f90b 	bl	800b1ea <SDMMC_CmdReadMultiBlock>
 8008fd4:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008fd6:	e009      	b.n	8008fec <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2281      	movs	r2, #129	; 0x81
 8008fdc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f002 f8de 	bl	800b1a6 <SDMMC_CmdReadSingleBlock>
 8008fea:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d012      	beq.n	8009018 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a0e      	ldr	r2, [pc, #56]	; (8009030 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8008ff8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009000:	431a      	orrs	r2, r3
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2201      	movs	r2, #1
 800900a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2200      	movs	r2, #0
 8009012:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8009014:	2301      	movs	r3, #1
 8009016:	e002      	b.n	800901e <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 8009018:	2300      	movs	r3, #0
 800901a:	e000      	b.n	800901e <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 800901c:	2302      	movs	r3, #2
  }
}
 800901e:	4618      	mov	r0, r3
 8009020:	3730      	adds	r7, #48	; 0x30
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	08009907 	.word	0x08009907
 800902c:	08009979 	.word	0x08009979
 8009030:	004005ff 	.word	0x004005ff
 8009034:	4225858c 	.word	0x4225858c

08009038 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b08c      	sub	sp, #48	; 0x30
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	607a      	str	r2, [r7, #4]
 8009044:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d107      	bne.n	8009060 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009054:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	e0c1      	b.n	80091e4 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009066:	b2db      	uxtb	r3, r3
 8009068:	2b01      	cmp	r3, #1
 800906a:	f040 80ba 	bne.w	80091e2 <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2200      	movs	r2, #0
 8009072:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009074:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	441a      	add	r2, r3
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800907e:	429a      	cmp	r2, r3
 8009080:	d907      	bls.n	8009092 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009086:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	e0a8      	b.n	80091e4 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2203      	movs	r2, #3
 8009096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	2200      	movs	r2, #0
 80090a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f042 021a 	orr.w	r2, r2, #26
 80090b0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090b6:	4a4d      	ldr	r2, [pc, #308]	; (80091ec <HAL_SD_WriteBlocks_DMA+0x1b4>)
 80090b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090be:	4a4c      	ldr	r2, [pc, #304]	; (80091f0 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 80090c0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090c6:	2200      	movs	r2, #0
 80090c8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d002      	beq.n	80090d8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80090d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d4:	025b      	lsls	r3, r3, #9
 80090d6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d90a      	bls.n	80090f4 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	22a0      	movs	r2, #160	; 0xa0
 80090e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090ea:	4618      	mov	r0, r3
 80090ec:	f002 f8c1 	bl	800b272 <SDMMC_CmdWriteMultiBlock>
 80090f0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80090f2:	e009      	b.n	8009108 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2290      	movs	r2, #144	; 0x90
 80090f8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009100:	4618      	mov	r0, r3
 8009102:	f002 f894 	bl	800b22e <SDMMC_CmdWriteSingleBlock>
 8009106:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910a:	2b00      	cmp	r3, #0
 800910c:	d012      	beq.n	8009134 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a38      	ldr	r2, [pc, #224]	; (80091f4 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8009114:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800911a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800911c:	431a      	orrs	r2, r3
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2201      	movs	r2, #1
 8009126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2200      	movs	r2, #0
 800912e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009130:	2301      	movs	r3, #1
 8009132:	e057      	b.n	80091e4 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009134:	4b30      	ldr	r3, [pc, #192]	; (80091f8 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8009136:	2201      	movs	r2, #1
 8009138:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800913e:	2240      	movs	r2, #64	; 0x40
 8009140:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009152:	689a      	ldr	r2, [r3, #8]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	430a      	orrs	r2, r1
 800915c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009162:	68b9      	ldr	r1, [r7, #8]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	3380      	adds	r3, #128	; 0x80
 800916a:	461a      	mov	r2, r3
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	025b      	lsls	r3, r3, #9
 8009170:	089b      	lsrs	r3, r3, #2
 8009172:	f7fb fbc3 	bl	80048fc <HAL_DMA_Start_IT>
 8009176:	4603      	mov	r3, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d01a      	beq.n	80091b2 <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f022 021a 	bic.w	r2, r2, #26
 800918a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a18      	ldr	r2, [pc, #96]	; (80091f4 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8009192:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009198:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2200      	movs	r2, #0
 80091ac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80091ae:	2301      	movs	r3, #1
 80091b0:	e018      	b.n	80091e4 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80091b2:	f04f 33ff 	mov.w	r3, #4294967295
 80091b6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	025b      	lsls	r3, r3, #9
 80091bc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80091be:	2390      	movs	r3, #144	; 0x90
 80091c0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80091c2:	2300      	movs	r3, #0
 80091c4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80091c6:	2300      	movs	r3, #0
 80091c8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80091ca:	2301      	movs	r3, #1
 80091cc:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f107 0210 	add.w	r2, r7, #16
 80091d6:	4611      	mov	r1, r2
 80091d8:	4618      	mov	r0, r3
 80091da:	f001 ff96 	bl	800b10a <SDIO_ConfigData>

      return HAL_OK;
 80091de:	2300      	movs	r3, #0
 80091e0:	e000      	b.n	80091e4 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 80091e2:	2302      	movs	r3, #2
  }
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3730      	adds	r7, #48	; 0x30
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	080098dd 	.word	0x080098dd
 80091f0:	08009979 	.word	0x08009979
 80091f4:	004005ff 	.word	0x004005ff
 80091f8:	4225858c 	.word	0x4225858c

080091fc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009208:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009214:	2b00      	cmp	r3, #0
 8009216:	d008      	beq.n	800922a <HAL_SD_IRQHandler+0x2e>
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f003 0308 	and.w	r3, r3, #8
 800921e:	2b00      	cmp	r3, #0
 8009220:	d003      	beq.n	800922a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 fdec 	bl	8009e00 <SD_Read_IT>
 8009228:	e155      	b.n	80094d6 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009234:	2b00      	cmp	r3, #0
 8009236:	f000 808f 	beq.w	8009358 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009242:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	6812      	ldr	r2, [r2, #0]
 800924e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8009252:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8009256:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f022 0201 	bic.w	r2, r2, #1
 8009266:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f003 0308 	and.w	r3, r3, #8
 800926e:	2b00      	cmp	r3, #0
 8009270:	d039      	beq.n	80092e6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f003 0302 	and.w	r3, r3, #2
 8009278:	2b00      	cmp	r3, #0
 800927a:	d104      	bne.n	8009286 <HAL_SD_IRQHandler+0x8a>
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f003 0320 	and.w	r3, r3, #32
 8009282:	2b00      	cmp	r3, #0
 8009284:	d011      	beq.n	80092aa <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4618      	mov	r0, r3
 800928c:	f002 f814 	bl	800b2b8 <SDMMC_CmdStopTransfer>
 8009290:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d008      	beq.n	80092aa <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	431a      	orrs	r2, r3
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 f91f 	bl	80094e8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f240 523a 	movw	r2, #1338	; 0x53a
 80092b2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f003 0301 	and.w	r3, r3, #1
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d104      	bne.n	80092d6 <HAL_SD_IRQHandler+0xda>
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f003 0302 	and.w	r3, r3, #2
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d003      	beq.n	80092de <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f004 f87a 	bl	800d3d0 <HAL_SD_RxCpltCallback>
 80092dc:	e0fb      	b.n	80094d6 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f004 f86c 	bl	800d3bc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80092e4:	e0f7      	b.n	80094d6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f000 80f2 	beq.w	80094d6 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f003 0320 	and.w	r3, r3, #32
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d011      	beq.n	8009320 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4618      	mov	r0, r3
 8009302:	f001 ffd9 	bl	800b2b8 <SDMMC_CmdStopTransfer>
 8009306:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d008      	beq.n	8009320 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	431a      	orrs	r2, r3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 f8e4 	bl	80094e8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f003 0301 	and.w	r3, r3, #1
 8009326:	2b00      	cmp	r3, #0
 8009328:	f040 80d5 	bne.w	80094d6 <HAL_SD_IRQHandler+0x2da>
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f003 0302 	and.w	r3, r3, #2
 8009332:	2b00      	cmp	r3, #0
 8009334:	f040 80cf 	bne.w	80094d6 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f022 0208 	bic.w	r2, r2, #8
 8009346:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2201      	movs	r2, #1
 800934c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f004 f833 	bl	800d3bc <HAL_SD_TxCpltCallback>
}
 8009356:	e0be      	b.n	80094d6 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800935e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009362:	2b00      	cmp	r3, #0
 8009364:	d008      	beq.n	8009378 <HAL_SD_IRQHandler+0x17c>
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f003 0308 	and.w	r3, r3, #8
 800936c:	2b00      	cmp	r3, #0
 800936e:	d003      	beq.n	8009378 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 fd96 	bl	8009ea2 <SD_Write_IT>
 8009376:	e0ae      	b.n	80094d6 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800937e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8009382:	2b00      	cmp	r3, #0
 8009384:	f000 80a7 	beq.w	80094d6 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800938e:	f003 0302 	and.w	r3, r3, #2
 8009392:	2b00      	cmp	r3, #0
 8009394:	d005      	beq.n	80093a2 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800939a:	f043 0202 	orr.w	r2, r3, #2
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093a8:	f003 0308 	and.w	r3, r3, #8
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d005      	beq.n	80093bc <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b4:	f043 0208 	orr.w	r2, r3, #8
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093c2:	f003 0320 	and.w	r3, r3, #32
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d005      	beq.n	80093d6 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ce:	f043 0220 	orr.w	r2, r3, #32
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093dc:	f003 0310 	and.w	r3, r3, #16
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d005      	beq.n	80093f0 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e8:	f043 0210 	orr.w	r2, r3, #16
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f240 523a 	movw	r2, #1338	; 0x53a
 80093f8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009408:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4618      	mov	r0, r3
 8009410:	f001 ff52 	bl	800b2b8 <SDMMC_CmdStopTransfer>
 8009414:	4602      	mov	r2, r0
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800941a:	431a      	orrs	r2, r3
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f003 0308 	and.w	r3, r3, #8
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00a      	beq.n	8009440 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2201      	movs	r2, #1
 800942e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 f855 	bl	80094e8 <HAL_SD_ErrorCallback>
}
 800943e:	e04a      	b.n	80094d6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009446:	2b00      	cmp	r3, #0
 8009448:	d045      	beq.n	80094d6 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f003 0310 	and.w	r3, r3, #16
 8009450:	2b00      	cmp	r3, #0
 8009452:	d104      	bne.n	800945e <HAL_SD_IRQHandler+0x262>
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f003 0320 	and.w	r3, r3, #32
 800945a:	2b00      	cmp	r3, #0
 800945c:	d011      	beq.n	8009482 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009462:	4a1f      	ldr	r2, [pc, #124]	; (80094e0 <HAL_SD_IRQHandler+0x2e4>)
 8009464:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800946a:	4618      	mov	r0, r3
 800946c:	f7fb fb0e 	bl	8004a8c <HAL_DMA_Abort_IT>
 8009470:	4603      	mov	r3, r0
 8009472:	2b00      	cmp	r3, #0
 8009474:	d02f      	beq.n	80094d6 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800947a:	4618      	mov	r0, r3
 800947c:	f000 face 	bl	8009a1c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009480:	e029      	b.n	80094d6 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f003 0301 	and.w	r3, r3, #1
 8009488:	2b00      	cmp	r3, #0
 800948a:	d104      	bne.n	8009496 <HAL_SD_IRQHandler+0x29a>
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f003 0302 	and.w	r3, r3, #2
 8009492:	2b00      	cmp	r3, #0
 8009494:	d011      	beq.n	80094ba <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800949a:	4a12      	ldr	r2, [pc, #72]	; (80094e4 <HAL_SD_IRQHandler+0x2e8>)
 800949c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7fb faf2 	bl	8004a8c <HAL_DMA_Abort_IT>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d013      	beq.n	80094d6 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b2:	4618      	mov	r0, r3
 80094b4:	f000 fae9 	bl	8009a8a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80094b8:	e00d      	b.n	80094d6 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2201      	movs	r2, #1
 80094c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f003 ff6a 	bl	800d3a8 <HAL_SD_AbortCallback>
}
 80094d4:	e7ff      	b.n	80094d6 <HAL_SD_IRQHandler+0x2da>
 80094d6:	bf00      	nop
 80094d8:	3710      	adds	r7, #16
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	08009a1d 	.word	0x08009a1d
 80094e4:	08009a8b 	.word	0x08009a8b

080094e8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80094f0:	bf00      	nop
 80094f2:	370c      	adds	r7, #12
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr

080094fc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800950a:	0f9b      	lsrs	r3, r3, #30
 800950c:	b2da      	uxtb	r2, r3
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009516:	0e9b      	lsrs	r3, r3, #26
 8009518:	b2db      	uxtb	r3, r3
 800951a:	f003 030f 	and.w	r3, r3, #15
 800951e:	b2da      	uxtb	r2, r3
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009528:	0e1b      	lsrs	r3, r3, #24
 800952a:	b2db      	uxtb	r3, r3
 800952c:	f003 0303 	and.w	r3, r3, #3
 8009530:	b2da      	uxtb	r2, r3
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800953a:	0c1b      	lsrs	r3, r3, #16
 800953c:	b2da      	uxtb	r2, r3
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009546:	0a1b      	lsrs	r3, r3, #8
 8009548:	b2da      	uxtb	r2, r3
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009552:	b2da      	uxtb	r2, r3
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800955c:	0d1b      	lsrs	r3, r3, #20
 800955e:	b29a      	uxth	r2, r3
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009568:	0c1b      	lsrs	r3, r3, #16
 800956a:	b2db      	uxtb	r3, r3
 800956c:	f003 030f 	and.w	r3, r3, #15
 8009570:	b2da      	uxtb	r2, r3
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800957a:	0bdb      	lsrs	r3, r3, #15
 800957c:	b2db      	uxtb	r3, r3
 800957e:	f003 0301 	and.w	r3, r3, #1
 8009582:	b2da      	uxtb	r2, r3
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800958c:	0b9b      	lsrs	r3, r3, #14
 800958e:	b2db      	uxtb	r3, r3
 8009590:	f003 0301 	and.w	r3, r3, #1
 8009594:	b2da      	uxtb	r2, r3
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800959e:	0b5b      	lsrs	r3, r3, #13
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	f003 0301 	and.w	r3, r3, #1
 80095a6:	b2da      	uxtb	r2, r3
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095b0:	0b1b      	lsrs	r3, r3, #12
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	f003 0301 	and.w	r3, r3, #1
 80095b8:	b2da      	uxtb	r2, r3
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	2200      	movs	r2, #0
 80095c2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d163      	bne.n	8009694 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095d0:	009a      	lsls	r2, r3, #2
 80095d2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80095d6:	4013      	ands	r3, r2
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80095dc:	0f92      	lsrs	r2, r2, #30
 80095de:	431a      	orrs	r2, r3
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095e8:	0edb      	lsrs	r3, r3, #27
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	f003 0307 	and.w	r3, r3, #7
 80095f0:	b2da      	uxtb	r2, r3
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095fa:	0e1b      	lsrs	r3, r3, #24
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	f003 0307 	and.w	r3, r3, #7
 8009602:	b2da      	uxtb	r2, r3
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800960c:	0d5b      	lsrs	r3, r3, #21
 800960e:	b2db      	uxtb	r3, r3
 8009610:	f003 0307 	and.w	r3, r3, #7
 8009614:	b2da      	uxtb	r2, r3
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800961e:	0c9b      	lsrs	r3, r3, #18
 8009620:	b2db      	uxtb	r3, r3
 8009622:	f003 0307 	and.w	r3, r3, #7
 8009626:	b2da      	uxtb	r2, r3
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009630:	0bdb      	lsrs	r3, r3, #15
 8009632:	b2db      	uxtb	r3, r3
 8009634:	f003 0307 	and.w	r3, r3, #7
 8009638:	b2da      	uxtb	r2, r3
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	691b      	ldr	r3, [r3, #16]
 8009642:	1c5a      	adds	r2, r3, #1
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	7e1b      	ldrb	r3, [r3, #24]
 800964c:	b2db      	uxtb	r3, r3
 800964e:	f003 0307 	and.w	r3, r3, #7
 8009652:	3302      	adds	r3, #2
 8009654:	2201      	movs	r2, #1
 8009656:	fa02 f303 	lsl.w	r3, r2, r3
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800965e:	fb03 f202 	mul.w	r2, r3, r2
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	7a1b      	ldrb	r3, [r3, #8]
 800966a:	b2db      	uxtb	r3, r3
 800966c:	f003 030f 	and.w	r3, r3, #15
 8009670:	2201      	movs	r2, #1
 8009672:	409a      	lsls	r2, r3
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009680:	0a52      	lsrs	r2, r2, #9
 8009682:	fb03 f202 	mul.w	r2, r3, r2
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009690:	661a      	str	r2, [r3, #96]	; 0x60
 8009692:	e031      	b.n	80096f8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009698:	2b01      	cmp	r3, #1
 800969a:	d11d      	bne.n	80096d8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096a0:	041b      	lsls	r3, r3, #16
 80096a2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096aa:	0c1b      	lsrs	r3, r3, #16
 80096ac:	431a      	orrs	r2, r3
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	691b      	ldr	r3, [r3, #16]
 80096b6:	3301      	adds	r3, #1
 80096b8:	029a      	lsls	r2, r3, #10
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096cc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	661a      	str	r2, [r3, #96]	; 0x60
 80096d6:	e00f      	b.n	80096f8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a58      	ldr	r2, [pc, #352]	; (8009840 <HAL_SD_GetCardCSD+0x344>)
 80096de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	e09d      	b.n	8009834 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096fc:	0b9b      	lsrs	r3, r3, #14
 80096fe:	b2db      	uxtb	r3, r3
 8009700:	f003 0301 	and.w	r3, r3, #1
 8009704:	b2da      	uxtb	r2, r3
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800970e:	09db      	lsrs	r3, r3, #7
 8009710:	b2db      	uxtb	r3, r3
 8009712:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009716:	b2da      	uxtb	r2, r3
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009720:	b2db      	uxtb	r3, r3
 8009722:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009726:	b2da      	uxtb	r2, r3
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009730:	0fdb      	lsrs	r3, r3, #31
 8009732:	b2da      	uxtb	r2, r3
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800973c:	0f5b      	lsrs	r3, r3, #29
 800973e:	b2db      	uxtb	r3, r3
 8009740:	f003 0303 	and.w	r3, r3, #3
 8009744:	b2da      	uxtb	r2, r3
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800974e:	0e9b      	lsrs	r3, r3, #26
 8009750:	b2db      	uxtb	r3, r3
 8009752:	f003 0307 	and.w	r3, r3, #7
 8009756:	b2da      	uxtb	r2, r3
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009760:	0d9b      	lsrs	r3, r3, #22
 8009762:	b2db      	uxtb	r3, r3
 8009764:	f003 030f 	and.w	r3, r3, #15
 8009768:	b2da      	uxtb	r2, r3
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009772:	0d5b      	lsrs	r3, r3, #21
 8009774:	b2db      	uxtb	r3, r3
 8009776:	f003 0301 	and.w	r3, r3, #1
 800977a:	b2da      	uxtb	r2, r3
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	2200      	movs	r2, #0
 8009786:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800978e:	0c1b      	lsrs	r3, r3, #16
 8009790:	b2db      	uxtb	r3, r3
 8009792:	f003 0301 	and.w	r3, r3, #1
 8009796:	b2da      	uxtb	r2, r3
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097a2:	0bdb      	lsrs	r3, r3, #15
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	f003 0301 	and.w	r3, r3, #1
 80097aa:	b2da      	uxtb	r2, r3
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097b6:	0b9b      	lsrs	r3, r3, #14
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	f003 0301 	and.w	r3, r3, #1
 80097be:	b2da      	uxtb	r2, r3
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ca:	0b5b      	lsrs	r3, r3, #13
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	f003 0301 	and.w	r3, r3, #1
 80097d2:	b2da      	uxtb	r2, r3
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097de:	0b1b      	lsrs	r3, r3, #12
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	f003 0301 	and.w	r3, r3, #1
 80097e6:	b2da      	uxtb	r2, r3
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097f2:	0a9b      	lsrs	r3, r3, #10
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	f003 0303 	and.w	r3, r3, #3
 80097fa:	b2da      	uxtb	r2, r3
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009806:	0a1b      	lsrs	r3, r3, #8
 8009808:	b2db      	uxtb	r3, r3
 800980a:	f003 0303 	and.w	r3, r3, #3
 800980e:	b2da      	uxtb	r2, r3
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800981a:	085b      	lsrs	r3, r3, #1
 800981c:	b2db      	uxtb	r3, r3
 800981e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009822:	b2da      	uxtb	r2, r3
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	2201      	movs	r2, #1
 800982e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009832:	2300      	movs	r3, #0
}
 8009834:	4618      	mov	r0, r3
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr
 8009840:	004005ff 	.word	0x004005ff

08009844 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800988e:	2300      	movs	r3, #0
}
 8009890:	4618      	mov	r0, r3
 8009892:	370c      	adds	r7, #12
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b086      	sub	sp, #24
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80098a4:	2300      	movs	r3, #0
 80098a6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80098a8:	f107 030c 	add.w	r3, r7, #12
 80098ac:	4619      	mov	r1, r3
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 fa7e 	bl	8009db0 <SD_SendStatus>
 80098b4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d005      	beq.n	80098c8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	431a      	orrs	r2, r3
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	0a5b      	lsrs	r3, r3, #9
 80098cc:	f003 030f 	and.w	r3, r3, #15
 80098d0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80098d2:	693b      	ldr	r3, [r7, #16]
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3718      	adds	r7, #24
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80098dc:	b480      	push	{r7}
 80098de:	b085      	sub	sp, #20
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098e8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098f8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80098fa:	bf00      	nop
 80098fc:	3714      	adds	r7, #20
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr

08009906 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009906:	b580      	push	{r7, lr}
 8009908:	b084      	sub	sp, #16
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009912:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009918:	2b82      	cmp	r3, #130	; 0x82
 800991a:	d111      	bne.n	8009940 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4618      	mov	r0, r3
 8009922:	f001 fcc9 	bl	800b2b8 <SDMMC_CmdStopTransfer>
 8009926:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d008      	beq.n	8009940 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	431a      	orrs	r2, r3
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800993a:	68f8      	ldr	r0, [r7, #12]
 800993c:	f7ff fdd4 	bl	80094e8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f022 0208 	bic.w	r2, r2, #8
 800994e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f240 523a 	movw	r2, #1338	; 0x53a
 8009958:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2201      	movs	r2, #1
 800995e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2200      	movs	r2, #0
 8009966:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009968:	68f8      	ldr	r0, [r7, #12]
 800996a:	f003 fd31 	bl	800d3d0 <HAL_SD_RxCpltCallback>
#endif
}
 800996e:	bf00      	nop
 8009970:	3710      	adds	r7, #16
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
	...

08009978 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b086      	sub	sp, #24
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009984:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f7fb fa2c 	bl	8004de4 <HAL_DMA_GetError>
 800998c:	4603      	mov	r3, r0
 800998e:	2b02      	cmp	r3, #2
 8009990:	d03e      	beq.n	8009a10 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009998:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800999e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099a0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	d002      	beq.n	80099ae <SD_DMAError+0x36>
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	d12d      	bne.n	8009a0a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4a19      	ldr	r2, [pc, #100]	; (8009a18 <SD_DMAError+0xa0>)
 80099b4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80099c4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80099d2:	6978      	ldr	r0, [r7, #20]
 80099d4:	f7ff ff62 	bl	800989c <HAL_SD_GetCardState>
 80099d8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	2b06      	cmp	r3, #6
 80099de:	d002      	beq.n	80099e6 <SD_DMAError+0x6e>
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	2b05      	cmp	r3, #5
 80099e4:	d10a      	bne.n	80099fc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4618      	mov	r0, r3
 80099ec:	f001 fc64 	bl	800b2b8 <SDMMC_CmdStopTransfer>
 80099f0:	4602      	mov	r2, r0
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f6:	431a      	orrs	r2, r3
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	2201      	movs	r2, #1
 8009a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	2200      	movs	r2, #0
 8009a08:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009a0a:	6978      	ldr	r0, [r7, #20]
 8009a0c:	f7ff fd6c 	bl	80094e8 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009a10:	bf00      	nop
 8009a12:	3718      	adds	r7, #24
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	004005ff 	.word	0x004005ff

08009a1c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a28:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f240 523a 	movw	r2, #1338	; 0x53a
 8009a32:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009a34:	68f8      	ldr	r0, [r7, #12]
 8009a36:	f7ff ff31 	bl	800989c <HAL_SD_GetCardState>
 8009a3a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2201      	movs	r2, #1
 8009a40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2200      	movs	r2, #0
 8009a48:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	2b06      	cmp	r3, #6
 8009a4e:	d002      	beq.n	8009a56 <SD_DMATxAbort+0x3a>
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	2b05      	cmp	r3, #5
 8009a54:	d10a      	bne.n	8009a6c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f001 fc2c 	bl	800b2b8 <SDMMC_CmdStopTransfer>
 8009a60:	4602      	mov	r2, r0
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a66:	431a      	orrs	r2, r3
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d103      	bne.n	8009a7c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009a74:	68f8      	ldr	r0, [r7, #12]
 8009a76:	f003 fc97 	bl	800d3a8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009a7a:	e002      	b.n	8009a82 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009a7c:	68f8      	ldr	r0, [r7, #12]
 8009a7e:	f7ff fd33 	bl	80094e8 <HAL_SD_ErrorCallback>
}
 8009a82:	bf00      	nop
 8009a84:	3710      	adds	r7, #16
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}

08009a8a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	b084      	sub	sp, #16
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a96:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f240 523a 	movw	r2, #1338	; 0x53a
 8009aa0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009aa2:	68f8      	ldr	r0, [r7, #12]
 8009aa4:	f7ff fefa 	bl	800989c <HAL_SD_GetCardState>
 8009aa8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2201      	movs	r2, #1
 8009aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	2b06      	cmp	r3, #6
 8009abc:	d002      	beq.n	8009ac4 <SD_DMARxAbort+0x3a>
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	2b05      	cmp	r3, #5
 8009ac2:	d10a      	bne.n	8009ada <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f001 fbf5 	bl	800b2b8 <SDMMC_CmdStopTransfer>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad4:	431a      	orrs	r2, r3
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d103      	bne.n	8009aea <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009ae2:	68f8      	ldr	r0, [r7, #12]
 8009ae4:	f003 fc60 	bl	800d3a8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009ae8:	e002      	b.n	8009af0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	f7ff fcfc 	bl	80094e8 <HAL_SD_ErrorCallback>
}
 8009af0:	bf00      	nop
 8009af2:	3710      	adds	r7, #16
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009af8:	b5b0      	push	{r4, r5, r7, lr}
 8009afa:	b094      	sub	sp, #80	; 0x50
 8009afc:	af04      	add	r7, sp, #16
 8009afe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009b00:	2301      	movs	r3, #1
 8009b02:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f001 faa6 	bl	800b05a <SDIO_GetPowerState>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d102      	bne.n	8009b1a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009b14:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009b18:	e0b8      	b.n	8009c8c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b1e:	2b03      	cmp	r3, #3
 8009b20:	d02f      	beq.n	8009b82 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4618      	mov	r0, r3
 8009b28:	f001 fc8d 	bl	800b446 <SDMMC_CmdSendCID>
 8009b2c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d001      	beq.n	8009b38 <SD_InitCard+0x40>
    {
      return errorstate;
 8009b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b36:	e0a9      	b.n	8009c8c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	2100      	movs	r1, #0
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f001 fad0 	bl	800b0e4 <SDIO_GetResponse>
 8009b44:	4602      	mov	r2, r0
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2104      	movs	r1, #4
 8009b50:	4618      	mov	r0, r3
 8009b52:	f001 fac7 	bl	800b0e4 <SDIO_GetResponse>
 8009b56:	4602      	mov	r2, r0
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	2108      	movs	r1, #8
 8009b62:	4618      	mov	r0, r3
 8009b64:	f001 fabe 	bl	800b0e4 <SDIO_GetResponse>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	210c      	movs	r1, #12
 8009b74:	4618      	mov	r0, r3
 8009b76:	f001 fab5 	bl	800b0e4 <SDIO_GetResponse>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b86:	2b03      	cmp	r3, #3
 8009b88:	d00d      	beq.n	8009ba6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f107 020e 	add.w	r2, r7, #14
 8009b92:	4611      	mov	r1, r2
 8009b94:	4618      	mov	r0, r3
 8009b96:	f001 fc93 	bl	800b4c0 <SDMMC_CmdSetRelAdd>
 8009b9a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d001      	beq.n	8009ba6 <SD_InitCard+0xae>
    {
      return errorstate;
 8009ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ba4:	e072      	b.n	8009c8c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009baa:	2b03      	cmp	r3, #3
 8009bac:	d036      	beq.n	8009c1c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009bae:	89fb      	ldrh	r3, [r7, #14]
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bbe:	041b      	lsls	r3, r3, #16
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	4610      	mov	r0, r2
 8009bc4:	f001 fc5d 	bl	800b482 <SDMMC_CmdSendCSD>
 8009bc8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d001      	beq.n	8009bd4 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bd2:	e05b      	b.n	8009c8c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2100      	movs	r1, #0
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f001 fa82 	bl	800b0e4 <SDIO_GetResponse>
 8009be0:	4602      	mov	r2, r0
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2104      	movs	r1, #4
 8009bec:	4618      	mov	r0, r3
 8009bee:	f001 fa79 	bl	800b0e4 <SDIO_GetResponse>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2108      	movs	r1, #8
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f001 fa70 	bl	800b0e4 <SDIO_GetResponse>
 8009c04:	4602      	mov	r2, r0
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	210c      	movs	r1, #12
 8009c10:	4618      	mov	r0, r3
 8009c12:	f001 fa67 	bl	800b0e4 <SDIO_GetResponse>
 8009c16:	4602      	mov	r2, r0
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2104      	movs	r1, #4
 8009c22:	4618      	mov	r0, r3
 8009c24:	f001 fa5e 	bl	800b0e4 <SDIO_GetResponse>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	0d1a      	lsrs	r2, r3, #20
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009c30:	f107 0310 	add.w	r3, r7, #16
 8009c34:	4619      	mov	r1, r3
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f7ff fc60 	bl	80094fc <HAL_SD_GetCardCSD>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d002      	beq.n	8009c48 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c46:	e021      	b.n	8009c8c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6819      	ldr	r1, [r3, #0]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c50:	041b      	lsls	r3, r3, #16
 8009c52:	2200      	movs	r2, #0
 8009c54:	461c      	mov	r4, r3
 8009c56:	4615      	mov	r5, r2
 8009c58:	4622      	mov	r2, r4
 8009c5a:	462b      	mov	r3, r5
 8009c5c:	4608      	mov	r0, r1
 8009c5e:	f001 fb4d 	bl	800b2fc <SDMMC_CmdSelDesel>
 8009c62:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d001      	beq.n	8009c6e <SD_InitCard+0x176>
  {
    return errorstate;
 8009c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c6c:	e00e      	b.n	8009c8c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681d      	ldr	r5, [r3, #0]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	466c      	mov	r4, sp
 8009c76:	f103 0210 	add.w	r2, r3, #16
 8009c7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8009c7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009c80:	3304      	adds	r3, #4
 8009c82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009c84:	4628      	mov	r0, r5
 8009c86:	f001 f991 	bl	800afac <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009c8a:	2300      	movs	r3, #0
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3740      	adds	r7, #64	; 0x40
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bdb0      	pop	{r4, r5, r7, pc}

08009c94 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b086      	sub	sp, #24
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	617b      	str	r3, [r7, #20]
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4618      	mov	r0, r3
 8009cae:	f001 fb48 	bl	800b342 <SDMMC_CmdGoIdleState>
 8009cb2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d001      	beq.n	8009cbe <SD_PowerON+0x2a>
  {
    return errorstate;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	e072      	b.n	8009da4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f001 fb5b 	bl	800b37e <SDMMC_CmdOperCond>
 8009cc8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d00d      	beq.n	8009cec <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f001 fb31 	bl	800b342 <SDMMC_CmdGoIdleState>
 8009ce0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d004      	beq.n	8009cf2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	e05b      	b.n	8009da4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2201      	movs	r2, #1
 8009cf0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d137      	bne.n	8009d6a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2100      	movs	r1, #0
 8009d00:	4618      	mov	r0, r3
 8009d02:	f001 fb5b 	bl	800b3bc <SDMMC_CmdAppCommand>
 8009d06:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d02d      	beq.n	8009d6a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d0e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009d12:	e047      	b.n	8009da4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2100      	movs	r1, #0
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f001 fb4e 	bl	800b3bc <SDMMC_CmdAppCommand>
 8009d20:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d001      	beq.n	8009d2c <SD_PowerON+0x98>
    {
      return errorstate;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	e03b      	b.n	8009da4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	491e      	ldr	r1, [pc, #120]	; (8009dac <SD_PowerON+0x118>)
 8009d32:	4618      	mov	r0, r3
 8009d34:	f001 fb64 	bl	800b400 <SDMMC_CmdAppOperCommand>
 8009d38:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d002      	beq.n	8009d46 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009d44:	e02e      	b.n	8009da4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	2100      	movs	r1, #0
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f001 f9c9 	bl	800b0e4 <SDIO_GetResponse>
 8009d52:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	0fdb      	lsrs	r3, r3, #31
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d101      	bne.n	8009d60 <SD_PowerON+0xcc>
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	e000      	b.n	8009d62 <SD_PowerON+0xce>
 8009d60:	2300      	movs	r3, #0
 8009d62:	613b      	str	r3, [r7, #16]

    count++;
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	3301      	adds	r3, #1
 8009d68:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d802      	bhi.n	8009d7a <SD_PowerON+0xe6>
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d0cc      	beq.n	8009d14 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d902      	bls.n	8009d8a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009d84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d88:	e00c      	b.n	8009da4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d003      	beq.n	8009d9c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2201      	movs	r2, #1
 8009d98:	645a      	str	r2, [r3, #68]	; 0x44
 8009d9a:	e002      	b.n	8009da2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009da2:	2300      	movs	r3, #0
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3718      	adds	r7, #24
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}
 8009dac:	c1100000 	.word	0xc1100000

08009db0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d102      	bne.n	8009dc6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009dc4:	e018      	b.n	8009df8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dce:	041b      	lsls	r3, r3, #16
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	4610      	mov	r0, r2
 8009dd4:	f001 fb95 	bl	800b502 <SDMMC_CmdSendStatus>
 8009dd8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d001      	beq.n	8009de4 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	e009      	b.n	8009df8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2100      	movs	r1, #0
 8009dea:	4618      	mov	r0, r3
 8009dec:	f001 f97a 	bl	800b0e4 <SDIO_GetResponse>
 8009df0:	4602      	mov	r2, r0
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009df6:	2300      	movs	r3, #0
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3710      	adds	r7, #16
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b086      	sub	sp, #24
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e0c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e12:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d03f      	beq.n	8009e9a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	617b      	str	r3, [r7, #20]
 8009e1e:	e033      	b.n	8009e88 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4618      	mov	r0, r3
 8009e26:	f001 f8ec 	bl	800b002 <SDIO_ReadFIFO>
 8009e2a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	b2da      	uxtb	r2, r3
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	3301      	adds	r3, #1
 8009e38:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	3b01      	subs	r3, #1
 8009e3e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	0a1b      	lsrs	r3, r3, #8
 8009e44:	b2da      	uxtb	r2, r3
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	3b01      	subs	r3, #1
 8009e54:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	0c1b      	lsrs	r3, r3, #16
 8009e5a:	b2da      	uxtb	r2, r3
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	3301      	adds	r3, #1
 8009e64:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	3b01      	subs	r3, #1
 8009e6a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	0e1b      	lsrs	r3, r3, #24
 8009e70:	b2da      	uxtb	r2, r3
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	3301      	adds	r3, #1
 8009e7a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	3b01      	subs	r3, #1
 8009e80:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	3301      	adds	r3, #1
 8009e86:	617b      	str	r3, [r7, #20]
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	2b07      	cmp	r3, #7
 8009e8c:	d9c8      	bls.n	8009e20 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	68fa      	ldr	r2, [r7, #12]
 8009e92:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	693a      	ldr	r2, [r7, #16]
 8009e98:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8009e9a:	bf00      	nop
 8009e9c:	3718      	adds	r7, #24
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}

08009ea2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009ea2:	b580      	push	{r7, lr}
 8009ea4:	b086      	sub	sp, #24
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6a1b      	ldr	r3, [r3, #32]
 8009eae:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d043      	beq.n	8009f44 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	617b      	str	r3, [r7, #20]
 8009ec0:	e037      	b.n	8009f32 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	3301      	adds	r3, #1
 8009ecc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	3b01      	subs	r3, #1
 8009ed2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	021a      	lsls	r2, r3, #8
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	4313      	orrs	r3, r2
 8009ede:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	041a      	lsls	r2, r3, #16
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	3301      	adds	r3, #1
 8009efc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	3b01      	subs	r3, #1
 8009f02:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	061a      	lsls	r2, r3, #24
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	3301      	adds	r3, #1
 8009f14:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	3b01      	subs	r3, #1
 8009f1a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f107 0208 	add.w	r2, r7, #8
 8009f24:	4611      	mov	r1, r2
 8009f26:	4618      	mov	r0, r3
 8009f28:	f001 f878 	bl	800b01c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	3301      	adds	r3, #1
 8009f30:	617b      	str	r3, [r7, #20]
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	2b07      	cmp	r3, #7
 8009f36:	d9c4      	bls.n	8009ec2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	68fa      	ldr	r2, [r7, #12]
 8009f3c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	693a      	ldr	r2, [r7, #16]
 8009f42:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8009f44:	bf00      	nop
 8009f46:	3718      	adds	r7, #24
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d101      	bne.n	8009f5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	e041      	b.n	8009fe2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d106      	bne.n	8009f78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f7f9 fa84 	bl	8003480 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2202      	movs	r2, #2
 8009f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	3304      	adds	r3, #4
 8009f88:	4619      	mov	r1, r3
 8009f8a:	4610      	mov	r0, r2
 8009f8c:	f000 fc42 	bl	800a814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2201      	movs	r2, #1
 8009f94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2201      	movs	r2, #1
 8009fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2201      	movs	r2, #1
 8009fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009fe0:	2300      	movs	r3, #0
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3708      	adds	r7, #8
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}
	...

08009fec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b085      	sub	sp, #20
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ffa:	b2db      	uxtb	r3, r3
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d001      	beq.n	800a004 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a000:	2301      	movs	r3, #1
 800a002:	e046      	b.n	800a092 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2202      	movs	r2, #2
 800a008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4a23      	ldr	r2, [pc, #140]	; (800a0a0 <HAL_TIM_Base_Start+0xb4>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d022      	beq.n	800a05c <HAL_TIM_Base_Start+0x70>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a01e:	d01d      	beq.n	800a05c <HAL_TIM_Base_Start+0x70>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4a1f      	ldr	r2, [pc, #124]	; (800a0a4 <HAL_TIM_Base_Start+0xb8>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d018      	beq.n	800a05c <HAL_TIM_Base_Start+0x70>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4a1e      	ldr	r2, [pc, #120]	; (800a0a8 <HAL_TIM_Base_Start+0xbc>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d013      	beq.n	800a05c <HAL_TIM_Base_Start+0x70>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a1c      	ldr	r2, [pc, #112]	; (800a0ac <HAL_TIM_Base_Start+0xc0>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d00e      	beq.n	800a05c <HAL_TIM_Base_Start+0x70>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4a1b      	ldr	r2, [pc, #108]	; (800a0b0 <HAL_TIM_Base_Start+0xc4>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d009      	beq.n	800a05c <HAL_TIM_Base_Start+0x70>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a19      	ldr	r2, [pc, #100]	; (800a0b4 <HAL_TIM_Base_Start+0xc8>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d004      	beq.n	800a05c <HAL_TIM_Base_Start+0x70>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4a18      	ldr	r2, [pc, #96]	; (800a0b8 <HAL_TIM_Base_Start+0xcc>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d111      	bne.n	800a080 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	f003 0307 	and.w	r3, r3, #7
 800a066:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2b06      	cmp	r3, #6
 800a06c:	d010      	beq.n	800a090 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f042 0201 	orr.w	r2, r2, #1
 800a07c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a07e:	e007      	b.n	800a090 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f042 0201 	orr.w	r2, r2, #1
 800a08e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a090:	2300      	movs	r3, #0
}
 800a092:	4618      	mov	r0, r3
 800a094:	3714      	adds	r7, #20
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr
 800a09e:	bf00      	nop
 800a0a0:	40010000 	.word	0x40010000
 800a0a4:	40000400 	.word	0x40000400
 800a0a8:	40000800 	.word	0x40000800
 800a0ac:	40000c00 	.word	0x40000c00
 800a0b0:	40010400 	.word	0x40010400
 800a0b4:	40014000 	.word	0x40014000
 800a0b8:	40001800 	.word	0x40001800

0800a0bc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b083      	sub	sp, #12
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	6a1a      	ldr	r2, [r3, #32]
 800a0ca:	f241 1311 	movw	r3, #4369	; 0x1111
 800a0ce:	4013      	ands	r3, r2
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d10f      	bne.n	800a0f4 <HAL_TIM_Base_Stop+0x38>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	6a1a      	ldr	r2, [r3, #32]
 800a0da:	f240 4344 	movw	r3, #1092	; 0x444
 800a0de:	4013      	ands	r3, r2
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d107      	bne.n	800a0f4 <HAL_TIM_Base_Stop+0x38>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f022 0201 	bic.w	r2, r2, #1
 800a0f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a0fc:	2300      	movs	r3, #0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	370c      	adds	r7, #12
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr
	...

0800a10c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b085      	sub	sp, #20
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a11a:	b2db      	uxtb	r3, r3
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d001      	beq.n	800a124 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	e04e      	b.n	800a1c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2202      	movs	r2, #2
 800a128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	68da      	ldr	r2, [r3, #12]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f042 0201 	orr.w	r2, r2, #1
 800a13a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a23      	ldr	r2, [pc, #140]	; (800a1d0 <HAL_TIM_Base_Start_IT+0xc4>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d022      	beq.n	800a18c <HAL_TIM_Base_Start_IT+0x80>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a14e:	d01d      	beq.n	800a18c <HAL_TIM_Base_Start_IT+0x80>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a1f      	ldr	r2, [pc, #124]	; (800a1d4 <HAL_TIM_Base_Start_IT+0xc8>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d018      	beq.n	800a18c <HAL_TIM_Base_Start_IT+0x80>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a1e      	ldr	r2, [pc, #120]	; (800a1d8 <HAL_TIM_Base_Start_IT+0xcc>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d013      	beq.n	800a18c <HAL_TIM_Base_Start_IT+0x80>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a1c      	ldr	r2, [pc, #112]	; (800a1dc <HAL_TIM_Base_Start_IT+0xd0>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d00e      	beq.n	800a18c <HAL_TIM_Base_Start_IT+0x80>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	4a1b      	ldr	r2, [pc, #108]	; (800a1e0 <HAL_TIM_Base_Start_IT+0xd4>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d009      	beq.n	800a18c <HAL_TIM_Base_Start_IT+0x80>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a19      	ldr	r2, [pc, #100]	; (800a1e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d004      	beq.n	800a18c <HAL_TIM_Base_Start_IT+0x80>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a18      	ldr	r2, [pc, #96]	; (800a1e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d111      	bne.n	800a1b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	f003 0307 	and.w	r3, r3, #7
 800a196:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	2b06      	cmp	r3, #6
 800a19c:	d010      	beq.n	800a1c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	681a      	ldr	r2, [r3, #0]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f042 0201 	orr.w	r2, r2, #1
 800a1ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1ae:	e007      	b.n	800a1c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f042 0201 	orr.w	r2, r2, #1
 800a1be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a1c0:	2300      	movs	r3, #0
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3714      	adds	r7, #20
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop
 800a1d0:	40010000 	.word	0x40010000
 800a1d4:	40000400 	.word	0x40000400
 800a1d8:	40000800 	.word	0x40000800
 800a1dc:	40000c00 	.word	0x40000c00
 800a1e0:	40010400 	.word	0x40010400
 800a1e4:	40014000 	.word	0x40014000
 800a1e8:	40001800 	.word	0x40001800

0800a1ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d101      	bne.n	800a1fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	e041      	b.n	800a282 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a204:	b2db      	uxtb	r3, r3
 800a206:	2b00      	cmp	r3, #0
 800a208:	d106      	bne.n	800a218 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2200      	movs	r2, #0
 800a20e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 f839 	bl	800a28a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2202      	movs	r2, #2
 800a21c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	3304      	adds	r3, #4
 800a228:	4619      	mov	r1, r3
 800a22a:	4610      	mov	r0, r2
 800a22c:	f000 faf2 	bl	800a814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2201      	movs	r2, #1
 800a234:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2201      	movs	r2, #1
 800a23c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2201      	movs	r2, #1
 800a244:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2201      	movs	r2, #1
 800a24c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2201      	movs	r2, #1
 800a254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2201      	movs	r2, #1
 800a25c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2201      	movs	r2, #1
 800a264:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2201      	movs	r2, #1
 800a26c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2201      	movs	r2, #1
 800a274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2201      	movs	r2, #1
 800a27c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	3708      	adds	r7, #8
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}

0800a28a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a28a:	b480      	push	{r7}
 800a28c:	b083      	sub	sp, #12
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a292:	bf00      	nop
 800a294:	370c      	adds	r7, #12
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr

0800a29e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b082      	sub	sp, #8
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	691b      	ldr	r3, [r3, #16]
 800a2ac:	f003 0302 	and.w	r3, r3, #2
 800a2b0:	2b02      	cmp	r3, #2
 800a2b2:	d122      	bne.n	800a2fa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	68db      	ldr	r3, [r3, #12]
 800a2ba:	f003 0302 	and.w	r3, r3, #2
 800a2be:	2b02      	cmp	r3, #2
 800a2c0:	d11b      	bne.n	800a2fa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f06f 0202 	mvn.w	r2, #2
 800a2ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	699b      	ldr	r3, [r3, #24]
 800a2d8:	f003 0303 	and.w	r3, r3, #3
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d003      	beq.n	800a2e8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 fa78 	bl	800a7d6 <HAL_TIM_IC_CaptureCallback>
 800a2e6:	e005      	b.n	800a2f4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f000 fa6a 	bl	800a7c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 fa7b 	bl	800a7ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	691b      	ldr	r3, [r3, #16]
 800a300:	f003 0304 	and.w	r3, r3, #4
 800a304:	2b04      	cmp	r3, #4
 800a306:	d122      	bne.n	800a34e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	68db      	ldr	r3, [r3, #12]
 800a30e:	f003 0304 	and.w	r3, r3, #4
 800a312:	2b04      	cmp	r3, #4
 800a314:	d11b      	bne.n	800a34e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f06f 0204 	mvn.w	r2, #4
 800a31e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2202      	movs	r2, #2
 800a324:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	699b      	ldr	r3, [r3, #24]
 800a32c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a330:	2b00      	cmp	r3, #0
 800a332:	d003      	beq.n	800a33c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f000 fa4e 	bl	800a7d6 <HAL_TIM_IC_CaptureCallback>
 800a33a:	e005      	b.n	800a348 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f000 fa40 	bl	800a7c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 fa51 	bl	800a7ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2200      	movs	r2, #0
 800a34c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	691b      	ldr	r3, [r3, #16]
 800a354:	f003 0308 	and.w	r3, r3, #8
 800a358:	2b08      	cmp	r3, #8
 800a35a:	d122      	bne.n	800a3a2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	68db      	ldr	r3, [r3, #12]
 800a362:	f003 0308 	and.w	r3, r3, #8
 800a366:	2b08      	cmp	r3, #8
 800a368:	d11b      	bne.n	800a3a2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f06f 0208 	mvn.w	r2, #8
 800a372:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2204      	movs	r2, #4
 800a378:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	69db      	ldr	r3, [r3, #28]
 800a380:	f003 0303 	and.w	r3, r3, #3
 800a384:	2b00      	cmp	r3, #0
 800a386:	d003      	beq.n	800a390 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f000 fa24 	bl	800a7d6 <HAL_TIM_IC_CaptureCallback>
 800a38e:	e005      	b.n	800a39c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f000 fa16 	bl	800a7c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 fa27 	bl	800a7ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	691b      	ldr	r3, [r3, #16]
 800a3a8:	f003 0310 	and.w	r3, r3, #16
 800a3ac:	2b10      	cmp	r3, #16
 800a3ae:	d122      	bne.n	800a3f6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	68db      	ldr	r3, [r3, #12]
 800a3b6:	f003 0310 	and.w	r3, r3, #16
 800a3ba:	2b10      	cmp	r3, #16
 800a3bc:	d11b      	bne.n	800a3f6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f06f 0210 	mvn.w	r2, #16
 800a3c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2208      	movs	r2, #8
 800a3cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	69db      	ldr	r3, [r3, #28]
 800a3d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d003      	beq.n	800a3e4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f000 f9fa 	bl	800a7d6 <HAL_TIM_IC_CaptureCallback>
 800a3e2:	e005      	b.n	800a3f0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f000 f9ec 	bl	800a7c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 f9fd 	bl	800a7ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	691b      	ldr	r3, [r3, #16]
 800a3fc:	f003 0301 	and.w	r3, r3, #1
 800a400:	2b01      	cmp	r3, #1
 800a402:	d10e      	bne.n	800a422 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	68db      	ldr	r3, [r3, #12]
 800a40a:	f003 0301 	and.w	r3, r3, #1
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d107      	bne.n	800a422 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f06f 0201 	mvn.w	r2, #1
 800a41a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f7f7 ffb3 	bl	8002388 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	691b      	ldr	r3, [r3, #16]
 800a428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a42c:	2b80      	cmp	r3, #128	; 0x80
 800a42e:	d10e      	bne.n	800a44e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a43a:	2b80      	cmp	r3, #128	; 0x80
 800a43c:	d107      	bne.n	800a44e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f000 fda5 	bl	800af98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	691b      	ldr	r3, [r3, #16]
 800a454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a458:	2b40      	cmp	r3, #64	; 0x40
 800a45a:	d10e      	bne.n	800a47a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	68db      	ldr	r3, [r3, #12]
 800a462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a466:	2b40      	cmp	r3, #64	; 0x40
 800a468:	d107      	bne.n	800a47a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f000 f9c2 	bl	800a7fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	691b      	ldr	r3, [r3, #16]
 800a480:	f003 0320 	and.w	r3, r3, #32
 800a484:	2b20      	cmp	r3, #32
 800a486:	d10e      	bne.n	800a4a6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	68db      	ldr	r3, [r3, #12]
 800a48e:	f003 0320 	and.w	r3, r3, #32
 800a492:	2b20      	cmp	r3, #32
 800a494:	d107      	bne.n	800a4a6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f06f 0220 	mvn.w	r2, #32
 800a49e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f000 fd6f 	bl	800af84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a4a6:	bf00      	nop
 800a4a8:	3708      	adds	r7, #8
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
	...

0800a4b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b086      	sub	sp, #24
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	60f8      	str	r0, [r7, #12]
 800a4b8:	60b9      	str	r1, [r7, #8]
 800a4ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d101      	bne.n	800a4ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a4ca:	2302      	movs	r3, #2
 800a4cc:	e0ae      	b.n	800a62c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2b0c      	cmp	r3, #12
 800a4da:	f200 809f 	bhi.w	800a61c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a4de:	a201      	add	r2, pc, #4	; (adr r2, 800a4e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a4e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4e4:	0800a519 	.word	0x0800a519
 800a4e8:	0800a61d 	.word	0x0800a61d
 800a4ec:	0800a61d 	.word	0x0800a61d
 800a4f0:	0800a61d 	.word	0x0800a61d
 800a4f4:	0800a559 	.word	0x0800a559
 800a4f8:	0800a61d 	.word	0x0800a61d
 800a4fc:	0800a61d 	.word	0x0800a61d
 800a500:	0800a61d 	.word	0x0800a61d
 800a504:	0800a59b 	.word	0x0800a59b
 800a508:	0800a61d 	.word	0x0800a61d
 800a50c:	0800a61d 	.word	0x0800a61d
 800a510:	0800a61d 	.word	0x0800a61d
 800a514:	0800a5db 	.word	0x0800a5db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	68b9      	ldr	r1, [r7, #8]
 800a51e:	4618      	mov	r0, r3
 800a520:	f000 fa18 	bl	800a954 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	699a      	ldr	r2, [r3, #24]
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f042 0208 	orr.w	r2, r2, #8
 800a532:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	699a      	ldr	r2, [r3, #24]
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f022 0204 	bic.w	r2, r2, #4
 800a542:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	6999      	ldr	r1, [r3, #24]
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	691a      	ldr	r2, [r3, #16]
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	430a      	orrs	r2, r1
 800a554:	619a      	str	r2, [r3, #24]
      break;
 800a556:	e064      	b.n	800a622 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	68b9      	ldr	r1, [r7, #8]
 800a55e:	4618      	mov	r0, r3
 800a560:	f000 fa68 	bl	800aa34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	699a      	ldr	r2, [r3, #24]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a572:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	699a      	ldr	r2, [r3, #24]
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a582:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	6999      	ldr	r1, [r3, #24]
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	691b      	ldr	r3, [r3, #16]
 800a58e:	021a      	lsls	r2, r3, #8
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	430a      	orrs	r2, r1
 800a596:	619a      	str	r2, [r3, #24]
      break;
 800a598:	e043      	b.n	800a622 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	68b9      	ldr	r1, [r7, #8]
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f000 fabd 	bl	800ab20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	69da      	ldr	r2, [r3, #28]
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f042 0208 	orr.w	r2, r2, #8
 800a5b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	69da      	ldr	r2, [r3, #28]
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f022 0204 	bic.w	r2, r2, #4
 800a5c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	69d9      	ldr	r1, [r3, #28]
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	691a      	ldr	r2, [r3, #16]
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	430a      	orrs	r2, r1
 800a5d6:	61da      	str	r2, [r3, #28]
      break;
 800a5d8:	e023      	b.n	800a622 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	68b9      	ldr	r1, [r7, #8]
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f000 fb11 	bl	800ac08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	69da      	ldr	r2, [r3, #28]
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a5f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	69da      	ldr	r2, [r3, #28]
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a604:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	69d9      	ldr	r1, [r3, #28]
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	691b      	ldr	r3, [r3, #16]
 800a610:	021a      	lsls	r2, r3, #8
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	430a      	orrs	r2, r1
 800a618:	61da      	str	r2, [r3, #28]
      break;
 800a61a:	e002      	b.n	800a622 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a61c:	2301      	movs	r3, #1
 800a61e:	75fb      	strb	r3, [r7, #23]
      break;
 800a620:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2200      	movs	r2, #0
 800a626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a62a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3718      	adds	r7, #24
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a63e:	2300      	movs	r3, #0
 800a640:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a648:	2b01      	cmp	r3, #1
 800a64a:	d101      	bne.n	800a650 <HAL_TIM_ConfigClockSource+0x1c>
 800a64c:	2302      	movs	r3, #2
 800a64e:	e0b4      	b.n	800a7ba <HAL_TIM_ConfigClockSource+0x186>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2201      	movs	r2, #1
 800a654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2202      	movs	r2, #2
 800a65c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	689b      	ldr	r3, [r3, #8]
 800a666:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a66e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a676:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	68ba      	ldr	r2, [r7, #8]
 800a67e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a688:	d03e      	beq.n	800a708 <HAL_TIM_ConfigClockSource+0xd4>
 800a68a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a68e:	f200 8087 	bhi.w	800a7a0 <HAL_TIM_ConfigClockSource+0x16c>
 800a692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a696:	f000 8086 	beq.w	800a7a6 <HAL_TIM_ConfigClockSource+0x172>
 800a69a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a69e:	d87f      	bhi.n	800a7a0 <HAL_TIM_ConfigClockSource+0x16c>
 800a6a0:	2b70      	cmp	r3, #112	; 0x70
 800a6a2:	d01a      	beq.n	800a6da <HAL_TIM_ConfigClockSource+0xa6>
 800a6a4:	2b70      	cmp	r3, #112	; 0x70
 800a6a6:	d87b      	bhi.n	800a7a0 <HAL_TIM_ConfigClockSource+0x16c>
 800a6a8:	2b60      	cmp	r3, #96	; 0x60
 800a6aa:	d050      	beq.n	800a74e <HAL_TIM_ConfigClockSource+0x11a>
 800a6ac:	2b60      	cmp	r3, #96	; 0x60
 800a6ae:	d877      	bhi.n	800a7a0 <HAL_TIM_ConfigClockSource+0x16c>
 800a6b0:	2b50      	cmp	r3, #80	; 0x50
 800a6b2:	d03c      	beq.n	800a72e <HAL_TIM_ConfigClockSource+0xfa>
 800a6b4:	2b50      	cmp	r3, #80	; 0x50
 800a6b6:	d873      	bhi.n	800a7a0 <HAL_TIM_ConfigClockSource+0x16c>
 800a6b8:	2b40      	cmp	r3, #64	; 0x40
 800a6ba:	d058      	beq.n	800a76e <HAL_TIM_ConfigClockSource+0x13a>
 800a6bc:	2b40      	cmp	r3, #64	; 0x40
 800a6be:	d86f      	bhi.n	800a7a0 <HAL_TIM_ConfigClockSource+0x16c>
 800a6c0:	2b30      	cmp	r3, #48	; 0x30
 800a6c2:	d064      	beq.n	800a78e <HAL_TIM_ConfigClockSource+0x15a>
 800a6c4:	2b30      	cmp	r3, #48	; 0x30
 800a6c6:	d86b      	bhi.n	800a7a0 <HAL_TIM_ConfigClockSource+0x16c>
 800a6c8:	2b20      	cmp	r3, #32
 800a6ca:	d060      	beq.n	800a78e <HAL_TIM_ConfigClockSource+0x15a>
 800a6cc:	2b20      	cmp	r3, #32
 800a6ce:	d867      	bhi.n	800a7a0 <HAL_TIM_ConfigClockSource+0x16c>
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d05c      	beq.n	800a78e <HAL_TIM_ConfigClockSource+0x15a>
 800a6d4:	2b10      	cmp	r3, #16
 800a6d6:	d05a      	beq.n	800a78e <HAL_TIM_ConfigClockSource+0x15a>
 800a6d8:	e062      	b.n	800a7a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6818      	ldr	r0, [r3, #0]
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	6899      	ldr	r1, [r3, #8]
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	685a      	ldr	r2, [r3, #4]
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	68db      	ldr	r3, [r3, #12]
 800a6ea:	f000 fb5d 	bl	800ada8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a6fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	68ba      	ldr	r2, [r7, #8]
 800a704:	609a      	str	r2, [r3, #8]
      break;
 800a706:	e04f      	b.n	800a7a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6818      	ldr	r0, [r3, #0]
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	6899      	ldr	r1, [r3, #8]
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	685a      	ldr	r2, [r3, #4]
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	68db      	ldr	r3, [r3, #12]
 800a718:	f000 fb46 	bl	800ada8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	689a      	ldr	r2, [r3, #8]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a72a:	609a      	str	r2, [r3, #8]
      break;
 800a72c:	e03c      	b.n	800a7a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6818      	ldr	r0, [r3, #0]
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	6859      	ldr	r1, [r3, #4]
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	68db      	ldr	r3, [r3, #12]
 800a73a:	461a      	mov	r2, r3
 800a73c:	f000 faba 	bl	800acb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	2150      	movs	r1, #80	; 0x50
 800a746:	4618      	mov	r0, r3
 800a748:	f000 fb13 	bl	800ad72 <TIM_ITRx_SetConfig>
      break;
 800a74c:	e02c      	b.n	800a7a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6818      	ldr	r0, [r3, #0]
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	6859      	ldr	r1, [r3, #4]
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	68db      	ldr	r3, [r3, #12]
 800a75a:	461a      	mov	r2, r3
 800a75c:	f000 fad9 	bl	800ad12 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	2160      	movs	r1, #96	; 0x60
 800a766:	4618      	mov	r0, r3
 800a768:	f000 fb03 	bl	800ad72 <TIM_ITRx_SetConfig>
      break;
 800a76c:	e01c      	b.n	800a7a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6818      	ldr	r0, [r3, #0]
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	6859      	ldr	r1, [r3, #4]
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	461a      	mov	r2, r3
 800a77c:	f000 fa9a 	bl	800acb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	2140      	movs	r1, #64	; 0x40
 800a786:	4618      	mov	r0, r3
 800a788:	f000 faf3 	bl	800ad72 <TIM_ITRx_SetConfig>
      break;
 800a78c:	e00c      	b.n	800a7a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4619      	mov	r1, r3
 800a798:	4610      	mov	r0, r2
 800a79a:	f000 faea 	bl	800ad72 <TIM_ITRx_SetConfig>
      break;
 800a79e:	e003      	b.n	800a7a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	73fb      	strb	r3, [r7, #15]
      break;
 800a7a4:	e000      	b.n	800a7a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a7a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a7b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3710      	adds	r7, #16
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}

0800a7c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a7c2:	b480      	push	{r7}
 800a7c4:	b083      	sub	sp, #12
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a7ca:	bf00      	nop
 800a7cc:	370c      	adds	r7, #12
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d4:	4770      	bx	lr

0800a7d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a7d6:	b480      	push	{r7}
 800a7d8:	b083      	sub	sp, #12
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a7de:	bf00      	nop
 800a7e0:	370c      	adds	r7, #12
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr

0800a7ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a7ea:	b480      	push	{r7}
 800a7ec:	b083      	sub	sp, #12
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a7f2:	bf00      	nop
 800a7f4:	370c      	adds	r7, #12
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr

0800a7fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a7fe:	b480      	push	{r7}
 800a800:	b083      	sub	sp, #12
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a806:	bf00      	nop
 800a808:	370c      	adds	r7, #12
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr
	...

0800a814 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a814:	b480      	push	{r7}
 800a816:	b085      	sub	sp, #20
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	4a40      	ldr	r2, [pc, #256]	; (800a928 <TIM_Base_SetConfig+0x114>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d013      	beq.n	800a854 <TIM_Base_SetConfig+0x40>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a832:	d00f      	beq.n	800a854 <TIM_Base_SetConfig+0x40>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	4a3d      	ldr	r2, [pc, #244]	; (800a92c <TIM_Base_SetConfig+0x118>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d00b      	beq.n	800a854 <TIM_Base_SetConfig+0x40>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	4a3c      	ldr	r2, [pc, #240]	; (800a930 <TIM_Base_SetConfig+0x11c>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d007      	beq.n	800a854 <TIM_Base_SetConfig+0x40>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	4a3b      	ldr	r2, [pc, #236]	; (800a934 <TIM_Base_SetConfig+0x120>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d003      	beq.n	800a854 <TIM_Base_SetConfig+0x40>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	4a3a      	ldr	r2, [pc, #232]	; (800a938 <TIM_Base_SetConfig+0x124>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d108      	bne.n	800a866 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a85a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	68fa      	ldr	r2, [r7, #12]
 800a862:	4313      	orrs	r3, r2
 800a864:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	4a2f      	ldr	r2, [pc, #188]	; (800a928 <TIM_Base_SetConfig+0x114>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d02b      	beq.n	800a8c6 <TIM_Base_SetConfig+0xb2>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a874:	d027      	beq.n	800a8c6 <TIM_Base_SetConfig+0xb2>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	4a2c      	ldr	r2, [pc, #176]	; (800a92c <TIM_Base_SetConfig+0x118>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d023      	beq.n	800a8c6 <TIM_Base_SetConfig+0xb2>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	4a2b      	ldr	r2, [pc, #172]	; (800a930 <TIM_Base_SetConfig+0x11c>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d01f      	beq.n	800a8c6 <TIM_Base_SetConfig+0xb2>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	4a2a      	ldr	r2, [pc, #168]	; (800a934 <TIM_Base_SetConfig+0x120>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d01b      	beq.n	800a8c6 <TIM_Base_SetConfig+0xb2>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	4a29      	ldr	r2, [pc, #164]	; (800a938 <TIM_Base_SetConfig+0x124>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d017      	beq.n	800a8c6 <TIM_Base_SetConfig+0xb2>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	4a28      	ldr	r2, [pc, #160]	; (800a93c <TIM_Base_SetConfig+0x128>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d013      	beq.n	800a8c6 <TIM_Base_SetConfig+0xb2>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	4a27      	ldr	r2, [pc, #156]	; (800a940 <TIM_Base_SetConfig+0x12c>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d00f      	beq.n	800a8c6 <TIM_Base_SetConfig+0xb2>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	4a26      	ldr	r2, [pc, #152]	; (800a944 <TIM_Base_SetConfig+0x130>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d00b      	beq.n	800a8c6 <TIM_Base_SetConfig+0xb2>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	4a25      	ldr	r2, [pc, #148]	; (800a948 <TIM_Base_SetConfig+0x134>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d007      	beq.n	800a8c6 <TIM_Base_SetConfig+0xb2>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	4a24      	ldr	r2, [pc, #144]	; (800a94c <TIM_Base_SetConfig+0x138>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d003      	beq.n	800a8c6 <TIM_Base_SetConfig+0xb2>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	4a23      	ldr	r2, [pc, #140]	; (800a950 <TIM_Base_SetConfig+0x13c>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d108      	bne.n	800a8d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	68db      	ldr	r3, [r3, #12]
 800a8d2:	68fa      	ldr	r2, [r7, #12]
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	695b      	ldr	r3, [r3, #20]
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	68fa      	ldr	r2, [r7, #12]
 800a8ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	689a      	ldr	r2, [r3, #8]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	681a      	ldr	r2, [r3, #0]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	4a0a      	ldr	r2, [pc, #40]	; (800a928 <TIM_Base_SetConfig+0x114>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d003      	beq.n	800a90c <TIM_Base_SetConfig+0xf8>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	4a0c      	ldr	r2, [pc, #48]	; (800a938 <TIM_Base_SetConfig+0x124>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d103      	bne.n	800a914 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	691a      	ldr	r2, [r3, #16]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2201      	movs	r2, #1
 800a918:	615a      	str	r2, [r3, #20]
}
 800a91a:	bf00      	nop
 800a91c:	3714      	adds	r7, #20
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr
 800a926:	bf00      	nop
 800a928:	40010000 	.word	0x40010000
 800a92c:	40000400 	.word	0x40000400
 800a930:	40000800 	.word	0x40000800
 800a934:	40000c00 	.word	0x40000c00
 800a938:	40010400 	.word	0x40010400
 800a93c:	40014000 	.word	0x40014000
 800a940:	40014400 	.word	0x40014400
 800a944:	40014800 	.word	0x40014800
 800a948:	40001800 	.word	0x40001800
 800a94c:	40001c00 	.word	0x40001c00
 800a950:	40002000 	.word	0x40002000

0800a954 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a954:	b480      	push	{r7}
 800a956:	b087      	sub	sp, #28
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6a1b      	ldr	r3, [r3, #32]
 800a962:	f023 0201 	bic.w	r2, r3, #1
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6a1b      	ldr	r3, [r3, #32]
 800a96e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	699b      	ldr	r3, [r3, #24]
 800a97a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f023 0303 	bic.w	r3, r3, #3
 800a98a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	68fa      	ldr	r2, [r7, #12]
 800a992:	4313      	orrs	r3, r2
 800a994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	f023 0302 	bic.w	r3, r3, #2
 800a99c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	689b      	ldr	r3, [r3, #8]
 800a9a2:	697a      	ldr	r2, [r7, #20]
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	4a20      	ldr	r2, [pc, #128]	; (800aa2c <TIM_OC1_SetConfig+0xd8>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d003      	beq.n	800a9b8 <TIM_OC1_SetConfig+0x64>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	4a1f      	ldr	r2, [pc, #124]	; (800aa30 <TIM_OC1_SetConfig+0xdc>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d10c      	bne.n	800a9d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	f023 0308 	bic.w	r3, r3, #8
 800a9be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	697a      	ldr	r2, [r7, #20]
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	f023 0304 	bic.w	r3, r3, #4
 800a9d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	4a15      	ldr	r2, [pc, #84]	; (800aa2c <TIM_OC1_SetConfig+0xd8>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d003      	beq.n	800a9e2 <TIM_OC1_SetConfig+0x8e>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	4a14      	ldr	r2, [pc, #80]	; (800aa30 <TIM_OC1_SetConfig+0xdc>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d111      	bne.n	800aa06 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a9f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	695b      	ldr	r3, [r3, #20]
 800a9f6:	693a      	ldr	r2, [r7, #16]
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	699b      	ldr	r3, [r3, #24]
 800aa00:	693a      	ldr	r2, [r7, #16]
 800aa02:	4313      	orrs	r3, r2
 800aa04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	693a      	ldr	r2, [r7, #16]
 800aa0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	68fa      	ldr	r2, [r7, #12]
 800aa10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	685a      	ldr	r2, [r3, #4]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	697a      	ldr	r2, [r7, #20]
 800aa1e:	621a      	str	r2, [r3, #32]
}
 800aa20:	bf00      	nop
 800aa22:	371c      	adds	r7, #28
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr
 800aa2c:	40010000 	.word	0x40010000
 800aa30:	40010400 	.word	0x40010400

0800aa34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b087      	sub	sp, #28
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6a1b      	ldr	r3, [r3, #32]
 800aa42:	f023 0210 	bic.w	r2, r3, #16
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6a1b      	ldr	r3, [r3, #32]
 800aa4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	699b      	ldr	r3, [r3, #24]
 800aa5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	021b      	lsls	r3, r3, #8
 800aa72:	68fa      	ldr	r2, [r7, #12]
 800aa74:	4313      	orrs	r3, r2
 800aa76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	f023 0320 	bic.w	r3, r3, #32
 800aa7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	689b      	ldr	r3, [r3, #8]
 800aa84:	011b      	lsls	r3, r3, #4
 800aa86:	697a      	ldr	r2, [r7, #20]
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	4a22      	ldr	r2, [pc, #136]	; (800ab18 <TIM_OC2_SetConfig+0xe4>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d003      	beq.n	800aa9c <TIM_OC2_SetConfig+0x68>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	4a21      	ldr	r2, [pc, #132]	; (800ab1c <TIM_OC2_SetConfig+0xe8>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d10d      	bne.n	800aab8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aaa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	68db      	ldr	r3, [r3, #12]
 800aaa8:	011b      	lsls	r3, r3, #4
 800aaaa:	697a      	ldr	r2, [r7, #20]
 800aaac:	4313      	orrs	r3, r2
 800aaae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aab6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	4a17      	ldr	r2, [pc, #92]	; (800ab18 <TIM_OC2_SetConfig+0xe4>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d003      	beq.n	800aac8 <TIM_OC2_SetConfig+0x94>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	4a16      	ldr	r2, [pc, #88]	; (800ab1c <TIM_OC2_SetConfig+0xe8>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d113      	bne.n	800aaf0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aace:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aad6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	695b      	ldr	r3, [r3, #20]
 800aadc:	009b      	lsls	r3, r3, #2
 800aade:	693a      	ldr	r2, [r7, #16]
 800aae0:	4313      	orrs	r3, r2
 800aae2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	699b      	ldr	r3, [r3, #24]
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	693a      	ldr	r2, [r7, #16]
 800aaec:	4313      	orrs	r3, r2
 800aaee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	693a      	ldr	r2, [r7, #16]
 800aaf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	68fa      	ldr	r2, [r7, #12]
 800aafa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	685a      	ldr	r2, [r3, #4]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	697a      	ldr	r2, [r7, #20]
 800ab08:	621a      	str	r2, [r3, #32]
}
 800ab0a:	bf00      	nop
 800ab0c:	371c      	adds	r7, #28
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr
 800ab16:	bf00      	nop
 800ab18:	40010000 	.word	0x40010000
 800ab1c:	40010400 	.word	0x40010400

0800ab20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b087      	sub	sp, #28
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6a1b      	ldr	r3, [r3, #32]
 800ab2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6a1b      	ldr	r3, [r3, #32]
 800ab3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	69db      	ldr	r3, [r3, #28]
 800ab46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f023 0303 	bic.w	r3, r3, #3
 800ab56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	68fa      	ldr	r2, [r7, #12]
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ab68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	689b      	ldr	r3, [r3, #8]
 800ab6e:	021b      	lsls	r3, r3, #8
 800ab70:	697a      	ldr	r2, [r7, #20]
 800ab72:	4313      	orrs	r3, r2
 800ab74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	4a21      	ldr	r2, [pc, #132]	; (800ac00 <TIM_OC3_SetConfig+0xe0>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d003      	beq.n	800ab86 <TIM_OC3_SetConfig+0x66>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	4a20      	ldr	r2, [pc, #128]	; (800ac04 <TIM_OC3_SetConfig+0xe4>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d10d      	bne.n	800aba2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	68db      	ldr	r3, [r3, #12]
 800ab92:	021b      	lsls	r3, r3, #8
 800ab94:	697a      	ldr	r2, [r7, #20]
 800ab96:	4313      	orrs	r3, r2
 800ab98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aba0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	4a16      	ldr	r2, [pc, #88]	; (800ac00 <TIM_OC3_SetConfig+0xe0>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d003      	beq.n	800abb2 <TIM_OC3_SetConfig+0x92>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4a15      	ldr	r2, [pc, #84]	; (800ac04 <TIM_OC3_SetConfig+0xe4>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d113      	bne.n	800abda <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800abb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800abc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	695b      	ldr	r3, [r3, #20]
 800abc6:	011b      	lsls	r3, r3, #4
 800abc8:	693a      	ldr	r2, [r7, #16]
 800abca:	4313      	orrs	r3, r2
 800abcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	699b      	ldr	r3, [r3, #24]
 800abd2:	011b      	lsls	r3, r3, #4
 800abd4:	693a      	ldr	r2, [r7, #16]
 800abd6:	4313      	orrs	r3, r2
 800abd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	693a      	ldr	r2, [r7, #16]
 800abde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	68fa      	ldr	r2, [r7, #12]
 800abe4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	685a      	ldr	r2, [r3, #4]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	697a      	ldr	r2, [r7, #20]
 800abf2:	621a      	str	r2, [r3, #32]
}
 800abf4:	bf00      	nop
 800abf6:	371c      	adds	r7, #28
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr
 800ac00:	40010000 	.word	0x40010000
 800ac04:	40010400 	.word	0x40010400

0800ac08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b087      	sub	sp, #28
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6a1b      	ldr	r3, [r3, #32]
 800ac16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6a1b      	ldr	r3, [r3, #32]
 800ac22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	69db      	ldr	r3, [r3, #28]
 800ac2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	021b      	lsls	r3, r3, #8
 800ac46:	68fa      	ldr	r2, [r7, #12]
 800ac48:	4313      	orrs	r3, r2
 800ac4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	689b      	ldr	r3, [r3, #8]
 800ac58:	031b      	lsls	r3, r3, #12
 800ac5a:	693a      	ldr	r2, [r7, #16]
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	4a12      	ldr	r2, [pc, #72]	; (800acac <TIM_OC4_SetConfig+0xa4>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d003      	beq.n	800ac70 <TIM_OC4_SetConfig+0x68>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	4a11      	ldr	r2, [pc, #68]	; (800acb0 <TIM_OC4_SetConfig+0xa8>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d109      	bne.n	800ac84 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	695b      	ldr	r3, [r3, #20]
 800ac7c:	019b      	lsls	r3, r3, #6
 800ac7e:	697a      	ldr	r2, [r7, #20]
 800ac80:	4313      	orrs	r3, r2
 800ac82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	697a      	ldr	r2, [r7, #20]
 800ac88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	68fa      	ldr	r2, [r7, #12]
 800ac8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	685a      	ldr	r2, [r3, #4]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	693a      	ldr	r2, [r7, #16]
 800ac9c:	621a      	str	r2, [r3, #32]
}
 800ac9e:	bf00      	nop
 800aca0:	371c      	adds	r7, #28
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr
 800acaa:	bf00      	nop
 800acac:	40010000 	.word	0x40010000
 800acb0:	40010400 	.word	0x40010400

0800acb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b087      	sub	sp, #28
 800acb8:	af00      	add	r7, sp, #0
 800acba:	60f8      	str	r0, [r7, #12]
 800acbc:	60b9      	str	r1, [r7, #8]
 800acbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	6a1b      	ldr	r3, [r3, #32]
 800acc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	6a1b      	ldr	r3, [r3, #32]
 800acca:	f023 0201 	bic.w	r2, r3, #1
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	699b      	ldr	r3, [r3, #24]
 800acd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800acde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	011b      	lsls	r3, r3, #4
 800ace4:	693a      	ldr	r2, [r7, #16]
 800ace6:	4313      	orrs	r3, r2
 800ace8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	f023 030a 	bic.w	r3, r3, #10
 800acf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800acf2:	697a      	ldr	r2, [r7, #20]
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	4313      	orrs	r3, r2
 800acf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	693a      	ldr	r2, [r7, #16]
 800acfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	697a      	ldr	r2, [r7, #20]
 800ad04:	621a      	str	r2, [r3, #32]
}
 800ad06:	bf00      	nop
 800ad08:	371c      	adds	r7, #28
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr

0800ad12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad12:	b480      	push	{r7}
 800ad14:	b087      	sub	sp, #28
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	60f8      	str	r0, [r7, #12]
 800ad1a:	60b9      	str	r1, [r7, #8]
 800ad1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	6a1b      	ldr	r3, [r3, #32]
 800ad22:	f023 0210 	bic.w	r2, r3, #16
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	699b      	ldr	r3, [r3, #24]
 800ad2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	6a1b      	ldr	r3, [r3, #32]
 800ad34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ad3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	031b      	lsls	r3, r3, #12
 800ad42:	697a      	ldr	r2, [r7, #20]
 800ad44:	4313      	orrs	r3, r2
 800ad46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ad4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	011b      	lsls	r3, r3, #4
 800ad54:	693a      	ldr	r2, [r7, #16]
 800ad56:	4313      	orrs	r3, r2
 800ad58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	697a      	ldr	r2, [r7, #20]
 800ad5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	693a      	ldr	r2, [r7, #16]
 800ad64:	621a      	str	r2, [r3, #32]
}
 800ad66:	bf00      	nop
 800ad68:	371c      	adds	r7, #28
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad70:	4770      	bx	lr

0800ad72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ad72:	b480      	push	{r7}
 800ad74:	b085      	sub	sp, #20
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	6078      	str	r0, [r7, #4]
 800ad7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	689b      	ldr	r3, [r3, #8]
 800ad80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ad8a:	683a      	ldr	r2, [r7, #0]
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	f043 0307 	orr.w	r3, r3, #7
 800ad94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	68fa      	ldr	r2, [r7, #12]
 800ad9a:	609a      	str	r2, [r3, #8]
}
 800ad9c:	bf00      	nop
 800ad9e:	3714      	adds	r7, #20
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b087      	sub	sp, #28
 800adac:	af00      	add	r7, sp, #0
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	607a      	str	r2, [r7, #4]
 800adb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	689b      	ldr	r3, [r3, #8]
 800adba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800adc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	021a      	lsls	r2, r3, #8
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	431a      	orrs	r2, r3
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	4313      	orrs	r3, r2
 800add0:	697a      	ldr	r2, [r7, #20]
 800add2:	4313      	orrs	r3, r2
 800add4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	697a      	ldr	r2, [r7, #20]
 800adda:	609a      	str	r2, [r3, #8]
}
 800addc:	bf00      	nop
 800adde:	371c      	adds	r7, #28
 800ade0:	46bd      	mov	sp, r7
 800ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade6:	4770      	bx	lr

0800ade8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ade8:	b480      	push	{r7}
 800adea:	b085      	sub	sp, #20
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	d101      	bne.n	800ae00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800adfc:	2302      	movs	r3, #2
 800adfe:	e05a      	b.n	800aeb6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2201      	movs	r2, #1
 800ae04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2202      	movs	r2, #2
 800ae0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	689b      	ldr	r3, [r3, #8]
 800ae1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	68fa      	ldr	r2, [r7, #12]
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	68fa      	ldr	r2, [r7, #12]
 800ae38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	4a21      	ldr	r2, [pc, #132]	; (800aec4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d022      	beq.n	800ae8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae4c:	d01d      	beq.n	800ae8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	4a1d      	ldr	r2, [pc, #116]	; (800aec8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d018      	beq.n	800ae8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4a1b      	ldr	r2, [pc, #108]	; (800aecc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d013      	beq.n	800ae8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	4a1a      	ldr	r2, [pc, #104]	; (800aed0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d00e      	beq.n	800ae8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4a18      	ldr	r2, [pc, #96]	; (800aed4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d009      	beq.n	800ae8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	4a17      	ldr	r2, [pc, #92]	; (800aed8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d004      	beq.n	800ae8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4a15      	ldr	r2, [pc, #84]	; (800aedc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d10c      	bne.n	800aea4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	68ba      	ldr	r2, [r7, #8]
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	68ba      	ldr	r2, [r7, #8]
 800aea2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2201      	movs	r2, #1
 800aea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aeb4:	2300      	movs	r3, #0
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3714      	adds	r7, #20
 800aeba:	46bd      	mov	sp, r7
 800aebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec0:	4770      	bx	lr
 800aec2:	bf00      	nop
 800aec4:	40010000 	.word	0x40010000
 800aec8:	40000400 	.word	0x40000400
 800aecc:	40000800 	.word	0x40000800
 800aed0:	40000c00 	.word	0x40000c00
 800aed4:	40010400 	.word	0x40010400
 800aed8:	40014000 	.word	0x40014000
 800aedc:	40001800 	.word	0x40001800

0800aee0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b085      	sub	sp, #20
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800aeea:	2300      	movs	r3, #0
 800aeec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d101      	bne.n	800aefc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800aef8:	2302      	movs	r3, #2
 800aefa:	e03d      	b.n	800af78 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2201      	movs	r2, #1
 800af00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	68db      	ldr	r3, [r3, #12]
 800af0e:	4313      	orrs	r3, r2
 800af10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	689b      	ldr	r3, [r3, #8]
 800af1c:	4313      	orrs	r3, r2
 800af1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	4313      	orrs	r3, r2
 800af2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4313      	orrs	r3, r2
 800af3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	691b      	ldr	r3, [r3, #16]
 800af46:	4313      	orrs	r3, r2
 800af48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	695b      	ldr	r3, [r3, #20]
 800af54:	4313      	orrs	r3, r2
 800af56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	69db      	ldr	r3, [r3, #28]
 800af62:	4313      	orrs	r3, r2
 800af64:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	68fa      	ldr	r2, [r7, #12]
 800af6c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2200      	movs	r2, #0
 800af72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af76:	2300      	movs	r3, #0
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3714      	adds	r7, #20
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr

0800af84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af8c:	bf00      	nop
 800af8e:	370c      	adds	r7, #12
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr

0800af98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af98:	b480      	push	{r7}
 800af9a:	b083      	sub	sp, #12
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800afa0:	bf00      	nop
 800afa2:	370c      	adds	r7, #12
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800afac:	b084      	sub	sp, #16
 800afae:	b480      	push	{r7}
 800afb0:	b085      	sub	sp, #20
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
 800afb6:	f107 001c 	add.w	r0, r7, #28
 800afba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800afbe:	2300      	movs	r3, #0
 800afc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800afc2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800afc4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800afc6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800afc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800afca:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800afcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800afce:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800afd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800afd2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800afd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800afd6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800afd8:	68fa      	ldr	r2, [r7, #12]
 800afda:	4313      	orrs	r3, r2
 800afdc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800afe6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800afea:	68fa      	ldr	r2, [r7, #12]
 800afec:	431a      	orrs	r2, r3
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800aff2:	2300      	movs	r3, #0
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3714      	adds	r7, #20
 800aff8:	46bd      	mov	sp, r7
 800affa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affe:	b004      	add	sp, #16
 800b000:	4770      	bx	lr

0800b002 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800b002:	b480      	push	{r7}
 800b004:	b083      	sub	sp, #12
 800b006:	af00      	add	r7, sp, #0
 800b008:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b010:	4618      	mov	r0, r3
 800b012:	370c      	adds	r7, #12
 800b014:	46bd      	mov	sp, r7
 800b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01a:	4770      	bx	lr

0800b01c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800b01c:	b480      	push	{r7}
 800b01e:	b083      	sub	sp, #12
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	681a      	ldr	r2, [r3, #0]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b030:	2300      	movs	r3, #0
}
 800b032:	4618      	mov	r0, r3
 800b034:	370c      	adds	r7, #12
 800b036:	46bd      	mov	sp, r7
 800b038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03c:	4770      	bx	lr

0800b03e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800b03e:	b480      	push	{r7}
 800b040:	b083      	sub	sp, #12
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2203      	movs	r2, #3
 800b04a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b04c:	2300      	movs	r3, #0
}
 800b04e:	4618      	mov	r0, r3
 800b050:	370c      	adds	r7, #12
 800b052:	46bd      	mov	sp, r7
 800b054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b058:	4770      	bx	lr

0800b05a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800b05a:	b480      	push	{r7}
 800b05c:	b083      	sub	sp, #12
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f003 0303 	and.w	r3, r3, #3
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	370c      	adds	r7, #12
 800b06e:	46bd      	mov	sp, r7
 800b070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b074:	4770      	bx	lr

0800b076 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800b076:	b480      	push	{r7}
 800b078:	b085      	sub	sp, #20
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	6078      	str	r0, [r7, #4]
 800b07e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b080:	2300      	movs	r3, #0
 800b082:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	681a      	ldr	r2, [r3, #0]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b094:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b09a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b0a0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b0a2:	68fa      	ldr	r2, [r7, #12]
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	68db      	ldr	r3, [r3, #12]
 800b0ac:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b0b0:	f023 030f 	bic.w	r3, r3, #15
 800b0b4:	68fa      	ldr	r2, [r7, #12]
 800b0b6:	431a      	orrs	r2, r3
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b0bc:	2300      	movs	r3, #0
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3714      	adds	r7, #20
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr

0800b0ca <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800b0ca:	b480      	push	{r7}
 800b0cc:	b083      	sub	sp, #12
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	691b      	ldr	r3, [r3, #16]
 800b0d6:	b2db      	uxtb	r3, r3
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	370c      	adds	r7, #12
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr

0800b0e4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b085      	sub	sp, #20
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	3314      	adds	r3, #20
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	4413      	add	r3, r2
 800b0f8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
}  
 800b0fe:	4618      	mov	r0, r3
 800b100:	3714      	adds	r7, #20
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr

0800b10a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800b10a:	b480      	push	{r7}
 800b10c:	b085      	sub	sp, #20
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
 800b112:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b114:	2300      	movs	r3, #0
 800b116:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	681a      	ldr	r2, [r3, #0]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	685a      	ldr	r2, [r3, #4]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b130:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b136:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b13c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b13e:	68fa      	ldr	r2, [r7, #12]
 800b140:	4313      	orrs	r3, r2
 800b142:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b148:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	431a      	orrs	r2, r3
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b154:	2300      	movs	r3, #0

}
 800b156:	4618      	mov	r0, r3
 800b158:	3714      	adds	r7, #20
 800b15a:	46bd      	mov	sp, r7
 800b15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b160:	4770      	bx	lr

0800b162 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b088      	sub	sp, #32
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
 800b16a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b170:	2310      	movs	r3, #16
 800b172:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b174:	2340      	movs	r3, #64	; 0x40
 800b176:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b178:	2300      	movs	r3, #0
 800b17a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b17c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b180:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b182:	f107 0308 	add.w	r3, r7, #8
 800b186:	4619      	mov	r1, r3
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f7ff ff74 	bl	800b076 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800b18e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b192:	2110      	movs	r1, #16
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f000 f9d7 	bl	800b548 <SDMMC_GetCmdResp1>
 800b19a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b19c:	69fb      	ldr	r3, [r7, #28]
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3720      	adds	r7, #32
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}

0800b1a6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b088      	sub	sp, #32
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
 800b1ae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b1b4:	2311      	movs	r3, #17
 800b1b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b1b8:	2340      	movs	r3, #64	; 0x40
 800b1ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b1c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b1c6:	f107 0308 	add.w	r3, r7, #8
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f7ff ff52 	bl	800b076 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b1d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1d6:	2111      	movs	r1, #17
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 f9b5 	bl	800b548 <SDMMC_GetCmdResp1>
 800b1de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1e0:	69fb      	ldr	r3, [r7, #28]
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3720      	adds	r7, #32
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}

0800b1ea <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b1ea:	b580      	push	{r7, lr}
 800b1ec:	b088      	sub	sp, #32
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
 800b1f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b1f8:	2312      	movs	r3, #18
 800b1fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b1fc:	2340      	movs	r3, #64	; 0x40
 800b1fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b200:	2300      	movs	r3, #0
 800b202:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b208:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b20a:	f107 0308 	add.w	r3, r7, #8
 800b20e:	4619      	mov	r1, r3
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f7ff ff30 	bl	800b076 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b216:	f241 3288 	movw	r2, #5000	; 0x1388
 800b21a:	2112      	movs	r1, #18
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f000 f993 	bl	800b548 <SDMMC_GetCmdResp1>
 800b222:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b224:	69fb      	ldr	r3, [r7, #28]
}
 800b226:	4618      	mov	r0, r3
 800b228:	3720      	adds	r7, #32
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}

0800b22e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b22e:	b580      	push	{r7, lr}
 800b230:	b088      	sub	sp, #32
 800b232:	af00      	add	r7, sp, #0
 800b234:	6078      	str	r0, [r7, #4]
 800b236:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b23c:	2318      	movs	r3, #24
 800b23e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b240:	2340      	movs	r3, #64	; 0x40
 800b242:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b244:	2300      	movs	r3, #0
 800b246:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b248:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b24c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b24e:	f107 0308 	add.w	r3, r7, #8
 800b252:	4619      	mov	r1, r3
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f7ff ff0e 	bl	800b076 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b25a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b25e:	2118      	movs	r1, #24
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f000 f971 	bl	800b548 <SDMMC_GetCmdResp1>
 800b266:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b268:	69fb      	ldr	r3, [r7, #28]
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3720      	adds	r7, #32
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}

0800b272 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b272:	b580      	push	{r7, lr}
 800b274:	b088      	sub	sp, #32
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]
 800b27a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b280:	2319      	movs	r3, #25
 800b282:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b284:	2340      	movs	r3, #64	; 0x40
 800b286:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b288:	2300      	movs	r3, #0
 800b28a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b28c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b290:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b292:	f107 0308 	add.w	r3, r7, #8
 800b296:	4619      	mov	r1, r3
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f7ff feec 	bl	800b076 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b29e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2a2:	2119      	movs	r1, #25
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 f94f 	bl	800b548 <SDMMC_GetCmdResp1>
 800b2aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2ac:	69fb      	ldr	r3, [r7, #28]
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3720      	adds	r7, #32
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
	...

0800b2b8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b088      	sub	sp, #32
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b2c4:	230c      	movs	r3, #12
 800b2c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b2c8:	2340      	movs	r3, #64	; 0x40
 800b2ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b2d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b2d6:	f107 0308 	add.w	r3, r7, #8
 800b2da:	4619      	mov	r1, r3
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f7ff feca 	bl	800b076 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800b2e2:	4a05      	ldr	r2, [pc, #20]	; (800b2f8 <SDMMC_CmdStopTransfer+0x40>)
 800b2e4:	210c      	movs	r1, #12
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f000 f92e 	bl	800b548 <SDMMC_GetCmdResp1>
 800b2ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2ee:	69fb      	ldr	r3, [r7, #28]
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3720      	adds	r7, #32
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}
 800b2f8:	05f5e100 	.word	0x05f5e100

0800b2fc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b08a      	sub	sp, #40	; 0x28
 800b300:	af00      	add	r7, sp, #0
 800b302:	60f8      	str	r0, [r7, #12]
 800b304:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b30c:	2307      	movs	r3, #7
 800b30e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b310:	2340      	movs	r3, #64	; 0x40
 800b312:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b314:	2300      	movs	r3, #0
 800b316:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b31c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b31e:	f107 0310 	add.w	r3, r7, #16
 800b322:	4619      	mov	r1, r3
 800b324:	68f8      	ldr	r0, [r7, #12]
 800b326:	f7ff fea6 	bl	800b076 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800b32a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b32e:	2107      	movs	r1, #7
 800b330:	68f8      	ldr	r0, [r7, #12]
 800b332:	f000 f909 	bl	800b548 <SDMMC_GetCmdResp1>
 800b336:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3728      	adds	r7, #40	; 0x28
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}

0800b342 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800b342:	b580      	push	{r7, lr}
 800b344:	b088      	sub	sp, #32
 800b346:	af00      	add	r7, sp, #0
 800b348:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b34a:	2300      	movs	r3, #0
 800b34c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b34e:	2300      	movs	r3, #0
 800b350:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800b352:	2300      	movs	r3, #0
 800b354:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b356:	2300      	movs	r3, #0
 800b358:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b35a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b35e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b360:	f107 0308 	add.w	r3, r7, #8
 800b364:	4619      	mov	r1, r3
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f7ff fe85 	bl	800b076 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 fb23 	bl	800b9b8 <SDMMC_GetCmdError>
 800b372:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b374:	69fb      	ldr	r3, [r7, #28]
}
 800b376:	4618      	mov	r0, r3
 800b378:	3720      	adds	r7, #32
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}

0800b37e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800b37e:	b580      	push	{r7, lr}
 800b380:	b088      	sub	sp, #32
 800b382:	af00      	add	r7, sp, #0
 800b384:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b386:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b38a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b38c:	2308      	movs	r3, #8
 800b38e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b390:	2340      	movs	r3, #64	; 0x40
 800b392:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b394:	2300      	movs	r3, #0
 800b396:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b398:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b39c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b39e:	f107 0308 	add.w	r3, r7, #8
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f7ff fe66 	bl	800b076 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 fab6 	bl	800b91c <SDMMC_GetCmdResp7>
 800b3b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3b2:	69fb      	ldr	r3, [r7, #28]
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3720      	adds	r7, #32
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b088      	sub	sp, #32
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b3ca:	2337      	movs	r3, #55	; 0x37
 800b3cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b3ce:	2340      	movs	r3, #64	; 0x40
 800b3d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b3d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b3dc:	f107 0308 	add.w	r3, r7, #8
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f7ff fe47 	bl	800b076 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800b3e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3ec:	2137      	movs	r1, #55	; 0x37
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 f8aa 	bl	800b548 <SDMMC_GetCmdResp1>
 800b3f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3f6:	69fb      	ldr	r3, [r7, #28]
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3720      	adds	r7, #32
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b088      	sub	sp, #32
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b410:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b414:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b416:	2329      	movs	r3, #41	; 0x29
 800b418:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b41a:	2340      	movs	r3, #64	; 0x40
 800b41c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b41e:	2300      	movs	r3, #0
 800b420:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b422:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b426:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b428:	f107 0308 	add.w	r3, r7, #8
 800b42c:	4619      	mov	r1, r3
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f7ff fe21 	bl	800b076 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f000 f9bd 	bl	800b7b4 <SDMMC_GetCmdResp3>
 800b43a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b43c:	69fb      	ldr	r3, [r7, #28]
}
 800b43e:	4618      	mov	r0, r3
 800b440:	3720      	adds	r7, #32
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}

0800b446 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800b446:	b580      	push	{r7, lr}
 800b448:	b088      	sub	sp, #32
 800b44a:	af00      	add	r7, sp, #0
 800b44c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b44e:	2300      	movs	r3, #0
 800b450:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b452:	2302      	movs	r3, #2
 800b454:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b456:	23c0      	movs	r3, #192	; 0xc0
 800b458:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b45a:	2300      	movs	r3, #0
 800b45c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b45e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b462:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b464:	f107 0308 	add.w	r3, r7, #8
 800b468:	4619      	mov	r1, r3
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f7ff fe03 	bl	800b076 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f000 f957 	bl	800b724 <SDMMC_GetCmdResp2>
 800b476:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b478:	69fb      	ldr	r3, [r7, #28]
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3720      	adds	r7, #32
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}

0800b482 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b482:	b580      	push	{r7, lr}
 800b484:	b088      	sub	sp, #32
 800b486:	af00      	add	r7, sp, #0
 800b488:	6078      	str	r0, [r7, #4]
 800b48a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b490:	2309      	movs	r3, #9
 800b492:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b494:	23c0      	movs	r3, #192	; 0xc0
 800b496:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b498:	2300      	movs	r3, #0
 800b49a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b49c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b4a2:	f107 0308 	add.w	r3, r7, #8
 800b4a6:	4619      	mov	r1, r3
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f7ff fde4 	bl	800b076 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f000 f938 	bl	800b724 <SDMMC_GetCmdResp2>
 800b4b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4b6:	69fb      	ldr	r3, [r7, #28]
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3720      	adds	r7, #32
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}

0800b4c0 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b088      	sub	sp, #32
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b4ce:	2303      	movs	r3, #3
 800b4d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b4d2:	2340      	movs	r3, #64	; 0x40
 800b4d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b4da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b4e0:	f107 0308 	add.w	r3, r7, #8
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f7ff fdc5 	bl	800b076 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b4ec:	683a      	ldr	r2, [r7, #0]
 800b4ee:	2103      	movs	r1, #3
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f000 f99d 	bl	800b830 <SDMMC_GetCmdResp6>
 800b4f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4f8:	69fb      	ldr	r3, [r7, #28]
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3720      	adds	r7, #32
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}

0800b502 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b502:	b580      	push	{r7, lr}
 800b504:	b088      	sub	sp, #32
 800b506:	af00      	add	r7, sp, #0
 800b508:	6078      	str	r0, [r7, #4]
 800b50a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b510:	230d      	movs	r3, #13
 800b512:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b514:	2340      	movs	r3, #64	; 0x40
 800b516:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b518:	2300      	movs	r3, #0
 800b51a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b51c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b520:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b522:	f107 0308 	add.w	r3, r7, #8
 800b526:	4619      	mov	r1, r3
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f7ff fda4 	bl	800b076 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800b52e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b532:	210d      	movs	r1, #13
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f000 f807 	bl	800b548 <SDMMC_GetCmdResp1>
 800b53a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b53c:	69fb      	ldr	r3, [r7, #28]
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3720      	adds	r7, #32
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}
	...

0800b548 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b088      	sub	sp, #32
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	60f8      	str	r0, [r7, #12]
 800b550:	460b      	mov	r3, r1
 800b552:	607a      	str	r2, [r7, #4]
 800b554:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b556:	4b70      	ldr	r3, [pc, #448]	; (800b718 <SDMMC_GetCmdResp1+0x1d0>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	4a70      	ldr	r2, [pc, #448]	; (800b71c <SDMMC_GetCmdResp1+0x1d4>)
 800b55c:	fba2 2303 	umull	r2, r3, r2, r3
 800b560:	0a5a      	lsrs	r2, r3, #9
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	fb02 f303 	mul.w	r3, r2, r3
 800b568:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b56a:	69fb      	ldr	r3, [r7, #28]
 800b56c:	1e5a      	subs	r2, r3, #1
 800b56e:	61fa      	str	r2, [r7, #28]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d102      	bne.n	800b57a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b574:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b578:	e0c9      	b.n	800b70e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b57e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b580:	69bb      	ldr	r3, [r7, #24]
 800b582:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b586:	2b00      	cmp	r3, #0
 800b588:	d0ef      	beq.n	800b56a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b58a:	69bb      	ldr	r3, [r7, #24]
 800b58c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b590:	2b00      	cmp	r3, #0
 800b592:	d1ea      	bne.n	800b56a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b598:	f003 0304 	and.w	r3, r3, #4
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d004      	beq.n	800b5aa <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	2204      	movs	r2, #4
 800b5a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b5a6:	2304      	movs	r3, #4
 800b5a8:	e0b1      	b.n	800b70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5ae:	f003 0301 	and.w	r3, r3, #1
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d004      	beq.n	800b5c0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2201      	movs	r2, #1
 800b5ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b5bc:	2301      	movs	r3, #1
 800b5be:	e0a6      	b.n	800b70e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	22c5      	movs	r2, #197	; 0xc5
 800b5c4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b5c6:	68f8      	ldr	r0, [r7, #12]
 800b5c8:	f7ff fd7f 	bl	800b0ca <SDIO_GetCommandResponse>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	7afb      	ldrb	r3, [r7, #11]
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d001      	beq.n	800b5da <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	e099      	b.n	800b70e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b5da:	2100      	movs	r1, #0
 800b5dc:	68f8      	ldr	r0, [r7, #12]
 800b5de:	f7ff fd81 	bl	800b0e4 <SDIO_GetResponse>
 800b5e2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b5e4:	697a      	ldr	r2, [r7, #20]
 800b5e6:	4b4e      	ldr	r3, [pc, #312]	; (800b720 <SDMMC_GetCmdResp1+0x1d8>)
 800b5e8:	4013      	ands	r3, r2
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d101      	bne.n	800b5f2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	e08d      	b.n	800b70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	da02      	bge.n	800b5fe <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b5f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b5fc:	e087      	b.n	800b70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b604:	2b00      	cmp	r3, #0
 800b606:	d001      	beq.n	800b60c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b608:	2340      	movs	r3, #64	; 0x40
 800b60a:	e080      	b.n	800b70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b612:	2b00      	cmp	r3, #0
 800b614:	d001      	beq.n	800b61a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b616:	2380      	movs	r3, #128	; 0x80
 800b618:	e079      	b.n	800b70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b620:	2b00      	cmp	r3, #0
 800b622:	d002      	beq.n	800b62a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b624:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b628:	e071      	b.n	800b70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b630:	2b00      	cmp	r3, #0
 800b632:	d002      	beq.n	800b63a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b634:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b638:	e069      	b.n	800b70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b640:	2b00      	cmp	r3, #0
 800b642:	d002      	beq.n	800b64a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b648:	e061      	b.n	800b70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b650:	2b00      	cmp	r3, #0
 800b652:	d002      	beq.n	800b65a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b654:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b658:	e059      	b.n	800b70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b660:	2b00      	cmp	r3, #0
 800b662:	d002      	beq.n	800b66a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b668:	e051      	b.n	800b70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b670:	2b00      	cmp	r3, #0
 800b672:	d002      	beq.n	800b67a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b674:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b678:	e049      	b.n	800b70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b680:	2b00      	cmp	r3, #0
 800b682:	d002      	beq.n	800b68a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b684:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b688:	e041      	b.n	800b70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b690:	2b00      	cmp	r3, #0
 800b692:	d002      	beq.n	800b69a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b694:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b698:	e039      	b.n	800b70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d002      	beq.n	800b6aa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b6a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b6a8:	e031      	b.n	800b70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d002      	beq.n	800b6ba <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b6b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b6b8:	e029      	b.n	800b70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d002      	beq.n	800b6ca <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b6c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b6c8:	e021      	b.n	800b70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d002      	beq.n	800b6da <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b6d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b6d8:	e019      	b.n	800b70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d002      	beq.n	800b6ea <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b6e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b6e8:	e011      	b.n	800b70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d002      	beq.n	800b6fa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b6f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b6f8:	e009      	b.n	800b70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	f003 0308 	and.w	r3, r3, #8
 800b700:	2b00      	cmp	r3, #0
 800b702:	d002      	beq.n	800b70a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b704:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b708:	e001      	b.n	800b70e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b70a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3720      	adds	r7, #32
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}
 800b716:	bf00      	nop
 800b718:	20000008 	.word	0x20000008
 800b71c:	10624dd3 	.word	0x10624dd3
 800b720:	fdffe008 	.word	0xfdffe008

0800b724 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b724:	b480      	push	{r7}
 800b726:	b085      	sub	sp, #20
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b72c:	4b1f      	ldr	r3, [pc, #124]	; (800b7ac <SDMMC_GetCmdResp2+0x88>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4a1f      	ldr	r2, [pc, #124]	; (800b7b0 <SDMMC_GetCmdResp2+0x8c>)
 800b732:	fba2 2303 	umull	r2, r3, r2, r3
 800b736:	0a5b      	lsrs	r3, r3, #9
 800b738:	f241 3288 	movw	r2, #5000	; 0x1388
 800b73c:	fb02 f303 	mul.w	r3, r2, r3
 800b740:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	1e5a      	subs	r2, r3, #1
 800b746:	60fa      	str	r2, [r7, #12]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d102      	bne.n	800b752 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b74c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b750:	e026      	b.n	800b7a0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b756:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d0ef      	beq.n	800b742 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d1ea      	bne.n	800b742 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b770:	f003 0304 	and.w	r3, r3, #4
 800b774:	2b00      	cmp	r3, #0
 800b776:	d004      	beq.n	800b782 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2204      	movs	r2, #4
 800b77c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b77e:	2304      	movs	r3, #4
 800b780:	e00e      	b.n	800b7a0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b786:	f003 0301 	and.w	r3, r3, #1
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d004      	beq.n	800b798 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2201      	movs	r2, #1
 800b792:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b794:	2301      	movs	r3, #1
 800b796:	e003      	b.n	800b7a0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	22c5      	movs	r2, #197	; 0xc5
 800b79c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b79e:	2300      	movs	r3, #0
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3714      	adds	r7, #20
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7aa:	4770      	bx	lr
 800b7ac:	20000008 	.word	0x20000008
 800b7b0:	10624dd3 	.word	0x10624dd3

0800b7b4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b085      	sub	sp, #20
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b7bc:	4b1a      	ldr	r3, [pc, #104]	; (800b828 <SDMMC_GetCmdResp3+0x74>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	4a1a      	ldr	r2, [pc, #104]	; (800b82c <SDMMC_GetCmdResp3+0x78>)
 800b7c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b7c6:	0a5b      	lsrs	r3, r3, #9
 800b7c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7cc:	fb02 f303 	mul.w	r3, r2, r3
 800b7d0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	1e5a      	subs	r2, r3, #1
 800b7d6:	60fa      	str	r2, [r7, #12]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d102      	bne.n	800b7e2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b7dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b7e0:	e01b      	b.n	800b81a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7e6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d0ef      	beq.n	800b7d2 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d1ea      	bne.n	800b7d2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b800:	f003 0304 	and.w	r3, r3, #4
 800b804:	2b00      	cmp	r3, #0
 800b806:	d004      	beq.n	800b812 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2204      	movs	r2, #4
 800b80c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b80e:	2304      	movs	r3, #4
 800b810:	e003      	b.n	800b81a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	22c5      	movs	r2, #197	; 0xc5
 800b816:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b818:	2300      	movs	r3, #0
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3714      	adds	r7, #20
 800b81e:	46bd      	mov	sp, r7
 800b820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b824:	4770      	bx	lr
 800b826:	bf00      	nop
 800b828:	20000008 	.word	0x20000008
 800b82c:	10624dd3 	.word	0x10624dd3

0800b830 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b088      	sub	sp, #32
 800b834:	af00      	add	r7, sp, #0
 800b836:	60f8      	str	r0, [r7, #12]
 800b838:	460b      	mov	r3, r1
 800b83a:	607a      	str	r2, [r7, #4]
 800b83c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b83e:	4b35      	ldr	r3, [pc, #212]	; (800b914 <SDMMC_GetCmdResp6+0xe4>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	4a35      	ldr	r2, [pc, #212]	; (800b918 <SDMMC_GetCmdResp6+0xe8>)
 800b844:	fba2 2303 	umull	r2, r3, r2, r3
 800b848:	0a5b      	lsrs	r3, r3, #9
 800b84a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b84e:	fb02 f303 	mul.w	r3, r2, r3
 800b852:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b854:	69fb      	ldr	r3, [r7, #28]
 800b856:	1e5a      	subs	r2, r3, #1
 800b858:	61fa      	str	r2, [r7, #28]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d102      	bne.n	800b864 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b85e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b862:	e052      	b.n	800b90a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b868:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b86a:	69bb      	ldr	r3, [r7, #24]
 800b86c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b870:	2b00      	cmp	r3, #0
 800b872:	d0ef      	beq.n	800b854 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b874:	69bb      	ldr	r3, [r7, #24]
 800b876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d1ea      	bne.n	800b854 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b882:	f003 0304 	and.w	r3, r3, #4
 800b886:	2b00      	cmp	r3, #0
 800b888:	d004      	beq.n	800b894 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2204      	movs	r2, #4
 800b88e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b890:	2304      	movs	r3, #4
 800b892:	e03a      	b.n	800b90a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b898:	f003 0301 	and.w	r3, r3, #1
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d004      	beq.n	800b8aa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b8a6:	2301      	movs	r3, #1
 800b8a8:	e02f      	b.n	800b90a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b8aa:	68f8      	ldr	r0, [r7, #12]
 800b8ac:	f7ff fc0d 	bl	800b0ca <SDIO_GetCommandResponse>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	7afb      	ldrb	r3, [r7, #11]
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d001      	beq.n	800b8be <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	e025      	b.n	800b90a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	22c5      	movs	r2, #197	; 0xc5
 800b8c2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b8c4:	2100      	movs	r1, #0
 800b8c6:	68f8      	ldr	r0, [r7, #12]
 800b8c8:	f7ff fc0c 	bl	800b0e4 <SDIO_GetResponse>
 800b8cc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d106      	bne.n	800b8e6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	0c1b      	lsrs	r3, r3, #16
 800b8dc:	b29a      	uxth	r2, r3
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	e011      	b.n	800b90a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d002      	beq.n	800b8f6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b8f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b8f4:	e009      	b.n	800b90a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d002      	beq.n	800b906 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b904:	e001      	b.n	800b90a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b906:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3720      	adds	r7, #32
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
 800b912:	bf00      	nop
 800b914:	20000008 	.word	0x20000008
 800b918:	10624dd3 	.word	0x10624dd3

0800b91c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b085      	sub	sp, #20
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b924:	4b22      	ldr	r3, [pc, #136]	; (800b9b0 <SDMMC_GetCmdResp7+0x94>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	4a22      	ldr	r2, [pc, #136]	; (800b9b4 <SDMMC_GetCmdResp7+0x98>)
 800b92a:	fba2 2303 	umull	r2, r3, r2, r3
 800b92e:	0a5b      	lsrs	r3, r3, #9
 800b930:	f241 3288 	movw	r2, #5000	; 0x1388
 800b934:	fb02 f303 	mul.w	r3, r2, r3
 800b938:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	1e5a      	subs	r2, r3, #1
 800b93e:	60fa      	str	r2, [r7, #12]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d102      	bne.n	800b94a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b944:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b948:	e02c      	b.n	800b9a4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b94e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b956:	2b00      	cmp	r3, #0
 800b958:	d0ef      	beq.n	800b93a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b960:	2b00      	cmp	r3, #0
 800b962:	d1ea      	bne.n	800b93a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b968:	f003 0304 	and.w	r3, r3, #4
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d004      	beq.n	800b97a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2204      	movs	r2, #4
 800b974:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b976:	2304      	movs	r3, #4
 800b978:	e014      	b.n	800b9a4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b97e:	f003 0301 	and.w	r3, r3, #1
 800b982:	2b00      	cmp	r3, #0
 800b984:	d004      	beq.n	800b990 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2201      	movs	r2, #1
 800b98a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b98c:	2301      	movs	r3, #1
 800b98e:	e009      	b.n	800b9a4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d002      	beq.n	800b9a2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2240      	movs	r2, #64	; 0x40
 800b9a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b9a2:	2300      	movs	r3, #0
  
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3714      	adds	r7, #20
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr
 800b9b0:	20000008 	.word	0x20000008
 800b9b4:	10624dd3 	.word	0x10624dd3

0800b9b8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b085      	sub	sp, #20
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b9c0:	4b11      	ldr	r3, [pc, #68]	; (800ba08 <SDMMC_GetCmdError+0x50>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	4a11      	ldr	r2, [pc, #68]	; (800ba0c <SDMMC_GetCmdError+0x54>)
 800b9c6:	fba2 2303 	umull	r2, r3, r2, r3
 800b9ca:	0a5b      	lsrs	r3, r3, #9
 800b9cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9d0:	fb02 f303 	mul.w	r3, r2, r3
 800b9d4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	1e5a      	subs	r2, r3, #1
 800b9da:	60fa      	str	r2, [r7, #12]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d102      	bne.n	800b9e6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b9e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b9e4:	e009      	b.n	800b9fa <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d0f1      	beq.n	800b9d6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	22c5      	movs	r2, #197	; 0xc5
 800b9f6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b9f8:	2300      	movs	r3, #0
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3714      	adds	r7, #20
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba04:	4770      	bx	lr
 800ba06:	bf00      	nop
 800ba08:	20000008 	.word	0x20000008
 800ba0c:	10624dd3 	.word	0x10624dd3

0800ba10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ba10:	b084      	sub	sp, #16
 800ba12:	b580      	push	{r7, lr}
 800ba14:	b084      	sub	sp, #16
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	6078      	str	r0, [r7, #4]
 800ba1a:	f107 001c 	add.w	r0, r7, #28
 800ba1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ba22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba24:	2b01      	cmp	r3, #1
 800ba26:	d122      	bne.n	800ba6e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	68db      	ldr	r3, [r3, #12]
 800ba38:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800ba3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba40:	687a      	ldr	r2, [r7, #4]
 800ba42:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	68db      	ldr	r3, [r3, #12]
 800ba48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ba50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba52:	2b01      	cmp	r3, #1
 800ba54:	d105      	bne.n	800ba62 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	68db      	ldr	r3, [r3, #12]
 800ba5a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f001 fbe8 	bl	800d238 <USB_CoreReset>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	73fb      	strb	r3, [r7, #15]
 800ba6c:	e01a      	b.n	800baa4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	68db      	ldr	r3, [r3, #12]
 800ba72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f001 fbdc 	bl	800d238 <USB_CoreReset>
 800ba80:	4603      	mov	r3, r0
 800ba82:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ba84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d106      	bne.n	800ba98 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba8e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	639a      	str	r2, [r3, #56]	; 0x38
 800ba96:	e005      	b.n	800baa4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800baa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa6:	2b01      	cmp	r3, #1
 800baa8:	d10b      	bne.n	800bac2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	689b      	ldr	r3, [r3, #8]
 800baae:	f043 0206 	orr.w	r2, r3, #6
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	689b      	ldr	r3, [r3, #8]
 800baba:	f043 0220 	orr.w	r2, r3, #32
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bac2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3710      	adds	r7, #16
 800bac8:	46bd      	mov	sp, r7
 800baca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bace:	b004      	add	sp, #16
 800bad0:	4770      	bx	lr
	...

0800bad4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b087      	sub	sp, #28
 800bad8:	af00      	add	r7, sp, #0
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	60b9      	str	r1, [r7, #8]
 800bade:	4613      	mov	r3, r2
 800bae0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800bae2:	79fb      	ldrb	r3, [r7, #7]
 800bae4:	2b02      	cmp	r3, #2
 800bae6:	d165      	bne.n	800bbb4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	4a41      	ldr	r2, [pc, #260]	; (800bbf0 <USB_SetTurnaroundTime+0x11c>)
 800baec:	4293      	cmp	r3, r2
 800baee:	d906      	bls.n	800bafe <USB_SetTurnaroundTime+0x2a>
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	4a40      	ldr	r2, [pc, #256]	; (800bbf4 <USB_SetTurnaroundTime+0x120>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d202      	bcs.n	800bafe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800baf8:	230f      	movs	r3, #15
 800bafa:	617b      	str	r3, [r7, #20]
 800bafc:	e062      	b.n	800bbc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	4a3c      	ldr	r2, [pc, #240]	; (800bbf4 <USB_SetTurnaroundTime+0x120>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d306      	bcc.n	800bb14 <USB_SetTurnaroundTime+0x40>
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	4a3b      	ldr	r2, [pc, #236]	; (800bbf8 <USB_SetTurnaroundTime+0x124>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d202      	bcs.n	800bb14 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800bb0e:	230e      	movs	r3, #14
 800bb10:	617b      	str	r3, [r7, #20]
 800bb12:	e057      	b.n	800bbc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	4a38      	ldr	r2, [pc, #224]	; (800bbf8 <USB_SetTurnaroundTime+0x124>)
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	d306      	bcc.n	800bb2a <USB_SetTurnaroundTime+0x56>
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	4a37      	ldr	r2, [pc, #220]	; (800bbfc <USB_SetTurnaroundTime+0x128>)
 800bb20:	4293      	cmp	r3, r2
 800bb22:	d202      	bcs.n	800bb2a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800bb24:	230d      	movs	r3, #13
 800bb26:	617b      	str	r3, [r7, #20]
 800bb28:	e04c      	b.n	800bbc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	4a33      	ldr	r2, [pc, #204]	; (800bbfc <USB_SetTurnaroundTime+0x128>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d306      	bcc.n	800bb40 <USB_SetTurnaroundTime+0x6c>
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	4a32      	ldr	r2, [pc, #200]	; (800bc00 <USB_SetTurnaroundTime+0x12c>)
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d802      	bhi.n	800bb40 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800bb3a:	230c      	movs	r3, #12
 800bb3c:	617b      	str	r3, [r7, #20]
 800bb3e:	e041      	b.n	800bbc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	4a2f      	ldr	r2, [pc, #188]	; (800bc00 <USB_SetTurnaroundTime+0x12c>)
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d906      	bls.n	800bb56 <USB_SetTurnaroundTime+0x82>
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	4a2e      	ldr	r2, [pc, #184]	; (800bc04 <USB_SetTurnaroundTime+0x130>)
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d802      	bhi.n	800bb56 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800bb50:	230b      	movs	r3, #11
 800bb52:	617b      	str	r3, [r7, #20]
 800bb54:	e036      	b.n	800bbc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	4a2a      	ldr	r2, [pc, #168]	; (800bc04 <USB_SetTurnaroundTime+0x130>)
 800bb5a:	4293      	cmp	r3, r2
 800bb5c:	d906      	bls.n	800bb6c <USB_SetTurnaroundTime+0x98>
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	4a29      	ldr	r2, [pc, #164]	; (800bc08 <USB_SetTurnaroundTime+0x134>)
 800bb62:	4293      	cmp	r3, r2
 800bb64:	d802      	bhi.n	800bb6c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800bb66:	230a      	movs	r3, #10
 800bb68:	617b      	str	r3, [r7, #20]
 800bb6a:	e02b      	b.n	800bbc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	4a26      	ldr	r2, [pc, #152]	; (800bc08 <USB_SetTurnaroundTime+0x134>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d906      	bls.n	800bb82 <USB_SetTurnaroundTime+0xae>
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	4a25      	ldr	r2, [pc, #148]	; (800bc0c <USB_SetTurnaroundTime+0x138>)
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d202      	bcs.n	800bb82 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800bb7c:	2309      	movs	r3, #9
 800bb7e:	617b      	str	r3, [r7, #20]
 800bb80:	e020      	b.n	800bbc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	4a21      	ldr	r2, [pc, #132]	; (800bc0c <USB_SetTurnaroundTime+0x138>)
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d306      	bcc.n	800bb98 <USB_SetTurnaroundTime+0xc4>
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	4a20      	ldr	r2, [pc, #128]	; (800bc10 <USB_SetTurnaroundTime+0x13c>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d802      	bhi.n	800bb98 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800bb92:	2308      	movs	r3, #8
 800bb94:	617b      	str	r3, [r7, #20]
 800bb96:	e015      	b.n	800bbc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	4a1d      	ldr	r2, [pc, #116]	; (800bc10 <USB_SetTurnaroundTime+0x13c>)
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d906      	bls.n	800bbae <USB_SetTurnaroundTime+0xda>
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	4a1c      	ldr	r2, [pc, #112]	; (800bc14 <USB_SetTurnaroundTime+0x140>)
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d202      	bcs.n	800bbae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800bba8:	2307      	movs	r3, #7
 800bbaa:	617b      	str	r3, [r7, #20]
 800bbac:	e00a      	b.n	800bbc4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800bbae:	2306      	movs	r3, #6
 800bbb0:	617b      	str	r3, [r7, #20]
 800bbb2:	e007      	b.n	800bbc4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800bbb4:	79fb      	ldrb	r3, [r7, #7]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d102      	bne.n	800bbc0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800bbba:	2309      	movs	r3, #9
 800bbbc:	617b      	str	r3, [r7, #20]
 800bbbe:	e001      	b.n	800bbc4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800bbc0:	2309      	movs	r3, #9
 800bbc2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	68db      	ldr	r3, [r3, #12]
 800bbc8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	68da      	ldr	r2, [r3, #12]
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	029b      	lsls	r3, r3, #10
 800bbd8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800bbdc:	431a      	orrs	r2, r3
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bbe2:	2300      	movs	r3, #0
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	371c      	adds	r7, #28
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr
 800bbf0:	00d8acbf 	.word	0x00d8acbf
 800bbf4:	00e4e1c0 	.word	0x00e4e1c0
 800bbf8:	00f42400 	.word	0x00f42400
 800bbfc:	01067380 	.word	0x01067380
 800bc00:	011a499f 	.word	0x011a499f
 800bc04:	01312cff 	.word	0x01312cff
 800bc08:	014ca43f 	.word	0x014ca43f
 800bc0c:	016e3600 	.word	0x016e3600
 800bc10:	01a6ab1f 	.word	0x01a6ab1f
 800bc14:	01e84800 	.word	0x01e84800

0800bc18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b083      	sub	sp, #12
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	689b      	ldr	r3, [r3, #8]
 800bc24:	f043 0201 	orr.w	r2, r3, #1
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bc2c:	2300      	movs	r3, #0
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	370c      	adds	r7, #12
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr

0800bc3a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bc3a:	b480      	push	{r7}
 800bc3c:	b083      	sub	sp, #12
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	689b      	ldr	r3, [r3, #8]
 800bc46:	f023 0201 	bic.w	r2, r3, #1
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bc4e:	2300      	movs	r3, #0
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	370c      	adds	r7, #12
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr

0800bc5c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b084      	sub	sp, #16
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	460b      	mov	r3, r1
 800bc66:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	68db      	ldr	r3, [r3, #12]
 800bc70:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bc78:	78fb      	ldrb	r3, [r7, #3]
 800bc7a:	2b01      	cmp	r3, #1
 800bc7c:	d115      	bne.n	800bcaa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	68db      	ldr	r3, [r3, #12]
 800bc82:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bc8a:	2001      	movs	r0, #1
 800bc8c:	f7f8 f81a 	bl	8003cc4 <HAL_Delay>
      ms++;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	3301      	adds	r3, #1
 800bc94:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f001 fa3f 	bl	800d11a <USB_GetMode>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	2b01      	cmp	r3, #1
 800bca0:	d01e      	beq.n	800bce0 <USB_SetCurrentMode+0x84>
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2b31      	cmp	r3, #49	; 0x31
 800bca6:	d9f0      	bls.n	800bc8a <USB_SetCurrentMode+0x2e>
 800bca8:	e01a      	b.n	800bce0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bcaa:	78fb      	ldrb	r3, [r7, #3]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d115      	bne.n	800bcdc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	68db      	ldr	r3, [r3, #12]
 800bcb4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bcbc:	2001      	movs	r0, #1
 800bcbe:	f7f8 f801 	bl	8003cc4 <HAL_Delay>
      ms++;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	3301      	adds	r3, #1
 800bcc6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f001 fa26 	bl	800d11a <USB_GetMode>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d005      	beq.n	800bce0 <USB_SetCurrentMode+0x84>
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	2b31      	cmp	r3, #49	; 0x31
 800bcd8:	d9f0      	bls.n	800bcbc <USB_SetCurrentMode+0x60>
 800bcda:	e001      	b.n	800bce0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bcdc:	2301      	movs	r3, #1
 800bcde:	e005      	b.n	800bcec <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2b32      	cmp	r3, #50	; 0x32
 800bce4:	d101      	bne.n	800bcea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bce6:	2301      	movs	r3, #1
 800bce8:	e000      	b.n	800bcec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bcea:	2300      	movs	r3, #0
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3710      	adds	r7, #16
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}

0800bcf4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bcf4:	b084      	sub	sp, #16
 800bcf6:	b580      	push	{r7, lr}
 800bcf8:	b086      	sub	sp, #24
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	6078      	str	r0, [r7, #4]
 800bcfe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bd02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bd06:	2300      	movs	r3, #0
 800bd08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bd0e:	2300      	movs	r3, #0
 800bd10:	613b      	str	r3, [r7, #16]
 800bd12:	e009      	b.n	800bd28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bd14:	687a      	ldr	r2, [r7, #4]
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	3340      	adds	r3, #64	; 0x40
 800bd1a:	009b      	lsls	r3, r3, #2
 800bd1c:	4413      	add	r3, r2
 800bd1e:	2200      	movs	r2, #0
 800bd20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	3301      	adds	r3, #1
 800bd26:	613b      	str	r3, [r7, #16]
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	2b0e      	cmp	r3, #14
 800bd2c:	d9f2      	bls.n	800bd14 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bd2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d11c      	bne.n	800bd6e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd3a:	685b      	ldr	r3, [r3, #4]
 800bd3c:	68fa      	ldr	r2, [r7, #12]
 800bd3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd42:	f043 0302 	orr.w	r3, r3, #2
 800bd46:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd4c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	601a      	str	r2, [r3, #0]
 800bd6c:	e005      	b.n	800bd7a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd80:	461a      	mov	r2, r3
 800bd82:	2300      	movs	r3, #0
 800bd84:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd8c:	4619      	mov	r1, r3
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd94:	461a      	mov	r2, r3
 800bd96:	680b      	ldr	r3, [r1, #0]
 800bd98:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bd9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d10c      	bne.n	800bdba <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bda0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d104      	bne.n	800bdb0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bda6:	2100      	movs	r1, #0
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f000 f965 	bl	800c078 <USB_SetDevSpeed>
 800bdae:	e008      	b.n	800bdc2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bdb0:	2101      	movs	r1, #1
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f000 f960 	bl	800c078 <USB_SetDevSpeed>
 800bdb8:	e003      	b.n	800bdc2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bdba:	2103      	movs	r1, #3
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f000 f95b 	bl	800c078 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bdc2:	2110      	movs	r1, #16
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f000 f8f3 	bl	800bfb0 <USB_FlushTxFifo>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d001      	beq.n	800bdd4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f000 f91f 	bl	800c018 <USB_FlushRxFifo>
 800bdda:	4603      	mov	r3, r0
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d001      	beq.n	800bde4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800bde0:	2301      	movs	r3, #1
 800bde2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdea:	461a      	mov	r2, r3
 800bdec:	2300      	movs	r3, #0
 800bdee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be02:	461a      	mov	r2, r3
 800be04:	2300      	movs	r3, #0
 800be06:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800be08:	2300      	movs	r3, #0
 800be0a:	613b      	str	r3, [r7, #16]
 800be0c:	e043      	b.n	800be96 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	015a      	lsls	r2, r3, #5
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	4413      	add	r3, r2
 800be16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be24:	d118      	bne.n	800be58 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d10a      	bne.n	800be42 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	015a      	lsls	r2, r3, #5
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	4413      	add	r3, r2
 800be34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be38:	461a      	mov	r2, r3
 800be3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800be3e:	6013      	str	r3, [r2, #0]
 800be40:	e013      	b.n	800be6a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	015a      	lsls	r2, r3, #5
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	4413      	add	r3, r2
 800be4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be4e:	461a      	mov	r2, r3
 800be50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800be54:	6013      	str	r3, [r2, #0]
 800be56:	e008      	b.n	800be6a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	015a      	lsls	r2, r3, #5
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	4413      	add	r3, r2
 800be60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be64:	461a      	mov	r2, r3
 800be66:	2300      	movs	r3, #0
 800be68:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	015a      	lsls	r2, r3, #5
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	4413      	add	r3, r2
 800be72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be76:	461a      	mov	r2, r3
 800be78:	2300      	movs	r3, #0
 800be7a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	015a      	lsls	r2, r3, #5
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	4413      	add	r3, r2
 800be84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be88:	461a      	mov	r2, r3
 800be8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800be8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	3301      	adds	r3, #1
 800be94:	613b      	str	r3, [r7, #16]
 800be96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be98:	693a      	ldr	r2, [r7, #16]
 800be9a:	429a      	cmp	r2, r3
 800be9c:	d3b7      	bcc.n	800be0e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800be9e:	2300      	movs	r3, #0
 800bea0:	613b      	str	r3, [r7, #16]
 800bea2:	e043      	b.n	800bf2c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	015a      	lsls	r2, r3, #5
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	4413      	add	r3, r2
 800beac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800beb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800beba:	d118      	bne.n	800beee <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800bebc:	693b      	ldr	r3, [r7, #16]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d10a      	bne.n	800bed8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bec2:	693b      	ldr	r3, [r7, #16]
 800bec4:	015a      	lsls	r2, r3, #5
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	4413      	add	r3, r2
 800beca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bece:	461a      	mov	r2, r3
 800bed0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bed4:	6013      	str	r3, [r2, #0]
 800bed6:	e013      	b.n	800bf00 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	015a      	lsls	r2, r3, #5
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	4413      	add	r3, r2
 800bee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bee4:	461a      	mov	r2, r3
 800bee6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800beea:	6013      	str	r3, [r2, #0]
 800beec:	e008      	b.n	800bf00 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	015a      	lsls	r2, r3, #5
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	4413      	add	r3, r2
 800bef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800befa:	461a      	mov	r2, r3
 800befc:	2300      	movs	r3, #0
 800befe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	015a      	lsls	r2, r3, #5
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	4413      	add	r3, r2
 800bf08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf0c:	461a      	mov	r2, r3
 800bf0e:	2300      	movs	r3, #0
 800bf10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	015a      	lsls	r2, r3, #5
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	4413      	add	r3, r2
 800bf1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf1e:	461a      	mov	r2, r3
 800bf20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bf24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	3301      	adds	r3, #1
 800bf2a:	613b      	str	r3, [r7, #16]
 800bf2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf2e:	693a      	ldr	r2, [r7, #16]
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d3b7      	bcc.n	800bea4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf3a:	691b      	ldr	r3, [r3, #16]
 800bf3c:	68fa      	ldr	r2, [r7, #12]
 800bf3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf46:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bf54:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bf56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d105      	bne.n	800bf68 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	699b      	ldr	r3, [r3, #24]
 800bf60:	f043 0210 	orr.w	r2, r3, #16
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	699a      	ldr	r2, [r3, #24]
 800bf6c:	4b0f      	ldr	r3, [pc, #60]	; (800bfac <USB_DevInit+0x2b8>)
 800bf6e:	4313      	orrs	r3, r2
 800bf70:	687a      	ldr	r2, [r7, #4]
 800bf72:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bf74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d005      	beq.n	800bf86 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	699b      	ldr	r3, [r3, #24]
 800bf7e:	f043 0208 	orr.w	r2, r3, #8
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bf86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf88:	2b01      	cmp	r3, #1
 800bf8a:	d107      	bne.n	800bf9c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	699b      	ldr	r3, [r3, #24]
 800bf90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bf94:	f043 0304 	orr.w	r3, r3, #4
 800bf98:	687a      	ldr	r2, [r7, #4]
 800bf9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bf9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3718      	adds	r7, #24
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bfa8:	b004      	add	sp, #16
 800bfaa:	4770      	bx	lr
 800bfac:	803c3800 	.word	0x803c3800

0800bfb0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b085      	sub	sp, #20
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
 800bfb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	4a13      	ldr	r2, [pc, #76]	; (800c014 <USB_FlushTxFifo+0x64>)
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	d901      	bls.n	800bfd0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bfcc:	2303      	movs	r3, #3
 800bfce:	e01b      	b.n	800c008 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	691b      	ldr	r3, [r3, #16]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	daf2      	bge.n	800bfbe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	019b      	lsls	r3, r3, #6
 800bfe0:	f043 0220 	orr.w	r2, r3, #32
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	3301      	adds	r3, #1
 800bfec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	4a08      	ldr	r2, [pc, #32]	; (800c014 <USB_FlushTxFifo+0x64>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d901      	bls.n	800bffa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bff6:	2303      	movs	r3, #3
 800bff8:	e006      	b.n	800c008 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	691b      	ldr	r3, [r3, #16]
 800bffe:	f003 0320 	and.w	r3, r3, #32
 800c002:	2b20      	cmp	r3, #32
 800c004:	d0f0      	beq.n	800bfe8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c006:	2300      	movs	r3, #0
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3714      	adds	r7, #20
 800c00c:	46bd      	mov	sp, r7
 800c00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c012:	4770      	bx	lr
 800c014:	00030d40 	.word	0x00030d40

0800c018 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c018:	b480      	push	{r7}
 800c01a:	b085      	sub	sp, #20
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c020:	2300      	movs	r3, #0
 800c022:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	3301      	adds	r3, #1
 800c028:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	4a11      	ldr	r2, [pc, #68]	; (800c074 <USB_FlushRxFifo+0x5c>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d901      	bls.n	800c036 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c032:	2303      	movs	r3, #3
 800c034:	e018      	b.n	800c068 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	691b      	ldr	r3, [r3, #16]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	daf2      	bge.n	800c024 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c03e:	2300      	movs	r3, #0
 800c040:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2210      	movs	r2, #16
 800c046:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	3301      	adds	r3, #1
 800c04c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	4a08      	ldr	r2, [pc, #32]	; (800c074 <USB_FlushRxFifo+0x5c>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d901      	bls.n	800c05a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c056:	2303      	movs	r3, #3
 800c058:	e006      	b.n	800c068 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	691b      	ldr	r3, [r3, #16]
 800c05e:	f003 0310 	and.w	r3, r3, #16
 800c062:	2b10      	cmp	r3, #16
 800c064:	d0f0      	beq.n	800c048 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c066:	2300      	movs	r3, #0
}
 800c068:	4618      	mov	r0, r3
 800c06a:	3714      	adds	r7, #20
 800c06c:	46bd      	mov	sp, r7
 800c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c072:	4770      	bx	lr
 800c074:	00030d40 	.word	0x00030d40

0800c078 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c078:	b480      	push	{r7}
 800c07a:	b085      	sub	sp, #20
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	460b      	mov	r3, r1
 800c082:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c08e:	681a      	ldr	r2, [r3, #0]
 800c090:	78fb      	ldrb	r3, [r7, #3]
 800c092:	68f9      	ldr	r1, [r7, #12]
 800c094:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c098:	4313      	orrs	r3, r2
 800c09a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c09c:	2300      	movs	r3, #0
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3714      	adds	r7, #20
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a8:	4770      	bx	lr

0800c0aa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c0aa:	b480      	push	{r7}
 800c0ac:	b087      	sub	sp, #28
 800c0ae:	af00      	add	r7, sp, #0
 800c0b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c0b6:	693b      	ldr	r3, [r7, #16]
 800c0b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0bc:	689b      	ldr	r3, [r3, #8]
 800c0be:	f003 0306 	and.w	r3, r3, #6
 800c0c2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d102      	bne.n	800c0d0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	75fb      	strb	r3, [r7, #23]
 800c0ce:	e00a      	b.n	800c0e6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	2b02      	cmp	r3, #2
 800c0d4:	d002      	beq.n	800c0dc <USB_GetDevSpeed+0x32>
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	2b06      	cmp	r3, #6
 800c0da:	d102      	bne.n	800c0e2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c0dc:	2302      	movs	r3, #2
 800c0de:	75fb      	strb	r3, [r7, #23]
 800c0e0:	e001      	b.n	800c0e6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c0e2:	230f      	movs	r3, #15
 800c0e4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c0e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	371c      	adds	r7, #28
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr

0800c0f4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b085      	sub	sp, #20
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	785b      	ldrb	r3, [r3, #1]
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	d13a      	bne.n	800c186 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c116:	69da      	ldr	r2, [r3, #28]
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	f003 030f 	and.w	r3, r3, #15
 800c120:	2101      	movs	r1, #1
 800c122:	fa01 f303 	lsl.w	r3, r1, r3
 800c126:	b29b      	uxth	r3, r3
 800c128:	68f9      	ldr	r1, [r7, #12]
 800c12a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c12e:	4313      	orrs	r3, r2
 800c130:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	015a      	lsls	r2, r3, #5
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	4413      	add	r3, r2
 800c13a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c144:	2b00      	cmp	r3, #0
 800c146:	d155      	bne.n	800c1f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	015a      	lsls	r2, r3, #5
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	4413      	add	r3, r2
 800c150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c154:	681a      	ldr	r2, [r3, #0]
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	68db      	ldr	r3, [r3, #12]
 800c15a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	791b      	ldrb	r3, [r3, #4]
 800c162:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c164:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	059b      	lsls	r3, r3, #22
 800c16a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c16c:	4313      	orrs	r3, r2
 800c16e:	68ba      	ldr	r2, [r7, #8]
 800c170:	0151      	lsls	r1, r2, #5
 800c172:	68fa      	ldr	r2, [r7, #12]
 800c174:	440a      	add	r2, r1
 800c176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c17a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c17e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c182:	6013      	str	r3, [r2, #0]
 800c184:	e036      	b.n	800c1f4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c18c:	69da      	ldr	r2, [r3, #28]
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	781b      	ldrb	r3, [r3, #0]
 800c192:	f003 030f 	and.w	r3, r3, #15
 800c196:	2101      	movs	r1, #1
 800c198:	fa01 f303 	lsl.w	r3, r1, r3
 800c19c:	041b      	lsls	r3, r3, #16
 800c19e:	68f9      	ldr	r1, [r7, #12]
 800c1a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c1a4:	4313      	orrs	r3, r2
 800c1a6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	015a      	lsls	r2, r3, #5
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	4413      	add	r3, r2
 800c1b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d11a      	bne.n	800c1f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	015a      	lsls	r2, r3, #5
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	4413      	add	r3, r2
 800c1c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1ca:	681a      	ldr	r2, [r3, #0]
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	68db      	ldr	r3, [r3, #12]
 800c1d0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	791b      	ldrb	r3, [r3, #4]
 800c1d8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c1da:	430b      	orrs	r3, r1
 800c1dc:	4313      	orrs	r3, r2
 800c1de:	68ba      	ldr	r2, [r7, #8]
 800c1e0:	0151      	lsls	r1, r2, #5
 800c1e2:	68fa      	ldr	r2, [r7, #12]
 800c1e4:	440a      	add	r2, r1
 800c1e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c1ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c1f2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c1f4:	2300      	movs	r3, #0
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3714      	adds	r7, #20
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c200:	4770      	bx	lr
	...

0800c204 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c204:	b480      	push	{r7}
 800c206:	b085      	sub	sp, #20
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
 800c20c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	785b      	ldrb	r3, [r3, #1]
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d161      	bne.n	800c2e4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	015a      	lsls	r2, r3, #5
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	4413      	add	r3, r2
 800c228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c232:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c236:	d11f      	bne.n	800c278 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	015a      	lsls	r2, r3, #5
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	4413      	add	r3, r2
 800c240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	68ba      	ldr	r2, [r7, #8]
 800c248:	0151      	lsls	r1, r2, #5
 800c24a:	68fa      	ldr	r2, [r7, #12]
 800c24c:	440a      	add	r2, r1
 800c24e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c252:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c256:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	015a      	lsls	r2, r3, #5
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	4413      	add	r3, r2
 800c260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	68ba      	ldr	r2, [r7, #8]
 800c268:	0151      	lsls	r1, r2, #5
 800c26a:	68fa      	ldr	r2, [r7, #12]
 800c26c:	440a      	add	r2, r1
 800c26e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c272:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c276:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c27e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	f003 030f 	and.w	r3, r3, #15
 800c288:	2101      	movs	r1, #1
 800c28a:	fa01 f303 	lsl.w	r3, r1, r3
 800c28e:	b29b      	uxth	r3, r3
 800c290:	43db      	mvns	r3, r3
 800c292:	68f9      	ldr	r1, [r7, #12]
 800c294:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c298:	4013      	ands	r3, r2
 800c29a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2a2:	69da      	ldr	r2, [r3, #28]
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	f003 030f 	and.w	r3, r3, #15
 800c2ac:	2101      	movs	r1, #1
 800c2ae:	fa01 f303 	lsl.w	r3, r1, r3
 800c2b2:	b29b      	uxth	r3, r3
 800c2b4:	43db      	mvns	r3, r3
 800c2b6:	68f9      	ldr	r1, [r7, #12]
 800c2b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c2bc:	4013      	ands	r3, r2
 800c2be:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	015a      	lsls	r2, r3, #5
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	4413      	add	r3, r2
 800c2c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2cc:	681a      	ldr	r2, [r3, #0]
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	0159      	lsls	r1, r3, #5
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	440b      	add	r3, r1
 800c2d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2da:	4619      	mov	r1, r3
 800c2dc:	4b35      	ldr	r3, [pc, #212]	; (800c3b4 <USB_DeactivateEndpoint+0x1b0>)
 800c2de:	4013      	ands	r3, r2
 800c2e0:	600b      	str	r3, [r1, #0]
 800c2e2:	e060      	b.n	800c3a6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	015a      	lsls	r2, r3, #5
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	4413      	add	r3, r2
 800c2ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c2f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c2fa:	d11f      	bne.n	800c33c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	015a      	lsls	r2, r3, #5
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	4413      	add	r3, r2
 800c304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	68ba      	ldr	r2, [r7, #8]
 800c30c:	0151      	lsls	r1, r2, #5
 800c30e:	68fa      	ldr	r2, [r7, #12]
 800c310:	440a      	add	r2, r1
 800c312:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c316:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c31a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	015a      	lsls	r2, r3, #5
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	4413      	add	r3, r2
 800c324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	68ba      	ldr	r2, [r7, #8]
 800c32c:	0151      	lsls	r1, r2, #5
 800c32e:	68fa      	ldr	r2, [r7, #12]
 800c330:	440a      	add	r2, r1
 800c332:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c336:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c33a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c342:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	f003 030f 	and.w	r3, r3, #15
 800c34c:	2101      	movs	r1, #1
 800c34e:	fa01 f303 	lsl.w	r3, r1, r3
 800c352:	041b      	lsls	r3, r3, #16
 800c354:	43db      	mvns	r3, r3
 800c356:	68f9      	ldr	r1, [r7, #12]
 800c358:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c35c:	4013      	ands	r3, r2
 800c35e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c366:	69da      	ldr	r2, [r3, #28]
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	781b      	ldrb	r3, [r3, #0]
 800c36c:	f003 030f 	and.w	r3, r3, #15
 800c370:	2101      	movs	r1, #1
 800c372:	fa01 f303 	lsl.w	r3, r1, r3
 800c376:	041b      	lsls	r3, r3, #16
 800c378:	43db      	mvns	r3, r3
 800c37a:	68f9      	ldr	r1, [r7, #12]
 800c37c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c380:	4013      	ands	r3, r2
 800c382:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	015a      	lsls	r2, r3, #5
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	4413      	add	r3, r2
 800c38c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c390:	681a      	ldr	r2, [r3, #0]
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	0159      	lsls	r1, r3, #5
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	440b      	add	r3, r1
 800c39a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c39e:	4619      	mov	r1, r3
 800c3a0:	4b05      	ldr	r3, [pc, #20]	; (800c3b8 <USB_DeactivateEndpoint+0x1b4>)
 800c3a2:	4013      	ands	r3, r2
 800c3a4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c3a6:	2300      	movs	r3, #0
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3714      	adds	r7, #20
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr
 800c3b4:	ec337800 	.word	0xec337800
 800c3b8:	eff37800 	.word	0xeff37800

0800c3bc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b08a      	sub	sp, #40	; 0x28
 800c3c0:	af02      	add	r7, sp, #8
 800c3c2:	60f8      	str	r0, [r7, #12]
 800c3c4:	60b9      	str	r1, [r7, #8]
 800c3c6:	4613      	mov	r3, r2
 800c3c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	781b      	ldrb	r3, [r3, #0]
 800c3d2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	785b      	ldrb	r3, [r3, #1]
 800c3d8:	2b01      	cmp	r3, #1
 800c3da:	f040 815c 	bne.w	800c696 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	699b      	ldr	r3, [r3, #24]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d132      	bne.n	800c44c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c3e6:	69bb      	ldr	r3, [r7, #24]
 800c3e8:	015a      	lsls	r2, r3, #5
 800c3ea:	69fb      	ldr	r3, [r7, #28]
 800c3ec:	4413      	add	r3, r2
 800c3ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3f2:	691b      	ldr	r3, [r3, #16]
 800c3f4:	69ba      	ldr	r2, [r7, #24]
 800c3f6:	0151      	lsls	r1, r2, #5
 800c3f8:	69fa      	ldr	r2, [r7, #28]
 800c3fa:	440a      	add	r2, r1
 800c3fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c400:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c404:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c408:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c40a:	69bb      	ldr	r3, [r7, #24]
 800c40c:	015a      	lsls	r2, r3, #5
 800c40e:	69fb      	ldr	r3, [r7, #28]
 800c410:	4413      	add	r3, r2
 800c412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c416:	691b      	ldr	r3, [r3, #16]
 800c418:	69ba      	ldr	r2, [r7, #24]
 800c41a:	0151      	lsls	r1, r2, #5
 800c41c:	69fa      	ldr	r2, [r7, #28]
 800c41e:	440a      	add	r2, r1
 800c420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c424:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c428:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c42a:	69bb      	ldr	r3, [r7, #24]
 800c42c:	015a      	lsls	r2, r3, #5
 800c42e:	69fb      	ldr	r3, [r7, #28]
 800c430:	4413      	add	r3, r2
 800c432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c436:	691b      	ldr	r3, [r3, #16]
 800c438:	69ba      	ldr	r2, [r7, #24]
 800c43a:	0151      	lsls	r1, r2, #5
 800c43c:	69fa      	ldr	r2, [r7, #28]
 800c43e:	440a      	add	r2, r1
 800c440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c444:	0cdb      	lsrs	r3, r3, #19
 800c446:	04db      	lsls	r3, r3, #19
 800c448:	6113      	str	r3, [r2, #16]
 800c44a:	e074      	b.n	800c536 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c44c:	69bb      	ldr	r3, [r7, #24]
 800c44e:	015a      	lsls	r2, r3, #5
 800c450:	69fb      	ldr	r3, [r7, #28]
 800c452:	4413      	add	r3, r2
 800c454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c458:	691b      	ldr	r3, [r3, #16]
 800c45a:	69ba      	ldr	r2, [r7, #24]
 800c45c:	0151      	lsls	r1, r2, #5
 800c45e:	69fa      	ldr	r2, [r7, #28]
 800c460:	440a      	add	r2, r1
 800c462:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c466:	0cdb      	lsrs	r3, r3, #19
 800c468:	04db      	lsls	r3, r3, #19
 800c46a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c46c:	69bb      	ldr	r3, [r7, #24]
 800c46e:	015a      	lsls	r2, r3, #5
 800c470:	69fb      	ldr	r3, [r7, #28]
 800c472:	4413      	add	r3, r2
 800c474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c478:	691b      	ldr	r3, [r3, #16]
 800c47a:	69ba      	ldr	r2, [r7, #24]
 800c47c:	0151      	lsls	r1, r2, #5
 800c47e:	69fa      	ldr	r2, [r7, #28]
 800c480:	440a      	add	r2, r1
 800c482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c486:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c48a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c48e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c490:	69bb      	ldr	r3, [r7, #24]
 800c492:	015a      	lsls	r2, r3, #5
 800c494:	69fb      	ldr	r3, [r7, #28]
 800c496:	4413      	add	r3, r2
 800c498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c49c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	6999      	ldr	r1, [r3, #24]
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	68db      	ldr	r3, [r3, #12]
 800c4a6:	440b      	add	r3, r1
 800c4a8:	1e59      	subs	r1, r3, #1
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	68db      	ldr	r3, [r3, #12]
 800c4ae:	fbb1 f3f3 	udiv	r3, r1, r3
 800c4b2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c4b4:	4b9d      	ldr	r3, [pc, #628]	; (800c72c <USB_EPStartXfer+0x370>)
 800c4b6:	400b      	ands	r3, r1
 800c4b8:	69b9      	ldr	r1, [r7, #24]
 800c4ba:	0148      	lsls	r0, r1, #5
 800c4bc:	69f9      	ldr	r1, [r7, #28]
 800c4be:	4401      	add	r1, r0
 800c4c0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c4c4:	4313      	orrs	r3, r2
 800c4c6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c4c8:	69bb      	ldr	r3, [r7, #24]
 800c4ca:	015a      	lsls	r2, r3, #5
 800c4cc:	69fb      	ldr	r3, [r7, #28]
 800c4ce:	4413      	add	r3, r2
 800c4d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4d4:	691a      	ldr	r2, [r3, #16]
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	699b      	ldr	r3, [r3, #24]
 800c4da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c4de:	69b9      	ldr	r1, [r7, #24]
 800c4e0:	0148      	lsls	r0, r1, #5
 800c4e2:	69f9      	ldr	r1, [r7, #28]
 800c4e4:	4401      	add	r1, r0
 800c4e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c4ea:	4313      	orrs	r3, r2
 800c4ec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	791b      	ldrb	r3, [r3, #4]
 800c4f2:	2b01      	cmp	r3, #1
 800c4f4:	d11f      	bne.n	800c536 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c4f6:	69bb      	ldr	r3, [r7, #24]
 800c4f8:	015a      	lsls	r2, r3, #5
 800c4fa:	69fb      	ldr	r3, [r7, #28]
 800c4fc:	4413      	add	r3, r2
 800c4fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c502:	691b      	ldr	r3, [r3, #16]
 800c504:	69ba      	ldr	r2, [r7, #24]
 800c506:	0151      	lsls	r1, r2, #5
 800c508:	69fa      	ldr	r2, [r7, #28]
 800c50a:	440a      	add	r2, r1
 800c50c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c510:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c514:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c516:	69bb      	ldr	r3, [r7, #24]
 800c518:	015a      	lsls	r2, r3, #5
 800c51a:	69fb      	ldr	r3, [r7, #28]
 800c51c:	4413      	add	r3, r2
 800c51e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c522:	691b      	ldr	r3, [r3, #16]
 800c524:	69ba      	ldr	r2, [r7, #24]
 800c526:	0151      	lsls	r1, r2, #5
 800c528:	69fa      	ldr	r2, [r7, #28]
 800c52a:	440a      	add	r2, r1
 800c52c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c530:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c534:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c536:	79fb      	ldrb	r3, [r7, #7]
 800c538:	2b01      	cmp	r3, #1
 800c53a:	d14b      	bne.n	800c5d4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	695b      	ldr	r3, [r3, #20]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d009      	beq.n	800c558 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c544:	69bb      	ldr	r3, [r7, #24]
 800c546:	015a      	lsls	r2, r3, #5
 800c548:	69fb      	ldr	r3, [r7, #28]
 800c54a:	4413      	add	r3, r2
 800c54c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c550:	461a      	mov	r2, r3
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	695b      	ldr	r3, [r3, #20]
 800c556:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	791b      	ldrb	r3, [r3, #4]
 800c55c:	2b01      	cmp	r3, #1
 800c55e:	d128      	bne.n	800c5b2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c560:	69fb      	ldr	r3, [r7, #28]
 800c562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c566:	689b      	ldr	r3, [r3, #8]
 800c568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d110      	bne.n	800c592 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c570:	69bb      	ldr	r3, [r7, #24]
 800c572:	015a      	lsls	r2, r3, #5
 800c574:	69fb      	ldr	r3, [r7, #28]
 800c576:	4413      	add	r3, r2
 800c578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	69ba      	ldr	r2, [r7, #24]
 800c580:	0151      	lsls	r1, r2, #5
 800c582:	69fa      	ldr	r2, [r7, #28]
 800c584:	440a      	add	r2, r1
 800c586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c58a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c58e:	6013      	str	r3, [r2, #0]
 800c590:	e00f      	b.n	800c5b2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c592:	69bb      	ldr	r3, [r7, #24]
 800c594:	015a      	lsls	r2, r3, #5
 800c596:	69fb      	ldr	r3, [r7, #28]
 800c598:	4413      	add	r3, r2
 800c59a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	69ba      	ldr	r2, [r7, #24]
 800c5a2:	0151      	lsls	r1, r2, #5
 800c5a4:	69fa      	ldr	r2, [r7, #28]
 800c5a6:	440a      	add	r2, r1
 800c5a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c5b0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c5b2:	69bb      	ldr	r3, [r7, #24]
 800c5b4:	015a      	lsls	r2, r3, #5
 800c5b6:	69fb      	ldr	r3, [r7, #28]
 800c5b8:	4413      	add	r3, r2
 800c5ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	69ba      	ldr	r2, [r7, #24]
 800c5c2:	0151      	lsls	r1, r2, #5
 800c5c4:	69fa      	ldr	r2, [r7, #28]
 800c5c6:	440a      	add	r2, r1
 800c5c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c5d0:	6013      	str	r3, [r2, #0]
 800c5d2:	e133      	b.n	800c83c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c5d4:	69bb      	ldr	r3, [r7, #24]
 800c5d6:	015a      	lsls	r2, r3, #5
 800c5d8:	69fb      	ldr	r3, [r7, #28]
 800c5da:	4413      	add	r3, r2
 800c5dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	69ba      	ldr	r2, [r7, #24]
 800c5e4:	0151      	lsls	r1, r2, #5
 800c5e6:	69fa      	ldr	r2, [r7, #28]
 800c5e8:	440a      	add	r2, r1
 800c5ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c5f2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	791b      	ldrb	r3, [r3, #4]
 800c5f8:	2b01      	cmp	r3, #1
 800c5fa:	d015      	beq.n	800c628 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	699b      	ldr	r3, [r3, #24]
 800c600:	2b00      	cmp	r3, #0
 800c602:	f000 811b 	beq.w	800c83c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c606:	69fb      	ldr	r3, [r7, #28]
 800c608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c60c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c60e:	68bb      	ldr	r3, [r7, #8]
 800c610:	781b      	ldrb	r3, [r3, #0]
 800c612:	f003 030f 	and.w	r3, r3, #15
 800c616:	2101      	movs	r1, #1
 800c618:	fa01 f303 	lsl.w	r3, r1, r3
 800c61c:	69f9      	ldr	r1, [r7, #28]
 800c61e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c622:	4313      	orrs	r3, r2
 800c624:	634b      	str	r3, [r1, #52]	; 0x34
 800c626:	e109      	b.n	800c83c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c628:	69fb      	ldr	r3, [r7, #28]
 800c62a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c62e:	689b      	ldr	r3, [r3, #8]
 800c630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c634:	2b00      	cmp	r3, #0
 800c636:	d110      	bne.n	800c65a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c638:	69bb      	ldr	r3, [r7, #24]
 800c63a:	015a      	lsls	r2, r3, #5
 800c63c:	69fb      	ldr	r3, [r7, #28]
 800c63e:	4413      	add	r3, r2
 800c640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	69ba      	ldr	r2, [r7, #24]
 800c648:	0151      	lsls	r1, r2, #5
 800c64a:	69fa      	ldr	r2, [r7, #28]
 800c64c:	440a      	add	r2, r1
 800c64e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c652:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c656:	6013      	str	r3, [r2, #0]
 800c658:	e00f      	b.n	800c67a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c65a:	69bb      	ldr	r3, [r7, #24]
 800c65c:	015a      	lsls	r2, r3, #5
 800c65e:	69fb      	ldr	r3, [r7, #28]
 800c660:	4413      	add	r3, r2
 800c662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	69ba      	ldr	r2, [r7, #24]
 800c66a:	0151      	lsls	r1, r2, #5
 800c66c:	69fa      	ldr	r2, [r7, #28]
 800c66e:	440a      	add	r2, r1
 800c670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c678:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	6919      	ldr	r1, [r3, #16]
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	781a      	ldrb	r2, [r3, #0]
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	699b      	ldr	r3, [r3, #24]
 800c686:	b298      	uxth	r0, r3
 800c688:	79fb      	ldrb	r3, [r7, #7]
 800c68a:	9300      	str	r3, [sp, #0]
 800c68c:	4603      	mov	r3, r0
 800c68e:	68f8      	ldr	r0, [r7, #12]
 800c690:	f000 fade 	bl	800cc50 <USB_WritePacket>
 800c694:	e0d2      	b.n	800c83c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c696:	69bb      	ldr	r3, [r7, #24]
 800c698:	015a      	lsls	r2, r3, #5
 800c69a:	69fb      	ldr	r3, [r7, #28]
 800c69c:	4413      	add	r3, r2
 800c69e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6a2:	691b      	ldr	r3, [r3, #16]
 800c6a4:	69ba      	ldr	r2, [r7, #24]
 800c6a6:	0151      	lsls	r1, r2, #5
 800c6a8:	69fa      	ldr	r2, [r7, #28]
 800c6aa:	440a      	add	r2, r1
 800c6ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6b0:	0cdb      	lsrs	r3, r3, #19
 800c6b2:	04db      	lsls	r3, r3, #19
 800c6b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c6b6:	69bb      	ldr	r3, [r7, #24]
 800c6b8:	015a      	lsls	r2, r3, #5
 800c6ba:	69fb      	ldr	r3, [r7, #28]
 800c6bc:	4413      	add	r3, r2
 800c6be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6c2:	691b      	ldr	r3, [r3, #16]
 800c6c4:	69ba      	ldr	r2, [r7, #24]
 800c6c6:	0151      	lsls	r1, r2, #5
 800c6c8:	69fa      	ldr	r2, [r7, #28]
 800c6ca:	440a      	add	r2, r1
 800c6cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c6d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c6d8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	699b      	ldr	r3, [r3, #24]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d126      	bne.n	800c730 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c6e2:	69bb      	ldr	r3, [r7, #24]
 800c6e4:	015a      	lsls	r2, r3, #5
 800c6e6:	69fb      	ldr	r3, [r7, #28]
 800c6e8:	4413      	add	r3, r2
 800c6ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6ee:	691a      	ldr	r2, [r3, #16]
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	68db      	ldr	r3, [r3, #12]
 800c6f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c6f8:	69b9      	ldr	r1, [r7, #24]
 800c6fa:	0148      	lsls	r0, r1, #5
 800c6fc:	69f9      	ldr	r1, [r7, #28]
 800c6fe:	4401      	add	r1, r0
 800c700:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c704:	4313      	orrs	r3, r2
 800c706:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c708:	69bb      	ldr	r3, [r7, #24]
 800c70a:	015a      	lsls	r2, r3, #5
 800c70c:	69fb      	ldr	r3, [r7, #28]
 800c70e:	4413      	add	r3, r2
 800c710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c714:	691b      	ldr	r3, [r3, #16]
 800c716:	69ba      	ldr	r2, [r7, #24]
 800c718:	0151      	lsls	r1, r2, #5
 800c71a:	69fa      	ldr	r2, [r7, #28]
 800c71c:	440a      	add	r2, r1
 800c71e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c722:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c726:	6113      	str	r3, [r2, #16]
 800c728:	e03a      	b.n	800c7a0 <USB_EPStartXfer+0x3e4>
 800c72a:	bf00      	nop
 800c72c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	699a      	ldr	r2, [r3, #24]
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	68db      	ldr	r3, [r3, #12]
 800c738:	4413      	add	r3, r2
 800c73a:	1e5a      	subs	r2, r3, #1
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	68db      	ldr	r3, [r3, #12]
 800c740:	fbb2 f3f3 	udiv	r3, r2, r3
 800c744:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	68db      	ldr	r3, [r3, #12]
 800c74a:	8afa      	ldrh	r2, [r7, #22]
 800c74c:	fb03 f202 	mul.w	r2, r3, r2
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c754:	69bb      	ldr	r3, [r7, #24]
 800c756:	015a      	lsls	r2, r3, #5
 800c758:	69fb      	ldr	r3, [r7, #28]
 800c75a:	4413      	add	r3, r2
 800c75c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c760:	691a      	ldr	r2, [r3, #16]
 800c762:	8afb      	ldrh	r3, [r7, #22]
 800c764:	04d9      	lsls	r1, r3, #19
 800c766:	4b38      	ldr	r3, [pc, #224]	; (800c848 <USB_EPStartXfer+0x48c>)
 800c768:	400b      	ands	r3, r1
 800c76a:	69b9      	ldr	r1, [r7, #24]
 800c76c:	0148      	lsls	r0, r1, #5
 800c76e:	69f9      	ldr	r1, [r7, #28]
 800c770:	4401      	add	r1, r0
 800c772:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c776:	4313      	orrs	r3, r2
 800c778:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c77a:	69bb      	ldr	r3, [r7, #24]
 800c77c:	015a      	lsls	r2, r3, #5
 800c77e:	69fb      	ldr	r3, [r7, #28]
 800c780:	4413      	add	r3, r2
 800c782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c786:	691a      	ldr	r2, [r3, #16]
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	69db      	ldr	r3, [r3, #28]
 800c78c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c790:	69b9      	ldr	r1, [r7, #24]
 800c792:	0148      	lsls	r0, r1, #5
 800c794:	69f9      	ldr	r1, [r7, #28]
 800c796:	4401      	add	r1, r0
 800c798:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c79c:	4313      	orrs	r3, r2
 800c79e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c7a0:	79fb      	ldrb	r3, [r7, #7]
 800c7a2:	2b01      	cmp	r3, #1
 800c7a4:	d10d      	bne.n	800c7c2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	691b      	ldr	r3, [r3, #16]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d009      	beq.n	800c7c2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	6919      	ldr	r1, [r3, #16]
 800c7b2:	69bb      	ldr	r3, [r7, #24]
 800c7b4:	015a      	lsls	r2, r3, #5
 800c7b6:	69fb      	ldr	r3, [r7, #28]
 800c7b8:	4413      	add	r3, r2
 800c7ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7be:	460a      	mov	r2, r1
 800c7c0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	791b      	ldrb	r3, [r3, #4]
 800c7c6:	2b01      	cmp	r3, #1
 800c7c8:	d128      	bne.n	800c81c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c7ca:	69fb      	ldr	r3, [r7, #28]
 800c7cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7d0:	689b      	ldr	r3, [r3, #8]
 800c7d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d110      	bne.n	800c7fc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c7da:	69bb      	ldr	r3, [r7, #24]
 800c7dc:	015a      	lsls	r2, r3, #5
 800c7de:	69fb      	ldr	r3, [r7, #28]
 800c7e0:	4413      	add	r3, r2
 800c7e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	69ba      	ldr	r2, [r7, #24]
 800c7ea:	0151      	lsls	r1, r2, #5
 800c7ec:	69fa      	ldr	r2, [r7, #28]
 800c7ee:	440a      	add	r2, r1
 800c7f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c7f8:	6013      	str	r3, [r2, #0]
 800c7fa:	e00f      	b.n	800c81c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c7fc:	69bb      	ldr	r3, [r7, #24]
 800c7fe:	015a      	lsls	r2, r3, #5
 800c800:	69fb      	ldr	r3, [r7, #28]
 800c802:	4413      	add	r3, r2
 800c804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	69ba      	ldr	r2, [r7, #24]
 800c80c:	0151      	lsls	r1, r2, #5
 800c80e:	69fa      	ldr	r2, [r7, #28]
 800c810:	440a      	add	r2, r1
 800c812:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c81a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c81c:	69bb      	ldr	r3, [r7, #24]
 800c81e:	015a      	lsls	r2, r3, #5
 800c820:	69fb      	ldr	r3, [r7, #28]
 800c822:	4413      	add	r3, r2
 800c824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	69ba      	ldr	r2, [r7, #24]
 800c82c:	0151      	lsls	r1, r2, #5
 800c82e:	69fa      	ldr	r2, [r7, #28]
 800c830:	440a      	add	r2, r1
 800c832:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c836:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c83a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c83c:	2300      	movs	r3, #0
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3720      	adds	r7, #32
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
 800c846:	bf00      	nop
 800c848:	1ff80000 	.word	0x1ff80000

0800c84c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b087      	sub	sp, #28
 800c850:	af00      	add	r7, sp, #0
 800c852:	60f8      	str	r0, [r7, #12]
 800c854:	60b9      	str	r1, [r7, #8]
 800c856:	4613      	mov	r3, r2
 800c858:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	781b      	ldrb	r3, [r3, #0]
 800c862:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	785b      	ldrb	r3, [r3, #1]
 800c868:	2b01      	cmp	r3, #1
 800c86a:	f040 80ce 	bne.w	800ca0a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	699b      	ldr	r3, [r3, #24]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d132      	bne.n	800c8dc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c876:	693b      	ldr	r3, [r7, #16]
 800c878:	015a      	lsls	r2, r3, #5
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	4413      	add	r3, r2
 800c87e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c882:	691b      	ldr	r3, [r3, #16]
 800c884:	693a      	ldr	r2, [r7, #16]
 800c886:	0151      	lsls	r1, r2, #5
 800c888:	697a      	ldr	r2, [r7, #20]
 800c88a:	440a      	add	r2, r1
 800c88c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c890:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c894:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c898:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	015a      	lsls	r2, r3, #5
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	4413      	add	r3, r2
 800c8a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8a6:	691b      	ldr	r3, [r3, #16]
 800c8a8:	693a      	ldr	r2, [r7, #16]
 800c8aa:	0151      	lsls	r1, r2, #5
 800c8ac:	697a      	ldr	r2, [r7, #20]
 800c8ae:	440a      	add	r2, r1
 800c8b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c8b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	015a      	lsls	r2, r3, #5
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	4413      	add	r3, r2
 800c8c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8c6:	691b      	ldr	r3, [r3, #16]
 800c8c8:	693a      	ldr	r2, [r7, #16]
 800c8ca:	0151      	lsls	r1, r2, #5
 800c8cc:	697a      	ldr	r2, [r7, #20]
 800c8ce:	440a      	add	r2, r1
 800c8d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8d4:	0cdb      	lsrs	r3, r3, #19
 800c8d6:	04db      	lsls	r3, r3, #19
 800c8d8:	6113      	str	r3, [r2, #16]
 800c8da:	e04e      	b.n	800c97a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	015a      	lsls	r2, r3, #5
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	4413      	add	r3, r2
 800c8e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8e8:	691b      	ldr	r3, [r3, #16]
 800c8ea:	693a      	ldr	r2, [r7, #16]
 800c8ec:	0151      	lsls	r1, r2, #5
 800c8ee:	697a      	ldr	r2, [r7, #20]
 800c8f0:	440a      	add	r2, r1
 800c8f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8f6:	0cdb      	lsrs	r3, r3, #19
 800c8f8:	04db      	lsls	r3, r3, #19
 800c8fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c8fc:	693b      	ldr	r3, [r7, #16]
 800c8fe:	015a      	lsls	r2, r3, #5
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	4413      	add	r3, r2
 800c904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c908:	691b      	ldr	r3, [r3, #16]
 800c90a:	693a      	ldr	r2, [r7, #16]
 800c90c:	0151      	lsls	r1, r2, #5
 800c90e:	697a      	ldr	r2, [r7, #20]
 800c910:	440a      	add	r2, r1
 800c912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c916:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c91a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c91e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	699a      	ldr	r2, [r3, #24]
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	68db      	ldr	r3, [r3, #12]
 800c928:	429a      	cmp	r2, r3
 800c92a:	d903      	bls.n	800c934 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	68da      	ldr	r2, [r3, #12]
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	015a      	lsls	r2, r3, #5
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	4413      	add	r3, r2
 800c93c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c940:	691b      	ldr	r3, [r3, #16]
 800c942:	693a      	ldr	r2, [r7, #16]
 800c944:	0151      	lsls	r1, r2, #5
 800c946:	697a      	ldr	r2, [r7, #20]
 800c948:	440a      	add	r2, r1
 800c94a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c94e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c952:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c954:	693b      	ldr	r3, [r7, #16]
 800c956:	015a      	lsls	r2, r3, #5
 800c958:	697b      	ldr	r3, [r7, #20]
 800c95a:	4413      	add	r3, r2
 800c95c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c960:	691a      	ldr	r2, [r3, #16]
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	699b      	ldr	r3, [r3, #24]
 800c966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c96a:	6939      	ldr	r1, [r7, #16]
 800c96c:	0148      	lsls	r0, r1, #5
 800c96e:	6979      	ldr	r1, [r7, #20]
 800c970:	4401      	add	r1, r0
 800c972:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c976:	4313      	orrs	r3, r2
 800c978:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c97a:	79fb      	ldrb	r3, [r7, #7]
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	d11e      	bne.n	800c9be <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	695b      	ldr	r3, [r3, #20]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d009      	beq.n	800c99c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	015a      	lsls	r2, r3, #5
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	4413      	add	r3, r2
 800c990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c994:	461a      	mov	r2, r3
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	695b      	ldr	r3, [r3, #20]
 800c99a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	015a      	lsls	r2, r3, #5
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	4413      	add	r3, r2
 800c9a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	693a      	ldr	r2, [r7, #16]
 800c9ac:	0151      	lsls	r1, r2, #5
 800c9ae:	697a      	ldr	r2, [r7, #20]
 800c9b0:	440a      	add	r2, r1
 800c9b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c9ba:	6013      	str	r3, [r2, #0]
 800c9bc:	e097      	b.n	800caee <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	015a      	lsls	r2, r3, #5
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	4413      	add	r3, r2
 800c9c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	693a      	ldr	r2, [r7, #16]
 800c9ce:	0151      	lsls	r1, r2, #5
 800c9d0:	697a      	ldr	r2, [r7, #20]
 800c9d2:	440a      	add	r2, r1
 800c9d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c9dc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	699b      	ldr	r3, [r3, #24]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	f000 8083 	beq.w	800caee <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	781b      	ldrb	r3, [r3, #0]
 800c9f4:	f003 030f 	and.w	r3, r3, #15
 800c9f8:	2101      	movs	r1, #1
 800c9fa:	fa01 f303 	lsl.w	r3, r1, r3
 800c9fe:	6979      	ldr	r1, [r7, #20]
 800ca00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ca04:	4313      	orrs	r3, r2
 800ca06:	634b      	str	r3, [r1, #52]	; 0x34
 800ca08:	e071      	b.n	800caee <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	015a      	lsls	r2, r3, #5
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	4413      	add	r3, r2
 800ca12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca16:	691b      	ldr	r3, [r3, #16]
 800ca18:	693a      	ldr	r2, [r7, #16]
 800ca1a:	0151      	lsls	r1, r2, #5
 800ca1c:	697a      	ldr	r2, [r7, #20]
 800ca1e:	440a      	add	r2, r1
 800ca20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca24:	0cdb      	lsrs	r3, r3, #19
 800ca26:	04db      	lsls	r3, r3, #19
 800ca28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	015a      	lsls	r2, r3, #5
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	4413      	add	r3, r2
 800ca32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca36:	691b      	ldr	r3, [r3, #16]
 800ca38:	693a      	ldr	r2, [r7, #16]
 800ca3a:	0151      	lsls	r1, r2, #5
 800ca3c:	697a      	ldr	r2, [r7, #20]
 800ca3e:	440a      	add	r2, r1
 800ca40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca44:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ca48:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ca4c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	699b      	ldr	r3, [r3, #24]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d003      	beq.n	800ca5e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	68da      	ldr	r2, [r3, #12]
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	68da      	ldr	r2, [r3, #12]
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ca66:	693b      	ldr	r3, [r7, #16]
 800ca68:	015a      	lsls	r2, r3, #5
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	4413      	add	r3, r2
 800ca6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca72:	691b      	ldr	r3, [r3, #16]
 800ca74:	693a      	ldr	r2, [r7, #16]
 800ca76:	0151      	lsls	r1, r2, #5
 800ca78:	697a      	ldr	r2, [r7, #20]
 800ca7a:	440a      	add	r2, r1
 800ca7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ca84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ca86:	693b      	ldr	r3, [r7, #16]
 800ca88:	015a      	lsls	r2, r3, #5
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	4413      	add	r3, r2
 800ca8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca92:	691a      	ldr	r2, [r3, #16]
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	69db      	ldr	r3, [r3, #28]
 800ca98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ca9c:	6939      	ldr	r1, [r7, #16]
 800ca9e:	0148      	lsls	r0, r1, #5
 800caa0:	6979      	ldr	r1, [r7, #20]
 800caa2:	4401      	add	r1, r0
 800caa4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800caa8:	4313      	orrs	r3, r2
 800caaa:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800caac:	79fb      	ldrb	r3, [r7, #7]
 800caae:	2b01      	cmp	r3, #1
 800cab0:	d10d      	bne.n	800cace <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	691b      	ldr	r3, [r3, #16]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d009      	beq.n	800cace <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	6919      	ldr	r1, [r3, #16]
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	015a      	lsls	r2, r3, #5
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	4413      	add	r3, r2
 800cac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caca:	460a      	mov	r2, r1
 800cacc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cace:	693b      	ldr	r3, [r7, #16]
 800cad0:	015a      	lsls	r2, r3, #5
 800cad2:	697b      	ldr	r3, [r7, #20]
 800cad4:	4413      	add	r3, r2
 800cad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	693a      	ldr	r2, [r7, #16]
 800cade:	0151      	lsls	r1, r2, #5
 800cae0:	697a      	ldr	r2, [r7, #20]
 800cae2:	440a      	add	r2, r1
 800cae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cae8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800caec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800caee:	2300      	movs	r3, #0
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	371c      	adds	r7, #28
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr

0800cafc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cafc:	b480      	push	{r7}
 800cafe:	b087      	sub	sp, #28
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
 800cb04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cb06:	2300      	movs	r3, #0
 800cb08:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	785b      	ldrb	r3, [r3, #1]
 800cb16:	2b01      	cmp	r3, #1
 800cb18:	d14a      	bne.n	800cbb0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	781b      	ldrb	r3, [r3, #0]
 800cb1e:	015a      	lsls	r2, r3, #5
 800cb20:	693b      	ldr	r3, [r7, #16]
 800cb22:	4413      	add	r3, r2
 800cb24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb32:	f040 8086 	bne.w	800cc42 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	781b      	ldrb	r3, [r3, #0]
 800cb3a:	015a      	lsls	r2, r3, #5
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	4413      	add	r3, r2
 800cb40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	683a      	ldr	r2, [r7, #0]
 800cb48:	7812      	ldrb	r2, [r2, #0]
 800cb4a:	0151      	lsls	r1, r2, #5
 800cb4c:	693a      	ldr	r2, [r7, #16]
 800cb4e:	440a      	add	r2, r1
 800cb50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb54:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cb58:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	015a      	lsls	r2, r3, #5
 800cb60:	693b      	ldr	r3, [r7, #16]
 800cb62:	4413      	add	r3, r2
 800cb64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	683a      	ldr	r2, [r7, #0]
 800cb6c:	7812      	ldrb	r2, [r2, #0]
 800cb6e:	0151      	lsls	r1, r2, #5
 800cb70:	693a      	ldr	r2, [r7, #16]
 800cb72:	440a      	add	r2, r1
 800cb74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cb7c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	3301      	adds	r3, #1
 800cb82:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	f242 7210 	movw	r2, #10000	; 0x2710
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d902      	bls.n	800cb94 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800cb8e:	2301      	movs	r3, #1
 800cb90:	75fb      	strb	r3, [r7, #23]
          break;
 800cb92:	e056      	b.n	800cc42 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	781b      	ldrb	r3, [r3, #0]
 800cb98:	015a      	lsls	r2, r3, #5
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	4413      	add	r3, r2
 800cb9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cba8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cbac:	d0e7      	beq.n	800cb7e <USB_EPStopXfer+0x82>
 800cbae:	e048      	b.n	800cc42 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	781b      	ldrb	r3, [r3, #0]
 800cbb4:	015a      	lsls	r2, r3, #5
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	4413      	add	r3, r2
 800cbba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cbc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cbc8:	d13b      	bne.n	800cc42 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	781b      	ldrb	r3, [r3, #0]
 800cbce:	015a      	lsls	r2, r3, #5
 800cbd0:	693b      	ldr	r3, [r7, #16]
 800cbd2:	4413      	add	r3, r2
 800cbd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	683a      	ldr	r2, [r7, #0]
 800cbdc:	7812      	ldrb	r2, [r2, #0]
 800cbde:	0151      	lsls	r1, r2, #5
 800cbe0:	693a      	ldr	r2, [r7, #16]
 800cbe2:	440a      	add	r2, r1
 800cbe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbe8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cbec:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	015a      	lsls	r2, r3, #5
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	4413      	add	r3, r2
 800cbf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	683a      	ldr	r2, [r7, #0]
 800cc00:	7812      	ldrb	r2, [r2, #0]
 800cc02:	0151      	lsls	r1, r2, #5
 800cc04:	693a      	ldr	r2, [r7, #16]
 800cc06:	440a      	add	r2, r1
 800cc08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cc10:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	3301      	adds	r3, #1
 800cc16:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	f242 7210 	movw	r2, #10000	; 0x2710
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	d902      	bls.n	800cc28 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800cc22:	2301      	movs	r3, #1
 800cc24:	75fb      	strb	r3, [r7, #23]
          break;
 800cc26:	e00c      	b.n	800cc42 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	015a      	lsls	r2, r3, #5
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	4413      	add	r3, r2
 800cc32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc40:	d0e7      	beq.n	800cc12 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800cc42:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	371c      	adds	r7, #28
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4e:	4770      	bx	lr

0800cc50 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cc50:	b480      	push	{r7}
 800cc52:	b089      	sub	sp, #36	; 0x24
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	60f8      	str	r0, [r7, #12]
 800cc58:	60b9      	str	r1, [r7, #8]
 800cc5a:	4611      	mov	r1, r2
 800cc5c:	461a      	mov	r2, r3
 800cc5e:	460b      	mov	r3, r1
 800cc60:	71fb      	strb	r3, [r7, #7]
 800cc62:	4613      	mov	r3, r2
 800cc64:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800cc6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d123      	bne.n	800ccbe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cc76:	88bb      	ldrh	r3, [r7, #4]
 800cc78:	3303      	adds	r3, #3
 800cc7a:	089b      	lsrs	r3, r3, #2
 800cc7c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cc7e:	2300      	movs	r3, #0
 800cc80:	61bb      	str	r3, [r7, #24]
 800cc82:	e018      	b.n	800ccb6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cc84:	79fb      	ldrb	r3, [r7, #7]
 800cc86:	031a      	lsls	r2, r3, #12
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	4413      	add	r3, r2
 800cc8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc90:	461a      	mov	r2, r3
 800cc92:	69fb      	ldr	r3, [r7, #28]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cc98:	69fb      	ldr	r3, [r7, #28]
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cc9e:	69fb      	ldr	r3, [r7, #28]
 800cca0:	3301      	adds	r3, #1
 800cca2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cca4:	69fb      	ldr	r3, [r7, #28]
 800cca6:	3301      	adds	r3, #1
 800cca8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ccaa:	69fb      	ldr	r3, [r7, #28]
 800ccac:	3301      	adds	r3, #1
 800ccae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ccb0:	69bb      	ldr	r3, [r7, #24]
 800ccb2:	3301      	adds	r3, #1
 800ccb4:	61bb      	str	r3, [r7, #24]
 800ccb6:	69ba      	ldr	r2, [r7, #24]
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	429a      	cmp	r2, r3
 800ccbc:	d3e2      	bcc.n	800cc84 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ccbe:	2300      	movs	r3, #0
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3724      	adds	r7, #36	; 0x24
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccca:	4770      	bx	lr

0800cccc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cccc:	b480      	push	{r7}
 800ccce:	b08b      	sub	sp, #44	; 0x2c
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	60f8      	str	r0, [r7, #12]
 800ccd4:	60b9      	str	r1, [r7, #8]
 800ccd6:	4613      	mov	r3, r2
 800ccd8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800cce2:	88fb      	ldrh	r3, [r7, #6]
 800cce4:	089b      	lsrs	r3, r3, #2
 800cce6:	b29b      	uxth	r3, r3
 800cce8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ccea:	88fb      	ldrh	r3, [r7, #6]
 800ccec:	f003 0303 	and.w	r3, r3, #3
 800ccf0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	623b      	str	r3, [r7, #32]
 800ccf6:	e014      	b.n	800cd22 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ccf8:	69bb      	ldr	r3, [r7, #24]
 800ccfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccfe:	681a      	ldr	r2, [r3, #0]
 800cd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd02:	601a      	str	r2, [r3, #0]
    pDest++;
 800cd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd06:	3301      	adds	r3, #1
 800cd08:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cd0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd0c:	3301      	adds	r3, #1
 800cd0e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd12:	3301      	adds	r3, #1
 800cd14:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd18:	3301      	adds	r3, #1
 800cd1a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800cd1c:	6a3b      	ldr	r3, [r7, #32]
 800cd1e:	3301      	adds	r3, #1
 800cd20:	623b      	str	r3, [r7, #32]
 800cd22:	6a3a      	ldr	r2, [r7, #32]
 800cd24:	697b      	ldr	r3, [r7, #20]
 800cd26:	429a      	cmp	r2, r3
 800cd28:	d3e6      	bcc.n	800ccf8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800cd2a:	8bfb      	ldrh	r3, [r7, #30]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d01e      	beq.n	800cd6e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cd30:	2300      	movs	r3, #0
 800cd32:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cd34:	69bb      	ldr	r3, [r7, #24]
 800cd36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd3a:	461a      	mov	r2, r3
 800cd3c:	f107 0310 	add.w	r3, r7, #16
 800cd40:	6812      	ldr	r2, [r2, #0]
 800cd42:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800cd44:	693a      	ldr	r2, [r7, #16]
 800cd46:	6a3b      	ldr	r3, [r7, #32]
 800cd48:	b2db      	uxtb	r3, r3
 800cd4a:	00db      	lsls	r3, r3, #3
 800cd4c:	fa22 f303 	lsr.w	r3, r2, r3
 800cd50:	b2da      	uxtb	r2, r3
 800cd52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd54:	701a      	strb	r2, [r3, #0]
      i++;
 800cd56:	6a3b      	ldr	r3, [r7, #32]
 800cd58:	3301      	adds	r3, #1
 800cd5a:	623b      	str	r3, [r7, #32]
      pDest++;
 800cd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd5e:	3301      	adds	r3, #1
 800cd60:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800cd62:	8bfb      	ldrh	r3, [r7, #30]
 800cd64:	3b01      	subs	r3, #1
 800cd66:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800cd68:	8bfb      	ldrh	r3, [r7, #30]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d1ea      	bne.n	800cd44 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800cd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	372c      	adds	r7, #44	; 0x2c
 800cd74:	46bd      	mov	sp, r7
 800cd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7a:	4770      	bx	lr

0800cd7c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b085      	sub	sp, #20
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	781b      	ldrb	r3, [r3, #0]
 800cd8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	785b      	ldrb	r3, [r3, #1]
 800cd94:	2b01      	cmp	r3, #1
 800cd96:	d12c      	bne.n	800cdf2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	015a      	lsls	r2, r3, #5
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	4413      	add	r3, r2
 800cda0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	db12      	blt.n	800cdd0 <USB_EPSetStall+0x54>
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d00f      	beq.n	800cdd0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	015a      	lsls	r2, r3, #5
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	4413      	add	r3, r2
 800cdb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	68ba      	ldr	r2, [r7, #8]
 800cdc0:	0151      	lsls	r1, r2, #5
 800cdc2:	68fa      	ldr	r2, [r7, #12]
 800cdc4:	440a      	add	r2, r1
 800cdc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cdce:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	015a      	lsls	r2, r3, #5
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	4413      	add	r3, r2
 800cdd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	68ba      	ldr	r2, [r7, #8]
 800cde0:	0151      	lsls	r1, r2, #5
 800cde2:	68fa      	ldr	r2, [r7, #12]
 800cde4:	440a      	add	r2, r1
 800cde6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cdee:	6013      	str	r3, [r2, #0]
 800cdf0:	e02b      	b.n	800ce4a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	015a      	lsls	r2, r3, #5
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	4413      	add	r3, r2
 800cdfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	db12      	blt.n	800ce2a <USB_EPSetStall+0xae>
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d00f      	beq.n	800ce2a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	015a      	lsls	r2, r3, #5
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	4413      	add	r3, r2
 800ce12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	68ba      	ldr	r2, [r7, #8]
 800ce1a:	0151      	lsls	r1, r2, #5
 800ce1c:	68fa      	ldr	r2, [r7, #12]
 800ce1e:	440a      	add	r2, r1
 800ce20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ce28:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	015a      	lsls	r2, r3, #5
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	4413      	add	r3, r2
 800ce32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	68ba      	ldr	r2, [r7, #8]
 800ce3a:	0151      	lsls	r1, r2, #5
 800ce3c:	68fa      	ldr	r2, [r7, #12]
 800ce3e:	440a      	add	r2, r1
 800ce40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ce48:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ce4a:	2300      	movs	r3, #0
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3714      	adds	r7, #20
 800ce50:	46bd      	mov	sp, r7
 800ce52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce56:	4770      	bx	lr

0800ce58 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b085      	sub	sp, #20
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
 800ce60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	781b      	ldrb	r3, [r3, #0]
 800ce6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	785b      	ldrb	r3, [r3, #1]
 800ce70:	2b01      	cmp	r3, #1
 800ce72:	d128      	bne.n	800cec6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	015a      	lsls	r2, r3, #5
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	4413      	add	r3, r2
 800ce7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	68ba      	ldr	r2, [r7, #8]
 800ce84:	0151      	lsls	r1, r2, #5
 800ce86:	68fa      	ldr	r2, [r7, #12]
 800ce88:	440a      	add	r2, r1
 800ce8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ce92:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	791b      	ldrb	r3, [r3, #4]
 800ce98:	2b03      	cmp	r3, #3
 800ce9a:	d003      	beq.n	800cea4 <USB_EPClearStall+0x4c>
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	791b      	ldrb	r3, [r3, #4]
 800cea0:	2b02      	cmp	r3, #2
 800cea2:	d138      	bne.n	800cf16 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	015a      	lsls	r2, r3, #5
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	4413      	add	r3, r2
 800ceac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	68ba      	ldr	r2, [r7, #8]
 800ceb4:	0151      	lsls	r1, r2, #5
 800ceb6:	68fa      	ldr	r2, [r7, #12]
 800ceb8:	440a      	add	r2, r1
 800ceba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cec2:	6013      	str	r3, [r2, #0]
 800cec4:	e027      	b.n	800cf16 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	015a      	lsls	r2, r3, #5
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	4413      	add	r3, r2
 800cece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	68ba      	ldr	r2, [r7, #8]
 800ced6:	0151      	lsls	r1, r2, #5
 800ced8:	68fa      	ldr	r2, [r7, #12]
 800ceda:	440a      	add	r2, r1
 800cedc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cee0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cee4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	791b      	ldrb	r3, [r3, #4]
 800ceea:	2b03      	cmp	r3, #3
 800ceec:	d003      	beq.n	800cef6 <USB_EPClearStall+0x9e>
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	791b      	ldrb	r3, [r3, #4]
 800cef2:	2b02      	cmp	r3, #2
 800cef4:	d10f      	bne.n	800cf16 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	015a      	lsls	r2, r3, #5
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	4413      	add	r3, r2
 800cefe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	68ba      	ldr	r2, [r7, #8]
 800cf06:	0151      	lsls	r1, r2, #5
 800cf08:	68fa      	ldr	r2, [r7, #12]
 800cf0a:	440a      	add	r2, r1
 800cf0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf14:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cf16:	2300      	movs	r3, #0
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	3714      	adds	r7, #20
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf22:	4770      	bx	lr

0800cf24 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cf24:	b480      	push	{r7}
 800cf26:	b085      	sub	sp, #20
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
 800cf2c:	460b      	mov	r3, r1
 800cf2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	68fa      	ldr	r2, [r7, #12]
 800cf3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf42:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cf46:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf4e:	681a      	ldr	r2, [r3, #0]
 800cf50:	78fb      	ldrb	r3, [r7, #3]
 800cf52:	011b      	lsls	r3, r3, #4
 800cf54:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800cf58:	68f9      	ldr	r1, [r7, #12]
 800cf5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf5e:	4313      	orrs	r3, r2
 800cf60:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cf62:	2300      	movs	r3, #0
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3714      	adds	r7, #20
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6e:	4770      	bx	lr

0800cf70 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cf70:	b480      	push	{r7}
 800cf72:	b085      	sub	sp, #20
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	68fa      	ldr	r2, [r7, #12]
 800cf86:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cf8a:	f023 0303 	bic.w	r3, r3, #3
 800cf8e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf96:	685b      	ldr	r3, [r3, #4]
 800cf98:	68fa      	ldr	r2, [r7, #12]
 800cf9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf9e:	f023 0302 	bic.w	r3, r3, #2
 800cfa2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cfa4:	2300      	movs	r3, #0
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	3714      	adds	r7, #20
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb0:	4770      	bx	lr

0800cfb2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cfb2:	b480      	push	{r7}
 800cfb4:	b085      	sub	sp, #20
 800cfb6:	af00      	add	r7, sp, #0
 800cfb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	68fa      	ldr	r2, [r7, #12]
 800cfc8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cfcc:	f023 0303 	bic.w	r3, r3, #3
 800cfd0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfd8:	685b      	ldr	r3, [r3, #4]
 800cfda:	68fa      	ldr	r2, [r7, #12]
 800cfdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cfe0:	f043 0302 	orr.w	r3, r3, #2
 800cfe4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cfe6:	2300      	movs	r3, #0
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	3714      	adds	r7, #20
 800cfec:	46bd      	mov	sp, r7
 800cfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff2:	4770      	bx	lr

0800cff4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800cff4:	b480      	push	{r7}
 800cff6:	b085      	sub	sp, #20
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	695b      	ldr	r3, [r3, #20]
 800d000:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	699b      	ldr	r3, [r3, #24]
 800d006:	68fa      	ldr	r2, [r7, #12]
 800d008:	4013      	ands	r3, r2
 800d00a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d00c:	68fb      	ldr	r3, [r7, #12]
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3714      	adds	r7, #20
 800d012:	46bd      	mov	sp, r7
 800d014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d018:	4770      	bx	lr

0800d01a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d01a:	b480      	push	{r7}
 800d01c:	b085      	sub	sp, #20
 800d01e:	af00      	add	r7, sp, #0
 800d020:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d02c:	699b      	ldr	r3, [r3, #24]
 800d02e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d036:	69db      	ldr	r3, [r3, #28]
 800d038:	68ba      	ldr	r2, [r7, #8]
 800d03a:	4013      	ands	r3, r2
 800d03c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	0c1b      	lsrs	r3, r3, #16
}
 800d042:	4618      	mov	r0, r3
 800d044:	3714      	adds	r7, #20
 800d046:	46bd      	mov	sp, r7
 800d048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04c:	4770      	bx	lr

0800d04e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d04e:	b480      	push	{r7}
 800d050:	b085      	sub	sp, #20
 800d052:	af00      	add	r7, sp, #0
 800d054:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d060:	699b      	ldr	r3, [r3, #24]
 800d062:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d06a:	69db      	ldr	r3, [r3, #28]
 800d06c:	68ba      	ldr	r2, [r7, #8]
 800d06e:	4013      	ands	r3, r2
 800d070:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	b29b      	uxth	r3, r3
}
 800d076:	4618      	mov	r0, r3
 800d078:	3714      	adds	r7, #20
 800d07a:	46bd      	mov	sp, r7
 800d07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d080:	4770      	bx	lr

0800d082 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d082:	b480      	push	{r7}
 800d084:	b085      	sub	sp, #20
 800d086:	af00      	add	r7, sp, #0
 800d088:	6078      	str	r0, [r7, #4]
 800d08a:	460b      	mov	r3, r1
 800d08c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d092:	78fb      	ldrb	r3, [r7, #3]
 800d094:	015a      	lsls	r2, r3, #5
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	4413      	add	r3, r2
 800d09a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d09e:	689b      	ldr	r3, [r3, #8]
 800d0a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0a8:	695b      	ldr	r3, [r3, #20]
 800d0aa:	68ba      	ldr	r2, [r7, #8]
 800d0ac:	4013      	ands	r3, r2
 800d0ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d0b0:	68bb      	ldr	r3, [r7, #8]
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	3714      	adds	r7, #20
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0bc:	4770      	bx	lr

0800d0be <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d0be:	b480      	push	{r7}
 800d0c0:	b087      	sub	sp, #28
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
 800d0c6:	460b      	mov	r3, r1
 800d0c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0d4:	691b      	ldr	r3, [r3, #16]
 800d0d6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0e0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d0e2:	78fb      	ldrb	r3, [r7, #3]
 800d0e4:	f003 030f 	and.w	r3, r3, #15
 800d0e8:	68fa      	ldr	r2, [r7, #12]
 800d0ea:	fa22 f303 	lsr.w	r3, r2, r3
 800d0ee:	01db      	lsls	r3, r3, #7
 800d0f0:	b2db      	uxtb	r3, r3
 800d0f2:	693a      	ldr	r2, [r7, #16]
 800d0f4:	4313      	orrs	r3, r2
 800d0f6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d0f8:	78fb      	ldrb	r3, [r7, #3]
 800d0fa:	015a      	lsls	r2, r3, #5
 800d0fc:	697b      	ldr	r3, [r7, #20]
 800d0fe:	4413      	add	r3, r2
 800d100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d104:	689b      	ldr	r3, [r3, #8]
 800d106:	693a      	ldr	r2, [r7, #16]
 800d108:	4013      	ands	r3, r2
 800d10a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d10c:	68bb      	ldr	r3, [r7, #8]
}
 800d10e:	4618      	mov	r0, r3
 800d110:	371c      	adds	r7, #28
 800d112:	46bd      	mov	sp, r7
 800d114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d118:	4770      	bx	lr

0800d11a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d11a:	b480      	push	{r7}
 800d11c:	b083      	sub	sp, #12
 800d11e:	af00      	add	r7, sp, #0
 800d120:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	695b      	ldr	r3, [r3, #20]
 800d126:	f003 0301 	and.w	r3, r3, #1
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	370c      	adds	r7, #12
 800d12e:	46bd      	mov	sp, r7
 800d130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d134:	4770      	bx	lr

0800d136 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d136:	b480      	push	{r7}
 800d138:	b085      	sub	sp, #20
 800d13a:	af00      	add	r7, sp, #0
 800d13c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	68fa      	ldr	r2, [r7, #12]
 800d14c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d150:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d154:	f023 0307 	bic.w	r3, r3, #7
 800d158:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d160:	685b      	ldr	r3, [r3, #4]
 800d162:	68fa      	ldr	r2, [r7, #12]
 800d164:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d16c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d16e:	2300      	movs	r3, #0
}
 800d170:	4618      	mov	r0, r3
 800d172:	3714      	adds	r7, #20
 800d174:	46bd      	mov	sp, r7
 800d176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17a:	4770      	bx	lr

0800d17c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d17c:	b480      	push	{r7}
 800d17e:	b087      	sub	sp, #28
 800d180:	af00      	add	r7, sp, #0
 800d182:	60f8      	str	r0, [r7, #12]
 800d184:	460b      	mov	r3, r1
 800d186:	607a      	str	r2, [r7, #4]
 800d188:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	333c      	adds	r3, #60	; 0x3c
 800d192:	3304      	adds	r3, #4
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d198:	693b      	ldr	r3, [r7, #16]
 800d19a:	4a26      	ldr	r2, [pc, #152]	; (800d234 <USB_EP0_OutStart+0xb8>)
 800d19c:	4293      	cmp	r3, r2
 800d19e:	d90a      	bls.n	800d1b6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d1ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d1b0:	d101      	bne.n	800d1b6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	e037      	b.n	800d226 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1bc:	461a      	mov	r2, r3
 800d1be:	2300      	movs	r3, #0
 800d1c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1c8:	691b      	ldr	r3, [r3, #16]
 800d1ca:	697a      	ldr	r2, [r7, #20]
 800d1cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d1d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1dc:	691b      	ldr	r3, [r3, #16]
 800d1de:	697a      	ldr	r2, [r7, #20]
 800d1e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1e4:	f043 0318 	orr.w	r3, r3, #24
 800d1e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d1ea:	697b      	ldr	r3, [r7, #20]
 800d1ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1f0:	691b      	ldr	r3, [r3, #16]
 800d1f2:	697a      	ldr	r2, [r7, #20]
 800d1f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1f8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d1fc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d1fe:	7afb      	ldrb	r3, [r7, #11]
 800d200:	2b01      	cmp	r3, #1
 800d202:	d10f      	bne.n	800d224 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d20a:	461a      	mov	r2, r3
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	697a      	ldr	r2, [r7, #20]
 800d21a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d21e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d222:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d224:	2300      	movs	r3, #0
}
 800d226:	4618      	mov	r0, r3
 800d228:	371c      	adds	r7, #28
 800d22a:	46bd      	mov	sp, r7
 800d22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d230:	4770      	bx	lr
 800d232:	bf00      	nop
 800d234:	4f54300a 	.word	0x4f54300a

0800d238 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d238:	b480      	push	{r7}
 800d23a:	b085      	sub	sp, #20
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d240:	2300      	movs	r3, #0
 800d242:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	3301      	adds	r3, #1
 800d248:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	4a13      	ldr	r2, [pc, #76]	; (800d29c <USB_CoreReset+0x64>)
 800d24e:	4293      	cmp	r3, r2
 800d250:	d901      	bls.n	800d256 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d252:	2303      	movs	r3, #3
 800d254:	e01b      	b.n	800d28e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	691b      	ldr	r3, [r3, #16]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	daf2      	bge.n	800d244 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d25e:	2300      	movs	r3, #0
 800d260:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	691b      	ldr	r3, [r3, #16]
 800d266:	f043 0201 	orr.w	r2, r3, #1
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	3301      	adds	r3, #1
 800d272:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	4a09      	ldr	r2, [pc, #36]	; (800d29c <USB_CoreReset+0x64>)
 800d278:	4293      	cmp	r3, r2
 800d27a:	d901      	bls.n	800d280 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d27c:	2303      	movs	r3, #3
 800d27e:	e006      	b.n	800d28e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	691b      	ldr	r3, [r3, #16]
 800d284:	f003 0301 	and.w	r3, r3, #1
 800d288:	2b01      	cmp	r3, #1
 800d28a:	d0f0      	beq.n	800d26e <USB_CoreReset+0x36>

  return HAL_OK;
 800d28c:	2300      	movs	r3, #0
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3714      	adds	r7, #20
 800d292:	46bd      	mov	sp, r7
 800d294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d298:	4770      	bx	lr
 800d29a:	bf00      	nop
 800d29c:	00030d40 	.word	0x00030d40

0800d2a0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d2a4:	4904      	ldr	r1, [pc, #16]	; (800d2b8 <MX_FATFS_Init+0x18>)
 800d2a6:	4805      	ldr	r0, [pc, #20]	; (800d2bc <MX_FATFS_Init+0x1c>)
 800d2a8:	f006 ff7e 	bl	80141a8 <FATFS_LinkDriver>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	461a      	mov	r2, r3
 800d2b0:	4b03      	ldr	r3, [pc, #12]	; (800d2c0 <MX_FATFS_Init+0x20>)
 800d2b2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
	/* additional user code for init */

  /* USER CODE END Init */
}
 800d2b4:	bf00      	nop
 800d2b6:	bd80      	pop	{r7, pc}
 800d2b8:	20003210 	.word	0x20003210
 800d2bc:	0801d9e0 	.word	0x0801d9e0
 800d2c0:	2000320c 	.word	0x2000320c

0800d2c4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d2c4:	b480      	push	{r7}
 800d2c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
	return 0;
 800d2c8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d2:	4770      	bx	lr

0800d2d4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b082      	sub	sp, #8
 800d2d8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d2da:	2300      	movs	r3, #0
 800d2dc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d2de:	f000 f888 	bl	800d3f2 <BSP_SD_IsDetected>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	2b01      	cmp	r3, #1
 800d2e6:	d001      	beq.n	800d2ec <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	e005      	b.n	800d2f8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d2ec:	4804      	ldr	r0, [pc, #16]	; (800d300 <BSP_SD_Init+0x2c>)
 800d2ee:	f7fb f9af 	bl	8008650 <HAL_SD_Init>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800d2f6:	79fb      	ldrb	r3, [r7, #7]
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3708      	adds	r7, #8
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}
 800d300:	20002874 	.word	0x20002874

0800d304 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b086      	sub	sp, #24
 800d308:	af00      	add	r7, sp, #0
 800d30a:	60f8      	str	r0, [r7, #12]
 800d30c:	60b9      	str	r1, [r7, #8]
 800d30e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d310:	2300      	movs	r3, #0
 800d312:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	68ba      	ldr	r2, [r7, #8]
 800d318:	68f9      	ldr	r1, [r7, #12]
 800d31a:	4806      	ldr	r0, [pc, #24]	; (800d334 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d31c:	f7fb fdac 	bl	8008e78 <HAL_SD_ReadBlocks_DMA>
 800d320:	4603      	mov	r3, r0
 800d322:	2b00      	cmp	r3, #0
 800d324:	d001      	beq.n	800d32a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d326:	2301      	movs	r3, #1
 800d328:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d32a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	3718      	adds	r7, #24
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}
 800d334:	20002874 	.word	0x20002874

0800d338 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b086      	sub	sp, #24
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	60f8      	str	r0, [r7, #12]
 800d340:	60b9      	str	r1, [r7, #8]
 800d342:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d344:	2300      	movs	r3, #0
 800d346:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	68ba      	ldr	r2, [r7, #8]
 800d34c:	68f9      	ldr	r1, [r7, #12]
 800d34e:	4806      	ldr	r0, [pc, #24]	; (800d368 <BSP_SD_WriteBlocks_DMA+0x30>)
 800d350:	f7fb fe72 	bl	8009038 <HAL_SD_WriteBlocks_DMA>
 800d354:	4603      	mov	r3, r0
 800d356:	2b00      	cmp	r3, #0
 800d358:	d001      	beq.n	800d35e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d35a:	2301      	movs	r3, #1
 800d35c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d35e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d360:	4618      	mov	r0, r3
 800d362:	3718      	adds	r7, #24
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}
 800d368:	20002874 	.word	0x20002874

0800d36c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d370:	4805      	ldr	r0, [pc, #20]	; (800d388 <BSP_SD_GetCardState+0x1c>)
 800d372:	f7fc fa93 	bl	800989c <HAL_SD_GetCardState>
 800d376:	4603      	mov	r3, r0
 800d378:	2b04      	cmp	r3, #4
 800d37a:	bf14      	ite	ne
 800d37c:	2301      	movne	r3, #1
 800d37e:	2300      	moveq	r3, #0
 800d380:	b2db      	uxtb	r3, r3
}
 800d382:	4618      	mov	r0, r3
 800d384:	bd80      	pop	{r7, pc}
 800d386:	bf00      	nop
 800d388:	20002874 	.word	0x20002874

0800d38c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b082      	sub	sp, #8
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d394:	6879      	ldr	r1, [r7, #4]
 800d396:	4803      	ldr	r0, [pc, #12]	; (800d3a4 <BSP_SD_GetCardInfo+0x18>)
 800d398:	f7fc fa54 	bl	8009844 <HAL_SD_GetCardInfo>
}
 800d39c:	bf00      	nop
 800d39e:	3708      	adds	r7, #8
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}
 800d3a4:	20002874 	.word	0x20002874

0800d3a8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800d3b0:	f000 f818 	bl	800d3e4 <BSP_SD_AbortCallback>
}
 800d3b4:	bf00      	nop
 800d3b6:	3708      	adds	r7, #8
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}

0800d3bc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b082      	sub	sp, #8
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d3c4:	f000 f9c4 	bl	800d750 <BSP_SD_WriteCpltCallback>
}
 800d3c8:	bf00      	nop
 800d3ca:	3708      	adds	r7, #8
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}

0800d3d0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b082      	sub	sp, #8
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d3d8:	f000 f9c8 	bl	800d76c <BSP_SD_ReadCpltCallback>
}
 800d3dc:	bf00      	nop
 800d3de:	3708      	adds	r7, #8
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}

0800d3e4 <BSP_SD_AbortCallback>:
 * @brief BSP SD Abort callback
 * @retval None
 * @note empty (up to the user to fill it in or to remove it if useless)
 */
__weak void BSP_SD_AbortCallback(void)
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	af00      	add	r7, sp, #0

}
 800d3e8:	bf00      	nop
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f0:	4770      	bx	lr

0800d3f2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d3f2:	b580      	push	{r7, lr}
 800d3f4:	b082      	sub	sp, #8
 800d3f6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d3fc:	f000 f80c 	bl	800d418 <BSP_PlatformIsDetected>
 800d400:	4603      	mov	r3, r0
 800d402:	2b00      	cmp	r3, #0
 800d404:	d101      	bne.n	800d40a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d406:	2300      	movs	r3, #0
 800d408:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d40a:	79fb      	ldrb	r3, [r7, #7]
 800d40c:	b2db      	uxtb	r3, r3
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3708      	adds	r7, #8
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}
	...

0800d418 <BSP_PlatformIsDetected>:
 ******************************************************************************
 */
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d418:	b580      	push	{r7, lr}
 800d41a:	b082      	sub	sp, #8
 800d41c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d41e:	2301      	movs	r3, #1
 800d420:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d422:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d426:	4806      	ldr	r0, [pc, #24]	; (800d440 <BSP_PlatformIsDetected+0x28>)
 800d428:	f7f7 ff5c 	bl	80052e4 <HAL_GPIO_ReadPin>
 800d42c:	4603      	mov	r3, r0
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d001      	beq.n	800d436 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d432:	2300      	movs	r3, #0
 800d434:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
	/* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d436:	79fb      	ldrb	r3, [r7, #7]
}
 800d438:	4618      	mov	r0, r3
 800d43a:	3708      	adds	r7, #8
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}
 800d440:	40020000 	.word	0x40020000

0800d444 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b084      	sub	sp, #16
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800d44c:	f006 ff44 	bl	80142d8 <osKernelSysTick>
 800d450:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800d452:	e006      	b.n	800d462 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d454:	f7ff ff8a 	bl	800d36c <BSP_SD_GetCardState>
 800d458:	4603      	mov	r3, r0
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d101      	bne.n	800d462 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d45e:	2300      	movs	r3, #0
 800d460:	e009      	b.n	800d476 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800d462:	f006 ff39 	bl	80142d8 <osKernelSysTick>
 800d466:	4602      	mov	r2, r0
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	1ad3      	subs	r3, r2, r3
 800d46c:	687a      	ldr	r2, [r7, #4]
 800d46e:	429a      	cmp	r2, r3
 800d470:	d8f0      	bhi.n	800d454 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d472:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d476:	4618      	mov	r0, r3
 800d478:	3710      	adds	r7, #16
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}
	...

0800d480 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b082      	sub	sp, #8
 800d484:	af00      	add	r7, sp, #0
 800d486:	4603      	mov	r3, r0
 800d488:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d48a:	4b0b      	ldr	r3, [pc, #44]	; (800d4b8 <SD_CheckStatus+0x38>)
 800d48c:	2201      	movs	r2, #1
 800d48e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d490:	f7ff ff6c 	bl	800d36c <BSP_SD_GetCardState>
 800d494:	4603      	mov	r3, r0
 800d496:	2b00      	cmp	r3, #0
 800d498:	d107      	bne.n	800d4aa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d49a:	4b07      	ldr	r3, [pc, #28]	; (800d4b8 <SD_CheckStatus+0x38>)
 800d49c:	781b      	ldrb	r3, [r3, #0]
 800d49e:	b2db      	uxtb	r3, r3
 800d4a0:	f023 0301 	bic.w	r3, r3, #1
 800d4a4:	b2da      	uxtb	r2, r3
 800d4a6:	4b04      	ldr	r3, [pc, #16]	; (800d4b8 <SD_CheckStatus+0x38>)
 800d4a8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d4aa:	4b03      	ldr	r3, [pc, #12]	; (800d4b8 <SD_CheckStatus+0x38>)
 800d4ac:	781b      	ldrb	r3, [r3, #0]
 800d4ae:	b2db      	uxtb	r3, r3
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	3708      	adds	r7, #8
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}
 800d4b8:	20000011 	.word	0x20000011

0800d4bc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d4bc:	b590      	push	{r4, r7, lr}
 800d4be:	b087      	sub	sp, #28
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d4c6:	4b20      	ldr	r3, [pc, #128]	; (800d548 <SD_initialize+0x8c>)
 800d4c8:	2201      	movs	r2, #1
 800d4ca:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800d4cc:	f006 fef8 	bl	80142c0 <osKernelRunning>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d030      	beq.n	800d538 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800d4d6:	f7ff fefd 	bl	800d2d4 <BSP_SD_Init>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d107      	bne.n	800d4f0 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800d4e0:	79fb      	ldrb	r3, [r7, #7]
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f7ff ffcc 	bl	800d480 <SD_CheckStatus>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	461a      	mov	r2, r3
 800d4ec:	4b16      	ldr	r3, [pc, #88]	; (800d548 <SD_initialize+0x8c>)
 800d4ee:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800d4f0:	4b15      	ldr	r3, [pc, #84]	; (800d548 <SD_initialize+0x8c>)
 800d4f2:	781b      	ldrb	r3, [r3, #0]
 800d4f4:	b2db      	uxtb	r3, r3
 800d4f6:	2b01      	cmp	r3, #1
 800d4f8:	d01e      	beq.n	800d538 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800d4fa:	4b14      	ldr	r3, [pc, #80]	; (800d54c <SD_initialize+0x90>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d10e      	bne.n	800d520 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800d502:	4b13      	ldr	r3, [pc, #76]	; (800d550 <SD_initialize+0x94>)
 800d504:	f107 0408 	add.w	r4, r7, #8
 800d508:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d50a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800d50e:	f107 0308 	add.w	r3, r7, #8
 800d512:	2100      	movs	r1, #0
 800d514:	4618      	mov	r0, r3
 800d516:	f007 f818 	bl	801454a <osMessageCreate>
 800d51a:	4603      	mov	r3, r0
 800d51c:	4a0b      	ldr	r2, [pc, #44]	; (800d54c <SD_initialize+0x90>)
 800d51e:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800d520:	4b0a      	ldr	r3, [pc, #40]	; (800d54c <SD_initialize+0x90>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d107      	bne.n	800d538 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800d528:	4b07      	ldr	r3, [pc, #28]	; (800d548 <SD_initialize+0x8c>)
 800d52a:	781b      	ldrb	r3, [r3, #0]
 800d52c:	b2db      	uxtb	r3, r3
 800d52e:	f043 0301 	orr.w	r3, r3, #1
 800d532:	b2da      	uxtb	r2, r3
 800d534:	4b04      	ldr	r3, [pc, #16]	; (800d548 <SD_initialize+0x8c>)
 800d536:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800d538:	4b03      	ldr	r3, [pc, #12]	; (800d548 <SD_initialize+0x8c>)
 800d53a:	781b      	ldrb	r3, [r3, #0]
 800d53c:	b2db      	uxtb	r3, r3
}
 800d53e:	4618      	mov	r0, r3
 800d540:	371c      	adds	r7, #28
 800d542:	46bd      	mov	sp, r7
 800d544:	bd90      	pop	{r4, r7, pc}
 800d546:	bf00      	nop
 800d548:	20000011 	.word	0x20000011
 800d54c:	20003214 	.word	0x20003214
 800d550:	0801d1a8 	.word	0x0801d1a8

0800d554 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b082      	sub	sp, #8
 800d558:	af00      	add	r7, sp, #0
 800d55a:	4603      	mov	r3, r0
 800d55c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d55e:	79fb      	ldrb	r3, [r7, #7]
 800d560:	4618      	mov	r0, r3
 800d562:	f7ff ff8d 	bl	800d480 <SD_CheckStatus>
 800d566:	4603      	mov	r3, r0
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3708      	adds	r7, #8
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b08a      	sub	sp, #40	; 0x28
 800d574:	af00      	add	r7, sp, #0
 800d576:	60b9      	str	r1, [r7, #8]
 800d578:	607a      	str	r2, [r7, #4]
 800d57a:	603b      	str	r3, [r7, #0]
 800d57c:	4603      	mov	r3, r0
 800d57e:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800d580:	2301      	movs	r3, #1
 800d582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d586:	f247 5030 	movw	r0, #30000	; 0x7530
 800d58a:	f7ff ff5b 	bl	800d444 <SD_CheckStatusWithTimeout>
 800d58e:	4603      	mov	r3, r0
 800d590:	2b00      	cmp	r3, #0
 800d592:	da02      	bge.n	800d59a <SD_read+0x2a>
  {
    return res;
 800d594:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d598:	e032      	b.n	800d600 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800d59a:	683a      	ldr	r2, [r7, #0]
 800d59c:	6879      	ldr	r1, [r7, #4]
 800d59e:	68b8      	ldr	r0, [r7, #8]
 800d5a0:	f7ff feb0 	bl	800d304 <BSP_SD_ReadBlocks_DMA>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800d5aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d124      	bne.n	800d5fc <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800d5b2:	4b15      	ldr	r3, [pc, #84]	; (800d608 <SD_read+0x98>)
 800d5b4:	6819      	ldr	r1, [r3, #0]
 800d5b6:	f107 0314 	add.w	r3, r7, #20
 800d5ba:	f247 5230 	movw	r2, #30000	; 0x7530
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f007 f82c 	bl	801461c <osMessageGet>

    if (event.status == osEventMessage)
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	2b10      	cmp	r3, #16
 800d5c8:	d118      	bne.n	800d5fc <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800d5ca:	69bb      	ldr	r3, [r7, #24]
 800d5cc:	2b01      	cmp	r3, #1
 800d5ce:	d115      	bne.n	800d5fc <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800d5d0:	f006 fe82 	bl	80142d8 <osKernelSysTick>
 800d5d4:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800d5d6:	e008      	b.n	800d5ea <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d5d8:	f7ff fec8 	bl	800d36c <BSP_SD_GetCardState>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d103      	bne.n	800d5ea <SD_read+0x7a>
              {
                res = RES_OK;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800d5e8:	e008      	b.n	800d5fc <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800d5ea:	f006 fe75 	bl	80142d8 <osKernelSysTick>
 800d5ee:	4602      	mov	r2, r0
 800d5f0:	6a3b      	ldr	r3, [r7, #32]
 800d5f2:	1ad3      	subs	r3, r2, r3
 800d5f4:	f247 522f 	movw	r2, #29999	; 0x752f
 800d5f8:	4293      	cmp	r3, r2
 800d5fa:	d9ed      	bls.n	800d5d8 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800d5fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d600:	4618      	mov	r0, r3
 800d602:	3728      	adds	r7, #40	; 0x28
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}
 800d608:	20003214 	.word	0x20003214

0800d60c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b08a      	sub	sp, #40	; 0x28
 800d610:	af00      	add	r7, sp, #0
 800d612:	60b9      	str	r1, [r7, #8]
 800d614:	607a      	str	r2, [r7, #4]
 800d616:	603b      	str	r3, [r7, #0]
 800d618:	4603      	mov	r3, r0
 800d61a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d61c:	2301      	movs	r3, #1
 800d61e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d622:	f247 5030 	movw	r0, #30000	; 0x7530
 800d626:	f7ff ff0d 	bl	800d444 <SD_CheckStatusWithTimeout>
 800d62a:	4603      	mov	r3, r0
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	da02      	bge.n	800d636 <SD_write+0x2a>
  {
    return res;
 800d630:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d634:	e02e      	b.n	800d694 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d636:	683a      	ldr	r2, [r7, #0]
 800d638:	6879      	ldr	r1, [r7, #4]
 800d63a:	68b8      	ldr	r0, [r7, #8]
 800d63c:	f7ff fe7c 	bl	800d338 <BSP_SD_WriteBlocks_DMA>
 800d640:	4603      	mov	r3, r0
 800d642:	2b00      	cmp	r3, #0
 800d644:	d124      	bne.n	800d690 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800d646:	4b15      	ldr	r3, [pc, #84]	; (800d69c <SD_write+0x90>)
 800d648:	6819      	ldr	r1, [r3, #0]
 800d64a:	f107 0314 	add.w	r3, r7, #20
 800d64e:	f247 5230 	movw	r2, #30000	; 0x7530
 800d652:	4618      	mov	r0, r3
 800d654:	f006 ffe2 	bl	801461c <osMessageGet>

    if (event.status == osEventMessage)
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	2b10      	cmp	r3, #16
 800d65c:	d118      	bne.n	800d690 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800d65e:	69bb      	ldr	r3, [r7, #24]
 800d660:	2b02      	cmp	r3, #2
 800d662:	d115      	bne.n	800d690 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800d664:	f006 fe38 	bl	80142d8 <osKernelSysTick>
 800d668:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800d66a:	e008      	b.n	800d67e <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d66c:	f7ff fe7e 	bl	800d36c <BSP_SD_GetCardState>
 800d670:	4603      	mov	r3, r0
 800d672:	2b00      	cmp	r3, #0
 800d674:	d103      	bne.n	800d67e <SD_write+0x72>
          {
            res = RES_OK;
 800d676:	2300      	movs	r3, #0
 800d678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800d67c:	e008      	b.n	800d690 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800d67e:	f006 fe2b 	bl	80142d8 <osKernelSysTick>
 800d682:	4602      	mov	r2, r0
 800d684:	6a3b      	ldr	r3, [r7, #32]
 800d686:	1ad3      	subs	r3, r2, r3
 800d688:	f247 522f 	movw	r2, #29999	; 0x752f
 800d68c:	4293      	cmp	r3, r2
 800d68e:	d9ed      	bls.n	800d66c <SD_write+0x60>
    }

  }
#endif

  return res;
 800d690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d694:	4618      	mov	r0, r3
 800d696:	3728      	adds	r7, #40	; 0x28
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}
 800d69c:	20003214 	.word	0x20003214

0800d6a0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b08c      	sub	sp, #48	; 0x30
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	603a      	str	r2, [r7, #0]
 800d6aa:	71fb      	strb	r3, [r7, #7]
 800d6ac:	460b      	mov	r3, r1
 800d6ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d6b6:	4b25      	ldr	r3, [pc, #148]	; (800d74c <SD_ioctl+0xac>)
 800d6b8:	781b      	ldrb	r3, [r3, #0]
 800d6ba:	b2db      	uxtb	r3, r3
 800d6bc:	f003 0301 	and.w	r3, r3, #1
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d001      	beq.n	800d6c8 <SD_ioctl+0x28>
 800d6c4:	2303      	movs	r3, #3
 800d6c6:	e03c      	b.n	800d742 <SD_ioctl+0xa2>

  switch (cmd)
 800d6c8:	79bb      	ldrb	r3, [r7, #6]
 800d6ca:	2b03      	cmp	r3, #3
 800d6cc:	d834      	bhi.n	800d738 <SD_ioctl+0x98>
 800d6ce:	a201      	add	r2, pc, #4	; (adr r2, 800d6d4 <SD_ioctl+0x34>)
 800d6d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6d4:	0800d6e5 	.word	0x0800d6e5
 800d6d8:	0800d6ed 	.word	0x0800d6ed
 800d6dc:	0800d705 	.word	0x0800d705
 800d6e0:	0800d71f 	.word	0x0800d71f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d6ea:	e028      	b.n	800d73e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d6ec:	f107 030c 	add.w	r3, r7, #12
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f7ff fe4b 	bl	800d38c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d6f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d702:	e01c      	b.n	800d73e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d704:	f107 030c 	add.w	r3, r7, #12
 800d708:	4618      	mov	r0, r3
 800d70a:	f7ff fe3f 	bl	800d38c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d710:	b29a      	uxth	r2, r3
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d716:	2300      	movs	r3, #0
 800d718:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d71c:	e00f      	b.n	800d73e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d71e:	f107 030c 	add.w	r3, r7, #12
 800d722:	4618      	mov	r0, r3
 800d724:	f7ff fe32 	bl	800d38c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d72a:	0a5a      	lsrs	r2, r3, #9
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d730:	2300      	movs	r3, #0
 800d732:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d736:	e002      	b.n	800d73e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d738:	2304      	movs	r3, #4
 800d73a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d73e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d742:	4618      	mov	r0, r3
 800d744:	3730      	adds	r7, #48	; 0x30
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	20000011 	.word	0x20000011

0800d750 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800d754:	4b04      	ldr	r3, [pc, #16]	; (800d768 <BSP_SD_WriteCpltCallback+0x18>)
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	2200      	movs	r2, #0
 800d75a:	2102      	movs	r1, #2
 800d75c:	4618      	mov	r0, r3
 800d75e:	f006 ff1d 	bl	801459c <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800d762:	bf00      	nop
 800d764:	bd80      	pop	{r7, pc}
 800d766:	bf00      	nop
 800d768:	20003214 	.word	0x20003214

0800d76c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800d770:	4b04      	ldr	r3, [pc, #16]	; (800d784 <BSP_SD_ReadCpltCallback+0x18>)
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	2200      	movs	r2, #0
 800d776:	2101      	movs	r1, #1
 800d778:	4618      	mov	r0, r3
 800d77a:	f006 ff0f 	bl	801459c <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800d77e:	bf00      	nop
 800d780:	bd80      	pop	{r7, pc}
 800d782:	bf00      	nop
 800d784:	20003214 	.word	0x20003214

0800d788 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b084      	sub	sp, #16
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
 800d790:	460b      	mov	r3, r1
 800d792:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800d794:	f44f 701d 	mov.w	r0, #628	; 0x274
 800d798:	f00a f962 	bl	8017a60 <USBD_static_malloc>
 800d79c:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d109      	bne.n	800d7b8 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	32b0      	adds	r2, #176	; 0xb0
 800d7ae:	2100      	movs	r1, #0
 800d7b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d7b4:	2302      	movs	r3, #2
 800d7b6:	e06e      	b.n	800d896 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	32b0      	adds	r2, #176	; 0xb0
 800d7c2:	68f9      	ldr	r1, [r7, #12]
 800d7c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	32b0      	adds	r2, #176	; 0xb0
 800d7d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	7c1b      	ldrb	r3, [r3, #16]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d12b      	bne.n	800d83c <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800d7e4:	4b2e      	ldr	r3, [pc, #184]	; (800d8a0 <USBD_MSC_Init+0x118>)
 800d7e6:	7819      	ldrb	r1, [r3, #0]
 800d7e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d7ec:	2202      	movs	r2, #2
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f009 ffa5 	bl	801773e <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800d7f4:	4b2a      	ldr	r3, [pc, #168]	; (800d8a0 <USBD_MSC_Init+0x118>)
 800d7f6:	781b      	ldrb	r3, [r3, #0]
 800d7f8:	f003 020f 	and.w	r2, r3, #15
 800d7fc:	6879      	ldr	r1, [r7, #4]
 800d7fe:	4613      	mov	r3, r2
 800d800:	009b      	lsls	r3, r3, #2
 800d802:	4413      	add	r3, r2
 800d804:	009b      	lsls	r3, r3, #2
 800d806:	440b      	add	r3, r1
 800d808:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d80c:	2201      	movs	r2, #1
 800d80e:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800d810:	4b24      	ldr	r3, [pc, #144]	; (800d8a4 <USBD_MSC_Init+0x11c>)
 800d812:	7819      	ldrb	r1, [r3, #0]
 800d814:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d818:	2202      	movs	r2, #2
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f009 ff8f 	bl	801773e <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800d820:	4b20      	ldr	r3, [pc, #128]	; (800d8a4 <USBD_MSC_Init+0x11c>)
 800d822:	781b      	ldrb	r3, [r3, #0]
 800d824:	f003 020f 	and.w	r2, r3, #15
 800d828:	6879      	ldr	r1, [r7, #4]
 800d82a:	4613      	mov	r3, r2
 800d82c:	009b      	lsls	r3, r3, #2
 800d82e:	4413      	add	r3, r2
 800d830:	009b      	lsls	r3, r3, #2
 800d832:	440b      	add	r3, r1
 800d834:	3324      	adds	r3, #36	; 0x24
 800d836:	2201      	movs	r2, #1
 800d838:	801a      	strh	r2, [r3, #0]
 800d83a:	e028      	b.n	800d88e <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800d83c:	4b18      	ldr	r3, [pc, #96]	; (800d8a0 <USBD_MSC_Init+0x118>)
 800d83e:	7819      	ldrb	r1, [r3, #0]
 800d840:	2340      	movs	r3, #64	; 0x40
 800d842:	2202      	movs	r2, #2
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f009 ff7a 	bl	801773e <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800d84a:	4b15      	ldr	r3, [pc, #84]	; (800d8a0 <USBD_MSC_Init+0x118>)
 800d84c:	781b      	ldrb	r3, [r3, #0]
 800d84e:	f003 020f 	and.w	r2, r3, #15
 800d852:	6879      	ldr	r1, [r7, #4]
 800d854:	4613      	mov	r3, r2
 800d856:	009b      	lsls	r3, r3, #2
 800d858:	4413      	add	r3, r2
 800d85a:	009b      	lsls	r3, r3, #2
 800d85c:	440b      	add	r3, r1
 800d85e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d862:	2201      	movs	r2, #1
 800d864:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800d866:	4b0f      	ldr	r3, [pc, #60]	; (800d8a4 <USBD_MSC_Init+0x11c>)
 800d868:	7819      	ldrb	r1, [r3, #0]
 800d86a:	2340      	movs	r3, #64	; 0x40
 800d86c:	2202      	movs	r2, #2
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f009 ff65 	bl	801773e <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800d874:	4b0b      	ldr	r3, [pc, #44]	; (800d8a4 <USBD_MSC_Init+0x11c>)
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	f003 020f 	and.w	r2, r3, #15
 800d87c:	6879      	ldr	r1, [r7, #4]
 800d87e:	4613      	mov	r3, r2
 800d880:	009b      	lsls	r3, r3, #2
 800d882:	4413      	add	r3, r2
 800d884:	009b      	lsls	r3, r3, #2
 800d886:	440b      	add	r3, r1
 800d888:	3324      	adds	r3, #36	; 0x24
 800d88a:	2201      	movs	r2, #1
 800d88c:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f000 fa2c 	bl	800dcec <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800d894:	2300      	movs	r3, #0
}
 800d896:	4618      	mov	r0, r3
 800d898:	3710      	adds	r7, #16
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}
 800d89e:	bf00      	nop
 800d8a0:	20000077 	.word	0x20000077
 800d8a4:	20000076 	.word	0x20000076

0800d8a8 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b082      	sub	sp, #8
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
 800d8b0:	460b      	mov	r3, r1
 800d8b2:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 800d8b4:	4b26      	ldr	r3, [pc, #152]	; (800d950 <USBD_MSC_DeInit+0xa8>)
 800d8b6:	781b      	ldrb	r3, [r3, #0]
 800d8b8:	4619      	mov	r1, r3
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f009 ff65 	bl	801778a <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 800d8c0:	4b23      	ldr	r3, [pc, #140]	; (800d950 <USBD_MSC_DeInit+0xa8>)
 800d8c2:	781b      	ldrb	r3, [r3, #0]
 800d8c4:	f003 020f 	and.w	r2, r3, #15
 800d8c8:	6879      	ldr	r1, [r7, #4]
 800d8ca:	4613      	mov	r3, r2
 800d8cc:	009b      	lsls	r3, r3, #2
 800d8ce:	4413      	add	r3, r2
 800d8d0:	009b      	lsls	r3, r3, #2
 800d8d2:	440b      	add	r3, r1
 800d8d4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d8d8:	2200      	movs	r2, #0
 800d8da:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 800d8dc:	4b1d      	ldr	r3, [pc, #116]	; (800d954 <USBD_MSC_DeInit+0xac>)
 800d8de:	781b      	ldrb	r3, [r3, #0]
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f009 ff51 	bl	801778a <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 800d8e8:	4b1a      	ldr	r3, [pc, #104]	; (800d954 <USBD_MSC_DeInit+0xac>)
 800d8ea:	781b      	ldrb	r3, [r3, #0]
 800d8ec:	f003 020f 	and.w	r2, r3, #15
 800d8f0:	6879      	ldr	r1, [r7, #4]
 800d8f2:	4613      	mov	r3, r2
 800d8f4:	009b      	lsls	r3, r3, #2
 800d8f6:	4413      	add	r3, r2
 800d8f8:	009b      	lsls	r3, r3, #2
 800d8fa:	440b      	add	r3, r1
 800d8fc:	3324      	adds	r3, #36	; 0x24
 800d8fe:	2200      	movs	r2, #0
 800d900:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	32b0      	adds	r2, #176	; 0xb0
 800d90c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d018      	beq.n	800d946 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f000 fa67 	bl	800dde8 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	32b0      	adds	r2, #176	; 0xb0
 800d924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d928:	4618      	mov	r0, r3
 800d92a:	f00a f8a7 	bl	8017a7c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	32b0      	adds	r2, #176	; 0xb0
 800d938:	2100      	movs	r1, #0
 800d93a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2200      	movs	r2, #0
 800d942:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d946:	2300      	movs	r3, #0
}
 800d948:	4618      	mov	r0, r3
 800d94a:	3708      	adds	r7, #8
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}
 800d950:	20000077 	.word	0x20000077
 800d954:	20000076 	.word	0x20000076

0800d958 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b086      	sub	sp, #24
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	32b0      	adds	r2, #176	; 0xb0
 800d96c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d970:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800d972:	2300      	movs	r3, #0
 800d974:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800d976:	2300      	movs	r3, #0
 800d978:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800d97a:	693b      	ldr	r3, [r7, #16]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d101      	bne.n	800d984 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800d980:	2303      	movs	r3, #3
 800d982:	e0e1      	b.n	800db48 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	781b      	ldrb	r3, [r3, #0]
 800d988:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d053      	beq.n	800da38 <USBD_MSC_Setup+0xe0>
 800d990:	2b20      	cmp	r3, #32
 800d992:	f040 80d1 	bne.w	800db38 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	785b      	ldrb	r3, [r3, #1]
 800d99a:	2bfe      	cmp	r3, #254	; 0xfe
 800d99c:	d002      	beq.n	800d9a4 <USBD_MSC_Setup+0x4c>
 800d99e:	2bff      	cmp	r3, #255	; 0xff
 800d9a0:	d02a      	beq.n	800d9f8 <USBD_MSC_Setup+0xa0>
 800d9a2:	e041      	b.n	800da28 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	885b      	ldrh	r3, [r3, #2]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d11e      	bne.n	800d9ea <USBD_MSC_Setup+0x92>
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	88db      	ldrh	r3, [r3, #6]
 800d9b0:	2b01      	cmp	r3, #1
 800d9b2:	d11a      	bne.n	800d9ea <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	781b      	ldrb	r3, [r3, #0]
 800d9b8:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	da15      	bge.n	800d9ea <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d9c4:	687a      	ldr	r2, [r7, #4]
 800d9c6:	33b0      	adds	r3, #176	; 0xb0
 800d9c8:	009b      	lsls	r3, r3, #2
 800d9ca:	4413      	add	r3, r2
 800d9cc:	685b      	ldr	r3, [r3, #4]
 800d9ce:	699b      	ldr	r3, [r3, #24]
 800d9d0:	4798      	blx	r3
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	461a      	mov	r2, r3
 800d9d6:	693b      	ldr	r3, [r7, #16]
 800d9d8:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800d9da:	693b      	ldr	r3, [r7, #16]
 800d9dc:	2201      	movs	r2, #1
 800d9de:	4619      	mov	r1, r3
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f003 f923 	bl	8010c2c <USBD_CtlSendData>
 800d9e6:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d9e8:	e025      	b.n	800da36 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800d9ea:	6839      	ldr	r1, [r7, #0]
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f003 f8ac 	bl	8010b4a <USBD_CtlError>
            ret = USBD_FAIL;
 800d9f2:	2303      	movs	r3, #3
 800d9f4:	75fb      	strb	r3, [r7, #23]
          break;
 800d9f6:	e01e      	b.n	800da36 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	885b      	ldrh	r3, [r3, #2]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d10c      	bne.n	800da1a <USBD_MSC_Setup+0xc2>
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	88db      	ldrh	r3, [r3, #6]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d108      	bne.n	800da1a <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	781b      	ldrb	r3, [r3, #0]
 800da0c:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800da0e:	2b00      	cmp	r3, #0
 800da10:	db03      	blt.n	800da1a <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	f000 f9b4 	bl	800dd80 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800da18:	e00d      	b.n	800da36 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800da1a:	6839      	ldr	r1, [r7, #0]
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f003 f894 	bl	8010b4a <USBD_CtlError>
            ret = USBD_FAIL;
 800da22:	2303      	movs	r3, #3
 800da24:	75fb      	strb	r3, [r7, #23]
          break;
 800da26:	e006      	b.n	800da36 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 800da28:	6839      	ldr	r1, [r7, #0]
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f003 f88d 	bl	8010b4a <USBD_CtlError>
          ret = USBD_FAIL;
 800da30:	2303      	movs	r3, #3
 800da32:	75fb      	strb	r3, [r7, #23]
          break;
 800da34:	bf00      	nop
      }
      break;
 800da36:	e086      	b.n	800db46 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	785b      	ldrb	r3, [r3, #1]
 800da3c:	2b0b      	cmp	r3, #11
 800da3e:	d872      	bhi.n	800db26 <USBD_MSC_Setup+0x1ce>
 800da40:	a201      	add	r2, pc, #4	; (adr r2, 800da48 <USBD_MSC_Setup+0xf0>)
 800da42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da46:	bf00      	nop
 800da48:	0800da79 	.word	0x0800da79
 800da4c:	0800daf5 	.word	0x0800daf5
 800da50:	0800db27 	.word	0x0800db27
 800da54:	0800db27 	.word	0x0800db27
 800da58:	0800db27 	.word	0x0800db27
 800da5c:	0800db27 	.word	0x0800db27
 800da60:	0800db27 	.word	0x0800db27
 800da64:	0800db27 	.word	0x0800db27
 800da68:	0800db27 	.word	0x0800db27
 800da6c:	0800db27 	.word	0x0800db27
 800da70:	0800daa3 	.word	0x0800daa3
 800da74:	0800dacd 	.word	0x0800dacd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da7e:	b2db      	uxtb	r3, r3
 800da80:	2b03      	cmp	r3, #3
 800da82:	d107      	bne.n	800da94 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800da84:	f107 030e 	add.w	r3, r7, #14
 800da88:	2202      	movs	r2, #2
 800da8a:	4619      	mov	r1, r3
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f003 f8cd 	bl	8010c2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800da92:	e050      	b.n	800db36 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800da94:	6839      	ldr	r1, [r7, #0]
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f003 f857 	bl	8010b4a <USBD_CtlError>
            ret = USBD_FAIL;
 800da9c:	2303      	movs	r3, #3
 800da9e:	75fb      	strb	r3, [r7, #23]
          break;
 800daa0:	e049      	b.n	800db36 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800daa8:	b2db      	uxtb	r3, r3
 800daaa:	2b03      	cmp	r3, #3
 800daac:	d107      	bne.n	800dabe <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800daae:	693b      	ldr	r3, [r7, #16]
 800dab0:	3304      	adds	r3, #4
 800dab2:	2201      	movs	r2, #1
 800dab4:	4619      	mov	r1, r3
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f003 f8b8 	bl	8010c2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dabc:	e03b      	b.n	800db36 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800dabe:	6839      	ldr	r1, [r7, #0]
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	f003 f842 	bl	8010b4a <USBD_CtlError>
            ret = USBD_FAIL;
 800dac6:	2303      	movs	r3, #3
 800dac8:	75fb      	strb	r3, [r7, #23]
          break;
 800daca:	e034      	b.n	800db36 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dad2:	b2db      	uxtb	r3, r3
 800dad4:	2b03      	cmp	r3, #3
 800dad6:	d106      	bne.n	800dae6 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	885b      	ldrh	r3, [r3, #2]
 800dadc:	b2db      	uxtb	r3, r3
 800dade:	461a      	mov	r2, r3
 800dae0:	693b      	ldr	r3, [r7, #16]
 800dae2:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dae4:	e027      	b.n	800db36 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800dae6:	6839      	ldr	r1, [r7, #0]
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f003 f82e 	bl	8010b4a <USBD_CtlError>
            ret = USBD_FAIL;
 800daee:	2303      	movs	r3, #3
 800daf0:	75fb      	strb	r3, [r7, #23]
          break;
 800daf2:	e020      	b.n	800db36 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dafa:	b2db      	uxtb	r3, r3
 800dafc:	2b03      	cmp	r3, #3
 800dafe:	d119      	bne.n	800db34 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	885b      	ldrh	r3, [r3, #2]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d115      	bne.n	800db34 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	889b      	ldrh	r3, [r3, #4]
 800db0c:	b2db      	uxtb	r3, r3
 800db0e:	4619      	mov	r1, r3
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	f009 fe59 	bl	80177c8 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	889b      	ldrh	r3, [r3, #4]
 800db1a:	b2db      	uxtb	r3, r3
 800db1c:	4619      	mov	r1, r3
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f000 fb2e 	bl	800e180 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800db24:	e006      	b.n	800db34 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 800db26:	6839      	ldr	r1, [r7, #0]
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f003 f80e 	bl	8010b4a <USBD_CtlError>
          ret = USBD_FAIL;
 800db2e:	2303      	movs	r3, #3
 800db30:	75fb      	strb	r3, [r7, #23]
          break;
 800db32:	e000      	b.n	800db36 <USBD_MSC_Setup+0x1de>
          break;
 800db34:	bf00      	nop
      }
      break;
 800db36:	e006      	b.n	800db46 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 800db38:	6839      	ldr	r1, [r7, #0]
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f003 f805 	bl	8010b4a <USBD_CtlError>
      ret = USBD_FAIL;
 800db40:	2303      	movs	r3, #3
 800db42:	75fb      	strb	r3, [r7, #23]
      break;
 800db44:	bf00      	nop
  }

  return (uint8_t)ret;
 800db46:	7dfb      	ldrb	r3, [r7, #23]
}
 800db48:	4618      	mov	r0, r3
 800db4a:	3718      	adds	r7, #24
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}

0800db50 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b082      	sub	sp, #8
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	460b      	mov	r3, r1
 800db5a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800db5c:	78fb      	ldrb	r3, [r7, #3]
 800db5e:	4619      	mov	r1, r3
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f000 f959 	bl	800de18 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800db66:	2300      	movs	r3, #0
}
 800db68:	4618      	mov	r0, r3
 800db6a:	3708      	adds	r7, #8
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}

0800db70 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b082      	sub	sp, #8
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	460b      	mov	r3, r1
 800db7a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800db7c:	78fb      	ldrb	r3, [r7, #3]
 800db7e:	4619      	mov	r1, r3
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	f000 f983 	bl	800de8c <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800db86:	2300      	movs	r3, #0
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3708      	adds	r7, #8
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}

0800db90 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b084      	sub	sp, #16
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800db98:	2181      	movs	r1, #129	; 0x81
 800db9a:	4812      	ldr	r0, [pc, #72]	; (800dbe4 <USBD_MSC_GetHSCfgDesc+0x54>)
 800db9c:	f002 f972 	bl	800fe84 <USBD_GetEpDesc>
 800dba0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800dba2:	2101      	movs	r1, #1
 800dba4:	480f      	ldr	r0, [pc, #60]	; (800dbe4 <USBD_MSC_GetHSCfgDesc+0x54>)
 800dba6:	f002 f96d 	bl	800fe84 <USBD_GetEpDesc>
 800dbaa:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d006      	beq.n	800dbc0 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	711a      	strb	r2, [r3, #4]
 800dbb8:	2200      	movs	r2, #0
 800dbba:	f042 0202 	orr.w	r2, r2, #2
 800dbbe:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d006      	beq.n	800dbd4 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	711a      	strb	r2, [r3, #4]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	f042 0202 	orr.w	r2, r2, #2
 800dbd2:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2220      	movs	r2, #32
 800dbd8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800dbda:	4b02      	ldr	r3, [pc, #8]	; (800dbe4 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 800dbdc:	4618      	mov	r0, r3
 800dbde:	3710      	adds	r7, #16
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bd80      	pop	{r7, pc}
 800dbe4:	2000004c 	.word	0x2000004c

0800dbe8 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b084      	sub	sp, #16
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800dbf0:	2181      	movs	r1, #129	; 0x81
 800dbf2:	4812      	ldr	r0, [pc, #72]	; (800dc3c <USBD_MSC_GetFSCfgDesc+0x54>)
 800dbf4:	f002 f946 	bl	800fe84 <USBD_GetEpDesc>
 800dbf8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800dbfa:	2101      	movs	r1, #1
 800dbfc:	480f      	ldr	r0, [pc, #60]	; (800dc3c <USBD_MSC_GetFSCfgDesc+0x54>)
 800dbfe:	f002 f941 	bl	800fe84 <USBD_GetEpDesc>
 800dc02:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d006      	beq.n	800dc18 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dc12:	711a      	strb	r2, [r3, #4]
 800dc14:	2200      	movs	r2, #0
 800dc16:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d006      	beq.n	800dc2c <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	2200      	movs	r2, #0
 800dc22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dc26:	711a      	strb	r2, [r3, #4]
 800dc28:	2200      	movs	r2, #0
 800dc2a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2220      	movs	r2, #32
 800dc30:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800dc32:	4b02      	ldr	r3, [pc, #8]	; (800dc3c <USBD_MSC_GetFSCfgDesc+0x54>)
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	3710      	adds	r7, #16
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}
 800dc3c:	2000004c 	.word	0x2000004c

0800dc40 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b084      	sub	sp, #16
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800dc48:	2181      	movs	r1, #129	; 0x81
 800dc4a:	4812      	ldr	r0, [pc, #72]	; (800dc94 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800dc4c:	f002 f91a 	bl	800fe84 <USBD_GetEpDesc>
 800dc50:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800dc52:	2101      	movs	r1, #1
 800dc54:	480f      	ldr	r0, [pc, #60]	; (800dc94 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800dc56:	f002 f915 	bl	800fe84 <USBD_GetEpDesc>
 800dc5a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d006      	beq.n	800dc70 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	2200      	movs	r2, #0
 800dc66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dc6a:	711a      	strb	r2, [r3, #4]
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d006      	beq.n	800dc84 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dc7e:	711a      	strb	r2, [r3, #4]
 800dc80:	2200      	movs	r2, #0
 800dc82:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2220      	movs	r2, #32
 800dc88:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800dc8a:	4b02      	ldr	r3, [pc, #8]	; (800dc94 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3710      	adds	r7, #16
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}
 800dc94:	2000004c 	.word	0x2000004c

0800dc98 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800dc98:	b480      	push	{r7}
 800dc9a:	b083      	sub	sp, #12
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	220a      	movs	r2, #10
 800dca4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800dca6:	4b03      	ldr	r3, [pc, #12]	; (800dcb4 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800dca8:	4618      	mov	r0, r3
 800dcaa:	370c      	adds	r7, #12
 800dcac:	46bd      	mov	sp, r7
 800dcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb2:	4770      	bx	lr
 800dcb4:	2000006c 	.word	0x2000006c

0800dcb8 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b083      	sub	sp, #12
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
 800dcc0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d101      	bne.n	800dccc <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800dcc8:	2303      	movs	r3, #3
 800dcca:	e009      	b.n	800dce0 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dcd2:	687a      	ldr	r2, [r7, #4]
 800dcd4:	33b0      	adds	r3, #176	; 0xb0
 800dcd6:	009b      	lsls	r3, r3, #2
 800dcd8:	4413      	add	r3, r2
 800dcda:	683a      	ldr	r2, [r7, #0]
 800dcdc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800dcde:	2300      	movs	r3, #0
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	370c      	adds	r7, #12
 800dce4:	46bd      	mov	sp, r7
 800dce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcea:	4770      	bx	lr

0800dcec <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b084      	sub	sp, #16
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	32b0      	adds	r2, #176	; 0xb0
 800dcfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd02:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d032      	beq.n	800dd70 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	2200      	movs	r2, #0
 800dd14:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	2200      	movs	r2, #0
 800dd1a:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	2200      	movs	r2, #0
 800dd22:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	2200      	movs	r2, #0
 800dd2a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dd34:	687a      	ldr	r2, [r7, #4]
 800dd36:	33b0      	adds	r3, #176	; 0xb0
 800dd38:	009b      	lsls	r3, r3, #2
 800dd3a:	4413      	add	r3, r2
 800dd3c:	685b      	ldr	r3, [r3, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	2000      	movs	r0, #0
 800dd42:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 800dd44:	4b0c      	ldr	r3, [pc, #48]	; (800dd78 <MSC_BOT_Init+0x8c>)
 800dd46:	781b      	ldrb	r3, [r3, #0]
 800dd48:	4619      	mov	r1, r3
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f009 fd3c 	bl	80177c8 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 800dd50:	4b0a      	ldr	r3, [pc, #40]	; (800dd7c <MSC_BOT_Init+0x90>)
 800dd52:	781b      	ldrb	r3, [r3, #0]
 800dd54:	4619      	mov	r1, r3
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f009 fd36 	bl	80177c8 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800dd5c:	4b06      	ldr	r3, [pc, #24]	; (800dd78 <MSC_BOT_Init+0x8c>)
 800dd5e:	7819      	ldrb	r1, [r3, #0]
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800dd66:	231f      	movs	r3, #31
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f009 fdf6 	bl	801795a <USBD_LL_PrepareReceive>
 800dd6e:	e000      	b.n	800dd72 <MSC_BOT_Init+0x86>
    return;
 800dd70:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800dd72:	3710      	adds	r7, #16
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}
 800dd78:	20000077 	.word	0x20000077
 800dd7c:	20000076 	.word	0x20000076

0800dd80 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b084      	sub	sp, #16
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	32b0      	adds	r2, #176	; 0xb0
 800dd92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd96:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d01b      	beq.n	800ddd6 <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	2200      	movs	r2, #0
 800dda2:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	2201      	movs	r2, #1
 800dda8:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800ddaa:	4b0d      	ldr	r3, [pc, #52]	; (800dde0 <MSC_BOT_Reset+0x60>)
 800ddac:	781b      	ldrb	r3, [r3, #0]
 800ddae:	4619      	mov	r1, r3
 800ddb0:	6878      	ldr	r0, [r7, #4]
 800ddb2:	f009 fd47 	bl	8017844 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800ddb6:	4b0b      	ldr	r3, [pc, #44]	; (800dde4 <MSC_BOT_Reset+0x64>)
 800ddb8:	781b      	ldrb	r3, [r3, #0]
 800ddba:	4619      	mov	r1, r3
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f009 fd41 	bl	8017844 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800ddc2:	4b08      	ldr	r3, [pc, #32]	; (800dde4 <MSC_BOT_Reset+0x64>)
 800ddc4:	7819      	ldrb	r1, [r3, #0]
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800ddcc:	231f      	movs	r3, #31
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	f009 fdc3 	bl	801795a <USBD_LL_PrepareReceive>
 800ddd4:	e000      	b.n	800ddd8 <MSC_BOT_Reset+0x58>
    return;
 800ddd6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800ddd8:	3710      	adds	r7, #16
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}
 800ddde:	bf00      	nop
 800dde0:	20000076 	.word	0x20000076
 800dde4:	20000077 	.word	0x20000077

0800dde8 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800dde8:	b480      	push	{r7}
 800ddea:	b085      	sub	sp, #20
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	32b0      	adds	r2, #176	; 0xb0
 800ddfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddfe:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d002      	beq.n	800de0c <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	2200      	movs	r2, #0
 800de0a:	721a      	strb	r2, [r3, #8]
  }
}
 800de0c:	bf00      	nop
 800de0e:	3714      	adds	r7, #20
 800de10:	46bd      	mov	sp, r7
 800de12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de16:	4770      	bx	lr

0800de18 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b084      	sub	sp, #16
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
 800de20:	460b      	mov	r3, r1
 800de22:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	32b0      	adds	r2, #176	; 0xb0
 800de2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de32:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d020      	beq.n	800de7c <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	7a1b      	ldrb	r3, [r3, #8]
 800de3e:	2b02      	cmp	r3, #2
 800de40:	d005      	beq.n	800de4e <MSC_BOT_DataIn+0x36>
 800de42:	2b02      	cmp	r3, #2
 800de44:	db1c      	blt.n	800de80 <MSC_BOT_DataIn+0x68>
 800de46:	3b03      	subs	r3, #3
 800de48:	2b01      	cmp	r3, #1
 800de4a:	d819      	bhi.n	800de80 <MSC_BOT_DataIn+0x68>
 800de4c:	e011      	b.n	800de72 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800de5a:	461a      	mov	r2, r3
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f000 f9c9 	bl	800e1f4 <SCSI_ProcessCmd>
 800de62:	4603      	mov	r3, r0
 800de64:	2b00      	cmp	r3, #0
 800de66:	da0d      	bge.n	800de84 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800de68:	2101      	movs	r1, #1
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	f000 f90c 	bl	800e088 <MSC_BOT_SendCSW>
      }
      break;
 800de70:	e008      	b.n	800de84 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800de72:	2100      	movs	r1, #0
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f000 f907 	bl	800e088 <MSC_BOT_SendCSW>
      break;
 800de7a:	e004      	b.n	800de86 <MSC_BOT_DataIn+0x6e>
    return;
 800de7c:	bf00      	nop
 800de7e:	e002      	b.n	800de86 <MSC_BOT_DataIn+0x6e>

    default:
      break;
 800de80:	bf00      	nop
 800de82:	e000      	b.n	800de86 <MSC_BOT_DataIn+0x6e>
      break;
 800de84:	bf00      	nop
  }
}
 800de86:	3710      	adds	r7, #16
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}

0800de8c <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b084      	sub	sp, #16
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
 800de94:	460b      	mov	r3, r1
 800de96:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	32b0      	adds	r2, #176	; 0xb0
 800dea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dea6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d01c      	beq.n	800dee8 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	7a1b      	ldrb	r3, [r3, #8]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d002      	beq.n	800debc <MSC_BOT_DataOut+0x30>
 800deb6:	2b01      	cmp	r3, #1
 800deb8:	d004      	beq.n	800dec4 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800deba:	e018      	b.n	800deee <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 800debc:	6878      	ldr	r0, [r7, #4]
 800debe:	f000 f819 	bl	800def4 <MSC_BOT_CBW_Decode>
      break;
 800dec2:	e014      	b.n	800deee <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800ded0:	461a      	mov	r2, r3
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f000 f98e 	bl	800e1f4 <SCSI_ProcessCmd>
 800ded8:	4603      	mov	r3, r0
 800deda:	2b00      	cmp	r3, #0
 800dedc:	da06      	bge.n	800deec <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800dede:	2101      	movs	r1, #1
 800dee0:	6878      	ldr	r0, [r7, #4]
 800dee2:	f000 f8d1 	bl	800e088 <MSC_BOT_SendCSW>
      break;
 800dee6:	e001      	b.n	800deec <MSC_BOT_DataOut+0x60>
    return;
 800dee8:	bf00      	nop
 800deea:	e000      	b.n	800deee <MSC_BOT_DataOut+0x62>
      break;
 800deec:	bf00      	nop
  }
}
 800deee:	3710      	adds	r7, #16
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}

0800def4 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b084      	sub	sp, #16
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	32b0      	adds	r2, #176	; 0xb0
 800df06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df0a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d079      	beq.n	800e006 <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800df2a:	4b3a      	ldr	r3, [pc, #232]	; (800e014 <MSC_BOT_CBW_Decode+0x120>)
 800df2c:	781b      	ldrb	r3, [r3, #0]
 800df2e:	4619      	mov	r1, r3
 800df30:	6878      	ldr	r0, [r7, #4]
 800df32:	f009 fd33 	bl	801799c <USBD_LL_GetRxDataSize>
 800df36:	4603      	mov	r3, r0
 800df38:	2b1f      	cmp	r3, #31
 800df3a:	d114      	bne.n	800df66 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800df42:	4a35      	ldr	r2, [pc, #212]	; (800e018 <MSC_BOT_CBW_Decode+0x124>)
 800df44:	4293      	cmp	r3, r2
 800df46:	d10e      	bne.n	800df66 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800df4e:	2b01      	cmp	r3, #1
 800df50:	d809      	bhi.n	800df66 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d004      	beq.n	800df66 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800df62:	2b10      	cmp	r3, #16
 800df64:	d90e      	bls.n	800df84 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800df6c:	2320      	movs	r3, #32
 800df6e:	2205      	movs	r2, #5
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	f000 fe28 	bl	800ebc6 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	2202      	movs	r2, #2
 800df7a:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800df7c:	6878      	ldr	r0, [r7, #4]
 800df7e:	f000 f8bd 	bl	800e0fc <MSC_BOT_Abort>
 800df82:	e043      	b.n	800e00c <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800df90:	461a      	mov	r2, r3
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f000 f92e 	bl	800e1f4 <SCSI_ProcessCmd>
 800df98:	4603      	mov	r3, r0
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	da0c      	bge.n	800dfb8 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	7a1b      	ldrb	r3, [r3, #8]
 800dfa2:	2b05      	cmp	r3, #5
 800dfa4:	d104      	bne.n	800dfb0 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800dfa6:	2101      	movs	r1, #1
 800dfa8:	6878      	ldr	r0, [r7, #4]
 800dfaa:	f000 f86d 	bl	800e088 <MSC_BOT_SendCSW>
 800dfae:	e02d      	b.n	800e00c <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f000 f8a3 	bl	800e0fc <MSC_BOT_Abort>
 800dfb6:	e029      	b.n	800e00c <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	7a1b      	ldrb	r3, [r3, #8]
 800dfbc:	2b02      	cmp	r3, #2
 800dfbe:	d024      	beq.n	800e00a <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800dfc4:	2b01      	cmp	r3, #1
 800dfc6:	d020      	beq.n	800e00a <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800dfcc:	2b03      	cmp	r3, #3
 800dfce:	d01c      	beq.n	800e00a <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	68db      	ldr	r3, [r3, #12]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d009      	beq.n	800dfec <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	f103 0110 	add.w	r1, r3, #16
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	68db      	ldr	r3, [r3, #12]
 800dfe2:	461a      	mov	r2, r3
 800dfe4:	6878      	ldr	r0, [r7, #4]
 800dfe6:	f000 f819 	bl	800e01c <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800dfea:	e00f      	b.n	800e00c <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	68db      	ldr	r3, [r3, #12]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d104      	bne.n	800dffe <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800dff4:	2100      	movs	r1, #0
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f000 f846 	bl	800e088 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800dffc:	e006      	b.n	800e00c <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f000 f87c 	bl	800e0fc <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800e004:	e002      	b.n	800e00c <MSC_BOT_CBW_Decode+0x118>
    return;
 800e006:	bf00      	nop
 800e008:	e000      	b.n	800e00c <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 800e00a:	bf00      	nop
    }
  }
}
 800e00c:	3710      	adds	r7, #16
 800e00e:	46bd      	mov	sp, r7
 800e010:	bd80      	pop	{r7, pc}
 800e012:	bf00      	nop
 800e014:	20000077 	.word	0x20000077
 800e018:	43425355 	.word	0x43425355

0800e01c <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b086      	sub	sp, #24
 800e020:	af00      	add	r7, sp, #0
 800e022:	60f8      	str	r0, [r7, #12]
 800e024:	60b9      	str	r1, [r7, #8]
 800e026:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	32b0      	adds	r2, #176	; 0xb0
 800e032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e036:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d01e      	beq.n	800e07c <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e044:	687a      	ldr	r2, [r7, #4]
 800e046:	4293      	cmp	r3, r2
 800e048:	bf28      	it	cs
 800e04a:	4613      	movcs	r3, r2
 800e04c:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800e04e:	697b      	ldr	r3, [r7, #20]
 800e050:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	1ad2      	subs	r2, r2, r3
 800e058:	697b      	ldr	r3, [r7, #20]
 800e05a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800e05e:	697b      	ldr	r3, [r7, #20]
 800e060:	2200      	movs	r2, #0
 800e062:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800e066:	697b      	ldr	r3, [r7, #20]
 800e068:	2204      	movs	r2, #4
 800e06a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800e06c:	4b05      	ldr	r3, [pc, #20]	; (800e084 <MSC_BOT_SendData+0x68>)
 800e06e:	7819      	ldrb	r1, [r3, #0]
 800e070:	693b      	ldr	r3, [r7, #16]
 800e072:	68ba      	ldr	r2, [r7, #8]
 800e074:	68f8      	ldr	r0, [r7, #12]
 800e076:	f009 fc4f 	bl	8017918 <USBD_LL_Transmit>
 800e07a:	e000      	b.n	800e07e <MSC_BOT_SendData+0x62>
    return;
 800e07c:	bf00      	nop
}
 800e07e:	3718      	adds	r7, #24
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}
 800e084:	20000076 	.word	0x20000076

0800e088 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b084      	sub	sp, #16
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
 800e090:	460b      	mov	r3, r1
 800e092:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	32b0      	adds	r2, #176	; 0xb0
 800e09e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0a2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d01d      	beq.n	800e0e6 <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	4a10      	ldr	r2, [pc, #64]	; (800e0f0 <MSC_BOT_SendCSW+0x68>)
 800e0ae:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	78fa      	ldrb	r2, [r7, #3]
 800e0b6:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	2200      	movs	r2, #0
 800e0be:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800e0c0:	4b0c      	ldr	r3, [pc, #48]	; (800e0f4 <MSC_BOT_SendCSW+0x6c>)
 800e0c2:	7819      	ldrb	r1, [r3, #0]
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800e0ca:	230d      	movs	r3, #13
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f009 fc23 	bl	8017918 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800e0d2:	4b09      	ldr	r3, [pc, #36]	; (800e0f8 <MSC_BOT_SendCSW+0x70>)
 800e0d4:	7819      	ldrb	r1, [r3, #0]
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800e0dc:	231f      	movs	r3, #31
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	f009 fc3b 	bl	801795a <USBD_LL_PrepareReceive>
 800e0e4:	e000      	b.n	800e0e8 <MSC_BOT_SendCSW+0x60>
    return;
 800e0e6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800e0e8:	3710      	adds	r7, #16
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}
 800e0ee:	bf00      	nop
 800e0f0:	53425355 	.word	0x53425355
 800e0f4:	20000076 	.word	0x20000076
 800e0f8:	20000077 	.word	0x20000077

0800e0fc <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b084      	sub	sp, #16
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	32b0      	adds	r2, #176	; 0xb0
 800e10e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e112:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d02a      	beq.n	800e170 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800e120:	2b00      	cmp	r3, #0
 800e122:	d10e      	bne.n	800e142 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d009      	beq.n	800e142 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800e132:	2b00      	cmp	r3, #0
 800e134:	d105      	bne.n	800e142 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800e136:	4b10      	ldr	r3, [pc, #64]	; (800e178 <MSC_BOT_Abort+0x7c>)
 800e138:	781b      	ldrb	r3, [r3, #0]
 800e13a:	4619      	mov	r1, r3
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f009 fb62 	bl	8017806 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800e142:	4b0e      	ldr	r3, [pc, #56]	; (800e17c <MSC_BOT_Abort+0x80>)
 800e144:	781b      	ldrb	r3, [r3, #0]
 800e146:	4619      	mov	r1, r3
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f009 fb5c 	bl	8017806 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	7a5b      	ldrb	r3, [r3, #9]
 800e152:	2b02      	cmp	r3, #2
 800e154:	d10d      	bne.n	800e172 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800e156:	4b09      	ldr	r3, [pc, #36]	; (800e17c <MSC_BOT_Abort+0x80>)
 800e158:	781b      	ldrb	r3, [r3, #0]
 800e15a:	4619      	mov	r1, r3
 800e15c:	6878      	ldr	r0, [r7, #4]
 800e15e:	f009 fb52 	bl	8017806 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800e162:	4b05      	ldr	r3, [pc, #20]	; (800e178 <MSC_BOT_Abort+0x7c>)
 800e164:	781b      	ldrb	r3, [r3, #0]
 800e166:	4619      	mov	r1, r3
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f009 fb4c 	bl	8017806 <USBD_LL_StallEP>
 800e16e:	e000      	b.n	800e172 <MSC_BOT_Abort+0x76>
    return;
 800e170:	bf00      	nop
  }
}
 800e172:	3710      	adds	r7, #16
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}
 800e178:	20000077 	.word	0x20000077
 800e17c:	20000076 	.word	0x20000076

0800e180 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b084      	sub	sp, #16
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
 800e188:	460b      	mov	r3, r1
 800e18a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	32b0      	adds	r2, #176	; 0xb0
 800e196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e19a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d01d      	beq.n	800e1de <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	7a5b      	ldrb	r3, [r3, #9]
 800e1a6:	2b02      	cmp	r3, #2
 800e1a8:	d10c      	bne.n	800e1c4 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800e1aa:	4b10      	ldr	r3, [pc, #64]	; (800e1ec <MSC_BOT_CplClrFeature+0x6c>)
 800e1ac:	781b      	ldrb	r3, [r3, #0]
 800e1ae:	4619      	mov	r1, r3
 800e1b0:	6878      	ldr	r0, [r7, #4]
 800e1b2:	f009 fb28 	bl	8017806 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800e1b6:	4b0e      	ldr	r3, [pc, #56]	; (800e1f0 <MSC_BOT_CplClrFeature+0x70>)
 800e1b8:	781b      	ldrb	r3, [r3, #0]
 800e1ba:	4619      	mov	r1, r3
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f009 fb22 	bl	8017806 <USBD_LL_StallEP>
 800e1c2:	e00f      	b.n	800e1e4 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800e1c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	da0a      	bge.n	800e1e2 <MSC_BOT_CplClrFeature+0x62>
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	7a5b      	ldrb	r3, [r3, #9]
 800e1d0:	2b01      	cmp	r3, #1
 800e1d2:	d006      	beq.n	800e1e2 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800e1d4:	2101      	movs	r1, #1
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	f7ff ff56 	bl	800e088 <MSC_BOT_SendCSW>
 800e1dc:	e002      	b.n	800e1e4 <MSC_BOT_CplClrFeature+0x64>
    return;
 800e1de:	bf00      	nop
 800e1e0:	e000      	b.n	800e1e4 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800e1e2:	bf00      	nop
  }
}
 800e1e4:	3710      	adds	r7, #16
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}
 800e1ea:	bf00      	nop
 800e1ec:	20000076 	.word	0x20000076
 800e1f0:	20000077 	.word	0x20000077

0800e1f4 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b086      	sub	sp, #24
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	60f8      	str	r0, [r7, #12]
 800e1fc:	460b      	mov	r3, r1
 800e1fe:	607a      	str	r2, [r7, #4]
 800e200:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	32b0      	adds	r2, #176	; 0xb0
 800e20c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e210:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800e212:	693b      	ldr	r3, [r7, #16]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d102      	bne.n	800e21e <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 800e218:	f04f 33ff 	mov.w	r3, #4294967295
 800e21c:	e168      	b.n	800e4f0 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	781b      	ldrb	r3, [r3, #0]
 800e222:	2baa      	cmp	r3, #170	; 0xaa
 800e224:	f000 8144 	beq.w	800e4b0 <SCSI_ProcessCmd+0x2bc>
 800e228:	2baa      	cmp	r3, #170	; 0xaa
 800e22a:	f300 8153 	bgt.w	800e4d4 <SCSI_ProcessCmd+0x2e0>
 800e22e:	2ba8      	cmp	r3, #168	; 0xa8
 800e230:	f000 812c 	beq.w	800e48c <SCSI_ProcessCmd+0x298>
 800e234:	2ba8      	cmp	r3, #168	; 0xa8
 800e236:	f300 814d 	bgt.w	800e4d4 <SCSI_ProcessCmd+0x2e0>
 800e23a:	2b5a      	cmp	r3, #90	; 0x5a
 800e23c:	f300 80c0 	bgt.w	800e3c0 <SCSI_ProcessCmd+0x1cc>
 800e240:	2b00      	cmp	r3, #0
 800e242:	f2c0 8147 	blt.w	800e4d4 <SCSI_ProcessCmd+0x2e0>
 800e246:	2b5a      	cmp	r3, #90	; 0x5a
 800e248:	f200 8144 	bhi.w	800e4d4 <SCSI_ProcessCmd+0x2e0>
 800e24c:	a201      	add	r2, pc, #4	; (adr r2, 800e254 <SCSI_ProcessCmd+0x60>)
 800e24e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e252:	bf00      	nop
 800e254:	0800e3c7 	.word	0x0800e3c7
 800e258:	0800e4d5 	.word	0x0800e4d5
 800e25c:	0800e4d5 	.word	0x0800e4d5
 800e260:	0800e3d9 	.word	0x0800e3d9
 800e264:	0800e4d5 	.word	0x0800e4d5
 800e268:	0800e4d5 	.word	0x0800e4d5
 800e26c:	0800e4d5 	.word	0x0800e4d5
 800e270:	0800e4d5 	.word	0x0800e4d5
 800e274:	0800e4d5 	.word	0x0800e4d5
 800e278:	0800e4d5 	.word	0x0800e4d5
 800e27c:	0800e4d5 	.word	0x0800e4d5
 800e280:	0800e4d5 	.word	0x0800e4d5
 800e284:	0800e4d5 	.word	0x0800e4d5
 800e288:	0800e4d5 	.word	0x0800e4d5
 800e28c:	0800e4d5 	.word	0x0800e4d5
 800e290:	0800e4d5 	.word	0x0800e4d5
 800e294:	0800e4d5 	.word	0x0800e4d5
 800e298:	0800e4d5 	.word	0x0800e4d5
 800e29c:	0800e3eb 	.word	0x0800e3eb
 800e2a0:	0800e4d5 	.word	0x0800e4d5
 800e2a4:	0800e4d5 	.word	0x0800e4d5
 800e2a8:	0800e4d5 	.word	0x0800e4d5
 800e2ac:	0800e4d5 	.word	0x0800e4d5
 800e2b0:	0800e4d5 	.word	0x0800e4d5
 800e2b4:	0800e4d5 	.word	0x0800e4d5
 800e2b8:	0800e4d5 	.word	0x0800e4d5
 800e2bc:	0800e421 	.word	0x0800e421
 800e2c0:	0800e3fd 	.word	0x0800e3fd
 800e2c4:	0800e4d5 	.word	0x0800e4d5
 800e2c8:	0800e4d5 	.word	0x0800e4d5
 800e2cc:	0800e40f 	.word	0x0800e40f
 800e2d0:	0800e4d5 	.word	0x0800e4d5
 800e2d4:	0800e4d5 	.word	0x0800e4d5
 800e2d8:	0800e4d5 	.word	0x0800e4d5
 800e2dc:	0800e4d5 	.word	0x0800e4d5
 800e2e0:	0800e445 	.word	0x0800e445
 800e2e4:	0800e4d5 	.word	0x0800e4d5
 800e2e8:	0800e457 	.word	0x0800e457
 800e2ec:	0800e4d5 	.word	0x0800e4d5
 800e2f0:	0800e4d5 	.word	0x0800e4d5
 800e2f4:	0800e47b 	.word	0x0800e47b
 800e2f8:	0800e4d5 	.word	0x0800e4d5
 800e2fc:	0800e49f 	.word	0x0800e49f
 800e300:	0800e4d5 	.word	0x0800e4d5
 800e304:	0800e4d5 	.word	0x0800e4d5
 800e308:	0800e4d5 	.word	0x0800e4d5
 800e30c:	0800e4d5 	.word	0x0800e4d5
 800e310:	0800e4c3 	.word	0x0800e4c3
 800e314:	0800e4d5 	.word	0x0800e4d5
 800e318:	0800e4d5 	.word	0x0800e4d5
 800e31c:	0800e4d5 	.word	0x0800e4d5
 800e320:	0800e4d5 	.word	0x0800e4d5
 800e324:	0800e4d5 	.word	0x0800e4d5
 800e328:	0800e4d5 	.word	0x0800e4d5
 800e32c:	0800e4d5 	.word	0x0800e4d5
 800e330:	0800e4d5 	.word	0x0800e4d5
 800e334:	0800e4d5 	.word	0x0800e4d5
 800e338:	0800e4d5 	.word	0x0800e4d5
 800e33c:	0800e4d5 	.word	0x0800e4d5
 800e340:	0800e4d5 	.word	0x0800e4d5
 800e344:	0800e4d5 	.word	0x0800e4d5
 800e348:	0800e4d5 	.word	0x0800e4d5
 800e34c:	0800e4d5 	.word	0x0800e4d5
 800e350:	0800e4d5 	.word	0x0800e4d5
 800e354:	0800e4d5 	.word	0x0800e4d5
 800e358:	0800e4d5 	.word	0x0800e4d5
 800e35c:	0800e4d5 	.word	0x0800e4d5
 800e360:	0800e4d5 	.word	0x0800e4d5
 800e364:	0800e4d5 	.word	0x0800e4d5
 800e368:	0800e4d5 	.word	0x0800e4d5
 800e36c:	0800e4d5 	.word	0x0800e4d5
 800e370:	0800e4d5 	.word	0x0800e4d5
 800e374:	0800e4d5 	.word	0x0800e4d5
 800e378:	0800e4d5 	.word	0x0800e4d5
 800e37c:	0800e4d5 	.word	0x0800e4d5
 800e380:	0800e4d5 	.word	0x0800e4d5
 800e384:	0800e4d5 	.word	0x0800e4d5
 800e388:	0800e4d5 	.word	0x0800e4d5
 800e38c:	0800e4d5 	.word	0x0800e4d5
 800e390:	0800e4d5 	.word	0x0800e4d5
 800e394:	0800e4d5 	.word	0x0800e4d5
 800e398:	0800e4d5 	.word	0x0800e4d5
 800e39c:	0800e4d5 	.word	0x0800e4d5
 800e3a0:	0800e4d5 	.word	0x0800e4d5
 800e3a4:	0800e4d5 	.word	0x0800e4d5
 800e3a8:	0800e4d5 	.word	0x0800e4d5
 800e3ac:	0800e4d5 	.word	0x0800e4d5
 800e3b0:	0800e4d5 	.word	0x0800e4d5
 800e3b4:	0800e4d5 	.word	0x0800e4d5
 800e3b8:	0800e4d5 	.word	0x0800e4d5
 800e3bc:	0800e433 	.word	0x0800e433
 800e3c0:	2b9e      	cmp	r3, #158	; 0x9e
 800e3c2:	d051      	beq.n	800e468 <SCSI_ProcessCmd+0x274>
 800e3c4:	e086      	b.n	800e4d4 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800e3c6:	7afb      	ldrb	r3, [r7, #11]
 800e3c8:	687a      	ldr	r2, [r7, #4]
 800e3ca:	4619      	mov	r1, r3
 800e3cc:	68f8      	ldr	r0, [r7, #12]
 800e3ce:	f000 f893 	bl	800e4f8 <SCSI_TestUnitReady>
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	75fb      	strb	r3, [r7, #23]
      break;
 800e3d6:	e089      	b.n	800e4ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 800e3d8:	7afb      	ldrb	r3, [r7, #11]
 800e3da:	687a      	ldr	r2, [r7, #4]
 800e3dc:	4619      	mov	r1, r3
 800e3de:	68f8      	ldr	r0, [r7, #12]
 800e3e0:	f000 fb6e 	bl	800eac0 <SCSI_RequestSense>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	75fb      	strb	r3, [r7, #23]
      break;
 800e3e8:	e080      	b.n	800e4ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800e3ea:	7afb      	ldrb	r3, [r7, #11]
 800e3ec:	687a      	ldr	r2, [r7, #4]
 800e3ee:	4619      	mov	r1, r3
 800e3f0:	68f8      	ldr	r0, [r7, #12]
 800e3f2:	f000 f8db 	bl	800e5ac <SCSI_Inquiry>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	75fb      	strb	r3, [r7, #23]
      break;
 800e3fa:	e077      	b.n	800e4ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800e3fc:	7afb      	ldrb	r3, [r7, #11]
 800e3fe:	687a      	ldr	r2, [r7, #4]
 800e400:	4619      	mov	r1, r3
 800e402:	68f8      	ldr	r0, [r7, #12]
 800e404:	f000 fc2a 	bl	800ec5c <SCSI_StartStopUnit>
 800e408:	4603      	mov	r3, r0
 800e40a:	75fb      	strb	r3, [r7, #23]
      break;
 800e40c:	e06e      	b.n	800e4ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800e40e:	7afb      	ldrb	r3, [r7, #11]
 800e410:	687a      	ldr	r2, [r7, #4]
 800e412:	4619      	mov	r1, r3
 800e414:	68f8      	ldr	r0, [r7, #12]
 800e416:	f000 fc76 	bl	800ed06 <SCSI_AllowPreventRemovable>
 800e41a:	4603      	mov	r3, r0
 800e41c:	75fb      	strb	r3, [r7, #23]
      break;
 800e41e:	e065      	b.n	800e4ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800e420:	7afb      	ldrb	r3, [r7, #11]
 800e422:	687a      	ldr	r2, [r7, #4]
 800e424:	4619      	mov	r1, r3
 800e426:	68f8      	ldr	r0, [r7, #12]
 800e428:	f000 faea 	bl	800ea00 <SCSI_ModeSense6>
 800e42c:	4603      	mov	r3, r0
 800e42e:	75fb      	strb	r3, [r7, #23]
      break;
 800e430:	e05c      	b.n	800e4ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800e432:	7afb      	ldrb	r3, [r7, #11]
 800e434:	687a      	ldr	r2, [r7, #4]
 800e436:	4619      	mov	r1, r3
 800e438:	68f8      	ldr	r0, [r7, #12]
 800e43a:	f000 fb11 	bl	800ea60 <SCSI_ModeSense10>
 800e43e:	4603      	mov	r3, r0
 800e440:	75fb      	strb	r3, [r7, #23]
      break;
 800e442:	e053      	b.n	800e4ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800e444:	7afb      	ldrb	r3, [r7, #11]
 800e446:	687a      	ldr	r2, [r7, #4]
 800e448:	4619      	mov	r1, r3
 800e44a:	68f8      	ldr	r0, [r7, #12]
 800e44c:	f000 fa5d 	bl	800e90a <SCSI_ReadFormatCapacity>
 800e450:	4603      	mov	r3, r0
 800e452:	75fb      	strb	r3, [r7, #23]
      break;
 800e454:	e04a      	b.n	800e4ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800e456:	7afb      	ldrb	r3, [r7, #11]
 800e458:	687a      	ldr	r2, [r7, #4]
 800e45a:	4619      	mov	r1, r3
 800e45c:	68f8      	ldr	r0, [r7, #12]
 800e45e:	f000 f923 	bl	800e6a8 <SCSI_ReadCapacity10>
 800e462:	4603      	mov	r3, r0
 800e464:	75fb      	strb	r3, [r7, #23]
      break;
 800e466:	e041      	b.n	800e4ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800e468:	7afb      	ldrb	r3, [r7, #11]
 800e46a:	687a      	ldr	r2, [r7, #4]
 800e46c:	4619      	mov	r1, r3
 800e46e:	68f8      	ldr	r0, [r7, #12]
 800e470:	f000 f998 	bl	800e7a4 <SCSI_ReadCapacity16>
 800e474:	4603      	mov	r3, r0
 800e476:	75fb      	strb	r3, [r7, #23]
      break;
 800e478:	e038      	b.n	800e4ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800e47a:	7afb      	ldrb	r3, [r7, #11]
 800e47c:	687a      	ldr	r2, [r7, #4]
 800e47e:	4619      	mov	r1, r3
 800e480:	68f8      	ldr	r0, [r7, #12]
 800e482:	f000 fc6d 	bl	800ed60 <SCSI_Read10>
 800e486:	4603      	mov	r3, r0
 800e488:	75fb      	strb	r3, [r7, #23]
      break;
 800e48a:	e02f      	b.n	800e4ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800e48c:	7afb      	ldrb	r3, [r7, #11]
 800e48e:	687a      	ldr	r2, [r7, #4]
 800e490:	4619      	mov	r1, r3
 800e492:	68f8      	ldr	r0, [r7, #12]
 800e494:	f000 fd0e 	bl	800eeb4 <SCSI_Read12>
 800e498:	4603      	mov	r3, r0
 800e49a:	75fb      	strb	r3, [r7, #23]
      break;
 800e49c:	e026      	b.n	800e4ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800e49e:	7afb      	ldrb	r3, [r7, #11]
 800e4a0:	687a      	ldr	r2, [r7, #4]
 800e4a2:	4619      	mov	r1, r3
 800e4a4:	68f8      	ldr	r0, [r7, #12]
 800e4a6:	f000 fdb9 	bl	800f01c <SCSI_Write10>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	75fb      	strb	r3, [r7, #23]
      break;
 800e4ae:	e01d      	b.n	800e4ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800e4b0:	7afb      	ldrb	r3, [r7, #11]
 800e4b2:	687a      	ldr	r2, [r7, #4]
 800e4b4:	4619      	mov	r1, r3
 800e4b6:	68f8      	ldr	r0, [r7, #12]
 800e4b8:	f000 fe86 	bl	800f1c8 <SCSI_Write12>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	75fb      	strb	r3, [r7, #23]
      break;
 800e4c0:	e014      	b.n	800e4ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800e4c2:	7afb      	ldrb	r3, [r7, #11]
 800e4c4:	687a      	ldr	r2, [r7, #4]
 800e4c6:	4619      	mov	r1, r3
 800e4c8:	68f8      	ldr	r0, [r7, #12]
 800e4ca:	f000 ff63 	bl	800f394 <SCSI_Verify10>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	75fb      	strb	r3, [r7, #23]
      break;
 800e4d2:	e00b      	b.n	800e4ec <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800e4d4:	7af9      	ldrb	r1, [r7, #11]
 800e4d6:	2320      	movs	r3, #32
 800e4d8:	2205      	movs	r2, #5
 800e4da:	68f8      	ldr	r0, [r7, #12]
 800e4dc:	f000 fb73 	bl	800ebc6 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800e4e0:	693b      	ldr	r3, [r7, #16]
 800e4e2:	2202      	movs	r2, #2
 800e4e4:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800e4e6:	23ff      	movs	r3, #255	; 0xff
 800e4e8:	75fb      	strb	r3, [r7, #23]
      break;
 800e4ea:	bf00      	nop
  }

  return ret;
 800e4ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	3718      	adds	r7, #24
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bd80      	pop	{r7, pc}

0800e4f8 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b086      	sub	sp, #24
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	60f8      	str	r0, [r7, #12]
 800e500:	460b      	mov	r3, r1
 800e502:	607a      	str	r2, [r7, #4]
 800e504:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	32b0      	adds	r2, #176	; 0xb0
 800e510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e514:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800e516:	697b      	ldr	r3, [r7, #20]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d102      	bne.n	800e522 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 800e51c:	f04f 33ff 	mov.w	r3, #4294967295
 800e520:	e03f      	b.n	800e5a2 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d00a      	beq.n	800e542 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e52c:	697b      	ldr	r3, [r7, #20]
 800e52e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e532:	2320      	movs	r3, #32
 800e534:	2205      	movs	r2, #5
 800e536:	68f8      	ldr	r0, [r7, #12]
 800e538:	f000 fb45 	bl	800ebc6 <SCSI_SenseCode>

    return -1;
 800e53c:	f04f 33ff 	mov.w	r3, #4294967295
 800e540:	e02f      	b.n	800e5a2 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800e542:	697b      	ldr	r3, [r7, #20]
 800e544:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800e548:	2b02      	cmp	r3, #2
 800e54a:	d10b      	bne.n	800e564 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e54c:	7af9      	ldrb	r1, [r7, #11]
 800e54e:	233a      	movs	r3, #58	; 0x3a
 800e550:	2202      	movs	r2, #2
 800e552:	68f8      	ldr	r0, [r7, #12]
 800e554:	f000 fb37 	bl	800ebc6 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800e558:	697b      	ldr	r3, [r7, #20]
 800e55a:	2205      	movs	r2, #5
 800e55c:	721a      	strb	r2, [r3, #8]
    return -1;
 800e55e:	f04f 33ff 	mov.w	r3, #4294967295
 800e562:	e01e      	b.n	800e5a2 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e56a:	68fa      	ldr	r2, [r7, #12]
 800e56c:	33b0      	adds	r3, #176	; 0xb0
 800e56e:	009b      	lsls	r3, r3, #2
 800e570:	4413      	add	r3, r2
 800e572:	685b      	ldr	r3, [r3, #4]
 800e574:	689b      	ldr	r3, [r3, #8]
 800e576:	7afa      	ldrb	r2, [r7, #11]
 800e578:	4610      	mov	r0, r2
 800e57a:	4798      	blx	r3
 800e57c:	4603      	mov	r3, r0
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d00b      	beq.n	800e59a <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e582:	7af9      	ldrb	r1, [r7, #11]
 800e584:	233a      	movs	r3, #58	; 0x3a
 800e586:	2202      	movs	r2, #2
 800e588:	68f8      	ldr	r0, [r7, #12]
 800e58a:	f000 fb1c 	bl	800ebc6 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800e58e:	697b      	ldr	r3, [r7, #20]
 800e590:	2205      	movs	r2, #5
 800e592:	721a      	strb	r2, [r3, #8]

    return -1;
 800e594:	f04f 33ff 	mov.w	r3, #4294967295
 800e598:	e003      	b.n	800e5a2 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 800e59a:	697b      	ldr	r3, [r7, #20]
 800e59c:	2200      	movs	r2, #0
 800e59e:	60da      	str	r2, [r3, #12]

  return 0;
 800e5a0:	2300      	movs	r3, #0
}
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	3718      	adds	r7, #24
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	bd80      	pop	{r7, pc}
	...

0800e5ac <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b088      	sub	sp, #32
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	60f8      	str	r0, [r7, #12]
 800e5b4:	460b      	mov	r3, r1
 800e5b6:	607a      	str	r2, [r7, #4]
 800e5b8:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	32b0      	adds	r2, #176	; 0xb0
 800e5c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5c8:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800e5ca:	69bb      	ldr	r3, [r7, #24]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d102      	bne.n	800e5d6 <SCSI_Inquiry+0x2a>
  {
    return -1;
 800e5d0:	f04f 33ff 	mov.w	r3, #4294967295
 800e5d4:	e05f      	b.n	800e696 <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800e5d6:	69bb      	ldr	r3, [r7, #24]
 800e5d8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d10a      	bne.n	800e5f6 <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e5e0:	69bb      	ldr	r3, [r7, #24]
 800e5e2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e5e6:	2320      	movs	r3, #32
 800e5e8:	2205      	movs	r2, #5
 800e5ea:	68f8      	ldr	r0, [r7, #12]
 800e5ec:	f000 faeb 	bl	800ebc6 <SCSI_SenseCode>
    return -1;
 800e5f0:	f04f 33ff 	mov.w	r3, #4294967295
 800e5f4:	e04f      	b.n	800e696 <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	3301      	adds	r3, #1
 800e5fa:	781b      	ldrb	r3, [r3, #0]
 800e5fc:	f003 0301 	and.w	r3, r3, #1
 800e600:	2b00      	cmp	r3, #0
 800e602:	d020      	beq.n	800e646 <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	3302      	adds	r3, #2
 800e608:	781b      	ldrb	r3, [r3, #0]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d105      	bne.n	800e61a <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800e60e:	2206      	movs	r2, #6
 800e610:	4923      	ldr	r1, [pc, #140]	; (800e6a0 <SCSI_Inquiry+0xf4>)
 800e612:	69b8      	ldr	r0, [r7, #24]
 800e614:	f001 f844 	bl	800f6a0 <SCSI_UpdateBotData>
 800e618:	e03c      	b.n	800e694 <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	3302      	adds	r3, #2
 800e61e:	781b      	ldrb	r3, [r3, #0]
 800e620:	2b80      	cmp	r3, #128	; 0x80
 800e622:	d105      	bne.n	800e630 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800e624:	2208      	movs	r2, #8
 800e626:	491f      	ldr	r1, [pc, #124]	; (800e6a4 <SCSI_Inquiry+0xf8>)
 800e628:	69b8      	ldr	r0, [r7, #24]
 800e62a:	f001 f839 	bl	800f6a0 <SCSI_UpdateBotData>
 800e62e:	e031      	b.n	800e694 <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800e630:	69bb      	ldr	r3, [r7, #24]
 800e632:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e636:	2324      	movs	r3, #36	; 0x24
 800e638:	2205      	movs	r2, #5
 800e63a:	68f8      	ldr	r0, [r7, #12]
 800e63c:	f000 fac3 	bl	800ebc6 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800e640:	f04f 33ff 	mov.w	r3, #4294967295
 800e644:	e027      	b.n	800e696 <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e64c:	68fa      	ldr	r2, [r7, #12]
 800e64e:	33b0      	adds	r3, #176	; 0xb0
 800e650:	009b      	lsls	r3, r3, #2
 800e652:	4413      	add	r3, r2
 800e654:	685b      	ldr	r3, [r3, #4]
 800e656:	69d9      	ldr	r1, [r3, #28]
 800e658:	7afa      	ldrb	r2, [r7, #11]
 800e65a:	4613      	mov	r3, r2
 800e65c:	00db      	lsls	r3, r3, #3
 800e65e:	4413      	add	r3, r2
 800e660:	009b      	lsls	r3, r3, #2
 800e662:	440b      	add	r3, r1
 800e664:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	3304      	adds	r3, #4
 800e66a:	781b      	ldrb	r3, [r3, #0]
 800e66c:	b29b      	uxth	r3, r3
 800e66e:	3305      	adds	r3, #5
 800e670:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	3304      	adds	r3, #4
 800e676:	781b      	ldrb	r3, [r3, #0]
 800e678:	b29b      	uxth	r3, r3
 800e67a:	8bfa      	ldrh	r2, [r7, #30]
 800e67c:	429a      	cmp	r2, r3
 800e67e:	d303      	bcc.n	800e688 <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	3304      	adds	r3, #4
 800e684:	781b      	ldrb	r3, [r3, #0]
 800e686:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800e688:	8bfb      	ldrh	r3, [r7, #30]
 800e68a:	461a      	mov	r2, r3
 800e68c:	6979      	ldr	r1, [r7, #20]
 800e68e:	69b8      	ldr	r0, [r7, #24]
 800e690:	f001 f806 	bl	800f6a0 <SCSI_UpdateBotData>
  }

  return 0;
 800e694:	2300      	movs	r3, #0
}
 800e696:	4618      	mov	r0, r3
 800e698:	3720      	adds	r7, #32
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}
 800e69e:	bf00      	nop
 800e6a0:	20000078 	.word	0x20000078
 800e6a4:	20000080 	.word	0x20000080

0800e6a8 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b086      	sub	sp, #24
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	60f8      	str	r0, [r7, #12]
 800e6b0:	460b      	mov	r3, r1
 800e6b2:	607a      	str	r2, [r7, #4]
 800e6b4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	32b0      	adds	r2, #176	; 0xb0
 800e6c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6c4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800e6c6:	697b      	ldr	r3, [r7, #20]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d102      	bne.n	800e6d2 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 800e6cc:	f04f 33ff 	mov.w	r3, #4294967295
 800e6d0:	e064      	b.n	800e79c <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e6d8:	68fa      	ldr	r2, [r7, #12]
 800e6da:	33b0      	adds	r3, #176	; 0xb0
 800e6dc:	009b      	lsls	r3, r3, #2
 800e6de:	4413      	add	r3, r2
 800e6e0:	685b      	ldr	r3, [r3, #4]
 800e6e2:	685b      	ldr	r3, [r3, #4]
 800e6e4:	697a      	ldr	r2, [r7, #20]
 800e6e6:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800e6ea:	697a      	ldr	r2, [r7, #20]
 800e6ec:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800e6f0:	7af8      	ldrb	r0, [r7, #11]
 800e6f2:	4798      	blx	r3
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800e6f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d104      	bne.n	800e70a <SCSI_ReadCapacity10+0x62>
 800e700:	697b      	ldr	r3, [r7, #20]
 800e702:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800e706:	2b02      	cmp	r3, #2
 800e708:	d108      	bne.n	800e71c <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e70a:	7af9      	ldrb	r1, [r7, #11]
 800e70c:	233a      	movs	r3, #58	; 0x3a
 800e70e:	2202      	movs	r2, #2
 800e710:	68f8      	ldr	r0, [r7, #12]
 800e712:	f000 fa58 	bl	800ebc6 <SCSI_SenseCode>
    return -1;
 800e716:	f04f 33ff 	mov.w	r3, #4294967295
 800e71a:	e03f      	b.n	800e79c <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e722:	3b01      	subs	r3, #1
 800e724:	0e1b      	lsrs	r3, r3, #24
 800e726:	b2da      	uxtb	r2, r3
 800e728:	697b      	ldr	r3, [r7, #20]
 800e72a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800e72c:	697b      	ldr	r3, [r7, #20]
 800e72e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e732:	3b01      	subs	r3, #1
 800e734:	0c1b      	lsrs	r3, r3, #16
 800e736:	b2da      	uxtb	r2, r3
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800e73c:	697b      	ldr	r3, [r7, #20]
 800e73e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e742:	3b01      	subs	r3, #1
 800e744:	0a1b      	lsrs	r3, r3, #8
 800e746:	b2da      	uxtb	r2, r3
 800e748:	697b      	ldr	r3, [r7, #20]
 800e74a:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800e74c:	697b      	ldr	r3, [r7, #20]
 800e74e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e752:	b2db      	uxtb	r3, r3
 800e754:	3b01      	subs	r3, #1
 800e756:	b2da      	uxtb	r2, r3
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800e75c:	697b      	ldr	r3, [r7, #20]
 800e75e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e762:	161b      	asrs	r3, r3, #24
 800e764:	b2da      	uxtb	r2, r3
 800e766:	697b      	ldr	r3, [r7, #20]
 800e768:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800e76a:	697b      	ldr	r3, [r7, #20]
 800e76c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e770:	141b      	asrs	r3, r3, #16
 800e772:	b2da      	uxtb	r2, r3
 800e774:	697b      	ldr	r3, [r7, #20]
 800e776:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800e778:	697b      	ldr	r3, [r7, #20]
 800e77a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e77e:	0a1b      	lsrs	r3, r3, #8
 800e780:	b29b      	uxth	r3, r3
 800e782:	b2da      	uxtb	r2, r3
 800e784:	697b      	ldr	r3, [r7, #20]
 800e786:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800e788:	697b      	ldr	r3, [r7, #20]
 800e78a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e78e:	b2da      	uxtb	r2, r3
 800e790:	697b      	ldr	r3, [r7, #20]
 800e792:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	2208      	movs	r2, #8
 800e798:	60da      	str	r2, [r3, #12]

  return 0;
 800e79a:	2300      	movs	r3, #0

}
 800e79c:	4618      	mov	r0, r3
 800e79e:	3718      	adds	r7, #24
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}

0800e7a4 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b088      	sub	sp, #32
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	60f8      	str	r0, [r7, #12]
 800e7ac:	460b      	mov	r3, r1
 800e7ae:	607a      	str	r2, [r7, #4]
 800e7b0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	32b0      	adds	r2, #176	; 0xb0
 800e7bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7c0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800e7c2:	69bb      	ldr	r3, [r7, #24]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d102      	bne.n	800e7ce <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 800e7c8:	f04f 33ff 	mov.w	r3, #4294967295
 800e7cc:	e099      	b.n	800e902 <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e7d4:	68fa      	ldr	r2, [r7, #12]
 800e7d6:	33b0      	adds	r3, #176	; 0xb0
 800e7d8:	009b      	lsls	r3, r3, #2
 800e7da:	4413      	add	r3, r2
 800e7dc:	685b      	ldr	r3, [r3, #4]
 800e7de:	685b      	ldr	r3, [r3, #4]
 800e7e0:	69ba      	ldr	r2, [r7, #24]
 800e7e2:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800e7e6:	69ba      	ldr	r2, [r7, #24]
 800e7e8:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800e7ec:	7af8      	ldrb	r0, [r7, #11]
 800e7ee:	4798      	blx	r3
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800e7f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d104      	bne.n	800e806 <SCSI_ReadCapacity16+0x62>
 800e7fc:	69bb      	ldr	r3, [r7, #24]
 800e7fe:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800e802:	2b02      	cmp	r3, #2
 800e804:	d108      	bne.n	800e818 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e806:	7af9      	ldrb	r1, [r7, #11]
 800e808:	233a      	movs	r3, #58	; 0x3a
 800e80a:	2202      	movs	r2, #2
 800e80c:	68f8      	ldr	r0, [r7, #12]
 800e80e:	f000 f9da 	bl	800ebc6 <SCSI_SenseCode>
    return -1;
 800e812:	f04f 33ff 	mov.w	r3, #4294967295
 800e816:	e074      	b.n	800e902 <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	330a      	adds	r3, #10
 800e81c:	781b      	ldrb	r3, [r3, #0]
 800e81e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	330b      	adds	r3, #11
 800e824:	781b      	ldrb	r3, [r3, #0]
 800e826:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e828:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	330c      	adds	r3, #12
 800e82e:	781b      	ldrb	r3, [r3, #0]
 800e830:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800e832:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800e834:	687a      	ldr	r2, [r7, #4]
 800e836:	320d      	adds	r2, #13
 800e838:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800e83a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e83c:	69bb      	ldr	r3, [r7, #24]
 800e83e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800e840:	2300      	movs	r3, #0
 800e842:	77fb      	strb	r3, [r7, #31]
 800e844:	e007      	b.n	800e856 <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 800e846:	7ffb      	ldrb	r3, [r7, #31]
 800e848:	69ba      	ldr	r2, [r7, #24]
 800e84a:	4413      	add	r3, r2
 800e84c:	2200      	movs	r2, #0
 800e84e:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800e850:	7ffb      	ldrb	r3, [r7, #31]
 800e852:	3301      	adds	r3, #1
 800e854:	77fb      	strb	r3, [r7, #31]
 800e856:	7ffa      	ldrb	r2, [r7, #31]
 800e858:	69bb      	ldr	r3, [r7, #24]
 800e85a:	68db      	ldr	r3, [r3, #12]
 800e85c:	429a      	cmp	r2, r3
 800e85e:	d3f2      	bcc.n	800e846 <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800e860:	69bb      	ldr	r3, [r7, #24]
 800e862:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e866:	3b01      	subs	r3, #1
 800e868:	0e1b      	lsrs	r3, r3, #24
 800e86a:	b2da      	uxtb	r2, r3
 800e86c:	69bb      	ldr	r3, [r7, #24]
 800e86e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800e870:	69bb      	ldr	r3, [r7, #24]
 800e872:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e876:	3b01      	subs	r3, #1
 800e878:	0c1b      	lsrs	r3, r3, #16
 800e87a:	b2da      	uxtb	r2, r3
 800e87c:	69bb      	ldr	r3, [r7, #24]
 800e87e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800e880:	69bb      	ldr	r3, [r7, #24]
 800e882:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e886:	3b01      	subs	r3, #1
 800e888:	0a1b      	lsrs	r3, r3, #8
 800e88a:	b2da      	uxtb	r2, r3
 800e88c:	69bb      	ldr	r3, [r7, #24]
 800e88e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800e890:	69bb      	ldr	r3, [r7, #24]
 800e892:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e896:	b2db      	uxtb	r3, r3
 800e898:	3b01      	subs	r3, #1
 800e89a:	b2da      	uxtb	r2, r3
 800e89c:	69bb      	ldr	r3, [r7, #24]
 800e89e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800e8a0:	69bb      	ldr	r3, [r7, #24]
 800e8a2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e8a6:	161b      	asrs	r3, r3, #24
 800e8a8:	b2da      	uxtb	r2, r3
 800e8aa:	69bb      	ldr	r3, [r7, #24]
 800e8ac:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800e8ae:	69bb      	ldr	r3, [r7, #24]
 800e8b0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e8b4:	141b      	asrs	r3, r3, #16
 800e8b6:	b2da      	uxtb	r2, r3
 800e8b8:	69bb      	ldr	r3, [r7, #24]
 800e8ba:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800e8bc:	69bb      	ldr	r3, [r7, #24]
 800e8be:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e8c2:	0a1b      	lsrs	r3, r3, #8
 800e8c4:	b29b      	uxth	r3, r3
 800e8c6:	b2da      	uxtb	r2, r3
 800e8c8:	69bb      	ldr	r3, [r7, #24]
 800e8ca:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800e8cc:	69bb      	ldr	r3, [r7, #24]
 800e8ce:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e8d2:	b2da      	uxtb	r2, r3
 800e8d4:	69bb      	ldr	r3, [r7, #24]
 800e8d6:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	330a      	adds	r3, #10
 800e8dc:	781b      	ldrb	r3, [r3, #0]
 800e8de:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	330b      	adds	r3, #11
 800e8e4:	781b      	ldrb	r3, [r3, #0]
 800e8e6:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e8e8:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	330c      	adds	r3, #12
 800e8ee:	781b      	ldrb	r3, [r3, #0]
 800e8f0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800e8f2:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800e8f4:	687a      	ldr	r2, [r7, #4]
 800e8f6:	320d      	adds	r2, #13
 800e8f8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800e8fa:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e8fc:	69bb      	ldr	r3, [r7, #24]
 800e8fe:	60da      	str	r2, [r3, #12]

  return 0;
 800e900:	2300      	movs	r3, #0
}
 800e902:	4618      	mov	r0, r3
 800e904:	3720      	adds	r7, #32
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}

0800e90a <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e90a:	b580      	push	{r7, lr}
 800e90c:	b088      	sub	sp, #32
 800e90e:	af00      	add	r7, sp, #0
 800e910:	60f8      	str	r0, [r7, #12]
 800e912:	460b      	mov	r3, r1
 800e914:	607a      	str	r2, [r7, #4]
 800e916:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	32b0      	adds	r2, #176	; 0xb0
 800e922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e926:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800e928:	69bb      	ldr	r3, [r7, #24]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d102      	bne.n	800e934 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 800e92e:	f04f 33ff 	mov.w	r3, #4294967295
 800e932:	e061      	b.n	800e9f8 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e93a:	68fa      	ldr	r2, [r7, #12]
 800e93c:	33b0      	adds	r3, #176	; 0xb0
 800e93e:	009b      	lsls	r3, r3, #2
 800e940:	4413      	add	r3, r2
 800e942:	685b      	ldr	r3, [r3, #4]
 800e944:	685b      	ldr	r3, [r3, #4]
 800e946:	f107 0214 	add.w	r2, r7, #20
 800e94a:	f107 0110 	add.w	r1, r7, #16
 800e94e:	7af8      	ldrb	r0, [r7, #11]
 800e950:	4798      	blx	r3
 800e952:	4603      	mov	r3, r0
 800e954:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800e956:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d104      	bne.n	800e968 <SCSI_ReadFormatCapacity+0x5e>
 800e95e:	69bb      	ldr	r3, [r7, #24]
 800e960:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800e964:	2b02      	cmp	r3, #2
 800e966:	d108      	bne.n	800e97a <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e968:	7af9      	ldrb	r1, [r7, #11]
 800e96a:	233a      	movs	r3, #58	; 0x3a
 800e96c:	2202      	movs	r2, #2
 800e96e:	68f8      	ldr	r0, [r7, #12]
 800e970:	f000 f929 	bl	800ebc6 <SCSI_SenseCode>
    return -1;
 800e974:	f04f 33ff 	mov.w	r3, #4294967295
 800e978:	e03e      	b.n	800e9f8 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 800e97a:	2300      	movs	r3, #0
 800e97c:	83fb      	strh	r3, [r7, #30]
 800e97e:	e007      	b.n	800e990 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 800e980:	8bfb      	ldrh	r3, [r7, #30]
 800e982:	69ba      	ldr	r2, [r7, #24]
 800e984:	4413      	add	r3, r2
 800e986:	2200      	movs	r2, #0
 800e988:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800e98a:	8bfb      	ldrh	r3, [r7, #30]
 800e98c:	3301      	adds	r3, #1
 800e98e:	83fb      	strh	r3, [r7, #30]
 800e990:	8bfb      	ldrh	r3, [r7, #30]
 800e992:	2b0b      	cmp	r3, #11
 800e994:	d9f4      	bls.n	800e980 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 800e996:	69bb      	ldr	r3, [r7, #24]
 800e998:	2208      	movs	r2, #8
 800e99a:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800e99c:	693b      	ldr	r3, [r7, #16]
 800e99e:	3b01      	subs	r3, #1
 800e9a0:	0e1b      	lsrs	r3, r3, #24
 800e9a2:	b2da      	uxtb	r2, r3
 800e9a4:	69bb      	ldr	r3, [r7, #24]
 800e9a6:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800e9a8:	693b      	ldr	r3, [r7, #16]
 800e9aa:	3b01      	subs	r3, #1
 800e9ac:	0c1b      	lsrs	r3, r3, #16
 800e9ae:	b2da      	uxtb	r2, r3
 800e9b0:	69bb      	ldr	r3, [r7, #24]
 800e9b2:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800e9b4:	693b      	ldr	r3, [r7, #16]
 800e9b6:	3b01      	subs	r3, #1
 800e9b8:	0a1b      	lsrs	r3, r3, #8
 800e9ba:	b2da      	uxtb	r2, r3
 800e9bc:	69bb      	ldr	r3, [r7, #24]
 800e9be:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	b2db      	uxtb	r3, r3
 800e9c4:	3b01      	subs	r3, #1
 800e9c6:	b2da      	uxtb	r2, r3
 800e9c8:	69bb      	ldr	r3, [r7, #24]
 800e9ca:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800e9cc:	69bb      	ldr	r3, [r7, #24]
 800e9ce:	2202      	movs	r2, #2
 800e9d0:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800e9d2:	8abb      	ldrh	r3, [r7, #20]
 800e9d4:	141b      	asrs	r3, r3, #16
 800e9d6:	b2da      	uxtb	r2, r3
 800e9d8:	69bb      	ldr	r3, [r7, #24]
 800e9da:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800e9dc:	8abb      	ldrh	r3, [r7, #20]
 800e9de:	0a1b      	lsrs	r3, r3, #8
 800e9e0:	b29b      	uxth	r3, r3
 800e9e2:	b2da      	uxtb	r2, r3
 800e9e4:	69bb      	ldr	r3, [r7, #24]
 800e9e6:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800e9e8:	8abb      	ldrh	r3, [r7, #20]
 800e9ea:	b2da      	uxtb	r2, r3
 800e9ec:	69bb      	ldr	r3, [r7, #24]
 800e9ee:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800e9f0:	69bb      	ldr	r3, [r7, #24]
 800e9f2:	220c      	movs	r2, #12
 800e9f4:	60da      	str	r2, [r3, #12]

  return 0;
 800e9f6:	2300      	movs	r3, #0
}
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	3720      	adds	r7, #32
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd80      	pop	{r7, pc}

0800ea00 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b086      	sub	sp, #24
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	60f8      	str	r0, [r7, #12]
 800ea08:	460b      	mov	r3, r1
 800ea0a:	607a      	str	r2, [r7, #4]
 800ea0c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	32b0      	adds	r2, #176	; 0xb0
 800ea18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea1c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800ea1e:	2317      	movs	r3, #23
 800ea20:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800ea22:	693b      	ldr	r3, [r7, #16]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d102      	bne.n	800ea2e <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800ea28:	f04f 33ff 	mov.w	r3, #4294967295
 800ea2c:	e011      	b.n	800ea52 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	3304      	adds	r3, #4
 800ea32:	781b      	ldrb	r3, [r3, #0]
 800ea34:	b29b      	uxth	r3, r3
 800ea36:	8afa      	ldrh	r2, [r7, #22]
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	d303      	bcc.n	800ea44 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	3304      	adds	r3, #4
 800ea40:	781b      	ldrb	r3, [r3, #0]
 800ea42:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800ea44:	8afb      	ldrh	r3, [r7, #22]
 800ea46:	461a      	mov	r2, r3
 800ea48:	4904      	ldr	r1, [pc, #16]	; (800ea5c <SCSI_ModeSense6+0x5c>)
 800ea4a:	6938      	ldr	r0, [r7, #16]
 800ea4c:	f000 fe28 	bl	800f6a0 <SCSI_UpdateBotData>

  return 0;
 800ea50:	2300      	movs	r3, #0
}
 800ea52:	4618      	mov	r0, r3
 800ea54:	3718      	adds	r7, #24
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd80      	pop	{r7, pc}
 800ea5a:	bf00      	nop
 800ea5c:	20000088 	.word	0x20000088

0800ea60 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b086      	sub	sp, #24
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	60f8      	str	r0, [r7, #12]
 800ea68:	460b      	mov	r3, r1
 800ea6a:	607a      	str	r2, [r7, #4]
 800ea6c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	32b0      	adds	r2, #176	; 0xb0
 800ea78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea7c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800ea7e:	231b      	movs	r3, #27
 800ea80:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800ea82:	693b      	ldr	r3, [r7, #16]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d102      	bne.n	800ea8e <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800ea88:	f04f 33ff 	mov.w	r3, #4294967295
 800ea8c:	e011      	b.n	800eab2 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	3308      	adds	r3, #8
 800ea92:	781b      	ldrb	r3, [r3, #0]
 800ea94:	b29b      	uxth	r3, r3
 800ea96:	8afa      	ldrh	r2, [r7, #22]
 800ea98:	429a      	cmp	r2, r3
 800ea9a:	d303      	bcc.n	800eaa4 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	3308      	adds	r3, #8
 800eaa0:	781b      	ldrb	r3, [r3, #0]
 800eaa2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800eaa4:	8afb      	ldrh	r3, [r7, #22]
 800eaa6:	461a      	mov	r2, r3
 800eaa8:	4904      	ldr	r1, [pc, #16]	; (800eabc <SCSI_ModeSense10+0x5c>)
 800eaaa:	6938      	ldr	r0, [r7, #16]
 800eaac:	f000 fdf8 	bl	800f6a0 <SCSI_UpdateBotData>

  return 0;
 800eab0:	2300      	movs	r3, #0
}
 800eab2:	4618      	mov	r0, r3
 800eab4:	3718      	adds	r7, #24
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}
 800eaba:	bf00      	nop
 800eabc:	200000a0 	.word	0x200000a0

0800eac0 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b086      	sub	sp, #24
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	60f8      	str	r0, [r7, #12]
 800eac8:	460b      	mov	r3, r1
 800eaca:	607a      	str	r2, [r7, #4]
 800eacc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	32b0      	adds	r2, #176	; 0xb0
 800ead8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eadc:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800eade:	693b      	ldr	r3, [r7, #16]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d102      	bne.n	800eaea <SCSI_RequestSense+0x2a>
  {
    return -1;
 800eae4:	f04f 33ff 	mov.w	r3, #4294967295
 800eae8:	e069      	b.n	800ebbe <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800eaea:	693b      	ldr	r3, [r7, #16]
 800eaec:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d10a      	bne.n	800eb0a <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800eaf4:	693b      	ldr	r3, [r7, #16]
 800eaf6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800eafa:	2320      	movs	r3, #32
 800eafc:	2205      	movs	r2, #5
 800eafe:	68f8      	ldr	r0, [r7, #12]
 800eb00:	f000 f861 	bl	800ebc6 <SCSI_SenseCode>
    return -1;
 800eb04:	f04f 33ff 	mov.w	r3, #4294967295
 800eb08:	e059      	b.n	800ebbe <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	75fb      	strb	r3, [r7, #23]
 800eb0e:	e007      	b.n	800eb20 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 800eb10:	7dfb      	ldrb	r3, [r7, #23]
 800eb12:	693a      	ldr	r2, [r7, #16]
 800eb14:	4413      	add	r3, r2
 800eb16:	2200      	movs	r2, #0
 800eb18:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800eb1a:	7dfb      	ldrb	r3, [r7, #23]
 800eb1c:	3301      	adds	r3, #1
 800eb1e:	75fb      	strb	r3, [r7, #23]
 800eb20:	7dfb      	ldrb	r3, [r7, #23]
 800eb22:	2b11      	cmp	r3, #17
 800eb24:	d9f4      	bls.n	800eb10 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 800eb26:	693b      	ldr	r3, [r7, #16]
 800eb28:	2270      	movs	r2, #112	; 0x70
 800eb2a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800eb2c:	693b      	ldr	r3, [r7, #16]
 800eb2e:	220c      	movs	r2, #12
 800eb30:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800eb32:	693b      	ldr	r3, [r7, #16]
 800eb34:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800eb38:	693b      	ldr	r3, [r7, #16]
 800eb3a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800eb3e:	429a      	cmp	r2, r3
 800eb40:	d02e      	beq.n	800eba0 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800eb42:	693b      	ldr	r3, [r7, #16]
 800eb44:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800eb48:	461a      	mov	r2, r3
 800eb4a:	693b      	ldr	r3, [r7, #16]
 800eb4c:	3248      	adds	r2, #72	; 0x48
 800eb4e:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800eb52:	693b      	ldr	r3, [r7, #16]
 800eb54:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800eb56:	693b      	ldr	r3, [r7, #16]
 800eb58:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800eb5c:	693a      	ldr	r2, [r7, #16]
 800eb5e:	3348      	adds	r3, #72	; 0x48
 800eb60:	00db      	lsls	r3, r3, #3
 800eb62:	4413      	add	r3, r2
 800eb64:	791a      	ldrb	r2, [r3, #4]
 800eb66:	693b      	ldr	r3, [r7, #16]
 800eb68:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800eb6a:	693b      	ldr	r3, [r7, #16]
 800eb6c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800eb70:	693a      	ldr	r2, [r7, #16]
 800eb72:	3348      	adds	r3, #72	; 0x48
 800eb74:	00db      	lsls	r3, r3, #3
 800eb76:	4413      	add	r3, r2
 800eb78:	795a      	ldrb	r2, [r3, #5]
 800eb7a:	693b      	ldr	r3, [r7, #16]
 800eb7c:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800eb7e:	693b      	ldr	r3, [r7, #16]
 800eb80:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800eb84:	3301      	adds	r3, #1
 800eb86:	b2da      	uxtb	r2, r3
 800eb88:	693b      	ldr	r3, [r7, #16]
 800eb8a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800eb8e:	693b      	ldr	r3, [r7, #16]
 800eb90:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800eb94:	2b04      	cmp	r3, #4
 800eb96:	d103      	bne.n	800eba0 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 800eb98:	693b      	ldr	r3, [r7, #16]
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800eba0:	693b      	ldr	r3, [r7, #16]
 800eba2:	2212      	movs	r2, #18
 800eba4:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	3304      	adds	r3, #4
 800ebaa:	781b      	ldrb	r3, [r3, #0]
 800ebac:	2b12      	cmp	r3, #18
 800ebae:	d805      	bhi.n	800ebbc <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	3304      	adds	r3, #4
 800ebb4:	781b      	ldrb	r3, [r3, #0]
 800ebb6:	461a      	mov	r2, r3
 800ebb8:	693b      	ldr	r3, [r7, #16]
 800ebba:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800ebbc:	2300      	movs	r3, #0
}
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	3718      	adds	r7, #24
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}

0800ebc6 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800ebc6:	b480      	push	{r7}
 800ebc8:	b085      	sub	sp, #20
 800ebca:	af00      	add	r7, sp, #0
 800ebcc:	6078      	str	r0, [r7, #4]
 800ebce:	4608      	mov	r0, r1
 800ebd0:	4611      	mov	r1, r2
 800ebd2:	461a      	mov	r2, r3
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	70fb      	strb	r3, [r7, #3]
 800ebd8:	460b      	mov	r3, r1
 800ebda:	70bb      	strb	r3, [r7, #2]
 800ebdc:	4613      	mov	r3, r2
 800ebde:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	32b0      	adds	r2, #176	; 0xb0
 800ebea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebee:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d02c      	beq.n	800ec50 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800ebfc:	461a      	mov	r2, r3
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	3248      	adds	r2, #72	; 0x48
 800ec02:	78b9      	ldrb	r1, [r7, #2]
 800ec04:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800ec0e:	68fa      	ldr	r2, [r7, #12]
 800ec10:	3348      	adds	r3, #72	; 0x48
 800ec12:	00db      	lsls	r3, r3, #3
 800ec14:	4413      	add	r3, r2
 800ec16:	787a      	ldrb	r2, [r7, #1]
 800ec18:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800ec20:	68fa      	ldr	r2, [r7, #12]
 800ec22:	3348      	adds	r3, #72	; 0x48
 800ec24:	00db      	lsls	r3, r3, #3
 800ec26:	4413      	add	r3, r2
 800ec28:	2200      	movs	r2, #0
 800ec2a:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800ec32:	3301      	adds	r3, #1
 800ec34:	b2da      	uxtb	r2, r3
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800ec42:	2b04      	cmp	r3, #4
 800ec44:	d105      	bne.n	800ec52 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	2200      	movs	r2, #0
 800ec4a:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 800ec4e:	e000      	b.n	800ec52 <SCSI_SenseCode+0x8c>
    return;
 800ec50:	bf00      	nop
  }
}
 800ec52:	3714      	adds	r7, #20
 800ec54:	46bd      	mov	sp, r7
 800ec56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5a:	4770      	bx	lr

0800ec5c <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b086      	sub	sp, #24
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	60f8      	str	r0, [r7, #12]
 800ec64:	460b      	mov	r3, r1
 800ec66:	607a      	str	r2, [r7, #4]
 800ec68:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	32b0      	adds	r2, #176	; 0xb0
 800ec74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec78:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d102      	bne.n	800ec86 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800ec80:	f04f 33ff 	mov.w	r3, #4294967295
 800ec84:	e03b      	b.n	800ecfe <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800ec8c:	2b01      	cmp	r3, #1
 800ec8e:	d10f      	bne.n	800ecb0 <SCSI_StartStopUnit+0x54>
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	3304      	adds	r3, #4
 800ec94:	781b      	ldrb	r3, [r3, #0]
 800ec96:	f003 0303 	and.w	r3, r3, #3
 800ec9a:	2b02      	cmp	r3, #2
 800ec9c:	d108      	bne.n	800ecb0 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800ec9e:	7af9      	ldrb	r1, [r7, #11]
 800eca0:	2324      	movs	r3, #36	; 0x24
 800eca2:	2205      	movs	r2, #5
 800eca4:	68f8      	ldr	r0, [r7, #12]
 800eca6:	f7ff ff8e 	bl	800ebc6 <SCSI_SenseCode>

    return -1;
 800ecaa:	f04f 33ff 	mov.w	r3, #4294967295
 800ecae:	e026      	b.n	800ecfe <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	3304      	adds	r3, #4
 800ecb4:	781b      	ldrb	r3, [r3, #0]
 800ecb6:	f003 0303 	and.w	r3, r3, #3
 800ecba:	2b01      	cmp	r3, #1
 800ecbc:	d104      	bne.n	800ecc8 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ecbe:	697b      	ldr	r3, [r7, #20]
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800ecc6:	e016      	b.n	800ecf6 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	3304      	adds	r3, #4
 800eccc:	781b      	ldrb	r3, [r3, #0]
 800ecce:	f003 0303 	and.w	r3, r3, #3
 800ecd2:	2b02      	cmp	r3, #2
 800ecd4:	d104      	bne.n	800ece0 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800ecd6:	697b      	ldr	r3, [r7, #20]
 800ecd8:	2202      	movs	r2, #2
 800ecda:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800ecde:	e00a      	b.n	800ecf6 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	3304      	adds	r3, #4
 800ece4:	781b      	ldrb	r3, [r3, #0]
 800ece6:	f003 0303 	and.w	r3, r3, #3
 800ecea:	2b03      	cmp	r3, #3
 800ecec:	d103      	bne.n	800ecf6 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	60da      	str	r2, [r3, #12]

  return 0;
 800ecfc:	2300      	movs	r3, #0
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	3718      	adds	r7, #24
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}

0800ed06 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ed06:	b480      	push	{r7}
 800ed08:	b087      	sub	sp, #28
 800ed0a:	af00      	add	r7, sp, #0
 800ed0c:	60f8      	str	r0, [r7, #12]
 800ed0e:	460b      	mov	r3, r1
 800ed10:	607a      	str	r2, [r7, #4]
 800ed12:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	32b0      	adds	r2, #176	; 0xb0
 800ed1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed22:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ed24:	697b      	ldr	r3, [r7, #20]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d102      	bne.n	800ed30 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800ed2a:	f04f 33ff 	mov.w	r3, #4294967295
 800ed2e:	e011      	b.n	800ed54 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	3304      	adds	r3, #4
 800ed34:	781b      	ldrb	r3, [r3, #0]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d104      	bne.n	800ed44 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ed3a:	697b      	ldr	r3, [r7, #20]
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800ed42:	e003      	b.n	800ed4c <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800ed44:	697b      	ldr	r3, [r7, #20]
 800ed46:	2201      	movs	r2, #1
 800ed48:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800ed4c:	697b      	ldr	r3, [r7, #20]
 800ed4e:	2200      	movs	r2, #0
 800ed50:	60da      	str	r2, [r3, #12]

  return 0;
 800ed52:	2300      	movs	r3, #0
}
 800ed54:	4618      	mov	r0, r3
 800ed56:	371c      	adds	r7, #28
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5e:	4770      	bx	lr

0800ed60 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b086      	sub	sp, #24
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	60f8      	str	r0, [r7, #12]
 800ed68:	460b      	mov	r3, r1
 800ed6a:	607a      	str	r2, [r7, #4]
 800ed6c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	32b0      	adds	r2, #176	; 0xb0
 800ed78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed7c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ed7e:	697b      	ldr	r3, [r7, #20]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d102      	bne.n	800ed8a <SCSI_Read10+0x2a>
  {
    return -1;
 800ed84:	f04f 33ff 	mov.w	r3, #4294967295
 800ed88:	e090      	b.n	800eeac <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800ed8a:	697b      	ldr	r3, [r7, #20]
 800ed8c:	7a1b      	ldrb	r3, [r3, #8]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	f040 8082 	bne.w	800ee98 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800ed94:	697b      	ldr	r3, [r7, #20]
 800ed96:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800ed9a:	b25b      	sxtb	r3, r3
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	db0a      	blt.n	800edb6 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800eda0:	697b      	ldr	r3, [r7, #20]
 800eda2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800eda6:	2320      	movs	r3, #32
 800eda8:	2205      	movs	r2, #5
 800edaa:	68f8      	ldr	r0, [r7, #12]
 800edac:	f7ff ff0b 	bl	800ebc6 <SCSI_SenseCode>
      return -1;
 800edb0:	f04f 33ff 	mov.w	r3, #4294967295
 800edb4:	e07a      	b.n	800eeac <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800edb6:	697b      	ldr	r3, [r7, #20]
 800edb8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800edbc:	2b02      	cmp	r3, #2
 800edbe:	d108      	bne.n	800edd2 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800edc0:	7af9      	ldrb	r1, [r7, #11]
 800edc2:	233a      	movs	r3, #58	; 0x3a
 800edc4:	2202      	movs	r2, #2
 800edc6:	68f8      	ldr	r0, [r7, #12]
 800edc8:	f7ff fefd 	bl	800ebc6 <SCSI_SenseCode>

      return -1;
 800edcc:	f04f 33ff 	mov.w	r3, #4294967295
 800edd0:	e06c      	b.n	800eeac <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800edd8:	68fa      	ldr	r2, [r7, #12]
 800edda:	33b0      	adds	r3, #176	; 0xb0
 800eddc:	009b      	lsls	r3, r3, #2
 800edde:	4413      	add	r3, r2
 800ede0:	685b      	ldr	r3, [r3, #4]
 800ede2:	689b      	ldr	r3, [r3, #8]
 800ede4:	7afa      	ldrb	r2, [r7, #11]
 800ede6:	4610      	mov	r0, r2
 800ede8:	4798      	blx	r3
 800edea:	4603      	mov	r3, r0
 800edec:	2b00      	cmp	r3, #0
 800edee:	d008      	beq.n	800ee02 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800edf0:	7af9      	ldrb	r1, [r7, #11]
 800edf2:	233a      	movs	r3, #58	; 0x3a
 800edf4:	2202      	movs	r2, #2
 800edf6:	68f8      	ldr	r0, [r7, #12]
 800edf8:	f7ff fee5 	bl	800ebc6 <SCSI_SenseCode>
      return -1;
 800edfc:	f04f 33ff 	mov.w	r3, #4294967295
 800ee00:	e054      	b.n	800eeac <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	3302      	adds	r3, #2
 800ee06:	781b      	ldrb	r3, [r3, #0]
 800ee08:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	3303      	adds	r3, #3
 800ee0e:	781b      	ldrb	r3, [r3, #0]
 800ee10:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ee12:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	3304      	adds	r3, #4
 800ee18:	781b      	ldrb	r3, [r3, #0]
 800ee1a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ee1c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ee1e:	687a      	ldr	r2, [r7, #4]
 800ee20:	3205      	adds	r2, #5
 800ee22:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800ee24:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ee26:	697b      	ldr	r3, [r7, #20]
 800ee28:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	3307      	adds	r3, #7
 800ee30:	781b      	ldrb	r3, [r3, #0]
 800ee32:	021b      	lsls	r3, r3, #8
 800ee34:	687a      	ldr	r2, [r7, #4]
 800ee36:	3208      	adds	r2, #8
 800ee38:	7812      	ldrb	r2, [r2, #0]
 800ee3a:	431a      	orrs	r2, r3
 800ee3c:	697b      	ldr	r3, [r7, #20]
 800ee3e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ee42:	697b      	ldr	r3, [r7, #20]
 800ee44:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800ee48:	697b      	ldr	r3, [r7, #20]
 800ee4a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ee4e:	7af9      	ldrb	r1, [r7, #11]
 800ee50:	68f8      	ldr	r0, [r7, #12]
 800ee52:	f000 fadc 	bl	800f40e <SCSI_CheckAddressRange>
 800ee56:	4603      	mov	r3, r0
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	da02      	bge.n	800ee62 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800ee5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ee60:	e024      	b.n	800eeac <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800ee62:	697b      	ldr	r3, [r7, #20]
 800ee64:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800ee68:	697b      	ldr	r3, [r7, #20]
 800ee6a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ee6e:	6979      	ldr	r1, [r7, #20]
 800ee70:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800ee74:	fb01 f303 	mul.w	r3, r1, r3
 800ee78:	429a      	cmp	r2, r3
 800ee7a:	d00a      	beq.n	800ee92 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ee7c:	697b      	ldr	r3, [r7, #20]
 800ee7e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ee82:	2320      	movs	r3, #32
 800ee84:	2205      	movs	r2, #5
 800ee86:	68f8      	ldr	r0, [r7, #12]
 800ee88:	f7ff fe9d 	bl	800ebc6 <SCSI_SenseCode>
      return -1;
 800ee8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ee90:	e00c      	b.n	800eeac <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800ee92:	697b      	ldr	r3, [r7, #20]
 800ee94:	2202      	movs	r2, #2
 800ee96:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ee9e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800eea0:	7afb      	ldrb	r3, [r7, #11]
 800eea2:	4619      	mov	r1, r3
 800eea4:	68f8      	ldr	r0, [r7, #12]
 800eea6:	f000 fadf 	bl	800f468 <SCSI_ProcessRead>
 800eeaa:	4603      	mov	r3, r0
}
 800eeac:	4618      	mov	r0, r3
 800eeae:	3718      	adds	r7, #24
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}

0800eeb4 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b086      	sub	sp, #24
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	60f8      	str	r0, [r7, #12]
 800eebc:	460b      	mov	r3, r1
 800eebe:	607a      	str	r2, [r7, #4]
 800eec0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	32b0      	adds	r2, #176	; 0xb0
 800eecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eed0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800eed2:	697b      	ldr	r3, [r7, #20]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d102      	bne.n	800eede <SCSI_Read12+0x2a>
  {
    return -1;
 800eed8:	f04f 33ff 	mov.w	r3, #4294967295
 800eedc:	e09a      	b.n	800f014 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800eede:	697b      	ldr	r3, [r7, #20]
 800eee0:	7a1b      	ldrb	r3, [r3, #8]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	f040 808c 	bne.w	800f000 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800eee8:	697b      	ldr	r3, [r7, #20]
 800eeea:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800eeee:	b25b      	sxtb	r3, r3
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	db0a      	blt.n	800ef0a <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800eef4:	697b      	ldr	r3, [r7, #20]
 800eef6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800eefa:	2320      	movs	r3, #32
 800eefc:	2205      	movs	r2, #5
 800eefe:	68f8      	ldr	r0, [r7, #12]
 800ef00:	f7ff fe61 	bl	800ebc6 <SCSI_SenseCode>
      return -1;
 800ef04:	f04f 33ff 	mov.w	r3, #4294967295
 800ef08:	e084      	b.n	800f014 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800ef0a:	697b      	ldr	r3, [r7, #20]
 800ef0c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800ef10:	2b02      	cmp	r3, #2
 800ef12:	d108      	bne.n	800ef26 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ef14:	7af9      	ldrb	r1, [r7, #11]
 800ef16:	233a      	movs	r3, #58	; 0x3a
 800ef18:	2202      	movs	r2, #2
 800ef1a:	68f8      	ldr	r0, [r7, #12]
 800ef1c:	f7ff fe53 	bl	800ebc6 <SCSI_SenseCode>
      return -1;
 800ef20:	f04f 33ff 	mov.w	r3, #4294967295
 800ef24:	e076      	b.n	800f014 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ef2c:	68fa      	ldr	r2, [r7, #12]
 800ef2e:	33b0      	adds	r3, #176	; 0xb0
 800ef30:	009b      	lsls	r3, r3, #2
 800ef32:	4413      	add	r3, r2
 800ef34:	685b      	ldr	r3, [r3, #4]
 800ef36:	689b      	ldr	r3, [r3, #8]
 800ef38:	7afa      	ldrb	r2, [r7, #11]
 800ef3a:	4610      	mov	r0, r2
 800ef3c:	4798      	blx	r3
 800ef3e:	4603      	mov	r3, r0
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d008      	beq.n	800ef56 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ef44:	7af9      	ldrb	r1, [r7, #11]
 800ef46:	233a      	movs	r3, #58	; 0x3a
 800ef48:	2202      	movs	r2, #2
 800ef4a:	68f8      	ldr	r0, [r7, #12]
 800ef4c:	f7ff fe3b 	bl	800ebc6 <SCSI_SenseCode>
      return -1;
 800ef50:	f04f 33ff 	mov.w	r3, #4294967295
 800ef54:	e05e      	b.n	800f014 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	3302      	adds	r3, #2
 800ef5a:	781b      	ldrb	r3, [r3, #0]
 800ef5c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	3303      	adds	r3, #3
 800ef62:	781b      	ldrb	r3, [r3, #0]
 800ef64:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ef66:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	3304      	adds	r3, #4
 800ef6c:	781b      	ldrb	r3, [r3, #0]
 800ef6e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ef70:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ef72:	687a      	ldr	r2, [r7, #4]
 800ef74:	3205      	adds	r2, #5
 800ef76:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800ef78:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	3306      	adds	r3, #6
 800ef84:	781b      	ldrb	r3, [r3, #0]
 800ef86:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	3307      	adds	r3, #7
 800ef8c:	781b      	ldrb	r3, [r3, #0]
 800ef8e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ef90:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	3308      	adds	r3, #8
 800ef96:	781b      	ldrb	r3, [r3, #0]
 800ef98:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800ef9a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800ef9c:	687a      	ldr	r2, [r7, #4]
 800ef9e:	3209      	adds	r2, #9
 800efa0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800efa2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800efa4:	697b      	ldr	r3, [r7, #20]
 800efa6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800efaa:	697b      	ldr	r3, [r7, #20]
 800efac:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800efb0:	697b      	ldr	r3, [r7, #20]
 800efb2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800efb6:	7af9      	ldrb	r1, [r7, #11]
 800efb8:	68f8      	ldr	r0, [r7, #12]
 800efba:	f000 fa28 	bl	800f40e <SCSI_CheckAddressRange>
 800efbe:	4603      	mov	r3, r0
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	da02      	bge.n	800efca <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800efc4:	f04f 33ff 	mov.w	r3, #4294967295
 800efc8:	e024      	b.n	800f014 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800efca:	697b      	ldr	r3, [r7, #20]
 800efcc:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800efd6:	6979      	ldr	r1, [r7, #20]
 800efd8:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800efdc:	fb01 f303 	mul.w	r3, r1, r3
 800efe0:	429a      	cmp	r2, r3
 800efe2:	d00a      	beq.n	800effa <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800efe4:	697b      	ldr	r3, [r7, #20]
 800efe6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800efea:	2320      	movs	r3, #32
 800efec:	2205      	movs	r2, #5
 800efee:	68f8      	ldr	r0, [r7, #12]
 800eff0:	f7ff fde9 	bl	800ebc6 <SCSI_SenseCode>
      return -1;
 800eff4:	f04f 33ff 	mov.w	r3, #4294967295
 800eff8:	e00c      	b.n	800f014 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800effa:	697b      	ldr	r3, [r7, #20]
 800effc:	2202      	movs	r2, #2
 800effe:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f006:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800f008:	7afb      	ldrb	r3, [r7, #11]
 800f00a:	4619      	mov	r1, r3
 800f00c:	68f8      	ldr	r0, [r7, #12]
 800f00e:	f000 fa2b 	bl	800f468 <SCSI_ProcessRead>
 800f012:	4603      	mov	r3, r0
}
 800f014:	4618      	mov	r0, r3
 800f016:	3718      	adds	r7, #24
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd80      	pop	{r7, pc}

0800f01c <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b086      	sub	sp, #24
 800f020:	af00      	add	r7, sp, #0
 800f022:	60f8      	str	r0, [r7, #12]
 800f024:	460b      	mov	r3, r1
 800f026:	607a      	str	r2, [r7, #4]
 800f028:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	32b0      	adds	r2, #176	; 0xb0
 800f034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f038:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800f03a:	697b      	ldr	r3, [r7, #20]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d102      	bne.n	800f046 <SCSI_Write10+0x2a>
  {
    return -1;
 800f040:	f04f 33ff 	mov.w	r3, #4294967295
 800f044:	e0ba      	b.n	800f1bc <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800f046:	697b      	ldr	r3, [r7, #20]
 800f048:	7a1b      	ldrb	r3, [r3, #8]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	f040 80b0 	bne.w	800f1b0 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800f050:	697b      	ldr	r3, [r7, #20]
 800f052:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f056:	2b00      	cmp	r3, #0
 800f058:	d10a      	bne.n	800f070 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f05a:	697b      	ldr	r3, [r7, #20]
 800f05c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f060:	2320      	movs	r3, #32
 800f062:	2205      	movs	r2, #5
 800f064:	68f8      	ldr	r0, [r7, #12]
 800f066:	f7ff fdae 	bl	800ebc6 <SCSI_SenseCode>
      return -1;
 800f06a:	f04f 33ff 	mov.w	r3, #4294967295
 800f06e:	e0a5      	b.n	800f1bc <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800f070:	697b      	ldr	r3, [r7, #20]
 800f072:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800f076:	b25b      	sxtb	r3, r3
 800f078:	2b00      	cmp	r3, #0
 800f07a:	da0a      	bge.n	800f092 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f07c:	697b      	ldr	r3, [r7, #20]
 800f07e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f082:	2320      	movs	r3, #32
 800f084:	2205      	movs	r2, #5
 800f086:	68f8      	ldr	r0, [r7, #12]
 800f088:	f7ff fd9d 	bl	800ebc6 <SCSI_SenseCode>
      return -1;
 800f08c:	f04f 33ff 	mov.w	r3, #4294967295
 800f090:	e094      	b.n	800f1bc <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f098:	68fa      	ldr	r2, [r7, #12]
 800f09a:	33b0      	adds	r3, #176	; 0xb0
 800f09c:	009b      	lsls	r3, r3, #2
 800f09e:	4413      	add	r3, r2
 800f0a0:	685b      	ldr	r3, [r3, #4]
 800f0a2:	689b      	ldr	r3, [r3, #8]
 800f0a4:	7afa      	ldrb	r2, [r7, #11]
 800f0a6:	4610      	mov	r0, r2
 800f0a8:	4798      	blx	r3
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d008      	beq.n	800f0c2 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f0b0:	7af9      	ldrb	r1, [r7, #11]
 800f0b2:	233a      	movs	r3, #58	; 0x3a
 800f0b4:	2202      	movs	r2, #2
 800f0b6:	68f8      	ldr	r0, [r7, #12]
 800f0b8:	f7ff fd85 	bl	800ebc6 <SCSI_SenseCode>
      return -1;
 800f0bc:	f04f 33ff 	mov.w	r3, #4294967295
 800f0c0:	e07c      	b.n	800f1bc <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f0c8:	68fa      	ldr	r2, [r7, #12]
 800f0ca:	33b0      	adds	r3, #176	; 0xb0
 800f0cc:	009b      	lsls	r3, r3, #2
 800f0ce:	4413      	add	r3, r2
 800f0d0:	685b      	ldr	r3, [r3, #4]
 800f0d2:	68db      	ldr	r3, [r3, #12]
 800f0d4:	7afa      	ldrb	r2, [r7, #11]
 800f0d6:	4610      	mov	r0, r2
 800f0d8:	4798      	blx	r3
 800f0da:	4603      	mov	r3, r0
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d008      	beq.n	800f0f2 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800f0e0:	7af9      	ldrb	r1, [r7, #11]
 800f0e2:	2327      	movs	r3, #39	; 0x27
 800f0e4:	2202      	movs	r2, #2
 800f0e6:	68f8      	ldr	r0, [r7, #12]
 800f0e8:	f7ff fd6d 	bl	800ebc6 <SCSI_SenseCode>
      return -1;
 800f0ec:	f04f 33ff 	mov.w	r3, #4294967295
 800f0f0:	e064      	b.n	800f1bc <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	3302      	adds	r3, #2
 800f0f6:	781b      	ldrb	r3, [r3, #0]
 800f0f8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	3303      	adds	r3, #3
 800f0fe:	781b      	ldrb	r3, [r3, #0]
 800f100:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f102:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	3304      	adds	r3, #4
 800f108:	781b      	ldrb	r3, [r3, #0]
 800f10a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800f10c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800f10e:	687a      	ldr	r2, [r7, #4]
 800f110:	3205      	adds	r2, #5
 800f112:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800f114:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f116:	697b      	ldr	r3, [r7, #20]
 800f118:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	3307      	adds	r3, #7
 800f120:	781b      	ldrb	r3, [r3, #0]
 800f122:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800f124:	687a      	ldr	r2, [r7, #4]
 800f126:	3208      	adds	r2, #8
 800f128:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800f12a:	431a      	orrs	r2, r3
 800f12c:	697b      	ldr	r3, [r7, #20]
 800f12e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f138:	697b      	ldr	r3, [r7, #20]
 800f13a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f13e:	7af9      	ldrb	r1, [r7, #11]
 800f140:	68f8      	ldr	r0, [r7, #12]
 800f142:	f000 f964 	bl	800f40e <SCSI_CheckAddressRange>
 800f146:	4603      	mov	r3, r0
 800f148:	2b00      	cmp	r3, #0
 800f14a:	da02      	bge.n	800f152 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800f14c:	f04f 33ff 	mov.w	r3, #4294967295
 800f150:	e034      	b.n	800f1bc <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f152:	697b      	ldr	r3, [r7, #20]
 800f154:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f158:	697a      	ldr	r2, [r7, #20]
 800f15a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f15e:	fb02 f303 	mul.w	r3, r2, r3
 800f162:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800f164:	697b      	ldr	r3, [r7, #20]
 800f166:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f16a:	693a      	ldr	r2, [r7, #16]
 800f16c:	429a      	cmp	r2, r3
 800f16e:	d00a      	beq.n	800f186 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f170:	697b      	ldr	r3, [r7, #20]
 800f172:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f176:	2320      	movs	r3, #32
 800f178:	2205      	movs	r2, #5
 800f17a:	68f8      	ldr	r0, [r7, #12]
 800f17c:	f7ff fd23 	bl	800ebc6 <SCSI_SenseCode>
      return -1;
 800f180:	f04f 33ff 	mov.w	r3, #4294967295
 800f184:	e01a      	b.n	800f1bc <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800f186:	693b      	ldr	r3, [r7, #16]
 800f188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f18c:	bf28      	it	cs
 800f18e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f192:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800f194:	697b      	ldr	r3, [r7, #20]
 800f196:	2201      	movs	r2, #1
 800f198:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800f19a:	4b0a      	ldr	r3, [pc, #40]	; (800f1c4 <SCSI_Write10+0x1a8>)
 800f19c:	7819      	ldrb	r1, [r3, #0]
 800f19e:	697b      	ldr	r3, [r7, #20]
 800f1a0:	f103 0210 	add.w	r2, r3, #16
 800f1a4:	693b      	ldr	r3, [r7, #16]
 800f1a6:	68f8      	ldr	r0, [r7, #12]
 800f1a8:	f008 fbd7 	bl	801795a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	e005      	b.n	800f1bc <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 800f1b0:	7afb      	ldrb	r3, [r7, #11]
 800f1b2:	4619      	mov	r1, r3
 800f1b4:	68f8      	ldr	r0, [r7, #12]
 800f1b6:	f000 f9dd 	bl	800f574 <SCSI_ProcessWrite>
 800f1ba:	4603      	mov	r3, r0
}
 800f1bc:	4618      	mov	r0, r3
 800f1be:	3718      	adds	r7, #24
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	bd80      	pop	{r7, pc}
 800f1c4:	20000077 	.word	0x20000077

0800f1c8 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b086      	sub	sp, #24
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	60f8      	str	r0, [r7, #12]
 800f1d0:	460b      	mov	r3, r1
 800f1d2:	607a      	str	r2, [r7, #4]
 800f1d4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	32b0      	adds	r2, #176	; 0xb0
 800f1e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1e4:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800f1e6:	697b      	ldr	r3, [r7, #20]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d102      	bne.n	800f1f2 <SCSI_Write12+0x2a>
  {
    return -1;
 800f1ec:	f04f 33ff 	mov.w	r3, #4294967295
 800f1f0:	e0ca      	b.n	800f388 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800f1f2:	697b      	ldr	r3, [r7, #20]
 800f1f4:	7a1b      	ldrb	r3, [r3, #8]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	f040 80c0 	bne.w	800f37c <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800f1fc:	697b      	ldr	r3, [r7, #20]
 800f1fe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f202:	2b00      	cmp	r3, #0
 800f204:	d10a      	bne.n	800f21c <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f20c:	2320      	movs	r3, #32
 800f20e:	2205      	movs	r2, #5
 800f210:	68f8      	ldr	r0, [r7, #12]
 800f212:	f7ff fcd8 	bl	800ebc6 <SCSI_SenseCode>
      return -1;
 800f216:	f04f 33ff 	mov.w	r3, #4294967295
 800f21a:	e0b5      	b.n	800f388 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800f21c:	697b      	ldr	r3, [r7, #20]
 800f21e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800f222:	b25b      	sxtb	r3, r3
 800f224:	2b00      	cmp	r3, #0
 800f226:	da0a      	bge.n	800f23e <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f228:	697b      	ldr	r3, [r7, #20]
 800f22a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f22e:	2320      	movs	r3, #32
 800f230:	2205      	movs	r2, #5
 800f232:	68f8      	ldr	r0, [r7, #12]
 800f234:	f7ff fcc7 	bl	800ebc6 <SCSI_SenseCode>
      return -1;
 800f238:	f04f 33ff 	mov.w	r3, #4294967295
 800f23c:	e0a4      	b.n	800f388 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f244:	68fa      	ldr	r2, [r7, #12]
 800f246:	33b0      	adds	r3, #176	; 0xb0
 800f248:	009b      	lsls	r3, r3, #2
 800f24a:	4413      	add	r3, r2
 800f24c:	685b      	ldr	r3, [r3, #4]
 800f24e:	689b      	ldr	r3, [r3, #8]
 800f250:	7afa      	ldrb	r2, [r7, #11]
 800f252:	4610      	mov	r0, r2
 800f254:	4798      	blx	r3
 800f256:	4603      	mov	r3, r0
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d00b      	beq.n	800f274 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f25c:	7af9      	ldrb	r1, [r7, #11]
 800f25e:	233a      	movs	r3, #58	; 0x3a
 800f260:	2202      	movs	r2, #2
 800f262:	68f8      	ldr	r0, [r7, #12]
 800f264:	f7ff fcaf 	bl	800ebc6 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800f268:	697b      	ldr	r3, [r7, #20]
 800f26a:	2205      	movs	r2, #5
 800f26c:	721a      	strb	r2, [r3, #8]
      return -1;
 800f26e:	f04f 33ff 	mov.w	r3, #4294967295
 800f272:	e089      	b.n	800f388 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f27a:	68fa      	ldr	r2, [r7, #12]
 800f27c:	33b0      	adds	r3, #176	; 0xb0
 800f27e:	009b      	lsls	r3, r3, #2
 800f280:	4413      	add	r3, r2
 800f282:	685b      	ldr	r3, [r3, #4]
 800f284:	68db      	ldr	r3, [r3, #12]
 800f286:	7afa      	ldrb	r2, [r7, #11]
 800f288:	4610      	mov	r0, r2
 800f28a:	4798      	blx	r3
 800f28c:	4603      	mov	r3, r0
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d00b      	beq.n	800f2aa <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800f292:	7af9      	ldrb	r1, [r7, #11]
 800f294:	2327      	movs	r3, #39	; 0x27
 800f296:	2202      	movs	r2, #2
 800f298:	68f8      	ldr	r0, [r7, #12]
 800f29a:	f7ff fc94 	bl	800ebc6 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800f29e:	697b      	ldr	r3, [r7, #20]
 800f2a0:	2205      	movs	r2, #5
 800f2a2:	721a      	strb	r2, [r3, #8]
      return -1;
 800f2a4:	f04f 33ff 	mov.w	r3, #4294967295
 800f2a8:	e06e      	b.n	800f388 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	3302      	adds	r3, #2
 800f2ae:	781b      	ldrb	r3, [r3, #0]
 800f2b0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	3303      	adds	r3, #3
 800f2b6:	781b      	ldrb	r3, [r3, #0]
 800f2b8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f2ba:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	3304      	adds	r3, #4
 800f2c0:	781b      	ldrb	r3, [r3, #0]
 800f2c2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800f2c4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800f2c6:	687a      	ldr	r2, [r7, #4]
 800f2c8:	3205      	adds	r2, #5
 800f2ca:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800f2cc:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	3306      	adds	r3, #6
 800f2d8:	781b      	ldrb	r3, [r3, #0]
 800f2da:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	3307      	adds	r3, #7
 800f2e0:	781b      	ldrb	r3, [r3, #0]
 800f2e2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f2e4:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	3308      	adds	r3, #8
 800f2ea:	781b      	ldrb	r3, [r3, #0]
 800f2ec:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800f2ee:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800f2f0:	687a      	ldr	r2, [r7, #4]
 800f2f2:	3209      	adds	r2, #9
 800f2f4:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800f2f6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f2f8:	697b      	ldr	r3, [r7, #20]
 800f2fa:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800f2fe:	697b      	ldr	r3, [r7, #20]
 800f300:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f30a:	7af9      	ldrb	r1, [r7, #11]
 800f30c:	68f8      	ldr	r0, [r7, #12]
 800f30e:	f000 f87e 	bl	800f40e <SCSI_CheckAddressRange>
 800f312:	4603      	mov	r3, r0
 800f314:	2b00      	cmp	r3, #0
 800f316:	da02      	bge.n	800f31e <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800f318:	f04f 33ff 	mov.w	r3, #4294967295
 800f31c:	e034      	b.n	800f388 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f324:	697a      	ldr	r2, [r7, #20]
 800f326:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f32a:	fb02 f303 	mul.w	r3, r2, r3
 800f32e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800f330:	697b      	ldr	r3, [r7, #20]
 800f332:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f336:	693a      	ldr	r2, [r7, #16]
 800f338:	429a      	cmp	r2, r3
 800f33a:	d00a      	beq.n	800f352 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f33c:	697b      	ldr	r3, [r7, #20]
 800f33e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f342:	2320      	movs	r3, #32
 800f344:	2205      	movs	r2, #5
 800f346:	68f8      	ldr	r0, [r7, #12]
 800f348:	f7ff fc3d 	bl	800ebc6 <SCSI_SenseCode>
      return -1;
 800f34c:	f04f 33ff 	mov.w	r3, #4294967295
 800f350:	e01a      	b.n	800f388 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800f352:	693b      	ldr	r3, [r7, #16]
 800f354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f358:	bf28      	it	cs
 800f35a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f35e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800f360:	697b      	ldr	r3, [r7, #20]
 800f362:	2201      	movs	r2, #1
 800f364:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800f366:	4b0a      	ldr	r3, [pc, #40]	; (800f390 <SCSI_Write12+0x1c8>)
 800f368:	7819      	ldrb	r1, [r3, #0]
 800f36a:	697b      	ldr	r3, [r7, #20]
 800f36c:	f103 0210 	add.w	r2, r3, #16
 800f370:	693b      	ldr	r3, [r7, #16]
 800f372:	68f8      	ldr	r0, [r7, #12]
 800f374:	f008 faf1 	bl	801795a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800f378:	2300      	movs	r3, #0
 800f37a:	e005      	b.n	800f388 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 800f37c:	7afb      	ldrb	r3, [r7, #11]
 800f37e:	4619      	mov	r1, r3
 800f380:	68f8      	ldr	r0, [r7, #12]
 800f382:	f000 f8f7 	bl	800f574 <SCSI_ProcessWrite>
 800f386:	4603      	mov	r3, r0
}
 800f388:	4618      	mov	r0, r3
 800f38a:	3718      	adds	r7, #24
 800f38c:	46bd      	mov	sp, r7
 800f38e:	bd80      	pop	{r7, pc}
 800f390:	20000077 	.word	0x20000077

0800f394 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b086      	sub	sp, #24
 800f398:	af00      	add	r7, sp, #0
 800f39a:	60f8      	str	r0, [r7, #12]
 800f39c:	460b      	mov	r3, r1
 800f39e:	607a      	str	r2, [r7, #4]
 800f3a0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	32b0      	adds	r2, #176	; 0xb0
 800f3ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3b0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800f3b2:	697b      	ldr	r3, [r7, #20]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d102      	bne.n	800f3be <SCSI_Verify10+0x2a>
  {
    return -1;
 800f3b8:	f04f 33ff 	mov.w	r3, #4294967295
 800f3bc:	e023      	b.n	800f406 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	3301      	adds	r3, #1
 800f3c2:	781b      	ldrb	r3, [r3, #0]
 800f3c4:	f003 0302 	and.w	r3, r3, #2
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d008      	beq.n	800f3de <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800f3cc:	7af9      	ldrb	r1, [r7, #11]
 800f3ce:	2324      	movs	r3, #36	; 0x24
 800f3d0:	2205      	movs	r2, #5
 800f3d2:	68f8      	ldr	r0, [r7, #12]
 800f3d4:	f7ff fbf7 	bl	800ebc6 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800f3d8:	f04f 33ff 	mov.w	r3, #4294967295
 800f3dc:	e013      	b.n	800f406 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800f3de:	697b      	ldr	r3, [r7, #20]
 800f3e0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f3e4:	697b      	ldr	r3, [r7, #20]
 800f3e6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f3ea:	7af9      	ldrb	r1, [r7, #11]
 800f3ec:	68f8      	ldr	r0, [r7, #12]
 800f3ee:	f000 f80e 	bl	800f40e <SCSI_CheckAddressRange>
 800f3f2:	4603      	mov	r3, r0
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	da02      	bge.n	800f3fe <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 800f3f8:	f04f 33ff 	mov.w	r3, #4294967295
 800f3fc:	e003      	b.n	800f406 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 800f3fe:	697b      	ldr	r3, [r7, #20]
 800f400:	2200      	movs	r2, #0
 800f402:	60da      	str	r2, [r3, #12]

  return 0;
 800f404:	2300      	movs	r3, #0
}
 800f406:	4618      	mov	r0, r3
 800f408:	3718      	adds	r7, #24
 800f40a:	46bd      	mov	sp, r7
 800f40c:	bd80      	pop	{r7, pc}

0800f40e <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800f40e:	b580      	push	{r7, lr}
 800f410:	b086      	sub	sp, #24
 800f412:	af00      	add	r7, sp, #0
 800f414:	60f8      	str	r0, [r7, #12]
 800f416:	607a      	str	r2, [r7, #4]
 800f418:	603b      	str	r3, [r7, #0]
 800f41a:	460b      	mov	r3, r1
 800f41c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	32b0      	adds	r2, #176	; 0xb0
 800f428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f42c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800f42e:	697b      	ldr	r3, [r7, #20]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d102      	bne.n	800f43a <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800f434:	f04f 33ff 	mov.w	r3, #4294967295
 800f438:	e011      	b.n	800f45e <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800f43a:	687a      	ldr	r2, [r7, #4]
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	441a      	add	r2, r3
 800f440:	697b      	ldr	r3, [r7, #20]
 800f442:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f446:	429a      	cmp	r2, r3
 800f448:	d908      	bls.n	800f45c <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800f44a:	7af9      	ldrb	r1, [r7, #11]
 800f44c:	2321      	movs	r3, #33	; 0x21
 800f44e:	2205      	movs	r2, #5
 800f450:	68f8      	ldr	r0, [r7, #12]
 800f452:	f7ff fbb8 	bl	800ebc6 <SCSI_SenseCode>
    return -1;
 800f456:	f04f 33ff 	mov.w	r3, #4294967295
 800f45a:	e000      	b.n	800f45e <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 800f45c:	2300      	movs	r3, #0
}
 800f45e:	4618      	mov	r0, r3
 800f460:	3718      	adds	r7, #24
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}
	...

0800f468 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800f468:	b590      	push	{r4, r7, lr}
 800f46a:	b085      	sub	sp, #20
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
 800f470:	460b      	mov	r3, r1
 800f472:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	32b0      	adds	r2, #176	; 0xb0
 800f47e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f482:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d102      	bne.n	800f490 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800f48a:	f04f 33ff 	mov.w	r3, #4294967295
 800f48e:	e06a      	b.n	800f566 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f496:	68fa      	ldr	r2, [r7, #12]
 800f498:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f49c:	fb02 f303 	mul.w	r3, r2, r3
 800f4a0:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f4a8:	bf28      	it	cs
 800f4aa:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f4ae:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f4b6:	687a      	ldr	r2, [r7, #4]
 800f4b8:	33b0      	adds	r3, #176	; 0xb0
 800f4ba:	009b      	lsls	r3, r3, #2
 800f4bc:	4413      	add	r3, r2
 800f4be:	685b      	ldr	r3, [r3, #4]
 800f4c0:	691c      	ldr	r4, [r3, #16]
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	f103 0110 	add.w	r1, r3, #16
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	68bb      	ldr	r3, [r7, #8]
 800f4d8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800f4dc:	b29b      	uxth	r3, r3
 800f4de:	78f8      	ldrb	r0, [r7, #3]
 800f4e0:	47a0      	blx	r4
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	da08      	bge.n	800f4fa <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800f4e8:	78f9      	ldrb	r1, [r7, #3]
 800f4ea:	2311      	movs	r3, #17
 800f4ec:	2204      	movs	r2, #4
 800f4ee:	6878      	ldr	r0, [r7, #4]
 800f4f0:	f7ff fb69 	bl	800ebc6 <SCSI_SenseCode>
    return -1;
 800f4f4:	f04f 33ff 	mov.w	r3, #4294967295
 800f4f8:	e035      	b.n	800f566 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800f4fa:	4b1d      	ldr	r3, [pc, #116]	; (800f570 <SCSI_ProcessRead+0x108>)
 800f4fc:	7819      	ldrb	r1, [r3, #0]
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	f103 0210 	add.w	r2, r3, #16
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	6878      	ldr	r0, [r7, #4]
 800f508:	f008 fa06 	bl	8017918 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f518:	4619      	mov	r1, r3
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	fbb3 f3f1 	udiv	r3, r3, r1
 800f520:	441a      	add	r2, r3
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f534:	4619      	mov	r1, r3
 800f536:	68bb      	ldr	r3, [r7, #8]
 800f538:	fbb3 f3f1 	udiv	r3, r3, r1
 800f53c:	1ad2      	subs	r2, r2, r3
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	1ad2      	subs	r2, r2, r3
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d102      	bne.n	800f564 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	2203      	movs	r2, #3
 800f562:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800f564:	2300      	movs	r3, #0
}
 800f566:	4618      	mov	r0, r3
 800f568:	3714      	adds	r7, #20
 800f56a:	46bd      	mov	sp, r7
 800f56c:	bd90      	pop	{r4, r7, pc}
 800f56e:	bf00      	nop
 800f570:	20000076 	.word	0x20000076

0800f574 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800f574:	b590      	push	{r4, r7, lr}
 800f576:	b085      	sub	sp, #20
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
 800f57c:	460b      	mov	r3, r1
 800f57e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	32b0      	adds	r2, #176	; 0xb0
 800f58a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f58e:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d102      	bne.n	800f59c <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800f596:	f04f 33ff 	mov.w	r3, #4294967295
 800f59a:	e07a      	b.n	800f692 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f5a2:	68fa      	ldr	r2, [r7, #12]
 800f5a4:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f5a8:	fb02 f303 	mul.w	r3, r2, r3
 800f5ac:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f5b4:	bf28      	it	cs
 800f5b6:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f5ba:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f5c2:	687a      	ldr	r2, [r7, #4]
 800f5c4:	33b0      	adds	r3, #176	; 0xb0
 800f5c6:	009b      	lsls	r3, r3, #2
 800f5c8:	4413      	add	r3, r2
 800f5ca:	685b      	ldr	r3, [r3, #4]
 800f5cc:	695c      	ldr	r4, [r3, #20]
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	f103 0110 	add.w	r1, r3, #16
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	68bb      	ldr	r3, [r7, #8]
 800f5e4:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800f5e8:	b29b      	uxth	r3, r3
 800f5ea:	78f8      	ldrb	r0, [r7, #3]
 800f5ec:	47a0      	blx	r4
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	da08      	bge.n	800f606 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800f5f4:	78f9      	ldrb	r1, [r7, #3]
 800f5f6:	2303      	movs	r3, #3
 800f5f8:	2204      	movs	r2, #4
 800f5fa:	6878      	ldr	r0, [r7, #4]
 800f5fc:	f7ff fae3 	bl	800ebc6 <SCSI_SenseCode>
    return -1;
 800f600:	f04f 33ff 	mov.w	r3, #4294967295
 800f604:	e045      	b.n	800f692 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f612:	4619      	mov	r1, r3
 800f614:	68bb      	ldr	r3, [r7, #8]
 800f616:	fbb3 f3f1 	udiv	r3, r3, r1
 800f61a:	441a      	add	r2, r3
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f62e:	4619      	mov	r1, r3
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	fbb3 f3f1 	udiv	r3, r3, r1
 800f636:	1ad2      	subs	r2, r2, r3
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800f644:	68bb      	ldr	r3, [r7, #8]
 800f646:	1ad2      	subs	r2, r2, r3
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f654:	2b00      	cmp	r3, #0
 800f656:	d104      	bne.n	800f662 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800f658:	2100      	movs	r1, #0
 800f65a:	6878      	ldr	r0, [r7, #4]
 800f65c:	f7fe fd14 	bl	800e088 <MSC_BOT_SendCSW>
 800f660:	e016      	b.n	800f690 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f668:	68fa      	ldr	r2, [r7, #12]
 800f66a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f66e:	fb02 f303 	mul.w	r3, r2, r3
 800f672:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f676:	bf28      	it	cs
 800f678:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f67c:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800f67e:	4b07      	ldr	r3, [pc, #28]	; (800f69c <SCSI_ProcessWrite+0x128>)
 800f680:	7819      	ldrb	r1, [r3, #0]
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	f103 0210 	add.w	r2, r3, #16
 800f688:	68bb      	ldr	r3, [r7, #8]
 800f68a:	6878      	ldr	r0, [r7, #4]
 800f68c:	f008 f965 	bl	801795a <USBD_LL_PrepareReceive>
  }

  return 0;
 800f690:	2300      	movs	r3, #0
}
 800f692:	4618      	mov	r0, r3
 800f694:	3714      	adds	r7, #20
 800f696:	46bd      	mov	sp, r7
 800f698:	bd90      	pop	{r4, r7, pc}
 800f69a:	bf00      	nop
 800f69c:	20000077 	.word	0x20000077

0800f6a0 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800f6a0:	b480      	push	{r7}
 800f6a2:	b087      	sub	sp, #28
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	60f8      	str	r0, [r7, #12]
 800f6a8:	60b9      	str	r1, [r7, #8]
 800f6aa:	4613      	mov	r3, r2
 800f6ac:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800f6ae:	88fb      	ldrh	r3, [r7, #6]
 800f6b0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d102      	bne.n	800f6be <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800f6b8:	f04f 33ff 	mov.w	r3, #4294967295
 800f6bc:	e013      	b.n	800f6e6 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800f6be:	8afa      	ldrh	r2, [r7, #22]
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800f6c4:	e00b      	b.n	800f6de <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800f6c6:	8afb      	ldrh	r3, [r7, #22]
 800f6c8:	3b01      	subs	r3, #1
 800f6ca:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800f6cc:	8afb      	ldrh	r3, [r7, #22]
 800f6ce:	68ba      	ldr	r2, [r7, #8]
 800f6d0:	441a      	add	r2, r3
 800f6d2:	8afb      	ldrh	r3, [r7, #22]
 800f6d4:	7811      	ldrb	r1, [r2, #0]
 800f6d6:	68fa      	ldr	r2, [r7, #12]
 800f6d8:	4413      	add	r3, r2
 800f6da:	460a      	mov	r2, r1
 800f6dc:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800f6de:	8afb      	ldrh	r3, [r7, #22]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d1f0      	bne.n	800f6c6 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800f6e4:	2300      	movs	r3, #0
}
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	371c      	adds	r7, #28
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f0:	4770      	bx	lr

0800f6f2 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f6f2:	b580      	push	{r7, lr}
 800f6f4:	b086      	sub	sp, #24
 800f6f6:	af00      	add	r7, sp, #0
 800f6f8:	60f8      	str	r0, [r7, #12]
 800f6fa:	60b9      	str	r1, [r7, #8]
 800f6fc:	4613      	mov	r3, r2
 800f6fe:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d101      	bne.n	800f70a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f706:	2303      	movs	r3, #3
 800f708:	e01f      	b.n	800f74a <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	2200      	movs	r2, #0
 800f70e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	2200      	movs	r2, #0
 800f716:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	2200      	movs	r2, #0
 800f71e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f722:	68bb      	ldr	r3, [r7, #8]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d003      	beq.n	800f730 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	68ba      	ldr	r2, [r7, #8]
 800f72c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	2201      	movs	r2, #1
 800f734:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	79fa      	ldrb	r2, [r7, #7]
 800f73c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f73e:	68f8      	ldr	r0, [r7, #12]
 800f740:	f007 ff96 	bl	8017670 <USBD_LL_Init>
 800f744:	4603      	mov	r3, r0
 800f746:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f748:	7dfb      	ldrb	r3, [r7, #23]
}
 800f74a:	4618      	mov	r0, r3
 800f74c:	3718      	adds	r7, #24
 800f74e:	46bd      	mov	sp, r7
 800f750:	bd80      	pop	{r7, pc}

0800f752 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f752:	b580      	push	{r7, lr}
 800f754:	b084      	sub	sp, #16
 800f756:	af00      	add	r7, sp, #0
 800f758:	6078      	str	r0, [r7, #4]
 800f75a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f75c:	2300      	movs	r3, #0
 800f75e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f760:	683b      	ldr	r3, [r7, #0]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d101      	bne.n	800f76a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f766:	2303      	movs	r3, #3
 800f768:	e025      	b.n	800f7b6 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	683a      	ldr	r2, [r7, #0]
 800f76e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	32ae      	adds	r2, #174	; 0xae
 800f77c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f782:	2b00      	cmp	r3, #0
 800f784:	d00f      	beq.n	800f7a6 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	32ae      	adds	r2, #174	; 0xae
 800f790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f796:	f107 020e 	add.w	r2, r7, #14
 800f79a:	4610      	mov	r0, r2
 800f79c:	4798      	blx	r3
 800f79e:	4602      	mov	r2, r0
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800f7ac:	1c5a      	adds	r2, r3, #1
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800f7b4:	2300      	movs	r3, #0
}
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	3710      	adds	r7, #16
 800f7ba:	46bd      	mov	sp, r7
 800f7bc:	bd80      	pop	{r7, pc}

0800f7be <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f7be:	b580      	push	{r7, lr}
 800f7c0:	b082      	sub	sp, #8
 800f7c2:	af00      	add	r7, sp, #0
 800f7c4:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	f007 ff9e 	bl	8017708 <USBD_LL_Start>
 800f7cc:	4603      	mov	r3, r0
}
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	3708      	adds	r7, #8
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bd80      	pop	{r7, pc}

0800f7d6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800f7d6:	b480      	push	{r7}
 800f7d8:	b083      	sub	sp, #12
 800f7da:	af00      	add	r7, sp, #0
 800f7dc:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f7de:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	370c      	adds	r7, #12
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ea:	4770      	bx	lr

0800f7ec <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b084      	sub	sp, #16
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
 800f7f4:	460b      	mov	r3, r1
 800f7f6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f802:	2b00      	cmp	r3, #0
 800f804:	d009      	beq.n	800f81a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	78fa      	ldrb	r2, [r7, #3]
 800f810:	4611      	mov	r1, r2
 800f812:	6878      	ldr	r0, [r7, #4]
 800f814:	4798      	blx	r3
 800f816:	4603      	mov	r3, r0
 800f818:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f81a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f81c:	4618      	mov	r0, r3
 800f81e:	3710      	adds	r7, #16
 800f820:	46bd      	mov	sp, r7
 800f822:	bd80      	pop	{r7, pc}

0800f824 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f824:	b580      	push	{r7, lr}
 800f826:	b084      	sub	sp, #16
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
 800f82c:	460b      	mov	r3, r1
 800f82e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f830:	2300      	movs	r3, #0
 800f832:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f83a:	685b      	ldr	r3, [r3, #4]
 800f83c:	78fa      	ldrb	r2, [r7, #3]
 800f83e:	4611      	mov	r1, r2
 800f840:	6878      	ldr	r0, [r7, #4]
 800f842:	4798      	blx	r3
 800f844:	4603      	mov	r3, r0
 800f846:	2b00      	cmp	r3, #0
 800f848:	d001      	beq.n	800f84e <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800f84a:	2303      	movs	r3, #3
 800f84c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f84e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f850:	4618      	mov	r0, r3
 800f852:	3710      	adds	r7, #16
 800f854:	46bd      	mov	sp, r7
 800f856:	bd80      	pop	{r7, pc}

0800f858 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b084      	sub	sp, #16
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
 800f860:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f868:	6839      	ldr	r1, [r7, #0]
 800f86a:	4618      	mov	r0, r3
 800f86c:	f001 f933 	bl	8010ad6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2201      	movs	r2, #1
 800f874:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f87e:	461a      	mov	r2, r3
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f88c:	f003 031f 	and.w	r3, r3, #31
 800f890:	2b02      	cmp	r3, #2
 800f892:	d01a      	beq.n	800f8ca <USBD_LL_SetupStage+0x72>
 800f894:	2b02      	cmp	r3, #2
 800f896:	d822      	bhi.n	800f8de <USBD_LL_SetupStage+0x86>
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d002      	beq.n	800f8a2 <USBD_LL_SetupStage+0x4a>
 800f89c:	2b01      	cmp	r3, #1
 800f89e:	d00a      	beq.n	800f8b6 <USBD_LL_SetupStage+0x5e>
 800f8a0:	e01d      	b.n	800f8de <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f8a8:	4619      	mov	r1, r3
 800f8aa:	6878      	ldr	r0, [r7, #4]
 800f8ac:	f000 fb60 	bl	800ff70 <USBD_StdDevReq>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	73fb      	strb	r3, [r7, #15]
      break;
 800f8b4:	e020      	b.n	800f8f8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f8bc:	4619      	mov	r1, r3
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f000 fbc8 	bl	8010054 <USBD_StdItfReq>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	73fb      	strb	r3, [r7, #15]
      break;
 800f8c8:	e016      	b.n	800f8f8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f8d0:	4619      	mov	r1, r3
 800f8d2:	6878      	ldr	r0, [r7, #4]
 800f8d4:	f000 fc2a 	bl	801012c <USBD_StdEPReq>
 800f8d8:	4603      	mov	r3, r0
 800f8da:	73fb      	strb	r3, [r7, #15]
      break;
 800f8dc:	e00c      	b.n	800f8f8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f8e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f8e8:	b2db      	uxtb	r3, r3
 800f8ea:	4619      	mov	r1, r3
 800f8ec:	6878      	ldr	r0, [r7, #4]
 800f8ee:	f007 ff8a 	bl	8017806 <USBD_LL_StallEP>
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	73fb      	strb	r3, [r7, #15]
      break;
 800f8f6:	bf00      	nop
  }

  return ret;
 800f8f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	3710      	adds	r7, #16
 800f8fe:	46bd      	mov	sp, r7
 800f900:	bd80      	pop	{r7, pc}

0800f902 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f902:	b580      	push	{r7, lr}
 800f904:	b086      	sub	sp, #24
 800f906:	af00      	add	r7, sp, #0
 800f908:	60f8      	str	r0, [r7, #12]
 800f90a:	460b      	mov	r3, r1
 800f90c:	607a      	str	r2, [r7, #4]
 800f90e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800f910:	2300      	movs	r3, #0
 800f912:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800f914:	7afb      	ldrb	r3, [r7, #11]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d16e      	bne.n	800f9f8 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f920:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f928:	2b03      	cmp	r3, #3
 800f92a:	f040 8098 	bne.w	800fa5e <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800f92e:	693b      	ldr	r3, [r7, #16]
 800f930:	689a      	ldr	r2, [r3, #8]
 800f932:	693b      	ldr	r3, [r7, #16]
 800f934:	68db      	ldr	r3, [r3, #12]
 800f936:	429a      	cmp	r2, r3
 800f938:	d913      	bls.n	800f962 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800f93a:	693b      	ldr	r3, [r7, #16]
 800f93c:	689a      	ldr	r2, [r3, #8]
 800f93e:	693b      	ldr	r3, [r7, #16]
 800f940:	68db      	ldr	r3, [r3, #12]
 800f942:	1ad2      	subs	r2, r2, r3
 800f944:	693b      	ldr	r3, [r7, #16]
 800f946:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f948:	693b      	ldr	r3, [r7, #16]
 800f94a:	68da      	ldr	r2, [r3, #12]
 800f94c:	693b      	ldr	r3, [r7, #16]
 800f94e:	689b      	ldr	r3, [r3, #8]
 800f950:	4293      	cmp	r3, r2
 800f952:	bf28      	it	cs
 800f954:	4613      	movcs	r3, r2
 800f956:	461a      	mov	r2, r3
 800f958:	6879      	ldr	r1, [r7, #4]
 800f95a:	68f8      	ldr	r0, [r7, #12]
 800f95c:	f001 f992 	bl	8010c84 <USBD_CtlContinueRx>
 800f960:	e07d      	b.n	800fa5e <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f968:	f003 031f 	and.w	r3, r3, #31
 800f96c:	2b02      	cmp	r3, #2
 800f96e:	d014      	beq.n	800f99a <USBD_LL_DataOutStage+0x98>
 800f970:	2b02      	cmp	r3, #2
 800f972:	d81d      	bhi.n	800f9b0 <USBD_LL_DataOutStage+0xae>
 800f974:	2b00      	cmp	r3, #0
 800f976:	d002      	beq.n	800f97e <USBD_LL_DataOutStage+0x7c>
 800f978:	2b01      	cmp	r3, #1
 800f97a:	d003      	beq.n	800f984 <USBD_LL_DataOutStage+0x82>
 800f97c:	e018      	b.n	800f9b0 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800f97e:	2300      	movs	r3, #0
 800f980:	75bb      	strb	r3, [r7, #22]
            break;
 800f982:	e018      	b.n	800f9b6 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800f98a:	b2db      	uxtb	r3, r3
 800f98c:	4619      	mov	r1, r3
 800f98e:	68f8      	ldr	r0, [r7, #12]
 800f990:	f000 fa5e 	bl	800fe50 <USBD_CoreFindIF>
 800f994:	4603      	mov	r3, r0
 800f996:	75bb      	strb	r3, [r7, #22]
            break;
 800f998:	e00d      	b.n	800f9b6 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800f9a0:	b2db      	uxtb	r3, r3
 800f9a2:	4619      	mov	r1, r3
 800f9a4:	68f8      	ldr	r0, [r7, #12]
 800f9a6:	f000 fa60 	bl	800fe6a <USBD_CoreFindEP>
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	75bb      	strb	r3, [r7, #22]
            break;
 800f9ae:	e002      	b.n	800f9b6 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	75bb      	strb	r3, [r7, #22]
            break;
 800f9b4:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800f9b6:	7dbb      	ldrb	r3, [r7, #22]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d119      	bne.n	800f9f0 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9c2:	b2db      	uxtb	r3, r3
 800f9c4:	2b03      	cmp	r3, #3
 800f9c6:	d113      	bne.n	800f9f0 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800f9c8:	7dba      	ldrb	r2, [r7, #22]
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	32ae      	adds	r2, #174	; 0xae
 800f9ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9d2:	691b      	ldr	r3, [r3, #16]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d00b      	beq.n	800f9f0 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800f9d8:	7dba      	ldrb	r2, [r7, #22]
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800f9e0:	7dba      	ldrb	r2, [r7, #22]
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	32ae      	adds	r2, #174	; 0xae
 800f9e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9ea:	691b      	ldr	r3, [r3, #16]
 800f9ec:	68f8      	ldr	r0, [r7, #12]
 800f9ee:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f9f0:	68f8      	ldr	r0, [r7, #12]
 800f9f2:	f001 f958 	bl	8010ca6 <USBD_CtlSendStatus>
 800f9f6:	e032      	b.n	800fa5e <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800f9f8:	7afb      	ldrb	r3, [r7, #11]
 800f9fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f9fe:	b2db      	uxtb	r3, r3
 800fa00:	4619      	mov	r1, r3
 800fa02:	68f8      	ldr	r0, [r7, #12]
 800fa04:	f000 fa31 	bl	800fe6a <USBD_CoreFindEP>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fa0c:	7dbb      	ldrb	r3, [r7, #22]
 800fa0e:	2bff      	cmp	r3, #255	; 0xff
 800fa10:	d025      	beq.n	800fa5e <USBD_LL_DataOutStage+0x15c>
 800fa12:	7dbb      	ldrb	r3, [r7, #22]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d122      	bne.n	800fa5e <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa1e:	b2db      	uxtb	r3, r3
 800fa20:	2b03      	cmp	r3, #3
 800fa22:	d117      	bne.n	800fa54 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800fa24:	7dba      	ldrb	r2, [r7, #22]
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	32ae      	adds	r2, #174	; 0xae
 800fa2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa2e:	699b      	ldr	r3, [r3, #24]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d00f      	beq.n	800fa54 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800fa34:	7dba      	ldrb	r2, [r7, #22]
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800fa3c:	7dba      	ldrb	r2, [r7, #22]
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	32ae      	adds	r2, #174	; 0xae
 800fa42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa46:	699b      	ldr	r3, [r3, #24]
 800fa48:	7afa      	ldrb	r2, [r7, #11]
 800fa4a:	4611      	mov	r1, r2
 800fa4c:	68f8      	ldr	r0, [r7, #12]
 800fa4e:	4798      	blx	r3
 800fa50:	4603      	mov	r3, r0
 800fa52:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800fa54:	7dfb      	ldrb	r3, [r7, #23]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d001      	beq.n	800fa5e <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800fa5a:	7dfb      	ldrb	r3, [r7, #23]
 800fa5c:	e000      	b.n	800fa60 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800fa5e:	2300      	movs	r3, #0
}
 800fa60:	4618      	mov	r0, r3
 800fa62:	3718      	adds	r7, #24
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}

0800fa68 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b086      	sub	sp, #24
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	60f8      	str	r0, [r7, #12]
 800fa70:	460b      	mov	r3, r1
 800fa72:	607a      	str	r2, [r7, #4]
 800fa74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800fa76:	7afb      	ldrb	r3, [r7, #11]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d16f      	bne.n	800fb5c <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	3314      	adds	r3, #20
 800fa80:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fa88:	2b02      	cmp	r3, #2
 800fa8a:	d15a      	bne.n	800fb42 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800fa8c:	693b      	ldr	r3, [r7, #16]
 800fa8e:	689a      	ldr	r2, [r3, #8]
 800fa90:	693b      	ldr	r3, [r7, #16]
 800fa92:	68db      	ldr	r3, [r3, #12]
 800fa94:	429a      	cmp	r2, r3
 800fa96:	d914      	bls.n	800fac2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800fa98:	693b      	ldr	r3, [r7, #16]
 800fa9a:	689a      	ldr	r2, [r3, #8]
 800fa9c:	693b      	ldr	r3, [r7, #16]
 800fa9e:	68db      	ldr	r3, [r3, #12]
 800faa0:	1ad2      	subs	r2, r2, r3
 800faa2:	693b      	ldr	r3, [r7, #16]
 800faa4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800faa6:	693b      	ldr	r3, [r7, #16]
 800faa8:	689b      	ldr	r3, [r3, #8]
 800faaa:	461a      	mov	r2, r3
 800faac:	6879      	ldr	r1, [r7, #4]
 800faae:	68f8      	ldr	r0, [r7, #12]
 800fab0:	f001 f8d7 	bl	8010c62 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fab4:	2300      	movs	r3, #0
 800fab6:	2200      	movs	r2, #0
 800fab8:	2100      	movs	r1, #0
 800faba:	68f8      	ldr	r0, [r7, #12]
 800fabc:	f007 ff4d 	bl	801795a <USBD_LL_PrepareReceive>
 800fac0:	e03f      	b.n	800fb42 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800fac2:	693b      	ldr	r3, [r7, #16]
 800fac4:	68da      	ldr	r2, [r3, #12]
 800fac6:	693b      	ldr	r3, [r7, #16]
 800fac8:	689b      	ldr	r3, [r3, #8]
 800faca:	429a      	cmp	r2, r3
 800facc:	d11c      	bne.n	800fb08 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800face:	693b      	ldr	r3, [r7, #16]
 800fad0:	685a      	ldr	r2, [r3, #4]
 800fad2:	693b      	ldr	r3, [r7, #16]
 800fad4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800fad6:	429a      	cmp	r2, r3
 800fad8:	d316      	bcc.n	800fb08 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800fada:	693b      	ldr	r3, [r7, #16]
 800fadc:	685a      	ldr	r2, [r3, #4]
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800fae4:	429a      	cmp	r2, r3
 800fae6:	d20f      	bcs.n	800fb08 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800fae8:	2200      	movs	r2, #0
 800faea:	2100      	movs	r1, #0
 800faec:	68f8      	ldr	r0, [r7, #12]
 800faee:	f001 f8b8 	bl	8010c62 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	2200      	movs	r2, #0
 800faf6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fafa:	2300      	movs	r3, #0
 800fafc:	2200      	movs	r2, #0
 800fafe:	2100      	movs	r1, #0
 800fb00:	68f8      	ldr	r0, [r7, #12]
 800fb02:	f007 ff2a 	bl	801795a <USBD_LL_PrepareReceive>
 800fb06:	e01c      	b.n	800fb42 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb0e:	b2db      	uxtb	r3, r3
 800fb10:	2b03      	cmp	r3, #3
 800fb12:	d10f      	bne.n	800fb34 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb1a:	68db      	ldr	r3, [r3, #12]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d009      	beq.n	800fb34 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	2200      	movs	r2, #0
 800fb24:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb2e:	68db      	ldr	r3, [r3, #12]
 800fb30:	68f8      	ldr	r0, [r7, #12]
 800fb32:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fb34:	2180      	movs	r1, #128	; 0x80
 800fb36:	68f8      	ldr	r0, [r7, #12]
 800fb38:	f007 fe65 	bl	8017806 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800fb3c:	68f8      	ldr	r0, [r7, #12]
 800fb3e:	f001 f8c5 	bl	8010ccc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d03a      	beq.n	800fbc2 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800fb4c:	68f8      	ldr	r0, [r7, #12]
 800fb4e:	f7ff fe42 	bl	800f7d6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	2200      	movs	r2, #0
 800fb56:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800fb5a:	e032      	b.n	800fbc2 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800fb5c:	7afb      	ldrb	r3, [r7, #11]
 800fb5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fb62:	b2db      	uxtb	r3, r3
 800fb64:	4619      	mov	r1, r3
 800fb66:	68f8      	ldr	r0, [r7, #12]
 800fb68:	f000 f97f 	bl	800fe6a <USBD_CoreFindEP>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fb70:	7dfb      	ldrb	r3, [r7, #23]
 800fb72:	2bff      	cmp	r3, #255	; 0xff
 800fb74:	d025      	beq.n	800fbc2 <USBD_LL_DataInStage+0x15a>
 800fb76:	7dfb      	ldrb	r3, [r7, #23]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d122      	bne.n	800fbc2 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb82:	b2db      	uxtb	r3, r3
 800fb84:	2b03      	cmp	r3, #3
 800fb86:	d11c      	bne.n	800fbc2 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800fb88:	7dfa      	ldrb	r2, [r7, #23]
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	32ae      	adds	r2, #174	; 0xae
 800fb8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb92:	695b      	ldr	r3, [r3, #20]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d014      	beq.n	800fbc2 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800fb98:	7dfa      	ldrb	r2, [r7, #23]
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800fba0:	7dfa      	ldrb	r2, [r7, #23]
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	32ae      	adds	r2, #174	; 0xae
 800fba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbaa:	695b      	ldr	r3, [r3, #20]
 800fbac:	7afa      	ldrb	r2, [r7, #11]
 800fbae:	4611      	mov	r1, r2
 800fbb0:	68f8      	ldr	r0, [r7, #12]
 800fbb2:	4798      	blx	r3
 800fbb4:	4603      	mov	r3, r0
 800fbb6:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800fbb8:	7dbb      	ldrb	r3, [r7, #22]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d001      	beq.n	800fbc2 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800fbbe:	7dbb      	ldrb	r3, [r7, #22]
 800fbc0:	e000      	b.n	800fbc4 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800fbc2:	2300      	movs	r3, #0
}
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	3718      	adds	r7, #24
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	bd80      	pop	{r7, pc}

0800fbcc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b084      	sub	sp, #16
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	2201      	movs	r2, #1
 800fbdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	2200      	movs	r2, #0
 800fbec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d014      	beq.n	800fc32 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc0e:	685b      	ldr	r3, [r3, #4]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d00e      	beq.n	800fc32 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc1a:	685b      	ldr	r3, [r3, #4]
 800fc1c:	687a      	ldr	r2, [r7, #4]
 800fc1e:	6852      	ldr	r2, [r2, #4]
 800fc20:	b2d2      	uxtb	r2, r2
 800fc22:	4611      	mov	r1, r2
 800fc24:	6878      	ldr	r0, [r7, #4]
 800fc26:	4798      	blx	r3
 800fc28:	4603      	mov	r3, r0
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d001      	beq.n	800fc32 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800fc2e:	2303      	movs	r3, #3
 800fc30:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fc32:	2340      	movs	r3, #64	; 0x40
 800fc34:	2200      	movs	r2, #0
 800fc36:	2100      	movs	r1, #0
 800fc38:	6878      	ldr	r0, [r7, #4]
 800fc3a:	f007 fd80 	bl	801773e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	2201      	movs	r2, #1
 800fc42:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	2240      	movs	r2, #64	; 0x40
 800fc4a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fc4e:	2340      	movs	r3, #64	; 0x40
 800fc50:	2200      	movs	r2, #0
 800fc52:	2180      	movs	r1, #128	; 0x80
 800fc54:	6878      	ldr	r0, [r7, #4]
 800fc56:	f007 fd72 	bl	801773e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	2201      	movs	r2, #1
 800fc5e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	2240      	movs	r2, #64	; 0x40
 800fc64:	621a      	str	r2, [r3, #32]

  return ret;
 800fc66:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc68:	4618      	mov	r0, r3
 800fc6a:	3710      	adds	r7, #16
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	bd80      	pop	{r7, pc}

0800fc70 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800fc70:	b480      	push	{r7}
 800fc72:	b083      	sub	sp, #12
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
 800fc78:	460b      	mov	r3, r1
 800fc7a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	78fa      	ldrb	r2, [r7, #3]
 800fc80:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800fc82:	2300      	movs	r3, #0
}
 800fc84:	4618      	mov	r0, r3
 800fc86:	370c      	adds	r7, #12
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8e:	4770      	bx	lr

0800fc90 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800fc90:	b480      	push	{r7}
 800fc92:	b083      	sub	sp, #12
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc9e:	b2da      	uxtb	r2, r3
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	2204      	movs	r2, #4
 800fcaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800fcae:	2300      	movs	r3, #0
}
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	370c      	adds	r7, #12
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcba:	4770      	bx	lr

0800fcbc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800fcbc:	b480      	push	{r7}
 800fcbe:	b083      	sub	sp, #12
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fcca:	b2db      	uxtb	r3, r3
 800fccc:	2b04      	cmp	r3, #4
 800fcce:	d106      	bne.n	800fcde <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800fcd6:	b2da      	uxtb	r2, r3
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800fcde:	2300      	movs	r3, #0
}
 800fce0:	4618      	mov	r0, r3
 800fce2:	370c      	adds	r7, #12
 800fce4:	46bd      	mov	sp, r7
 800fce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcea:	4770      	bx	lr

0800fcec <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b082      	sub	sp, #8
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fcfa:	b2db      	uxtb	r3, r3
 800fcfc:	2b03      	cmp	r3, #3
 800fcfe:	d110      	bne.n	800fd22 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d00b      	beq.n	800fd22 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd10:	69db      	ldr	r3, [r3, #28]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d005      	beq.n	800fd22 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd1c:	69db      	ldr	r3, [r3, #28]
 800fd1e:	6878      	ldr	r0, [r7, #4]
 800fd20:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800fd22:	2300      	movs	r3, #0
}
 800fd24:	4618      	mov	r0, r3
 800fd26:	3708      	adds	r7, #8
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	bd80      	pop	{r7, pc}

0800fd2c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b082      	sub	sp, #8
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
 800fd34:	460b      	mov	r3, r1
 800fd36:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	32ae      	adds	r2, #174	; 0xae
 800fd42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d101      	bne.n	800fd4e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800fd4a:	2303      	movs	r3, #3
 800fd4c:	e01c      	b.n	800fd88 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd54:	b2db      	uxtb	r3, r3
 800fd56:	2b03      	cmp	r3, #3
 800fd58:	d115      	bne.n	800fd86 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	32ae      	adds	r2, #174	; 0xae
 800fd64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd68:	6a1b      	ldr	r3, [r3, #32]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d00b      	beq.n	800fd86 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	32ae      	adds	r2, #174	; 0xae
 800fd78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd7c:	6a1b      	ldr	r3, [r3, #32]
 800fd7e:	78fa      	ldrb	r2, [r7, #3]
 800fd80:	4611      	mov	r1, r2
 800fd82:	6878      	ldr	r0, [r7, #4]
 800fd84:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fd86:	2300      	movs	r3, #0
}
 800fd88:	4618      	mov	r0, r3
 800fd8a:	3708      	adds	r7, #8
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	bd80      	pop	{r7, pc}

0800fd90 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b082      	sub	sp, #8
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	6078      	str	r0, [r7, #4]
 800fd98:	460b      	mov	r3, r1
 800fd9a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	32ae      	adds	r2, #174	; 0xae
 800fda6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d101      	bne.n	800fdb2 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800fdae:	2303      	movs	r3, #3
 800fdb0:	e01c      	b.n	800fdec <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fdb8:	b2db      	uxtb	r3, r3
 800fdba:	2b03      	cmp	r3, #3
 800fdbc:	d115      	bne.n	800fdea <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	32ae      	adds	r2, #174	; 0xae
 800fdc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d00b      	beq.n	800fdea <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	32ae      	adds	r2, #174	; 0xae
 800fddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fde0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fde2:	78fa      	ldrb	r2, [r7, #3]
 800fde4:	4611      	mov	r1, r2
 800fde6:	6878      	ldr	r0, [r7, #4]
 800fde8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fdea:	2300      	movs	r3, #0
}
 800fdec:	4618      	mov	r0, r3
 800fdee:	3708      	adds	r7, #8
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	bd80      	pop	{r7, pc}

0800fdf4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800fdf4:	b480      	push	{r7}
 800fdf6:	b083      	sub	sp, #12
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fdfc:	2300      	movs	r3, #0
}
 800fdfe:	4618      	mov	r0, r3
 800fe00:	370c      	adds	r7, #12
 800fe02:	46bd      	mov	sp, r7
 800fe04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe08:	4770      	bx	lr

0800fe0a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800fe0a:	b580      	push	{r7, lr}
 800fe0c:	b084      	sub	sp, #16
 800fe0e:	af00      	add	r7, sp, #0
 800fe10:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800fe12:	2300      	movs	r3, #0
 800fe14:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	2201      	movs	r2, #1
 800fe1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d00e      	beq.n	800fe46 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fe2e:	685b      	ldr	r3, [r3, #4]
 800fe30:	687a      	ldr	r2, [r7, #4]
 800fe32:	6852      	ldr	r2, [r2, #4]
 800fe34:	b2d2      	uxtb	r2, r2
 800fe36:	4611      	mov	r1, r2
 800fe38:	6878      	ldr	r0, [r7, #4]
 800fe3a:	4798      	blx	r3
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d001      	beq.n	800fe46 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800fe42:	2303      	movs	r3, #3
 800fe44:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fe46:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe48:	4618      	mov	r0, r3
 800fe4a:	3710      	adds	r7, #16
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	bd80      	pop	{r7, pc}

0800fe50 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800fe50:	b480      	push	{r7}
 800fe52:	b083      	sub	sp, #12
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
 800fe58:	460b      	mov	r3, r1
 800fe5a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800fe5c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800fe5e:	4618      	mov	r0, r3
 800fe60:	370c      	adds	r7, #12
 800fe62:	46bd      	mov	sp, r7
 800fe64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe68:	4770      	bx	lr

0800fe6a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800fe6a:	b480      	push	{r7}
 800fe6c:	b083      	sub	sp, #12
 800fe6e:	af00      	add	r7, sp, #0
 800fe70:	6078      	str	r0, [r7, #4]
 800fe72:	460b      	mov	r3, r1
 800fe74:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800fe76:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800fe78:	4618      	mov	r0, r3
 800fe7a:	370c      	adds	r7, #12
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe82:	4770      	bx	lr

0800fe84 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b086      	sub	sp, #24
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
 800fe8c:	460b      	mov	r3, r1
 800fe8e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800fe98:	2300      	movs	r3, #0
 800fe9a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	885b      	ldrh	r3, [r3, #2]
 800fea0:	b29a      	uxth	r2, r3
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	781b      	ldrb	r3, [r3, #0]
 800fea6:	b29b      	uxth	r3, r3
 800fea8:	429a      	cmp	r2, r3
 800feaa:	d920      	bls.n	800feee <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	781b      	ldrb	r3, [r3, #0]
 800feb0:	b29b      	uxth	r3, r3
 800feb2:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800feb4:	e013      	b.n	800fede <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800feb6:	f107 030a 	add.w	r3, r7, #10
 800feba:	4619      	mov	r1, r3
 800febc:	6978      	ldr	r0, [r7, #20]
 800febe:	f000 f81b 	bl	800fef8 <USBD_GetNextDesc>
 800fec2:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800fec4:	697b      	ldr	r3, [r7, #20]
 800fec6:	785b      	ldrb	r3, [r3, #1]
 800fec8:	2b05      	cmp	r3, #5
 800feca:	d108      	bne.n	800fede <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800fecc:	697b      	ldr	r3, [r7, #20]
 800fece:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800fed0:	693b      	ldr	r3, [r7, #16]
 800fed2:	789b      	ldrb	r3, [r3, #2]
 800fed4:	78fa      	ldrb	r2, [r7, #3]
 800fed6:	429a      	cmp	r2, r3
 800fed8:	d008      	beq.n	800feec <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800feda:	2300      	movs	r3, #0
 800fedc:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	885b      	ldrh	r3, [r3, #2]
 800fee2:	b29a      	uxth	r2, r3
 800fee4:	897b      	ldrh	r3, [r7, #10]
 800fee6:	429a      	cmp	r2, r3
 800fee8:	d8e5      	bhi.n	800feb6 <USBD_GetEpDesc+0x32>
 800feea:	e000      	b.n	800feee <USBD_GetEpDesc+0x6a>
          break;
 800feec:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800feee:	693b      	ldr	r3, [r7, #16]
}
 800fef0:	4618      	mov	r0, r3
 800fef2:	3718      	adds	r7, #24
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}

0800fef8 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800fef8:	b480      	push	{r7}
 800fefa:	b085      	sub	sp, #20
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
 800ff00:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	881a      	ldrh	r2, [r3, #0]
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	781b      	ldrb	r3, [r3, #0]
 800ff0e:	b29b      	uxth	r3, r3
 800ff10:	4413      	add	r3, r2
 800ff12:	b29a      	uxth	r2, r3
 800ff14:	683b      	ldr	r3, [r7, #0]
 800ff16:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	781b      	ldrb	r3, [r3, #0]
 800ff1c:	461a      	mov	r2, r3
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	4413      	add	r3, r2
 800ff22:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ff24:	68fb      	ldr	r3, [r7, #12]
}
 800ff26:	4618      	mov	r0, r3
 800ff28:	3714      	adds	r7, #20
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff30:	4770      	bx	lr

0800ff32 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ff32:	b480      	push	{r7}
 800ff34:	b087      	sub	sp, #28
 800ff36:	af00      	add	r7, sp, #0
 800ff38:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ff3e:	697b      	ldr	r3, [r7, #20]
 800ff40:	781b      	ldrb	r3, [r3, #0]
 800ff42:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ff44:	697b      	ldr	r3, [r7, #20]
 800ff46:	3301      	adds	r3, #1
 800ff48:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ff4a:	697b      	ldr	r3, [r7, #20]
 800ff4c:	781b      	ldrb	r3, [r3, #0]
 800ff4e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ff50:	8a3b      	ldrh	r3, [r7, #16]
 800ff52:	021b      	lsls	r3, r3, #8
 800ff54:	b21a      	sxth	r2, r3
 800ff56:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ff5a:	4313      	orrs	r3, r2
 800ff5c:	b21b      	sxth	r3, r3
 800ff5e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ff60:	89fb      	ldrh	r3, [r7, #14]
}
 800ff62:	4618      	mov	r0, r3
 800ff64:	371c      	adds	r7, #28
 800ff66:	46bd      	mov	sp, r7
 800ff68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6c:	4770      	bx	lr
	...

0800ff70 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b084      	sub	sp, #16
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
 800ff78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ff7e:	683b      	ldr	r3, [r7, #0]
 800ff80:	781b      	ldrb	r3, [r3, #0]
 800ff82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ff86:	2b40      	cmp	r3, #64	; 0x40
 800ff88:	d005      	beq.n	800ff96 <USBD_StdDevReq+0x26>
 800ff8a:	2b40      	cmp	r3, #64	; 0x40
 800ff8c:	d857      	bhi.n	801003e <USBD_StdDevReq+0xce>
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d00f      	beq.n	800ffb2 <USBD_StdDevReq+0x42>
 800ff92:	2b20      	cmp	r3, #32
 800ff94:	d153      	bne.n	801003e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	32ae      	adds	r2, #174	; 0xae
 800ffa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffa4:	689b      	ldr	r3, [r3, #8]
 800ffa6:	6839      	ldr	r1, [r7, #0]
 800ffa8:	6878      	ldr	r0, [r7, #4]
 800ffaa:	4798      	blx	r3
 800ffac:	4603      	mov	r3, r0
 800ffae:	73fb      	strb	r3, [r7, #15]
      break;
 800ffb0:	e04a      	b.n	8010048 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ffb2:	683b      	ldr	r3, [r7, #0]
 800ffb4:	785b      	ldrb	r3, [r3, #1]
 800ffb6:	2b09      	cmp	r3, #9
 800ffb8:	d83b      	bhi.n	8010032 <USBD_StdDevReq+0xc2>
 800ffba:	a201      	add	r2, pc, #4	; (adr r2, 800ffc0 <USBD_StdDevReq+0x50>)
 800ffbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffc0:	08010015 	.word	0x08010015
 800ffc4:	08010029 	.word	0x08010029
 800ffc8:	08010033 	.word	0x08010033
 800ffcc:	0801001f 	.word	0x0801001f
 800ffd0:	08010033 	.word	0x08010033
 800ffd4:	0800fff3 	.word	0x0800fff3
 800ffd8:	0800ffe9 	.word	0x0800ffe9
 800ffdc:	08010033 	.word	0x08010033
 800ffe0:	0801000b 	.word	0x0801000b
 800ffe4:	0800fffd 	.word	0x0800fffd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ffe8:	6839      	ldr	r1, [r7, #0]
 800ffea:	6878      	ldr	r0, [r7, #4]
 800ffec:	f000 fa3c 	bl	8010468 <USBD_GetDescriptor>
          break;
 800fff0:	e024      	b.n	801003c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800fff2:	6839      	ldr	r1, [r7, #0]
 800fff4:	6878      	ldr	r0, [r7, #4]
 800fff6:	f000 fbcb 	bl	8010790 <USBD_SetAddress>
          break;
 800fffa:	e01f      	b.n	801003c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800fffc:	6839      	ldr	r1, [r7, #0]
 800fffe:	6878      	ldr	r0, [r7, #4]
 8010000:	f000 fc0a 	bl	8010818 <USBD_SetConfig>
 8010004:	4603      	mov	r3, r0
 8010006:	73fb      	strb	r3, [r7, #15]
          break;
 8010008:	e018      	b.n	801003c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801000a:	6839      	ldr	r1, [r7, #0]
 801000c:	6878      	ldr	r0, [r7, #4]
 801000e:	f000 fcad 	bl	801096c <USBD_GetConfig>
          break;
 8010012:	e013      	b.n	801003c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010014:	6839      	ldr	r1, [r7, #0]
 8010016:	6878      	ldr	r0, [r7, #4]
 8010018:	f000 fcde 	bl	80109d8 <USBD_GetStatus>
          break;
 801001c:	e00e      	b.n	801003c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801001e:	6839      	ldr	r1, [r7, #0]
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f000 fd0d 	bl	8010a40 <USBD_SetFeature>
          break;
 8010026:	e009      	b.n	801003c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010028:	6839      	ldr	r1, [r7, #0]
 801002a:	6878      	ldr	r0, [r7, #4]
 801002c:	f000 fd31 	bl	8010a92 <USBD_ClrFeature>
          break;
 8010030:	e004      	b.n	801003c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8010032:	6839      	ldr	r1, [r7, #0]
 8010034:	6878      	ldr	r0, [r7, #4]
 8010036:	f000 fd88 	bl	8010b4a <USBD_CtlError>
          break;
 801003a:	bf00      	nop
      }
      break;
 801003c:	e004      	b.n	8010048 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801003e:	6839      	ldr	r1, [r7, #0]
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	f000 fd82 	bl	8010b4a <USBD_CtlError>
      break;
 8010046:	bf00      	nop
  }

  return ret;
 8010048:	7bfb      	ldrb	r3, [r7, #15]
}
 801004a:	4618      	mov	r0, r3
 801004c:	3710      	adds	r7, #16
 801004e:	46bd      	mov	sp, r7
 8010050:	bd80      	pop	{r7, pc}
 8010052:	bf00      	nop

08010054 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b084      	sub	sp, #16
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
 801005c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801005e:	2300      	movs	r3, #0
 8010060:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010062:	683b      	ldr	r3, [r7, #0]
 8010064:	781b      	ldrb	r3, [r3, #0]
 8010066:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801006a:	2b40      	cmp	r3, #64	; 0x40
 801006c:	d005      	beq.n	801007a <USBD_StdItfReq+0x26>
 801006e:	2b40      	cmp	r3, #64	; 0x40
 8010070:	d852      	bhi.n	8010118 <USBD_StdItfReq+0xc4>
 8010072:	2b00      	cmp	r3, #0
 8010074:	d001      	beq.n	801007a <USBD_StdItfReq+0x26>
 8010076:	2b20      	cmp	r3, #32
 8010078:	d14e      	bne.n	8010118 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010080:	b2db      	uxtb	r3, r3
 8010082:	3b01      	subs	r3, #1
 8010084:	2b02      	cmp	r3, #2
 8010086:	d840      	bhi.n	801010a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	889b      	ldrh	r3, [r3, #4]
 801008c:	b2db      	uxtb	r3, r3
 801008e:	2b01      	cmp	r3, #1
 8010090:	d836      	bhi.n	8010100 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	889b      	ldrh	r3, [r3, #4]
 8010096:	b2db      	uxtb	r3, r3
 8010098:	4619      	mov	r1, r3
 801009a:	6878      	ldr	r0, [r7, #4]
 801009c:	f7ff fed8 	bl	800fe50 <USBD_CoreFindIF>
 80100a0:	4603      	mov	r3, r0
 80100a2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80100a4:	7bbb      	ldrb	r3, [r7, #14]
 80100a6:	2bff      	cmp	r3, #255	; 0xff
 80100a8:	d01d      	beq.n	80100e6 <USBD_StdItfReq+0x92>
 80100aa:	7bbb      	ldrb	r3, [r7, #14]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d11a      	bne.n	80100e6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80100b0:	7bba      	ldrb	r2, [r7, #14]
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	32ae      	adds	r2, #174	; 0xae
 80100b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100ba:	689b      	ldr	r3, [r3, #8]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d00f      	beq.n	80100e0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80100c0:	7bba      	ldrb	r2, [r7, #14]
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80100c8:	7bba      	ldrb	r2, [r7, #14]
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	32ae      	adds	r2, #174	; 0xae
 80100ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100d2:	689b      	ldr	r3, [r3, #8]
 80100d4:	6839      	ldr	r1, [r7, #0]
 80100d6:	6878      	ldr	r0, [r7, #4]
 80100d8:	4798      	blx	r3
 80100da:	4603      	mov	r3, r0
 80100dc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80100de:	e004      	b.n	80100ea <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80100e0:	2303      	movs	r3, #3
 80100e2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80100e4:	e001      	b.n	80100ea <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80100e6:	2303      	movs	r3, #3
 80100e8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	88db      	ldrh	r3, [r3, #6]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d110      	bne.n	8010114 <USBD_StdItfReq+0xc0>
 80100f2:	7bfb      	ldrb	r3, [r7, #15]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d10d      	bne.n	8010114 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80100f8:	6878      	ldr	r0, [r7, #4]
 80100fa:	f000 fdd4 	bl	8010ca6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80100fe:	e009      	b.n	8010114 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8010100:	6839      	ldr	r1, [r7, #0]
 8010102:	6878      	ldr	r0, [r7, #4]
 8010104:	f000 fd21 	bl	8010b4a <USBD_CtlError>
          break;
 8010108:	e004      	b.n	8010114 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801010a:	6839      	ldr	r1, [r7, #0]
 801010c:	6878      	ldr	r0, [r7, #4]
 801010e:	f000 fd1c 	bl	8010b4a <USBD_CtlError>
          break;
 8010112:	e000      	b.n	8010116 <USBD_StdItfReq+0xc2>
          break;
 8010114:	bf00      	nop
      }
      break;
 8010116:	e004      	b.n	8010122 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8010118:	6839      	ldr	r1, [r7, #0]
 801011a:	6878      	ldr	r0, [r7, #4]
 801011c:	f000 fd15 	bl	8010b4a <USBD_CtlError>
      break;
 8010120:	bf00      	nop
  }

  return ret;
 8010122:	7bfb      	ldrb	r3, [r7, #15]
}
 8010124:	4618      	mov	r0, r3
 8010126:	3710      	adds	r7, #16
 8010128:	46bd      	mov	sp, r7
 801012a:	bd80      	pop	{r7, pc}

0801012c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801012c:	b580      	push	{r7, lr}
 801012e:	b084      	sub	sp, #16
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
 8010134:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8010136:	2300      	movs	r3, #0
 8010138:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	889b      	ldrh	r3, [r3, #4]
 801013e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010140:	683b      	ldr	r3, [r7, #0]
 8010142:	781b      	ldrb	r3, [r3, #0]
 8010144:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010148:	2b40      	cmp	r3, #64	; 0x40
 801014a:	d007      	beq.n	801015c <USBD_StdEPReq+0x30>
 801014c:	2b40      	cmp	r3, #64	; 0x40
 801014e:	f200 817f 	bhi.w	8010450 <USBD_StdEPReq+0x324>
 8010152:	2b00      	cmp	r3, #0
 8010154:	d02a      	beq.n	80101ac <USBD_StdEPReq+0x80>
 8010156:	2b20      	cmp	r3, #32
 8010158:	f040 817a 	bne.w	8010450 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801015c:	7bbb      	ldrb	r3, [r7, #14]
 801015e:	4619      	mov	r1, r3
 8010160:	6878      	ldr	r0, [r7, #4]
 8010162:	f7ff fe82 	bl	800fe6a <USBD_CoreFindEP>
 8010166:	4603      	mov	r3, r0
 8010168:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801016a:	7b7b      	ldrb	r3, [r7, #13]
 801016c:	2bff      	cmp	r3, #255	; 0xff
 801016e:	f000 8174 	beq.w	801045a <USBD_StdEPReq+0x32e>
 8010172:	7b7b      	ldrb	r3, [r7, #13]
 8010174:	2b00      	cmp	r3, #0
 8010176:	f040 8170 	bne.w	801045a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801017a:	7b7a      	ldrb	r2, [r7, #13]
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8010182:	7b7a      	ldrb	r2, [r7, #13]
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	32ae      	adds	r2, #174	; 0xae
 8010188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801018c:	689b      	ldr	r3, [r3, #8]
 801018e:	2b00      	cmp	r3, #0
 8010190:	f000 8163 	beq.w	801045a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8010194:	7b7a      	ldrb	r2, [r7, #13]
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	32ae      	adds	r2, #174	; 0xae
 801019a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801019e:	689b      	ldr	r3, [r3, #8]
 80101a0:	6839      	ldr	r1, [r7, #0]
 80101a2:	6878      	ldr	r0, [r7, #4]
 80101a4:	4798      	blx	r3
 80101a6:	4603      	mov	r3, r0
 80101a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80101aa:	e156      	b.n	801045a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80101ac:	683b      	ldr	r3, [r7, #0]
 80101ae:	785b      	ldrb	r3, [r3, #1]
 80101b0:	2b03      	cmp	r3, #3
 80101b2:	d008      	beq.n	80101c6 <USBD_StdEPReq+0x9a>
 80101b4:	2b03      	cmp	r3, #3
 80101b6:	f300 8145 	bgt.w	8010444 <USBD_StdEPReq+0x318>
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	f000 809b 	beq.w	80102f6 <USBD_StdEPReq+0x1ca>
 80101c0:	2b01      	cmp	r3, #1
 80101c2:	d03c      	beq.n	801023e <USBD_StdEPReq+0x112>
 80101c4:	e13e      	b.n	8010444 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80101cc:	b2db      	uxtb	r3, r3
 80101ce:	2b02      	cmp	r3, #2
 80101d0:	d002      	beq.n	80101d8 <USBD_StdEPReq+0xac>
 80101d2:	2b03      	cmp	r3, #3
 80101d4:	d016      	beq.n	8010204 <USBD_StdEPReq+0xd8>
 80101d6:	e02c      	b.n	8010232 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80101d8:	7bbb      	ldrb	r3, [r7, #14]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d00d      	beq.n	80101fa <USBD_StdEPReq+0xce>
 80101de:	7bbb      	ldrb	r3, [r7, #14]
 80101e0:	2b80      	cmp	r3, #128	; 0x80
 80101e2:	d00a      	beq.n	80101fa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80101e4:	7bbb      	ldrb	r3, [r7, #14]
 80101e6:	4619      	mov	r1, r3
 80101e8:	6878      	ldr	r0, [r7, #4]
 80101ea:	f007 fb0c 	bl	8017806 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80101ee:	2180      	movs	r1, #128	; 0x80
 80101f0:	6878      	ldr	r0, [r7, #4]
 80101f2:	f007 fb08 	bl	8017806 <USBD_LL_StallEP>
 80101f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80101f8:	e020      	b.n	801023c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80101fa:	6839      	ldr	r1, [r7, #0]
 80101fc:	6878      	ldr	r0, [r7, #4]
 80101fe:	f000 fca4 	bl	8010b4a <USBD_CtlError>
              break;
 8010202:	e01b      	b.n	801023c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010204:	683b      	ldr	r3, [r7, #0]
 8010206:	885b      	ldrh	r3, [r3, #2]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d10e      	bne.n	801022a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801020c:	7bbb      	ldrb	r3, [r7, #14]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d00b      	beq.n	801022a <USBD_StdEPReq+0xfe>
 8010212:	7bbb      	ldrb	r3, [r7, #14]
 8010214:	2b80      	cmp	r3, #128	; 0x80
 8010216:	d008      	beq.n	801022a <USBD_StdEPReq+0xfe>
 8010218:	683b      	ldr	r3, [r7, #0]
 801021a:	88db      	ldrh	r3, [r3, #6]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d104      	bne.n	801022a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010220:	7bbb      	ldrb	r3, [r7, #14]
 8010222:	4619      	mov	r1, r3
 8010224:	6878      	ldr	r0, [r7, #4]
 8010226:	f007 faee 	bl	8017806 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801022a:	6878      	ldr	r0, [r7, #4]
 801022c:	f000 fd3b 	bl	8010ca6 <USBD_CtlSendStatus>

              break;
 8010230:	e004      	b.n	801023c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8010232:	6839      	ldr	r1, [r7, #0]
 8010234:	6878      	ldr	r0, [r7, #4]
 8010236:	f000 fc88 	bl	8010b4a <USBD_CtlError>
              break;
 801023a:	bf00      	nop
          }
          break;
 801023c:	e107      	b.n	801044e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010244:	b2db      	uxtb	r3, r3
 8010246:	2b02      	cmp	r3, #2
 8010248:	d002      	beq.n	8010250 <USBD_StdEPReq+0x124>
 801024a:	2b03      	cmp	r3, #3
 801024c:	d016      	beq.n	801027c <USBD_StdEPReq+0x150>
 801024e:	e04b      	b.n	80102e8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010250:	7bbb      	ldrb	r3, [r7, #14]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d00d      	beq.n	8010272 <USBD_StdEPReq+0x146>
 8010256:	7bbb      	ldrb	r3, [r7, #14]
 8010258:	2b80      	cmp	r3, #128	; 0x80
 801025a:	d00a      	beq.n	8010272 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801025c:	7bbb      	ldrb	r3, [r7, #14]
 801025e:	4619      	mov	r1, r3
 8010260:	6878      	ldr	r0, [r7, #4]
 8010262:	f007 fad0 	bl	8017806 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010266:	2180      	movs	r1, #128	; 0x80
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f007 facc 	bl	8017806 <USBD_LL_StallEP>
 801026e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010270:	e040      	b.n	80102f4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8010272:	6839      	ldr	r1, [r7, #0]
 8010274:	6878      	ldr	r0, [r7, #4]
 8010276:	f000 fc68 	bl	8010b4a <USBD_CtlError>
              break;
 801027a:	e03b      	b.n	80102f4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801027c:	683b      	ldr	r3, [r7, #0]
 801027e:	885b      	ldrh	r3, [r3, #2]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d136      	bne.n	80102f2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010284:	7bbb      	ldrb	r3, [r7, #14]
 8010286:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801028a:	2b00      	cmp	r3, #0
 801028c:	d004      	beq.n	8010298 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801028e:	7bbb      	ldrb	r3, [r7, #14]
 8010290:	4619      	mov	r1, r3
 8010292:	6878      	ldr	r0, [r7, #4]
 8010294:	f007 fad6 	bl	8017844 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010298:	6878      	ldr	r0, [r7, #4]
 801029a:	f000 fd04 	bl	8010ca6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801029e:	7bbb      	ldrb	r3, [r7, #14]
 80102a0:	4619      	mov	r1, r3
 80102a2:	6878      	ldr	r0, [r7, #4]
 80102a4:	f7ff fde1 	bl	800fe6a <USBD_CoreFindEP>
 80102a8:	4603      	mov	r3, r0
 80102aa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80102ac:	7b7b      	ldrb	r3, [r7, #13]
 80102ae:	2bff      	cmp	r3, #255	; 0xff
 80102b0:	d01f      	beq.n	80102f2 <USBD_StdEPReq+0x1c6>
 80102b2:	7b7b      	ldrb	r3, [r7, #13]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d11c      	bne.n	80102f2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80102b8:	7b7a      	ldrb	r2, [r7, #13]
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80102c0:	7b7a      	ldrb	r2, [r7, #13]
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	32ae      	adds	r2, #174	; 0xae
 80102c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102ca:	689b      	ldr	r3, [r3, #8]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d010      	beq.n	80102f2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80102d0:	7b7a      	ldrb	r2, [r7, #13]
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	32ae      	adds	r2, #174	; 0xae
 80102d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102da:	689b      	ldr	r3, [r3, #8]
 80102dc:	6839      	ldr	r1, [r7, #0]
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	4798      	blx	r3
 80102e2:	4603      	mov	r3, r0
 80102e4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80102e6:	e004      	b.n	80102f2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80102e8:	6839      	ldr	r1, [r7, #0]
 80102ea:	6878      	ldr	r0, [r7, #4]
 80102ec:	f000 fc2d 	bl	8010b4a <USBD_CtlError>
              break;
 80102f0:	e000      	b.n	80102f4 <USBD_StdEPReq+0x1c8>
              break;
 80102f2:	bf00      	nop
          }
          break;
 80102f4:	e0ab      	b.n	801044e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80102fc:	b2db      	uxtb	r3, r3
 80102fe:	2b02      	cmp	r3, #2
 8010300:	d002      	beq.n	8010308 <USBD_StdEPReq+0x1dc>
 8010302:	2b03      	cmp	r3, #3
 8010304:	d032      	beq.n	801036c <USBD_StdEPReq+0x240>
 8010306:	e097      	b.n	8010438 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010308:	7bbb      	ldrb	r3, [r7, #14]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d007      	beq.n	801031e <USBD_StdEPReq+0x1f2>
 801030e:	7bbb      	ldrb	r3, [r7, #14]
 8010310:	2b80      	cmp	r3, #128	; 0x80
 8010312:	d004      	beq.n	801031e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8010314:	6839      	ldr	r1, [r7, #0]
 8010316:	6878      	ldr	r0, [r7, #4]
 8010318:	f000 fc17 	bl	8010b4a <USBD_CtlError>
                break;
 801031c:	e091      	b.n	8010442 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801031e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010322:	2b00      	cmp	r3, #0
 8010324:	da0b      	bge.n	801033e <USBD_StdEPReq+0x212>
 8010326:	7bbb      	ldrb	r3, [r7, #14]
 8010328:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801032c:	4613      	mov	r3, r2
 801032e:	009b      	lsls	r3, r3, #2
 8010330:	4413      	add	r3, r2
 8010332:	009b      	lsls	r3, r3, #2
 8010334:	3310      	adds	r3, #16
 8010336:	687a      	ldr	r2, [r7, #4]
 8010338:	4413      	add	r3, r2
 801033a:	3304      	adds	r3, #4
 801033c:	e00b      	b.n	8010356 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801033e:	7bbb      	ldrb	r3, [r7, #14]
 8010340:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010344:	4613      	mov	r3, r2
 8010346:	009b      	lsls	r3, r3, #2
 8010348:	4413      	add	r3, r2
 801034a:	009b      	lsls	r3, r3, #2
 801034c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010350:	687a      	ldr	r2, [r7, #4]
 8010352:	4413      	add	r3, r2
 8010354:	3304      	adds	r3, #4
 8010356:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010358:	68bb      	ldr	r3, [r7, #8]
 801035a:	2200      	movs	r2, #0
 801035c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801035e:	68bb      	ldr	r3, [r7, #8]
 8010360:	2202      	movs	r2, #2
 8010362:	4619      	mov	r1, r3
 8010364:	6878      	ldr	r0, [r7, #4]
 8010366:	f000 fc61 	bl	8010c2c <USBD_CtlSendData>
              break;
 801036a:	e06a      	b.n	8010442 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801036c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010370:	2b00      	cmp	r3, #0
 8010372:	da11      	bge.n	8010398 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010374:	7bbb      	ldrb	r3, [r7, #14]
 8010376:	f003 020f 	and.w	r2, r3, #15
 801037a:	6879      	ldr	r1, [r7, #4]
 801037c:	4613      	mov	r3, r2
 801037e:	009b      	lsls	r3, r3, #2
 8010380:	4413      	add	r3, r2
 8010382:	009b      	lsls	r3, r3, #2
 8010384:	440b      	add	r3, r1
 8010386:	3324      	adds	r3, #36	; 0x24
 8010388:	881b      	ldrh	r3, [r3, #0]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d117      	bne.n	80103be <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801038e:	6839      	ldr	r1, [r7, #0]
 8010390:	6878      	ldr	r0, [r7, #4]
 8010392:	f000 fbda 	bl	8010b4a <USBD_CtlError>
                  break;
 8010396:	e054      	b.n	8010442 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010398:	7bbb      	ldrb	r3, [r7, #14]
 801039a:	f003 020f 	and.w	r2, r3, #15
 801039e:	6879      	ldr	r1, [r7, #4]
 80103a0:	4613      	mov	r3, r2
 80103a2:	009b      	lsls	r3, r3, #2
 80103a4:	4413      	add	r3, r2
 80103a6:	009b      	lsls	r3, r3, #2
 80103a8:	440b      	add	r3, r1
 80103aa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80103ae:	881b      	ldrh	r3, [r3, #0]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d104      	bne.n	80103be <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80103b4:	6839      	ldr	r1, [r7, #0]
 80103b6:	6878      	ldr	r0, [r7, #4]
 80103b8:	f000 fbc7 	bl	8010b4a <USBD_CtlError>
                  break;
 80103bc:	e041      	b.n	8010442 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80103be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	da0b      	bge.n	80103de <USBD_StdEPReq+0x2b2>
 80103c6:	7bbb      	ldrb	r3, [r7, #14]
 80103c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80103cc:	4613      	mov	r3, r2
 80103ce:	009b      	lsls	r3, r3, #2
 80103d0:	4413      	add	r3, r2
 80103d2:	009b      	lsls	r3, r3, #2
 80103d4:	3310      	adds	r3, #16
 80103d6:	687a      	ldr	r2, [r7, #4]
 80103d8:	4413      	add	r3, r2
 80103da:	3304      	adds	r3, #4
 80103dc:	e00b      	b.n	80103f6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80103de:	7bbb      	ldrb	r3, [r7, #14]
 80103e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80103e4:	4613      	mov	r3, r2
 80103e6:	009b      	lsls	r3, r3, #2
 80103e8:	4413      	add	r3, r2
 80103ea:	009b      	lsls	r3, r3, #2
 80103ec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80103f0:	687a      	ldr	r2, [r7, #4]
 80103f2:	4413      	add	r3, r2
 80103f4:	3304      	adds	r3, #4
 80103f6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80103f8:	7bbb      	ldrb	r3, [r7, #14]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d002      	beq.n	8010404 <USBD_StdEPReq+0x2d8>
 80103fe:	7bbb      	ldrb	r3, [r7, #14]
 8010400:	2b80      	cmp	r3, #128	; 0x80
 8010402:	d103      	bne.n	801040c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8010404:	68bb      	ldr	r3, [r7, #8]
 8010406:	2200      	movs	r2, #0
 8010408:	601a      	str	r2, [r3, #0]
 801040a:	e00e      	b.n	801042a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801040c:	7bbb      	ldrb	r3, [r7, #14]
 801040e:	4619      	mov	r1, r3
 8010410:	6878      	ldr	r0, [r7, #4]
 8010412:	f007 fa36 	bl	8017882 <USBD_LL_IsStallEP>
 8010416:	4603      	mov	r3, r0
 8010418:	2b00      	cmp	r3, #0
 801041a:	d003      	beq.n	8010424 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801041c:	68bb      	ldr	r3, [r7, #8]
 801041e:	2201      	movs	r2, #1
 8010420:	601a      	str	r2, [r3, #0]
 8010422:	e002      	b.n	801042a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8010424:	68bb      	ldr	r3, [r7, #8]
 8010426:	2200      	movs	r2, #0
 8010428:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801042a:	68bb      	ldr	r3, [r7, #8]
 801042c:	2202      	movs	r2, #2
 801042e:	4619      	mov	r1, r3
 8010430:	6878      	ldr	r0, [r7, #4]
 8010432:	f000 fbfb 	bl	8010c2c <USBD_CtlSendData>
              break;
 8010436:	e004      	b.n	8010442 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8010438:	6839      	ldr	r1, [r7, #0]
 801043a:	6878      	ldr	r0, [r7, #4]
 801043c:	f000 fb85 	bl	8010b4a <USBD_CtlError>
              break;
 8010440:	bf00      	nop
          }
          break;
 8010442:	e004      	b.n	801044e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8010444:	6839      	ldr	r1, [r7, #0]
 8010446:	6878      	ldr	r0, [r7, #4]
 8010448:	f000 fb7f 	bl	8010b4a <USBD_CtlError>
          break;
 801044c:	bf00      	nop
      }
      break;
 801044e:	e005      	b.n	801045c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8010450:	6839      	ldr	r1, [r7, #0]
 8010452:	6878      	ldr	r0, [r7, #4]
 8010454:	f000 fb79 	bl	8010b4a <USBD_CtlError>
      break;
 8010458:	e000      	b.n	801045c <USBD_StdEPReq+0x330>
      break;
 801045a:	bf00      	nop
  }

  return ret;
 801045c:	7bfb      	ldrb	r3, [r7, #15]
}
 801045e:	4618      	mov	r0, r3
 8010460:	3710      	adds	r7, #16
 8010462:	46bd      	mov	sp, r7
 8010464:	bd80      	pop	{r7, pc}
	...

08010468 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010468:	b580      	push	{r7, lr}
 801046a:	b084      	sub	sp, #16
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
 8010470:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010472:	2300      	movs	r3, #0
 8010474:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010476:	2300      	movs	r3, #0
 8010478:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801047a:	2300      	movs	r3, #0
 801047c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801047e:	683b      	ldr	r3, [r7, #0]
 8010480:	885b      	ldrh	r3, [r3, #2]
 8010482:	0a1b      	lsrs	r3, r3, #8
 8010484:	b29b      	uxth	r3, r3
 8010486:	3b01      	subs	r3, #1
 8010488:	2b0e      	cmp	r3, #14
 801048a:	f200 8152 	bhi.w	8010732 <USBD_GetDescriptor+0x2ca>
 801048e:	a201      	add	r2, pc, #4	; (adr r2, 8010494 <USBD_GetDescriptor+0x2c>)
 8010490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010494:	08010505 	.word	0x08010505
 8010498:	0801051d 	.word	0x0801051d
 801049c:	0801055d 	.word	0x0801055d
 80104a0:	08010733 	.word	0x08010733
 80104a4:	08010733 	.word	0x08010733
 80104a8:	080106d3 	.word	0x080106d3
 80104ac:	080106ff 	.word	0x080106ff
 80104b0:	08010733 	.word	0x08010733
 80104b4:	08010733 	.word	0x08010733
 80104b8:	08010733 	.word	0x08010733
 80104bc:	08010733 	.word	0x08010733
 80104c0:	08010733 	.word	0x08010733
 80104c4:	08010733 	.word	0x08010733
 80104c8:	08010733 	.word	0x08010733
 80104cc:	080104d1 	.word	0x080104d1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80104d6:	69db      	ldr	r3, [r3, #28]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d00b      	beq.n	80104f4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80104e2:	69db      	ldr	r3, [r3, #28]
 80104e4:	687a      	ldr	r2, [r7, #4]
 80104e6:	7c12      	ldrb	r2, [r2, #16]
 80104e8:	f107 0108 	add.w	r1, r7, #8
 80104ec:	4610      	mov	r0, r2
 80104ee:	4798      	blx	r3
 80104f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80104f2:	e126      	b.n	8010742 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80104f4:	6839      	ldr	r1, [r7, #0]
 80104f6:	6878      	ldr	r0, [r7, #4]
 80104f8:	f000 fb27 	bl	8010b4a <USBD_CtlError>
        err++;
 80104fc:	7afb      	ldrb	r3, [r7, #11]
 80104fe:	3301      	adds	r3, #1
 8010500:	72fb      	strb	r3, [r7, #11]
      break;
 8010502:	e11e      	b.n	8010742 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	687a      	ldr	r2, [r7, #4]
 801050e:	7c12      	ldrb	r2, [r2, #16]
 8010510:	f107 0108 	add.w	r1, r7, #8
 8010514:	4610      	mov	r0, r2
 8010516:	4798      	blx	r3
 8010518:	60f8      	str	r0, [r7, #12]
      break;
 801051a:	e112      	b.n	8010742 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	7c1b      	ldrb	r3, [r3, #16]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d10d      	bne.n	8010540 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801052a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801052c:	f107 0208 	add.w	r2, r7, #8
 8010530:	4610      	mov	r0, r2
 8010532:	4798      	blx	r3
 8010534:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	3301      	adds	r3, #1
 801053a:	2202      	movs	r2, #2
 801053c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801053e:	e100      	b.n	8010742 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010548:	f107 0208 	add.w	r2, r7, #8
 801054c:	4610      	mov	r0, r2
 801054e:	4798      	blx	r3
 8010550:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	3301      	adds	r3, #1
 8010556:	2202      	movs	r2, #2
 8010558:	701a      	strb	r2, [r3, #0]
      break;
 801055a:	e0f2      	b.n	8010742 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801055c:	683b      	ldr	r3, [r7, #0]
 801055e:	885b      	ldrh	r3, [r3, #2]
 8010560:	b2db      	uxtb	r3, r3
 8010562:	2b05      	cmp	r3, #5
 8010564:	f200 80ac 	bhi.w	80106c0 <USBD_GetDescriptor+0x258>
 8010568:	a201      	add	r2, pc, #4	; (adr r2, 8010570 <USBD_GetDescriptor+0x108>)
 801056a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801056e:	bf00      	nop
 8010570:	08010589 	.word	0x08010589
 8010574:	080105bd 	.word	0x080105bd
 8010578:	080105f1 	.word	0x080105f1
 801057c:	08010625 	.word	0x08010625
 8010580:	08010659 	.word	0x08010659
 8010584:	0801068d 	.word	0x0801068d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801058e:	685b      	ldr	r3, [r3, #4]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d00b      	beq.n	80105ac <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801059a:	685b      	ldr	r3, [r3, #4]
 801059c:	687a      	ldr	r2, [r7, #4]
 801059e:	7c12      	ldrb	r2, [r2, #16]
 80105a0:	f107 0108 	add.w	r1, r7, #8
 80105a4:	4610      	mov	r0, r2
 80105a6:	4798      	blx	r3
 80105a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80105aa:	e091      	b.n	80106d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80105ac:	6839      	ldr	r1, [r7, #0]
 80105ae:	6878      	ldr	r0, [r7, #4]
 80105b0:	f000 facb 	bl	8010b4a <USBD_CtlError>
            err++;
 80105b4:	7afb      	ldrb	r3, [r7, #11]
 80105b6:	3301      	adds	r3, #1
 80105b8:	72fb      	strb	r3, [r7, #11]
          break;
 80105ba:	e089      	b.n	80106d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80105c2:	689b      	ldr	r3, [r3, #8]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d00b      	beq.n	80105e0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80105ce:	689b      	ldr	r3, [r3, #8]
 80105d0:	687a      	ldr	r2, [r7, #4]
 80105d2:	7c12      	ldrb	r2, [r2, #16]
 80105d4:	f107 0108 	add.w	r1, r7, #8
 80105d8:	4610      	mov	r0, r2
 80105da:	4798      	blx	r3
 80105dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80105de:	e077      	b.n	80106d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80105e0:	6839      	ldr	r1, [r7, #0]
 80105e2:	6878      	ldr	r0, [r7, #4]
 80105e4:	f000 fab1 	bl	8010b4a <USBD_CtlError>
            err++;
 80105e8:	7afb      	ldrb	r3, [r7, #11]
 80105ea:	3301      	adds	r3, #1
 80105ec:	72fb      	strb	r3, [r7, #11]
          break;
 80105ee:	e06f      	b.n	80106d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80105f6:	68db      	ldr	r3, [r3, #12]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d00b      	beq.n	8010614 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010602:	68db      	ldr	r3, [r3, #12]
 8010604:	687a      	ldr	r2, [r7, #4]
 8010606:	7c12      	ldrb	r2, [r2, #16]
 8010608:	f107 0108 	add.w	r1, r7, #8
 801060c:	4610      	mov	r0, r2
 801060e:	4798      	blx	r3
 8010610:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010612:	e05d      	b.n	80106d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010614:	6839      	ldr	r1, [r7, #0]
 8010616:	6878      	ldr	r0, [r7, #4]
 8010618:	f000 fa97 	bl	8010b4a <USBD_CtlError>
            err++;
 801061c:	7afb      	ldrb	r3, [r7, #11]
 801061e:	3301      	adds	r3, #1
 8010620:	72fb      	strb	r3, [r7, #11]
          break;
 8010622:	e055      	b.n	80106d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801062a:	691b      	ldr	r3, [r3, #16]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d00b      	beq.n	8010648 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010636:	691b      	ldr	r3, [r3, #16]
 8010638:	687a      	ldr	r2, [r7, #4]
 801063a:	7c12      	ldrb	r2, [r2, #16]
 801063c:	f107 0108 	add.w	r1, r7, #8
 8010640:	4610      	mov	r0, r2
 8010642:	4798      	blx	r3
 8010644:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010646:	e043      	b.n	80106d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010648:	6839      	ldr	r1, [r7, #0]
 801064a:	6878      	ldr	r0, [r7, #4]
 801064c:	f000 fa7d 	bl	8010b4a <USBD_CtlError>
            err++;
 8010650:	7afb      	ldrb	r3, [r7, #11]
 8010652:	3301      	adds	r3, #1
 8010654:	72fb      	strb	r3, [r7, #11]
          break;
 8010656:	e03b      	b.n	80106d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801065e:	695b      	ldr	r3, [r3, #20]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d00b      	beq.n	801067c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801066a:	695b      	ldr	r3, [r3, #20]
 801066c:	687a      	ldr	r2, [r7, #4]
 801066e:	7c12      	ldrb	r2, [r2, #16]
 8010670:	f107 0108 	add.w	r1, r7, #8
 8010674:	4610      	mov	r0, r2
 8010676:	4798      	blx	r3
 8010678:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801067a:	e029      	b.n	80106d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801067c:	6839      	ldr	r1, [r7, #0]
 801067e:	6878      	ldr	r0, [r7, #4]
 8010680:	f000 fa63 	bl	8010b4a <USBD_CtlError>
            err++;
 8010684:	7afb      	ldrb	r3, [r7, #11]
 8010686:	3301      	adds	r3, #1
 8010688:	72fb      	strb	r3, [r7, #11]
          break;
 801068a:	e021      	b.n	80106d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010692:	699b      	ldr	r3, [r3, #24]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d00b      	beq.n	80106b0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801069e:	699b      	ldr	r3, [r3, #24]
 80106a0:	687a      	ldr	r2, [r7, #4]
 80106a2:	7c12      	ldrb	r2, [r2, #16]
 80106a4:	f107 0108 	add.w	r1, r7, #8
 80106a8:	4610      	mov	r0, r2
 80106aa:	4798      	blx	r3
 80106ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80106ae:	e00f      	b.n	80106d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80106b0:	6839      	ldr	r1, [r7, #0]
 80106b2:	6878      	ldr	r0, [r7, #4]
 80106b4:	f000 fa49 	bl	8010b4a <USBD_CtlError>
            err++;
 80106b8:	7afb      	ldrb	r3, [r7, #11]
 80106ba:	3301      	adds	r3, #1
 80106bc:	72fb      	strb	r3, [r7, #11]
          break;
 80106be:	e007      	b.n	80106d0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80106c0:	6839      	ldr	r1, [r7, #0]
 80106c2:	6878      	ldr	r0, [r7, #4]
 80106c4:	f000 fa41 	bl	8010b4a <USBD_CtlError>
          err++;
 80106c8:	7afb      	ldrb	r3, [r7, #11]
 80106ca:	3301      	adds	r3, #1
 80106cc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80106ce:	bf00      	nop
      }
      break;
 80106d0:	e037      	b.n	8010742 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	7c1b      	ldrb	r3, [r3, #16]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d109      	bne.n	80106ee <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80106e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106e2:	f107 0208 	add.w	r2, r7, #8
 80106e6:	4610      	mov	r0, r2
 80106e8:	4798      	blx	r3
 80106ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80106ec:	e029      	b.n	8010742 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80106ee:	6839      	ldr	r1, [r7, #0]
 80106f0:	6878      	ldr	r0, [r7, #4]
 80106f2:	f000 fa2a 	bl	8010b4a <USBD_CtlError>
        err++;
 80106f6:	7afb      	ldrb	r3, [r7, #11]
 80106f8:	3301      	adds	r3, #1
 80106fa:	72fb      	strb	r3, [r7, #11]
      break;
 80106fc:	e021      	b.n	8010742 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	7c1b      	ldrb	r3, [r3, #16]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d10d      	bne.n	8010722 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801070e:	f107 0208 	add.w	r2, r7, #8
 8010712:	4610      	mov	r0, r2
 8010714:	4798      	blx	r3
 8010716:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	3301      	adds	r3, #1
 801071c:	2207      	movs	r2, #7
 801071e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010720:	e00f      	b.n	8010742 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010722:	6839      	ldr	r1, [r7, #0]
 8010724:	6878      	ldr	r0, [r7, #4]
 8010726:	f000 fa10 	bl	8010b4a <USBD_CtlError>
        err++;
 801072a:	7afb      	ldrb	r3, [r7, #11]
 801072c:	3301      	adds	r3, #1
 801072e:	72fb      	strb	r3, [r7, #11]
      break;
 8010730:	e007      	b.n	8010742 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8010732:	6839      	ldr	r1, [r7, #0]
 8010734:	6878      	ldr	r0, [r7, #4]
 8010736:	f000 fa08 	bl	8010b4a <USBD_CtlError>
      err++;
 801073a:	7afb      	ldrb	r3, [r7, #11]
 801073c:	3301      	adds	r3, #1
 801073e:	72fb      	strb	r3, [r7, #11]
      break;
 8010740:	bf00      	nop
  }

  if (err != 0U)
 8010742:	7afb      	ldrb	r3, [r7, #11]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d11e      	bne.n	8010786 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8010748:	683b      	ldr	r3, [r7, #0]
 801074a:	88db      	ldrh	r3, [r3, #6]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d016      	beq.n	801077e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8010750:	893b      	ldrh	r3, [r7, #8]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d00e      	beq.n	8010774 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	88da      	ldrh	r2, [r3, #6]
 801075a:	893b      	ldrh	r3, [r7, #8]
 801075c:	4293      	cmp	r3, r2
 801075e:	bf28      	it	cs
 8010760:	4613      	movcs	r3, r2
 8010762:	b29b      	uxth	r3, r3
 8010764:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010766:	893b      	ldrh	r3, [r7, #8]
 8010768:	461a      	mov	r2, r3
 801076a:	68f9      	ldr	r1, [r7, #12]
 801076c:	6878      	ldr	r0, [r7, #4]
 801076e:	f000 fa5d 	bl	8010c2c <USBD_CtlSendData>
 8010772:	e009      	b.n	8010788 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010774:	6839      	ldr	r1, [r7, #0]
 8010776:	6878      	ldr	r0, [r7, #4]
 8010778:	f000 f9e7 	bl	8010b4a <USBD_CtlError>
 801077c:	e004      	b.n	8010788 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801077e:	6878      	ldr	r0, [r7, #4]
 8010780:	f000 fa91 	bl	8010ca6 <USBD_CtlSendStatus>
 8010784:	e000      	b.n	8010788 <USBD_GetDescriptor+0x320>
    return;
 8010786:	bf00      	nop
  }
}
 8010788:	3710      	adds	r7, #16
 801078a:	46bd      	mov	sp, r7
 801078c:	bd80      	pop	{r7, pc}
 801078e:	bf00      	nop

08010790 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b084      	sub	sp, #16
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
 8010798:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801079a:	683b      	ldr	r3, [r7, #0]
 801079c:	889b      	ldrh	r3, [r3, #4]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d131      	bne.n	8010806 <USBD_SetAddress+0x76>
 80107a2:	683b      	ldr	r3, [r7, #0]
 80107a4:	88db      	ldrh	r3, [r3, #6]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d12d      	bne.n	8010806 <USBD_SetAddress+0x76>
 80107aa:	683b      	ldr	r3, [r7, #0]
 80107ac:	885b      	ldrh	r3, [r3, #2]
 80107ae:	2b7f      	cmp	r3, #127	; 0x7f
 80107b0:	d829      	bhi.n	8010806 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80107b2:	683b      	ldr	r3, [r7, #0]
 80107b4:	885b      	ldrh	r3, [r3, #2]
 80107b6:	b2db      	uxtb	r3, r3
 80107b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80107c4:	b2db      	uxtb	r3, r3
 80107c6:	2b03      	cmp	r3, #3
 80107c8:	d104      	bne.n	80107d4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80107ca:	6839      	ldr	r1, [r7, #0]
 80107cc:	6878      	ldr	r0, [r7, #4]
 80107ce:	f000 f9bc 	bl	8010b4a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80107d2:	e01d      	b.n	8010810 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	7bfa      	ldrb	r2, [r7, #15]
 80107d8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80107dc:	7bfb      	ldrb	r3, [r7, #15]
 80107de:	4619      	mov	r1, r3
 80107e0:	6878      	ldr	r0, [r7, #4]
 80107e2:	f007 f87a 	bl	80178da <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80107e6:	6878      	ldr	r0, [r7, #4]
 80107e8:	f000 fa5d 	bl	8010ca6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80107ec:	7bfb      	ldrb	r3, [r7, #15]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d004      	beq.n	80107fc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2202      	movs	r2, #2
 80107f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80107fa:	e009      	b.n	8010810 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	2201      	movs	r2, #1
 8010800:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010804:	e004      	b.n	8010810 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010806:	6839      	ldr	r1, [r7, #0]
 8010808:	6878      	ldr	r0, [r7, #4]
 801080a:	f000 f99e 	bl	8010b4a <USBD_CtlError>
  }
}
 801080e:	bf00      	nop
 8010810:	bf00      	nop
 8010812:	3710      	adds	r7, #16
 8010814:	46bd      	mov	sp, r7
 8010816:	bd80      	pop	{r7, pc}

08010818 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010818:	b580      	push	{r7, lr}
 801081a:	b084      	sub	sp, #16
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
 8010820:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010822:	2300      	movs	r3, #0
 8010824:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010826:	683b      	ldr	r3, [r7, #0]
 8010828:	885b      	ldrh	r3, [r3, #2]
 801082a:	b2da      	uxtb	r2, r3
 801082c:	4b4e      	ldr	r3, [pc, #312]	; (8010968 <USBD_SetConfig+0x150>)
 801082e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010830:	4b4d      	ldr	r3, [pc, #308]	; (8010968 <USBD_SetConfig+0x150>)
 8010832:	781b      	ldrb	r3, [r3, #0]
 8010834:	2b01      	cmp	r3, #1
 8010836:	d905      	bls.n	8010844 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010838:	6839      	ldr	r1, [r7, #0]
 801083a:	6878      	ldr	r0, [r7, #4]
 801083c:	f000 f985 	bl	8010b4a <USBD_CtlError>
    return USBD_FAIL;
 8010840:	2303      	movs	r3, #3
 8010842:	e08c      	b.n	801095e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801084a:	b2db      	uxtb	r3, r3
 801084c:	2b02      	cmp	r3, #2
 801084e:	d002      	beq.n	8010856 <USBD_SetConfig+0x3e>
 8010850:	2b03      	cmp	r3, #3
 8010852:	d029      	beq.n	80108a8 <USBD_SetConfig+0x90>
 8010854:	e075      	b.n	8010942 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010856:	4b44      	ldr	r3, [pc, #272]	; (8010968 <USBD_SetConfig+0x150>)
 8010858:	781b      	ldrb	r3, [r3, #0]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d020      	beq.n	80108a0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801085e:	4b42      	ldr	r3, [pc, #264]	; (8010968 <USBD_SetConfig+0x150>)
 8010860:	781b      	ldrb	r3, [r3, #0]
 8010862:	461a      	mov	r2, r3
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010868:	4b3f      	ldr	r3, [pc, #252]	; (8010968 <USBD_SetConfig+0x150>)
 801086a:	781b      	ldrb	r3, [r3, #0]
 801086c:	4619      	mov	r1, r3
 801086e:	6878      	ldr	r0, [r7, #4]
 8010870:	f7fe ffbc 	bl	800f7ec <USBD_SetClassConfig>
 8010874:	4603      	mov	r3, r0
 8010876:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010878:	7bfb      	ldrb	r3, [r7, #15]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d008      	beq.n	8010890 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801087e:	6839      	ldr	r1, [r7, #0]
 8010880:	6878      	ldr	r0, [r7, #4]
 8010882:	f000 f962 	bl	8010b4a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	2202      	movs	r2, #2
 801088a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801088e:	e065      	b.n	801095c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010890:	6878      	ldr	r0, [r7, #4]
 8010892:	f000 fa08 	bl	8010ca6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	2203      	movs	r2, #3
 801089a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801089e:	e05d      	b.n	801095c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80108a0:	6878      	ldr	r0, [r7, #4]
 80108a2:	f000 fa00 	bl	8010ca6 <USBD_CtlSendStatus>
      break;
 80108a6:	e059      	b.n	801095c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80108a8:	4b2f      	ldr	r3, [pc, #188]	; (8010968 <USBD_SetConfig+0x150>)
 80108aa:	781b      	ldrb	r3, [r3, #0]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d112      	bne.n	80108d6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	2202      	movs	r2, #2
 80108b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80108b8:	4b2b      	ldr	r3, [pc, #172]	; (8010968 <USBD_SetConfig+0x150>)
 80108ba:	781b      	ldrb	r3, [r3, #0]
 80108bc:	461a      	mov	r2, r3
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80108c2:	4b29      	ldr	r3, [pc, #164]	; (8010968 <USBD_SetConfig+0x150>)
 80108c4:	781b      	ldrb	r3, [r3, #0]
 80108c6:	4619      	mov	r1, r3
 80108c8:	6878      	ldr	r0, [r7, #4]
 80108ca:	f7fe ffab 	bl	800f824 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80108ce:	6878      	ldr	r0, [r7, #4]
 80108d0:	f000 f9e9 	bl	8010ca6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80108d4:	e042      	b.n	801095c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80108d6:	4b24      	ldr	r3, [pc, #144]	; (8010968 <USBD_SetConfig+0x150>)
 80108d8:	781b      	ldrb	r3, [r3, #0]
 80108da:	461a      	mov	r2, r3
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	685b      	ldr	r3, [r3, #4]
 80108e0:	429a      	cmp	r2, r3
 80108e2:	d02a      	beq.n	801093a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	685b      	ldr	r3, [r3, #4]
 80108e8:	b2db      	uxtb	r3, r3
 80108ea:	4619      	mov	r1, r3
 80108ec:	6878      	ldr	r0, [r7, #4]
 80108ee:	f7fe ff99 	bl	800f824 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80108f2:	4b1d      	ldr	r3, [pc, #116]	; (8010968 <USBD_SetConfig+0x150>)
 80108f4:	781b      	ldrb	r3, [r3, #0]
 80108f6:	461a      	mov	r2, r3
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80108fc:	4b1a      	ldr	r3, [pc, #104]	; (8010968 <USBD_SetConfig+0x150>)
 80108fe:	781b      	ldrb	r3, [r3, #0]
 8010900:	4619      	mov	r1, r3
 8010902:	6878      	ldr	r0, [r7, #4]
 8010904:	f7fe ff72 	bl	800f7ec <USBD_SetClassConfig>
 8010908:	4603      	mov	r3, r0
 801090a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801090c:	7bfb      	ldrb	r3, [r7, #15]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d00f      	beq.n	8010932 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8010912:	6839      	ldr	r1, [r7, #0]
 8010914:	6878      	ldr	r0, [r7, #4]
 8010916:	f000 f918 	bl	8010b4a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	685b      	ldr	r3, [r3, #4]
 801091e:	b2db      	uxtb	r3, r3
 8010920:	4619      	mov	r1, r3
 8010922:	6878      	ldr	r0, [r7, #4]
 8010924:	f7fe ff7e 	bl	800f824 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	2202      	movs	r2, #2
 801092c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010930:	e014      	b.n	801095c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010932:	6878      	ldr	r0, [r7, #4]
 8010934:	f000 f9b7 	bl	8010ca6 <USBD_CtlSendStatus>
      break;
 8010938:	e010      	b.n	801095c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801093a:	6878      	ldr	r0, [r7, #4]
 801093c:	f000 f9b3 	bl	8010ca6 <USBD_CtlSendStatus>
      break;
 8010940:	e00c      	b.n	801095c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8010942:	6839      	ldr	r1, [r7, #0]
 8010944:	6878      	ldr	r0, [r7, #4]
 8010946:	f000 f900 	bl	8010b4a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801094a:	4b07      	ldr	r3, [pc, #28]	; (8010968 <USBD_SetConfig+0x150>)
 801094c:	781b      	ldrb	r3, [r3, #0]
 801094e:	4619      	mov	r1, r3
 8010950:	6878      	ldr	r0, [r7, #4]
 8010952:	f7fe ff67 	bl	800f824 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010956:	2303      	movs	r3, #3
 8010958:	73fb      	strb	r3, [r7, #15]
      break;
 801095a:	bf00      	nop
  }

  return ret;
 801095c:	7bfb      	ldrb	r3, [r7, #15]
}
 801095e:	4618      	mov	r0, r3
 8010960:	3710      	adds	r7, #16
 8010962:	46bd      	mov	sp, r7
 8010964:	bd80      	pop	{r7, pc}
 8010966:	bf00      	nop
 8010968:	20003218 	.word	0x20003218

0801096c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801096c:	b580      	push	{r7, lr}
 801096e:	b082      	sub	sp, #8
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
 8010974:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010976:	683b      	ldr	r3, [r7, #0]
 8010978:	88db      	ldrh	r3, [r3, #6]
 801097a:	2b01      	cmp	r3, #1
 801097c:	d004      	beq.n	8010988 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801097e:	6839      	ldr	r1, [r7, #0]
 8010980:	6878      	ldr	r0, [r7, #4]
 8010982:	f000 f8e2 	bl	8010b4a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010986:	e023      	b.n	80109d0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801098e:	b2db      	uxtb	r3, r3
 8010990:	2b02      	cmp	r3, #2
 8010992:	dc02      	bgt.n	801099a <USBD_GetConfig+0x2e>
 8010994:	2b00      	cmp	r3, #0
 8010996:	dc03      	bgt.n	80109a0 <USBD_GetConfig+0x34>
 8010998:	e015      	b.n	80109c6 <USBD_GetConfig+0x5a>
 801099a:	2b03      	cmp	r3, #3
 801099c:	d00b      	beq.n	80109b6 <USBD_GetConfig+0x4a>
 801099e:	e012      	b.n	80109c6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	2200      	movs	r2, #0
 80109a4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	3308      	adds	r3, #8
 80109aa:	2201      	movs	r2, #1
 80109ac:	4619      	mov	r1, r3
 80109ae:	6878      	ldr	r0, [r7, #4]
 80109b0:	f000 f93c 	bl	8010c2c <USBD_CtlSendData>
        break;
 80109b4:	e00c      	b.n	80109d0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	3304      	adds	r3, #4
 80109ba:	2201      	movs	r2, #1
 80109bc:	4619      	mov	r1, r3
 80109be:	6878      	ldr	r0, [r7, #4]
 80109c0:	f000 f934 	bl	8010c2c <USBD_CtlSendData>
        break;
 80109c4:	e004      	b.n	80109d0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80109c6:	6839      	ldr	r1, [r7, #0]
 80109c8:	6878      	ldr	r0, [r7, #4]
 80109ca:	f000 f8be 	bl	8010b4a <USBD_CtlError>
        break;
 80109ce:	bf00      	nop
}
 80109d0:	bf00      	nop
 80109d2:	3708      	adds	r7, #8
 80109d4:	46bd      	mov	sp, r7
 80109d6:	bd80      	pop	{r7, pc}

080109d8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80109d8:	b580      	push	{r7, lr}
 80109da:	b082      	sub	sp, #8
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6078      	str	r0, [r7, #4]
 80109e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80109e8:	b2db      	uxtb	r3, r3
 80109ea:	3b01      	subs	r3, #1
 80109ec:	2b02      	cmp	r3, #2
 80109ee:	d81e      	bhi.n	8010a2e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80109f0:	683b      	ldr	r3, [r7, #0]
 80109f2:	88db      	ldrh	r3, [r3, #6]
 80109f4:	2b02      	cmp	r3, #2
 80109f6:	d004      	beq.n	8010a02 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80109f8:	6839      	ldr	r1, [r7, #0]
 80109fa:	6878      	ldr	r0, [r7, #4]
 80109fc:	f000 f8a5 	bl	8010b4a <USBD_CtlError>
        break;
 8010a00:	e01a      	b.n	8010a38 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	2201      	movs	r2, #1
 8010a06:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d005      	beq.n	8010a1e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	68db      	ldr	r3, [r3, #12]
 8010a16:	f043 0202 	orr.w	r2, r3, #2
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	330c      	adds	r3, #12
 8010a22:	2202      	movs	r2, #2
 8010a24:	4619      	mov	r1, r3
 8010a26:	6878      	ldr	r0, [r7, #4]
 8010a28:	f000 f900 	bl	8010c2c <USBD_CtlSendData>
      break;
 8010a2c:	e004      	b.n	8010a38 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010a2e:	6839      	ldr	r1, [r7, #0]
 8010a30:	6878      	ldr	r0, [r7, #4]
 8010a32:	f000 f88a 	bl	8010b4a <USBD_CtlError>
      break;
 8010a36:	bf00      	nop
  }
}
 8010a38:	bf00      	nop
 8010a3a:	3708      	adds	r7, #8
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	bd80      	pop	{r7, pc}

08010a40 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b082      	sub	sp, #8
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
 8010a48:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010a4a:	683b      	ldr	r3, [r7, #0]
 8010a4c:	885b      	ldrh	r3, [r3, #2]
 8010a4e:	2b01      	cmp	r3, #1
 8010a50:	d107      	bne.n	8010a62 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	2201      	movs	r2, #1
 8010a56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010a5a:	6878      	ldr	r0, [r7, #4]
 8010a5c:	f000 f923 	bl	8010ca6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8010a60:	e013      	b.n	8010a8a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8010a62:	683b      	ldr	r3, [r7, #0]
 8010a64:	885b      	ldrh	r3, [r3, #2]
 8010a66:	2b02      	cmp	r3, #2
 8010a68:	d10b      	bne.n	8010a82 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8010a6a:	683b      	ldr	r3, [r7, #0]
 8010a6c:	889b      	ldrh	r3, [r3, #4]
 8010a6e:	0a1b      	lsrs	r3, r3, #8
 8010a70:	b29b      	uxth	r3, r3
 8010a72:	b2da      	uxtb	r2, r3
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8010a7a:	6878      	ldr	r0, [r7, #4]
 8010a7c:	f000 f913 	bl	8010ca6 <USBD_CtlSendStatus>
}
 8010a80:	e003      	b.n	8010a8a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8010a82:	6839      	ldr	r1, [r7, #0]
 8010a84:	6878      	ldr	r0, [r7, #4]
 8010a86:	f000 f860 	bl	8010b4a <USBD_CtlError>
}
 8010a8a:	bf00      	nop
 8010a8c:	3708      	adds	r7, #8
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd80      	pop	{r7, pc}

08010a92 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a92:	b580      	push	{r7, lr}
 8010a94:	b082      	sub	sp, #8
 8010a96:	af00      	add	r7, sp, #0
 8010a98:	6078      	str	r0, [r7, #4]
 8010a9a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010aa2:	b2db      	uxtb	r3, r3
 8010aa4:	3b01      	subs	r3, #1
 8010aa6:	2b02      	cmp	r3, #2
 8010aa8:	d80b      	bhi.n	8010ac2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010aaa:	683b      	ldr	r3, [r7, #0]
 8010aac:	885b      	ldrh	r3, [r3, #2]
 8010aae:	2b01      	cmp	r3, #1
 8010ab0:	d10c      	bne.n	8010acc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010aba:	6878      	ldr	r0, [r7, #4]
 8010abc:	f000 f8f3 	bl	8010ca6 <USBD_CtlSendStatus>
      }
      break;
 8010ac0:	e004      	b.n	8010acc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010ac2:	6839      	ldr	r1, [r7, #0]
 8010ac4:	6878      	ldr	r0, [r7, #4]
 8010ac6:	f000 f840 	bl	8010b4a <USBD_CtlError>
      break;
 8010aca:	e000      	b.n	8010ace <USBD_ClrFeature+0x3c>
      break;
 8010acc:	bf00      	nop
  }
}
 8010ace:	bf00      	nop
 8010ad0:	3708      	adds	r7, #8
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	bd80      	pop	{r7, pc}

08010ad6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010ad6:	b580      	push	{r7, lr}
 8010ad8:	b084      	sub	sp, #16
 8010ada:	af00      	add	r7, sp, #0
 8010adc:	6078      	str	r0, [r7, #4]
 8010ade:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010ae0:	683b      	ldr	r3, [r7, #0]
 8010ae2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	781a      	ldrb	r2, [r3, #0]
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	3301      	adds	r3, #1
 8010af0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	781a      	ldrb	r2, [r3, #0]
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	3301      	adds	r3, #1
 8010afe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010b00:	68f8      	ldr	r0, [r7, #12]
 8010b02:	f7ff fa16 	bl	800ff32 <SWAPBYTE>
 8010b06:	4603      	mov	r3, r0
 8010b08:	461a      	mov	r2, r3
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	3301      	adds	r3, #1
 8010b12:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	3301      	adds	r3, #1
 8010b18:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010b1a:	68f8      	ldr	r0, [r7, #12]
 8010b1c:	f7ff fa09 	bl	800ff32 <SWAPBYTE>
 8010b20:	4603      	mov	r3, r0
 8010b22:	461a      	mov	r2, r3
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	3301      	adds	r3, #1
 8010b2c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	3301      	adds	r3, #1
 8010b32:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010b34:	68f8      	ldr	r0, [r7, #12]
 8010b36:	f7ff f9fc 	bl	800ff32 <SWAPBYTE>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	461a      	mov	r2, r3
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	80da      	strh	r2, [r3, #6]
}
 8010b42:	bf00      	nop
 8010b44:	3710      	adds	r7, #16
 8010b46:	46bd      	mov	sp, r7
 8010b48:	bd80      	pop	{r7, pc}

08010b4a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010b4a:	b580      	push	{r7, lr}
 8010b4c:	b082      	sub	sp, #8
 8010b4e:	af00      	add	r7, sp, #0
 8010b50:	6078      	str	r0, [r7, #4]
 8010b52:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010b54:	2180      	movs	r1, #128	; 0x80
 8010b56:	6878      	ldr	r0, [r7, #4]
 8010b58:	f006 fe55 	bl	8017806 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010b5c:	2100      	movs	r1, #0
 8010b5e:	6878      	ldr	r0, [r7, #4]
 8010b60:	f006 fe51 	bl	8017806 <USBD_LL_StallEP>
}
 8010b64:	bf00      	nop
 8010b66:	3708      	adds	r7, #8
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	bd80      	pop	{r7, pc}

08010b6c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b086      	sub	sp, #24
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	60f8      	str	r0, [r7, #12]
 8010b74:	60b9      	str	r1, [r7, #8]
 8010b76:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010b78:	2300      	movs	r3, #0
 8010b7a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d036      	beq.n	8010bf0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010b86:	6938      	ldr	r0, [r7, #16]
 8010b88:	f000 f836 	bl	8010bf8 <USBD_GetLen>
 8010b8c:	4603      	mov	r3, r0
 8010b8e:	3301      	adds	r3, #1
 8010b90:	b29b      	uxth	r3, r3
 8010b92:	005b      	lsls	r3, r3, #1
 8010b94:	b29a      	uxth	r2, r3
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010b9a:	7dfb      	ldrb	r3, [r7, #23]
 8010b9c:	68ba      	ldr	r2, [r7, #8]
 8010b9e:	4413      	add	r3, r2
 8010ba0:	687a      	ldr	r2, [r7, #4]
 8010ba2:	7812      	ldrb	r2, [r2, #0]
 8010ba4:	701a      	strb	r2, [r3, #0]
  idx++;
 8010ba6:	7dfb      	ldrb	r3, [r7, #23]
 8010ba8:	3301      	adds	r3, #1
 8010baa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010bac:	7dfb      	ldrb	r3, [r7, #23]
 8010bae:	68ba      	ldr	r2, [r7, #8]
 8010bb0:	4413      	add	r3, r2
 8010bb2:	2203      	movs	r2, #3
 8010bb4:	701a      	strb	r2, [r3, #0]
  idx++;
 8010bb6:	7dfb      	ldrb	r3, [r7, #23]
 8010bb8:	3301      	adds	r3, #1
 8010bba:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010bbc:	e013      	b.n	8010be6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010bbe:	7dfb      	ldrb	r3, [r7, #23]
 8010bc0:	68ba      	ldr	r2, [r7, #8]
 8010bc2:	4413      	add	r3, r2
 8010bc4:	693a      	ldr	r2, [r7, #16]
 8010bc6:	7812      	ldrb	r2, [r2, #0]
 8010bc8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010bca:	693b      	ldr	r3, [r7, #16]
 8010bcc:	3301      	adds	r3, #1
 8010bce:	613b      	str	r3, [r7, #16]
    idx++;
 8010bd0:	7dfb      	ldrb	r3, [r7, #23]
 8010bd2:	3301      	adds	r3, #1
 8010bd4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010bd6:	7dfb      	ldrb	r3, [r7, #23]
 8010bd8:	68ba      	ldr	r2, [r7, #8]
 8010bda:	4413      	add	r3, r2
 8010bdc:	2200      	movs	r2, #0
 8010bde:	701a      	strb	r2, [r3, #0]
    idx++;
 8010be0:	7dfb      	ldrb	r3, [r7, #23]
 8010be2:	3301      	adds	r3, #1
 8010be4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010be6:	693b      	ldr	r3, [r7, #16]
 8010be8:	781b      	ldrb	r3, [r3, #0]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d1e7      	bne.n	8010bbe <USBD_GetString+0x52>
 8010bee:	e000      	b.n	8010bf2 <USBD_GetString+0x86>
    return;
 8010bf0:	bf00      	nop
  }
}
 8010bf2:	3718      	adds	r7, #24
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	bd80      	pop	{r7, pc}

08010bf8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010bf8:	b480      	push	{r7}
 8010bfa:	b085      	sub	sp, #20
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010c00:	2300      	movs	r3, #0
 8010c02:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010c08:	e005      	b.n	8010c16 <USBD_GetLen+0x1e>
  {
    len++;
 8010c0a:	7bfb      	ldrb	r3, [r7, #15]
 8010c0c:	3301      	adds	r3, #1
 8010c0e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010c10:	68bb      	ldr	r3, [r7, #8]
 8010c12:	3301      	adds	r3, #1
 8010c14:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010c16:	68bb      	ldr	r3, [r7, #8]
 8010c18:	781b      	ldrb	r3, [r3, #0]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d1f5      	bne.n	8010c0a <USBD_GetLen+0x12>
  }

  return len;
 8010c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c20:	4618      	mov	r0, r3
 8010c22:	3714      	adds	r7, #20
 8010c24:	46bd      	mov	sp, r7
 8010c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c2a:	4770      	bx	lr

08010c2c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b084      	sub	sp, #16
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	60f8      	str	r0, [r7, #12]
 8010c34:	60b9      	str	r1, [r7, #8]
 8010c36:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	2202      	movs	r2, #2
 8010c3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	687a      	ldr	r2, [r7, #4]
 8010c44:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	687a      	ldr	r2, [r7, #4]
 8010c4a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	68ba      	ldr	r2, [r7, #8]
 8010c50:	2100      	movs	r1, #0
 8010c52:	68f8      	ldr	r0, [r7, #12]
 8010c54:	f006 fe60 	bl	8017918 <USBD_LL_Transmit>

  return USBD_OK;
 8010c58:	2300      	movs	r3, #0
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	3710      	adds	r7, #16
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}

08010c62 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010c62:	b580      	push	{r7, lr}
 8010c64:	b084      	sub	sp, #16
 8010c66:	af00      	add	r7, sp, #0
 8010c68:	60f8      	str	r0, [r7, #12]
 8010c6a:	60b9      	str	r1, [r7, #8]
 8010c6c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	68ba      	ldr	r2, [r7, #8]
 8010c72:	2100      	movs	r1, #0
 8010c74:	68f8      	ldr	r0, [r7, #12]
 8010c76:	f006 fe4f 	bl	8017918 <USBD_LL_Transmit>

  return USBD_OK;
 8010c7a:	2300      	movs	r3, #0
}
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	3710      	adds	r7, #16
 8010c80:	46bd      	mov	sp, r7
 8010c82:	bd80      	pop	{r7, pc}

08010c84 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b084      	sub	sp, #16
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	60f8      	str	r0, [r7, #12]
 8010c8c:	60b9      	str	r1, [r7, #8]
 8010c8e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	68ba      	ldr	r2, [r7, #8]
 8010c94:	2100      	movs	r1, #0
 8010c96:	68f8      	ldr	r0, [r7, #12]
 8010c98:	f006 fe5f 	bl	801795a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010c9c:	2300      	movs	r3, #0
}
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	3710      	adds	r7, #16
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	bd80      	pop	{r7, pc}

08010ca6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010ca6:	b580      	push	{r7, lr}
 8010ca8:	b082      	sub	sp, #8
 8010caa:	af00      	add	r7, sp, #0
 8010cac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	2204      	movs	r2, #4
 8010cb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	2200      	movs	r2, #0
 8010cba:	2100      	movs	r1, #0
 8010cbc:	6878      	ldr	r0, [r7, #4]
 8010cbe:	f006 fe2b 	bl	8017918 <USBD_LL_Transmit>

  return USBD_OK;
 8010cc2:	2300      	movs	r3, #0
}
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	3708      	adds	r7, #8
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	bd80      	pop	{r7, pc}

08010ccc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	b082      	sub	sp, #8
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	2205      	movs	r2, #5
 8010cd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010cdc:	2300      	movs	r3, #0
 8010cde:	2200      	movs	r2, #0
 8010ce0:	2100      	movs	r1, #0
 8010ce2:	6878      	ldr	r0, [r7, #4]
 8010ce4:	f006 fe39 	bl	801795a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010ce8:	2300      	movs	r3, #0
}
 8010cea:	4618      	mov	r0, r3
 8010cec:	3708      	adds	r7, #8
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	bd80      	pop	{r7, pc}
	...

08010cf4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	b084      	sub	sp, #16
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	4603      	mov	r3, r0
 8010cfc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010cfe:	79fb      	ldrb	r3, [r7, #7]
 8010d00:	4a08      	ldr	r2, [pc, #32]	; (8010d24 <disk_status+0x30>)
 8010d02:	009b      	lsls	r3, r3, #2
 8010d04:	4413      	add	r3, r2
 8010d06:	685b      	ldr	r3, [r3, #4]
 8010d08:	685b      	ldr	r3, [r3, #4]
 8010d0a:	79fa      	ldrb	r2, [r7, #7]
 8010d0c:	4905      	ldr	r1, [pc, #20]	; (8010d24 <disk_status+0x30>)
 8010d0e:	440a      	add	r2, r1
 8010d10:	7a12      	ldrb	r2, [r2, #8]
 8010d12:	4610      	mov	r0, r2
 8010d14:	4798      	blx	r3
 8010d16:	4603      	mov	r3, r0
 8010d18:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	3710      	adds	r7, #16
 8010d20:	46bd      	mov	sp, r7
 8010d22:	bd80      	pop	{r7, pc}
 8010d24:	20003244 	.word	0x20003244

08010d28 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b084      	sub	sp, #16
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	4603      	mov	r3, r0
 8010d30:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010d32:	2300      	movs	r3, #0
 8010d34:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010d36:	79fb      	ldrb	r3, [r7, #7]
 8010d38:	4a0d      	ldr	r2, [pc, #52]	; (8010d70 <disk_initialize+0x48>)
 8010d3a:	5cd3      	ldrb	r3, [r2, r3]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d111      	bne.n	8010d64 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010d40:	79fb      	ldrb	r3, [r7, #7]
 8010d42:	4a0b      	ldr	r2, [pc, #44]	; (8010d70 <disk_initialize+0x48>)
 8010d44:	2101      	movs	r1, #1
 8010d46:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010d48:	79fb      	ldrb	r3, [r7, #7]
 8010d4a:	4a09      	ldr	r2, [pc, #36]	; (8010d70 <disk_initialize+0x48>)
 8010d4c:	009b      	lsls	r3, r3, #2
 8010d4e:	4413      	add	r3, r2
 8010d50:	685b      	ldr	r3, [r3, #4]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	79fa      	ldrb	r2, [r7, #7]
 8010d56:	4906      	ldr	r1, [pc, #24]	; (8010d70 <disk_initialize+0x48>)
 8010d58:	440a      	add	r2, r1
 8010d5a:	7a12      	ldrb	r2, [r2, #8]
 8010d5c:	4610      	mov	r0, r2
 8010d5e:	4798      	blx	r3
 8010d60:	4603      	mov	r3, r0
 8010d62:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d66:	4618      	mov	r0, r3
 8010d68:	3710      	adds	r7, #16
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	bd80      	pop	{r7, pc}
 8010d6e:	bf00      	nop
 8010d70:	20003244 	.word	0x20003244

08010d74 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010d74:	b590      	push	{r4, r7, lr}
 8010d76:	b087      	sub	sp, #28
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	60b9      	str	r1, [r7, #8]
 8010d7c:	607a      	str	r2, [r7, #4]
 8010d7e:	603b      	str	r3, [r7, #0]
 8010d80:	4603      	mov	r3, r0
 8010d82:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010d84:	7bfb      	ldrb	r3, [r7, #15]
 8010d86:	4a0a      	ldr	r2, [pc, #40]	; (8010db0 <disk_read+0x3c>)
 8010d88:	009b      	lsls	r3, r3, #2
 8010d8a:	4413      	add	r3, r2
 8010d8c:	685b      	ldr	r3, [r3, #4]
 8010d8e:	689c      	ldr	r4, [r3, #8]
 8010d90:	7bfb      	ldrb	r3, [r7, #15]
 8010d92:	4a07      	ldr	r2, [pc, #28]	; (8010db0 <disk_read+0x3c>)
 8010d94:	4413      	add	r3, r2
 8010d96:	7a18      	ldrb	r0, [r3, #8]
 8010d98:	683b      	ldr	r3, [r7, #0]
 8010d9a:	687a      	ldr	r2, [r7, #4]
 8010d9c:	68b9      	ldr	r1, [r7, #8]
 8010d9e:	47a0      	blx	r4
 8010da0:	4603      	mov	r3, r0
 8010da2:	75fb      	strb	r3, [r7, #23]
  return res;
 8010da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010da6:	4618      	mov	r0, r3
 8010da8:	371c      	adds	r7, #28
 8010daa:	46bd      	mov	sp, r7
 8010dac:	bd90      	pop	{r4, r7, pc}
 8010dae:	bf00      	nop
 8010db0:	20003244 	.word	0x20003244

08010db4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010db4:	b590      	push	{r4, r7, lr}
 8010db6:	b087      	sub	sp, #28
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	60b9      	str	r1, [r7, #8]
 8010dbc:	607a      	str	r2, [r7, #4]
 8010dbe:	603b      	str	r3, [r7, #0]
 8010dc0:	4603      	mov	r3, r0
 8010dc2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010dc4:	7bfb      	ldrb	r3, [r7, #15]
 8010dc6:	4a0a      	ldr	r2, [pc, #40]	; (8010df0 <disk_write+0x3c>)
 8010dc8:	009b      	lsls	r3, r3, #2
 8010dca:	4413      	add	r3, r2
 8010dcc:	685b      	ldr	r3, [r3, #4]
 8010dce:	68dc      	ldr	r4, [r3, #12]
 8010dd0:	7bfb      	ldrb	r3, [r7, #15]
 8010dd2:	4a07      	ldr	r2, [pc, #28]	; (8010df0 <disk_write+0x3c>)
 8010dd4:	4413      	add	r3, r2
 8010dd6:	7a18      	ldrb	r0, [r3, #8]
 8010dd8:	683b      	ldr	r3, [r7, #0]
 8010dda:	687a      	ldr	r2, [r7, #4]
 8010ddc:	68b9      	ldr	r1, [r7, #8]
 8010dde:	47a0      	blx	r4
 8010de0:	4603      	mov	r3, r0
 8010de2:	75fb      	strb	r3, [r7, #23]
  return res;
 8010de4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010de6:	4618      	mov	r0, r3
 8010de8:	371c      	adds	r7, #28
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd90      	pop	{r4, r7, pc}
 8010dee:	bf00      	nop
 8010df0:	20003244 	.word	0x20003244

08010df4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b084      	sub	sp, #16
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	603a      	str	r2, [r7, #0]
 8010dfe:	71fb      	strb	r3, [r7, #7]
 8010e00:	460b      	mov	r3, r1
 8010e02:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010e04:	79fb      	ldrb	r3, [r7, #7]
 8010e06:	4a09      	ldr	r2, [pc, #36]	; (8010e2c <disk_ioctl+0x38>)
 8010e08:	009b      	lsls	r3, r3, #2
 8010e0a:	4413      	add	r3, r2
 8010e0c:	685b      	ldr	r3, [r3, #4]
 8010e0e:	691b      	ldr	r3, [r3, #16]
 8010e10:	79fa      	ldrb	r2, [r7, #7]
 8010e12:	4906      	ldr	r1, [pc, #24]	; (8010e2c <disk_ioctl+0x38>)
 8010e14:	440a      	add	r2, r1
 8010e16:	7a10      	ldrb	r0, [r2, #8]
 8010e18:	79b9      	ldrb	r1, [r7, #6]
 8010e1a:	683a      	ldr	r2, [r7, #0]
 8010e1c:	4798      	blx	r3
 8010e1e:	4603      	mov	r3, r0
 8010e20:	73fb      	strb	r3, [r7, #15]
  return res;
 8010e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e24:	4618      	mov	r0, r3
 8010e26:	3710      	adds	r7, #16
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd80      	pop	{r7, pc}
 8010e2c:	20003244 	.word	0x20003244

08010e30 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010e30:	b480      	push	{r7}
 8010e32:	b085      	sub	sp, #20
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	3301      	adds	r3, #1
 8010e3c:	781b      	ldrb	r3, [r3, #0]
 8010e3e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010e40:	89fb      	ldrh	r3, [r7, #14]
 8010e42:	021b      	lsls	r3, r3, #8
 8010e44:	b21a      	sxth	r2, r3
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	781b      	ldrb	r3, [r3, #0]
 8010e4a:	b21b      	sxth	r3, r3
 8010e4c:	4313      	orrs	r3, r2
 8010e4e:	b21b      	sxth	r3, r3
 8010e50:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010e52:	89fb      	ldrh	r3, [r7, #14]
}
 8010e54:	4618      	mov	r0, r3
 8010e56:	3714      	adds	r7, #20
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5e:	4770      	bx	lr

08010e60 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010e60:	b480      	push	{r7}
 8010e62:	b085      	sub	sp, #20
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	3303      	adds	r3, #3
 8010e6c:	781b      	ldrb	r3, [r3, #0]
 8010e6e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	021b      	lsls	r3, r3, #8
 8010e74:	687a      	ldr	r2, [r7, #4]
 8010e76:	3202      	adds	r2, #2
 8010e78:	7812      	ldrb	r2, [r2, #0]
 8010e7a:	4313      	orrs	r3, r2
 8010e7c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	021b      	lsls	r3, r3, #8
 8010e82:	687a      	ldr	r2, [r7, #4]
 8010e84:	3201      	adds	r2, #1
 8010e86:	7812      	ldrb	r2, [r2, #0]
 8010e88:	4313      	orrs	r3, r2
 8010e8a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	021b      	lsls	r3, r3, #8
 8010e90:	687a      	ldr	r2, [r7, #4]
 8010e92:	7812      	ldrb	r2, [r2, #0]
 8010e94:	4313      	orrs	r3, r2
 8010e96:	60fb      	str	r3, [r7, #12]
	return rv;
 8010e98:	68fb      	ldr	r3, [r7, #12]
}
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	3714      	adds	r7, #20
 8010e9e:	46bd      	mov	sp, r7
 8010ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea4:	4770      	bx	lr

08010ea6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010ea6:	b480      	push	{r7}
 8010ea8:	b083      	sub	sp, #12
 8010eaa:	af00      	add	r7, sp, #0
 8010eac:	6078      	str	r0, [r7, #4]
 8010eae:	460b      	mov	r3, r1
 8010eb0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	1c5a      	adds	r2, r3, #1
 8010eb6:	607a      	str	r2, [r7, #4]
 8010eb8:	887a      	ldrh	r2, [r7, #2]
 8010eba:	b2d2      	uxtb	r2, r2
 8010ebc:	701a      	strb	r2, [r3, #0]
 8010ebe:	887b      	ldrh	r3, [r7, #2]
 8010ec0:	0a1b      	lsrs	r3, r3, #8
 8010ec2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	1c5a      	adds	r2, r3, #1
 8010ec8:	607a      	str	r2, [r7, #4]
 8010eca:	887a      	ldrh	r2, [r7, #2]
 8010ecc:	b2d2      	uxtb	r2, r2
 8010ece:	701a      	strb	r2, [r3, #0]
}
 8010ed0:	bf00      	nop
 8010ed2:	370c      	adds	r7, #12
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eda:	4770      	bx	lr

08010edc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010edc:	b480      	push	{r7}
 8010ede:	b083      	sub	sp, #12
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
 8010ee4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	1c5a      	adds	r2, r3, #1
 8010eea:	607a      	str	r2, [r7, #4]
 8010eec:	683a      	ldr	r2, [r7, #0]
 8010eee:	b2d2      	uxtb	r2, r2
 8010ef0:	701a      	strb	r2, [r3, #0]
 8010ef2:	683b      	ldr	r3, [r7, #0]
 8010ef4:	0a1b      	lsrs	r3, r3, #8
 8010ef6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	1c5a      	adds	r2, r3, #1
 8010efc:	607a      	str	r2, [r7, #4]
 8010efe:	683a      	ldr	r2, [r7, #0]
 8010f00:	b2d2      	uxtb	r2, r2
 8010f02:	701a      	strb	r2, [r3, #0]
 8010f04:	683b      	ldr	r3, [r7, #0]
 8010f06:	0a1b      	lsrs	r3, r3, #8
 8010f08:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	1c5a      	adds	r2, r3, #1
 8010f0e:	607a      	str	r2, [r7, #4]
 8010f10:	683a      	ldr	r2, [r7, #0]
 8010f12:	b2d2      	uxtb	r2, r2
 8010f14:	701a      	strb	r2, [r3, #0]
 8010f16:	683b      	ldr	r3, [r7, #0]
 8010f18:	0a1b      	lsrs	r3, r3, #8
 8010f1a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	1c5a      	adds	r2, r3, #1
 8010f20:	607a      	str	r2, [r7, #4]
 8010f22:	683a      	ldr	r2, [r7, #0]
 8010f24:	b2d2      	uxtb	r2, r2
 8010f26:	701a      	strb	r2, [r3, #0]
}
 8010f28:	bf00      	nop
 8010f2a:	370c      	adds	r7, #12
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f32:	4770      	bx	lr

08010f34 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010f34:	b480      	push	{r7}
 8010f36:	b087      	sub	sp, #28
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	60f8      	str	r0, [r7, #12]
 8010f3c:	60b9      	str	r1, [r7, #8]
 8010f3e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010f44:	68bb      	ldr	r3, [r7, #8]
 8010f46:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d00d      	beq.n	8010f6a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010f4e:	693a      	ldr	r2, [r7, #16]
 8010f50:	1c53      	adds	r3, r2, #1
 8010f52:	613b      	str	r3, [r7, #16]
 8010f54:	697b      	ldr	r3, [r7, #20]
 8010f56:	1c59      	adds	r1, r3, #1
 8010f58:	6179      	str	r1, [r7, #20]
 8010f5a:	7812      	ldrb	r2, [r2, #0]
 8010f5c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	3b01      	subs	r3, #1
 8010f62:	607b      	str	r3, [r7, #4]
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d1f1      	bne.n	8010f4e <mem_cpy+0x1a>
	}
}
 8010f6a:	bf00      	nop
 8010f6c:	371c      	adds	r7, #28
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f74:	4770      	bx	lr

08010f76 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010f76:	b480      	push	{r7}
 8010f78:	b087      	sub	sp, #28
 8010f7a:	af00      	add	r7, sp, #0
 8010f7c:	60f8      	str	r0, [r7, #12]
 8010f7e:	60b9      	str	r1, [r7, #8]
 8010f80:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010f86:	697b      	ldr	r3, [r7, #20]
 8010f88:	1c5a      	adds	r2, r3, #1
 8010f8a:	617a      	str	r2, [r7, #20]
 8010f8c:	68ba      	ldr	r2, [r7, #8]
 8010f8e:	b2d2      	uxtb	r2, r2
 8010f90:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	3b01      	subs	r3, #1
 8010f96:	607b      	str	r3, [r7, #4]
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d1f3      	bne.n	8010f86 <mem_set+0x10>
}
 8010f9e:	bf00      	nop
 8010fa0:	bf00      	nop
 8010fa2:	371c      	adds	r7, #28
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010faa:	4770      	bx	lr

08010fac <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010fac:	b480      	push	{r7}
 8010fae:	b089      	sub	sp, #36	; 0x24
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	60f8      	str	r0, [r7, #12]
 8010fb4:	60b9      	str	r1, [r7, #8]
 8010fb6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	61fb      	str	r3, [r7, #28]
 8010fbc:	68bb      	ldr	r3, [r7, #8]
 8010fbe:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010fc4:	69fb      	ldr	r3, [r7, #28]
 8010fc6:	1c5a      	adds	r2, r3, #1
 8010fc8:	61fa      	str	r2, [r7, #28]
 8010fca:	781b      	ldrb	r3, [r3, #0]
 8010fcc:	4619      	mov	r1, r3
 8010fce:	69bb      	ldr	r3, [r7, #24]
 8010fd0:	1c5a      	adds	r2, r3, #1
 8010fd2:	61ba      	str	r2, [r7, #24]
 8010fd4:	781b      	ldrb	r3, [r3, #0]
 8010fd6:	1acb      	subs	r3, r1, r3
 8010fd8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	3b01      	subs	r3, #1
 8010fde:	607b      	str	r3, [r7, #4]
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d002      	beq.n	8010fec <mem_cmp+0x40>
 8010fe6:	697b      	ldr	r3, [r7, #20]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d0eb      	beq.n	8010fc4 <mem_cmp+0x18>

	return r;
 8010fec:	697b      	ldr	r3, [r7, #20]
}
 8010fee:	4618      	mov	r0, r3
 8010ff0:	3724      	adds	r7, #36	; 0x24
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff8:	4770      	bx	lr

08010ffa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010ffa:	b480      	push	{r7}
 8010ffc:	b083      	sub	sp, #12
 8010ffe:	af00      	add	r7, sp, #0
 8011000:	6078      	str	r0, [r7, #4]
 8011002:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011004:	e002      	b.n	801100c <chk_chr+0x12>
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	3301      	adds	r3, #1
 801100a:	607b      	str	r3, [r7, #4]
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	781b      	ldrb	r3, [r3, #0]
 8011010:	2b00      	cmp	r3, #0
 8011012:	d005      	beq.n	8011020 <chk_chr+0x26>
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	781b      	ldrb	r3, [r3, #0]
 8011018:	461a      	mov	r2, r3
 801101a:	683b      	ldr	r3, [r7, #0]
 801101c:	4293      	cmp	r3, r2
 801101e:	d1f2      	bne.n	8011006 <chk_chr+0xc>
	return *str;
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	781b      	ldrb	r3, [r3, #0]
}
 8011024:	4618      	mov	r0, r3
 8011026:	370c      	adds	r7, #12
 8011028:	46bd      	mov	sp, r7
 801102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102e:	4770      	bx	lr

08011030 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8011030:	b580      	push	{r7, lr}
 8011032:	b082      	sub	sp, #8
 8011034:	af00      	add	r7, sp, #0
 8011036:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d009      	beq.n	8011052 <lock_fs+0x22>
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	68db      	ldr	r3, [r3, #12]
 8011042:	4618      	mov	r0, r3
 8011044:	f003 f8eb 	bl	801421e <ff_req_grant>
 8011048:	4603      	mov	r3, r0
 801104a:	2b00      	cmp	r3, #0
 801104c:	d001      	beq.n	8011052 <lock_fs+0x22>
 801104e:	2301      	movs	r3, #1
 8011050:	e000      	b.n	8011054 <lock_fs+0x24>
 8011052:	2300      	movs	r3, #0
}
 8011054:	4618      	mov	r0, r3
 8011056:	3708      	adds	r7, #8
 8011058:	46bd      	mov	sp, r7
 801105a:	bd80      	pop	{r7, pc}

0801105c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 801105c:	b580      	push	{r7, lr}
 801105e:	b082      	sub	sp, #8
 8011060:	af00      	add	r7, sp, #0
 8011062:	6078      	str	r0, [r7, #4]
 8011064:	460b      	mov	r3, r1
 8011066:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d00d      	beq.n	801108a <unlock_fs+0x2e>
 801106e:	78fb      	ldrb	r3, [r7, #3]
 8011070:	2b0c      	cmp	r3, #12
 8011072:	d00a      	beq.n	801108a <unlock_fs+0x2e>
 8011074:	78fb      	ldrb	r3, [r7, #3]
 8011076:	2b0b      	cmp	r3, #11
 8011078:	d007      	beq.n	801108a <unlock_fs+0x2e>
 801107a:	78fb      	ldrb	r3, [r7, #3]
 801107c:	2b0f      	cmp	r3, #15
 801107e:	d004      	beq.n	801108a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	68db      	ldr	r3, [r3, #12]
 8011084:	4618      	mov	r0, r3
 8011086:	f003 f8df 	bl	8014248 <ff_rel_grant>
	}
}
 801108a:	bf00      	nop
 801108c:	3708      	adds	r7, #8
 801108e:	46bd      	mov	sp, r7
 8011090:	bd80      	pop	{r7, pc}
	...

08011094 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011094:	b480      	push	{r7}
 8011096:	b085      	sub	sp, #20
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
 801109c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801109e:	2300      	movs	r3, #0
 80110a0:	60bb      	str	r3, [r7, #8]
 80110a2:	68bb      	ldr	r3, [r7, #8]
 80110a4:	60fb      	str	r3, [r7, #12]
 80110a6:	e029      	b.n	80110fc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80110a8:	4a27      	ldr	r2, [pc, #156]	; (8011148 <chk_lock+0xb4>)
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	011b      	lsls	r3, r3, #4
 80110ae:	4413      	add	r3, r2
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d01d      	beq.n	80110f2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80110b6:	4a24      	ldr	r2, [pc, #144]	; (8011148 <chk_lock+0xb4>)
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	011b      	lsls	r3, r3, #4
 80110bc:	4413      	add	r3, r2
 80110be:	681a      	ldr	r2, [r3, #0]
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	429a      	cmp	r2, r3
 80110c6:	d116      	bne.n	80110f6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80110c8:	4a1f      	ldr	r2, [pc, #124]	; (8011148 <chk_lock+0xb4>)
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	011b      	lsls	r3, r3, #4
 80110ce:	4413      	add	r3, r2
 80110d0:	3304      	adds	r3, #4
 80110d2:	681a      	ldr	r2, [r3, #0]
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80110d8:	429a      	cmp	r2, r3
 80110da:	d10c      	bne.n	80110f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80110dc:	4a1a      	ldr	r2, [pc, #104]	; (8011148 <chk_lock+0xb4>)
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	011b      	lsls	r3, r3, #4
 80110e2:	4413      	add	r3, r2
 80110e4:	3308      	adds	r3, #8
 80110e6:	681a      	ldr	r2, [r3, #0]
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80110ec:	429a      	cmp	r2, r3
 80110ee:	d102      	bne.n	80110f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80110f0:	e007      	b.n	8011102 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80110f2:	2301      	movs	r3, #1
 80110f4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	3301      	adds	r3, #1
 80110fa:	60fb      	str	r3, [r7, #12]
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	2b01      	cmp	r3, #1
 8011100:	d9d2      	bls.n	80110a8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	2b02      	cmp	r3, #2
 8011106:	d109      	bne.n	801111c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011108:	68bb      	ldr	r3, [r7, #8]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d102      	bne.n	8011114 <chk_lock+0x80>
 801110e:	683b      	ldr	r3, [r7, #0]
 8011110:	2b02      	cmp	r3, #2
 8011112:	d101      	bne.n	8011118 <chk_lock+0x84>
 8011114:	2300      	movs	r3, #0
 8011116:	e010      	b.n	801113a <chk_lock+0xa6>
 8011118:	2312      	movs	r3, #18
 801111a:	e00e      	b.n	801113a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801111c:	683b      	ldr	r3, [r7, #0]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d108      	bne.n	8011134 <chk_lock+0xa0>
 8011122:	4a09      	ldr	r2, [pc, #36]	; (8011148 <chk_lock+0xb4>)
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	011b      	lsls	r3, r3, #4
 8011128:	4413      	add	r3, r2
 801112a:	330c      	adds	r3, #12
 801112c:	881b      	ldrh	r3, [r3, #0]
 801112e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011132:	d101      	bne.n	8011138 <chk_lock+0xa4>
 8011134:	2310      	movs	r3, #16
 8011136:	e000      	b.n	801113a <chk_lock+0xa6>
 8011138:	2300      	movs	r3, #0
}
 801113a:	4618      	mov	r0, r3
 801113c:	3714      	adds	r7, #20
 801113e:	46bd      	mov	sp, r7
 8011140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011144:	4770      	bx	lr
 8011146:	bf00      	nop
 8011148:	20003224 	.word	0x20003224

0801114c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801114c:	b480      	push	{r7}
 801114e:	b083      	sub	sp, #12
 8011150:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011152:	2300      	movs	r3, #0
 8011154:	607b      	str	r3, [r7, #4]
 8011156:	e002      	b.n	801115e <enq_lock+0x12>
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	3301      	adds	r3, #1
 801115c:	607b      	str	r3, [r7, #4]
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	2b01      	cmp	r3, #1
 8011162:	d806      	bhi.n	8011172 <enq_lock+0x26>
 8011164:	4a09      	ldr	r2, [pc, #36]	; (801118c <enq_lock+0x40>)
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	011b      	lsls	r3, r3, #4
 801116a:	4413      	add	r3, r2
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d1f2      	bne.n	8011158 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	2b02      	cmp	r3, #2
 8011176:	bf14      	ite	ne
 8011178:	2301      	movne	r3, #1
 801117a:	2300      	moveq	r3, #0
 801117c:	b2db      	uxtb	r3, r3
}
 801117e:	4618      	mov	r0, r3
 8011180:	370c      	adds	r7, #12
 8011182:	46bd      	mov	sp, r7
 8011184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011188:	4770      	bx	lr
 801118a:	bf00      	nop
 801118c:	20003224 	.word	0x20003224

08011190 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011190:	b480      	push	{r7}
 8011192:	b085      	sub	sp, #20
 8011194:	af00      	add	r7, sp, #0
 8011196:	6078      	str	r0, [r7, #4]
 8011198:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801119a:	2300      	movs	r3, #0
 801119c:	60fb      	str	r3, [r7, #12]
 801119e:	e01f      	b.n	80111e0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80111a0:	4a41      	ldr	r2, [pc, #260]	; (80112a8 <inc_lock+0x118>)
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	011b      	lsls	r3, r3, #4
 80111a6:	4413      	add	r3, r2
 80111a8:	681a      	ldr	r2, [r3, #0]
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	429a      	cmp	r2, r3
 80111b0:	d113      	bne.n	80111da <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80111b2:	4a3d      	ldr	r2, [pc, #244]	; (80112a8 <inc_lock+0x118>)
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	011b      	lsls	r3, r3, #4
 80111b8:	4413      	add	r3, r2
 80111ba:	3304      	adds	r3, #4
 80111bc:	681a      	ldr	r2, [r3, #0]
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80111c2:	429a      	cmp	r2, r3
 80111c4:	d109      	bne.n	80111da <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80111c6:	4a38      	ldr	r2, [pc, #224]	; (80112a8 <inc_lock+0x118>)
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	011b      	lsls	r3, r3, #4
 80111cc:	4413      	add	r3, r2
 80111ce:	3308      	adds	r3, #8
 80111d0:	681a      	ldr	r2, [r3, #0]
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80111d6:	429a      	cmp	r2, r3
 80111d8:	d006      	beq.n	80111e8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	3301      	adds	r3, #1
 80111de:	60fb      	str	r3, [r7, #12]
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	2b01      	cmp	r3, #1
 80111e4:	d9dc      	bls.n	80111a0 <inc_lock+0x10>
 80111e6:	e000      	b.n	80111ea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80111e8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	2b02      	cmp	r3, #2
 80111ee:	d132      	bne.n	8011256 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80111f0:	2300      	movs	r3, #0
 80111f2:	60fb      	str	r3, [r7, #12]
 80111f4:	e002      	b.n	80111fc <inc_lock+0x6c>
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	3301      	adds	r3, #1
 80111fa:	60fb      	str	r3, [r7, #12]
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	2b01      	cmp	r3, #1
 8011200:	d806      	bhi.n	8011210 <inc_lock+0x80>
 8011202:	4a29      	ldr	r2, [pc, #164]	; (80112a8 <inc_lock+0x118>)
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	011b      	lsls	r3, r3, #4
 8011208:	4413      	add	r3, r2
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d1f2      	bne.n	80111f6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	2b02      	cmp	r3, #2
 8011214:	d101      	bne.n	801121a <inc_lock+0x8a>
 8011216:	2300      	movs	r3, #0
 8011218:	e040      	b.n	801129c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	681a      	ldr	r2, [r3, #0]
 801121e:	4922      	ldr	r1, [pc, #136]	; (80112a8 <inc_lock+0x118>)
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	011b      	lsls	r3, r3, #4
 8011224:	440b      	add	r3, r1
 8011226:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	689a      	ldr	r2, [r3, #8]
 801122c:	491e      	ldr	r1, [pc, #120]	; (80112a8 <inc_lock+0x118>)
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	011b      	lsls	r3, r3, #4
 8011232:	440b      	add	r3, r1
 8011234:	3304      	adds	r3, #4
 8011236:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	695a      	ldr	r2, [r3, #20]
 801123c:	491a      	ldr	r1, [pc, #104]	; (80112a8 <inc_lock+0x118>)
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	011b      	lsls	r3, r3, #4
 8011242:	440b      	add	r3, r1
 8011244:	3308      	adds	r3, #8
 8011246:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011248:	4a17      	ldr	r2, [pc, #92]	; (80112a8 <inc_lock+0x118>)
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	011b      	lsls	r3, r3, #4
 801124e:	4413      	add	r3, r2
 8011250:	330c      	adds	r3, #12
 8011252:	2200      	movs	r2, #0
 8011254:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011256:	683b      	ldr	r3, [r7, #0]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d009      	beq.n	8011270 <inc_lock+0xe0>
 801125c:	4a12      	ldr	r2, [pc, #72]	; (80112a8 <inc_lock+0x118>)
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	011b      	lsls	r3, r3, #4
 8011262:	4413      	add	r3, r2
 8011264:	330c      	adds	r3, #12
 8011266:	881b      	ldrh	r3, [r3, #0]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d001      	beq.n	8011270 <inc_lock+0xe0>
 801126c:	2300      	movs	r3, #0
 801126e:	e015      	b.n	801129c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011270:	683b      	ldr	r3, [r7, #0]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d108      	bne.n	8011288 <inc_lock+0xf8>
 8011276:	4a0c      	ldr	r2, [pc, #48]	; (80112a8 <inc_lock+0x118>)
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	011b      	lsls	r3, r3, #4
 801127c:	4413      	add	r3, r2
 801127e:	330c      	adds	r3, #12
 8011280:	881b      	ldrh	r3, [r3, #0]
 8011282:	3301      	adds	r3, #1
 8011284:	b29a      	uxth	r2, r3
 8011286:	e001      	b.n	801128c <inc_lock+0xfc>
 8011288:	f44f 7280 	mov.w	r2, #256	; 0x100
 801128c:	4906      	ldr	r1, [pc, #24]	; (80112a8 <inc_lock+0x118>)
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	011b      	lsls	r3, r3, #4
 8011292:	440b      	add	r3, r1
 8011294:	330c      	adds	r3, #12
 8011296:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	3301      	adds	r3, #1
}
 801129c:	4618      	mov	r0, r3
 801129e:	3714      	adds	r7, #20
 80112a0:	46bd      	mov	sp, r7
 80112a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a6:	4770      	bx	lr
 80112a8:	20003224 	.word	0x20003224

080112ac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80112ac:	b480      	push	{r7}
 80112ae:	b085      	sub	sp, #20
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	3b01      	subs	r3, #1
 80112b8:	607b      	str	r3, [r7, #4]
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	2b01      	cmp	r3, #1
 80112be:	d825      	bhi.n	801130c <dec_lock+0x60>
		n = Files[i].ctr;
 80112c0:	4a17      	ldr	r2, [pc, #92]	; (8011320 <dec_lock+0x74>)
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	011b      	lsls	r3, r3, #4
 80112c6:	4413      	add	r3, r2
 80112c8:	330c      	adds	r3, #12
 80112ca:	881b      	ldrh	r3, [r3, #0]
 80112cc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80112ce:	89fb      	ldrh	r3, [r7, #14]
 80112d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80112d4:	d101      	bne.n	80112da <dec_lock+0x2e>
 80112d6:	2300      	movs	r3, #0
 80112d8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80112da:	89fb      	ldrh	r3, [r7, #14]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d002      	beq.n	80112e6 <dec_lock+0x3a>
 80112e0:	89fb      	ldrh	r3, [r7, #14]
 80112e2:	3b01      	subs	r3, #1
 80112e4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80112e6:	4a0e      	ldr	r2, [pc, #56]	; (8011320 <dec_lock+0x74>)
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	011b      	lsls	r3, r3, #4
 80112ec:	4413      	add	r3, r2
 80112ee:	330c      	adds	r3, #12
 80112f0:	89fa      	ldrh	r2, [r7, #14]
 80112f2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80112f4:	89fb      	ldrh	r3, [r7, #14]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d105      	bne.n	8011306 <dec_lock+0x5a>
 80112fa:	4a09      	ldr	r2, [pc, #36]	; (8011320 <dec_lock+0x74>)
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	011b      	lsls	r3, r3, #4
 8011300:	4413      	add	r3, r2
 8011302:	2200      	movs	r2, #0
 8011304:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011306:	2300      	movs	r3, #0
 8011308:	737b      	strb	r3, [r7, #13]
 801130a:	e001      	b.n	8011310 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801130c:	2302      	movs	r3, #2
 801130e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011310:	7b7b      	ldrb	r3, [r7, #13]
}
 8011312:	4618      	mov	r0, r3
 8011314:	3714      	adds	r7, #20
 8011316:	46bd      	mov	sp, r7
 8011318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131c:	4770      	bx	lr
 801131e:	bf00      	nop
 8011320:	20003224 	.word	0x20003224

08011324 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011324:	b480      	push	{r7}
 8011326:	b085      	sub	sp, #20
 8011328:	af00      	add	r7, sp, #0
 801132a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801132c:	2300      	movs	r3, #0
 801132e:	60fb      	str	r3, [r7, #12]
 8011330:	e010      	b.n	8011354 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011332:	4a0d      	ldr	r2, [pc, #52]	; (8011368 <clear_lock+0x44>)
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	011b      	lsls	r3, r3, #4
 8011338:	4413      	add	r3, r2
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	687a      	ldr	r2, [r7, #4]
 801133e:	429a      	cmp	r2, r3
 8011340:	d105      	bne.n	801134e <clear_lock+0x2a>
 8011342:	4a09      	ldr	r2, [pc, #36]	; (8011368 <clear_lock+0x44>)
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	011b      	lsls	r3, r3, #4
 8011348:	4413      	add	r3, r2
 801134a:	2200      	movs	r2, #0
 801134c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	3301      	adds	r3, #1
 8011352:	60fb      	str	r3, [r7, #12]
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	2b01      	cmp	r3, #1
 8011358:	d9eb      	bls.n	8011332 <clear_lock+0xe>
	}
}
 801135a:	bf00      	nop
 801135c:	bf00      	nop
 801135e:	3714      	adds	r7, #20
 8011360:	46bd      	mov	sp, r7
 8011362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011366:	4770      	bx	lr
 8011368:	20003224 	.word	0x20003224

0801136c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b086      	sub	sp, #24
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011374:	2300      	movs	r3, #0
 8011376:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	78db      	ldrb	r3, [r3, #3]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d034      	beq.n	80113ea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011384:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	7858      	ldrb	r0, [r3, #1]
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011390:	2301      	movs	r3, #1
 8011392:	697a      	ldr	r2, [r7, #20]
 8011394:	f7ff fd0e 	bl	8010db4 <disk_write>
 8011398:	4603      	mov	r3, r0
 801139a:	2b00      	cmp	r3, #0
 801139c:	d002      	beq.n	80113a4 <sync_window+0x38>
			res = FR_DISK_ERR;
 801139e:	2301      	movs	r3, #1
 80113a0:	73fb      	strb	r3, [r7, #15]
 80113a2:	e022      	b.n	80113ea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	2200      	movs	r2, #0
 80113a8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113ae:	697a      	ldr	r2, [r7, #20]
 80113b0:	1ad2      	subs	r2, r2, r3
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	69db      	ldr	r3, [r3, #28]
 80113b6:	429a      	cmp	r2, r3
 80113b8:	d217      	bcs.n	80113ea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	789b      	ldrb	r3, [r3, #2]
 80113be:	613b      	str	r3, [r7, #16]
 80113c0:	e010      	b.n	80113e4 <sync_window+0x78>
					wsect += fs->fsize;
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	69db      	ldr	r3, [r3, #28]
 80113c6:	697a      	ldr	r2, [r7, #20]
 80113c8:	4413      	add	r3, r2
 80113ca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	7858      	ldrb	r0, [r3, #1]
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80113d6:	2301      	movs	r3, #1
 80113d8:	697a      	ldr	r2, [r7, #20]
 80113da:	f7ff fceb 	bl	8010db4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80113de:	693b      	ldr	r3, [r7, #16]
 80113e0:	3b01      	subs	r3, #1
 80113e2:	613b      	str	r3, [r7, #16]
 80113e4:	693b      	ldr	r3, [r7, #16]
 80113e6:	2b01      	cmp	r3, #1
 80113e8:	d8eb      	bhi.n	80113c2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80113ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80113ec:	4618      	mov	r0, r3
 80113ee:	3718      	adds	r7, #24
 80113f0:	46bd      	mov	sp, r7
 80113f2:	bd80      	pop	{r7, pc}

080113f4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b084      	sub	sp, #16
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]
 80113fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80113fe:	2300      	movs	r3, #0
 8011400:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011406:	683a      	ldr	r2, [r7, #0]
 8011408:	429a      	cmp	r2, r3
 801140a:	d01b      	beq.n	8011444 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801140c:	6878      	ldr	r0, [r7, #4]
 801140e:	f7ff ffad 	bl	801136c <sync_window>
 8011412:	4603      	mov	r3, r0
 8011414:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011416:	7bfb      	ldrb	r3, [r7, #15]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d113      	bne.n	8011444 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	7858      	ldrb	r0, [r3, #1]
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011426:	2301      	movs	r3, #1
 8011428:	683a      	ldr	r2, [r7, #0]
 801142a:	f7ff fca3 	bl	8010d74 <disk_read>
 801142e:	4603      	mov	r3, r0
 8011430:	2b00      	cmp	r3, #0
 8011432:	d004      	beq.n	801143e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011434:	f04f 33ff 	mov.w	r3, #4294967295
 8011438:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801143a:	2301      	movs	r3, #1
 801143c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	683a      	ldr	r2, [r7, #0]
 8011442:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8011444:	7bfb      	ldrb	r3, [r7, #15]
}
 8011446:	4618      	mov	r0, r3
 8011448:	3710      	adds	r7, #16
 801144a:	46bd      	mov	sp, r7
 801144c:	bd80      	pop	{r7, pc}
	...

08011450 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011450:	b580      	push	{r7, lr}
 8011452:	b084      	sub	sp, #16
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011458:	6878      	ldr	r0, [r7, #4]
 801145a:	f7ff ff87 	bl	801136c <sync_window>
 801145e:	4603      	mov	r3, r0
 8011460:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011462:	7bfb      	ldrb	r3, [r7, #15]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d158      	bne.n	801151a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	781b      	ldrb	r3, [r3, #0]
 801146c:	2b03      	cmp	r3, #3
 801146e:	d148      	bne.n	8011502 <sync_fs+0xb2>
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	791b      	ldrb	r3, [r3, #4]
 8011474:	2b01      	cmp	r3, #1
 8011476:	d144      	bne.n	8011502 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	3334      	adds	r3, #52	; 0x34
 801147c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011480:	2100      	movs	r1, #0
 8011482:	4618      	mov	r0, r3
 8011484:	f7ff fd77 	bl	8010f76 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	3334      	adds	r3, #52	; 0x34
 801148c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011490:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011494:	4618      	mov	r0, r3
 8011496:	f7ff fd06 	bl	8010ea6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	3334      	adds	r3, #52	; 0x34
 801149e:	4921      	ldr	r1, [pc, #132]	; (8011524 <sync_fs+0xd4>)
 80114a0:	4618      	mov	r0, r3
 80114a2:	f7ff fd1b 	bl	8010edc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	3334      	adds	r3, #52	; 0x34
 80114aa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80114ae:	491e      	ldr	r1, [pc, #120]	; (8011528 <sync_fs+0xd8>)
 80114b0:	4618      	mov	r0, r3
 80114b2:	f7ff fd13 	bl	8010edc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	3334      	adds	r3, #52	; 0x34
 80114ba:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	695b      	ldr	r3, [r3, #20]
 80114c2:	4619      	mov	r1, r3
 80114c4:	4610      	mov	r0, r2
 80114c6:	f7ff fd09 	bl	8010edc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	3334      	adds	r3, #52	; 0x34
 80114ce:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	691b      	ldr	r3, [r3, #16]
 80114d6:	4619      	mov	r1, r3
 80114d8:	4610      	mov	r0, r2
 80114da:	f7ff fcff 	bl	8010edc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	6a1b      	ldr	r3, [r3, #32]
 80114e2:	1c5a      	adds	r2, r3, #1
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	7858      	ldrb	r0, [r3, #1]
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80114f6:	2301      	movs	r3, #1
 80114f8:	f7ff fc5c 	bl	8010db4 <disk_write>
			fs->fsi_flag = 0;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	2200      	movs	r2, #0
 8011500:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	785b      	ldrb	r3, [r3, #1]
 8011506:	2200      	movs	r2, #0
 8011508:	2100      	movs	r1, #0
 801150a:	4618      	mov	r0, r3
 801150c:	f7ff fc72 	bl	8010df4 <disk_ioctl>
 8011510:	4603      	mov	r3, r0
 8011512:	2b00      	cmp	r3, #0
 8011514:	d001      	beq.n	801151a <sync_fs+0xca>
 8011516:	2301      	movs	r3, #1
 8011518:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801151a:	7bfb      	ldrb	r3, [r7, #15]
}
 801151c:	4618      	mov	r0, r3
 801151e:	3710      	adds	r7, #16
 8011520:	46bd      	mov	sp, r7
 8011522:	bd80      	pop	{r7, pc}
 8011524:	41615252 	.word	0x41615252
 8011528:	61417272 	.word	0x61417272

0801152c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801152c:	b480      	push	{r7}
 801152e:	b083      	sub	sp, #12
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]
 8011534:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011536:	683b      	ldr	r3, [r7, #0]
 8011538:	3b02      	subs	r3, #2
 801153a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	699b      	ldr	r3, [r3, #24]
 8011540:	3b02      	subs	r3, #2
 8011542:	683a      	ldr	r2, [r7, #0]
 8011544:	429a      	cmp	r2, r3
 8011546:	d301      	bcc.n	801154c <clust2sect+0x20>
 8011548:	2300      	movs	r3, #0
 801154a:	e008      	b.n	801155e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	895b      	ldrh	r3, [r3, #10]
 8011550:	461a      	mov	r2, r3
 8011552:	683b      	ldr	r3, [r7, #0]
 8011554:	fb03 f202 	mul.w	r2, r3, r2
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801155c:	4413      	add	r3, r2
}
 801155e:	4618      	mov	r0, r3
 8011560:	370c      	adds	r7, #12
 8011562:	46bd      	mov	sp, r7
 8011564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011568:	4770      	bx	lr

0801156a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801156a:	b580      	push	{r7, lr}
 801156c:	b086      	sub	sp, #24
 801156e:	af00      	add	r7, sp, #0
 8011570:	6078      	str	r0, [r7, #4]
 8011572:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	2b01      	cmp	r3, #1
 801157e:	d904      	bls.n	801158a <get_fat+0x20>
 8011580:	693b      	ldr	r3, [r7, #16]
 8011582:	699b      	ldr	r3, [r3, #24]
 8011584:	683a      	ldr	r2, [r7, #0]
 8011586:	429a      	cmp	r2, r3
 8011588:	d302      	bcc.n	8011590 <get_fat+0x26>
		val = 1;	/* Internal error */
 801158a:	2301      	movs	r3, #1
 801158c:	617b      	str	r3, [r7, #20]
 801158e:	e08f      	b.n	80116b0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011590:	f04f 33ff 	mov.w	r3, #4294967295
 8011594:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011596:	693b      	ldr	r3, [r7, #16]
 8011598:	781b      	ldrb	r3, [r3, #0]
 801159a:	2b03      	cmp	r3, #3
 801159c:	d062      	beq.n	8011664 <get_fat+0xfa>
 801159e:	2b03      	cmp	r3, #3
 80115a0:	dc7c      	bgt.n	801169c <get_fat+0x132>
 80115a2:	2b01      	cmp	r3, #1
 80115a4:	d002      	beq.n	80115ac <get_fat+0x42>
 80115a6:	2b02      	cmp	r3, #2
 80115a8:	d042      	beq.n	8011630 <get_fat+0xc6>
 80115aa:	e077      	b.n	801169c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80115ac:	683b      	ldr	r3, [r7, #0]
 80115ae:	60fb      	str	r3, [r7, #12]
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	085b      	lsrs	r3, r3, #1
 80115b4:	68fa      	ldr	r2, [r7, #12]
 80115b6:	4413      	add	r3, r2
 80115b8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80115ba:	693b      	ldr	r3, [r7, #16]
 80115bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	0a5b      	lsrs	r3, r3, #9
 80115c2:	4413      	add	r3, r2
 80115c4:	4619      	mov	r1, r3
 80115c6:	6938      	ldr	r0, [r7, #16]
 80115c8:	f7ff ff14 	bl	80113f4 <move_window>
 80115cc:	4603      	mov	r3, r0
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d167      	bne.n	80116a2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	1c5a      	adds	r2, r3, #1
 80115d6:	60fa      	str	r2, [r7, #12]
 80115d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80115dc:	693a      	ldr	r2, [r7, #16]
 80115de:	4413      	add	r3, r2
 80115e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80115e4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80115e6:	693b      	ldr	r3, [r7, #16]
 80115e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	0a5b      	lsrs	r3, r3, #9
 80115ee:	4413      	add	r3, r2
 80115f0:	4619      	mov	r1, r3
 80115f2:	6938      	ldr	r0, [r7, #16]
 80115f4:	f7ff fefe 	bl	80113f4 <move_window>
 80115f8:	4603      	mov	r3, r0
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d153      	bne.n	80116a6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011604:	693a      	ldr	r2, [r7, #16]
 8011606:	4413      	add	r3, r2
 8011608:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801160c:	021b      	lsls	r3, r3, #8
 801160e:	461a      	mov	r2, r3
 8011610:	68bb      	ldr	r3, [r7, #8]
 8011612:	4313      	orrs	r3, r2
 8011614:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011616:	683b      	ldr	r3, [r7, #0]
 8011618:	f003 0301 	and.w	r3, r3, #1
 801161c:	2b00      	cmp	r3, #0
 801161e:	d002      	beq.n	8011626 <get_fat+0xbc>
 8011620:	68bb      	ldr	r3, [r7, #8]
 8011622:	091b      	lsrs	r3, r3, #4
 8011624:	e002      	b.n	801162c <get_fat+0xc2>
 8011626:	68bb      	ldr	r3, [r7, #8]
 8011628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801162c:	617b      	str	r3, [r7, #20]
			break;
 801162e:	e03f      	b.n	80116b0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011630:	693b      	ldr	r3, [r7, #16]
 8011632:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011634:	683b      	ldr	r3, [r7, #0]
 8011636:	0a1b      	lsrs	r3, r3, #8
 8011638:	4413      	add	r3, r2
 801163a:	4619      	mov	r1, r3
 801163c:	6938      	ldr	r0, [r7, #16]
 801163e:	f7ff fed9 	bl	80113f4 <move_window>
 8011642:	4603      	mov	r3, r0
 8011644:	2b00      	cmp	r3, #0
 8011646:	d130      	bne.n	80116aa <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011648:	693b      	ldr	r3, [r7, #16]
 801164a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801164e:	683b      	ldr	r3, [r7, #0]
 8011650:	005b      	lsls	r3, r3, #1
 8011652:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8011656:	4413      	add	r3, r2
 8011658:	4618      	mov	r0, r3
 801165a:	f7ff fbe9 	bl	8010e30 <ld_word>
 801165e:	4603      	mov	r3, r0
 8011660:	617b      	str	r3, [r7, #20]
			break;
 8011662:	e025      	b.n	80116b0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011664:	693b      	ldr	r3, [r7, #16]
 8011666:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011668:	683b      	ldr	r3, [r7, #0]
 801166a:	09db      	lsrs	r3, r3, #7
 801166c:	4413      	add	r3, r2
 801166e:	4619      	mov	r1, r3
 8011670:	6938      	ldr	r0, [r7, #16]
 8011672:	f7ff febf 	bl	80113f4 <move_window>
 8011676:	4603      	mov	r3, r0
 8011678:	2b00      	cmp	r3, #0
 801167a:	d118      	bne.n	80116ae <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801167c:	693b      	ldr	r3, [r7, #16]
 801167e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011682:	683b      	ldr	r3, [r7, #0]
 8011684:	009b      	lsls	r3, r3, #2
 8011686:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801168a:	4413      	add	r3, r2
 801168c:	4618      	mov	r0, r3
 801168e:	f7ff fbe7 	bl	8010e60 <ld_dword>
 8011692:	4603      	mov	r3, r0
 8011694:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011698:	617b      	str	r3, [r7, #20]
			break;
 801169a:	e009      	b.n	80116b0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801169c:	2301      	movs	r3, #1
 801169e:	617b      	str	r3, [r7, #20]
 80116a0:	e006      	b.n	80116b0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80116a2:	bf00      	nop
 80116a4:	e004      	b.n	80116b0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80116a6:	bf00      	nop
 80116a8:	e002      	b.n	80116b0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80116aa:	bf00      	nop
 80116ac:	e000      	b.n	80116b0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80116ae:	bf00      	nop
		}
	}

	return val;
 80116b0:	697b      	ldr	r3, [r7, #20]
}
 80116b2:	4618      	mov	r0, r3
 80116b4:	3718      	adds	r7, #24
 80116b6:	46bd      	mov	sp, r7
 80116b8:	bd80      	pop	{r7, pc}

080116ba <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80116ba:	b590      	push	{r4, r7, lr}
 80116bc:	b089      	sub	sp, #36	; 0x24
 80116be:	af00      	add	r7, sp, #0
 80116c0:	60f8      	str	r0, [r7, #12]
 80116c2:	60b9      	str	r1, [r7, #8]
 80116c4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80116c6:	2302      	movs	r3, #2
 80116c8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80116ca:	68bb      	ldr	r3, [r7, #8]
 80116cc:	2b01      	cmp	r3, #1
 80116ce:	f240 80d9 	bls.w	8011884 <put_fat+0x1ca>
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	699b      	ldr	r3, [r3, #24]
 80116d6:	68ba      	ldr	r2, [r7, #8]
 80116d8:	429a      	cmp	r2, r3
 80116da:	f080 80d3 	bcs.w	8011884 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	781b      	ldrb	r3, [r3, #0]
 80116e2:	2b03      	cmp	r3, #3
 80116e4:	f000 8096 	beq.w	8011814 <put_fat+0x15a>
 80116e8:	2b03      	cmp	r3, #3
 80116ea:	f300 80cb 	bgt.w	8011884 <put_fat+0x1ca>
 80116ee:	2b01      	cmp	r3, #1
 80116f0:	d002      	beq.n	80116f8 <put_fat+0x3e>
 80116f2:	2b02      	cmp	r3, #2
 80116f4:	d06e      	beq.n	80117d4 <put_fat+0x11a>
 80116f6:	e0c5      	b.n	8011884 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80116f8:	68bb      	ldr	r3, [r7, #8]
 80116fa:	61bb      	str	r3, [r7, #24]
 80116fc:	69bb      	ldr	r3, [r7, #24]
 80116fe:	085b      	lsrs	r3, r3, #1
 8011700:	69ba      	ldr	r2, [r7, #24]
 8011702:	4413      	add	r3, r2
 8011704:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801170a:	69bb      	ldr	r3, [r7, #24]
 801170c:	0a5b      	lsrs	r3, r3, #9
 801170e:	4413      	add	r3, r2
 8011710:	4619      	mov	r1, r3
 8011712:	68f8      	ldr	r0, [r7, #12]
 8011714:	f7ff fe6e 	bl	80113f4 <move_window>
 8011718:	4603      	mov	r3, r0
 801171a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801171c:	7ffb      	ldrb	r3, [r7, #31]
 801171e:	2b00      	cmp	r3, #0
 8011720:	f040 80a9 	bne.w	8011876 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801172a:	69bb      	ldr	r3, [r7, #24]
 801172c:	1c59      	adds	r1, r3, #1
 801172e:	61b9      	str	r1, [r7, #24]
 8011730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011734:	4413      	add	r3, r2
 8011736:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011738:	68bb      	ldr	r3, [r7, #8]
 801173a:	f003 0301 	and.w	r3, r3, #1
 801173e:	2b00      	cmp	r3, #0
 8011740:	d00d      	beq.n	801175e <put_fat+0xa4>
 8011742:	697b      	ldr	r3, [r7, #20]
 8011744:	781b      	ldrb	r3, [r3, #0]
 8011746:	b25b      	sxtb	r3, r3
 8011748:	f003 030f 	and.w	r3, r3, #15
 801174c:	b25a      	sxtb	r2, r3
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	b2db      	uxtb	r3, r3
 8011752:	011b      	lsls	r3, r3, #4
 8011754:	b25b      	sxtb	r3, r3
 8011756:	4313      	orrs	r3, r2
 8011758:	b25b      	sxtb	r3, r3
 801175a:	b2db      	uxtb	r3, r3
 801175c:	e001      	b.n	8011762 <put_fat+0xa8>
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	b2db      	uxtb	r3, r3
 8011762:	697a      	ldr	r2, [r7, #20]
 8011764:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	2201      	movs	r2, #1
 801176a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011770:	69bb      	ldr	r3, [r7, #24]
 8011772:	0a5b      	lsrs	r3, r3, #9
 8011774:	4413      	add	r3, r2
 8011776:	4619      	mov	r1, r3
 8011778:	68f8      	ldr	r0, [r7, #12]
 801177a:	f7ff fe3b 	bl	80113f4 <move_window>
 801177e:	4603      	mov	r3, r0
 8011780:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011782:	7ffb      	ldrb	r3, [r7, #31]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d178      	bne.n	801187a <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801178e:	69bb      	ldr	r3, [r7, #24]
 8011790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011794:	4413      	add	r3, r2
 8011796:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011798:	68bb      	ldr	r3, [r7, #8]
 801179a:	f003 0301 	and.w	r3, r3, #1
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d003      	beq.n	80117aa <put_fat+0xf0>
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	091b      	lsrs	r3, r3, #4
 80117a6:	b2db      	uxtb	r3, r3
 80117a8:	e00e      	b.n	80117c8 <put_fat+0x10e>
 80117aa:	697b      	ldr	r3, [r7, #20]
 80117ac:	781b      	ldrb	r3, [r3, #0]
 80117ae:	b25b      	sxtb	r3, r3
 80117b0:	f023 030f 	bic.w	r3, r3, #15
 80117b4:	b25a      	sxtb	r2, r3
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	0a1b      	lsrs	r3, r3, #8
 80117ba:	b25b      	sxtb	r3, r3
 80117bc:	f003 030f 	and.w	r3, r3, #15
 80117c0:	b25b      	sxtb	r3, r3
 80117c2:	4313      	orrs	r3, r2
 80117c4:	b25b      	sxtb	r3, r3
 80117c6:	b2db      	uxtb	r3, r3
 80117c8:	697a      	ldr	r2, [r7, #20]
 80117ca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	2201      	movs	r2, #1
 80117d0:	70da      	strb	r2, [r3, #3]
			break;
 80117d2:	e057      	b.n	8011884 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80117d8:	68bb      	ldr	r3, [r7, #8]
 80117da:	0a1b      	lsrs	r3, r3, #8
 80117dc:	4413      	add	r3, r2
 80117de:	4619      	mov	r1, r3
 80117e0:	68f8      	ldr	r0, [r7, #12]
 80117e2:	f7ff fe07 	bl	80113f4 <move_window>
 80117e6:	4603      	mov	r3, r0
 80117e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80117ea:	7ffb      	ldrb	r3, [r7, #31]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d146      	bne.n	801187e <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80117f6:	68bb      	ldr	r3, [r7, #8]
 80117f8:	005b      	lsls	r3, r3, #1
 80117fa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80117fe:	4413      	add	r3, r2
 8011800:	687a      	ldr	r2, [r7, #4]
 8011802:	b292      	uxth	r2, r2
 8011804:	4611      	mov	r1, r2
 8011806:	4618      	mov	r0, r3
 8011808:	f7ff fb4d 	bl	8010ea6 <st_word>
			fs->wflag = 1;
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	2201      	movs	r2, #1
 8011810:	70da      	strb	r2, [r3, #3]
			break;
 8011812:	e037      	b.n	8011884 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011818:	68bb      	ldr	r3, [r7, #8]
 801181a:	09db      	lsrs	r3, r3, #7
 801181c:	4413      	add	r3, r2
 801181e:	4619      	mov	r1, r3
 8011820:	68f8      	ldr	r0, [r7, #12]
 8011822:	f7ff fde7 	bl	80113f4 <move_window>
 8011826:	4603      	mov	r3, r0
 8011828:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801182a:	7ffb      	ldrb	r3, [r7, #31]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d128      	bne.n	8011882 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801183c:	68bb      	ldr	r3, [r7, #8]
 801183e:	009b      	lsls	r3, r3, #2
 8011840:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8011844:	4413      	add	r3, r2
 8011846:	4618      	mov	r0, r3
 8011848:	f7ff fb0a 	bl	8010e60 <ld_dword>
 801184c:	4603      	mov	r3, r0
 801184e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011852:	4323      	orrs	r3, r4
 8011854:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801185c:	68bb      	ldr	r3, [r7, #8]
 801185e:	009b      	lsls	r3, r3, #2
 8011860:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8011864:	4413      	add	r3, r2
 8011866:	6879      	ldr	r1, [r7, #4]
 8011868:	4618      	mov	r0, r3
 801186a:	f7ff fb37 	bl	8010edc <st_dword>
			fs->wflag = 1;
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	2201      	movs	r2, #1
 8011872:	70da      	strb	r2, [r3, #3]
			break;
 8011874:	e006      	b.n	8011884 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011876:	bf00      	nop
 8011878:	e004      	b.n	8011884 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801187a:	bf00      	nop
 801187c:	e002      	b.n	8011884 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801187e:	bf00      	nop
 8011880:	e000      	b.n	8011884 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011882:	bf00      	nop
		}
	}
	return res;
 8011884:	7ffb      	ldrb	r3, [r7, #31]
}
 8011886:	4618      	mov	r0, r3
 8011888:	3724      	adds	r7, #36	; 0x24
 801188a:	46bd      	mov	sp, r7
 801188c:	bd90      	pop	{r4, r7, pc}

0801188e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801188e:	b580      	push	{r7, lr}
 8011890:	b088      	sub	sp, #32
 8011892:	af00      	add	r7, sp, #0
 8011894:	60f8      	str	r0, [r7, #12]
 8011896:	60b9      	str	r1, [r7, #8]
 8011898:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801189a:	2300      	movs	r3, #0
 801189c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80118a4:	68bb      	ldr	r3, [r7, #8]
 80118a6:	2b01      	cmp	r3, #1
 80118a8:	d904      	bls.n	80118b4 <remove_chain+0x26>
 80118aa:	69bb      	ldr	r3, [r7, #24]
 80118ac:	699b      	ldr	r3, [r3, #24]
 80118ae:	68ba      	ldr	r2, [r7, #8]
 80118b0:	429a      	cmp	r2, r3
 80118b2:	d301      	bcc.n	80118b8 <remove_chain+0x2a>
 80118b4:	2302      	movs	r3, #2
 80118b6:	e04b      	b.n	8011950 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d00c      	beq.n	80118d8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80118be:	f04f 32ff 	mov.w	r2, #4294967295
 80118c2:	6879      	ldr	r1, [r7, #4]
 80118c4:	69b8      	ldr	r0, [r7, #24]
 80118c6:	f7ff fef8 	bl	80116ba <put_fat>
 80118ca:	4603      	mov	r3, r0
 80118cc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80118ce:	7ffb      	ldrb	r3, [r7, #31]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d001      	beq.n	80118d8 <remove_chain+0x4a>
 80118d4:	7ffb      	ldrb	r3, [r7, #31]
 80118d6:	e03b      	b.n	8011950 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80118d8:	68b9      	ldr	r1, [r7, #8]
 80118da:	68f8      	ldr	r0, [r7, #12]
 80118dc:	f7ff fe45 	bl	801156a <get_fat>
 80118e0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80118e2:	697b      	ldr	r3, [r7, #20]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d031      	beq.n	801194c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80118e8:	697b      	ldr	r3, [r7, #20]
 80118ea:	2b01      	cmp	r3, #1
 80118ec:	d101      	bne.n	80118f2 <remove_chain+0x64>
 80118ee:	2302      	movs	r3, #2
 80118f0:	e02e      	b.n	8011950 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80118f2:	697b      	ldr	r3, [r7, #20]
 80118f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118f8:	d101      	bne.n	80118fe <remove_chain+0x70>
 80118fa:	2301      	movs	r3, #1
 80118fc:	e028      	b.n	8011950 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80118fe:	2200      	movs	r2, #0
 8011900:	68b9      	ldr	r1, [r7, #8]
 8011902:	69b8      	ldr	r0, [r7, #24]
 8011904:	f7ff fed9 	bl	80116ba <put_fat>
 8011908:	4603      	mov	r3, r0
 801190a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801190c:	7ffb      	ldrb	r3, [r7, #31]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d001      	beq.n	8011916 <remove_chain+0x88>
 8011912:	7ffb      	ldrb	r3, [r7, #31]
 8011914:	e01c      	b.n	8011950 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011916:	69bb      	ldr	r3, [r7, #24]
 8011918:	695a      	ldr	r2, [r3, #20]
 801191a:	69bb      	ldr	r3, [r7, #24]
 801191c:	699b      	ldr	r3, [r3, #24]
 801191e:	3b02      	subs	r3, #2
 8011920:	429a      	cmp	r2, r3
 8011922:	d20b      	bcs.n	801193c <remove_chain+0xae>
			fs->free_clst++;
 8011924:	69bb      	ldr	r3, [r7, #24]
 8011926:	695b      	ldr	r3, [r3, #20]
 8011928:	1c5a      	adds	r2, r3, #1
 801192a:	69bb      	ldr	r3, [r7, #24]
 801192c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 801192e:	69bb      	ldr	r3, [r7, #24]
 8011930:	791b      	ldrb	r3, [r3, #4]
 8011932:	f043 0301 	orr.w	r3, r3, #1
 8011936:	b2da      	uxtb	r2, r3
 8011938:	69bb      	ldr	r3, [r7, #24]
 801193a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801193c:	697b      	ldr	r3, [r7, #20]
 801193e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011940:	69bb      	ldr	r3, [r7, #24]
 8011942:	699b      	ldr	r3, [r3, #24]
 8011944:	68ba      	ldr	r2, [r7, #8]
 8011946:	429a      	cmp	r2, r3
 8011948:	d3c6      	bcc.n	80118d8 <remove_chain+0x4a>
 801194a:	e000      	b.n	801194e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801194c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801194e:	2300      	movs	r3, #0
}
 8011950:	4618      	mov	r0, r3
 8011952:	3720      	adds	r7, #32
 8011954:	46bd      	mov	sp, r7
 8011956:	bd80      	pop	{r7, pc}

08011958 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011958:	b580      	push	{r7, lr}
 801195a:	b088      	sub	sp, #32
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
 8011960:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011968:	683b      	ldr	r3, [r7, #0]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d10d      	bne.n	801198a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801196e:	693b      	ldr	r3, [r7, #16]
 8011970:	691b      	ldr	r3, [r3, #16]
 8011972:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011974:	69bb      	ldr	r3, [r7, #24]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d004      	beq.n	8011984 <create_chain+0x2c>
 801197a:	693b      	ldr	r3, [r7, #16]
 801197c:	699b      	ldr	r3, [r3, #24]
 801197e:	69ba      	ldr	r2, [r7, #24]
 8011980:	429a      	cmp	r2, r3
 8011982:	d31b      	bcc.n	80119bc <create_chain+0x64>
 8011984:	2301      	movs	r3, #1
 8011986:	61bb      	str	r3, [r7, #24]
 8011988:	e018      	b.n	80119bc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801198a:	6839      	ldr	r1, [r7, #0]
 801198c:	6878      	ldr	r0, [r7, #4]
 801198e:	f7ff fdec 	bl	801156a <get_fat>
 8011992:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	2b01      	cmp	r3, #1
 8011998:	d801      	bhi.n	801199e <create_chain+0x46>
 801199a:	2301      	movs	r3, #1
 801199c:	e070      	b.n	8011a80 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119a4:	d101      	bne.n	80119aa <create_chain+0x52>
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	e06a      	b.n	8011a80 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80119aa:	693b      	ldr	r3, [r7, #16]
 80119ac:	699b      	ldr	r3, [r3, #24]
 80119ae:	68fa      	ldr	r2, [r7, #12]
 80119b0:	429a      	cmp	r2, r3
 80119b2:	d201      	bcs.n	80119b8 <create_chain+0x60>
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	e063      	b.n	8011a80 <create_chain+0x128>
		scl = clst;
 80119b8:	683b      	ldr	r3, [r7, #0]
 80119ba:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80119bc:	69bb      	ldr	r3, [r7, #24]
 80119be:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80119c0:	69fb      	ldr	r3, [r7, #28]
 80119c2:	3301      	adds	r3, #1
 80119c4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80119c6:	693b      	ldr	r3, [r7, #16]
 80119c8:	699b      	ldr	r3, [r3, #24]
 80119ca:	69fa      	ldr	r2, [r7, #28]
 80119cc:	429a      	cmp	r2, r3
 80119ce:	d307      	bcc.n	80119e0 <create_chain+0x88>
				ncl = 2;
 80119d0:	2302      	movs	r3, #2
 80119d2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80119d4:	69fa      	ldr	r2, [r7, #28]
 80119d6:	69bb      	ldr	r3, [r7, #24]
 80119d8:	429a      	cmp	r2, r3
 80119da:	d901      	bls.n	80119e0 <create_chain+0x88>
 80119dc:	2300      	movs	r3, #0
 80119de:	e04f      	b.n	8011a80 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80119e0:	69f9      	ldr	r1, [r7, #28]
 80119e2:	6878      	ldr	r0, [r7, #4]
 80119e4:	f7ff fdc1 	bl	801156a <get_fat>
 80119e8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d00e      	beq.n	8011a0e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	2b01      	cmp	r3, #1
 80119f4:	d003      	beq.n	80119fe <create_chain+0xa6>
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119fc:	d101      	bne.n	8011a02 <create_chain+0xaa>
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	e03e      	b.n	8011a80 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011a02:	69fa      	ldr	r2, [r7, #28]
 8011a04:	69bb      	ldr	r3, [r7, #24]
 8011a06:	429a      	cmp	r2, r3
 8011a08:	d1da      	bne.n	80119c0 <create_chain+0x68>
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	e038      	b.n	8011a80 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011a0e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011a10:	f04f 32ff 	mov.w	r2, #4294967295
 8011a14:	69f9      	ldr	r1, [r7, #28]
 8011a16:	6938      	ldr	r0, [r7, #16]
 8011a18:	f7ff fe4f 	bl	80116ba <put_fat>
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011a20:	7dfb      	ldrb	r3, [r7, #23]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d109      	bne.n	8011a3a <create_chain+0xe2>
 8011a26:	683b      	ldr	r3, [r7, #0]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d006      	beq.n	8011a3a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011a2c:	69fa      	ldr	r2, [r7, #28]
 8011a2e:	6839      	ldr	r1, [r7, #0]
 8011a30:	6938      	ldr	r0, [r7, #16]
 8011a32:	f7ff fe42 	bl	80116ba <put_fat>
 8011a36:	4603      	mov	r3, r0
 8011a38:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011a3a:	7dfb      	ldrb	r3, [r7, #23]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d116      	bne.n	8011a6e <create_chain+0x116>
		fs->last_clst = ncl;
 8011a40:	693b      	ldr	r3, [r7, #16]
 8011a42:	69fa      	ldr	r2, [r7, #28]
 8011a44:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011a46:	693b      	ldr	r3, [r7, #16]
 8011a48:	695a      	ldr	r2, [r3, #20]
 8011a4a:	693b      	ldr	r3, [r7, #16]
 8011a4c:	699b      	ldr	r3, [r3, #24]
 8011a4e:	3b02      	subs	r3, #2
 8011a50:	429a      	cmp	r2, r3
 8011a52:	d804      	bhi.n	8011a5e <create_chain+0x106>
 8011a54:	693b      	ldr	r3, [r7, #16]
 8011a56:	695b      	ldr	r3, [r3, #20]
 8011a58:	1e5a      	subs	r2, r3, #1
 8011a5a:	693b      	ldr	r3, [r7, #16]
 8011a5c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8011a5e:	693b      	ldr	r3, [r7, #16]
 8011a60:	791b      	ldrb	r3, [r3, #4]
 8011a62:	f043 0301 	orr.w	r3, r3, #1
 8011a66:	b2da      	uxtb	r2, r3
 8011a68:	693b      	ldr	r3, [r7, #16]
 8011a6a:	711a      	strb	r2, [r3, #4]
 8011a6c:	e007      	b.n	8011a7e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011a6e:	7dfb      	ldrb	r3, [r7, #23]
 8011a70:	2b01      	cmp	r3, #1
 8011a72:	d102      	bne.n	8011a7a <create_chain+0x122>
 8011a74:	f04f 33ff 	mov.w	r3, #4294967295
 8011a78:	e000      	b.n	8011a7c <create_chain+0x124>
 8011a7a:	2301      	movs	r3, #1
 8011a7c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011a7e:	69fb      	ldr	r3, [r7, #28]
}
 8011a80:	4618      	mov	r0, r3
 8011a82:	3720      	adds	r7, #32
 8011a84:	46bd      	mov	sp, r7
 8011a86:	bd80      	pop	{r7, pc}

08011a88 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011a88:	b480      	push	{r7}
 8011a8a:	b087      	sub	sp, #28
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	6078      	str	r0, [r7, #4]
 8011a90:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a9c:	3304      	adds	r3, #4
 8011a9e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011aa0:	683b      	ldr	r3, [r7, #0]
 8011aa2:	0a5b      	lsrs	r3, r3, #9
 8011aa4:	68fa      	ldr	r2, [r7, #12]
 8011aa6:	8952      	ldrh	r2, [r2, #10]
 8011aa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8011aac:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011aae:	693b      	ldr	r3, [r7, #16]
 8011ab0:	1d1a      	adds	r2, r3, #4
 8011ab2:	613a      	str	r2, [r7, #16]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011ab8:	68bb      	ldr	r3, [r7, #8]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d101      	bne.n	8011ac2 <clmt_clust+0x3a>
 8011abe:	2300      	movs	r3, #0
 8011ac0:	e010      	b.n	8011ae4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8011ac2:	697a      	ldr	r2, [r7, #20]
 8011ac4:	68bb      	ldr	r3, [r7, #8]
 8011ac6:	429a      	cmp	r2, r3
 8011ac8:	d307      	bcc.n	8011ada <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8011aca:	697a      	ldr	r2, [r7, #20]
 8011acc:	68bb      	ldr	r3, [r7, #8]
 8011ace:	1ad3      	subs	r3, r2, r3
 8011ad0:	617b      	str	r3, [r7, #20]
 8011ad2:	693b      	ldr	r3, [r7, #16]
 8011ad4:	3304      	adds	r3, #4
 8011ad6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011ad8:	e7e9      	b.n	8011aae <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8011ada:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011adc:	693b      	ldr	r3, [r7, #16]
 8011ade:	681a      	ldr	r2, [r3, #0]
 8011ae0:	697b      	ldr	r3, [r7, #20]
 8011ae2:	4413      	add	r3, r2
}
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	371c      	adds	r7, #28
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aee:	4770      	bx	lr

08011af0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b086      	sub	sp, #24
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
 8011af8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011b00:	683b      	ldr	r3, [r7, #0]
 8011b02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011b06:	d204      	bcs.n	8011b12 <dir_sdi+0x22>
 8011b08:	683b      	ldr	r3, [r7, #0]
 8011b0a:	f003 031f 	and.w	r3, r3, #31
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d001      	beq.n	8011b16 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011b12:	2302      	movs	r3, #2
 8011b14:	e063      	b.n	8011bde <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	683a      	ldr	r2, [r7, #0]
 8011b1a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	689b      	ldr	r3, [r3, #8]
 8011b20:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011b22:	697b      	ldr	r3, [r7, #20]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d106      	bne.n	8011b36 <dir_sdi+0x46>
 8011b28:	693b      	ldr	r3, [r7, #16]
 8011b2a:	781b      	ldrb	r3, [r3, #0]
 8011b2c:	2b02      	cmp	r3, #2
 8011b2e:	d902      	bls.n	8011b36 <dir_sdi+0x46>
		clst = fs->dirbase;
 8011b30:	693b      	ldr	r3, [r7, #16]
 8011b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b34:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011b36:	697b      	ldr	r3, [r7, #20]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d10c      	bne.n	8011b56 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011b3c:	683b      	ldr	r3, [r7, #0]
 8011b3e:	095b      	lsrs	r3, r3, #5
 8011b40:	693a      	ldr	r2, [r7, #16]
 8011b42:	8912      	ldrh	r2, [r2, #8]
 8011b44:	4293      	cmp	r3, r2
 8011b46:	d301      	bcc.n	8011b4c <dir_sdi+0x5c>
 8011b48:	2302      	movs	r3, #2
 8011b4a:	e048      	b.n	8011bde <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8011b4c:	693b      	ldr	r3, [r7, #16]
 8011b4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	61da      	str	r2, [r3, #28]
 8011b54:	e029      	b.n	8011baa <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011b56:	693b      	ldr	r3, [r7, #16]
 8011b58:	895b      	ldrh	r3, [r3, #10]
 8011b5a:	025b      	lsls	r3, r3, #9
 8011b5c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011b5e:	e019      	b.n	8011b94 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	6979      	ldr	r1, [r7, #20]
 8011b64:	4618      	mov	r0, r3
 8011b66:	f7ff fd00 	bl	801156a <get_fat>
 8011b6a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011b6c:	697b      	ldr	r3, [r7, #20]
 8011b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b72:	d101      	bne.n	8011b78 <dir_sdi+0x88>
 8011b74:	2301      	movs	r3, #1
 8011b76:	e032      	b.n	8011bde <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011b78:	697b      	ldr	r3, [r7, #20]
 8011b7a:	2b01      	cmp	r3, #1
 8011b7c:	d904      	bls.n	8011b88 <dir_sdi+0x98>
 8011b7e:	693b      	ldr	r3, [r7, #16]
 8011b80:	699b      	ldr	r3, [r3, #24]
 8011b82:	697a      	ldr	r2, [r7, #20]
 8011b84:	429a      	cmp	r2, r3
 8011b86:	d301      	bcc.n	8011b8c <dir_sdi+0x9c>
 8011b88:	2302      	movs	r3, #2
 8011b8a:	e028      	b.n	8011bde <dir_sdi+0xee>
			ofs -= csz;
 8011b8c:	683a      	ldr	r2, [r7, #0]
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	1ad3      	subs	r3, r2, r3
 8011b92:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011b94:	683a      	ldr	r2, [r7, #0]
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	429a      	cmp	r2, r3
 8011b9a:	d2e1      	bcs.n	8011b60 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8011b9c:	6979      	ldr	r1, [r7, #20]
 8011b9e:	6938      	ldr	r0, [r7, #16]
 8011ba0:	f7ff fcc4 	bl	801152c <clust2sect>
 8011ba4:	4602      	mov	r2, r0
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	697a      	ldr	r2, [r7, #20]
 8011bae:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	69db      	ldr	r3, [r3, #28]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d101      	bne.n	8011bbc <dir_sdi+0xcc>
 8011bb8:	2302      	movs	r3, #2
 8011bba:	e010      	b.n	8011bde <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	69da      	ldr	r2, [r3, #28]
 8011bc0:	683b      	ldr	r3, [r7, #0]
 8011bc2:	0a5b      	lsrs	r3, r3, #9
 8011bc4:	441a      	add	r2, r3
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011bca:	693b      	ldr	r3, [r7, #16]
 8011bcc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011bd0:	683b      	ldr	r3, [r7, #0]
 8011bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011bd6:	441a      	add	r2, r3
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011bdc:	2300      	movs	r3, #0
}
 8011bde:	4618      	mov	r0, r3
 8011be0:	3718      	adds	r7, #24
 8011be2:	46bd      	mov	sp, r7
 8011be4:	bd80      	pop	{r7, pc}

08011be6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011be6:	b580      	push	{r7, lr}
 8011be8:	b086      	sub	sp, #24
 8011bea:	af00      	add	r7, sp, #0
 8011bec:	6078      	str	r0, [r7, #4]
 8011bee:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	695b      	ldr	r3, [r3, #20]
 8011bfa:	3320      	adds	r3, #32
 8011bfc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	69db      	ldr	r3, [r3, #28]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d003      	beq.n	8011c0e <dir_next+0x28>
 8011c06:	68bb      	ldr	r3, [r7, #8]
 8011c08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011c0c:	d301      	bcc.n	8011c12 <dir_next+0x2c>
 8011c0e:	2304      	movs	r3, #4
 8011c10:	e0aa      	b.n	8011d68 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011c12:	68bb      	ldr	r3, [r7, #8]
 8011c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	f040 8098 	bne.w	8011d4e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	69db      	ldr	r3, [r3, #28]
 8011c22:	1c5a      	adds	r2, r3, #1
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	699b      	ldr	r3, [r3, #24]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d10b      	bne.n	8011c48 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011c30:	68bb      	ldr	r3, [r7, #8]
 8011c32:	095b      	lsrs	r3, r3, #5
 8011c34:	68fa      	ldr	r2, [r7, #12]
 8011c36:	8912      	ldrh	r2, [r2, #8]
 8011c38:	4293      	cmp	r3, r2
 8011c3a:	f0c0 8088 	bcc.w	8011d4e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	2200      	movs	r2, #0
 8011c42:	61da      	str	r2, [r3, #28]
 8011c44:	2304      	movs	r3, #4
 8011c46:	e08f      	b.n	8011d68 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011c48:	68bb      	ldr	r3, [r7, #8]
 8011c4a:	0a5b      	lsrs	r3, r3, #9
 8011c4c:	68fa      	ldr	r2, [r7, #12]
 8011c4e:	8952      	ldrh	r2, [r2, #10]
 8011c50:	3a01      	subs	r2, #1
 8011c52:	4013      	ands	r3, r2
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d17a      	bne.n	8011d4e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011c58:	687a      	ldr	r2, [r7, #4]
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	699b      	ldr	r3, [r3, #24]
 8011c5e:	4619      	mov	r1, r3
 8011c60:	4610      	mov	r0, r2
 8011c62:	f7ff fc82 	bl	801156a <get_fat>
 8011c66:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011c68:	697b      	ldr	r3, [r7, #20]
 8011c6a:	2b01      	cmp	r3, #1
 8011c6c:	d801      	bhi.n	8011c72 <dir_next+0x8c>
 8011c6e:	2302      	movs	r3, #2
 8011c70:	e07a      	b.n	8011d68 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011c72:	697b      	ldr	r3, [r7, #20]
 8011c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c78:	d101      	bne.n	8011c7e <dir_next+0x98>
 8011c7a:	2301      	movs	r3, #1
 8011c7c:	e074      	b.n	8011d68 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	699b      	ldr	r3, [r3, #24]
 8011c82:	697a      	ldr	r2, [r7, #20]
 8011c84:	429a      	cmp	r2, r3
 8011c86:	d358      	bcc.n	8011d3a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011c88:	683b      	ldr	r3, [r7, #0]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d104      	bne.n	8011c98 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	2200      	movs	r2, #0
 8011c92:	61da      	str	r2, [r3, #28]
 8011c94:	2304      	movs	r3, #4
 8011c96:	e067      	b.n	8011d68 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011c98:	687a      	ldr	r2, [r7, #4]
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	699b      	ldr	r3, [r3, #24]
 8011c9e:	4619      	mov	r1, r3
 8011ca0:	4610      	mov	r0, r2
 8011ca2:	f7ff fe59 	bl	8011958 <create_chain>
 8011ca6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011ca8:	697b      	ldr	r3, [r7, #20]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d101      	bne.n	8011cb2 <dir_next+0xcc>
 8011cae:	2307      	movs	r3, #7
 8011cb0:	e05a      	b.n	8011d68 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011cb2:	697b      	ldr	r3, [r7, #20]
 8011cb4:	2b01      	cmp	r3, #1
 8011cb6:	d101      	bne.n	8011cbc <dir_next+0xd6>
 8011cb8:	2302      	movs	r3, #2
 8011cba:	e055      	b.n	8011d68 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011cbc:	697b      	ldr	r3, [r7, #20]
 8011cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cc2:	d101      	bne.n	8011cc8 <dir_next+0xe2>
 8011cc4:	2301      	movs	r3, #1
 8011cc6:	e04f      	b.n	8011d68 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011cc8:	68f8      	ldr	r0, [r7, #12]
 8011cca:	f7ff fb4f 	bl	801136c <sync_window>
 8011cce:	4603      	mov	r3, r0
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d001      	beq.n	8011cd8 <dir_next+0xf2>
 8011cd4:	2301      	movs	r3, #1
 8011cd6:	e047      	b.n	8011d68 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	3334      	adds	r3, #52	; 0x34
 8011cdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011ce0:	2100      	movs	r1, #0
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	f7ff f947 	bl	8010f76 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011ce8:	2300      	movs	r3, #0
 8011cea:	613b      	str	r3, [r7, #16]
 8011cec:	6979      	ldr	r1, [r7, #20]
 8011cee:	68f8      	ldr	r0, [r7, #12]
 8011cf0:	f7ff fc1c 	bl	801152c <clust2sect>
 8011cf4:	4602      	mov	r2, r0
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	631a      	str	r2, [r3, #48]	; 0x30
 8011cfa:	e012      	b.n	8011d22 <dir_next+0x13c>
						fs->wflag = 1;
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	2201      	movs	r2, #1
 8011d00:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011d02:	68f8      	ldr	r0, [r7, #12]
 8011d04:	f7ff fb32 	bl	801136c <sync_window>
 8011d08:	4603      	mov	r3, r0
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d001      	beq.n	8011d12 <dir_next+0x12c>
 8011d0e:	2301      	movs	r3, #1
 8011d10:	e02a      	b.n	8011d68 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011d12:	693b      	ldr	r3, [r7, #16]
 8011d14:	3301      	adds	r3, #1
 8011d16:	613b      	str	r3, [r7, #16]
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d1c:	1c5a      	adds	r2, r3, #1
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	631a      	str	r2, [r3, #48]	; 0x30
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	895b      	ldrh	r3, [r3, #10]
 8011d26:	461a      	mov	r2, r3
 8011d28:	693b      	ldr	r3, [r7, #16]
 8011d2a:	4293      	cmp	r3, r2
 8011d2c:	d3e6      	bcc.n	8011cfc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011d32:	693b      	ldr	r3, [r7, #16]
 8011d34:	1ad2      	subs	r2, r2, r3
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	697a      	ldr	r2, [r7, #20]
 8011d3e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011d40:	6979      	ldr	r1, [r7, #20]
 8011d42:	68f8      	ldr	r0, [r7, #12]
 8011d44:	f7ff fbf2 	bl	801152c <clust2sect>
 8011d48:	4602      	mov	r2, r0
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	68ba      	ldr	r2, [r7, #8]
 8011d52:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011d5a:	68bb      	ldr	r3, [r7, #8]
 8011d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011d60:	441a      	add	r2, r3
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011d66:	2300      	movs	r3, #0
}
 8011d68:	4618      	mov	r0, r3
 8011d6a:	3718      	adds	r7, #24
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	bd80      	pop	{r7, pc}

08011d70 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b086      	sub	sp, #24
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
 8011d78:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011d80:	2100      	movs	r1, #0
 8011d82:	6878      	ldr	r0, [r7, #4]
 8011d84:	f7ff feb4 	bl	8011af0 <dir_sdi>
 8011d88:	4603      	mov	r3, r0
 8011d8a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011d8c:	7dfb      	ldrb	r3, [r7, #23]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d12b      	bne.n	8011dea <dir_alloc+0x7a>
		n = 0;
 8011d92:	2300      	movs	r3, #0
 8011d94:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	69db      	ldr	r3, [r3, #28]
 8011d9a:	4619      	mov	r1, r3
 8011d9c:	68f8      	ldr	r0, [r7, #12]
 8011d9e:	f7ff fb29 	bl	80113f4 <move_window>
 8011da2:	4603      	mov	r3, r0
 8011da4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011da6:	7dfb      	ldrb	r3, [r7, #23]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d11d      	bne.n	8011de8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	6a1b      	ldr	r3, [r3, #32]
 8011db0:	781b      	ldrb	r3, [r3, #0]
 8011db2:	2be5      	cmp	r3, #229	; 0xe5
 8011db4:	d004      	beq.n	8011dc0 <dir_alloc+0x50>
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	6a1b      	ldr	r3, [r3, #32]
 8011dba:	781b      	ldrb	r3, [r3, #0]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d107      	bne.n	8011dd0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011dc0:	693b      	ldr	r3, [r7, #16]
 8011dc2:	3301      	adds	r3, #1
 8011dc4:	613b      	str	r3, [r7, #16]
 8011dc6:	693a      	ldr	r2, [r7, #16]
 8011dc8:	683b      	ldr	r3, [r7, #0]
 8011dca:	429a      	cmp	r2, r3
 8011dcc:	d102      	bne.n	8011dd4 <dir_alloc+0x64>
 8011dce:	e00c      	b.n	8011dea <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011dd4:	2101      	movs	r1, #1
 8011dd6:	6878      	ldr	r0, [r7, #4]
 8011dd8:	f7ff ff05 	bl	8011be6 <dir_next>
 8011ddc:	4603      	mov	r3, r0
 8011dde:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011de0:	7dfb      	ldrb	r3, [r7, #23]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d0d7      	beq.n	8011d96 <dir_alloc+0x26>
 8011de6:	e000      	b.n	8011dea <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011de8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011dea:	7dfb      	ldrb	r3, [r7, #23]
 8011dec:	2b04      	cmp	r3, #4
 8011dee:	d101      	bne.n	8011df4 <dir_alloc+0x84>
 8011df0:	2307      	movs	r3, #7
 8011df2:	75fb      	strb	r3, [r7, #23]
	return res;
 8011df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8011df6:	4618      	mov	r0, r3
 8011df8:	3718      	adds	r7, #24
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	bd80      	pop	{r7, pc}

08011dfe <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011dfe:	b580      	push	{r7, lr}
 8011e00:	b084      	sub	sp, #16
 8011e02:	af00      	add	r7, sp, #0
 8011e04:	6078      	str	r0, [r7, #4]
 8011e06:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011e08:	683b      	ldr	r3, [r7, #0]
 8011e0a:	331a      	adds	r3, #26
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	f7ff f80f 	bl	8010e30 <ld_word>
 8011e12:	4603      	mov	r3, r0
 8011e14:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	781b      	ldrb	r3, [r3, #0]
 8011e1a:	2b03      	cmp	r3, #3
 8011e1c:	d109      	bne.n	8011e32 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011e1e:	683b      	ldr	r3, [r7, #0]
 8011e20:	3314      	adds	r3, #20
 8011e22:	4618      	mov	r0, r3
 8011e24:	f7ff f804 	bl	8010e30 <ld_word>
 8011e28:	4603      	mov	r3, r0
 8011e2a:	041b      	lsls	r3, r3, #16
 8011e2c:	68fa      	ldr	r2, [r7, #12]
 8011e2e:	4313      	orrs	r3, r2
 8011e30:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011e32:	68fb      	ldr	r3, [r7, #12]
}
 8011e34:	4618      	mov	r0, r3
 8011e36:	3710      	adds	r7, #16
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	bd80      	pop	{r7, pc}

08011e3c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b084      	sub	sp, #16
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	60f8      	str	r0, [r7, #12]
 8011e44:	60b9      	str	r1, [r7, #8]
 8011e46:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011e48:	68bb      	ldr	r3, [r7, #8]
 8011e4a:	331a      	adds	r3, #26
 8011e4c:	687a      	ldr	r2, [r7, #4]
 8011e4e:	b292      	uxth	r2, r2
 8011e50:	4611      	mov	r1, r2
 8011e52:	4618      	mov	r0, r3
 8011e54:	f7ff f827 	bl	8010ea6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	781b      	ldrb	r3, [r3, #0]
 8011e5c:	2b03      	cmp	r3, #3
 8011e5e:	d109      	bne.n	8011e74 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011e60:	68bb      	ldr	r3, [r7, #8]
 8011e62:	f103 0214 	add.w	r2, r3, #20
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	0c1b      	lsrs	r3, r3, #16
 8011e6a:	b29b      	uxth	r3, r3
 8011e6c:	4619      	mov	r1, r3
 8011e6e:	4610      	mov	r0, r2
 8011e70:	f7ff f819 	bl	8010ea6 <st_word>
	}
}
 8011e74:	bf00      	nop
 8011e76:	3710      	adds	r7, #16
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	bd80      	pop	{r7, pc}

08011e7c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b086      	sub	sp, #24
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
 8011e84:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8011e86:	2304      	movs	r3, #4
 8011e88:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8011e90:	e03c      	b.n	8011f0c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	69db      	ldr	r3, [r3, #28]
 8011e96:	4619      	mov	r1, r3
 8011e98:	6938      	ldr	r0, [r7, #16]
 8011e9a:	f7ff faab 	bl	80113f4 <move_window>
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011ea2:	7dfb      	ldrb	r3, [r7, #23]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d136      	bne.n	8011f16 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	6a1b      	ldr	r3, [r3, #32]
 8011eac:	781b      	ldrb	r3, [r3, #0]
 8011eae:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8011eb0:	7bfb      	ldrb	r3, [r7, #15]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d102      	bne.n	8011ebc <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8011eb6:	2304      	movs	r3, #4
 8011eb8:	75fb      	strb	r3, [r7, #23]
 8011eba:	e031      	b.n	8011f20 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	6a1b      	ldr	r3, [r3, #32]
 8011ec0:	330b      	adds	r3, #11
 8011ec2:	781b      	ldrb	r3, [r3, #0]
 8011ec4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011ec8:	73bb      	strb	r3, [r7, #14]
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	7bba      	ldrb	r2, [r7, #14]
 8011ece:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8011ed0:	7bfb      	ldrb	r3, [r7, #15]
 8011ed2:	2be5      	cmp	r3, #229	; 0xe5
 8011ed4:	d011      	beq.n	8011efa <dir_read+0x7e>
 8011ed6:	7bfb      	ldrb	r3, [r7, #15]
 8011ed8:	2b2e      	cmp	r3, #46	; 0x2e
 8011eda:	d00e      	beq.n	8011efa <dir_read+0x7e>
 8011edc:	7bbb      	ldrb	r3, [r7, #14]
 8011ede:	2b0f      	cmp	r3, #15
 8011ee0:	d00b      	beq.n	8011efa <dir_read+0x7e>
 8011ee2:	7bbb      	ldrb	r3, [r7, #14]
 8011ee4:	f023 0320 	bic.w	r3, r3, #32
 8011ee8:	2b08      	cmp	r3, #8
 8011eea:	bf0c      	ite	eq
 8011eec:	2301      	moveq	r3, #1
 8011eee:	2300      	movne	r3, #0
 8011ef0:	b2db      	uxtb	r3, r3
 8011ef2:	461a      	mov	r2, r3
 8011ef4:	683b      	ldr	r3, [r7, #0]
 8011ef6:	4293      	cmp	r3, r2
 8011ef8:	d00f      	beq.n	8011f1a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8011efa:	2100      	movs	r1, #0
 8011efc:	6878      	ldr	r0, [r7, #4]
 8011efe:	f7ff fe72 	bl	8011be6 <dir_next>
 8011f02:	4603      	mov	r3, r0
 8011f04:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011f06:	7dfb      	ldrb	r3, [r7, #23]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d108      	bne.n	8011f1e <dir_read+0xa2>
	while (dp->sect) {
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	69db      	ldr	r3, [r3, #28]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d1be      	bne.n	8011e92 <dir_read+0x16>
 8011f14:	e004      	b.n	8011f20 <dir_read+0xa4>
		if (res != FR_OK) break;
 8011f16:	bf00      	nop
 8011f18:	e002      	b.n	8011f20 <dir_read+0xa4>
				break;
 8011f1a:	bf00      	nop
 8011f1c:	e000      	b.n	8011f20 <dir_read+0xa4>
		if (res != FR_OK) break;
 8011f1e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8011f20:	7dfb      	ldrb	r3, [r7, #23]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d002      	beq.n	8011f2c <dir_read+0xb0>
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	2200      	movs	r2, #0
 8011f2a:	61da      	str	r2, [r3, #28]
	return res;
 8011f2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f2e:	4618      	mov	r0, r3
 8011f30:	3718      	adds	r7, #24
 8011f32:	46bd      	mov	sp, r7
 8011f34:	bd80      	pop	{r7, pc}

08011f36 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011f36:	b580      	push	{r7, lr}
 8011f38:	b086      	sub	sp, #24
 8011f3a:	af00      	add	r7, sp, #0
 8011f3c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011f44:	2100      	movs	r1, #0
 8011f46:	6878      	ldr	r0, [r7, #4]
 8011f48:	f7ff fdd2 	bl	8011af0 <dir_sdi>
 8011f4c:	4603      	mov	r3, r0
 8011f4e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011f50:	7dfb      	ldrb	r3, [r7, #23]
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d001      	beq.n	8011f5a <dir_find+0x24>
 8011f56:	7dfb      	ldrb	r3, [r7, #23]
 8011f58:	e03e      	b.n	8011fd8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	69db      	ldr	r3, [r3, #28]
 8011f5e:	4619      	mov	r1, r3
 8011f60:	6938      	ldr	r0, [r7, #16]
 8011f62:	f7ff fa47 	bl	80113f4 <move_window>
 8011f66:	4603      	mov	r3, r0
 8011f68:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011f6a:	7dfb      	ldrb	r3, [r7, #23]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d12f      	bne.n	8011fd0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	6a1b      	ldr	r3, [r3, #32]
 8011f74:	781b      	ldrb	r3, [r3, #0]
 8011f76:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011f78:	7bfb      	ldrb	r3, [r7, #15]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d102      	bne.n	8011f84 <dir_find+0x4e>
 8011f7e:	2304      	movs	r3, #4
 8011f80:	75fb      	strb	r3, [r7, #23]
 8011f82:	e028      	b.n	8011fd6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	6a1b      	ldr	r3, [r3, #32]
 8011f88:	330b      	adds	r3, #11
 8011f8a:	781b      	ldrb	r3, [r3, #0]
 8011f8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011f90:	b2da      	uxtb	r2, r3
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	6a1b      	ldr	r3, [r3, #32]
 8011f9a:	330b      	adds	r3, #11
 8011f9c:	781b      	ldrb	r3, [r3, #0]
 8011f9e:	f003 0308 	and.w	r3, r3, #8
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d10a      	bne.n	8011fbc <dir_find+0x86>
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	6a18      	ldr	r0, [r3, #32]
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	3324      	adds	r3, #36	; 0x24
 8011fae:	220b      	movs	r2, #11
 8011fb0:	4619      	mov	r1, r3
 8011fb2:	f7fe fffb 	bl	8010fac <mem_cmp>
 8011fb6:	4603      	mov	r3, r0
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d00b      	beq.n	8011fd4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011fbc:	2100      	movs	r1, #0
 8011fbe:	6878      	ldr	r0, [r7, #4]
 8011fc0:	f7ff fe11 	bl	8011be6 <dir_next>
 8011fc4:	4603      	mov	r3, r0
 8011fc6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011fc8:	7dfb      	ldrb	r3, [r7, #23]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d0c5      	beq.n	8011f5a <dir_find+0x24>
 8011fce:	e002      	b.n	8011fd6 <dir_find+0xa0>
		if (res != FR_OK) break;
 8011fd0:	bf00      	nop
 8011fd2:	e000      	b.n	8011fd6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011fd4:	bf00      	nop

	return res;
 8011fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8011fd8:	4618      	mov	r0, r3
 8011fda:	3718      	adds	r7, #24
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	bd80      	pop	{r7, pc}

08011fe0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011fe0:	b580      	push	{r7, lr}
 8011fe2:	b084      	sub	sp, #16
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8011fee:	2101      	movs	r1, #1
 8011ff0:	6878      	ldr	r0, [r7, #4]
 8011ff2:	f7ff febd 	bl	8011d70 <dir_alloc>
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8011ffa:	7bfb      	ldrb	r3, [r7, #15]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d11c      	bne.n	801203a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	69db      	ldr	r3, [r3, #28]
 8012004:	4619      	mov	r1, r3
 8012006:	68b8      	ldr	r0, [r7, #8]
 8012008:	f7ff f9f4 	bl	80113f4 <move_window>
 801200c:	4603      	mov	r3, r0
 801200e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012010:	7bfb      	ldrb	r3, [r7, #15]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d111      	bne.n	801203a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	6a1b      	ldr	r3, [r3, #32]
 801201a:	2220      	movs	r2, #32
 801201c:	2100      	movs	r1, #0
 801201e:	4618      	mov	r0, r3
 8012020:	f7fe ffa9 	bl	8010f76 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	6a18      	ldr	r0, [r3, #32]
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	3324      	adds	r3, #36	; 0x24
 801202c:	220b      	movs	r2, #11
 801202e:	4619      	mov	r1, r3
 8012030:	f7fe ff80 	bl	8010f34 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012034:	68bb      	ldr	r3, [r7, #8]
 8012036:	2201      	movs	r2, #1
 8012038:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801203a:	7bfb      	ldrb	r3, [r7, #15]
}
 801203c:	4618      	mov	r0, r3
 801203e:	3710      	adds	r7, #16
 8012040:	46bd      	mov	sp, r7
 8012042:	bd80      	pop	{r7, pc}

08012044 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8012044:	b580      	push	{r7, lr}
 8012046:	b084      	sub	sp, #16
 8012048:	af00      	add	r7, sp, #0
 801204a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	69db      	ldr	r3, [r3, #28]
 8012056:	4619      	mov	r1, r3
 8012058:	68f8      	ldr	r0, [r7, #12]
 801205a:	f7ff f9cb 	bl	80113f4 <move_window>
 801205e:	4603      	mov	r3, r0
 8012060:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8012062:	7afb      	ldrb	r3, [r7, #11]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d106      	bne.n	8012076 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	6a1b      	ldr	r3, [r3, #32]
 801206c:	22e5      	movs	r2, #229	; 0xe5
 801206e:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	2201      	movs	r2, #1
 8012074:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8012076:	7afb      	ldrb	r3, [r7, #11]
}
 8012078:	4618      	mov	r0, r3
 801207a:	3710      	adds	r7, #16
 801207c:	46bd      	mov	sp, r7
 801207e:	bd80      	pop	{r7, pc}

08012080 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8012080:	b580      	push	{r7, lr}
 8012082:	b086      	sub	sp, #24
 8012084:	af00      	add	r7, sp, #0
 8012086:	6078      	str	r0, [r7, #4]
 8012088:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 801208a:	683b      	ldr	r3, [r7, #0]
 801208c:	2200      	movs	r2, #0
 801208e:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	69db      	ldr	r3, [r3, #28]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d04e      	beq.n	8012136 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8012098:	2300      	movs	r3, #0
 801209a:	613b      	str	r3, [r7, #16]
 801209c:	693b      	ldr	r3, [r7, #16]
 801209e:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80120a0:	e021      	b.n	80120e6 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	6a1a      	ldr	r2, [r3, #32]
 80120a6:	697b      	ldr	r3, [r7, #20]
 80120a8:	1c59      	adds	r1, r3, #1
 80120aa:	6179      	str	r1, [r7, #20]
 80120ac:	4413      	add	r3, r2
 80120ae:	781b      	ldrb	r3, [r3, #0]
 80120b0:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80120b2:	7bfb      	ldrb	r3, [r7, #15]
 80120b4:	2b20      	cmp	r3, #32
 80120b6:	d100      	bne.n	80120ba <get_fileinfo+0x3a>
 80120b8:	e015      	b.n	80120e6 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80120ba:	7bfb      	ldrb	r3, [r7, #15]
 80120bc:	2b05      	cmp	r3, #5
 80120be:	d101      	bne.n	80120c4 <get_fileinfo+0x44>
 80120c0:	23e5      	movs	r3, #229	; 0xe5
 80120c2:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80120c4:	697b      	ldr	r3, [r7, #20]
 80120c6:	2b09      	cmp	r3, #9
 80120c8:	d106      	bne.n	80120d8 <get_fileinfo+0x58>
 80120ca:	693b      	ldr	r3, [r7, #16]
 80120cc:	1c5a      	adds	r2, r3, #1
 80120ce:	613a      	str	r2, [r7, #16]
 80120d0:	683a      	ldr	r2, [r7, #0]
 80120d2:	4413      	add	r3, r2
 80120d4:	222e      	movs	r2, #46	; 0x2e
 80120d6:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80120d8:	693b      	ldr	r3, [r7, #16]
 80120da:	1c5a      	adds	r2, r3, #1
 80120dc:	613a      	str	r2, [r7, #16]
 80120de:	683a      	ldr	r2, [r7, #0]
 80120e0:	4413      	add	r3, r2
 80120e2:	7bfa      	ldrb	r2, [r7, #15]
 80120e4:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 80120e6:	697b      	ldr	r3, [r7, #20]
 80120e8:	2b0a      	cmp	r3, #10
 80120ea:	d9da      	bls.n	80120a2 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 80120ec:	683a      	ldr	r2, [r7, #0]
 80120ee:	693b      	ldr	r3, [r7, #16]
 80120f0:	4413      	add	r3, r2
 80120f2:	3309      	adds	r3, #9
 80120f4:	2200      	movs	r2, #0
 80120f6:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	6a1b      	ldr	r3, [r3, #32]
 80120fc:	7ada      	ldrb	r2, [r3, #11]
 80120fe:	683b      	ldr	r3, [r7, #0]
 8012100:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	6a1b      	ldr	r3, [r3, #32]
 8012106:	331c      	adds	r3, #28
 8012108:	4618      	mov	r0, r3
 801210a:	f7fe fea9 	bl	8010e60 <ld_dword>
 801210e:	4602      	mov	r2, r0
 8012110:	683b      	ldr	r3, [r7, #0]
 8012112:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	6a1b      	ldr	r3, [r3, #32]
 8012118:	3316      	adds	r3, #22
 801211a:	4618      	mov	r0, r3
 801211c:	f7fe fea0 	bl	8010e60 <ld_dword>
 8012120:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8012122:	68bb      	ldr	r3, [r7, #8]
 8012124:	b29a      	uxth	r2, r3
 8012126:	683b      	ldr	r3, [r7, #0]
 8012128:	80da      	strh	r2, [r3, #6]
 801212a:	68bb      	ldr	r3, [r7, #8]
 801212c:	0c1b      	lsrs	r3, r3, #16
 801212e:	b29a      	uxth	r2, r3
 8012130:	683b      	ldr	r3, [r7, #0]
 8012132:	809a      	strh	r2, [r3, #4]
 8012134:	e000      	b.n	8012138 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8012136:	bf00      	nop
}
 8012138:	3718      	adds	r7, #24
 801213a:	46bd      	mov	sp, r7
 801213c:	bd80      	pop	{r7, pc}
	...

08012140 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012140:	b580      	push	{r7, lr}
 8012142:	b088      	sub	sp, #32
 8012144:	af00      	add	r7, sp, #0
 8012146:	6078      	str	r0, [r7, #4]
 8012148:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801214a:	683b      	ldr	r3, [r7, #0]
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	60fb      	str	r3, [r7, #12]
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	3324      	adds	r3, #36	; 0x24
 8012154:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8012156:	220b      	movs	r2, #11
 8012158:	2120      	movs	r1, #32
 801215a:	68b8      	ldr	r0, [r7, #8]
 801215c:	f7fe ff0b 	bl	8010f76 <mem_set>
	si = i = 0; ni = 8;
 8012160:	2300      	movs	r3, #0
 8012162:	613b      	str	r3, [r7, #16]
 8012164:	693b      	ldr	r3, [r7, #16]
 8012166:	61fb      	str	r3, [r7, #28]
 8012168:	2308      	movs	r3, #8
 801216a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801216c:	69fb      	ldr	r3, [r7, #28]
 801216e:	1c5a      	adds	r2, r3, #1
 8012170:	61fa      	str	r2, [r7, #28]
 8012172:	68fa      	ldr	r2, [r7, #12]
 8012174:	4413      	add	r3, r2
 8012176:	781b      	ldrb	r3, [r3, #0]
 8012178:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801217a:	7efb      	ldrb	r3, [r7, #27]
 801217c:	2b20      	cmp	r3, #32
 801217e:	d94e      	bls.n	801221e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012180:	7efb      	ldrb	r3, [r7, #27]
 8012182:	2b2f      	cmp	r3, #47	; 0x2f
 8012184:	d006      	beq.n	8012194 <create_name+0x54>
 8012186:	7efb      	ldrb	r3, [r7, #27]
 8012188:	2b5c      	cmp	r3, #92	; 0x5c
 801218a:	d110      	bne.n	80121ae <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801218c:	e002      	b.n	8012194 <create_name+0x54>
 801218e:	69fb      	ldr	r3, [r7, #28]
 8012190:	3301      	adds	r3, #1
 8012192:	61fb      	str	r3, [r7, #28]
 8012194:	68fa      	ldr	r2, [r7, #12]
 8012196:	69fb      	ldr	r3, [r7, #28]
 8012198:	4413      	add	r3, r2
 801219a:	781b      	ldrb	r3, [r3, #0]
 801219c:	2b2f      	cmp	r3, #47	; 0x2f
 801219e:	d0f6      	beq.n	801218e <create_name+0x4e>
 80121a0:	68fa      	ldr	r2, [r7, #12]
 80121a2:	69fb      	ldr	r3, [r7, #28]
 80121a4:	4413      	add	r3, r2
 80121a6:	781b      	ldrb	r3, [r3, #0]
 80121a8:	2b5c      	cmp	r3, #92	; 0x5c
 80121aa:	d0f0      	beq.n	801218e <create_name+0x4e>
			break;
 80121ac:	e038      	b.n	8012220 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80121ae:	7efb      	ldrb	r3, [r7, #27]
 80121b0:	2b2e      	cmp	r3, #46	; 0x2e
 80121b2:	d003      	beq.n	80121bc <create_name+0x7c>
 80121b4:	693a      	ldr	r2, [r7, #16]
 80121b6:	697b      	ldr	r3, [r7, #20]
 80121b8:	429a      	cmp	r2, r3
 80121ba:	d30c      	bcc.n	80121d6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80121bc:	697b      	ldr	r3, [r7, #20]
 80121be:	2b0b      	cmp	r3, #11
 80121c0:	d002      	beq.n	80121c8 <create_name+0x88>
 80121c2:	7efb      	ldrb	r3, [r7, #27]
 80121c4:	2b2e      	cmp	r3, #46	; 0x2e
 80121c6:	d001      	beq.n	80121cc <create_name+0x8c>
 80121c8:	2306      	movs	r3, #6
 80121ca:	e044      	b.n	8012256 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80121cc:	2308      	movs	r3, #8
 80121ce:	613b      	str	r3, [r7, #16]
 80121d0:	230b      	movs	r3, #11
 80121d2:	617b      	str	r3, [r7, #20]
			continue;
 80121d4:	e022      	b.n	801221c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80121d6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	da04      	bge.n	80121e8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80121de:	7efb      	ldrb	r3, [r7, #27]
 80121e0:	3b80      	subs	r3, #128	; 0x80
 80121e2:	4a1f      	ldr	r2, [pc, #124]	; (8012260 <create_name+0x120>)
 80121e4:	5cd3      	ldrb	r3, [r2, r3]
 80121e6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80121e8:	7efb      	ldrb	r3, [r7, #27]
 80121ea:	4619      	mov	r1, r3
 80121ec:	481d      	ldr	r0, [pc, #116]	; (8012264 <create_name+0x124>)
 80121ee:	f7fe ff04 	bl	8010ffa <chk_chr>
 80121f2:	4603      	mov	r3, r0
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d001      	beq.n	80121fc <create_name+0xbc>
 80121f8:	2306      	movs	r3, #6
 80121fa:	e02c      	b.n	8012256 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80121fc:	7efb      	ldrb	r3, [r7, #27]
 80121fe:	2b60      	cmp	r3, #96	; 0x60
 8012200:	d905      	bls.n	801220e <create_name+0xce>
 8012202:	7efb      	ldrb	r3, [r7, #27]
 8012204:	2b7a      	cmp	r3, #122	; 0x7a
 8012206:	d802      	bhi.n	801220e <create_name+0xce>
 8012208:	7efb      	ldrb	r3, [r7, #27]
 801220a:	3b20      	subs	r3, #32
 801220c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801220e:	693b      	ldr	r3, [r7, #16]
 8012210:	1c5a      	adds	r2, r3, #1
 8012212:	613a      	str	r2, [r7, #16]
 8012214:	68ba      	ldr	r2, [r7, #8]
 8012216:	4413      	add	r3, r2
 8012218:	7efa      	ldrb	r2, [r7, #27]
 801221a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801221c:	e7a6      	b.n	801216c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801221e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012220:	68fa      	ldr	r2, [r7, #12]
 8012222:	69fb      	ldr	r3, [r7, #28]
 8012224:	441a      	add	r2, r3
 8012226:	683b      	ldr	r3, [r7, #0]
 8012228:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801222a:	693b      	ldr	r3, [r7, #16]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d101      	bne.n	8012234 <create_name+0xf4>
 8012230:	2306      	movs	r3, #6
 8012232:	e010      	b.n	8012256 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012234:	68bb      	ldr	r3, [r7, #8]
 8012236:	781b      	ldrb	r3, [r3, #0]
 8012238:	2be5      	cmp	r3, #229	; 0xe5
 801223a:	d102      	bne.n	8012242 <create_name+0x102>
 801223c:	68bb      	ldr	r3, [r7, #8]
 801223e:	2205      	movs	r2, #5
 8012240:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012242:	7efb      	ldrb	r3, [r7, #27]
 8012244:	2b20      	cmp	r3, #32
 8012246:	d801      	bhi.n	801224c <create_name+0x10c>
 8012248:	2204      	movs	r2, #4
 801224a:	e000      	b.n	801224e <create_name+0x10e>
 801224c:	2200      	movs	r2, #0
 801224e:	68bb      	ldr	r3, [r7, #8]
 8012250:	330b      	adds	r3, #11
 8012252:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012254:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8012256:	4618      	mov	r0, r3
 8012258:	3720      	adds	r7, #32
 801225a:	46bd      	mov	sp, r7
 801225c:	bd80      	pop	{r7, pc}
 801225e:	bf00      	nop
 8012260:	0801d9f4 	.word	0x0801d9f4
 8012264:	0801d1b8 	.word	0x0801d1b8

08012268 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012268:	b580      	push	{r7, lr}
 801226a:	b086      	sub	sp, #24
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
 8012270:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012276:	693b      	ldr	r3, [r7, #16]
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801227c:	e002      	b.n	8012284 <follow_path+0x1c>
 801227e:	683b      	ldr	r3, [r7, #0]
 8012280:	3301      	adds	r3, #1
 8012282:	603b      	str	r3, [r7, #0]
 8012284:	683b      	ldr	r3, [r7, #0]
 8012286:	781b      	ldrb	r3, [r3, #0]
 8012288:	2b2f      	cmp	r3, #47	; 0x2f
 801228a:	d0f8      	beq.n	801227e <follow_path+0x16>
 801228c:	683b      	ldr	r3, [r7, #0]
 801228e:	781b      	ldrb	r3, [r3, #0]
 8012290:	2b5c      	cmp	r3, #92	; 0x5c
 8012292:	d0f4      	beq.n	801227e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8012294:	693b      	ldr	r3, [r7, #16]
 8012296:	2200      	movs	r2, #0
 8012298:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801229a:	683b      	ldr	r3, [r7, #0]
 801229c:	781b      	ldrb	r3, [r3, #0]
 801229e:	2b1f      	cmp	r3, #31
 80122a0:	d80a      	bhi.n	80122b8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	2280      	movs	r2, #128	; 0x80
 80122a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80122aa:	2100      	movs	r1, #0
 80122ac:	6878      	ldr	r0, [r7, #4]
 80122ae:	f7ff fc1f 	bl	8011af0 <dir_sdi>
 80122b2:	4603      	mov	r3, r0
 80122b4:	75fb      	strb	r3, [r7, #23]
 80122b6:	e043      	b.n	8012340 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80122b8:	463b      	mov	r3, r7
 80122ba:	4619      	mov	r1, r3
 80122bc:	6878      	ldr	r0, [r7, #4]
 80122be:	f7ff ff3f 	bl	8012140 <create_name>
 80122c2:	4603      	mov	r3, r0
 80122c4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80122c6:	7dfb      	ldrb	r3, [r7, #23]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d134      	bne.n	8012336 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80122cc:	6878      	ldr	r0, [r7, #4]
 80122ce:	f7ff fe32 	bl	8011f36 <dir_find>
 80122d2:	4603      	mov	r3, r0
 80122d4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80122dc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80122de:	7dfb      	ldrb	r3, [r7, #23]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d00a      	beq.n	80122fa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80122e4:	7dfb      	ldrb	r3, [r7, #23]
 80122e6:	2b04      	cmp	r3, #4
 80122e8:	d127      	bne.n	801233a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80122ea:	7afb      	ldrb	r3, [r7, #11]
 80122ec:	f003 0304 	and.w	r3, r3, #4
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d122      	bne.n	801233a <follow_path+0xd2>
 80122f4:	2305      	movs	r3, #5
 80122f6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80122f8:	e01f      	b.n	801233a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80122fa:	7afb      	ldrb	r3, [r7, #11]
 80122fc:	f003 0304 	and.w	r3, r3, #4
 8012300:	2b00      	cmp	r3, #0
 8012302:	d11c      	bne.n	801233e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012304:	693b      	ldr	r3, [r7, #16]
 8012306:	799b      	ldrb	r3, [r3, #6]
 8012308:	f003 0310 	and.w	r3, r3, #16
 801230c:	2b00      	cmp	r3, #0
 801230e:	d102      	bne.n	8012316 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8012310:	2305      	movs	r3, #5
 8012312:	75fb      	strb	r3, [r7, #23]
 8012314:	e014      	b.n	8012340 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	695b      	ldr	r3, [r3, #20]
 8012320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012324:	4413      	add	r3, r2
 8012326:	4619      	mov	r1, r3
 8012328:	68f8      	ldr	r0, [r7, #12]
 801232a:	f7ff fd68 	bl	8011dfe <ld_clust>
 801232e:	4602      	mov	r2, r0
 8012330:	693b      	ldr	r3, [r7, #16]
 8012332:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012334:	e7c0      	b.n	80122b8 <follow_path+0x50>
			if (res != FR_OK) break;
 8012336:	bf00      	nop
 8012338:	e002      	b.n	8012340 <follow_path+0xd8>
				break;
 801233a:	bf00      	nop
 801233c:	e000      	b.n	8012340 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801233e:	bf00      	nop
			}
		}
	}

	return res;
 8012340:	7dfb      	ldrb	r3, [r7, #23]
}
 8012342:	4618      	mov	r0, r3
 8012344:	3718      	adds	r7, #24
 8012346:	46bd      	mov	sp, r7
 8012348:	bd80      	pop	{r7, pc}

0801234a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801234a:	b480      	push	{r7}
 801234c:	b087      	sub	sp, #28
 801234e:	af00      	add	r7, sp, #0
 8012350:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012352:	f04f 33ff 	mov.w	r3, #4294967295
 8012356:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d031      	beq.n	80123c4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	617b      	str	r3, [r7, #20]
 8012366:	e002      	b.n	801236e <get_ldnumber+0x24>
 8012368:	697b      	ldr	r3, [r7, #20]
 801236a:	3301      	adds	r3, #1
 801236c:	617b      	str	r3, [r7, #20]
 801236e:	697b      	ldr	r3, [r7, #20]
 8012370:	781b      	ldrb	r3, [r3, #0]
 8012372:	2b20      	cmp	r3, #32
 8012374:	d903      	bls.n	801237e <get_ldnumber+0x34>
 8012376:	697b      	ldr	r3, [r7, #20]
 8012378:	781b      	ldrb	r3, [r3, #0]
 801237a:	2b3a      	cmp	r3, #58	; 0x3a
 801237c:	d1f4      	bne.n	8012368 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801237e:	697b      	ldr	r3, [r7, #20]
 8012380:	781b      	ldrb	r3, [r3, #0]
 8012382:	2b3a      	cmp	r3, #58	; 0x3a
 8012384:	d11c      	bne.n	80123c0 <get_ldnumber+0x76>
			tp = *path;
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	1c5a      	adds	r2, r3, #1
 8012390:	60fa      	str	r2, [r7, #12]
 8012392:	781b      	ldrb	r3, [r3, #0]
 8012394:	3b30      	subs	r3, #48	; 0x30
 8012396:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012398:	68bb      	ldr	r3, [r7, #8]
 801239a:	2b09      	cmp	r3, #9
 801239c:	d80e      	bhi.n	80123bc <get_ldnumber+0x72>
 801239e:	68fa      	ldr	r2, [r7, #12]
 80123a0:	697b      	ldr	r3, [r7, #20]
 80123a2:	429a      	cmp	r2, r3
 80123a4:	d10a      	bne.n	80123bc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80123a6:	68bb      	ldr	r3, [r7, #8]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d107      	bne.n	80123bc <get_ldnumber+0x72>
					vol = (int)i;
 80123ac:	68bb      	ldr	r3, [r7, #8]
 80123ae:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80123b0:	697b      	ldr	r3, [r7, #20]
 80123b2:	3301      	adds	r3, #1
 80123b4:	617b      	str	r3, [r7, #20]
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	697a      	ldr	r2, [r7, #20]
 80123ba:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80123bc:	693b      	ldr	r3, [r7, #16]
 80123be:	e002      	b.n	80123c6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80123c0:	2300      	movs	r3, #0
 80123c2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80123c4:	693b      	ldr	r3, [r7, #16]
}
 80123c6:	4618      	mov	r0, r3
 80123c8:	371c      	adds	r7, #28
 80123ca:	46bd      	mov	sp, r7
 80123cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d0:	4770      	bx	lr
	...

080123d4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80123d4:	b580      	push	{r7, lr}
 80123d6:	b082      	sub	sp, #8
 80123d8:	af00      	add	r7, sp, #0
 80123da:	6078      	str	r0, [r7, #4]
 80123dc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	2200      	movs	r2, #0
 80123e2:	70da      	strb	r2, [r3, #3]
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	f04f 32ff 	mov.w	r2, #4294967295
 80123ea:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80123ec:	6839      	ldr	r1, [r7, #0]
 80123ee:	6878      	ldr	r0, [r7, #4]
 80123f0:	f7ff f800 	bl	80113f4 <move_window>
 80123f4:	4603      	mov	r3, r0
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d001      	beq.n	80123fe <check_fs+0x2a>
 80123fa:	2304      	movs	r3, #4
 80123fc:	e038      	b.n	8012470 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	3334      	adds	r3, #52	; 0x34
 8012402:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012406:	4618      	mov	r0, r3
 8012408:	f7fe fd12 	bl	8010e30 <ld_word>
 801240c:	4603      	mov	r3, r0
 801240e:	461a      	mov	r2, r3
 8012410:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012414:	429a      	cmp	r2, r3
 8012416:	d001      	beq.n	801241c <check_fs+0x48>
 8012418:	2303      	movs	r3, #3
 801241a:	e029      	b.n	8012470 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012422:	2be9      	cmp	r3, #233	; 0xe9
 8012424:	d009      	beq.n	801243a <check_fs+0x66>
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801242c:	2beb      	cmp	r3, #235	; 0xeb
 801242e:	d11e      	bne.n	801246e <check_fs+0x9a>
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8012436:	2b90      	cmp	r3, #144	; 0x90
 8012438:	d119      	bne.n	801246e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	3334      	adds	r3, #52	; 0x34
 801243e:	3336      	adds	r3, #54	; 0x36
 8012440:	4618      	mov	r0, r3
 8012442:	f7fe fd0d 	bl	8010e60 <ld_dword>
 8012446:	4603      	mov	r3, r0
 8012448:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801244c:	4a0a      	ldr	r2, [pc, #40]	; (8012478 <check_fs+0xa4>)
 801244e:	4293      	cmp	r3, r2
 8012450:	d101      	bne.n	8012456 <check_fs+0x82>
 8012452:	2300      	movs	r3, #0
 8012454:	e00c      	b.n	8012470 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	3334      	adds	r3, #52	; 0x34
 801245a:	3352      	adds	r3, #82	; 0x52
 801245c:	4618      	mov	r0, r3
 801245e:	f7fe fcff 	bl	8010e60 <ld_dword>
 8012462:	4603      	mov	r3, r0
 8012464:	4a05      	ldr	r2, [pc, #20]	; (801247c <check_fs+0xa8>)
 8012466:	4293      	cmp	r3, r2
 8012468:	d101      	bne.n	801246e <check_fs+0x9a>
 801246a:	2300      	movs	r3, #0
 801246c:	e000      	b.n	8012470 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801246e:	2302      	movs	r3, #2
}
 8012470:	4618      	mov	r0, r3
 8012472:	3708      	adds	r7, #8
 8012474:	46bd      	mov	sp, r7
 8012476:	bd80      	pop	{r7, pc}
 8012478:	00544146 	.word	0x00544146
 801247c:	33544146 	.word	0x33544146

08012480 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012480:	b580      	push	{r7, lr}
 8012482:	b096      	sub	sp, #88	; 0x58
 8012484:	af00      	add	r7, sp, #0
 8012486:	60f8      	str	r0, [r7, #12]
 8012488:	60b9      	str	r1, [r7, #8]
 801248a:	4613      	mov	r3, r2
 801248c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801248e:	68bb      	ldr	r3, [r7, #8]
 8012490:	2200      	movs	r2, #0
 8012492:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012494:	68f8      	ldr	r0, [r7, #12]
 8012496:	f7ff ff58 	bl	801234a <get_ldnumber>
 801249a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801249c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801249e:	2b00      	cmp	r3, #0
 80124a0:	da01      	bge.n	80124a6 <find_volume+0x26>
 80124a2:	230b      	movs	r3, #11
 80124a4:	e235      	b.n	8012912 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80124a6:	4aa5      	ldr	r2, [pc, #660]	; (801273c <find_volume+0x2bc>)
 80124a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80124ae:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80124b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d101      	bne.n	80124ba <find_volume+0x3a>
 80124b6:	230c      	movs	r3, #12
 80124b8:	e22b      	b.n	8012912 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 80124ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80124bc:	f7fe fdb8 	bl	8011030 <lock_fs>
 80124c0:	4603      	mov	r3, r0
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d101      	bne.n	80124ca <find_volume+0x4a>
 80124c6:	230f      	movs	r3, #15
 80124c8:	e223      	b.n	8012912 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 80124ca:	68bb      	ldr	r3, [r7, #8]
 80124cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80124ce:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80124d0:	79fb      	ldrb	r3, [r7, #7]
 80124d2:	f023 0301 	bic.w	r3, r3, #1
 80124d6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80124d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124da:	781b      	ldrb	r3, [r3, #0]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d01a      	beq.n	8012516 <find_volume+0x96>
		stat = disk_status(fs->drv);
 80124e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124e2:	785b      	ldrb	r3, [r3, #1]
 80124e4:	4618      	mov	r0, r3
 80124e6:	f7fe fc05 	bl	8010cf4 <disk_status>
 80124ea:	4603      	mov	r3, r0
 80124ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80124f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80124f4:	f003 0301 	and.w	r3, r3, #1
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d10c      	bne.n	8012516 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80124fc:	79fb      	ldrb	r3, [r7, #7]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d007      	beq.n	8012512 <find_volume+0x92>
 8012502:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012506:	f003 0304 	and.w	r3, r3, #4
 801250a:	2b00      	cmp	r3, #0
 801250c:	d001      	beq.n	8012512 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 801250e:	230a      	movs	r3, #10
 8012510:	e1ff      	b.n	8012912 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8012512:	2300      	movs	r3, #0
 8012514:	e1fd      	b.n	8012912 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012518:	2200      	movs	r2, #0
 801251a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801251c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801251e:	b2da      	uxtb	r2, r3
 8012520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012522:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012526:	785b      	ldrb	r3, [r3, #1]
 8012528:	4618      	mov	r0, r3
 801252a:	f7fe fbfd 	bl	8010d28 <disk_initialize>
 801252e:	4603      	mov	r3, r0
 8012530:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012534:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012538:	f003 0301 	and.w	r3, r3, #1
 801253c:	2b00      	cmp	r3, #0
 801253e:	d001      	beq.n	8012544 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012540:	2303      	movs	r3, #3
 8012542:	e1e6      	b.n	8012912 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012544:	79fb      	ldrb	r3, [r7, #7]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d007      	beq.n	801255a <find_volume+0xda>
 801254a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801254e:	f003 0304 	and.w	r3, r3, #4
 8012552:	2b00      	cmp	r3, #0
 8012554:	d001      	beq.n	801255a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8012556:	230a      	movs	r3, #10
 8012558:	e1db      	b.n	8012912 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801255a:	2300      	movs	r3, #0
 801255c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801255e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012560:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012562:	f7ff ff37 	bl	80123d4 <check_fs>
 8012566:	4603      	mov	r3, r0
 8012568:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801256c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012570:	2b02      	cmp	r3, #2
 8012572:	d149      	bne.n	8012608 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012574:	2300      	movs	r3, #0
 8012576:	643b      	str	r3, [r7, #64]	; 0x40
 8012578:	e01e      	b.n	80125b8 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801257a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801257c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012582:	011b      	lsls	r3, r3, #4
 8012584:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012588:	4413      	add	r3, r2
 801258a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801258c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801258e:	3304      	adds	r3, #4
 8012590:	781b      	ldrb	r3, [r3, #0]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d006      	beq.n	80125a4 <find_volume+0x124>
 8012596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012598:	3308      	adds	r3, #8
 801259a:	4618      	mov	r0, r3
 801259c:	f7fe fc60 	bl	8010e60 <ld_dword>
 80125a0:	4602      	mov	r2, r0
 80125a2:	e000      	b.n	80125a6 <find_volume+0x126>
 80125a4:	2200      	movs	r2, #0
 80125a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125a8:	009b      	lsls	r3, r3, #2
 80125aa:	3358      	adds	r3, #88	; 0x58
 80125ac:	443b      	add	r3, r7
 80125ae:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80125b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125b4:	3301      	adds	r3, #1
 80125b6:	643b      	str	r3, [r7, #64]	; 0x40
 80125b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125ba:	2b03      	cmp	r3, #3
 80125bc:	d9dd      	bls.n	801257a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80125be:	2300      	movs	r3, #0
 80125c0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80125c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d002      	beq.n	80125ce <find_volume+0x14e>
 80125c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125ca:	3b01      	subs	r3, #1
 80125cc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80125ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125d0:	009b      	lsls	r3, r3, #2
 80125d2:	3358      	adds	r3, #88	; 0x58
 80125d4:	443b      	add	r3, r7
 80125d6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80125da:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80125dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d005      	beq.n	80125ee <find_volume+0x16e>
 80125e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80125e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80125e6:	f7ff fef5 	bl	80123d4 <check_fs>
 80125ea:	4603      	mov	r3, r0
 80125ec:	e000      	b.n	80125f0 <find_volume+0x170>
 80125ee:	2303      	movs	r3, #3
 80125f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80125f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80125f8:	2b01      	cmp	r3, #1
 80125fa:	d905      	bls.n	8012608 <find_volume+0x188>
 80125fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125fe:	3301      	adds	r3, #1
 8012600:	643b      	str	r3, [r7, #64]	; 0x40
 8012602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012604:	2b03      	cmp	r3, #3
 8012606:	d9e2      	bls.n	80125ce <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012608:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801260c:	2b04      	cmp	r3, #4
 801260e:	d101      	bne.n	8012614 <find_volume+0x194>
 8012610:	2301      	movs	r3, #1
 8012612:	e17e      	b.n	8012912 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012614:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012618:	2b01      	cmp	r3, #1
 801261a:	d901      	bls.n	8012620 <find_volume+0x1a0>
 801261c:	230d      	movs	r3, #13
 801261e:	e178      	b.n	8012912 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012622:	3334      	adds	r3, #52	; 0x34
 8012624:	330b      	adds	r3, #11
 8012626:	4618      	mov	r0, r3
 8012628:	f7fe fc02 	bl	8010e30 <ld_word>
 801262c:	4603      	mov	r3, r0
 801262e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012632:	d001      	beq.n	8012638 <find_volume+0x1b8>
 8012634:	230d      	movs	r3, #13
 8012636:	e16c      	b.n	8012912 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801263a:	3334      	adds	r3, #52	; 0x34
 801263c:	3316      	adds	r3, #22
 801263e:	4618      	mov	r0, r3
 8012640:	f7fe fbf6 	bl	8010e30 <ld_word>
 8012644:	4603      	mov	r3, r0
 8012646:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801264a:	2b00      	cmp	r3, #0
 801264c:	d106      	bne.n	801265c <find_volume+0x1dc>
 801264e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012650:	3334      	adds	r3, #52	; 0x34
 8012652:	3324      	adds	r3, #36	; 0x24
 8012654:	4618      	mov	r0, r3
 8012656:	f7fe fc03 	bl	8010e60 <ld_dword>
 801265a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801265c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801265e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012660:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012664:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8012668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801266a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801266c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801266e:	789b      	ldrb	r3, [r3, #2]
 8012670:	2b01      	cmp	r3, #1
 8012672:	d005      	beq.n	8012680 <find_volume+0x200>
 8012674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012676:	789b      	ldrb	r3, [r3, #2]
 8012678:	2b02      	cmp	r3, #2
 801267a:	d001      	beq.n	8012680 <find_volume+0x200>
 801267c:	230d      	movs	r3, #13
 801267e:	e148      	b.n	8012912 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012682:	789b      	ldrb	r3, [r3, #2]
 8012684:	461a      	mov	r2, r3
 8012686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012688:	fb02 f303 	mul.w	r3, r2, r3
 801268c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801268e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012690:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012694:	b29a      	uxth	r2, r3
 8012696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012698:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801269a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801269c:	895b      	ldrh	r3, [r3, #10]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d008      	beq.n	80126b4 <find_volume+0x234>
 80126a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126a4:	895b      	ldrh	r3, [r3, #10]
 80126a6:	461a      	mov	r2, r3
 80126a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126aa:	895b      	ldrh	r3, [r3, #10]
 80126ac:	3b01      	subs	r3, #1
 80126ae:	4013      	ands	r3, r2
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d001      	beq.n	80126b8 <find_volume+0x238>
 80126b4:	230d      	movs	r3, #13
 80126b6:	e12c      	b.n	8012912 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80126b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ba:	3334      	adds	r3, #52	; 0x34
 80126bc:	3311      	adds	r3, #17
 80126be:	4618      	mov	r0, r3
 80126c0:	f7fe fbb6 	bl	8010e30 <ld_word>
 80126c4:	4603      	mov	r3, r0
 80126c6:	461a      	mov	r2, r3
 80126c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ca:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80126cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ce:	891b      	ldrh	r3, [r3, #8]
 80126d0:	f003 030f 	and.w	r3, r3, #15
 80126d4:	b29b      	uxth	r3, r3
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d001      	beq.n	80126de <find_volume+0x25e>
 80126da:	230d      	movs	r3, #13
 80126dc:	e119      	b.n	8012912 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80126de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126e0:	3334      	adds	r3, #52	; 0x34
 80126e2:	3313      	adds	r3, #19
 80126e4:	4618      	mov	r0, r3
 80126e6:	f7fe fba3 	bl	8010e30 <ld_word>
 80126ea:	4603      	mov	r3, r0
 80126ec:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80126ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d106      	bne.n	8012702 <find_volume+0x282>
 80126f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126f6:	3334      	adds	r3, #52	; 0x34
 80126f8:	3320      	adds	r3, #32
 80126fa:	4618      	mov	r0, r3
 80126fc:	f7fe fbb0 	bl	8010e60 <ld_dword>
 8012700:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012704:	3334      	adds	r3, #52	; 0x34
 8012706:	330e      	adds	r3, #14
 8012708:	4618      	mov	r0, r3
 801270a:	f7fe fb91 	bl	8010e30 <ld_word>
 801270e:	4603      	mov	r3, r0
 8012710:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012712:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012714:	2b00      	cmp	r3, #0
 8012716:	d101      	bne.n	801271c <find_volume+0x29c>
 8012718:	230d      	movs	r3, #13
 801271a:	e0fa      	b.n	8012912 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801271c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801271e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012720:	4413      	add	r3, r2
 8012722:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012724:	8912      	ldrh	r2, [r2, #8]
 8012726:	0912      	lsrs	r2, r2, #4
 8012728:	b292      	uxth	r2, r2
 801272a:	4413      	add	r3, r2
 801272c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801272e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012732:	429a      	cmp	r2, r3
 8012734:	d204      	bcs.n	8012740 <find_volume+0x2c0>
 8012736:	230d      	movs	r3, #13
 8012738:	e0eb      	b.n	8012912 <find_volume+0x492>
 801273a:	bf00      	nop
 801273c:	2000321c 	.word	0x2000321c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012740:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012744:	1ad3      	subs	r3, r2, r3
 8012746:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012748:	8952      	ldrh	r2, [r2, #10]
 801274a:	fbb3 f3f2 	udiv	r3, r3, r2
 801274e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012752:	2b00      	cmp	r3, #0
 8012754:	d101      	bne.n	801275a <find_volume+0x2da>
 8012756:	230d      	movs	r3, #13
 8012758:	e0db      	b.n	8012912 <find_volume+0x492>
		fmt = FS_FAT32;
 801275a:	2303      	movs	r3, #3
 801275c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012762:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012766:	4293      	cmp	r3, r2
 8012768:	d802      	bhi.n	8012770 <find_volume+0x2f0>
 801276a:	2302      	movs	r3, #2
 801276c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012772:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012776:	4293      	cmp	r3, r2
 8012778:	d802      	bhi.n	8012780 <find_volume+0x300>
 801277a:	2301      	movs	r3, #1
 801277c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012782:	1c9a      	adds	r2, r3, #2
 8012784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012786:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8012788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801278a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801278c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801278e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012792:	441a      	add	r2, r3
 8012794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012796:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8012798:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801279a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801279c:	441a      	add	r2, r3
 801279e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127a0:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80127a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80127a6:	2b03      	cmp	r3, #3
 80127a8:	d11e      	bne.n	80127e8 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80127aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127ac:	3334      	adds	r3, #52	; 0x34
 80127ae:	332a      	adds	r3, #42	; 0x2a
 80127b0:	4618      	mov	r0, r3
 80127b2:	f7fe fb3d 	bl	8010e30 <ld_word>
 80127b6:	4603      	mov	r3, r0
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d001      	beq.n	80127c0 <find_volume+0x340>
 80127bc:	230d      	movs	r3, #13
 80127be:	e0a8      	b.n	8012912 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80127c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127c2:	891b      	ldrh	r3, [r3, #8]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d001      	beq.n	80127cc <find_volume+0x34c>
 80127c8:	230d      	movs	r3, #13
 80127ca:	e0a2      	b.n	8012912 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80127cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127ce:	3334      	adds	r3, #52	; 0x34
 80127d0:	332c      	adds	r3, #44	; 0x2c
 80127d2:	4618      	mov	r0, r3
 80127d4:	f7fe fb44 	bl	8010e60 <ld_dword>
 80127d8:	4602      	mov	r2, r0
 80127da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127dc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80127de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127e0:	699b      	ldr	r3, [r3, #24]
 80127e2:	009b      	lsls	r3, r3, #2
 80127e4:	647b      	str	r3, [r7, #68]	; 0x44
 80127e6:	e01f      	b.n	8012828 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80127e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127ea:	891b      	ldrh	r3, [r3, #8]
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d101      	bne.n	80127f4 <find_volume+0x374>
 80127f0:	230d      	movs	r3, #13
 80127f2:	e08e      	b.n	8012912 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80127f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80127f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80127fa:	441a      	add	r2, r3
 80127fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127fe:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012800:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012804:	2b02      	cmp	r3, #2
 8012806:	d103      	bne.n	8012810 <find_volume+0x390>
 8012808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801280a:	699b      	ldr	r3, [r3, #24]
 801280c:	005b      	lsls	r3, r3, #1
 801280e:	e00a      	b.n	8012826 <find_volume+0x3a6>
 8012810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012812:	699a      	ldr	r2, [r3, #24]
 8012814:	4613      	mov	r3, r2
 8012816:	005b      	lsls	r3, r3, #1
 8012818:	4413      	add	r3, r2
 801281a:	085a      	lsrs	r2, r3, #1
 801281c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801281e:	699b      	ldr	r3, [r3, #24]
 8012820:	f003 0301 	and.w	r3, r3, #1
 8012824:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012826:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801282a:	69da      	ldr	r2, [r3, #28]
 801282c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801282e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8012832:	0a5b      	lsrs	r3, r3, #9
 8012834:	429a      	cmp	r2, r3
 8012836:	d201      	bcs.n	801283c <find_volume+0x3bc>
 8012838:	230d      	movs	r3, #13
 801283a:	e06a      	b.n	8012912 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801283c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801283e:	f04f 32ff 	mov.w	r2, #4294967295
 8012842:	615a      	str	r2, [r3, #20]
 8012844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012846:	695a      	ldr	r2, [r3, #20]
 8012848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801284a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801284c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801284e:	2280      	movs	r2, #128	; 0x80
 8012850:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012852:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012856:	2b03      	cmp	r3, #3
 8012858:	d149      	bne.n	80128ee <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801285a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801285c:	3334      	adds	r3, #52	; 0x34
 801285e:	3330      	adds	r3, #48	; 0x30
 8012860:	4618      	mov	r0, r3
 8012862:	f7fe fae5 	bl	8010e30 <ld_word>
 8012866:	4603      	mov	r3, r0
 8012868:	2b01      	cmp	r3, #1
 801286a:	d140      	bne.n	80128ee <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 801286c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801286e:	3301      	adds	r3, #1
 8012870:	4619      	mov	r1, r3
 8012872:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012874:	f7fe fdbe 	bl	80113f4 <move_window>
 8012878:	4603      	mov	r3, r0
 801287a:	2b00      	cmp	r3, #0
 801287c:	d137      	bne.n	80128ee <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 801287e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012880:	2200      	movs	r2, #0
 8012882:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012886:	3334      	adds	r3, #52	; 0x34
 8012888:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801288c:	4618      	mov	r0, r3
 801288e:	f7fe facf 	bl	8010e30 <ld_word>
 8012892:	4603      	mov	r3, r0
 8012894:	461a      	mov	r2, r3
 8012896:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801289a:	429a      	cmp	r2, r3
 801289c:	d127      	bne.n	80128ee <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801289e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128a0:	3334      	adds	r3, #52	; 0x34
 80128a2:	4618      	mov	r0, r3
 80128a4:	f7fe fadc 	bl	8010e60 <ld_dword>
 80128a8:	4603      	mov	r3, r0
 80128aa:	4a1c      	ldr	r2, [pc, #112]	; (801291c <find_volume+0x49c>)
 80128ac:	4293      	cmp	r3, r2
 80128ae:	d11e      	bne.n	80128ee <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80128b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128b2:	3334      	adds	r3, #52	; 0x34
 80128b4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80128b8:	4618      	mov	r0, r3
 80128ba:	f7fe fad1 	bl	8010e60 <ld_dword>
 80128be:	4603      	mov	r3, r0
 80128c0:	4a17      	ldr	r2, [pc, #92]	; (8012920 <find_volume+0x4a0>)
 80128c2:	4293      	cmp	r3, r2
 80128c4:	d113      	bne.n	80128ee <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80128c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128c8:	3334      	adds	r3, #52	; 0x34
 80128ca:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80128ce:	4618      	mov	r0, r3
 80128d0:	f7fe fac6 	bl	8010e60 <ld_dword>
 80128d4:	4602      	mov	r2, r0
 80128d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128d8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80128da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128dc:	3334      	adds	r3, #52	; 0x34
 80128de:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80128e2:	4618      	mov	r0, r3
 80128e4:	f7fe fabc 	bl	8010e60 <ld_dword>
 80128e8:	4602      	mov	r2, r0
 80128ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128ec:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80128ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128f0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80128f4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80128f6:	4b0b      	ldr	r3, [pc, #44]	; (8012924 <find_volume+0x4a4>)
 80128f8:	881b      	ldrh	r3, [r3, #0]
 80128fa:	3301      	adds	r3, #1
 80128fc:	b29a      	uxth	r2, r3
 80128fe:	4b09      	ldr	r3, [pc, #36]	; (8012924 <find_volume+0x4a4>)
 8012900:	801a      	strh	r2, [r3, #0]
 8012902:	4b08      	ldr	r3, [pc, #32]	; (8012924 <find_volume+0x4a4>)
 8012904:	881a      	ldrh	r2, [r3, #0]
 8012906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012908:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801290a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801290c:	f7fe fd0a 	bl	8011324 <clear_lock>
#endif
	return FR_OK;
 8012910:	2300      	movs	r3, #0
}
 8012912:	4618      	mov	r0, r3
 8012914:	3758      	adds	r7, #88	; 0x58
 8012916:	46bd      	mov	sp, r7
 8012918:	bd80      	pop	{r7, pc}
 801291a:	bf00      	nop
 801291c:	41615252 	.word	0x41615252
 8012920:	61417272 	.word	0x61417272
 8012924:	20003220 	.word	0x20003220

08012928 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012928:	b580      	push	{r7, lr}
 801292a:	b084      	sub	sp, #16
 801292c:	af00      	add	r7, sp, #0
 801292e:	6078      	str	r0, [r7, #4]
 8012930:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012932:	2309      	movs	r3, #9
 8012934:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	2b00      	cmp	r3, #0
 801293a:	d02e      	beq.n	801299a <validate+0x72>
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d02a      	beq.n	801299a <validate+0x72>
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	781b      	ldrb	r3, [r3, #0]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d025      	beq.n	801299a <validate+0x72>
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	889a      	ldrh	r2, [r3, #4]
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	88db      	ldrh	r3, [r3, #6]
 8012958:	429a      	cmp	r2, r3
 801295a:	d11e      	bne.n	801299a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	4618      	mov	r0, r3
 8012962:	f7fe fb65 	bl	8011030 <lock_fs>
 8012966:	4603      	mov	r3, r0
 8012968:	2b00      	cmp	r3, #0
 801296a:	d014      	beq.n	8012996 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	785b      	ldrb	r3, [r3, #1]
 8012972:	4618      	mov	r0, r3
 8012974:	f7fe f9be 	bl	8010cf4 <disk_status>
 8012978:	4603      	mov	r3, r0
 801297a:	f003 0301 	and.w	r3, r3, #1
 801297e:	2b00      	cmp	r3, #0
 8012980:	d102      	bne.n	8012988 <validate+0x60>
				res = FR_OK;
 8012982:	2300      	movs	r3, #0
 8012984:	73fb      	strb	r3, [r7, #15]
 8012986:	e008      	b.n	801299a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	2100      	movs	r1, #0
 801298e:	4618      	mov	r0, r3
 8012990:	f7fe fb64 	bl	801105c <unlock_fs>
 8012994:	e001      	b.n	801299a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8012996:	230f      	movs	r3, #15
 8012998:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801299a:	7bfb      	ldrb	r3, [r7, #15]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d102      	bne.n	80129a6 <validate+0x7e>
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	e000      	b.n	80129a8 <validate+0x80>
 80129a6:	2300      	movs	r3, #0
 80129a8:	683a      	ldr	r2, [r7, #0]
 80129aa:	6013      	str	r3, [r2, #0]
	return res;
 80129ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80129ae:	4618      	mov	r0, r3
 80129b0:	3710      	adds	r7, #16
 80129b2:	46bd      	mov	sp, r7
 80129b4:	bd80      	pop	{r7, pc}
	...

080129b8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80129b8:	b580      	push	{r7, lr}
 80129ba:	b088      	sub	sp, #32
 80129bc:	af00      	add	r7, sp, #0
 80129be:	60f8      	str	r0, [r7, #12]
 80129c0:	60b9      	str	r1, [r7, #8]
 80129c2:	4613      	mov	r3, r2
 80129c4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80129c6:	68bb      	ldr	r3, [r7, #8]
 80129c8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80129ca:	f107 0310 	add.w	r3, r7, #16
 80129ce:	4618      	mov	r0, r3
 80129d0:	f7ff fcbb 	bl	801234a <get_ldnumber>
 80129d4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80129d6:	69fb      	ldr	r3, [r7, #28]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	da01      	bge.n	80129e0 <f_mount+0x28>
 80129dc:	230b      	movs	r3, #11
 80129de:	e048      	b.n	8012a72 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80129e0:	4a26      	ldr	r2, [pc, #152]	; (8012a7c <f_mount+0xc4>)
 80129e2:	69fb      	ldr	r3, [r7, #28]
 80129e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80129e8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80129ea:	69bb      	ldr	r3, [r7, #24]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d00f      	beq.n	8012a10 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80129f0:	69b8      	ldr	r0, [r7, #24]
 80129f2:	f7fe fc97 	bl	8011324 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80129f6:	69bb      	ldr	r3, [r7, #24]
 80129f8:	68db      	ldr	r3, [r3, #12]
 80129fa:	4618      	mov	r0, r3
 80129fc:	f001 fc03 	bl	8014206 <ff_del_syncobj>
 8012a00:	4603      	mov	r3, r0
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d101      	bne.n	8012a0a <f_mount+0x52>
 8012a06:	2302      	movs	r3, #2
 8012a08:	e033      	b.n	8012a72 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012a0a:	69bb      	ldr	r3, [r7, #24]
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d00f      	beq.n	8012a36 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	2200      	movs	r2, #0
 8012a1a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8012a1c:	69fb      	ldr	r3, [r7, #28]
 8012a1e:	b2da      	uxtb	r2, r3
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	330c      	adds	r3, #12
 8012a24:	4619      	mov	r1, r3
 8012a26:	4610      	mov	r0, r2
 8012a28:	f001 fbcd 	bl	80141c6 <ff_cre_syncobj>
 8012a2c:	4603      	mov	r3, r0
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d101      	bne.n	8012a36 <f_mount+0x7e>
 8012a32:	2302      	movs	r3, #2
 8012a34:	e01d      	b.n	8012a72 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012a36:	68fa      	ldr	r2, [r7, #12]
 8012a38:	4910      	ldr	r1, [pc, #64]	; (8012a7c <f_mount+0xc4>)
 8012a3a:	69fb      	ldr	r3, [r7, #28]
 8012a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d002      	beq.n	8012a4c <f_mount+0x94>
 8012a46:	79fb      	ldrb	r3, [r7, #7]
 8012a48:	2b01      	cmp	r3, #1
 8012a4a:	d001      	beq.n	8012a50 <f_mount+0x98>
 8012a4c:	2300      	movs	r3, #0
 8012a4e:	e010      	b.n	8012a72 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012a50:	f107 010c 	add.w	r1, r7, #12
 8012a54:	f107 0308 	add.w	r3, r7, #8
 8012a58:	2200      	movs	r2, #0
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	f7ff fd10 	bl	8012480 <find_volume>
 8012a60:	4603      	mov	r3, r0
 8012a62:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	7dfa      	ldrb	r2, [r7, #23]
 8012a68:	4611      	mov	r1, r2
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	f7fe faf6 	bl	801105c <unlock_fs>
 8012a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a72:	4618      	mov	r0, r3
 8012a74:	3720      	adds	r7, #32
 8012a76:	46bd      	mov	sp, r7
 8012a78:	bd80      	pop	{r7, pc}
 8012a7a:	bf00      	nop
 8012a7c:	2000321c 	.word	0x2000321c

08012a80 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b098      	sub	sp, #96	; 0x60
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	60f8      	str	r0, [r7, #12]
 8012a88:	60b9      	str	r1, [r7, #8]
 8012a8a:	4613      	mov	r3, r2
 8012a8c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d101      	bne.n	8012a98 <f_open+0x18>
 8012a94:	2309      	movs	r3, #9
 8012a96:	e1b4      	b.n	8012e02 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012a98:	79fb      	ldrb	r3, [r7, #7]
 8012a9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012a9e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012aa0:	79fa      	ldrb	r2, [r7, #7]
 8012aa2:	f107 0110 	add.w	r1, r7, #16
 8012aa6:	f107 0308 	add.w	r3, r7, #8
 8012aaa:	4618      	mov	r0, r3
 8012aac:	f7ff fce8 	bl	8012480 <find_volume>
 8012ab0:	4603      	mov	r3, r0
 8012ab2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8012ab6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	f040 8191 	bne.w	8012de2 <f_open+0x362>
		dj.obj.fs = fs;
 8012ac0:	693b      	ldr	r3, [r7, #16]
 8012ac2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012ac4:	68ba      	ldr	r2, [r7, #8]
 8012ac6:	f107 0314 	add.w	r3, r7, #20
 8012aca:	4611      	mov	r1, r2
 8012acc:	4618      	mov	r0, r3
 8012ace:	f7ff fbcb 	bl	8012268 <follow_path>
 8012ad2:	4603      	mov	r3, r0
 8012ad4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012ad8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d11a      	bne.n	8012b16 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012ae0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012ae4:	b25b      	sxtb	r3, r3
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	da03      	bge.n	8012af2 <f_open+0x72>
				res = FR_INVALID_NAME;
 8012aea:	2306      	movs	r3, #6
 8012aec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012af0:	e011      	b.n	8012b16 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012af2:	79fb      	ldrb	r3, [r7, #7]
 8012af4:	f023 0301 	bic.w	r3, r3, #1
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	bf14      	ite	ne
 8012afc:	2301      	movne	r3, #1
 8012afe:	2300      	moveq	r3, #0
 8012b00:	b2db      	uxtb	r3, r3
 8012b02:	461a      	mov	r2, r3
 8012b04:	f107 0314 	add.w	r3, r7, #20
 8012b08:	4611      	mov	r1, r2
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	f7fe fac2 	bl	8011094 <chk_lock>
 8012b10:	4603      	mov	r3, r0
 8012b12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012b16:	79fb      	ldrb	r3, [r7, #7]
 8012b18:	f003 031c 	and.w	r3, r3, #28
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d07f      	beq.n	8012c20 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8012b20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d017      	beq.n	8012b58 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012b28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012b2c:	2b04      	cmp	r3, #4
 8012b2e:	d10e      	bne.n	8012b4e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012b30:	f7fe fb0c 	bl	801114c <enq_lock>
 8012b34:	4603      	mov	r3, r0
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d006      	beq.n	8012b48 <f_open+0xc8>
 8012b3a:	f107 0314 	add.w	r3, r7, #20
 8012b3e:	4618      	mov	r0, r3
 8012b40:	f7ff fa4e 	bl	8011fe0 <dir_register>
 8012b44:	4603      	mov	r3, r0
 8012b46:	e000      	b.n	8012b4a <f_open+0xca>
 8012b48:	2312      	movs	r3, #18
 8012b4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012b4e:	79fb      	ldrb	r3, [r7, #7]
 8012b50:	f043 0308 	orr.w	r3, r3, #8
 8012b54:	71fb      	strb	r3, [r7, #7]
 8012b56:	e010      	b.n	8012b7a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012b58:	7ebb      	ldrb	r3, [r7, #26]
 8012b5a:	f003 0311 	and.w	r3, r3, #17
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d003      	beq.n	8012b6a <f_open+0xea>
					res = FR_DENIED;
 8012b62:	2307      	movs	r3, #7
 8012b64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012b68:	e007      	b.n	8012b7a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012b6a:	79fb      	ldrb	r3, [r7, #7]
 8012b6c:	f003 0304 	and.w	r3, r3, #4
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d002      	beq.n	8012b7a <f_open+0xfa>
 8012b74:	2308      	movs	r3, #8
 8012b76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012b7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d168      	bne.n	8012c54 <f_open+0x1d4>
 8012b82:	79fb      	ldrb	r3, [r7, #7]
 8012b84:	f003 0308 	and.w	r3, r3, #8
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d063      	beq.n	8012c54 <f_open+0x1d4>
				dw = GET_FATTIME();
 8012b8c:	f7fa fb9a 	bl	800d2c4 <get_fattime>
 8012b90:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b94:	330e      	adds	r3, #14
 8012b96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012b98:	4618      	mov	r0, r3
 8012b9a:	f7fe f99f 	bl	8010edc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ba0:	3316      	adds	r3, #22
 8012ba2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	f7fe f999 	bl	8010edc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bac:	330b      	adds	r3, #11
 8012bae:	2220      	movs	r2, #32
 8012bb0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012bb2:	693b      	ldr	r3, [r7, #16]
 8012bb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012bb6:	4611      	mov	r1, r2
 8012bb8:	4618      	mov	r0, r3
 8012bba:	f7ff f920 	bl	8011dfe <ld_clust>
 8012bbe:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012bc0:	693b      	ldr	r3, [r7, #16]
 8012bc2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012bc4:	2200      	movs	r2, #0
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	f7ff f938 	bl	8011e3c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bce:	331c      	adds	r3, #28
 8012bd0:	2100      	movs	r1, #0
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	f7fe f982 	bl	8010edc <st_dword>
					fs->wflag = 1;
 8012bd8:	693b      	ldr	r3, [r7, #16]
 8012bda:	2201      	movs	r2, #1
 8012bdc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d037      	beq.n	8012c54 <f_open+0x1d4>
						dw = fs->winsect;
 8012be4:	693b      	ldr	r3, [r7, #16]
 8012be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012be8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8012bea:	f107 0314 	add.w	r3, r7, #20
 8012bee:	2200      	movs	r2, #0
 8012bf0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	f7fe fe4b 	bl	801188e <remove_chain>
 8012bf8:	4603      	mov	r3, r0
 8012bfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8012bfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d126      	bne.n	8012c54 <f_open+0x1d4>
							res = move_window(fs, dw);
 8012c06:	693b      	ldr	r3, [r7, #16]
 8012c08:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	f7fe fbf2 	bl	80113f4 <move_window>
 8012c10:	4603      	mov	r3, r0
 8012c12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012c16:	693b      	ldr	r3, [r7, #16]
 8012c18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012c1a:	3a01      	subs	r2, #1
 8012c1c:	611a      	str	r2, [r3, #16]
 8012c1e:	e019      	b.n	8012c54 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012c20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d115      	bne.n	8012c54 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012c28:	7ebb      	ldrb	r3, [r7, #26]
 8012c2a:	f003 0310 	and.w	r3, r3, #16
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d003      	beq.n	8012c3a <f_open+0x1ba>
					res = FR_NO_FILE;
 8012c32:	2304      	movs	r3, #4
 8012c34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012c38:	e00c      	b.n	8012c54 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012c3a:	79fb      	ldrb	r3, [r7, #7]
 8012c3c:	f003 0302 	and.w	r3, r3, #2
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d007      	beq.n	8012c54 <f_open+0x1d4>
 8012c44:	7ebb      	ldrb	r3, [r7, #26]
 8012c46:	f003 0301 	and.w	r3, r3, #1
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d002      	beq.n	8012c54 <f_open+0x1d4>
						res = FR_DENIED;
 8012c4e:	2307      	movs	r3, #7
 8012c50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8012c54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d128      	bne.n	8012cae <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012c5c:	79fb      	ldrb	r3, [r7, #7]
 8012c5e:	f003 0308 	and.w	r3, r3, #8
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d003      	beq.n	8012c6e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8012c66:	79fb      	ldrb	r3, [r7, #7]
 8012c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c6c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012c6e:	693b      	ldr	r3, [r7, #16]
 8012c70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8012c76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012c7c:	79fb      	ldrb	r3, [r7, #7]
 8012c7e:	f023 0301 	bic.w	r3, r3, #1
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	bf14      	ite	ne
 8012c86:	2301      	movne	r3, #1
 8012c88:	2300      	moveq	r3, #0
 8012c8a:	b2db      	uxtb	r3, r3
 8012c8c:	461a      	mov	r2, r3
 8012c8e:	f107 0314 	add.w	r3, r7, #20
 8012c92:	4611      	mov	r1, r2
 8012c94:	4618      	mov	r0, r3
 8012c96:	f7fe fa7b 	bl	8011190 <inc_lock>
 8012c9a:	4602      	mov	r2, r0
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	691b      	ldr	r3, [r3, #16]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d102      	bne.n	8012cae <f_open+0x22e>
 8012ca8:	2302      	movs	r3, #2
 8012caa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012cae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	f040 8095 	bne.w	8012de2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012cb8:	693b      	ldr	r3, [r7, #16]
 8012cba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012cbc:	4611      	mov	r1, r2
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	f7ff f89d 	bl	8011dfe <ld_clust>
 8012cc4:	4602      	mov	r2, r0
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ccc:	331c      	adds	r3, #28
 8012cce:	4618      	mov	r0, r3
 8012cd0:	f7fe f8c6 	bl	8010e60 <ld_dword>
 8012cd4:	4602      	mov	r2, r0
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	2200      	movs	r2, #0
 8012cde:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012ce0:	693a      	ldr	r2, [r7, #16]
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012ce6:	693b      	ldr	r3, [r7, #16]
 8012ce8:	88da      	ldrh	r2, [r3, #6]
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	79fa      	ldrb	r2, [r7, #7]
 8012cf2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	2200      	movs	r2, #0
 8012cf8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	2200      	movs	r2, #0
 8012cfe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	2200      	movs	r2, #0
 8012d04:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	3330      	adds	r3, #48	; 0x30
 8012d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012d0e:	2100      	movs	r1, #0
 8012d10:	4618      	mov	r0, r3
 8012d12:	f7fe f930 	bl	8010f76 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012d16:	79fb      	ldrb	r3, [r7, #7]
 8012d18:	f003 0320 	and.w	r3, r3, #32
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d060      	beq.n	8012de2 <f_open+0x362>
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	68db      	ldr	r3, [r3, #12]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d05c      	beq.n	8012de2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	68da      	ldr	r2, [r3, #12]
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012d30:	693b      	ldr	r3, [r7, #16]
 8012d32:	895b      	ldrh	r3, [r3, #10]
 8012d34:	025b      	lsls	r3, r3, #9
 8012d36:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	689b      	ldr	r3, [r3, #8]
 8012d3c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	68db      	ldr	r3, [r3, #12]
 8012d42:	657b      	str	r3, [r7, #84]	; 0x54
 8012d44:	e016      	b.n	8012d74 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	f7fe fc0d 	bl	801156a <get_fat>
 8012d50:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8012d52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012d54:	2b01      	cmp	r3, #1
 8012d56:	d802      	bhi.n	8012d5e <f_open+0x2de>
 8012d58:	2302      	movs	r3, #2
 8012d5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012d5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d64:	d102      	bne.n	8012d6c <f_open+0x2ec>
 8012d66:	2301      	movs	r3, #1
 8012d68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012d6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d70:	1ad3      	subs	r3, r2, r3
 8012d72:	657b      	str	r3, [r7, #84]	; 0x54
 8012d74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d103      	bne.n	8012d84 <f_open+0x304>
 8012d7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012d7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d80:	429a      	cmp	r2, r3
 8012d82:	d8e0      	bhi.n	8012d46 <f_open+0x2c6>
				}
				fp->clust = clst;
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012d88:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012d8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d127      	bne.n	8012de2 <f_open+0x362>
 8012d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d022      	beq.n	8012de2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012d9c:	693b      	ldr	r3, [r7, #16]
 8012d9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012da0:	4618      	mov	r0, r3
 8012da2:	f7fe fbc3 	bl	801152c <clust2sect>
 8012da6:	6478      	str	r0, [r7, #68]	; 0x44
 8012da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d103      	bne.n	8012db6 <f_open+0x336>
						res = FR_INT_ERR;
 8012dae:	2302      	movs	r3, #2
 8012db0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012db4:	e015      	b.n	8012de2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012db6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012db8:	0a5a      	lsrs	r2, r3, #9
 8012dba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012dbc:	441a      	add	r2, r3
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012dc2:	693b      	ldr	r3, [r7, #16]
 8012dc4:	7858      	ldrb	r0, [r3, #1]
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	6a1a      	ldr	r2, [r3, #32]
 8012dd0:	2301      	movs	r3, #1
 8012dd2:	f7fd ffcf 	bl	8010d74 <disk_read>
 8012dd6:	4603      	mov	r3, r0
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d002      	beq.n	8012de2 <f_open+0x362>
 8012ddc:	2301      	movs	r3, #1
 8012dde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012de2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d002      	beq.n	8012df0 <f_open+0x370>
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	2200      	movs	r2, #0
 8012dee:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012df0:	693b      	ldr	r3, [r7, #16]
 8012df2:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8012df6:	4611      	mov	r1, r2
 8012df8:	4618      	mov	r0, r3
 8012dfa:	f7fe f92f 	bl	801105c <unlock_fs>
 8012dfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8012e02:	4618      	mov	r0, r3
 8012e04:	3760      	adds	r7, #96	; 0x60
 8012e06:	46bd      	mov	sp, r7
 8012e08:	bd80      	pop	{r7, pc}

08012e0a <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8012e0a:	b580      	push	{r7, lr}
 8012e0c:	b08e      	sub	sp, #56	; 0x38
 8012e0e:	af00      	add	r7, sp, #0
 8012e10:	60f8      	str	r0, [r7, #12]
 8012e12:	60b9      	str	r1, [r7, #8]
 8012e14:	607a      	str	r2, [r7, #4]
 8012e16:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8012e18:	68bb      	ldr	r3, [r7, #8]
 8012e1a:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8012e1c:	683b      	ldr	r3, [r7, #0]
 8012e1e:	2200      	movs	r2, #0
 8012e20:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	f107 0214 	add.w	r2, r7, #20
 8012e28:	4611      	mov	r1, r2
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	f7ff fd7c 	bl	8012928 <validate>
 8012e30:	4603      	mov	r3, r0
 8012e32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012e36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d107      	bne.n	8012e4e <f_read+0x44>
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	7d5b      	ldrb	r3, [r3, #21]
 8012e42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012e46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d009      	beq.n	8012e62 <f_read+0x58>
 8012e4e:	697b      	ldr	r3, [r7, #20]
 8012e50:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012e54:	4611      	mov	r1, r2
 8012e56:	4618      	mov	r0, r3
 8012e58:	f7fe f900 	bl	801105c <unlock_fs>
 8012e5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e60:	e13d      	b.n	80130de <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	7d1b      	ldrb	r3, [r3, #20]
 8012e66:	f003 0301 	and.w	r3, r3, #1
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d106      	bne.n	8012e7c <f_read+0x72>
 8012e6e:	697b      	ldr	r3, [r7, #20]
 8012e70:	2107      	movs	r1, #7
 8012e72:	4618      	mov	r0, r3
 8012e74:	f7fe f8f2 	bl	801105c <unlock_fs>
 8012e78:	2307      	movs	r3, #7
 8012e7a:	e130      	b.n	80130de <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	68da      	ldr	r2, [r3, #12]
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	699b      	ldr	r3, [r3, #24]
 8012e84:	1ad3      	subs	r3, r2, r3
 8012e86:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8012e88:	687a      	ldr	r2, [r7, #4]
 8012e8a:	6a3b      	ldr	r3, [r7, #32]
 8012e8c:	429a      	cmp	r2, r3
 8012e8e:	f240 811c 	bls.w	80130ca <f_read+0x2c0>
 8012e92:	6a3b      	ldr	r3, [r7, #32]
 8012e94:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8012e96:	e118      	b.n	80130ca <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	699b      	ldr	r3, [r3, #24]
 8012e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	f040 80e4 	bne.w	801306e <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	699b      	ldr	r3, [r3, #24]
 8012eaa:	0a5b      	lsrs	r3, r3, #9
 8012eac:	697a      	ldr	r2, [r7, #20]
 8012eae:	8952      	ldrh	r2, [r2, #10]
 8012eb0:	3a01      	subs	r2, #1
 8012eb2:	4013      	ands	r3, r2
 8012eb4:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8012eb6:	69fb      	ldr	r3, [r7, #28]
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d139      	bne.n	8012f30 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	699b      	ldr	r3, [r3, #24]
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d103      	bne.n	8012ecc <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	689b      	ldr	r3, [r3, #8]
 8012ec8:	633b      	str	r3, [r7, #48]	; 0x30
 8012eca:	e013      	b.n	8012ef4 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d007      	beq.n	8012ee4 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	699b      	ldr	r3, [r3, #24]
 8012ed8:	4619      	mov	r1, r3
 8012eda:	68f8      	ldr	r0, [r7, #12]
 8012edc:	f7fe fdd4 	bl	8011a88 <clmt_clust>
 8012ee0:	6338      	str	r0, [r7, #48]	; 0x30
 8012ee2:	e007      	b.n	8012ef4 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8012ee4:	68fa      	ldr	r2, [r7, #12]
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	69db      	ldr	r3, [r3, #28]
 8012eea:	4619      	mov	r1, r3
 8012eec:	4610      	mov	r0, r2
 8012eee:	f7fe fb3c 	bl	801156a <get_fat>
 8012ef2:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8012ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ef6:	2b01      	cmp	r3, #1
 8012ef8:	d809      	bhi.n	8012f0e <f_read+0x104>
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	2202      	movs	r2, #2
 8012efe:	755a      	strb	r2, [r3, #21]
 8012f00:	697b      	ldr	r3, [r7, #20]
 8012f02:	2102      	movs	r1, #2
 8012f04:	4618      	mov	r0, r3
 8012f06:	f7fe f8a9 	bl	801105c <unlock_fs>
 8012f0a:	2302      	movs	r3, #2
 8012f0c:	e0e7      	b.n	80130de <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f14:	d109      	bne.n	8012f2a <f_read+0x120>
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	2201      	movs	r2, #1
 8012f1a:	755a      	strb	r2, [r3, #21]
 8012f1c:	697b      	ldr	r3, [r7, #20]
 8012f1e:	2101      	movs	r1, #1
 8012f20:	4618      	mov	r0, r3
 8012f22:	f7fe f89b 	bl	801105c <unlock_fs>
 8012f26:	2301      	movs	r3, #1
 8012f28:	e0d9      	b.n	80130de <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f2e:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012f30:	697a      	ldr	r2, [r7, #20]
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	69db      	ldr	r3, [r3, #28]
 8012f36:	4619      	mov	r1, r3
 8012f38:	4610      	mov	r0, r2
 8012f3a:	f7fe faf7 	bl	801152c <clust2sect>
 8012f3e:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012f40:	69bb      	ldr	r3, [r7, #24]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d109      	bne.n	8012f5a <f_read+0x150>
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	2202      	movs	r2, #2
 8012f4a:	755a      	strb	r2, [r3, #21]
 8012f4c:	697b      	ldr	r3, [r7, #20]
 8012f4e:	2102      	movs	r1, #2
 8012f50:	4618      	mov	r0, r3
 8012f52:	f7fe f883 	bl	801105c <unlock_fs>
 8012f56:	2302      	movs	r3, #2
 8012f58:	e0c1      	b.n	80130de <f_read+0x2d4>
			sect += csect;
 8012f5a:	69ba      	ldr	r2, [r7, #24]
 8012f5c:	69fb      	ldr	r3, [r7, #28]
 8012f5e:	4413      	add	r3, r2
 8012f60:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	0a5b      	lsrs	r3, r3, #9
 8012f66:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8012f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d03e      	beq.n	8012fec <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012f6e:	69fa      	ldr	r2, [r7, #28]
 8012f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f72:	4413      	add	r3, r2
 8012f74:	697a      	ldr	r2, [r7, #20]
 8012f76:	8952      	ldrh	r2, [r2, #10]
 8012f78:	4293      	cmp	r3, r2
 8012f7a:	d905      	bls.n	8012f88 <f_read+0x17e>
					cc = fs->csize - csect;
 8012f7c:	697b      	ldr	r3, [r7, #20]
 8012f7e:	895b      	ldrh	r3, [r3, #10]
 8012f80:	461a      	mov	r2, r3
 8012f82:	69fb      	ldr	r3, [r7, #28]
 8012f84:	1ad3      	subs	r3, r2, r3
 8012f86:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012f88:	697b      	ldr	r3, [r7, #20]
 8012f8a:	7858      	ldrb	r0, [r3, #1]
 8012f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f8e:	69ba      	ldr	r2, [r7, #24]
 8012f90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012f92:	f7fd feef 	bl	8010d74 <disk_read>
 8012f96:	4603      	mov	r3, r0
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d009      	beq.n	8012fb0 <f_read+0x1a6>
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	2201      	movs	r2, #1
 8012fa0:	755a      	strb	r2, [r3, #21]
 8012fa2:	697b      	ldr	r3, [r7, #20]
 8012fa4:	2101      	movs	r1, #1
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	f7fe f858 	bl	801105c <unlock_fs>
 8012fac:	2301      	movs	r3, #1
 8012fae:	e096      	b.n	80130de <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	7d1b      	ldrb	r3, [r3, #20]
 8012fb4:	b25b      	sxtb	r3, r3
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	da14      	bge.n	8012fe4 <f_read+0x1da>
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	6a1a      	ldr	r2, [r3, #32]
 8012fbe:	69bb      	ldr	r3, [r7, #24]
 8012fc0:	1ad3      	subs	r3, r2, r3
 8012fc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012fc4:	429a      	cmp	r2, r3
 8012fc6:	d90d      	bls.n	8012fe4 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	6a1a      	ldr	r2, [r3, #32]
 8012fcc:	69bb      	ldr	r3, [r7, #24]
 8012fce:	1ad3      	subs	r3, r2, r3
 8012fd0:	025b      	lsls	r3, r3, #9
 8012fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012fd4:	18d0      	adds	r0, r2, r3
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	3330      	adds	r3, #48	; 0x30
 8012fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012fde:	4619      	mov	r1, r3
 8012fe0:	f7fd ffa8 	bl	8010f34 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8012fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fe6:	025b      	lsls	r3, r3, #9
 8012fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8012fea:	e05a      	b.n	80130a2 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	6a1b      	ldr	r3, [r3, #32]
 8012ff0:	69ba      	ldr	r2, [r7, #24]
 8012ff2:	429a      	cmp	r2, r3
 8012ff4:	d038      	beq.n	8013068 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	7d1b      	ldrb	r3, [r3, #20]
 8012ffa:	b25b      	sxtb	r3, r3
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	da1d      	bge.n	801303c <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013000:	697b      	ldr	r3, [r7, #20]
 8013002:	7858      	ldrb	r0, [r3, #1]
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	6a1a      	ldr	r2, [r3, #32]
 801300e:	2301      	movs	r3, #1
 8013010:	f7fd fed0 	bl	8010db4 <disk_write>
 8013014:	4603      	mov	r3, r0
 8013016:	2b00      	cmp	r3, #0
 8013018:	d009      	beq.n	801302e <f_read+0x224>
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	2201      	movs	r2, #1
 801301e:	755a      	strb	r2, [r3, #21]
 8013020:	697b      	ldr	r3, [r7, #20]
 8013022:	2101      	movs	r1, #1
 8013024:	4618      	mov	r0, r3
 8013026:	f7fe f819 	bl	801105c <unlock_fs>
 801302a:	2301      	movs	r3, #1
 801302c:	e057      	b.n	80130de <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	7d1b      	ldrb	r3, [r3, #20]
 8013032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013036:	b2da      	uxtb	r2, r3
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801303c:	697b      	ldr	r3, [r7, #20]
 801303e:	7858      	ldrb	r0, [r3, #1]
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013046:	2301      	movs	r3, #1
 8013048:	69ba      	ldr	r2, [r7, #24]
 801304a:	f7fd fe93 	bl	8010d74 <disk_read>
 801304e:	4603      	mov	r3, r0
 8013050:	2b00      	cmp	r3, #0
 8013052:	d009      	beq.n	8013068 <f_read+0x25e>
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	2201      	movs	r2, #1
 8013058:	755a      	strb	r2, [r3, #21]
 801305a:	697b      	ldr	r3, [r7, #20]
 801305c:	2101      	movs	r1, #1
 801305e:	4618      	mov	r0, r3
 8013060:	f7fd fffc 	bl	801105c <unlock_fs>
 8013064:	2301      	movs	r3, #1
 8013066:	e03a      	b.n	80130de <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	69ba      	ldr	r2, [r7, #24]
 801306c:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	699b      	ldr	r3, [r3, #24]
 8013072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013076:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801307a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801307c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	429a      	cmp	r2, r3
 8013082:	d901      	bls.n	8013088 <f_read+0x27e>
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	699b      	ldr	r3, [r3, #24]
 8013092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013096:	4413      	add	r3, r2
 8013098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801309a:	4619      	mov	r1, r3
 801309c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801309e:	f7fd ff49 	bl	8010f34 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80130a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80130a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130a6:	4413      	add	r3, r2
 80130a8:	627b      	str	r3, [r7, #36]	; 0x24
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	699a      	ldr	r2, [r3, #24]
 80130ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130b0:	441a      	add	r2, r3
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	619a      	str	r2, [r3, #24]
 80130b6:	683b      	ldr	r3, [r7, #0]
 80130b8:	681a      	ldr	r2, [r3, #0]
 80130ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130bc:	441a      	add	r2, r3
 80130be:	683b      	ldr	r3, [r7, #0]
 80130c0:	601a      	str	r2, [r3, #0]
 80130c2:	687a      	ldr	r2, [r7, #4]
 80130c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130c6:	1ad3      	subs	r3, r2, r3
 80130c8:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	f47f aee3 	bne.w	8012e98 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80130d2:	697b      	ldr	r3, [r7, #20]
 80130d4:	2100      	movs	r1, #0
 80130d6:	4618      	mov	r0, r3
 80130d8:	f7fd ffc0 	bl	801105c <unlock_fs>
 80130dc:	2300      	movs	r3, #0
}
 80130de:	4618      	mov	r0, r3
 80130e0:	3738      	adds	r7, #56	; 0x38
 80130e2:	46bd      	mov	sp, r7
 80130e4:	bd80      	pop	{r7, pc}

080130e6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80130e6:	b580      	push	{r7, lr}
 80130e8:	b08c      	sub	sp, #48	; 0x30
 80130ea:	af00      	add	r7, sp, #0
 80130ec:	60f8      	str	r0, [r7, #12]
 80130ee:	60b9      	str	r1, [r7, #8]
 80130f0:	607a      	str	r2, [r7, #4]
 80130f2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80130f4:	68bb      	ldr	r3, [r7, #8]
 80130f6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80130f8:	683b      	ldr	r3, [r7, #0]
 80130fa:	2200      	movs	r2, #0
 80130fc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	f107 0210 	add.w	r2, r7, #16
 8013104:	4611      	mov	r1, r2
 8013106:	4618      	mov	r0, r3
 8013108:	f7ff fc0e 	bl	8012928 <validate>
 801310c:	4603      	mov	r3, r0
 801310e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013112:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013116:	2b00      	cmp	r3, #0
 8013118:	d107      	bne.n	801312a <f_write+0x44>
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	7d5b      	ldrb	r3, [r3, #21]
 801311e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013122:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013126:	2b00      	cmp	r3, #0
 8013128:	d009      	beq.n	801313e <f_write+0x58>
 801312a:	693b      	ldr	r3, [r7, #16]
 801312c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8013130:	4611      	mov	r1, r2
 8013132:	4618      	mov	r0, r3
 8013134:	f7fd ff92 	bl	801105c <unlock_fs>
 8013138:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801313c:	e173      	b.n	8013426 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	7d1b      	ldrb	r3, [r3, #20]
 8013142:	f003 0302 	and.w	r3, r3, #2
 8013146:	2b00      	cmp	r3, #0
 8013148:	d106      	bne.n	8013158 <f_write+0x72>
 801314a:	693b      	ldr	r3, [r7, #16]
 801314c:	2107      	movs	r1, #7
 801314e:	4618      	mov	r0, r3
 8013150:	f7fd ff84 	bl	801105c <unlock_fs>
 8013154:	2307      	movs	r3, #7
 8013156:	e166      	b.n	8013426 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	699a      	ldr	r2, [r3, #24]
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	441a      	add	r2, r3
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	699b      	ldr	r3, [r3, #24]
 8013164:	429a      	cmp	r2, r3
 8013166:	f080 814b 	bcs.w	8013400 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	699b      	ldr	r3, [r3, #24]
 801316e:	43db      	mvns	r3, r3
 8013170:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013172:	e145      	b.n	8013400 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	699b      	ldr	r3, [r3, #24]
 8013178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801317c:	2b00      	cmp	r3, #0
 801317e:	f040 8101 	bne.w	8013384 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	699b      	ldr	r3, [r3, #24]
 8013186:	0a5b      	lsrs	r3, r3, #9
 8013188:	693a      	ldr	r2, [r7, #16]
 801318a:	8952      	ldrh	r2, [r2, #10]
 801318c:	3a01      	subs	r2, #1
 801318e:	4013      	ands	r3, r2
 8013190:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013192:	69bb      	ldr	r3, [r7, #24]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d14d      	bne.n	8013234 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	699b      	ldr	r3, [r3, #24]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d10c      	bne.n	80131ba <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	689b      	ldr	r3, [r3, #8]
 80131a4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80131a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d11a      	bne.n	80131e2 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	2100      	movs	r1, #0
 80131b0:	4618      	mov	r0, r3
 80131b2:	f7fe fbd1 	bl	8011958 <create_chain>
 80131b6:	62b8      	str	r0, [r7, #40]	; 0x28
 80131b8:	e013      	b.n	80131e2 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d007      	beq.n	80131d2 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	699b      	ldr	r3, [r3, #24]
 80131c6:	4619      	mov	r1, r3
 80131c8:	68f8      	ldr	r0, [r7, #12]
 80131ca:	f7fe fc5d 	bl	8011a88 <clmt_clust>
 80131ce:	62b8      	str	r0, [r7, #40]	; 0x28
 80131d0:	e007      	b.n	80131e2 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80131d2:	68fa      	ldr	r2, [r7, #12]
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	69db      	ldr	r3, [r3, #28]
 80131d8:	4619      	mov	r1, r3
 80131da:	4610      	mov	r0, r2
 80131dc:	f7fe fbbc 	bl	8011958 <create_chain>
 80131e0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80131e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	f000 8110 	beq.w	801340a <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80131ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131ec:	2b01      	cmp	r3, #1
 80131ee:	d109      	bne.n	8013204 <f_write+0x11e>
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	2202      	movs	r2, #2
 80131f4:	755a      	strb	r2, [r3, #21]
 80131f6:	693b      	ldr	r3, [r7, #16]
 80131f8:	2102      	movs	r1, #2
 80131fa:	4618      	mov	r0, r3
 80131fc:	f7fd ff2e 	bl	801105c <unlock_fs>
 8013200:	2302      	movs	r3, #2
 8013202:	e110      	b.n	8013426 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013206:	f1b3 3fff 	cmp.w	r3, #4294967295
 801320a:	d109      	bne.n	8013220 <f_write+0x13a>
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	2201      	movs	r2, #1
 8013210:	755a      	strb	r2, [r3, #21]
 8013212:	693b      	ldr	r3, [r7, #16]
 8013214:	2101      	movs	r1, #1
 8013216:	4618      	mov	r0, r3
 8013218:	f7fd ff20 	bl	801105c <unlock_fs>
 801321c:	2301      	movs	r3, #1
 801321e:	e102      	b.n	8013426 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013224:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	689b      	ldr	r3, [r3, #8]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d102      	bne.n	8013234 <f_write+0x14e>
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013232:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	7d1b      	ldrb	r3, [r3, #20]
 8013238:	b25b      	sxtb	r3, r3
 801323a:	2b00      	cmp	r3, #0
 801323c:	da1d      	bge.n	801327a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801323e:	693b      	ldr	r3, [r7, #16]
 8013240:	7858      	ldrb	r0, [r3, #1]
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	6a1a      	ldr	r2, [r3, #32]
 801324c:	2301      	movs	r3, #1
 801324e:	f7fd fdb1 	bl	8010db4 <disk_write>
 8013252:	4603      	mov	r3, r0
 8013254:	2b00      	cmp	r3, #0
 8013256:	d009      	beq.n	801326c <f_write+0x186>
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	2201      	movs	r2, #1
 801325c:	755a      	strb	r2, [r3, #21]
 801325e:	693b      	ldr	r3, [r7, #16]
 8013260:	2101      	movs	r1, #1
 8013262:	4618      	mov	r0, r3
 8013264:	f7fd fefa 	bl	801105c <unlock_fs>
 8013268:	2301      	movs	r3, #1
 801326a:	e0dc      	b.n	8013426 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	7d1b      	ldrb	r3, [r3, #20]
 8013270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013274:	b2da      	uxtb	r2, r3
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801327a:	693a      	ldr	r2, [r7, #16]
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	69db      	ldr	r3, [r3, #28]
 8013280:	4619      	mov	r1, r3
 8013282:	4610      	mov	r0, r2
 8013284:	f7fe f952 	bl	801152c <clust2sect>
 8013288:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801328a:	697b      	ldr	r3, [r7, #20]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d109      	bne.n	80132a4 <f_write+0x1be>
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	2202      	movs	r2, #2
 8013294:	755a      	strb	r2, [r3, #21]
 8013296:	693b      	ldr	r3, [r7, #16]
 8013298:	2102      	movs	r1, #2
 801329a:	4618      	mov	r0, r3
 801329c:	f7fd fede 	bl	801105c <unlock_fs>
 80132a0:	2302      	movs	r3, #2
 80132a2:	e0c0      	b.n	8013426 <f_write+0x340>
			sect += csect;
 80132a4:	697a      	ldr	r2, [r7, #20]
 80132a6:	69bb      	ldr	r3, [r7, #24]
 80132a8:	4413      	add	r3, r2
 80132aa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	0a5b      	lsrs	r3, r3, #9
 80132b0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80132b2:	6a3b      	ldr	r3, [r7, #32]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d041      	beq.n	801333c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80132b8:	69ba      	ldr	r2, [r7, #24]
 80132ba:	6a3b      	ldr	r3, [r7, #32]
 80132bc:	4413      	add	r3, r2
 80132be:	693a      	ldr	r2, [r7, #16]
 80132c0:	8952      	ldrh	r2, [r2, #10]
 80132c2:	4293      	cmp	r3, r2
 80132c4:	d905      	bls.n	80132d2 <f_write+0x1ec>
					cc = fs->csize - csect;
 80132c6:	693b      	ldr	r3, [r7, #16]
 80132c8:	895b      	ldrh	r3, [r3, #10]
 80132ca:	461a      	mov	r2, r3
 80132cc:	69bb      	ldr	r3, [r7, #24]
 80132ce:	1ad3      	subs	r3, r2, r3
 80132d0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80132d2:	693b      	ldr	r3, [r7, #16]
 80132d4:	7858      	ldrb	r0, [r3, #1]
 80132d6:	6a3b      	ldr	r3, [r7, #32]
 80132d8:	697a      	ldr	r2, [r7, #20]
 80132da:	69f9      	ldr	r1, [r7, #28]
 80132dc:	f7fd fd6a 	bl	8010db4 <disk_write>
 80132e0:	4603      	mov	r3, r0
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d009      	beq.n	80132fa <f_write+0x214>
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	2201      	movs	r2, #1
 80132ea:	755a      	strb	r2, [r3, #21]
 80132ec:	693b      	ldr	r3, [r7, #16]
 80132ee:	2101      	movs	r1, #1
 80132f0:	4618      	mov	r0, r3
 80132f2:	f7fd feb3 	bl	801105c <unlock_fs>
 80132f6:	2301      	movs	r3, #1
 80132f8:	e095      	b.n	8013426 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	6a1a      	ldr	r2, [r3, #32]
 80132fe:	697b      	ldr	r3, [r7, #20]
 8013300:	1ad3      	subs	r3, r2, r3
 8013302:	6a3a      	ldr	r2, [r7, #32]
 8013304:	429a      	cmp	r2, r3
 8013306:	d915      	bls.n	8013334 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	6a1a      	ldr	r2, [r3, #32]
 8013312:	697b      	ldr	r3, [r7, #20]
 8013314:	1ad3      	subs	r3, r2, r3
 8013316:	025b      	lsls	r3, r3, #9
 8013318:	69fa      	ldr	r2, [r7, #28]
 801331a:	4413      	add	r3, r2
 801331c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013320:	4619      	mov	r1, r3
 8013322:	f7fd fe07 	bl	8010f34 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	7d1b      	ldrb	r3, [r3, #20]
 801332a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801332e:	b2da      	uxtb	r2, r3
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013334:	6a3b      	ldr	r3, [r7, #32]
 8013336:	025b      	lsls	r3, r3, #9
 8013338:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801333a:	e044      	b.n	80133c6 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	6a1b      	ldr	r3, [r3, #32]
 8013340:	697a      	ldr	r2, [r7, #20]
 8013342:	429a      	cmp	r2, r3
 8013344:	d01b      	beq.n	801337e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	699a      	ldr	r2, [r3, #24]
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801334e:	429a      	cmp	r2, r3
 8013350:	d215      	bcs.n	801337e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013352:	693b      	ldr	r3, [r7, #16]
 8013354:	7858      	ldrb	r0, [r3, #1]
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801335c:	2301      	movs	r3, #1
 801335e:	697a      	ldr	r2, [r7, #20]
 8013360:	f7fd fd08 	bl	8010d74 <disk_read>
 8013364:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013366:	2b00      	cmp	r3, #0
 8013368:	d009      	beq.n	801337e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	2201      	movs	r2, #1
 801336e:	755a      	strb	r2, [r3, #21]
 8013370:	693b      	ldr	r3, [r7, #16]
 8013372:	2101      	movs	r1, #1
 8013374:	4618      	mov	r0, r3
 8013376:	f7fd fe71 	bl	801105c <unlock_fs>
 801337a:	2301      	movs	r3, #1
 801337c:	e053      	b.n	8013426 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	697a      	ldr	r2, [r7, #20]
 8013382:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	699b      	ldr	r3, [r3, #24]
 8013388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801338c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8013390:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	429a      	cmp	r2, r3
 8013398:	d901      	bls.n	801339e <f_write+0x2b8>
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	699b      	ldr	r3, [r3, #24]
 80133a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80133ac:	4413      	add	r3, r2
 80133ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80133b0:	69f9      	ldr	r1, [r7, #28]
 80133b2:	4618      	mov	r0, r3
 80133b4:	f7fd fdbe 	bl	8010f34 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	7d1b      	ldrb	r3, [r3, #20]
 80133bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80133c0:	b2da      	uxtb	r2, r3
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80133c6:	69fa      	ldr	r2, [r7, #28]
 80133c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133ca:	4413      	add	r3, r2
 80133cc:	61fb      	str	r3, [r7, #28]
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	699a      	ldr	r2, [r3, #24]
 80133d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133d4:	441a      	add	r2, r3
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	619a      	str	r2, [r3, #24]
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	68da      	ldr	r2, [r3, #12]
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	699b      	ldr	r3, [r3, #24]
 80133e2:	429a      	cmp	r2, r3
 80133e4:	bf38      	it	cc
 80133e6:	461a      	movcc	r2, r3
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	60da      	str	r2, [r3, #12]
 80133ec:	683b      	ldr	r3, [r7, #0]
 80133ee:	681a      	ldr	r2, [r3, #0]
 80133f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133f2:	441a      	add	r2, r3
 80133f4:	683b      	ldr	r3, [r7, #0]
 80133f6:	601a      	str	r2, [r3, #0]
 80133f8:	687a      	ldr	r2, [r7, #4]
 80133fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133fc:	1ad3      	subs	r3, r2, r3
 80133fe:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	2b00      	cmp	r3, #0
 8013404:	f47f aeb6 	bne.w	8013174 <f_write+0x8e>
 8013408:	e000      	b.n	801340c <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801340a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	7d1b      	ldrb	r3, [r3, #20]
 8013410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013414:	b2da      	uxtb	r2, r3
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801341a:	693b      	ldr	r3, [r7, #16]
 801341c:	2100      	movs	r1, #0
 801341e:	4618      	mov	r0, r3
 8013420:	f7fd fe1c 	bl	801105c <unlock_fs>
 8013424:	2300      	movs	r3, #0
}
 8013426:	4618      	mov	r0, r3
 8013428:	3730      	adds	r7, #48	; 0x30
 801342a:	46bd      	mov	sp, r7
 801342c:	bd80      	pop	{r7, pc}

0801342e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801342e:	b580      	push	{r7, lr}
 8013430:	b086      	sub	sp, #24
 8013432:	af00      	add	r7, sp, #0
 8013434:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	f107 0208 	add.w	r2, r7, #8
 801343c:	4611      	mov	r1, r2
 801343e:	4618      	mov	r0, r3
 8013440:	f7ff fa72 	bl	8012928 <validate>
 8013444:	4603      	mov	r3, r0
 8013446:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013448:	7dfb      	ldrb	r3, [r7, #23]
 801344a:	2b00      	cmp	r3, #0
 801344c:	d16d      	bne.n	801352a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	7d1b      	ldrb	r3, [r3, #20]
 8013452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013456:	2b00      	cmp	r3, #0
 8013458:	d067      	beq.n	801352a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	7d1b      	ldrb	r3, [r3, #20]
 801345e:	b25b      	sxtb	r3, r3
 8013460:	2b00      	cmp	r3, #0
 8013462:	da1a      	bge.n	801349a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013464:	68bb      	ldr	r3, [r7, #8]
 8013466:	7858      	ldrb	r0, [r3, #1]
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	6a1a      	ldr	r2, [r3, #32]
 8013472:	2301      	movs	r3, #1
 8013474:	f7fd fc9e 	bl	8010db4 <disk_write>
 8013478:	4603      	mov	r3, r0
 801347a:	2b00      	cmp	r3, #0
 801347c:	d006      	beq.n	801348c <f_sync+0x5e>
 801347e:	68bb      	ldr	r3, [r7, #8]
 8013480:	2101      	movs	r1, #1
 8013482:	4618      	mov	r0, r3
 8013484:	f7fd fdea 	bl	801105c <unlock_fs>
 8013488:	2301      	movs	r3, #1
 801348a:	e055      	b.n	8013538 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	7d1b      	ldrb	r3, [r3, #20]
 8013490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013494:	b2da      	uxtb	r2, r3
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801349a:	f7f9 ff13 	bl	800d2c4 <get_fattime>
 801349e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80134a0:	68ba      	ldr	r2, [r7, #8]
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134a6:	4619      	mov	r1, r3
 80134a8:	4610      	mov	r0, r2
 80134aa:	f7fd ffa3 	bl	80113f4 <move_window>
 80134ae:	4603      	mov	r3, r0
 80134b0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80134b2:	7dfb      	ldrb	r3, [r7, #23]
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d138      	bne.n	801352a <f_sync+0xfc>
					dir = fp->dir_ptr;
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80134bc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	330b      	adds	r3, #11
 80134c2:	781a      	ldrb	r2, [r3, #0]
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	330b      	adds	r3, #11
 80134c8:	f042 0220 	orr.w	r2, r2, #32
 80134cc:	b2d2      	uxtb	r2, r2
 80134ce:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	6818      	ldr	r0, [r3, #0]
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	689b      	ldr	r3, [r3, #8]
 80134d8:	461a      	mov	r2, r3
 80134da:	68f9      	ldr	r1, [r7, #12]
 80134dc:	f7fe fcae 	bl	8011e3c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	f103 021c 	add.w	r2, r3, #28
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	68db      	ldr	r3, [r3, #12]
 80134ea:	4619      	mov	r1, r3
 80134ec:	4610      	mov	r0, r2
 80134ee:	f7fd fcf5 	bl	8010edc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	3316      	adds	r3, #22
 80134f6:	6939      	ldr	r1, [r7, #16]
 80134f8:	4618      	mov	r0, r3
 80134fa:	f7fd fcef 	bl	8010edc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	3312      	adds	r3, #18
 8013502:	2100      	movs	r1, #0
 8013504:	4618      	mov	r0, r3
 8013506:	f7fd fcce 	bl	8010ea6 <st_word>
					fs->wflag = 1;
 801350a:	68bb      	ldr	r3, [r7, #8]
 801350c:	2201      	movs	r2, #1
 801350e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013510:	68bb      	ldr	r3, [r7, #8]
 8013512:	4618      	mov	r0, r3
 8013514:	f7fd ff9c 	bl	8011450 <sync_fs>
 8013518:	4603      	mov	r3, r0
 801351a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	7d1b      	ldrb	r3, [r3, #20]
 8013520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013524:	b2da      	uxtb	r2, r3
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801352a:	68bb      	ldr	r3, [r7, #8]
 801352c:	7dfa      	ldrb	r2, [r7, #23]
 801352e:	4611      	mov	r1, r2
 8013530:	4618      	mov	r0, r3
 8013532:	f7fd fd93 	bl	801105c <unlock_fs>
 8013536:	7dfb      	ldrb	r3, [r7, #23]
}
 8013538:	4618      	mov	r0, r3
 801353a:	3718      	adds	r7, #24
 801353c:	46bd      	mov	sp, r7
 801353e:	bd80      	pop	{r7, pc}

08013540 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013540:	b580      	push	{r7, lr}
 8013542:	b084      	sub	sp, #16
 8013544:	af00      	add	r7, sp, #0
 8013546:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013548:	6878      	ldr	r0, [r7, #4]
 801354a:	f7ff ff70 	bl	801342e <f_sync>
 801354e:	4603      	mov	r3, r0
 8013550:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013552:	7bfb      	ldrb	r3, [r7, #15]
 8013554:	2b00      	cmp	r3, #0
 8013556:	d11d      	bne.n	8013594 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	f107 0208 	add.w	r2, r7, #8
 801355e:	4611      	mov	r1, r2
 8013560:	4618      	mov	r0, r3
 8013562:	f7ff f9e1 	bl	8012928 <validate>
 8013566:	4603      	mov	r3, r0
 8013568:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801356a:	7bfb      	ldrb	r3, [r7, #15]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d111      	bne.n	8013594 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	691b      	ldr	r3, [r3, #16]
 8013574:	4618      	mov	r0, r3
 8013576:	f7fd fe99 	bl	80112ac <dec_lock>
 801357a:	4603      	mov	r3, r0
 801357c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801357e:	7bfb      	ldrb	r3, [r7, #15]
 8013580:	2b00      	cmp	r3, #0
 8013582:	d102      	bne.n	801358a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	2200      	movs	r2, #0
 8013588:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 801358a:	68bb      	ldr	r3, [r7, #8]
 801358c:	2100      	movs	r1, #0
 801358e:	4618      	mov	r0, r3
 8013590:	f7fd fd64 	bl	801105c <unlock_fs>
#endif
		}
	}
	return res;
 8013594:	7bfb      	ldrb	r3, [r7, #15]
}
 8013596:	4618      	mov	r0, r3
 8013598:	3710      	adds	r7, #16
 801359a:	46bd      	mov	sp, r7
 801359c:	bd80      	pop	{r7, pc}

0801359e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801359e:	b580      	push	{r7, lr}
 80135a0:	b086      	sub	sp, #24
 80135a2:	af00      	add	r7, sp, #0
 80135a4:	6078      	str	r0, [r7, #4]
 80135a6:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d101      	bne.n	80135b2 <f_opendir+0x14>
 80135ae:	2309      	movs	r3, #9
 80135b0:	e06a      	b.n	8013688 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80135b6:	f107 010c 	add.w	r1, r7, #12
 80135ba:	463b      	mov	r3, r7
 80135bc:	2200      	movs	r2, #0
 80135be:	4618      	mov	r0, r3
 80135c0:	f7fe ff5e 	bl	8012480 <find_volume>
 80135c4:	4603      	mov	r3, r0
 80135c6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80135c8:	7dfb      	ldrb	r3, [r7, #23]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d14f      	bne.n	801366e <f_opendir+0xd0>
		obj->fs = fs;
 80135ce:	68fa      	ldr	r2, [r7, #12]
 80135d0:	693b      	ldr	r3, [r7, #16]
 80135d2:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80135d4:	683b      	ldr	r3, [r7, #0]
 80135d6:	4619      	mov	r1, r3
 80135d8:	6878      	ldr	r0, [r7, #4]
 80135da:	f7fe fe45 	bl	8012268 <follow_path>
 80135de:	4603      	mov	r3, r0
 80135e0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80135e2:	7dfb      	ldrb	r3, [r7, #23]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d13d      	bne.n	8013664 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80135ee:	b25b      	sxtb	r3, r3
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	db12      	blt.n	801361a <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80135f4:	693b      	ldr	r3, [r7, #16]
 80135f6:	799b      	ldrb	r3, [r3, #6]
 80135f8:	f003 0310 	and.w	r3, r3, #16
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d00a      	beq.n	8013616 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8013600:	68fa      	ldr	r2, [r7, #12]
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	6a1b      	ldr	r3, [r3, #32]
 8013606:	4619      	mov	r1, r3
 8013608:	4610      	mov	r0, r2
 801360a:	f7fe fbf8 	bl	8011dfe <ld_clust>
 801360e:	4602      	mov	r2, r0
 8013610:	693b      	ldr	r3, [r7, #16]
 8013612:	609a      	str	r2, [r3, #8]
 8013614:	e001      	b.n	801361a <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8013616:	2305      	movs	r3, #5
 8013618:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 801361a:	7dfb      	ldrb	r3, [r7, #23]
 801361c:	2b00      	cmp	r3, #0
 801361e:	d121      	bne.n	8013664 <f_opendir+0xc6>
				obj->id = fs->id;
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	88da      	ldrh	r2, [r3, #6]
 8013624:	693b      	ldr	r3, [r7, #16]
 8013626:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8013628:	2100      	movs	r1, #0
 801362a:	6878      	ldr	r0, [r7, #4]
 801362c:	f7fe fa60 	bl	8011af0 <dir_sdi>
 8013630:	4603      	mov	r3, r0
 8013632:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8013634:	7dfb      	ldrb	r3, [r7, #23]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d114      	bne.n	8013664 <f_opendir+0xc6>
					if (obj->sclust) {
 801363a:	693b      	ldr	r3, [r7, #16]
 801363c:	689b      	ldr	r3, [r3, #8]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d00d      	beq.n	801365e <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8013642:	2100      	movs	r1, #0
 8013644:	6878      	ldr	r0, [r7, #4]
 8013646:	f7fd fda3 	bl	8011190 <inc_lock>
 801364a:	4602      	mov	r2, r0
 801364c:	693b      	ldr	r3, [r7, #16]
 801364e:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8013650:	693b      	ldr	r3, [r7, #16]
 8013652:	691b      	ldr	r3, [r3, #16]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d105      	bne.n	8013664 <f_opendir+0xc6>
 8013658:	2312      	movs	r3, #18
 801365a:	75fb      	strb	r3, [r7, #23]
 801365c:	e002      	b.n	8013664 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 801365e:	693b      	ldr	r3, [r7, #16]
 8013660:	2200      	movs	r2, #0
 8013662:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013664:	7dfb      	ldrb	r3, [r7, #23]
 8013666:	2b04      	cmp	r3, #4
 8013668:	d101      	bne.n	801366e <f_opendir+0xd0>
 801366a:	2305      	movs	r3, #5
 801366c:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801366e:	7dfb      	ldrb	r3, [r7, #23]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d002      	beq.n	801367a <f_opendir+0xdc>
 8013674:	693b      	ldr	r3, [r7, #16]
 8013676:	2200      	movs	r2, #0
 8013678:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	7dfa      	ldrb	r2, [r7, #23]
 801367e:	4611      	mov	r1, r2
 8013680:	4618      	mov	r0, r3
 8013682:	f7fd fceb 	bl	801105c <unlock_fs>
 8013686:	7dfb      	ldrb	r3, [r7, #23]
}
 8013688:	4618      	mov	r0, r3
 801368a:	3718      	adds	r7, #24
 801368c:	46bd      	mov	sp, r7
 801368e:	bd80      	pop	{r7, pc}

08013690 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8013690:	b580      	push	{r7, lr}
 8013692:	b084      	sub	sp, #16
 8013694:	af00      	add	r7, sp, #0
 8013696:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	f107 0208 	add.w	r2, r7, #8
 801369e:	4611      	mov	r1, r2
 80136a0:	4618      	mov	r0, r3
 80136a2:	f7ff f941 	bl	8012928 <validate>
 80136a6:	4603      	mov	r3, r0
 80136a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80136aa:	7bfb      	ldrb	r3, [r7, #15]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d115      	bne.n	80136dc <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	691b      	ldr	r3, [r3, #16]
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d006      	beq.n	80136c6 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	691b      	ldr	r3, [r3, #16]
 80136bc:	4618      	mov	r0, r3
 80136be:	f7fd fdf5 	bl	80112ac <dec_lock>
 80136c2:	4603      	mov	r3, r0
 80136c4:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80136c6:	7bfb      	ldrb	r3, [r7, #15]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d102      	bne.n	80136d2 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	2200      	movs	r2, #0
 80136d0:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 80136d2:	68bb      	ldr	r3, [r7, #8]
 80136d4:	2100      	movs	r1, #0
 80136d6:	4618      	mov	r0, r3
 80136d8:	f7fd fcc0 	bl	801105c <unlock_fs>
#endif
	}
	return res;
 80136dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80136de:	4618      	mov	r0, r3
 80136e0:	3710      	adds	r7, #16
 80136e2:	46bd      	mov	sp, r7
 80136e4:	bd80      	pop	{r7, pc}

080136e6 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80136e6:	b580      	push	{r7, lr}
 80136e8:	b084      	sub	sp, #16
 80136ea:	af00      	add	r7, sp, #0
 80136ec:	6078      	str	r0, [r7, #4]
 80136ee:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	f107 0208 	add.w	r2, r7, #8
 80136f6:	4611      	mov	r1, r2
 80136f8:	4618      	mov	r0, r3
 80136fa:	f7ff f915 	bl	8012928 <validate>
 80136fe:	4603      	mov	r3, r0
 8013700:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8013702:	7bfb      	ldrb	r3, [r7, #15]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d126      	bne.n	8013756 <f_readdir+0x70>
		if (!fno) {
 8013708:	683b      	ldr	r3, [r7, #0]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d106      	bne.n	801371c <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801370e:	2100      	movs	r1, #0
 8013710:	6878      	ldr	r0, [r7, #4]
 8013712:	f7fe f9ed 	bl	8011af0 <dir_sdi>
 8013716:	4603      	mov	r3, r0
 8013718:	73fb      	strb	r3, [r7, #15]
 801371a:	e01c      	b.n	8013756 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 801371c:	2100      	movs	r1, #0
 801371e:	6878      	ldr	r0, [r7, #4]
 8013720:	f7fe fbac 	bl	8011e7c <dir_read>
 8013724:	4603      	mov	r3, r0
 8013726:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8013728:	7bfb      	ldrb	r3, [r7, #15]
 801372a:	2b04      	cmp	r3, #4
 801372c:	d101      	bne.n	8013732 <f_readdir+0x4c>
 801372e:	2300      	movs	r3, #0
 8013730:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8013732:	7bfb      	ldrb	r3, [r7, #15]
 8013734:	2b00      	cmp	r3, #0
 8013736:	d10e      	bne.n	8013756 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8013738:	6839      	ldr	r1, [r7, #0]
 801373a:	6878      	ldr	r0, [r7, #4]
 801373c:	f7fe fca0 	bl	8012080 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8013740:	2100      	movs	r1, #0
 8013742:	6878      	ldr	r0, [r7, #4]
 8013744:	f7fe fa4f 	bl	8011be6 <dir_next>
 8013748:	4603      	mov	r3, r0
 801374a:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801374c:	7bfb      	ldrb	r3, [r7, #15]
 801374e:	2b04      	cmp	r3, #4
 8013750:	d101      	bne.n	8013756 <f_readdir+0x70>
 8013752:	2300      	movs	r3, #0
 8013754:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8013756:	68bb      	ldr	r3, [r7, #8]
 8013758:	7bfa      	ldrb	r2, [r7, #15]
 801375a:	4611      	mov	r1, r2
 801375c:	4618      	mov	r0, r3
 801375e:	f7fd fc7d 	bl	801105c <unlock_fs>
 8013762:	7bfb      	ldrb	r3, [r7, #15]
}
 8013764:	4618      	mov	r0, r3
 8013766:	3710      	adds	r7, #16
 8013768:	46bd      	mov	sp, r7
 801376a:	bd80      	pop	{r7, pc}

0801376c <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801376c:	b580      	push	{r7, lr}
 801376e:	b090      	sub	sp, #64	; 0x40
 8013770:	af00      	add	r7, sp, #0
 8013772:	6078      	str	r0, [r7, #4]
 8013774:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8013776:	f107 010c 	add.w	r1, r7, #12
 801377a:	1d3b      	adds	r3, r7, #4
 801377c:	2200      	movs	r2, #0
 801377e:	4618      	mov	r0, r3
 8013780:	f7fe fe7e 	bl	8012480 <find_volume>
 8013784:	4603      	mov	r3, r0
 8013786:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 801378a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801378e:	2b00      	cmp	r3, #0
 8013790:	d11f      	bne.n	80137d2 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013792:	687a      	ldr	r2, [r7, #4]
 8013794:	f107 030c 	add.w	r3, r7, #12
 8013798:	4611      	mov	r1, r2
 801379a:	4618      	mov	r0, r3
 801379c:	f7fe fd64 	bl	8012268 <follow_path>
 80137a0:	4603      	mov	r3, r0
 80137a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 80137a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d111      	bne.n	80137d2 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 80137ae:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80137b2:	b25b      	sxtb	r3, r3
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	da03      	bge.n	80137c0 <f_stat+0x54>
				res = FR_INVALID_NAME;
 80137b8:	2306      	movs	r3, #6
 80137ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80137be:	e008      	b.n	80137d2 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 80137c0:	683b      	ldr	r3, [r7, #0]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d005      	beq.n	80137d2 <f_stat+0x66>
 80137c6:	f107 030c 	add.w	r3, r7, #12
 80137ca:	6839      	ldr	r1, [r7, #0]
 80137cc:	4618      	mov	r0, r3
 80137ce:	f7fe fc57 	bl	8012080 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80137d8:	4611      	mov	r1, r2
 80137da:	4618      	mov	r0, r3
 80137dc:	f7fd fc3e 	bl	801105c <unlock_fs>
 80137e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80137e4:	4618      	mov	r0, r3
 80137e6:	3740      	adds	r7, #64	; 0x40
 80137e8:	46bd      	mov	sp, r7
 80137ea:	bd80      	pop	{r7, pc}

080137ec <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80137ec:	b580      	push	{r7, lr}
 80137ee:	b09e      	sub	sp, #120	; 0x78
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80137f4:	2300      	movs	r3, #0
 80137f6:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80137f8:	f107 010c 	add.w	r1, r7, #12
 80137fc:	1d3b      	adds	r3, r7, #4
 80137fe:	2202      	movs	r2, #2
 8013800:	4618      	mov	r0, r3
 8013802:	f7fe fe3d 	bl	8012480 <find_volume>
 8013806:	4603      	mov	r3, r0
 8013808:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8013810:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013814:	2b00      	cmp	r3, #0
 8013816:	f040 808e 	bne.w	8013936 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801381a:	687a      	ldr	r2, [r7, #4]
 801381c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013820:	4611      	mov	r1, r2
 8013822:	4618      	mov	r0, r3
 8013824:	f7fe fd20 	bl	8012268 <follow_path>
 8013828:	4603      	mov	r3, r0
 801382a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 801382e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013832:	2b00      	cmp	r3, #0
 8013834:	d108      	bne.n	8013848 <f_unlink+0x5c>
 8013836:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801383a:	2102      	movs	r1, #2
 801383c:	4618      	mov	r0, r3
 801383e:	f7fd fc29 	bl	8011094 <chk_lock>
 8013842:	4603      	mov	r3, r0
 8013844:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8013848:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801384c:	2b00      	cmp	r3, #0
 801384e:	d172      	bne.n	8013936 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013850:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013854:	b25b      	sxtb	r3, r3
 8013856:	2b00      	cmp	r3, #0
 8013858:	da03      	bge.n	8013862 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801385a:	2306      	movs	r3, #6
 801385c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013860:	e008      	b.n	8013874 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8013862:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013866:	f003 0301 	and.w	r3, r3, #1
 801386a:	2b00      	cmp	r3, #0
 801386c:	d002      	beq.n	8013874 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 801386e:	2307      	movs	r3, #7
 8013870:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8013874:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013878:	2b00      	cmp	r3, #0
 801387a:	d134      	bne.n	80138e6 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013880:	4611      	mov	r1, r2
 8013882:	4618      	mov	r0, r3
 8013884:	f7fe fabb 	bl	8011dfe <ld_clust>
 8013888:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801388a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801388e:	f003 0310 	and.w	r3, r3, #16
 8013892:	2b00      	cmp	r3, #0
 8013894:	d027      	beq.n	80138e6 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801389a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801389c:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801389e:	f107 0310 	add.w	r3, r7, #16
 80138a2:	2100      	movs	r1, #0
 80138a4:	4618      	mov	r0, r3
 80138a6:	f7fe f923 	bl	8011af0 <dir_sdi>
 80138aa:	4603      	mov	r3, r0
 80138ac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 80138b0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d116      	bne.n	80138e6 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 80138b8:	f107 0310 	add.w	r3, r7, #16
 80138bc:	2100      	movs	r1, #0
 80138be:	4618      	mov	r0, r3
 80138c0:	f7fe fadc 	bl	8011e7c <dir_read>
 80138c4:	4603      	mov	r3, r0
 80138c6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80138ca:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d102      	bne.n	80138d8 <f_unlink+0xec>
 80138d2:	2307      	movs	r3, #7
 80138d4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80138d8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80138dc:	2b04      	cmp	r3, #4
 80138de:	d102      	bne.n	80138e6 <f_unlink+0xfa>
 80138e0:	2300      	movs	r3, #0
 80138e2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 80138e6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d123      	bne.n	8013936 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80138ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80138f2:	4618      	mov	r0, r3
 80138f4:	f7fe fba6 	bl	8012044 <dir_remove>
 80138f8:	4603      	mov	r3, r0
 80138fa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 80138fe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013902:	2b00      	cmp	r3, #0
 8013904:	d10c      	bne.n	8013920 <f_unlink+0x134>
 8013906:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013908:	2b00      	cmp	r3, #0
 801390a:	d009      	beq.n	8013920 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801390c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013910:	2200      	movs	r2, #0
 8013912:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8013914:	4618      	mov	r0, r3
 8013916:	f7fd ffba 	bl	801188e <remove_chain>
 801391a:	4603      	mov	r3, r0
 801391c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8013920:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013924:	2b00      	cmp	r3, #0
 8013926:	d106      	bne.n	8013936 <f_unlink+0x14a>
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	4618      	mov	r0, r3
 801392c:	f7fd fd90 	bl	8011450 <sync_fs>
 8013930:	4603      	mov	r3, r0
 8013932:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 801393c:	4611      	mov	r1, r2
 801393e:	4618      	mov	r0, r3
 8013940:	f7fd fb8c 	bl	801105c <unlock_fs>
 8013944:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8013948:	4618      	mov	r0, r3
 801394a:	3778      	adds	r7, #120	; 0x78
 801394c:	46bd      	mov	sp, r7
 801394e:	bd80      	pop	{r7, pc}

08013950 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8013950:	b580      	push	{r7, lr}
 8013952:	b096      	sub	sp, #88	; 0x58
 8013954:	af00      	add	r7, sp, #0
 8013956:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013958:	f107 0108 	add.w	r1, r7, #8
 801395c:	1d3b      	adds	r3, r7, #4
 801395e:	2202      	movs	r2, #2
 8013960:	4618      	mov	r0, r3
 8013962:	f7fe fd8d 	bl	8012480 <find_volume>
 8013966:	4603      	mov	r3, r0
 8013968:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 801396c:	68bb      	ldr	r3, [r7, #8]
 801396e:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8013970:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013974:	2b00      	cmp	r3, #0
 8013976:	f040 80ec 	bne.w	8013b52 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 801397a:	687a      	ldr	r2, [r7, #4]
 801397c:	f107 030c 	add.w	r3, r7, #12
 8013980:	4611      	mov	r1, r2
 8013982:	4618      	mov	r0, r3
 8013984:	f7fe fc70 	bl	8012268 <follow_path>
 8013988:	4603      	mov	r3, r0
 801398a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801398e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013992:	2b00      	cmp	r3, #0
 8013994:	d102      	bne.n	801399c <f_mkdir+0x4c>
 8013996:	2308      	movs	r3, #8
 8013998:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 801399c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80139a0:	2b04      	cmp	r3, #4
 80139a2:	f040 80d6 	bne.w	8013b52 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80139a6:	f107 030c 	add.w	r3, r7, #12
 80139aa:	2100      	movs	r1, #0
 80139ac:	4618      	mov	r0, r3
 80139ae:	f7fd ffd3 	bl	8011958 <create_chain>
 80139b2:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80139b4:	68bb      	ldr	r3, [r7, #8]
 80139b6:	895b      	ldrh	r3, [r3, #10]
 80139b8:	025b      	lsls	r3, r3, #9
 80139ba:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80139bc:	2300      	movs	r3, #0
 80139be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80139c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d102      	bne.n	80139ce <f_mkdir+0x7e>
 80139c8:	2307      	movs	r3, #7
 80139ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80139ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80139d0:	2b01      	cmp	r3, #1
 80139d2:	d102      	bne.n	80139da <f_mkdir+0x8a>
 80139d4:	2302      	movs	r3, #2
 80139d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80139da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80139dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139e0:	d102      	bne.n	80139e8 <f_mkdir+0x98>
 80139e2:	2301      	movs	r3, #1
 80139e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80139e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d106      	bne.n	80139fe <f_mkdir+0xae>
 80139f0:	68bb      	ldr	r3, [r7, #8]
 80139f2:	4618      	mov	r0, r3
 80139f4:	f7fd fcba 	bl	801136c <sync_window>
 80139f8:	4603      	mov	r3, r0
 80139fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 80139fe:	f7f9 fc61 	bl	800d2c4 <get_fattime>
 8013a02:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8013a04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d16a      	bne.n	8013ae2 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 8013a0c:	68bb      	ldr	r3, [r7, #8]
 8013a0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013a10:	4618      	mov	r0, r3
 8013a12:	f7fd fd8b 	bl	801152c <clust2sect>
 8013a16:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8013a18:	68bb      	ldr	r3, [r7, #8]
 8013a1a:	3334      	adds	r3, #52	; 0x34
 8013a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8013a1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013a22:	2100      	movs	r1, #0
 8013a24:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013a26:	f7fd faa6 	bl	8010f76 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8013a2a:	220b      	movs	r2, #11
 8013a2c:	2120      	movs	r1, #32
 8013a2e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013a30:	f7fd faa1 	bl	8010f76 <mem_set>
					dir[DIR_Name] = '.';
 8013a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a36:	222e      	movs	r2, #46	; 0x2e
 8013a38:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8013a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a3c:	330b      	adds	r3, #11
 8013a3e:	2210      	movs	r2, #16
 8013a40:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8013a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a44:	3316      	adds	r3, #22
 8013a46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013a48:	4618      	mov	r0, r3
 8013a4a:	f7fd fa47 	bl	8010edc <st_dword>
					st_clust(fs, dir, dcl);
 8013a4e:	68bb      	ldr	r3, [r7, #8]
 8013a50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013a52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013a54:	4618      	mov	r0, r3
 8013a56:	f7fe f9f1 	bl	8011e3c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8013a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a5c:	3320      	adds	r3, #32
 8013a5e:	2220      	movs	r2, #32
 8013a60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013a62:	4618      	mov	r0, r3
 8013a64:	f7fd fa66 	bl	8010f34 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8013a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a6a:	3321      	adds	r3, #33	; 0x21
 8013a6c:	222e      	movs	r2, #46	; 0x2e
 8013a6e:	701a      	strb	r2, [r3, #0]
 8013a70:	697b      	ldr	r3, [r7, #20]
 8013a72:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8013a74:	68bb      	ldr	r3, [r7, #8]
 8013a76:	781b      	ldrb	r3, [r3, #0]
 8013a78:	2b03      	cmp	r3, #3
 8013a7a:	d106      	bne.n	8013a8a <f_mkdir+0x13a>
 8013a7c:	68bb      	ldr	r3, [r7, #8]
 8013a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013a82:	429a      	cmp	r2, r3
 8013a84:	d101      	bne.n	8013a8a <f_mkdir+0x13a>
 8013a86:	2300      	movs	r3, #0
 8013a88:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8013a8a:	68b8      	ldr	r0, [r7, #8]
 8013a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a8e:	3320      	adds	r3, #32
 8013a90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013a92:	4619      	mov	r1, r3
 8013a94:	f7fe f9d2 	bl	8011e3c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013a98:	68bb      	ldr	r3, [r7, #8]
 8013a9a:	895b      	ldrh	r3, [r3, #10]
 8013a9c:	653b      	str	r3, [r7, #80]	; 0x50
 8013a9e:	e01b      	b.n	8013ad8 <f_mkdir+0x188>
					fs->winsect = dsc++;
 8013aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013aa2:	1c5a      	adds	r2, r3, #1
 8013aa4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8013aa6:	68ba      	ldr	r2, [r7, #8]
 8013aa8:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 8013aaa:	68bb      	ldr	r3, [r7, #8]
 8013aac:	2201      	movs	r2, #1
 8013aae:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8013ab0:	68bb      	ldr	r3, [r7, #8]
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	f7fd fc5a 	bl	801136c <sync_window>
 8013ab8:	4603      	mov	r3, r0
 8013aba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8013abe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d10c      	bne.n	8013ae0 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8013ac6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013aca:	2100      	movs	r1, #0
 8013acc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013ace:	f7fd fa52 	bl	8010f76 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ad4:	3b01      	subs	r3, #1
 8013ad6:	653b      	str	r3, [r7, #80]	; 0x50
 8013ad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d1e0      	bne.n	8013aa0 <f_mkdir+0x150>
 8013ade:	e000      	b.n	8013ae2 <f_mkdir+0x192>
					if (res != FR_OK) break;
 8013ae0:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8013ae2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d107      	bne.n	8013afa <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8013aea:	f107 030c 	add.w	r3, r7, #12
 8013aee:	4618      	mov	r0, r3
 8013af0:	f7fe fa76 	bl	8011fe0 <dir_register>
 8013af4:	4603      	mov	r3, r0
 8013af6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8013afa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d120      	bne.n	8013b44 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8013b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b04:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8013b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b08:	3316      	adds	r3, #22
 8013b0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	f7fd f9e5 	bl	8010edc <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8013b12:	68bb      	ldr	r3, [r7, #8]
 8013b14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013b16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013b18:	4618      	mov	r0, r3
 8013b1a:	f7fe f98f 	bl	8011e3c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8013b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b20:	330b      	adds	r3, #11
 8013b22:	2210      	movs	r2, #16
 8013b24:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8013b26:	68bb      	ldr	r3, [r7, #8]
 8013b28:	2201      	movs	r2, #1
 8013b2a:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8013b2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d10e      	bne.n	8013b52 <f_mkdir+0x202>
					res = sync_fs(fs);
 8013b34:	68bb      	ldr	r3, [r7, #8]
 8013b36:	4618      	mov	r0, r3
 8013b38:	f7fd fc8a 	bl	8011450 <sync_fs>
 8013b3c:	4603      	mov	r3, r0
 8013b3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8013b42:	e006      	b.n	8013b52 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8013b44:	f107 030c 	add.w	r3, r7, #12
 8013b48:	2200      	movs	r2, #0
 8013b4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	f7fd fe9e 	bl	801188e <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013b52:	68bb      	ldr	r3, [r7, #8]
 8013b54:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013b58:	4611      	mov	r1, r2
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	f7fd fa7e 	bl	801105c <unlock_fs>
 8013b60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8013b64:	4618      	mov	r0, r3
 8013b66:	3758      	adds	r7, #88	; 0x58
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	bd80      	pop	{r7, pc}

08013b6c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8013b6c:	b580      	push	{r7, lr}
 8013b6e:	b088      	sub	sp, #32
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	60f8      	str	r0, [r7, #12]
 8013b74:	60b9      	str	r1, [r7, #8]
 8013b76:	607a      	str	r2, [r7, #4]
	int n = 0;
 8013b78:	2300      	movs	r3, #0
 8013b7a:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8013b80:	e01b      	b.n	8013bba <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8013b82:	f107 0310 	add.w	r3, r7, #16
 8013b86:	f107 0114 	add.w	r1, r7, #20
 8013b8a:	2201      	movs	r2, #1
 8013b8c:	6878      	ldr	r0, [r7, #4]
 8013b8e:	f7ff f93c 	bl	8012e0a <f_read>
		if (rc != 1) break;
 8013b92:	693b      	ldr	r3, [r7, #16]
 8013b94:	2b01      	cmp	r3, #1
 8013b96:	d116      	bne.n	8013bc6 <f_gets+0x5a>
		c = s[0];
 8013b98:	7d3b      	ldrb	r3, [r7, #20]
 8013b9a:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8013b9c:	7dfb      	ldrb	r3, [r7, #23]
 8013b9e:	2b0d      	cmp	r3, #13
 8013ba0:	d100      	bne.n	8013ba4 <f_gets+0x38>
 8013ba2:	e00a      	b.n	8013bba <f_gets+0x4e>
		*p++ = c;
 8013ba4:	69bb      	ldr	r3, [r7, #24]
 8013ba6:	1c5a      	adds	r2, r3, #1
 8013ba8:	61ba      	str	r2, [r7, #24]
 8013baa:	7dfa      	ldrb	r2, [r7, #23]
 8013bac:	701a      	strb	r2, [r3, #0]
		n++;
 8013bae:	69fb      	ldr	r3, [r7, #28]
 8013bb0:	3301      	adds	r3, #1
 8013bb2:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8013bb4:	7dfb      	ldrb	r3, [r7, #23]
 8013bb6:	2b0a      	cmp	r3, #10
 8013bb8:	d007      	beq.n	8013bca <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8013bba:	68bb      	ldr	r3, [r7, #8]
 8013bbc:	3b01      	subs	r3, #1
 8013bbe:	69fa      	ldr	r2, [r7, #28]
 8013bc0:	429a      	cmp	r2, r3
 8013bc2:	dbde      	blt.n	8013b82 <f_gets+0x16>
 8013bc4:	e002      	b.n	8013bcc <f_gets+0x60>
		if (rc != 1) break;
 8013bc6:	bf00      	nop
 8013bc8:	e000      	b.n	8013bcc <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8013bca:	bf00      	nop
	}
	*p = 0;
 8013bcc:	69bb      	ldr	r3, [r7, #24]
 8013bce:	2200      	movs	r2, #0
 8013bd0:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8013bd2:	69fb      	ldr	r3, [r7, #28]
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d001      	beq.n	8013bdc <f_gets+0x70>
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	e000      	b.n	8013bde <f_gets+0x72>
 8013bdc:	2300      	movs	r3, #0
}
 8013bde:	4618      	mov	r0, r3
 8013be0:	3720      	adds	r7, #32
 8013be2:	46bd      	mov	sp, r7
 8013be4:	bd80      	pop	{r7, pc}

08013be6 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8013be6:	b580      	push	{r7, lr}
 8013be8:	b084      	sub	sp, #16
 8013bea:	af00      	add	r7, sp, #0
 8013bec:	6078      	str	r0, [r7, #4]
 8013bee:	460b      	mov	r3, r1
 8013bf0:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8013bf2:	78fb      	ldrb	r3, [r7, #3]
 8013bf4:	2b0a      	cmp	r3, #10
 8013bf6:	d103      	bne.n	8013c00 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8013bf8:	210d      	movs	r1, #13
 8013bfa:	6878      	ldr	r0, [r7, #4]
 8013bfc:	f7ff fff3 	bl	8013be6 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	685b      	ldr	r3, [r3, #4]
 8013c04:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	db25      	blt.n	8013c58 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	1c5a      	adds	r2, r3, #1
 8013c10:	60fa      	str	r2, [r7, #12]
 8013c12:	687a      	ldr	r2, [r7, #4]
 8013c14:	4413      	add	r3, r2
 8013c16:	78fa      	ldrb	r2, [r7, #3]
 8013c18:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	2b3c      	cmp	r3, #60	; 0x3c
 8013c1e:	dd12      	ble.n	8013c46 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	6818      	ldr	r0, [r3, #0]
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	f103 010c 	add.w	r1, r3, #12
 8013c2a:	68fa      	ldr	r2, [r7, #12]
 8013c2c:	f107 0308 	add.w	r3, r7, #8
 8013c30:	f7ff fa59 	bl	80130e6 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8013c34:	68ba      	ldr	r2, [r7, #8]
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	429a      	cmp	r2, r3
 8013c3a:	d101      	bne.n	8013c40 <putc_bfd+0x5a>
 8013c3c:	2300      	movs	r3, #0
 8013c3e:	e001      	b.n	8013c44 <putc_bfd+0x5e>
 8013c40:	f04f 33ff 	mov.w	r3, #4294967295
 8013c44:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	68fa      	ldr	r2, [r7, #12]
 8013c4a:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	689b      	ldr	r3, [r3, #8]
 8013c50:	1c5a      	adds	r2, r3, #1
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	609a      	str	r2, [r3, #8]
 8013c56:	e000      	b.n	8013c5a <putc_bfd+0x74>
	if (i < 0) return;
 8013c58:	bf00      	nop
}
 8013c5a:	3710      	adds	r7, #16
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	bd80      	pop	{r7, pc}

08013c60 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8013c60:	b580      	push	{r7, lr}
 8013c62:	b084      	sub	sp, #16
 8013c64:	af00      	add	r7, sp, #0
 8013c66:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	685b      	ldr	r3, [r3, #4]
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	db16      	blt.n	8013c9e <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	6818      	ldr	r0, [r3, #0]
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	f103 010c 	add.w	r1, r3, #12
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	685b      	ldr	r3, [r3, #4]
 8013c7e:	461a      	mov	r2, r3
 8013c80:	f107 030c 	add.w	r3, r7, #12
 8013c84:	f7ff fa2f 	bl	80130e6 <f_write>
 8013c88:	4603      	mov	r3, r0
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d107      	bne.n	8013c9e <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	685b      	ldr	r3, [r3, #4]
 8013c92:	68fa      	ldr	r2, [r7, #12]
 8013c94:	4293      	cmp	r3, r2
 8013c96:	d102      	bne.n	8013c9e <putc_flush+0x3e>
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	689b      	ldr	r3, [r3, #8]
 8013c9c:	e001      	b.n	8013ca2 <putc_flush+0x42>
	return EOF;
 8013c9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	3710      	adds	r7, #16
 8013ca6:	46bd      	mov	sp, r7
 8013ca8:	bd80      	pop	{r7, pc}

08013caa <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8013caa:	b480      	push	{r7}
 8013cac:	b083      	sub	sp, #12
 8013cae:	af00      	add	r7, sp, #0
 8013cb0:	6078      	str	r0, [r7, #4]
 8013cb2:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	683a      	ldr	r2, [r7, #0]
 8013cb8:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	2200      	movs	r2, #0
 8013cbe:	605a      	str	r2, [r3, #4]
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	685a      	ldr	r2, [r3, #4]
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	609a      	str	r2, [r3, #8]
}
 8013cc8:	bf00      	nop
 8013cca:	370c      	adds	r7, #12
 8013ccc:	46bd      	mov	sp, r7
 8013cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd2:	4770      	bx	lr

08013cd4 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8013cd4:	b40e      	push	{r1, r2, r3}
 8013cd6:	b580      	push	{r7, lr}
 8013cd8:	b0a7      	sub	sp, #156	; 0x9c
 8013cda:	af00      	add	r7, sp, #0
 8013cdc:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8013cde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013ce2:	6879      	ldr	r1, [r7, #4]
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	f7ff ffe0 	bl	8013caa <putc_init>

	va_start(arp, fmt);
 8013cea:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013cee:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 8013cf0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013cf4:	1c5a      	adds	r2, r3, #1
 8013cf6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013cfa:	781b      	ldrb	r3, [r3, #0]
 8013cfc:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 8013d00:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	f000 81f2 	beq.w	80140ee <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 8013d0a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013d0e:	2b25      	cmp	r3, #37	; 0x25
 8013d10:	d008      	beq.n	8013d24 <f_printf+0x50>
			putc_bfd(&pb, c);
 8013d12:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8013d16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013d1a:	4611      	mov	r1, r2
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	f7ff ff62 	bl	8013be6 <putc_bfd>
			continue;
 8013d22:	e1e3      	b.n	80140ec <f_printf+0x418>
		}
		w = f = 0;
 8013d24:	2300      	movs	r3, #0
 8013d26:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8013d2a:	2300      	movs	r3, #0
 8013d2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8013d30:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013d34:	1c5a      	adds	r2, r3, #1
 8013d36:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013d3a:	781b      	ldrb	r3, [r3, #0]
 8013d3c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8013d40:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013d44:	2b30      	cmp	r3, #48	; 0x30
 8013d46:	d10b      	bne.n	8013d60 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8013d48:	2301      	movs	r3, #1
 8013d4a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8013d4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013d52:	1c5a      	adds	r2, r3, #1
 8013d54:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013d58:	781b      	ldrb	r3, [r3, #0]
 8013d5a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8013d5e:	e024      	b.n	8013daa <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8013d60:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013d64:	2b2d      	cmp	r3, #45	; 0x2d
 8013d66:	d120      	bne.n	8013daa <f_printf+0xd6>
				f = 2; c = *fmt++;
 8013d68:	2302      	movs	r3, #2
 8013d6a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8013d6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013d72:	1c5a      	adds	r2, r3, #1
 8013d74:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013d78:	781b      	ldrb	r3, [r3, #0]
 8013d7a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8013d7e:	e014      	b.n	8013daa <f_printf+0xd6>
			w = w * 10 + c - '0';
 8013d80:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8013d84:	4613      	mov	r3, r2
 8013d86:	009b      	lsls	r3, r3, #2
 8013d88:	4413      	add	r3, r2
 8013d8a:	005b      	lsls	r3, r3, #1
 8013d8c:	461a      	mov	r2, r3
 8013d8e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013d92:	4413      	add	r3, r2
 8013d94:	3b30      	subs	r3, #48	; 0x30
 8013d96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 8013d9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013d9e:	1c5a      	adds	r2, r3, #1
 8013da0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013da4:	781b      	ldrb	r3, [r3, #0]
 8013da6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 8013daa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013dae:	2b2f      	cmp	r3, #47	; 0x2f
 8013db0:	d903      	bls.n	8013dba <f_printf+0xe6>
 8013db2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013db6:	2b39      	cmp	r3, #57	; 0x39
 8013db8:	d9e2      	bls.n	8013d80 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8013dba:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013dbe:	2b6c      	cmp	r3, #108	; 0x6c
 8013dc0:	d003      	beq.n	8013dca <f_printf+0xf6>
 8013dc2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013dc6:	2b4c      	cmp	r3, #76	; 0x4c
 8013dc8:	d10d      	bne.n	8013de6 <f_printf+0x112>
			f |= 4; c = *fmt++;
 8013dca:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8013dce:	f043 0304 	orr.w	r3, r3, #4
 8013dd2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8013dd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013dda:	1c5a      	adds	r2, r3, #1
 8013ddc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013de0:	781b      	ldrb	r3, [r3, #0]
 8013de2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 8013de6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	f000 8181 	beq.w	80140f2 <f_printf+0x41e>
		d = c;
 8013df0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013df4:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8013df8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013dfc:	2b60      	cmp	r3, #96	; 0x60
 8013dfe:	d908      	bls.n	8013e12 <f_printf+0x13e>
 8013e00:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013e04:	2b7a      	cmp	r3, #122	; 0x7a
 8013e06:	d804      	bhi.n	8013e12 <f_printf+0x13e>
 8013e08:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013e0c:	3b20      	subs	r3, #32
 8013e0e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 8013e12:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013e16:	3b42      	subs	r3, #66	; 0x42
 8013e18:	2b16      	cmp	r3, #22
 8013e1a:	f200 8098 	bhi.w	8013f4e <f_printf+0x27a>
 8013e1e:	a201      	add	r2, pc, #4	; (adr r2, 8013e24 <f_printf+0x150>)
 8013e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e24:	08013f2f 	.word	0x08013f2f
 8013e28:	08013f17 	.word	0x08013f17
 8013e2c:	08013f3f 	.word	0x08013f3f
 8013e30:	08013f4f 	.word	0x08013f4f
 8013e34:	08013f4f 	.word	0x08013f4f
 8013e38:	08013f4f 	.word	0x08013f4f
 8013e3c:	08013f4f 	.word	0x08013f4f
 8013e40:	08013f4f 	.word	0x08013f4f
 8013e44:	08013f4f 	.word	0x08013f4f
 8013e48:	08013f4f 	.word	0x08013f4f
 8013e4c:	08013f4f 	.word	0x08013f4f
 8013e50:	08013f4f 	.word	0x08013f4f
 8013e54:	08013f4f 	.word	0x08013f4f
 8013e58:	08013f37 	.word	0x08013f37
 8013e5c:	08013f4f 	.word	0x08013f4f
 8013e60:	08013f4f 	.word	0x08013f4f
 8013e64:	08013f4f 	.word	0x08013f4f
 8013e68:	08013e81 	.word	0x08013e81
 8013e6c:	08013f4f 	.word	0x08013f4f
 8013e70:	08013f3f 	.word	0x08013f3f
 8013e74:	08013f4f 	.word	0x08013f4f
 8013e78:	08013f4f 	.word	0x08013f4f
 8013e7c:	08013f47 	.word	0x08013f47
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8013e80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013e82:	1d1a      	adds	r2, r3, #4
 8013e84:	67ba      	str	r2, [r7, #120]	; 0x78
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 8013e8a:	2300      	movs	r3, #0
 8013e8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8013e90:	e004      	b.n	8013e9c <f_printf+0x1c8>
 8013e92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013e96:	3301      	adds	r3, #1
 8013e98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8013e9c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013e9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013ea2:	4413      	add	r3, r2
 8013ea4:	781b      	ldrb	r3, [r3, #0]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d1f3      	bne.n	8013e92 <f_printf+0x1be>
			if (!(f & 2)) {
 8013eaa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8013eae:	f003 0302 	and.w	r3, r3, #2
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d11a      	bne.n	8013eec <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8013eb6:	e005      	b.n	8013ec4 <f_printf+0x1f0>
 8013eb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013ebc:	2120      	movs	r1, #32
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	f7ff fe91 	bl	8013be6 <putc_bfd>
 8013ec4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013ec8:	1c5a      	adds	r2, r3, #1
 8013eca:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8013ece:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8013ed2:	429a      	cmp	r2, r3
 8013ed4:	d8f0      	bhi.n	8013eb8 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8013ed6:	e009      	b.n	8013eec <f_printf+0x218>
 8013ed8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013eda:	1c5a      	adds	r2, r3, #1
 8013edc:	67fa      	str	r2, [r7, #124]	; 0x7c
 8013ede:	781a      	ldrb	r2, [r3, #0]
 8013ee0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013ee4:	4611      	mov	r1, r2
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	f7ff fe7d 	bl	8013be6 <putc_bfd>
 8013eec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013eee:	781b      	ldrb	r3, [r3, #0]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d1f1      	bne.n	8013ed8 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8013ef4:	e005      	b.n	8013f02 <f_printf+0x22e>
 8013ef6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013efa:	2120      	movs	r1, #32
 8013efc:	4618      	mov	r0, r3
 8013efe:	f7ff fe72 	bl	8013be6 <putc_bfd>
 8013f02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013f06:	1c5a      	adds	r2, r3, #1
 8013f08:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8013f0c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8013f10:	429a      	cmp	r2, r3
 8013f12:	d8f0      	bhi.n	8013ef6 <f_printf+0x222>
			continue;
 8013f14:	e0ea      	b.n	80140ec <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8013f16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013f18:	1d1a      	adds	r2, r3, #4
 8013f1a:	67ba      	str	r2, [r7, #120]	; 0x78
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	b2da      	uxtb	r2, r3
 8013f20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013f24:	4611      	mov	r1, r2
 8013f26:	4618      	mov	r0, r3
 8013f28:	f7ff fe5d 	bl	8013be6 <putc_bfd>
 8013f2c:	e0de      	b.n	80140ec <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 8013f2e:	2302      	movs	r3, #2
 8013f30:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8013f34:	e014      	b.n	8013f60 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8013f36:	2308      	movs	r3, #8
 8013f38:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8013f3c:	e010      	b.n	8013f60 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8013f3e:	230a      	movs	r3, #10
 8013f40:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8013f44:	e00c      	b.n	8013f60 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8013f46:	2310      	movs	r3, #16
 8013f48:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8013f4c:	e008      	b.n	8013f60 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8013f4e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8013f52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013f56:	4611      	mov	r1, r2
 8013f58:	4618      	mov	r0, r3
 8013f5a:	f7ff fe44 	bl	8013be6 <putc_bfd>
 8013f5e:	e0c5      	b.n	80140ec <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8013f60:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8013f64:	f003 0304 	and.w	r3, r3, #4
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d004      	beq.n	8013f76 <f_printf+0x2a2>
 8013f6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013f6e:	1d1a      	adds	r2, r3, #4
 8013f70:	67ba      	str	r2, [r7, #120]	; 0x78
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	e00c      	b.n	8013f90 <f_printf+0x2bc>
 8013f76:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013f7a:	2b44      	cmp	r3, #68	; 0x44
 8013f7c:	d104      	bne.n	8013f88 <f_printf+0x2b4>
 8013f7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013f80:	1d1a      	adds	r2, r3, #4
 8013f82:	67ba      	str	r2, [r7, #120]	; 0x78
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	e003      	b.n	8013f90 <f_printf+0x2bc>
 8013f88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013f8a:	1d1a      	adds	r2, r3, #4
 8013f8c:	67ba      	str	r2, [r7, #120]	; 0x78
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8013f94:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013f98:	2b44      	cmp	r3, #68	; 0x44
 8013f9a:	d10e      	bne.n	8013fba <f_printf+0x2e6>
 8013f9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	da0a      	bge.n	8013fba <f_printf+0x2e6>
			v = 0 - v;
 8013fa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013fa8:	425b      	negs	r3, r3
 8013faa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 8013fae:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8013fb2:	f043 0308 	orr.w	r3, r3, #8
 8013fb6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 8013fba:	2300      	movs	r3, #0
 8013fbc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8013fc0:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8013fc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013fc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8013fcc:	fb01 f202 	mul.w	r2, r1, r2
 8013fd0:	1a9b      	subs	r3, r3, r2
 8013fd2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8013fd6:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8013fda:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8013fe2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8013fe6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013fea:	2b09      	cmp	r3, #9
 8013fec:	d90b      	bls.n	8014006 <f_printf+0x332>
 8013fee:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013ff2:	2b78      	cmp	r3, #120	; 0x78
 8013ff4:	d101      	bne.n	8013ffa <f_printf+0x326>
 8013ff6:	2227      	movs	r2, #39	; 0x27
 8013ff8:	e000      	b.n	8013ffc <f_printf+0x328>
 8013ffa:	2207      	movs	r2, #7
 8013ffc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8014000:	4413      	add	r3, r2
 8014002:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 8014006:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801400a:	1c5a      	adds	r2, r3, #1
 801400c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8014010:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8014014:	3230      	adds	r2, #48	; 0x30
 8014016:	b2d2      	uxtb	r2, r2
 8014018:	3398      	adds	r3, #152	; 0x98
 801401a:	443b      	add	r3, r7
 801401c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8014020:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014024:	2b00      	cmp	r3, #0
 8014026:	d003      	beq.n	8014030 <f_printf+0x35c>
 8014028:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801402c:	2b1f      	cmp	r3, #31
 801402e:	d9c7      	bls.n	8013fc0 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8014030:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8014034:	f003 0308 	and.w	r3, r3, #8
 8014038:	2b00      	cmp	r3, #0
 801403a:	d009      	beq.n	8014050 <f_printf+0x37c>
 801403c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014040:	1c5a      	adds	r2, r3, #1
 8014042:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8014046:	3398      	adds	r3, #152	; 0x98
 8014048:	443b      	add	r3, r7
 801404a:	222d      	movs	r2, #45	; 0x2d
 801404c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8014050:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014054:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8014058:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801405c:	f003 0301 	and.w	r3, r3, #1
 8014060:	2b00      	cmp	r3, #0
 8014062:	d001      	beq.n	8014068 <f_printf+0x394>
 8014064:	2330      	movs	r3, #48	; 0x30
 8014066:	e000      	b.n	801406a <f_printf+0x396>
 8014068:	2320      	movs	r3, #32
 801406a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 801406e:	e007      	b.n	8014080 <f_printf+0x3ac>
 8014070:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8014074:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014078:	4611      	mov	r1, r2
 801407a:	4618      	mov	r0, r3
 801407c:	f7ff fdb3 	bl	8013be6 <putc_bfd>
 8014080:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8014084:	f003 0302 	and.w	r3, r3, #2
 8014088:	2b00      	cmp	r3, #0
 801408a:	d108      	bne.n	801409e <f_printf+0x3ca>
 801408c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014090:	1c5a      	adds	r2, r3, #1
 8014092:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8014096:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801409a:	429a      	cmp	r2, r3
 801409c:	d8e8      	bhi.n	8014070 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 801409e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80140a2:	3b01      	subs	r3, #1
 80140a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80140a8:	f107 020c 	add.w	r2, r7, #12
 80140ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80140b0:	4413      	add	r3, r2
 80140b2:	781a      	ldrb	r2, [r3, #0]
 80140b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80140b8:	4611      	mov	r1, r2
 80140ba:	4618      	mov	r0, r3
 80140bc:	f7ff fd93 	bl	8013be6 <putc_bfd>
		} while (i);
 80140c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d1ea      	bne.n	801409e <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 80140c8:	e007      	b.n	80140da <f_printf+0x406>
 80140ca:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80140ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80140d2:	4611      	mov	r1, r2
 80140d4:	4618      	mov	r0, r3
 80140d6:	f7ff fd86 	bl	8013be6 <putc_bfd>
 80140da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80140de:	1c5a      	adds	r2, r3, #1
 80140e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80140e4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80140e8:	429a      	cmp	r2, r3
 80140ea:	d8ee      	bhi.n	80140ca <f_printf+0x3f6>
		c = *fmt++;
 80140ec:	e600      	b.n	8013cf0 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 80140ee:	bf00      	nop
 80140f0:	e000      	b.n	80140f4 <f_printf+0x420>
		if (!c) break;
 80140f2:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 80140f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80140f8:	4618      	mov	r0, r3
 80140fa:	f7ff fdb1 	bl	8013c60 <putc_flush>
 80140fe:	4603      	mov	r3, r0
}
 8014100:	4618      	mov	r0, r3
 8014102:	379c      	adds	r7, #156	; 0x9c
 8014104:	46bd      	mov	sp, r7
 8014106:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801410a:	b003      	add	sp, #12
 801410c:	4770      	bx	lr
 801410e:	bf00      	nop

08014110 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014110:	b480      	push	{r7}
 8014112:	b087      	sub	sp, #28
 8014114:	af00      	add	r7, sp, #0
 8014116:	60f8      	str	r0, [r7, #12]
 8014118:	60b9      	str	r1, [r7, #8]
 801411a:	4613      	mov	r3, r2
 801411c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801411e:	2301      	movs	r3, #1
 8014120:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014122:	2300      	movs	r3, #0
 8014124:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014126:	4b1f      	ldr	r3, [pc, #124]	; (80141a4 <FATFS_LinkDriverEx+0x94>)
 8014128:	7a5b      	ldrb	r3, [r3, #9]
 801412a:	b2db      	uxtb	r3, r3
 801412c:	2b00      	cmp	r3, #0
 801412e:	d131      	bne.n	8014194 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014130:	4b1c      	ldr	r3, [pc, #112]	; (80141a4 <FATFS_LinkDriverEx+0x94>)
 8014132:	7a5b      	ldrb	r3, [r3, #9]
 8014134:	b2db      	uxtb	r3, r3
 8014136:	461a      	mov	r2, r3
 8014138:	4b1a      	ldr	r3, [pc, #104]	; (80141a4 <FATFS_LinkDriverEx+0x94>)
 801413a:	2100      	movs	r1, #0
 801413c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801413e:	4b19      	ldr	r3, [pc, #100]	; (80141a4 <FATFS_LinkDriverEx+0x94>)
 8014140:	7a5b      	ldrb	r3, [r3, #9]
 8014142:	b2db      	uxtb	r3, r3
 8014144:	4a17      	ldr	r2, [pc, #92]	; (80141a4 <FATFS_LinkDriverEx+0x94>)
 8014146:	009b      	lsls	r3, r3, #2
 8014148:	4413      	add	r3, r2
 801414a:	68fa      	ldr	r2, [r7, #12]
 801414c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801414e:	4b15      	ldr	r3, [pc, #84]	; (80141a4 <FATFS_LinkDriverEx+0x94>)
 8014150:	7a5b      	ldrb	r3, [r3, #9]
 8014152:	b2db      	uxtb	r3, r3
 8014154:	461a      	mov	r2, r3
 8014156:	4b13      	ldr	r3, [pc, #76]	; (80141a4 <FATFS_LinkDriverEx+0x94>)
 8014158:	4413      	add	r3, r2
 801415a:	79fa      	ldrb	r2, [r7, #7]
 801415c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801415e:	4b11      	ldr	r3, [pc, #68]	; (80141a4 <FATFS_LinkDriverEx+0x94>)
 8014160:	7a5b      	ldrb	r3, [r3, #9]
 8014162:	b2db      	uxtb	r3, r3
 8014164:	1c5a      	adds	r2, r3, #1
 8014166:	b2d1      	uxtb	r1, r2
 8014168:	4a0e      	ldr	r2, [pc, #56]	; (80141a4 <FATFS_LinkDriverEx+0x94>)
 801416a:	7251      	strb	r1, [r2, #9]
 801416c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801416e:	7dbb      	ldrb	r3, [r7, #22]
 8014170:	3330      	adds	r3, #48	; 0x30
 8014172:	b2da      	uxtb	r2, r3
 8014174:	68bb      	ldr	r3, [r7, #8]
 8014176:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014178:	68bb      	ldr	r3, [r7, #8]
 801417a:	3301      	adds	r3, #1
 801417c:	223a      	movs	r2, #58	; 0x3a
 801417e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014180:	68bb      	ldr	r3, [r7, #8]
 8014182:	3302      	adds	r3, #2
 8014184:	222f      	movs	r2, #47	; 0x2f
 8014186:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014188:	68bb      	ldr	r3, [r7, #8]
 801418a:	3303      	adds	r3, #3
 801418c:	2200      	movs	r2, #0
 801418e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014190:	2300      	movs	r3, #0
 8014192:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014194:	7dfb      	ldrb	r3, [r7, #23]
}
 8014196:	4618      	mov	r0, r3
 8014198:	371c      	adds	r7, #28
 801419a:	46bd      	mov	sp, r7
 801419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a0:	4770      	bx	lr
 80141a2:	bf00      	nop
 80141a4:	20003244 	.word	0x20003244

080141a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80141a8:	b580      	push	{r7, lr}
 80141aa:	b082      	sub	sp, #8
 80141ac:	af00      	add	r7, sp, #0
 80141ae:	6078      	str	r0, [r7, #4]
 80141b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80141b2:	2200      	movs	r2, #0
 80141b4:	6839      	ldr	r1, [r7, #0]
 80141b6:	6878      	ldr	r0, [r7, #4]
 80141b8:	f7ff ffaa 	bl	8014110 <FATFS_LinkDriverEx>
 80141bc:	4603      	mov	r3, r0
}
 80141be:	4618      	mov	r0, r3
 80141c0:	3708      	adds	r7, #8
 80141c2:	46bd      	mov	sp, r7
 80141c4:	bd80      	pop	{r7, pc}

080141c6 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80141c6:	b580      	push	{r7, lr}
 80141c8:	b086      	sub	sp, #24
 80141ca:	af00      	add	r7, sp, #0
 80141cc:	4603      	mov	r3, r0
 80141ce:	6039      	str	r1, [r7, #0]
 80141d0:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 80141d2:	2300      	movs	r3, #0
 80141d4:	60fb      	str	r3, [r7, #12]
 80141d6:	2300      	movs	r3, #0
 80141d8:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 80141da:	f107 030c 	add.w	r3, r7, #12
 80141de:	2101      	movs	r1, #1
 80141e0:	4618      	mov	r0, r3
 80141e2:	f000 f8e9 	bl	80143b8 <osSemaphoreCreate>
 80141e6:	4602      	mov	r2, r0
 80141e8:	683b      	ldr	r3, [r7, #0]
 80141ea:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 80141ec:	683b      	ldr	r3, [r7, #0]
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	bf14      	ite	ne
 80141f4:	2301      	movne	r3, #1
 80141f6:	2300      	moveq	r3, #0
 80141f8:	b2db      	uxtb	r3, r3
 80141fa:	617b      	str	r3, [r7, #20]

    return ret;
 80141fc:	697b      	ldr	r3, [r7, #20]
}
 80141fe:	4618      	mov	r0, r3
 8014200:	3718      	adds	r7, #24
 8014202:	46bd      	mov	sp, r7
 8014204:	bd80      	pop	{r7, pc}

08014206 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8014206:	b580      	push	{r7, lr}
 8014208:	b082      	sub	sp, #8
 801420a:	af00      	add	r7, sp, #0
 801420c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 801420e:	6878      	ldr	r0, [r7, #4]
 8014210:	f000 f988 	bl	8014524 <osSemaphoreDelete>
#endif
    return 1;
 8014214:	2301      	movs	r3, #1
}
 8014216:	4618      	mov	r0, r3
 8014218:	3708      	adds	r7, #8
 801421a:	46bd      	mov	sp, r7
 801421c:	bd80      	pop	{r7, pc}

0801421e <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801421e:	b580      	push	{r7, lr}
 8014220:	b084      	sub	sp, #16
 8014222:	af00      	add	r7, sp, #0
 8014224:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8014226:	2300      	movs	r3, #0
 8014228:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 801422a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801422e:	6878      	ldr	r0, [r7, #4]
 8014230:	f000 f8f4 	bl	801441c <osSemaphoreWait>
 8014234:	4603      	mov	r3, r0
 8014236:	2b00      	cmp	r3, #0
 8014238:	d101      	bne.n	801423e <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 801423a:	2301      	movs	r3, #1
 801423c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801423e:	68fb      	ldr	r3, [r7, #12]
}
 8014240:	4618      	mov	r0, r3
 8014242:	3710      	adds	r7, #16
 8014244:	46bd      	mov	sp, r7
 8014246:	bd80      	pop	{r7, pc}

08014248 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8014248:	b580      	push	{r7, lr}
 801424a:	b082      	sub	sp, #8
 801424c:	af00      	add	r7, sp, #0
 801424e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8014250:	6878      	ldr	r0, [r7, #4]
 8014252:	f000 f931 	bl	80144b8 <osSemaphoreRelease>
#endif
}
 8014256:	bf00      	nop
 8014258:	3708      	adds	r7, #8
 801425a:	46bd      	mov	sp, r7
 801425c:	bd80      	pop	{r7, pc}

0801425e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801425e:	b480      	push	{r7}
 8014260:	b085      	sub	sp, #20
 8014262:	af00      	add	r7, sp, #0
 8014264:	4603      	mov	r3, r0
 8014266:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8014268:	2300      	movs	r3, #0
 801426a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801426c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014270:	2b84      	cmp	r3, #132	; 0x84
 8014272:	d005      	beq.n	8014280 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8014274:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	4413      	add	r3, r2
 801427c:	3303      	adds	r3, #3
 801427e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8014280:	68fb      	ldr	r3, [r7, #12]
}
 8014282:	4618      	mov	r0, r3
 8014284:	3714      	adds	r7, #20
 8014286:	46bd      	mov	sp, r7
 8014288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801428c:	4770      	bx	lr

0801428e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801428e:	b480      	push	{r7}
 8014290:	b083      	sub	sp, #12
 8014292:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014294:	f3ef 8305 	mrs	r3, IPSR
 8014298:	607b      	str	r3, [r7, #4]
  return(result);
 801429a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 801429c:	2b00      	cmp	r3, #0
 801429e:	bf14      	ite	ne
 80142a0:	2301      	movne	r3, #1
 80142a2:	2300      	moveq	r3, #0
 80142a4:	b2db      	uxtb	r3, r3
}
 80142a6:	4618      	mov	r0, r3
 80142a8:	370c      	adds	r7, #12
 80142aa:	46bd      	mov	sp, r7
 80142ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142b0:	4770      	bx	lr

080142b2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80142b2:	b580      	push	{r7, lr}
 80142b4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80142b6:	f001 fc05 	bl	8015ac4 <vTaskStartScheduler>
  
  return osOK;
 80142ba:	2300      	movs	r3, #0
}
 80142bc:	4618      	mov	r0, r3
 80142be:	bd80      	pop	{r7, pc}

080142c0 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 80142c0:	b580      	push	{r7, lr}
 80142c2:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 80142c4:	f002 f832 	bl	801632c <xTaskGetSchedulerState>
 80142c8:	4603      	mov	r3, r0
 80142ca:	2b01      	cmp	r3, #1
 80142cc:	d101      	bne.n	80142d2 <osKernelRunning+0x12>
    return 0;
 80142ce:	2300      	movs	r3, #0
 80142d0:	e000      	b.n	80142d4 <osKernelRunning+0x14>
  else
    return 1;
 80142d2:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 80142d4:	4618      	mov	r0, r3
 80142d6:	bd80      	pop	{r7, pc}

080142d8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80142d8:	b580      	push	{r7, lr}
 80142da:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80142dc:	f7ff ffd7 	bl	801428e <inHandlerMode>
 80142e0:	4603      	mov	r3, r0
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d003      	beq.n	80142ee <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80142e6:	f001 fd11 	bl	8015d0c <xTaskGetTickCountFromISR>
 80142ea:	4603      	mov	r3, r0
 80142ec:	e002      	b.n	80142f4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80142ee:	f001 fcfd 	bl	8015cec <xTaskGetTickCount>
 80142f2:	4603      	mov	r3, r0
  }
}
 80142f4:	4618      	mov	r0, r3
 80142f6:	bd80      	pop	{r7, pc}

080142f8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80142f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142fa:	b089      	sub	sp, #36	; 0x24
 80142fc:	af04      	add	r7, sp, #16
 80142fe:	6078      	str	r0, [r7, #4]
 8014300:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	695b      	ldr	r3, [r3, #20]
 8014306:	2b00      	cmp	r3, #0
 8014308:	d020      	beq.n	801434c <osThreadCreate+0x54>
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	699b      	ldr	r3, [r3, #24]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d01c      	beq.n	801434c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	685c      	ldr	r4, [r3, #4]
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	691e      	ldr	r6, [r3, #16]
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014324:	4618      	mov	r0, r3
 8014326:	f7ff ff9a 	bl	801425e <makeFreeRtosPriority>
 801432a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	695b      	ldr	r3, [r3, #20]
 8014330:	687a      	ldr	r2, [r7, #4]
 8014332:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014334:	9202      	str	r2, [sp, #8]
 8014336:	9301      	str	r3, [sp, #4]
 8014338:	9100      	str	r1, [sp, #0]
 801433a:	683b      	ldr	r3, [r7, #0]
 801433c:	4632      	mov	r2, r6
 801433e:	4629      	mov	r1, r5
 8014340:	4620      	mov	r0, r4
 8014342:	f001 f9e1 	bl	8015708 <xTaskCreateStatic>
 8014346:	4603      	mov	r3, r0
 8014348:	60fb      	str	r3, [r7, #12]
 801434a:	e01c      	b.n	8014386 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	685c      	ldr	r4, [r3, #4]
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014358:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014360:	4618      	mov	r0, r3
 8014362:	f7ff ff7c 	bl	801425e <makeFreeRtosPriority>
 8014366:	4602      	mov	r2, r0
 8014368:	f107 030c 	add.w	r3, r7, #12
 801436c:	9301      	str	r3, [sp, #4]
 801436e:	9200      	str	r2, [sp, #0]
 8014370:	683b      	ldr	r3, [r7, #0]
 8014372:	4632      	mov	r2, r6
 8014374:	4629      	mov	r1, r5
 8014376:	4620      	mov	r0, r4
 8014378:	f001 fa23 	bl	80157c2 <xTaskCreate>
 801437c:	4603      	mov	r3, r0
 801437e:	2b01      	cmp	r3, #1
 8014380:	d001      	beq.n	8014386 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8014382:	2300      	movs	r3, #0
 8014384:	e000      	b.n	8014388 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8014386:	68fb      	ldr	r3, [r7, #12]
}
 8014388:	4618      	mov	r0, r3
 801438a:	3714      	adds	r7, #20
 801438c:	46bd      	mov	sp, r7
 801438e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014390 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b084      	sub	sp, #16
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d001      	beq.n	80143a6 <osDelay+0x16>
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	e000      	b.n	80143a8 <osDelay+0x18>
 80143a6:	2301      	movs	r3, #1
 80143a8:	4618      	mov	r0, r3
 80143aa:	f001 fb57 	bl	8015a5c <vTaskDelay>
  
  return osOK;
 80143ae:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80143b0:	4618      	mov	r0, r3
 80143b2:	3710      	adds	r7, #16
 80143b4:	46bd      	mov	sp, r7
 80143b6:	bd80      	pop	{r7, pc}

080143b8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80143b8:	b580      	push	{r7, lr}
 80143ba:	b086      	sub	sp, #24
 80143bc:	af02      	add	r7, sp, #8
 80143be:	6078      	str	r0, [r7, #4]
 80143c0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	685b      	ldr	r3, [r3, #4]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d00f      	beq.n	80143ea <osSemaphoreCreate+0x32>
    if (count == 1) {
 80143ca:	683b      	ldr	r3, [r7, #0]
 80143cc:	2b01      	cmp	r3, #1
 80143ce:	d10a      	bne.n	80143e6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	685b      	ldr	r3, [r3, #4]
 80143d4:	2203      	movs	r2, #3
 80143d6:	9200      	str	r2, [sp, #0]
 80143d8:	2200      	movs	r2, #0
 80143da:	2100      	movs	r1, #0
 80143dc:	2001      	movs	r0, #1
 80143de:	f000 fab9 	bl	8014954 <xQueueGenericCreateStatic>
 80143e2:	4603      	mov	r3, r0
 80143e4:	e016      	b.n	8014414 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80143e6:	2300      	movs	r3, #0
 80143e8:	e014      	b.n	8014414 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80143ea:	683b      	ldr	r3, [r7, #0]
 80143ec:	2b01      	cmp	r3, #1
 80143ee:	d110      	bne.n	8014412 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80143f0:	2203      	movs	r2, #3
 80143f2:	2100      	movs	r1, #0
 80143f4:	2001      	movs	r0, #1
 80143f6:	f000 fb25 	bl	8014a44 <xQueueGenericCreate>
 80143fa:	60f8      	str	r0, [r7, #12]
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d005      	beq.n	801440e <osSemaphoreCreate+0x56>
 8014402:	2300      	movs	r3, #0
 8014404:	2200      	movs	r2, #0
 8014406:	2100      	movs	r1, #0
 8014408:	68f8      	ldr	r0, [r7, #12]
 801440a:	f000 fb75 	bl	8014af8 <xQueueGenericSend>
      return sema;
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	e000      	b.n	8014414 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8014412:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8014414:	4618      	mov	r0, r3
 8014416:	3710      	adds	r7, #16
 8014418:	46bd      	mov	sp, r7
 801441a:	bd80      	pop	{r7, pc}

0801441c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 801441c:	b580      	push	{r7, lr}
 801441e:	b084      	sub	sp, #16
 8014420:	af00      	add	r7, sp, #0
 8014422:	6078      	str	r0, [r7, #4]
 8014424:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8014426:	2300      	movs	r3, #0
 8014428:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d101      	bne.n	8014434 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8014430:	2380      	movs	r3, #128	; 0x80
 8014432:	e03a      	b.n	80144aa <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8014434:	2300      	movs	r3, #0
 8014436:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8014438:	683b      	ldr	r3, [r7, #0]
 801443a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801443e:	d103      	bne.n	8014448 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8014440:	f04f 33ff 	mov.w	r3, #4294967295
 8014444:	60fb      	str	r3, [r7, #12]
 8014446:	e009      	b.n	801445c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8014448:	683b      	ldr	r3, [r7, #0]
 801444a:	2b00      	cmp	r3, #0
 801444c:	d006      	beq.n	801445c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801444e:	683b      	ldr	r3, [r7, #0]
 8014450:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	2b00      	cmp	r3, #0
 8014456:	d101      	bne.n	801445c <osSemaphoreWait+0x40>
      ticks = 1;
 8014458:	2301      	movs	r3, #1
 801445a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 801445c:	f7ff ff17 	bl	801428e <inHandlerMode>
 8014460:	4603      	mov	r3, r0
 8014462:	2b00      	cmp	r3, #0
 8014464:	d017      	beq.n	8014496 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8014466:	f107 0308 	add.w	r3, r7, #8
 801446a:	461a      	mov	r2, r3
 801446c:	2100      	movs	r1, #0
 801446e:	6878      	ldr	r0, [r7, #4]
 8014470:	f000 ff54 	bl	801531c <xQueueReceiveFromISR>
 8014474:	4603      	mov	r3, r0
 8014476:	2b01      	cmp	r3, #1
 8014478:	d001      	beq.n	801447e <osSemaphoreWait+0x62>
      return osErrorOS;
 801447a:	23ff      	movs	r3, #255	; 0xff
 801447c:	e015      	b.n	80144aa <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801447e:	68bb      	ldr	r3, [r7, #8]
 8014480:	2b00      	cmp	r3, #0
 8014482:	d011      	beq.n	80144a8 <osSemaphoreWait+0x8c>
 8014484:	4b0b      	ldr	r3, [pc, #44]	; (80144b4 <osSemaphoreWait+0x98>)
 8014486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801448a:	601a      	str	r2, [r3, #0]
 801448c:	f3bf 8f4f 	dsb	sy
 8014490:	f3bf 8f6f 	isb	sy
 8014494:	e008      	b.n	80144a8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8014496:	68f9      	ldr	r1, [r7, #12]
 8014498:	6878      	ldr	r0, [r7, #4]
 801449a:	f000 fe33 	bl	8015104 <xQueueSemaphoreTake>
 801449e:	4603      	mov	r3, r0
 80144a0:	2b01      	cmp	r3, #1
 80144a2:	d001      	beq.n	80144a8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80144a4:	23ff      	movs	r3, #255	; 0xff
 80144a6:	e000      	b.n	80144aa <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80144a8:	2300      	movs	r3, #0
}
 80144aa:	4618      	mov	r0, r3
 80144ac:	3710      	adds	r7, #16
 80144ae:	46bd      	mov	sp, r7
 80144b0:	bd80      	pop	{r7, pc}
 80144b2:	bf00      	nop
 80144b4:	e000ed04 	.word	0xe000ed04

080144b8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80144b8:	b580      	push	{r7, lr}
 80144ba:	b084      	sub	sp, #16
 80144bc:	af00      	add	r7, sp, #0
 80144be:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80144c0:	2300      	movs	r3, #0
 80144c2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80144c4:	2300      	movs	r3, #0
 80144c6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80144c8:	f7ff fee1 	bl	801428e <inHandlerMode>
 80144cc:	4603      	mov	r3, r0
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d016      	beq.n	8014500 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80144d2:	f107 0308 	add.w	r3, r7, #8
 80144d6:	4619      	mov	r1, r3
 80144d8:	6878      	ldr	r0, [r7, #4]
 80144da:	f000 fca6 	bl	8014e2a <xQueueGiveFromISR>
 80144de:	4603      	mov	r3, r0
 80144e0:	2b01      	cmp	r3, #1
 80144e2:	d001      	beq.n	80144e8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80144e4:	23ff      	movs	r3, #255	; 0xff
 80144e6:	e017      	b.n	8014518 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80144e8:	68bb      	ldr	r3, [r7, #8]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d013      	beq.n	8014516 <osSemaphoreRelease+0x5e>
 80144ee:	4b0c      	ldr	r3, [pc, #48]	; (8014520 <osSemaphoreRelease+0x68>)
 80144f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144f4:	601a      	str	r2, [r3, #0]
 80144f6:	f3bf 8f4f 	dsb	sy
 80144fa:	f3bf 8f6f 	isb	sy
 80144fe:	e00a      	b.n	8014516 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8014500:	2300      	movs	r3, #0
 8014502:	2200      	movs	r2, #0
 8014504:	2100      	movs	r1, #0
 8014506:	6878      	ldr	r0, [r7, #4]
 8014508:	f000 faf6 	bl	8014af8 <xQueueGenericSend>
 801450c:	4603      	mov	r3, r0
 801450e:	2b01      	cmp	r3, #1
 8014510:	d001      	beq.n	8014516 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8014512:	23ff      	movs	r3, #255	; 0xff
 8014514:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8014516:	68fb      	ldr	r3, [r7, #12]
}
 8014518:	4618      	mov	r0, r3
 801451a:	3710      	adds	r7, #16
 801451c:	46bd      	mov	sp, r7
 801451e:	bd80      	pop	{r7, pc}
 8014520:	e000ed04 	.word	0xe000ed04

08014524 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8014524:	b580      	push	{r7, lr}
 8014526:	b082      	sub	sp, #8
 8014528:	af00      	add	r7, sp, #0
 801452a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 801452c:	f7ff feaf 	bl	801428e <inHandlerMode>
 8014530:	4603      	mov	r3, r0
 8014532:	2b00      	cmp	r3, #0
 8014534:	d001      	beq.n	801453a <osSemaphoreDelete+0x16>
    return osErrorISR;
 8014536:	2382      	movs	r3, #130	; 0x82
 8014538:	e003      	b.n	8014542 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 801453a:	6878      	ldr	r0, [r7, #4]
 801453c:	f000 ff6e 	bl	801541c <vQueueDelete>

  return osOK; 
 8014540:	2300      	movs	r3, #0
}
 8014542:	4618      	mov	r0, r3
 8014544:	3708      	adds	r7, #8
 8014546:	46bd      	mov	sp, r7
 8014548:	bd80      	pop	{r7, pc}

0801454a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 801454a:	b590      	push	{r4, r7, lr}
 801454c:	b085      	sub	sp, #20
 801454e:	af02      	add	r7, sp, #8
 8014550:	6078      	str	r0, [r7, #4]
 8014552:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	689b      	ldr	r3, [r3, #8]
 8014558:	2b00      	cmp	r3, #0
 801455a:	d011      	beq.n	8014580 <osMessageCreate+0x36>
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	68db      	ldr	r3, [r3, #12]
 8014560:	2b00      	cmp	r3, #0
 8014562:	d00d      	beq.n	8014580 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	6818      	ldr	r0, [r3, #0]
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	6859      	ldr	r1, [r3, #4]
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	689a      	ldr	r2, [r3, #8]
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	68db      	ldr	r3, [r3, #12]
 8014574:	2400      	movs	r4, #0
 8014576:	9400      	str	r4, [sp, #0]
 8014578:	f000 f9ec 	bl	8014954 <xQueueGenericCreateStatic>
 801457c:	4603      	mov	r3, r0
 801457e:	e008      	b.n	8014592 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	6818      	ldr	r0, [r3, #0]
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	685b      	ldr	r3, [r3, #4]
 8014588:	2200      	movs	r2, #0
 801458a:	4619      	mov	r1, r3
 801458c:	f000 fa5a 	bl	8014a44 <xQueueGenericCreate>
 8014590:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8014592:	4618      	mov	r0, r3
 8014594:	370c      	adds	r7, #12
 8014596:	46bd      	mov	sp, r7
 8014598:	bd90      	pop	{r4, r7, pc}
	...

0801459c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 801459c:	b580      	push	{r7, lr}
 801459e:	b086      	sub	sp, #24
 80145a0:	af00      	add	r7, sp, #0
 80145a2:	60f8      	str	r0, [r7, #12]
 80145a4:	60b9      	str	r1, [r7, #8]
 80145a6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80145a8:	2300      	movs	r3, #0
 80145aa:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80145b0:	697b      	ldr	r3, [r7, #20]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d101      	bne.n	80145ba <osMessagePut+0x1e>
    ticks = 1;
 80145b6:	2301      	movs	r3, #1
 80145b8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80145ba:	f7ff fe68 	bl	801428e <inHandlerMode>
 80145be:	4603      	mov	r3, r0
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d018      	beq.n	80145f6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80145c4:	f107 0210 	add.w	r2, r7, #16
 80145c8:	f107 0108 	add.w	r1, r7, #8
 80145cc:	2300      	movs	r3, #0
 80145ce:	68f8      	ldr	r0, [r7, #12]
 80145d0:	f000 fb90 	bl	8014cf4 <xQueueGenericSendFromISR>
 80145d4:	4603      	mov	r3, r0
 80145d6:	2b01      	cmp	r3, #1
 80145d8:	d001      	beq.n	80145de <osMessagePut+0x42>
      return osErrorOS;
 80145da:	23ff      	movs	r3, #255	; 0xff
 80145dc:	e018      	b.n	8014610 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80145de:	693b      	ldr	r3, [r7, #16]
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d014      	beq.n	801460e <osMessagePut+0x72>
 80145e4:	4b0c      	ldr	r3, [pc, #48]	; (8014618 <osMessagePut+0x7c>)
 80145e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80145ea:	601a      	str	r2, [r3, #0]
 80145ec:	f3bf 8f4f 	dsb	sy
 80145f0:	f3bf 8f6f 	isb	sy
 80145f4:	e00b      	b.n	801460e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80145f6:	f107 0108 	add.w	r1, r7, #8
 80145fa:	2300      	movs	r3, #0
 80145fc:	697a      	ldr	r2, [r7, #20]
 80145fe:	68f8      	ldr	r0, [r7, #12]
 8014600:	f000 fa7a 	bl	8014af8 <xQueueGenericSend>
 8014604:	4603      	mov	r3, r0
 8014606:	2b01      	cmp	r3, #1
 8014608:	d001      	beq.n	801460e <osMessagePut+0x72>
      return osErrorOS;
 801460a:	23ff      	movs	r3, #255	; 0xff
 801460c:	e000      	b.n	8014610 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 801460e:	2300      	movs	r3, #0
}
 8014610:	4618      	mov	r0, r3
 8014612:	3718      	adds	r7, #24
 8014614:	46bd      	mov	sp, r7
 8014616:	bd80      	pop	{r7, pc}
 8014618:	e000ed04 	.word	0xe000ed04

0801461c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 801461c:	b590      	push	{r4, r7, lr}
 801461e:	b08b      	sub	sp, #44	; 0x2c
 8014620:	af00      	add	r7, sp, #0
 8014622:	60f8      	str	r0, [r7, #12]
 8014624:	60b9      	str	r1, [r7, #8]
 8014626:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8014628:	68bb      	ldr	r3, [r7, #8]
 801462a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 801462c:	2300      	movs	r3, #0
 801462e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8014630:	68bb      	ldr	r3, [r7, #8]
 8014632:	2b00      	cmp	r3, #0
 8014634:	d10a      	bne.n	801464c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8014636:	2380      	movs	r3, #128	; 0x80
 8014638:	617b      	str	r3, [r7, #20]
    return event;
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	461c      	mov	r4, r3
 801463e:	f107 0314 	add.w	r3, r7, #20
 8014642:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014646:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801464a:	e054      	b.n	80146f6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 801464c:	2300      	movs	r3, #0
 801464e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8014650:	2300      	movs	r3, #0
 8014652:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	f1b3 3fff 	cmp.w	r3, #4294967295
 801465a:	d103      	bne.n	8014664 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 801465c:	f04f 33ff 	mov.w	r3, #4294967295
 8014660:	627b      	str	r3, [r7, #36]	; 0x24
 8014662:	e009      	b.n	8014678 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	2b00      	cmp	r3, #0
 8014668:	d006      	beq.n	8014678 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 801466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014670:	2b00      	cmp	r3, #0
 8014672:	d101      	bne.n	8014678 <osMessageGet+0x5c>
      ticks = 1;
 8014674:	2301      	movs	r3, #1
 8014676:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8014678:	f7ff fe09 	bl	801428e <inHandlerMode>
 801467c:	4603      	mov	r3, r0
 801467e:	2b00      	cmp	r3, #0
 8014680:	d01c      	beq.n	80146bc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8014682:	f107 0220 	add.w	r2, r7, #32
 8014686:	f107 0314 	add.w	r3, r7, #20
 801468a:	3304      	adds	r3, #4
 801468c:	4619      	mov	r1, r3
 801468e:	68b8      	ldr	r0, [r7, #8]
 8014690:	f000 fe44 	bl	801531c <xQueueReceiveFromISR>
 8014694:	4603      	mov	r3, r0
 8014696:	2b01      	cmp	r3, #1
 8014698:	d102      	bne.n	80146a0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 801469a:	2310      	movs	r3, #16
 801469c:	617b      	str	r3, [r7, #20]
 801469e:	e001      	b.n	80146a4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80146a0:	2300      	movs	r3, #0
 80146a2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80146a4:	6a3b      	ldr	r3, [r7, #32]
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d01d      	beq.n	80146e6 <osMessageGet+0xca>
 80146aa:	4b15      	ldr	r3, [pc, #84]	; (8014700 <osMessageGet+0xe4>)
 80146ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80146b0:	601a      	str	r2, [r3, #0]
 80146b2:	f3bf 8f4f 	dsb	sy
 80146b6:	f3bf 8f6f 	isb	sy
 80146ba:	e014      	b.n	80146e6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80146bc:	f107 0314 	add.w	r3, r7, #20
 80146c0:	3304      	adds	r3, #4
 80146c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80146c4:	4619      	mov	r1, r3
 80146c6:	68b8      	ldr	r0, [r7, #8]
 80146c8:	f000 fc3c 	bl	8014f44 <xQueueReceive>
 80146cc:	4603      	mov	r3, r0
 80146ce:	2b01      	cmp	r3, #1
 80146d0:	d102      	bne.n	80146d8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80146d2:	2310      	movs	r3, #16
 80146d4:	617b      	str	r3, [r7, #20]
 80146d6:	e006      	b.n	80146e6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80146d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d101      	bne.n	80146e2 <osMessageGet+0xc6>
 80146de:	2300      	movs	r3, #0
 80146e0:	e000      	b.n	80146e4 <osMessageGet+0xc8>
 80146e2:	2340      	movs	r3, #64	; 0x40
 80146e4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	461c      	mov	r4, r3
 80146ea:	f107 0314 	add.w	r3, r7, #20
 80146ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80146f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80146f6:	68f8      	ldr	r0, [r7, #12]
 80146f8:	372c      	adds	r7, #44	; 0x2c
 80146fa:	46bd      	mov	sp, r7
 80146fc:	bd90      	pop	{r4, r7, pc}
 80146fe:	bf00      	nop
 8014700:	e000ed04 	.word	0xe000ed04

08014704 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8014704:	b480      	push	{r7}
 8014706:	b083      	sub	sp, #12
 8014708:	af00      	add	r7, sp, #0
 801470a:	6078      	str	r0, [r7, #4]
 801470c:	6039      	str	r1, [r7, #0]
  return osOK;
#else
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
 801470e:	2381      	movs	r3, #129	; 0x81
#endif
}
 8014710:	4618      	mov	r0, r3
 8014712:	370c      	adds	r7, #12
 8014714:	46bd      	mov	sp, r7
 8014716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801471a:	4770      	bx	lr

0801471c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801471c:	b480      	push	{r7}
 801471e:	b083      	sub	sp, #12
 8014720:	af00      	add	r7, sp, #0
 8014722:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	f103 0208 	add.w	r2, r3, #8
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	f04f 32ff 	mov.w	r2, #4294967295
 8014734:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	f103 0208 	add.w	r2, r3, #8
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	f103 0208 	add.w	r2, r3, #8
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	2200      	movs	r2, #0
 801474e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014750:	bf00      	nop
 8014752:	370c      	adds	r7, #12
 8014754:	46bd      	mov	sp, r7
 8014756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801475a:	4770      	bx	lr

0801475c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801475c:	b480      	push	{r7}
 801475e:	b083      	sub	sp, #12
 8014760:	af00      	add	r7, sp, #0
 8014762:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	2200      	movs	r2, #0
 8014768:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801476a:	bf00      	nop
 801476c:	370c      	adds	r7, #12
 801476e:	46bd      	mov	sp, r7
 8014770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014774:	4770      	bx	lr

08014776 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014776:	b480      	push	{r7}
 8014778:	b085      	sub	sp, #20
 801477a:	af00      	add	r7, sp, #0
 801477c:	6078      	str	r0, [r7, #4]
 801477e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	685b      	ldr	r3, [r3, #4]
 8014784:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014786:	683b      	ldr	r3, [r7, #0]
 8014788:	68fa      	ldr	r2, [r7, #12]
 801478a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	689a      	ldr	r2, [r3, #8]
 8014790:	683b      	ldr	r3, [r7, #0]
 8014792:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	689b      	ldr	r3, [r3, #8]
 8014798:	683a      	ldr	r2, [r7, #0]
 801479a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	683a      	ldr	r2, [r7, #0]
 80147a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80147a2:	683b      	ldr	r3, [r7, #0]
 80147a4:	687a      	ldr	r2, [r7, #4]
 80147a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	1c5a      	adds	r2, r3, #1
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	601a      	str	r2, [r3, #0]
}
 80147b2:	bf00      	nop
 80147b4:	3714      	adds	r7, #20
 80147b6:	46bd      	mov	sp, r7
 80147b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147bc:	4770      	bx	lr

080147be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80147be:	b480      	push	{r7}
 80147c0:	b085      	sub	sp, #20
 80147c2:	af00      	add	r7, sp, #0
 80147c4:	6078      	str	r0, [r7, #4]
 80147c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80147c8:	683b      	ldr	r3, [r7, #0]
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80147ce:	68bb      	ldr	r3, [r7, #8]
 80147d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147d4:	d103      	bne.n	80147de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	691b      	ldr	r3, [r3, #16]
 80147da:	60fb      	str	r3, [r7, #12]
 80147dc:	e00c      	b.n	80147f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	3308      	adds	r3, #8
 80147e2:	60fb      	str	r3, [r7, #12]
 80147e4:	e002      	b.n	80147ec <vListInsert+0x2e>
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	685b      	ldr	r3, [r3, #4]
 80147ea:	60fb      	str	r3, [r7, #12]
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	685b      	ldr	r3, [r3, #4]
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	68ba      	ldr	r2, [r7, #8]
 80147f4:	429a      	cmp	r2, r3
 80147f6:	d2f6      	bcs.n	80147e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	685a      	ldr	r2, [r3, #4]
 80147fc:	683b      	ldr	r3, [r7, #0]
 80147fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014800:	683b      	ldr	r3, [r7, #0]
 8014802:	685b      	ldr	r3, [r3, #4]
 8014804:	683a      	ldr	r2, [r7, #0]
 8014806:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014808:	683b      	ldr	r3, [r7, #0]
 801480a:	68fa      	ldr	r2, [r7, #12]
 801480c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	683a      	ldr	r2, [r7, #0]
 8014812:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8014814:	683b      	ldr	r3, [r7, #0]
 8014816:	687a      	ldr	r2, [r7, #4]
 8014818:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	1c5a      	adds	r2, r3, #1
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	601a      	str	r2, [r3, #0]
}
 8014824:	bf00      	nop
 8014826:	3714      	adds	r7, #20
 8014828:	46bd      	mov	sp, r7
 801482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801482e:	4770      	bx	lr

08014830 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014830:	b480      	push	{r7}
 8014832:	b085      	sub	sp, #20
 8014834:	af00      	add	r7, sp, #0
 8014836:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	691b      	ldr	r3, [r3, #16]
 801483c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	685b      	ldr	r3, [r3, #4]
 8014842:	687a      	ldr	r2, [r7, #4]
 8014844:	6892      	ldr	r2, [r2, #8]
 8014846:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	689b      	ldr	r3, [r3, #8]
 801484c:	687a      	ldr	r2, [r7, #4]
 801484e:	6852      	ldr	r2, [r2, #4]
 8014850:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	685b      	ldr	r3, [r3, #4]
 8014856:	687a      	ldr	r2, [r7, #4]
 8014858:	429a      	cmp	r2, r3
 801485a:	d103      	bne.n	8014864 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	689a      	ldr	r2, [r3, #8]
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	2200      	movs	r2, #0
 8014868:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	1e5a      	subs	r2, r3, #1
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	681b      	ldr	r3, [r3, #0]
}
 8014878:	4618      	mov	r0, r3
 801487a:	3714      	adds	r7, #20
 801487c:	46bd      	mov	sp, r7
 801487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014882:	4770      	bx	lr

08014884 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8014884:	b580      	push	{r7, lr}
 8014886:	b084      	sub	sp, #16
 8014888:	af00      	add	r7, sp, #0
 801488a:	6078      	str	r0, [r7, #4]
 801488c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d10a      	bne.n	80148ae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014898:	f04f 0350 	mov.w	r3, #80	; 0x50
 801489c:	f383 8811 	msr	BASEPRI, r3
 80148a0:	f3bf 8f6f 	isb	sy
 80148a4:	f3bf 8f4f 	dsb	sy
 80148a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80148aa:	bf00      	nop
 80148ac:	e7fe      	b.n	80148ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80148ae:	f002 f889 	bl	80169c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	681a      	ldr	r2, [r3, #0]
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80148ba:	68f9      	ldr	r1, [r7, #12]
 80148bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80148be:	fb01 f303 	mul.w	r3, r1, r3
 80148c2:	441a      	add	r2, r3
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	2200      	movs	r2, #0
 80148cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	681a      	ldr	r2, [r3, #0]
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	681a      	ldr	r2, [r3, #0]
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80148de:	3b01      	subs	r3, #1
 80148e0:	68f9      	ldr	r1, [r7, #12]
 80148e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80148e4:	fb01 f303 	mul.w	r3, r1, r3
 80148e8:	441a      	add	r2, r3
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	22ff      	movs	r2, #255	; 0xff
 80148f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	22ff      	movs	r2, #255	; 0xff
 80148fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80148fe:	683b      	ldr	r3, [r7, #0]
 8014900:	2b00      	cmp	r3, #0
 8014902:	d114      	bne.n	801492e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	691b      	ldr	r3, [r3, #16]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d01a      	beq.n	8014942 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	3310      	adds	r3, #16
 8014910:	4618      	mov	r0, r3
 8014912:	f001 fb4b 	bl	8015fac <xTaskRemoveFromEventList>
 8014916:	4603      	mov	r3, r0
 8014918:	2b00      	cmp	r3, #0
 801491a:	d012      	beq.n	8014942 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801491c:	4b0c      	ldr	r3, [pc, #48]	; (8014950 <xQueueGenericReset+0xcc>)
 801491e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014922:	601a      	str	r2, [r3, #0]
 8014924:	f3bf 8f4f 	dsb	sy
 8014928:	f3bf 8f6f 	isb	sy
 801492c:	e009      	b.n	8014942 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	3310      	adds	r3, #16
 8014932:	4618      	mov	r0, r3
 8014934:	f7ff fef2 	bl	801471c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	3324      	adds	r3, #36	; 0x24
 801493c:	4618      	mov	r0, r3
 801493e:	f7ff feed 	bl	801471c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8014942:	f002 f86f 	bl	8016a24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8014946:	2301      	movs	r3, #1
}
 8014948:	4618      	mov	r0, r3
 801494a:	3710      	adds	r7, #16
 801494c:	46bd      	mov	sp, r7
 801494e:	bd80      	pop	{r7, pc}
 8014950:	e000ed04 	.word	0xe000ed04

08014954 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8014954:	b580      	push	{r7, lr}
 8014956:	b08e      	sub	sp, #56	; 0x38
 8014958:	af02      	add	r7, sp, #8
 801495a:	60f8      	str	r0, [r7, #12]
 801495c:	60b9      	str	r1, [r7, #8]
 801495e:	607a      	str	r2, [r7, #4]
 8014960:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	2b00      	cmp	r3, #0
 8014966:	d10a      	bne.n	801497e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8014968:	f04f 0350 	mov.w	r3, #80	; 0x50
 801496c:	f383 8811 	msr	BASEPRI, r3
 8014970:	f3bf 8f6f 	isb	sy
 8014974:	f3bf 8f4f 	dsb	sy
 8014978:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801497a:	bf00      	nop
 801497c:	e7fe      	b.n	801497c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801497e:	683b      	ldr	r3, [r7, #0]
 8014980:	2b00      	cmp	r3, #0
 8014982:	d10a      	bne.n	801499a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8014984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014988:	f383 8811 	msr	BASEPRI, r3
 801498c:	f3bf 8f6f 	isb	sy
 8014990:	f3bf 8f4f 	dsb	sy
 8014994:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014996:	bf00      	nop
 8014998:	e7fe      	b.n	8014998 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	2b00      	cmp	r3, #0
 801499e:	d002      	beq.n	80149a6 <xQueueGenericCreateStatic+0x52>
 80149a0:	68bb      	ldr	r3, [r7, #8]
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d001      	beq.n	80149aa <xQueueGenericCreateStatic+0x56>
 80149a6:	2301      	movs	r3, #1
 80149a8:	e000      	b.n	80149ac <xQueueGenericCreateStatic+0x58>
 80149aa:	2300      	movs	r3, #0
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d10a      	bne.n	80149c6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80149b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149b4:	f383 8811 	msr	BASEPRI, r3
 80149b8:	f3bf 8f6f 	isb	sy
 80149bc:	f3bf 8f4f 	dsb	sy
 80149c0:	623b      	str	r3, [r7, #32]
}
 80149c2:	bf00      	nop
 80149c4:	e7fe      	b.n	80149c4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d102      	bne.n	80149d2 <xQueueGenericCreateStatic+0x7e>
 80149cc:	68bb      	ldr	r3, [r7, #8]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d101      	bne.n	80149d6 <xQueueGenericCreateStatic+0x82>
 80149d2:	2301      	movs	r3, #1
 80149d4:	e000      	b.n	80149d8 <xQueueGenericCreateStatic+0x84>
 80149d6:	2300      	movs	r3, #0
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d10a      	bne.n	80149f2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80149dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149e0:	f383 8811 	msr	BASEPRI, r3
 80149e4:	f3bf 8f6f 	isb	sy
 80149e8:	f3bf 8f4f 	dsb	sy
 80149ec:	61fb      	str	r3, [r7, #28]
}
 80149ee:	bf00      	nop
 80149f0:	e7fe      	b.n	80149f0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80149f2:	2348      	movs	r3, #72	; 0x48
 80149f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80149f6:	697b      	ldr	r3, [r7, #20]
 80149f8:	2b48      	cmp	r3, #72	; 0x48
 80149fa:	d00a      	beq.n	8014a12 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80149fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a00:	f383 8811 	msr	BASEPRI, r3
 8014a04:	f3bf 8f6f 	isb	sy
 8014a08:	f3bf 8f4f 	dsb	sy
 8014a0c:	61bb      	str	r3, [r7, #24]
}
 8014a0e:	bf00      	nop
 8014a10:	e7fe      	b.n	8014a10 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8014a12:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014a14:	683b      	ldr	r3, [r7, #0]
 8014a16:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8014a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d00d      	beq.n	8014a3a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8014a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a20:	2201      	movs	r2, #1
 8014a22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014a26:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8014a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a2c:	9300      	str	r3, [sp, #0]
 8014a2e:	4613      	mov	r3, r2
 8014a30:	687a      	ldr	r2, [r7, #4]
 8014a32:	68b9      	ldr	r1, [r7, #8]
 8014a34:	68f8      	ldr	r0, [r7, #12]
 8014a36:	f000 f83f 	bl	8014ab8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8014a3c:	4618      	mov	r0, r3
 8014a3e:	3730      	adds	r7, #48	; 0x30
 8014a40:	46bd      	mov	sp, r7
 8014a42:	bd80      	pop	{r7, pc}

08014a44 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8014a44:	b580      	push	{r7, lr}
 8014a46:	b08a      	sub	sp, #40	; 0x28
 8014a48:	af02      	add	r7, sp, #8
 8014a4a:	60f8      	str	r0, [r7, #12]
 8014a4c:	60b9      	str	r1, [r7, #8]
 8014a4e:	4613      	mov	r3, r2
 8014a50:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d10a      	bne.n	8014a6e <xQueueGenericCreate+0x2a>
	__asm volatile
 8014a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a5c:	f383 8811 	msr	BASEPRI, r3
 8014a60:	f3bf 8f6f 	isb	sy
 8014a64:	f3bf 8f4f 	dsb	sy
 8014a68:	613b      	str	r3, [r7, #16]
}
 8014a6a:	bf00      	nop
 8014a6c:	e7fe      	b.n	8014a6c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	68ba      	ldr	r2, [r7, #8]
 8014a72:	fb02 f303 	mul.w	r3, r2, r3
 8014a76:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014a78:	69fb      	ldr	r3, [r7, #28]
 8014a7a:	3348      	adds	r3, #72	; 0x48
 8014a7c:	4618      	mov	r0, r3
 8014a7e:	f002 f8c3 	bl	8016c08 <pvPortMalloc>
 8014a82:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014a84:	69bb      	ldr	r3, [r7, #24]
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d011      	beq.n	8014aae <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8014a8a:	69bb      	ldr	r3, [r7, #24]
 8014a8c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014a8e:	697b      	ldr	r3, [r7, #20]
 8014a90:	3348      	adds	r3, #72	; 0x48
 8014a92:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014a94:	69bb      	ldr	r3, [r7, #24]
 8014a96:	2200      	movs	r2, #0
 8014a98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014a9c:	79fa      	ldrb	r2, [r7, #7]
 8014a9e:	69bb      	ldr	r3, [r7, #24]
 8014aa0:	9300      	str	r3, [sp, #0]
 8014aa2:	4613      	mov	r3, r2
 8014aa4:	697a      	ldr	r2, [r7, #20]
 8014aa6:	68b9      	ldr	r1, [r7, #8]
 8014aa8:	68f8      	ldr	r0, [r7, #12]
 8014aaa:	f000 f805 	bl	8014ab8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014aae:	69bb      	ldr	r3, [r7, #24]
	}
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	3720      	adds	r7, #32
 8014ab4:	46bd      	mov	sp, r7
 8014ab6:	bd80      	pop	{r7, pc}

08014ab8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8014ab8:	b580      	push	{r7, lr}
 8014aba:	b084      	sub	sp, #16
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	60f8      	str	r0, [r7, #12]
 8014ac0:	60b9      	str	r1, [r7, #8]
 8014ac2:	607a      	str	r2, [r7, #4]
 8014ac4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8014ac6:	68bb      	ldr	r3, [r7, #8]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d103      	bne.n	8014ad4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014acc:	69bb      	ldr	r3, [r7, #24]
 8014ace:	69ba      	ldr	r2, [r7, #24]
 8014ad0:	601a      	str	r2, [r3, #0]
 8014ad2:	e002      	b.n	8014ada <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014ad4:	69bb      	ldr	r3, [r7, #24]
 8014ad6:	687a      	ldr	r2, [r7, #4]
 8014ad8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8014ada:	69bb      	ldr	r3, [r7, #24]
 8014adc:	68fa      	ldr	r2, [r7, #12]
 8014ade:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014ae0:	69bb      	ldr	r3, [r7, #24]
 8014ae2:	68ba      	ldr	r2, [r7, #8]
 8014ae4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014ae6:	2101      	movs	r1, #1
 8014ae8:	69b8      	ldr	r0, [r7, #24]
 8014aea:	f7ff fecb 	bl	8014884 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8014aee:	bf00      	nop
 8014af0:	3710      	adds	r7, #16
 8014af2:	46bd      	mov	sp, r7
 8014af4:	bd80      	pop	{r7, pc}
	...

08014af8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014af8:	b580      	push	{r7, lr}
 8014afa:	b08e      	sub	sp, #56	; 0x38
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	60f8      	str	r0, [r7, #12]
 8014b00:	60b9      	str	r1, [r7, #8]
 8014b02:	607a      	str	r2, [r7, #4]
 8014b04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014b06:	2300      	movs	r3, #0
 8014b08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d10a      	bne.n	8014b2a <xQueueGenericSend+0x32>
	__asm volatile
 8014b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b18:	f383 8811 	msr	BASEPRI, r3
 8014b1c:	f3bf 8f6f 	isb	sy
 8014b20:	f3bf 8f4f 	dsb	sy
 8014b24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014b26:	bf00      	nop
 8014b28:	e7fe      	b.n	8014b28 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014b2a:	68bb      	ldr	r3, [r7, #8]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d103      	bne.n	8014b38 <xQueueGenericSend+0x40>
 8014b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d101      	bne.n	8014b3c <xQueueGenericSend+0x44>
 8014b38:	2301      	movs	r3, #1
 8014b3a:	e000      	b.n	8014b3e <xQueueGenericSend+0x46>
 8014b3c:	2300      	movs	r3, #0
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d10a      	bne.n	8014b58 <xQueueGenericSend+0x60>
	__asm volatile
 8014b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b46:	f383 8811 	msr	BASEPRI, r3
 8014b4a:	f3bf 8f6f 	isb	sy
 8014b4e:	f3bf 8f4f 	dsb	sy
 8014b52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014b54:	bf00      	nop
 8014b56:	e7fe      	b.n	8014b56 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014b58:	683b      	ldr	r3, [r7, #0]
 8014b5a:	2b02      	cmp	r3, #2
 8014b5c:	d103      	bne.n	8014b66 <xQueueGenericSend+0x6e>
 8014b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014b62:	2b01      	cmp	r3, #1
 8014b64:	d101      	bne.n	8014b6a <xQueueGenericSend+0x72>
 8014b66:	2301      	movs	r3, #1
 8014b68:	e000      	b.n	8014b6c <xQueueGenericSend+0x74>
 8014b6a:	2300      	movs	r3, #0
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d10a      	bne.n	8014b86 <xQueueGenericSend+0x8e>
	__asm volatile
 8014b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b74:	f383 8811 	msr	BASEPRI, r3
 8014b78:	f3bf 8f6f 	isb	sy
 8014b7c:	f3bf 8f4f 	dsb	sy
 8014b80:	623b      	str	r3, [r7, #32]
}
 8014b82:	bf00      	nop
 8014b84:	e7fe      	b.n	8014b84 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014b86:	f001 fbd1 	bl	801632c <xTaskGetSchedulerState>
 8014b8a:	4603      	mov	r3, r0
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d102      	bne.n	8014b96 <xQueueGenericSend+0x9e>
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d101      	bne.n	8014b9a <xQueueGenericSend+0xa2>
 8014b96:	2301      	movs	r3, #1
 8014b98:	e000      	b.n	8014b9c <xQueueGenericSend+0xa4>
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d10a      	bne.n	8014bb6 <xQueueGenericSend+0xbe>
	__asm volatile
 8014ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ba4:	f383 8811 	msr	BASEPRI, r3
 8014ba8:	f3bf 8f6f 	isb	sy
 8014bac:	f3bf 8f4f 	dsb	sy
 8014bb0:	61fb      	str	r3, [r7, #28]
}
 8014bb2:	bf00      	nop
 8014bb4:	e7fe      	b.n	8014bb4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014bb6:	f001 ff05 	bl	80169c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014bc2:	429a      	cmp	r2, r3
 8014bc4:	d302      	bcc.n	8014bcc <xQueueGenericSend+0xd4>
 8014bc6:	683b      	ldr	r3, [r7, #0]
 8014bc8:	2b02      	cmp	r3, #2
 8014bca:	d129      	bne.n	8014c20 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014bcc:	683a      	ldr	r2, [r7, #0]
 8014bce:	68b9      	ldr	r1, [r7, #8]
 8014bd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014bd2:	f000 fc5e 	bl	8015492 <prvCopyDataToQueue>
 8014bd6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d010      	beq.n	8014c02 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014be2:	3324      	adds	r3, #36	; 0x24
 8014be4:	4618      	mov	r0, r3
 8014be6:	f001 f9e1 	bl	8015fac <xTaskRemoveFromEventList>
 8014bea:	4603      	mov	r3, r0
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d013      	beq.n	8014c18 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014bf0:	4b3f      	ldr	r3, [pc, #252]	; (8014cf0 <xQueueGenericSend+0x1f8>)
 8014bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014bf6:	601a      	str	r2, [r3, #0]
 8014bf8:	f3bf 8f4f 	dsb	sy
 8014bfc:	f3bf 8f6f 	isb	sy
 8014c00:	e00a      	b.n	8014c18 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d007      	beq.n	8014c18 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014c08:	4b39      	ldr	r3, [pc, #228]	; (8014cf0 <xQueueGenericSend+0x1f8>)
 8014c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014c0e:	601a      	str	r2, [r3, #0]
 8014c10:	f3bf 8f4f 	dsb	sy
 8014c14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014c18:	f001 ff04 	bl	8016a24 <vPortExitCritical>
				return pdPASS;
 8014c1c:	2301      	movs	r3, #1
 8014c1e:	e063      	b.n	8014ce8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d103      	bne.n	8014c2e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014c26:	f001 fefd 	bl	8016a24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8014c2a:	2300      	movs	r3, #0
 8014c2c:	e05c      	b.n	8014ce8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d106      	bne.n	8014c42 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014c34:	f107 0314 	add.w	r3, r7, #20
 8014c38:	4618      	mov	r0, r3
 8014c3a:	f001 fa19 	bl	8016070 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014c3e:	2301      	movs	r3, #1
 8014c40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014c42:	f001 feef 	bl	8016a24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014c46:	f000 ffa7 	bl	8015b98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014c4a:	f001 febb 	bl	80169c4 <vPortEnterCritical>
 8014c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014c54:	b25b      	sxtb	r3, r3
 8014c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c5a:	d103      	bne.n	8014c64 <xQueueGenericSend+0x16c>
 8014c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c5e:	2200      	movs	r2, #0
 8014c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014c6a:	b25b      	sxtb	r3, r3
 8014c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c70:	d103      	bne.n	8014c7a <xQueueGenericSend+0x182>
 8014c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c74:	2200      	movs	r2, #0
 8014c76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014c7a:	f001 fed3 	bl	8016a24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014c7e:	1d3a      	adds	r2, r7, #4
 8014c80:	f107 0314 	add.w	r3, r7, #20
 8014c84:	4611      	mov	r1, r2
 8014c86:	4618      	mov	r0, r3
 8014c88:	f001 fa08 	bl	801609c <xTaskCheckForTimeOut>
 8014c8c:	4603      	mov	r3, r0
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d124      	bne.n	8014cdc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014c92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014c94:	f000 fcf5 	bl	8015682 <prvIsQueueFull>
 8014c98:	4603      	mov	r3, r0
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d018      	beq.n	8014cd0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ca0:	3310      	adds	r3, #16
 8014ca2:	687a      	ldr	r2, [r7, #4]
 8014ca4:	4611      	mov	r1, r2
 8014ca6:	4618      	mov	r0, r3
 8014ca8:	f001 f95c 	bl	8015f64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014cac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014cae:	f000 fc80 	bl	80155b2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8014cb2:	f000 ff7f 	bl	8015bb4 <xTaskResumeAll>
 8014cb6:	4603      	mov	r3, r0
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	f47f af7c 	bne.w	8014bb6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8014cbe:	4b0c      	ldr	r3, [pc, #48]	; (8014cf0 <xQueueGenericSend+0x1f8>)
 8014cc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014cc4:	601a      	str	r2, [r3, #0]
 8014cc6:	f3bf 8f4f 	dsb	sy
 8014cca:	f3bf 8f6f 	isb	sy
 8014cce:	e772      	b.n	8014bb6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014cd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014cd2:	f000 fc6e 	bl	80155b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014cd6:	f000 ff6d 	bl	8015bb4 <xTaskResumeAll>
 8014cda:	e76c      	b.n	8014bb6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014cdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014cde:	f000 fc68 	bl	80155b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014ce2:	f000 ff67 	bl	8015bb4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8014ce6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8014ce8:	4618      	mov	r0, r3
 8014cea:	3738      	adds	r7, #56	; 0x38
 8014cec:	46bd      	mov	sp, r7
 8014cee:	bd80      	pop	{r7, pc}
 8014cf0:	e000ed04 	.word	0xe000ed04

08014cf4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8014cf4:	b580      	push	{r7, lr}
 8014cf6:	b090      	sub	sp, #64	; 0x40
 8014cf8:	af00      	add	r7, sp, #0
 8014cfa:	60f8      	str	r0, [r7, #12]
 8014cfc:	60b9      	str	r1, [r7, #8]
 8014cfe:	607a      	str	r2, [r7, #4]
 8014d00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8014d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d10a      	bne.n	8014d22 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8014d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d10:	f383 8811 	msr	BASEPRI, r3
 8014d14:	f3bf 8f6f 	isb	sy
 8014d18:	f3bf 8f4f 	dsb	sy
 8014d1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014d1e:	bf00      	nop
 8014d20:	e7fe      	b.n	8014d20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014d22:	68bb      	ldr	r3, [r7, #8]
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d103      	bne.n	8014d30 <xQueueGenericSendFromISR+0x3c>
 8014d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d101      	bne.n	8014d34 <xQueueGenericSendFromISR+0x40>
 8014d30:	2301      	movs	r3, #1
 8014d32:	e000      	b.n	8014d36 <xQueueGenericSendFromISR+0x42>
 8014d34:	2300      	movs	r3, #0
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d10a      	bne.n	8014d50 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8014d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d3e:	f383 8811 	msr	BASEPRI, r3
 8014d42:	f3bf 8f6f 	isb	sy
 8014d46:	f3bf 8f4f 	dsb	sy
 8014d4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014d4c:	bf00      	nop
 8014d4e:	e7fe      	b.n	8014d4e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014d50:	683b      	ldr	r3, [r7, #0]
 8014d52:	2b02      	cmp	r3, #2
 8014d54:	d103      	bne.n	8014d5e <xQueueGenericSendFromISR+0x6a>
 8014d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014d5a:	2b01      	cmp	r3, #1
 8014d5c:	d101      	bne.n	8014d62 <xQueueGenericSendFromISR+0x6e>
 8014d5e:	2301      	movs	r3, #1
 8014d60:	e000      	b.n	8014d64 <xQueueGenericSendFromISR+0x70>
 8014d62:	2300      	movs	r3, #0
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d10a      	bne.n	8014d7e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8014d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d6c:	f383 8811 	msr	BASEPRI, r3
 8014d70:	f3bf 8f6f 	isb	sy
 8014d74:	f3bf 8f4f 	dsb	sy
 8014d78:	623b      	str	r3, [r7, #32]
}
 8014d7a:	bf00      	nop
 8014d7c:	e7fe      	b.n	8014d7c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014d7e:	f001 ff03 	bl	8016b88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8014d82:	f3ef 8211 	mrs	r2, BASEPRI
 8014d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d8a:	f383 8811 	msr	BASEPRI, r3
 8014d8e:	f3bf 8f6f 	isb	sy
 8014d92:	f3bf 8f4f 	dsb	sy
 8014d96:	61fa      	str	r2, [r7, #28]
 8014d98:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8014d9a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014d9c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014da6:	429a      	cmp	r2, r3
 8014da8:	d302      	bcc.n	8014db0 <xQueueGenericSendFromISR+0xbc>
 8014daa:	683b      	ldr	r3, [r7, #0]
 8014dac:	2b02      	cmp	r3, #2
 8014dae:	d12f      	bne.n	8014e10 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014db2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014dc0:	683a      	ldr	r2, [r7, #0]
 8014dc2:	68b9      	ldr	r1, [r7, #8]
 8014dc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014dc6:	f000 fb64 	bl	8015492 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014dca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8014dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014dd2:	d112      	bne.n	8014dfa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d016      	beq.n	8014e0a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dde:	3324      	adds	r3, #36	; 0x24
 8014de0:	4618      	mov	r0, r3
 8014de2:	f001 f8e3 	bl	8015fac <xTaskRemoveFromEventList>
 8014de6:	4603      	mov	r3, r0
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d00e      	beq.n	8014e0a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d00b      	beq.n	8014e0a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	2201      	movs	r2, #1
 8014df6:	601a      	str	r2, [r3, #0]
 8014df8:	e007      	b.n	8014e0a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014dfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014dfe:	3301      	adds	r3, #1
 8014e00:	b2db      	uxtb	r3, r3
 8014e02:	b25a      	sxtb	r2, r3
 8014e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8014e0a:	2301      	movs	r3, #1
 8014e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8014e0e:	e001      	b.n	8014e14 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014e10:	2300      	movs	r3, #0
 8014e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e16:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8014e18:	697b      	ldr	r3, [r7, #20]
 8014e1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8014e1e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8014e22:	4618      	mov	r0, r3
 8014e24:	3740      	adds	r7, #64	; 0x40
 8014e26:	46bd      	mov	sp, r7
 8014e28:	bd80      	pop	{r7, pc}

08014e2a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014e2a:	b580      	push	{r7, lr}
 8014e2c:	b08e      	sub	sp, #56	; 0x38
 8014e2e:	af00      	add	r7, sp, #0
 8014e30:	6078      	str	r0, [r7, #4]
 8014e32:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8014e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d10a      	bne.n	8014e54 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8014e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e42:	f383 8811 	msr	BASEPRI, r3
 8014e46:	f3bf 8f6f 	isb	sy
 8014e4a:	f3bf 8f4f 	dsb	sy
 8014e4e:	623b      	str	r3, [r7, #32]
}
 8014e50:	bf00      	nop
 8014e52:	e7fe      	b.n	8014e52 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d00a      	beq.n	8014e72 <xQueueGiveFromISR+0x48>
	__asm volatile
 8014e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e60:	f383 8811 	msr	BASEPRI, r3
 8014e64:	f3bf 8f6f 	isb	sy
 8014e68:	f3bf 8f4f 	dsb	sy
 8014e6c:	61fb      	str	r3, [r7, #28]
}
 8014e6e:	bf00      	nop
 8014e70:	e7fe      	b.n	8014e70 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8014e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d103      	bne.n	8014e82 <xQueueGiveFromISR+0x58>
 8014e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e7c:	689b      	ldr	r3, [r3, #8]
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d101      	bne.n	8014e86 <xQueueGiveFromISR+0x5c>
 8014e82:	2301      	movs	r3, #1
 8014e84:	e000      	b.n	8014e88 <xQueueGiveFromISR+0x5e>
 8014e86:	2300      	movs	r3, #0
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d10a      	bne.n	8014ea2 <xQueueGiveFromISR+0x78>
	__asm volatile
 8014e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e90:	f383 8811 	msr	BASEPRI, r3
 8014e94:	f3bf 8f6f 	isb	sy
 8014e98:	f3bf 8f4f 	dsb	sy
 8014e9c:	61bb      	str	r3, [r7, #24]
}
 8014e9e:	bf00      	nop
 8014ea0:	e7fe      	b.n	8014ea0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014ea2:	f001 fe71 	bl	8016b88 <vPortValidateInterruptPriority>
	__asm volatile
 8014ea6:	f3ef 8211 	mrs	r2, BASEPRI
 8014eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014eae:	f383 8811 	msr	BASEPRI, r3
 8014eb2:	f3bf 8f6f 	isb	sy
 8014eb6:	f3bf 8f4f 	dsb	sy
 8014eba:	617a      	str	r2, [r7, #20]
 8014ebc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8014ebe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ec6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8014ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014ecc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014ece:	429a      	cmp	r2, r3
 8014ed0:	d22b      	bcs.n	8014f2a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ed4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ede:	1c5a      	adds	r2, r3, #1
 8014ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ee2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014ee4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014eec:	d112      	bne.n	8014f14 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d016      	beq.n	8014f24 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ef8:	3324      	adds	r3, #36	; 0x24
 8014efa:	4618      	mov	r0, r3
 8014efc:	f001 f856 	bl	8015fac <xTaskRemoveFromEventList>
 8014f00:	4603      	mov	r3, r0
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d00e      	beq.n	8014f24 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014f06:	683b      	ldr	r3, [r7, #0]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d00b      	beq.n	8014f24 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014f0c:	683b      	ldr	r3, [r7, #0]
 8014f0e:	2201      	movs	r2, #1
 8014f10:	601a      	str	r2, [r3, #0]
 8014f12:	e007      	b.n	8014f24 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014f14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014f18:	3301      	adds	r3, #1
 8014f1a:	b2db      	uxtb	r3, r3
 8014f1c:	b25a      	sxtb	r2, r3
 8014f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8014f24:	2301      	movs	r3, #1
 8014f26:	637b      	str	r3, [r7, #52]	; 0x34
 8014f28:	e001      	b.n	8014f2e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014f2a:	2300      	movs	r3, #0
 8014f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8014f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f30:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	f383 8811 	msr	BASEPRI, r3
}
 8014f38:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014f3c:	4618      	mov	r0, r3
 8014f3e:	3738      	adds	r7, #56	; 0x38
 8014f40:	46bd      	mov	sp, r7
 8014f42:	bd80      	pop	{r7, pc}

08014f44 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8014f44:	b580      	push	{r7, lr}
 8014f46:	b08c      	sub	sp, #48	; 0x30
 8014f48:	af00      	add	r7, sp, #0
 8014f4a:	60f8      	str	r0, [r7, #12]
 8014f4c:	60b9      	str	r1, [r7, #8]
 8014f4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8014f50:	2300      	movs	r3, #0
 8014f52:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d10a      	bne.n	8014f74 <xQueueReceive+0x30>
	__asm volatile
 8014f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f62:	f383 8811 	msr	BASEPRI, r3
 8014f66:	f3bf 8f6f 	isb	sy
 8014f6a:	f3bf 8f4f 	dsb	sy
 8014f6e:	623b      	str	r3, [r7, #32]
}
 8014f70:	bf00      	nop
 8014f72:	e7fe      	b.n	8014f72 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014f74:	68bb      	ldr	r3, [r7, #8]
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d103      	bne.n	8014f82 <xQueueReceive+0x3e>
 8014f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d101      	bne.n	8014f86 <xQueueReceive+0x42>
 8014f82:	2301      	movs	r3, #1
 8014f84:	e000      	b.n	8014f88 <xQueueReceive+0x44>
 8014f86:	2300      	movs	r3, #0
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d10a      	bne.n	8014fa2 <xQueueReceive+0x5e>
	__asm volatile
 8014f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f90:	f383 8811 	msr	BASEPRI, r3
 8014f94:	f3bf 8f6f 	isb	sy
 8014f98:	f3bf 8f4f 	dsb	sy
 8014f9c:	61fb      	str	r3, [r7, #28]
}
 8014f9e:	bf00      	nop
 8014fa0:	e7fe      	b.n	8014fa0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014fa2:	f001 f9c3 	bl	801632c <xTaskGetSchedulerState>
 8014fa6:	4603      	mov	r3, r0
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d102      	bne.n	8014fb2 <xQueueReceive+0x6e>
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d101      	bne.n	8014fb6 <xQueueReceive+0x72>
 8014fb2:	2301      	movs	r3, #1
 8014fb4:	e000      	b.n	8014fb8 <xQueueReceive+0x74>
 8014fb6:	2300      	movs	r3, #0
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d10a      	bne.n	8014fd2 <xQueueReceive+0x8e>
	__asm volatile
 8014fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fc0:	f383 8811 	msr	BASEPRI, r3
 8014fc4:	f3bf 8f6f 	isb	sy
 8014fc8:	f3bf 8f4f 	dsb	sy
 8014fcc:	61bb      	str	r3, [r7, #24]
}
 8014fce:	bf00      	nop
 8014fd0:	e7fe      	b.n	8014fd0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014fd2:	f001 fcf7 	bl	80169c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014fda:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d01f      	beq.n	8015022 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014fe2:	68b9      	ldr	r1, [r7, #8]
 8014fe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014fe6:	f000 fabe 	bl	8015566 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fec:	1e5a      	subs	r2, r3, #1
 8014fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ff0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ff4:	691b      	ldr	r3, [r3, #16]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d00f      	beq.n	801501a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ffc:	3310      	adds	r3, #16
 8014ffe:	4618      	mov	r0, r3
 8015000:	f000 ffd4 	bl	8015fac <xTaskRemoveFromEventList>
 8015004:	4603      	mov	r3, r0
 8015006:	2b00      	cmp	r3, #0
 8015008:	d007      	beq.n	801501a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801500a:	4b3d      	ldr	r3, [pc, #244]	; (8015100 <xQueueReceive+0x1bc>)
 801500c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015010:	601a      	str	r2, [r3, #0]
 8015012:	f3bf 8f4f 	dsb	sy
 8015016:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801501a:	f001 fd03 	bl	8016a24 <vPortExitCritical>
				return pdPASS;
 801501e:	2301      	movs	r3, #1
 8015020:	e069      	b.n	80150f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	2b00      	cmp	r3, #0
 8015026:	d103      	bne.n	8015030 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015028:	f001 fcfc 	bl	8016a24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801502c:	2300      	movs	r3, #0
 801502e:	e062      	b.n	80150f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015032:	2b00      	cmp	r3, #0
 8015034:	d106      	bne.n	8015044 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015036:	f107 0310 	add.w	r3, r7, #16
 801503a:	4618      	mov	r0, r3
 801503c:	f001 f818 	bl	8016070 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015040:	2301      	movs	r3, #1
 8015042:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015044:	f001 fcee 	bl	8016a24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015048:	f000 fda6 	bl	8015b98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801504c:	f001 fcba 	bl	80169c4 <vPortEnterCritical>
 8015050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015052:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015056:	b25b      	sxtb	r3, r3
 8015058:	f1b3 3fff 	cmp.w	r3, #4294967295
 801505c:	d103      	bne.n	8015066 <xQueueReceive+0x122>
 801505e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015060:	2200      	movs	r2, #0
 8015062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015068:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801506c:	b25b      	sxtb	r3, r3
 801506e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015072:	d103      	bne.n	801507c <xQueueReceive+0x138>
 8015074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015076:	2200      	movs	r2, #0
 8015078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801507c:	f001 fcd2 	bl	8016a24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015080:	1d3a      	adds	r2, r7, #4
 8015082:	f107 0310 	add.w	r3, r7, #16
 8015086:	4611      	mov	r1, r2
 8015088:	4618      	mov	r0, r3
 801508a:	f001 f807 	bl	801609c <xTaskCheckForTimeOut>
 801508e:	4603      	mov	r3, r0
 8015090:	2b00      	cmp	r3, #0
 8015092:	d123      	bne.n	80150dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015094:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015096:	f000 fade 	bl	8015656 <prvIsQueueEmpty>
 801509a:	4603      	mov	r3, r0
 801509c:	2b00      	cmp	r3, #0
 801509e:	d017      	beq.n	80150d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80150a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150a2:	3324      	adds	r3, #36	; 0x24
 80150a4:	687a      	ldr	r2, [r7, #4]
 80150a6:	4611      	mov	r1, r2
 80150a8:	4618      	mov	r0, r3
 80150aa:	f000 ff5b 	bl	8015f64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80150ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80150b0:	f000 fa7f 	bl	80155b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80150b4:	f000 fd7e 	bl	8015bb4 <xTaskResumeAll>
 80150b8:	4603      	mov	r3, r0
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d189      	bne.n	8014fd2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80150be:	4b10      	ldr	r3, [pc, #64]	; (8015100 <xQueueReceive+0x1bc>)
 80150c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80150c4:	601a      	str	r2, [r3, #0]
 80150c6:	f3bf 8f4f 	dsb	sy
 80150ca:	f3bf 8f6f 	isb	sy
 80150ce:	e780      	b.n	8014fd2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80150d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80150d2:	f000 fa6e 	bl	80155b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80150d6:	f000 fd6d 	bl	8015bb4 <xTaskResumeAll>
 80150da:	e77a      	b.n	8014fd2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80150dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80150de:	f000 fa68 	bl	80155b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80150e2:	f000 fd67 	bl	8015bb4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80150e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80150e8:	f000 fab5 	bl	8015656 <prvIsQueueEmpty>
 80150ec:	4603      	mov	r3, r0
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	f43f af6f 	beq.w	8014fd2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80150f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80150f6:	4618      	mov	r0, r3
 80150f8:	3730      	adds	r7, #48	; 0x30
 80150fa:	46bd      	mov	sp, r7
 80150fc:	bd80      	pop	{r7, pc}
 80150fe:	bf00      	nop
 8015100:	e000ed04 	.word	0xe000ed04

08015104 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8015104:	b580      	push	{r7, lr}
 8015106:	b08e      	sub	sp, #56	; 0x38
 8015108:	af00      	add	r7, sp, #0
 801510a:	6078      	str	r0, [r7, #4]
 801510c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801510e:	2300      	movs	r3, #0
 8015110:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8015116:	2300      	movs	r3, #0
 8015118:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801511a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801511c:	2b00      	cmp	r3, #0
 801511e:	d10a      	bne.n	8015136 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8015120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015124:	f383 8811 	msr	BASEPRI, r3
 8015128:	f3bf 8f6f 	isb	sy
 801512c:	f3bf 8f4f 	dsb	sy
 8015130:	623b      	str	r3, [r7, #32]
}
 8015132:	bf00      	nop
 8015134:	e7fe      	b.n	8015134 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801513a:	2b00      	cmp	r3, #0
 801513c:	d00a      	beq.n	8015154 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801513e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015142:	f383 8811 	msr	BASEPRI, r3
 8015146:	f3bf 8f6f 	isb	sy
 801514a:	f3bf 8f4f 	dsb	sy
 801514e:	61fb      	str	r3, [r7, #28]
}
 8015150:	bf00      	nop
 8015152:	e7fe      	b.n	8015152 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015154:	f001 f8ea 	bl	801632c <xTaskGetSchedulerState>
 8015158:	4603      	mov	r3, r0
 801515a:	2b00      	cmp	r3, #0
 801515c:	d102      	bne.n	8015164 <xQueueSemaphoreTake+0x60>
 801515e:	683b      	ldr	r3, [r7, #0]
 8015160:	2b00      	cmp	r3, #0
 8015162:	d101      	bne.n	8015168 <xQueueSemaphoreTake+0x64>
 8015164:	2301      	movs	r3, #1
 8015166:	e000      	b.n	801516a <xQueueSemaphoreTake+0x66>
 8015168:	2300      	movs	r3, #0
 801516a:	2b00      	cmp	r3, #0
 801516c:	d10a      	bne.n	8015184 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015172:	f383 8811 	msr	BASEPRI, r3
 8015176:	f3bf 8f6f 	isb	sy
 801517a:	f3bf 8f4f 	dsb	sy
 801517e:	61bb      	str	r3, [r7, #24]
}
 8015180:	bf00      	nop
 8015182:	e7fe      	b.n	8015182 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015184:	f001 fc1e 	bl	80169c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8015188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801518a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801518c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801518e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015190:	2b00      	cmp	r3, #0
 8015192:	d024      	beq.n	80151de <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8015194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015196:	1e5a      	subs	r2, r3, #1
 8015198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801519a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801519c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d104      	bne.n	80151ae <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80151a4:	f001 fa6a 	bl	801667c <pvTaskIncrementMutexHeldCount>
 80151a8:	4602      	mov	r2, r0
 80151aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151ac:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80151ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151b0:	691b      	ldr	r3, [r3, #16]
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d00f      	beq.n	80151d6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80151b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151b8:	3310      	adds	r3, #16
 80151ba:	4618      	mov	r0, r3
 80151bc:	f000 fef6 	bl	8015fac <xTaskRemoveFromEventList>
 80151c0:	4603      	mov	r3, r0
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d007      	beq.n	80151d6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80151c6:	4b54      	ldr	r3, [pc, #336]	; (8015318 <xQueueSemaphoreTake+0x214>)
 80151c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80151cc:	601a      	str	r2, [r3, #0]
 80151ce:	f3bf 8f4f 	dsb	sy
 80151d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80151d6:	f001 fc25 	bl	8016a24 <vPortExitCritical>
				return pdPASS;
 80151da:	2301      	movs	r3, #1
 80151dc:	e097      	b.n	801530e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80151de:	683b      	ldr	r3, [r7, #0]
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d111      	bne.n	8015208 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80151e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d00a      	beq.n	8015200 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80151ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151ee:	f383 8811 	msr	BASEPRI, r3
 80151f2:	f3bf 8f6f 	isb	sy
 80151f6:	f3bf 8f4f 	dsb	sy
 80151fa:	617b      	str	r3, [r7, #20]
}
 80151fc:	bf00      	nop
 80151fe:	e7fe      	b.n	80151fe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8015200:	f001 fc10 	bl	8016a24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015204:	2300      	movs	r3, #0
 8015206:	e082      	b.n	801530e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801520a:	2b00      	cmp	r3, #0
 801520c:	d106      	bne.n	801521c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801520e:	f107 030c 	add.w	r3, r7, #12
 8015212:	4618      	mov	r0, r3
 8015214:	f000 ff2c 	bl	8016070 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015218:	2301      	movs	r3, #1
 801521a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801521c:	f001 fc02 	bl	8016a24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015220:	f000 fcba 	bl	8015b98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015224:	f001 fbce 	bl	80169c4 <vPortEnterCritical>
 8015228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801522a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801522e:	b25b      	sxtb	r3, r3
 8015230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015234:	d103      	bne.n	801523e <xQueueSemaphoreTake+0x13a>
 8015236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015238:	2200      	movs	r2, #0
 801523a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801523e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015240:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015244:	b25b      	sxtb	r3, r3
 8015246:	f1b3 3fff 	cmp.w	r3, #4294967295
 801524a:	d103      	bne.n	8015254 <xQueueSemaphoreTake+0x150>
 801524c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801524e:	2200      	movs	r2, #0
 8015250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015254:	f001 fbe6 	bl	8016a24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015258:	463a      	mov	r2, r7
 801525a:	f107 030c 	add.w	r3, r7, #12
 801525e:	4611      	mov	r1, r2
 8015260:	4618      	mov	r0, r3
 8015262:	f000 ff1b 	bl	801609c <xTaskCheckForTimeOut>
 8015266:	4603      	mov	r3, r0
 8015268:	2b00      	cmp	r3, #0
 801526a:	d132      	bne.n	80152d2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801526c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801526e:	f000 f9f2 	bl	8015656 <prvIsQueueEmpty>
 8015272:	4603      	mov	r3, r0
 8015274:	2b00      	cmp	r3, #0
 8015276:	d026      	beq.n	80152c6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801527a:	681b      	ldr	r3, [r3, #0]
 801527c:	2b00      	cmp	r3, #0
 801527e:	d109      	bne.n	8015294 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8015280:	f001 fba0 	bl	80169c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015286:	689b      	ldr	r3, [r3, #8]
 8015288:	4618      	mov	r0, r3
 801528a:	f001 f86d 	bl	8016368 <xTaskPriorityInherit>
 801528e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8015290:	f001 fbc8 	bl	8016a24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015296:	3324      	adds	r3, #36	; 0x24
 8015298:	683a      	ldr	r2, [r7, #0]
 801529a:	4611      	mov	r1, r2
 801529c:	4618      	mov	r0, r3
 801529e:	f000 fe61 	bl	8015f64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80152a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80152a4:	f000 f985 	bl	80155b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80152a8:	f000 fc84 	bl	8015bb4 <xTaskResumeAll>
 80152ac:	4603      	mov	r3, r0
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	f47f af68 	bne.w	8015184 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80152b4:	4b18      	ldr	r3, [pc, #96]	; (8015318 <xQueueSemaphoreTake+0x214>)
 80152b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80152ba:	601a      	str	r2, [r3, #0]
 80152bc:	f3bf 8f4f 	dsb	sy
 80152c0:	f3bf 8f6f 	isb	sy
 80152c4:	e75e      	b.n	8015184 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80152c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80152c8:	f000 f973 	bl	80155b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80152cc:	f000 fc72 	bl	8015bb4 <xTaskResumeAll>
 80152d0:	e758      	b.n	8015184 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80152d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80152d4:	f000 f96d 	bl	80155b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80152d8:	f000 fc6c 	bl	8015bb4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80152dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80152de:	f000 f9ba 	bl	8015656 <prvIsQueueEmpty>
 80152e2:	4603      	mov	r3, r0
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	f43f af4d 	beq.w	8015184 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80152ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d00d      	beq.n	801530c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80152f0:	f001 fb68 	bl	80169c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80152f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80152f6:	f000 f8b4 	bl	8015462 <prvGetDisinheritPriorityAfterTimeout>
 80152fa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80152fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152fe:	689b      	ldr	r3, [r3, #8]
 8015300:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015302:	4618      	mov	r0, r3
 8015304:	f001 f92c 	bl	8016560 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8015308:	f001 fb8c 	bl	8016a24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801530c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801530e:	4618      	mov	r0, r3
 8015310:	3738      	adds	r7, #56	; 0x38
 8015312:	46bd      	mov	sp, r7
 8015314:	bd80      	pop	{r7, pc}
 8015316:	bf00      	nop
 8015318:	e000ed04 	.word	0xe000ed04

0801531c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801531c:	b580      	push	{r7, lr}
 801531e:	b08e      	sub	sp, #56	; 0x38
 8015320:	af00      	add	r7, sp, #0
 8015322:	60f8      	str	r0, [r7, #12]
 8015324:	60b9      	str	r1, [r7, #8]
 8015326:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801532c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801532e:	2b00      	cmp	r3, #0
 8015330:	d10a      	bne.n	8015348 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8015332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015336:	f383 8811 	msr	BASEPRI, r3
 801533a:	f3bf 8f6f 	isb	sy
 801533e:	f3bf 8f4f 	dsb	sy
 8015342:	623b      	str	r3, [r7, #32]
}
 8015344:	bf00      	nop
 8015346:	e7fe      	b.n	8015346 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015348:	68bb      	ldr	r3, [r7, #8]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d103      	bne.n	8015356 <xQueueReceiveFromISR+0x3a>
 801534e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015352:	2b00      	cmp	r3, #0
 8015354:	d101      	bne.n	801535a <xQueueReceiveFromISR+0x3e>
 8015356:	2301      	movs	r3, #1
 8015358:	e000      	b.n	801535c <xQueueReceiveFromISR+0x40>
 801535a:	2300      	movs	r3, #0
 801535c:	2b00      	cmp	r3, #0
 801535e:	d10a      	bne.n	8015376 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8015360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015364:	f383 8811 	msr	BASEPRI, r3
 8015368:	f3bf 8f6f 	isb	sy
 801536c:	f3bf 8f4f 	dsb	sy
 8015370:	61fb      	str	r3, [r7, #28]
}
 8015372:	bf00      	nop
 8015374:	e7fe      	b.n	8015374 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015376:	f001 fc07 	bl	8016b88 <vPortValidateInterruptPriority>
	__asm volatile
 801537a:	f3ef 8211 	mrs	r2, BASEPRI
 801537e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015382:	f383 8811 	msr	BASEPRI, r3
 8015386:	f3bf 8f6f 	isb	sy
 801538a:	f3bf 8f4f 	dsb	sy
 801538e:	61ba      	str	r2, [r7, #24]
 8015390:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8015392:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015394:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801539a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801539c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d02f      	beq.n	8015402 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80153a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80153a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80153ac:	68b9      	ldr	r1, [r7, #8]
 80153ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80153b0:	f000 f8d9 	bl	8015566 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80153b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153b6:	1e5a      	subs	r2, r3, #1
 80153b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80153bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80153c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153c4:	d112      	bne.n	80153ec <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80153c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153c8:	691b      	ldr	r3, [r3, #16]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d016      	beq.n	80153fc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80153ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153d0:	3310      	adds	r3, #16
 80153d2:	4618      	mov	r0, r3
 80153d4:	f000 fdea 	bl	8015fac <xTaskRemoveFromEventList>
 80153d8:	4603      	mov	r3, r0
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d00e      	beq.n	80153fc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d00b      	beq.n	80153fc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	2201      	movs	r2, #1
 80153e8:	601a      	str	r2, [r3, #0]
 80153ea:	e007      	b.n	80153fc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80153ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80153f0:	3301      	adds	r3, #1
 80153f2:	b2db      	uxtb	r3, r3
 80153f4:	b25a      	sxtb	r2, r3
 80153f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80153fc:	2301      	movs	r3, #1
 80153fe:	637b      	str	r3, [r7, #52]	; 0x34
 8015400:	e001      	b.n	8015406 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8015402:	2300      	movs	r3, #0
 8015404:	637b      	str	r3, [r7, #52]	; 0x34
 8015406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015408:	613b      	str	r3, [r7, #16]
	__asm volatile
 801540a:	693b      	ldr	r3, [r7, #16]
 801540c:	f383 8811 	msr	BASEPRI, r3
}
 8015410:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015414:	4618      	mov	r0, r3
 8015416:	3738      	adds	r7, #56	; 0x38
 8015418:	46bd      	mov	sp, r7
 801541a:	bd80      	pop	{r7, pc}

0801541c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801541c:	b580      	push	{r7, lr}
 801541e:	b084      	sub	sp, #16
 8015420:	af00      	add	r7, sp, #0
 8015422:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	2b00      	cmp	r3, #0
 801542c:	d10a      	bne.n	8015444 <vQueueDelete+0x28>
	__asm volatile
 801542e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015432:	f383 8811 	msr	BASEPRI, r3
 8015436:	f3bf 8f6f 	isb	sy
 801543a:	f3bf 8f4f 	dsb	sy
 801543e:	60bb      	str	r3, [r7, #8]
}
 8015440:	bf00      	nop
 8015442:	e7fe      	b.n	8015442 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8015444:	68f8      	ldr	r0, [r7, #12]
 8015446:	f000 f935 	bl	80156b4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8015450:	2b00      	cmp	r3, #0
 8015452:	d102      	bne.n	801545a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8015454:	68f8      	ldr	r0, [r7, #12]
 8015456:	f001 fca3 	bl	8016da0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801545a:	bf00      	nop
 801545c:	3710      	adds	r7, #16
 801545e:	46bd      	mov	sp, r7
 8015460:	bd80      	pop	{r7, pc}

08015462 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8015462:	b480      	push	{r7}
 8015464:	b085      	sub	sp, #20
 8015466:	af00      	add	r7, sp, #0
 8015468:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801546e:	2b00      	cmp	r3, #0
 8015470:	d006      	beq.n	8015480 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	f1c3 0307 	rsb	r3, r3, #7
 801547c:	60fb      	str	r3, [r7, #12]
 801547e:	e001      	b.n	8015484 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8015480:	2300      	movs	r3, #0
 8015482:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8015484:	68fb      	ldr	r3, [r7, #12]
	}
 8015486:	4618      	mov	r0, r3
 8015488:	3714      	adds	r7, #20
 801548a:	46bd      	mov	sp, r7
 801548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015490:	4770      	bx	lr

08015492 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015492:	b580      	push	{r7, lr}
 8015494:	b086      	sub	sp, #24
 8015496:	af00      	add	r7, sp, #0
 8015498:	60f8      	str	r0, [r7, #12]
 801549a:	60b9      	str	r1, [r7, #8]
 801549c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801549e:	2300      	movs	r3, #0
 80154a0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80154a6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d10d      	bne.n	80154cc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80154b0:	68fb      	ldr	r3, [r7, #12]
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d14d      	bne.n	8015554 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	689b      	ldr	r3, [r3, #8]
 80154bc:	4618      	mov	r0, r3
 80154be:	f000 ffc9 	bl	8016454 <xTaskPriorityDisinherit>
 80154c2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	2200      	movs	r2, #0
 80154c8:	609a      	str	r2, [r3, #8]
 80154ca:	e043      	b.n	8015554 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d119      	bne.n	8015506 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80154d2:	68fb      	ldr	r3, [r7, #12]
 80154d4:	6858      	ldr	r0, [r3, #4]
 80154d6:	68fb      	ldr	r3, [r7, #12]
 80154d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80154da:	461a      	mov	r2, r3
 80154dc:	68b9      	ldr	r1, [r7, #8]
 80154de:	f003 fd8b 	bl	8018ff8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	685a      	ldr	r2, [r3, #4]
 80154e6:	68fb      	ldr	r3, [r7, #12]
 80154e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80154ea:	441a      	add	r2, r3
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80154f0:	68fb      	ldr	r3, [r7, #12]
 80154f2:	685a      	ldr	r2, [r3, #4]
 80154f4:	68fb      	ldr	r3, [r7, #12]
 80154f6:	689b      	ldr	r3, [r3, #8]
 80154f8:	429a      	cmp	r2, r3
 80154fa:	d32b      	bcc.n	8015554 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	681a      	ldr	r2, [r3, #0]
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	605a      	str	r2, [r3, #4]
 8015504:	e026      	b.n	8015554 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	68d8      	ldr	r0, [r3, #12]
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801550e:	461a      	mov	r2, r3
 8015510:	68b9      	ldr	r1, [r7, #8]
 8015512:	f003 fd71 	bl	8018ff8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	68da      	ldr	r2, [r3, #12]
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801551e:	425b      	negs	r3, r3
 8015520:	441a      	add	r2, r3
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	68da      	ldr	r2, [r3, #12]
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	681b      	ldr	r3, [r3, #0]
 801552e:	429a      	cmp	r2, r3
 8015530:	d207      	bcs.n	8015542 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015532:	68fb      	ldr	r3, [r7, #12]
 8015534:	689a      	ldr	r2, [r3, #8]
 8015536:	68fb      	ldr	r3, [r7, #12]
 8015538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801553a:	425b      	negs	r3, r3
 801553c:	441a      	add	r2, r3
 801553e:	68fb      	ldr	r3, [r7, #12]
 8015540:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	2b02      	cmp	r3, #2
 8015546:	d105      	bne.n	8015554 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015548:	693b      	ldr	r3, [r7, #16]
 801554a:	2b00      	cmp	r3, #0
 801554c:	d002      	beq.n	8015554 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801554e:	693b      	ldr	r3, [r7, #16]
 8015550:	3b01      	subs	r3, #1
 8015552:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015554:	693b      	ldr	r3, [r7, #16]
 8015556:	1c5a      	adds	r2, r3, #1
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801555c:	697b      	ldr	r3, [r7, #20]
}
 801555e:	4618      	mov	r0, r3
 8015560:	3718      	adds	r7, #24
 8015562:	46bd      	mov	sp, r7
 8015564:	bd80      	pop	{r7, pc}

08015566 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015566:	b580      	push	{r7, lr}
 8015568:	b082      	sub	sp, #8
 801556a:	af00      	add	r7, sp, #0
 801556c:	6078      	str	r0, [r7, #4]
 801556e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015574:	2b00      	cmp	r3, #0
 8015576:	d018      	beq.n	80155aa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	68da      	ldr	r2, [r3, #12]
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015580:	441a      	add	r2, r3
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	68da      	ldr	r2, [r3, #12]
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	689b      	ldr	r3, [r3, #8]
 801558e:	429a      	cmp	r2, r3
 8015590:	d303      	bcc.n	801559a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	681a      	ldr	r2, [r3, #0]
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	68d9      	ldr	r1, [r3, #12]
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80155a2:	461a      	mov	r2, r3
 80155a4:	6838      	ldr	r0, [r7, #0]
 80155a6:	f003 fd27 	bl	8018ff8 <memcpy>
	}
}
 80155aa:	bf00      	nop
 80155ac:	3708      	adds	r7, #8
 80155ae:	46bd      	mov	sp, r7
 80155b0:	bd80      	pop	{r7, pc}

080155b2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80155b2:	b580      	push	{r7, lr}
 80155b4:	b084      	sub	sp, #16
 80155b6:	af00      	add	r7, sp, #0
 80155b8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80155ba:	f001 fa03 	bl	80169c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80155c4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80155c6:	e011      	b.n	80155ec <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d012      	beq.n	80155f6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	3324      	adds	r3, #36	; 0x24
 80155d4:	4618      	mov	r0, r3
 80155d6:	f000 fce9 	bl	8015fac <xTaskRemoveFromEventList>
 80155da:	4603      	mov	r3, r0
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d001      	beq.n	80155e4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80155e0:	f000 fdbe 	bl	8016160 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80155e4:	7bfb      	ldrb	r3, [r7, #15]
 80155e6:	3b01      	subs	r3, #1
 80155e8:	b2db      	uxtb	r3, r3
 80155ea:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80155ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	dce9      	bgt.n	80155c8 <prvUnlockQueue+0x16>
 80155f4:	e000      	b.n	80155f8 <prvUnlockQueue+0x46>
					break;
 80155f6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	22ff      	movs	r2, #255	; 0xff
 80155fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8015600:	f001 fa10 	bl	8016a24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015604:	f001 f9de 	bl	80169c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801560e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015610:	e011      	b.n	8015636 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	691b      	ldr	r3, [r3, #16]
 8015616:	2b00      	cmp	r3, #0
 8015618:	d012      	beq.n	8015640 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	3310      	adds	r3, #16
 801561e:	4618      	mov	r0, r3
 8015620:	f000 fcc4 	bl	8015fac <xTaskRemoveFromEventList>
 8015624:	4603      	mov	r3, r0
 8015626:	2b00      	cmp	r3, #0
 8015628:	d001      	beq.n	801562e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801562a:	f000 fd99 	bl	8016160 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801562e:	7bbb      	ldrb	r3, [r7, #14]
 8015630:	3b01      	subs	r3, #1
 8015632:	b2db      	uxtb	r3, r3
 8015634:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015636:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801563a:	2b00      	cmp	r3, #0
 801563c:	dce9      	bgt.n	8015612 <prvUnlockQueue+0x60>
 801563e:	e000      	b.n	8015642 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8015640:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	22ff      	movs	r2, #255	; 0xff
 8015646:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801564a:	f001 f9eb 	bl	8016a24 <vPortExitCritical>
}
 801564e:	bf00      	nop
 8015650:	3710      	adds	r7, #16
 8015652:	46bd      	mov	sp, r7
 8015654:	bd80      	pop	{r7, pc}

08015656 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015656:	b580      	push	{r7, lr}
 8015658:	b084      	sub	sp, #16
 801565a:	af00      	add	r7, sp, #0
 801565c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801565e:	f001 f9b1 	bl	80169c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015666:	2b00      	cmp	r3, #0
 8015668:	d102      	bne.n	8015670 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801566a:	2301      	movs	r3, #1
 801566c:	60fb      	str	r3, [r7, #12]
 801566e:	e001      	b.n	8015674 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8015670:	2300      	movs	r3, #0
 8015672:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015674:	f001 f9d6 	bl	8016a24 <vPortExitCritical>

	return xReturn;
 8015678:	68fb      	ldr	r3, [r7, #12]
}
 801567a:	4618      	mov	r0, r3
 801567c:	3710      	adds	r7, #16
 801567e:	46bd      	mov	sp, r7
 8015680:	bd80      	pop	{r7, pc}

08015682 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8015682:	b580      	push	{r7, lr}
 8015684:	b084      	sub	sp, #16
 8015686:	af00      	add	r7, sp, #0
 8015688:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801568a:	f001 f99b 	bl	80169c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015696:	429a      	cmp	r2, r3
 8015698:	d102      	bne.n	80156a0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801569a:	2301      	movs	r3, #1
 801569c:	60fb      	str	r3, [r7, #12]
 801569e:	e001      	b.n	80156a4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80156a0:	2300      	movs	r3, #0
 80156a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80156a4:	f001 f9be 	bl	8016a24 <vPortExitCritical>

	return xReturn;
 80156a8:	68fb      	ldr	r3, [r7, #12]
}
 80156aa:	4618      	mov	r0, r3
 80156ac:	3710      	adds	r7, #16
 80156ae:	46bd      	mov	sp, r7
 80156b0:	bd80      	pop	{r7, pc}
	...

080156b4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80156b4:	b480      	push	{r7}
 80156b6:	b085      	sub	sp, #20
 80156b8:	af00      	add	r7, sp, #0
 80156ba:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80156bc:	2300      	movs	r3, #0
 80156be:	60fb      	str	r3, [r7, #12]
 80156c0:	e016      	b.n	80156f0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80156c2:	4a10      	ldr	r2, [pc, #64]	; (8015704 <vQueueUnregisterQueue+0x50>)
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	00db      	lsls	r3, r3, #3
 80156c8:	4413      	add	r3, r2
 80156ca:	685b      	ldr	r3, [r3, #4]
 80156cc:	687a      	ldr	r2, [r7, #4]
 80156ce:	429a      	cmp	r2, r3
 80156d0:	d10b      	bne.n	80156ea <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80156d2:	4a0c      	ldr	r2, [pc, #48]	; (8015704 <vQueueUnregisterQueue+0x50>)
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	2100      	movs	r1, #0
 80156d8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80156dc:	4a09      	ldr	r2, [pc, #36]	; (8015704 <vQueueUnregisterQueue+0x50>)
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	00db      	lsls	r3, r3, #3
 80156e2:	4413      	add	r3, r2
 80156e4:	2200      	movs	r2, #0
 80156e6:	605a      	str	r2, [r3, #4]
				break;
 80156e8:	e006      	b.n	80156f8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80156ea:	68fb      	ldr	r3, [r7, #12]
 80156ec:	3301      	adds	r3, #1
 80156ee:	60fb      	str	r3, [r7, #12]
 80156f0:	68fb      	ldr	r3, [r7, #12]
 80156f2:	2b07      	cmp	r3, #7
 80156f4:	d9e5      	bls.n	80156c2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80156f6:	bf00      	nop
 80156f8:	bf00      	nop
 80156fa:	3714      	adds	r7, #20
 80156fc:	46bd      	mov	sp, r7
 80156fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015702:	4770      	bx	lr
 8015704:	20003250 	.word	0x20003250

08015708 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8015708:	b580      	push	{r7, lr}
 801570a:	b08e      	sub	sp, #56	; 0x38
 801570c:	af04      	add	r7, sp, #16
 801570e:	60f8      	str	r0, [r7, #12]
 8015710:	60b9      	str	r1, [r7, #8]
 8015712:	607a      	str	r2, [r7, #4]
 8015714:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8015716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015718:	2b00      	cmp	r3, #0
 801571a:	d10a      	bne.n	8015732 <xTaskCreateStatic+0x2a>
	__asm volatile
 801571c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015720:	f383 8811 	msr	BASEPRI, r3
 8015724:	f3bf 8f6f 	isb	sy
 8015728:	f3bf 8f4f 	dsb	sy
 801572c:	623b      	str	r3, [r7, #32]
}
 801572e:	bf00      	nop
 8015730:	e7fe      	b.n	8015730 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8015732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015734:	2b00      	cmp	r3, #0
 8015736:	d10a      	bne.n	801574e <xTaskCreateStatic+0x46>
	__asm volatile
 8015738:	f04f 0350 	mov.w	r3, #80	; 0x50
 801573c:	f383 8811 	msr	BASEPRI, r3
 8015740:	f3bf 8f6f 	isb	sy
 8015744:	f3bf 8f4f 	dsb	sy
 8015748:	61fb      	str	r3, [r7, #28]
}
 801574a:	bf00      	nop
 801574c:	e7fe      	b.n	801574c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801574e:	23a0      	movs	r3, #160	; 0xa0
 8015750:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8015752:	693b      	ldr	r3, [r7, #16]
 8015754:	2ba0      	cmp	r3, #160	; 0xa0
 8015756:	d00a      	beq.n	801576e <xTaskCreateStatic+0x66>
	__asm volatile
 8015758:	f04f 0350 	mov.w	r3, #80	; 0x50
 801575c:	f383 8811 	msr	BASEPRI, r3
 8015760:	f3bf 8f6f 	isb	sy
 8015764:	f3bf 8f4f 	dsb	sy
 8015768:	61bb      	str	r3, [r7, #24]
}
 801576a:	bf00      	nop
 801576c:	e7fe      	b.n	801576c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801576e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8015770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015772:	2b00      	cmp	r3, #0
 8015774:	d01e      	beq.n	80157b4 <xTaskCreateStatic+0xac>
 8015776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015778:	2b00      	cmp	r3, #0
 801577a:	d01b      	beq.n	80157b4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801577c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801577e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8015780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015782:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015784:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8015786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015788:	2202      	movs	r2, #2
 801578a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801578e:	2300      	movs	r3, #0
 8015790:	9303      	str	r3, [sp, #12]
 8015792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015794:	9302      	str	r3, [sp, #8]
 8015796:	f107 0314 	add.w	r3, r7, #20
 801579a:	9301      	str	r3, [sp, #4]
 801579c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801579e:	9300      	str	r3, [sp, #0]
 80157a0:	683b      	ldr	r3, [r7, #0]
 80157a2:	687a      	ldr	r2, [r7, #4]
 80157a4:	68b9      	ldr	r1, [r7, #8]
 80157a6:	68f8      	ldr	r0, [r7, #12]
 80157a8:	f000 f850 	bl	801584c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80157ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80157ae:	f000 f8eb 	bl	8015988 <prvAddNewTaskToReadyList>
 80157b2:	e001      	b.n	80157b8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80157b4:	2300      	movs	r3, #0
 80157b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80157b8:	697b      	ldr	r3, [r7, #20]
	}
 80157ba:	4618      	mov	r0, r3
 80157bc:	3728      	adds	r7, #40	; 0x28
 80157be:	46bd      	mov	sp, r7
 80157c0:	bd80      	pop	{r7, pc}

080157c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80157c2:	b580      	push	{r7, lr}
 80157c4:	b08c      	sub	sp, #48	; 0x30
 80157c6:	af04      	add	r7, sp, #16
 80157c8:	60f8      	str	r0, [r7, #12]
 80157ca:	60b9      	str	r1, [r7, #8]
 80157cc:	603b      	str	r3, [r7, #0]
 80157ce:	4613      	mov	r3, r2
 80157d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80157d2:	88fb      	ldrh	r3, [r7, #6]
 80157d4:	009b      	lsls	r3, r3, #2
 80157d6:	4618      	mov	r0, r3
 80157d8:	f001 fa16 	bl	8016c08 <pvPortMalloc>
 80157dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80157de:	697b      	ldr	r3, [r7, #20]
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d00e      	beq.n	8015802 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80157e4:	20a0      	movs	r0, #160	; 0xa0
 80157e6:	f001 fa0f 	bl	8016c08 <pvPortMalloc>
 80157ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80157ec:	69fb      	ldr	r3, [r7, #28]
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d003      	beq.n	80157fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80157f2:	69fb      	ldr	r3, [r7, #28]
 80157f4:	697a      	ldr	r2, [r7, #20]
 80157f6:	631a      	str	r2, [r3, #48]	; 0x30
 80157f8:	e005      	b.n	8015806 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80157fa:	6978      	ldr	r0, [r7, #20]
 80157fc:	f001 fad0 	bl	8016da0 <vPortFree>
 8015800:	e001      	b.n	8015806 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8015802:	2300      	movs	r3, #0
 8015804:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8015806:	69fb      	ldr	r3, [r7, #28]
 8015808:	2b00      	cmp	r3, #0
 801580a:	d017      	beq.n	801583c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801580c:	69fb      	ldr	r3, [r7, #28]
 801580e:	2200      	movs	r2, #0
 8015810:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8015814:	88fa      	ldrh	r2, [r7, #6]
 8015816:	2300      	movs	r3, #0
 8015818:	9303      	str	r3, [sp, #12]
 801581a:	69fb      	ldr	r3, [r7, #28]
 801581c:	9302      	str	r3, [sp, #8]
 801581e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015820:	9301      	str	r3, [sp, #4]
 8015822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015824:	9300      	str	r3, [sp, #0]
 8015826:	683b      	ldr	r3, [r7, #0]
 8015828:	68b9      	ldr	r1, [r7, #8]
 801582a:	68f8      	ldr	r0, [r7, #12]
 801582c:	f000 f80e 	bl	801584c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015830:	69f8      	ldr	r0, [r7, #28]
 8015832:	f000 f8a9 	bl	8015988 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8015836:	2301      	movs	r3, #1
 8015838:	61bb      	str	r3, [r7, #24]
 801583a:	e002      	b.n	8015842 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801583c:	f04f 33ff 	mov.w	r3, #4294967295
 8015840:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8015842:	69bb      	ldr	r3, [r7, #24]
	}
 8015844:	4618      	mov	r0, r3
 8015846:	3720      	adds	r7, #32
 8015848:	46bd      	mov	sp, r7
 801584a:	bd80      	pop	{r7, pc}

0801584c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801584c:	b580      	push	{r7, lr}
 801584e:	b088      	sub	sp, #32
 8015850:	af00      	add	r7, sp, #0
 8015852:	60f8      	str	r0, [r7, #12]
 8015854:	60b9      	str	r1, [r7, #8]
 8015856:	607a      	str	r2, [r7, #4]
 8015858:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801585a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801585c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015864:	3b01      	subs	r3, #1
 8015866:	009b      	lsls	r3, r3, #2
 8015868:	4413      	add	r3, r2
 801586a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801586c:	69bb      	ldr	r3, [r7, #24]
 801586e:	f023 0307 	bic.w	r3, r3, #7
 8015872:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8015874:	69bb      	ldr	r3, [r7, #24]
 8015876:	f003 0307 	and.w	r3, r3, #7
 801587a:	2b00      	cmp	r3, #0
 801587c:	d00a      	beq.n	8015894 <prvInitialiseNewTask+0x48>
	__asm volatile
 801587e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015882:	f383 8811 	msr	BASEPRI, r3
 8015886:	f3bf 8f6f 	isb	sy
 801588a:	f3bf 8f4f 	dsb	sy
 801588e:	617b      	str	r3, [r7, #20]
}
 8015890:	bf00      	nop
 8015892:	e7fe      	b.n	8015892 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8015894:	68bb      	ldr	r3, [r7, #8]
 8015896:	2b00      	cmp	r3, #0
 8015898:	d01f      	beq.n	80158da <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801589a:	2300      	movs	r3, #0
 801589c:	61fb      	str	r3, [r7, #28]
 801589e:	e012      	b.n	80158c6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80158a0:	68ba      	ldr	r2, [r7, #8]
 80158a2:	69fb      	ldr	r3, [r7, #28]
 80158a4:	4413      	add	r3, r2
 80158a6:	7819      	ldrb	r1, [r3, #0]
 80158a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80158aa:	69fb      	ldr	r3, [r7, #28]
 80158ac:	4413      	add	r3, r2
 80158ae:	3334      	adds	r3, #52	; 0x34
 80158b0:	460a      	mov	r2, r1
 80158b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80158b4:	68ba      	ldr	r2, [r7, #8]
 80158b6:	69fb      	ldr	r3, [r7, #28]
 80158b8:	4413      	add	r3, r2
 80158ba:	781b      	ldrb	r3, [r3, #0]
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d006      	beq.n	80158ce <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80158c0:	69fb      	ldr	r3, [r7, #28]
 80158c2:	3301      	adds	r3, #1
 80158c4:	61fb      	str	r3, [r7, #28]
 80158c6:	69fb      	ldr	r3, [r7, #28]
 80158c8:	2b0f      	cmp	r3, #15
 80158ca:	d9e9      	bls.n	80158a0 <prvInitialiseNewTask+0x54>
 80158cc:	e000      	b.n	80158d0 <prvInitialiseNewTask+0x84>
			{
				break;
 80158ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80158d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158d2:	2200      	movs	r2, #0
 80158d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80158d8:	e003      	b.n	80158e2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80158da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158dc:	2200      	movs	r2, #0
 80158de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80158e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158e4:	2b06      	cmp	r3, #6
 80158e6:	d901      	bls.n	80158ec <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80158e8:	2306      	movs	r3, #6
 80158ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80158ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80158f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80158f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80158f6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80158f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158fa:	2200      	movs	r2, #0
 80158fc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80158fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015900:	3304      	adds	r3, #4
 8015902:	4618      	mov	r0, r3
 8015904:	f7fe ff2a 	bl	801475c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8015908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801590a:	3318      	adds	r3, #24
 801590c:	4618      	mov	r0, r3
 801590e:	f7fe ff25 	bl	801475c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8015912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015916:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801591a:	f1c3 0207 	rsb	r2, r3, #7
 801591e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015920:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015926:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8015928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801592a:	2200      	movs	r2, #0
 801592c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015932:	2200      	movs	r2, #0
 8015934:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8015938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801593a:	334c      	adds	r3, #76	; 0x4c
 801593c:	224c      	movs	r2, #76	; 0x4c
 801593e:	2100      	movs	r1, #0
 8015940:	4618      	mov	r0, r3
 8015942:	f003 fa65 	bl	8018e10 <memset>
 8015946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015948:	4a0c      	ldr	r2, [pc, #48]	; (801597c <prvInitialiseNewTask+0x130>)
 801594a:	651a      	str	r2, [r3, #80]	; 0x50
 801594c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801594e:	4a0c      	ldr	r2, [pc, #48]	; (8015980 <prvInitialiseNewTask+0x134>)
 8015950:	655a      	str	r2, [r3, #84]	; 0x54
 8015952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015954:	4a0b      	ldr	r2, [pc, #44]	; (8015984 <prvInitialiseNewTask+0x138>)
 8015956:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015958:	683a      	ldr	r2, [r7, #0]
 801595a:	68f9      	ldr	r1, [r7, #12]
 801595c:	69b8      	ldr	r0, [r7, #24]
 801595e:	f000 ff07 	bl	8016770 <pxPortInitialiseStack>
 8015962:	4602      	mov	r2, r0
 8015964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015966:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8015968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801596a:	2b00      	cmp	r3, #0
 801596c:	d002      	beq.n	8015974 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801596e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015972:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015974:	bf00      	nop
 8015976:	3720      	adds	r7, #32
 8015978:	46bd      	mov	sp, r7
 801597a:	bd80      	pop	{r7, pc}
 801597c:	20007c4c 	.word	0x20007c4c
 8015980:	20007cb4 	.word	0x20007cb4
 8015984:	20007d1c 	.word	0x20007d1c

08015988 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015988:	b580      	push	{r7, lr}
 801598a:	b082      	sub	sp, #8
 801598c:	af00      	add	r7, sp, #0
 801598e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015990:	f001 f818 	bl	80169c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015994:	4b2a      	ldr	r3, [pc, #168]	; (8015a40 <prvAddNewTaskToReadyList+0xb8>)
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	3301      	adds	r3, #1
 801599a:	4a29      	ldr	r2, [pc, #164]	; (8015a40 <prvAddNewTaskToReadyList+0xb8>)
 801599c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801599e:	4b29      	ldr	r3, [pc, #164]	; (8015a44 <prvAddNewTaskToReadyList+0xbc>)
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d109      	bne.n	80159ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80159a6:	4a27      	ldr	r2, [pc, #156]	; (8015a44 <prvAddNewTaskToReadyList+0xbc>)
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80159ac:	4b24      	ldr	r3, [pc, #144]	; (8015a40 <prvAddNewTaskToReadyList+0xb8>)
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	2b01      	cmp	r3, #1
 80159b2:	d110      	bne.n	80159d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80159b4:	f000 fbf8 	bl	80161a8 <prvInitialiseTaskLists>
 80159b8:	e00d      	b.n	80159d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80159ba:	4b23      	ldr	r3, [pc, #140]	; (8015a48 <prvAddNewTaskToReadyList+0xc0>)
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d109      	bne.n	80159d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80159c2:	4b20      	ldr	r3, [pc, #128]	; (8015a44 <prvAddNewTaskToReadyList+0xbc>)
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159cc:	429a      	cmp	r2, r3
 80159ce:	d802      	bhi.n	80159d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80159d0:	4a1c      	ldr	r2, [pc, #112]	; (8015a44 <prvAddNewTaskToReadyList+0xbc>)
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80159d6:	4b1d      	ldr	r3, [pc, #116]	; (8015a4c <prvAddNewTaskToReadyList+0xc4>)
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	3301      	adds	r3, #1
 80159dc:	4a1b      	ldr	r2, [pc, #108]	; (8015a4c <prvAddNewTaskToReadyList+0xc4>)
 80159de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159e4:	2201      	movs	r2, #1
 80159e6:	409a      	lsls	r2, r3
 80159e8:	4b19      	ldr	r3, [pc, #100]	; (8015a50 <prvAddNewTaskToReadyList+0xc8>)
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	4313      	orrs	r3, r2
 80159ee:	4a18      	ldr	r2, [pc, #96]	; (8015a50 <prvAddNewTaskToReadyList+0xc8>)
 80159f0:	6013      	str	r3, [r2, #0]
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80159f6:	4613      	mov	r3, r2
 80159f8:	009b      	lsls	r3, r3, #2
 80159fa:	4413      	add	r3, r2
 80159fc:	009b      	lsls	r3, r3, #2
 80159fe:	4a15      	ldr	r2, [pc, #84]	; (8015a54 <prvAddNewTaskToReadyList+0xcc>)
 8015a00:	441a      	add	r2, r3
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	3304      	adds	r3, #4
 8015a06:	4619      	mov	r1, r3
 8015a08:	4610      	mov	r0, r2
 8015a0a:	f7fe feb4 	bl	8014776 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8015a0e:	f001 f809 	bl	8016a24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015a12:	4b0d      	ldr	r3, [pc, #52]	; (8015a48 <prvAddNewTaskToReadyList+0xc0>)
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d00e      	beq.n	8015a38 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8015a1a:	4b0a      	ldr	r3, [pc, #40]	; (8015a44 <prvAddNewTaskToReadyList+0xbc>)
 8015a1c:	681b      	ldr	r3, [r3, #0]
 8015a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a24:	429a      	cmp	r2, r3
 8015a26:	d207      	bcs.n	8015a38 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8015a28:	4b0b      	ldr	r3, [pc, #44]	; (8015a58 <prvAddNewTaskToReadyList+0xd0>)
 8015a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015a2e:	601a      	str	r2, [r3, #0]
 8015a30:	f3bf 8f4f 	dsb	sy
 8015a34:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015a38:	bf00      	nop
 8015a3a:	3708      	adds	r7, #8
 8015a3c:	46bd      	mov	sp, r7
 8015a3e:	bd80      	pop	{r7, pc}
 8015a40:	20003390 	.word	0x20003390
 8015a44:	20003290 	.word	0x20003290
 8015a48:	2000339c 	.word	0x2000339c
 8015a4c:	200033ac 	.word	0x200033ac
 8015a50:	20003398 	.word	0x20003398
 8015a54:	20003294 	.word	0x20003294
 8015a58:	e000ed04 	.word	0xe000ed04

08015a5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015a5c:	b580      	push	{r7, lr}
 8015a5e:	b084      	sub	sp, #16
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8015a64:	2300      	movs	r3, #0
 8015a66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d017      	beq.n	8015a9e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8015a6e:	4b13      	ldr	r3, [pc, #76]	; (8015abc <vTaskDelay+0x60>)
 8015a70:	681b      	ldr	r3, [r3, #0]
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d00a      	beq.n	8015a8c <vTaskDelay+0x30>
	__asm volatile
 8015a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a7a:	f383 8811 	msr	BASEPRI, r3
 8015a7e:	f3bf 8f6f 	isb	sy
 8015a82:	f3bf 8f4f 	dsb	sy
 8015a86:	60bb      	str	r3, [r7, #8]
}
 8015a88:	bf00      	nop
 8015a8a:	e7fe      	b.n	8015a8a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8015a8c:	f000 f884 	bl	8015b98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8015a90:	2100      	movs	r1, #0
 8015a92:	6878      	ldr	r0, [r7, #4]
 8015a94:	f000 fe06 	bl	80166a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8015a98:	f000 f88c 	bl	8015bb4 <xTaskResumeAll>
 8015a9c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d107      	bne.n	8015ab4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8015aa4:	4b06      	ldr	r3, [pc, #24]	; (8015ac0 <vTaskDelay+0x64>)
 8015aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015aaa:	601a      	str	r2, [r3, #0]
 8015aac:	f3bf 8f4f 	dsb	sy
 8015ab0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015ab4:	bf00      	nop
 8015ab6:	3710      	adds	r7, #16
 8015ab8:	46bd      	mov	sp, r7
 8015aba:	bd80      	pop	{r7, pc}
 8015abc:	200033b8 	.word	0x200033b8
 8015ac0:	e000ed04 	.word	0xe000ed04

08015ac4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015ac4:	b580      	push	{r7, lr}
 8015ac6:	b08a      	sub	sp, #40	; 0x28
 8015ac8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8015aca:	2300      	movs	r3, #0
 8015acc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8015ace:	2300      	movs	r3, #0
 8015ad0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8015ad2:	463a      	mov	r2, r7
 8015ad4:	1d39      	adds	r1, r7, #4
 8015ad6:	f107 0308 	add.w	r3, r7, #8
 8015ada:	4618      	mov	r0, r3
 8015adc:	f7eb ffb8 	bl	8001a50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8015ae0:	6839      	ldr	r1, [r7, #0]
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	68ba      	ldr	r2, [r7, #8]
 8015ae6:	9202      	str	r2, [sp, #8]
 8015ae8:	9301      	str	r3, [sp, #4]
 8015aea:	2300      	movs	r3, #0
 8015aec:	9300      	str	r3, [sp, #0]
 8015aee:	2300      	movs	r3, #0
 8015af0:	460a      	mov	r2, r1
 8015af2:	4921      	ldr	r1, [pc, #132]	; (8015b78 <vTaskStartScheduler+0xb4>)
 8015af4:	4821      	ldr	r0, [pc, #132]	; (8015b7c <vTaskStartScheduler+0xb8>)
 8015af6:	f7ff fe07 	bl	8015708 <xTaskCreateStatic>
 8015afa:	4603      	mov	r3, r0
 8015afc:	4a20      	ldr	r2, [pc, #128]	; (8015b80 <vTaskStartScheduler+0xbc>)
 8015afe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8015b00:	4b1f      	ldr	r3, [pc, #124]	; (8015b80 <vTaskStartScheduler+0xbc>)
 8015b02:	681b      	ldr	r3, [r3, #0]
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d002      	beq.n	8015b0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8015b08:	2301      	movs	r3, #1
 8015b0a:	617b      	str	r3, [r7, #20]
 8015b0c:	e001      	b.n	8015b12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8015b0e:	2300      	movs	r3, #0
 8015b10:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8015b12:	697b      	ldr	r3, [r7, #20]
 8015b14:	2b01      	cmp	r3, #1
 8015b16:	d11b      	bne.n	8015b50 <vTaskStartScheduler+0x8c>
	__asm volatile
 8015b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b1c:	f383 8811 	msr	BASEPRI, r3
 8015b20:	f3bf 8f6f 	isb	sy
 8015b24:	f3bf 8f4f 	dsb	sy
 8015b28:	613b      	str	r3, [r7, #16]
}
 8015b2a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8015b2c:	4b15      	ldr	r3, [pc, #84]	; (8015b84 <vTaskStartScheduler+0xc0>)
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	334c      	adds	r3, #76	; 0x4c
 8015b32:	4a15      	ldr	r2, [pc, #84]	; (8015b88 <vTaskStartScheduler+0xc4>)
 8015b34:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015b36:	4b15      	ldr	r3, [pc, #84]	; (8015b8c <vTaskStartScheduler+0xc8>)
 8015b38:	f04f 32ff 	mov.w	r2, #4294967295
 8015b3c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015b3e:	4b14      	ldr	r3, [pc, #80]	; (8015b90 <vTaskStartScheduler+0xcc>)
 8015b40:	2201      	movs	r2, #1
 8015b42:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8015b44:	4b13      	ldr	r3, [pc, #76]	; (8015b94 <vTaskStartScheduler+0xd0>)
 8015b46:	2200      	movs	r2, #0
 8015b48:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015b4a:	f000 fe99 	bl	8016880 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015b4e:	e00e      	b.n	8015b6e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015b50:	697b      	ldr	r3, [r7, #20]
 8015b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b56:	d10a      	bne.n	8015b6e <vTaskStartScheduler+0xaa>
	__asm volatile
 8015b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b5c:	f383 8811 	msr	BASEPRI, r3
 8015b60:	f3bf 8f6f 	isb	sy
 8015b64:	f3bf 8f4f 	dsb	sy
 8015b68:	60fb      	str	r3, [r7, #12]
}
 8015b6a:	bf00      	nop
 8015b6c:	e7fe      	b.n	8015b6c <vTaskStartScheduler+0xa8>
}
 8015b6e:	bf00      	nop
 8015b70:	3718      	adds	r7, #24
 8015b72:	46bd      	mov	sp, r7
 8015b74:	bd80      	pop	{r7, pc}
 8015b76:	bf00      	nop
 8015b78:	0801d1fc 	.word	0x0801d1fc
 8015b7c:	08016179 	.word	0x08016179
 8015b80:	200033b4 	.word	0x200033b4
 8015b84:	20003290 	.word	0x20003290
 8015b88:	20000198 	.word	0x20000198
 8015b8c:	200033b0 	.word	0x200033b0
 8015b90:	2000339c 	.word	0x2000339c
 8015b94:	20003394 	.word	0x20003394

08015b98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015b98:	b480      	push	{r7}
 8015b9a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8015b9c:	4b04      	ldr	r3, [pc, #16]	; (8015bb0 <vTaskSuspendAll+0x18>)
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	3301      	adds	r3, #1
 8015ba2:	4a03      	ldr	r2, [pc, #12]	; (8015bb0 <vTaskSuspendAll+0x18>)
 8015ba4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8015ba6:	bf00      	nop
 8015ba8:	46bd      	mov	sp, r7
 8015baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bae:	4770      	bx	lr
 8015bb0:	200033b8 	.word	0x200033b8

08015bb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015bb4:	b580      	push	{r7, lr}
 8015bb6:	b084      	sub	sp, #16
 8015bb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015bba:	2300      	movs	r3, #0
 8015bbc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015bbe:	2300      	movs	r3, #0
 8015bc0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8015bc2:	4b41      	ldr	r3, [pc, #260]	; (8015cc8 <xTaskResumeAll+0x114>)
 8015bc4:	681b      	ldr	r3, [r3, #0]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d10a      	bne.n	8015be0 <xTaskResumeAll+0x2c>
	__asm volatile
 8015bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bce:	f383 8811 	msr	BASEPRI, r3
 8015bd2:	f3bf 8f6f 	isb	sy
 8015bd6:	f3bf 8f4f 	dsb	sy
 8015bda:	603b      	str	r3, [r7, #0]
}
 8015bdc:	bf00      	nop
 8015bde:	e7fe      	b.n	8015bde <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015be0:	f000 fef0 	bl	80169c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8015be4:	4b38      	ldr	r3, [pc, #224]	; (8015cc8 <xTaskResumeAll+0x114>)
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	3b01      	subs	r3, #1
 8015bea:	4a37      	ldr	r2, [pc, #220]	; (8015cc8 <xTaskResumeAll+0x114>)
 8015bec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015bee:	4b36      	ldr	r3, [pc, #216]	; (8015cc8 <xTaskResumeAll+0x114>)
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d161      	bne.n	8015cba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8015bf6:	4b35      	ldr	r3, [pc, #212]	; (8015ccc <xTaskResumeAll+0x118>)
 8015bf8:	681b      	ldr	r3, [r3, #0]
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d05d      	beq.n	8015cba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015bfe:	e02e      	b.n	8015c5e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015c00:	4b33      	ldr	r3, [pc, #204]	; (8015cd0 <xTaskResumeAll+0x11c>)
 8015c02:	68db      	ldr	r3, [r3, #12]
 8015c04:	68db      	ldr	r3, [r3, #12]
 8015c06:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	3318      	adds	r3, #24
 8015c0c:	4618      	mov	r0, r3
 8015c0e:	f7fe fe0f 	bl	8014830 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015c12:	68fb      	ldr	r3, [r7, #12]
 8015c14:	3304      	adds	r3, #4
 8015c16:	4618      	mov	r0, r3
 8015c18:	f7fe fe0a 	bl	8014830 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c20:	2201      	movs	r2, #1
 8015c22:	409a      	lsls	r2, r3
 8015c24:	4b2b      	ldr	r3, [pc, #172]	; (8015cd4 <xTaskResumeAll+0x120>)
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	4313      	orrs	r3, r2
 8015c2a:	4a2a      	ldr	r2, [pc, #168]	; (8015cd4 <xTaskResumeAll+0x120>)
 8015c2c:	6013      	str	r3, [r2, #0]
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c32:	4613      	mov	r3, r2
 8015c34:	009b      	lsls	r3, r3, #2
 8015c36:	4413      	add	r3, r2
 8015c38:	009b      	lsls	r3, r3, #2
 8015c3a:	4a27      	ldr	r2, [pc, #156]	; (8015cd8 <xTaskResumeAll+0x124>)
 8015c3c:	441a      	add	r2, r3
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	3304      	adds	r3, #4
 8015c42:	4619      	mov	r1, r3
 8015c44:	4610      	mov	r0, r2
 8015c46:	f7fe fd96 	bl	8014776 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c4e:	4b23      	ldr	r3, [pc, #140]	; (8015cdc <xTaskResumeAll+0x128>)
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c54:	429a      	cmp	r2, r3
 8015c56:	d302      	bcc.n	8015c5e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8015c58:	4b21      	ldr	r3, [pc, #132]	; (8015ce0 <xTaskResumeAll+0x12c>)
 8015c5a:	2201      	movs	r2, #1
 8015c5c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015c5e:	4b1c      	ldr	r3, [pc, #112]	; (8015cd0 <xTaskResumeAll+0x11c>)
 8015c60:	681b      	ldr	r3, [r3, #0]
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d1cc      	bne.n	8015c00 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d001      	beq.n	8015c70 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8015c6c:	f000 fb3e 	bl	80162ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8015c70:	4b1c      	ldr	r3, [pc, #112]	; (8015ce4 <xTaskResumeAll+0x130>)
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d010      	beq.n	8015c9e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8015c7c:	f000 f858 	bl	8015d30 <xTaskIncrementTick>
 8015c80:	4603      	mov	r3, r0
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d002      	beq.n	8015c8c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8015c86:	4b16      	ldr	r3, [pc, #88]	; (8015ce0 <xTaskResumeAll+0x12c>)
 8015c88:	2201      	movs	r2, #1
 8015c8a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	3b01      	subs	r3, #1
 8015c90:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d1f1      	bne.n	8015c7c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8015c98:	4b12      	ldr	r3, [pc, #72]	; (8015ce4 <xTaskResumeAll+0x130>)
 8015c9a:	2200      	movs	r2, #0
 8015c9c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015c9e:	4b10      	ldr	r3, [pc, #64]	; (8015ce0 <xTaskResumeAll+0x12c>)
 8015ca0:	681b      	ldr	r3, [r3, #0]
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d009      	beq.n	8015cba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015ca6:	2301      	movs	r3, #1
 8015ca8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015caa:	4b0f      	ldr	r3, [pc, #60]	; (8015ce8 <xTaskResumeAll+0x134>)
 8015cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015cb0:	601a      	str	r2, [r3, #0]
 8015cb2:	f3bf 8f4f 	dsb	sy
 8015cb6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015cba:	f000 feb3 	bl	8016a24 <vPortExitCritical>

	return xAlreadyYielded;
 8015cbe:	68bb      	ldr	r3, [r7, #8]
}
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	3710      	adds	r7, #16
 8015cc4:	46bd      	mov	sp, r7
 8015cc6:	bd80      	pop	{r7, pc}
 8015cc8:	200033b8 	.word	0x200033b8
 8015ccc:	20003390 	.word	0x20003390
 8015cd0:	20003350 	.word	0x20003350
 8015cd4:	20003398 	.word	0x20003398
 8015cd8:	20003294 	.word	0x20003294
 8015cdc:	20003290 	.word	0x20003290
 8015ce0:	200033a4 	.word	0x200033a4
 8015ce4:	200033a0 	.word	0x200033a0
 8015ce8:	e000ed04 	.word	0xe000ed04

08015cec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015cec:	b480      	push	{r7}
 8015cee:	b083      	sub	sp, #12
 8015cf0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8015cf2:	4b05      	ldr	r3, [pc, #20]	; (8015d08 <xTaskGetTickCount+0x1c>)
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8015cf8:	687b      	ldr	r3, [r7, #4]
}
 8015cfa:	4618      	mov	r0, r3
 8015cfc:	370c      	adds	r7, #12
 8015cfe:	46bd      	mov	sp, r7
 8015d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d04:	4770      	bx	lr
 8015d06:	bf00      	nop
 8015d08:	20003394 	.word	0x20003394

08015d0c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8015d0c:	b580      	push	{r7, lr}
 8015d0e:	b082      	sub	sp, #8
 8015d10:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015d12:	f000 ff39 	bl	8016b88 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8015d16:	2300      	movs	r3, #0
 8015d18:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8015d1a:	4b04      	ldr	r3, [pc, #16]	; (8015d2c <xTaskGetTickCountFromISR+0x20>)
 8015d1c:	681b      	ldr	r3, [r3, #0]
 8015d1e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015d20:	683b      	ldr	r3, [r7, #0]
}
 8015d22:	4618      	mov	r0, r3
 8015d24:	3708      	adds	r7, #8
 8015d26:	46bd      	mov	sp, r7
 8015d28:	bd80      	pop	{r7, pc}
 8015d2a:	bf00      	nop
 8015d2c:	20003394 	.word	0x20003394

08015d30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015d30:	b580      	push	{r7, lr}
 8015d32:	b086      	sub	sp, #24
 8015d34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015d36:	2300      	movs	r3, #0
 8015d38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015d3a:	4b4e      	ldr	r3, [pc, #312]	; (8015e74 <xTaskIncrementTick+0x144>)
 8015d3c:	681b      	ldr	r3, [r3, #0]
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	f040 808e 	bne.w	8015e60 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015d44:	4b4c      	ldr	r3, [pc, #304]	; (8015e78 <xTaskIncrementTick+0x148>)
 8015d46:	681b      	ldr	r3, [r3, #0]
 8015d48:	3301      	adds	r3, #1
 8015d4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015d4c:	4a4a      	ldr	r2, [pc, #296]	; (8015e78 <xTaskIncrementTick+0x148>)
 8015d4e:	693b      	ldr	r3, [r7, #16]
 8015d50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015d52:	693b      	ldr	r3, [r7, #16]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d120      	bne.n	8015d9a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8015d58:	4b48      	ldr	r3, [pc, #288]	; (8015e7c <xTaskIncrementTick+0x14c>)
 8015d5a:	681b      	ldr	r3, [r3, #0]
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d00a      	beq.n	8015d78 <xTaskIncrementTick+0x48>
	__asm volatile
 8015d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d66:	f383 8811 	msr	BASEPRI, r3
 8015d6a:	f3bf 8f6f 	isb	sy
 8015d6e:	f3bf 8f4f 	dsb	sy
 8015d72:	603b      	str	r3, [r7, #0]
}
 8015d74:	bf00      	nop
 8015d76:	e7fe      	b.n	8015d76 <xTaskIncrementTick+0x46>
 8015d78:	4b40      	ldr	r3, [pc, #256]	; (8015e7c <xTaskIncrementTick+0x14c>)
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	60fb      	str	r3, [r7, #12]
 8015d7e:	4b40      	ldr	r3, [pc, #256]	; (8015e80 <xTaskIncrementTick+0x150>)
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	4a3e      	ldr	r2, [pc, #248]	; (8015e7c <xTaskIncrementTick+0x14c>)
 8015d84:	6013      	str	r3, [r2, #0]
 8015d86:	4a3e      	ldr	r2, [pc, #248]	; (8015e80 <xTaskIncrementTick+0x150>)
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	6013      	str	r3, [r2, #0]
 8015d8c:	4b3d      	ldr	r3, [pc, #244]	; (8015e84 <xTaskIncrementTick+0x154>)
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	3301      	adds	r3, #1
 8015d92:	4a3c      	ldr	r2, [pc, #240]	; (8015e84 <xTaskIncrementTick+0x154>)
 8015d94:	6013      	str	r3, [r2, #0]
 8015d96:	f000 faa9 	bl	80162ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015d9a:	4b3b      	ldr	r3, [pc, #236]	; (8015e88 <xTaskIncrementTick+0x158>)
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	693a      	ldr	r2, [r7, #16]
 8015da0:	429a      	cmp	r2, r3
 8015da2:	d348      	bcc.n	8015e36 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015da4:	4b35      	ldr	r3, [pc, #212]	; (8015e7c <xTaskIncrementTick+0x14c>)
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d104      	bne.n	8015db8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015dae:	4b36      	ldr	r3, [pc, #216]	; (8015e88 <xTaskIncrementTick+0x158>)
 8015db0:	f04f 32ff 	mov.w	r2, #4294967295
 8015db4:	601a      	str	r2, [r3, #0]
					break;
 8015db6:	e03e      	b.n	8015e36 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015db8:	4b30      	ldr	r3, [pc, #192]	; (8015e7c <xTaskIncrementTick+0x14c>)
 8015dba:	681b      	ldr	r3, [r3, #0]
 8015dbc:	68db      	ldr	r3, [r3, #12]
 8015dbe:	68db      	ldr	r3, [r3, #12]
 8015dc0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015dc2:	68bb      	ldr	r3, [r7, #8]
 8015dc4:	685b      	ldr	r3, [r3, #4]
 8015dc6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015dc8:	693a      	ldr	r2, [r7, #16]
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	429a      	cmp	r2, r3
 8015dce:	d203      	bcs.n	8015dd8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015dd0:	4a2d      	ldr	r2, [pc, #180]	; (8015e88 <xTaskIncrementTick+0x158>)
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015dd6:	e02e      	b.n	8015e36 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015dd8:	68bb      	ldr	r3, [r7, #8]
 8015dda:	3304      	adds	r3, #4
 8015ddc:	4618      	mov	r0, r3
 8015dde:	f7fe fd27 	bl	8014830 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015de2:	68bb      	ldr	r3, [r7, #8]
 8015de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d004      	beq.n	8015df4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015dea:	68bb      	ldr	r3, [r7, #8]
 8015dec:	3318      	adds	r3, #24
 8015dee:	4618      	mov	r0, r3
 8015df0:	f7fe fd1e 	bl	8014830 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015df4:	68bb      	ldr	r3, [r7, #8]
 8015df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015df8:	2201      	movs	r2, #1
 8015dfa:	409a      	lsls	r2, r3
 8015dfc:	4b23      	ldr	r3, [pc, #140]	; (8015e8c <xTaskIncrementTick+0x15c>)
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	4313      	orrs	r3, r2
 8015e02:	4a22      	ldr	r2, [pc, #136]	; (8015e8c <xTaskIncrementTick+0x15c>)
 8015e04:	6013      	str	r3, [r2, #0]
 8015e06:	68bb      	ldr	r3, [r7, #8]
 8015e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015e0a:	4613      	mov	r3, r2
 8015e0c:	009b      	lsls	r3, r3, #2
 8015e0e:	4413      	add	r3, r2
 8015e10:	009b      	lsls	r3, r3, #2
 8015e12:	4a1f      	ldr	r2, [pc, #124]	; (8015e90 <xTaskIncrementTick+0x160>)
 8015e14:	441a      	add	r2, r3
 8015e16:	68bb      	ldr	r3, [r7, #8]
 8015e18:	3304      	adds	r3, #4
 8015e1a:	4619      	mov	r1, r3
 8015e1c:	4610      	mov	r0, r2
 8015e1e:	f7fe fcaa 	bl	8014776 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015e22:	68bb      	ldr	r3, [r7, #8]
 8015e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015e26:	4b1b      	ldr	r3, [pc, #108]	; (8015e94 <xTaskIncrementTick+0x164>)
 8015e28:	681b      	ldr	r3, [r3, #0]
 8015e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e2c:	429a      	cmp	r2, r3
 8015e2e:	d3b9      	bcc.n	8015da4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8015e30:	2301      	movs	r3, #1
 8015e32:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015e34:	e7b6      	b.n	8015da4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015e36:	4b17      	ldr	r3, [pc, #92]	; (8015e94 <xTaskIncrementTick+0x164>)
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015e3c:	4914      	ldr	r1, [pc, #80]	; (8015e90 <xTaskIncrementTick+0x160>)
 8015e3e:	4613      	mov	r3, r2
 8015e40:	009b      	lsls	r3, r3, #2
 8015e42:	4413      	add	r3, r2
 8015e44:	009b      	lsls	r3, r3, #2
 8015e46:	440b      	add	r3, r1
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	2b01      	cmp	r3, #1
 8015e4c:	d901      	bls.n	8015e52 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8015e4e:	2301      	movs	r3, #1
 8015e50:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8015e52:	4b11      	ldr	r3, [pc, #68]	; (8015e98 <xTaskIncrementTick+0x168>)
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d007      	beq.n	8015e6a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8015e5a:	2301      	movs	r3, #1
 8015e5c:	617b      	str	r3, [r7, #20]
 8015e5e:	e004      	b.n	8015e6a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8015e60:	4b0e      	ldr	r3, [pc, #56]	; (8015e9c <xTaskIncrementTick+0x16c>)
 8015e62:	681b      	ldr	r3, [r3, #0]
 8015e64:	3301      	adds	r3, #1
 8015e66:	4a0d      	ldr	r2, [pc, #52]	; (8015e9c <xTaskIncrementTick+0x16c>)
 8015e68:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8015e6a:	697b      	ldr	r3, [r7, #20]
}
 8015e6c:	4618      	mov	r0, r3
 8015e6e:	3718      	adds	r7, #24
 8015e70:	46bd      	mov	sp, r7
 8015e72:	bd80      	pop	{r7, pc}
 8015e74:	200033b8 	.word	0x200033b8
 8015e78:	20003394 	.word	0x20003394
 8015e7c:	20003348 	.word	0x20003348
 8015e80:	2000334c 	.word	0x2000334c
 8015e84:	200033a8 	.word	0x200033a8
 8015e88:	200033b0 	.word	0x200033b0
 8015e8c:	20003398 	.word	0x20003398
 8015e90:	20003294 	.word	0x20003294
 8015e94:	20003290 	.word	0x20003290
 8015e98:	200033a4 	.word	0x200033a4
 8015e9c:	200033a0 	.word	0x200033a0

08015ea0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015ea0:	b480      	push	{r7}
 8015ea2:	b087      	sub	sp, #28
 8015ea4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015ea6:	4b29      	ldr	r3, [pc, #164]	; (8015f4c <vTaskSwitchContext+0xac>)
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d003      	beq.n	8015eb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015eae:	4b28      	ldr	r3, [pc, #160]	; (8015f50 <vTaskSwitchContext+0xb0>)
 8015eb0:	2201      	movs	r2, #1
 8015eb2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015eb4:	e044      	b.n	8015f40 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8015eb6:	4b26      	ldr	r3, [pc, #152]	; (8015f50 <vTaskSwitchContext+0xb0>)
 8015eb8:	2200      	movs	r2, #0
 8015eba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015ebc:	4b25      	ldr	r3, [pc, #148]	; (8015f54 <vTaskSwitchContext+0xb4>)
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8015ec2:	68fb      	ldr	r3, [r7, #12]
 8015ec4:	fab3 f383 	clz	r3, r3
 8015ec8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8015eca:	7afb      	ldrb	r3, [r7, #11]
 8015ecc:	f1c3 031f 	rsb	r3, r3, #31
 8015ed0:	617b      	str	r3, [r7, #20]
 8015ed2:	4921      	ldr	r1, [pc, #132]	; (8015f58 <vTaskSwitchContext+0xb8>)
 8015ed4:	697a      	ldr	r2, [r7, #20]
 8015ed6:	4613      	mov	r3, r2
 8015ed8:	009b      	lsls	r3, r3, #2
 8015eda:	4413      	add	r3, r2
 8015edc:	009b      	lsls	r3, r3, #2
 8015ede:	440b      	add	r3, r1
 8015ee0:	681b      	ldr	r3, [r3, #0]
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d10a      	bne.n	8015efc <vTaskSwitchContext+0x5c>
	__asm volatile
 8015ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015eea:	f383 8811 	msr	BASEPRI, r3
 8015eee:	f3bf 8f6f 	isb	sy
 8015ef2:	f3bf 8f4f 	dsb	sy
 8015ef6:	607b      	str	r3, [r7, #4]
}
 8015ef8:	bf00      	nop
 8015efa:	e7fe      	b.n	8015efa <vTaskSwitchContext+0x5a>
 8015efc:	697a      	ldr	r2, [r7, #20]
 8015efe:	4613      	mov	r3, r2
 8015f00:	009b      	lsls	r3, r3, #2
 8015f02:	4413      	add	r3, r2
 8015f04:	009b      	lsls	r3, r3, #2
 8015f06:	4a14      	ldr	r2, [pc, #80]	; (8015f58 <vTaskSwitchContext+0xb8>)
 8015f08:	4413      	add	r3, r2
 8015f0a:	613b      	str	r3, [r7, #16]
 8015f0c:	693b      	ldr	r3, [r7, #16]
 8015f0e:	685b      	ldr	r3, [r3, #4]
 8015f10:	685a      	ldr	r2, [r3, #4]
 8015f12:	693b      	ldr	r3, [r7, #16]
 8015f14:	605a      	str	r2, [r3, #4]
 8015f16:	693b      	ldr	r3, [r7, #16]
 8015f18:	685a      	ldr	r2, [r3, #4]
 8015f1a:	693b      	ldr	r3, [r7, #16]
 8015f1c:	3308      	adds	r3, #8
 8015f1e:	429a      	cmp	r2, r3
 8015f20:	d104      	bne.n	8015f2c <vTaskSwitchContext+0x8c>
 8015f22:	693b      	ldr	r3, [r7, #16]
 8015f24:	685b      	ldr	r3, [r3, #4]
 8015f26:	685a      	ldr	r2, [r3, #4]
 8015f28:	693b      	ldr	r3, [r7, #16]
 8015f2a:	605a      	str	r2, [r3, #4]
 8015f2c:	693b      	ldr	r3, [r7, #16]
 8015f2e:	685b      	ldr	r3, [r3, #4]
 8015f30:	68db      	ldr	r3, [r3, #12]
 8015f32:	4a0a      	ldr	r2, [pc, #40]	; (8015f5c <vTaskSwitchContext+0xbc>)
 8015f34:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8015f36:	4b09      	ldr	r3, [pc, #36]	; (8015f5c <vTaskSwitchContext+0xbc>)
 8015f38:	681b      	ldr	r3, [r3, #0]
 8015f3a:	334c      	adds	r3, #76	; 0x4c
 8015f3c:	4a08      	ldr	r2, [pc, #32]	; (8015f60 <vTaskSwitchContext+0xc0>)
 8015f3e:	6013      	str	r3, [r2, #0]
}
 8015f40:	bf00      	nop
 8015f42:	371c      	adds	r7, #28
 8015f44:	46bd      	mov	sp, r7
 8015f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f4a:	4770      	bx	lr
 8015f4c:	200033b8 	.word	0x200033b8
 8015f50:	200033a4 	.word	0x200033a4
 8015f54:	20003398 	.word	0x20003398
 8015f58:	20003294 	.word	0x20003294
 8015f5c:	20003290 	.word	0x20003290
 8015f60:	20000198 	.word	0x20000198

08015f64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015f64:	b580      	push	{r7, lr}
 8015f66:	b084      	sub	sp, #16
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	6078      	str	r0, [r7, #4]
 8015f6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d10a      	bne.n	8015f8a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8015f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f78:	f383 8811 	msr	BASEPRI, r3
 8015f7c:	f3bf 8f6f 	isb	sy
 8015f80:	f3bf 8f4f 	dsb	sy
 8015f84:	60fb      	str	r3, [r7, #12]
}
 8015f86:	bf00      	nop
 8015f88:	e7fe      	b.n	8015f88 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015f8a:	4b07      	ldr	r3, [pc, #28]	; (8015fa8 <vTaskPlaceOnEventList+0x44>)
 8015f8c:	681b      	ldr	r3, [r3, #0]
 8015f8e:	3318      	adds	r3, #24
 8015f90:	4619      	mov	r1, r3
 8015f92:	6878      	ldr	r0, [r7, #4]
 8015f94:	f7fe fc13 	bl	80147be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015f98:	2101      	movs	r1, #1
 8015f9a:	6838      	ldr	r0, [r7, #0]
 8015f9c:	f000 fb82 	bl	80166a4 <prvAddCurrentTaskToDelayedList>
}
 8015fa0:	bf00      	nop
 8015fa2:	3710      	adds	r7, #16
 8015fa4:	46bd      	mov	sp, r7
 8015fa6:	bd80      	pop	{r7, pc}
 8015fa8:	20003290 	.word	0x20003290

08015fac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015fac:	b580      	push	{r7, lr}
 8015fae:	b086      	sub	sp, #24
 8015fb0:	af00      	add	r7, sp, #0
 8015fb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	68db      	ldr	r3, [r3, #12]
 8015fb8:	68db      	ldr	r3, [r3, #12]
 8015fba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015fbc:	693b      	ldr	r3, [r7, #16]
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d10a      	bne.n	8015fd8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8015fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fc6:	f383 8811 	msr	BASEPRI, r3
 8015fca:	f3bf 8f6f 	isb	sy
 8015fce:	f3bf 8f4f 	dsb	sy
 8015fd2:	60fb      	str	r3, [r7, #12]
}
 8015fd4:	bf00      	nop
 8015fd6:	e7fe      	b.n	8015fd6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015fd8:	693b      	ldr	r3, [r7, #16]
 8015fda:	3318      	adds	r3, #24
 8015fdc:	4618      	mov	r0, r3
 8015fde:	f7fe fc27 	bl	8014830 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015fe2:	4b1d      	ldr	r3, [pc, #116]	; (8016058 <xTaskRemoveFromEventList+0xac>)
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	d11c      	bne.n	8016024 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015fea:	693b      	ldr	r3, [r7, #16]
 8015fec:	3304      	adds	r3, #4
 8015fee:	4618      	mov	r0, r3
 8015ff0:	f7fe fc1e 	bl	8014830 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015ff4:	693b      	ldr	r3, [r7, #16]
 8015ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ff8:	2201      	movs	r2, #1
 8015ffa:	409a      	lsls	r2, r3
 8015ffc:	4b17      	ldr	r3, [pc, #92]	; (801605c <xTaskRemoveFromEventList+0xb0>)
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	4313      	orrs	r3, r2
 8016002:	4a16      	ldr	r2, [pc, #88]	; (801605c <xTaskRemoveFromEventList+0xb0>)
 8016004:	6013      	str	r3, [r2, #0]
 8016006:	693b      	ldr	r3, [r7, #16]
 8016008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801600a:	4613      	mov	r3, r2
 801600c:	009b      	lsls	r3, r3, #2
 801600e:	4413      	add	r3, r2
 8016010:	009b      	lsls	r3, r3, #2
 8016012:	4a13      	ldr	r2, [pc, #76]	; (8016060 <xTaskRemoveFromEventList+0xb4>)
 8016014:	441a      	add	r2, r3
 8016016:	693b      	ldr	r3, [r7, #16]
 8016018:	3304      	adds	r3, #4
 801601a:	4619      	mov	r1, r3
 801601c:	4610      	mov	r0, r2
 801601e:	f7fe fbaa 	bl	8014776 <vListInsertEnd>
 8016022:	e005      	b.n	8016030 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016024:	693b      	ldr	r3, [r7, #16]
 8016026:	3318      	adds	r3, #24
 8016028:	4619      	mov	r1, r3
 801602a:	480e      	ldr	r0, [pc, #56]	; (8016064 <xTaskRemoveFromEventList+0xb8>)
 801602c:	f7fe fba3 	bl	8014776 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016030:	693b      	ldr	r3, [r7, #16]
 8016032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016034:	4b0c      	ldr	r3, [pc, #48]	; (8016068 <xTaskRemoveFromEventList+0xbc>)
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801603a:	429a      	cmp	r2, r3
 801603c:	d905      	bls.n	801604a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801603e:	2301      	movs	r3, #1
 8016040:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016042:	4b0a      	ldr	r3, [pc, #40]	; (801606c <xTaskRemoveFromEventList+0xc0>)
 8016044:	2201      	movs	r2, #1
 8016046:	601a      	str	r2, [r3, #0]
 8016048:	e001      	b.n	801604e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 801604a:	2300      	movs	r3, #0
 801604c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801604e:	697b      	ldr	r3, [r7, #20]
}
 8016050:	4618      	mov	r0, r3
 8016052:	3718      	adds	r7, #24
 8016054:	46bd      	mov	sp, r7
 8016056:	bd80      	pop	{r7, pc}
 8016058:	200033b8 	.word	0x200033b8
 801605c:	20003398 	.word	0x20003398
 8016060:	20003294 	.word	0x20003294
 8016064:	20003350 	.word	0x20003350
 8016068:	20003290 	.word	0x20003290
 801606c:	200033a4 	.word	0x200033a4

08016070 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016070:	b480      	push	{r7}
 8016072:	b083      	sub	sp, #12
 8016074:	af00      	add	r7, sp, #0
 8016076:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016078:	4b06      	ldr	r3, [pc, #24]	; (8016094 <vTaskInternalSetTimeOutState+0x24>)
 801607a:	681a      	ldr	r2, [r3, #0]
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016080:	4b05      	ldr	r3, [pc, #20]	; (8016098 <vTaskInternalSetTimeOutState+0x28>)
 8016082:	681a      	ldr	r2, [r3, #0]
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	605a      	str	r2, [r3, #4]
}
 8016088:	bf00      	nop
 801608a:	370c      	adds	r7, #12
 801608c:	46bd      	mov	sp, r7
 801608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016092:	4770      	bx	lr
 8016094:	200033a8 	.word	0x200033a8
 8016098:	20003394 	.word	0x20003394

0801609c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801609c:	b580      	push	{r7, lr}
 801609e:	b088      	sub	sp, #32
 80160a0:	af00      	add	r7, sp, #0
 80160a2:	6078      	str	r0, [r7, #4]
 80160a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d10a      	bne.n	80160c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80160ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160b0:	f383 8811 	msr	BASEPRI, r3
 80160b4:	f3bf 8f6f 	isb	sy
 80160b8:	f3bf 8f4f 	dsb	sy
 80160bc:	613b      	str	r3, [r7, #16]
}
 80160be:	bf00      	nop
 80160c0:	e7fe      	b.n	80160c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80160c2:	683b      	ldr	r3, [r7, #0]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d10a      	bne.n	80160de <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80160c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160cc:	f383 8811 	msr	BASEPRI, r3
 80160d0:	f3bf 8f6f 	isb	sy
 80160d4:	f3bf 8f4f 	dsb	sy
 80160d8:	60fb      	str	r3, [r7, #12]
}
 80160da:	bf00      	nop
 80160dc:	e7fe      	b.n	80160dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80160de:	f000 fc71 	bl	80169c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80160e2:	4b1d      	ldr	r3, [pc, #116]	; (8016158 <xTaskCheckForTimeOut+0xbc>)
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	685b      	ldr	r3, [r3, #4]
 80160ec:	69ba      	ldr	r2, [r7, #24]
 80160ee:	1ad3      	subs	r3, r2, r3
 80160f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80160f2:	683b      	ldr	r3, [r7, #0]
 80160f4:	681b      	ldr	r3, [r3, #0]
 80160f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80160fa:	d102      	bne.n	8016102 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80160fc:	2300      	movs	r3, #0
 80160fe:	61fb      	str	r3, [r7, #28]
 8016100:	e023      	b.n	801614a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	681a      	ldr	r2, [r3, #0]
 8016106:	4b15      	ldr	r3, [pc, #84]	; (801615c <xTaskCheckForTimeOut+0xc0>)
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	429a      	cmp	r2, r3
 801610c:	d007      	beq.n	801611e <xTaskCheckForTimeOut+0x82>
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	685b      	ldr	r3, [r3, #4]
 8016112:	69ba      	ldr	r2, [r7, #24]
 8016114:	429a      	cmp	r2, r3
 8016116:	d302      	bcc.n	801611e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016118:	2301      	movs	r3, #1
 801611a:	61fb      	str	r3, [r7, #28]
 801611c:	e015      	b.n	801614a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801611e:	683b      	ldr	r3, [r7, #0]
 8016120:	681b      	ldr	r3, [r3, #0]
 8016122:	697a      	ldr	r2, [r7, #20]
 8016124:	429a      	cmp	r2, r3
 8016126:	d20b      	bcs.n	8016140 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8016128:	683b      	ldr	r3, [r7, #0]
 801612a:	681a      	ldr	r2, [r3, #0]
 801612c:	697b      	ldr	r3, [r7, #20]
 801612e:	1ad2      	subs	r2, r2, r3
 8016130:	683b      	ldr	r3, [r7, #0]
 8016132:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8016134:	6878      	ldr	r0, [r7, #4]
 8016136:	f7ff ff9b 	bl	8016070 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801613a:	2300      	movs	r3, #0
 801613c:	61fb      	str	r3, [r7, #28]
 801613e:	e004      	b.n	801614a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8016140:	683b      	ldr	r3, [r7, #0]
 8016142:	2200      	movs	r2, #0
 8016144:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8016146:	2301      	movs	r3, #1
 8016148:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801614a:	f000 fc6b 	bl	8016a24 <vPortExitCritical>

	return xReturn;
 801614e:	69fb      	ldr	r3, [r7, #28]
}
 8016150:	4618      	mov	r0, r3
 8016152:	3720      	adds	r7, #32
 8016154:	46bd      	mov	sp, r7
 8016156:	bd80      	pop	{r7, pc}
 8016158:	20003394 	.word	0x20003394
 801615c:	200033a8 	.word	0x200033a8

08016160 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016160:	b480      	push	{r7}
 8016162:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016164:	4b03      	ldr	r3, [pc, #12]	; (8016174 <vTaskMissedYield+0x14>)
 8016166:	2201      	movs	r2, #1
 8016168:	601a      	str	r2, [r3, #0]
}
 801616a:	bf00      	nop
 801616c:	46bd      	mov	sp, r7
 801616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016172:	4770      	bx	lr
 8016174:	200033a4 	.word	0x200033a4

08016178 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016178:	b580      	push	{r7, lr}
 801617a:	b082      	sub	sp, #8
 801617c:	af00      	add	r7, sp, #0
 801617e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016180:	f000 f852 	bl	8016228 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016184:	4b06      	ldr	r3, [pc, #24]	; (80161a0 <prvIdleTask+0x28>)
 8016186:	681b      	ldr	r3, [r3, #0]
 8016188:	2b01      	cmp	r3, #1
 801618a:	d9f9      	bls.n	8016180 <prvIdleTask+0x8>
			{
				taskYIELD();
 801618c:	4b05      	ldr	r3, [pc, #20]	; (80161a4 <prvIdleTask+0x2c>)
 801618e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016192:	601a      	str	r2, [r3, #0]
 8016194:	f3bf 8f4f 	dsb	sy
 8016198:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801619c:	e7f0      	b.n	8016180 <prvIdleTask+0x8>
 801619e:	bf00      	nop
 80161a0:	20003294 	.word	0x20003294
 80161a4:	e000ed04 	.word	0xe000ed04

080161a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80161a8:	b580      	push	{r7, lr}
 80161aa:	b082      	sub	sp, #8
 80161ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80161ae:	2300      	movs	r3, #0
 80161b0:	607b      	str	r3, [r7, #4]
 80161b2:	e00c      	b.n	80161ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80161b4:	687a      	ldr	r2, [r7, #4]
 80161b6:	4613      	mov	r3, r2
 80161b8:	009b      	lsls	r3, r3, #2
 80161ba:	4413      	add	r3, r2
 80161bc:	009b      	lsls	r3, r3, #2
 80161be:	4a12      	ldr	r2, [pc, #72]	; (8016208 <prvInitialiseTaskLists+0x60>)
 80161c0:	4413      	add	r3, r2
 80161c2:	4618      	mov	r0, r3
 80161c4:	f7fe faaa 	bl	801471c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	3301      	adds	r3, #1
 80161cc:	607b      	str	r3, [r7, #4]
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	2b06      	cmp	r3, #6
 80161d2:	d9ef      	bls.n	80161b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80161d4:	480d      	ldr	r0, [pc, #52]	; (801620c <prvInitialiseTaskLists+0x64>)
 80161d6:	f7fe faa1 	bl	801471c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80161da:	480d      	ldr	r0, [pc, #52]	; (8016210 <prvInitialiseTaskLists+0x68>)
 80161dc:	f7fe fa9e 	bl	801471c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80161e0:	480c      	ldr	r0, [pc, #48]	; (8016214 <prvInitialiseTaskLists+0x6c>)
 80161e2:	f7fe fa9b 	bl	801471c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80161e6:	480c      	ldr	r0, [pc, #48]	; (8016218 <prvInitialiseTaskLists+0x70>)
 80161e8:	f7fe fa98 	bl	801471c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80161ec:	480b      	ldr	r0, [pc, #44]	; (801621c <prvInitialiseTaskLists+0x74>)
 80161ee:	f7fe fa95 	bl	801471c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80161f2:	4b0b      	ldr	r3, [pc, #44]	; (8016220 <prvInitialiseTaskLists+0x78>)
 80161f4:	4a05      	ldr	r2, [pc, #20]	; (801620c <prvInitialiseTaskLists+0x64>)
 80161f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80161f8:	4b0a      	ldr	r3, [pc, #40]	; (8016224 <prvInitialiseTaskLists+0x7c>)
 80161fa:	4a05      	ldr	r2, [pc, #20]	; (8016210 <prvInitialiseTaskLists+0x68>)
 80161fc:	601a      	str	r2, [r3, #0]
}
 80161fe:	bf00      	nop
 8016200:	3708      	adds	r7, #8
 8016202:	46bd      	mov	sp, r7
 8016204:	bd80      	pop	{r7, pc}
 8016206:	bf00      	nop
 8016208:	20003294 	.word	0x20003294
 801620c:	20003320 	.word	0x20003320
 8016210:	20003334 	.word	0x20003334
 8016214:	20003350 	.word	0x20003350
 8016218:	20003364 	.word	0x20003364
 801621c:	2000337c 	.word	0x2000337c
 8016220:	20003348 	.word	0x20003348
 8016224:	2000334c 	.word	0x2000334c

08016228 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016228:	b580      	push	{r7, lr}
 801622a:	b082      	sub	sp, #8
 801622c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801622e:	e019      	b.n	8016264 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016230:	f000 fbc8 	bl	80169c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016234:	4b10      	ldr	r3, [pc, #64]	; (8016278 <prvCheckTasksWaitingTermination+0x50>)
 8016236:	68db      	ldr	r3, [r3, #12]
 8016238:	68db      	ldr	r3, [r3, #12]
 801623a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	3304      	adds	r3, #4
 8016240:	4618      	mov	r0, r3
 8016242:	f7fe faf5 	bl	8014830 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016246:	4b0d      	ldr	r3, [pc, #52]	; (801627c <prvCheckTasksWaitingTermination+0x54>)
 8016248:	681b      	ldr	r3, [r3, #0]
 801624a:	3b01      	subs	r3, #1
 801624c:	4a0b      	ldr	r2, [pc, #44]	; (801627c <prvCheckTasksWaitingTermination+0x54>)
 801624e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016250:	4b0b      	ldr	r3, [pc, #44]	; (8016280 <prvCheckTasksWaitingTermination+0x58>)
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	3b01      	subs	r3, #1
 8016256:	4a0a      	ldr	r2, [pc, #40]	; (8016280 <prvCheckTasksWaitingTermination+0x58>)
 8016258:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801625a:	f000 fbe3 	bl	8016a24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801625e:	6878      	ldr	r0, [r7, #4]
 8016260:	f000 f810 	bl	8016284 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016264:	4b06      	ldr	r3, [pc, #24]	; (8016280 <prvCheckTasksWaitingTermination+0x58>)
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	2b00      	cmp	r3, #0
 801626a:	d1e1      	bne.n	8016230 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801626c:	bf00      	nop
 801626e:	bf00      	nop
 8016270:	3708      	adds	r7, #8
 8016272:	46bd      	mov	sp, r7
 8016274:	bd80      	pop	{r7, pc}
 8016276:	bf00      	nop
 8016278:	20003364 	.word	0x20003364
 801627c:	20003390 	.word	0x20003390
 8016280:	20003378 	.word	0x20003378

08016284 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016284:	b580      	push	{r7, lr}
 8016286:	b084      	sub	sp, #16
 8016288:	af00      	add	r7, sp, #0
 801628a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	334c      	adds	r3, #76	; 0x4c
 8016290:	4618      	mov	r0, r3
 8016292:	f002 fde9 	bl	8018e68 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 801629c:	2b00      	cmp	r3, #0
 801629e:	d108      	bne.n	80162b2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80162a4:	4618      	mov	r0, r3
 80162a6:	f000 fd7b 	bl	8016da0 <vPortFree>
				vPortFree( pxTCB );
 80162aa:	6878      	ldr	r0, [r7, #4]
 80162ac:	f000 fd78 	bl	8016da0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80162b0:	e018      	b.n	80162e4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80162b8:	2b01      	cmp	r3, #1
 80162ba:	d103      	bne.n	80162c4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80162bc:	6878      	ldr	r0, [r7, #4]
 80162be:	f000 fd6f 	bl	8016da0 <vPortFree>
	}
 80162c2:	e00f      	b.n	80162e4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80162ca:	2b02      	cmp	r3, #2
 80162cc:	d00a      	beq.n	80162e4 <prvDeleteTCB+0x60>
	__asm volatile
 80162ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162d2:	f383 8811 	msr	BASEPRI, r3
 80162d6:	f3bf 8f6f 	isb	sy
 80162da:	f3bf 8f4f 	dsb	sy
 80162de:	60fb      	str	r3, [r7, #12]
}
 80162e0:	bf00      	nop
 80162e2:	e7fe      	b.n	80162e2 <prvDeleteTCB+0x5e>
	}
 80162e4:	bf00      	nop
 80162e6:	3710      	adds	r7, #16
 80162e8:	46bd      	mov	sp, r7
 80162ea:	bd80      	pop	{r7, pc}

080162ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80162ec:	b480      	push	{r7}
 80162ee:	b083      	sub	sp, #12
 80162f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80162f2:	4b0c      	ldr	r3, [pc, #48]	; (8016324 <prvResetNextTaskUnblockTime+0x38>)
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d104      	bne.n	8016306 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80162fc:	4b0a      	ldr	r3, [pc, #40]	; (8016328 <prvResetNextTaskUnblockTime+0x3c>)
 80162fe:	f04f 32ff 	mov.w	r2, #4294967295
 8016302:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016304:	e008      	b.n	8016318 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016306:	4b07      	ldr	r3, [pc, #28]	; (8016324 <prvResetNextTaskUnblockTime+0x38>)
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	68db      	ldr	r3, [r3, #12]
 801630c:	68db      	ldr	r3, [r3, #12]
 801630e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	685b      	ldr	r3, [r3, #4]
 8016314:	4a04      	ldr	r2, [pc, #16]	; (8016328 <prvResetNextTaskUnblockTime+0x3c>)
 8016316:	6013      	str	r3, [r2, #0]
}
 8016318:	bf00      	nop
 801631a:	370c      	adds	r7, #12
 801631c:	46bd      	mov	sp, r7
 801631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016322:	4770      	bx	lr
 8016324:	20003348 	.word	0x20003348
 8016328:	200033b0 	.word	0x200033b0

0801632c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801632c:	b480      	push	{r7}
 801632e:	b083      	sub	sp, #12
 8016330:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016332:	4b0b      	ldr	r3, [pc, #44]	; (8016360 <xTaskGetSchedulerState+0x34>)
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	2b00      	cmp	r3, #0
 8016338:	d102      	bne.n	8016340 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801633a:	2301      	movs	r3, #1
 801633c:	607b      	str	r3, [r7, #4]
 801633e:	e008      	b.n	8016352 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016340:	4b08      	ldr	r3, [pc, #32]	; (8016364 <xTaskGetSchedulerState+0x38>)
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	2b00      	cmp	r3, #0
 8016346:	d102      	bne.n	801634e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016348:	2302      	movs	r3, #2
 801634a:	607b      	str	r3, [r7, #4]
 801634c:	e001      	b.n	8016352 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801634e:	2300      	movs	r3, #0
 8016350:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016352:	687b      	ldr	r3, [r7, #4]
	}
 8016354:	4618      	mov	r0, r3
 8016356:	370c      	adds	r7, #12
 8016358:	46bd      	mov	sp, r7
 801635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801635e:	4770      	bx	lr
 8016360:	2000339c 	.word	0x2000339c
 8016364:	200033b8 	.word	0x200033b8

08016368 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8016368:	b580      	push	{r7, lr}
 801636a:	b084      	sub	sp, #16
 801636c:	af00      	add	r7, sp, #0
 801636e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8016374:	2300      	movs	r3, #0
 8016376:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	2b00      	cmp	r3, #0
 801637c:	d05e      	beq.n	801643c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801637e:	68bb      	ldr	r3, [r7, #8]
 8016380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016382:	4b31      	ldr	r3, [pc, #196]	; (8016448 <xTaskPriorityInherit+0xe0>)
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016388:	429a      	cmp	r2, r3
 801638a:	d24e      	bcs.n	801642a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801638c:	68bb      	ldr	r3, [r7, #8]
 801638e:	699b      	ldr	r3, [r3, #24]
 8016390:	2b00      	cmp	r3, #0
 8016392:	db06      	blt.n	80163a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016394:	4b2c      	ldr	r3, [pc, #176]	; (8016448 <xTaskPriorityInherit+0xe0>)
 8016396:	681b      	ldr	r3, [r3, #0]
 8016398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801639a:	f1c3 0207 	rsb	r2, r3, #7
 801639e:	68bb      	ldr	r3, [r7, #8]
 80163a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80163a2:	68bb      	ldr	r3, [r7, #8]
 80163a4:	6959      	ldr	r1, [r3, #20]
 80163a6:	68bb      	ldr	r3, [r7, #8]
 80163a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80163aa:	4613      	mov	r3, r2
 80163ac:	009b      	lsls	r3, r3, #2
 80163ae:	4413      	add	r3, r2
 80163b0:	009b      	lsls	r3, r3, #2
 80163b2:	4a26      	ldr	r2, [pc, #152]	; (801644c <xTaskPriorityInherit+0xe4>)
 80163b4:	4413      	add	r3, r2
 80163b6:	4299      	cmp	r1, r3
 80163b8:	d12f      	bne.n	801641a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80163ba:	68bb      	ldr	r3, [r7, #8]
 80163bc:	3304      	adds	r3, #4
 80163be:	4618      	mov	r0, r3
 80163c0:	f7fe fa36 	bl	8014830 <uxListRemove>
 80163c4:	4603      	mov	r3, r0
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d10a      	bne.n	80163e0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80163ca:	68bb      	ldr	r3, [r7, #8]
 80163cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163ce:	2201      	movs	r2, #1
 80163d0:	fa02 f303 	lsl.w	r3, r2, r3
 80163d4:	43da      	mvns	r2, r3
 80163d6:	4b1e      	ldr	r3, [pc, #120]	; (8016450 <xTaskPriorityInherit+0xe8>)
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	4013      	ands	r3, r2
 80163dc:	4a1c      	ldr	r2, [pc, #112]	; (8016450 <xTaskPriorityInherit+0xe8>)
 80163de:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80163e0:	4b19      	ldr	r3, [pc, #100]	; (8016448 <xTaskPriorityInherit+0xe0>)
 80163e2:	681b      	ldr	r3, [r3, #0]
 80163e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80163e6:	68bb      	ldr	r3, [r7, #8]
 80163e8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80163ea:	68bb      	ldr	r3, [r7, #8]
 80163ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163ee:	2201      	movs	r2, #1
 80163f0:	409a      	lsls	r2, r3
 80163f2:	4b17      	ldr	r3, [pc, #92]	; (8016450 <xTaskPriorityInherit+0xe8>)
 80163f4:	681b      	ldr	r3, [r3, #0]
 80163f6:	4313      	orrs	r3, r2
 80163f8:	4a15      	ldr	r2, [pc, #84]	; (8016450 <xTaskPriorityInherit+0xe8>)
 80163fa:	6013      	str	r3, [r2, #0]
 80163fc:	68bb      	ldr	r3, [r7, #8]
 80163fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016400:	4613      	mov	r3, r2
 8016402:	009b      	lsls	r3, r3, #2
 8016404:	4413      	add	r3, r2
 8016406:	009b      	lsls	r3, r3, #2
 8016408:	4a10      	ldr	r2, [pc, #64]	; (801644c <xTaskPriorityInherit+0xe4>)
 801640a:	441a      	add	r2, r3
 801640c:	68bb      	ldr	r3, [r7, #8]
 801640e:	3304      	adds	r3, #4
 8016410:	4619      	mov	r1, r3
 8016412:	4610      	mov	r0, r2
 8016414:	f7fe f9af 	bl	8014776 <vListInsertEnd>
 8016418:	e004      	b.n	8016424 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801641a:	4b0b      	ldr	r3, [pc, #44]	; (8016448 <xTaskPriorityInherit+0xe0>)
 801641c:	681b      	ldr	r3, [r3, #0]
 801641e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016420:	68bb      	ldr	r3, [r7, #8]
 8016422:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8016424:	2301      	movs	r3, #1
 8016426:	60fb      	str	r3, [r7, #12]
 8016428:	e008      	b.n	801643c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801642a:	68bb      	ldr	r3, [r7, #8]
 801642c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801642e:	4b06      	ldr	r3, [pc, #24]	; (8016448 <xTaskPriorityInherit+0xe0>)
 8016430:	681b      	ldr	r3, [r3, #0]
 8016432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016434:	429a      	cmp	r2, r3
 8016436:	d201      	bcs.n	801643c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8016438:	2301      	movs	r3, #1
 801643a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801643c:	68fb      	ldr	r3, [r7, #12]
	}
 801643e:	4618      	mov	r0, r3
 8016440:	3710      	adds	r7, #16
 8016442:	46bd      	mov	sp, r7
 8016444:	bd80      	pop	{r7, pc}
 8016446:	bf00      	nop
 8016448:	20003290 	.word	0x20003290
 801644c:	20003294 	.word	0x20003294
 8016450:	20003398 	.word	0x20003398

08016454 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016454:	b580      	push	{r7, lr}
 8016456:	b086      	sub	sp, #24
 8016458:	af00      	add	r7, sp, #0
 801645a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016460:	2300      	movs	r3, #0
 8016462:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	2b00      	cmp	r3, #0
 8016468:	d06e      	beq.n	8016548 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801646a:	4b3a      	ldr	r3, [pc, #232]	; (8016554 <xTaskPriorityDisinherit+0x100>)
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	693a      	ldr	r2, [r7, #16]
 8016470:	429a      	cmp	r2, r3
 8016472:	d00a      	beq.n	801648a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8016474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016478:	f383 8811 	msr	BASEPRI, r3
 801647c:	f3bf 8f6f 	isb	sy
 8016480:	f3bf 8f4f 	dsb	sy
 8016484:	60fb      	str	r3, [r7, #12]
}
 8016486:	bf00      	nop
 8016488:	e7fe      	b.n	8016488 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801648a:	693b      	ldr	r3, [r7, #16]
 801648c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801648e:	2b00      	cmp	r3, #0
 8016490:	d10a      	bne.n	80164a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8016492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016496:	f383 8811 	msr	BASEPRI, r3
 801649a:	f3bf 8f6f 	isb	sy
 801649e:	f3bf 8f4f 	dsb	sy
 80164a2:	60bb      	str	r3, [r7, #8]
}
 80164a4:	bf00      	nop
 80164a6:	e7fe      	b.n	80164a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80164a8:	693b      	ldr	r3, [r7, #16]
 80164aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80164ac:	1e5a      	subs	r2, r3, #1
 80164ae:	693b      	ldr	r3, [r7, #16]
 80164b0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80164b2:	693b      	ldr	r3, [r7, #16]
 80164b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80164b6:	693b      	ldr	r3, [r7, #16]
 80164b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80164ba:	429a      	cmp	r2, r3
 80164bc:	d044      	beq.n	8016548 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80164be:	693b      	ldr	r3, [r7, #16]
 80164c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d140      	bne.n	8016548 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80164c6:	693b      	ldr	r3, [r7, #16]
 80164c8:	3304      	adds	r3, #4
 80164ca:	4618      	mov	r0, r3
 80164cc:	f7fe f9b0 	bl	8014830 <uxListRemove>
 80164d0:	4603      	mov	r3, r0
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d115      	bne.n	8016502 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80164d6:	693b      	ldr	r3, [r7, #16]
 80164d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80164da:	491f      	ldr	r1, [pc, #124]	; (8016558 <xTaskPriorityDisinherit+0x104>)
 80164dc:	4613      	mov	r3, r2
 80164de:	009b      	lsls	r3, r3, #2
 80164e0:	4413      	add	r3, r2
 80164e2:	009b      	lsls	r3, r3, #2
 80164e4:	440b      	add	r3, r1
 80164e6:	681b      	ldr	r3, [r3, #0]
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d10a      	bne.n	8016502 <xTaskPriorityDisinherit+0xae>
 80164ec:	693b      	ldr	r3, [r7, #16]
 80164ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164f0:	2201      	movs	r2, #1
 80164f2:	fa02 f303 	lsl.w	r3, r2, r3
 80164f6:	43da      	mvns	r2, r3
 80164f8:	4b18      	ldr	r3, [pc, #96]	; (801655c <xTaskPriorityDisinherit+0x108>)
 80164fa:	681b      	ldr	r3, [r3, #0]
 80164fc:	4013      	ands	r3, r2
 80164fe:	4a17      	ldr	r2, [pc, #92]	; (801655c <xTaskPriorityDisinherit+0x108>)
 8016500:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016502:	693b      	ldr	r3, [r7, #16]
 8016504:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016506:	693b      	ldr	r3, [r7, #16]
 8016508:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801650a:	693b      	ldr	r3, [r7, #16]
 801650c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801650e:	f1c3 0207 	rsb	r2, r3, #7
 8016512:	693b      	ldr	r3, [r7, #16]
 8016514:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016516:	693b      	ldr	r3, [r7, #16]
 8016518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801651a:	2201      	movs	r2, #1
 801651c:	409a      	lsls	r2, r3
 801651e:	4b0f      	ldr	r3, [pc, #60]	; (801655c <xTaskPriorityDisinherit+0x108>)
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	4313      	orrs	r3, r2
 8016524:	4a0d      	ldr	r2, [pc, #52]	; (801655c <xTaskPriorityDisinherit+0x108>)
 8016526:	6013      	str	r3, [r2, #0]
 8016528:	693b      	ldr	r3, [r7, #16]
 801652a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801652c:	4613      	mov	r3, r2
 801652e:	009b      	lsls	r3, r3, #2
 8016530:	4413      	add	r3, r2
 8016532:	009b      	lsls	r3, r3, #2
 8016534:	4a08      	ldr	r2, [pc, #32]	; (8016558 <xTaskPriorityDisinherit+0x104>)
 8016536:	441a      	add	r2, r3
 8016538:	693b      	ldr	r3, [r7, #16]
 801653a:	3304      	adds	r3, #4
 801653c:	4619      	mov	r1, r3
 801653e:	4610      	mov	r0, r2
 8016540:	f7fe f919 	bl	8014776 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016544:	2301      	movs	r3, #1
 8016546:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016548:	697b      	ldr	r3, [r7, #20]
	}
 801654a:	4618      	mov	r0, r3
 801654c:	3718      	adds	r7, #24
 801654e:	46bd      	mov	sp, r7
 8016550:	bd80      	pop	{r7, pc}
 8016552:	bf00      	nop
 8016554:	20003290 	.word	0x20003290
 8016558:	20003294 	.word	0x20003294
 801655c:	20003398 	.word	0x20003398

08016560 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8016560:	b580      	push	{r7, lr}
 8016562:	b088      	sub	sp, #32
 8016564:	af00      	add	r7, sp, #0
 8016566:	6078      	str	r0, [r7, #4]
 8016568:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801656e:	2301      	movs	r3, #1
 8016570:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	2b00      	cmp	r3, #0
 8016576:	d077      	beq.n	8016668 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8016578:	69bb      	ldr	r3, [r7, #24]
 801657a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801657c:	2b00      	cmp	r3, #0
 801657e:	d10a      	bne.n	8016596 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8016580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016584:	f383 8811 	msr	BASEPRI, r3
 8016588:	f3bf 8f6f 	isb	sy
 801658c:	f3bf 8f4f 	dsb	sy
 8016590:	60fb      	str	r3, [r7, #12]
}
 8016592:	bf00      	nop
 8016594:	e7fe      	b.n	8016594 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8016596:	69bb      	ldr	r3, [r7, #24]
 8016598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801659a:	683a      	ldr	r2, [r7, #0]
 801659c:	429a      	cmp	r2, r3
 801659e:	d902      	bls.n	80165a6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80165a0:	683b      	ldr	r3, [r7, #0]
 80165a2:	61fb      	str	r3, [r7, #28]
 80165a4:	e002      	b.n	80165ac <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80165a6:	69bb      	ldr	r3, [r7, #24]
 80165a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80165aa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80165ac:	69bb      	ldr	r3, [r7, #24]
 80165ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165b0:	69fa      	ldr	r2, [r7, #28]
 80165b2:	429a      	cmp	r2, r3
 80165b4:	d058      	beq.n	8016668 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80165b6:	69bb      	ldr	r3, [r7, #24]
 80165b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80165ba:	697a      	ldr	r2, [r7, #20]
 80165bc:	429a      	cmp	r2, r3
 80165be:	d153      	bne.n	8016668 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80165c0:	4b2b      	ldr	r3, [pc, #172]	; (8016670 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	69ba      	ldr	r2, [r7, #24]
 80165c6:	429a      	cmp	r2, r3
 80165c8:	d10a      	bne.n	80165e0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80165ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165ce:	f383 8811 	msr	BASEPRI, r3
 80165d2:	f3bf 8f6f 	isb	sy
 80165d6:	f3bf 8f4f 	dsb	sy
 80165da:	60bb      	str	r3, [r7, #8]
}
 80165dc:	bf00      	nop
 80165de:	e7fe      	b.n	80165de <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80165e0:	69bb      	ldr	r3, [r7, #24]
 80165e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165e4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80165e6:	69bb      	ldr	r3, [r7, #24]
 80165e8:	69fa      	ldr	r2, [r7, #28]
 80165ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80165ec:	69bb      	ldr	r3, [r7, #24]
 80165ee:	699b      	ldr	r3, [r3, #24]
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	db04      	blt.n	80165fe <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80165f4:	69fb      	ldr	r3, [r7, #28]
 80165f6:	f1c3 0207 	rsb	r2, r3, #7
 80165fa:	69bb      	ldr	r3, [r7, #24]
 80165fc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80165fe:	69bb      	ldr	r3, [r7, #24]
 8016600:	6959      	ldr	r1, [r3, #20]
 8016602:	693a      	ldr	r2, [r7, #16]
 8016604:	4613      	mov	r3, r2
 8016606:	009b      	lsls	r3, r3, #2
 8016608:	4413      	add	r3, r2
 801660a:	009b      	lsls	r3, r3, #2
 801660c:	4a19      	ldr	r2, [pc, #100]	; (8016674 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801660e:	4413      	add	r3, r2
 8016610:	4299      	cmp	r1, r3
 8016612:	d129      	bne.n	8016668 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016614:	69bb      	ldr	r3, [r7, #24]
 8016616:	3304      	adds	r3, #4
 8016618:	4618      	mov	r0, r3
 801661a:	f7fe f909 	bl	8014830 <uxListRemove>
 801661e:	4603      	mov	r3, r0
 8016620:	2b00      	cmp	r3, #0
 8016622:	d10a      	bne.n	801663a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8016624:	69bb      	ldr	r3, [r7, #24]
 8016626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016628:	2201      	movs	r2, #1
 801662a:	fa02 f303 	lsl.w	r3, r2, r3
 801662e:	43da      	mvns	r2, r3
 8016630:	4b11      	ldr	r3, [pc, #68]	; (8016678 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8016632:	681b      	ldr	r3, [r3, #0]
 8016634:	4013      	ands	r3, r2
 8016636:	4a10      	ldr	r2, [pc, #64]	; (8016678 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8016638:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801663a:	69bb      	ldr	r3, [r7, #24]
 801663c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801663e:	2201      	movs	r2, #1
 8016640:	409a      	lsls	r2, r3
 8016642:	4b0d      	ldr	r3, [pc, #52]	; (8016678 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8016644:	681b      	ldr	r3, [r3, #0]
 8016646:	4313      	orrs	r3, r2
 8016648:	4a0b      	ldr	r2, [pc, #44]	; (8016678 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801664a:	6013      	str	r3, [r2, #0]
 801664c:	69bb      	ldr	r3, [r7, #24]
 801664e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016650:	4613      	mov	r3, r2
 8016652:	009b      	lsls	r3, r3, #2
 8016654:	4413      	add	r3, r2
 8016656:	009b      	lsls	r3, r3, #2
 8016658:	4a06      	ldr	r2, [pc, #24]	; (8016674 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801665a:	441a      	add	r2, r3
 801665c:	69bb      	ldr	r3, [r7, #24]
 801665e:	3304      	adds	r3, #4
 8016660:	4619      	mov	r1, r3
 8016662:	4610      	mov	r0, r2
 8016664:	f7fe f887 	bl	8014776 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016668:	bf00      	nop
 801666a:	3720      	adds	r7, #32
 801666c:	46bd      	mov	sp, r7
 801666e:	bd80      	pop	{r7, pc}
 8016670:	20003290 	.word	0x20003290
 8016674:	20003294 	.word	0x20003294
 8016678:	20003398 	.word	0x20003398

0801667c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801667c:	b480      	push	{r7}
 801667e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8016680:	4b07      	ldr	r3, [pc, #28]	; (80166a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	2b00      	cmp	r3, #0
 8016686:	d004      	beq.n	8016692 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8016688:	4b05      	ldr	r3, [pc, #20]	; (80166a0 <pvTaskIncrementMutexHeldCount+0x24>)
 801668a:	681b      	ldr	r3, [r3, #0]
 801668c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801668e:	3201      	adds	r2, #1
 8016690:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8016692:	4b03      	ldr	r3, [pc, #12]	; (80166a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8016694:	681b      	ldr	r3, [r3, #0]
	}
 8016696:	4618      	mov	r0, r3
 8016698:	46bd      	mov	sp, r7
 801669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801669e:	4770      	bx	lr
 80166a0:	20003290 	.word	0x20003290

080166a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80166a4:	b580      	push	{r7, lr}
 80166a6:	b084      	sub	sp, #16
 80166a8:	af00      	add	r7, sp, #0
 80166aa:	6078      	str	r0, [r7, #4]
 80166ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80166ae:	4b29      	ldr	r3, [pc, #164]	; (8016754 <prvAddCurrentTaskToDelayedList+0xb0>)
 80166b0:	681b      	ldr	r3, [r3, #0]
 80166b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80166b4:	4b28      	ldr	r3, [pc, #160]	; (8016758 <prvAddCurrentTaskToDelayedList+0xb4>)
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	3304      	adds	r3, #4
 80166ba:	4618      	mov	r0, r3
 80166bc:	f7fe f8b8 	bl	8014830 <uxListRemove>
 80166c0:	4603      	mov	r3, r0
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d10b      	bne.n	80166de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80166c6:	4b24      	ldr	r3, [pc, #144]	; (8016758 <prvAddCurrentTaskToDelayedList+0xb4>)
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80166cc:	2201      	movs	r2, #1
 80166ce:	fa02 f303 	lsl.w	r3, r2, r3
 80166d2:	43da      	mvns	r2, r3
 80166d4:	4b21      	ldr	r3, [pc, #132]	; (801675c <prvAddCurrentTaskToDelayedList+0xb8>)
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	4013      	ands	r3, r2
 80166da:	4a20      	ldr	r2, [pc, #128]	; (801675c <prvAddCurrentTaskToDelayedList+0xb8>)
 80166dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166e4:	d10a      	bne.n	80166fc <prvAddCurrentTaskToDelayedList+0x58>
 80166e6:	683b      	ldr	r3, [r7, #0]
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d007      	beq.n	80166fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80166ec:	4b1a      	ldr	r3, [pc, #104]	; (8016758 <prvAddCurrentTaskToDelayedList+0xb4>)
 80166ee:	681b      	ldr	r3, [r3, #0]
 80166f0:	3304      	adds	r3, #4
 80166f2:	4619      	mov	r1, r3
 80166f4:	481a      	ldr	r0, [pc, #104]	; (8016760 <prvAddCurrentTaskToDelayedList+0xbc>)
 80166f6:	f7fe f83e 	bl	8014776 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80166fa:	e026      	b.n	801674a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80166fc:	68fa      	ldr	r2, [r7, #12]
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	4413      	add	r3, r2
 8016702:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016704:	4b14      	ldr	r3, [pc, #80]	; (8016758 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016706:	681b      	ldr	r3, [r3, #0]
 8016708:	68ba      	ldr	r2, [r7, #8]
 801670a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801670c:	68ba      	ldr	r2, [r7, #8]
 801670e:	68fb      	ldr	r3, [r7, #12]
 8016710:	429a      	cmp	r2, r3
 8016712:	d209      	bcs.n	8016728 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016714:	4b13      	ldr	r3, [pc, #76]	; (8016764 <prvAddCurrentTaskToDelayedList+0xc0>)
 8016716:	681a      	ldr	r2, [r3, #0]
 8016718:	4b0f      	ldr	r3, [pc, #60]	; (8016758 <prvAddCurrentTaskToDelayedList+0xb4>)
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	3304      	adds	r3, #4
 801671e:	4619      	mov	r1, r3
 8016720:	4610      	mov	r0, r2
 8016722:	f7fe f84c 	bl	80147be <vListInsert>
}
 8016726:	e010      	b.n	801674a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016728:	4b0f      	ldr	r3, [pc, #60]	; (8016768 <prvAddCurrentTaskToDelayedList+0xc4>)
 801672a:	681a      	ldr	r2, [r3, #0]
 801672c:	4b0a      	ldr	r3, [pc, #40]	; (8016758 <prvAddCurrentTaskToDelayedList+0xb4>)
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	3304      	adds	r3, #4
 8016732:	4619      	mov	r1, r3
 8016734:	4610      	mov	r0, r2
 8016736:	f7fe f842 	bl	80147be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801673a:	4b0c      	ldr	r3, [pc, #48]	; (801676c <prvAddCurrentTaskToDelayedList+0xc8>)
 801673c:	681b      	ldr	r3, [r3, #0]
 801673e:	68ba      	ldr	r2, [r7, #8]
 8016740:	429a      	cmp	r2, r3
 8016742:	d202      	bcs.n	801674a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8016744:	4a09      	ldr	r2, [pc, #36]	; (801676c <prvAddCurrentTaskToDelayedList+0xc8>)
 8016746:	68bb      	ldr	r3, [r7, #8]
 8016748:	6013      	str	r3, [r2, #0]
}
 801674a:	bf00      	nop
 801674c:	3710      	adds	r7, #16
 801674e:	46bd      	mov	sp, r7
 8016750:	bd80      	pop	{r7, pc}
 8016752:	bf00      	nop
 8016754:	20003394 	.word	0x20003394
 8016758:	20003290 	.word	0x20003290
 801675c:	20003398 	.word	0x20003398
 8016760:	2000337c 	.word	0x2000337c
 8016764:	2000334c 	.word	0x2000334c
 8016768:	20003348 	.word	0x20003348
 801676c:	200033b0 	.word	0x200033b0

08016770 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016770:	b480      	push	{r7}
 8016772:	b085      	sub	sp, #20
 8016774:	af00      	add	r7, sp, #0
 8016776:	60f8      	str	r0, [r7, #12]
 8016778:	60b9      	str	r1, [r7, #8]
 801677a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	3b04      	subs	r3, #4
 8016780:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016782:	68fb      	ldr	r3, [r7, #12]
 8016784:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016788:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801678a:	68fb      	ldr	r3, [r7, #12]
 801678c:	3b04      	subs	r3, #4
 801678e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016790:	68bb      	ldr	r3, [r7, #8]
 8016792:	f023 0201 	bic.w	r2, r3, #1
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801679a:	68fb      	ldr	r3, [r7, #12]
 801679c:	3b04      	subs	r3, #4
 801679e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80167a0:	4a0c      	ldr	r2, [pc, #48]	; (80167d4 <pxPortInitialiseStack+0x64>)
 80167a2:	68fb      	ldr	r3, [r7, #12]
 80167a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	3b14      	subs	r3, #20
 80167aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80167ac:	687a      	ldr	r2, [r7, #4]
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80167b2:	68fb      	ldr	r3, [r7, #12]
 80167b4:	3b04      	subs	r3, #4
 80167b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	f06f 0202 	mvn.w	r2, #2
 80167be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80167c0:	68fb      	ldr	r3, [r7, #12]
 80167c2:	3b20      	subs	r3, #32
 80167c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80167c6:	68fb      	ldr	r3, [r7, #12]
}
 80167c8:	4618      	mov	r0, r3
 80167ca:	3714      	adds	r7, #20
 80167cc:	46bd      	mov	sp, r7
 80167ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167d2:	4770      	bx	lr
 80167d4:	080167d9 	.word	0x080167d9

080167d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80167d8:	b480      	push	{r7}
 80167da:	b085      	sub	sp, #20
 80167dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80167de:	2300      	movs	r3, #0
 80167e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80167e2:	4b12      	ldr	r3, [pc, #72]	; (801682c <prvTaskExitError+0x54>)
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80167ea:	d00a      	beq.n	8016802 <prvTaskExitError+0x2a>
	__asm volatile
 80167ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167f0:	f383 8811 	msr	BASEPRI, r3
 80167f4:	f3bf 8f6f 	isb	sy
 80167f8:	f3bf 8f4f 	dsb	sy
 80167fc:	60fb      	str	r3, [r7, #12]
}
 80167fe:	bf00      	nop
 8016800:	e7fe      	b.n	8016800 <prvTaskExitError+0x28>
	__asm volatile
 8016802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016806:	f383 8811 	msr	BASEPRI, r3
 801680a:	f3bf 8f6f 	isb	sy
 801680e:	f3bf 8f4f 	dsb	sy
 8016812:	60bb      	str	r3, [r7, #8]
}
 8016814:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8016816:	bf00      	nop
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	2b00      	cmp	r3, #0
 801681c:	d0fc      	beq.n	8016818 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801681e:	bf00      	nop
 8016820:	bf00      	nop
 8016822:	3714      	adds	r7, #20
 8016824:	46bd      	mov	sp, r7
 8016826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801682a:	4770      	bx	lr
 801682c:	200000bc 	.word	0x200000bc

08016830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016830:	4b07      	ldr	r3, [pc, #28]	; (8016850 <pxCurrentTCBConst2>)
 8016832:	6819      	ldr	r1, [r3, #0]
 8016834:	6808      	ldr	r0, [r1, #0]
 8016836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801683a:	f380 8809 	msr	PSP, r0
 801683e:	f3bf 8f6f 	isb	sy
 8016842:	f04f 0000 	mov.w	r0, #0
 8016846:	f380 8811 	msr	BASEPRI, r0
 801684a:	4770      	bx	lr
 801684c:	f3af 8000 	nop.w

08016850 <pxCurrentTCBConst2>:
 8016850:	20003290 	.word	0x20003290
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016854:	bf00      	nop
 8016856:	bf00      	nop

08016858 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016858:	4808      	ldr	r0, [pc, #32]	; (801687c <prvPortStartFirstTask+0x24>)
 801685a:	6800      	ldr	r0, [r0, #0]
 801685c:	6800      	ldr	r0, [r0, #0]
 801685e:	f380 8808 	msr	MSP, r0
 8016862:	f04f 0000 	mov.w	r0, #0
 8016866:	f380 8814 	msr	CONTROL, r0
 801686a:	b662      	cpsie	i
 801686c:	b661      	cpsie	f
 801686e:	f3bf 8f4f 	dsb	sy
 8016872:	f3bf 8f6f 	isb	sy
 8016876:	df00      	svc	0
 8016878:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801687a:	bf00      	nop
 801687c:	e000ed08 	.word	0xe000ed08

08016880 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016880:	b580      	push	{r7, lr}
 8016882:	b086      	sub	sp, #24
 8016884:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016886:	4b46      	ldr	r3, [pc, #280]	; (80169a0 <xPortStartScheduler+0x120>)
 8016888:	681b      	ldr	r3, [r3, #0]
 801688a:	4a46      	ldr	r2, [pc, #280]	; (80169a4 <xPortStartScheduler+0x124>)
 801688c:	4293      	cmp	r3, r2
 801688e:	d10a      	bne.n	80168a6 <xPortStartScheduler+0x26>
	__asm volatile
 8016890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016894:	f383 8811 	msr	BASEPRI, r3
 8016898:	f3bf 8f6f 	isb	sy
 801689c:	f3bf 8f4f 	dsb	sy
 80168a0:	613b      	str	r3, [r7, #16]
}
 80168a2:	bf00      	nop
 80168a4:	e7fe      	b.n	80168a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80168a6:	4b3e      	ldr	r3, [pc, #248]	; (80169a0 <xPortStartScheduler+0x120>)
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	4a3f      	ldr	r2, [pc, #252]	; (80169a8 <xPortStartScheduler+0x128>)
 80168ac:	4293      	cmp	r3, r2
 80168ae:	d10a      	bne.n	80168c6 <xPortStartScheduler+0x46>
	__asm volatile
 80168b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168b4:	f383 8811 	msr	BASEPRI, r3
 80168b8:	f3bf 8f6f 	isb	sy
 80168bc:	f3bf 8f4f 	dsb	sy
 80168c0:	60fb      	str	r3, [r7, #12]
}
 80168c2:	bf00      	nop
 80168c4:	e7fe      	b.n	80168c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80168c6:	4b39      	ldr	r3, [pc, #228]	; (80169ac <xPortStartScheduler+0x12c>)
 80168c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80168ca:	697b      	ldr	r3, [r7, #20]
 80168cc:	781b      	ldrb	r3, [r3, #0]
 80168ce:	b2db      	uxtb	r3, r3
 80168d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80168d2:	697b      	ldr	r3, [r7, #20]
 80168d4:	22ff      	movs	r2, #255	; 0xff
 80168d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80168d8:	697b      	ldr	r3, [r7, #20]
 80168da:	781b      	ldrb	r3, [r3, #0]
 80168dc:	b2db      	uxtb	r3, r3
 80168de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80168e0:	78fb      	ldrb	r3, [r7, #3]
 80168e2:	b2db      	uxtb	r3, r3
 80168e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80168e8:	b2da      	uxtb	r2, r3
 80168ea:	4b31      	ldr	r3, [pc, #196]	; (80169b0 <xPortStartScheduler+0x130>)
 80168ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80168ee:	4b31      	ldr	r3, [pc, #196]	; (80169b4 <xPortStartScheduler+0x134>)
 80168f0:	2207      	movs	r2, #7
 80168f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80168f4:	e009      	b.n	801690a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80168f6:	4b2f      	ldr	r3, [pc, #188]	; (80169b4 <xPortStartScheduler+0x134>)
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	3b01      	subs	r3, #1
 80168fc:	4a2d      	ldr	r2, [pc, #180]	; (80169b4 <xPortStartScheduler+0x134>)
 80168fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016900:	78fb      	ldrb	r3, [r7, #3]
 8016902:	b2db      	uxtb	r3, r3
 8016904:	005b      	lsls	r3, r3, #1
 8016906:	b2db      	uxtb	r3, r3
 8016908:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801690a:	78fb      	ldrb	r3, [r7, #3]
 801690c:	b2db      	uxtb	r3, r3
 801690e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016912:	2b80      	cmp	r3, #128	; 0x80
 8016914:	d0ef      	beq.n	80168f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016916:	4b27      	ldr	r3, [pc, #156]	; (80169b4 <xPortStartScheduler+0x134>)
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	f1c3 0307 	rsb	r3, r3, #7
 801691e:	2b04      	cmp	r3, #4
 8016920:	d00a      	beq.n	8016938 <xPortStartScheduler+0xb8>
	__asm volatile
 8016922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016926:	f383 8811 	msr	BASEPRI, r3
 801692a:	f3bf 8f6f 	isb	sy
 801692e:	f3bf 8f4f 	dsb	sy
 8016932:	60bb      	str	r3, [r7, #8]
}
 8016934:	bf00      	nop
 8016936:	e7fe      	b.n	8016936 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016938:	4b1e      	ldr	r3, [pc, #120]	; (80169b4 <xPortStartScheduler+0x134>)
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	021b      	lsls	r3, r3, #8
 801693e:	4a1d      	ldr	r2, [pc, #116]	; (80169b4 <xPortStartScheduler+0x134>)
 8016940:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016942:	4b1c      	ldr	r3, [pc, #112]	; (80169b4 <xPortStartScheduler+0x134>)
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801694a:	4a1a      	ldr	r2, [pc, #104]	; (80169b4 <xPortStartScheduler+0x134>)
 801694c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	b2da      	uxtb	r2, r3
 8016952:	697b      	ldr	r3, [r7, #20]
 8016954:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016956:	4b18      	ldr	r3, [pc, #96]	; (80169b8 <xPortStartScheduler+0x138>)
 8016958:	681b      	ldr	r3, [r3, #0]
 801695a:	4a17      	ldr	r2, [pc, #92]	; (80169b8 <xPortStartScheduler+0x138>)
 801695c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016960:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016962:	4b15      	ldr	r3, [pc, #84]	; (80169b8 <xPortStartScheduler+0x138>)
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	4a14      	ldr	r2, [pc, #80]	; (80169b8 <xPortStartScheduler+0x138>)
 8016968:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801696c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801696e:	f000 f8dd 	bl	8016b2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016972:	4b12      	ldr	r3, [pc, #72]	; (80169bc <xPortStartScheduler+0x13c>)
 8016974:	2200      	movs	r2, #0
 8016976:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016978:	f000 f8fc 	bl	8016b74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801697c:	4b10      	ldr	r3, [pc, #64]	; (80169c0 <xPortStartScheduler+0x140>)
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	4a0f      	ldr	r2, [pc, #60]	; (80169c0 <xPortStartScheduler+0x140>)
 8016982:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016986:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016988:	f7ff ff66 	bl	8016858 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801698c:	f7ff fa88 	bl	8015ea0 <vTaskSwitchContext>
	prvTaskExitError();
 8016990:	f7ff ff22 	bl	80167d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016994:	2300      	movs	r3, #0
}
 8016996:	4618      	mov	r0, r3
 8016998:	3718      	adds	r7, #24
 801699a:	46bd      	mov	sp, r7
 801699c:	bd80      	pop	{r7, pc}
 801699e:	bf00      	nop
 80169a0:	e000ed00 	.word	0xe000ed00
 80169a4:	410fc271 	.word	0x410fc271
 80169a8:	410fc270 	.word	0x410fc270
 80169ac:	e000e400 	.word	0xe000e400
 80169b0:	200033bc 	.word	0x200033bc
 80169b4:	200033c0 	.word	0x200033c0
 80169b8:	e000ed20 	.word	0xe000ed20
 80169bc:	200000bc 	.word	0x200000bc
 80169c0:	e000ef34 	.word	0xe000ef34

080169c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80169c4:	b480      	push	{r7}
 80169c6:	b083      	sub	sp, #12
 80169c8:	af00      	add	r7, sp, #0
	__asm volatile
 80169ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169ce:	f383 8811 	msr	BASEPRI, r3
 80169d2:	f3bf 8f6f 	isb	sy
 80169d6:	f3bf 8f4f 	dsb	sy
 80169da:	607b      	str	r3, [r7, #4]
}
 80169dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80169de:	4b0f      	ldr	r3, [pc, #60]	; (8016a1c <vPortEnterCritical+0x58>)
 80169e0:	681b      	ldr	r3, [r3, #0]
 80169e2:	3301      	adds	r3, #1
 80169e4:	4a0d      	ldr	r2, [pc, #52]	; (8016a1c <vPortEnterCritical+0x58>)
 80169e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80169e8:	4b0c      	ldr	r3, [pc, #48]	; (8016a1c <vPortEnterCritical+0x58>)
 80169ea:	681b      	ldr	r3, [r3, #0]
 80169ec:	2b01      	cmp	r3, #1
 80169ee:	d10f      	bne.n	8016a10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80169f0:	4b0b      	ldr	r3, [pc, #44]	; (8016a20 <vPortEnterCritical+0x5c>)
 80169f2:	681b      	ldr	r3, [r3, #0]
 80169f4:	b2db      	uxtb	r3, r3
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d00a      	beq.n	8016a10 <vPortEnterCritical+0x4c>
	__asm volatile
 80169fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169fe:	f383 8811 	msr	BASEPRI, r3
 8016a02:	f3bf 8f6f 	isb	sy
 8016a06:	f3bf 8f4f 	dsb	sy
 8016a0a:	603b      	str	r3, [r7, #0]
}
 8016a0c:	bf00      	nop
 8016a0e:	e7fe      	b.n	8016a0e <vPortEnterCritical+0x4a>
	}
}
 8016a10:	bf00      	nop
 8016a12:	370c      	adds	r7, #12
 8016a14:	46bd      	mov	sp, r7
 8016a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a1a:	4770      	bx	lr
 8016a1c:	200000bc 	.word	0x200000bc
 8016a20:	e000ed04 	.word	0xe000ed04

08016a24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016a24:	b480      	push	{r7}
 8016a26:	b083      	sub	sp, #12
 8016a28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016a2a:	4b12      	ldr	r3, [pc, #72]	; (8016a74 <vPortExitCritical+0x50>)
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d10a      	bne.n	8016a48 <vPortExitCritical+0x24>
	__asm volatile
 8016a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a36:	f383 8811 	msr	BASEPRI, r3
 8016a3a:	f3bf 8f6f 	isb	sy
 8016a3e:	f3bf 8f4f 	dsb	sy
 8016a42:	607b      	str	r3, [r7, #4]
}
 8016a44:	bf00      	nop
 8016a46:	e7fe      	b.n	8016a46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8016a48:	4b0a      	ldr	r3, [pc, #40]	; (8016a74 <vPortExitCritical+0x50>)
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	3b01      	subs	r3, #1
 8016a4e:	4a09      	ldr	r2, [pc, #36]	; (8016a74 <vPortExitCritical+0x50>)
 8016a50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016a52:	4b08      	ldr	r3, [pc, #32]	; (8016a74 <vPortExitCritical+0x50>)
 8016a54:	681b      	ldr	r3, [r3, #0]
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d105      	bne.n	8016a66 <vPortExitCritical+0x42>
 8016a5a:	2300      	movs	r3, #0
 8016a5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016a5e:	683b      	ldr	r3, [r7, #0]
 8016a60:	f383 8811 	msr	BASEPRI, r3
}
 8016a64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016a66:	bf00      	nop
 8016a68:	370c      	adds	r7, #12
 8016a6a:	46bd      	mov	sp, r7
 8016a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a70:	4770      	bx	lr
 8016a72:	bf00      	nop
 8016a74:	200000bc 	.word	0x200000bc
	...

08016a80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016a80:	f3ef 8009 	mrs	r0, PSP
 8016a84:	f3bf 8f6f 	isb	sy
 8016a88:	4b15      	ldr	r3, [pc, #84]	; (8016ae0 <pxCurrentTCBConst>)
 8016a8a:	681a      	ldr	r2, [r3, #0]
 8016a8c:	f01e 0f10 	tst.w	lr, #16
 8016a90:	bf08      	it	eq
 8016a92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016a96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a9a:	6010      	str	r0, [r2, #0]
 8016a9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016aa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016aa4:	f380 8811 	msr	BASEPRI, r0
 8016aa8:	f3bf 8f4f 	dsb	sy
 8016aac:	f3bf 8f6f 	isb	sy
 8016ab0:	f7ff f9f6 	bl	8015ea0 <vTaskSwitchContext>
 8016ab4:	f04f 0000 	mov.w	r0, #0
 8016ab8:	f380 8811 	msr	BASEPRI, r0
 8016abc:	bc09      	pop	{r0, r3}
 8016abe:	6819      	ldr	r1, [r3, #0]
 8016ac0:	6808      	ldr	r0, [r1, #0]
 8016ac2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ac6:	f01e 0f10 	tst.w	lr, #16
 8016aca:	bf08      	it	eq
 8016acc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016ad0:	f380 8809 	msr	PSP, r0
 8016ad4:	f3bf 8f6f 	isb	sy
 8016ad8:	4770      	bx	lr
 8016ada:	bf00      	nop
 8016adc:	f3af 8000 	nop.w

08016ae0 <pxCurrentTCBConst>:
 8016ae0:	20003290 	.word	0x20003290
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016ae4:	bf00      	nop
 8016ae6:	bf00      	nop

08016ae8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016ae8:	b580      	push	{r7, lr}
 8016aea:	b082      	sub	sp, #8
 8016aec:	af00      	add	r7, sp, #0
	__asm volatile
 8016aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016af2:	f383 8811 	msr	BASEPRI, r3
 8016af6:	f3bf 8f6f 	isb	sy
 8016afa:	f3bf 8f4f 	dsb	sy
 8016afe:	607b      	str	r3, [r7, #4]
}
 8016b00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016b02:	f7ff f915 	bl	8015d30 <xTaskIncrementTick>
 8016b06:	4603      	mov	r3, r0
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d003      	beq.n	8016b14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016b0c:	4b06      	ldr	r3, [pc, #24]	; (8016b28 <SysTick_Handler+0x40>)
 8016b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016b12:	601a      	str	r2, [r3, #0]
 8016b14:	2300      	movs	r3, #0
 8016b16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016b18:	683b      	ldr	r3, [r7, #0]
 8016b1a:	f383 8811 	msr	BASEPRI, r3
}
 8016b1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016b20:	bf00      	nop
 8016b22:	3708      	adds	r7, #8
 8016b24:	46bd      	mov	sp, r7
 8016b26:	bd80      	pop	{r7, pc}
 8016b28:	e000ed04 	.word	0xe000ed04

08016b2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016b2c:	b480      	push	{r7}
 8016b2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016b30:	4b0b      	ldr	r3, [pc, #44]	; (8016b60 <vPortSetupTimerInterrupt+0x34>)
 8016b32:	2200      	movs	r2, #0
 8016b34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016b36:	4b0b      	ldr	r3, [pc, #44]	; (8016b64 <vPortSetupTimerInterrupt+0x38>)
 8016b38:	2200      	movs	r2, #0
 8016b3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016b3c:	4b0a      	ldr	r3, [pc, #40]	; (8016b68 <vPortSetupTimerInterrupt+0x3c>)
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	4a0a      	ldr	r2, [pc, #40]	; (8016b6c <vPortSetupTimerInterrupt+0x40>)
 8016b42:	fba2 2303 	umull	r2, r3, r2, r3
 8016b46:	099b      	lsrs	r3, r3, #6
 8016b48:	4a09      	ldr	r2, [pc, #36]	; (8016b70 <vPortSetupTimerInterrupt+0x44>)
 8016b4a:	3b01      	subs	r3, #1
 8016b4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8016b4e:	4b04      	ldr	r3, [pc, #16]	; (8016b60 <vPortSetupTimerInterrupt+0x34>)
 8016b50:	2207      	movs	r2, #7
 8016b52:	601a      	str	r2, [r3, #0]
}
 8016b54:	bf00      	nop
 8016b56:	46bd      	mov	sp, r7
 8016b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b5c:	4770      	bx	lr
 8016b5e:	bf00      	nop
 8016b60:	e000e010 	.word	0xe000e010
 8016b64:	e000e018 	.word	0xe000e018
 8016b68:	20000008 	.word	0x20000008
 8016b6c:	10624dd3 	.word	0x10624dd3
 8016b70:	e000e014 	.word	0xe000e014

08016b74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016b74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016b84 <vPortEnableVFP+0x10>
 8016b78:	6801      	ldr	r1, [r0, #0]
 8016b7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8016b7e:	6001      	str	r1, [r0, #0]
 8016b80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016b82:	bf00      	nop
 8016b84:	e000ed88 	.word	0xe000ed88

08016b88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016b88:	b480      	push	{r7}
 8016b8a:	b085      	sub	sp, #20
 8016b8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8016b8e:	f3ef 8305 	mrs	r3, IPSR
 8016b92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	2b0f      	cmp	r3, #15
 8016b98:	d914      	bls.n	8016bc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8016b9a:	4a17      	ldr	r2, [pc, #92]	; (8016bf8 <vPortValidateInterruptPriority+0x70>)
 8016b9c:	68fb      	ldr	r3, [r7, #12]
 8016b9e:	4413      	add	r3, r2
 8016ba0:	781b      	ldrb	r3, [r3, #0]
 8016ba2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016ba4:	4b15      	ldr	r3, [pc, #84]	; (8016bfc <vPortValidateInterruptPriority+0x74>)
 8016ba6:	781b      	ldrb	r3, [r3, #0]
 8016ba8:	7afa      	ldrb	r2, [r7, #11]
 8016baa:	429a      	cmp	r2, r3
 8016bac:	d20a      	bcs.n	8016bc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8016bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bb2:	f383 8811 	msr	BASEPRI, r3
 8016bb6:	f3bf 8f6f 	isb	sy
 8016bba:	f3bf 8f4f 	dsb	sy
 8016bbe:	607b      	str	r3, [r7, #4]
}
 8016bc0:	bf00      	nop
 8016bc2:	e7fe      	b.n	8016bc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016bc4:	4b0e      	ldr	r3, [pc, #56]	; (8016c00 <vPortValidateInterruptPriority+0x78>)
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8016bcc:	4b0d      	ldr	r3, [pc, #52]	; (8016c04 <vPortValidateInterruptPriority+0x7c>)
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	429a      	cmp	r2, r3
 8016bd2:	d90a      	bls.n	8016bea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8016bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bd8:	f383 8811 	msr	BASEPRI, r3
 8016bdc:	f3bf 8f6f 	isb	sy
 8016be0:	f3bf 8f4f 	dsb	sy
 8016be4:	603b      	str	r3, [r7, #0]
}
 8016be6:	bf00      	nop
 8016be8:	e7fe      	b.n	8016be8 <vPortValidateInterruptPriority+0x60>
	}
 8016bea:	bf00      	nop
 8016bec:	3714      	adds	r7, #20
 8016bee:	46bd      	mov	sp, r7
 8016bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bf4:	4770      	bx	lr
 8016bf6:	bf00      	nop
 8016bf8:	e000e3f0 	.word	0xe000e3f0
 8016bfc:	200033bc 	.word	0x200033bc
 8016c00:	e000ed0c 	.word	0xe000ed0c
 8016c04:	200033c0 	.word	0x200033c0

08016c08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016c08:	b580      	push	{r7, lr}
 8016c0a:	b08a      	sub	sp, #40	; 0x28
 8016c0c:	af00      	add	r7, sp, #0
 8016c0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016c10:	2300      	movs	r3, #0
 8016c12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016c14:	f7fe ffc0 	bl	8015b98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016c18:	4b5b      	ldr	r3, [pc, #364]	; (8016d88 <pvPortMalloc+0x180>)
 8016c1a:	681b      	ldr	r3, [r3, #0]
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d101      	bne.n	8016c24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016c20:	f000 f920 	bl	8016e64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016c24:	4b59      	ldr	r3, [pc, #356]	; (8016d8c <pvPortMalloc+0x184>)
 8016c26:	681a      	ldr	r2, [r3, #0]
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	4013      	ands	r3, r2
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	f040 8093 	bne.w	8016d58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d01d      	beq.n	8016c74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8016c38:	2208      	movs	r2, #8
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	4413      	add	r3, r2
 8016c3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	f003 0307 	and.w	r3, r3, #7
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d014      	beq.n	8016c74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	f023 0307 	bic.w	r3, r3, #7
 8016c50:	3308      	adds	r3, #8
 8016c52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	f003 0307 	and.w	r3, r3, #7
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d00a      	beq.n	8016c74 <pvPortMalloc+0x6c>
	__asm volatile
 8016c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c62:	f383 8811 	msr	BASEPRI, r3
 8016c66:	f3bf 8f6f 	isb	sy
 8016c6a:	f3bf 8f4f 	dsb	sy
 8016c6e:	617b      	str	r3, [r7, #20]
}
 8016c70:	bf00      	nop
 8016c72:	e7fe      	b.n	8016c72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d06e      	beq.n	8016d58 <pvPortMalloc+0x150>
 8016c7a:	4b45      	ldr	r3, [pc, #276]	; (8016d90 <pvPortMalloc+0x188>)
 8016c7c:	681b      	ldr	r3, [r3, #0]
 8016c7e:	687a      	ldr	r2, [r7, #4]
 8016c80:	429a      	cmp	r2, r3
 8016c82:	d869      	bhi.n	8016d58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016c84:	4b43      	ldr	r3, [pc, #268]	; (8016d94 <pvPortMalloc+0x18c>)
 8016c86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016c88:	4b42      	ldr	r3, [pc, #264]	; (8016d94 <pvPortMalloc+0x18c>)
 8016c8a:	681b      	ldr	r3, [r3, #0]
 8016c8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016c8e:	e004      	b.n	8016c9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8016c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c96:	681b      	ldr	r3, [r3, #0]
 8016c98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c9c:	685b      	ldr	r3, [r3, #4]
 8016c9e:	687a      	ldr	r2, [r7, #4]
 8016ca0:	429a      	cmp	r2, r3
 8016ca2:	d903      	bls.n	8016cac <pvPortMalloc+0xa4>
 8016ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ca6:	681b      	ldr	r3, [r3, #0]
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d1f1      	bne.n	8016c90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016cac:	4b36      	ldr	r3, [pc, #216]	; (8016d88 <pvPortMalloc+0x180>)
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016cb2:	429a      	cmp	r2, r3
 8016cb4:	d050      	beq.n	8016d58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016cb6:	6a3b      	ldr	r3, [r7, #32]
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	2208      	movs	r2, #8
 8016cbc:	4413      	add	r3, r2
 8016cbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cc2:	681a      	ldr	r2, [r3, #0]
 8016cc4:	6a3b      	ldr	r3, [r7, #32]
 8016cc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cca:	685a      	ldr	r2, [r3, #4]
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	1ad2      	subs	r2, r2, r3
 8016cd0:	2308      	movs	r3, #8
 8016cd2:	005b      	lsls	r3, r3, #1
 8016cd4:	429a      	cmp	r2, r3
 8016cd6:	d91f      	bls.n	8016d18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	4413      	add	r3, r2
 8016cde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016ce0:	69bb      	ldr	r3, [r7, #24]
 8016ce2:	f003 0307 	and.w	r3, r3, #7
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d00a      	beq.n	8016d00 <pvPortMalloc+0xf8>
	__asm volatile
 8016cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cee:	f383 8811 	msr	BASEPRI, r3
 8016cf2:	f3bf 8f6f 	isb	sy
 8016cf6:	f3bf 8f4f 	dsb	sy
 8016cfa:	613b      	str	r3, [r7, #16]
}
 8016cfc:	bf00      	nop
 8016cfe:	e7fe      	b.n	8016cfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d02:	685a      	ldr	r2, [r3, #4]
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	1ad2      	subs	r2, r2, r3
 8016d08:	69bb      	ldr	r3, [r7, #24]
 8016d0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d0e:	687a      	ldr	r2, [r7, #4]
 8016d10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016d12:	69b8      	ldr	r0, [r7, #24]
 8016d14:	f000 f908 	bl	8016f28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016d18:	4b1d      	ldr	r3, [pc, #116]	; (8016d90 <pvPortMalloc+0x188>)
 8016d1a:	681a      	ldr	r2, [r3, #0]
 8016d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d1e:	685b      	ldr	r3, [r3, #4]
 8016d20:	1ad3      	subs	r3, r2, r3
 8016d22:	4a1b      	ldr	r2, [pc, #108]	; (8016d90 <pvPortMalloc+0x188>)
 8016d24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016d26:	4b1a      	ldr	r3, [pc, #104]	; (8016d90 <pvPortMalloc+0x188>)
 8016d28:	681a      	ldr	r2, [r3, #0]
 8016d2a:	4b1b      	ldr	r3, [pc, #108]	; (8016d98 <pvPortMalloc+0x190>)
 8016d2c:	681b      	ldr	r3, [r3, #0]
 8016d2e:	429a      	cmp	r2, r3
 8016d30:	d203      	bcs.n	8016d3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016d32:	4b17      	ldr	r3, [pc, #92]	; (8016d90 <pvPortMalloc+0x188>)
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	4a18      	ldr	r2, [pc, #96]	; (8016d98 <pvPortMalloc+0x190>)
 8016d38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d3c:	685a      	ldr	r2, [r3, #4]
 8016d3e:	4b13      	ldr	r3, [pc, #76]	; (8016d8c <pvPortMalloc+0x184>)
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	431a      	orrs	r2, r3
 8016d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d4a:	2200      	movs	r2, #0
 8016d4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8016d4e:	4b13      	ldr	r3, [pc, #76]	; (8016d9c <pvPortMalloc+0x194>)
 8016d50:	681b      	ldr	r3, [r3, #0]
 8016d52:	3301      	adds	r3, #1
 8016d54:	4a11      	ldr	r2, [pc, #68]	; (8016d9c <pvPortMalloc+0x194>)
 8016d56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016d58:	f7fe ff2c 	bl	8015bb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016d5c:	69fb      	ldr	r3, [r7, #28]
 8016d5e:	f003 0307 	and.w	r3, r3, #7
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	d00a      	beq.n	8016d7c <pvPortMalloc+0x174>
	__asm volatile
 8016d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d6a:	f383 8811 	msr	BASEPRI, r3
 8016d6e:	f3bf 8f6f 	isb	sy
 8016d72:	f3bf 8f4f 	dsb	sy
 8016d76:	60fb      	str	r3, [r7, #12]
}
 8016d78:	bf00      	nop
 8016d7a:	e7fe      	b.n	8016d7a <pvPortMalloc+0x172>
	return pvReturn;
 8016d7c:	69fb      	ldr	r3, [r7, #28]
}
 8016d7e:	4618      	mov	r0, r3
 8016d80:	3728      	adds	r7, #40	; 0x28
 8016d82:	46bd      	mov	sp, r7
 8016d84:	bd80      	pop	{r7, pc}
 8016d86:	bf00      	nop
 8016d88:	20006fcc 	.word	0x20006fcc
 8016d8c:	20006fe0 	.word	0x20006fe0
 8016d90:	20006fd0 	.word	0x20006fd0
 8016d94:	20006fc4 	.word	0x20006fc4
 8016d98:	20006fd4 	.word	0x20006fd4
 8016d9c:	20006fd8 	.word	0x20006fd8

08016da0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016da0:	b580      	push	{r7, lr}
 8016da2:	b086      	sub	sp, #24
 8016da4:	af00      	add	r7, sp, #0
 8016da6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	d04d      	beq.n	8016e4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016db2:	2308      	movs	r3, #8
 8016db4:	425b      	negs	r3, r3
 8016db6:	697a      	ldr	r2, [r7, #20]
 8016db8:	4413      	add	r3, r2
 8016dba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016dbc:	697b      	ldr	r3, [r7, #20]
 8016dbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016dc0:	693b      	ldr	r3, [r7, #16]
 8016dc2:	685a      	ldr	r2, [r3, #4]
 8016dc4:	4b24      	ldr	r3, [pc, #144]	; (8016e58 <vPortFree+0xb8>)
 8016dc6:	681b      	ldr	r3, [r3, #0]
 8016dc8:	4013      	ands	r3, r2
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d10a      	bne.n	8016de4 <vPortFree+0x44>
	__asm volatile
 8016dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dd2:	f383 8811 	msr	BASEPRI, r3
 8016dd6:	f3bf 8f6f 	isb	sy
 8016dda:	f3bf 8f4f 	dsb	sy
 8016dde:	60fb      	str	r3, [r7, #12]
}
 8016de0:	bf00      	nop
 8016de2:	e7fe      	b.n	8016de2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016de4:	693b      	ldr	r3, [r7, #16]
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d00a      	beq.n	8016e02 <vPortFree+0x62>
	__asm volatile
 8016dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016df0:	f383 8811 	msr	BASEPRI, r3
 8016df4:	f3bf 8f6f 	isb	sy
 8016df8:	f3bf 8f4f 	dsb	sy
 8016dfc:	60bb      	str	r3, [r7, #8]
}
 8016dfe:	bf00      	nop
 8016e00:	e7fe      	b.n	8016e00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016e02:	693b      	ldr	r3, [r7, #16]
 8016e04:	685a      	ldr	r2, [r3, #4]
 8016e06:	4b14      	ldr	r3, [pc, #80]	; (8016e58 <vPortFree+0xb8>)
 8016e08:	681b      	ldr	r3, [r3, #0]
 8016e0a:	4013      	ands	r3, r2
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d01e      	beq.n	8016e4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016e10:	693b      	ldr	r3, [r7, #16]
 8016e12:	681b      	ldr	r3, [r3, #0]
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d11a      	bne.n	8016e4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016e18:	693b      	ldr	r3, [r7, #16]
 8016e1a:	685a      	ldr	r2, [r3, #4]
 8016e1c:	4b0e      	ldr	r3, [pc, #56]	; (8016e58 <vPortFree+0xb8>)
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	43db      	mvns	r3, r3
 8016e22:	401a      	ands	r2, r3
 8016e24:	693b      	ldr	r3, [r7, #16]
 8016e26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016e28:	f7fe feb6 	bl	8015b98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016e2c:	693b      	ldr	r3, [r7, #16]
 8016e2e:	685a      	ldr	r2, [r3, #4]
 8016e30:	4b0a      	ldr	r3, [pc, #40]	; (8016e5c <vPortFree+0xbc>)
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	4413      	add	r3, r2
 8016e36:	4a09      	ldr	r2, [pc, #36]	; (8016e5c <vPortFree+0xbc>)
 8016e38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016e3a:	6938      	ldr	r0, [r7, #16]
 8016e3c:	f000 f874 	bl	8016f28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016e40:	4b07      	ldr	r3, [pc, #28]	; (8016e60 <vPortFree+0xc0>)
 8016e42:	681b      	ldr	r3, [r3, #0]
 8016e44:	3301      	adds	r3, #1
 8016e46:	4a06      	ldr	r2, [pc, #24]	; (8016e60 <vPortFree+0xc0>)
 8016e48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8016e4a:	f7fe feb3 	bl	8015bb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016e4e:	bf00      	nop
 8016e50:	3718      	adds	r7, #24
 8016e52:	46bd      	mov	sp, r7
 8016e54:	bd80      	pop	{r7, pc}
 8016e56:	bf00      	nop
 8016e58:	20006fe0 	.word	0x20006fe0
 8016e5c:	20006fd0 	.word	0x20006fd0
 8016e60:	20006fdc 	.word	0x20006fdc

08016e64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016e64:	b480      	push	{r7}
 8016e66:	b085      	sub	sp, #20
 8016e68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016e6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8016e6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016e70:	4b27      	ldr	r3, [pc, #156]	; (8016f10 <prvHeapInit+0xac>)
 8016e72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016e74:	68fb      	ldr	r3, [r7, #12]
 8016e76:	f003 0307 	and.w	r3, r3, #7
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d00c      	beq.n	8016e98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016e7e:	68fb      	ldr	r3, [r7, #12]
 8016e80:	3307      	adds	r3, #7
 8016e82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016e84:	68fb      	ldr	r3, [r7, #12]
 8016e86:	f023 0307 	bic.w	r3, r3, #7
 8016e8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016e8c:	68ba      	ldr	r2, [r7, #8]
 8016e8e:	68fb      	ldr	r3, [r7, #12]
 8016e90:	1ad3      	subs	r3, r2, r3
 8016e92:	4a1f      	ldr	r2, [pc, #124]	; (8016f10 <prvHeapInit+0xac>)
 8016e94:	4413      	add	r3, r2
 8016e96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016e98:	68fb      	ldr	r3, [r7, #12]
 8016e9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016e9c:	4a1d      	ldr	r2, [pc, #116]	; (8016f14 <prvHeapInit+0xb0>)
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016ea2:	4b1c      	ldr	r3, [pc, #112]	; (8016f14 <prvHeapInit+0xb0>)
 8016ea4:	2200      	movs	r2, #0
 8016ea6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	68ba      	ldr	r2, [r7, #8]
 8016eac:	4413      	add	r3, r2
 8016eae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016eb0:	2208      	movs	r2, #8
 8016eb2:	68fb      	ldr	r3, [r7, #12]
 8016eb4:	1a9b      	subs	r3, r3, r2
 8016eb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016eb8:	68fb      	ldr	r3, [r7, #12]
 8016eba:	f023 0307 	bic.w	r3, r3, #7
 8016ebe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016ec0:	68fb      	ldr	r3, [r7, #12]
 8016ec2:	4a15      	ldr	r2, [pc, #84]	; (8016f18 <prvHeapInit+0xb4>)
 8016ec4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016ec6:	4b14      	ldr	r3, [pc, #80]	; (8016f18 <prvHeapInit+0xb4>)
 8016ec8:	681b      	ldr	r3, [r3, #0]
 8016eca:	2200      	movs	r2, #0
 8016ecc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016ece:	4b12      	ldr	r3, [pc, #72]	; (8016f18 <prvHeapInit+0xb4>)
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	2200      	movs	r2, #0
 8016ed4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016eda:	683b      	ldr	r3, [r7, #0]
 8016edc:	68fa      	ldr	r2, [r7, #12]
 8016ede:	1ad2      	subs	r2, r2, r3
 8016ee0:	683b      	ldr	r3, [r7, #0]
 8016ee2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016ee4:	4b0c      	ldr	r3, [pc, #48]	; (8016f18 <prvHeapInit+0xb4>)
 8016ee6:	681a      	ldr	r2, [r3, #0]
 8016ee8:	683b      	ldr	r3, [r7, #0]
 8016eea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016eec:	683b      	ldr	r3, [r7, #0]
 8016eee:	685b      	ldr	r3, [r3, #4]
 8016ef0:	4a0a      	ldr	r2, [pc, #40]	; (8016f1c <prvHeapInit+0xb8>)
 8016ef2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016ef4:	683b      	ldr	r3, [r7, #0]
 8016ef6:	685b      	ldr	r3, [r3, #4]
 8016ef8:	4a09      	ldr	r2, [pc, #36]	; (8016f20 <prvHeapInit+0xbc>)
 8016efa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016efc:	4b09      	ldr	r3, [pc, #36]	; (8016f24 <prvHeapInit+0xc0>)
 8016efe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016f02:	601a      	str	r2, [r3, #0]
}
 8016f04:	bf00      	nop
 8016f06:	3714      	adds	r7, #20
 8016f08:	46bd      	mov	sp, r7
 8016f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f0e:	4770      	bx	lr
 8016f10:	200033c4 	.word	0x200033c4
 8016f14:	20006fc4 	.word	0x20006fc4
 8016f18:	20006fcc 	.word	0x20006fcc
 8016f1c:	20006fd4 	.word	0x20006fd4
 8016f20:	20006fd0 	.word	0x20006fd0
 8016f24:	20006fe0 	.word	0x20006fe0

08016f28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016f28:	b480      	push	{r7}
 8016f2a:	b085      	sub	sp, #20
 8016f2c:	af00      	add	r7, sp, #0
 8016f2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016f30:	4b28      	ldr	r3, [pc, #160]	; (8016fd4 <prvInsertBlockIntoFreeList+0xac>)
 8016f32:	60fb      	str	r3, [r7, #12]
 8016f34:	e002      	b.n	8016f3c <prvInsertBlockIntoFreeList+0x14>
 8016f36:	68fb      	ldr	r3, [r7, #12]
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	60fb      	str	r3, [r7, #12]
 8016f3c:	68fb      	ldr	r3, [r7, #12]
 8016f3e:	681b      	ldr	r3, [r3, #0]
 8016f40:	687a      	ldr	r2, [r7, #4]
 8016f42:	429a      	cmp	r2, r3
 8016f44:	d8f7      	bhi.n	8016f36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016f46:	68fb      	ldr	r3, [r7, #12]
 8016f48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016f4a:	68fb      	ldr	r3, [r7, #12]
 8016f4c:	685b      	ldr	r3, [r3, #4]
 8016f4e:	68ba      	ldr	r2, [r7, #8]
 8016f50:	4413      	add	r3, r2
 8016f52:	687a      	ldr	r2, [r7, #4]
 8016f54:	429a      	cmp	r2, r3
 8016f56:	d108      	bne.n	8016f6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016f58:	68fb      	ldr	r3, [r7, #12]
 8016f5a:	685a      	ldr	r2, [r3, #4]
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	685b      	ldr	r3, [r3, #4]
 8016f60:	441a      	add	r2, r3
 8016f62:	68fb      	ldr	r3, [r7, #12]
 8016f64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	685b      	ldr	r3, [r3, #4]
 8016f72:	68ba      	ldr	r2, [r7, #8]
 8016f74:	441a      	add	r2, r3
 8016f76:	68fb      	ldr	r3, [r7, #12]
 8016f78:	681b      	ldr	r3, [r3, #0]
 8016f7a:	429a      	cmp	r2, r3
 8016f7c:	d118      	bne.n	8016fb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016f7e:	68fb      	ldr	r3, [r7, #12]
 8016f80:	681a      	ldr	r2, [r3, #0]
 8016f82:	4b15      	ldr	r3, [pc, #84]	; (8016fd8 <prvInsertBlockIntoFreeList+0xb0>)
 8016f84:	681b      	ldr	r3, [r3, #0]
 8016f86:	429a      	cmp	r2, r3
 8016f88:	d00d      	beq.n	8016fa6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	685a      	ldr	r2, [r3, #4]
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	685b      	ldr	r3, [r3, #4]
 8016f94:	441a      	add	r2, r3
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016f9a:	68fb      	ldr	r3, [r7, #12]
 8016f9c:	681b      	ldr	r3, [r3, #0]
 8016f9e:	681a      	ldr	r2, [r3, #0]
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	601a      	str	r2, [r3, #0]
 8016fa4:	e008      	b.n	8016fb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016fa6:	4b0c      	ldr	r3, [pc, #48]	; (8016fd8 <prvInsertBlockIntoFreeList+0xb0>)
 8016fa8:	681a      	ldr	r2, [r3, #0]
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	601a      	str	r2, [r3, #0]
 8016fae:	e003      	b.n	8016fb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016fb0:	68fb      	ldr	r3, [r7, #12]
 8016fb2:	681a      	ldr	r2, [r3, #0]
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016fb8:	68fa      	ldr	r2, [r7, #12]
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	429a      	cmp	r2, r3
 8016fbe:	d002      	beq.n	8016fc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016fc0:	68fb      	ldr	r3, [r7, #12]
 8016fc2:	687a      	ldr	r2, [r7, #4]
 8016fc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016fc6:	bf00      	nop
 8016fc8:	3714      	adds	r7, #20
 8016fca:	46bd      	mov	sp, r7
 8016fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fd0:	4770      	bx	lr
 8016fd2:	bf00      	nop
 8016fd4:	20006fc4 	.word	0x20006fc4
 8016fd8:	20006fcc 	.word	0x20006fcc

08016fdc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016fdc:	b580      	push	{r7, lr}
 8016fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016fe0:	2200      	movs	r2, #0
 8016fe2:	4912      	ldr	r1, [pc, #72]	; (801702c <MX_USB_DEVICE_Init+0x50>)
 8016fe4:	4812      	ldr	r0, [pc, #72]	; (8017030 <MX_USB_DEVICE_Init+0x54>)
 8016fe6:	f7f8 fb84 	bl	800f6f2 <USBD_Init>
 8016fea:	4603      	mov	r3, r0
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d001      	beq.n	8016ff4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016ff0:	f7eb f9dc 	bl	80023ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8016ff4:	490f      	ldr	r1, [pc, #60]	; (8017034 <MX_USB_DEVICE_Init+0x58>)
 8016ff6:	480e      	ldr	r0, [pc, #56]	; (8017030 <MX_USB_DEVICE_Init+0x54>)
 8016ff8:	f7f8 fbab 	bl	800f752 <USBD_RegisterClass>
 8016ffc:	4603      	mov	r3, r0
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d001      	beq.n	8017006 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017002:	f7eb f9d3 	bl	80023ac <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8017006:	490c      	ldr	r1, [pc, #48]	; (8017038 <MX_USB_DEVICE_Init+0x5c>)
 8017008:	4809      	ldr	r0, [pc, #36]	; (8017030 <MX_USB_DEVICE_Init+0x54>)
 801700a:	f7f6 fe55 	bl	800dcb8 <USBD_MSC_RegisterStorage>
 801700e:	4603      	mov	r3, r0
 8017010:	2b00      	cmp	r3, #0
 8017012:	d001      	beq.n	8017018 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017014:	f7eb f9ca 	bl	80023ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017018:	4805      	ldr	r0, [pc, #20]	; (8017030 <MX_USB_DEVICE_Init+0x54>)
 801701a:	f7f8 fbd0 	bl	800f7be <USBD_Start>
 801701e:	4603      	mov	r3, r0
 8017020:	2b00      	cmp	r3, #0
 8017022:	d001      	beq.n	8017028 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017024:	f7eb f9c2 	bl	80023ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017028:	bf00      	nop
 801702a:	bd80      	pop	{r7, pc}
 801702c:	200000c0 	.word	0x200000c0
 8017030:	20006fe4 	.word	0x20006fe4
 8017034:	20000014 	.word	0x20000014
 8017038:	20000120 	.word	0x20000120

0801703c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801703c:	b480      	push	{r7}
 801703e:	b083      	sub	sp, #12
 8017040:	af00      	add	r7, sp, #0
 8017042:	4603      	mov	r3, r0
 8017044:	6039      	str	r1, [r7, #0]
 8017046:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017048:	683b      	ldr	r3, [r7, #0]
 801704a:	2212      	movs	r2, #18
 801704c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801704e:	4b03      	ldr	r3, [pc, #12]	; (801705c <USBD_FS_DeviceDescriptor+0x20>)
}
 8017050:	4618      	mov	r0, r3
 8017052:	370c      	adds	r7, #12
 8017054:	46bd      	mov	sp, r7
 8017056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801705a:	4770      	bx	lr
 801705c:	200000e0 	.word	0x200000e0

08017060 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017060:	b480      	push	{r7}
 8017062:	b083      	sub	sp, #12
 8017064:	af00      	add	r7, sp, #0
 8017066:	4603      	mov	r3, r0
 8017068:	6039      	str	r1, [r7, #0]
 801706a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801706c:	683b      	ldr	r3, [r7, #0]
 801706e:	2204      	movs	r2, #4
 8017070:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017072:	4b03      	ldr	r3, [pc, #12]	; (8017080 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017074:	4618      	mov	r0, r3
 8017076:	370c      	adds	r7, #12
 8017078:	46bd      	mov	sp, r7
 801707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801707e:	4770      	bx	lr
 8017080:	20000100 	.word	0x20000100

08017084 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017084:	b580      	push	{r7, lr}
 8017086:	b082      	sub	sp, #8
 8017088:	af00      	add	r7, sp, #0
 801708a:	4603      	mov	r3, r0
 801708c:	6039      	str	r1, [r7, #0]
 801708e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017090:	79fb      	ldrb	r3, [r7, #7]
 8017092:	2b00      	cmp	r3, #0
 8017094:	d105      	bne.n	80170a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017096:	683a      	ldr	r2, [r7, #0]
 8017098:	4907      	ldr	r1, [pc, #28]	; (80170b8 <USBD_FS_ProductStrDescriptor+0x34>)
 801709a:	4808      	ldr	r0, [pc, #32]	; (80170bc <USBD_FS_ProductStrDescriptor+0x38>)
 801709c:	f7f9 fd66 	bl	8010b6c <USBD_GetString>
 80170a0:	e004      	b.n	80170ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80170a2:	683a      	ldr	r2, [r7, #0]
 80170a4:	4904      	ldr	r1, [pc, #16]	; (80170b8 <USBD_FS_ProductStrDescriptor+0x34>)
 80170a6:	4805      	ldr	r0, [pc, #20]	; (80170bc <USBD_FS_ProductStrDescriptor+0x38>)
 80170a8:	f7f9 fd60 	bl	8010b6c <USBD_GetString>
  }
  return USBD_StrDesc;
 80170ac:	4b02      	ldr	r3, [pc, #8]	; (80170b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80170ae:	4618      	mov	r0, r3
 80170b0:	3708      	adds	r7, #8
 80170b2:	46bd      	mov	sp, r7
 80170b4:	bd80      	pop	{r7, pc}
 80170b6:	bf00      	nop
 80170b8:	200072c0 	.word	0x200072c0
 80170bc:	0801d204 	.word	0x0801d204

080170c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80170c0:	b580      	push	{r7, lr}
 80170c2:	b082      	sub	sp, #8
 80170c4:	af00      	add	r7, sp, #0
 80170c6:	4603      	mov	r3, r0
 80170c8:	6039      	str	r1, [r7, #0]
 80170ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80170cc:	683a      	ldr	r2, [r7, #0]
 80170ce:	4904      	ldr	r1, [pc, #16]	; (80170e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80170d0:	4804      	ldr	r0, [pc, #16]	; (80170e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80170d2:	f7f9 fd4b 	bl	8010b6c <USBD_GetString>
  return USBD_StrDesc;
 80170d6:	4b02      	ldr	r3, [pc, #8]	; (80170e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80170d8:	4618      	mov	r0, r3
 80170da:	3708      	adds	r7, #8
 80170dc:	46bd      	mov	sp, r7
 80170de:	bd80      	pop	{r7, pc}
 80170e0:	200072c0 	.word	0x200072c0
 80170e4:	0801d218 	.word	0x0801d218

080170e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80170e8:	b580      	push	{r7, lr}
 80170ea:	b082      	sub	sp, #8
 80170ec:	af00      	add	r7, sp, #0
 80170ee:	4603      	mov	r3, r0
 80170f0:	6039      	str	r1, [r7, #0]
 80170f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80170f4:	683b      	ldr	r3, [r7, #0]
 80170f6:	221a      	movs	r2, #26
 80170f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80170fa:	f000 f855 	bl	80171a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80170fe:	4b02      	ldr	r3, [pc, #8]	; (8017108 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8017100:	4618      	mov	r0, r3
 8017102:	3708      	adds	r7, #8
 8017104:	46bd      	mov	sp, r7
 8017106:	bd80      	pop	{r7, pc}
 8017108:	20000104 	.word	0x20000104

0801710c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801710c:	b580      	push	{r7, lr}
 801710e:	b082      	sub	sp, #8
 8017110:	af00      	add	r7, sp, #0
 8017112:	4603      	mov	r3, r0
 8017114:	6039      	str	r1, [r7, #0]
 8017116:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017118:	79fb      	ldrb	r3, [r7, #7]
 801711a:	2b00      	cmp	r3, #0
 801711c:	d105      	bne.n	801712a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801711e:	683a      	ldr	r2, [r7, #0]
 8017120:	4907      	ldr	r1, [pc, #28]	; (8017140 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017122:	4808      	ldr	r0, [pc, #32]	; (8017144 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017124:	f7f9 fd22 	bl	8010b6c <USBD_GetString>
 8017128:	e004      	b.n	8017134 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801712a:	683a      	ldr	r2, [r7, #0]
 801712c:	4904      	ldr	r1, [pc, #16]	; (8017140 <USBD_FS_ConfigStrDescriptor+0x34>)
 801712e:	4805      	ldr	r0, [pc, #20]	; (8017144 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017130:	f7f9 fd1c 	bl	8010b6c <USBD_GetString>
  }
  return USBD_StrDesc;
 8017134:	4b02      	ldr	r3, [pc, #8]	; (8017140 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8017136:	4618      	mov	r0, r3
 8017138:	3708      	adds	r7, #8
 801713a:	46bd      	mov	sp, r7
 801713c:	bd80      	pop	{r7, pc}
 801713e:	bf00      	nop
 8017140:	200072c0 	.word	0x200072c0
 8017144:	0801d22c 	.word	0x0801d22c

08017148 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017148:	b580      	push	{r7, lr}
 801714a:	b082      	sub	sp, #8
 801714c:	af00      	add	r7, sp, #0
 801714e:	4603      	mov	r3, r0
 8017150:	6039      	str	r1, [r7, #0]
 8017152:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017154:	79fb      	ldrb	r3, [r7, #7]
 8017156:	2b00      	cmp	r3, #0
 8017158:	d105      	bne.n	8017166 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801715a:	683a      	ldr	r2, [r7, #0]
 801715c:	4907      	ldr	r1, [pc, #28]	; (801717c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801715e:	4808      	ldr	r0, [pc, #32]	; (8017180 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017160:	f7f9 fd04 	bl	8010b6c <USBD_GetString>
 8017164:	e004      	b.n	8017170 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017166:	683a      	ldr	r2, [r7, #0]
 8017168:	4904      	ldr	r1, [pc, #16]	; (801717c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801716a:	4805      	ldr	r0, [pc, #20]	; (8017180 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801716c:	f7f9 fcfe 	bl	8010b6c <USBD_GetString>
  }
  return USBD_StrDesc;
 8017170:	4b02      	ldr	r3, [pc, #8]	; (801717c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8017172:	4618      	mov	r0, r3
 8017174:	3708      	adds	r7, #8
 8017176:	46bd      	mov	sp, r7
 8017178:	bd80      	pop	{r7, pc}
 801717a:	bf00      	nop
 801717c:	200072c0 	.word	0x200072c0
 8017180:	0801d238 	.word	0x0801d238

08017184 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017184:	b480      	push	{r7}
 8017186:	b083      	sub	sp, #12
 8017188:	af00      	add	r7, sp, #0
 801718a:	4603      	mov	r3, r0
 801718c:	6039      	str	r1, [r7, #0]
 801718e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8017190:	683b      	ldr	r3, [r7, #0]
 8017192:	220c      	movs	r2, #12
 8017194:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8017196:	4b03      	ldr	r3, [pc, #12]	; (80171a4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8017198:	4618      	mov	r0, r3
 801719a:	370c      	adds	r7, #12
 801719c:	46bd      	mov	sp, r7
 801719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171a2:	4770      	bx	lr
 80171a4:	200000f4 	.word	0x200000f4

080171a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80171a8:	b580      	push	{r7, lr}
 80171aa:	b084      	sub	sp, #16
 80171ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80171ae:	4b0f      	ldr	r3, [pc, #60]	; (80171ec <Get_SerialNum+0x44>)
 80171b0:	681b      	ldr	r3, [r3, #0]
 80171b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80171b4:	4b0e      	ldr	r3, [pc, #56]	; (80171f0 <Get_SerialNum+0x48>)
 80171b6:	681b      	ldr	r3, [r3, #0]
 80171b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80171ba:	4b0e      	ldr	r3, [pc, #56]	; (80171f4 <Get_SerialNum+0x4c>)
 80171bc:	681b      	ldr	r3, [r3, #0]
 80171be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80171c0:	68fa      	ldr	r2, [r7, #12]
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	4413      	add	r3, r2
 80171c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80171c8:	68fb      	ldr	r3, [r7, #12]
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d009      	beq.n	80171e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80171ce:	2208      	movs	r2, #8
 80171d0:	4909      	ldr	r1, [pc, #36]	; (80171f8 <Get_SerialNum+0x50>)
 80171d2:	68f8      	ldr	r0, [r7, #12]
 80171d4:	f000 f814 	bl	8017200 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80171d8:	2204      	movs	r2, #4
 80171da:	4908      	ldr	r1, [pc, #32]	; (80171fc <Get_SerialNum+0x54>)
 80171dc:	68b8      	ldr	r0, [r7, #8]
 80171de:	f000 f80f 	bl	8017200 <IntToUnicode>
  }
}
 80171e2:	bf00      	nop
 80171e4:	3710      	adds	r7, #16
 80171e6:	46bd      	mov	sp, r7
 80171e8:	bd80      	pop	{r7, pc}
 80171ea:	bf00      	nop
 80171ec:	1fff7a10 	.word	0x1fff7a10
 80171f0:	1fff7a14 	.word	0x1fff7a14
 80171f4:	1fff7a18 	.word	0x1fff7a18
 80171f8:	20000106 	.word	0x20000106
 80171fc:	20000116 	.word	0x20000116

08017200 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017200:	b480      	push	{r7}
 8017202:	b087      	sub	sp, #28
 8017204:	af00      	add	r7, sp, #0
 8017206:	60f8      	str	r0, [r7, #12]
 8017208:	60b9      	str	r1, [r7, #8]
 801720a:	4613      	mov	r3, r2
 801720c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801720e:	2300      	movs	r3, #0
 8017210:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017212:	2300      	movs	r3, #0
 8017214:	75fb      	strb	r3, [r7, #23]
 8017216:	e027      	b.n	8017268 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	0f1b      	lsrs	r3, r3, #28
 801721c:	2b09      	cmp	r3, #9
 801721e:	d80b      	bhi.n	8017238 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017220:	68fb      	ldr	r3, [r7, #12]
 8017222:	0f1b      	lsrs	r3, r3, #28
 8017224:	b2da      	uxtb	r2, r3
 8017226:	7dfb      	ldrb	r3, [r7, #23]
 8017228:	005b      	lsls	r3, r3, #1
 801722a:	4619      	mov	r1, r3
 801722c:	68bb      	ldr	r3, [r7, #8]
 801722e:	440b      	add	r3, r1
 8017230:	3230      	adds	r2, #48	; 0x30
 8017232:	b2d2      	uxtb	r2, r2
 8017234:	701a      	strb	r2, [r3, #0]
 8017236:	e00a      	b.n	801724e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	0f1b      	lsrs	r3, r3, #28
 801723c:	b2da      	uxtb	r2, r3
 801723e:	7dfb      	ldrb	r3, [r7, #23]
 8017240:	005b      	lsls	r3, r3, #1
 8017242:	4619      	mov	r1, r3
 8017244:	68bb      	ldr	r3, [r7, #8]
 8017246:	440b      	add	r3, r1
 8017248:	3237      	adds	r2, #55	; 0x37
 801724a:	b2d2      	uxtb	r2, r2
 801724c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801724e:	68fb      	ldr	r3, [r7, #12]
 8017250:	011b      	lsls	r3, r3, #4
 8017252:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017254:	7dfb      	ldrb	r3, [r7, #23]
 8017256:	005b      	lsls	r3, r3, #1
 8017258:	3301      	adds	r3, #1
 801725a:	68ba      	ldr	r2, [r7, #8]
 801725c:	4413      	add	r3, r2
 801725e:	2200      	movs	r2, #0
 8017260:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017262:	7dfb      	ldrb	r3, [r7, #23]
 8017264:	3301      	adds	r3, #1
 8017266:	75fb      	strb	r3, [r7, #23]
 8017268:	7dfa      	ldrb	r2, [r7, #23]
 801726a:	79fb      	ldrb	r3, [r7, #7]
 801726c:	429a      	cmp	r2, r3
 801726e:	d3d3      	bcc.n	8017218 <IntToUnicode+0x18>
  }
}
 8017270:	bf00      	nop
 8017272:	bf00      	nop
 8017274:	371c      	adds	r7, #28
 8017276:	46bd      	mov	sp, r7
 8017278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801727c:	4770      	bx	lr

0801727e <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801727e:	b480      	push	{r7}
 8017280:	b083      	sub	sp, #12
 8017282:	af00      	add	r7, sp, #0
 8017284:	4603      	mov	r3, r0
 8017286:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
	UNUSED(lun);

	return (USBD_OK);
 8017288:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801728a:	4618      	mov	r0, r3
 801728c:	370c      	adds	r7, #12
 801728e:	46bd      	mov	sp, r7
 8017290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017294:	4770      	bx	lr
	...

08017298 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8017298:	b580      	push	{r7, lr}
 801729a:	b08e      	sub	sp, #56	; 0x38
 801729c:	af00      	add	r7, sp, #0
 801729e:	4603      	mov	r3, r0
 80172a0:	60b9      	str	r1, [r7, #8]
 80172a2:	607a      	str	r2, [r7, #4]
 80172a4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	HAL_SD_CardInfoTypeDef info;
	int8_t ret = -1;
 80172a6:	23ff      	movs	r3, #255	; 0xff
 80172a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	HAL_SD_GetCardInfo(&hsd, &info);
 80172ac:	f107 0314 	add.w	r3, r7, #20
 80172b0:	4619      	mov	r1, r3
 80172b2:	480a      	ldr	r0, [pc, #40]	; (80172dc <STORAGE_GetCapacity_FS+0x44>)
 80172b4:	f7f2 fac6 	bl	8009844 <HAL_SD_GetCardInfo>

	*block_num = info.LogBlockNbr - 1;
 80172b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172ba:	1e5a      	subs	r2, r3, #1
 80172bc:	68bb      	ldr	r3, [r7, #8]
 80172be:	601a      	str	r2, [r3, #0]
	*block_size = info.LogBlockSize;
 80172c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172c2:	b29a      	uxth	r2, r3
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	801a      	strh	r2, [r3, #0]
	ret = 0;
 80172c8:	2300      	movs	r3, #0
 80172ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	return ret;
 80172ce:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 80172d2:	4618      	mov	r0, r3
 80172d4:	3738      	adds	r7, #56	; 0x38
 80172d6:	46bd      	mov	sp, r7
 80172d8:	bd80      	pop	{r7, pc}
 80172da:	bf00      	nop
 80172dc:	20002874 	.word	0x20002874

080172e0 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80172e0:	b480      	push	{r7}
 80172e2:	b083      	sub	sp, #12
 80172e4:	af00      	add	r7, sp, #0
 80172e6:	4603      	mov	r3, r0
 80172e8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
	UNUSED(lun);

	return (USBD_OK);
 80172ea:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80172ec:	4618      	mov	r0, r3
 80172ee:	370c      	adds	r7, #12
 80172f0:	46bd      	mov	sp, r7
 80172f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172f6:	4770      	bx	lr

080172f8 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80172f8:	b480      	push	{r7}
 80172fa:	b083      	sub	sp, #12
 80172fc:	af00      	add	r7, sp, #0
 80172fe:	4603      	mov	r3, r0
 8017300:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
	UNUSED(lun);

	return (USBD_OK);
 8017302:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017304:	4618      	mov	r0, r3
 8017306:	370c      	adds	r7, #12
 8017308:	46bd      	mov	sp, r7
 801730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801730e:	4770      	bx	lr

08017310 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8017310:	b580      	push	{r7, lr}
 8017312:	b088      	sub	sp, #32
 8017314:	af02      	add	r7, sp, #8
 8017316:	60b9      	str	r1, [r7, #8]
 8017318:	607a      	str	r2, [r7, #4]
 801731a:	461a      	mov	r2, r3
 801731c:	4603      	mov	r3, r0
 801731e:	73fb      	strb	r3, [r7, #15]
 8017320:	4613      	mov	r3, r2
 8017322:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	int8_t ret = -1;
 8017324:	23ff      	movs	r3, #255	; 0xff
 8017326:	75fb      	strb	r3, [r7, #23]

	HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8017328:	89bb      	ldrh	r3, [r7, #12]
 801732a:	f04f 32ff 	mov.w	r2, #4294967295
 801732e:	9200      	str	r2, [sp, #0]
 8017330:	687a      	ldr	r2, [r7, #4]
 8017332:	68b9      	ldr	r1, [r7, #8]
 8017334:	4808      	ldr	r0, [pc, #32]	; (8017358 <STORAGE_Read_FS+0x48>)
 8017336:	f7f1 fa3b 	bl	80087b0 <HAL_SD_ReadBlocks>

	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER)
 801733a:	bf00      	nop
 801733c:	4806      	ldr	r0, [pc, #24]	; (8017358 <STORAGE_Read_FS+0x48>)
 801733e:	f7f2 faad 	bl	800989c <HAL_SD_GetCardState>
 8017342:	4603      	mov	r3, r0
 8017344:	2b04      	cmp	r3, #4
 8017346:	d1f9      	bne.n	801733c <STORAGE_Read_FS+0x2c>
	{
	}
	ret = 0;
 8017348:	2300      	movs	r3, #0
 801734a:	75fb      	strb	r3, [r7, #23]
	return ret;
 801734c:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 8017350:	4618      	mov	r0, r3
 8017352:	3718      	adds	r7, #24
 8017354:	46bd      	mov	sp, r7
 8017356:	bd80      	pop	{r7, pc}
 8017358:	20002874 	.word	0x20002874

0801735c <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801735c:	b580      	push	{r7, lr}
 801735e:	b088      	sub	sp, #32
 8017360:	af02      	add	r7, sp, #8
 8017362:	60b9      	str	r1, [r7, #8]
 8017364:	607a      	str	r2, [r7, #4]
 8017366:	461a      	mov	r2, r3
 8017368:	4603      	mov	r3, r0
 801736a:	73fb      	strb	r3, [r7, #15]
 801736c:	4613      	mov	r3, r2
 801736e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t ret = -1;
 8017370:	23ff      	movs	r3, #255	; 0xff
 8017372:	75fb      	strb	r3, [r7, #23]

	HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8017374:	89bb      	ldrh	r3, [r7, #12]
 8017376:	f04f 32ff 	mov.w	r2, #4294967295
 801737a:	9200      	str	r2, [sp, #0]
 801737c:	687a      	ldr	r2, [r7, #4]
 801737e:	68b9      	ldr	r1, [r7, #8]
 8017380:	4808      	ldr	r0, [pc, #32]	; (80173a4 <STORAGE_Write_FS+0x48>)
 8017382:	f7f1 fbf3 	bl	8008b6c <HAL_SD_WriteBlocks>

	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER)
 8017386:	bf00      	nop
 8017388:	4806      	ldr	r0, [pc, #24]	; (80173a4 <STORAGE_Write_FS+0x48>)
 801738a:	f7f2 fa87 	bl	800989c <HAL_SD_GetCardState>
 801738e:	4603      	mov	r3, r0
 8017390:	2b04      	cmp	r3, #4
 8017392:	d1f9      	bne.n	8017388 <STORAGE_Write_FS+0x2c>
	{
	}
	ret = 0;
 8017394:	2300      	movs	r3, #0
 8017396:	75fb      	strb	r3, [r7, #23]
	return ret;
 8017398:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801739c:	4618      	mov	r0, r3
 801739e:	3718      	adds	r7, #24
 80173a0:	46bd      	mov	sp, r7
 80173a2:	bd80      	pop	{r7, pc}
 80173a4:	20002874 	.word	0x20002874

080173a8 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 80173a8:	b480      	push	{r7}
 80173aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
	return (STORAGE_LUN_NBR - 1);
 80173ac:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80173ae:	4618      	mov	r0, r3
 80173b0:	46bd      	mov	sp, r7
 80173b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173b6:	4770      	bx	lr

080173b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80173b8:	b580      	push	{r7, lr}
 80173ba:	b0a0      	sub	sp, #128	; 0x80
 80173bc:	af00      	add	r7, sp, #0
 80173be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80173c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80173c4:	2200      	movs	r2, #0
 80173c6:	601a      	str	r2, [r3, #0]
 80173c8:	605a      	str	r2, [r3, #4]
 80173ca:	609a      	str	r2, [r3, #8]
 80173cc:	60da      	str	r2, [r3, #12]
 80173ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80173d0:	f107 0310 	add.w	r3, r7, #16
 80173d4:	225c      	movs	r2, #92	; 0x5c
 80173d6:	2100      	movs	r1, #0
 80173d8:	4618      	mov	r0, r3
 80173da:	f001 fd19 	bl	8018e10 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	681b      	ldr	r3, [r3, #0]
 80173e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80173e6:	d149      	bne.n	801747c <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80173e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80173ec:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80173ee:	2300      	movs	r3, #0
 80173f0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80173f2:	f107 0310 	add.w	r3, r7, #16
 80173f6:	4618      	mov	r0, r3
 80173f8:	f7f0 f934 	bl	8007664 <HAL_RCCEx_PeriphCLKConfig>
 80173fc:	4603      	mov	r3, r0
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d001      	beq.n	8017406 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8017402:	f7ea ffd3 	bl	80023ac <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017406:	2300      	movs	r3, #0
 8017408:	60fb      	str	r3, [r7, #12]
 801740a:	4b1e      	ldr	r3, [pc, #120]	; (8017484 <HAL_PCD_MspInit+0xcc>)
 801740c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801740e:	4a1d      	ldr	r2, [pc, #116]	; (8017484 <HAL_PCD_MspInit+0xcc>)
 8017410:	f043 0301 	orr.w	r3, r3, #1
 8017414:	6313      	str	r3, [r2, #48]	; 0x30
 8017416:	4b1b      	ldr	r3, [pc, #108]	; (8017484 <HAL_PCD_MspInit+0xcc>)
 8017418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801741a:	f003 0301 	and.w	r3, r3, #1
 801741e:	60fb      	str	r3, [r7, #12]
 8017420:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8017422:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8017426:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017428:	2302      	movs	r3, #2
 801742a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801742c:	2300      	movs	r3, #0
 801742e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017430:	2303      	movs	r3, #3
 8017432:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8017434:	230a      	movs	r3, #10
 8017436:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017438:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801743c:	4619      	mov	r1, r3
 801743e:	4812      	ldr	r0, [pc, #72]	; (8017488 <HAL_PCD_MspInit+0xd0>)
 8017440:	f7ed fdbc 	bl	8004fbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017444:	4b0f      	ldr	r3, [pc, #60]	; (8017484 <HAL_PCD_MspInit+0xcc>)
 8017446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017448:	4a0e      	ldr	r2, [pc, #56]	; (8017484 <HAL_PCD_MspInit+0xcc>)
 801744a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801744e:	6353      	str	r3, [r2, #52]	; 0x34
 8017450:	2300      	movs	r3, #0
 8017452:	60bb      	str	r3, [r7, #8]
 8017454:	4b0b      	ldr	r3, [pc, #44]	; (8017484 <HAL_PCD_MspInit+0xcc>)
 8017456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017458:	4a0a      	ldr	r2, [pc, #40]	; (8017484 <HAL_PCD_MspInit+0xcc>)
 801745a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801745e:	6453      	str	r3, [r2, #68]	; 0x44
 8017460:	4b08      	ldr	r3, [pc, #32]	; (8017484 <HAL_PCD_MspInit+0xcc>)
 8017462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017464:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017468:	60bb      	str	r3, [r7, #8]
 801746a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801746c:	2200      	movs	r2, #0
 801746e:	2105      	movs	r1, #5
 8017470:	2043      	movs	r0, #67	; 0x43
 8017472:	f7ed f96b 	bl	800474c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017476:	2043      	movs	r0, #67	; 0x43
 8017478:	f7ed f984 	bl	8004784 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801747c:	bf00      	nop
 801747e:	3780      	adds	r7, #128	; 0x80
 8017480:	46bd      	mov	sp, r7
 8017482:	bd80      	pop	{r7, pc}
 8017484:	40023800 	.word	0x40023800
 8017488:	40020000 	.word	0x40020000

0801748c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801748c:	b580      	push	{r7, lr}
 801748e:	b082      	sub	sp, #8
 8017490:	af00      	add	r7, sp, #0
 8017492:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80174a0:	4619      	mov	r1, r3
 80174a2:	4610      	mov	r0, r2
 80174a4:	f7f8 f9d8 	bl	800f858 <USBD_LL_SetupStage>
}
 80174a8:	bf00      	nop
 80174aa:	3708      	adds	r7, #8
 80174ac:	46bd      	mov	sp, r7
 80174ae:	bd80      	pop	{r7, pc}

080174b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80174b0:	b580      	push	{r7, lr}
 80174b2:	b082      	sub	sp, #8
 80174b4:	af00      	add	r7, sp, #0
 80174b6:	6078      	str	r0, [r7, #4]
 80174b8:	460b      	mov	r3, r1
 80174ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80174c2:	78fa      	ldrb	r2, [r7, #3]
 80174c4:	6879      	ldr	r1, [r7, #4]
 80174c6:	4613      	mov	r3, r2
 80174c8:	00db      	lsls	r3, r3, #3
 80174ca:	4413      	add	r3, r2
 80174cc:	009b      	lsls	r3, r3, #2
 80174ce:	440b      	add	r3, r1
 80174d0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80174d4:	681a      	ldr	r2, [r3, #0]
 80174d6:	78fb      	ldrb	r3, [r7, #3]
 80174d8:	4619      	mov	r1, r3
 80174da:	f7f8 fa12 	bl	800f902 <USBD_LL_DataOutStage>
}
 80174de:	bf00      	nop
 80174e0:	3708      	adds	r7, #8
 80174e2:	46bd      	mov	sp, r7
 80174e4:	bd80      	pop	{r7, pc}

080174e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80174e6:	b580      	push	{r7, lr}
 80174e8:	b082      	sub	sp, #8
 80174ea:	af00      	add	r7, sp, #0
 80174ec:	6078      	str	r0, [r7, #4]
 80174ee:	460b      	mov	r3, r1
 80174f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80174f8:	78fa      	ldrb	r2, [r7, #3]
 80174fa:	6879      	ldr	r1, [r7, #4]
 80174fc:	4613      	mov	r3, r2
 80174fe:	00db      	lsls	r3, r3, #3
 8017500:	4413      	add	r3, r2
 8017502:	009b      	lsls	r3, r3, #2
 8017504:	440b      	add	r3, r1
 8017506:	334c      	adds	r3, #76	; 0x4c
 8017508:	681a      	ldr	r2, [r3, #0]
 801750a:	78fb      	ldrb	r3, [r7, #3]
 801750c:	4619      	mov	r1, r3
 801750e:	f7f8 faab 	bl	800fa68 <USBD_LL_DataInStage>
}
 8017512:	bf00      	nop
 8017514:	3708      	adds	r7, #8
 8017516:	46bd      	mov	sp, r7
 8017518:	bd80      	pop	{r7, pc}

0801751a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801751a:	b580      	push	{r7, lr}
 801751c:	b082      	sub	sp, #8
 801751e:	af00      	add	r7, sp, #0
 8017520:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017528:	4618      	mov	r0, r3
 801752a:	f7f8 fbdf 	bl	800fcec <USBD_LL_SOF>
}
 801752e:	bf00      	nop
 8017530:	3708      	adds	r7, #8
 8017532:	46bd      	mov	sp, r7
 8017534:	bd80      	pop	{r7, pc}

08017536 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017536:	b580      	push	{r7, lr}
 8017538:	b084      	sub	sp, #16
 801753a:	af00      	add	r7, sp, #0
 801753c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801753e:	2301      	movs	r3, #1
 8017540:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	68db      	ldr	r3, [r3, #12]
 8017546:	2b00      	cmp	r3, #0
 8017548:	d102      	bne.n	8017550 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801754a:	2300      	movs	r3, #0
 801754c:	73fb      	strb	r3, [r7, #15]
 801754e:	e008      	b.n	8017562 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	68db      	ldr	r3, [r3, #12]
 8017554:	2b02      	cmp	r3, #2
 8017556:	d102      	bne.n	801755e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017558:	2301      	movs	r3, #1
 801755a:	73fb      	strb	r3, [r7, #15]
 801755c:	e001      	b.n	8017562 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801755e:	f7ea ff25 	bl	80023ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017568:	7bfa      	ldrb	r2, [r7, #15]
 801756a:	4611      	mov	r1, r2
 801756c:	4618      	mov	r0, r3
 801756e:	f7f8 fb7f 	bl	800fc70 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017578:	4618      	mov	r0, r3
 801757a:	f7f8 fb27 	bl	800fbcc <USBD_LL_Reset>
}
 801757e:	bf00      	nop
 8017580:	3710      	adds	r7, #16
 8017582:	46bd      	mov	sp, r7
 8017584:	bd80      	pop	{r7, pc}
	...

08017588 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017588:	b580      	push	{r7, lr}
 801758a:	b082      	sub	sp, #8
 801758c:	af00      	add	r7, sp, #0
 801758e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017596:	4618      	mov	r0, r3
 8017598:	f7f8 fb7a 	bl	800fc90 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	681b      	ldr	r3, [r3, #0]
 80175a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80175a4:	681b      	ldr	r3, [r3, #0]
 80175a6:	687a      	ldr	r2, [r7, #4]
 80175a8:	6812      	ldr	r2, [r2, #0]
 80175aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80175ae:	f043 0301 	orr.w	r3, r3, #1
 80175b2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
	if (hpcd->Init.low_power_enable)
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	6a1b      	ldr	r3, [r3, #32]
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d005      	beq.n	80175c8 <HAL_PCD_SuspendCallback+0x40>
	{
		/* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
		SCB->SCR |= (uint32_t) ((uint32_t) (SCB_SCR_SLEEPDEEP_Msk
 80175bc:	4b04      	ldr	r3, [pc, #16]	; (80175d0 <HAL_PCD_SuspendCallback+0x48>)
 80175be:	691b      	ldr	r3, [r3, #16]
 80175c0:	4a03      	ldr	r2, [pc, #12]	; (80175d0 <HAL_PCD_SuspendCallback+0x48>)
 80175c2:	f043 0306 	orr.w	r3, r3, #6
 80175c6:	6113      	str	r3, [r2, #16]
				| SCB_SCR_SLEEPONEXIT_Msk));
	}
  /* USER CODE END 2 */
}
 80175c8:	bf00      	nop
 80175ca:	3708      	adds	r7, #8
 80175cc:	46bd      	mov	sp, r7
 80175ce:	bd80      	pop	{r7, pc}
 80175d0:	e000ed00 	.word	0xe000ed00

080175d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80175d4:	b580      	push	{r7, lr}
 80175d6:	b082      	sub	sp, #8
 80175d8:	af00      	add	r7, sp, #0
 80175da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80175e2:	4618      	mov	r0, r3
 80175e4:	f7f8 fb6a 	bl	800fcbc <USBD_LL_Resume>
}
 80175e8:	bf00      	nop
 80175ea:	3708      	adds	r7, #8
 80175ec:	46bd      	mov	sp, r7
 80175ee:	bd80      	pop	{r7, pc}

080175f0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80175f0:	b580      	push	{r7, lr}
 80175f2:	b082      	sub	sp, #8
 80175f4:	af00      	add	r7, sp, #0
 80175f6:	6078      	str	r0, [r7, #4]
 80175f8:	460b      	mov	r3, r1
 80175fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017602:	78fa      	ldrb	r2, [r7, #3]
 8017604:	4611      	mov	r1, r2
 8017606:	4618      	mov	r0, r3
 8017608:	f7f8 fbc2 	bl	800fd90 <USBD_LL_IsoOUTIncomplete>
}
 801760c:	bf00      	nop
 801760e:	3708      	adds	r7, #8
 8017610:	46bd      	mov	sp, r7
 8017612:	bd80      	pop	{r7, pc}

08017614 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017614:	b580      	push	{r7, lr}
 8017616:	b082      	sub	sp, #8
 8017618:	af00      	add	r7, sp, #0
 801761a:	6078      	str	r0, [r7, #4]
 801761c:	460b      	mov	r3, r1
 801761e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017626:	78fa      	ldrb	r2, [r7, #3]
 8017628:	4611      	mov	r1, r2
 801762a:	4618      	mov	r0, r3
 801762c:	f7f8 fb7e 	bl	800fd2c <USBD_LL_IsoINIncomplete>
}
 8017630:	bf00      	nop
 8017632:	3708      	adds	r7, #8
 8017634:	46bd      	mov	sp, r7
 8017636:	bd80      	pop	{r7, pc}

08017638 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017638:	b580      	push	{r7, lr}
 801763a:	b082      	sub	sp, #8
 801763c:	af00      	add	r7, sp, #0
 801763e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017646:	4618      	mov	r0, r3
 8017648:	f7f8 fbd4 	bl	800fdf4 <USBD_LL_DevConnected>
}
 801764c:	bf00      	nop
 801764e:	3708      	adds	r7, #8
 8017650:	46bd      	mov	sp, r7
 8017652:	bd80      	pop	{r7, pc}

08017654 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017654:	b580      	push	{r7, lr}
 8017656:	b082      	sub	sp, #8
 8017658:	af00      	add	r7, sp, #0
 801765a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017662:	4618      	mov	r0, r3
 8017664:	f7f8 fbd1 	bl	800fe0a <USBD_LL_DevDisconnected>
}
 8017668:	bf00      	nop
 801766a:	3708      	adds	r7, #8
 801766c:	46bd      	mov	sp, r7
 801766e:	bd80      	pop	{r7, pc}

08017670 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017670:	b580      	push	{r7, lr}
 8017672:	b082      	sub	sp, #8
 8017674:	af00      	add	r7, sp, #0
 8017676:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	781b      	ldrb	r3, [r3, #0]
 801767c:	2b00      	cmp	r3, #0
 801767e:	d13c      	bne.n	80176fa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8017680:	4a20      	ldr	r2, [pc, #128]	; (8017704 <USBD_LL_Init+0x94>)
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	4a1e      	ldr	r2, [pc, #120]	; (8017704 <USBD_LL_Init+0x94>)
 801768c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017690:	4b1c      	ldr	r3, [pc, #112]	; (8017704 <USBD_LL_Init+0x94>)
 8017692:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8017696:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8017698:	4b1a      	ldr	r3, [pc, #104]	; (8017704 <USBD_LL_Init+0x94>)
 801769a:	2206      	movs	r2, #6
 801769c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801769e:	4b19      	ldr	r3, [pc, #100]	; (8017704 <USBD_LL_Init+0x94>)
 80176a0:	2202      	movs	r2, #2
 80176a2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80176a4:	4b17      	ldr	r3, [pc, #92]	; (8017704 <USBD_LL_Init+0x94>)
 80176a6:	2200      	movs	r2, #0
 80176a8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80176aa:	4b16      	ldr	r3, [pc, #88]	; (8017704 <USBD_LL_Init+0x94>)
 80176ac:	2202      	movs	r2, #2
 80176ae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80176b0:	4b14      	ldr	r3, [pc, #80]	; (8017704 <USBD_LL_Init+0x94>)
 80176b2:	2200      	movs	r2, #0
 80176b4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80176b6:	4b13      	ldr	r3, [pc, #76]	; (8017704 <USBD_LL_Init+0x94>)
 80176b8:	2200      	movs	r2, #0
 80176ba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80176bc:	4b11      	ldr	r3, [pc, #68]	; (8017704 <USBD_LL_Init+0x94>)
 80176be:	2200      	movs	r2, #0
 80176c0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80176c2:	4b10      	ldr	r3, [pc, #64]	; (8017704 <USBD_LL_Init+0x94>)
 80176c4:	2200      	movs	r2, #0
 80176c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80176c8:	4b0e      	ldr	r3, [pc, #56]	; (8017704 <USBD_LL_Init+0x94>)
 80176ca:	2200      	movs	r2, #0
 80176cc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80176ce:	480d      	ldr	r0, [pc, #52]	; (8017704 <USBD_LL_Init+0x94>)
 80176d0:	f7ee fb99 	bl	8005e06 <HAL_PCD_Init>
 80176d4:	4603      	mov	r3, r0
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	d001      	beq.n	80176de <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80176da:	f7ea fe67 	bl	80023ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80176de:	2180      	movs	r1, #128	; 0x80
 80176e0:	4808      	ldr	r0, [pc, #32]	; (8017704 <USBD_LL_Init+0x94>)
 80176e2:	f7ef fe52 	bl	800738a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80176e6:	2240      	movs	r2, #64	; 0x40
 80176e8:	2100      	movs	r1, #0
 80176ea:	4806      	ldr	r0, [pc, #24]	; (8017704 <USBD_LL_Init+0x94>)
 80176ec:	f7ef fe06 	bl	80072fc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80176f0:	2280      	movs	r2, #128	; 0x80
 80176f2:	2101      	movs	r1, #1
 80176f4:	4803      	ldr	r0, [pc, #12]	; (8017704 <USBD_LL_Init+0x94>)
 80176f6:	f7ef fe01 	bl	80072fc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80176fa:	2300      	movs	r3, #0
}
 80176fc:	4618      	mov	r0, r3
 80176fe:	3708      	adds	r7, #8
 8017700:	46bd      	mov	sp, r7
 8017702:	bd80      	pop	{r7, pc}
 8017704:	200074c0 	.word	0x200074c0

08017708 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017708:	b580      	push	{r7, lr}
 801770a:	b084      	sub	sp, #16
 801770c:	af00      	add	r7, sp, #0
 801770e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017710:	2300      	movs	r3, #0
 8017712:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017714:	2300      	movs	r3, #0
 8017716:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801771e:	4618      	mov	r0, r3
 8017720:	f7ee fc95 	bl	800604e <HAL_PCD_Start>
 8017724:	4603      	mov	r3, r0
 8017726:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017728:	7bfb      	ldrb	r3, [r7, #15]
 801772a:	4618      	mov	r0, r3
 801772c:	f000 f9b0 	bl	8017a90 <USBD_Get_USB_Status>
 8017730:	4603      	mov	r3, r0
 8017732:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017734:	7bbb      	ldrb	r3, [r7, #14]
}
 8017736:	4618      	mov	r0, r3
 8017738:	3710      	adds	r7, #16
 801773a:	46bd      	mov	sp, r7
 801773c:	bd80      	pop	{r7, pc}

0801773e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801773e:	b580      	push	{r7, lr}
 8017740:	b084      	sub	sp, #16
 8017742:	af00      	add	r7, sp, #0
 8017744:	6078      	str	r0, [r7, #4]
 8017746:	4608      	mov	r0, r1
 8017748:	4611      	mov	r1, r2
 801774a:	461a      	mov	r2, r3
 801774c:	4603      	mov	r3, r0
 801774e:	70fb      	strb	r3, [r7, #3]
 8017750:	460b      	mov	r3, r1
 8017752:	70bb      	strb	r3, [r7, #2]
 8017754:	4613      	mov	r3, r2
 8017756:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017758:	2300      	movs	r3, #0
 801775a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801775c:	2300      	movs	r3, #0
 801775e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017766:	78bb      	ldrb	r3, [r7, #2]
 8017768:	883a      	ldrh	r2, [r7, #0]
 801776a:	78f9      	ldrb	r1, [r7, #3]
 801776c:	f7ef f993 	bl	8006a96 <HAL_PCD_EP_Open>
 8017770:	4603      	mov	r3, r0
 8017772:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017774:	7bfb      	ldrb	r3, [r7, #15]
 8017776:	4618      	mov	r0, r3
 8017778:	f000 f98a 	bl	8017a90 <USBD_Get_USB_Status>
 801777c:	4603      	mov	r3, r0
 801777e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017780:	7bbb      	ldrb	r3, [r7, #14]
}
 8017782:	4618      	mov	r0, r3
 8017784:	3710      	adds	r7, #16
 8017786:	46bd      	mov	sp, r7
 8017788:	bd80      	pop	{r7, pc}

0801778a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801778a:	b580      	push	{r7, lr}
 801778c:	b084      	sub	sp, #16
 801778e:	af00      	add	r7, sp, #0
 8017790:	6078      	str	r0, [r7, #4]
 8017792:	460b      	mov	r3, r1
 8017794:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017796:	2300      	movs	r3, #0
 8017798:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801779a:	2300      	movs	r3, #0
 801779c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80177a4:	78fa      	ldrb	r2, [r7, #3]
 80177a6:	4611      	mov	r1, r2
 80177a8:	4618      	mov	r0, r3
 80177aa:	f7ef f9dc 	bl	8006b66 <HAL_PCD_EP_Close>
 80177ae:	4603      	mov	r3, r0
 80177b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80177b2:	7bfb      	ldrb	r3, [r7, #15]
 80177b4:	4618      	mov	r0, r3
 80177b6:	f000 f96b 	bl	8017a90 <USBD_Get_USB_Status>
 80177ba:	4603      	mov	r3, r0
 80177bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80177be:	7bbb      	ldrb	r3, [r7, #14]
}
 80177c0:	4618      	mov	r0, r3
 80177c2:	3710      	adds	r7, #16
 80177c4:	46bd      	mov	sp, r7
 80177c6:	bd80      	pop	{r7, pc}

080177c8 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80177c8:	b580      	push	{r7, lr}
 80177ca:	b084      	sub	sp, #16
 80177cc:	af00      	add	r7, sp, #0
 80177ce:	6078      	str	r0, [r7, #4]
 80177d0:	460b      	mov	r3, r1
 80177d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80177d4:	2300      	movs	r3, #0
 80177d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80177d8:	2300      	movs	r3, #0
 80177da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80177e2:	78fa      	ldrb	r2, [r7, #3]
 80177e4:	4611      	mov	r1, r2
 80177e6:	4618      	mov	r0, r3
 80177e8:	f7ef fb9f 	bl	8006f2a <HAL_PCD_EP_Flush>
 80177ec:	4603      	mov	r3, r0
 80177ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80177f0:	7bfb      	ldrb	r3, [r7, #15]
 80177f2:	4618      	mov	r0, r3
 80177f4:	f000 f94c 	bl	8017a90 <USBD_Get_USB_Status>
 80177f8:	4603      	mov	r3, r0
 80177fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80177fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80177fe:	4618      	mov	r0, r3
 8017800:	3710      	adds	r7, #16
 8017802:	46bd      	mov	sp, r7
 8017804:	bd80      	pop	{r7, pc}

08017806 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017806:	b580      	push	{r7, lr}
 8017808:	b084      	sub	sp, #16
 801780a:	af00      	add	r7, sp, #0
 801780c:	6078      	str	r0, [r7, #4]
 801780e:	460b      	mov	r3, r1
 8017810:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017812:	2300      	movs	r3, #0
 8017814:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017816:	2300      	movs	r3, #0
 8017818:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017820:	78fa      	ldrb	r2, [r7, #3]
 8017822:	4611      	mov	r1, r2
 8017824:	4618      	mov	r0, r3
 8017826:	f7ef fa95 	bl	8006d54 <HAL_PCD_EP_SetStall>
 801782a:	4603      	mov	r3, r0
 801782c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801782e:	7bfb      	ldrb	r3, [r7, #15]
 8017830:	4618      	mov	r0, r3
 8017832:	f000 f92d 	bl	8017a90 <USBD_Get_USB_Status>
 8017836:	4603      	mov	r3, r0
 8017838:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801783a:	7bbb      	ldrb	r3, [r7, #14]
}
 801783c:	4618      	mov	r0, r3
 801783e:	3710      	adds	r7, #16
 8017840:	46bd      	mov	sp, r7
 8017842:	bd80      	pop	{r7, pc}

08017844 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017844:	b580      	push	{r7, lr}
 8017846:	b084      	sub	sp, #16
 8017848:	af00      	add	r7, sp, #0
 801784a:	6078      	str	r0, [r7, #4]
 801784c:	460b      	mov	r3, r1
 801784e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017850:	2300      	movs	r3, #0
 8017852:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017854:	2300      	movs	r3, #0
 8017856:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801785e:	78fa      	ldrb	r2, [r7, #3]
 8017860:	4611      	mov	r1, r2
 8017862:	4618      	mov	r0, r3
 8017864:	f7ef fada 	bl	8006e1c <HAL_PCD_EP_ClrStall>
 8017868:	4603      	mov	r3, r0
 801786a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801786c:	7bfb      	ldrb	r3, [r7, #15]
 801786e:	4618      	mov	r0, r3
 8017870:	f000 f90e 	bl	8017a90 <USBD_Get_USB_Status>
 8017874:	4603      	mov	r3, r0
 8017876:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017878:	7bbb      	ldrb	r3, [r7, #14]
}
 801787a:	4618      	mov	r0, r3
 801787c:	3710      	adds	r7, #16
 801787e:	46bd      	mov	sp, r7
 8017880:	bd80      	pop	{r7, pc}

08017882 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017882:	b480      	push	{r7}
 8017884:	b085      	sub	sp, #20
 8017886:	af00      	add	r7, sp, #0
 8017888:	6078      	str	r0, [r7, #4]
 801788a:	460b      	mov	r3, r1
 801788c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017894:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017896:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801789a:	2b00      	cmp	r3, #0
 801789c:	da0b      	bge.n	80178b6 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801789e:	78fb      	ldrb	r3, [r7, #3]
 80178a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80178a4:	68f9      	ldr	r1, [r7, #12]
 80178a6:	4613      	mov	r3, r2
 80178a8:	00db      	lsls	r3, r3, #3
 80178aa:	4413      	add	r3, r2
 80178ac:	009b      	lsls	r3, r3, #2
 80178ae:	440b      	add	r3, r1
 80178b0:	333e      	adds	r3, #62	; 0x3e
 80178b2:	781b      	ldrb	r3, [r3, #0]
 80178b4:	e00b      	b.n	80178ce <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80178b6:	78fb      	ldrb	r3, [r7, #3]
 80178b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80178bc:	68f9      	ldr	r1, [r7, #12]
 80178be:	4613      	mov	r3, r2
 80178c0:	00db      	lsls	r3, r3, #3
 80178c2:	4413      	add	r3, r2
 80178c4:	009b      	lsls	r3, r3, #2
 80178c6:	440b      	add	r3, r1
 80178c8:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80178cc:	781b      	ldrb	r3, [r3, #0]
  }
}
 80178ce:	4618      	mov	r0, r3
 80178d0:	3714      	adds	r7, #20
 80178d2:	46bd      	mov	sp, r7
 80178d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178d8:	4770      	bx	lr

080178da <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80178da:	b580      	push	{r7, lr}
 80178dc:	b084      	sub	sp, #16
 80178de:	af00      	add	r7, sp, #0
 80178e0:	6078      	str	r0, [r7, #4]
 80178e2:	460b      	mov	r3, r1
 80178e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80178e6:	2300      	movs	r3, #0
 80178e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80178ea:	2300      	movs	r3, #0
 80178ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80178f4:	78fa      	ldrb	r2, [r7, #3]
 80178f6:	4611      	mov	r1, r2
 80178f8:	4618      	mov	r0, r3
 80178fa:	f7ef f8a7 	bl	8006a4c <HAL_PCD_SetAddress>
 80178fe:	4603      	mov	r3, r0
 8017900:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017902:	7bfb      	ldrb	r3, [r7, #15]
 8017904:	4618      	mov	r0, r3
 8017906:	f000 f8c3 	bl	8017a90 <USBD_Get_USB_Status>
 801790a:	4603      	mov	r3, r0
 801790c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801790e:	7bbb      	ldrb	r3, [r7, #14]
}
 8017910:	4618      	mov	r0, r3
 8017912:	3710      	adds	r7, #16
 8017914:	46bd      	mov	sp, r7
 8017916:	bd80      	pop	{r7, pc}

08017918 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017918:	b580      	push	{r7, lr}
 801791a:	b086      	sub	sp, #24
 801791c:	af00      	add	r7, sp, #0
 801791e:	60f8      	str	r0, [r7, #12]
 8017920:	607a      	str	r2, [r7, #4]
 8017922:	603b      	str	r3, [r7, #0]
 8017924:	460b      	mov	r3, r1
 8017926:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017928:	2300      	movs	r3, #0
 801792a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801792c:	2300      	movs	r3, #0
 801792e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017930:	68fb      	ldr	r3, [r7, #12]
 8017932:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017936:	7af9      	ldrb	r1, [r7, #11]
 8017938:	683b      	ldr	r3, [r7, #0]
 801793a:	687a      	ldr	r2, [r7, #4]
 801793c:	f7ef f9c0 	bl	8006cc0 <HAL_PCD_EP_Transmit>
 8017940:	4603      	mov	r3, r0
 8017942:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017944:	7dfb      	ldrb	r3, [r7, #23]
 8017946:	4618      	mov	r0, r3
 8017948:	f000 f8a2 	bl	8017a90 <USBD_Get_USB_Status>
 801794c:	4603      	mov	r3, r0
 801794e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017950:	7dbb      	ldrb	r3, [r7, #22]
}
 8017952:	4618      	mov	r0, r3
 8017954:	3718      	adds	r7, #24
 8017956:	46bd      	mov	sp, r7
 8017958:	bd80      	pop	{r7, pc}

0801795a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801795a:	b580      	push	{r7, lr}
 801795c:	b086      	sub	sp, #24
 801795e:	af00      	add	r7, sp, #0
 8017960:	60f8      	str	r0, [r7, #12]
 8017962:	607a      	str	r2, [r7, #4]
 8017964:	603b      	str	r3, [r7, #0]
 8017966:	460b      	mov	r3, r1
 8017968:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801796a:	2300      	movs	r3, #0
 801796c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801796e:	2300      	movs	r3, #0
 8017970:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017972:	68fb      	ldr	r3, [r7, #12]
 8017974:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017978:	7af9      	ldrb	r1, [r7, #11]
 801797a:	683b      	ldr	r3, [r7, #0]
 801797c:	687a      	ldr	r2, [r7, #4]
 801797e:	f7ef f93c 	bl	8006bfa <HAL_PCD_EP_Receive>
 8017982:	4603      	mov	r3, r0
 8017984:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017986:	7dfb      	ldrb	r3, [r7, #23]
 8017988:	4618      	mov	r0, r3
 801798a:	f000 f881 	bl	8017a90 <USBD_Get_USB_Status>
 801798e:	4603      	mov	r3, r0
 8017990:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017992:	7dbb      	ldrb	r3, [r7, #22]
}
 8017994:	4618      	mov	r0, r3
 8017996:	3718      	adds	r7, #24
 8017998:	46bd      	mov	sp, r7
 801799a:	bd80      	pop	{r7, pc}

0801799c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801799c:	b580      	push	{r7, lr}
 801799e:	b082      	sub	sp, #8
 80179a0:	af00      	add	r7, sp, #0
 80179a2:	6078      	str	r0, [r7, #4]
 80179a4:	460b      	mov	r3, r1
 80179a6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80179ae:	78fa      	ldrb	r2, [r7, #3]
 80179b0:	4611      	mov	r1, r2
 80179b2:	4618      	mov	r0, r3
 80179b4:	f7ef f96c 	bl	8006c90 <HAL_PCD_EP_GetRxCount>
 80179b8:	4603      	mov	r3, r0
}
 80179ba:	4618      	mov	r0, r3
 80179bc:	3708      	adds	r7, #8
 80179be:	46bd      	mov	sp, r7
 80179c0:	bd80      	pop	{r7, pc}
	...

080179c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80179c4:	b580      	push	{r7, lr}
 80179c6:	b082      	sub	sp, #8
 80179c8:	af00      	add	r7, sp, #0
 80179ca:	6078      	str	r0, [r7, #4]
 80179cc:	460b      	mov	r3, r1
 80179ce:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80179d0:	78fb      	ldrb	r3, [r7, #3]
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d002      	beq.n	80179dc <HAL_PCDEx_LPM_Callback+0x18>
 80179d6:	2b01      	cmp	r3, #1
 80179d8:	d01f      	beq.n	8017a1a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80179da:	e03b      	b.n	8017a54 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	6a1b      	ldr	r3, [r3, #32]
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d007      	beq.n	80179f4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 80179e4:	f7ea fc64 	bl	80022b0 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80179e8:	4b1c      	ldr	r3, [pc, #112]	; (8017a5c <HAL_PCDEx_LPM_Callback+0x98>)
 80179ea:	691b      	ldr	r3, [r3, #16]
 80179ec:	4a1b      	ldr	r2, [pc, #108]	; (8017a5c <HAL_PCDEx_LPM_Callback+0x98>)
 80179ee:	f023 0306 	bic.w	r3, r3, #6
 80179f2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	681b      	ldr	r3, [r3, #0]
 80179f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80179fc:	681b      	ldr	r3, [r3, #0]
 80179fe:	687a      	ldr	r2, [r7, #4]
 8017a00:	6812      	ldr	r2, [r2, #0]
 8017a02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017a06:	f023 0301 	bic.w	r3, r3, #1
 8017a0a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017a12:	4618      	mov	r0, r3
 8017a14:	f7f8 f952 	bl	800fcbc <USBD_LL_Resume>
    break;
 8017a18:	e01c      	b.n	8017a54 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017a22:	681b      	ldr	r3, [r3, #0]
 8017a24:	687a      	ldr	r2, [r7, #4]
 8017a26:	6812      	ldr	r2, [r2, #0]
 8017a28:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017a2c:	f043 0301 	orr.w	r3, r3, #1
 8017a30:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017a38:	4618      	mov	r0, r3
 8017a3a:	f7f8 f929 	bl	800fc90 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	6a1b      	ldr	r3, [r3, #32]
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	d005      	beq.n	8017a52 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017a46:	4b05      	ldr	r3, [pc, #20]	; (8017a5c <HAL_PCDEx_LPM_Callback+0x98>)
 8017a48:	691b      	ldr	r3, [r3, #16]
 8017a4a:	4a04      	ldr	r2, [pc, #16]	; (8017a5c <HAL_PCDEx_LPM_Callback+0x98>)
 8017a4c:	f043 0306 	orr.w	r3, r3, #6
 8017a50:	6113      	str	r3, [r2, #16]
    break;
 8017a52:	bf00      	nop
}
 8017a54:	bf00      	nop
 8017a56:	3708      	adds	r7, #8
 8017a58:	46bd      	mov	sp, r7
 8017a5a:	bd80      	pop	{r7, pc}
 8017a5c:	e000ed00 	.word	0xe000ed00

08017a60 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017a60:	b480      	push	{r7}
 8017a62:	b083      	sub	sp, #12
 8017a64:	af00      	add	r7, sp, #0
 8017a66:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017a68:	4b03      	ldr	r3, [pc, #12]	; (8017a78 <USBD_static_malloc+0x18>)
}
 8017a6a:	4618      	mov	r0, r3
 8017a6c:	370c      	adds	r7, #12
 8017a6e:	46bd      	mov	sp, r7
 8017a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a74:	4770      	bx	lr
 8017a76:	bf00      	nop
 8017a78:	200079cc 	.word	0x200079cc

08017a7c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017a7c:	b480      	push	{r7}
 8017a7e:	b083      	sub	sp, #12
 8017a80:	af00      	add	r7, sp, #0
 8017a82:	6078      	str	r0, [r7, #4]

}
 8017a84:	bf00      	nop
 8017a86:	370c      	adds	r7, #12
 8017a88:	46bd      	mov	sp, r7
 8017a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a8e:	4770      	bx	lr

08017a90 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017a90:	b480      	push	{r7}
 8017a92:	b085      	sub	sp, #20
 8017a94:	af00      	add	r7, sp, #0
 8017a96:	4603      	mov	r3, r0
 8017a98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017a9a:	2300      	movs	r3, #0
 8017a9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017a9e:	79fb      	ldrb	r3, [r7, #7]
 8017aa0:	2b03      	cmp	r3, #3
 8017aa2:	d817      	bhi.n	8017ad4 <USBD_Get_USB_Status+0x44>
 8017aa4:	a201      	add	r2, pc, #4	; (adr r2, 8017aac <USBD_Get_USB_Status+0x1c>)
 8017aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017aaa:	bf00      	nop
 8017aac:	08017abd 	.word	0x08017abd
 8017ab0:	08017ac3 	.word	0x08017ac3
 8017ab4:	08017ac9 	.word	0x08017ac9
 8017ab8:	08017acf 	.word	0x08017acf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017abc:	2300      	movs	r3, #0
 8017abe:	73fb      	strb	r3, [r7, #15]
    break;
 8017ac0:	e00b      	b.n	8017ada <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017ac2:	2303      	movs	r3, #3
 8017ac4:	73fb      	strb	r3, [r7, #15]
    break;
 8017ac6:	e008      	b.n	8017ada <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017ac8:	2301      	movs	r3, #1
 8017aca:	73fb      	strb	r3, [r7, #15]
    break;
 8017acc:	e005      	b.n	8017ada <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017ace:	2303      	movs	r3, #3
 8017ad0:	73fb      	strb	r3, [r7, #15]
    break;
 8017ad2:	e002      	b.n	8017ada <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017ad4:	2303      	movs	r3, #3
 8017ad6:	73fb      	strb	r3, [r7, #15]
    break;
 8017ad8:	bf00      	nop
  }
  return usb_status;
 8017ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8017adc:	4618      	mov	r0, r3
 8017ade:	3714      	adds	r7, #20
 8017ae0:	46bd      	mov	sp, r7
 8017ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ae6:	4770      	bx	lr

08017ae8 <calloc>:
 8017ae8:	4b02      	ldr	r3, [pc, #8]	; (8017af4 <calloc+0xc>)
 8017aea:	460a      	mov	r2, r1
 8017aec:	4601      	mov	r1, r0
 8017aee:	6818      	ldr	r0, [r3, #0]
 8017af0:	f000 b802 	b.w	8017af8 <_calloc_r>
 8017af4:	20000198 	.word	0x20000198

08017af8 <_calloc_r>:
 8017af8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017afa:	fba1 2402 	umull	r2, r4, r1, r2
 8017afe:	b94c      	cbnz	r4, 8017b14 <_calloc_r+0x1c>
 8017b00:	4611      	mov	r1, r2
 8017b02:	9201      	str	r2, [sp, #4]
 8017b04:	f000 f83e 	bl	8017b84 <_malloc_r>
 8017b08:	9a01      	ldr	r2, [sp, #4]
 8017b0a:	4605      	mov	r5, r0
 8017b0c:	b930      	cbnz	r0, 8017b1c <_calloc_r+0x24>
 8017b0e:	4628      	mov	r0, r5
 8017b10:	b003      	add	sp, #12
 8017b12:	bd30      	pop	{r4, r5, pc}
 8017b14:	220c      	movs	r2, #12
 8017b16:	6002      	str	r2, [r0, #0]
 8017b18:	2500      	movs	r5, #0
 8017b1a:	e7f8      	b.n	8017b0e <_calloc_r+0x16>
 8017b1c:	4621      	mov	r1, r4
 8017b1e:	f001 f977 	bl	8018e10 <memset>
 8017b22:	e7f4      	b.n	8017b0e <_calloc_r+0x16>

08017b24 <malloc>:
 8017b24:	4b02      	ldr	r3, [pc, #8]	; (8017b30 <malloc+0xc>)
 8017b26:	4601      	mov	r1, r0
 8017b28:	6818      	ldr	r0, [r3, #0]
 8017b2a:	f000 b82b 	b.w	8017b84 <_malloc_r>
 8017b2e:	bf00      	nop
 8017b30:	20000198 	.word	0x20000198

08017b34 <free>:
 8017b34:	4b02      	ldr	r3, [pc, #8]	; (8017b40 <free+0xc>)
 8017b36:	4601      	mov	r1, r0
 8017b38:	6818      	ldr	r0, [r3, #0]
 8017b3a:	f002 b8eb 	b.w	8019d14 <_free_r>
 8017b3e:	bf00      	nop
 8017b40:	20000198 	.word	0x20000198

08017b44 <sbrk_aligned>:
 8017b44:	b570      	push	{r4, r5, r6, lr}
 8017b46:	4e0e      	ldr	r6, [pc, #56]	; (8017b80 <sbrk_aligned+0x3c>)
 8017b48:	460c      	mov	r4, r1
 8017b4a:	6831      	ldr	r1, [r6, #0]
 8017b4c:	4605      	mov	r5, r0
 8017b4e:	b911      	cbnz	r1, 8017b56 <sbrk_aligned+0x12>
 8017b50:	f001 fa04 	bl	8018f5c <_sbrk_r>
 8017b54:	6030      	str	r0, [r6, #0]
 8017b56:	4621      	mov	r1, r4
 8017b58:	4628      	mov	r0, r5
 8017b5a:	f001 f9ff 	bl	8018f5c <_sbrk_r>
 8017b5e:	1c43      	adds	r3, r0, #1
 8017b60:	d00a      	beq.n	8017b78 <sbrk_aligned+0x34>
 8017b62:	1cc4      	adds	r4, r0, #3
 8017b64:	f024 0403 	bic.w	r4, r4, #3
 8017b68:	42a0      	cmp	r0, r4
 8017b6a:	d007      	beq.n	8017b7c <sbrk_aligned+0x38>
 8017b6c:	1a21      	subs	r1, r4, r0
 8017b6e:	4628      	mov	r0, r5
 8017b70:	f001 f9f4 	bl	8018f5c <_sbrk_r>
 8017b74:	3001      	adds	r0, #1
 8017b76:	d101      	bne.n	8017b7c <sbrk_aligned+0x38>
 8017b78:	f04f 34ff 	mov.w	r4, #4294967295
 8017b7c:	4620      	mov	r0, r4
 8017b7e:	bd70      	pop	{r4, r5, r6, pc}
 8017b80:	20007c48 	.word	0x20007c48

08017b84 <_malloc_r>:
 8017b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017b88:	1ccd      	adds	r5, r1, #3
 8017b8a:	f025 0503 	bic.w	r5, r5, #3
 8017b8e:	3508      	adds	r5, #8
 8017b90:	2d0c      	cmp	r5, #12
 8017b92:	bf38      	it	cc
 8017b94:	250c      	movcc	r5, #12
 8017b96:	2d00      	cmp	r5, #0
 8017b98:	4607      	mov	r7, r0
 8017b9a:	db01      	blt.n	8017ba0 <_malloc_r+0x1c>
 8017b9c:	42a9      	cmp	r1, r5
 8017b9e:	d905      	bls.n	8017bac <_malloc_r+0x28>
 8017ba0:	230c      	movs	r3, #12
 8017ba2:	603b      	str	r3, [r7, #0]
 8017ba4:	2600      	movs	r6, #0
 8017ba6:	4630      	mov	r0, r6
 8017ba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017bac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017c80 <_malloc_r+0xfc>
 8017bb0:	f000 f868 	bl	8017c84 <__malloc_lock>
 8017bb4:	f8d8 3000 	ldr.w	r3, [r8]
 8017bb8:	461c      	mov	r4, r3
 8017bba:	bb5c      	cbnz	r4, 8017c14 <_malloc_r+0x90>
 8017bbc:	4629      	mov	r1, r5
 8017bbe:	4638      	mov	r0, r7
 8017bc0:	f7ff ffc0 	bl	8017b44 <sbrk_aligned>
 8017bc4:	1c43      	adds	r3, r0, #1
 8017bc6:	4604      	mov	r4, r0
 8017bc8:	d155      	bne.n	8017c76 <_malloc_r+0xf2>
 8017bca:	f8d8 4000 	ldr.w	r4, [r8]
 8017bce:	4626      	mov	r6, r4
 8017bd0:	2e00      	cmp	r6, #0
 8017bd2:	d145      	bne.n	8017c60 <_malloc_r+0xdc>
 8017bd4:	2c00      	cmp	r4, #0
 8017bd6:	d048      	beq.n	8017c6a <_malloc_r+0xe6>
 8017bd8:	6823      	ldr	r3, [r4, #0]
 8017bda:	4631      	mov	r1, r6
 8017bdc:	4638      	mov	r0, r7
 8017bde:	eb04 0903 	add.w	r9, r4, r3
 8017be2:	f001 f9bb 	bl	8018f5c <_sbrk_r>
 8017be6:	4581      	cmp	r9, r0
 8017be8:	d13f      	bne.n	8017c6a <_malloc_r+0xe6>
 8017bea:	6821      	ldr	r1, [r4, #0]
 8017bec:	1a6d      	subs	r5, r5, r1
 8017bee:	4629      	mov	r1, r5
 8017bf0:	4638      	mov	r0, r7
 8017bf2:	f7ff ffa7 	bl	8017b44 <sbrk_aligned>
 8017bf6:	3001      	adds	r0, #1
 8017bf8:	d037      	beq.n	8017c6a <_malloc_r+0xe6>
 8017bfa:	6823      	ldr	r3, [r4, #0]
 8017bfc:	442b      	add	r3, r5
 8017bfe:	6023      	str	r3, [r4, #0]
 8017c00:	f8d8 3000 	ldr.w	r3, [r8]
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	d038      	beq.n	8017c7a <_malloc_r+0xf6>
 8017c08:	685a      	ldr	r2, [r3, #4]
 8017c0a:	42a2      	cmp	r2, r4
 8017c0c:	d12b      	bne.n	8017c66 <_malloc_r+0xe2>
 8017c0e:	2200      	movs	r2, #0
 8017c10:	605a      	str	r2, [r3, #4]
 8017c12:	e00f      	b.n	8017c34 <_malloc_r+0xb0>
 8017c14:	6822      	ldr	r2, [r4, #0]
 8017c16:	1b52      	subs	r2, r2, r5
 8017c18:	d41f      	bmi.n	8017c5a <_malloc_r+0xd6>
 8017c1a:	2a0b      	cmp	r2, #11
 8017c1c:	d917      	bls.n	8017c4e <_malloc_r+0xca>
 8017c1e:	1961      	adds	r1, r4, r5
 8017c20:	42a3      	cmp	r3, r4
 8017c22:	6025      	str	r5, [r4, #0]
 8017c24:	bf18      	it	ne
 8017c26:	6059      	strne	r1, [r3, #4]
 8017c28:	6863      	ldr	r3, [r4, #4]
 8017c2a:	bf08      	it	eq
 8017c2c:	f8c8 1000 	streq.w	r1, [r8]
 8017c30:	5162      	str	r2, [r4, r5]
 8017c32:	604b      	str	r3, [r1, #4]
 8017c34:	4638      	mov	r0, r7
 8017c36:	f104 060b 	add.w	r6, r4, #11
 8017c3a:	f000 f829 	bl	8017c90 <__malloc_unlock>
 8017c3e:	f026 0607 	bic.w	r6, r6, #7
 8017c42:	1d23      	adds	r3, r4, #4
 8017c44:	1af2      	subs	r2, r6, r3
 8017c46:	d0ae      	beq.n	8017ba6 <_malloc_r+0x22>
 8017c48:	1b9b      	subs	r3, r3, r6
 8017c4a:	50a3      	str	r3, [r4, r2]
 8017c4c:	e7ab      	b.n	8017ba6 <_malloc_r+0x22>
 8017c4e:	42a3      	cmp	r3, r4
 8017c50:	6862      	ldr	r2, [r4, #4]
 8017c52:	d1dd      	bne.n	8017c10 <_malloc_r+0x8c>
 8017c54:	f8c8 2000 	str.w	r2, [r8]
 8017c58:	e7ec      	b.n	8017c34 <_malloc_r+0xb0>
 8017c5a:	4623      	mov	r3, r4
 8017c5c:	6864      	ldr	r4, [r4, #4]
 8017c5e:	e7ac      	b.n	8017bba <_malloc_r+0x36>
 8017c60:	4634      	mov	r4, r6
 8017c62:	6876      	ldr	r6, [r6, #4]
 8017c64:	e7b4      	b.n	8017bd0 <_malloc_r+0x4c>
 8017c66:	4613      	mov	r3, r2
 8017c68:	e7cc      	b.n	8017c04 <_malloc_r+0x80>
 8017c6a:	230c      	movs	r3, #12
 8017c6c:	603b      	str	r3, [r7, #0]
 8017c6e:	4638      	mov	r0, r7
 8017c70:	f000 f80e 	bl	8017c90 <__malloc_unlock>
 8017c74:	e797      	b.n	8017ba6 <_malloc_r+0x22>
 8017c76:	6025      	str	r5, [r4, #0]
 8017c78:	e7dc      	b.n	8017c34 <_malloc_r+0xb0>
 8017c7a:	605b      	str	r3, [r3, #4]
 8017c7c:	deff      	udf	#255	; 0xff
 8017c7e:	bf00      	nop
 8017c80:	20007c44 	.word	0x20007c44

08017c84 <__malloc_lock>:
 8017c84:	4801      	ldr	r0, [pc, #4]	; (8017c8c <__malloc_lock+0x8>)
 8017c86:	f001 b9b5 	b.w	8018ff4 <__retarget_lock_acquire_recursive>
 8017c8a:	bf00      	nop
 8017c8c:	20007d8c 	.word	0x20007d8c

08017c90 <__malloc_unlock>:
 8017c90:	4801      	ldr	r0, [pc, #4]	; (8017c98 <__malloc_unlock+0x8>)
 8017c92:	f001 b9b0 	b.w	8018ff6 <__retarget_lock_release_recursive>
 8017c96:	bf00      	nop
 8017c98:	20007d8c 	.word	0x20007d8c

08017c9c <__cvt>:
 8017c9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017ca0:	ec55 4b10 	vmov	r4, r5, d0
 8017ca4:	2d00      	cmp	r5, #0
 8017ca6:	460e      	mov	r6, r1
 8017ca8:	4619      	mov	r1, r3
 8017caa:	462b      	mov	r3, r5
 8017cac:	bfbb      	ittet	lt
 8017cae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8017cb2:	461d      	movlt	r5, r3
 8017cb4:	2300      	movge	r3, #0
 8017cb6:	232d      	movlt	r3, #45	; 0x2d
 8017cb8:	700b      	strb	r3, [r1, #0]
 8017cba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017cbc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8017cc0:	4691      	mov	r9, r2
 8017cc2:	f023 0820 	bic.w	r8, r3, #32
 8017cc6:	bfbc      	itt	lt
 8017cc8:	4622      	movlt	r2, r4
 8017cca:	4614      	movlt	r4, r2
 8017ccc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8017cd0:	d005      	beq.n	8017cde <__cvt+0x42>
 8017cd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8017cd6:	d100      	bne.n	8017cda <__cvt+0x3e>
 8017cd8:	3601      	adds	r6, #1
 8017cda:	2102      	movs	r1, #2
 8017cdc:	e000      	b.n	8017ce0 <__cvt+0x44>
 8017cde:	2103      	movs	r1, #3
 8017ce0:	ab03      	add	r3, sp, #12
 8017ce2:	9301      	str	r3, [sp, #4]
 8017ce4:	ab02      	add	r3, sp, #8
 8017ce6:	9300      	str	r3, [sp, #0]
 8017ce8:	ec45 4b10 	vmov	d0, r4, r5
 8017cec:	4653      	mov	r3, sl
 8017cee:	4632      	mov	r2, r6
 8017cf0:	f001 fa1e 	bl	8019130 <_dtoa_r>
 8017cf4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8017cf8:	4607      	mov	r7, r0
 8017cfa:	d102      	bne.n	8017d02 <__cvt+0x66>
 8017cfc:	f019 0f01 	tst.w	r9, #1
 8017d00:	d022      	beq.n	8017d48 <__cvt+0xac>
 8017d02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8017d06:	eb07 0906 	add.w	r9, r7, r6
 8017d0a:	d110      	bne.n	8017d2e <__cvt+0x92>
 8017d0c:	783b      	ldrb	r3, [r7, #0]
 8017d0e:	2b30      	cmp	r3, #48	; 0x30
 8017d10:	d10a      	bne.n	8017d28 <__cvt+0x8c>
 8017d12:	2200      	movs	r2, #0
 8017d14:	2300      	movs	r3, #0
 8017d16:	4620      	mov	r0, r4
 8017d18:	4629      	mov	r1, r5
 8017d1a:	f7e8 ff05 	bl	8000b28 <__aeabi_dcmpeq>
 8017d1e:	b918      	cbnz	r0, 8017d28 <__cvt+0x8c>
 8017d20:	f1c6 0601 	rsb	r6, r6, #1
 8017d24:	f8ca 6000 	str.w	r6, [sl]
 8017d28:	f8da 3000 	ldr.w	r3, [sl]
 8017d2c:	4499      	add	r9, r3
 8017d2e:	2200      	movs	r2, #0
 8017d30:	2300      	movs	r3, #0
 8017d32:	4620      	mov	r0, r4
 8017d34:	4629      	mov	r1, r5
 8017d36:	f7e8 fef7 	bl	8000b28 <__aeabi_dcmpeq>
 8017d3a:	b108      	cbz	r0, 8017d40 <__cvt+0xa4>
 8017d3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8017d40:	2230      	movs	r2, #48	; 0x30
 8017d42:	9b03      	ldr	r3, [sp, #12]
 8017d44:	454b      	cmp	r3, r9
 8017d46:	d307      	bcc.n	8017d58 <__cvt+0xbc>
 8017d48:	9b03      	ldr	r3, [sp, #12]
 8017d4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017d4c:	1bdb      	subs	r3, r3, r7
 8017d4e:	4638      	mov	r0, r7
 8017d50:	6013      	str	r3, [r2, #0]
 8017d52:	b004      	add	sp, #16
 8017d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d58:	1c59      	adds	r1, r3, #1
 8017d5a:	9103      	str	r1, [sp, #12]
 8017d5c:	701a      	strb	r2, [r3, #0]
 8017d5e:	e7f0      	b.n	8017d42 <__cvt+0xa6>

08017d60 <__exponent>:
 8017d60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017d62:	4603      	mov	r3, r0
 8017d64:	2900      	cmp	r1, #0
 8017d66:	bfb8      	it	lt
 8017d68:	4249      	neglt	r1, r1
 8017d6a:	f803 2b02 	strb.w	r2, [r3], #2
 8017d6e:	bfb4      	ite	lt
 8017d70:	222d      	movlt	r2, #45	; 0x2d
 8017d72:	222b      	movge	r2, #43	; 0x2b
 8017d74:	2909      	cmp	r1, #9
 8017d76:	7042      	strb	r2, [r0, #1]
 8017d78:	dd2a      	ble.n	8017dd0 <__exponent+0x70>
 8017d7a:	f10d 0207 	add.w	r2, sp, #7
 8017d7e:	4617      	mov	r7, r2
 8017d80:	260a      	movs	r6, #10
 8017d82:	4694      	mov	ip, r2
 8017d84:	fb91 f5f6 	sdiv	r5, r1, r6
 8017d88:	fb06 1415 	mls	r4, r6, r5, r1
 8017d8c:	3430      	adds	r4, #48	; 0x30
 8017d8e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8017d92:	460c      	mov	r4, r1
 8017d94:	2c63      	cmp	r4, #99	; 0x63
 8017d96:	f102 32ff 	add.w	r2, r2, #4294967295
 8017d9a:	4629      	mov	r1, r5
 8017d9c:	dcf1      	bgt.n	8017d82 <__exponent+0x22>
 8017d9e:	3130      	adds	r1, #48	; 0x30
 8017da0:	f1ac 0402 	sub.w	r4, ip, #2
 8017da4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8017da8:	1c41      	adds	r1, r0, #1
 8017daa:	4622      	mov	r2, r4
 8017dac:	42ba      	cmp	r2, r7
 8017dae:	d30a      	bcc.n	8017dc6 <__exponent+0x66>
 8017db0:	f10d 0209 	add.w	r2, sp, #9
 8017db4:	eba2 020c 	sub.w	r2, r2, ip
 8017db8:	42bc      	cmp	r4, r7
 8017dba:	bf88      	it	hi
 8017dbc:	2200      	movhi	r2, #0
 8017dbe:	4413      	add	r3, r2
 8017dc0:	1a18      	subs	r0, r3, r0
 8017dc2:	b003      	add	sp, #12
 8017dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017dc6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8017dca:	f801 5f01 	strb.w	r5, [r1, #1]!
 8017dce:	e7ed      	b.n	8017dac <__exponent+0x4c>
 8017dd0:	2330      	movs	r3, #48	; 0x30
 8017dd2:	3130      	adds	r1, #48	; 0x30
 8017dd4:	7083      	strb	r3, [r0, #2]
 8017dd6:	70c1      	strb	r1, [r0, #3]
 8017dd8:	1d03      	adds	r3, r0, #4
 8017dda:	e7f1      	b.n	8017dc0 <__exponent+0x60>

08017ddc <_printf_float>:
 8017ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017de0:	ed2d 8b02 	vpush	{d8}
 8017de4:	b08d      	sub	sp, #52	; 0x34
 8017de6:	460c      	mov	r4, r1
 8017de8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8017dec:	4616      	mov	r6, r2
 8017dee:	461f      	mov	r7, r3
 8017df0:	4605      	mov	r5, r0
 8017df2:	f001 f825 	bl	8018e40 <_localeconv_r>
 8017df6:	f8d0 a000 	ldr.w	sl, [r0]
 8017dfa:	4650      	mov	r0, sl
 8017dfc:	f7e8 fa68 	bl	80002d0 <strlen>
 8017e00:	2300      	movs	r3, #0
 8017e02:	930a      	str	r3, [sp, #40]	; 0x28
 8017e04:	6823      	ldr	r3, [r4, #0]
 8017e06:	9305      	str	r3, [sp, #20]
 8017e08:	f8d8 3000 	ldr.w	r3, [r8]
 8017e0c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8017e10:	3307      	adds	r3, #7
 8017e12:	f023 0307 	bic.w	r3, r3, #7
 8017e16:	f103 0208 	add.w	r2, r3, #8
 8017e1a:	f8c8 2000 	str.w	r2, [r8]
 8017e1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017e22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017e26:	9307      	str	r3, [sp, #28]
 8017e28:	f8cd 8018 	str.w	r8, [sp, #24]
 8017e2c:	ee08 0a10 	vmov	s16, r0
 8017e30:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8017e34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017e38:	4b9e      	ldr	r3, [pc, #632]	; (80180b4 <_printf_float+0x2d8>)
 8017e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8017e3e:	f7e8 fea5 	bl	8000b8c <__aeabi_dcmpun>
 8017e42:	bb88      	cbnz	r0, 8017ea8 <_printf_float+0xcc>
 8017e44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017e48:	4b9a      	ldr	r3, [pc, #616]	; (80180b4 <_printf_float+0x2d8>)
 8017e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8017e4e:	f7e8 fe7f 	bl	8000b50 <__aeabi_dcmple>
 8017e52:	bb48      	cbnz	r0, 8017ea8 <_printf_float+0xcc>
 8017e54:	2200      	movs	r2, #0
 8017e56:	2300      	movs	r3, #0
 8017e58:	4640      	mov	r0, r8
 8017e5a:	4649      	mov	r1, r9
 8017e5c:	f7e8 fe6e 	bl	8000b3c <__aeabi_dcmplt>
 8017e60:	b110      	cbz	r0, 8017e68 <_printf_float+0x8c>
 8017e62:	232d      	movs	r3, #45	; 0x2d
 8017e64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017e68:	4a93      	ldr	r2, [pc, #588]	; (80180b8 <_printf_float+0x2dc>)
 8017e6a:	4b94      	ldr	r3, [pc, #592]	; (80180bc <_printf_float+0x2e0>)
 8017e6c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8017e70:	bf94      	ite	ls
 8017e72:	4690      	movls	r8, r2
 8017e74:	4698      	movhi	r8, r3
 8017e76:	2303      	movs	r3, #3
 8017e78:	6123      	str	r3, [r4, #16]
 8017e7a:	9b05      	ldr	r3, [sp, #20]
 8017e7c:	f023 0304 	bic.w	r3, r3, #4
 8017e80:	6023      	str	r3, [r4, #0]
 8017e82:	f04f 0900 	mov.w	r9, #0
 8017e86:	9700      	str	r7, [sp, #0]
 8017e88:	4633      	mov	r3, r6
 8017e8a:	aa0b      	add	r2, sp, #44	; 0x2c
 8017e8c:	4621      	mov	r1, r4
 8017e8e:	4628      	mov	r0, r5
 8017e90:	f000 f9da 	bl	8018248 <_printf_common>
 8017e94:	3001      	adds	r0, #1
 8017e96:	f040 8090 	bne.w	8017fba <_printf_float+0x1de>
 8017e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8017e9e:	b00d      	add	sp, #52	; 0x34
 8017ea0:	ecbd 8b02 	vpop	{d8}
 8017ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ea8:	4642      	mov	r2, r8
 8017eaa:	464b      	mov	r3, r9
 8017eac:	4640      	mov	r0, r8
 8017eae:	4649      	mov	r1, r9
 8017eb0:	f7e8 fe6c 	bl	8000b8c <__aeabi_dcmpun>
 8017eb4:	b140      	cbz	r0, 8017ec8 <_printf_float+0xec>
 8017eb6:	464b      	mov	r3, r9
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	bfbc      	itt	lt
 8017ebc:	232d      	movlt	r3, #45	; 0x2d
 8017ebe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8017ec2:	4a7f      	ldr	r2, [pc, #508]	; (80180c0 <_printf_float+0x2e4>)
 8017ec4:	4b7f      	ldr	r3, [pc, #508]	; (80180c4 <_printf_float+0x2e8>)
 8017ec6:	e7d1      	b.n	8017e6c <_printf_float+0x90>
 8017ec8:	6863      	ldr	r3, [r4, #4]
 8017eca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8017ece:	9206      	str	r2, [sp, #24]
 8017ed0:	1c5a      	adds	r2, r3, #1
 8017ed2:	d13f      	bne.n	8017f54 <_printf_float+0x178>
 8017ed4:	2306      	movs	r3, #6
 8017ed6:	6063      	str	r3, [r4, #4]
 8017ed8:	9b05      	ldr	r3, [sp, #20]
 8017eda:	6861      	ldr	r1, [r4, #4]
 8017edc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8017ee0:	2300      	movs	r3, #0
 8017ee2:	9303      	str	r3, [sp, #12]
 8017ee4:	ab0a      	add	r3, sp, #40	; 0x28
 8017ee6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8017eea:	ab09      	add	r3, sp, #36	; 0x24
 8017eec:	ec49 8b10 	vmov	d0, r8, r9
 8017ef0:	9300      	str	r3, [sp, #0]
 8017ef2:	6022      	str	r2, [r4, #0]
 8017ef4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8017ef8:	4628      	mov	r0, r5
 8017efa:	f7ff fecf 	bl	8017c9c <__cvt>
 8017efe:	9b06      	ldr	r3, [sp, #24]
 8017f00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017f02:	2b47      	cmp	r3, #71	; 0x47
 8017f04:	4680      	mov	r8, r0
 8017f06:	d108      	bne.n	8017f1a <_printf_float+0x13e>
 8017f08:	1cc8      	adds	r0, r1, #3
 8017f0a:	db02      	blt.n	8017f12 <_printf_float+0x136>
 8017f0c:	6863      	ldr	r3, [r4, #4]
 8017f0e:	4299      	cmp	r1, r3
 8017f10:	dd41      	ble.n	8017f96 <_printf_float+0x1ba>
 8017f12:	f1ab 0302 	sub.w	r3, fp, #2
 8017f16:	fa5f fb83 	uxtb.w	fp, r3
 8017f1a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017f1e:	d820      	bhi.n	8017f62 <_printf_float+0x186>
 8017f20:	3901      	subs	r1, #1
 8017f22:	465a      	mov	r2, fp
 8017f24:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8017f28:	9109      	str	r1, [sp, #36]	; 0x24
 8017f2a:	f7ff ff19 	bl	8017d60 <__exponent>
 8017f2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017f30:	1813      	adds	r3, r2, r0
 8017f32:	2a01      	cmp	r2, #1
 8017f34:	4681      	mov	r9, r0
 8017f36:	6123      	str	r3, [r4, #16]
 8017f38:	dc02      	bgt.n	8017f40 <_printf_float+0x164>
 8017f3a:	6822      	ldr	r2, [r4, #0]
 8017f3c:	07d2      	lsls	r2, r2, #31
 8017f3e:	d501      	bpl.n	8017f44 <_printf_float+0x168>
 8017f40:	3301      	adds	r3, #1
 8017f42:	6123      	str	r3, [r4, #16]
 8017f44:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	d09c      	beq.n	8017e86 <_printf_float+0xaa>
 8017f4c:	232d      	movs	r3, #45	; 0x2d
 8017f4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017f52:	e798      	b.n	8017e86 <_printf_float+0xaa>
 8017f54:	9a06      	ldr	r2, [sp, #24]
 8017f56:	2a47      	cmp	r2, #71	; 0x47
 8017f58:	d1be      	bne.n	8017ed8 <_printf_float+0xfc>
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	d1bc      	bne.n	8017ed8 <_printf_float+0xfc>
 8017f5e:	2301      	movs	r3, #1
 8017f60:	e7b9      	b.n	8017ed6 <_printf_float+0xfa>
 8017f62:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8017f66:	d118      	bne.n	8017f9a <_printf_float+0x1be>
 8017f68:	2900      	cmp	r1, #0
 8017f6a:	6863      	ldr	r3, [r4, #4]
 8017f6c:	dd0b      	ble.n	8017f86 <_printf_float+0x1aa>
 8017f6e:	6121      	str	r1, [r4, #16]
 8017f70:	b913      	cbnz	r3, 8017f78 <_printf_float+0x19c>
 8017f72:	6822      	ldr	r2, [r4, #0]
 8017f74:	07d0      	lsls	r0, r2, #31
 8017f76:	d502      	bpl.n	8017f7e <_printf_float+0x1a2>
 8017f78:	3301      	adds	r3, #1
 8017f7a:	440b      	add	r3, r1
 8017f7c:	6123      	str	r3, [r4, #16]
 8017f7e:	65a1      	str	r1, [r4, #88]	; 0x58
 8017f80:	f04f 0900 	mov.w	r9, #0
 8017f84:	e7de      	b.n	8017f44 <_printf_float+0x168>
 8017f86:	b913      	cbnz	r3, 8017f8e <_printf_float+0x1b2>
 8017f88:	6822      	ldr	r2, [r4, #0]
 8017f8a:	07d2      	lsls	r2, r2, #31
 8017f8c:	d501      	bpl.n	8017f92 <_printf_float+0x1b6>
 8017f8e:	3302      	adds	r3, #2
 8017f90:	e7f4      	b.n	8017f7c <_printf_float+0x1a0>
 8017f92:	2301      	movs	r3, #1
 8017f94:	e7f2      	b.n	8017f7c <_printf_float+0x1a0>
 8017f96:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8017f9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f9c:	4299      	cmp	r1, r3
 8017f9e:	db05      	blt.n	8017fac <_printf_float+0x1d0>
 8017fa0:	6823      	ldr	r3, [r4, #0]
 8017fa2:	6121      	str	r1, [r4, #16]
 8017fa4:	07d8      	lsls	r0, r3, #31
 8017fa6:	d5ea      	bpl.n	8017f7e <_printf_float+0x1a2>
 8017fa8:	1c4b      	adds	r3, r1, #1
 8017faa:	e7e7      	b.n	8017f7c <_printf_float+0x1a0>
 8017fac:	2900      	cmp	r1, #0
 8017fae:	bfd4      	ite	le
 8017fb0:	f1c1 0202 	rsble	r2, r1, #2
 8017fb4:	2201      	movgt	r2, #1
 8017fb6:	4413      	add	r3, r2
 8017fb8:	e7e0      	b.n	8017f7c <_printf_float+0x1a0>
 8017fba:	6823      	ldr	r3, [r4, #0]
 8017fbc:	055a      	lsls	r2, r3, #21
 8017fbe:	d407      	bmi.n	8017fd0 <_printf_float+0x1f4>
 8017fc0:	6923      	ldr	r3, [r4, #16]
 8017fc2:	4642      	mov	r2, r8
 8017fc4:	4631      	mov	r1, r6
 8017fc6:	4628      	mov	r0, r5
 8017fc8:	47b8      	blx	r7
 8017fca:	3001      	adds	r0, #1
 8017fcc:	d12c      	bne.n	8018028 <_printf_float+0x24c>
 8017fce:	e764      	b.n	8017e9a <_printf_float+0xbe>
 8017fd0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017fd4:	f240 80e0 	bls.w	8018198 <_printf_float+0x3bc>
 8017fd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017fdc:	2200      	movs	r2, #0
 8017fde:	2300      	movs	r3, #0
 8017fe0:	f7e8 fda2 	bl	8000b28 <__aeabi_dcmpeq>
 8017fe4:	2800      	cmp	r0, #0
 8017fe6:	d034      	beq.n	8018052 <_printf_float+0x276>
 8017fe8:	4a37      	ldr	r2, [pc, #220]	; (80180c8 <_printf_float+0x2ec>)
 8017fea:	2301      	movs	r3, #1
 8017fec:	4631      	mov	r1, r6
 8017fee:	4628      	mov	r0, r5
 8017ff0:	47b8      	blx	r7
 8017ff2:	3001      	adds	r0, #1
 8017ff4:	f43f af51 	beq.w	8017e9a <_printf_float+0xbe>
 8017ff8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017ffc:	429a      	cmp	r2, r3
 8017ffe:	db02      	blt.n	8018006 <_printf_float+0x22a>
 8018000:	6823      	ldr	r3, [r4, #0]
 8018002:	07d8      	lsls	r0, r3, #31
 8018004:	d510      	bpl.n	8018028 <_printf_float+0x24c>
 8018006:	ee18 3a10 	vmov	r3, s16
 801800a:	4652      	mov	r2, sl
 801800c:	4631      	mov	r1, r6
 801800e:	4628      	mov	r0, r5
 8018010:	47b8      	blx	r7
 8018012:	3001      	adds	r0, #1
 8018014:	f43f af41 	beq.w	8017e9a <_printf_float+0xbe>
 8018018:	f04f 0800 	mov.w	r8, #0
 801801c:	f104 091a 	add.w	r9, r4, #26
 8018020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018022:	3b01      	subs	r3, #1
 8018024:	4543      	cmp	r3, r8
 8018026:	dc09      	bgt.n	801803c <_printf_float+0x260>
 8018028:	6823      	ldr	r3, [r4, #0]
 801802a:	079b      	lsls	r3, r3, #30
 801802c:	f100 8107 	bmi.w	801823e <_printf_float+0x462>
 8018030:	68e0      	ldr	r0, [r4, #12]
 8018032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018034:	4298      	cmp	r0, r3
 8018036:	bfb8      	it	lt
 8018038:	4618      	movlt	r0, r3
 801803a:	e730      	b.n	8017e9e <_printf_float+0xc2>
 801803c:	2301      	movs	r3, #1
 801803e:	464a      	mov	r2, r9
 8018040:	4631      	mov	r1, r6
 8018042:	4628      	mov	r0, r5
 8018044:	47b8      	blx	r7
 8018046:	3001      	adds	r0, #1
 8018048:	f43f af27 	beq.w	8017e9a <_printf_float+0xbe>
 801804c:	f108 0801 	add.w	r8, r8, #1
 8018050:	e7e6      	b.n	8018020 <_printf_float+0x244>
 8018052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018054:	2b00      	cmp	r3, #0
 8018056:	dc39      	bgt.n	80180cc <_printf_float+0x2f0>
 8018058:	4a1b      	ldr	r2, [pc, #108]	; (80180c8 <_printf_float+0x2ec>)
 801805a:	2301      	movs	r3, #1
 801805c:	4631      	mov	r1, r6
 801805e:	4628      	mov	r0, r5
 8018060:	47b8      	blx	r7
 8018062:	3001      	adds	r0, #1
 8018064:	f43f af19 	beq.w	8017e9a <_printf_float+0xbe>
 8018068:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801806c:	4313      	orrs	r3, r2
 801806e:	d102      	bne.n	8018076 <_printf_float+0x29a>
 8018070:	6823      	ldr	r3, [r4, #0]
 8018072:	07d9      	lsls	r1, r3, #31
 8018074:	d5d8      	bpl.n	8018028 <_printf_float+0x24c>
 8018076:	ee18 3a10 	vmov	r3, s16
 801807a:	4652      	mov	r2, sl
 801807c:	4631      	mov	r1, r6
 801807e:	4628      	mov	r0, r5
 8018080:	47b8      	blx	r7
 8018082:	3001      	adds	r0, #1
 8018084:	f43f af09 	beq.w	8017e9a <_printf_float+0xbe>
 8018088:	f04f 0900 	mov.w	r9, #0
 801808c:	f104 0a1a 	add.w	sl, r4, #26
 8018090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018092:	425b      	negs	r3, r3
 8018094:	454b      	cmp	r3, r9
 8018096:	dc01      	bgt.n	801809c <_printf_float+0x2c0>
 8018098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801809a:	e792      	b.n	8017fc2 <_printf_float+0x1e6>
 801809c:	2301      	movs	r3, #1
 801809e:	4652      	mov	r2, sl
 80180a0:	4631      	mov	r1, r6
 80180a2:	4628      	mov	r0, r5
 80180a4:	47b8      	blx	r7
 80180a6:	3001      	adds	r0, #1
 80180a8:	f43f aef7 	beq.w	8017e9a <_printf_float+0xbe>
 80180ac:	f109 0901 	add.w	r9, r9, #1
 80180b0:	e7ee      	b.n	8018090 <_printf_float+0x2b4>
 80180b2:	bf00      	nop
 80180b4:	7fefffff 	.word	0x7fefffff
 80180b8:	0801da98 	.word	0x0801da98
 80180bc:	0801da9c 	.word	0x0801da9c
 80180c0:	0801daa0 	.word	0x0801daa0
 80180c4:	0801daa4 	.word	0x0801daa4
 80180c8:	0801de30 	.word	0x0801de30
 80180cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80180ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80180d0:	429a      	cmp	r2, r3
 80180d2:	bfa8      	it	ge
 80180d4:	461a      	movge	r2, r3
 80180d6:	2a00      	cmp	r2, #0
 80180d8:	4691      	mov	r9, r2
 80180da:	dc37      	bgt.n	801814c <_printf_float+0x370>
 80180dc:	f04f 0b00 	mov.w	fp, #0
 80180e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80180e4:	f104 021a 	add.w	r2, r4, #26
 80180e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80180ea:	9305      	str	r3, [sp, #20]
 80180ec:	eba3 0309 	sub.w	r3, r3, r9
 80180f0:	455b      	cmp	r3, fp
 80180f2:	dc33      	bgt.n	801815c <_printf_float+0x380>
 80180f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80180f8:	429a      	cmp	r2, r3
 80180fa:	db3b      	blt.n	8018174 <_printf_float+0x398>
 80180fc:	6823      	ldr	r3, [r4, #0]
 80180fe:	07da      	lsls	r2, r3, #31
 8018100:	d438      	bmi.n	8018174 <_printf_float+0x398>
 8018102:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8018106:	eba2 0903 	sub.w	r9, r2, r3
 801810a:	9b05      	ldr	r3, [sp, #20]
 801810c:	1ad2      	subs	r2, r2, r3
 801810e:	4591      	cmp	r9, r2
 8018110:	bfa8      	it	ge
 8018112:	4691      	movge	r9, r2
 8018114:	f1b9 0f00 	cmp.w	r9, #0
 8018118:	dc35      	bgt.n	8018186 <_printf_float+0x3aa>
 801811a:	f04f 0800 	mov.w	r8, #0
 801811e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018122:	f104 0a1a 	add.w	sl, r4, #26
 8018126:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801812a:	1a9b      	subs	r3, r3, r2
 801812c:	eba3 0309 	sub.w	r3, r3, r9
 8018130:	4543      	cmp	r3, r8
 8018132:	f77f af79 	ble.w	8018028 <_printf_float+0x24c>
 8018136:	2301      	movs	r3, #1
 8018138:	4652      	mov	r2, sl
 801813a:	4631      	mov	r1, r6
 801813c:	4628      	mov	r0, r5
 801813e:	47b8      	blx	r7
 8018140:	3001      	adds	r0, #1
 8018142:	f43f aeaa 	beq.w	8017e9a <_printf_float+0xbe>
 8018146:	f108 0801 	add.w	r8, r8, #1
 801814a:	e7ec      	b.n	8018126 <_printf_float+0x34a>
 801814c:	4613      	mov	r3, r2
 801814e:	4631      	mov	r1, r6
 8018150:	4642      	mov	r2, r8
 8018152:	4628      	mov	r0, r5
 8018154:	47b8      	blx	r7
 8018156:	3001      	adds	r0, #1
 8018158:	d1c0      	bne.n	80180dc <_printf_float+0x300>
 801815a:	e69e      	b.n	8017e9a <_printf_float+0xbe>
 801815c:	2301      	movs	r3, #1
 801815e:	4631      	mov	r1, r6
 8018160:	4628      	mov	r0, r5
 8018162:	9205      	str	r2, [sp, #20]
 8018164:	47b8      	blx	r7
 8018166:	3001      	adds	r0, #1
 8018168:	f43f ae97 	beq.w	8017e9a <_printf_float+0xbe>
 801816c:	9a05      	ldr	r2, [sp, #20]
 801816e:	f10b 0b01 	add.w	fp, fp, #1
 8018172:	e7b9      	b.n	80180e8 <_printf_float+0x30c>
 8018174:	ee18 3a10 	vmov	r3, s16
 8018178:	4652      	mov	r2, sl
 801817a:	4631      	mov	r1, r6
 801817c:	4628      	mov	r0, r5
 801817e:	47b8      	blx	r7
 8018180:	3001      	adds	r0, #1
 8018182:	d1be      	bne.n	8018102 <_printf_float+0x326>
 8018184:	e689      	b.n	8017e9a <_printf_float+0xbe>
 8018186:	9a05      	ldr	r2, [sp, #20]
 8018188:	464b      	mov	r3, r9
 801818a:	4442      	add	r2, r8
 801818c:	4631      	mov	r1, r6
 801818e:	4628      	mov	r0, r5
 8018190:	47b8      	blx	r7
 8018192:	3001      	adds	r0, #1
 8018194:	d1c1      	bne.n	801811a <_printf_float+0x33e>
 8018196:	e680      	b.n	8017e9a <_printf_float+0xbe>
 8018198:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801819a:	2a01      	cmp	r2, #1
 801819c:	dc01      	bgt.n	80181a2 <_printf_float+0x3c6>
 801819e:	07db      	lsls	r3, r3, #31
 80181a0:	d53a      	bpl.n	8018218 <_printf_float+0x43c>
 80181a2:	2301      	movs	r3, #1
 80181a4:	4642      	mov	r2, r8
 80181a6:	4631      	mov	r1, r6
 80181a8:	4628      	mov	r0, r5
 80181aa:	47b8      	blx	r7
 80181ac:	3001      	adds	r0, #1
 80181ae:	f43f ae74 	beq.w	8017e9a <_printf_float+0xbe>
 80181b2:	ee18 3a10 	vmov	r3, s16
 80181b6:	4652      	mov	r2, sl
 80181b8:	4631      	mov	r1, r6
 80181ba:	4628      	mov	r0, r5
 80181bc:	47b8      	blx	r7
 80181be:	3001      	adds	r0, #1
 80181c0:	f43f ae6b 	beq.w	8017e9a <_printf_float+0xbe>
 80181c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80181c8:	2200      	movs	r2, #0
 80181ca:	2300      	movs	r3, #0
 80181cc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80181d0:	f7e8 fcaa 	bl	8000b28 <__aeabi_dcmpeq>
 80181d4:	b9d8      	cbnz	r0, 801820e <_printf_float+0x432>
 80181d6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80181da:	f108 0201 	add.w	r2, r8, #1
 80181de:	4631      	mov	r1, r6
 80181e0:	4628      	mov	r0, r5
 80181e2:	47b8      	blx	r7
 80181e4:	3001      	adds	r0, #1
 80181e6:	d10e      	bne.n	8018206 <_printf_float+0x42a>
 80181e8:	e657      	b.n	8017e9a <_printf_float+0xbe>
 80181ea:	2301      	movs	r3, #1
 80181ec:	4652      	mov	r2, sl
 80181ee:	4631      	mov	r1, r6
 80181f0:	4628      	mov	r0, r5
 80181f2:	47b8      	blx	r7
 80181f4:	3001      	adds	r0, #1
 80181f6:	f43f ae50 	beq.w	8017e9a <_printf_float+0xbe>
 80181fa:	f108 0801 	add.w	r8, r8, #1
 80181fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018200:	3b01      	subs	r3, #1
 8018202:	4543      	cmp	r3, r8
 8018204:	dcf1      	bgt.n	80181ea <_printf_float+0x40e>
 8018206:	464b      	mov	r3, r9
 8018208:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801820c:	e6da      	b.n	8017fc4 <_printf_float+0x1e8>
 801820e:	f04f 0800 	mov.w	r8, #0
 8018212:	f104 0a1a 	add.w	sl, r4, #26
 8018216:	e7f2      	b.n	80181fe <_printf_float+0x422>
 8018218:	2301      	movs	r3, #1
 801821a:	4642      	mov	r2, r8
 801821c:	e7df      	b.n	80181de <_printf_float+0x402>
 801821e:	2301      	movs	r3, #1
 8018220:	464a      	mov	r2, r9
 8018222:	4631      	mov	r1, r6
 8018224:	4628      	mov	r0, r5
 8018226:	47b8      	blx	r7
 8018228:	3001      	adds	r0, #1
 801822a:	f43f ae36 	beq.w	8017e9a <_printf_float+0xbe>
 801822e:	f108 0801 	add.w	r8, r8, #1
 8018232:	68e3      	ldr	r3, [r4, #12]
 8018234:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018236:	1a5b      	subs	r3, r3, r1
 8018238:	4543      	cmp	r3, r8
 801823a:	dcf0      	bgt.n	801821e <_printf_float+0x442>
 801823c:	e6f8      	b.n	8018030 <_printf_float+0x254>
 801823e:	f04f 0800 	mov.w	r8, #0
 8018242:	f104 0919 	add.w	r9, r4, #25
 8018246:	e7f4      	b.n	8018232 <_printf_float+0x456>

08018248 <_printf_common>:
 8018248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801824c:	4616      	mov	r6, r2
 801824e:	4699      	mov	r9, r3
 8018250:	688a      	ldr	r2, [r1, #8]
 8018252:	690b      	ldr	r3, [r1, #16]
 8018254:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018258:	4293      	cmp	r3, r2
 801825a:	bfb8      	it	lt
 801825c:	4613      	movlt	r3, r2
 801825e:	6033      	str	r3, [r6, #0]
 8018260:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018264:	4607      	mov	r7, r0
 8018266:	460c      	mov	r4, r1
 8018268:	b10a      	cbz	r2, 801826e <_printf_common+0x26>
 801826a:	3301      	adds	r3, #1
 801826c:	6033      	str	r3, [r6, #0]
 801826e:	6823      	ldr	r3, [r4, #0]
 8018270:	0699      	lsls	r1, r3, #26
 8018272:	bf42      	ittt	mi
 8018274:	6833      	ldrmi	r3, [r6, #0]
 8018276:	3302      	addmi	r3, #2
 8018278:	6033      	strmi	r3, [r6, #0]
 801827a:	6825      	ldr	r5, [r4, #0]
 801827c:	f015 0506 	ands.w	r5, r5, #6
 8018280:	d106      	bne.n	8018290 <_printf_common+0x48>
 8018282:	f104 0a19 	add.w	sl, r4, #25
 8018286:	68e3      	ldr	r3, [r4, #12]
 8018288:	6832      	ldr	r2, [r6, #0]
 801828a:	1a9b      	subs	r3, r3, r2
 801828c:	42ab      	cmp	r3, r5
 801828e:	dc26      	bgt.n	80182de <_printf_common+0x96>
 8018290:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018294:	1e13      	subs	r3, r2, #0
 8018296:	6822      	ldr	r2, [r4, #0]
 8018298:	bf18      	it	ne
 801829a:	2301      	movne	r3, #1
 801829c:	0692      	lsls	r2, r2, #26
 801829e:	d42b      	bmi.n	80182f8 <_printf_common+0xb0>
 80182a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80182a4:	4649      	mov	r1, r9
 80182a6:	4638      	mov	r0, r7
 80182a8:	47c0      	blx	r8
 80182aa:	3001      	adds	r0, #1
 80182ac:	d01e      	beq.n	80182ec <_printf_common+0xa4>
 80182ae:	6823      	ldr	r3, [r4, #0]
 80182b0:	6922      	ldr	r2, [r4, #16]
 80182b2:	f003 0306 	and.w	r3, r3, #6
 80182b6:	2b04      	cmp	r3, #4
 80182b8:	bf02      	ittt	eq
 80182ba:	68e5      	ldreq	r5, [r4, #12]
 80182bc:	6833      	ldreq	r3, [r6, #0]
 80182be:	1aed      	subeq	r5, r5, r3
 80182c0:	68a3      	ldr	r3, [r4, #8]
 80182c2:	bf0c      	ite	eq
 80182c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80182c8:	2500      	movne	r5, #0
 80182ca:	4293      	cmp	r3, r2
 80182cc:	bfc4      	itt	gt
 80182ce:	1a9b      	subgt	r3, r3, r2
 80182d0:	18ed      	addgt	r5, r5, r3
 80182d2:	2600      	movs	r6, #0
 80182d4:	341a      	adds	r4, #26
 80182d6:	42b5      	cmp	r5, r6
 80182d8:	d11a      	bne.n	8018310 <_printf_common+0xc8>
 80182da:	2000      	movs	r0, #0
 80182dc:	e008      	b.n	80182f0 <_printf_common+0xa8>
 80182de:	2301      	movs	r3, #1
 80182e0:	4652      	mov	r2, sl
 80182e2:	4649      	mov	r1, r9
 80182e4:	4638      	mov	r0, r7
 80182e6:	47c0      	blx	r8
 80182e8:	3001      	adds	r0, #1
 80182ea:	d103      	bne.n	80182f4 <_printf_common+0xac>
 80182ec:	f04f 30ff 	mov.w	r0, #4294967295
 80182f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80182f4:	3501      	adds	r5, #1
 80182f6:	e7c6      	b.n	8018286 <_printf_common+0x3e>
 80182f8:	18e1      	adds	r1, r4, r3
 80182fa:	1c5a      	adds	r2, r3, #1
 80182fc:	2030      	movs	r0, #48	; 0x30
 80182fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018302:	4422      	add	r2, r4
 8018304:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018308:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801830c:	3302      	adds	r3, #2
 801830e:	e7c7      	b.n	80182a0 <_printf_common+0x58>
 8018310:	2301      	movs	r3, #1
 8018312:	4622      	mov	r2, r4
 8018314:	4649      	mov	r1, r9
 8018316:	4638      	mov	r0, r7
 8018318:	47c0      	blx	r8
 801831a:	3001      	adds	r0, #1
 801831c:	d0e6      	beq.n	80182ec <_printf_common+0xa4>
 801831e:	3601      	adds	r6, #1
 8018320:	e7d9      	b.n	80182d6 <_printf_common+0x8e>
	...

08018324 <_printf_i>:
 8018324:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018328:	7e0f      	ldrb	r7, [r1, #24]
 801832a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801832c:	2f78      	cmp	r7, #120	; 0x78
 801832e:	4691      	mov	r9, r2
 8018330:	4680      	mov	r8, r0
 8018332:	460c      	mov	r4, r1
 8018334:	469a      	mov	sl, r3
 8018336:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801833a:	d807      	bhi.n	801834c <_printf_i+0x28>
 801833c:	2f62      	cmp	r7, #98	; 0x62
 801833e:	d80a      	bhi.n	8018356 <_printf_i+0x32>
 8018340:	2f00      	cmp	r7, #0
 8018342:	f000 80d4 	beq.w	80184ee <_printf_i+0x1ca>
 8018346:	2f58      	cmp	r7, #88	; 0x58
 8018348:	f000 80c0 	beq.w	80184cc <_printf_i+0x1a8>
 801834c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018350:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018354:	e03a      	b.n	80183cc <_printf_i+0xa8>
 8018356:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801835a:	2b15      	cmp	r3, #21
 801835c:	d8f6      	bhi.n	801834c <_printf_i+0x28>
 801835e:	a101      	add	r1, pc, #4	; (adr r1, 8018364 <_printf_i+0x40>)
 8018360:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018364:	080183bd 	.word	0x080183bd
 8018368:	080183d1 	.word	0x080183d1
 801836c:	0801834d 	.word	0x0801834d
 8018370:	0801834d 	.word	0x0801834d
 8018374:	0801834d 	.word	0x0801834d
 8018378:	0801834d 	.word	0x0801834d
 801837c:	080183d1 	.word	0x080183d1
 8018380:	0801834d 	.word	0x0801834d
 8018384:	0801834d 	.word	0x0801834d
 8018388:	0801834d 	.word	0x0801834d
 801838c:	0801834d 	.word	0x0801834d
 8018390:	080184d5 	.word	0x080184d5
 8018394:	080183fd 	.word	0x080183fd
 8018398:	0801848f 	.word	0x0801848f
 801839c:	0801834d 	.word	0x0801834d
 80183a0:	0801834d 	.word	0x0801834d
 80183a4:	080184f7 	.word	0x080184f7
 80183a8:	0801834d 	.word	0x0801834d
 80183ac:	080183fd 	.word	0x080183fd
 80183b0:	0801834d 	.word	0x0801834d
 80183b4:	0801834d 	.word	0x0801834d
 80183b8:	08018497 	.word	0x08018497
 80183bc:	682b      	ldr	r3, [r5, #0]
 80183be:	1d1a      	adds	r2, r3, #4
 80183c0:	681b      	ldr	r3, [r3, #0]
 80183c2:	602a      	str	r2, [r5, #0]
 80183c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80183c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80183cc:	2301      	movs	r3, #1
 80183ce:	e09f      	b.n	8018510 <_printf_i+0x1ec>
 80183d0:	6820      	ldr	r0, [r4, #0]
 80183d2:	682b      	ldr	r3, [r5, #0]
 80183d4:	0607      	lsls	r7, r0, #24
 80183d6:	f103 0104 	add.w	r1, r3, #4
 80183da:	6029      	str	r1, [r5, #0]
 80183dc:	d501      	bpl.n	80183e2 <_printf_i+0xbe>
 80183de:	681e      	ldr	r6, [r3, #0]
 80183e0:	e003      	b.n	80183ea <_printf_i+0xc6>
 80183e2:	0646      	lsls	r6, r0, #25
 80183e4:	d5fb      	bpl.n	80183de <_printf_i+0xba>
 80183e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80183ea:	2e00      	cmp	r6, #0
 80183ec:	da03      	bge.n	80183f6 <_printf_i+0xd2>
 80183ee:	232d      	movs	r3, #45	; 0x2d
 80183f0:	4276      	negs	r6, r6
 80183f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80183f6:	485a      	ldr	r0, [pc, #360]	; (8018560 <_printf_i+0x23c>)
 80183f8:	230a      	movs	r3, #10
 80183fa:	e012      	b.n	8018422 <_printf_i+0xfe>
 80183fc:	682b      	ldr	r3, [r5, #0]
 80183fe:	6820      	ldr	r0, [r4, #0]
 8018400:	1d19      	adds	r1, r3, #4
 8018402:	6029      	str	r1, [r5, #0]
 8018404:	0605      	lsls	r5, r0, #24
 8018406:	d501      	bpl.n	801840c <_printf_i+0xe8>
 8018408:	681e      	ldr	r6, [r3, #0]
 801840a:	e002      	b.n	8018412 <_printf_i+0xee>
 801840c:	0641      	lsls	r1, r0, #25
 801840e:	d5fb      	bpl.n	8018408 <_printf_i+0xe4>
 8018410:	881e      	ldrh	r6, [r3, #0]
 8018412:	4853      	ldr	r0, [pc, #332]	; (8018560 <_printf_i+0x23c>)
 8018414:	2f6f      	cmp	r7, #111	; 0x6f
 8018416:	bf0c      	ite	eq
 8018418:	2308      	moveq	r3, #8
 801841a:	230a      	movne	r3, #10
 801841c:	2100      	movs	r1, #0
 801841e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018422:	6865      	ldr	r5, [r4, #4]
 8018424:	60a5      	str	r5, [r4, #8]
 8018426:	2d00      	cmp	r5, #0
 8018428:	bfa2      	ittt	ge
 801842a:	6821      	ldrge	r1, [r4, #0]
 801842c:	f021 0104 	bicge.w	r1, r1, #4
 8018430:	6021      	strge	r1, [r4, #0]
 8018432:	b90e      	cbnz	r6, 8018438 <_printf_i+0x114>
 8018434:	2d00      	cmp	r5, #0
 8018436:	d04b      	beq.n	80184d0 <_printf_i+0x1ac>
 8018438:	4615      	mov	r5, r2
 801843a:	fbb6 f1f3 	udiv	r1, r6, r3
 801843e:	fb03 6711 	mls	r7, r3, r1, r6
 8018442:	5dc7      	ldrb	r7, [r0, r7]
 8018444:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018448:	4637      	mov	r7, r6
 801844a:	42bb      	cmp	r3, r7
 801844c:	460e      	mov	r6, r1
 801844e:	d9f4      	bls.n	801843a <_printf_i+0x116>
 8018450:	2b08      	cmp	r3, #8
 8018452:	d10b      	bne.n	801846c <_printf_i+0x148>
 8018454:	6823      	ldr	r3, [r4, #0]
 8018456:	07de      	lsls	r6, r3, #31
 8018458:	d508      	bpl.n	801846c <_printf_i+0x148>
 801845a:	6923      	ldr	r3, [r4, #16]
 801845c:	6861      	ldr	r1, [r4, #4]
 801845e:	4299      	cmp	r1, r3
 8018460:	bfde      	ittt	le
 8018462:	2330      	movle	r3, #48	; 0x30
 8018464:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018468:	f105 35ff 	addle.w	r5, r5, #4294967295
 801846c:	1b52      	subs	r2, r2, r5
 801846e:	6122      	str	r2, [r4, #16]
 8018470:	f8cd a000 	str.w	sl, [sp]
 8018474:	464b      	mov	r3, r9
 8018476:	aa03      	add	r2, sp, #12
 8018478:	4621      	mov	r1, r4
 801847a:	4640      	mov	r0, r8
 801847c:	f7ff fee4 	bl	8018248 <_printf_common>
 8018480:	3001      	adds	r0, #1
 8018482:	d14a      	bne.n	801851a <_printf_i+0x1f6>
 8018484:	f04f 30ff 	mov.w	r0, #4294967295
 8018488:	b004      	add	sp, #16
 801848a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801848e:	6823      	ldr	r3, [r4, #0]
 8018490:	f043 0320 	orr.w	r3, r3, #32
 8018494:	6023      	str	r3, [r4, #0]
 8018496:	4833      	ldr	r0, [pc, #204]	; (8018564 <_printf_i+0x240>)
 8018498:	2778      	movs	r7, #120	; 0x78
 801849a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801849e:	6823      	ldr	r3, [r4, #0]
 80184a0:	6829      	ldr	r1, [r5, #0]
 80184a2:	061f      	lsls	r7, r3, #24
 80184a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80184a8:	d402      	bmi.n	80184b0 <_printf_i+0x18c>
 80184aa:	065f      	lsls	r7, r3, #25
 80184ac:	bf48      	it	mi
 80184ae:	b2b6      	uxthmi	r6, r6
 80184b0:	07df      	lsls	r7, r3, #31
 80184b2:	bf48      	it	mi
 80184b4:	f043 0320 	orrmi.w	r3, r3, #32
 80184b8:	6029      	str	r1, [r5, #0]
 80184ba:	bf48      	it	mi
 80184bc:	6023      	strmi	r3, [r4, #0]
 80184be:	b91e      	cbnz	r6, 80184c8 <_printf_i+0x1a4>
 80184c0:	6823      	ldr	r3, [r4, #0]
 80184c2:	f023 0320 	bic.w	r3, r3, #32
 80184c6:	6023      	str	r3, [r4, #0]
 80184c8:	2310      	movs	r3, #16
 80184ca:	e7a7      	b.n	801841c <_printf_i+0xf8>
 80184cc:	4824      	ldr	r0, [pc, #144]	; (8018560 <_printf_i+0x23c>)
 80184ce:	e7e4      	b.n	801849a <_printf_i+0x176>
 80184d0:	4615      	mov	r5, r2
 80184d2:	e7bd      	b.n	8018450 <_printf_i+0x12c>
 80184d4:	682b      	ldr	r3, [r5, #0]
 80184d6:	6826      	ldr	r6, [r4, #0]
 80184d8:	6961      	ldr	r1, [r4, #20]
 80184da:	1d18      	adds	r0, r3, #4
 80184dc:	6028      	str	r0, [r5, #0]
 80184de:	0635      	lsls	r5, r6, #24
 80184e0:	681b      	ldr	r3, [r3, #0]
 80184e2:	d501      	bpl.n	80184e8 <_printf_i+0x1c4>
 80184e4:	6019      	str	r1, [r3, #0]
 80184e6:	e002      	b.n	80184ee <_printf_i+0x1ca>
 80184e8:	0670      	lsls	r0, r6, #25
 80184ea:	d5fb      	bpl.n	80184e4 <_printf_i+0x1c0>
 80184ec:	8019      	strh	r1, [r3, #0]
 80184ee:	2300      	movs	r3, #0
 80184f0:	6123      	str	r3, [r4, #16]
 80184f2:	4615      	mov	r5, r2
 80184f4:	e7bc      	b.n	8018470 <_printf_i+0x14c>
 80184f6:	682b      	ldr	r3, [r5, #0]
 80184f8:	1d1a      	adds	r2, r3, #4
 80184fa:	602a      	str	r2, [r5, #0]
 80184fc:	681d      	ldr	r5, [r3, #0]
 80184fe:	6862      	ldr	r2, [r4, #4]
 8018500:	2100      	movs	r1, #0
 8018502:	4628      	mov	r0, r5
 8018504:	f7e7 fe94 	bl	8000230 <memchr>
 8018508:	b108      	cbz	r0, 801850e <_printf_i+0x1ea>
 801850a:	1b40      	subs	r0, r0, r5
 801850c:	6060      	str	r0, [r4, #4]
 801850e:	6863      	ldr	r3, [r4, #4]
 8018510:	6123      	str	r3, [r4, #16]
 8018512:	2300      	movs	r3, #0
 8018514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018518:	e7aa      	b.n	8018470 <_printf_i+0x14c>
 801851a:	6923      	ldr	r3, [r4, #16]
 801851c:	462a      	mov	r2, r5
 801851e:	4649      	mov	r1, r9
 8018520:	4640      	mov	r0, r8
 8018522:	47d0      	blx	sl
 8018524:	3001      	adds	r0, #1
 8018526:	d0ad      	beq.n	8018484 <_printf_i+0x160>
 8018528:	6823      	ldr	r3, [r4, #0]
 801852a:	079b      	lsls	r3, r3, #30
 801852c:	d413      	bmi.n	8018556 <_printf_i+0x232>
 801852e:	68e0      	ldr	r0, [r4, #12]
 8018530:	9b03      	ldr	r3, [sp, #12]
 8018532:	4298      	cmp	r0, r3
 8018534:	bfb8      	it	lt
 8018536:	4618      	movlt	r0, r3
 8018538:	e7a6      	b.n	8018488 <_printf_i+0x164>
 801853a:	2301      	movs	r3, #1
 801853c:	4632      	mov	r2, r6
 801853e:	4649      	mov	r1, r9
 8018540:	4640      	mov	r0, r8
 8018542:	47d0      	blx	sl
 8018544:	3001      	adds	r0, #1
 8018546:	d09d      	beq.n	8018484 <_printf_i+0x160>
 8018548:	3501      	adds	r5, #1
 801854a:	68e3      	ldr	r3, [r4, #12]
 801854c:	9903      	ldr	r1, [sp, #12]
 801854e:	1a5b      	subs	r3, r3, r1
 8018550:	42ab      	cmp	r3, r5
 8018552:	dcf2      	bgt.n	801853a <_printf_i+0x216>
 8018554:	e7eb      	b.n	801852e <_printf_i+0x20a>
 8018556:	2500      	movs	r5, #0
 8018558:	f104 0619 	add.w	r6, r4, #25
 801855c:	e7f5      	b.n	801854a <_printf_i+0x226>
 801855e:	bf00      	nop
 8018560:	0801daa8 	.word	0x0801daa8
 8018564:	0801dab9 	.word	0x0801dab9

08018568 <_scanf_float>:
 8018568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801856c:	b087      	sub	sp, #28
 801856e:	4617      	mov	r7, r2
 8018570:	9303      	str	r3, [sp, #12]
 8018572:	688b      	ldr	r3, [r1, #8]
 8018574:	1e5a      	subs	r2, r3, #1
 8018576:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801857a:	bf83      	ittte	hi
 801857c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8018580:	195b      	addhi	r3, r3, r5
 8018582:	9302      	strhi	r3, [sp, #8]
 8018584:	2300      	movls	r3, #0
 8018586:	bf86      	itte	hi
 8018588:	f240 135d 	movwhi	r3, #349	; 0x15d
 801858c:	608b      	strhi	r3, [r1, #8]
 801858e:	9302      	strls	r3, [sp, #8]
 8018590:	680b      	ldr	r3, [r1, #0]
 8018592:	468b      	mov	fp, r1
 8018594:	2500      	movs	r5, #0
 8018596:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801859a:	f84b 3b1c 	str.w	r3, [fp], #28
 801859e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80185a2:	4680      	mov	r8, r0
 80185a4:	460c      	mov	r4, r1
 80185a6:	465e      	mov	r6, fp
 80185a8:	46aa      	mov	sl, r5
 80185aa:	46a9      	mov	r9, r5
 80185ac:	9501      	str	r5, [sp, #4]
 80185ae:	68a2      	ldr	r2, [r4, #8]
 80185b0:	b152      	cbz	r2, 80185c8 <_scanf_float+0x60>
 80185b2:	683b      	ldr	r3, [r7, #0]
 80185b4:	781b      	ldrb	r3, [r3, #0]
 80185b6:	2b4e      	cmp	r3, #78	; 0x4e
 80185b8:	d864      	bhi.n	8018684 <_scanf_float+0x11c>
 80185ba:	2b40      	cmp	r3, #64	; 0x40
 80185bc:	d83c      	bhi.n	8018638 <_scanf_float+0xd0>
 80185be:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80185c2:	b2c8      	uxtb	r0, r1
 80185c4:	280e      	cmp	r0, #14
 80185c6:	d93a      	bls.n	801863e <_scanf_float+0xd6>
 80185c8:	f1b9 0f00 	cmp.w	r9, #0
 80185cc:	d003      	beq.n	80185d6 <_scanf_float+0x6e>
 80185ce:	6823      	ldr	r3, [r4, #0]
 80185d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80185d4:	6023      	str	r3, [r4, #0]
 80185d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80185da:	f1ba 0f01 	cmp.w	sl, #1
 80185de:	f200 8113 	bhi.w	8018808 <_scanf_float+0x2a0>
 80185e2:	455e      	cmp	r6, fp
 80185e4:	f200 8105 	bhi.w	80187f2 <_scanf_float+0x28a>
 80185e8:	2501      	movs	r5, #1
 80185ea:	4628      	mov	r0, r5
 80185ec:	b007      	add	sp, #28
 80185ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185f2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80185f6:	2a0d      	cmp	r2, #13
 80185f8:	d8e6      	bhi.n	80185c8 <_scanf_float+0x60>
 80185fa:	a101      	add	r1, pc, #4	; (adr r1, 8018600 <_scanf_float+0x98>)
 80185fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8018600:	0801873f 	.word	0x0801873f
 8018604:	080185c9 	.word	0x080185c9
 8018608:	080185c9 	.word	0x080185c9
 801860c:	080185c9 	.word	0x080185c9
 8018610:	0801879f 	.word	0x0801879f
 8018614:	08018777 	.word	0x08018777
 8018618:	080185c9 	.word	0x080185c9
 801861c:	080185c9 	.word	0x080185c9
 8018620:	0801874d 	.word	0x0801874d
 8018624:	080185c9 	.word	0x080185c9
 8018628:	080185c9 	.word	0x080185c9
 801862c:	080185c9 	.word	0x080185c9
 8018630:	080185c9 	.word	0x080185c9
 8018634:	08018705 	.word	0x08018705
 8018638:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801863c:	e7db      	b.n	80185f6 <_scanf_float+0x8e>
 801863e:	290e      	cmp	r1, #14
 8018640:	d8c2      	bhi.n	80185c8 <_scanf_float+0x60>
 8018642:	a001      	add	r0, pc, #4	; (adr r0, 8018648 <_scanf_float+0xe0>)
 8018644:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8018648:	080186f7 	.word	0x080186f7
 801864c:	080185c9 	.word	0x080185c9
 8018650:	080186f7 	.word	0x080186f7
 8018654:	0801878b 	.word	0x0801878b
 8018658:	080185c9 	.word	0x080185c9
 801865c:	080186a5 	.word	0x080186a5
 8018660:	080186e1 	.word	0x080186e1
 8018664:	080186e1 	.word	0x080186e1
 8018668:	080186e1 	.word	0x080186e1
 801866c:	080186e1 	.word	0x080186e1
 8018670:	080186e1 	.word	0x080186e1
 8018674:	080186e1 	.word	0x080186e1
 8018678:	080186e1 	.word	0x080186e1
 801867c:	080186e1 	.word	0x080186e1
 8018680:	080186e1 	.word	0x080186e1
 8018684:	2b6e      	cmp	r3, #110	; 0x6e
 8018686:	d809      	bhi.n	801869c <_scanf_float+0x134>
 8018688:	2b60      	cmp	r3, #96	; 0x60
 801868a:	d8b2      	bhi.n	80185f2 <_scanf_float+0x8a>
 801868c:	2b54      	cmp	r3, #84	; 0x54
 801868e:	d077      	beq.n	8018780 <_scanf_float+0x218>
 8018690:	2b59      	cmp	r3, #89	; 0x59
 8018692:	d199      	bne.n	80185c8 <_scanf_float+0x60>
 8018694:	2d07      	cmp	r5, #7
 8018696:	d197      	bne.n	80185c8 <_scanf_float+0x60>
 8018698:	2508      	movs	r5, #8
 801869a:	e029      	b.n	80186f0 <_scanf_float+0x188>
 801869c:	2b74      	cmp	r3, #116	; 0x74
 801869e:	d06f      	beq.n	8018780 <_scanf_float+0x218>
 80186a0:	2b79      	cmp	r3, #121	; 0x79
 80186a2:	e7f6      	b.n	8018692 <_scanf_float+0x12a>
 80186a4:	6821      	ldr	r1, [r4, #0]
 80186a6:	05c8      	lsls	r0, r1, #23
 80186a8:	d51a      	bpl.n	80186e0 <_scanf_float+0x178>
 80186aa:	9b02      	ldr	r3, [sp, #8]
 80186ac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80186b0:	6021      	str	r1, [r4, #0]
 80186b2:	f109 0901 	add.w	r9, r9, #1
 80186b6:	b11b      	cbz	r3, 80186c0 <_scanf_float+0x158>
 80186b8:	3b01      	subs	r3, #1
 80186ba:	3201      	adds	r2, #1
 80186bc:	9302      	str	r3, [sp, #8]
 80186be:	60a2      	str	r2, [r4, #8]
 80186c0:	68a3      	ldr	r3, [r4, #8]
 80186c2:	3b01      	subs	r3, #1
 80186c4:	60a3      	str	r3, [r4, #8]
 80186c6:	6923      	ldr	r3, [r4, #16]
 80186c8:	3301      	adds	r3, #1
 80186ca:	6123      	str	r3, [r4, #16]
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	3b01      	subs	r3, #1
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	607b      	str	r3, [r7, #4]
 80186d4:	f340 8084 	ble.w	80187e0 <_scanf_float+0x278>
 80186d8:	683b      	ldr	r3, [r7, #0]
 80186da:	3301      	adds	r3, #1
 80186dc:	603b      	str	r3, [r7, #0]
 80186de:	e766      	b.n	80185ae <_scanf_float+0x46>
 80186e0:	eb1a 0f05 	cmn.w	sl, r5
 80186e4:	f47f af70 	bne.w	80185c8 <_scanf_float+0x60>
 80186e8:	6822      	ldr	r2, [r4, #0]
 80186ea:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80186ee:	6022      	str	r2, [r4, #0]
 80186f0:	f806 3b01 	strb.w	r3, [r6], #1
 80186f4:	e7e4      	b.n	80186c0 <_scanf_float+0x158>
 80186f6:	6822      	ldr	r2, [r4, #0]
 80186f8:	0610      	lsls	r0, r2, #24
 80186fa:	f57f af65 	bpl.w	80185c8 <_scanf_float+0x60>
 80186fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8018702:	e7f4      	b.n	80186ee <_scanf_float+0x186>
 8018704:	f1ba 0f00 	cmp.w	sl, #0
 8018708:	d10e      	bne.n	8018728 <_scanf_float+0x1c0>
 801870a:	f1b9 0f00 	cmp.w	r9, #0
 801870e:	d10e      	bne.n	801872e <_scanf_float+0x1c6>
 8018710:	6822      	ldr	r2, [r4, #0]
 8018712:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8018716:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801871a:	d108      	bne.n	801872e <_scanf_float+0x1c6>
 801871c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8018720:	6022      	str	r2, [r4, #0]
 8018722:	f04f 0a01 	mov.w	sl, #1
 8018726:	e7e3      	b.n	80186f0 <_scanf_float+0x188>
 8018728:	f1ba 0f02 	cmp.w	sl, #2
 801872c:	d055      	beq.n	80187da <_scanf_float+0x272>
 801872e:	2d01      	cmp	r5, #1
 8018730:	d002      	beq.n	8018738 <_scanf_float+0x1d0>
 8018732:	2d04      	cmp	r5, #4
 8018734:	f47f af48 	bne.w	80185c8 <_scanf_float+0x60>
 8018738:	3501      	adds	r5, #1
 801873a:	b2ed      	uxtb	r5, r5
 801873c:	e7d8      	b.n	80186f0 <_scanf_float+0x188>
 801873e:	f1ba 0f01 	cmp.w	sl, #1
 8018742:	f47f af41 	bne.w	80185c8 <_scanf_float+0x60>
 8018746:	f04f 0a02 	mov.w	sl, #2
 801874a:	e7d1      	b.n	80186f0 <_scanf_float+0x188>
 801874c:	b97d      	cbnz	r5, 801876e <_scanf_float+0x206>
 801874e:	f1b9 0f00 	cmp.w	r9, #0
 8018752:	f47f af3c 	bne.w	80185ce <_scanf_float+0x66>
 8018756:	6822      	ldr	r2, [r4, #0]
 8018758:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801875c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8018760:	f47f af39 	bne.w	80185d6 <_scanf_float+0x6e>
 8018764:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8018768:	6022      	str	r2, [r4, #0]
 801876a:	2501      	movs	r5, #1
 801876c:	e7c0      	b.n	80186f0 <_scanf_float+0x188>
 801876e:	2d03      	cmp	r5, #3
 8018770:	d0e2      	beq.n	8018738 <_scanf_float+0x1d0>
 8018772:	2d05      	cmp	r5, #5
 8018774:	e7de      	b.n	8018734 <_scanf_float+0x1cc>
 8018776:	2d02      	cmp	r5, #2
 8018778:	f47f af26 	bne.w	80185c8 <_scanf_float+0x60>
 801877c:	2503      	movs	r5, #3
 801877e:	e7b7      	b.n	80186f0 <_scanf_float+0x188>
 8018780:	2d06      	cmp	r5, #6
 8018782:	f47f af21 	bne.w	80185c8 <_scanf_float+0x60>
 8018786:	2507      	movs	r5, #7
 8018788:	e7b2      	b.n	80186f0 <_scanf_float+0x188>
 801878a:	6822      	ldr	r2, [r4, #0]
 801878c:	0591      	lsls	r1, r2, #22
 801878e:	f57f af1b 	bpl.w	80185c8 <_scanf_float+0x60>
 8018792:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8018796:	6022      	str	r2, [r4, #0]
 8018798:	f8cd 9004 	str.w	r9, [sp, #4]
 801879c:	e7a8      	b.n	80186f0 <_scanf_float+0x188>
 801879e:	6822      	ldr	r2, [r4, #0]
 80187a0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80187a4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80187a8:	d006      	beq.n	80187b8 <_scanf_float+0x250>
 80187aa:	0550      	lsls	r0, r2, #21
 80187ac:	f57f af0c 	bpl.w	80185c8 <_scanf_float+0x60>
 80187b0:	f1b9 0f00 	cmp.w	r9, #0
 80187b4:	f43f af0f 	beq.w	80185d6 <_scanf_float+0x6e>
 80187b8:	0591      	lsls	r1, r2, #22
 80187ba:	bf58      	it	pl
 80187bc:	9901      	ldrpl	r1, [sp, #4]
 80187be:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80187c2:	bf58      	it	pl
 80187c4:	eba9 0101 	subpl.w	r1, r9, r1
 80187c8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80187cc:	bf58      	it	pl
 80187ce:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80187d2:	6022      	str	r2, [r4, #0]
 80187d4:	f04f 0900 	mov.w	r9, #0
 80187d8:	e78a      	b.n	80186f0 <_scanf_float+0x188>
 80187da:	f04f 0a03 	mov.w	sl, #3
 80187de:	e787      	b.n	80186f0 <_scanf_float+0x188>
 80187e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80187e4:	4639      	mov	r1, r7
 80187e6:	4640      	mov	r0, r8
 80187e8:	4798      	blx	r3
 80187ea:	2800      	cmp	r0, #0
 80187ec:	f43f aedf 	beq.w	80185ae <_scanf_float+0x46>
 80187f0:	e6ea      	b.n	80185c8 <_scanf_float+0x60>
 80187f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80187f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80187fa:	463a      	mov	r2, r7
 80187fc:	4640      	mov	r0, r8
 80187fe:	4798      	blx	r3
 8018800:	6923      	ldr	r3, [r4, #16]
 8018802:	3b01      	subs	r3, #1
 8018804:	6123      	str	r3, [r4, #16]
 8018806:	e6ec      	b.n	80185e2 <_scanf_float+0x7a>
 8018808:	1e6b      	subs	r3, r5, #1
 801880a:	2b06      	cmp	r3, #6
 801880c:	d825      	bhi.n	801885a <_scanf_float+0x2f2>
 801880e:	2d02      	cmp	r5, #2
 8018810:	d836      	bhi.n	8018880 <_scanf_float+0x318>
 8018812:	455e      	cmp	r6, fp
 8018814:	f67f aee8 	bls.w	80185e8 <_scanf_float+0x80>
 8018818:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801881c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8018820:	463a      	mov	r2, r7
 8018822:	4640      	mov	r0, r8
 8018824:	4798      	blx	r3
 8018826:	6923      	ldr	r3, [r4, #16]
 8018828:	3b01      	subs	r3, #1
 801882a:	6123      	str	r3, [r4, #16]
 801882c:	e7f1      	b.n	8018812 <_scanf_float+0x2aa>
 801882e:	9802      	ldr	r0, [sp, #8]
 8018830:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018834:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8018838:	9002      	str	r0, [sp, #8]
 801883a:	463a      	mov	r2, r7
 801883c:	4640      	mov	r0, r8
 801883e:	4798      	blx	r3
 8018840:	6923      	ldr	r3, [r4, #16]
 8018842:	3b01      	subs	r3, #1
 8018844:	6123      	str	r3, [r4, #16]
 8018846:	f10a 3aff 	add.w	sl, sl, #4294967295
 801884a:	fa5f fa8a 	uxtb.w	sl, sl
 801884e:	f1ba 0f02 	cmp.w	sl, #2
 8018852:	d1ec      	bne.n	801882e <_scanf_float+0x2c6>
 8018854:	3d03      	subs	r5, #3
 8018856:	b2ed      	uxtb	r5, r5
 8018858:	1b76      	subs	r6, r6, r5
 801885a:	6823      	ldr	r3, [r4, #0]
 801885c:	05da      	lsls	r2, r3, #23
 801885e:	d52f      	bpl.n	80188c0 <_scanf_float+0x358>
 8018860:	055b      	lsls	r3, r3, #21
 8018862:	d510      	bpl.n	8018886 <_scanf_float+0x31e>
 8018864:	455e      	cmp	r6, fp
 8018866:	f67f aebf 	bls.w	80185e8 <_scanf_float+0x80>
 801886a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801886e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8018872:	463a      	mov	r2, r7
 8018874:	4640      	mov	r0, r8
 8018876:	4798      	blx	r3
 8018878:	6923      	ldr	r3, [r4, #16]
 801887a:	3b01      	subs	r3, #1
 801887c:	6123      	str	r3, [r4, #16]
 801887e:	e7f1      	b.n	8018864 <_scanf_float+0x2fc>
 8018880:	46aa      	mov	sl, r5
 8018882:	9602      	str	r6, [sp, #8]
 8018884:	e7df      	b.n	8018846 <_scanf_float+0x2de>
 8018886:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801888a:	6923      	ldr	r3, [r4, #16]
 801888c:	2965      	cmp	r1, #101	; 0x65
 801888e:	f103 33ff 	add.w	r3, r3, #4294967295
 8018892:	f106 35ff 	add.w	r5, r6, #4294967295
 8018896:	6123      	str	r3, [r4, #16]
 8018898:	d00c      	beq.n	80188b4 <_scanf_float+0x34c>
 801889a:	2945      	cmp	r1, #69	; 0x45
 801889c:	d00a      	beq.n	80188b4 <_scanf_float+0x34c>
 801889e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80188a2:	463a      	mov	r2, r7
 80188a4:	4640      	mov	r0, r8
 80188a6:	4798      	blx	r3
 80188a8:	6923      	ldr	r3, [r4, #16]
 80188aa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80188ae:	3b01      	subs	r3, #1
 80188b0:	1eb5      	subs	r5, r6, #2
 80188b2:	6123      	str	r3, [r4, #16]
 80188b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80188b8:	463a      	mov	r2, r7
 80188ba:	4640      	mov	r0, r8
 80188bc:	4798      	blx	r3
 80188be:	462e      	mov	r6, r5
 80188c0:	6825      	ldr	r5, [r4, #0]
 80188c2:	f015 0510 	ands.w	r5, r5, #16
 80188c6:	d158      	bne.n	801897a <_scanf_float+0x412>
 80188c8:	7035      	strb	r5, [r6, #0]
 80188ca:	6823      	ldr	r3, [r4, #0]
 80188cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80188d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80188d4:	d11c      	bne.n	8018910 <_scanf_float+0x3a8>
 80188d6:	9b01      	ldr	r3, [sp, #4]
 80188d8:	454b      	cmp	r3, r9
 80188da:	eba3 0209 	sub.w	r2, r3, r9
 80188de:	d124      	bne.n	801892a <_scanf_float+0x3c2>
 80188e0:	2200      	movs	r2, #0
 80188e2:	4659      	mov	r1, fp
 80188e4:	4640      	mov	r0, r8
 80188e6:	f002 fd1b 	bl	801b320 <_strtod_r>
 80188ea:	9b03      	ldr	r3, [sp, #12]
 80188ec:	6821      	ldr	r1, [r4, #0]
 80188ee:	681b      	ldr	r3, [r3, #0]
 80188f0:	f011 0f02 	tst.w	r1, #2
 80188f4:	ec57 6b10 	vmov	r6, r7, d0
 80188f8:	f103 0204 	add.w	r2, r3, #4
 80188fc:	d020      	beq.n	8018940 <_scanf_float+0x3d8>
 80188fe:	9903      	ldr	r1, [sp, #12]
 8018900:	600a      	str	r2, [r1, #0]
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	e9c3 6700 	strd	r6, r7, [r3]
 8018908:	68e3      	ldr	r3, [r4, #12]
 801890a:	3301      	adds	r3, #1
 801890c:	60e3      	str	r3, [r4, #12]
 801890e:	e66c      	b.n	80185ea <_scanf_float+0x82>
 8018910:	9b04      	ldr	r3, [sp, #16]
 8018912:	2b00      	cmp	r3, #0
 8018914:	d0e4      	beq.n	80188e0 <_scanf_float+0x378>
 8018916:	9905      	ldr	r1, [sp, #20]
 8018918:	230a      	movs	r3, #10
 801891a:	462a      	mov	r2, r5
 801891c:	3101      	adds	r1, #1
 801891e:	4640      	mov	r0, r8
 8018920:	f002 fd86 	bl	801b430 <_strtol_r>
 8018924:	9b04      	ldr	r3, [sp, #16]
 8018926:	9e05      	ldr	r6, [sp, #20]
 8018928:	1ac2      	subs	r2, r0, r3
 801892a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801892e:	429e      	cmp	r6, r3
 8018930:	bf28      	it	cs
 8018932:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8018936:	4912      	ldr	r1, [pc, #72]	; (8018980 <_scanf_float+0x418>)
 8018938:	4630      	mov	r0, r6
 801893a:	f000 f943 	bl	8018bc4 <siprintf>
 801893e:	e7cf      	b.n	80188e0 <_scanf_float+0x378>
 8018940:	f011 0f04 	tst.w	r1, #4
 8018944:	9903      	ldr	r1, [sp, #12]
 8018946:	600a      	str	r2, [r1, #0]
 8018948:	d1db      	bne.n	8018902 <_scanf_float+0x39a>
 801894a:	f8d3 8000 	ldr.w	r8, [r3]
 801894e:	ee10 2a10 	vmov	r2, s0
 8018952:	ee10 0a10 	vmov	r0, s0
 8018956:	463b      	mov	r3, r7
 8018958:	4639      	mov	r1, r7
 801895a:	f7e8 f917 	bl	8000b8c <__aeabi_dcmpun>
 801895e:	b128      	cbz	r0, 801896c <_scanf_float+0x404>
 8018960:	4808      	ldr	r0, [pc, #32]	; (8018984 <_scanf_float+0x41c>)
 8018962:	f000 fb57 	bl	8019014 <nanf>
 8018966:	ed88 0a00 	vstr	s0, [r8]
 801896a:	e7cd      	b.n	8018908 <_scanf_float+0x3a0>
 801896c:	4630      	mov	r0, r6
 801896e:	4639      	mov	r1, r7
 8018970:	f7e8 f96a 	bl	8000c48 <__aeabi_d2f>
 8018974:	f8c8 0000 	str.w	r0, [r8]
 8018978:	e7c6      	b.n	8018908 <_scanf_float+0x3a0>
 801897a:	2500      	movs	r5, #0
 801897c:	e635      	b.n	80185ea <_scanf_float+0x82>
 801897e:	bf00      	nop
 8018980:	0801daca 	.word	0x0801daca
 8018984:	0801de78 	.word	0x0801de78

08018988 <std>:
 8018988:	2300      	movs	r3, #0
 801898a:	b510      	push	{r4, lr}
 801898c:	4604      	mov	r4, r0
 801898e:	e9c0 3300 	strd	r3, r3, [r0]
 8018992:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018996:	6083      	str	r3, [r0, #8]
 8018998:	8181      	strh	r1, [r0, #12]
 801899a:	6643      	str	r3, [r0, #100]	; 0x64
 801899c:	81c2      	strh	r2, [r0, #14]
 801899e:	6183      	str	r3, [r0, #24]
 80189a0:	4619      	mov	r1, r3
 80189a2:	2208      	movs	r2, #8
 80189a4:	305c      	adds	r0, #92	; 0x5c
 80189a6:	f000 fa33 	bl	8018e10 <memset>
 80189aa:	4b05      	ldr	r3, [pc, #20]	; (80189c0 <std+0x38>)
 80189ac:	6263      	str	r3, [r4, #36]	; 0x24
 80189ae:	4b05      	ldr	r3, [pc, #20]	; (80189c4 <std+0x3c>)
 80189b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80189b2:	4b05      	ldr	r3, [pc, #20]	; (80189c8 <std+0x40>)
 80189b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80189b6:	4b05      	ldr	r3, [pc, #20]	; (80189cc <std+0x44>)
 80189b8:	6224      	str	r4, [r4, #32]
 80189ba:	6323      	str	r3, [r4, #48]	; 0x30
 80189bc:	bd10      	pop	{r4, pc}
 80189be:	bf00      	nop
 80189c0:	08018c5d 	.word	0x08018c5d
 80189c4:	08018c83 	.word	0x08018c83
 80189c8:	08018cbb 	.word	0x08018cbb
 80189cc:	08018cdf 	.word	0x08018cdf

080189d0 <stdio_exit_handler>:
 80189d0:	4a02      	ldr	r2, [pc, #8]	; (80189dc <stdio_exit_handler+0xc>)
 80189d2:	4903      	ldr	r1, [pc, #12]	; (80189e0 <stdio_exit_handler+0x10>)
 80189d4:	4803      	ldr	r0, [pc, #12]	; (80189e4 <stdio_exit_handler+0x14>)
 80189d6:	f000 b869 	b.w	8018aac <_fwalk_sglue>
 80189da:	bf00      	nop
 80189dc:	20000140 	.word	0x20000140
 80189e0:	0801c0b9 	.word	0x0801c0b9
 80189e4:	2000014c 	.word	0x2000014c

080189e8 <cleanup_stdio>:
 80189e8:	6841      	ldr	r1, [r0, #4]
 80189ea:	4b0c      	ldr	r3, [pc, #48]	; (8018a1c <cleanup_stdio+0x34>)
 80189ec:	4299      	cmp	r1, r3
 80189ee:	b510      	push	{r4, lr}
 80189f0:	4604      	mov	r4, r0
 80189f2:	d001      	beq.n	80189f8 <cleanup_stdio+0x10>
 80189f4:	f003 fb60 	bl	801c0b8 <_fflush_r>
 80189f8:	68a1      	ldr	r1, [r4, #8]
 80189fa:	4b09      	ldr	r3, [pc, #36]	; (8018a20 <cleanup_stdio+0x38>)
 80189fc:	4299      	cmp	r1, r3
 80189fe:	d002      	beq.n	8018a06 <cleanup_stdio+0x1e>
 8018a00:	4620      	mov	r0, r4
 8018a02:	f003 fb59 	bl	801c0b8 <_fflush_r>
 8018a06:	68e1      	ldr	r1, [r4, #12]
 8018a08:	4b06      	ldr	r3, [pc, #24]	; (8018a24 <cleanup_stdio+0x3c>)
 8018a0a:	4299      	cmp	r1, r3
 8018a0c:	d004      	beq.n	8018a18 <cleanup_stdio+0x30>
 8018a0e:	4620      	mov	r0, r4
 8018a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018a14:	f003 bb50 	b.w	801c0b8 <_fflush_r>
 8018a18:	bd10      	pop	{r4, pc}
 8018a1a:	bf00      	nop
 8018a1c:	20007c4c 	.word	0x20007c4c
 8018a20:	20007cb4 	.word	0x20007cb4
 8018a24:	20007d1c 	.word	0x20007d1c

08018a28 <global_stdio_init.part.0>:
 8018a28:	b510      	push	{r4, lr}
 8018a2a:	4b0b      	ldr	r3, [pc, #44]	; (8018a58 <global_stdio_init.part.0+0x30>)
 8018a2c:	4c0b      	ldr	r4, [pc, #44]	; (8018a5c <global_stdio_init.part.0+0x34>)
 8018a2e:	4a0c      	ldr	r2, [pc, #48]	; (8018a60 <global_stdio_init.part.0+0x38>)
 8018a30:	601a      	str	r2, [r3, #0]
 8018a32:	4620      	mov	r0, r4
 8018a34:	2200      	movs	r2, #0
 8018a36:	2104      	movs	r1, #4
 8018a38:	f7ff ffa6 	bl	8018988 <std>
 8018a3c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8018a40:	2201      	movs	r2, #1
 8018a42:	2109      	movs	r1, #9
 8018a44:	f7ff ffa0 	bl	8018988 <std>
 8018a48:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8018a4c:	2202      	movs	r2, #2
 8018a4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018a52:	2112      	movs	r1, #18
 8018a54:	f7ff bf98 	b.w	8018988 <std>
 8018a58:	20007d84 	.word	0x20007d84
 8018a5c:	20007c4c 	.word	0x20007c4c
 8018a60:	080189d1 	.word	0x080189d1

08018a64 <__sfp_lock_acquire>:
 8018a64:	4801      	ldr	r0, [pc, #4]	; (8018a6c <__sfp_lock_acquire+0x8>)
 8018a66:	f000 bac5 	b.w	8018ff4 <__retarget_lock_acquire_recursive>
 8018a6a:	bf00      	nop
 8018a6c:	20007d8d 	.word	0x20007d8d

08018a70 <__sfp_lock_release>:
 8018a70:	4801      	ldr	r0, [pc, #4]	; (8018a78 <__sfp_lock_release+0x8>)
 8018a72:	f000 bac0 	b.w	8018ff6 <__retarget_lock_release_recursive>
 8018a76:	bf00      	nop
 8018a78:	20007d8d 	.word	0x20007d8d

08018a7c <__sinit>:
 8018a7c:	b510      	push	{r4, lr}
 8018a7e:	4604      	mov	r4, r0
 8018a80:	f7ff fff0 	bl	8018a64 <__sfp_lock_acquire>
 8018a84:	6a23      	ldr	r3, [r4, #32]
 8018a86:	b11b      	cbz	r3, 8018a90 <__sinit+0x14>
 8018a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018a8c:	f7ff bff0 	b.w	8018a70 <__sfp_lock_release>
 8018a90:	4b04      	ldr	r3, [pc, #16]	; (8018aa4 <__sinit+0x28>)
 8018a92:	6223      	str	r3, [r4, #32]
 8018a94:	4b04      	ldr	r3, [pc, #16]	; (8018aa8 <__sinit+0x2c>)
 8018a96:	681b      	ldr	r3, [r3, #0]
 8018a98:	2b00      	cmp	r3, #0
 8018a9a:	d1f5      	bne.n	8018a88 <__sinit+0xc>
 8018a9c:	f7ff ffc4 	bl	8018a28 <global_stdio_init.part.0>
 8018aa0:	e7f2      	b.n	8018a88 <__sinit+0xc>
 8018aa2:	bf00      	nop
 8018aa4:	080189e9 	.word	0x080189e9
 8018aa8:	20007d84 	.word	0x20007d84

08018aac <_fwalk_sglue>:
 8018aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018ab0:	4607      	mov	r7, r0
 8018ab2:	4688      	mov	r8, r1
 8018ab4:	4614      	mov	r4, r2
 8018ab6:	2600      	movs	r6, #0
 8018ab8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018abc:	f1b9 0901 	subs.w	r9, r9, #1
 8018ac0:	d505      	bpl.n	8018ace <_fwalk_sglue+0x22>
 8018ac2:	6824      	ldr	r4, [r4, #0]
 8018ac4:	2c00      	cmp	r4, #0
 8018ac6:	d1f7      	bne.n	8018ab8 <_fwalk_sglue+0xc>
 8018ac8:	4630      	mov	r0, r6
 8018aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018ace:	89ab      	ldrh	r3, [r5, #12]
 8018ad0:	2b01      	cmp	r3, #1
 8018ad2:	d907      	bls.n	8018ae4 <_fwalk_sglue+0x38>
 8018ad4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018ad8:	3301      	adds	r3, #1
 8018ada:	d003      	beq.n	8018ae4 <_fwalk_sglue+0x38>
 8018adc:	4629      	mov	r1, r5
 8018ade:	4638      	mov	r0, r7
 8018ae0:	47c0      	blx	r8
 8018ae2:	4306      	orrs	r6, r0
 8018ae4:	3568      	adds	r5, #104	; 0x68
 8018ae6:	e7e9      	b.n	8018abc <_fwalk_sglue+0x10>

08018ae8 <iprintf>:
 8018ae8:	b40f      	push	{r0, r1, r2, r3}
 8018aea:	b507      	push	{r0, r1, r2, lr}
 8018aec:	4906      	ldr	r1, [pc, #24]	; (8018b08 <iprintf+0x20>)
 8018aee:	ab04      	add	r3, sp, #16
 8018af0:	6808      	ldr	r0, [r1, #0]
 8018af2:	f853 2b04 	ldr.w	r2, [r3], #4
 8018af6:	6881      	ldr	r1, [r0, #8]
 8018af8:	9301      	str	r3, [sp, #4]
 8018afa:	f002 ffef 	bl	801badc <_vfiprintf_r>
 8018afe:	b003      	add	sp, #12
 8018b00:	f85d eb04 	ldr.w	lr, [sp], #4
 8018b04:	b004      	add	sp, #16
 8018b06:	4770      	bx	lr
 8018b08:	20000198 	.word	0x20000198

08018b0c <_puts_r>:
 8018b0c:	6a03      	ldr	r3, [r0, #32]
 8018b0e:	b570      	push	{r4, r5, r6, lr}
 8018b10:	6884      	ldr	r4, [r0, #8]
 8018b12:	4605      	mov	r5, r0
 8018b14:	460e      	mov	r6, r1
 8018b16:	b90b      	cbnz	r3, 8018b1c <_puts_r+0x10>
 8018b18:	f7ff ffb0 	bl	8018a7c <__sinit>
 8018b1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018b1e:	07db      	lsls	r3, r3, #31
 8018b20:	d405      	bmi.n	8018b2e <_puts_r+0x22>
 8018b22:	89a3      	ldrh	r3, [r4, #12]
 8018b24:	0598      	lsls	r0, r3, #22
 8018b26:	d402      	bmi.n	8018b2e <_puts_r+0x22>
 8018b28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018b2a:	f000 fa63 	bl	8018ff4 <__retarget_lock_acquire_recursive>
 8018b2e:	89a3      	ldrh	r3, [r4, #12]
 8018b30:	0719      	lsls	r1, r3, #28
 8018b32:	d513      	bpl.n	8018b5c <_puts_r+0x50>
 8018b34:	6923      	ldr	r3, [r4, #16]
 8018b36:	b18b      	cbz	r3, 8018b5c <_puts_r+0x50>
 8018b38:	3e01      	subs	r6, #1
 8018b3a:	68a3      	ldr	r3, [r4, #8]
 8018b3c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8018b40:	3b01      	subs	r3, #1
 8018b42:	60a3      	str	r3, [r4, #8]
 8018b44:	b9e9      	cbnz	r1, 8018b82 <_puts_r+0x76>
 8018b46:	2b00      	cmp	r3, #0
 8018b48:	da2e      	bge.n	8018ba8 <_puts_r+0x9c>
 8018b4a:	4622      	mov	r2, r4
 8018b4c:	210a      	movs	r1, #10
 8018b4e:	4628      	mov	r0, r5
 8018b50:	f000 f8c9 	bl	8018ce6 <__swbuf_r>
 8018b54:	3001      	adds	r0, #1
 8018b56:	d007      	beq.n	8018b68 <_puts_r+0x5c>
 8018b58:	250a      	movs	r5, #10
 8018b5a:	e007      	b.n	8018b6c <_puts_r+0x60>
 8018b5c:	4621      	mov	r1, r4
 8018b5e:	4628      	mov	r0, r5
 8018b60:	f000 f8fe 	bl	8018d60 <__swsetup_r>
 8018b64:	2800      	cmp	r0, #0
 8018b66:	d0e7      	beq.n	8018b38 <_puts_r+0x2c>
 8018b68:	f04f 35ff 	mov.w	r5, #4294967295
 8018b6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018b6e:	07da      	lsls	r2, r3, #31
 8018b70:	d405      	bmi.n	8018b7e <_puts_r+0x72>
 8018b72:	89a3      	ldrh	r3, [r4, #12]
 8018b74:	059b      	lsls	r3, r3, #22
 8018b76:	d402      	bmi.n	8018b7e <_puts_r+0x72>
 8018b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018b7a:	f000 fa3c 	bl	8018ff6 <__retarget_lock_release_recursive>
 8018b7e:	4628      	mov	r0, r5
 8018b80:	bd70      	pop	{r4, r5, r6, pc}
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	da04      	bge.n	8018b90 <_puts_r+0x84>
 8018b86:	69a2      	ldr	r2, [r4, #24]
 8018b88:	429a      	cmp	r2, r3
 8018b8a:	dc06      	bgt.n	8018b9a <_puts_r+0x8e>
 8018b8c:	290a      	cmp	r1, #10
 8018b8e:	d004      	beq.n	8018b9a <_puts_r+0x8e>
 8018b90:	6823      	ldr	r3, [r4, #0]
 8018b92:	1c5a      	adds	r2, r3, #1
 8018b94:	6022      	str	r2, [r4, #0]
 8018b96:	7019      	strb	r1, [r3, #0]
 8018b98:	e7cf      	b.n	8018b3a <_puts_r+0x2e>
 8018b9a:	4622      	mov	r2, r4
 8018b9c:	4628      	mov	r0, r5
 8018b9e:	f000 f8a2 	bl	8018ce6 <__swbuf_r>
 8018ba2:	3001      	adds	r0, #1
 8018ba4:	d1c9      	bne.n	8018b3a <_puts_r+0x2e>
 8018ba6:	e7df      	b.n	8018b68 <_puts_r+0x5c>
 8018ba8:	6823      	ldr	r3, [r4, #0]
 8018baa:	250a      	movs	r5, #10
 8018bac:	1c5a      	adds	r2, r3, #1
 8018bae:	6022      	str	r2, [r4, #0]
 8018bb0:	701d      	strb	r5, [r3, #0]
 8018bb2:	e7db      	b.n	8018b6c <_puts_r+0x60>

08018bb4 <puts>:
 8018bb4:	4b02      	ldr	r3, [pc, #8]	; (8018bc0 <puts+0xc>)
 8018bb6:	4601      	mov	r1, r0
 8018bb8:	6818      	ldr	r0, [r3, #0]
 8018bba:	f7ff bfa7 	b.w	8018b0c <_puts_r>
 8018bbe:	bf00      	nop
 8018bc0:	20000198 	.word	0x20000198

08018bc4 <siprintf>:
 8018bc4:	b40e      	push	{r1, r2, r3}
 8018bc6:	b500      	push	{lr}
 8018bc8:	b09c      	sub	sp, #112	; 0x70
 8018bca:	ab1d      	add	r3, sp, #116	; 0x74
 8018bcc:	9002      	str	r0, [sp, #8]
 8018bce:	9006      	str	r0, [sp, #24]
 8018bd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018bd4:	4809      	ldr	r0, [pc, #36]	; (8018bfc <siprintf+0x38>)
 8018bd6:	9107      	str	r1, [sp, #28]
 8018bd8:	9104      	str	r1, [sp, #16]
 8018bda:	4909      	ldr	r1, [pc, #36]	; (8018c00 <siprintf+0x3c>)
 8018bdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8018be0:	9105      	str	r1, [sp, #20]
 8018be2:	6800      	ldr	r0, [r0, #0]
 8018be4:	9301      	str	r3, [sp, #4]
 8018be6:	a902      	add	r1, sp, #8
 8018be8:	f002 fc7e 	bl	801b4e8 <_svfiprintf_r>
 8018bec:	9b02      	ldr	r3, [sp, #8]
 8018bee:	2200      	movs	r2, #0
 8018bf0:	701a      	strb	r2, [r3, #0]
 8018bf2:	b01c      	add	sp, #112	; 0x70
 8018bf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8018bf8:	b003      	add	sp, #12
 8018bfa:	4770      	bx	lr
 8018bfc:	20000198 	.word	0x20000198
 8018c00:	ffff0208 	.word	0xffff0208

08018c04 <siscanf>:
 8018c04:	b40e      	push	{r1, r2, r3}
 8018c06:	b510      	push	{r4, lr}
 8018c08:	b09f      	sub	sp, #124	; 0x7c
 8018c0a:	ac21      	add	r4, sp, #132	; 0x84
 8018c0c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8018c10:	f854 2b04 	ldr.w	r2, [r4], #4
 8018c14:	9201      	str	r2, [sp, #4]
 8018c16:	f8ad 101c 	strh.w	r1, [sp, #28]
 8018c1a:	9004      	str	r0, [sp, #16]
 8018c1c:	9008      	str	r0, [sp, #32]
 8018c1e:	f7e7 fb57 	bl	80002d0 <strlen>
 8018c22:	4b0c      	ldr	r3, [pc, #48]	; (8018c54 <siscanf+0x50>)
 8018c24:	9005      	str	r0, [sp, #20]
 8018c26:	9009      	str	r0, [sp, #36]	; 0x24
 8018c28:	930d      	str	r3, [sp, #52]	; 0x34
 8018c2a:	480b      	ldr	r0, [pc, #44]	; (8018c58 <siscanf+0x54>)
 8018c2c:	9a01      	ldr	r2, [sp, #4]
 8018c2e:	6800      	ldr	r0, [r0, #0]
 8018c30:	9403      	str	r4, [sp, #12]
 8018c32:	2300      	movs	r3, #0
 8018c34:	9311      	str	r3, [sp, #68]	; 0x44
 8018c36:	9316      	str	r3, [sp, #88]	; 0x58
 8018c38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018c3c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018c40:	a904      	add	r1, sp, #16
 8018c42:	4623      	mov	r3, r4
 8018c44:	f002 fda8 	bl	801b798 <__ssvfiscanf_r>
 8018c48:	b01f      	add	sp, #124	; 0x7c
 8018c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018c4e:	b003      	add	sp, #12
 8018c50:	4770      	bx	lr
 8018c52:	bf00      	nop
 8018c54:	08018c7f 	.word	0x08018c7f
 8018c58:	20000198 	.word	0x20000198

08018c5c <__sread>:
 8018c5c:	b510      	push	{r4, lr}
 8018c5e:	460c      	mov	r4, r1
 8018c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018c64:	f000 f968 	bl	8018f38 <_read_r>
 8018c68:	2800      	cmp	r0, #0
 8018c6a:	bfab      	itete	ge
 8018c6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018c6e:	89a3      	ldrhlt	r3, [r4, #12]
 8018c70:	181b      	addge	r3, r3, r0
 8018c72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018c76:	bfac      	ite	ge
 8018c78:	6563      	strge	r3, [r4, #84]	; 0x54
 8018c7a:	81a3      	strhlt	r3, [r4, #12]
 8018c7c:	bd10      	pop	{r4, pc}

08018c7e <__seofread>:
 8018c7e:	2000      	movs	r0, #0
 8018c80:	4770      	bx	lr

08018c82 <__swrite>:
 8018c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c86:	461f      	mov	r7, r3
 8018c88:	898b      	ldrh	r3, [r1, #12]
 8018c8a:	05db      	lsls	r3, r3, #23
 8018c8c:	4605      	mov	r5, r0
 8018c8e:	460c      	mov	r4, r1
 8018c90:	4616      	mov	r6, r2
 8018c92:	d505      	bpl.n	8018ca0 <__swrite+0x1e>
 8018c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018c98:	2302      	movs	r3, #2
 8018c9a:	2200      	movs	r2, #0
 8018c9c:	f000 f93a 	bl	8018f14 <_lseek_r>
 8018ca0:	89a3      	ldrh	r3, [r4, #12]
 8018ca2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018ca6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018caa:	81a3      	strh	r3, [r4, #12]
 8018cac:	4632      	mov	r2, r6
 8018cae:	463b      	mov	r3, r7
 8018cb0:	4628      	mov	r0, r5
 8018cb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018cb6:	f000 b961 	b.w	8018f7c <_write_r>

08018cba <__sseek>:
 8018cba:	b510      	push	{r4, lr}
 8018cbc:	460c      	mov	r4, r1
 8018cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018cc2:	f000 f927 	bl	8018f14 <_lseek_r>
 8018cc6:	1c43      	adds	r3, r0, #1
 8018cc8:	89a3      	ldrh	r3, [r4, #12]
 8018cca:	bf15      	itete	ne
 8018ccc:	6560      	strne	r0, [r4, #84]	; 0x54
 8018cce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018cd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018cd6:	81a3      	strheq	r3, [r4, #12]
 8018cd8:	bf18      	it	ne
 8018cda:	81a3      	strhne	r3, [r4, #12]
 8018cdc:	bd10      	pop	{r4, pc}

08018cde <__sclose>:
 8018cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018ce2:	f000 b8b1 	b.w	8018e48 <_close_r>

08018ce6 <__swbuf_r>:
 8018ce6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ce8:	460e      	mov	r6, r1
 8018cea:	4614      	mov	r4, r2
 8018cec:	4605      	mov	r5, r0
 8018cee:	b118      	cbz	r0, 8018cf8 <__swbuf_r+0x12>
 8018cf0:	6a03      	ldr	r3, [r0, #32]
 8018cf2:	b90b      	cbnz	r3, 8018cf8 <__swbuf_r+0x12>
 8018cf4:	f7ff fec2 	bl	8018a7c <__sinit>
 8018cf8:	69a3      	ldr	r3, [r4, #24]
 8018cfa:	60a3      	str	r3, [r4, #8]
 8018cfc:	89a3      	ldrh	r3, [r4, #12]
 8018cfe:	071a      	lsls	r2, r3, #28
 8018d00:	d525      	bpl.n	8018d4e <__swbuf_r+0x68>
 8018d02:	6923      	ldr	r3, [r4, #16]
 8018d04:	b31b      	cbz	r3, 8018d4e <__swbuf_r+0x68>
 8018d06:	6823      	ldr	r3, [r4, #0]
 8018d08:	6922      	ldr	r2, [r4, #16]
 8018d0a:	1a98      	subs	r0, r3, r2
 8018d0c:	6963      	ldr	r3, [r4, #20]
 8018d0e:	b2f6      	uxtb	r6, r6
 8018d10:	4283      	cmp	r3, r0
 8018d12:	4637      	mov	r7, r6
 8018d14:	dc04      	bgt.n	8018d20 <__swbuf_r+0x3a>
 8018d16:	4621      	mov	r1, r4
 8018d18:	4628      	mov	r0, r5
 8018d1a:	f003 f9cd 	bl	801c0b8 <_fflush_r>
 8018d1e:	b9e0      	cbnz	r0, 8018d5a <__swbuf_r+0x74>
 8018d20:	68a3      	ldr	r3, [r4, #8]
 8018d22:	3b01      	subs	r3, #1
 8018d24:	60a3      	str	r3, [r4, #8]
 8018d26:	6823      	ldr	r3, [r4, #0]
 8018d28:	1c5a      	adds	r2, r3, #1
 8018d2a:	6022      	str	r2, [r4, #0]
 8018d2c:	701e      	strb	r6, [r3, #0]
 8018d2e:	6962      	ldr	r2, [r4, #20]
 8018d30:	1c43      	adds	r3, r0, #1
 8018d32:	429a      	cmp	r2, r3
 8018d34:	d004      	beq.n	8018d40 <__swbuf_r+0x5a>
 8018d36:	89a3      	ldrh	r3, [r4, #12]
 8018d38:	07db      	lsls	r3, r3, #31
 8018d3a:	d506      	bpl.n	8018d4a <__swbuf_r+0x64>
 8018d3c:	2e0a      	cmp	r6, #10
 8018d3e:	d104      	bne.n	8018d4a <__swbuf_r+0x64>
 8018d40:	4621      	mov	r1, r4
 8018d42:	4628      	mov	r0, r5
 8018d44:	f003 f9b8 	bl	801c0b8 <_fflush_r>
 8018d48:	b938      	cbnz	r0, 8018d5a <__swbuf_r+0x74>
 8018d4a:	4638      	mov	r0, r7
 8018d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d4e:	4621      	mov	r1, r4
 8018d50:	4628      	mov	r0, r5
 8018d52:	f000 f805 	bl	8018d60 <__swsetup_r>
 8018d56:	2800      	cmp	r0, #0
 8018d58:	d0d5      	beq.n	8018d06 <__swbuf_r+0x20>
 8018d5a:	f04f 37ff 	mov.w	r7, #4294967295
 8018d5e:	e7f4      	b.n	8018d4a <__swbuf_r+0x64>

08018d60 <__swsetup_r>:
 8018d60:	b538      	push	{r3, r4, r5, lr}
 8018d62:	4b2a      	ldr	r3, [pc, #168]	; (8018e0c <__swsetup_r+0xac>)
 8018d64:	4605      	mov	r5, r0
 8018d66:	6818      	ldr	r0, [r3, #0]
 8018d68:	460c      	mov	r4, r1
 8018d6a:	b118      	cbz	r0, 8018d74 <__swsetup_r+0x14>
 8018d6c:	6a03      	ldr	r3, [r0, #32]
 8018d6e:	b90b      	cbnz	r3, 8018d74 <__swsetup_r+0x14>
 8018d70:	f7ff fe84 	bl	8018a7c <__sinit>
 8018d74:	89a3      	ldrh	r3, [r4, #12]
 8018d76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018d7a:	0718      	lsls	r0, r3, #28
 8018d7c:	d422      	bmi.n	8018dc4 <__swsetup_r+0x64>
 8018d7e:	06d9      	lsls	r1, r3, #27
 8018d80:	d407      	bmi.n	8018d92 <__swsetup_r+0x32>
 8018d82:	2309      	movs	r3, #9
 8018d84:	602b      	str	r3, [r5, #0]
 8018d86:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018d8a:	81a3      	strh	r3, [r4, #12]
 8018d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8018d90:	e034      	b.n	8018dfc <__swsetup_r+0x9c>
 8018d92:	0758      	lsls	r0, r3, #29
 8018d94:	d512      	bpl.n	8018dbc <__swsetup_r+0x5c>
 8018d96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018d98:	b141      	cbz	r1, 8018dac <__swsetup_r+0x4c>
 8018d9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018d9e:	4299      	cmp	r1, r3
 8018da0:	d002      	beq.n	8018da8 <__swsetup_r+0x48>
 8018da2:	4628      	mov	r0, r5
 8018da4:	f000 ffb6 	bl	8019d14 <_free_r>
 8018da8:	2300      	movs	r3, #0
 8018daa:	6363      	str	r3, [r4, #52]	; 0x34
 8018dac:	89a3      	ldrh	r3, [r4, #12]
 8018dae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018db2:	81a3      	strh	r3, [r4, #12]
 8018db4:	2300      	movs	r3, #0
 8018db6:	6063      	str	r3, [r4, #4]
 8018db8:	6923      	ldr	r3, [r4, #16]
 8018dba:	6023      	str	r3, [r4, #0]
 8018dbc:	89a3      	ldrh	r3, [r4, #12]
 8018dbe:	f043 0308 	orr.w	r3, r3, #8
 8018dc2:	81a3      	strh	r3, [r4, #12]
 8018dc4:	6923      	ldr	r3, [r4, #16]
 8018dc6:	b94b      	cbnz	r3, 8018ddc <__swsetup_r+0x7c>
 8018dc8:	89a3      	ldrh	r3, [r4, #12]
 8018dca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018dce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018dd2:	d003      	beq.n	8018ddc <__swsetup_r+0x7c>
 8018dd4:	4621      	mov	r1, r4
 8018dd6:	4628      	mov	r0, r5
 8018dd8:	f003 f9bc 	bl	801c154 <__smakebuf_r>
 8018ddc:	89a0      	ldrh	r0, [r4, #12]
 8018dde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018de2:	f010 0301 	ands.w	r3, r0, #1
 8018de6:	d00a      	beq.n	8018dfe <__swsetup_r+0x9e>
 8018de8:	2300      	movs	r3, #0
 8018dea:	60a3      	str	r3, [r4, #8]
 8018dec:	6963      	ldr	r3, [r4, #20]
 8018dee:	425b      	negs	r3, r3
 8018df0:	61a3      	str	r3, [r4, #24]
 8018df2:	6923      	ldr	r3, [r4, #16]
 8018df4:	b943      	cbnz	r3, 8018e08 <__swsetup_r+0xa8>
 8018df6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018dfa:	d1c4      	bne.n	8018d86 <__swsetup_r+0x26>
 8018dfc:	bd38      	pop	{r3, r4, r5, pc}
 8018dfe:	0781      	lsls	r1, r0, #30
 8018e00:	bf58      	it	pl
 8018e02:	6963      	ldrpl	r3, [r4, #20]
 8018e04:	60a3      	str	r3, [r4, #8]
 8018e06:	e7f4      	b.n	8018df2 <__swsetup_r+0x92>
 8018e08:	2000      	movs	r0, #0
 8018e0a:	e7f7      	b.n	8018dfc <__swsetup_r+0x9c>
 8018e0c:	20000198 	.word	0x20000198

08018e10 <memset>:
 8018e10:	4402      	add	r2, r0
 8018e12:	4603      	mov	r3, r0
 8018e14:	4293      	cmp	r3, r2
 8018e16:	d100      	bne.n	8018e1a <memset+0xa>
 8018e18:	4770      	bx	lr
 8018e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8018e1e:	e7f9      	b.n	8018e14 <memset+0x4>

08018e20 <strcat>:
 8018e20:	b510      	push	{r4, lr}
 8018e22:	4602      	mov	r2, r0
 8018e24:	7814      	ldrb	r4, [r2, #0]
 8018e26:	4613      	mov	r3, r2
 8018e28:	3201      	adds	r2, #1
 8018e2a:	2c00      	cmp	r4, #0
 8018e2c:	d1fa      	bne.n	8018e24 <strcat+0x4>
 8018e2e:	3b01      	subs	r3, #1
 8018e30:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018e34:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018e38:	2a00      	cmp	r2, #0
 8018e3a:	d1f9      	bne.n	8018e30 <strcat+0x10>
 8018e3c:	bd10      	pop	{r4, pc}
	...

08018e40 <_localeconv_r>:
 8018e40:	4800      	ldr	r0, [pc, #0]	; (8018e44 <_localeconv_r+0x4>)
 8018e42:	4770      	bx	lr
 8018e44:	2000028c 	.word	0x2000028c

08018e48 <_close_r>:
 8018e48:	b538      	push	{r3, r4, r5, lr}
 8018e4a:	4d06      	ldr	r5, [pc, #24]	; (8018e64 <_close_r+0x1c>)
 8018e4c:	2300      	movs	r3, #0
 8018e4e:	4604      	mov	r4, r0
 8018e50:	4608      	mov	r0, r1
 8018e52:	602b      	str	r3, [r5, #0]
 8018e54:	f7ea f951 	bl	80030fa <_close>
 8018e58:	1c43      	adds	r3, r0, #1
 8018e5a:	d102      	bne.n	8018e62 <_close_r+0x1a>
 8018e5c:	682b      	ldr	r3, [r5, #0]
 8018e5e:	b103      	cbz	r3, 8018e62 <_close_r+0x1a>
 8018e60:	6023      	str	r3, [r4, #0]
 8018e62:	bd38      	pop	{r3, r4, r5, pc}
 8018e64:	20007d88 	.word	0x20007d88

08018e68 <_reclaim_reent>:
 8018e68:	4b29      	ldr	r3, [pc, #164]	; (8018f10 <_reclaim_reent+0xa8>)
 8018e6a:	681b      	ldr	r3, [r3, #0]
 8018e6c:	4283      	cmp	r3, r0
 8018e6e:	b570      	push	{r4, r5, r6, lr}
 8018e70:	4604      	mov	r4, r0
 8018e72:	d04b      	beq.n	8018f0c <_reclaim_reent+0xa4>
 8018e74:	69c3      	ldr	r3, [r0, #28]
 8018e76:	b143      	cbz	r3, 8018e8a <_reclaim_reent+0x22>
 8018e78:	68db      	ldr	r3, [r3, #12]
 8018e7a:	2b00      	cmp	r3, #0
 8018e7c:	d144      	bne.n	8018f08 <_reclaim_reent+0xa0>
 8018e7e:	69e3      	ldr	r3, [r4, #28]
 8018e80:	6819      	ldr	r1, [r3, #0]
 8018e82:	b111      	cbz	r1, 8018e8a <_reclaim_reent+0x22>
 8018e84:	4620      	mov	r0, r4
 8018e86:	f000 ff45 	bl	8019d14 <_free_r>
 8018e8a:	6961      	ldr	r1, [r4, #20]
 8018e8c:	b111      	cbz	r1, 8018e94 <_reclaim_reent+0x2c>
 8018e8e:	4620      	mov	r0, r4
 8018e90:	f000 ff40 	bl	8019d14 <_free_r>
 8018e94:	69e1      	ldr	r1, [r4, #28]
 8018e96:	b111      	cbz	r1, 8018e9e <_reclaim_reent+0x36>
 8018e98:	4620      	mov	r0, r4
 8018e9a:	f000 ff3b 	bl	8019d14 <_free_r>
 8018e9e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018ea0:	b111      	cbz	r1, 8018ea8 <_reclaim_reent+0x40>
 8018ea2:	4620      	mov	r0, r4
 8018ea4:	f000 ff36 	bl	8019d14 <_free_r>
 8018ea8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018eaa:	b111      	cbz	r1, 8018eb2 <_reclaim_reent+0x4a>
 8018eac:	4620      	mov	r0, r4
 8018eae:	f000 ff31 	bl	8019d14 <_free_r>
 8018eb2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018eb4:	b111      	cbz	r1, 8018ebc <_reclaim_reent+0x54>
 8018eb6:	4620      	mov	r0, r4
 8018eb8:	f000 ff2c 	bl	8019d14 <_free_r>
 8018ebc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8018ebe:	b111      	cbz	r1, 8018ec6 <_reclaim_reent+0x5e>
 8018ec0:	4620      	mov	r0, r4
 8018ec2:	f000 ff27 	bl	8019d14 <_free_r>
 8018ec6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8018ec8:	b111      	cbz	r1, 8018ed0 <_reclaim_reent+0x68>
 8018eca:	4620      	mov	r0, r4
 8018ecc:	f000 ff22 	bl	8019d14 <_free_r>
 8018ed0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8018ed2:	b111      	cbz	r1, 8018eda <_reclaim_reent+0x72>
 8018ed4:	4620      	mov	r0, r4
 8018ed6:	f000 ff1d 	bl	8019d14 <_free_r>
 8018eda:	6a23      	ldr	r3, [r4, #32]
 8018edc:	b1b3      	cbz	r3, 8018f0c <_reclaim_reent+0xa4>
 8018ede:	4620      	mov	r0, r4
 8018ee0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018ee4:	4718      	bx	r3
 8018ee6:	5949      	ldr	r1, [r1, r5]
 8018ee8:	b941      	cbnz	r1, 8018efc <_reclaim_reent+0x94>
 8018eea:	3504      	adds	r5, #4
 8018eec:	69e3      	ldr	r3, [r4, #28]
 8018eee:	2d80      	cmp	r5, #128	; 0x80
 8018ef0:	68d9      	ldr	r1, [r3, #12]
 8018ef2:	d1f8      	bne.n	8018ee6 <_reclaim_reent+0x7e>
 8018ef4:	4620      	mov	r0, r4
 8018ef6:	f000 ff0d 	bl	8019d14 <_free_r>
 8018efa:	e7c0      	b.n	8018e7e <_reclaim_reent+0x16>
 8018efc:	680e      	ldr	r6, [r1, #0]
 8018efe:	4620      	mov	r0, r4
 8018f00:	f000 ff08 	bl	8019d14 <_free_r>
 8018f04:	4631      	mov	r1, r6
 8018f06:	e7ef      	b.n	8018ee8 <_reclaim_reent+0x80>
 8018f08:	2500      	movs	r5, #0
 8018f0a:	e7ef      	b.n	8018eec <_reclaim_reent+0x84>
 8018f0c:	bd70      	pop	{r4, r5, r6, pc}
 8018f0e:	bf00      	nop
 8018f10:	20000198 	.word	0x20000198

08018f14 <_lseek_r>:
 8018f14:	b538      	push	{r3, r4, r5, lr}
 8018f16:	4d07      	ldr	r5, [pc, #28]	; (8018f34 <_lseek_r+0x20>)
 8018f18:	4604      	mov	r4, r0
 8018f1a:	4608      	mov	r0, r1
 8018f1c:	4611      	mov	r1, r2
 8018f1e:	2200      	movs	r2, #0
 8018f20:	602a      	str	r2, [r5, #0]
 8018f22:	461a      	mov	r2, r3
 8018f24:	f7ea f910 	bl	8003148 <_lseek>
 8018f28:	1c43      	adds	r3, r0, #1
 8018f2a:	d102      	bne.n	8018f32 <_lseek_r+0x1e>
 8018f2c:	682b      	ldr	r3, [r5, #0]
 8018f2e:	b103      	cbz	r3, 8018f32 <_lseek_r+0x1e>
 8018f30:	6023      	str	r3, [r4, #0]
 8018f32:	bd38      	pop	{r3, r4, r5, pc}
 8018f34:	20007d88 	.word	0x20007d88

08018f38 <_read_r>:
 8018f38:	b538      	push	{r3, r4, r5, lr}
 8018f3a:	4d07      	ldr	r5, [pc, #28]	; (8018f58 <_read_r+0x20>)
 8018f3c:	4604      	mov	r4, r0
 8018f3e:	4608      	mov	r0, r1
 8018f40:	4611      	mov	r1, r2
 8018f42:	2200      	movs	r2, #0
 8018f44:	602a      	str	r2, [r5, #0]
 8018f46:	461a      	mov	r2, r3
 8018f48:	f7ea f89e 	bl	8003088 <_read>
 8018f4c:	1c43      	adds	r3, r0, #1
 8018f4e:	d102      	bne.n	8018f56 <_read_r+0x1e>
 8018f50:	682b      	ldr	r3, [r5, #0]
 8018f52:	b103      	cbz	r3, 8018f56 <_read_r+0x1e>
 8018f54:	6023      	str	r3, [r4, #0]
 8018f56:	bd38      	pop	{r3, r4, r5, pc}
 8018f58:	20007d88 	.word	0x20007d88

08018f5c <_sbrk_r>:
 8018f5c:	b538      	push	{r3, r4, r5, lr}
 8018f5e:	4d06      	ldr	r5, [pc, #24]	; (8018f78 <_sbrk_r+0x1c>)
 8018f60:	2300      	movs	r3, #0
 8018f62:	4604      	mov	r4, r0
 8018f64:	4608      	mov	r0, r1
 8018f66:	602b      	str	r3, [r5, #0]
 8018f68:	f7ea f8fc 	bl	8003164 <_sbrk>
 8018f6c:	1c43      	adds	r3, r0, #1
 8018f6e:	d102      	bne.n	8018f76 <_sbrk_r+0x1a>
 8018f70:	682b      	ldr	r3, [r5, #0]
 8018f72:	b103      	cbz	r3, 8018f76 <_sbrk_r+0x1a>
 8018f74:	6023      	str	r3, [r4, #0]
 8018f76:	bd38      	pop	{r3, r4, r5, pc}
 8018f78:	20007d88 	.word	0x20007d88

08018f7c <_write_r>:
 8018f7c:	b538      	push	{r3, r4, r5, lr}
 8018f7e:	4d07      	ldr	r5, [pc, #28]	; (8018f9c <_write_r+0x20>)
 8018f80:	4604      	mov	r4, r0
 8018f82:	4608      	mov	r0, r1
 8018f84:	4611      	mov	r1, r2
 8018f86:	2200      	movs	r2, #0
 8018f88:	602a      	str	r2, [r5, #0]
 8018f8a:	461a      	mov	r2, r3
 8018f8c:	f7ea f899 	bl	80030c2 <_write>
 8018f90:	1c43      	adds	r3, r0, #1
 8018f92:	d102      	bne.n	8018f9a <_write_r+0x1e>
 8018f94:	682b      	ldr	r3, [r5, #0]
 8018f96:	b103      	cbz	r3, 8018f9a <_write_r+0x1e>
 8018f98:	6023      	str	r3, [r4, #0]
 8018f9a:	bd38      	pop	{r3, r4, r5, pc}
 8018f9c:	20007d88 	.word	0x20007d88

08018fa0 <__errno>:
 8018fa0:	4b01      	ldr	r3, [pc, #4]	; (8018fa8 <__errno+0x8>)
 8018fa2:	6818      	ldr	r0, [r3, #0]
 8018fa4:	4770      	bx	lr
 8018fa6:	bf00      	nop
 8018fa8:	20000198 	.word	0x20000198

08018fac <__libc_init_array>:
 8018fac:	b570      	push	{r4, r5, r6, lr}
 8018fae:	4d0d      	ldr	r5, [pc, #52]	; (8018fe4 <__libc_init_array+0x38>)
 8018fb0:	4c0d      	ldr	r4, [pc, #52]	; (8018fe8 <__libc_init_array+0x3c>)
 8018fb2:	1b64      	subs	r4, r4, r5
 8018fb4:	10a4      	asrs	r4, r4, #2
 8018fb6:	2600      	movs	r6, #0
 8018fb8:	42a6      	cmp	r6, r4
 8018fba:	d109      	bne.n	8018fd0 <__libc_init_array+0x24>
 8018fbc:	4d0b      	ldr	r5, [pc, #44]	; (8018fec <__libc_init_array+0x40>)
 8018fbe:	4c0c      	ldr	r4, [pc, #48]	; (8018ff0 <__libc_init_array+0x44>)
 8018fc0:	f003 fe6c 	bl	801cc9c <_init>
 8018fc4:	1b64      	subs	r4, r4, r5
 8018fc6:	10a4      	asrs	r4, r4, #2
 8018fc8:	2600      	movs	r6, #0
 8018fca:	42a6      	cmp	r6, r4
 8018fcc:	d105      	bne.n	8018fda <__libc_init_array+0x2e>
 8018fce:	bd70      	pop	{r4, r5, r6, pc}
 8018fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8018fd4:	4798      	blx	r3
 8018fd6:	3601      	adds	r6, #1
 8018fd8:	e7ee      	b.n	8018fb8 <__libc_init_array+0xc>
 8018fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8018fde:	4798      	blx	r3
 8018fe0:	3601      	adds	r6, #1
 8018fe2:	e7f2      	b.n	8018fca <__libc_init_array+0x1e>
 8018fe4:	0801dee4 	.word	0x0801dee4
 8018fe8:	0801dee4 	.word	0x0801dee4
 8018fec:	0801dee4 	.word	0x0801dee4
 8018ff0:	0801dee8 	.word	0x0801dee8

08018ff4 <__retarget_lock_acquire_recursive>:
 8018ff4:	4770      	bx	lr

08018ff6 <__retarget_lock_release_recursive>:
 8018ff6:	4770      	bx	lr

08018ff8 <memcpy>:
 8018ff8:	440a      	add	r2, r1
 8018ffa:	4291      	cmp	r1, r2
 8018ffc:	f100 33ff 	add.w	r3, r0, #4294967295
 8019000:	d100      	bne.n	8019004 <memcpy+0xc>
 8019002:	4770      	bx	lr
 8019004:	b510      	push	{r4, lr}
 8019006:	f811 4b01 	ldrb.w	r4, [r1], #1
 801900a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801900e:	4291      	cmp	r1, r2
 8019010:	d1f9      	bne.n	8019006 <memcpy+0xe>
 8019012:	bd10      	pop	{r4, pc}

08019014 <nanf>:
 8019014:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801901c <nanf+0x8>
 8019018:	4770      	bx	lr
 801901a:	bf00      	nop
 801901c:	7fc00000 	.word	0x7fc00000

08019020 <quorem>:
 8019020:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019024:	6903      	ldr	r3, [r0, #16]
 8019026:	690c      	ldr	r4, [r1, #16]
 8019028:	42a3      	cmp	r3, r4
 801902a:	4607      	mov	r7, r0
 801902c:	db7e      	blt.n	801912c <quorem+0x10c>
 801902e:	3c01      	subs	r4, #1
 8019030:	f101 0814 	add.w	r8, r1, #20
 8019034:	f100 0514 	add.w	r5, r0, #20
 8019038:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801903c:	9301      	str	r3, [sp, #4]
 801903e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8019042:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019046:	3301      	adds	r3, #1
 8019048:	429a      	cmp	r2, r3
 801904a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801904e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8019052:	fbb2 f6f3 	udiv	r6, r2, r3
 8019056:	d331      	bcc.n	80190bc <quorem+0x9c>
 8019058:	f04f 0e00 	mov.w	lr, #0
 801905c:	4640      	mov	r0, r8
 801905e:	46ac      	mov	ip, r5
 8019060:	46f2      	mov	sl, lr
 8019062:	f850 2b04 	ldr.w	r2, [r0], #4
 8019066:	b293      	uxth	r3, r2
 8019068:	fb06 e303 	mla	r3, r6, r3, lr
 801906c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8019070:	0c1a      	lsrs	r2, r3, #16
 8019072:	b29b      	uxth	r3, r3
 8019074:	ebaa 0303 	sub.w	r3, sl, r3
 8019078:	f8dc a000 	ldr.w	sl, [ip]
 801907c:	fa13 f38a 	uxtah	r3, r3, sl
 8019080:	fb06 220e 	mla	r2, r6, lr, r2
 8019084:	9300      	str	r3, [sp, #0]
 8019086:	9b00      	ldr	r3, [sp, #0]
 8019088:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801908c:	b292      	uxth	r2, r2
 801908e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8019092:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8019096:	f8bd 3000 	ldrh.w	r3, [sp]
 801909a:	4581      	cmp	r9, r0
 801909c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80190a0:	f84c 3b04 	str.w	r3, [ip], #4
 80190a4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80190a8:	d2db      	bcs.n	8019062 <quorem+0x42>
 80190aa:	f855 300b 	ldr.w	r3, [r5, fp]
 80190ae:	b92b      	cbnz	r3, 80190bc <quorem+0x9c>
 80190b0:	9b01      	ldr	r3, [sp, #4]
 80190b2:	3b04      	subs	r3, #4
 80190b4:	429d      	cmp	r5, r3
 80190b6:	461a      	mov	r2, r3
 80190b8:	d32c      	bcc.n	8019114 <quorem+0xf4>
 80190ba:	613c      	str	r4, [r7, #16]
 80190bc:	4638      	mov	r0, r7
 80190be:	f001 f93b 	bl	801a338 <__mcmp>
 80190c2:	2800      	cmp	r0, #0
 80190c4:	db22      	blt.n	801910c <quorem+0xec>
 80190c6:	3601      	adds	r6, #1
 80190c8:	4629      	mov	r1, r5
 80190ca:	2000      	movs	r0, #0
 80190cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80190d0:	f8d1 c000 	ldr.w	ip, [r1]
 80190d4:	b293      	uxth	r3, r2
 80190d6:	1ac3      	subs	r3, r0, r3
 80190d8:	0c12      	lsrs	r2, r2, #16
 80190da:	fa13 f38c 	uxtah	r3, r3, ip
 80190de:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80190e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80190e6:	b29b      	uxth	r3, r3
 80190e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80190ec:	45c1      	cmp	r9, r8
 80190ee:	f841 3b04 	str.w	r3, [r1], #4
 80190f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80190f6:	d2e9      	bcs.n	80190cc <quorem+0xac>
 80190f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80190fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019100:	b922      	cbnz	r2, 801910c <quorem+0xec>
 8019102:	3b04      	subs	r3, #4
 8019104:	429d      	cmp	r5, r3
 8019106:	461a      	mov	r2, r3
 8019108:	d30a      	bcc.n	8019120 <quorem+0x100>
 801910a:	613c      	str	r4, [r7, #16]
 801910c:	4630      	mov	r0, r6
 801910e:	b003      	add	sp, #12
 8019110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019114:	6812      	ldr	r2, [r2, #0]
 8019116:	3b04      	subs	r3, #4
 8019118:	2a00      	cmp	r2, #0
 801911a:	d1ce      	bne.n	80190ba <quorem+0x9a>
 801911c:	3c01      	subs	r4, #1
 801911e:	e7c9      	b.n	80190b4 <quorem+0x94>
 8019120:	6812      	ldr	r2, [r2, #0]
 8019122:	3b04      	subs	r3, #4
 8019124:	2a00      	cmp	r2, #0
 8019126:	d1f0      	bne.n	801910a <quorem+0xea>
 8019128:	3c01      	subs	r4, #1
 801912a:	e7eb      	b.n	8019104 <quorem+0xe4>
 801912c:	2000      	movs	r0, #0
 801912e:	e7ee      	b.n	801910e <quorem+0xee>

08019130 <_dtoa_r>:
 8019130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019134:	ed2d 8b04 	vpush	{d8-d9}
 8019138:	69c5      	ldr	r5, [r0, #28]
 801913a:	b093      	sub	sp, #76	; 0x4c
 801913c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8019140:	ec57 6b10 	vmov	r6, r7, d0
 8019144:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8019148:	9107      	str	r1, [sp, #28]
 801914a:	4604      	mov	r4, r0
 801914c:	920a      	str	r2, [sp, #40]	; 0x28
 801914e:	930d      	str	r3, [sp, #52]	; 0x34
 8019150:	b975      	cbnz	r5, 8019170 <_dtoa_r+0x40>
 8019152:	2010      	movs	r0, #16
 8019154:	f7fe fce6 	bl	8017b24 <malloc>
 8019158:	4602      	mov	r2, r0
 801915a:	61e0      	str	r0, [r4, #28]
 801915c:	b920      	cbnz	r0, 8019168 <_dtoa_r+0x38>
 801915e:	4bae      	ldr	r3, [pc, #696]	; (8019418 <_dtoa_r+0x2e8>)
 8019160:	21ef      	movs	r1, #239	; 0xef
 8019162:	48ae      	ldr	r0, [pc, #696]	; (801941c <_dtoa_r+0x2ec>)
 8019164:	f003 f8fc 	bl	801c360 <__assert_func>
 8019168:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801916c:	6005      	str	r5, [r0, #0]
 801916e:	60c5      	str	r5, [r0, #12]
 8019170:	69e3      	ldr	r3, [r4, #28]
 8019172:	6819      	ldr	r1, [r3, #0]
 8019174:	b151      	cbz	r1, 801918c <_dtoa_r+0x5c>
 8019176:	685a      	ldr	r2, [r3, #4]
 8019178:	604a      	str	r2, [r1, #4]
 801917a:	2301      	movs	r3, #1
 801917c:	4093      	lsls	r3, r2
 801917e:	608b      	str	r3, [r1, #8]
 8019180:	4620      	mov	r0, r4
 8019182:	f000 fe53 	bl	8019e2c <_Bfree>
 8019186:	69e3      	ldr	r3, [r4, #28]
 8019188:	2200      	movs	r2, #0
 801918a:	601a      	str	r2, [r3, #0]
 801918c:	1e3b      	subs	r3, r7, #0
 801918e:	bfbb      	ittet	lt
 8019190:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8019194:	9303      	strlt	r3, [sp, #12]
 8019196:	2300      	movge	r3, #0
 8019198:	2201      	movlt	r2, #1
 801919a:	bfac      	ite	ge
 801919c:	f8c8 3000 	strge.w	r3, [r8]
 80191a0:	f8c8 2000 	strlt.w	r2, [r8]
 80191a4:	4b9e      	ldr	r3, [pc, #632]	; (8019420 <_dtoa_r+0x2f0>)
 80191a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80191aa:	ea33 0308 	bics.w	r3, r3, r8
 80191ae:	d11b      	bne.n	80191e8 <_dtoa_r+0xb8>
 80191b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80191b2:	f242 730f 	movw	r3, #9999	; 0x270f
 80191b6:	6013      	str	r3, [r2, #0]
 80191b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80191bc:	4333      	orrs	r3, r6
 80191be:	f000 8593 	beq.w	8019ce8 <_dtoa_r+0xbb8>
 80191c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80191c4:	b963      	cbnz	r3, 80191e0 <_dtoa_r+0xb0>
 80191c6:	4b97      	ldr	r3, [pc, #604]	; (8019424 <_dtoa_r+0x2f4>)
 80191c8:	e027      	b.n	801921a <_dtoa_r+0xea>
 80191ca:	4b97      	ldr	r3, [pc, #604]	; (8019428 <_dtoa_r+0x2f8>)
 80191cc:	9300      	str	r3, [sp, #0]
 80191ce:	3308      	adds	r3, #8
 80191d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80191d2:	6013      	str	r3, [r2, #0]
 80191d4:	9800      	ldr	r0, [sp, #0]
 80191d6:	b013      	add	sp, #76	; 0x4c
 80191d8:	ecbd 8b04 	vpop	{d8-d9}
 80191dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191e0:	4b90      	ldr	r3, [pc, #576]	; (8019424 <_dtoa_r+0x2f4>)
 80191e2:	9300      	str	r3, [sp, #0]
 80191e4:	3303      	adds	r3, #3
 80191e6:	e7f3      	b.n	80191d0 <_dtoa_r+0xa0>
 80191e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80191ec:	2200      	movs	r2, #0
 80191ee:	ec51 0b17 	vmov	r0, r1, d7
 80191f2:	eeb0 8a47 	vmov.f32	s16, s14
 80191f6:	eef0 8a67 	vmov.f32	s17, s15
 80191fa:	2300      	movs	r3, #0
 80191fc:	f7e7 fc94 	bl	8000b28 <__aeabi_dcmpeq>
 8019200:	4681      	mov	r9, r0
 8019202:	b160      	cbz	r0, 801921e <_dtoa_r+0xee>
 8019204:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019206:	2301      	movs	r3, #1
 8019208:	6013      	str	r3, [r2, #0]
 801920a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801920c:	2b00      	cmp	r3, #0
 801920e:	f000 8568 	beq.w	8019ce2 <_dtoa_r+0xbb2>
 8019212:	4b86      	ldr	r3, [pc, #536]	; (801942c <_dtoa_r+0x2fc>)
 8019214:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8019216:	6013      	str	r3, [r2, #0]
 8019218:	3b01      	subs	r3, #1
 801921a:	9300      	str	r3, [sp, #0]
 801921c:	e7da      	b.n	80191d4 <_dtoa_r+0xa4>
 801921e:	aa10      	add	r2, sp, #64	; 0x40
 8019220:	a911      	add	r1, sp, #68	; 0x44
 8019222:	4620      	mov	r0, r4
 8019224:	eeb0 0a48 	vmov.f32	s0, s16
 8019228:	eef0 0a68 	vmov.f32	s1, s17
 801922c:	f001 f99a 	bl	801a564 <__d2b>
 8019230:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8019234:	4682      	mov	sl, r0
 8019236:	2d00      	cmp	r5, #0
 8019238:	d07f      	beq.n	801933a <_dtoa_r+0x20a>
 801923a:	ee18 3a90 	vmov	r3, s17
 801923e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019242:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8019246:	ec51 0b18 	vmov	r0, r1, d8
 801924a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801924e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8019252:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8019256:	4619      	mov	r1, r3
 8019258:	2200      	movs	r2, #0
 801925a:	4b75      	ldr	r3, [pc, #468]	; (8019430 <_dtoa_r+0x300>)
 801925c:	f7e7 f844 	bl	80002e8 <__aeabi_dsub>
 8019260:	a367      	add	r3, pc, #412	; (adr r3, 8019400 <_dtoa_r+0x2d0>)
 8019262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019266:	f7e7 f9f7 	bl	8000658 <__aeabi_dmul>
 801926a:	a367      	add	r3, pc, #412	; (adr r3, 8019408 <_dtoa_r+0x2d8>)
 801926c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019270:	f7e7 f83c 	bl	80002ec <__adddf3>
 8019274:	4606      	mov	r6, r0
 8019276:	4628      	mov	r0, r5
 8019278:	460f      	mov	r7, r1
 801927a:	f7e7 f983 	bl	8000584 <__aeabi_i2d>
 801927e:	a364      	add	r3, pc, #400	; (adr r3, 8019410 <_dtoa_r+0x2e0>)
 8019280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019284:	f7e7 f9e8 	bl	8000658 <__aeabi_dmul>
 8019288:	4602      	mov	r2, r0
 801928a:	460b      	mov	r3, r1
 801928c:	4630      	mov	r0, r6
 801928e:	4639      	mov	r1, r7
 8019290:	f7e7 f82c 	bl	80002ec <__adddf3>
 8019294:	4606      	mov	r6, r0
 8019296:	460f      	mov	r7, r1
 8019298:	f7e7 fc8e 	bl	8000bb8 <__aeabi_d2iz>
 801929c:	2200      	movs	r2, #0
 801929e:	4683      	mov	fp, r0
 80192a0:	2300      	movs	r3, #0
 80192a2:	4630      	mov	r0, r6
 80192a4:	4639      	mov	r1, r7
 80192a6:	f7e7 fc49 	bl	8000b3c <__aeabi_dcmplt>
 80192aa:	b148      	cbz	r0, 80192c0 <_dtoa_r+0x190>
 80192ac:	4658      	mov	r0, fp
 80192ae:	f7e7 f969 	bl	8000584 <__aeabi_i2d>
 80192b2:	4632      	mov	r2, r6
 80192b4:	463b      	mov	r3, r7
 80192b6:	f7e7 fc37 	bl	8000b28 <__aeabi_dcmpeq>
 80192ba:	b908      	cbnz	r0, 80192c0 <_dtoa_r+0x190>
 80192bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80192c0:	f1bb 0f16 	cmp.w	fp, #22
 80192c4:	d857      	bhi.n	8019376 <_dtoa_r+0x246>
 80192c6:	4b5b      	ldr	r3, [pc, #364]	; (8019434 <_dtoa_r+0x304>)
 80192c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80192cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192d0:	ec51 0b18 	vmov	r0, r1, d8
 80192d4:	f7e7 fc32 	bl	8000b3c <__aeabi_dcmplt>
 80192d8:	2800      	cmp	r0, #0
 80192da:	d04e      	beq.n	801937a <_dtoa_r+0x24a>
 80192dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80192e0:	2300      	movs	r3, #0
 80192e2:	930c      	str	r3, [sp, #48]	; 0x30
 80192e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80192e6:	1b5b      	subs	r3, r3, r5
 80192e8:	1e5a      	subs	r2, r3, #1
 80192ea:	bf45      	ittet	mi
 80192ec:	f1c3 0301 	rsbmi	r3, r3, #1
 80192f0:	9305      	strmi	r3, [sp, #20]
 80192f2:	2300      	movpl	r3, #0
 80192f4:	2300      	movmi	r3, #0
 80192f6:	9206      	str	r2, [sp, #24]
 80192f8:	bf54      	ite	pl
 80192fa:	9305      	strpl	r3, [sp, #20]
 80192fc:	9306      	strmi	r3, [sp, #24]
 80192fe:	f1bb 0f00 	cmp.w	fp, #0
 8019302:	db3c      	blt.n	801937e <_dtoa_r+0x24e>
 8019304:	9b06      	ldr	r3, [sp, #24]
 8019306:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801930a:	445b      	add	r3, fp
 801930c:	9306      	str	r3, [sp, #24]
 801930e:	2300      	movs	r3, #0
 8019310:	9308      	str	r3, [sp, #32]
 8019312:	9b07      	ldr	r3, [sp, #28]
 8019314:	2b09      	cmp	r3, #9
 8019316:	d868      	bhi.n	80193ea <_dtoa_r+0x2ba>
 8019318:	2b05      	cmp	r3, #5
 801931a:	bfc4      	itt	gt
 801931c:	3b04      	subgt	r3, #4
 801931e:	9307      	strgt	r3, [sp, #28]
 8019320:	9b07      	ldr	r3, [sp, #28]
 8019322:	f1a3 0302 	sub.w	r3, r3, #2
 8019326:	bfcc      	ite	gt
 8019328:	2500      	movgt	r5, #0
 801932a:	2501      	movle	r5, #1
 801932c:	2b03      	cmp	r3, #3
 801932e:	f200 8085 	bhi.w	801943c <_dtoa_r+0x30c>
 8019332:	e8df f003 	tbb	[pc, r3]
 8019336:	3b2e      	.short	0x3b2e
 8019338:	5839      	.short	0x5839
 801933a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801933e:	441d      	add	r5, r3
 8019340:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8019344:	2b20      	cmp	r3, #32
 8019346:	bfc1      	itttt	gt
 8019348:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801934c:	fa08 f803 	lslgt.w	r8, r8, r3
 8019350:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8019354:	fa26 f303 	lsrgt.w	r3, r6, r3
 8019358:	bfd6      	itet	le
 801935a:	f1c3 0320 	rsble	r3, r3, #32
 801935e:	ea48 0003 	orrgt.w	r0, r8, r3
 8019362:	fa06 f003 	lslle.w	r0, r6, r3
 8019366:	f7e7 f8fd 	bl	8000564 <__aeabi_ui2d>
 801936a:	2201      	movs	r2, #1
 801936c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8019370:	3d01      	subs	r5, #1
 8019372:	920e      	str	r2, [sp, #56]	; 0x38
 8019374:	e76f      	b.n	8019256 <_dtoa_r+0x126>
 8019376:	2301      	movs	r3, #1
 8019378:	e7b3      	b.n	80192e2 <_dtoa_r+0x1b2>
 801937a:	900c      	str	r0, [sp, #48]	; 0x30
 801937c:	e7b2      	b.n	80192e4 <_dtoa_r+0x1b4>
 801937e:	9b05      	ldr	r3, [sp, #20]
 8019380:	eba3 030b 	sub.w	r3, r3, fp
 8019384:	9305      	str	r3, [sp, #20]
 8019386:	f1cb 0300 	rsb	r3, fp, #0
 801938a:	9308      	str	r3, [sp, #32]
 801938c:	2300      	movs	r3, #0
 801938e:	930b      	str	r3, [sp, #44]	; 0x2c
 8019390:	e7bf      	b.n	8019312 <_dtoa_r+0x1e2>
 8019392:	2300      	movs	r3, #0
 8019394:	9309      	str	r3, [sp, #36]	; 0x24
 8019396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019398:	2b00      	cmp	r3, #0
 801939a:	dc52      	bgt.n	8019442 <_dtoa_r+0x312>
 801939c:	2301      	movs	r3, #1
 801939e:	9301      	str	r3, [sp, #4]
 80193a0:	9304      	str	r3, [sp, #16]
 80193a2:	461a      	mov	r2, r3
 80193a4:	920a      	str	r2, [sp, #40]	; 0x28
 80193a6:	e00b      	b.n	80193c0 <_dtoa_r+0x290>
 80193a8:	2301      	movs	r3, #1
 80193aa:	e7f3      	b.n	8019394 <_dtoa_r+0x264>
 80193ac:	2300      	movs	r3, #0
 80193ae:	9309      	str	r3, [sp, #36]	; 0x24
 80193b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80193b2:	445b      	add	r3, fp
 80193b4:	9301      	str	r3, [sp, #4]
 80193b6:	3301      	adds	r3, #1
 80193b8:	2b01      	cmp	r3, #1
 80193ba:	9304      	str	r3, [sp, #16]
 80193bc:	bfb8      	it	lt
 80193be:	2301      	movlt	r3, #1
 80193c0:	69e0      	ldr	r0, [r4, #28]
 80193c2:	2100      	movs	r1, #0
 80193c4:	2204      	movs	r2, #4
 80193c6:	f102 0614 	add.w	r6, r2, #20
 80193ca:	429e      	cmp	r6, r3
 80193cc:	d93d      	bls.n	801944a <_dtoa_r+0x31a>
 80193ce:	6041      	str	r1, [r0, #4]
 80193d0:	4620      	mov	r0, r4
 80193d2:	f000 fceb 	bl	8019dac <_Balloc>
 80193d6:	9000      	str	r0, [sp, #0]
 80193d8:	2800      	cmp	r0, #0
 80193da:	d139      	bne.n	8019450 <_dtoa_r+0x320>
 80193dc:	4b16      	ldr	r3, [pc, #88]	; (8019438 <_dtoa_r+0x308>)
 80193de:	4602      	mov	r2, r0
 80193e0:	f240 11af 	movw	r1, #431	; 0x1af
 80193e4:	e6bd      	b.n	8019162 <_dtoa_r+0x32>
 80193e6:	2301      	movs	r3, #1
 80193e8:	e7e1      	b.n	80193ae <_dtoa_r+0x27e>
 80193ea:	2501      	movs	r5, #1
 80193ec:	2300      	movs	r3, #0
 80193ee:	9307      	str	r3, [sp, #28]
 80193f0:	9509      	str	r5, [sp, #36]	; 0x24
 80193f2:	f04f 33ff 	mov.w	r3, #4294967295
 80193f6:	9301      	str	r3, [sp, #4]
 80193f8:	9304      	str	r3, [sp, #16]
 80193fa:	2200      	movs	r2, #0
 80193fc:	2312      	movs	r3, #18
 80193fe:	e7d1      	b.n	80193a4 <_dtoa_r+0x274>
 8019400:	636f4361 	.word	0x636f4361
 8019404:	3fd287a7 	.word	0x3fd287a7
 8019408:	8b60c8b3 	.word	0x8b60c8b3
 801940c:	3fc68a28 	.word	0x3fc68a28
 8019410:	509f79fb 	.word	0x509f79fb
 8019414:	3fd34413 	.word	0x3fd34413
 8019418:	0801dadc 	.word	0x0801dadc
 801941c:	0801daf3 	.word	0x0801daf3
 8019420:	7ff00000 	.word	0x7ff00000
 8019424:	0801dad8 	.word	0x0801dad8
 8019428:	0801dacf 	.word	0x0801dacf
 801942c:	0801de31 	.word	0x0801de31
 8019430:	3ff80000 	.word	0x3ff80000
 8019434:	0801dbe0 	.word	0x0801dbe0
 8019438:	0801db4b 	.word	0x0801db4b
 801943c:	2301      	movs	r3, #1
 801943e:	9309      	str	r3, [sp, #36]	; 0x24
 8019440:	e7d7      	b.n	80193f2 <_dtoa_r+0x2c2>
 8019442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019444:	9301      	str	r3, [sp, #4]
 8019446:	9304      	str	r3, [sp, #16]
 8019448:	e7ba      	b.n	80193c0 <_dtoa_r+0x290>
 801944a:	3101      	adds	r1, #1
 801944c:	0052      	lsls	r2, r2, #1
 801944e:	e7ba      	b.n	80193c6 <_dtoa_r+0x296>
 8019450:	69e3      	ldr	r3, [r4, #28]
 8019452:	9a00      	ldr	r2, [sp, #0]
 8019454:	601a      	str	r2, [r3, #0]
 8019456:	9b04      	ldr	r3, [sp, #16]
 8019458:	2b0e      	cmp	r3, #14
 801945a:	f200 80a8 	bhi.w	80195ae <_dtoa_r+0x47e>
 801945e:	2d00      	cmp	r5, #0
 8019460:	f000 80a5 	beq.w	80195ae <_dtoa_r+0x47e>
 8019464:	f1bb 0f00 	cmp.w	fp, #0
 8019468:	dd38      	ble.n	80194dc <_dtoa_r+0x3ac>
 801946a:	4bc0      	ldr	r3, [pc, #768]	; (801976c <_dtoa_r+0x63c>)
 801946c:	f00b 020f 	and.w	r2, fp, #15
 8019470:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019474:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8019478:	e9d3 6700 	ldrd	r6, r7, [r3]
 801947c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8019480:	d019      	beq.n	80194b6 <_dtoa_r+0x386>
 8019482:	4bbb      	ldr	r3, [pc, #748]	; (8019770 <_dtoa_r+0x640>)
 8019484:	ec51 0b18 	vmov	r0, r1, d8
 8019488:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801948c:	f7e7 fa0e 	bl	80008ac <__aeabi_ddiv>
 8019490:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019494:	f008 080f 	and.w	r8, r8, #15
 8019498:	2503      	movs	r5, #3
 801949a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8019770 <_dtoa_r+0x640>
 801949e:	f1b8 0f00 	cmp.w	r8, #0
 80194a2:	d10a      	bne.n	80194ba <_dtoa_r+0x38a>
 80194a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80194a8:	4632      	mov	r2, r6
 80194aa:	463b      	mov	r3, r7
 80194ac:	f7e7 f9fe 	bl	80008ac <__aeabi_ddiv>
 80194b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80194b4:	e02b      	b.n	801950e <_dtoa_r+0x3de>
 80194b6:	2502      	movs	r5, #2
 80194b8:	e7ef      	b.n	801949a <_dtoa_r+0x36a>
 80194ba:	f018 0f01 	tst.w	r8, #1
 80194be:	d008      	beq.n	80194d2 <_dtoa_r+0x3a2>
 80194c0:	4630      	mov	r0, r6
 80194c2:	4639      	mov	r1, r7
 80194c4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80194c8:	f7e7 f8c6 	bl	8000658 <__aeabi_dmul>
 80194cc:	3501      	adds	r5, #1
 80194ce:	4606      	mov	r6, r0
 80194d0:	460f      	mov	r7, r1
 80194d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80194d6:	f109 0908 	add.w	r9, r9, #8
 80194da:	e7e0      	b.n	801949e <_dtoa_r+0x36e>
 80194dc:	f000 809f 	beq.w	801961e <_dtoa_r+0x4ee>
 80194e0:	f1cb 0600 	rsb	r6, fp, #0
 80194e4:	4ba1      	ldr	r3, [pc, #644]	; (801976c <_dtoa_r+0x63c>)
 80194e6:	4fa2      	ldr	r7, [pc, #648]	; (8019770 <_dtoa_r+0x640>)
 80194e8:	f006 020f 	and.w	r2, r6, #15
 80194ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80194f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194f4:	ec51 0b18 	vmov	r0, r1, d8
 80194f8:	f7e7 f8ae 	bl	8000658 <__aeabi_dmul>
 80194fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019500:	1136      	asrs	r6, r6, #4
 8019502:	2300      	movs	r3, #0
 8019504:	2502      	movs	r5, #2
 8019506:	2e00      	cmp	r6, #0
 8019508:	d17e      	bne.n	8019608 <_dtoa_r+0x4d8>
 801950a:	2b00      	cmp	r3, #0
 801950c:	d1d0      	bne.n	80194b0 <_dtoa_r+0x380>
 801950e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019510:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8019514:	2b00      	cmp	r3, #0
 8019516:	f000 8084 	beq.w	8019622 <_dtoa_r+0x4f2>
 801951a:	4b96      	ldr	r3, [pc, #600]	; (8019774 <_dtoa_r+0x644>)
 801951c:	2200      	movs	r2, #0
 801951e:	4640      	mov	r0, r8
 8019520:	4649      	mov	r1, r9
 8019522:	f7e7 fb0b 	bl	8000b3c <__aeabi_dcmplt>
 8019526:	2800      	cmp	r0, #0
 8019528:	d07b      	beq.n	8019622 <_dtoa_r+0x4f2>
 801952a:	9b04      	ldr	r3, [sp, #16]
 801952c:	2b00      	cmp	r3, #0
 801952e:	d078      	beq.n	8019622 <_dtoa_r+0x4f2>
 8019530:	9b01      	ldr	r3, [sp, #4]
 8019532:	2b00      	cmp	r3, #0
 8019534:	dd39      	ble.n	80195aa <_dtoa_r+0x47a>
 8019536:	4b90      	ldr	r3, [pc, #576]	; (8019778 <_dtoa_r+0x648>)
 8019538:	2200      	movs	r2, #0
 801953a:	4640      	mov	r0, r8
 801953c:	4649      	mov	r1, r9
 801953e:	f7e7 f88b 	bl	8000658 <__aeabi_dmul>
 8019542:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019546:	9e01      	ldr	r6, [sp, #4]
 8019548:	f10b 37ff 	add.w	r7, fp, #4294967295
 801954c:	3501      	adds	r5, #1
 801954e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8019552:	4628      	mov	r0, r5
 8019554:	f7e7 f816 	bl	8000584 <__aeabi_i2d>
 8019558:	4642      	mov	r2, r8
 801955a:	464b      	mov	r3, r9
 801955c:	f7e7 f87c 	bl	8000658 <__aeabi_dmul>
 8019560:	4b86      	ldr	r3, [pc, #536]	; (801977c <_dtoa_r+0x64c>)
 8019562:	2200      	movs	r2, #0
 8019564:	f7e6 fec2 	bl	80002ec <__adddf3>
 8019568:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801956c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019570:	9303      	str	r3, [sp, #12]
 8019572:	2e00      	cmp	r6, #0
 8019574:	d158      	bne.n	8019628 <_dtoa_r+0x4f8>
 8019576:	4b82      	ldr	r3, [pc, #520]	; (8019780 <_dtoa_r+0x650>)
 8019578:	2200      	movs	r2, #0
 801957a:	4640      	mov	r0, r8
 801957c:	4649      	mov	r1, r9
 801957e:	f7e6 feb3 	bl	80002e8 <__aeabi_dsub>
 8019582:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019586:	4680      	mov	r8, r0
 8019588:	4689      	mov	r9, r1
 801958a:	f7e7 faf5 	bl	8000b78 <__aeabi_dcmpgt>
 801958e:	2800      	cmp	r0, #0
 8019590:	f040 8296 	bne.w	8019ac0 <_dtoa_r+0x990>
 8019594:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8019598:	4640      	mov	r0, r8
 801959a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801959e:	4649      	mov	r1, r9
 80195a0:	f7e7 facc 	bl	8000b3c <__aeabi_dcmplt>
 80195a4:	2800      	cmp	r0, #0
 80195a6:	f040 8289 	bne.w	8019abc <_dtoa_r+0x98c>
 80195aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80195ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	f2c0 814e 	blt.w	8019852 <_dtoa_r+0x722>
 80195b6:	f1bb 0f0e 	cmp.w	fp, #14
 80195ba:	f300 814a 	bgt.w	8019852 <_dtoa_r+0x722>
 80195be:	4b6b      	ldr	r3, [pc, #428]	; (801976c <_dtoa_r+0x63c>)
 80195c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80195c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80195c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	f280 80dc 	bge.w	8019788 <_dtoa_r+0x658>
 80195d0:	9b04      	ldr	r3, [sp, #16]
 80195d2:	2b00      	cmp	r3, #0
 80195d4:	f300 80d8 	bgt.w	8019788 <_dtoa_r+0x658>
 80195d8:	f040 826f 	bne.w	8019aba <_dtoa_r+0x98a>
 80195dc:	4b68      	ldr	r3, [pc, #416]	; (8019780 <_dtoa_r+0x650>)
 80195de:	2200      	movs	r2, #0
 80195e0:	4640      	mov	r0, r8
 80195e2:	4649      	mov	r1, r9
 80195e4:	f7e7 f838 	bl	8000658 <__aeabi_dmul>
 80195e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80195ec:	f7e7 faba 	bl	8000b64 <__aeabi_dcmpge>
 80195f0:	9e04      	ldr	r6, [sp, #16]
 80195f2:	4637      	mov	r7, r6
 80195f4:	2800      	cmp	r0, #0
 80195f6:	f040 8245 	bne.w	8019a84 <_dtoa_r+0x954>
 80195fa:	9d00      	ldr	r5, [sp, #0]
 80195fc:	2331      	movs	r3, #49	; 0x31
 80195fe:	f805 3b01 	strb.w	r3, [r5], #1
 8019602:	f10b 0b01 	add.w	fp, fp, #1
 8019606:	e241      	b.n	8019a8c <_dtoa_r+0x95c>
 8019608:	07f2      	lsls	r2, r6, #31
 801960a:	d505      	bpl.n	8019618 <_dtoa_r+0x4e8>
 801960c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019610:	f7e7 f822 	bl	8000658 <__aeabi_dmul>
 8019614:	3501      	adds	r5, #1
 8019616:	2301      	movs	r3, #1
 8019618:	1076      	asrs	r6, r6, #1
 801961a:	3708      	adds	r7, #8
 801961c:	e773      	b.n	8019506 <_dtoa_r+0x3d6>
 801961e:	2502      	movs	r5, #2
 8019620:	e775      	b.n	801950e <_dtoa_r+0x3de>
 8019622:	9e04      	ldr	r6, [sp, #16]
 8019624:	465f      	mov	r7, fp
 8019626:	e792      	b.n	801954e <_dtoa_r+0x41e>
 8019628:	9900      	ldr	r1, [sp, #0]
 801962a:	4b50      	ldr	r3, [pc, #320]	; (801976c <_dtoa_r+0x63c>)
 801962c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019630:	4431      	add	r1, r6
 8019632:	9102      	str	r1, [sp, #8]
 8019634:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019636:	eeb0 9a47 	vmov.f32	s18, s14
 801963a:	eef0 9a67 	vmov.f32	s19, s15
 801963e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8019642:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8019646:	2900      	cmp	r1, #0
 8019648:	d044      	beq.n	80196d4 <_dtoa_r+0x5a4>
 801964a:	494e      	ldr	r1, [pc, #312]	; (8019784 <_dtoa_r+0x654>)
 801964c:	2000      	movs	r0, #0
 801964e:	f7e7 f92d 	bl	80008ac <__aeabi_ddiv>
 8019652:	ec53 2b19 	vmov	r2, r3, d9
 8019656:	f7e6 fe47 	bl	80002e8 <__aeabi_dsub>
 801965a:	9d00      	ldr	r5, [sp, #0]
 801965c:	ec41 0b19 	vmov	d9, r0, r1
 8019660:	4649      	mov	r1, r9
 8019662:	4640      	mov	r0, r8
 8019664:	f7e7 faa8 	bl	8000bb8 <__aeabi_d2iz>
 8019668:	4606      	mov	r6, r0
 801966a:	f7e6 ff8b 	bl	8000584 <__aeabi_i2d>
 801966e:	4602      	mov	r2, r0
 8019670:	460b      	mov	r3, r1
 8019672:	4640      	mov	r0, r8
 8019674:	4649      	mov	r1, r9
 8019676:	f7e6 fe37 	bl	80002e8 <__aeabi_dsub>
 801967a:	3630      	adds	r6, #48	; 0x30
 801967c:	f805 6b01 	strb.w	r6, [r5], #1
 8019680:	ec53 2b19 	vmov	r2, r3, d9
 8019684:	4680      	mov	r8, r0
 8019686:	4689      	mov	r9, r1
 8019688:	f7e7 fa58 	bl	8000b3c <__aeabi_dcmplt>
 801968c:	2800      	cmp	r0, #0
 801968e:	d164      	bne.n	801975a <_dtoa_r+0x62a>
 8019690:	4642      	mov	r2, r8
 8019692:	464b      	mov	r3, r9
 8019694:	4937      	ldr	r1, [pc, #220]	; (8019774 <_dtoa_r+0x644>)
 8019696:	2000      	movs	r0, #0
 8019698:	f7e6 fe26 	bl	80002e8 <__aeabi_dsub>
 801969c:	ec53 2b19 	vmov	r2, r3, d9
 80196a0:	f7e7 fa4c 	bl	8000b3c <__aeabi_dcmplt>
 80196a4:	2800      	cmp	r0, #0
 80196a6:	f040 80b6 	bne.w	8019816 <_dtoa_r+0x6e6>
 80196aa:	9b02      	ldr	r3, [sp, #8]
 80196ac:	429d      	cmp	r5, r3
 80196ae:	f43f af7c 	beq.w	80195aa <_dtoa_r+0x47a>
 80196b2:	4b31      	ldr	r3, [pc, #196]	; (8019778 <_dtoa_r+0x648>)
 80196b4:	ec51 0b19 	vmov	r0, r1, d9
 80196b8:	2200      	movs	r2, #0
 80196ba:	f7e6 ffcd 	bl	8000658 <__aeabi_dmul>
 80196be:	4b2e      	ldr	r3, [pc, #184]	; (8019778 <_dtoa_r+0x648>)
 80196c0:	ec41 0b19 	vmov	d9, r0, r1
 80196c4:	2200      	movs	r2, #0
 80196c6:	4640      	mov	r0, r8
 80196c8:	4649      	mov	r1, r9
 80196ca:	f7e6 ffc5 	bl	8000658 <__aeabi_dmul>
 80196ce:	4680      	mov	r8, r0
 80196d0:	4689      	mov	r9, r1
 80196d2:	e7c5      	b.n	8019660 <_dtoa_r+0x530>
 80196d4:	ec51 0b17 	vmov	r0, r1, d7
 80196d8:	f7e6 ffbe 	bl	8000658 <__aeabi_dmul>
 80196dc:	9b02      	ldr	r3, [sp, #8]
 80196de:	9d00      	ldr	r5, [sp, #0]
 80196e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80196e2:	ec41 0b19 	vmov	d9, r0, r1
 80196e6:	4649      	mov	r1, r9
 80196e8:	4640      	mov	r0, r8
 80196ea:	f7e7 fa65 	bl	8000bb8 <__aeabi_d2iz>
 80196ee:	4606      	mov	r6, r0
 80196f0:	f7e6 ff48 	bl	8000584 <__aeabi_i2d>
 80196f4:	3630      	adds	r6, #48	; 0x30
 80196f6:	4602      	mov	r2, r0
 80196f8:	460b      	mov	r3, r1
 80196fa:	4640      	mov	r0, r8
 80196fc:	4649      	mov	r1, r9
 80196fe:	f7e6 fdf3 	bl	80002e8 <__aeabi_dsub>
 8019702:	f805 6b01 	strb.w	r6, [r5], #1
 8019706:	9b02      	ldr	r3, [sp, #8]
 8019708:	429d      	cmp	r5, r3
 801970a:	4680      	mov	r8, r0
 801970c:	4689      	mov	r9, r1
 801970e:	f04f 0200 	mov.w	r2, #0
 8019712:	d124      	bne.n	801975e <_dtoa_r+0x62e>
 8019714:	4b1b      	ldr	r3, [pc, #108]	; (8019784 <_dtoa_r+0x654>)
 8019716:	ec51 0b19 	vmov	r0, r1, d9
 801971a:	f7e6 fde7 	bl	80002ec <__adddf3>
 801971e:	4602      	mov	r2, r0
 8019720:	460b      	mov	r3, r1
 8019722:	4640      	mov	r0, r8
 8019724:	4649      	mov	r1, r9
 8019726:	f7e7 fa27 	bl	8000b78 <__aeabi_dcmpgt>
 801972a:	2800      	cmp	r0, #0
 801972c:	d173      	bne.n	8019816 <_dtoa_r+0x6e6>
 801972e:	ec53 2b19 	vmov	r2, r3, d9
 8019732:	4914      	ldr	r1, [pc, #80]	; (8019784 <_dtoa_r+0x654>)
 8019734:	2000      	movs	r0, #0
 8019736:	f7e6 fdd7 	bl	80002e8 <__aeabi_dsub>
 801973a:	4602      	mov	r2, r0
 801973c:	460b      	mov	r3, r1
 801973e:	4640      	mov	r0, r8
 8019740:	4649      	mov	r1, r9
 8019742:	f7e7 f9fb 	bl	8000b3c <__aeabi_dcmplt>
 8019746:	2800      	cmp	r0, #0
 8019748:	f43f af2f 	beq.w	80195aa <_dtoa_r+0x47a>
 801974c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801974e:	1e6b      	subs	r3, r5, #1
 8019750:	930f      	str	r3, [sp, #60]	; 0x3c
 8019752:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8019756:	2b30      	cmp	r3, #48	; 0x30
 8019758:	d0f8      	beq.n	801974c <_dtoa_r+0x61c>
 801975a:	46bb      	mov	fp, r7
 801975c:	e04a      	b.n	80197f4 <_dtoa_r+0x6c4>
 801975e:	4b06      	ldr	r3, [pc, #24]	; (8019778 <_dtoa_r+0x648>)
 8019760:	f7e6 ff7a 	bl	8000658 <__aeabi_dmul>
 8019764:	4680      	mov	r8, r0
 8019766:	4689      	mov	r9, r1
 8019768:	e7bd      	b.n	80196e6 <_dtoa_r+0x5b6>
 801976a:	bf00      	nop
 801976c:	0801dbe0 	.word	0x0801dbe0
 8019770:	0801dbb8 	.word	0x0801dbb8
 8019774:	3ff00000 	.word	0x3ff00000
 8019778:	40240000 	.word	0x40240000
 801977c:	401c0000 	.word	0x401c0000
 8019780:	40140000 	.word	0x40140000
 8019784:	3fe00000 	.word	0x3fe00000
 8019788:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801978c:	9d00      	ldr	r5, [sp, #0]
 801978e:	4642      	mov	r2, r8
 8019790:	464b      	mov	r3, r9
 8019792:	4630      	mov	r0, r6
 8019794:	4639      	mov	r1, r7
 8019796:	f7e7 f889 	bl	80008ac <__aeabi_ddiv>
 801979a:	f7e7 fa0d 	bl	8000bb8 <__aeabi_d2iz>
 801979e:	9001      	str	r0, [sp, #4]
 80197a0:	f7e6 fef0 	bl	8000584 <__aeabi_i2d>
 80197a4:	4642      	mov	r2, r8
 80197a6:	464b      	mov	r3, r9
 80197a8:	f7e6 ff56 	bl	8000658 <__aeabi_dmul>
 80197ac:	4602      	mov	r2, r0
 80197ae:	460b      	mov	r3, r1
 80197b0:	4630      	mov	r0, r6
 80197b2:	4639      	mov	r1, r7
 80197b4:	f7e6 fd98 	bl	80002e8 <__aeabi_dsub>
 80197b8:	9e01      	ldr	r6, [sp, #4]
 80197ba:	9f04      	ldr	r7, [sp, #16]
 80197bc:	3630      	adds	r6, #48	; 0x30
 80197be:	f805 6b01 	strb.w	r6, [r5], #1
 80197c2:	9e00      	ldr	r6, [sp, #0]
 80197c4:	1bae      	subs	r6, r5, r6
 80197c6:	42b7      	cmp	r7, r6
 80197c8:	4602      	mov	r2, r0
 80197ca:	460b      	mov	r3, r1
 80197cc:	d134      	bne.n	8019838 <_dtoa_r+0x708>
 80197ce:	f7e6 fd8d 	bl	80002ec <__adddf3>
 80197d2:	4642      	mov	r2, r8
 80197d4:	464b      	mov	r3, r9
 80197d6:	4606      	mov	r6, r0
 80197d8:	460f      	mov	r7, r1
 80197da:	f7e7 f9cd 	bl	8000b78 <__aeabi_dcmpgt>
 80197de:	b9c8      	cbnz	r0, 8019814 <_dtoa_r+0x6e4>
 80197e0:	4642      	mov	r2, r8
 80197e2:	464b      	mov	r3, r9
 80197e4:	4630      	mov	r0, r6
 80197e6:	4639      	mov	r1, r7
 80197e8:	f7e7 f99e 	bl	8000b28 <__aeabi_dcmpeq>
 80197ec:	b110      	cbz	r0, 80197f4 <_dtoa_r+0x6c4>
 80197ee:	9b01      	ldr	r3, [sp, #4]
 80197f0:	07db      	lsls	r3, r3, #31
 80197f2:	d40f      	bmi.n	8019814 <_dtoa_r+0x6e4>
 80197f4:	4651      	mov	r1, sl
 80197f6:	4620      	mov	r0, r4
 80197f8:	f000 fb18 	bl	8019e2c <_Bfree>
 80197fc:	2300      	movs	r3, #0
 80197fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019800:	702b      	strb	r3, [r5, #0]
 8019802:	f10b 0301 	add.w	r3, fp, #1
 8019806:	6013      	str	r3, [r2, #0]
 8019808:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801980a:	2b00      	cmp	r3, #0
 801980c:	f43f ace2 	beq.w	80191d4 <_dtoa_r+0xa4>
 8019810:	601d      	str	r5, [r3, #0]
 8019812:	e4df      	b.n	80191d4 <_dtoa_r+0xa4>
 8019814:	465f      	mov	r7, fp
 8019816:	462b      	mov	r3, r5
 8019818:	461d      	mov	r5, r3
 801981a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801981e:	2a39      	cmp	r2, #57	; 0x39
 8019820:	d106      	bne.n	8019830 <_dtoa_r+0x700>
 8019822:	9a00      	ldr	r2, [sp, #0]
 8019824:	429a      	cmp	r2, r3
 8019826:	d1f7      	bne.n	8019818 <_dtoa_r+0x6e8>
 8019828:	9900      	ldr	r1, [sp, #0]
 801982a:	2230      	movs	r2, #48	; 0x30
 801982c:	3701      	adds	r7, #1
 801982e:	700a      	strb	r2, [r1, #0]
 8019830:	781a      	ldrb	r2, [r3, #0]
 8019832:	3201      	adds	r2, #1
 8019834:	701a      	strb	r2, [r3, #0]
 8019836:	e790      	b.n	801975a <_dtoa_r+0x62a>
 8019838:	4ba3      	ldr	r3, [pc, #652]	; (8019ac8 <_dtoa_r+0x998>)
 801983a:	2200      	movs	r2, #0
 801983c:	f7e6 ff0c 	bl	8000658 <__aeabi_dmul>
 8019840:	2200      	movs	r2, #0
 8019842:	2300      	movs	r3, #0
 8019844:	4606      	mov	r6, r0
 8019846:	460f      	mov	r7, r1
 8019848:	f7e7 f96e 	bl	8000b28 <__aeabi_dcmpeq>
 801984c:	2800      	cmp	r0, #0
 801984e:	d09e      	beq.n	801978e <_dtoa_r+0x65e>
 8019850:	e7d0      	b.n	80197f4 <_dtoa_r+0x6c4>
 8019852:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019854:	2a00      	cmp	r2, #0
 8019856:	f000 80ca 	beq.w	80199ee <_dtoa_r+0x8be>
 801985a:	9a07      	ldr	r2, [sp, #28]
 801985c:	2a01      	cmp	r2, #1
 801985e:	f300 80ad 	bgt.w	80199bc <_dtoa_r+0x88c>
 8019862:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019864:	2a00      	cmp	r2, #0
 8019866:	f000 80a5 	beq.w	80199b4 <_dtoa_r+0x884>
 801986a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801986e:	9e08      	ldr	r6, [sp, #32]
 8019870:	9d05      	ldr	r5, [sp, #20]
 8019872:	9a05      	ldr	r2, [sp, #20]
 8019874:	441a      	add	r2, r3
 8019876:	9205      	str	r2, [sp, #20]
 8019878:	9a06      	ldr	r2, [sp, #24]
 801987a:	2101      	movs	r1, #1
 801987c:	441a      	add	r2, r3
 801987e:	4620      	mov	r0, r4
 8019880:	9206      	str	r2, [sp, #24]
 8019882:	f000 fbd3 	bl	801a02c <__i2b>
 8019886:	4607      	mov	r7, r0
 8019888:	b165      	cbz	r5, 80198a4 <_dtoa_r+0x774>
 801988a:	9b06      	ldr	r3, [sp, #24]
 801988c:	2b00      	cmp	r3, #0
 801988e:	dd09      	ble.n	80198a4 <_dtoa_r+0x774>
 8019890:	42ab      	cmp	r3, r5
 8019892:	9a05      	ldr	r2, [sp, #20]
 8019894:	bfa8      	it	ge
 8019896:	462b      	movge	r3, r5
 8019898:	1ad2      	subs	r2, r2, r3
 801989a:	9205      	str	r2, [sp, #20]
 801989c:	9a06      	ldr	r2, [sp, #24]
 801989e:	1aed      	subs	r5, r5, r3
 80198a0:	1ad3      	subs	r3, r2, r3
 80198a2:	9306      	str	r3, [sp, #24]
 80198a4:	9b08      	ldr	r3, [sp, #32]
 80198a6:	b1f3      	cbz	r3, 80198e6 <_dtoa_r+0x7b6>
 80198a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80198aa:	2b00      	cmp	r3, #0
 80198ac:	f000 80a3 	beq.w	80199f6 <_dtoa_r+0x8c6>
 80198b0:	2e00      	cmp	r6, #0
 80198b2:	dd10      	ble.n	80198d6 <_dtoa_r+0x7a6>
 80198b4:	4639      	mov	r1, r7
 80198b6:	4632      	mov	r2, r6
 80198b8:	4620      	mov	r0, r4
 80198ba:	f000 fc77 	bl	801a1ac <__pow5mult>
 80198be:	4652      	mov	r2, sl
 80198c0:	4601      	mov	r1, r0
 80198c2:	4607      	mov	r7, r0
 80198c4:	4620      	mov	r0, r4
 80198c6:	f000 fbc7 	bl	801a058 <__multiply>
 80198ca:	4651      	mov	r1, sl
 80198cc:	4680      	mov	r8, r0
 80198ce:	4620      	mov	r0, r4
 80198d0:	f000 faac 	bl	8019e2c <_Bfree>
 80198d4:	46c2      	mov	sl, r8
 80198d6:	9b08      	ldr	r3, [sp, #32]
 80198d8:	1b9a      	subs	r2, r3, r6
 80198da:	d004      	beq.n	80198e6 <_dtoa_r+0x7b6>
 80198dc:	4651      	mov	r1, sl
 80198de:	4620      	mov	r0, r4
 80198e0:	f000 fc64 	bl	801a1ac <__pow5mult>
 80198e4:	4682      	mov	sl, r0
 80198e6:	2101      	movs	r1, #1
 80198e8:	4620      	mov	r0, r4
 80198ea:	f000 fb9f 	bl	801a02c <__i2b>
 80198ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80198f0:	2b00      	cmp	r3, #0
 80198f2:	4606      	mov	r6, r0
 80198f4:	f340 8081 	ble.w	80199fa <_dtoa_r+0x8ca>
 80198f8:	461a      	mov	r2, r3
 80198fa:	4601      	mov	r1, r0
 80198fc:	4620      	mov	r0, r4
 80198fe:	f000 fc55 	bl	801a1ac <__pow5mult>
 8019902:	9b07      	ldr	r3, [sp, #28]
 8019904:	2b01      	cmp	r3, #1
 8019906:	4606      	mov	r6, r0
 8019908:	dd7a      	ble.n	8019a00 <_dtoa_r+0x8d0>
 801990a:	f04f 0800 	mov.w	r8, #0
 801990e:	6933      	ldr	r3, [r6, #16]
 8019910:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8019914:	6918      	ldr	r0, [r3, #16]
 8019916:	f000 fb3b 	bl	8019f90 <__hi0bits>
 801991a:	f1c0 0020 	rsb	r0, r0, #32
 801991e:	9b06      	ldr	r3, [sp, #24]
 8019920:	4418      	add	r0, r3
 8019922:	f010 001f 	ands.w	r0, r0, #31
 8019926:	f000 8094 	beq.w	8019a52 <_dtoa_r+0x922>
 801992a:	f1c0 0320 	rsb	r3, r0, #32
 801992e:	2b04      	cmp	r3, #4
 8019930:	f340 8085 	ble.w	8019a3e <_dtoa_r+0x90e>
 8019934:	9b05      	ldr	r3, [sp, #20]
 8019936:	f1c0 001c 	rsb	r0, r0, #28
 801993a:	4403      	add	r3, r0
 801993c:	9305      	str	r3, [sp, #20]
 801993e:	9b06      	ldr	r3, [sp, #24]
 8019940:	4403      	add	r3, r0
 8019942:	4405      	add	r5, r0
 8019944:	9306      	str	r3, [sp, #24]
 8019946:	9b05      	ldr	r3, [sp, #20]
 8019948:	2b00      	cmp	r3, #0
 801994a:	dd05      	ble.n	8019958 <_dtoa_r+0x828>
 801994c:	4651      	mov	r1, sl
 801994e:	461a      	mov	r2, r3
 8019950:	4620      	mov	r0, r4
 8019952:	f000 fc85 	bl	801a260 <__lshift>
 8019956:	4682      	mov	sl, r0
 8019958:	9b06      	ldr	r3, [sp, #24]
 801995a:	2b00      	cmp	r3, #0
 801995c:	dd05      	ble.n	801996a <_dtoa_r+0x83a>
 801995e:	4631      	mov	r1, r6
 8019960:	461a      	mov	r2, r3
 8019962:	4620      	mov	r0, r4
 8019964:	f000 fc7c 	bl	801a260 <__lshift>
 8019968:	4606      	mov	r6, r0
 801996a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801996c:	2b00      	cmp	r3, #0
 801996e:	d072      	beq.n	8019a56 <_dtoa_r+0x926>
 8019970:	4631      	mov	r1, r6
 8019972:	4650      	mov	r0, sl
 8019974:	f000 fce0 	bl	801a338 <__mcmp>
 8019978:	2800      	cmp	r0, #0
 801997a:	da6c      	bge.n	8019a56 <_dtoa_r+0x926>
 801997c:	2300      	movs	r3, #0
 801997e:	4651      	mov	r1, sl
 8019980:	220a      	movs	r2, #10
 8019982:	4620      	mov	r0, r4
 8019984:	f000 fa74 	bl	8019e70 <__multadd>
 8019988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801998a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801998e:	4682      	mov	sl, r0
 8019990:	2b00      	cmp	r3, #0
 8019992:	f000 81b0 	beq.w	8019cf6 <_dtoa_r+0xbc6>
 8019996:	2300      	movs	r3, #0
 8019998:	4639      	mov	r1, r7
 801999a:	220a      	movs	r2, #10
 801999c:	4620      	mov	r0, r4
 801999e:	f000 fa67 	bl	8019e70 <__multadd>
 80199a2:	9b01      	ldr	r3, [sp, #4]
 80199a4:	2b00      	cmp	r3, #0
 80199a6:	4607      	mov	r7, r0
 80199a8:	f300 8096 	bgt.w	8019ad8 <_dtoa_r+0x9a8>
 80199ac:	9b07      	ldr	r3, [sp, #28]
 80199ae:	2b02      	cmp	r3, #2
 80199b0:	dc59      	bgt.n	8019a66 <_dtoa_r+0x936>
 80199b2:	e091      	b.n	8019ad8 <_dtoa_r+0x9a8>
 80199b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80199b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80199ba:	e758      	b.n	801986e <_dtoa_r+0x73e>
 80199bc:	9b04      	ldr	r3, [sp, #16]
 80199be:	1e5e      	subs	r6, r3, #1
 80199c0:	9b08      	ldr	r3, [sp, #32]
 80199c2:	42b3      	cmp	r3, r6
 80199c4:	bfbf      	itttt	lt
 80199c6:	9b08      	ldrlt	r3, [sp, #32]
 80199c8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80199ca:	9608      	strlt	r6, [sp, #32]
 80199cc:	1af3      	sublt	r3, r6, r3
 80199ce:	bfb4      	ite	lt
 80199d0:	18d2      	addlt	r2, r2, r3
 80199d2:	1b9e      	subge	r6, r3, r6
 80199d4:	9b04      	ldr	r3, [sp, #16]
 80199d6:	bfbc      	itt	lt
 80199d8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80199da:	2600      	movlt	r6, #0
 80199dc:	2b00      	cmp	r3, #0
 80199de:	bfb7      	itett	lt
 80199e0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80199e4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80199e8:	1a9d      	sublt	r5, r3, r2
 80199ea:	2300      	movlt	r3, #0
 80199ec:	e741      	b.n	8019872 <_dtoa_r+0x742>
 80199ee:	9e08      	ldr	r6, [sp, #32]
 80199f0:	9d05      	ldr	r5, [sp, #20]
 80199f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80199f4:	e748      	b.n	8019888 <_dtoa_r+0x758>
 80199f6:	9a08      	ldr	r2, [sp, #32]
 80199f8:	e770      	b.n	80198dc <_dtoa_r+0x7ac>
 80199fa:	9b07      	ldr	r3, [sp, #28]
 80199fc:	2b01      	cmp	r3, #1
 80199fe:	dc19      	bgt.n	8019a34 <_dtoa_r+0x904>
 8019a00:	9b02      	ldr	r3, [sp, #8]
 8019a02:	b9bb      	cbnz	r3, 8019a34 <_dtoa_r+0x904>
 8019a04:	9b03      	ldr	r3, [sp, #12]
 8019a06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019a0a:	b99b      	cbnz	r3, 8019a34 <_dtoa_r+0x904>
 8019a0c:	9b03      	ldr	r3, [sp, #12]
 8019a0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019a12:	0d1b      	lsrs	r3, r3, #20
 8019a14:	051b      	lsls	r3, r3, #20
 8019a16:	b183      	cbz	r3, 8019a3a <_dtoa_r+0x90a>
 8019a18:	9b05      	ldr	r3, [sp, #20]
 8019a1a:	3301      	adds	r3, #1
 8019a1c:	9305      	str	r3, [sp, #20]
 8019a1e:	9b06      	ldr	r3, [sp, #24]
 8019a20:	3301      	adds	r3, #1
 8019a22:	9306      	str	r3, [sp, #24]
 8019a24:	f04f 0801 	mov.w	r8, #1
 8019a28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019a2a:	2b00      	cmp	r3, #0
 8019a2c:	f47f af6f 	bne.w	801990e <_dtoa_r+0x7de>
 8019a30:	2001      	movs	r0, #1
 8019a32:	e774      	b.n	801991e <_dtoa_r+0x7ee>
 8019a34:	f04f 0800 	mov.w	r8, #0
 8019a38:	e7f6      	b.n	8019a28 <_dtoa_r+0x8f8>
 8019a3a:	4698      	mov	r8, r3
 8019a3c:	e7f4      	b.n	8019a28 <_dtoa_r+0x8f8>
 8019a3e:	d082      	beq.n	8019946 <_dtoa_r+0x816>
 8019a40:	9a05      	ldr	r2, [sp, #20]
 8019a42:	331c      	adds	r3, #28
 8019a44:	441a      	add	r2, r3
 8019a46:	9205      	str	r2, [sp, #20]
 8019a48:	9a06      	ldr	r2, [sp, #24]
 8019a4a:	441a      	add	r2, r3
 8019a4c:	441d      	add	r5, r3
 8019a4e:	9206      	str	r2, [sp, #24]
 8019a50:	e779      	b.n	8019946 <_dtoa_r+0x816>
 8019a52:	4603      	mov	r3, r0
 8019a54:	e7f4      	b.n	8019a40 <_dtoa_r+0x910>
 8019a56:	9b04      	ldr	r3, [sp, #16]
 8019a58:	2b00      	cmp	r3, #0
 8019a5a:	dc37      	bgt.n	8019acc <_dtoa_r+0x99c>
 8019a5c:	9b07      	ldr	r3, [sp, #28]
 8019a5e:	2b02      	cmp	r3, #2
 8019a60:	dd34      	ble.n	8019acc <_dtoa_r+0x99c>
 8019a62:	9b04      	ldr	r3, [sp, #16]
 8019a64:	9301      	str	r3, [sp, #4]
 8019a66:	9b01      	ldr	r3, [sp, #4]
 8019a68:	b963      	cbnz	r3, 8019a84 <_dtoa_r+0x954>
 8019a6a:	4631      	mov	r1, r6
 8019a6c:	2205      	movs	r2, #5
 8019a6e:	4620      	mov	r0, r4
 8019a70:	f000 f9fe 	bl	8019e70 <__multadd>
 8019a74:	4601      	mov	r1, r0
 8019a76:	4606      	mov	r6, r0
 8019a78:	4650      	mov	r0, sl
 8019a7a:	f000 fc5d 	bl	801a338 <__mcmp>
 8019a7e:	2800      	cmp	r0, #0
 8019a80:	f73f adbb 	bgt.w	80195fa <_dtoa_r+0x4ca>
 8019a84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019a86:	9d00      	ldr	r5, [sp, #0]
 8019a88:	ea6f 0b03 	mvn.w	fp, r3
 8019a8c:	f04f 0800 	mov.w	r8, #0
 8019a90:	4631      	mov	r1, r6
 8019a92:	4620      	mov	r0, r4
 8019a94:	f000 f9ca 	bl	8019e2c <_Bfree>
 8019a98:	2f00      	cmp	r7, #0
 8019a9a:	f43f aeab 	beq.w	80197f4 <_dtoa_r+0x6c4>
 8019a9e:	f1b8 0f00 	cmp.w	r8, #0
 8019aa2:	d005      	beq.n	8019ab0 <_dtoa_r+0x980>
 8019aa4:	45b8      	cmp	r8, r7
 8019aa6:	d003      	beq.n	8019ab0 <_dtoa_r+0x980>
 8019aa8:	4641      	mov	r1, r8
 8019aaa:	4620      	mov	r0, r4
 8019aac:	f000 f9be 	bl	8019e2c <_Bfree>
 8019ab0:	4639      	mov	r1, r7
 8019ab2:	4620      	mov	r0, r4
 8019ab4:	f000 f9ba 	bl	8019e2c <_Bfree>
 8019ab8:	e69c      	b.n	80197f4 <_dtoa_r+0x6c4>
 8019aba:	2600      	movs	r6, #0
 8019abc:	4637      	mov	r7, r6
 8019abe:	e7e1      	b.n	8019a84 <_dtoa_r+0x954>
 8019ac0:	46bb      	mov	fp, r7
 8019ac2:	4637      	mov	r7, r6
 8019ac4:	e599      	b.n	80195fa <_dtoa_r+0x4ca>
 8019ac6:	bf00      	nop
 8019ac8:	40240000 	.word	0x40240000
 8019acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019ace:	2b00      	cmp	r3, #0
 8019ad0:	f000 80c8 	beq.w	8019c64 <_dtoa_r+0xb34>
 8019ad4:	9b04      	ldr	r3, [sp, #16]
 8019ad6:	9301      	str	r3, [sp, #4]
 8019ad8:	2d00      	cmp	r5, #0
 8019ada:	dd05      	ble.n	8019ae8 <_dtoa_r+0x9b8>
 8019adc:	4639      	mov	r1, r7
 8019ade:	462a      	mov	r2, r5
 8019ae0:	4620      	mov	r0, r4
 8019ae2:	f000 fbbd 	bl	801a260 <__lshift>
 8019ae6:	4607      	mov	r7, r0
 8019ae8:	f1b8 0f00 	cmp.w	r8, #0
 8019aec:	d05b      	beq.n	8019ba6 <_dtoa_r+0xa76>
 8019aee:	6879      	ldr	r1, [r7, #4]
 8019af0:	4620      	mov	r0, r4
 8019af2:	f000 f95b 	bl	8019dac <_Balloc>
 8019af6:	4605      	mov	r5, r0
 8019af8:	b928      	cbnz	r0, 8019b06 <_dtoa_r+0x9d6>
 8019afa:	4b83      	ldr	r3, [pc, #524]	; (8019d08 <_dtoa_r+0xbd8>)
 8019afc:	4602      	mov	r2, r0
 8019afe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8019b02:	f7ff bb2e 	b.w	8019162 <_dtoa_r+0x32>
 8019b06:	693a      	ldr	r2, [r7, #16]
 8019b08:	3202      	adds	r2, #2
 8019b0a:	0092      	lsls	r2, r2, #2
 8019b0c:	f107 010c 	add.w	r1, r7, #12
 8019b10:	300c      	adds	r0, #12
 8019b12:	f7ff fa71 	bl	8018ff8 <memcpy>
 8019b16:	2201      	movs	r2, #1
 8019b18:	4629      	mov	r1, r5
 8019b1a:	4620      	mov	r0, r4
 8019b1c:	f000 fba0 	bl	801a260 <__lshift>
 8019b20:	9b00      	ldr	r3, [sp, #0]
 8019b22:	3301      	adds	r3, #1
 8019b24:	9304      	str	r3, [sp, #16]
 8019b26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019b2a:	4413      	add	r3, r2
 8019b2c:	9308      	str	r3, [sp, #32]
 8019b2e:	9b02      	ldr	r3, [sp, #8]
 8019b30:	f003 0301 	and.w	r3, r3, #1
 8019b34:	46b8      	mov	r8, r7
 8019b36:	9306      	str	r3, [sp, #24]
 8019b38:	4607      	mov	r7, r0
 8019b3a:	9b04      	ldr	r3, [sp, #16]
 8019b3c:	4631      	mov	r1, r6
 8019b3e:	3b01      	subs	r3, #1
 8019b40:	4650      	mov	r0, sl
 8019b42:	9301      	str	r3, [sp, #4]
 8019b44:	f7ff fa6c 	bl	8019020 <quorem>
 8019b48:	4641      	mov	r1, r8
 8019b4a:	9002      	str	r0, [sp, #8]
 8019b4c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8019b50:	4650      	mov	r0, sl
 8019b52:	f000 fbf1 	bl	801a338 <__mcmp>
 8019b56:	463a      	mov	r2, r7
 8019b58:	9005      	str	r0, [sp, #20]
 8019b5a:	4631      	mov	r1, r6
 8019b5c:	4620      	mov	r0, r4
 8019b5e:	f000 fc07 	bl	801a370 <__mdiff>
 8019b62:	68c2      	ldr	r2, [r0, #12]
 8019b64:	4605      	mov	r5, r0
 8019b66:	bb02      	cbnz	r2, 8019baa <_dtoa_r+0xa7a>
 8019b68:	4601      	mov	r1, r0
 8019b6a:	4650      	mov	r0, sl
 8019b6c:	f000 fbe4 	bl	801a338 <__mcmp>
 8019b70:	4602      	mov	r2, r0
 8019b72:	4629      	mov	r1, r5
 8019b74:	4620      	mov	r0, r4
 8019b76:	9209      	str	r2, [sp, #36]	; 0x24
 8019b78:	f000 f958 	bl	8019e2c <_Bfree>
 8019b7c:	9b07      	ldr	r3, [sp, #28]
 8019b7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019b80:	9d04      	ldr	r5, [sp, #16]
 8019b82:	ea43 0102 	orr.w	r1, r3, r2
 8019b86:	9b06      	ldr	r3, [sp, #24]
 8019b88:	4319      	orrs	r1, r3
 8019b8a:	d110      	bne.n	8019bae <_dtoa_r+0xa7e>
 8019b8c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8019b90:	d029      	beq.n	8019be6 <_dtoa_r+0xab6>
 8019b92:	9b05      	ldr	r3, [sp, #20]
 8019b94:	2b00      	cmp	r3, #0
 8019b96:	dd02      	ble.n	8019b9e <_dtoa_r+0xa6e>
 8019b98:	9b02      	ldr	r3, [sp, #8]
 8019b9a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8019b9e:	9b01      	ldr	r3, [sp, #4]
 8019ba0:	f883 9000 	strb.w	r9, [r3]
 8019ba4:	e774      	b.n	8019a90 <_dtoa_r+0x960>
 8019ba6:	4638      	mov	r0, r7
 8019ba8:	e7ba      	b.n	8019b20 <_dtoa_r+0x9f0>
 8019baa:	2201      	movs	r2, #1
 8019bac:	e7e1      	b.n	8019b72 <_dtoa_r+0xa42>
 8019bae:	9b05      	ldr	r3, [sp, #20]
 8019bb0:	2b00      	cmp	r3, #0
 8019bb2:	db04      	blt.n	8019bbe <_dtoa_r+0xa8e>
 8019bb4:	9907      	ldr	r1, [sp, #28]
 8019bb6:	430b      	orrs	r3, r1
 8019bb8:	9906      	ldr	r1, [sp, #24]
 8019bba:	430b      	orrs	r3, r1
 8019bbc:	d120      	bne.n	8019c00 <_dtoa_r+0xad0>
 8019bbe:	2a00      	cmp	r2, #0
 8019bc0:	dded      	ble.n	8019b9e <_dtoa_r+0xa6e>
 8019bc2:	4651      	mov	r1, sl
 8019bc4:	2201      	movs	r2, #1
 8019bc6:	4620      	mov	r0, r4
 8019bc8:	f000 fb4a 	bl	801a260 <__lshift>
 8019bcc:	4631      	mov	r1, r6
 8019bce:	4682      	mov	sl, r0
 8019bd0:	f000 fbb2 	bl	801a338 <__mcmp>
 8019bd4:	2800      	cmp	r0, #0
 8019bd6:	dc03      	bgt.n	8019be0 <_dtoa_r+0xab0>
 8019bd8:	d1e1      	bne.n	8019b9e <_dtoa_r+0xa6e>
 8019bda:	f019 0f01 	tst.w	r9, #1
 8019bde:	d0de      	beq.n	8019b9e <_dtoa_r+0xa6e>
 8019be0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8019be4:	d1d8      	bne.n	8019b98 <_dtoa_r+0xa68>
 8019be6:	9a01      	ldr	r2, [sp, #4]
 8019be8:	2339      	movs	r3, #57	; 0x39
 8019bea:	7013      	strb	r3, [r2, #0]
 8019bec:	462b      	mov	r3, r5
 8019bee:	461d      	mov	r5, r3
 8019bf0:	3b01      	subs	r3, #1
 8019bf2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8019bf6:	2a39      	cmp	r2, #57	; 0x39
 8019bf8:	d06c      	beq.n	8019cd4 <_dtoa_r+0xba4>
 8019bfa:	3201      	adds	r2, #1
 8019bfc:	701a      	strb	r2, [r3, #0]
 8019bfe:	e747      	b.n	8019a90 <_dtoa_r+0x960>
 8019c00:	2a00      	cmp	r2, #0
 8019c02:	dd07      	ble.n	8019c14 <_dtoa_r+0xae4>
 8019c04:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8019c08:	d0ed      	beq.n	8019be6 <_dtoa_r+0xab6>
 8019c0a:	9a01      	ldr	r2, [sp, #4]
 8019c0c:	f109 0301 	add.w	r3, r9, #1
 8019c10:	7013      	strb	r3, [r2, #0]
 8019c12:	e73d      	b.n	8019a90 <_dtoa_r+0x960>
 8019c14:	9b04      	ldr	r3, [sp, #16]
 8019c16:	9a08      	ldr	r2, [sp, #32]
 8019c18:	f803 9c01 	strb.w	r9, [r3, #-1]
 8019c1c:	4293      	cmp	r3, r2
 8019c1e:	d043      	beq.n	8019ca8 <_dtoa_r+0xb78>
 8019c20:	4651      	mov	r1, sl
 8019c22:	2300      	movs	r3, #0
 8019c24:	220a      	movs	r2, #10
 8019c26:	4620      	mov	r0, r4
 8019c28:	f000 f922 	bl	8019e70 <__multadd>
 8019c2c:	45b8      	cmp	r8, r7
 8019c2e:	4682      	mov	sl, r0
 8019c30:	f04f 0300 	mov.w	r3, #0
 8019c34:	f04f 020a 	mov.w	r2, #10
 8019c38:	4641      	mov	r1, r8
 8019c3a:	4620      	mov	r0, r4
 8019c3c:	d107      	bne.n	8019c4e <_dtoa_r+0xb1e>
 8019c3e:	f000 f917 	bl	8019e70 <__multadd>
 8019c42:	4680      	mov	r8, r0
 8019c44:	4607      	mov	r7, r0
 8019c46:	9b04      	ldr	r3, [sp, #16]
 8019c48:	3301      	adds	r3, #1
 8019c4a:	9304      	str	r3, [sp, #16]
 8019c4c:	e775      	b.n	8019b3a <_dtoa_r+0xa0a>
 8019c4e:	f000 f90f 	bl	8019e70 <__multadd>
 8019c52:	4639      	mov	r1, r7
 8019c54:	4680      	mov	r8, r0
 8019c56:	2300      	movs	r3, #0
 8019c58:	220a      	movs	r2, #10
 8019c5a:	4620      	mov	r0, r4
 8019c5c:	f000 f908 	bl	8019e70 <__multadd>
 8019c60:	4607      	mov	r7, r0
 8019c62:	e7f0      	b.n	8019c46 <_dtoa_r+0xb16>
 8019c64:	9b04      	ldr	r3, [sp, #16]
 8019c66:	9301      	str	r3, [sp, #4]
 8019c68:	9d00      	ldr	r5, [sp, #0]
 8019c6a:	4631      	mov	r1, r6
 8019c6c:	4650      	mov	r0, sl
 8019c6e:	f7ff f9d7 	bl	8019020 <quorem>
 8019c72:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8019c76:	9b00      	ldr	r3, [sp, #0]
 8019c78:	f805 9b01 	strb.w	r9, [r5], #1
 8019c7c:	1aea      	subs	r2, r5, r3
 8019c7e:	9b01      	ldr	r3, [sp, #4]
 8019c80:	4293      	cmp	r3, r2
 8019c82:	dd07      	ble.n	8019c94 <_dtoa_r+0xb64>
 8019c84:	4651      	mov	r1, sl
 8019c86:	2300      	movs	r3, #0
 8019c88:	220a      	movs	r2, #10
 8019c8a:	4620      	mov	r0, r4
 8019c8c:	f000 f8f0 	bl	8019e70 <__multadd>
 8019c90:	4682      	mov	sl, r0
 8019c92:	e7ea      	b.n	8019c6a <_dtoa_r+0xb3a>
 8019c94:	9b01      	ldr	r3, [sp, #4]
 8019c96:	2b00      	cmp	r3, #0
 8019c98:	bfc8      	it	gt
 8019c9a:	461d      	movgt	r5, r3
 8019c9c:	9b00      	ldr	r3, [sp, #0]
 8019c9e:	bfd8      	it	le
 8019ca0:	2501      	movle	r5, #1
 8019ca2:	441d      	add	r5, r3
 8019ca4:	f04f 0800 	mov.w	r8, #0
 8019ca8:	4651      	mov	r1, sl
 8019caa:	2201      	movs	r2, #1
 8019cac:	4620      	mov	r0, r4
 8019cae:	f000 fad7 	bl	801a260 <__lshift>
 8019cb2:	4631      	mov	r1, r6
 8019cb4:	4682      	mov	sl, r0
 8019cb6:	f000 fb3f 	bl	801a338 <__mcmp>
 8019cba:	2800      	cmp	r0, #0
 8019cbc:	dc96      	bgt.n	8019bec <_dtoa_r+0xabc>
 8019cbe:	d102      	bne.n	8019cc6 <_dtoa_r+0xb96>
 8019cc0:	f019 0f01 	tst.w	r9, #1
 8019cc4:	d192      	bne.n	8019bec <_dtoa_r+0xabc>
 8019cc6:	462b      	mov	r3, r5
 8019cc8:	461d      	mov	r5, r3
 8019cca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019cce:	2a30      	cmp	r2, #48	; 0x30
 8019cd0:	d0fa      	beq.n	8019cc8 <_dtoa_r+0xb98>
 8019cd2:	e6dd      	b.n	8019a90 <_dtoa_r+0x960>
 8019cd4:	9a00      	ldr	r2, [sp, #0]
 8019cd6:	429a      	cmp	r2, r3
 8019cd8:	d189      	bne.n	8019bee <_dtoa_r+0xabe>
 8019cda:	f10b 0b01 	add.w	fp, fp, #1
 8019cde:	2331      	movs	r3, #49	; 0x31
 8019ce0:	e796      	b.n	8019c10 <_dtoa_r+0xae0>
 8019ce2:	4b0a      	ldr	r3, [pc, #40]	; (8019d0c <_dtoa_r+0xbdc>)
 8019ce4:	f7ff ba99 	b.w	801921a <_dtoa_r+0xea>
 8019ce8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	f47f aa6d 	bne.w	80191ca <_dtoa_r+0x9a>
 8019cf0:	4b07      	ldr	r3, [pc, #28]	; (8019d10 <_dtoa_r+0xbe0>)
 8019cf2:	f7ff ba92 	b.w	801921a <_dtoa_r+0xea>
 8019cf6:	9b01      	ldr	r3, [sp, #4]
 8019cf8:	2b00      	cmp	r3, #0
 8019cfa:	dcb5      	bgt.n	8019c68 <_dtoa_r+0xb38>
 8019cfc:	9b07      	ldr	r3, [sp, #28]
 8019cfe:	2b02      	cmp	r3, #2
 8019d00:	f73f aeb1 	bgt.w	8019a66 <_dtoa_r+0x936>
 8019d04:	e7b0      	b.n	8019c68 <_dtoa_r+0xb38>
 8019d06:	bf00      	nop
 8019d08:	0801db4b 	.word	0x0801db4b
 8019d0c:	0801de30 	.word	0x0801de30
 8019d10:	0801dacf 	.word	0x0801dacf

08019d14 <_free_r>:
 8019d14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019d16:	2900      	cmp	r1, #0
 8019d18:	d044      	beq.n	8019da4 <_free_r+0x90>
 8019d1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019d1e:	9001      	str	r0, [sp, #4]
 8019d20:	2b00      	cmp	r3, #0
 8019d22:	f1a1 0404 	sub.w	r4, r1, #4
 8019d26:	bfb8      	it	lt
 8019d28:	18e4      	addlt	r4, r4, r3
 8019d2a:	f7fd ffab 	bl	8017c84 <__malloc_lock>
 8019d2e:	4a1e      	ldr	r2, [pc, #120]	; (8019da8 <_free_r+0x94>)
 8019d30:	9801      	ldr	r0, [sp, #4]
 8019d32:	6813      	ldr	r3, [r2, #0]
 8019d34:	b933      	cbnz	r3, 8019d44 <_free_r+0x30>
 8019d36:	6063      	str	r3, [r4, #4]
 8019d38:	6014      	str	r4, [r2, #0]
 8019d3a:	b003      	add	sp, #12
 8019d3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019d40:	f7fd bfa6 	b.w	8017c90 <__malloc_unlock>
 8019d44:	42a3      	cmp	r3, r4
 8019d46:	d908      	bls.n	8019d5a <_free_r+0x46>
 8019d48:	6825      	ldr	r5, [r4, #0]
 8019d4a:	1961      	adds	r1, r4, r5
 8019d4c:	428b      	cmp	r3, r1
 8019d4e:	bf01      	itttt	eq
 8019d50:	6819      	ldreq	r1, [r3, #0]
 8019d52:	685b      	ldreq	r3, [r3, #4]
 8019d54:	1949      	addeq	r1, r1, r5
 8019d56:	6021      	streq	r1, [r4, #0]
 8019d58:	e7ed      	b.n	8019d36 <_free_r+0x22>
 8019d5a:	461a      	mov	r2, r3
 8019d5c:	685b      	ldr	r3, [r3, #4]
 8019d5e:	b10b      	cbz	r3, 8019d64 <_free_r+0x50>
 8019d60:	42a3      	cmp	r3, r4
 8019d62:	d9fa      	bls.n	8019d5a <_free_r+0x46>
 8019d64:	6811      	ldr	r1, [r2, #0]
 8019d66:	1855      	adds	r5, r2, r1
 8019d68:	42a5      	cmp	r5, r4
 8019d6a:	d10b      	bne.n	8019d84 <_free_r+0x70>
 8019d6c:	6824      	ldr	r4, [r4, #0]
 8019d6e:	4421      	add	r1, r4
 8019d70:	1854      	adds	r4, r2, r1
 8019d72:	42a3      	cmp	r3, r4
 8019d74:	6011      	str	r1, [r2, #0]
 8019d76:	d1e0      	bne.n	8019d3a <_free_r+0x26>
 8019d78:	681c      	ldr	r4, [r3, #0]
 8019d7a:	685b      	ldr	r3, [r3, #4]
 8019d7c:	6053      	str	r3, [r2, #4]
 8019d7e:	440c      	add	r4, r1
 8019d80:	6014      	str	r4, [r2, #0]
 8019d82:	e7da      	b.n	8019d3a <_free_r+0x26>
 8019d84:	d902      	bls.n	8019d8c <_free_r+0x78>
 8019d86:	230c      	movs	r3, #12
 8019d88:	6003      	str	r3, [r0, #0]
 8019d8a:	e7d6      	b.n	8019d3a <_free_r+0x26>
 8019d8c:	6825      	ldr	r5, [r4, #0]
 8019d8e:	1961      	adds	r1, r4, r5
 8019d90:	428b      	cmp	r3, r1
 8019d92:	bf04      	itt	eq
 8019d94:	6819      	ldreq	r1, [r3, #0]
 8019d96:	685b      	ldreq	r3, [r3, #4]
 8019d98:	6063      	str	r3, [r4, #4]
 8019d9a:	bf04      	itt	eq
 8019d9c:	1949      	addeq	r1, r1, r5
 8019d9e:	6021      	streq	r1, [r4, #0]
 8019da0:	6054      	str	r4, [r2, #4]
 8019da2:	e7ca      	b.n	8019d3a <_free_r+0x26>
 8019da4:	b003      	add	sp, #12
 8019da6:	bd30      	pop	{r4, r5, pc}
 8019da8:	20007c44 	.word	0x20007c44

08019dac <_Balloc>:
 8019dac:	b570      	push	{r4, r5, r6, lr}
 8019dae:	69c6      	ldr	r6, [r0, #28]
 8019db0:	4604      	mov	r4, r0
 8019db2:	460d      	mov	r5, r1
 8019db4:	b976      	cbnz	r6, 8019dd4 <_Balloc+0x28>
 8019db6:	2010      	movs	r0, #16
 8019db8:	f7fd feb4 	bl	8017b24 <malloc>
 8019dbc:	4602      	mov	r2, r0
 8019dbe:	61e0      	str	r0, [r4, #28]
 8019dc0:	b920      	cbnz	r0, 8019dcc <_Balloc+0x20>
 8019dc2:	4b18      	ldr	r3, [pc, #96]	; (8019e24 <_Balloc+0x78>)
 8019dc4:	4818      	ldr	r0, [pc, #96]	; (8019e28 <_Balloc+0x7c>)
 8019dc6:	216b      	movs	r1, #107	; 0x6b
 8019dc8:	f002 faca 	bl	801c360 <__assert_func>
 8019dcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019dd0:	6006      	str	r6, [r0, #0]
 8019dd2:	60c6      	str	r6, [r0, #12]
 8019dd4:	69e6      	ldr	r6, [r4, #28]
 8019dd6:	68f3      	ldr	r3, [r6, #12]
 8019dd8:	b183      	cbz	r3, 8019dfc <_Balloc+0x50>
 8019dda:	69e3      	ldr	r3, [r4, #28]
 8019ddc:	68db      	ldr	r3, [r3, #12]
 8019dde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019de2:	b9b8      	cbnz	r0, 8019e14 <_Balloc+0x68>
 8019de4:	2101      	movs	r1, #1
 8019de6:	fa01 f605 	lsl.w	r6, r1, r5
 8019dea:	1d72      	adds	r2, r6, #5
 8019dec:	0092      	lsls	r2, r2, #2
 8019dee:	4620      	mov	r0, r4
 8019df0:	f7fd fe82 	bl	8017af8 <_calloc_r>
 8019df4:	b160      	cbz	r0, 8019e10 <_Balloc+0x64>
 8019df6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8019dfa:	e00e      	b.n	8019e1a <_Balloc+0x6e>
 8019dfc:	2221      	movs	r2, #33	; 0x21
 8019dfe:	2104      	movs	r1, #4
 8019e00:	4620      	mov	r0, r4
 8019e02:	f7fd fe79 	bl	8017af8 <_calloc_r>
 8019e06:	69e3      	ldr	r3, [r4, #28]
 8019e08:	60f0      	str	r0, [r6, #12]
 8019e0a:	68db      	ldr	r3, [r3, #12]
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	d1e4      	bne.n	8019dda <_Balloc+0x2e>
 8019e10:	2000      	movs	r0, #0
 8019e12:	bd70      	pop	{r4, r5, r6, pc}
 8019e14:	6802      	ldr	r2, [r0, #0]
 8019e16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019e1a:	2300      	movs	r3, #0
 8019e1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019e20:	e7f7      	b.n	8019e12 <_Balloc+0x66>
 8019e22:	bf00      	nop
 8019e24:	0801dadc 	.word	0x0801dadc
 8019e28:	0801db5c 	.word	0x0801db5c

08019e2c <_Bfree>:
 8019e2c:	b570      	push	{r4, r5, r6, lr}
 8019e2e:	69c6      	ldr	r6, [r0, #28]
 8019e30:	4605      	mov	r5, r0
 8019e32:	460c      	mov	r4, r1
 8019e34:	b976      	cbnz	r6, 8019e54 <_Bfree+0x28>
 8019e36:	2010      	movs	r0, #16
 8019e38:	f7fd fe74 	bl	8017b24 <malloc>
 8019e3c:	4602      	mov	r2, r0
 8019e3e:	61e8      	str	r0, [r5, #28]
 8019e40:	b920      	cbnz	r0, 8019e4c <_Bfree+0x20>
 8019e42:	4b09      	ldr	r3, [pc, #36]	; (8019e68 <_Bfree+0x3c>)
 8019e44:	4809      	ldr	r0, [pc, #36]	; (8019e6c <_Bfree+0x40>)
 8019e46:	218f      	movs	r1, #143	; 0x8f
 8019e48:	f002 fa8a 	bl	801c360 <__assert_func>
 8019e4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019e50:	6006      	str	r6, [r0, #0]
 8019e52:	60c6      	str	r6, [r0, #12]
 8019e54:	b13c      	cbz	r4, 8019e66 <_Bfree+0x3a>
 8019e56:	69eb      	ldr	r3, [r5, #28]
 8019e58:	6862      	ldr	r2, [r4, #4]
 8019e5a:	68db      	ldr	r3, [r3, #12]
 8019e5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019e60:	6021      	str	r1, [r4, #0]
 8019e62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019e66:	bd70      	pop	{r4, r5, r6, pc}
 8019e68:	0801dadc 	.word	0x0801dadc
 8019e6c:	0801db5c 	.word	0x0801db5c

08019e70 <__multadd>:
 8019e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e74:	690d      	ldr	r5, [r1, #16]
 8019e76:	4607      	mov	r7, r0
 8019e78:	460c      	mov	r4, r1
 8019e7a:	461e      	mov	r6, r3
 8019e7c:	f101 0c14 	add.w	ip, r1, #20
 8019e80:	2000      	movs	r0, #0
 8019e82:	f8dc 3000 	ldr.w	r3, [ip]
 8019e86:	b299      	uxth	r1, r3
 8019e88:	fb02 6101 	mla	r1, r2, r1, r6
 8019e8c:	0c1e      	lsrs	r6, r3, #16
 8019e8e:	0c0b      	lsrs	r3, r1, #16
 8019e90:	fb02 3306 	mla	r3, r2, r6, r3
 8019e94:	b289      	uxth	r1, r1
 8019e96:	3001      	adds	r0, #1
 8019e98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8019e9c:	4285      	cmp	r5, r0
 8019e9e:	f84c 1b04 	str.w	r1, [ip], #4
 8019ea2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8019ea6:	dcec      	bgt.n	8019e82 <__multadd+0x12>
 8019ea8:	b30e      	cbz	r6, 8019eee <__multadd+0x7e>
 8019eaa:	68a3      	ldr	r3, [r4, #8]
 8019eac:	42ab      	cmp	r3, r5
 8019eae:	dc19      	bgt.n	8019ee4 <__multadd+0x74>
 8019eb0:	6861      	ldr	r1, [r4, #4]
 8019eb2:	4638      	mov	r0, r7
 8019eb4:	3101      	adds	r1, #1
 8019eb6:	f7ff ff79 	bl	8019dac <_Balloc>
 8019eba:	4680      	mov	r8, r0
 8019ebc:	b928      	cbnz	r0, 8019eca <__multadd+0x5a>
 8019ebe:	4602      	mov	r2, r0
 8019ec0:	4b0c      	ldr	r3, [pc, #48]	; (8019ef4 <__multadd+0x84>)
 8019ec2:	480d      	ldr	r0, [pc, #52]	; (8019ef8 <__multadd+0x88>)
 8019ec4:	21ba      	movs	r1, #186	; 0xba
 8019ec6:	f002 fa4b 	bl	801c360 <__assert_func>
 8019eca:	6922      	ldr	r2, [r4, #16]
 8019ecc:	3202      	adds	r2, #2
 8019ece:	f104 010c 	add.w	r1, r4, #12
 8019ed2:	0092      	lsls	r2, r2, #2
 8019ed4:	300c      	adds	r0, #12
 8019ed6:	f7ff f88f 	bl	8018ff8 <memcpy>
 8019eda:	4621      	mov	r1, r4
 8019edc:	4638      	mov	r0, r7
 8019ede:	f7ff ffa5 	bl	8019e2c <_Bfree>
 8019ee2:	4644      	mov	r4, r8
 8019ee4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8019ee8:	3501      	adds	r5, #1
 8019eea:	615e      	str	r6, [r3, #20]
 8019eec:	6125      	str	r5, [r4, #16]
 8019eee:	4620      	mov	r0, r4
 8019ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ef4:	0801db4b 	.word	0x0801db4b
 8019ef8:	0801db5c 	.word	0x0801db5c

08019efc <__s2b>:
 8019efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019f00:	460c      	mov	r4, r1
 8019f02:	4615      	mov	r5, r2
 8019f04:	461f      	mov	r7, r3
 8019f06:	2209      	movs	r2, #9
 8019f08:	3308      	adds	r3, #8
 8019f0a:	4606      	mov	r6, r0
 8019f0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8019f10:	2100      	movs	r1, #0
 8019f12:	2201      	movs	r2, #1
 8019f14:	429a      	cmp	r2, r3
 8019f16:	db09      	blt.n	8019f2c <__s2b+0x30>
 8019f18:	4630      	mov	r0, r6
 8019f1a:	f7ff ff47 	bl	8019dac <_Balloc>
 8019f1e:	b940      	cbnz	r0, 8019f32 <__s2b+0x36>
 8019f20:	4602      	mov	r2, r0
 8019f22:	4b19      	ldr	r3, [pc, #100]	; (8019f88 <__s2b+0x8c>)
 8019f24:	4819      	ldr	r0, [pc, #100]	; (8019f8c <__s2b+0x90>)
 8019f26:	21d3      	movs	r1, #211	; 0xd3
 8019f28:	f002 fa1a 	bl	801c360 <__assert_func>
 8019f2c:	0052      	lsls	r2, r2, #1
 8019f2e:	3101      	adds	r1, #1
 8019f30:	e7f0      	b.n	8019f14 <__s2b+0x18>
 8019f32:	9b08      	ldr	r3, [sp, #32]
 8019f34:	6143      	str	r3, [r0, #20]
 8019f36:	2d09      	cmp	r5, #9
 8019f38:	f04f 0301 	mov.w	r3, #1
 8019f3c:	6103      	str	r3, [r0, #16]
 8019f3e:	dd16      	ble.n	8019f6e <__s2b+0x72>
 8019f40:	f104 0909 	add.w	r9, r4, #9
 8019f44:	46c8      	mov	r8, r9
 8019f46:	442c      	add	r4, r5
 8019f48:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019f4c:	4601      	mov	r1, r0
 8019f4e:	3b30      	subs	r3, #48	; 0x30
 8019f50:	220a      	movs	r2, #10
 8019f52:	4630      	mov	r0, r6
 8019f54:	f7ff ff8c 	bl	8019e70 <__multadd>
 8019f58:	45a0      	cmp	r8, r4
 8019f5a:	d1f5      	bne.n	8019f48 <__s2b+0x4c>
 8019f5c:	f1a5 0408 	sub.w	r4, r5, #8
 8019f60:	444c      	add	r4, r9
 8019f62:	1b2d      	subs	r5, r5, r4
 8019f64:	1963      	adds	r3, r4, r5
 8019f66:	42bb      	cmp	r3, r7
 8019f68:	db04      	blt.n	8019f74 <__s2b+0x78>
 8019f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019f6e:	340a      	adds	r4, #10
 8019f70:	2509      	movs	r5, #9
 8019f72:	e7f6      	b.n	8019f62 <__s2b+0x66>
 8019f74:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019f78:	4601      	mov	r1, r0
 8019f7a:	3b30      	subs	r3, #48	; 0x30
 8019f7c:	220a      	movs	r2, #10
 8019f7e:	4630      	mov	r0, r6
 8019f80:	f7ff ff76 	bl	8019e70 <__multadd>
 8019f84:	e7ee      	b.n	8019f64 <__s2b+0x68>
 8019f86:	bf00      	nop
 8019f88:	0801db4b 	.word	0x0801db4b
 8019f8c:	0801db5c 	.word	0x0801db5c

08019f90 <__hi0bits>:
 8019f90:	0c03      	lsrs	r3, r0, #16
 8019f92:	041b      	lsls	r3, r3, #16
 8019f94:	b9d3      	cbnz	r3, 8019fcc <__hi0bits+0x3c>
 8019f96:	0400      	lsls	r0, r0, #16
 8019f98:	2310      	movs	r3, #16
 8019f9a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019f9e:	bf04      	itt	eq
 8019fa0:	0200      	lsleq	r0, r0, #8
 8019fa2:	3308      	addeq	r3, #8
 8019fa4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019fa8:	bf04      	itt	eq
 8019faa:	0100      	lsleq	r0, r0, #4
 8019fac:	3304      	addeq	r3, #4
 8019fae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8019fb2:	bf04      	itt	eq
 8019fb4:	0080      	lsleq	r0, r0, #2
 8019fb6:	3302      	addeq	r3, #2
 8019fb8:	2800      	cmp	r0, #0
 8019fba:	db05      	blt.n	8019fc8 <__hi0bits+0x38>
 8019fbc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019fc0:	f103 0301 	add.w	r3, r3, #1
 8019fc4:	bf08      	it	eq
 8019fc6:	2320      	moveq	r3, #32
 8019fc8:	4618      	mov	r0, r3
 8019fca:	4770      	bx	lr
 8019fcc:	2300      	movs	r3, #0
 8019fce:	e7e4      	b.n	8019f9a <__hi0bits+0xa>

08019fd0 <__lo0bits>:
 8019fd0:	6803      	ldr	r3, [r0, #0]
 8019fd2:	f013 0207 	ands.w	r2, r3, #7
 8019fd6:	d00c      	beq.n	8019ff2 <__lo0bits+0x22>
 8019fd8:	07d9      	lsls	r1, r3, #31
 8019fda:	d422      	bmi.n	801a022 <__lo0bits+0x52>
 8019fdc:	079a      	lsls	r2, r3, #30
 8019fde:	bf49      	itett	mi
 8019fe0:	085b      	lsrmi	r3, r3, #1
 8019fe2:	089b      	lsrpl	r3, r3, #2
 8019fe4:	6003      	strmi	r3, [r0, #0]
 8019fe6:	2201      	movmi	r2, #1
 8019fe8:	bf5c      	itt	pl
 8019fea:	6003      	strpl	r3, [r0, #0]
 8019fec:	2202      	movpl	r2, #2
 8019fee:	4610      	mov	r0, r2
 8019ff0:	4770      	bx	lr
 8019ff2:	b299      	uxth	r1, r3
 8019ff4:	b909      	cbnz	r1, 8019ffa <__lo0bits+0x2a>
 8019ff6:	0c1b      	lsrs	r3, r3, #16
 8019ff8:	2210      	movs	r2, #16
 8019ffa:	b2d9      	uxtb	r1, r3
 8019ffc:	b909      	cbnz	r1, 801a002 <__lo0bits+0x32>
 8019ffe:	3208      	adds	r2, #8
 801a000:	0a1b      	lsrs	r3, r3, #8
 801a002:	0719      	lsls	r1, r3, #28
 801a004:	bf04      	itt	eq
 801a006:	091b      	lsreq	r3, r3, #4
 801a008:	3204      	addeq	r2, #4
 801a00a:	0799      	lsls	r1, r3, #30
 801a00c:	bf04      	itt	eq
 801a00e:	089b      	lsreq	r3, r3, #2
 801a010:	3202      	addeq	r2, #2
 801a012:	07d9      	lsls	r1, r3, #31
 801a014:	d403      	bmi.n	801a01e <__lo0bits+0x4e>
 801a016:	085b      	lsrs	r3, r3, #1
 801a018:	f102 0201 	add.w	r2, r2, #1
 801a01c:	d003      	beq.n	801a026 <__lo0bits+0x56>
 801a01e:	6003      	str	r3, [r0, #0]
 801a020:	e7e5      	b.n	8019fee <__lo0bits+0x1e>
 801a022:	2200      	movs	r2, #0
 801a024:	e7e3      	b.n	8019fee <__lo0bits+0x1e>
 801a026:	2220      	movs	r2, #32
 801a028:	e7e1      	b.n	8019fee <__lo0bits+0x1e>
	...

0801a02c <__i2b>:
 801a02c:	b510      	push	{r4, lr}
 801a02e:	460c      	mov	r4, r1
 801a030:	2101      	movs	r1, #1
 801a032:	f7ff febb 	bl	8019dac <_Balloc>
 801a036:	4602      	mov	r2, r0
 801a038:	b928      	cbnz	r0, 801a046 <__i2b+0x1a>
 801a03a:	4b05      	ldr	r3, [pc, #20]	; (801a050 <__i2b+0x24>)
 801a03c:	4805      	ldr	r0, [pc, #20]	; (801a054 <__i2b+0x28>)
 801a03e:	f240 1145 	movw	r1, #325	; 0x145
 801a042:	f002 f98d 	bl	801c360 <__assert_func>
 801a046:	2301      	movs	r3, #1
 801a048:	6144      	str	r4, [r0, #20]
 801a04a:	6103      	str	r3, [r0, #16]
 801a04c:	bd10      	pop	{r4, pc}
 801a04e:	bf00      	nop
 801a050:	0801db4b 	.word	0x0801db4b
 801a054:	0801db5c 	.word	0x0801db5c

0801a058 <__multiply>:
 801a058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a05c:	4691      	mov	r9, r2
 801a05e:	690a      	ldr	r2, [r1, #16]
 801a060:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a064:	429a      	cmp	r2, r3
 801a066:	bfb8      	it	lt
 801a068:	460b      	movlt	r3, r1
 801a06a:	460c      	mov	r4, r1
 801a06c:	bfbc      	itt	lt
 801a06e:	464c      	movlt	r4, r9
 801a070:	4699      	movlt	r9, r3
 801a072:	6927      	ldr	r7, [r4, #16]
 801a074:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801a078:	68a3      	ldr	r3, [r4, #8]
 801a07a:	6861      	ldr	r1, [r4, #4]
 801a07c:	eb07 060a 	add.w	r6, r7, sl
 801a080:	42b3      	cmp	r3, r6
 801a082:	b085      	sub	sp, #20
 801a084:	bfb8      	it	lt
 801a086:	3101      	addlt	r1, #1
 801a088:	f7ff fe90 	bl	8019dac <_Balloc>
 801a08c:	b930      	cbnz	r0, 801a09c <__multiply+0x44>
 801a08e:	4602      	mov	r2, r0
 801a090:	4b44      	ldr	r3, [pc, #272]	; (801a1a4 <__multiply+0x14c>)
 801a092:	4845      	ldr	r0, [pc, #276]	; (801a1a8 <__multiply+0x150>)
 801a094:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801a098:	f002 f962 	bl	801c360 <__assert_func>
 801a09c:	f100 0514 	add.w	r5, r0, #20
 801a0a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801a0a4:	462b      	mov	r3, r5
 801a0a6:	2200      	movs	r2, #0
 801a0a8:	4543      	cmp	r3, r8
 801a0aa:	d321      	bcc.n	801a0f0 <__multiply+0x98>
 801a0ac:	f104 0314 	add.w	r3, r4, #20
 801a0b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801a0b4:	f109 0314 	add.w	r3, r9, #20
 801a0b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801a0bc:	9202      	str	r2, [sp, #8]
 801a0be:	1b3a      	subs	r2, r7, r4
 801a0c0:	3a15      	subs	r2, #21
 801a0c2:	f022 0203 	bic.w	r2, r2, #3
 801a0c6:	3204      	adds	r2, #4
 801a0c8:	f104 0115 	add.w	r1, r4, #21
 801a0cc:	428f      	cmp	r7, r1
 801a0ce:	bf38      	it	cc
 801a0d0:	2204      	movcc	r2, #4
 801a0d2:	9201      	str	r2, [sp, #4]
 801a0d4:	9a02      	ldr	r2, [sp, #8]
 801a0d6:	9303      	str	r3, [sp, #12]
 801a0d8:	429a      	cmp	r2, r3
 801a0da:	d80c      	bhi.n	801a0f6 <__multiply+0x9e>
 801a0dc:	2e00      	cmp	r6, #0
 801a0de:	dd03      	ble.n	801a0e8 <__multiply+0x90>
 801a0e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801a0e4:	2b00      	cmp	r3, #0
 801a0e6:	d05b      	beq.n	801a1a0 <__multiply+0x148>
 801a0e8:	6106      	str	r6, [r0, #16]
 801a0ea:	b005      	add	sp, #20
 801a0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0f0:	f843 2b04 	str.w	r2, [r3], #4
 801a0f4:	e7d8      	b.n	801a0a8 <__multiply+0x50>
 801a0f6:	f8b3 a000 	ldrh.w	sl, [r3]
 801a0fa:	f1ba 0f00 	cmp.w	sl, #0
 801a0fe:	d024      	beq.n	801a14a <__multiply+0xf2>
 801a100:	f104 0e14 	add.w	lr, r4, #20
 801a104:	46a9      	mov	r9, r5
 801a106:	f04f 0c00 	mov.w	ip, #0
 801a10a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801a10e:	f8d9 1000 	ldr.w	r1, [r9]
 801a112:	fa1f fb82 	uxth.w	fp, r2
 801a116:	b289      	uxth	r1, r1
 801a118:	fb0a 110b 	mla	r1, sl, fp, r1
 801a11c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801a120:	f8d9 2000 	ldr.w	r2, [r9]
 801a124:	4461      	add	r1, ip
 801a126:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801a12a:	fb0a c20b 	mla	r2, sl, fp, ip
 801a12e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801a132:	b289      	uxth	r1, r1
 801a134:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801a138:	4577      	cmp	r7, lr
 801a13a:	f849 1b04 	str.w	r1, [r9], #4
 801a13e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801a142:	d8e2      	bhi.n	801a10a <__multiply+0xb2>
 801a144:	9a01      	ldr	r2, [sp, #4]
 801a146:	f845 c002 	str.w	ip, [r5, r2]
 801a14a:	9a03      	ldr	r2, [sp, #12]
 801a14c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801a150:	3304      	adds	r3, #4
 801a152:	f1b9 0f00 	cmp.w	r9, #0
 801a156:	d021      	beq.n	801a19c <__multiply+0x144>
 801a158:	6829      	ldr	r1, [r5, #0]
 801a15a:	f104 0c14 	add.w	ip, r4, #20
 801a15e:	46ae      	mov	lr, r5
 801a160:	f04f 0a00 	mov.w	sl, #0
 801a164:	f8bc b000 	ldrh.w	fp, [ip]
 801a168:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801a16c:	fb09 220b 	mla	r2, r9, fp, r2
 801a170:	4452      	add	r2, sl
 801a172:	b289      	uxth	r1, r1
 801a174:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801a178:	f84e 1b04 	str.w	r1, [lr], #4
 801a17c:	f85c 1b04 	ldr.w	r1, [ip], #4
 801a180:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801a184:	f8be 1000 	ldrh.w	r1, [lr]
 801a188:	fb09 110a 	mla	r1, r9, sl, r1
 801a18c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801a190:	4567      	cmp	r7, ip
 801a192:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801a196:	d8e5      	bhi.n	801a164 <__multiply+0x10c>
 801a198:	9a01      	ldr	r2, [sp, #4]
 801a19a:	50a9      	str	r1, [r5, r2]
 801a19c:	3504      	adds	r5, #4
 801a19e:	e799      	b.n	801a0d4 <__multiply+0x7c>
 801a1a0:	3e01      	subs	r6, #1
 801a1a2:	e79b      	b.n	801a0dc <__multiply+0x84>
 801a1a4:	0801db4b 	.word	0x0801db4b
 801a1a8:	0801db5c 	.word	0x0801db5c

0801a1ac <__pow5mult>:
 801a1ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a1b0:	4615      	mov	r5, r2
 801a1b2:	f012 0203 	ands.w	r2, r2, #3
 801a1b6:	4606      	mov	r6, r0
 801a1b8:	460f      	mov	r7, r1
 801a1ba:	d007      	beq.n	801a1cc <__pow5mult+0x20>
 801a1bc:	4c25      	ldr	r4, [pc, #148]	; (801a254 <__pow5mult+0xa8>)
 801a1be:	3a01      	subs	r2, #1
 801a1c0:	2300      	movs	r3, #0
 801a1c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a1c6:	f7ff fe53 	bl	8019e70 <__multadd>
 801a1ca:	4607      	mov	r7, r0
 801a1cc:	10ad      	asrs	r5, r5, #2
 801a1ce:	d03d      	beq.n	801a24c <__pow5mult+0xa0>
 801a1d0:	69f4      	ldr	r4, [r6, #28]
 801a1d2:	b97c      	cbnz	r4, 801a1f4 <__pow5mult+0x48>
 801a1d4:	2010      	movs	r0, #16
 801a1d6:	f7fd fca5 	bl	8017b24 <malloc>
 801a1da:	4602      	mov	r2, r0
 801a1dc:	61f0      	str	r0, [r6, #28]
 801a1de:	b928      	cbnz	r0, 801a1ec <__pow5mult+0x40>
 801a1e0:	4b1d      	ldr	r3, [pc, #116]	; (801a258 <__pow5mult+0xac>)
 801a1e2:	481e      	ldr	r0, [pc, #120]	; (801a25c <__pow5mult+0xb0>)
 801a1e4:	f240 11b3 	movw	r1, #435	; 0x1b3
 801a1e8:	f002 f8ba 	bl	801c360 <__assert_func>
 801a1ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a1f0:	6004      	str	r4, [r0, #0]
 801a1f2:	60c4      	str	r4, [r0, #12]
 801a1f4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801a1f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a1fc:	b94c      	cbnz	r4, 801a212 <__pow5mult+0x66>
 801a1fe:	f240 2171 	movw	r1, #625	; 0x271
 801a202:	4630      	mov	r0, r6
 801a204:	f7ff ff12 	bl	801a02c <__i2b>
 801a208:	2300      	movs	r3, #0
 801a20a:	f8c8 0008 	str.w	r0, [r8, #8]
 801a20e:	4604      	mov	r4, r0
 801a210:	6003      	str	r3, [r0, #0]
 801a212:	f04f 0900 	mov.w	r9, #0
 801a216:	07eb      	lsls	r3, r5, #31
 801a218:	d50a      	bpl.n	801a230 <__pow5mult+0x84>
 801a21a:	4639      	mov	r1, r7
 801a21c:	4622      	mov	r2, r4
 801a21e:	4630      	mov	r0, r6
 801a220:	f7ff ff1a 	bl	801a058 <__multiply>
 801a224:	4639      	mov	r1, r7
 801a226:	4680      	mov	r8, r0
 801a228:	4630      	mov	r0, r6
 801a22a:	f7ff fdff 	bl	8019e2c <_Bfree>
 801a22e:	4647      	mov	r7, r8
 801a230:	106d      	asrs	r5, r5, #1
 801a232:	d00b      	beq.n	801a24c <__pow5mult+0xa0>
 801a234:	6820      	ldr	r0, [r4, #0]
 801a236:	b938      	cbnz	r0, 801a248 <__pow5mult+0x9c>
 801a238:	4622      	mov	r2, r4
 801a23a:	4621      	mov	r1, r4
 801a23c:	4630      	mov	r0, r6
 801a23e:	f7ff ff0b 	bl	801a058 <__multiply>
 801a242:	6020      	str	r0, [r4, #0]
 801a244:	f8c0 9000 	str.w	r9, [r0]
 801a248:	4604      	mov	r4, r0
 801a24a:	e7e4      	b.n	801a216 <__pow5mult+0x6a>
 801a24c:	4638      	mov	r0, r7
 801a24e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a252:	bf00      	nop
 801a254:	0801dca8 	.word	0x0801dca8
 801a258:	0801dadc 	.word	0x0801dadc
 801a25c:	0801db5c 	.word	0x0801db5c

0801a260 <__lshift>:
 801a260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a264:	460c      	mov	r4, r1
 801a266:	6849      	ldr	r1, [r1, #4]
 801a268:	6923      	ldr	r3, [r4, #16]
 801a26a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a26e:	68a3      	ldr	r3, [r4, #8]
 801a270:	4607      	mov	r7, r0
 801a272:	4691      	mov	r9, r2
 801a274:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a278:	f108 0601 	add.w	r6, r8, #1
 801a27c:	42b3      	cmp	r3, r6
 801a27e:	db0b      	blt.n	801a298 <__lshift+0x38>
 801a280:	4638      	mov	r0, r7
 801a282:	f7ff fd93 	bl	8019dac <_Balloc>
 801a286:	4605      	mov	r5, r0
 801a288:	b948      	cbnz	r0, 801a29e <__lshift+0x3e>
 801a28a:	4602      	mov	r2, r0
 801a28c:	4b28      	ldr	r3, [pc, #160]	; (801a330 <__lshift+0xd0>)
 801a28e:	4829      	ldr	r0, [pc, #164]	; (801a334 <__lshift+0xd4>)
 801a290:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801a294:	f002 f864 	bl	801c360 <__assert_func>
 801a298:	3101      	adds	r1, #1
 801a29a:	005b      	lsls	r3, r3, #1
 801a29c:	e7ee      	b.n	801a27c <__lshift+0x1c>
 801a29e:	2300      	movs	r3, #0
 801a2a0:	f100 0114 	add.w	r1, r0, #20
 801a2a4:	f100 0210 	add.w	r2, r0, #16
 801a2a8:	4618      	mov	r0, r3
 801a2aa:	4553      	cmp	r3, sl
 801a2ac:	db33      	blt.n	801a316 <__lshift+0xb6>
 801a2ae:	6920      	ldr	r0, [r4, #16]
 801a2b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a2b4:	f104 0314 	add.w	r3, r4, #20
 801a2b8:	f019 091f 	ands.w	r9, r9, #31
 801a2bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a2c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a2c4:	d02b      	beq.n	801a31e <__lshift+0xbe>
 801a2c6:	f1c9 0e20 	rsb	lr, r9, #32
 801a2ca:	468a      	mov	sl, r1
 801a2cc:	2200      	movs	r2, #0
 801a2ce:	6818      	ldr	r0, [r3, #0]
 801a2d0:	fa00 f009 	lsl.w	r0, r0, r9
 801a2d4:	4310      	orrs	r0, r2
 801a2d6:	f84a 0b04 	str.w	r0, [sl], #4
 801a2da:	f853 2b04 	ldr.w	r2, [r3], #4
 801a2de:	459c      	cmp	ip, r3
 801a2e0:	fa22 f20e 	lsr.w	r2, r2, lr
 801a2e4:	d8f3      	bhi.n	801a2ce <__lshift+0x6e>
 801a2e6:	ebac 0304 	sub.w	r3, ip, r4
 801a2ea:	3b15      	subs	r3, #21
 801a2ec:	f023 0303 	bic.w	r3, r3, #3
 801a2f0:	3304      	adds	r3, #4
 801a2f2:	f104 0015 	add.w	r0, r4, #21
 801a2f6:	4584      	cmp	ip, r0
 801a2f8:	bf38      	it	cc
 801a2fa:	2304      	movcc	r3, #4
 801a2fc:	50ca      	str	r2, [r1, r3]
 801a2fe:	b10a      	cbz	r2, 801a304 <__lshift+0xa4>
 801a300:	f108 0602 	add.w	r6, r8, #2
 801a304:	3e01      	subs	r6, #1
 801a306:	4638      	mov	r0, r7
 801a308:	612e      	str	r6, [r5, #16]
 801a30a:	4621      	mov	r1, r4
 801a30c:	f7ff fd8e 	bl	8019e2c <_Bfree>
 801a310:	4628      	mov	r0, r5
 801a312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a316:	f842 0f04 	str.w	r0, [r2, #4]!
 801a31a:	3301      	adds	r3, #1
 801a31c:	e7c5      	b.n	801a2aa <__lshift+0x4a>
 801a31e:	3904      	subs	r1, #4
 801a320:	f853 2b04 	ldr.w	r2, [r3], #4
 801a324:	f841 2f04 	str.w	r2, [r1, #4]!
 801a328:	459c      	cmp	ip, r3
 801a32a:	d8f9      	bhi.n	801a320 <__lshift+0xc0>
 801a32c:	e7ea      	b.n	801a304 <__lshift+0xa4>
 801a32e:	bf00      	nop
 801a330:	0801db4b 	.word	0x0801db4b
 801a334:	0801db5c 	.word	0x0801db5c

0801a338 <__mcmp>:
 801a338:	b530      	push	{r4, r5, lr}
 801a33a:	6902      	ldr	r2, [r0, #16]
 801a33c:	690c      	ldr	r4, [r1, #16]
 801a33e:	1b12      	subs	r2, r2, r4
 801a340:	d10e      	bne.n	801a360 <__mcmp+0x28>
 801a342:	f100 0314 	add.w	r3, r0, #20
 801a346:	3114      	adds	r1, #20
 801a348:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801a34c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801a350:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801a354:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801a358:	42a5      	cmp	r5, r4
 801a35a:	d003      	beq.n	801a364 <__mcmp+0x2c>
 801a35c:	d305      	bcc.n	801a36a <__mcmp+0x32>
 801a35e:	2201      	movs	r2, #1
 801a360:	4610      	mov	r0, r2
 801a362:	bd30      	pop	{r4, r5, pc}
 801a364:	4283      	cmp	r3, r0
 801a366:	d3f3      	bcc.n	801a350 <__mcmp+0x18>
 801a368:	e7fa      	b.n	801a360 <__mcmp+0x28>
 801a36a:	f04f 32ff 	mov.w	r2, #4294967295
 801a36e:	e7f7      	b.n	801a360 <__mcmp+0x28>

0801a370 <__mdiff>:
 801a370:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a374:	460c      	mov	r4, r1
 801a376:	4606      	mov	r6, r0
 801a378:	4611      	mov	r1, r2
 801a37a:	4620      	mov	r0, r4
 801a37c:	4690      	mov	r8, r2
 801a37e:	f7ff ffdb 	bl	801a338 <__mcmp>
 801a382:	1e05      	subs	r5, r0, #0
 801a384:	d110      	bne.n	801a3a8 <__mdiff+0x38>
 801a386:	4629      	mov	r1, r5
 801a388:	4630      	mov	r0, r6
 801a38a:	f7ff fd0f 	bl	8019dac <_Balloc>
 801a38e:	b930      	cbnz	r0, 801a39e <__mdiff+0x2e>
 801a390:	4b3a      	ldr	r3, [pc, #232]	; (801a47c <__mdiff+0x10c>)
 801a392:	4602      	mov	r2, r0
 801a394:	f240 2137 	movw	r1, #567	; 0x237
 801a398:	4839      	ldr	r0, [pc, #228]	; (801a480 <__mdiff+0x110>)
 801a39a:	f001 ffe1 	bl	801c360 <__assert_func>
 801a39e:	2301      	movs	r3, #1
 801a3a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a3a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3a8:	bfa4      	itt	ge
 801a3aa:	4643      	movge	r3, r8
 801a3ac:	46a0      	movge	r8, r4
 801a3ae:	4630      	mov	r0, r6
 801a3b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801a3b4:	bfa6      	itte	ge
 801a3b6:	461c      	movge	r4, r3
 801a3b8:	2500      	movge	r5, #0
 801a3ba:	2501      	movlt	r5, #1
 801a3bc:	f7ff fcf6 	bl	8019dac <_Balloc>
 801a3c0:	b920      	cbnz	r0, 801a3cc <__mdiff+0x5c>
 801a3c2:	4b2e      	ldr	r3, [pc, #184]	; (801a47c <__mdiff+0x10c>)
 801a3c4:	4602      	mov	r2, r0
 801a3c6:	f240 2145 	movw	r1, #581	; 0x245
 801a3ca:	e7e5      	b.n	801a398 <__mdiff+0x28>
 801a3cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801a3d0:	6926      	ldr	r6, [r4, #16]
 801a3d2:	60c5      	str	r5, [r0, #12]
 801a3d4:	f104 0914 	add.w	r9, r4, #20
 801a3d8:	f108 0514 	add.w	r5, r8, #20
 801a3dc:	f100 0e14 	add.w	lr, r0, #20
 801a3e0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801a3e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801a3e8:	f108 0210 	add.w	r2, r8, #16
 801a3ec:	46f2      	mov	sl, lr
 801a3ee:	2100      	movs	r1, #0
 801a3f0:	f859 3b04 	ldr.w	r3, [r9], #4
 801a3f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801a3f8:	fa11 f88b 	uxtah	r8, r1, fp
 801a3fc:	b299      	uxth	r1, r3
 801a3fe:	0c1b      	lsrs	r3, r3, #16
 801a400:	eba8 0801 	sub.w	r8, r8, r1
 801a404:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801a408:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801a40c:	fa1f f888 	uxth.w	r8, r8
 801a410:	1419      	asrs	r1, r3, #16
 801a412:	454e      	cmp	r6, r9
 801a414:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801a418:	f84a 3b04 	str.w	r3, [sl], #4
 801a41c:	d8e8      	bhi.n	801a3f0 <__mdiff+0x80>
 801a41e:	1b33      	subs	r3, r6, r4
 801a420:	3b15      	subs	r3, #21
 801a422:	f023 0303 	bic.w	r3, r3, #3
 801a426:	3304      	adds	r3, #4
 801a428:	3415      	adds	r4, #21
 801a42a:	42a6      	cmp	r6, r4
 801a42c:	bf38      	it	cc
 801a42e:	2304      	movcc	r3, #4
 801a430:	441d      	add	r5, r3
 801a432:	4473      	add	r3, lr
 801a434:	469e      	mov	lr, r3
 801a436:	462e      	mov	r6, r5
 801a438:	4566      	cmp	r6, ip
 801a43a:	d30e      	bcc.n	801a45a <__mdiff+0xea>
 801a43c:	f10c 0203 	add.w	r2, ip, #3
 801a440:	1b52      	subs	r2, r2, r5
 801a442:	f022 0203 	bic.w	r2, r2, #3
 801a446:	3d03      	subs	r5, #3
 801a448:	45ac      	cmp	ip, r5
 801a44a:	bf38      	it	cc
 801a44c:	2200      	movcc	r2, #0
 801a44e:	4413      	add	r3, r2
 801a450:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801a454:	b17a      	cbz	r2, 801a476 <__mdiff+0x106>
 801a456:	6107      	str	r7, [r0, #16]
 801a458:	e7a4      	b.n	801a3a4 <__mdiff+0x34>
 801a45a:	f856 8b04 	ldr.w	r8, [r6], #4
 801a45e:	fa11 f288 	uxtah	r2, r1, r8
 801a462:	1414      	asrs	r4, r2, #16
 801a464:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801a468:	b292      	uxth	r2, r2
 801a46a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801a46e:	f84e 2b04 	str.w	r2, [lr], #4
 801a472:	1421      	asrs	r1, r4, #16
 801a474:	e7e0      	b.n	801a438 <__mdiff+0xc8>
 801a476:	3f01      	subs	r7, #1
 801a478:	e7ea      	b.n	801a450 <__mdiff+0xe0>
 801a47a:	bf00      	nop
 801a47c:	0801db4b 	.word	0x0801db4b
 801a480:	0801db5c 	.word	0x0801db5c

0801a484 <__ulp>:
 801a484:	b082      	sub	sp, #8
 801a486:	ed8d 0b00 	vstr	d0, [sp]
 801a48a:	9a01      	ldr	r2, [sp, #4]
 801a48c:	4b0f      	ldr	r3, [pc, #60]	; (801a4cc <__ulp+0x48>)
 801a48e:	4013      	ands	r3, r2
 801a490:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801a494:	2b00      	cmp	r3, #0
 801a496:	dc08      	bgt.n	801a4aa <__ulp+0x26>
 801a498:	425b      	negs	r3, r3
 801a49a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801a49e:	ea4f 5223 	mov.w	r2, r3, asr #20
 801a4a2:	da04      	bge.n	801a4ae <__ulp+0x2a>
 801a4a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801a4a8:	4113      	asrs	r3, r2
 801a4aa:	2200      	movs	r2, #0
 801a4ac:	e008      	b.n	801a4c0 <__ulp+0x3c>
 801a4ae:	f1a2 0314 	sub.w	r3, r2, #20
 801a4b2:	2b1e      	cmp	r3, #30
 801a4b4:	bfda      	itte	le
 801a4b6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801a4ba:	40da      	lsrle	r2, r3
 801a4bc:	2201      	movgt	r2, #1
 801a4be:	2300      	movs	r3, #0
 801a4c0:	4619      	mov	r1, r3
 801a4c2:	4610      	mov	r0, r2
 801a4c4:	ec41 0b10 	vmov	d0, r0, r1
 801a4c8:	b002      	add	sp, #8
 801a4ca:	4770      	bx	lr
 801a4cc:	7ff00000 	.word	0x7ff00000

0801a4d0 <__b2d>:
 801a4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4d4:	6906      	ldr	r6, [r0, #16]
 801a4d6:	f100 0814 	add.w	r8, r0, #20
 801a4da:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801a4de:	1f37      	subs	r7, r6, #4
 801a4e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801a4e4:	4610      	mov	r0, r2
 801a4e6:	f7ff fd53 	bl	8019f90 <__hi0bits>
 801a4ea:	f1c0 0320 	rsb	r3, r0, #32
 801a4ee:	280a      	cmp	r0, #10
 801a4f0:	600b      	str	r3, [r1, #0]
 801a4f2:	491b      	ldr	r1, [pc, #108]	; (801a560 <__b2d+0x90>)
 801a4f4:	dc15      	bgt.n	801a522 <__b2d+0x52>
 801a4f6:	f1c0 0c0b 	rsb	ip, r0, #11
 801a4fa:	fa22 f30c 	lsr.w	r3, r2, ip
 801a4fe:	45b8      	cmp	r8, r7
 801a500:	ea43 0501 	orr.w	r5, r3, r1
 801a504:	bf34      	ite	cc
 801a506:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801a50a:	2300      	movcs	r3, #0
 801a50c:	3015      	adds	r0, #21
 801a50e:	fa02 f000 	lsl.w	r0, r2, r0
 801a512:	fa23 f30c 	lsr.w	r3, r3, ip
 801a516:	4303      	orrs	r3, r0
 801a518:	461c      	mov	r4, r3
 801a51a:	ec45 4b10 	vmov	d0, r4, r5
 801a51e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a522:	45b8      	cmp	r8, r7
 801a524:	bf3a      	itte	cc
 801a526:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801a52a:	f1a6 0708 	subcc.w	r7, r6, #8
 801a52e:	2300      	movcs	r3, #0
 801a530:	380b      	subs	r0, #11
 801a532:	d012      	beq.n	801a55a <__b2d+0x8a>
 801a534:	f1c0 0120 	rsb	r1, r0, #32
 801a538:	fa23 f401 	lsr.w	r4, r3, r1
 801a53c:	4082      	lsls	r2, r0
 801a53e:	4322      	orrs	r2, r4
 801a540:	4547      	cmp	r7, r8
 801a542:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801a546:	bf8c      	ite	hi
 801a548:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801a54c:	2200      	movls	r2, #0
 801a54e:	4083      	lsls	r3, r0
 801a550:	40ca      	lsrs	r2, r1
 801a552:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801a556:	4313      	orrs	r3, r2
 801a558:	e7de      	b.n	801a518 <__b2d+0x48>
 801a55a:	ea42 0501 	orr.w	r5, r2, r1
 801a55e:	e7db      	b.n	801a518 <__b2d+0x48>
 801a560:	3ff00000 	.word	0x3ff00000

0801a564 <__d2b>:
 801a564:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a568:	460f      	mov	r7, r1
 801a56a:	2101      	movs	r1, #1
 801a56c:	ec59 8b10 	vmov	r8, r9, d0
 801a570:	4616      	mov	r6, r2
 801a572:	f7ff fc1b 	bl	8019dac <_Balloc>
 801a576:	4604      	mov	r4, r0
 801a578:	b930      	cbnz	r0, 801a588 <__d2b+0x24>
 801a57a:	4602      	mov	r2, r0
 801a57c:	4b24      	ldr	r3, [pc, #144]	; (801a610 <__d2b+0xac>)
 801a57e:	4825      	ldr	r0, [pc, #148]	; (801a614 <__d2b+0xb0>)
 801a580:	f240 310f 	movw	r1, #783	; 0x30f
 801a584:	f001 feec 	bl	801c360 <__assert_func>
 801a588:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801a58c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a590:	bb2d      	cbnz	r5, 801a5de <__d2b+0x7a>
 801a592:	9301      	str	r3, [sp, #4]
 801a594:	f1b8 0300 	subs.w	r3, r8, #0
 801a598:	d026      	beq.n	801a5e8 <__d2b+0x84>
 801a59a:	4668      	mov	r0, sp
 801a59c:	9300      	str	r3, [sp, #0]
 801a59e:	f7ff fd17 	bl	8019fd0 <__lo0bits>
 801a5a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 801a5a6:	b1e8      	cbz	r0, 801a5e4 <__d2b+0x80>
 801a5a8:	f1c0 0320 	rsb	r3, r0, #32
 801a5ac:	fa02 f303 	lsl.w	r3, r2, r3
 801a5b0:	430b      	orrs	r3, r1
 801a5b2:	40c2      	lsrs	r2, r0
 801a5b4:	6163      	str	r3, [r4, #20]
 801a5b6:	9201      	str	r2, [sp, #4]
 801a5b8:	9b01      	ldr	r3, [sp, #4]
 801a5ba:	61a3      	str	r3, [r4, #24]
 801a5bc:	2b00      	cmp	r3, #0
 801a5be:	bf14      	ite	ne
 801a5c0:	2202      	movne	r2, #2
 801a5c2:	2201      	moveq	r2, #1
 801a5c4:	6122      	str	r2, [r4, #16]
 801a5c6:	b1bd      	cbz	r5, 801a5f8 <__d2b+0x94>
 801a5c8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801a5cc:	4405      	add	r5, r0
 801a5ce:	603d      	str	r5, [r7, #0]
 801a5d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a5d4:	6030      	str	r0, [r6, #0]
 801a5d6:	4620      	mov	r0, r4
 801a5d8:	b003      	add	sp, #12
 801a5da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a5de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a5e2:	e7d6      	b.n	801a592 <__d2b+0x2e>
 801a5e4:	6161      	str	r1, [r4, #20]
 801a5e6:	e7e7      	b.n	801a5b8 <__d2b+0x54>
 801a5e8:	a801      	add	r0, sp, #4
 801a5ea:	f7ff fcf1 	bl	8019fd0 <__lo0bits>
 801a5ee:	9b01      	ldr	r3, [sp, #4]
 801a5f0:	6163      	str	r3, [r4, #20]
 801a5f2:	3020      	adds	r0, #32
 801a5f4:	2201      	movs	r2, #1
 801a5f6:	e7e5      	b.n	801a5c4 <__d2b+0x60>
 801a5f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a5fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a600:	6038      	str	r0, [r7, #0]
 801a602:	6918      	ldr	r0, [r3, #16]
 801a604:	f7ff fcc4 	bl	8019f90 <__hi0bits>
 801a608:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801a60c:	e7e2      	b.n	801a5d4 <__d2b+0x70>
 801a60e:	bf00      	nop
 801a610:	0801db4b 	.word	0x0801db4b
 801a614:	0801db5c 	.word	0x0801db5c

0801a618 <__ratio>:
 801a618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a61c:	4688      	mov	r8, r1
 801a61e:	4669      	mov	r1, sp
 801a620:	4681      	mov	r9, r0
 801a622:	f7ff ff55 	bl	801a4d0 <__b2d>
 801a626:	a901      	add	r1, sp, #4
 801a628:	4640      	mov	r0, r8
 801a62a:	ec55 4b10 	vmov	r4, r5, d0
 801a62e:	f7ff ff4f 	bl	801a4d0 <__b2d>
 801a632:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a636:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801a63a:	eba3 0c02 	sub.w	ip, r3, r2
 801a63e:	e9dd 3200 	ldrd	r3, r2, [sp]
 801a642:	1a9b      	subs	r3, r3, r2
 801a644:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801a648:	ec51 0b10 	vmov	r0, r1, d0
 801a64c:	2b00      	cmp	r3, #0
 801a64e:	bfd6      	itet	le
 801a650:	460a      	movle	r2, r1
 801a652:	462a      	movgt	r2, r5
 801a654:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801a658:	468b      	mov	fp, r1
 801a65a:	462f      	mov	r7, r5
 801a65c:	bfd4      	ite	le
 801a65e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801a662:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801a666:	4620      	mov	r0, r4
 801a668:	ee10 2a10 	vmov	r2, s0
 801a66c:	465b      	mov	r3, fp
 801a66e:	4639      	mov	r1, r7
 801a670:	f7e6 f91c 	bl	80008ac <__aeabi_ddiv>
 801a674:	ec41 0b10 	vmov	d0, r0, r1
 801a678:	b003      	add	sp, #12
 801a67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a67e <__copybits>:
 801a67e:	3901      	subs	r1, #1
 801a680:	b570      	push	{r4, r5, r6, lr}
 801a682:	1149      	asrs	r1, r1, #5
 801a684:	6914      	ldr	r4, [r2, #16]
 801a686:	3101      	adds	r1, #1
 801a688:	f102 0314 	add.w	r3, r2, #20
 801a68c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801a690:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801a694:	1f05      	subs	r5, r0, #4
 801a696:	42a3      	cmp	r3, r4
 801a698:	d30c      	bcc.n	801a6b4 <__copybits+0x36>
 801a69a:	1aa3      	subs	r3, r4, r2
 801a69c:	3b11      	subs	r3, #17
 801a69e:	f023 0303 	bic.w	r3, r3, #3
 801a6a2:	3211      	adds	r2, #17
 801a6a4:	42a2      	cmp	r2, r4
 801a6a6:	bf88      	it	hi
 801a6a8:	2300      	movhi	r3, #0
 801a6aa:	4418      	add	r0, r3
 801a6ac:	2300      	movs	r3, #0
 801a6ae:	4288      	cmp	r0, r1
 801a6b0:	d305      	bcc.n	801a6be <__copybits+0x40>
 801a6b2:	bd70      	pop	{r4, r5, r6, pc}
 801a6b4:	f853 6b04 	ldr.w	r6, [r3], #4
 801a6b8:	f845 6f04 	str.w	r6, [r5, #4]!
 801a6bc:	e7eb      	b.n	801a696 <__copybits+0x18>
 801a6be:	f840 3b04 	str.w	r3, [r0], #4
 801a6c2:	e7f4      	b.n	801a6ae <__copybits+0x30>

0801a6c4 <__any_on>:
 801a6c4:	f100 0214 	add.w	r2, r0, #20
 801a6c8:	6900      	ldr	r0, [r0, #16]
 801a6ca:	114b      	asrs	r3, r1, #5
 801a6cc:	4298      	cmp	r0, r3
 801a6ce:	b510      	push	{r4, lr}
 801a6d0:	db11      	blt.n	801a6f6 <__any_on+0x32>
 801a6d2:	dd0a      	ble.n	801a6ea <__any_on+0x26>
 801a6d4:	f011 011f 	ands.w	r1, r1, #31
 801a6d8:	d007      	beq.n	801a6ea <__any_on+0x26>
 801a6da:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801a6de:	fa24 f001 	lsr.w	r0, r4, r1
 801a6e2:	fa00 f101 	lsl.w	r1, r0, r1
 801a6e6:	428c      	cmp	r4, r1
 801a6e8:	d10b      	bne.n	801a702 <__any_on+0x3e>
 801a6ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a6ee:	4293      	cmp	r3, r2
 801a6f0:	d803      	bhi.n	801a6fa <__any_on+0x36>
 801a6f2:	2000      	movs	r0, #0
 801a6f4:	bd10      	pop	{r4, pc}
 801a6f6:	4603      	mov	r3, r0
 801a6f8:	e7f7      	b.n	801a6ea <__any_on+0x26>
 801a6fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a6fe:	2900      	cmp	r1, #0
 801a700:	d0f5      	beq.n	801a6ee <__any_on+0x2a>
 801a702:	2001      	movs	r0, #1
 801a704:	e7f6      	b.n	801a6f4 <__any_on+0x30>

0801a706 <sulp>:
 801a706:	b570      	push	{r4, r5, r6, lr}
 801a708:	4604      	mov	r4, r0
 801a70a:	460d      	mov	r5, r1
 801a70c:	ec45 4b10 	vmov	d0, r4, r5
 801a710:	4616      	mov	r6, r2
 801a712:	f7ff feb7 	bl	801a484 <__ulp>
 801a716:	ec51 0b10 	vmov	r0, r1, d0
 801a71a:	b17e      	cbz	r6, 801a73c <sulp+0x36>
 801a71c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801a720:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a724:	2b00      	cmp	r3, #0
 801a726:	dd09      	ble.n	801a73c <sulp+0x36>
 801a728:	051b      	lsls	r3, r3, #20
 801a72a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801a72e:	2400      	movs	r4, #0
 801a730:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801a734:	4622      	mov	r2, r4
 801a736:	462b      	mov	r3, r5
 801a738:	f7e5 ff8e 	bl	8000658 <__aeabi_dmul>
 801a73c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a740 <_strtod_l>:
 801a740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a744:	ed2d 8b02 	vpush	{d8}
 801a748:	b09b      	sub	sp, #108	; 0x6c
 801a74a:	4604      	mov	r4, r0
 801a74c:	9213      	str	r2, [sp, #76]	; 0x4c
 801a74e:	2200      	movs	r2, #0
 801a750:	9216      	str	r2, [sp, #88]	; 0x58
 801a752:	460d      	mov	r5, r1
 801a754:	f04f 0800 	mov.w	r8, #0
 801a758:	f04f 0900 	mov.w	r9, #0
 801a75c:	460a      	mov	r2, r1
 801a75e:	9215      	str	r2, [sp, #84]	; 0x54
 801a760:	7811      	ldrb	r1, [r2, #0]
 801a762:	292b      	cmp	r1, #43	; 0x2b
 801a764:	d04c      	beq.n	801a800 <_strtod_l+0xc0>
 801a766:	d83a      	bhi.n	801a7de <_strtod_l+0x9e>
 801a768:	290d      	cmp	r1, #13
 801a76a:	d834      	bhi.n	801a7d6 <_strtod_l+0x96>
 801a76c:	2908      	cmp	r1, #8
 801a76e:	d834      	bhi.n	801a7da <_strtod_l+0x9a>
 801a770:	2900      	cmp	r1, #0
 801a772:	d03d      	beq.n	801a7f0 <_strtod_l+0xb0>
 801a774:	2200      	movs	r2, #0
 801a776:	920a      	str	r2, [sp, #40]	; 0x28
 801a778:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801a77a:	7832      	ldrb	r2, [r6, #0]
 801a77c:	2a30      	cmp	r2, #48	; 0x30
 801a77e:	f040 80b4 	bne.w	801a8ea <_strtod_l+0x1aa>
 801a782:	7872      	ldrb	r2, [r6, #1]
 801a784:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801a788:	2a58      	cmp	r2, #88	; 0x58
 801a78a:	d170      	bne.n	801a86e <_strtod_l+0x12e>
 801a78c:	9302      	str	r3, [sp, #8]
 801a78e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a790:	9301      	str	r3, [sp, #4]
 801a792:	ab16      	add	r3, sp, #88	; 0x58
 801a794:	9300      	str	r3, [sp, #0]
 801a796:	4a8e      	ldr	r2, [pc, #568]	; (801a9d0 <_strtod_l+0x290>)
 801a798:	ab17      	add	r3, sp, #92	; 0x5c
 801a79a:	a915      	add	r1, sp, #84	; 0x54
 801a79c:	4620      	mov	r0, r4
 801a79e:	f001 fe65 	bl	801c46c <__gethex>
 801a7a2:	f010 070f 	ands.w	r7, r0, #15
 801a7a6:	4605      	mov	r5, r0
 801a7a8:	d005      	beq.n	801a7b6 <_strtod_l+0x76>
 801a7aa:	2f06      	cmp	r7, #6
 801a7ac:	d12a      	bne.n	801a804 <_strtod_l+0xc4>
 801a7ae:	3601      	adds	r6, #1
 801a7b0:	2300      	movs	r3, #0
 801a7b2:	9615      	str	r6, [sp, #84]	; 0x54
 801a7b4:	930a      	str	r3, [sp, #40]	; 0x28
 801a7b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a7b8:	2b00      	cmp	r3, #0
 801a7ba:	f040 857f 	bne.w	801b2bc <_strtod_l+0xb7c>
 801a7be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a7c0:	b1db      	cbz	r3, 801a7fa <_strtod_l+0xba>
 801a7c2:	4642      	mov	r2, r8
 801a7c4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801a7c8:	ec43 2b10 	vmov	d0, r2, r3
 801a7cc:	b01b      	add	sp, #108	; 0x6c
 801a7ce:	ecbd 8b02 	vpop	{d8}
 801a7d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7d6:	2920      	cmp	r1, #32
 801a7d8:	d1cc      	bne.n	801a774 <_strtod_l+0x34>
 801a7da:	3201      	adds	r2, #1
 801a7dc:	e7bf      	b.n	801a75e <_strtod_l+0x1e>
 801a7de:	292d      	cmp	r1, #45	; 0x2d
 801a7e0:	d1c8      	bne.n	801a774 <_strtod_l+0x34>
 801a7e2:	2101      	movs	r1, #1
 801a7e4:	910a      	str	r1, [sp, #40]	; 0x28
 801a7e6:	1c51      	adds	r1, r2, #1
 801a7e8:	9115      	str	r1, [sp, #84]	; 0x54
 801a7ea:	7852      	ldrb	r2, [r2, #1]
 801a7ec:	2a00      	cmp	r2, #0
 801a7ee:	d1c3      	bne.n	801a778 <_strtod_l+0x38>
 801a7f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a7f2:	9515      	str	r5, [sp, #84]	; 0x54
 801a7f4:	2b00      	cmp	r3, #0
 801a7f6:	f040 855f 	bne.w	801b2b8 <_strtod_l+0xb78>
 801a7fa:	4642      	mov	r2, r8
 801a7fc:	464b      	mov	r3, r9
 801a7fe:	e7e3      	b.n	801a7c8 <_strtod_l+0x88>
 801a800:	2100      	movs	r1, #0
 801a802:	e7ef      	b.n	801a7e4 <_strtod_l+0xa4>
 801a804:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801a806:	b13a      	cbz	r2, 801a818 <_strtod_l+0xd8>
 801a808:	2135      	movs	r1, #53	; 0x35
 801a80a:	a818      	add	r0, sp, #96	; 0x60
 801a80c:	f7ff ff37 	bl	801a67e <__copybits>
 801a810:	9916      	ldr	r1, [sp, #88]	; 0x58
 801a812:	4620      	mov	r0, r4
 801a814:	f7ff fb0a 	bl	8019e2c <_Bfree>
 801a818:	3f01      	subs	r7, #1
 801a81a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a81c:	2f04      	cmp	r7, #4
 801a81e:	d806      	bhi.n	801a82e <_strtod_l+0xee>
 801a820:	e8df f007 	tbb	[pc, r7]
 801a824:	201d0314 	.word	0x201d0314
 801a828:	14          	.byte	0x14
 801a829:	00          	.byte	0x00
 801a82a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801a82e:	05e9      	lsls	r1, r5, #23
 801a830:	bf48      	it	mi
 801a832:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801a836:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a83a:	0d1b      	lsrs	r3, r3, #20
 801a83c:	051b      	lsls	r3, r3, #20
 801a83e:	2b00      	cmp	r3, #0
 801a840:	d1b9      	bne.n	801a7b6 <_strtod_l+0x76>
 801a842:	f7fe fbad 	bl	8018fa0 <__errno>
 801a846:	2322      	movs	r3, #34	; 0x22
 801a848:	6003      	str	r3, [r0, #0]
 801a84a:	e7b4      	b.n	801a7b6 <_strtod_l+0x76>
 801a84c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 801a850:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a854:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801a858:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801a85c:	e7e7      	b.n	801a82e <_strtod_l+0xee>
 801a85e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801a9d8 <_strtod_l+0x298>
 801a862:	e7e4      	b.n	801a82e <_strtod_l+0xee>
 801a864:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801a868:	f04f 38ff 	mov.w	r8, #4294967295
 801a86c:	e7df      	b.n	801a82e <_strtod_l+0xee>
 801a86e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a870:	1c5a      	adds	r2, r3, #1
 801a872:	9215      	str	r2, [sp, #84]	; 0x54
 801a874:	785b      	ldrb	r3, [r3, #1]
 801a876:	2b30      	cmp	r3, #48	; 0x30
 801a878:	d0f9      	beq.n	801a86e <_strtod_l+0x12e>
 801a87a:	2b00      	cmp	r3, #0
 801a87c:	d09b      	beq.n	801a7b6 <_strtod_l+0x76>
 801a87e:	2301      	movs	r3, #1
 801a880:	f04f 0a00 	mov.w	sl, #0
 801a884:	9304      	str	r3, [sp, #16]
 801a886:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a888:	930b      	str	r3, [sp, #44]	; 0x2c
 801a88a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801a88e:	46d3      	mov	fp, sl
 801a890:	220a      	movs	r2, #10
 801a892:	9815      	ldr	r0, [sp, #84]	; 0x54
 801a894:	7806      	ldrb	r6, [r0, #0]
 801a896:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801a89a:	b2d9      	uxtb	r1, r3
 801a89c:	2909      	cmp	r1, #9
 801a89e:	d926      	bls.n	801a8ee <_strtod_l+0x1ae>
 801a8a0:	494c      	ldr	r1, [pc, #304]	; (801a9d4 <_strtod_l+0x294>)
 801a8a2:	2201      	movs	r2, #1
 801a8a4:	f001 fd1f 	bl	801c2e6 <strncmp>
 801a8a8:	2800      	cmp	r0, #0
 801a8aa:	d030      	beq.n	801a90e <_strtod_l+0x1ce>
 801a8ac:	2000      	movs	r0, #0
 801a8ae:	4632      	mov	r2, r6
 801a8b0:	9005      	str	r0, [sp, #20]
 801a8b2:	465e      	mov	r6, fp
 801a8b4:	4603      	mov	r3, r0
 801a8b6:	2a65      	cmp	r2, #101	; 0x65
 801a8b8:	d001      	beq.n	801a8be <_strtod_l+0x17e>
 801a8ba:	2a45      	cmp	r2, #69	; 0x45
 801a8bc:	d113      	bne.n	801a8e6 <_strtod_l+0x1a6>
 801a8be:	b91e      	cbnz	r6, 801a8c8 <_strtod_l+0x188>
 801a8c0:	9a04      	ldr	r2, [sp, #16]
 801a8c2:	4302      	orrs	r2, r0
 801a8c4:	d094      	beq.n	801a7f0 <_strtod_l+0xb0>
 801a8c6:	2600      	movs	r6, #0
 801a8c8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801a8ca:	1c6a      	adds	r2, r5, #1
 801a8cc:	9215      	str	r2, [sp, #84]	; 0x54
 801a8ce:	786a      	ldrb	r2, [r5, #1]
 801a8d0:	2a2b      	cmp	r2, #43	; 0x2b
 801a8d2:	d074      	beq.n	801a9be <_strtod_l+0x27e>
 801a8d4:	2a2d      	cmp	r2, #45	; 0x2d
 801a8d6:	d078      	beq.n	801a9ca <_strtod_l+0x28a>
 801a8d8:	f04f 0c00 	mov.w	ip, #0
 801a8dc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801a8e0:	2909      	cmp	r1, #9
 801a8e2:	d97f      	bls.n	801a9e4 <_strtod_l+0x2a4>
 801a8e4:	9515      	str	r5, [sp, #84]	; 0x54
 801a8e6:	2700      	movs	r7, #0
 801a8e8:	e09e      	b.n	801aa28 <_strtod_l+0x2e8>
 801a8ea:	2300      	movs	r3, #0
 801a8ec:	e7c8      	b.n	801a880 <_strtod_l+0x140>
 801a8ee:	f1bb 0f08 	cmp.w	fp, #8
 801a8f2:	bfd8      	it	le
 801a8f4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801a8f6:	f100 0001 	add.w	r0, r0, #1
 801a8fa:	bfda      	itte	le
 801a8fc:	fb02 3301 	mlale	r3, r2, r1, r3
 801a900:	9309      	strle	r3, [sp, #36]	; 0x24
 801a902:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801a906:	f10b 0b01 	add.w	fp, fp, #1
 801a90a:	9015      	str	r0, [sp, #84]	; 0x54
 801a90c:	e7c1      	b.n	801a892 <_strtod_l+0x152>
 801a90e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a910:	1c5a      	adds	r2, r3, #1
 801a912:	9215      	str	r2, [sp, #84]	; 0x54
 801a914:	785a      	ldrb	r2, [r3, #1]
 801a916:	f1bb 0f00 	cmp.w	fp, #0
 801a91a:	d037      	beq.n	801a98c <_strtod_l+0x24c>
 801a91c:	9005      	str	r0, [sp, #20]
 801a91e:	465e      	mov	r6, fp
 801a920:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801a924:	2b09      	cmp	r3, #9
 801a926:	d912      	bls.n	801a94e <_strtod_l+0x20e>
 801a928:	2301      	movs	r3, #1
 801a92a:	e7c4      	b.n	801a8b6 <_strtod_l+0x176>
 801a92c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a92e:	1c5a      	adds	r2, r3, #1
 801a930:	9215      	str	r2, [sp, #84]	; 0x54
 801a932:	785a      	ldrb	r2, [r3, #1]
 801a934:	3001      	adds	r0, #1
 801a936:	2a30      	cmp	r2, #48	; 0x30
 801a938:	d0f8      	beq.n	801a92c <_strtod_l+0x1ec>
 801a93a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801a93e:	2b08      	cmp	r3, #8
 801a940:	f200 84c1 	bhi.w	801b2c6 <_strtod_l+0xb86>
 801a944:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a946:	9005      	str	r0, [sp, #20]
 801a948:	2000      	movs	r0, #0
 801a94a:	930b      	str	r3, [sp, #44]	; 0x2c
 801a94c:	4606      	mov	r6, r0
 801a94e:	3a30      	subs	r2, #48	; 0x30
 801a950:	f100 0301 	add.w	r3, r0, #1
 801a954:	d014      	beq.n	801a980 <_strtod_l+0x240>
 801a956:	9905      	ldr	r1, [sp, #20]
 801a958:	4419      	add	r1, r3
 801a95a:	9105      	str	r1, [sp, #20]
 801a95c:	4633      	mov	r3, r6
 801a95e:	eb00 0c06 	add.w	ip, r0, r6
 801a962:	210a      	movs	r1, #10
 801a964:	4563      	cmp	r3, ip
 801a966:	d113      	bne.n	801a990 <_strtod_l+0x250>
 801a968:	1833      	adds	r3, r6, r0
 801a96a:	2b08      	cmp	r3, #8
 801a96c:	f106 0601 	add.w	r6, r6, #1
 801a970:	4406      	add	r6, r0
 801a972:	dc1a      	bgt.n	801a9aa <_strtod_l+0x26a>
 801a974:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a976:	230a      	movs	r3, #10
 801a978:	fb03 2301 	mla	r3, r3, r1, r2
 801a97c:	9309      	str	r3, [sp, #36]	; 0x24
 801a97e:	2300      	movs	r3, #0
 801a980:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801a982:	1c51      	adds	r1, r2, #1
 801a984:	9115      	str	r1, [sp, #84]	; 0x54
 801a986:	7852      	ldrb	r2, [r2, #1]
 801a988:	4618      	mov	r0, r3
 801a98a:	e7c9      	b.n	801a920 <_strtod_l+0x1e0>
 801a98c:	4658      	mov	r0, fp
 801a98e:	e7d2      	b.n	801a936 <_strtod_l+0x1f6>
 801a990:	2b08      	cmp	r3, #8
 801a992:	f103 0301 	add.w	r3, r3, #1
 801a996:	dc03      	bgt.n	801a9a0 <_strtod_l+0x260>
 801a998:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801a99a:	434f      	muls	r7, r1
 801a99c:	9709      	str	r7, [sp, #36]	; 0x24
 801a99e:	e7e1      	b.n	801a964 <_strtod_l+0x224>
 801a9a0:	2b10      	cmp	r3, #16
 801a9a2:	bfd8      	it	le
 801a9a4:	fb01 fa0a 	mulle.w	sl, r1, sl
 801a9a8:	e7dc      	b.n	801a964 <_strtod_l+0x224>
 801a9aa:	2e10      	cmp	r6, #16
 801a9ac:	bfdc      	itt	le
 801a9ae:	230a      	movle	r3, #10
 801a9b0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801a9b4:	e7e3      	b.n	801a97e <_strtod_l+0x23e>
 801a9b6:	2300      	movs	r3, #0
 801a9b8:	9305      	str	r3, [sp, #20]
 801a9ba:	2301      	movs	r3, #1
 801a9bc:	e780      	b.n	801a8c0 <_strtod_l+0x180>
 801a9be:	f04f 0c00 	mov.w	ip, #0
 801a9c2:	1caa      	adds	r2, r5, #2
 801a9c4:	9215      	str	r2, [sp, #84]	; 0x54
 801a9c6:	78aa      	ldrb	r2, [r5, #2]
 801a9c8:	e788      	b.n	801a8dc <_strtod_l+0x19c>
 801a9ca:	f04f 0c01 	mov.w	ip, #1
 801a9ce:	e7f8      	b.n	801a9c2 <_strtod_l+0x282>
 801a9d0:	0801dcb8 	.word	0x0801dcb8
 801a9d4:	0801dcb4 	.word	0x0801dcb4
 801a9d8:	7ff00000 	.word	0x7ff00000
 801a9dc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801a9de:	1c51      	adds	r1, r2, #1
 801a9e0:	9115      	str	r1, [sp, #84]	; 0x54
 801a9e2:	7852      	ldrb	r2, [r2, #1]
 801a9e4:	2a30      	cmp	r2, #48	; 0x30
 801a9e6:	d0f9      	beq.n	801a9dc <_strtod_l+0x29c>
 801a9e8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801a9ec:	2908      	cmp	r1, #8
 801a9ee:	f63f af7a 	bhi.w	801a8e6 <_strtod_l+0x1a6>
 801a9f2:	3a30      	subs	r2, #48	; 0x30
 801a9f4:	9208      	str	r2, [sp, #32]
 801a9f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801a9f8:	920c      	str	r2, [sp, #48]	; 0x30
 801a9fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801a9fc:	1c57      	adds	r7, r2, #1
 801a9fe:	9715      	str	r7, [sp, #84]	; 0x54
 801aa00:	7852      	ldrb	r2, [r2, #1]
 801aa02:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801aa06:	f1be 0f09 	cmp.w	lr, #9
 801aa0a:	d938      	bls.n	801aa7e <_strtod_l+0x33e>
 801aa0c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801aa0e:	1a7f      	subs	r7, r7, r1
 801aa10:	2f08      	cmp	r7, #8
 801aa12:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801aa16:	dc03      	bgt.n	801aa20 <_strtod_l+0x2e0>
 801aa18:	9908      	ldr	r1, [sp, #32]
 801aa1a:	428f      	cmp	r7, r1
 801aa1c:	bfa8      	it	ge
 801aa1e:	460f      	movge	r7, r1
 801aa20:	f1bc 0f00 	cmp.w	ip, #0
 801aa24:	d000      	beq.n	801aa28 <_strtod_l+0x2e8>
 801aa26:	427f      	negs	r7, r7
 801aa28:	2e00      	cmp	r6, #0
 801aa2a:	d14f      	bne.n	801aacc <_strtod_l+0x38c>
 801aa2c:	9904      	ldr	r1, [sp, #16]
 801aa2e:	4301      	orrs	r1, r0
 801aa30:	f47f aec1 	bne.w	801a7b6 <_strtod_l+0x76>
 801aa34:	2b00      	cmp	r3, #0
 801aa36:	f47f aedb 	bne.w	801a7f0 <_strtod_l+0xb0>
 801aa3a:	2a69      	cmp	r2, #105	; 0x69
 801aa3c:	d029      	beq.n	801aa92 <_strtod_l+0x352>
 801aa3e:	dc26      	bgt.n	801aa8e <_strtod_l+0x34e>
 801aa40:	2a49      	cmp	r2, #73	; 0x49
 801aa42:	d026      	beq.n	801aa92 <_strtod_l+0x352>
 801aa44:	2a4e      	cmp	r2, #78	; 0x4e
 801aa46:	f47f aed3 	bne.w	801a7f0 <_strtod_l+0xb0>
 801aa4a:	499b      	ldr	r1, [pc, #620]	; (801acb8 <_strtod_l+0x578>)
 801aa4c:	a815      	add	r0, sp, #84	; 0x54
 801aa4e:	f001 ff4d 	bl	801c8ec <__match>
 801aa52:	2800      	cmp	r0, #0
 801aa54:	f43f aecc 	beq.w	801a7f0 <_strtod_l+0xb0>
 801aa58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801aa5a:	781b      	ldrb	r3, [r3, #0]
 801aa5c:	2b28      	cmp	r3, #40	; 0x28
 801aa5e:	d12f      	bne.n	801aac0 <_strtod_l+0x380>
 801aa60:	4996      	ldr	r1, [pc, #600]	; (801acbc <_strtod_l+0x57c>)
 801aa62:	aa18      	add	r2, sp, #96	; 0x60
 801aa64:	a815      	add	r0, sp, #84	; 0x54
 801aa66:	f001 ff55 	bl	801c914 <__hexnan>
 801aa6a:	2805      	cmp	r0, #5
 801aa6c:	d128      	bne.n	801aac0 <_strtod_l+0x380>
 801aa6e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801aa70:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801aa74:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801aa78:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801aa7c:	e69b      	b.n	801a7b6 <_strtod_l+0x76>
 801aa7e:	9f08      	ldr	r7, [sp, #32]
 801aa80:	210a      	movs	r1, #10
 801aa82:	fb01 2107 	mla	r1, r1, r7, r2
 801aa86:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801aa8a:	9208      	str	r2, [sp, #32]
 801aa8c:	e7b5      	b.n	801a9fa <_strtod_l+0x2ba>
 801aa8e:	2a6e      	cmp	r2, #110	; 0x6e
 801aa90:	e7d9      	b.n	801aa46 <_strtod_l+0x306>
 801aa92:	498b      	ldr	r1, [pc, #556]	; (801acc0 <_strtod_l+0x580>)
 801aa94:	a815      	add	r0, sp, #84	; 0x54
 801aa96:	f001 ff29 	bl	801c8ec <__match>
 801aa9a:	2800      	cmp	r0, #0
 801aa9c:	f43f aea8 	beq.w	801a7f0 <_strtod_l+0xb0>
 801aaa0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801aaa2:	4988      	ldr	r1, [pc, #544]	; (801acc4 <_strtod_l+0x584>)
 801aaa4:	3b01      	subs	r3, #1
 801aaa6:	a815      	add	r0, sp, #84	; 0x54
 801aaa8:	9315      	str	r3, [sp, #84]	; 0x54
 801aaaa:	f001 ff1f 	bl	801c8ec <__match>
 801aaae:	b910      	cbnz	r0, 801aab6 <_strtod_l+0x376>
 801aab0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801aab2:	3301      	adds	r3, #1
 801aab4:	9315      	str	r3, [sp, #84]	; 0x54
 801aab6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801acd4 <_strtod_l+0x594>
 801aaba:	f04f 0800 	mov.w	r8, #0
 801aabe:	e67a      	b.n	801a7b6 <_strtod_l+0x76>
 801aac0:	4881      	ldr	r0, [pc, #516]	; (801acc8 <_strtod_l+0x588>)
 801aac2:	f001 fc45 	bl	801c350 <nan>
 801aac6:	ec59 8b10 	vmov	r8, r9, d0
 801aaca:	e674      	b.n	801a7b6 <_strtod_l+0x76>
 801aacc:	9b05      	ldr	r3, [sp, #20]
 801aace:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aad0:	1afb      	subs	r3, r7, r3
 801aad2:	f1bb 0f00 	cmp.w	fp, #0
 801aad6:	bf08      	it	eq
 801aad8:	46b3      	moveq	fp, r6
 801aada:	2e10      	cmp	r6, #16
 801aadc:	9308      	str	r3, [sp, #32]
 801aade:	4635      	mov	r5, r6
 801aae0:	bfa8      	it	ge
 801aae2:	2510      	movge	r5, #16
 801aae4:	f7e5 fd3e 	bl	8000564 <__aeabi_ui2d>
 801aae8:	2e09      	cmp	r6, #9
 801aaea:	4680      	mov	r8, r0
 801aaec:	4689      	mov	r9, r1
 801aaee:	dd13      	ble.n	801ab18 <_strtod_l+0x3d8>
 801aaf0:	4b76      	ldr	r3, [pc, #472]	; (801accc <_strtod_l+0x58c>)
 801aaf2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801aaf6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801aafa:	f7e5 fdad 	bl	8000658 <__aeabi_dmul>
 801aafe:	4680      	mov	r8, r0
 801ab00:	4650      	mov	r0, sl
 801ab02:	4689      	mov	r9, r1
 801ab04:	f7e5 fd2e 	bl	8000564 <__aeabi_ui2d>
 801ab08:	4602      	mov	r2, r0
 801ab0a:	460b      	mov	r3, r1
 801ab0c:	4640      	mov	r0, r8
 801ab0e:	4649      	mov	r1, r9
 801ab10:	f7e5 fbec 	bl	80002ec <__adddf3>
 801ab14:	4680      	mov	r8, r0
 801ab16:	4689      	mov	r9, r1
 801ab18:	2e0f      	cmp	r6, #15
 801ab1a:	dc38      	bgt.n	801ab8e <_strtod_l+0x44e>
 801ab1c:	9b08      	ldr	r3, [sp, #32]
 801ab1e:	2b00      	cmp	r3, #0
 801ab20:	f43f ae49 	beq.w	801a7b6 <_strtod_l+0x76>
 801ab24:	dd24      	ble.n	801ab70 <_strtod_l+0x430>
 801ab26:	2b16      	cmp	r3, #22
 801ab28:	dc0b      	bgt.n	801ab42 <_strtod_l+0x402>
 801ab2a:	4968      	ldr	r1, [pc, #416]	; (801accc <_strtod_l+0x58c>)
 801ab2c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801ab30:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ab34:	4642      	mov	r2, r8
 801ab36:	464b      	mov	r3, r9
 801ab38:	f7e5 fd8e 	bl	8000658 <__aeabi_dmul>
 801ab3c:	4680      	mov	r8, r0
 801ab3e:	4689      	mov	r9, r1
 801ab40:	e639      	b.n	801a7b6 <_strtod_l+0x76>
 801ab42:	9a08      	ldr	r2, [sp, #32]
 801ab44:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 801ab48:	4293      	cmp	r3, r2
 801ab4a:	db20      	blt.n	801ab8e <_strtod_l+0x44e>
 801ab4c:	4c5f      	ldr	r4, [pc, #380]	; (801accc <_strtod_l+0x58c>)
 801ab4e:	f1c6 060f 	rsb	r6, r6, #15
 801ab52:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801ab56:	4642      	mov	r2, r8
 801ab58:	464b      	mov	r3, r9
 801ab5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ab5e:	f7e5 fd7b 	bl	8000658 <__aeabi_dmul>
 801ab62:	9b08      	ldr	r3, [sp, #32]
 801ab64:	1b9e      	subs	r6, r3, r6
 801ab66:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801ab6a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801ab6e:	e7e3      	b.n	801ab38 <_strtod_l+0x3f8>
 801ab70:	9b08      	ldr	r3, [sp, #32]
 801ab72:	3316      	adds	r3, #22
 801ab74:	db0b      	blt.n	801ab8e <_strtod_l+0x44e>
 801ab76:	9b05      	ldr	r3, [sp, #20]
 801ab78:	1bdf      	subs	r7, r3, r7
 801ab7a:	4b54      	ldr	r3, [pc, #336]	; (801accc <_strtod_l+0x58c>)
 801ab7c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801ab80:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ab84:	4640      	mov	r0, r8
 801ab86:	4649      	mov	r1, r9
 801ab88:	f7e5 fe90 	bl	80008ac <__aeabi_ddiv>
 801ab8c:	e7d6      	b.n	801ab3c <_strtod_l+0x3fc>
 801ab8e:	9b08      	ldr	r3, [sp, #32]
 801ab90:	1b75      	subs	r5, r6, r5
 801ab92:	441d      	add	r5, r3
 801ab94:	2d00      	cmp	r5, #0
 801ab96:	dd70      	ble.n	801ac7a <_strtod_l+0x53a>
 801ab98:	f015 030f 	ands.w	r3, r5, #15
 801ab9c:	d00a      	beq.n	801abb4 <_strtod_l+0x474>
 801ab9e:	494b      	ldr	r1, [pc, #300]	; (801accc <_strtod_l+0x58c>)
 801aba0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801aba4:	4642      	mov	r2, r8
 801aba6:	464b      	mov	r3, r9
 801aba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801abac:	f7e5 fd54 	bl	8000658 <__aeabi_dmul>
 801abb0:	4680      	mov	r8, r0
 801abb2:	4689      	mov	r9, r1
 801abb4:	f035 050f 	bics.w	r5, r5, #15
 801abb8:	d04d      	beq.n	801ac56 <_strtod_l+0x516>
 801abba:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801abbe:	dd22      	ble.n	801ac06 <_strtod_l+0x4c6>
 801abc0:	2500      	movs	r5, #0
 801abc2:	46ab      	mov	fp, r5
 801abc4:	9509      	str	r5, [sp, #36]	; 0x24
 801abc6:	9505      	str	r5, [sp, #20]
 801abc8:	2322      	movs	r3, #34	; 0x22
 801abca:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801acd4 <_strtod_l+0x594>
 801abce:	6023      	str	r3, [r4, #0]
 801abd0:	f04f 0800 	mov.w	r8, #0
 801abd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801abd6:	2b00      	cmp	r3, #0
 801abd8:	f43f aded 	beq.w	801a7b6 <_strtod_l+0x76>
 801abdc:	9916      	ldr	r1, [sp, #88]	; 0x58
 801abde:	4620      	mov	r0, r4
 801abe0:	f7ff f924 	bl	8019e2c <_Bfree>
 801abe4:	9905      	ldr	r1, [sp, #20]
 801abe6:	4620      	mov	r0, r4
 801abe8:	f7ff f920 	bl	8019e2c <_Bfree>
 801abec:	4659      	mov	r1, fp
 801abee:	4620      	mov	r0, r4
 801abf0:	f7ff f91c 	bl	8019e2c <_Bfree>
 801abf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801abf6:	4620      	mov	r0, r4
 801abf8:	f7ff f918 	bl	8019e2c <_Bfree>
 801abfc:	4629      	mov	r1, r5
 801abfe:	4620      	mov	r0, r4
 801ac00:	f7ff f914 	bl	8019e2c <_Bfree>
 801ac04:	e5d7      	b.n	801a7b6 <_strtod_l+0x76>
 801ac06:	4b32      	ldr	r3, [pc, #200]	; (801acd0 <_strtod_l+0x590>)
 801ac08:	9304      	str	r3, [sp, #16]
 801ac0a:	2300      	movs	r3, #0
 801ac0c:	112d      	asrs	r5, r5, #4
 801ac0e:	4640      	mov	r0, r8
 801ac10:	4649      	mov	r1, r9
 801ac12:	469a      	mov	sl, r3
 801ac14:	2d01      	cmp	r5, #1
 801ac16:	dc21      	bgt.n	801ac5c <_strtod_l+0x51c>
 801ac18:	b10b      	cbz	r3, 801ac1e <_strtod_l+0x4de>
 801ac1a:	4680      	mov	r8, r0
 801ac1c:	4689      	mov	r9, r1
 801ac1e:	492c      	ldr	r1, [pc, #176]	; (801acd0 <_strtod_l+0x590>)
 801ac20:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801ac24:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801ac28:	4642      	mov	r2, r8
 801ac2a:	464b      	mov	r3, r9
 801ac2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ac30:	f7e5 fd12 	bl	8000658 <__aeabi_dmul>
 801ac34:	4b27      	ldr	r3, [pc, #156]	; (801acd4 <_strtod_l+0x594>)
 801ac36:	460a      	mov	r2, r1
 801ac38:	400b      	ands	r3, r1
 801ac3a:	4927      	ldr	r1, [pc, #156]	; (801acd8 <_strtod_l+0x598>)
 801ac3c:	428b      	cmp	r3, r1
 801ac3e:	4680      	mov	r8, r0
 801ac40:	d8be      	bhi.n	801abc0 <_strtod_l+0x480>
 801ac42:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801ac46:	428b      	cmp	r3, r1
 801ac48:	bf86      	itte	hi
 801ac4a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801acdc <_strtod_l+0x59c>
 801ac4e:	f04f 38ff 	movhi.w	r8, #4294967295
 801ac52:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801ac56:	2300      	movs	r3, #0
 801ac58:	9304      	str	r3, [sp, #16]
 801ac5a:	e07b      	b.n	801ad54 <_strtod_l+0x614>
 801ac5c:	07ea      	lsls	r2, r5, #31
 801ac5e:	d505      	bpl.n	801ac6c <_strtod_l+0x52c>
 801ac60:	9b04      	ldr	r3, [sp, #16]
 801ac62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac66:	f7e5 fcf7 	bl	8000658 <__aeabi_dmul>
 801ac6a:	2301      	movs	r3, #1
 801ac6c:	9a04      	ldr	r2, [sp, #16]
 801ac6e:	3208      	adds	r2, #8
 801ac70:	f10a 0a01 	add.w	sl, sl, #1
 801ac74:	106d      	asrs	r5, r5, #1
 801ac76:	9204      	str	r2, [sp, #16]
 801ac78:	e7cc      	b.n	801ac14 <_strtod_l+0x4d4>
 801ac7a:	d0ec      	beq.n	801ac56 <_strtod_l+0x516>
 801ac7c:	426d      	negs	r5, r5
 801ac7e:	f015 020f 	ands.w	r2, r5, #15
 801ac82:	d00a      	beq.n	801ac9a <_strtod_l+0x55a>
 801ac84:	4b11      	ldr	r3, [pc, #68]	; (801accc <_strtod_l+0x58c>)
 801ac86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ac8a:	4640      	mov	r0, r8
 801ac8c:	4649      	mov	r1, r9
 801ac8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac92:	f7e5 fe0b 	bl	80008ac <__aeabi_ddiv>
 801ac96:	4680      	mov	r8, r0
 801ac98:	4689      	mov	r9, r1
 801ac9a:	112d      	asrs	r5, r5, #4
 801ac9c:	d0db      	beq.n	801ac56 <_strtod_l+0x516>
 801ac9e:	2d1f      	cmp	r5, #31
 801aca0:	dd1e      	ble.n	801ace0 <_strtod_l+0x5a0>
 801aca2:	2500      	movs	r5, #0
 801aca4:	46ab      	mov	fp, r5
 801aca6:	9509      	str	r5, [sp, #36]	; 0x24
 801aca8:	9505      	str	r5, [sp, #20]
 801acaa:	2322      	movs	r3, #34	; 0x22
 801acac:	f04f 0800 	mov.w	r8, #0
 801acb0:	f04f 0900 	mov.w	r9, #0
 801acb4:	6023      	str	r3, [r4, #0]
 801acb6:	e78d      	b.n	801abd4 <_strtod_l+0x494>
 801acb8:	0801daa5 	.word	0x0801daa5
 801acbc:	0801dccc 	.word	0x0801dccc
 801acc0:	0801da9d 	.word	0x0801da9d
 801acc4:	0801dad2 	.word	0x0801dad2
 801acc8:	0801de78 	.word	0x0801de78
 801accc:	0801dbe0 	.word	0x0801dbe0
 801acd0:	0801dbb8 	.word	0x0801dbb8
 801acd4:	7ff00000 	.word	0x7ff00000
 801acd8:	7ca00000 	.word	0x7ca00000
 801acdc:	7fefffff 	.word	0x7fefffff
 801ace0:	f015 0310 	ands.w	r3, r5, #16
 801ace4:	bf18      	it	ne
 801ace6:	236a      	movne	r3, #106	; 0x6a
 801ace8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801b08c <_strtod_l+0x94c>
 801acec:	9304      	str	r3, [sp, #16]
 801acee:	4640      	mov	r0, r8
 801acf0:	4649      	mov	r1, r9
 801acf2:	2300      	movs	r3, #0
 801acf4:	07ea      	lsls	r2, r5, #31
 801acf6:	d504      	bpl.n	801ad02 <_strtod_l+0x5c2>
 801acf8:	e9da 2300 	ldrd	r2, r3, [sl]
 801acfc:	f7e5 fcac 	bl	8000658 <__aeabi_dmul>
 801ad00:	2301      	movs	r3, #1
 801ad02:	106d      	asrs	r5, r5, #1
 801ad04:	f10a 0a08 	add.w	sl, sl, #8
 801ad08:	d1f4      	bne.n	801acf4 <_strtod_l+0x5b4>
 801ad0a:	b10b      	cbz	r3, 801ad10 <_strtod_l+0x5d0>
 801ad0c:	4680      	mov	r8, r0
 801ad0e:	4689      	mov	r9, r1
 801ad10:	9b04      	ldr	r3, [sp, #16]
 801ad12:	b1bb      	cbz	r3, 801ad44 <_strtod_l+0x604>
 801ad14:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801ad18:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801ad1c:	2b00      	cmp	r3, #0
 801ad1e:	4649      	mov	r1, r9
 801ad20:	dd10      	ble.n	801ad44 <_strtod_l+0x604>
 801ad22:	2b1f      	cmp	r3, #31
 801ad24:	f340 811e 	ble.w	801af64 <_strtod_l+0x824>
 801ad28:	2b34      	cmp	r3, #52	; 0x34
 801ad2a:	bfde      	ittt	le
 801ad2c:	f04f 33ff 	movle.w	r3, #4294967295
 801ad30:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801ad34:	4093      	lslle	r3, r2
 801ad36:	f04f 0800 	mov.w	r8, #0
 801ad3a:	bfcc      	ite	gt
 801ad3c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801ad40:	ea03 0901 	andle.w	r9, r3, r1
 801ad44:	2200      	movs	r2, #0
 801ad46:	2300      	movs	r3, #0
 801ad48:	4640      	mov	r0, r8
 801ad4a:	4649      	mov	r1, r9
 801ad4c:	f7e5 feec 	bl	8000b28 <__aeabi_dcmpeq>
 801ad50:	2800      	cmp	r0, #0
 801ad52:	d1a6      	bne.n	801aca2 <_strtod_l+0x562>
 801ad54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad56:	9300      	str	r3, [sp, #0]
 801ad58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ad5a:	4633      	mov	r3, r6
 801ad5c:	465a      	mov	r2, fp
 801ad5e:	4620      	mov	r0, r4
 801ad60:	f7ff f8cc 	bl	8019efc <__s2b>
 801ad64:	9009      	str	r0, [sp, #36]	; 0x24
 801ad66:	2800      	cmp	r0, #0
 801ad68:	f43f af2a 	beq.w	801abc0 <_strtod_l+0x480>
 801ad6c:	9a08      	ldr	r2, [sp, #32]
 801ad6e:	9b05      	ldr	r3, [sp, #20]
 801ad70:	2a00      	cmp	r2, #0
 801ad72:	eba3 0307 	sub.w	r3, r3, r7
 801ad76:	bfa8      	it	ge
 801ad78:	2300      	movge	r3, #0
 801ad7a:	930c      	str	r3, [sp, #48]	; 0x30
 801ad7c:	2500      	movs	r5, #0
 801ad7e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801ad82:	9312      	str	r3, [sp, #72]	; 0x48
 801ad84:	46ab      	mov	fp, r5
 801ad86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad88:	4620      	mov	r0, r4
 801ad8a:	6859      	ldr	r1, [r3, #4]
 801ad8c:	f7ff f80e 	bl	8019dac <_Balloc>
 801ad90:	9005      	str	r0, [sp, #20]
 801ad92:	2800      	cmp	r0, #0
 801ad94:	f43f af18 	beq.w	801abc8 <_strtod_l+0x488>
 801ad98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad9a:	691a      	ldr	r2, [r3, #16]
 801ad9c:	3202      	adds	r2, #2
 801ad9e:	f103 010c 	add.w	r1, r3, #12
 801ada2:	0092      	lsls	r2, r2, #2
 801ada4:	300c      	adds	r0, #12
 801ada6:	f7fe f927 	bl	8018ff8 <memcpy>
 801adaa:	ec49 8b10 	vmov	d0, r8, r9
 801adae:	aa18      	add	r2, sp, #96	; 0x60
 801adb0:	a917      	add	r1, sp, #92	; 0x5c
 801adb2:	4620      	mov	r0, r4
 801adb4:	f7ff fbd6 	bl	801a564 <__d2b>
 801adb8:	ec49 8b18 	vmov	d8, r8, r9
 801adbc:	9016      	str	r0, [sp, #88]	; 0x58
 801adbe:	2800      	cmp	r0, #0
 801adc0:	f43f af02 	beq.w	801abc8 <_strtod_l+0x488>
 801adc4:	2101      	movs	r1, #1
 801adc6:	4620      	mov	r0, r4
 801adc8:	f7ff f930 	bl	801a02c <__i2b>
 801adcc:	4683      	mov	fp, r0
 801adce:	2800      	cmp	r0, #0
 801add0:	f43f aefa 	beq.w	801abc8 <_strtod_l+0x488>
 801add4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801add6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801add8:	2e00      	cmp	r6, #0
 801adda:	bfab      	itete	ge
 801addc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801adde:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 801ade0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801ade2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 801ade6:	bfac      	ite	ge
 801ade8:	eb06 0a03 	addge.w	sl, r6, r3
 801adec:	1b9f      	sublt	r7, r3, r6
 801adee:	9b04      	ldr	r3, [sp, #16]
 801adf0:	1af6      	subs	r6, r6, r3
 801adf2:	4416      	add	r6, r2
 801adf4:	4ba0      	ldr	r3, [pc, #640]	; (801b078 <_strtod_l+0x938>)
 801adf6:	3e01      	subs	r6, #1
 801adf8:	429e      	cmp	r6, r3
 801adfa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801adfe:	f280 80c4 	bge.w	801af8a <_strtod_l+0x84a>
 801ae02:	1b9b      	subs	r3, r3, r6
 801ae04:	2b1f      	cmp	r3, #31
 801ae06:	eba2 0203 	sub.w	r2, r2, r3
 801ae0a:	f04f 0101 	mov.w	r1, #1
 801ae0e:	f300 80b0 	bgt.w	801af72 <_strtod_l+0x832>
 801ae12:	fa01 f303 	lsl.w	r3, r1, r3
 801ae16:	930e      	str	r3, [sp, #56]	; 0x38
 801ae18:	2300      	movs	r3, #0
 801ae1a:	930d      	str	r3, [sp, #52]	; 0x34
 801ae1c:	eb0a 0602 	add.w	r6, sl, r2
 801ae20:	9b04      	ldr	r3, [sp, #16]
 801ae22:	45b2      	cmp	sl, r6
 801ae24:	4417      	add	r7, r2
 801ae26:	441f      	add	r7, r3
 801ae28:	4653      	mov	r3, sl
 801ae2a:	bfa8      	it	ge
 801ae2c:	4633      	movge	r3, r6
 801ae2e:	42bb      	cmp	r3, r7
 801ae30:	bfa8      	it	ge
 801ae32:	463b      	movge	r3, r7
 801ae34:	2b00      	cmp	r3, #0
 801ae36:	bfc2      	ittt	gt
 801ae38:	1af6      	subgt	r6, r6, r3
 801ae3a:	1aff      	subgt	r7, r7, r3
 801ae3c:	ebaa 0a03 	subgt.w	sl, sl, r3
 801ae40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ae42:	2b00      	cmp	r3, #0
 801ae44:	dd17      	ble.n	801ae76 <_strtod_l+0x736>
 801ae46:	4659      	mov	r1, fp
 801ae48:	461a      	mov	r2, r3
 801ae4a:	4620      	mov	r0, r4
 801ae4c:	f7ff f9ae 	bl	801a1ac <__pow5mult>
 801ae50:	4683      	mov	fp, r0
 801ae52:	2800      	cmp	r0, #0
 801ae54:	f43f aeb8 	beq.w	801abc8 <_strtod_l+0x488>
 801ae58:	4601      	mov	r1, r0
 801ae5a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801ae5c:	4620      	mov	r0, r4
 801ae5e:	f7ff f8fb 	bl	801a058 <__multiply>
 801ae62:	900b      	str	r0, [sp, #44]	; 0x2c
 801ae64:	2800      	cmp	r0, #0
 801ae66:	f43f aeaf 	beq.w	801abc8 <_strtod_l+0x488>
 801ae6a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801ae6c:	4620      	mov	r0, r4
 801ae6e:	f7fe ffdd 	bl	8019e2c <_Bfree>
 801ae72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ae74:	9316      	str	r3, [sp, #88]	; 0x58
 801ae76:	2e00      	cmp	r6, #0
 801ae78:	f300 808c 	bgt.w	801af94 <_strtod_l+0x854>
 801ae7c:	9b08      	ldr	r3, [sp, #32]
 801ae7e:	2b00      	cmp	r3, #0
 801ae80:	dd08      	ble.n	801ae94 <_strtod_l+0x754>
 801ae82:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ae84:	9905      	ldr	r1, [sp, #20]
 801ae86:	4620      	mov	r0, r4
 801ae88:	f7ff f990 	bl	801a1ac <__pow5mult>
 801ae8c:	9005      	str	r0, [sp, #20]
 801ae8e:	2800      	cmp	r0, #0
 801ae90:	f43f ae9a 	beq.w	801abc8 <_strtod_l+0x488>
 801ae94:	2f00      	cmp	r7, #0
 801ae96:	dd08      	ble.n	801aeaa <_strtod_l+0x76a>
 801ae98:	9905      	ldr	r1, [sp, #20]
 801ae9a:	463a      	mov	r2, r7
 801ae9c:	4620      	mov	r0, r4
 801ae9e:	f7ff f9df 	bl	801a260 <__lshift>
 801aea2:	9005      	str	r0, [sp, #20]
 801aea4:	2800      	cmp	r0, #0
 801aea6:	f43f ae8f 	beq.w	801abc8 <_strtod_l+0x488>
 801aeaa:	f1ba 0f00 	cmp.w	sl, #0
 801aeae:	dd08      	ble.n	801aec2 <_strtod_l+0x782>
 801aeb0:	4659      	mov	r1, fp
 801aeb2:	4652      	mov	r2, sl
 801aeb4:	4620      	mov	r0, r4
 801aeb6:	f7ff f9d3 	bl	801a260 <__lshift>
 801aeba:	4683      	mov	fp, r0
 801aebc:	2800      	cmp	r0, #0
 801aebe:	f43f ae83 	beq.w	801abc8 <_strtod_l+0x488>
 801aec2:	9a05      	ldr	r2, [sp, #20]
 801aec4:	9916      	ldr	r1, [sp, #88]	; 0x58
 801aec6:	4620      	mov	r0, r4
 801aec8:	f7ff fa52 	bl	801a370 <__mdiff>
 801aecc:	4605      	mov	r5, r0
 801aece:	2800      	cmp	r0, #0
 801aed0:	f43f ae7a 	beq.w	801abc8 <_strtod_l+0x488>
 801aed4:	68c3      	ldr	r3, [r0, #12]
 801aed6:	930b      	str	r3, [sp, #44]	; 0x2c
 801aed8:	2300      	movs	r3, #0
 801aeda:	60c3      	str	r3, [r0, #12]
 801aedc:	4659      	mov	r1, fp
 801aede:	f7ff fa2b 	bl	801a338 <__mcmp>
 801aee2:	2800      	cmp	r0, #0
 801aee4:	da60      	bge.n	801afa8 <_strtod_l+0x868>
 801aee6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aee8:	ea53 0308 	orrs.w	r3, r3, r8
 801aeec:	f040 8084 	bne.w	801aff8 <_strtod_l+0x8b8>
 801aef0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801aef4:	2b00      	cmp	r3, #0
 801aef6:	d17f      	bne.n	801aff8 <_strtod_l+0x8b8>
 801aef8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801aefc:	0d1b      	lsrs	r3, r3, #20
 801aefe:	051b      	lsls	r3, r3, #20
 801af00:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801af04:	d978      	bls.n	801aff8 <_strtod_l+0x8b8>
 801af06:	696b      	ldr	r3, [r5, #20]
 801af08:	b913      	cbnz	r3, 801af10 <_strtod_l+0x7d0>
 801af0a:	692b      	ldr	r3, [r5, #16]
 801af0c:	2b01      	cmp	r3, #1
 801af0e:	dd73      	ble.n	801aff8 <_strtod_l+0x8b8>
 801af10:	4629      	mov	r1, r5
 801af12:	2201      	movs	r2, #1
 801af14:	4620      	mov	r0, r4
 801af16:	f7ff f9a3 	bl	801a260 <__lshift>
 801af1a:	4659      	mov	r1, fp
 801af1c:	4605      	mov	r5, r0
 801af1e:	f7ff fa0b 	bl	801a338 <__mcmp>
 801af22:	2800      	cmp	r0, #0
 801af24:	dd68      	ble.n	801aff8 <_strtod_l+0x8b8>
 801af26:	9904      	ldr	r1, [sp, #16]
 801af28:	4a54      	ldr	r2, [pc, #336]	; (801b07c <_strtod_l+0x93c>)
 801af2a:	464b      	mov	r3, r9
 801af2c:	2900      	cmp	r1, #0
 801af2e:	f000 8084 	beq.w	801b03a <_strtod_l+0x8fa>
 801af32:	ea02 0109 	and.w	r1, r2, r9
 801af36:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801af3a:	dc7e      	bgt.n	801b03a <_strtod_l+0x8fa>
 801af3c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801af40:	f77f aeb3 	ble.w	801acaa <_strtod_l+0x56a>
 801af44:	4b4e      	ldr	r3, [pc, #312]	; (801b080 <_strtod_l+0x940>)
 801af46:	4640      	mov	r0, r8
 801af48:	4649      	mov	r1, r9
 801af4a:	2200      	movs	r2, #0
 801af4c:	f7e5 fb84 	bl	8000658 <__aeabi_dmul>
 801af50:	4b4a      	ldr	r3, [pc, #296]	; (801b07c <_strtod_l+0x93c>)
 801af52:	400b      	ands	r3, r1
 801af54:	4680      	mov	r8, r0
 801af56:	4689      	mov	r9, r1
 801af58:	2b00      	cmp	r3, #0
 801af5a:	f47f ae3f 	bne.w	801abdc <_strtod_l+0x49c>
 801af5e:	2322      	movs	r3, #34	; 0x22
 801af60:	6023      	str	r3, [r4, #0]
 801af62:	e63b      	b.n	801abdc <_strtod_l+0x49c>
 801af64:	f04f 32ff 	mov.w	r2, #4294967295
 801af68:	fa02 f303 	lsl.w	r3, r2, r3
 801af6c:	ea03 0808 	and.w	r8, r3, r8
 801af70:	e6e8      	b.n	801ad44 <_strtod_l+0x604>
 801af72:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801af76:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801af7a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801af7e:	36e2      	adds	r6, #226	; 0xe2
 801af80:	fa01 f306 	lsl.w	r3, r1, r6
 801af84:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 801af88:	e748      	b.n	801ae1c <_strtod_l+0x6dc>
 801af8a:	2100      	movs	r1, #0
 801af8c:	2301      	movs	r3, #1
 801af8e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801af92:	e743      	b.n	801ae1c <_strtod_l+0x6dc>
 801af94:	9916      	ldr	r1, [sp, #88]	; 0x58
 801af96:	4632      	mov	r2, r6
 801af98:	4620      	mov	r0, r4
 801af9a:	f7ff f961 	bl	801a260 <__lshift>
 801af9e:	9016      	str	r0, [sp, #88]	; 0x58
 801afa0:	2800      	cmp	r0, #0
 801afa2:	f47f af6b 	bne.w	801ae7c <_strtod_l+0x73c>
 801afa6:	e60f      	b.n	801abc8 <_strtod_l+0x488>
 801afa8:	46ca      	mov	sl, r9
 801afaa:	d171      	bne.n	801b090 <_strtod_l+0x950>
 801afac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801afae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801afb2:	b352      	cbz	r2, 801b00a <_strtod_l+0x8ca>
 801afb4:	4a33      	ldr	r2, [pc, #204]	; (801b084 <_strtod_l+0x944>)
 801afb6:	4293      	cmp	r3, r2
 801afb8:	d12a      	bne.n	801b010 <_strtod_l+0x8d0>
 801afba:	9b04      	ldr	r3, [sp, #16]
 801afbc:	4641      	mov	r1, r8
 801afbe:	b1fb      	cbz	r3, 801b000 <_strtod_l+0x8c0>
 801afc0:	4b2e      	ldr	r3, [pc, #184]	; (801b07c <_strtod_l+0x93c>)
 801afc2:	ea09 0303 	and.w	r3, r9, r3
 801afc6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801afca:	f04f 32ff 	mov.w	r2, #4294967295
 801afce:	d81a      	bhi.n	801b006 <_strtod_l+0x8c6>
 801afd0:	0d1b      	lsrs	r3, r3, #20
 801afd2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801afd6:	fa02 f303 	lsl.w	r3, r2, r3
 801afda:	4299      	cmp	r1, r3
 801afdc:	d118      	bne.n	801b010 <_strtod_l+0x8d0>
 801afde:	4b2a      	ldr	r3, [pc, #168]	; (801b088 <_strtod_l+0x948>)
 801afe0:	459a      	cmp	sl, r3
 801afe2:	d102      	bne.n	801afea <_strtod_l+0x8aa>
 801afe4:	3101      	adds	r1, #1
 801afe6:	f43f adef 	beq.w	801abc8 <_strtod_l+0x488>
 801afea:	4b24      	ldr	r3, [pc, #144]	; (801b07c <_strtod_l+0x93c>)
 801afec:	ea0a 0303 	and.w	r3, sl, r3
 801aff0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801aff4:	f04f 0800 	mov.w	r8, #0
 801aff8:	9b04      	ldr	r3, [sp, #16]
 801affa:	2b00      	cmp	r3, #0
 801affc:	d1a2      	bne.n	801af44 <_strtod_l+0x804>
 801affe:	e5ed      	b.n	801abdc <_strtod_l+0x49c>
 801b000:	f04f 33ff 	mov.w	r3, #4294967295
 801b004:	e7e9      	b.n	801afda <_strtod_l+0x89a>
 801b006:	4613      	mov	r3, r2
 801b008:	e7e7      	b.n	801afda <_strtod_l+0x89a>
 801b00a:	ea53 0308 	orrs.w	r3, r3, r8
 801b00e:	d08a      	beq.n	801af26 <_strtod_l+0x7e6>
 801b010:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b012:	b1e3      	cbz	r3, 801b04e <_strtod_l+0x90e>
 801b014:	ea13 0f0a 	tst.w	r3, sl
 801b018:	d0ee      	beq.n	801aff8 <_strtod_l+0x8b8>
 801b01a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b01c:	9a04      	ldr	r2, [sp, #16]
 801b01e:	4640      	mov	r0, r8
 801b020:	4649      	mov	r1, r9
 801b022:	b1c3      	cbz	r3, 801b056 <_strtod_l+0x916>
 801b024:	f7ff fb6f 	bl	801a706 <sulp>
 801b028:	4602      	mov	r2, r0
 801b02a:	460b      	mov	r3, r1
 801b02c:	ec51 0b18 	vmov	r0, r1, d8
 801b030:	f7e5 f95c 	bl	80002ec <__adddf3>
 801b034:	4680      	mov	r8, r0
 801b036:	4689      	mov	r9, r1
 801b038:	e7de      	b.n	801aff8 <_strtod_l+0x8b8>
 801b03a:	4013      	ands	r3, r2
 801b03c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801b040:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801b044:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801b048:	f04f 38ff 	mov.w	r8, #4294967295
 801b04c:	e7d4      	b.n	801aff8 <_strtod_l+0x8b8>
 801b04e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b050:	ea13 0f08 	tst.w	r3, r8
 801b054:	e7e0      	b.n	801b018 <_strtod_l+0x8d8>
 801b056:	f7ff fb56 	bl	801a706 <sulp>
 801b05a:	4602      	mov	r2, r0
 801b05c:	460b      	mov	r3, r1
 801b05e:	ec51 0b18 	vmov	r0, r1, d8
 801b062:	f7e5 f941 	bl	80002e8 <__aeabi_dsub>
 801b066:	2200      	movs	r2, #0
 801b068:	2300      	movs	r3, #0
 801b06a:	4680      	mov	r8, r0
 801b06c:	4689      	mov	r9, r1
 801b06e:	f7e5 fd5b 	bl	8000b28 <__aeabi_dcmpeq>
 801b072:	2800      	cmp	r0, #0
 801b074:	d0c0      	beq.n	801aff8 <_strtod_l+0x8b8>
 801b076:	e618      	b.n	801acaa <_strtod_l+0x56a>
 801b078:	fffffc02 	.word	0xfffffc02
 801b07c:	7ff00000 	.word	0x7ff00000
 801b080:	39500000 	.word	0x39500000
 801b084:	000fffff 	.word	0x000fffff
 801b088:	7fefffff 	.word	0x7fefffff
 801b08c:	0801dce0 	.word	0x0801dce0
 801b090:	4659      	mov	r1, fp
 801b092:	4628      	mov	r0, r5
 801b094:	f7ff fac0 	bl	801a618 <__ratio>
 801b098:	ec57 6b10 	vmov	r6, r7, d0
 801b09c:	ee10 0a10 	vmov	r0, s0
 801b0a0:	2200      	movs	r2, #0
 801b0a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b0a6:	4639      	mov	r1, r7
 801b0a8:	f7e5 fd52 	bl	8000b50 <__aeabi_dcmple>
 801b0ac:	2800      	cmp	r0, #0
 801b0ae:	d071      	beq.n	801b194 <_strtod_l+0xa54>
 801b0b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b0b2:	2b00      	cmp	r3, #0
 801b0b4:	d17c      	bne.n	801b1b0 <_strtod_l+0xa70>
 801b0b6:	f1b8 0f00 	cmp.w	r8, #0
 801b0ba:	d15a      	bne.n	801b172 <_strtod_l+0xa32>
 801b0bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b0c0:	2b00      	cmp	r3, #0
 801b0c2:	d15d      	bne.n	801b180 <_strtod_l+0xa40>
 801b0c4:	4b90      	ldr	r3, [pc, #576]	; (801b308 <_strtod_l+0xbc8>)
 801b0c6:	2200      	movs	r2, #0
 801b0c8:	4630      	mov	r0, r6
 801b0ca:	4639      	mov	r1, r7
 801b0cc:	f7e5 fd36 	bl	8000b3c <__aeabi_dcmplt>
 801b0d0:	2800      	cmp	r0, #0
 801b0d2:	d15c      	bne.n	801b18e <_strtod_l+0xa4e>
 801b0d4:	4630      	mov	r0, r6
 801b0d6:	4639      	mov	r1, r7
 801b0d8:	4b8c      	ldr	r3, [pc, #560]	; (801b30c <_strtod_l+0xbcc>)
 801b0da:	2200      	movs	r2, #0
 801b0dc:	f7e5 fabc 	bl	8000658 <__aeabi_dmul>
 801b0e0:	4606      	mov	r6, r0
 801b0e2:	460f      	mov	r7, r1
 801b0e4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 801b0e8:	9606      	str	r6, [sp, #24]
 801b0ea:	9307      	str	r3, [sp, #28]
 801b0ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b0f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801b0f4:	4b86      	ldr	r3, [pc, #536]	; (801b310 <_strtod_l+0xbd0>)
 801b0f6:	ea0a 0303 	and.w	r3, sl, r3
 801b0fa:	930d      	str	r3, [sp, #52]	; 0x34
 801b0fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b0fe:	4b85      	ldr	r3, [pc, #532]	; (801b314 <_strtod_l+0xbd4>)
 801b100:	429a      	cmp	r2, r3
 801b102:	f040 8090 	bne.w	801b226 <_strtod_l+0xae6>
 801b106:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801b10a:	ec49 8b10 	vmov	d0, r8, r9
 801b10e:	f7ff f9b9 	bl	801a484 <__ulp>
 801b112:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b116:	ec51 0b10 	vmov	r0, r1, d0
 801b11a:	f7e5 fa9d 	bl	8000658 <__aeabi_dmul>
 801b11e:	4642      	mov	r2, r8
 801b120:	464b      	mov	r3, r9
 801b122:	f7e5 f8e3 	bl	80002ec <__adddf3>
 801b126:	460b      	mov	r3, r1
 801b128:	4979      	ldr	r1, [pc, #484]	; (801b310 <_strtod_l+0xbd0>)
 801b12a:	4a7b      	ldr	r2, [pc, #492]	; (801b318 <_strtod_l+0xbd8>)
 801b12c:	4019      	ands	r1, r3
 801b12e:	4291      	cmp	r1, r2
 801b130:	4680      	mov	r8, r0
 801b132:	d944      	bls.n	801b1be <_strtod_l+0xa7e>
 801b134:	ee18 2a90 	vmov	r2, s17
 801b138:	4b78      	ldr	r3, [pc, #480]	; (801b31c <_strtod_l+0xbdc>)
 801b13a:	429a      	cmp	r2, r3
 801b13c:	d104      	bne.n	801b148 <_strtod_l+0xa08>
 801b13e:	ee18 3a10 	vmov	r3, s16
 801b142:	3301      	adds	r3, #1
 801b144:	f43f ad40 	beq.w	801abc8 <_strtod_l+0x488>
 801b148:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801b31c <_strtod_l+0xbdc>
 801b14c:	f04f 38ff 	mov.w	r8, #4294967295
 801b150:	9916      	ldr	r1, [sp, #88]	; 0x58
 801b152:	4620      	mov	r0, r4
 801b154:	f7fe fe6a 	bl	8019e2c <_Bfree>
 801b158:	9905      	ldr	r1, [sp, #20]
 801b15a:	4620      	mov	r0, r4
 801b15c:	f7fe fe66 	bl	8019e2c <_Bfree>
 801b160:	4659      	mov	r1, fp
 801b162:	4620      	mov	r0, r4
 801b164:	f7fe fe62 	bl	8019e2c <_Bfree>
 801b168:	4629      	mov	r1, r5
 801b16a:	4620      	mov	r0, r4
 801b16c:	f7fe fe5e 	bl	8019e2c <_Bfree>
 801b170:	e609      	b.n	801ad86 <_strtod_l+0x646>
 801b172:	f1b8 0f01 	cmp.w	r8, #1
 801b176:	d103      	bne.n	801b180 <_strtod_l+0xa40>
 801b178:	f1b9 0f00 	cmp.w	r9, #0
 801b17c:	f43f ad95 	beq.w	801acaa <_strtod_l+0x56a>
 801b180:	ed9f 7b55 	vldr	d7, [pc, #340]	; 801b2d8 <_strtod_l+0xb98>
 801b184:	4f60      	ldr	r7, [pc, #384]	; (801b308 <_strtod_l+0xbc8>)
 801b186:	ed8d 7b06 	vstr	d7, [sp, #24]
 801b18a:	2600      	movs	r6, #0
 801b18c:	e7ae      	b.n	801b0ec <_strtod_l+0x9ac>
 801b18e:	4f5f      	ldr	r7, [pc, #380]	; (801b30c <_strtod_l+0xbcc>)
 801b190:	2600      	movs	r6, #0
 801b192:	e7a7      	b.n	801b0e4 <_strtod_l+0x9a4>
 801b194:	4b5d      	ldr	r3, [pc, #372]	; (801b30c <_strtod_l+0xbcc>)
 801b196:	4630      	mov	r0, r6
 801b198:	4639      	mov	r1, r7
 801b19a:	2200      	movs	r2, #0
 801b19c:	f7e5 fa5c 	bl	8000658 <__aeabi_dmul>
 801b1a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b1a2:	4606      	mov	r6, r0
 801b1a4:	460f      	mov	r7, r1
 801b1a6:	2b00      	cmp	r3, #0
 801b1a8:	d09c      	beq.n	801b0e4 <_strtod_l+0x9a4>
 801b1aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801b1ae:	e79d      	b.n	801b0ec <_strtod_l+0x9ac>
 801b1b0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 801b2e0 <_strtod_l+0xba0>
 801b1b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 801b1b8:	ec57 6b17 	vmov	r6, r7, d7
 801b1bc:	e796      	b.n	801b0ec <_strtod_l+0x9ac>
 801b1be:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801b1c2:	9b04      	ldr	r3, [sp, #16]
 801b1c4:	46ca      	mov	sl, r9
 801b1c6:	2b00      	cmp	r3, #0
 801b1c8:	d1c2      	bne.n	801b150 <_strtod_l+0xa10>
 801b1ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801b1ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b1d0:	0d1b      	lsrs	r3, r3, #20
 801b1d2:	051b      	lsls	r3, r3, #20
 801b1d4:	429a      	cmp	r2, r3
 801b1d6:	d1bb      	bne.n	801b150 <_strtod_l+0xa10>
 801b1d8:	4630      	mov	r0, r6
 801b1da:	4639      	mov	r1, r7
 801b1dc:	f7e5 fd9c 	bl	8000d18 <__aeabi_d2lz>
 801b1e0:	f7e5 fa0c 	bl	80005fc <__aeabi_l2d>
 801b1e4:	4602      	mov	r2, r0
 801b1e6:	460b      	mov	r3, r1
 801b1e8:	4630      	mov	r0, r6
 801b1ea:	4639      	mov	r1, r7
 801b1ec:	f7e5 f87c 	bl	80002e8 <__aeabi_dsub>
 801b1f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b1f2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b1f6:	ea43 0308 	orr.w	r3, r3, r8
 801b1fa:	4313      	orrs	r3, r2
 801b1fc:	4606      	mov	r6, r0
 801b1fe:	460f      	mov	r7, r1
 801b200:	d054      	beq.n	801b2ac <_strtod_l+0xb6c>
 801b202:	a339      	add	r3, pc, #228	; (adr r3, 801b2e8 <_strtod_l+0xba8>)
 801b204:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b208:	f7e5 fc98 	bl	8000b3c <__aeabi_dcmplt>
 801b20c:	2800      	cmp	r0, #0
 801b20e:	f47f ace5 	bne.w	801abdc <_strtod_l+0x49c>
 801b212:	a337      	add	r3, pc, #220	; (adr r3, 801b2f0 <_strtod_l+0xbb0>)
 801b214:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b218:	4630      	mov	r0, r6
 801b21a:	4639      	mov	r1, r7
 801b21c:	f7e5 fcac 	bl	8000b78 <__aeabi_dcmpgt>
 801b220:	2800      	cmp	r0, #0
 801b222:	d095      	beq.n	801b150 <_strtod_l+0xa10>
 801b224:	e4da      	b.n	801abdc <_strtod_l+0x49c>
 801b226:	9b04      	ldr	r3, [sp, #16]
 801b228:	b333      	cbz	r3, 801b278 <_strtod_l+0xb38>
 801b22a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b22c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801b230:	d822      	bhi.n	801b278 <_strtod_l+0xb38>
 801b232:	a331      	add	r3, pc, #196	; (adr r3, 801b2f8 <_strtod_l+0xbb8>)
 801b234:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b238:	4630      	mov	r0, r6
 801b23a:	4639      	mov	r1, r7
 801b23c:	f7e5 fc88 	bl	8000b50 <__aeabi_dcmple>
 801b240:	b1a0      	cbz	r0, 801b26c <_strtod_l+0xb2c>
 801b242:	4639      	mov	r1, r7
 801b244:	4630      	mov	r0, r6
 801b246:	f7e5 fcdf 	bl	8000c08 <__aeabi_d2uiz>
 801b24a:	2801      	cmp	r0, #1
 801b24c:	bf38      	it	cc
 801b24e:	2001      	movcc	r0, #1
 801b250:	f7e5 f988 	bl	8000564 <__aeabi_ui2d>
 801b254:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b256:	4606      	mov	r6, r0
 801b258:	460f      	mov	r7, r1
 801b25a:	bb23      	cbnz	r3, 801b2a6 <_strtod_l+0xb66>
 801b25c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b260:	9010      	str	r0, [sp, #64]	; 0x40
 801b262:	9311      	str	r3, [sp, #68]	; 0x44
 801b264:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801b268:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801b26c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b26e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b270:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801b274:	1a9b      	subs	r3, r3, r2
 801b276:	930f      	str	r3, [sp, #60]	; 0x3c
 801b278:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801b27c:	eeb0 0a48 	vmov.f32	s0, s16
 801b280:	eef0 0a68 	vmov.f32	s1, s17
 801b284:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801b288:	f7ff f8fc 	bl	801a484 <__ulp>
 801b28c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801b290:	ec53 2b10 	vmov	r2, r3, d0
 801b294:	f7e5 f9e0 	bl	8000658 <__aeabi_dmul>
 801b298:	ec53 2b18 	vmov	r2, r3, d8
 801b29c:	f7e5 f826 	bl	80002ec <__adddf3>
 801b2a0:	4680      	mov	r8, r0
 801b2a2:	4689      	mov	r9, r1
 801b2a4:	e78d      	b.n	801b1c2 <_strtod_l+0xa82>
 801b2a6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801b2aa:	e7db      	b.n	801b264 <_strtod_l+0xb24>
 801b2ac:	a314      	add	r3, pc, #80	; (adr r3, 801b300 <_strtod_l+0xbc0>)
 801b2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2b2:	f7e5 fc43 	bl	8000b3c <__aeabi_dcmplt>
 801b2b6:	e7b3      	b.n	801b220 <_strtod_l+0xae0>
 801b2b8:	2300      	movs	r3, #0
 801b2ba:	930a      	str	r3, [sp, #40]	; 0x28
 801b2bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b2be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b2c0:	6013      	str	r3, [r2, #0]
 801b2c2:	f7ff ba7c 	b.w	801a7be <_strtod_l+0x7e>
 801b2c6:	2a65      	cmp	r2, #101	; 0x65
 801b2c8:	f43f ab75 	beq.w	801a9b6 <_strtod_l+0x276>
 801b2cc:	2a45      	cmp	r2, #69	; 0x45
 801b2ce:	f43f ab72 	beq.w	801a9b6 <_strtod_l+0x276>
 801b2d2:	2301      	movs	r3, #1
 801b2d4:	f7ff bbaa 	b.w	801aa2c <_strtod_l+0x2ec>
 801b2d8:	00000000 	.word	0x00000000
 801b2dc:	bff00000 	.word	0xbff00000
 801b2e0:	00000000 	.word	0x00000000
 801b2e4:	3ff00000 	.word	0x3ff00000
 801b2e8:	94a03595 	.word	0x94a03595
 801b2ec:	3fdfffff 	.word	0x3fdfffff
 801b2f0:	35afe535 	.word	0x35afe535
 801b2f4:	3fe00000 	.word	0x3fe00000
 801b2f8:	ffc00000 	.word	0xffc00000
 801b2fc:	41dfffff 	.word	0x41dfffff
 801b300:	94a03595 	.word	0x94a03595
 801b304:	3fcfffff 	.word	0x3fcfffff
 801b308:	3ff00000 	.word	0x3ff00000
 801b30c:	3fe00000 	.word	0x3fe00000
 801b310:	7ff00000 	.word	0x7ff00000
 801b314:	7fe00000 	.word	0x7fe00000
 801b318:	7c9fffff 	.word	0x7c9fffff
 801b31c:	7fefffff 	.word	0x7fefffff

0801b320 <_strtod_r>:
 801b320:	4b01      	ldr	r3, [pc, #4]	; (801b328 <_strtod_r+0x8>)
 801b322:	f7ff ba0d 	b.w	801a740 <_strtod_l>
 801b326:	bf00      	nop
 801b328:	2000019c 	.word	0x2000019c

0801b32c <_strtol_l.constprop.0>:
 801b32c:	2b01      	cmp	r3, #1
 801b32e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b332:	d001      	beq.n	801b338 <_strtol_l.constprop.0+0xc>
 801b334:	2b24      	cmp	r3, #36	; 0x24
 801b336:	d906      	bls.n	801b346 <_strtol_l.constprop.0+0x1a>
 801b338:	f7fd fe32 	bl	8018fa0 <__errno>
 801b33c:	2316      	movs	r3, #22
 801b33e:	6003      	str	r3, [r0, #0]
 801b340:	2000      	movs	r0, #0
 801b342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b346:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801b42c <_strtol_l.constprop.0+0x100>
 801b34a:	460d      	mov	r5, r1
 801b34c:	462e      	mov	r6, r5
 801b34e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b352:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801b356:	f017 0708 	ands.w	r7, r7, #8
 801b35a:	d1f7      	bne.n	801b34c <_strtol_l.constprop.0+0x20>
 801b35c:	2c2d      	cmp	r4, #45	; 0x2d
 801b35e:	d132      	bne.n	801b3c6 <_strtol_l.constprop.0+0x9a>
 801b360:	782c      	ldrb	r4, [r5, #0]
 801b362:	2701      	movs	r7, #1
 801b364:	1cb5      	adds	r5, r6, #2
 801b366:	2b00      	cmp	r3, #0
 801b368:	d05b      	beq.n	801b422 <_strtol_l.constprop.0+0xf6>
 801b36a:	2b10      	cmp	r3, #16
 801b36c:	d109      	bne.n	801b382 <_strtol_l.constprop.0+0x56>
 801b36e:	2c30      	cmp	r4, #48	; 0x30
 801b370:	d107      	bne.n	801b382 <_strtol_l.constprop.0+0x56>
 801b372:	782c      	ldrb	r4, [r5, #0]
 801b374:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801b378:	2c58      	cmp	r4, #88	; 0x58
 801b37a:	d14d      	bne.n	801b418 <_strtol_l.constprop.0+0xec>
 801b37c:	786c      	ldrb	r4, [r5, #1]
 801b37e:	2310      	movs	r3, #16
 801b380:	3502      	adds	r5, #2
 801b382:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801b386:	f108 38ff 	add.w	r8, r8, #4294967295
 801b38a:	f04f 0e00 	mov.w	lr, #0
 801b38e:	fbb8 f9f3 	udiv	r9, r8, r3
 801b392:	4676      	mov	r6, lr
 801b394:	fb03 8a19 	mls	sl, r3, r9, r8
 801b398:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801b39c:	f1bc 0f09 	cmp.w	ip, #9
 801b3a0:	d816      	bhi.n	801b3d0 <_strtol_l.constprop.0+0xa4>
 801b3a2:	4664      	mov	r4, ip
 801b3a4:	42a3      	cmp	r3, r4
 801b3a6:	dd24      	ble.n	801b3f2 <_strtol_l.constprop.0+0xc6>
 801b3a8:	f1be 3fff 	cmp.w	lr, #4294967295
 801b3ac:	d008      	beq.n	801b3c0 <_strtol_l.constprop.0+0x94>
 801b3ae:	45b1      	cmp	r9, r6
 801b3b0:	d31c      	bcc.n	801b3ec <_strtol_l.constprop.0+0xc0>
 801b3b2:	d101      	bne.n	801b3b8 <_strtol_l.constprop.0+0x8c>
 801b3b4:	45a2      	cmp	sl, r4
 801b3b6:	db19      	blt.n	801b3ec <_strtol_l.constprop.0+0xc0>
 801b3b8:	fb06 4603 	mla	r6, r6, r3, r4
 801b3bc:	f04f 0e01 	mov.w	lr, #1
 801b3c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b3c4:	e7e8      	b.n	801b398 <_strtol_l.constprop.0+0x6c>
 801b3c6:	2c2b      	cmp	r4, #43	; 0x2b
 801b3c8:	bf04      	itt	eq
 801b3ca:	782c      	ldrbeq	r4, [r5, #0]
 801b3cc:	1cb5      	addeq	r5, r6, #2
 801b3ce:	e7ca      	b.n	801b366 <_strtol_l.constprop.0+0x3a>
 801b3d0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801b3d4:	f1bc 0f19 	cmp.w	ip, #25
 801b3d8:	d801      	bhi.n	801b3de <_strtol_l.constprop.0+0xb2>
 801b3da:	3c37      	subs	r4, #55	; 0x37
 801b3dc:	e7e2      	b.n	801b3a4 <_strtol_l.constprop.0+0x78>
 801b3de:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801b3e2:	f1bc 0f19 	cmp.w	ip, #25
 801b3e6:	d804      	bhi.n	801b3f2 <_strtol_l.constprop.0+0xc6>
 801b3e8:	3c57      	subs	r4, #87	; 0x57
 801b3ea:	e7db      	b.n	801b3a4 <_strtol_l.constprop.0+0x78>
 801b3ec:	f04f 3eff 	mov.w	lr, #4294967295
 801b3f0:	e7e6      	b.n	801b3c0 <_strtol_l.constprop.0+0x94>
 801b3f2:	f1be 3fff 	cmp.w	lr, #4294967295
 801b3f6:	d105      	bne.n	801b404 <_strtol_l.constprop.0+0xd8>
 801b3f8:	2322      	movs	r3, #34	; 0x22
 801b3fa:	6003      	str	r3, [r0, #0]
 801b3fc:	4646      	mov	r6, r8
 801b3fe:	b942      	cbnz	r2, 801b412 <_strtol_l.constprop.0+0xe6>
 801b400:	4630      	mov	r0, r6
 801b402:	e79e      	b.n	801b342 <_strtol_l.constprop.0+0x16>
 801b404:	b107      	cbz	r7, 801b408 <_strtol_l.constprop.0+0xdc>
 801b406:	4276      	negs	r6, r6
 801b408:	2a00      	cmp	r2, #0
 801b40a:	d0f9      	beq.n	801b400 <_strtol_l.constprop.0+0xd4>
 801b40c:	f1be 0f00 	cmp.w	lr, #0
 801b410:	d000      	beq.n	801b414 <_strtol_l.constprop.0+0xe8>
 801b412:	1e69      	subs	r1, r5, #1
 801b414:	6011      	str	r1, [r2, #0]
 801b416:	e7f3      	b.n	801b400 <_strtol_l.constprop.0+0xd4>
 801b418:	2430      	movs	r4, #48	; 0x30
 801b41a:	2b00      	cmp	r3, #0
 801b41c:	d1b1      	bne.n	801b382 <_strtol_l.constprop.0+0x56>
 801b41e:	2308      	movs	r3, #8
 801b420:	e7af      	b.n	801b382 <_strtol_l.constprop.0+0x56>
 801b422:	2c30      	cmp	r4, #48	; 0x30
 801b424:	d0a5      	beq.n	801b372 <_strtol_l.constprop.0+0x46>
 801b426:	230a      	movs	r3, #10
 801b428:	e7ab      	b.n	801b382 <_strtol_l.constprop.0+0x56>
 801b42a:	bf00      	nop
 801b42c:	0801dd09 	.word	0x0801dd09

0801b430 <_strtol_r>:
 801b430:	f7ff bf7c 	b.w	801b32c <_strtol_l.constprop.0>

0801b434 <__ssputs_r>:
 801b434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b438:	688e      	ldr	r6, [r1, #8]
 801b43a:	461f      	mov	r7, r3
 801b43c:	42be      	cmp	r6, r7
 801b43e:	680b      	ldr	r3, [r1, #0]
 801b440:	4682      	mov	sl, r0
 801b442:	460c      	mov	r4, r1
 801b444:	4690      	mov	r8, r2
 801b446:	d82c      	bhi.n	801b4a2 <__ssputs_r+0x6e>
 801b448:	898a      	ldrh	r2, [r1, #12]
 801b44a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b44e:	d026      	beq.n	801b49e <__ssputs_r+0x6a>
 801b450:	6965      	ldr	r5, [r4, #20]
 801b452:	6909      	ldr	r1, [r1, #16]
 801b454:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b458:	eba3 0901 	sub.w	r9, r3, r1
 801b45c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b460:	1c7b      	adds	r3, r7, #1
 801b462:	444b      	add	r3, r9
 801b464:	106d      	asrs	r5, r5, #1
 801b466:	429d      	cmp	r5, r3
 801b468:	bf38      	it	cc
 801b46a:	461d      	movcc	r5, r3
 801b46c:	0553      	lsls	r3, r2, #21
 801b46e:	d527      	bpl.n	801b4c0 <__ssputs_r+0x8c>
 801b470:	4629      	mov	r1, r5
 801b472:	f7fc fb87 	bl	8017b84 <_malloc_r>
 801b476:	4606      	mov	r6, r0
 801b478:	b360      	cbz	r0, 801b4d4 <__ssputs_r+0xa0>
 801b47a:	6921      	ldr	r1, [r4, #16]
 801b47c:	464a      	mov	r2, r9
 801b47e:	f7fd fdbb 	bl	8018ff8 <memcpy>
 801b482:	89a3      	ldrh	r3, [r4, #12]
 801b484:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b48c:	81a3      	strh	r3, [r4, #12]
 801b48e:	6126      	str	r6, [r4, #16]
 801b490:	6165      	str	r5, [r4, #20]
 801b492:	444e      	add	r6, r9
 801b494:	eba5 0509 	sub.w	r5, r5, r9
 801b498:	6026      	str	r6, [r4, #0]
 801b49a:	60a5      	str	r5, [r4, #8]
 801b49c:	463e      	mov	r6, r7
 801b49e:	42be      	cmp	r6, r7
 801b4a0:	d900      	bls.n	801b4a4 <__ssputs_r+0x70>
 801b4a2:	463e      	mov	r6, r7
 801b4a4:	6820      	ldr	r0, [r4, #0]
 801b4a6:	4632      	mov	r2, r6
 801b4a8:	4641      	mov	r1, r8
 801b4aa:	f000 ff02 	bl	801c2b2 <memmove>
 801b4ae:	68a3      	ldr	r3, [r4, #8]
 801b4b0:	1b9b      	subs	r3, r3, r6
 801b4b2:	60a3      	str	r3, [r4, #8]
 801b4b4:	6823      	ldr	r3, [r4, #0]
 801b4b6:	4433      	add	r3, r6
 801b4b8:	6023      	str	r3, [r4, #0]
 801b4ba:	2000      	movs	r0, #0
 801b4bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b4c0:	462a      	mov	r2, r5
 801b4c2:	f001 fad4 	bl	801ca6e <_realloc_r>
 801b4c6:	4606      	mov	r6, r0
 801b4c8:	2800      	cmp	r0, #0
 801b4ca:	d1e0      	bne.n	801b48e <__ssputs_r+0x5a>
 801b4cc:	6921      	ldr	r1, [r4, #16]
 801b4ce:	4650      	mov	r0, sl
 801b4d0:	f7fe fc20 	bl	8019d14 <_free_r>
 801b4d4:	230c      	movs	r3, #12
 801b4d6:	f8ca 3000 	str.w	r3, [sl]
 801b4da:	89a3      	ldrh	r3, [r4, #12]
 801b4dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b4e0:	81a3      	strh	r3, [r4, #12]
 801b4e2:	f04f 30ff 	mov.w	r0, #4294967295
 801b4e6:	e7e9      	b.n	801b4bc <__ssputs_r+0x88>

0801b4e8 <_svfiprintf_r>:
 801b4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4ec:	4698      	mov	r8, r3
 801b4ee:	898b      	ldrh	r3, [r1, #12]
 801b4f0:	061b      	lsls	r3, r3, #24
 801b4f2:	b09d      	sub	sp, #116	; 0x74
 801b4f4:	4607      	mov	r7, r0
 801b4f6:	460d      	mov	r5, r1
 801b4f8:	4614      	mov	r4, r2
 801b4fa:	d50e      	bpl.n	801b51a <_svfiprintf_r+0x32>
 801b4fc:	690b      	ldr	r3, [r1, #16]
 801b4fe:	b963      	cbnz	r3, 801b51a <_svfiprintf_r+0x32>
 801b500:	2140      	movs	r1, #64	; 0x40
 801b502:	f7fc fb3f 	bl	8017b84 <_malloc_r>
 801b506:	6028      	str	r0, [r5, #0]
 801b508:	6128      	str	r0, [r5, #16]
 801b50a:	b920      	cbnz	r0, 801b516 <_svfiprintf_r+0x2e>
 801b50c:	230c      	movs	r3, #12
 801b50e:	603b      	str	r3, [r7, #0]
 801b510:	f04f 30ff 	mov.w	r0, #4294967295
 801b514:	e0d0      	b.n	801b6b8 <_svfiprintf_r+0x1d0>
 801b516:	2340      	movs	r3, #64	; 0x40
 801b518:	616b      	str	r3, [r5, #20]
 801b51a:	2300      	movs	r3, #0
 801b51c:	9309      	str	r3, [sp, #36]	; 0x24
 801b51e:	2320      	movs	r3, #32
 801b520:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b524:	f8cd 800c 	str.w	r8, [sp, #12]
 801b528:	2330      	movs	r3, #48	; 0x30
 801b52a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801b6d0 <_svfiprintf_r+0x1e8>
 801b52e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b532:	f04f 0901 	mov.w	r9, #1
 801b536:	4623      	mov	r3, r4
 801b538:	469a      	mov	sl, r3
 801b53a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b53e:	b10a      	cbz	r2, 801b544 <_svfiprintf_r+0x5c>
 801b540:	2a25      	cmp	r2, #37	; 0x25
 801b542:	d1f9      	bne.n	801b538 <_svfiprintf_r+0x50>
 801b544:	ebba 0b04 	subs.w	fp, sl, r4
 801b548:	d00b      	beq.n	801b562 <_svfiprintf_r+0x7a>
 801b54a:	465b      	mov	r3, fp
 801b54c:	4622      	mov	r2, r4
 801b54e:	4629      	mov	r1, r5
 801b550:	4638      	mov	r0, r7
 801b552:	f7ff ff6f 	bl	801b434 <__ssputs_r>
 801b556:	3001      	adds	r0, #1
 801b558:	f000 80a9 	beq.w	801b6ae <_svfiprintf_r+0x1c6>
 801b55c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b55e:	445a      	add	r2, fp
 801b560:	9209      	str	r2, [sp, #36]	; 0x24
 801b562:	f89a 3000 	ldrb.w	r3, [sl]
 801b566:	2b00      	cmp	r3, #0
 801b568:	f000 80a1 	beq.w	801b6ae <_svfiprintf_r+0x1c6>
 801b56c:	2300      	movs	r3, #0
 801b56e:	f04f 32ff 	mov.w	r2, #4294967295
 801b572:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b576:	f10a 0a01 	add.w	sl, sl, #1
 801b57a:	9304      	str	r3, [sp, #16]
 801b57c:	9307      	str	r3, [sp, #28]
 801b57e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b582:	931a      	str	r3, [sp, #104]	; 0x68
 801b584:	4654      	mov	r4, sl
 801b586:	2205      	movs	r2, #5
 801b588:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b58c:	4850      	ldr	r0, [pc, #320]	; (801b6d0 <_svfiprintf_r+0x1e8>)
 801b58e:	f7e4 fe4f 	bl	8000230 <memchr>
 801b592:	9a04      	ldr	r2, [sp, #16]
 801b594:	b9d8      	cbnz	r0, 801b5ce <_svfiprintf_r+0xe6>
 801b596:	06d0      	lsls	r0, r2, #27
 801b598:	bf44      	itt	mi
 801b59a:	2320      	movmi	r3, #32
 801b59c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b5a0:	0711      	lsls	r1, r2, #28
 801b5a2:	bf44      	itt	mi
 801b5a4:	232b      	movmi	r3, #43	; 0x2b
 801b5a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b5aa:	f89a 3000 	ldrb.w	r3, [sl]
 801b5ae:	2b2a      	cmp	r3, #42	; 0x2a
 801b5b0:	d015      	beq.n	801b5de <_svfiprintf_r+0xf6>
 801b5b2:	9a07      	ldr	r2, [sp, #28]
 801b5b4:	4654      	mov	r4, sl
 801b5b6:	2000      	movs	r0, #0
 801b5b8:	f04f 0c0a 	mov.w	ip, #10
 801b5bc:	4621      	mov	r1, r4
 801b5be:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b5c2:	3b30      	subs	r3, #48	; 0x30
 801b5c4:	2b09      	cmp	r3, #9
 801b5c6:	d94d      	bls.n	801b664 <_svfiprintf_r+0x17c>
 801b5c8:	b1b0      	cbz	r0, 801b5f8 <_svfiprintf_r+0x110>
 801b5ca:	9207      	str	r2, [sp, #28]
 801b5cc:	e014      	b.n	801b5f8 <_svfiprintf_r+0x110>
 801b5ce:	eba0 0308 	sub.w	r3, r0, r8
 801b5d2:	fa09 f303 	lsl.w	r3, r9, r3
 801b5d6:	4313      	orrs	r3, r2
 801b5d8:	9304      	str	r3, [sp, #16]
 801b5da:	46a2      	mov	sl, r4
 801b5dc:	e7d2      	b.n	801b584 <_svfiprintf_r+0x9c>
 801b5de:	9b03      	ldr	r3, [sp, #12]
 801b5e0:	1d19      	adds	r1, r3, #4
 801b5e2:	681b      	ldr	r3, [r3, #0]
 801b5e4:	9103      	str	r1, [sp, #12]
 801b5e6:	2b00      	cmp	r3, #0
 801b5e8:	bfbb      	ittet	lt
 801b5ea:	425b      	neglt	r3, r3
 801b5ec:	f042 0202 	orrlt.w	r2, r2, #2
 801b5f0:	9307      	strge	r3, [sp, #28]
 801b5f2:	9307      	strlt	r3, [sp, #28]
 801b5f4:	bfb8      	it	lt
 801b5f6:	9204      	strlt	r2, [sp, #16]
 801b5f8:	7823      	ldrb	r3, [r4, #0]
 801b5fa:	2b2e      	cmp	r3, #46	; 0x2e
 801b5fc:	d10c      	bne.n	801b618 <_svfiprintf_r+0x130>
 801b5fe:	7863      	ldrb	r3, [r4, #1]
 801b600:	2b2a      	cmp	r3, #42	; 0x2a
 801b602:	d134      	bne.n	801b66e <_svfiprintf_r+0x186>
 801b604:	9b03      	ldr	r3, [sp, #12]
 801b606:	1d1a      	adds	r2, r3, #4
 801b608:	681b      	ldr	r3, [r3, #0]
 801b60a:	9203      	str	r2, [sp, #12]
 801b60c:	2b00      	cmp	r3, #0
 801b60e:	bfb8      	it	lt
 801b610:	f04f 33ff 	movlt.w	r3, #4294967295
 801b614:	3402      	adds	r4, #2
 801b616:	9305      	str	r3, [sp, #20]
 801b618:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801b6e0 <_svfiprintf_r+0x1f8>
 801b61c:	7821      	ldrb	r1, [r4, #0]
 801b61e:	2203      	movs	r2, #3
 801b620:	4650      	mov	r0, sl
 801b622:	f7e4 fe05 	bl	8000230 <memchr>
 801b626:	b138      	cbz	r0, 801b638 <_svfiprintf_r+0x150>
 801b628:	9b04      	ldr	r3, [sp, #16]
 801b62a:	eba0 000a 	sub.w	r0, r0, sl
 801b62e:	2240      	movs	r2, #64	; 0x40
 801b630:	4082      	lsls	r2, r0
 801b632:	4313      	orrs	r3, r2
 801b634:	3401      	adds	r4, #1
 801b636:	9304      	str	r3, [sp, #16]
 801b638:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b63c:	4825      	ldr	r0, [pc, #148]	; (801b6d4 <_svfiprintf_r+0x1ec>)
 801b63e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b642:	2206      	movs	r2, #6
 801b644:	f7e4 fdf4 	bl	8000230 <memchr>
 801b648:	2800      	cmp	r0, #0
 801b64a:	d038      	beq.n	801b6be <_svfiprintf_r+0x1d6>
 801b64c:	4b22      	ldr	r3, [pc, #136]	; (801b6d8 <_svfiprintf_r+0x1f0>)
 801b64e:	bb1b      	cbnz	r3, 801b698 <_svfiprintf_r+0x1b0>
 801b650:	9b03      	ldr	r3, [sp, #12]
 801b652:	3307      	adds	r3, #7
 801b654:	f023 0307 	bic.w	r3, r3, #7
 801b658:	3308      	adds	r3, #8
 801b65a:	9303      	str	r3, [sp, #12]
 801b65c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b65e:	4433      	add	r3, r6
 801b660:	9309      	str	r3, [sp, #36]	; 0x24
 801b662:	e768      	b.n	801b536 <_svfiprintf_r+0x4e>
 801b664:	fb0c 3202 	mla	r2, ip, r2, r3
 801b668:	460c      	mov	r4, r1
 801b66a:	2001      	movs	r0, #1
 801b66c:	e7a6      	b.n	801b5bc <_svfiprintf_r+0xd4>
 801b66e:	2300      	movs	r3, #0
 801b670:	3401      	adds	r4, #1
 801b672:	9305      	str	r3, [sp, #20]
 801b674:	4619      	mov	r1, r3
 801b676:	f04f 0c0a 	mov.w	ip, #10
 801b67a:	4620      	mov	r0, r4
 801b67c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b680:	3a30      	subs	r2, #48	; 0x30
 801b682:	2a09      	cmp	r2, #9
 801b684:	d903      	bls.n	801b68e <_svfiprintf_r+0x1a6>
 801b686:	2b00      	cmp	r3, #0
 801b688:	d0c6      	beq.n	801b618 <_svfiprintf_r+0x130>
 801b68a:	9105      	str	r1, [sp, #20]
 801b68c:	e7c4      	b.n	801b618 <_svfiprintf_r+0x130>
 801b68e:	fb0c 2101 	mla	r1, ip, r1, r2
 801b692:	4604      	mov	r4, r0
 801b694:	2301      	movs	r3, #1
 801b696:	e7f0      	b.n	801b67a <_svfiprintf_r+0x192>
 801b698:	ab03      	add	r3, sp, #12
 801b69a:	9300      	str	r3, [sp, #0]
 801b69c:	462a      	mov	r2, r5
 801b69e:	4b0f      	ldr	r3, [pc, #60]	; (801b6dc <_svfiprintf_r+0x1f4>)
 801b6a0:	a904      	add	r1, sp, #16
 801b6a2:	4638      	mov	r0, r7
 801b6a4:	f7fc fb9a 	bl	8017ddc <_printf_float>
 801b6a8:	1c42      	adds	r2, r0, #1
 801b6aa:	4606      	mov	r6, r0
 801b6ac:	d1d6      	bne.n	801b65c <_svfiprintf_r+0x174>
 801b6ae:	89ab      	ldrh	r3, [r5, #12]
 801b6b0:	065b      	lsls	r3, r3, #25
 801b6b2:	f53f af2d 	bmi.w	801b510 <_svfiprintf_r+0x28>
 801b6b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b6b8:	b01d      	add	sp, #116	; 0x74
 801b6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6be:	ab03      	add	r3, sp, #12
 801b6c0:	9300      	str	r3, [sp, #0]
 801b6c2:	462a      	mov	r2, r5
 801b6c4:	4b05      	ldr	r3, [pc, #20]	; (801b6dc <_svfiprintf_r+0x1f4>)
 801b6c6:	a904      	add	r1, sp, #16
 801b6c8:	4638      	mov	r0, r7
 801b6ca:	f7fc fe2b 	bl	8018324 <_printf_i>
 801b6ce:	e7eb      	b.n	801b6a8 <_svfiprintf_r+0x1c0>
 801b6d0:	0801de09 	.word	0x0801de09
 801b6d4:	0801de13 	.word	0x0801de13
 801b6d8:	08017ddd 	.word	0x08017ddd
 801b6dc:	0801b435 	.word	0x0801b435
 801b6e0:	0801de0f 	.word	0x0801de0f

0801b6e4 <_sungetc_r>:
 801b6e4:	b538      	push	{r3, r4, r5, lr}
 801b6e6:	1c4b      	adds	r3, r1, #1
 801b6e8:	4614      	mov	r4, r2
 801b6ea:	d103      	bne.n	801b6f4 <_sungetc_r+0x10>
 801b6ec:	f04f 35ff 	mov.w	r5, #4294967295
 801b6f0:	4628      	mov	r0, r5
 801b6f2:	bd38      	pop	{r3, r4, r5, pc}
 801b6f4:	8993      	ldrh	r3, [r2, #12]
 801b6f6:	f023 0320 	bic.w	r3, r3, #32
 801b6fa:	8193      	strh	r3, [r2, #12]
 801b6fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b6fe:	6852      	ldr	r2, [r2, #4]
 801b700:	b2cd      	uxtb	r5, r1
 801b702:	b18b      	cbz	r3, 801b728 <_sungetc_r+0x44>
 801b704:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b706:	4293      	cmp	r3, r2
 801b708:	dd08      	ble.n	801b71c <_sungetc_r+0x38>
 801b70a:	6823      	ldr	r3, [r4, #0]
 801b70c:	1e5a      	subs	r2, r3, #1
 801b70e:	6022      	str	r2, [r4, #0]
 801b710:	f803 5c01 	strb.w	r5, [r3, #-1]
 801b714:	6863      	ldr	r3, [r4, #4]
 801b716:	3301      	adds	r3, #1
 801b718:	6063      	str	r3, [r4, #4]
 801b71a:	e7e9      	b.n	801b6f0 <_sungetc_r+0xc>
 801b71c:	4621      	mov	r1, r4
 801b71e:	f000 fd8e 	bl	801c23e <__submore>
 801b722:	2800      	cmp	r0, #0
 801b724:	d0f1      	beq.n	801b70a <_sungetc_r+0x26>
 801b726:	e7e1      	b.n	801b6ec <_sungetc_r+0x8>
 801b728:	6921      	ldr	r1, [r4, #16]
 801b72a:	6823      	ldr	r3, [r4, #0]
 801b72c:	b151      	cbz	r1, 801b744 <_sungetc_r+0x60>
 801b72e:	4299      	cmp	r1, r3
 801b730:	d208      	bcs.n	801b744 <_sungetc_r+0x60>
 801b732:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801b736:	42a9      	cmp	r1, r5
 801b738:	d104      	bne.n	801b744 <_sungetc_r+0x60>
 801b73a:	3b01      	subs	r3, #1
 801b73c:	3201      	adds	r2, #1
 801b73e:	6023      	str	r3, [r4, #0]
 801b740:	6062      	str	r2, [r4, #4]
 801b742:	e7d5      	b.n	801b6f0 <_sungetc_r+0xc>
 801b744:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801b748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b74c:	6363      	str	r3, [r4, #52]	; 0x34
 801b74e:	2303      	movs	r3, #3
 801b750:	63a3      	str	r3, [r4, #56]	; 0x38
 801b752:	4623      	mov	r3, r4
 801b754:	f803 5f46 	strb.w	r5, [r3, #70]!
 801b758:	6023      	str	r3, [r4, #0]
 801b75a:	2301      	movs	r3, #1
 801b75c:	e7dc      	b.n	801b718 <_sungetc_r+0x34>

0801b75e <__ssrefill_r>:
 801b75e:	b510      	push	{r4, lr}
 801b760:	460c      	mov	r4, r1
 801b762:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801b764:	b169      	cbz	r1, 801b782 <__ssrefill_r+0x24>
 801b766:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b76a:	4299      	cmp	r1, r3
 801b76c:	d001      	beq.n	801b772 <__ssrefill_r+0x14>
 801b76e:	f7fe fad1 	bl	8019d14 <_free_r>
 801b772:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b774:	6063      	str	r3, [r4, #4]
 801b776:	2000      	movs	r0, #0
 801b778:	6360      	str	r0, [r4, #52]	; 0x34
 801b77a:	b113      	cbz	r3, 801b782 <__ssrefill_r+0x24>
 801b77c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801b77e:	6023      	str	r3, [r4, #0]
 801b780:	bd10      	pop	{r4, pc}
 801b782:	6923      	ldr	r3, [r4, #16]
 801b784:	6023      	str	r3, [r4, #0]
 801b786:	2300      	movs	r3, #0
 801b788:	6063      	str	r3, [r4, #4]
 801b78a:	89a3      	ldrh	r3, [r4, #12]
 801b78c:	f043 0320 	orr.w	r3, r3, #32
 801b790:	81a3      	strh	r3, [r4, #12]
 801b792:	f04f 30ff 	mov.w	r0, #4294967295
 801b796:	e7f3      	b.n	801b780 <__ssrefill_r+0x22>

0801b798 <__ssvfiscanf_r>:
 801b798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b79c:	460c      	mov	r4, r1
 801b79e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801b7a2:	2100      	movs	r1, #0
 801b7a4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801b7a8:	49a6      	ldr	r1, [pc, #664]	; (801ba44 <__ssvfiscanf_r+0x2ac>)
 801b7aa:	91a0      	str	r1, [sp, #640]	; 0x280
 801b7ac:	f10d 0804 	add.w	r8, sp, #4
 801b7b0:	49a5      	ldr	r1, [pc, #660]	; (801ba48 <__ssvfiscanf_r+0x2b0>)
 801b7b2:	4fa6      	ldr	r7, [pc, #664]	; (801ba4c <__ssvfiscanf_r+0x2b4>)
 801b7b4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 801ba50 <__ssvfiscanf_r+0x2b8>
 801b7b8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801b7bc:	4606      	mov	r6, r0
 801b7be:	91a1      	str	r1, [sp, #644]	; 0x284
 801b7c0:	9300      	str	r3, [sp, #0]
 801b7c2:	7813      	ldrb	r3, [r2, #0]
 801b7c4:	2b00      	cmp	r3, #0
 801b7c6:	f000 815a 	beq.w	801ba7e <__ssvfiscanf_r+0x2e6>
 801b7ca:	5cf9      	ldrb	r1, [r7, r3]
 801b7cc:	f011 0108 	ands.w	r1, r1, #8
 801b7d0:	f102 0501 	add.w	r5, r2, #1
 801b7d4:	d019      	beq.n	801b80a <__ssvfiscanf_r+0x72>
 801b7d6:	6863      	ldr	r3, [r4, #4]
 801b7d8:	2b00      	cmp	r3, #0
 801b7da:	dd0f      	ble.n	801b7fc <__ssvfiscanf_r+0x64>
 801b7dc:	6823      	ldr	r3, [r4, #0]
 801b7de:	781a      	ldrb	r2, [r3, #0]
 801b7e0:	5cba      	ldrb	r2, [r7, r2]
 801b7e2:	0712      	lsls	r2, r2, #28
 801b7e4:	d401      	bmi.n	801b7ea <__ssvfiscanf_r+0x52>
 801b7e6:	462a      	mov	r2, r5
 801b7e8:	e7eb      	b.n	801b7c2 <__ssvfiscanf_r+0x2a>
 801b7ea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801b7ec:	3201      	adds	r2, #1
 801b7ee:	9245      	str	r2, [sp, #276]	; 0x114
 801b7f0:	6862      	ldr	r2, [r4, #4]
 801b7f2:	3301      	adds	r3, #1
 801b7f4:	3a01      	subs	r2, #1
 801b7f6:	6062      	str	r2, [r4, #4]
 801b7f8:	6023      	str	r3, [r4, #0]
 801b7fa:	e7ec      	b.n	801b7d6 <__ssvfiscanf_r+0x3e>
 801b7fc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801b7fe:	4621      	mov	r1, r4
 801b800:	4630      	mov	r0, r6
 801b802:	4798      	blx	r3
 801b804:	2800      	cmp	r0, #0
 801b806:	d0e9      	beq.n	801b7dc <__ssvfiscanf_r+0x44>
 801b808:	e7ed      	b.n	801b7e6 <__ssvfiscanf_r+0x4e>
 801b80a:	2b25      	cmp	r3, #37	; 0x25
 801b80c:	d012      	beq.n	801b834 <__ssvfiscanf_r+0x9c>
 801b80e:	469a      	mov	sl, r3
 801b810:	6863      	ldr	r3, [r4, #4]
 801b812:	2b00      	cmp	r3, #0
 801b814:	f340 8091 	ble.w	801b93a <__ssvfiscanf_r+0x1a2>
 801b818:	6822      	ldr	r2, [r4, #0]
 801b81a:	7813      	ldrb	r3, [r2, #0]
 801b81c:	4553      	cmp	r3, sl
 801b81e:	f040 812e 	bne.w	801ba7e <__ssvfiscanf_r+0x2e6>
 801b822:	6863      	ldr	r3, [r4, #4]
 801b824:	3b01      	subs	r3, #1
 801b826:	6063      	str	r3, [r4, #4]
 801b828:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801b82a:	3201      	adds	r2, #1
 801b82c:	3301      	adds	r3, #1
 801b82e:	6022      	str	r2, [r4, #0]
 801b830:	9345      	str	r3, [sp, #276]	; 0x114
 801b832:	e7d8      	b.n	801b7e6 <__ssvfiscanf_r+0x4e>
 801b834:	9141      	str	r1, [sp, #260]	; 0x104
 801b836:	9143      	str	r1, [sp, #268]	; 0x10c
 801b838:	7853      	ldrb	r3, [r2, #1]
 801b83a:	2b2a      	cmp	r3, #42	; 0x2a
 801b83c:	bf02      	ittt	eq
 801b83e:	2310      	moveq	r3, #16
 801b840:	1c95      	addeq	r5, r2, #2
 801b842:	9341      	streq	r3, [sp, #260]	; 0x104
 801b844:	220a      	movs	r2, #10
 801b846:	46aa      	mov	sl, r5
 801b848:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801b84c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801b850:	2b09      	cmp	r3, #9
 801b852:	d91c      	bls.n	801b88e <__ssvfiscanf_r+0xf6>
 801b854:	487e      	ldr	r0, [pc, #504]	; (801ba50 <__ssvfiscanf_r+0x2b8>)
 801b856:	2203      	movs	r2, #3
 801b858:	f7e4 fcea 	bl	8000230 <memchr>
 801b85c:	b138      	cbz	r0, 801b86e <__ssvfiscanf_r+0xd6>
 801b85e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801b860:	eba0 0009 	sub.w	r0, r0, r9
 801b864:	2301      	movs	r3, #1
 801b866:	4083      	lsls	r3, r0
 801b868:	4313      	orrs	r3, r2
 801b86a:	9341      	str	r3, [sp, #260]	; 0x104
 801b86c:	4655      	mov	r5, sl
 801b86e:	f815 3b01 	ldrb.w	r3, [r5], #1
 801b872:	2b78      	cmp	r3, #120	; 0x78
 801b874:	d806      	bhi.n	801b884 <__ssvfiscanf_r+0xec>
 801b876:	2b57      	cmp	r3, #87	; 0x57
 801b878:	d810      	bhi.n	801b89c <__ssvfiscanf_r+0x104>
 801b87a:	2b25      	cmp	r3, #37	; 0x25
 801b87c:	d0c7      	beq.n	801b80e <__ssvfiscanf_r+0x76>
 801b87e:	d857      	bhi.n	801b930 <__ssvfiscanf_r+0x198>
 801b880:	2b00      	cmp	r3, #0
 801b882:	d065      	beq.n	801b950 <__ssvfiscanf_r+0x1b8>
 801b884:	2303      	movs	r3, #3
 801b886:	9347      	str	r3, [sp, #284]	; 0x11c
 801b888:	230a      	movs	r3, #10
 801b88a:	9342      	str	r3, [sp, #264]	; 0x108
 801b88c:	e076      	b.n	801b97c <__ssvfiscanf_r+0x1e4>
 801b88e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801b890:	fb02 1103 	mla	r1, r2, r3, r1
 801b894:	3930      	subs	r1, #48	; 0x30
 801b896:	9143      	str	r1, [sp, #268]	; 0x10c
 801b898:	4655      	mov	r5, sl
 801b89a:	e7d4      	b.n	801b846 <__ssvfiscanf_r+0xae>
 801b89c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801b8a0:	2a20      	cmp	r2, #32
 801b8a2:	d8ef      	bhi.n	801b884 <__ssvfiscanf_r+0xec>
 801b8a4:	a101      	add	r1, pc, #4	; (adr r1, 801b8ac <__ssvfiscanf_r+0x114>)
 801b8a6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801b8aa:	bf00      	nop
 801b8ac:	0801b95f 	.word	0x0801b95f
 801b8b0:	0801b885 	.word	0x0801b885
 801b8b4:	0801b885 	.word	0x0801b885
 801b8b8:	0801b9bd 	.word	0x0801b9bd
 801b8bc:	0801b885 	.word	0x0801b885
 801b8c0:	0801b885 	.word	0x0801b885
 801b8c4:	0801b885 	.word	0x0801b885
 801b8c8:	0801b885 	.word	0x0801b885
 801b8cc:	0801b885 	.word	0x0801b885
 801b8d0:	0801b885 	.word	0x0801b885
 801b8d4:	0801b885 	.word	0x0801b885
 801b8d8:	0801b9d3 	.word	0x0801b9d3
 801b8dc:	0801b9b9 	.word	0x0801b9b9
 801b8e0:	0801b937 	.word	0x0801b937
 801b8e4:	0801b937 	.word	0x0801b937
 801b8e8:	0801b937 	.word	0x0801b937
 801b8ec:	0801b885 	.word	0x0801b885
 801b8f0:	0801b975 	.word	0x0801b975
 801b8f4:	0801b885 	.word	0x0801b885
 801b8f8:	0801b885 	.word	0x0801b885
 801b8fc:	0801b885 	.word	0x0801b885
 801b900:	0801b885 	.word	0x0801b885
 801b904:	0801b9e3 	.word	0x0801b9e3
 801b908:	0801b9b1 	.word	0x0801b9b1
 801b90c:	0801b957 	.word	0x0801b957
 801b910:	0801b885 	.word	0x0801b885
 801b914:	0801b885 	.word	0x0801b885
 801b918:	0801b9df 	.word	0x0801b9df
 801b91c:	0801b885 	.word	0x0801b885
 801b920:	0801b9b9 	.word	0x0801b9b9
 801b924:	0801b885 	.word	0x0801b885
 801b928:	0801b885 	.word	0x0801b885
 801b92c:	0801b95f 	.word	0x0801b95f
 801b930:	3b45      	subs	r3, #69	; 0x45
 801b932:	2b02      	cmp	r3, #2
 801b934:	d8a6      	bhi.n	801b884 <__ssvfiscanf_r+0xec>
 801b936:	2305      	movs	r3, #5
 801b938:	e01f      	b.n	801b97a <__ssvfiscanf_r+0x1e2>
 801b93a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801b93c:	4621      	mov	r1, r4
 801b93e:	4630      	mov	r0, r6
 801b940:	4798      	blx	r3
 801b942:	2800      	cmp	r0, #0
 801b944:	f43f af68 	beq.w	801b818 <__ssvfiscanf_r+0x80>
 801b948:	9844      	ldr	r0, [sp, #272]	; 0x110
 801b94a:	2800      	cmp	r0, #0
 801b94c:	f040 808d 	bne.w	801ba6a <__ssvfiscanf_r+0x2d2>
 801b950:	f04f 30ff 	mov.w	r0, #4294967295
 801b954:	e08f      	b.n	801ba76 <__ssvfiscanf_r+0x2de>
 801b956:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801b958:	f042 0220 	orr.w	r2, r2, #32
 801b95c:	9241      	str	r2, [sp, #260]	; 0x104
 801b95e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801b960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801b964:	9241      	str	r2, [sp, #260]	; 0x104
 801b966:	2210      	movs	r2, #16
 801b968:	2b6f      	cmp	r3, #111	; 0x6f
 801b96a:	9242      	str	r2, [sp, #264]	; 0x108
 801b96c:	bf34      	ite	cc
 801b96e:	2303      	movcc	r3, #3
 801b970:	2304      	movcs	r3, #4
 801b972:	e002      	b.n	801b97a <__ssvfiscanf_r+0x1e2>
 801b974:	2300      	movs	r3, #0
 801b976:	9342      	str	r3, [sp, #264]	; 0x108
 801b978:	2303      	movs	r3, #3
 801b97a:	9347      	str	r3, [sp, #284]	; 0x11c
 801b97c:	6863      	ldr	r3, [r4, #4]
 801b97e:	2b00      	cmp	r3, #0
 801b980:	dd3d      	ble.n	801b9fe <__ssvfiscanf_r+0x266>
 801b982:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801b984:	0659      	lsls	r1, r3, #25
 801b986:	d404      	bmi.n	801b992 <__ssvfiscanf_r+0x1fa>
 801b988:	6823      	ldr	r3, [r4, #0]
 801b98a:	781a      	ldrb	r2, [r3, #0]
 801b98c:	5cba      	ldrb	r2, [r7, r2]
 801b98e:	0712      	lsls	r2, r2, #28
 801b990:	d43c      	bmi.n	801ba0c <__ssvfiscanf_r+0x274>
 801b992:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801b994:	2b02      	cmp	r3, #2
 801b996:	dc4b      	bgt.n	801ba30 <__ssvfiscanf_r+0x298>
 801b998:	466b      	mov	r3, sp
 801b99a:	4622      	mov	r2, r4
 801b99c:	a941      	add	r1, sp, #260	; 0x104
 801b99e:	4630      	mov	r0, r6
 801b9a0:	f000 f9b6 	bl	801bd10 <_scanf_chars>
 801b9a4:	2801      	cmp	r0, #1
 801b9a6:	d06a      	beq.n	801ba7e <__ssvfiscanf_r+0x2e6>
 801b9a8:	2802      	cmp	r0, #2
 801b9aa:	f47f af1c 	bne.w	801b7e6 <__ssvfiscanf_r+0x4e>
 801b9ae:	e7cb      	b.n	801b948 <__ssvfiscanf_r+0x1b0>
 801b9b0:	2308      	movs	r3, #8
 801b9b2:	9342      	str	r3, [sp, #264]	; 0x108
 801b9b4:	2304      	movs	r3, #4
 801b9b6:	e7e0      	b.n	801b97a <__ssvfiscanf_r+0x1e2>
 801b9b8:	220a      	movs	r2, #10
 801b9ba:	e7d5      	b.n	801b968 <__ssvfiscanf_r+0x1d0>
 801b9bc:	4629      	mov	r1, r5
 801b9be:	4640      	mov	r0, r8
 801b9c0:	f000 fc04 	bl	801c1cc <__sccl>
 801b9c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801b9c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b9ca:	9341      	str	r3, [sp, #260]	; 0x104
 801b9cc:	4605      	mov	r5, r0
 801b9ce:	2301      	movs	r3, #1
 801b9d0:	e7d3      	b.n	801b97a <__ssvfiscanf_r+0x1e2>
 801b9d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801b9d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b9d8:	9341      	str	r3, [sp, #260]	; 0x104
 801b9da:	2300      	movs	r3, #0
 801b9dc:	e7cd      	b.n	801b97a <__ssvfiscanf_r+0x1e2>
 801b9de:	2302      	movs	r3, #2
 801b9e0:	e7cb      	b.n	801b97a <__ssvfiscanf_r+0x1e2>
 801b9e2:	9841      	ldr	r0, [sp, #260]	; 0x104
 801b9e4:	06c3      	lsls	r3, r0, #27
 801b9e6:	f53f aefe 	bmi.w	801b7e6 <__ssvfiscanf_r+0x4e>
 801b9ea:	9b00      	ldr	r3, [sp, #0]
 801b9ec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801b9ee:	1d19      	adds	r1, r3, #4
 801b9f0:	9100      	str	r1, [sp, #0]
 801b9f2:	681b      	ldr	r3, [r3, #0]
 801b9f4:	07c0      	lsls	r0, r0, #31
 801b9f6:	bf4c      	ite	mi
 801b9f8:	801a      	strhmi	r2, [r3, #0]
 801b9fa:	601a      	strpl	r2, [r3, #0]
 801b9fc:	e6f3      	b.n	801b7e6 <__ssvfiscanf_r+0x4e>
 801b9fe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ba00:	4621      	mov	r1, r4
 801ba02:	4630      	mov	r0, r6
 801ba04:	4798      	blx	r3
 801ba06:	2800      	cmp	r0, #0
 801ba08:	d0bb      	beq.n	801b982 <__ssvfiscanf_r+0x1ea>
 801ba0a:	e79d      	b.n	801b948 <__ssvfiscanf_r+0x1b0>
 801ba0c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801ba0e:	3201      	adds	r2, #1
 801ba10:	9245      	str	r2, [sp, #276]	; 0x114
 801ba12:	6862      	ldr	r2, [r4, #4]
 801ba14:	3a01      	subs	r2, #1
 801ba16:	2a00      	cmp	r2, #0
 801ba18:	6062      	str	r2, [r4, #4]
 801ba1a:	dd02      	ble.n	801ba22 <__ssvfiscanf_r+0x28a>
 801ba1c:	3301      	adds	r3, #1
 801ba1e:	6023      	str	r3, [r4, #0]
 801ba20:	e7b2      	b.n	801b988 <__ssvfiscanf_r+0x1f0>
 801ba22:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ba24:	4621      	mov	r1, r4
 801ba26:	4630      	mov	r0, r6
 801ba28:	4798      	blx	r3
 801ba2a:	2800      	cmp	r0, #0
 801ba2c:	d0ac      	beq.n	801b988 <__ssvfiscanf_r+0x1f0>
 801ba2e:	e78b      	b.n	801b948 <__ssvfiscanf_r+0x1b0>
 801ba30:	2b04      	cmp	r3, #4
 801ba32:	dc0f      	bgt.n	801ba54 <__ssvfiscanf_r+0x2bc>
 801ba34:	466b      	mov	r3, sp
 801ba36:	4622      	mov	r2, r4
 801ba38:	a941      	add	r1, sp, #260	; 0x104
 801ba3a:	4630      	mov	r0, r6
 801ba3c:	f000 f9c2 	bl	801bdc4 <_scanf_i>
 801ba40:	e7b0      	b.n	801b9a4 <__ssvfiscanf_r+0x20c>
 801ba42:	bf00      	nop
 801ba44:	0801b6e5 	.word	0x0801b6e5
 801ba48:	0801b75f 	.word	0x0801b75f
 801ba4c:	0801dd09 	.word	0x0801dd09
 801ba50:	0801de0f 	.word	0x0801de0f
 801ba54:	4b0b      	ldr	r3, [pc, #44]	; (801ba84 <__ssvfiscanf_r+0x2ec>)
 801ba56:	2b00      	cmp	r3, #0
 801ba58:	f43f aec5 	beq.w	801b7e6 <__ssvfiscanf_r+0x4e>
 801ba5c:	466b      	mov	r3, sp
 801ba5e:	4622      	mov	r2, r4
 801ba60:	a941      	add	r1, sp, #260	; 0x104
 801ba62:	4630      	mov	r0, r6
 801ba64:	f7fc fd80 	bl	8018568 <_scanf_float>
 801ba68:	e79c      	b.n	801b9a4 <__ssvfiscanf_r+0x20c>
 801ba6a:	89a3      	ldrh	r3, [r4, #12]
 801ba6c:	f013 0f40 	tst.w	r3, #64	; 0x40
 801ba70:	bf18      	it	ne
 801ba72:	f04f 30ff 	movne.w	r0, #4294967295
 801ba76:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801ba7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba7e:	9844      	ldr	r0, [sp, #272]	; 0x110
 801ba80:	e7f9      	b.n	801ba76 <__ssvfiscanf_r+0x2de>
 801ba82:	bf00      	nop
 801ba84:	08018569 	.word	0x08018569

0801ba88 <__sfputc_r>:
 801ba88:	6893      	ldr	r3, [r2, #8]
 801ba8a:	3b01      	subs	r3, #1
 801ba8c:	2b00      	cmp	r3, #0
 801ba8e:	b410      	push	{r4}
 801ba90:	6093      	str	r3, [r2, #8]
 801ba92:	da08      	bge.n	801baa6 <__sfputc_r+0x1e>
 801ba94:	6994      	ldr	r4, [r2, #24]
 801ba96:	42a3      	cmp	r3, r4
 801ba98:	db01      	blt.n	801ba9e <__sfputc_r+0x16>
 801ba9a:	290a      	cmp	r1, #10
 801ba9c:	d103      	bne.n	801baa6 <__sfputc_r+0x1e>
 801ba9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801baa2:	f7fd b920 	b.w	8018ce6 <__swbuf_r>
 801baa6:	6813      	ldr	r3, [r2, #0]
 801baa8:	1c58      	adds	r0, r3, #1
 801baaa:	6010      	str	r0, [r2, #0]
 801baac:	7019      	strb	r1, [r3, #0]
 801baae:	4608      	mov	r0, r1
 801bab0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bab4:	4770      	bx	lr

0801bab6 <__sfputs_r>:
 801bab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bab8:	4606      	mov	r6, r0
 801baba:	460f      	mov	r7, r1
 801babc:	4614      	mov	r4, r2
 801babe:	18d5      	adds	r5, r2, r3
 801bac0:	42ac      	cmp	r4, r5
 801bac2:	d101      	bne.n	801bac8 <__sfputs_r+0x12>
 801bac4:	2000      	movs	r0, #0
 801bac6:	e007      	b.n	801bad8 <__sfputs_r+0x22>
 801bac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bacc:	463a      	mov	r2, r7
 801bace:	4630      	mov	r0, r6
 801bad0:	f7ff ffda 	bl	801ba88 <__sfputc_r>
 801bad4:	1c43      	adds	r3, r0, #1
 801bad6:	d1f3      	bne.n	801bac0 <__sfputs_r+0xa>
 801bad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801badc <_vfiprintf_r>:
 801badc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bae0:	460d      	mov	r5, r1
 801bae2:	b09d      	sub	sp, #116	; 0x74
 801bae4:	4614      	mov	r4, r2
 801bae6:	4698      	mov	r8, r3
 801bae8:	4606      	mov	r6, r0
 801baea:	b118      	cbz	r0, 801baf4 <_vfiprintf_r+0x18>
 801baec:	6a03      	ldr	r3, [r0, #32]
 801baee:	b90b      	cbnz	r3, 801baf4 <_vfiprintf_r+0x18>
 801baf0:	f7fc ffc4 	bl	8018a7c <__sinit>
 801baf4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801baf6:	07d9      	lsls	r1, r3, #31
 801baf8:	d405      	bmi.n	801bb06 <_vfiprintf_r+0x2a>
 801bafa:	89ab      	ldrh	r3, [r5, #12]
 801bafc:	059a      	lsls	r2, r3, #22
 801bafe:	d402      	bmi.n	801bb06 <_vfiprintf_r+0x2a>
 801bb00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bb02:	f7fd fa77 	bl	8018ff4 <__retarget_lock_acquire_recursive>
 801bb06:	89ab      	ldrh	r3, [r5, #12]
 801bb08:	071b      	lsls	r3, r3, #28
 801bb0a:	d501      	bpl.n	801bb10 <_vfiprintf_r+0x34>
 801bb0c:	692b      	ldr	r3, [r5, #16]
 801bb0e:	b99b      	cbnz	r3, 801bb38 <_vfiprintf_r+0x5c>
 801bb10:	4629      	mov	r1, r5
 801bb12:	4630      	mov	r0, r6
 801bb14:	f7fd f924 	bl	8018d60 <__swsetup_r>
 801bb18:	b170      	cbz	r0, 801bb38 <_vfiprintf_r+0x5c>
 801bb1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bb1c:	07dc      	lsls	r4, r3, #31
 801bb1e:	d504      	bpl.n	801bb2a <_vfiprintf_r+0x4e>
 801bb20:	f04f 30ff 	mov.w	r0, #4294967295
 801bb24:	b01d      	add	sp, #116	; 0x74
 801bb26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb2a:	89ab      	ldrh	r3, [r5, #12]
 801bb2c:	0598      	lsls	r0, r3, #22
 801bb2e:	d4f7      	bmi.n	801bb20 <_vfiprintf_r+0x44>
 801bb30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bb32:	f7fd fa60 	bl	8018ff6 <__retarget_lock_release_recursive>
 801bb36:	e7f3      	b.n	801bb20 <_vfiprintf_r+0x44>
 801bb38:	2300      	movs	r3, #0
 801bb3a:	9309      	str	r3, [sp, #36]	; 0x24
 801bb3c:	2320      	movs	r3, #32
 801bb3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bb42:	f8cd 800c 	str.w	r8, [sp, #12]
 801bb46:	2330      	movs	r3, #48	; 0x30
 801bb48:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801bcfc <_vfiprintf_r+0x220>
 801bb4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bb50:	f04f 0901 	mov.w	r9, #1
 801bb54:	4623      	mov	r3, r4
 801bb56:	469a      	mov	sl, r3
 801bb58:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bb5c:	b10a      	cbz	r2, 801bb62 <_vfiprintf_r+0x86>
 801bb5e:	2a25      	cmp	r2, #37	; 0x25
 801bb60:	d1f9      	bne.n	801bb56 <_vfiprintf_r+0x7a>
 801bb62:	ebba 0b04 	subs.w	fp, sl, r4
 801bb66:	d00b      	beq.n	801bb80 <_vfiprintf_r+0xa4>
 801bb68:	465b      	mov	r3, fp
 801bb6a:	4622      	mov	r2, r4
 801bb6c:	4629      	mov	r1, r5
 801bb6e:	4630      	mov	r0, r6
 801bb70:	f7ff ffa1 	bl	801bab6 <__sfputs_r>
 801bb74:	3001      	adds	r0, #1
 801bb76:	f000 80a9 	beq.w	801bccc <_vfiprintf_r+0x1f0>
 801bb7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bb7c:	445a      	add	r2, fp
 801bb7e:	9209      	str	r2, [sp, #36]	; 0x24
 801bb80:	f89a 3000 	ldrb.w	r3, [sl]
 801bb84:	2b00      	cmp	r3, #0
 801bb86:	f000 80a1 	beq.w	801bccc <_vfiprintf_r+0x1f0>
 801bb8a:	2300      	movs	r3, #0
 801bb8c:	f04f 32ff 	mov.w	r2, #4294967295
 801bb90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bb94:	f10a 0a01 	add.w	sl, sl, #1
 801bb98:	9304      	str	r3, [sp, #16]
 801bb9a:	9307      	str	r3, [sp, #28]
 801bb9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bba0:	931a      	str	r3, [sp, #104]	; 0x68
 801bba2:	4654      	mov	r4, sl
 801bba4:	2205      	movs	r2, #5
 801bba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bbaa:	4854      	ldr	r0, [pc, #336]	; (801bcfc <_vfiprintf_r+0x220>)
 801bbac:	f7e4 fb40 	bl	8000230 <memchr>
 801bbb0:	9a04      	ldr	r2, [sp, #16]
 801bbb2:	b9d8      	cbnz	r0, 801bbec <_vfiprintf_r+0x110>
 801bbb4:	06d1      	lsls	r1, r2, #27
 801bbb6:	bf44      	itt	mi
 801bbb8:	2320      	movmi	r3, #32
 801bbba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bbbe:	0713      	lsls	r3, r2, #28
 801bbc0:	bf44      	itt	mi
 801bbc2:	232b      	movmi	r3, #43	; 0x2b
 801bbc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bbc8:	f89a 3000 	ldrb.w	r3, [sl]
 801bbcc:	2b2a      	cmp	r3, #42	; 0x2a
 801bbce:	d015      	beq.n	801bbfc <_vfiprintf_r+0x120>
 801bbd0:	9a07      	ldr	r2, [sp, #28]
 801bbd2:	4654      	mov	r4, sl
 801bbd4:	2000      	movs	r0, #0
 801bbd6:	f04f 0c0a 	mov.w	ip, #10
 801bbda:	4621      	mov	r1, r4
 801bbdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bbe0:	3b30      	subs	r3, #48	; 0x30
 801bbe2:	2b09      	cmp	r3, #9
 801bbe4:	d94d      	bls.n	801bc82 <_vfiprintf_r+0x1a6>
 801bbe6:	b1b0      	cbz	r0, 801bc16 <_vfiprintf_r+0x13a>
 801bbe8:	9207      	str	r2, [sp, #28]
 801bbea:	e014      	b.n	801bc16 <_vfiprintf_r+0x13a>
 801bbec:	eba0 0308 	sub.w	r3, r0, r8
 801bbf0:	fa09 f303 	lsl.w	r3, r9, r3
 801bbf4:	4313      	orrs	r3, r2
 801bbf6:	9304      	str	r3, [sp, #16]
 801bbf8:	46a2      	mov	sl, r4
 801bbfa:	e7d2      	b.n	801bba2 <_vfiprintf_r+0xc6>
 801bbfc:	9b03      	ldr	r3, [sp, #12]
 801bbfe:	1d19      	adds	r1, r3, #4
 801bc00:	681b      	ldr	r3, [r3, #0]
 801bc02:	9103      	str	r1, [sp, #12]
 801bc04:	2b00      	cmp	r3, #0
 801bc06:	bfbb      	ittet	lt
 801bc08:	425b      	neglt	r3, r3
 801bc0a:	f042 0202 	orrlt.w	r2, r2, #2
 801bc0e:	9307      	strge	r3, [sp, #28]
 801bc10:	9307      	strlt	r3, [sp, #28]
 801bc12:	bfb8      	it	lt
 801bc14:	9204      	strlt	r2, [sp, #16]
 801bc16:	7823      	ldrb	r3, [r4, #0]
 801bc18:	2b2e      	cmp	r3, #46	; 0x2e
 801bc1a:	d10c      	bne.n	801bc36 <_vfiprintf_r+0x15a>
 801bc1c:	7863      	ldrb	r3, [r4, #1]
 801bc1e:	2b2a      	cmp	r3, #42	; 0x2a
 801bc20:	d134      	bne.n	801bc8c <_vfiprintf_r+0x1b0>
 801bc22:	9b03      	ldr	r3, [sp, #12]
 801bc24:	1d1a      	adds	r2, r3, #4
 801bc26:	681b      	ldr	r3, [r3, #0]
 801bc28:	9203      	str	r2, [sp, #12]
 801bc2a:	2b00      	cmp	r3, #0
 801bc2c:	bfb8      	it	lt
 801bc2e:	f04f 33ff 	movlt.w	r3, #4294967295
 801bc32:	3402      	adds	r4, #2
 801bc34:	9305      	str	r3, [sp, #20]
 801bc36:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801bd0c <_vfiprintf_r+0x230>
 801bc3a:	7821      	ldrb	r1, [r4, #0]
 801bc3c:	2203      	movs	r2, #3
 801bc3e:	4650      	mov	r0, sl
 801bc40:	f7e4 faf6 	bl	8000230 <memchr>
 801bc44:	b138      	cbz	r0, 801bc56 <_vfiprintf_r+0x17a>
 801bc46:	9b04      	ldr	r3, [sp, #16]
 801bc48:	eba0 000a 	sub.w	r0, r0, sl
 801bc4c:	2240      	movs	r2, #64	; 0x40
 801bc4e:	4082      	lsls	r2, r0
 801bc50:	4313      	orrs	r3, r2
 801bc52:	3401      	adds	r4, #1
 801bc54:	9304      	str	r3, [sp, #16]
 801bc56:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bc5a:	4829      	ldr	r0, [pc, #164]	; (801bd00 <_vfiprintf_r+0x224>)
 801bc5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801bc60:	2206      	movs	r2, #6
 801bc62:	f7e4 fae5 	bl	8000230 <memchr>
 801bc66:	2800      	cmp	r0, #0
 801bc68:	d03f      	beq.n	801bcea <_vfiprintf_r+0x20e>
 801bc6a:	4b26      	ldr	r3, [pc, #152]	; (801bd04 <_vfiprintf_r+0x228>)
 801bc6c:	bb1b      	cbnz	r3, 801bcb6 <_vfiprintf_r+0x1da>
 801bc6e:	9b03      	ldr	r3, [sp, #12]
 801bc70:	3307      	adds	r3, #7
 801bc72:	f023 0307 	bic.w	r3, r3, #7
 801bc76:	3308      	adds	r3, #8
 801bc78:	9303      	str	r3, [sp, #12]
 801bc7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc7c:	443b      	add	r3, r7
 801bc7e:	9309      	str	r3, [sp, #36]	; 0x24
 801bc80:	e768      	b.n	801bb54 <_vfiprintf_r+0x78>
 801bc82:	fb0c 3202 	mla	r2, ip, r2, r3
 801bc86:	460c      	mov	r4, r1
 801bc88:	2001      	movs	r0, #1
 801bc8a:	e7a6      	b.n	801bbda <_vfiprintf_r+0xfe>
 801bc8c:	2300      	movs	r3, #0
 801bc8e:	3401      	adds	r4, #1
 801bc90:	9305      	str	r3, [sp, #20]
 801bc92:	4619      	mov	r1, r3
 801bc94:	f04f 0c0a 	mov.w	ip, #10
 801bc98:	4620      	mov	r0, r4
 801bc9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bc9e:	3a30      	subs	r2, #48	; 0x30
 801bca0:	2a09      	cmp	r2, #9
 801bca2:	d903      	bls.n	801bcac <_vfiprintf_r+0x1d0>
 801bca4:	2b00      	cmp	r3, #0
 801bca6:	d0c6      	beq.n	801bc36 <_vfiprintf_r+0x15a>
 801bca8:	9105      	str	r1, [sp, #20]
 801bcaa:	e7c4      	b.n	801bc36 <_vfiprintf_r+0x15a>
 801bcac:	fb0c 2101 	mla	r1, ip, r1, r2
 801bcb0:	4604      	mov	r4, r0
 801bcb2:	2301      	movs	r3, #1
 801bcb4:	e7f0      	b.n	801bc98 <_vfiprintf_r+0x1bc>
 801bcb6:	ab03      	add	r3, sp, #12
 801bcb8:	9300      	str	r3, [sp, #0]
 801bcba:	462a      	mov	r2, r5
 801bcbc:	4b12      	ldr	r3, [pc, #72]	; (801bd08 <_vfiprintf_r+0x22c>)
 801bcbe:	a904      	add	r1, sp, #16
 801bcc0:	4630      	mov	r0, r6
 801bcc2:	f7fc f88b 	bl	8017ddc <_printf_float>
 801bcc6:	4607      	mov	r7, r0
 801bcc8:	1c78      	adds	r0, r7, #1
 801bcca:	d1d6      	bne.n	801bc7a <_vfiprintf_r+0x19e>
 801bccc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bcce:	07d9      	lsls	r1, r3, #31
 801bcd0:	d405      	bmi.n	801bcde <_vfiprintf_r+0x202>
 801bcd2:	89ab      	ldrh	r3, [r5, #12]
 801bcd4:	059a      	lsls	r2, r3, #22
 801bcd6:	d402      	bmi.n	801bcde <_vfiprintf_r+0x202>
 801bcd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bcda:	f7fd f98c 	bl	8018ff6 <__retarget_lock_release_recursive>
 801bcde:	89ab      	ldrh	r3, [r5, #12]
 801bce0:	065b      	lsls	r3, r3, #25
 801bce2:	f53f af1d 	bmi.w	801bb20 <_vfiprintf_r+0x44>
 801bce6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bce8:	e71c      	b.n	801bb24 <_vfiprintf_r+0x48>
 801bcea:	ab03      	add	r3, sp, #12
 801bcec:	9300      	str	r3, [sp, #0]
 801bcee:	462a      	mov	r2, r5
 801bcf0:	4b05      	ldr	r3, [pc, #20]	; (801bd08 <_vfiprintf_r+0x22c>)
 801bcf2:	a904      	add	r1, sp, #16
 801bcf4:	4630      	mov	r0, r6
 801bcf6:	f7fc fb15 	bl	8018324 <_printf_i>
 801bcfa:	e7e4      	b.n	801bcc6 <_vfiprintf_r+0x1ea>
 801bcfc:	0801de09 	.word	0x0801de09
 801bd00:	0801de13 	.word	0x0801de13
 801bd04:	08017ddd 	.word	0x08017ddd
 801bd08:	0801bab7 	.word	0x0801bab7
 801bd0c:	0801de0f 	.word	0x0801de0f

0801bd10 <_scanf_chars>:
 801bd10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bd14:	4615      	mov	r5, r2
 801bd16:	688a      	ldr	r2, [r1, #8]
 801bd18:	4680      	mov	r8, r0
 801bd1a:	460c      	mov	r4, r1
 801bd1c:	b932      	cbnz	r2, 801bd2c <_scanf_chars+0x1c>
 801bd1e:	698a      	ldr	r2, [r1, #24]
 801bd20:	2a00      	cmp	r2, #0
 801bd22:	bf0c      	ite	eq
 801bd24:	2201      	moveq	r2, #1
 801bd26:	f04f 32ff 	movne.w	r2, #4294967295
 801bd2a:	608a      	str	r2, [r1, #8]
 801bd2c:	6822      	ldr	r2, [r4, #0]
 801bd2e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801bdc0 <_scanf_chars+0xb0>
 801bd32:	06d1      	lsls	r1, r2, #27
 801bd34:	bf5f      	itttt	pl
 801bd36:	681a      	ldrpl	r2, [r3, #0]
 801bd38:	1d11      	addpl	r1, r2, #4
 801bd3a:	6019      	strpl	r1, [r3, #0]
 801bd3c:	6816      	ldrpl	r6, [r2, #0]
 801bd3e:	2700      	movs	r7, #0
 801bd40:	69a0      	ldr	r0, [r4, #24]
 801bd42:	b188      	cbz	r0, 801bd68 <_scanf_chars+0x58>
 801bd44:	2801      	cmp	r0, #1
 801bd46:	d107      	bne.n	801bd58 <_scanf_chars+0x48>
 801bd48:	682a      	ldr	r2, [r5, #0]
 801bd4a:	7811      	ldrb	r1, [r2, #0]
 801bd4c:	6962      	ldr	r2, [r4, #20]
 801bd4e:	5c52      	ldrb	r2, [r2, r1]
 801bd50:	b952      	cbnz	r2, 801bd68 <_scanf_chars+0x58>
 801bd52:	2f00      	cmp	r7, #0
 801bd54:	d031      	beq.n	801bdba <_scanf_chars+0xaa>
 801bd56:	e022      	b.n	801bd9e <_scanf_chars+0x8e>
 801bd58:	2802      	cmp	r0, #2
 801bd5a:	d120      	bne.n	801bd9e <_scanf_chars+0x8e>
 801bd5c:	682b      	ldr	r3, [r5, #0]
 801bd5e:	781b      	ldrb	r3, [r3, #0]
 801bd60:	f819 3003 	ldrb.w	r3, [r9, r3]
 801bd64:	071b      	lsls	r3, r3, #28
 801bd66:	d41a      	bmi.n	801bd9e <_scanf_chars+0x8e>
 801bd68:	6823      	ldr	r3, [r4, #0]
 801bd6a:	06da      	lsls	r2, r3, #27
 801bd6c:	bf5e      	ittt	pl
 801bd6e:	682b      	ldrpl	r3, [r5, #0]
 801bd70:	781b      	ldrbpl	r3, [r3, #0]
 801bd72:	f806 3b01 	strbpl.w	r3, [r6], #1
 801bd76:	682a      	ldr	r2, [r5, #0]
 801bd78:	686b      	ldr	r3, [r5, #4]
 801bd7a:	3201      	adds	r2, #1
 801bd7c:	602a      	str	r2, [r5, #0]
 801bd7e:	68a2      	ldr	r2, [r4, #8]
 801bd80:	3b01      	subs	r3, #1
 801bd82:	3a01      	subs	r2, #1
 801bd84:	606b      	str	r3, [r5, #4]
 801bd86:	3701      	adds	r7, #1
 801bd88:	60a2      	str	r2, [r4, #8]
 801bd8a:	b142      	cbz	r2, 801bd9e <_scanf_chars+0x8e>
 801bd8c:	2b00      	cmp	r3, #0
 801bd8e:	dcd7      	bgt.n	801bd40 <_scanf_chars+0x30>
 801bd90:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801bd94:	4629      	mov	r1, r5
 801bd96:	4640      	mov	r0, r8
 801bd98:	4798      	blx	r3
 801bd9a:	2800      	cmp	r0, #0
 801bd9c:	d0d0      	beq.n	801bd40 <_scanf_chars+0x30>
 801bd9e:	6823      	ldr	r3, [r4, #0]
 801bda0:	f013 0310 	ands.w	r3, r3, #16
 801bda4:	d105      	bne.n	801bdb2 <_scanf_chars+0xa2>
 801bda6:	68e2      	ldr	r2, [r4, #12]
 801bda8:	3201      	adds	r2, #1
 801bdaa:	60e2      	str	r2, [r4, #12]
 801bdac:	69a2      	ldr	r2, [r4, #24]
 801bdae:	b102      	cbz	r2, 801bdb2 <_scanf_chars+0xa2>
 801bdb0:	7033      	strb	r3, [r6, #0]
 801bdb2:	6923      	ldr	r3, [r4, #16]
 801bdb4:	443b      	add	r3, r7
 801bdb6:	6123      	str	r3, [r4, #16]
 801bdb8:	2000      	movs	r0, #0
 801bdba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bdbe:	bf00      	nop
 801bdc0:	0801dd09 	.word	0x0801dd09

0801bdc4 <_scanf_i>:
 801bdc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdc8:	4698      	mov	r8, r3
 801bdca:	4b74      	ldr	r3, [pc, #464]	; (801bf9c <_scanf_i+0x1d8>)
 801bdcc:	460c      	mov	r4, r1
 801bdce:	4682      	mov	sl, r0
 801bdd0:	4616      	mov	r6, r2
 801bdd2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801bdd6:	b087      	sub	sp, #28
 801bdd8:	ab03      	add	r3, sp, #12
 801bdda:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801bdde:	4b70      	ldr	r3, [pc, #448]	; (801bfa0 <_scanf_i+0x1dc>)
 801bde0:	69a1      	ldr	r1, [r4, #24]
 801bde2:	4a70      	ldr	r2, [pc, #448]	; (801bfa4 <_scanf_i+0x1e0>)
 801bde4:	2903      	cmp	r1, #3
 801bde6:	bf18      	it	ne
 801bde8:	461a      	movne	r2, r3
 801bdea:	68a3      	ldr	r3, [r4, #8]
 801bdec:	9201      	str	r2, [sp, #4]
 801bdee:	1e5a      	subs	r2, r3, #1
 801bdf0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801bdf4:	bf88      	it	hi
 801bdf6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801bdfa:	4627      	mov	r7, r4
 801bdfc:	bf82      	ittt	hi
 801bdfe:	eb03 0905 	addhi.w	r9, r3, r5
 801be02:	f240 135d 	movwhi	r3, #349	; 0x15d
 801be06:	60a3      	strhi	r3, [r4, #8]
 801be08:	f857 3b1c 	ldr.w	r3, [r7], #28
 801be0c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801be10:	bf98      	it	ls
 801be12:	f04f 0900 	movls.w	r9, #0
 801be16:	6023      	str	r3, [r4, #0]
 801be18:	463d      	mov	r5, r7
 801be1a:	f04f 0b00 	mov.w	fp, #0
 801be1e:	6831      	ldr	r1, [r6, #0]
 801be20:	ab03      	add	r3, sp, #12
 801be22:	7809      	ldrb	r1, [r1, #0]
 801be24:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801be28:	2202      	movs	r2, #2
 801be2a:	f7e4 fa01 	bl	8000230 <memchr>
 801be2e:	b328      	cbz	r0, 801be7c <_scanf_i+0xb8>
 801be30:	f1bb 0f01 	cmp.w	fp, #1
 801be34:	d159      	bne.n	801beea <_scanf_i+0x126>
 801be36:	6862      	ldr	r2, [r4, #4]
 801be38:	b92a      	cbnz	r2, 801be46 <_scanf_i+0x82>
 801be3a:	6822      	ldr	r2, [r4, #0]
 801be3c:	2308      	movs	r3, #8
 801be3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801be42:	6063      	str	r3, [r4, #4]
 801be44:	6022      	str	r2, [r4, #0]
 801be46:	6822      	ldr	r2, [r4, #0]
 801be48:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801be4c:	6022      	str	r2, [r4, #0]
 801be4e:	68a2      	ldr	r2, [r4, #8]
 801be50:	1e51      	subs	r1, r2, #1
 801be52:	60a1      	str	r1, [r4, #8]
 801be54:	b192      	cbz	r2, 801be7c <_scanf_i+0xb8>
 801be56:	6832      	ldr	r2, [r6, #0]
 801be58:	1c51      	adds	r1, r2, #1
 801be5a:	6031      	str	r1, [r6, #0]
 801be5c:	7812      	ldrb	r2, [r2, #0]
 801be5e:	f805 2b01 	strb.w	r2, [r5], #1
 801be62:	6872      	ldr	r2, [r6, #4]
 801be64:	3a01      	subs	r2, #1
 801be66:	2a00      	cmp	r2, #0
 801be68:	6072      	str	r2, [r6, #4]
 801be6a:	dc07      	bgt.n	801be7c <_scanf_i+0xb8>
 801be6c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801be70:	4631      	mov	r1, r6
 801be72:	4650      	mov	r0, sl
 801be74:	4790      	blx	r2
 801be76:	2800      	cmp	r0, #0
 801be78:	f040 8085 	bne.w	801bf86 <_scanf_i+0x1c2>
 801be7c:	f10b 0b01 	add.w	fp, fp, #1
 801be80:	f1bb 0f03 	cmp.w	fp, #3
 801be84:	d1cb      	bne.n	801be1e <_scanf_i+0x5a>
 801be86:	6863      	ldr	r3, [r4, #4]
 801be88:	b90b      	cbnz	r3, 801be8e <_scanf_i+0xca>
 801be8a:	230a      	movs	r3, #10
 801be8c:	6063      	str	r3, [r4, #4]
 801be8e:	6863      	ldr	r3, [r4, #4]
 801be90:	4945      	ldr	r1, [pc, #276]	; (801bfa8 <_scanf_i+0x1e4>)
 801be92:	6960      	ldr	r0, [r4, #20]
 801be94:	1ac9      	subs	r1, r1, r3
 801be96:	f000 f999 	bl	801c1cc <__sccl>
 801be9a:	f04f 0b00 	mov.w	fp, #0
 801be9e:	68a3      	ldr	r3, [r4, #8]
 801bea0:	6822      	ldr	r2, [r4, #0]
 801bea2:	2b00      	cmp	r3, #0
 801bea4:	d03d      	beq.n	801bf22 <_scanf_i+0x15e>
 801bea6:	6831      	ldr	r1, [r6, #0]
 801bea8:	6960      	ldr	r0, [r4, #20]
 801beaa:	f891 c000 	ldrb.w	ip, [r1]
 801beae:	f810 000c 	ldrb.w	r0, [r0, ip]
 801beb2:	2800      	cmp	r0, #0
 801beb4:	d035      	beq.n	801bf22 <_scanf_i+0x15e>
 801beb6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801beba:	d124      	bne.n	801bf06 <_scanf_i+0x142>
 801bebc:	0510      	lsls	r0, r2, #20
 801bebe:	d522      	bpl.n	801bf06 <_scanf_i+0x142>
 801bec0:	f10b 0b01 	add.w	fp, fp, #1
 801bec4:	f1b9 0f00 	cmp.w	r9, #0
 801bec8:	d003      	beq.n	801bed2 <_scanf_i+0x10e>
 801beca:	3301      	adds	r3, #1
 801becc:	f109 39ff 	add.w	r9, r9, #4294967295
 801bed0:	60a3      	str	r3, [r4, #8]
 801bed2:	6873      	ldr	r3, [r6, #4]
 801bed4:	3b01      	subs	r3, #1
 801bed6:	2b00      	cmp	r3, #0
 801bed8:	6073      	str	r3, [r6, #4]
 801beda:	dd1b      	ble.n	801bf14 <_scanf_i+0x150>
 801bedc:	6833      	ldr	r3, [r6, #0]
 801bede:	3301      	adds	r3, #1
 801bee0:	6033      	str	r3, [r6, #0]
 801bee2:	68a3      	ldr	r3, [r4, #8]
 801bee4:	3b01      	subs	r3, #1
 801bee6:	60a3      	str	r3, [r4, #8]
 801bee8:	e7d9      	b.n	801be9e <_scanf_i+0xda>
 801beea:	f1bb 0f02 	cmp.w	fp, #2
 801beee:	d1ae      	bne.n	801be4e <_scanf_i+0x8a>
 801bef0:	6822      	ldr	r2, [r4, #0]
 801bef2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801bef6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801befa:	d1bf      	bne.n	801be7c <_scanf_i+0xb8>
 801befc:	2310      	movs	r3, #16
 801befe:	6063      	str	r3, [r4, #4]
 801bf00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801bf04:	e7a2      	b.n	801be4c <_scanf_i+0x88>
 801bf06:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801bf0a:	6022      	str	r2, [r4, #0]
 801bf0c:	780b      	ldrb	r3, [r1, #0]
 801bf0e:	f805 3b01 	strb.w	r3, [r5], #1
 801bf12:	e7de      	b.n	801bed2 <_scanf_i+0x10e>
 801bf14:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801bf18:	4631      	mov	r1, r6
 801bf1a:	4650      	mov	r0, sl
 801bf1c:	4798      	blx	r3
 801bf1e:	2800      	cmp	r0, #0
 801bf20:	d0df      	beq.n	801bee2 <_scanf_i+0x11e>
 801bf22:	6823      	ldr	r3, [r4, #0]
 801bf24:	05d9      	lsls	r1, r3, #23
 801bf26:	d50d      	bpl.n	801bf44 <_scanf_i+0x180>
 801bf28:	42bd      	cmp	r5, r7
 801bf2a:	d909      	bls.n	801bf40 <_scanf_i+0x17c>
 801bf2c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801bf30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bf34:	4632      	mov	r2, r6
 801bf36:	4650      	mov	r0, sl
 801bf38:	4798      	blx	r3
 801bf3a:	f105 39ff 	add.w	r9, r5, #4294967295
 801bf3e:	464d      	mov	r5, r9
 801bf40:	42bd      	cmp	r5, r7
 801bf42:	d028      	beq.n	801bf96 <_scanf_i+0x1d2>
 801bf44:	6822      	ldr	r2, [r4, #0]
 801bf46:	f012 0210 	ands.w	r2, r2, #16
 801bf4a:	d113      	bne.n	801bf74 <_scanf_i+0x1b0>
 801bf4c:	702a      	strb	r2, [r5, #0]
 801bf4e:	6863      	ldr	r3, [r4, #4]
 801bf50:	9e01      	ldr	r6, [sp, #4]
 801bf52:	4639      	mov	r1, r7
 801bf54:	4650      	mov	r0, sl
 801bf56:	47b0      	blx	r6
 801bf58:	f8d8 3000 	ldr.w	r3, [r8]
 801bf5c:	6821      	ldr	r1, [r4, #0]
 801bf5e:	1d1a      	adds	r2, r3, #4
 801bf60:	f8c8 2000 	str.w	r2, [r8]
 801bf64:	f011 0f20 	tst.w	r1, #32
 801bf68:	681b      	ldr	r3, [r3, #0]
 801bf6a:	d00f      	beq.n	801bf8c <_scanf_i+0x1c8>
 801bf6c:	6018      	str	r0, [r3, #0]
 801bf6e:	68e3      	ldr	r3, [r4, #12]
 801bf70:	3301      	adds	r3, #1
 801bf72:	60e3      	str	r3, [r4, #12]
 801bf74:	6923      	ldr	r3, [r4, #16]
 801bf76:	1bed      	subs	r5, r5, r7
 801bf78:	445d      	add	r5, fp
 801bf7a:	442b      	add	r3, r5
 801bf7c:	6123      	str	r3, [r4, #16]
 801bf7e:	2000      	movs	r0, #0
 801bf80:	b007      	add	sp, #28
 801bf82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf86:	f04f 0b00 	mov.w	fp, #0
 801bf8a:	e7ca      	b.n	801bf22 <_scanf_i+0x15e>
 801bf8c:	07ca      	lsls	r2, r1, #31
 801bf8e:	bf4c      	ite	mi
 801bf90:	8018      	strhmi	r0, [r3, #0]
 801bf92:	6018      	strpl	r0, [r3, #0]
 801bf94:	e7eb      	b.n	801bf6e <_scanf_i+0x1aa>
 801bf96:	2001      	movs	r0, #1
 801bf98:	e7f2      	b.n	801bf80 <_scanf_i+0x1bc>
 801bf9a:	bf00      	nop
 801bf9c:	0801d248 	.word	0x0801d248
 801bfa0:	0801cbb1 	.word	0x0801cbb1
 801bfa4:	0801b431 	.word	0x0801b431
 801bfa8:	0801de2a 	.word	0x0801de2a

0801bfac <__sflush_r>:
 801bfac:	898a      	ldrh	r2, [r1, #12]
 801bfae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bfb2:	4605      	mov	r5, r0
 801bfb4:	0710      	lsls	r0, r2, #28
 801bfb6:	460c      	mov	r4, r1
 801bfb8:	d458      	bmi.n	801c06c <__sflush_r+0xc0>
 801bfba:	684b      	ldr	r3, [r1, #4]
 801bfbc:	2b00      	cmp	r3, #0
 801bfbe:	dc05      	bgt.n	801bfcc <__sflush_r+0x20>
 801bfc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801bfc2:	2b00      	cmp	r3, #0
 801bfc4:	dc02      	bgt.n	801bfcc <__sflush_r+0x20>
 801bfc6:	2000      	movs	r0, #0
 801bfc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bfcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bfce:	2e00      	cmp	r6, #0
 801bfd0:	d0f9      	beq.n	801bfc6 <__sflush_r+0x1a>
 801bfd2:	2300      	movs	r3, #0
 801bfd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801bfd8:	682f      	ldr	r7, [r5, #0]
 801bfda:	6a21      	ldr	r1, [r4, #32]
 801bfdc:	602b      	str	r3, [r5, #0]
 801bfde:	d032      	beq.n	801c046 <__sflush_r+0x9a>
 801bfe0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801bfe2:	89a3      	ldrh	r3, [r4, #12]
 801bfe4:	075a      	lsls	r2, r3, #29
 801bfe6:	d505      	bpl.n	801bff4 <__sflush_r+0x48>
 801bfe8:	6863      	ldr	r3, [r4, #4]
 801bfea:	1ac0      	subs	r0, r0, r3
 801bfec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bfee:	b10b      	cbz	r3, 801bff4 <__sflush_r+0x48>
 801bff0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bff2:	1ac0      	subs	r0, r0, r3
 801bff4:	2300      	movs	r3, #0
 801bff6:	4602      	mov	r2, r0
 801bff8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bffa:	6a21      	ldr	r1, [r4, #32]
 801bffc:	4628      	mov	r0, r5
 801bffe:	47b0      	blx	r6
 801c000:	1c43      	adds	r3, r0, #1
 801c002:	89a3      	ldrh	r3, [r4, #12]
 801c004:	d106      	bne.n	801c014 <__sflush_r+0x68>
 801c006:	6829      	ldr	r1, [r5, #0]
 801c008:	291d      	cmp	r1, #29
 801c00a:	d82b      	bhi.n	801c064 <__sflush_r+0xb8>
 801c00c:	4a29      	ldr	r2, [pc, #164]	; (801c0b4 <__sflush_r+0x108>)
 801c00e:	410a      	asrs	r2, r1
 801c010:	07d6      	lsls	r6, r2, #31
 801c012:	d427      	bmi.n	801c064 <__sflush_r+0xb8>
 801c014:	2200      	movs	r2, #0
 801c016:	6062      	str	r2, [r4, #4]
 801c018:	04d9      	lsls	r1, r3, #19
 801c01a:	6922      	ldr	r2, [r4, #16]
 801c01c:	6022      	str	r2, [r4, #0]
 801c01e:	d504      	bpl.n	801c02a <__sflush_r+0x7e>
 801c020:	1c42      	adds	r2, r0, #1
 801c022:	d101      	bne.n	801c028 <__sflush_r+0x7c>
 801c024:	682b      	ldr	r3, [r5, #0]
 801c026:	b903      	cbnz	r3, 801c02a <__sflush_r+0x7e>
 801c028:	6560      	str	r0, [r4, #84]	; 0x54
 801c02a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c02c:	602f      	str	r7, [r5, #0]
 801c02e:	2900      	cmp	r1, #0
 801c030:	d0c9      	beq.n	801bfc6 <__sflush_r+0x1a>
 801c032:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c036:	4299      	cmp	r1, r3
 801c038:	d002      	beq.n	801c040 <__sflush_r+0x94>
 801c03a:	4628      	mov	r0, r5
 801c03c:	f7fd fe6a 	bl	8019d14 <_free_r>
 801c040:	2000      	movs	r0, #0
 801c042:	6360      	str	r0, [r4, #52]	; 0x34
 801c044:	e7c0      	b.n	801bfc8 <__sflush_r+0x1c>
 801c046:	2301      	movs	r3, #1
 801c048:	4628      	mov	r0, r5
 801c04a:	47b0      	blx	r6
 801c04c:	1c41      	adds	r1, r0, #1
 801c04e:	d1c8      	bne.n	801bfe2 <__sflush_r+0x36>
 801c050:	682b      	ldr	r3, [r5, #0]
 801c052:	2b00      	cmp	r3, #0
 801c054:	d0c5      	beq.n	801bfe2 <__sflush_r+0x36>
 801c056:	2b1d      	cmp	r3, #29
 801c058:	d001      	beq.n	801c05e <__sflush_r+0xb2>
 801c05a:	2b16      	cmp	r3, #22
 801c05c:	d101      	bne.n	801c062 <__sflush_r+0xb6>
 801c05e:	602f      	str	r7, [r5, #0]
 801c060:	e7b1      	b.n	801bfc6 <__sflush_r+0x1a>
 801c062:	89a3      	ldrh	r3, [r4, #12]
 801c064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c068:	81a3      	strh	r3, [r4, #12]
 801c06a:	e7ad      	b.n	801bfc8 <__sflush_r+0x1c>
 801c06c:	690f      	ldr	r7, [r1, #16]
 801c06e:	2f00      	cmp	r7, #0
 801c070:	d0a9      	beq.n	801bfc6 <__sflush_r+0x1a>
 801c072:	0793      	lsls	r3, r2, #30
 801c074:	680e      	ldr	r6, [r1, #0]
 801c076:	bf08      	it	eq
 801c078:	694b      	ldreq	r3, [r1, #20]
 801c07a:	600f      	str	r7, [r1, #0]
 801c07c:	bf18      	it	ne
 801c07e:	2300      	movne	r3, #0
 801c080:	eba6 0807 	sub.w	r8, r6, r7
 801c084:	608b      	str	r3, [r1, #8]
 801c086:	f1b8 0f00 	cmp.w	r8, #0
 801c08a:	dd9c      	ble.n	801bfc6 <__sflush_r+0x1a>
 801c08c:	6a21      	ldr	r1, [r4, #32]
 801c08e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c090:	4643      	mov	r3, r8
 801c092:	463a      	mov	r2, r7
 801c094:	4628      	mov	r0, r5
 801c096:	47b0      	blx	r6
 801c098:	2800      	cmp	r0, #0
 801c09a:	dc06      	bgt.n	801c0aa <__sflush_r+0xfe>
 801c09c:	89a3      	ldrh	r3, [r4, #12]
 801c09e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c0a2:	81a3      	strh	r3, [r4, #12]
 801c0a4:	f04f 30ff 	mov.w	r0, #4294967295
 801c0a8:	e78e      	b.n	801bfc8 <__sflush_r+0x1c>
 801c0aa:	4407      	add	r7, r0
 801c0ac:	eba8 0800 	sub.w	r8, r8, r0
 801c0b0:	e7e9      	b.n	801c086 <__sflush_r+0xda>
 801c0b2:	bf00      	nop
 801c0b4:	dfbffffe 	.word	0xdfbffffe

0801c0b8 <_fflush_r>:
 801c0b8:	b538      	push	{r3, r4, r5, lr}
 801c0ba:	690b      	ldr	r3, [r1, #16]
 801c0bc:	4605      	mov	r5, r0
 801c0be:	460c      	mov	r4, r1
 801c0c0:	b913      	cbnz	r3, 801c0c8 <_fflush_r+0x10>
 801c0c2:	2500      	movs	r5, #0
 801c0c4:	4628      	mov	r0, r5
 801c0c6:	bd38      	pop	{r3, r4, r5, pc}
 801c0c8:	b118      	cbz	r0, 801c0d2 <_fflush_r+0x1a>
 801c0ca:	6a03      	ldr	r3, [r0, #32]
 801c0cc:	b90b      	cbnz	r3, 801c0d2 <_fflush_r+0x1a>
 801c0ce:	f7fc fcd5 	bl	8018a7c <__sinit>
 801c0d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c0d6:	2b00      	cmp	r3, #0
 801c0d8:	d0f3      	beq.n	801c0c2 <_fflush_r+0xa>
 801c0da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c0dc:	07d0      	lsls	r0, r2, #31
 801c0de:	d404      	bmi.n	801c0ea <_fflush_r+0x32>
 801c0e0:	0599      	lsls	r1, r3, #22
 801c0e2:	d402      	bmi.n	801c0ea <_fflush_r+0x32>
 801c0e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c0e6:	f7fc ff85 	bl	8018ff4 <__retarget_lock_acquire_recursive>
 801c0ea:	4628      	mov	r0, r5
 801c0ec:	4621      	mov	r1, r4
 801c0ee:	f7ff ff5d 	bl	801bfac <__sflush_r>
 801c0f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c0f4:	07da      	lsls	r2, r3, #31
 801c0f6:	4605      	mov	r5, r0
 801c0f8:	d4e4      	bmi.n	801c0c4 <_fflush_r+0xc>
 801c0fa:	89a3      	ldrh	r3, [r4, #12]
 801c0fc:	059b      	lsls	r3, r3, #22
 801c0fe:	d4e1      	bmi.n	801c0c4 <_fflush_r+0xc>
 801c100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c102:	f7fc ff78 	bl	8018ff6 <__retarget_lock_release_recursive>
 801c106:	e7dd      	b.n	801c0c4 <_fflush_r+0xc>

0801c108 <__swhatbuf_r>:
 801c108:	b570      	push	{r4, r5, r6, lr}
 801c10a:	460c      	mov	r4, r1
 801c10c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c110:	2900      	cmp	r1, #0
 801c112:	b096      	sub	sp, #88	; 0x58
 801c114:	4615      	mov	r5, r2
 801c116:	461e      	mov	r6, r3
 801c118:	da0d      	bge.n	801c136 <__swhatbuf_r+0x2e>
 801c11a:	89a3      	ldrh	r3, [r4, #12]
 801c11c:	f013 0f80 	tst.w	r3, #128	; 0x80
 801c120:	f04f 0100 	mov.w	r1, #0
 801c124:	bf0c      	ite	eq
 801c126:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801c12a:	2340      	movne	r3, #64	; 0x40
 801c12c:	2000      	movs	r0, #0
 801c12e:	6031      	str	r1, [r6, #0]
 801c130:	602b      	str	r3, [r5, #0]
 801c132:	b016      	add	sp, #88	; 0x58
 801c134:	bd70      	pop	{r4, r5, r6, pc}
 801c136:	466a      	mov	r2, sp
 801c138:	f000 f8e8 	bl	801c30c <_fstat_r>
 801c13c:	2800      	cmp	r0, #0
 801c13e:	dbec      	blt.n	801c11a <__swhatbuf_r+0x12>
 801c140:	9901      	ldr	r1, [sp, #4]
 801c142:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801c146:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801c14a:	4259      	negs	r1, r3
 801c14c:	4159      	adcs	r1, r3
 801c14e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c152:	e7eb      	b.n	801c12c <__swhatbuf_r+0x24>

0801c154 <__smakebuf_r>:
 801c154:	898b      	ldrh	r3, [r1, #12]
 801c156:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c158:	079d      	lsls	r5, r3, #30
 801c15a:	4606      	mov	r6, r0
 801c15c:	460c      	mov	r4, r1
 801c15e:	d507      	bpl.n	801c170 <__smakebuf_r+0x1c>
 801c160:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c164:	6023      	str	r3, [r4, #0]
 801c166:	6123      	str	r3, [r4, #16]
 801c168:	2301      	movs	r3, #1
 801c16a:	6163      	str	r3, [r4, #20]
 801c16c:	b002      	add	sp, #8
 801c16e:	bd70      	pop	{r4, r5, r6, pc}
 801c170:	ab01      	add	r3, sp, #4
 801c172:	466a      	mov	r2, sp
 801c174:	f7ff ffc8 	bl	801c108 <__swhatbuf_r>
 801c178:	9900      	ldr	r1, [sp, #0]
 801c17a:	4605      	mov	r5, r0
 801c17c:	4630      	mov	r0, r6
 801c17e:	f7fb fd01 	bl	8017b84 <_malloc_r>
 801c182:	b948      	cbnz	r0, 801c198 <__smakebuf_r+0x44>
 801c184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c188:	059a      	lsls	r2, r3, #22
 801c18a:	d4ef      	bmi.n	801c16c <__smakebuf_r+0x18>
 801c18c:	f023 0303 	bic.w	r3, r3, #3
 801c190:	f043 0302 	orr.w	r3, r3, #2
 801c194:	81a3      	strh	r3, [r4, #12]
 801c196:	e7e3      	b.n	801c160 <__smakebuf_r+0xc>
 801c198:	89a3      	ldrh	r3, [r4, #12]
 801c19a:	6020      	str	r0, [r4, #0]
 801c19c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c1a0:	81a3      	strh	r3, [r4, #12]
 801c1a2:	9b00      	ldr	r3, [sp, #0]
 801c1a4:	6163      	str	r3, [r4, #20]
 801c1a6:	9b01      	ldr	r3, [sp, #4]
 801c1a8:	6120      	str	r0, [r4, #16]
 801c1aa:	b15b      	cbz	r3, 801c1c4 <__smakebuf_r+0x70>
 801c1ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c1b0:	4630      	mov	r0, r6
 801c1b2:	f000 f8bd 	bl	801c330 <_isatty_r>
 801c1b6:	b128      	cbz	r0, 801c1c4 <__smakebuf_r+0x70>
 801c1b8:	89a3      	ldrh	r3, [r4, #12]
 801c1ba:	f023 0303 	bic.w	r3, r3, #3
 801c1be:	f043 0301 	orr.w	r3, r3, #1
 801c1c2:	81a3      	strh	r3, [r4, #12]
 801c1c4:	89a3      	ldrh	r3, [r4, #12]
 801c1c6:	431d      	orrs	r5, r3
 801c1c8:	81a5      	strh	r5, [r4, #12]
 801c1ca:	e7cf      	b.n	801c16c <__smakebuf_r+0x18>

0801c1cc <__sccl>:
 801c1cc:	b570      	push	{r4, r5, r6, lr}
 801c1ce:	780b      	ldrb	r3, [r1, #0]
 801c1d0:	4604      	mov	r4, r0
 801c1d2:	2b5e      	cmp	r3, #94	; 0x5e
 801c1d4:	bf0b      	itete	eq
 801c1d6:	784b      	ldrbeq	r3, [r1, #1]
 801c1d8:	1c4a      	addne	r2, r1, #1
 801c1da:	1c8a      	addeq	r2, r1, #2
 801c1dc:	2100      	movne	r1, #0
 801c1de:	bf08      	it	eq
 801c1e0:	2101      	moveq	r1, #1
 801c1e2:	3801      	subs	r0, #1
 801c1e4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801c1e8:	f800 1f01 	strb.w	r1, [r0, #1]!
 801c1ec:	42a8      	cmp	r0, r5
 801c1ee:	d1fb      	bne.n	801c1e8 <__sccl+0x1c>
 801c1f0:	b90b      	cbnz	r3, 801c1f6 <__sccl+0x2a>
 801c1f2:	1e50      	subs	r0, r2, #1
 801c1f4:	bd70      	pop	{r4, r5, r6, pc}
 801c1f6:	f081 0101 	eor.w	r1, r1, #1
 801c1fa:	54e1      	strb	r1, [r4, r3]
 801c1fc:	4610      	mov	r0, r2
 801c1fe:	4602      	mov	r2, r0
 801c200:	f812 5b01 	ldrb.w	r5, [r2], #1
 801c204:	2d2d      	cmp	r5, #45	; 0x2d
 801c206:	d005      	beq.n	801c214 <__sccl+0x48>
 801c208:	2d5d      	cmp	r5, #93	; 0x5d
 801c20a:	d016      	beq.n	801c23a <__sccl+0x6e>
 801c20c:	2d00      	cmp	r5, #0
 801c20e:	d0f1      	beq.n	801c1f4 <__sccl+0x28>
 801c210:	462b      	mov	r3, r5
 801c212:	e7f2      	b.n	801c1fa <__sccl+0x2e>
 801c214:	7846      	ldrb	r6, [r0, #1]
 801c216:	2e5d      	cmp	r6, #93	; 0x5d
 801c218:	d0fa      	beq.n	801c210 <__sccl+0x44>
 801c21a:	42b3      	cmp	r3, r6
 801c21c:	dcf8      	bgt.n	801c210 <__sccl+0x44>
 801c21e:	3002      	adds	r0, #2
 801c220:	461a      	mov	r2, r3
 801c222:	3201      	adds	r2, #1
 801c224:	4296      	cmp	r6, r2
 801c226:	54a1      	strb	r1, [r4, r2]
 801c228:	dcfb      	bgt.n	801c222 <__sccl+0x56>
 801c22a:	1af2      	subs	r2, r6, r3
 801c22c:	3a01      	subs	r2, #1
 801c22e:	1c5d      	adds	r5, r3, #1
 801c230:	42b3      	cmp	r3, r6
 801c232:	bfa8      	it	ge
 801c234:	2200      	movge	r2, #0
 801c236:	18ab      	adds	r3, r5, r2
 801c238:	e7e1      	b.n	801c1fe <__sccl+0x32>
 801c23a:	4610      	mov	r0, r2
 801c23c:	e7da      	b.n	801c1f4 <__sccl+0x28>

0801c23e <__submore>:
 801c23e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c242:	460c      	mov	r4, r1
 801c244:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801c246:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c24a:	4299      	cmp	r1, r3
 801c24c:	d11d      	bne.n	801c28a <__submore+0x4c>
 801c24e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801c252:	f7fb fc97 	bl	8017b84 <_malloc_r>
 801c256:	b918      	cbnz	r0, 801c260 <__submore+0x22>
 801c258:	f04f 30ff 	mov.w	r0, #4294967295
 801c25c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c264:	63a3      	str	r3, [r4, #56]	; 0x38
 801c266:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801c26a:	6360      	str	r0, [r4, #52]	; 0x34
 801c26c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801c270:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801c274:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801c278:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801c27c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801c280:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801c284:	6020      	str	r0, [r4, #0]
 801c286:	2000      	movs	r0, #0
 801c288:	e7e8      	b.n	801c25c <__submore+0x1e>
 801c28a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801c28c:	0077      	lsls	r7, r6, #1
 801c28e:	463a      	mov	r2, r7
 801c290:	f000 fbed 	bl	801ca6e <_realloc_r>
 801c294:	4605      	mov	r5, r0
 801c296:	2800      	cmp	r0, #0
 801c298:	d0de      	beq.n	801c258 <__submore+0x1a>
 801c29a:	eb00 0806 	add.w	r8, r0, r6
 801c29e:	4601      	mov	r1, r0
 801c2a0:	4632      	mov	r2, r6
 801c2a2:	4640      	mov	r0, r8
 801c2a4:	f7fc fea8 	bl	8018ff8 <memcpy>
 801c2a8:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801c2ac:	f8c4 8000 	str.w	r8, [r4]
 801c2b0:	e7e9      	b.n	801c286 <__submore+0x48>

0801c2b2 <memmove>:
 801c2b2:	4288      	cmp	r0, r1
 801c2b4:	b510      	push	{r4, lr}
 801c2b6:	eb01 0402 	add.w	r4, r1, r2
 801c2ba:	d902      	bls.n	801c2c2 <memmove+0x10>
 801c2bc:	4284      	cmp	r4, r0
 801c2be:	4623      	mov	r3, r4
 801c2c0:	d807      	bhi.n	801c2d2 <memmove+0x20>
 801c2c2:	1e43      	subs	r3, r0, #1
 801c2c4:	42a1      	cmp	r1, r4
 801c2c6:	d008      	beq.n	801c2da <memmove+0x28>
 801c2c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c2cc:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c2d0:	e7f8      	b.n	801c2c4 <memmove+0x12>
 801c2d2:	4402      	add	r2, r0
 801c2d4:	4601      	mov	r1, r0
 801c2d6:	428a      	cmp	r2, r1
 801c2d8:	d100      	bne.n	801c2dc <memmove+0x2a>
 801c2da:	bd10      	pop	{r4, pc}
 801c2dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c2e0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c2e4:	e7f7      	b.n	801c2d6 <memmove+0x24>

0801c2e6 <strncmp>:
 801c2e6:	b510      	push	{r4, lr}
 801c2e8:	b16a      	cbz	r2, 801c306 <strncmp+0x20>
 801c2ea:	3901      	subs	r1, #1
 801c2ec:	1884      	adds	r4, r0, r2
 801c2ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c2f2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801c2f6:	429a      	cmp	r2, r3
 801c2f8:	d103      	bne.n	801c302 <strncmp+0x1c>
 801c2fa:	42a0      	cmp	r0, r4
 801c2fc:	d001      	beq.n	801c302 <strncmp+0x1c>
 801c2fe:	2a00      	cmp	r2, #0
 801c300:	d1f5      	bne.n	801c2ee <strncmp+0x8>
 801c302:	1ad0      	subs	r0, r2, r3
 801c304:	bd10      	pop	{r4, pc}
 801c306:	4610      	mov	r0, r2
 801c308:	e7fc      	b.n	801c304 <strncmp+0x1e>
	...

0801c30c <_fstat_r>:
 801c30c:	b538      	push	{r3, r4, r5, lr}
 801c30e:	4d07      	ldr	r5, [pc, #28]	; (801c32c <_fstat_r+0x20>)
 801c310:	2300      	movs	r3, #0
 801c312:	4604      	mov	r4, r0
 801c314:	4608      	mov	r0, r1
 801c316:	4611      	mov	r1, r2
 801c318:	602b      	str	r3, [r5, #0]
 801c31a:	f7e6 fefa 	bl	8003112 <_fstat>
 801c31e:	1c43      	adds	r3, r0, #1
 801c320:	d102      	bne.n	801c328 <_fstat_r+0x1c>
 801c322:	682b      	ldr	r3, [r5, #0]
 801c324:	b103      	cbz	r3, 801c328 <_fstat_r+0x1c>
 801c326:	6023      	str	r3, [r4, #0]
 801c328:	bd38      	pop	{r3, r4, r5, pc}
 801c32a:	bf00      	nop
 801c32c:	20007d88 	.word	0x20007d88

0801c330 <_isatty_r>:
 801c330:	b538      	push	{r3, r4, r5, lr}
 801c332:	4d06      	ldr	r5, [pc, #24]	; (801c34c <_isatty_r+0x1c>)
 801c334:	2300      	movs	r3, #0
 801c336:	4604      	mov	r4, r0
 801c338:	4608      	mov	r0, r1
 801c33a:	602b      	str	r3, [r5, #0]
 801c33c:	f7e6 fef9 	bl	8003132 <_isatty>
 801c340:	1c43      	adds	r3, r0, #1
 801c342:	d102      	bne.n	801c34a <_isatty_r+0x1a>
 801c344:	682b      	ldr	r3, [r5, #0]
 801c346:	b103      	cbz	r3, 801c34a <_isatty_r+0x1a>
 801c348:	6023      	str	r3, [r4, #0]
 801c34a:	bd38      	pop	{r3, r4, r5, pc}
 801c34c:	20007d88 	.word	0x20007d88

0801c350 <nan>:
 801c350:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801c358 <nan+0x8>
 801c354:	4770      	bx	lr
 801c356:	bf00      	nop
 801c358:	00000000 	.word	0x00000000
 801c35c:	7ff80000 	.word	0x7ff80000

0801c360 <__assert_func>:
 801c360:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c362:	4614      	mov	r4, r2
 801c364:	461a      	mov	r2, r3
 801c366:	4b09      	ldr	r3, [pc, #36]	; (801c38c <__assert_func+0x2c>)
 801c368:	681b      	ldr	r3, [r3, #0]
 801c36a:	4605      	mov	r5, r0
 801c36c:	68d8      	ldr	r0, [r3, #12]
 801c36e:	b14c      	cbz	r4, 801c384 <__assert_func+0x24>
 801c370:	4b07      	ldr	r3, [pc, #28]	; (801c390 <__assert_func+0x30>)
 801c372:	9100      	str	r1, [sp, #0]
 801c374:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c378:	4906      	ldr	r1, [pc, #24]	; (801c394 <__assert_func+0x34>)
 801c37a:	462b      	mov	r3, r5
 801c37c:	f000 fc28 	bl	801cbd0 <fiprintf>
 801c380:	f000 fc38 	bl	801cbf4 <abort>
 801c384:	4b04      	ldr	r3, [pc, #16]	; (801c398 <__assert_func+0x38>)
 801c386:	461c      	mov	r4, r3
 801c388:	e7f3      	b.n	801c372 <__assert_func+0x12>
 801c38a:	bf00      	nop
 801c38c:	20000198 	.word	0x20000198
 801c390:	0801de3d 	.word	0x0801de3d
 801c394:	0801de4a 	.word	0x0801de4a
 801c398:	0801de78 	.word	0x0801de78

0801c39c <rshift>:
 801c39c:	6903      	ldr	r3, [r0, #16]
 801c39e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801c3a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c3a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 801c3aa:	f100 0414 	add.w	r4, r0, #20
 801c3ae:	dd45      	ble.n	801c43c <rshift+0xa0>
 801c3b0:	f011 011f 	ands.w	r1, r1, #31
 801c3b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801c3b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801c3bc:	d10c      	bne.n	801c3d8 <rshift+0x3c>
 801c3be:	f100 0710 	add.w	r7, r0, #16
 801c3c2:	4629      	mov	r1, r5
 801c3c4:	42b1      	cmp	r1, r6
 801c3c6:	d334      	bcc.n	801c432 <rshift+0x96>
 801c3c8:	1a9b      	subs	r3, r3, r2
 801c3ca:	009b      	lsls	r3, r3, #2
 801c3cc:	1eea      	subs	r2, r5, #3
 801c3ce:	4296      	cmp	r6, r2
 801c3d0:	bf38      	it	cc
 801c3d2:	2300      	movcc	r3, #0
 801c3d4:	4423      	add	r3, r4
 801c3d6:	e015      	b.n	801c404 <rshift+0x68>
 801c3d8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801c3dc:	f1c1 0820 	rsb	r8, r1, #32
 801c3e0:	40cf      	lsrs	r7, r1
 801c3e2:	f105 0e04 	add.w	lr, r5, #4
 801c3e6:	46a1      	mov	r9, r4
 801c3e8:	4576      	cmp	r6, lr
 801c3ea:	46f4      	mov	ip, lr
 801c3ec:	d815      	bhi.n	801c41a <rshift+0x7e>
 801c3ee:	1a9a      	subs	r2, r3, r2
 801c3f0:	0092      	lsls	r2, r2, #2
 801c3f2:	3a04      	subs	r2, #4
 801c3f4:	3501      	adds	r5, #1
 801c3f6:	42ae      	cmp	r6, r5
 801c3f8:	bf38      	it	cc
 801c3fa:	2200      	movcc	r2, #0
 801c3fc:	18a3      	adds	r3, r4, r2
 801c3fe:	50a7      	str	r7, [r4, r2]
 801c400:	b107      	cbz	r7, 801c404 <rshift+0x68>
 801c402:	3304      	adds	r3, #4
 801c404:	1b1a      	subs	r2, r3, r4
 801c406:	42a3      	cmp	r3, r4
 801c408:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c40c:	bf08      	it	eq
 801c40e:	2300      	moveq	r3, #0
 801c410:	6102      	str	r2, [r0, #16]
 801c412:	bf08      	it	eq
 801c414:	6143      	streq	r3, [r0, #20]
 801c416:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c41a:	f8dc c000 	ldr.w	ip, [ip]
 801c41e:	fa0c fc08 	lsl.w	ip, ip, r8
 801c422:	ea4c 0707 	orr.w	r7, ip, r7
 801c426:	f849 7b04 	str.w	r7, [r9], #4
 801c42a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c42e:	40cf      	lsrs	r7, r1
 801c430:	e7da      	b.n	801c3e8 <rshift+0x4c>
 801c432:	f851 cb04 	ldr.w	ip, [r1], #4
 801c436:	f847 cf04 	str.w	ip, [r7, #4]!
 801c43a:	e7c3      	b.n	801c3c4 <rshift+0x28>
 801c43c:	4623      	mov	r3, r4
 801c43e:	e7e1      	b.n	801c404 <rshift+0x68>

0801c440 <__hexdig_fun>:
 801c440:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801c444:	2b09      	cmp	r3, #9
 801c446:	d802      	bhi.n	801c44e <__hexdig_fun+0xe>
 801c448:	3820      	subs	r0, #32
 801c44a:	b2c0      	uxtb	r0, r0
 801c44c:	4770      	bx	lr
 801c44e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801c452:	2b05      	cmp	r3, #5
 801c454:	d801      	bhi.n	801c45a <__hexdig_fun+0x1a>
 801c456:	3847      	subs	r0, #71	; 0x47
 801c458:	e7f7      	b.n	801c44a <__hexdig_fun+0xa>
 801c45a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801c45e:	2b05      	cmp	r3, #5
 801c460:	d801      	bhi.n	801c466 <__hexdig_fun+0x26>
 801c462:	3827      	subs	r0, #39	; 0x27
 801c464:	e7f1      	b.n	801c44a <__hexdig_fun+0xa>
 801c466:	2000      	movs	r0, #0
 801c468:	4770      	bx	lr
	...

0801c46c <__gethex>:
 801c46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c470:	4617      	mov	r7, r2
 801c472:	680a      	ldr	r2, [r1, #0]
 801c474:	b085      	sub	sp, #20
 801c476:	f102 0b02 	add.w	fp, r2, #2
 801c47a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801c47e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801c482:	4681      	mov	r9, r0
 801c484:	468a      	mov	sl, r1
 801c486:	9302      	str	r3, [sp, #8]
 801c488:	32fe      	adds	r2, #254	; 0xfe
 801c48a:	eb02 030b 	add.w	r3, r2, fp
 801c48e:	46d8      	mov	r8, fp
 801c490:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801c494:	9301      	str	r3, [sp, #4]
 801c496:	2830      	cmp	r0, #48	; 0x30
 801c498:	d0f7      	beq.n	801c48a <__gethex+0x1e>
 801c49a:	f7ff ffd1 	bl	801c440 <__hexdig_fun>
 801c49e:	4604      	mov	r4, r0
 801c4a0:	2800      	cmp	r0, #0
 801c4a2:	d138      	bne.n	801c516 <__gethex+0xaa>
 801c4a4:	49a7      	ldr	r1, [pc, #668]	; (801c744 <__gethex+0x2d8>)
 801c4a6:	2201      	movs	r2, #1
 801c4a8:	4640      	mov	r0, r8
 801c4aa:	f7ff ff1c 	bl	801c2e6 <strncmp>
 801c4ae:	4606      	mov	r6, r0
 801c4b0:	2800      	cmp	r0, #0
 801c4b2:	d169      	bne.n	801c588 <__gethex+0x11c>
 801c4b4:	f898 0001 	ldrb.w	r0, [r8, #1]
 801c4b8:	465d      	mov	r5, fp
 801c4ba:	f7ff ffc1 	bl	801c440 <__hexdig_fun>
 801c4be:	2800      	cmp	r0, #0
 801c4c0:	d064      	beq.n	801c58c <__gethex+0x120>
 801c4c2:	465a      	mov	r2, fp
 801c4c4:	7810      	ldrb	r0, [r2, #0]
 801c4c6:	2830      	cmp	r0, #48	; 0x30
 801c4c8:	4690      	mov	r8, r2
 801c4ca:	f102 0201 	add.w	r2, r2, #1
 801c4ce:	d0f9      	beq.n	801c4c4 <__gethex+0x58>
 801c4d0:	f7ff ffb6 	bl	801c440 <__hexdig_fun>
 801c4d4:	2301      	movs	r3, #1
 801c4d6:	fab0 f480 	clz	r4, r0
 801c4da:	0964      	lsrs	r4, r4, #5
 801c4dc:	465e      	mov	r6, fp
 801c4de:	9301      	str	r3, [sp, #4]
 801c4e0:	4642      	mov	r2, r8
 801c4e2:	4615      	mov	r5, r2
 801c4e4:	3201      	adds	r2, #1
 801c4e6:	7828      	ldrb	r0, [r5, #0]
 801c4e8:	f7ff ffaa 	bl	801c440 <__hexdig_fun>
 801c4ec:	2800      	cmp	r0, #0
 801c4ee:	d1f8      	bne.n	801c4e2 <__gethex+0x76>
 801c4f0:	4994      	ldr	r1, [pc, #592]	; (801c744 <__gethex+0x2d8>)
 801c4f2:	2201      	movs	r2, #1
 801c4f4:	4628      	mov	r0, r5
 801c4f6:	f7ff fef6 	bl	801c2e6 <strncmp>
 801c4fa:	b978      	cbnz	r0, 801c51c <__gethex+0xb0>
 801c4fc:	b946      	cbnz	r6, 801c510 <__gethex+0xa4>
 801c4fe:	1c6e      	adds	r6, r5, #1
 801c500:	4632      	mov	r2, r6
 801c502:	4615      	mov	r5, r2
 801c504:	3201      	adds	r2, #1
 801c506:	7828      	ldrb	r0, [r5, #0]
 801c508:	f7ff ff9a 	bl	801c440 <__hexdig_fun>
 801c50c:	2800      	cmp	r0, #0
 801c50e:	d1f8      	bne.n	801c502 <__gethex+0x96>
 801c510:	1b73      	subs	r3, r6, r5
 801c512:	009e      	lsls	r6, r3, #2
 801c514:	e004      	b.n	801c520 <__gethex+0xb4>
 801c516:	2400      	movs	r4, #0
 801c518:	4626      	mov	r6, r4
 801c51a:	e7e1      	b.n	801c4e0 <__gethex+0x74>
 801c51c:	2e00      	cmp	r6, #0
 801c51e:	d1f7      	bne.n	801c510 <__gethex+0xa4>
 801c520:	782b      	ldrb	r3, [r5, #0]
 801c522:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c526:	2b50      	cmp	r3, #80	; 0x50
 801c528:	d13d      	bne.n	801c5a6 <__gethex+0x13a>
 801c52a:	786b      	ldrb	r3, [r5, #1]
 801c52c:	2b2b      	cmp	r3, #43	; 0x2b
 801c52e:	d02f      	beq.n	801c590 <__gethex+0x124>
 801c530:	2b2d      	cmp	r3, #45	; 0x2d
 801c532:	d031      	beq.n	801c598 <__gethex+0x12c>
 801c534:	1c69      	adds	r1, r5, #1
 801c536:	f04f 0b00 	mov.w	fp, #0
 801c53a:	7808      	ldrb	r0, [r1, #0]
 801c53c:	f7ff ff80 	bl	801c440 <__hexdig_fun>
 801c540:	1e42      	subs	r2, r0, #1
 801c542:	b2d2      	uxtb	r2, r2
 801c544:	2a18      	cmp	r2, #24
 801c546:	d82e      	bhi.n	801c5a6 <__gethex+0x13a>
 801c548:	f1a0 0210 	sub.w	r2, r0, #16
 801c54c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c550:	f7ff ff76 	bl	801c440 <__hexdig_fun>
 801c554:	f100 3cff 	add.w	ip, r0, #4294967295
 801c558:	fa5f fc8c 	uxtb.w	ip, ip
 801c55c:	f1bc 0f18 	cmp.w	ip, #24
 801c560:	d91d      	bls.n	801c59e <__gethex+0x132>
 801c562:	f1bb 0f00 	cmp.w	fp, #0
 801c566:	d000      	beq.n	801c56a <__gethex+0xfe>
 801c568:	4252      	negs	r2, r2
 801c56a:	4416      	add	r6, r2
 801c56c:	f8ca 1000 	str.w	r1, [sl]
 801c570:	b1dc      	cbz	r4, 801c5aa <__gethex+0x13e>
 801c572:	9b01      	ldr	r3, [sp, #4]
 801c574:	2b00      	cmp	r3, #0
 801c576:	bf14      	ite	ne
 801c578:	f04f 0800 	movne.w	r8, #0
 801c57c:	f04f 0806 	moveq.w	r8, #6
 801c580:	4640      	mov	r0, r8
 801c582:	b005      	add	sp, #20
 801c584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c588:	4645      	mov	r5, r8
 801c58a:	4626      	mov	r6, r4
 801c58c:	2401      	movs	r4, #1
 801c58e:	e7c7      	b.n	801c520 <__gethex+0xb4>
 801c590:	f04f 0b00 	mov.w	fp, #0
 801c594:	1ca9      	adds	r1, r5, #2
 801c596:	e7d0      	b.n	801c53a <__gethex+0xce>
 801c598:	f04f 0b01 	mov.w	fp, #1
 801c59c:	e7fa      	b.n	801c594 <__gethex+0x128>
 801c59e:	230a      	movs	r3, #10
 801c5a0:	fb03 0002 	mla	r0, r3, r2, r0
 801c5a4:	e7d0      	b.n	801c548 <__gethex+0xdc>
 801c5a6:	4629      	mov	r1, r5
 801c5a8:	e7e0      	b.n	801c56c <__gethex+0x100>
 801c5aa:	eba5 0308 	sub.w	r3, r5, r8
 801c5ae:	3b01      	subs	r3, #1
 801c5b0:	4621      	mov	r1, r4
 801c5b2:	2b07      	cmp	r3, #7
 801c5b4:	dc0a      	bgt.n	801c5cc <__gethex+0x160>
 801c5b6:	4648      	mov	r0, r9
 801c5b8:	f7fd fbf8 	bl	8019dac <_Balloc>
 801c5bc:	4604      	mov	r4, r0
 801c5be:	b940      	cbnz	r0, 801c5d2 <__gethex+0x166>
 801c5c0:	4b61      	ldr	r3, [pc, #388]	; (801c748 <__gethex+0x2dc>)
 801c5c2:	4602      	mov	r2, r0
 801c5c4:	21e4      	movs	r1, #228	; 0xe4
 801c5c6:	4861      	ldr	r0, [pc, #388]	; (801c74c <__gethex+0x2e0>)
 801c5c8:	f7ff feca 	bl	801c360 <__assert_func>
 801c5cc:	3101      	adds	r1, #1
 801c5ce:	105b      	asrs	r3, r3, #1
 801c5d0:	e7ef      	b.n	801c5b2 <__gethex+0x146>
 801c5d2:	f100 0a14 	add.w	sl, r0, #20
 801c5d6:	2300      	movs	r3, #0
 801c5d8:	495a      	ldr	r1, [pc, #360]	; (801c744 <__gethex+0x2d8>)
 801c5da:	f8cd a004 	str.w	sl, [sp, #4]
 801c5de:	469b      	mov	fp, r3
 801c5e0:	45a8      	cmp	r8, r5
 801c5e2:	d342      	bcc.n	801c66a <__gethex+0x1fe>
 801c5e4:	9801      	ldr	r0, [sp, #4]
 801c5e6:	f840 bb04 	str.w	fp, [r0], #4
 801c5ea:	eba0 000a 	sub.w	r0, r0, sl
 801c5ee:	1080      	asrs	r0, r0, #2
 801c5f0:	6120      	str	r0, [r4, #16]
 801c5f2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801c5f6:	4658      	mov	r0, fp
 801c5f8:	f7fd fcca 	bl	8019f90 <__hi0bits>
 801c5fc:	683d      	ldr	r5, [r7, #0]
 801c5fe:	eba8 0000 	sub.w	r0, r8, r0
 801c602:	42a8      	cmp	r0, r5
 801c604:	dd59      	ble.n	801c6ba <__gethex+0x24e>
 801c606:	eba0 0805 	sub.w	r8, r0, r5
 801c60a:	4641      	mov	r1, r8
 801c60c:	4620      	mov	r0, r4
 801c60e:	f7fe f859 	bl	801a6c4 <__any_on>
 801c612:	4683      	mov	fp, r0
 801c614:	b1b8      	cbz	r0, 801c646 <__gethex+0x1da>
 801c616:	f108 33ff 	add.w	r3, r8, #4294967295
 801c61a:	1159      	asrs	r1, r3, #5
 801c61c:	f003 021f 	and.w	r2, r3, #31
 801c620:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801c624:	f04f 0b01 	mov.w	fp, #1
 801c628:	fa0b f202 	lsl.w	r2, fp, r2
 801c62c:	420a      	tst	r2, r1
 801c62e:	d00a      	beq.n	801c646 <__gethex+0x1da>
 801c630:	455b      	cmp	r3, fp
 801c632:	dd06      	ble.n	801c642 <__gethex+0x1d6>
 801c634:	f1a8 0102 	sub.w	r1, r8, #2
 801c638:	4620      	mov	r0, r4
 801c63a:	f7fe f843 	bl	801a6c4 <__any_on>
 801c63e:	2800      	cmp	r0, #0
 801c640:	d138      	bne.n	801c6b4 <__gethex+0x248>
 801c642:	f04f 0b02 	mov.w	fp, #2
 801c646:	4641      	mov	r1, r8
 801c648:	4620      	mov	r0, r4
 801c64a:	f7ff fea7 	bl	801c39c <rshift>
 801c64e:	4446      	add	r6, r8
 801c650:	68bb      	ldr	r3, [r7, #8]
 801c652:	42b3      	cmp	r3, r6
 801c654:	da41      	bge.n	801c6da <__gethex+0x26e>
 801c656:	4621      	mov	r1, r4
 801c658:	4648      	mov	r0, r9
 801c65a:	f7fd fbe7 	bl	8019e2c <_Bfree>
 801c65e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c660:	2300      	movs	r3, #0
 801c662:	6013      	str	r3, [r2, #0]
 801c664:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801c668:	e78a      	b.n	801c580 <__gethex+0x114>
 801c66a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801c66e:	2a2e      	cmp	r2, #46	; 0x2e
 801c670:	d014      	beq.n	801c69c <__gethex+0x230>
 801c672:	2b20      	cmp	r3, #32
 801c674:	d106      	bne.n	801c684 <__gethex+0x218>
 801c676:	9b01      	ldr	r3, [sp, #4]
 801c678:	f843 bb04 	str.w	fp, [r3], #4
 801c67c:	f04f 0b00 	mov.w	fp, #0
 801c680:	9301      	str	r3, [sp, #4]
 801c682:	465b      	mov	r3, fp
 801c684:	7828      	ldrb	r0, [r5, #0]
 801c686:	9303      	str	r3, [sp, #12]
 801c688:	f7ff feda 	bl	801c440 <__hexdig_fun>
 801c68c:	9b03      	ldr	r3, [sp, #12]
 801c68e:	f000 000f 	and.w	r0, r0, #15
 801c692:	4098      	lsls	r0, r3
 801c694:	ea4b 0b00 	orr.w	fp, fp, r0
 801c698:	3304      	adds	r3, #4
 801c69a:	e7a1      	b.n	801c5e0 <__gethex+0x174>
 801c69c:	45a8      	cmp	r8, r5
 801c69e:	d8e8      	bhi.n	801c672 <__gethex+0x206>
 801c6a0:	2201      	movs	r2, #1
 801c6a2:	4628      	mov	r0, r5
 801c6a4:	9303      	str	r3, [sp, #12]
 801c6a6:	f7ff fe1e 	bl	801c2e6 <strncmp>
 801c6aa:	4926      	ldr	r1, [pc, #152]	; (801c744 <__gethex+0x2d8>)
 801c6ac:	9b03      	ldr	r3, [sp, #12]
 801c6ae:	2800      	cmp	r0, #0
 801c6b0:	d1df      	bne.n	801c672 <__gethex+0x206>
 801c6b2:	e795      	b.n	801c5e0 <__gethex+0x174>
 801c6b4:	f04f 0b03 	mov.w	fp, #3
 801c6b8:	e7c5      	b.n	801c646 <__gethex+0x1da>
 801c6ba:	da0b      	bge.n	801c6d4 <__gethex+0x268>
 801c6bc:	eba5 0800 	sub.w	r8, r5, r0
 801c6c0:	4621      	mov	r1, r4
 801c6c2:	4642      	mov	r2, r8
 801c6c4:	4648      	mov	r0, r9
 801c6c6:	f7fd fdcb 	bl	801a260 <__lshift>
 801c6ca:	eba6 0608 	sub.w	r6, r6, r8
 801c6ce:	4604      	mov	r4, r0
 801c6d0:	f100 0a14 	add.w	sl, r0, #20
 801c6d4:	f04f 0b00 	mov.w	fp, #0
 801c6d8:	e7ba      	b.n	801c650 <__gethex+0x1e4>
 801c6da:	687b      	ldr	r3, [r7, #4]
 801c6dc:	42b3      	cmp	r3, r6
 801c6de:	dd73      	ble.n	801c7c8 <__gethex+0x35c>
 801c6e0:	1b9e      	subs	r6, r3, r6
 801c6e2:	42b5      	cmp	r5, r6
 801c6e4:	dc34      	bgt.n	801c750 <__gethex+0x2e4>
 801c6e6:	68fb      	ldr	r3, [r7, #12]
 801c6e8:	2b02      	cmp	r3, #2
 801c6ea:	d023      	beq.n	801c734 <__gethex+0x2c8>
 801c6ec:	2b03      	cmp	r3, #3
 801c6ee:	d025      	beq.n	801c73c <__gethex+0x2d0>
 801c6f0:	2b01      	cmp	r3, #1
 801c6f2:	d115      	bne.n	801c720 <__gethex+0x2b4>
 801c6f4:	42b5      	cmp	r5, r6
 801c6f6:	d113      	bne.n	801c720 <__gethex+0x2b4>
 801c6f8:	2d01      	cmp	r5, #1
 801c6fa:	d10b      	bne.n	801c714 <__gethex+0x2a8>
 801c6fc:	9a02      	ldr	r2, [sp, #8]
 801c6fe:	687b      	ldr	r3, [r7, #4]
 801c700:	6013      	str	r3, [r2, #0]
 801c702:	2301      	movs	r3, #1
 801c704:	6123      	str	r3, [r4, #16]
 801c706:	f8ca 3000 	str.w	r3, [sl]
 801c70a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c70c:	f04f 0862 	mov.w	r8, #98	; 0x62
 801c710:	601c      	str	r4, [r3, #0]
 801c712:	e735      	b.n	801c580 <__gethex+0x114>
 801c714:	1e69      	subs	r1, r5, #1
 801c716:	4620      	mov	r0, r4
 801c718:	f7fd ffd4 	bl	801a6c4 <__any_on>
 801c71c:	2800      	cmp	r0, #0
 801c71e:	d1ed      	bne.n	801c6fc <__gethex+0x290>
 801c720:	4621      	mov	r1, r4
 801c722:	4648      	mov	r0, r9
 801c724:	f7fd fb82 	bl	8019e2c <_Bfree>
 801c728:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c72a:	2300      	movs	r3, #0
 801c72c:	6013      	str	r3, [r2, #0]
 801c72e:	f04f 0850 	mov.w	r8, #80	; 0x50
 801c732:	e725      	b.n	801c580 <__gethex+0x114>
 801c734:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c736:	2b00      	cmp	r3, #0
 801c738:	d1f2      	bne.n	801c720 <__gethex+0x2b4>
 801c73a:	e7df      	b.n	801c6fc <__gethex+0x290>
 801c73c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c73e:	2b00      	cmp	r3, #0
 801c740:	d1dc      	bne.n	801c6fc <__gethex+0x290>
 801c742:	e7ed      	b.n	801c720 <__gethex+0x2b4>
 801c744:	0801dcb4 	.word	0x0801dcb4
 801c748:	0801db4b 	.word	0x0801db4b
 801c74c:	0801de79 	.word	0x0801de79
 801c750:	f106 38ff 	add.w	r8, r6, #4294967295
 801c754:	f1bb 0f00 	cmp.w	fp, #0
 801c758:	d133      	bne.n	801c7c2 <__gethex+0x356>
 801c75a:	f1b8 0f00 	cmp.w	r8, #0
 801c75e:	d004      	beq.n	801c76a <__gethex+0x2fe>
 801c760:	4641      	mov	r1, r8
 801c762:	4620      	mov	r0, r4
 801c764:	f7fd ffae 	bl	801a6c4 <__any_on>
 801c768:	4683      	mov	fp, r0
 801c76a:	ea4f 1268 	mov.w	r2, r8, asr #5
 801c76e:	2301      	movs	r3, #1
 801c770:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801c774:	f008 081f 	and.w	r8, r8, #31
 801c778:	fa03 f308 	lsl.w	r3, r3, r8
 801c77c:	4213      	tst	r3, r2
 801c77e:	4631      	mov	r1, r6
 801c780:	4620      	mov	r0, r4
 801c782:	bf18      	it	ne
 801c784:	f04b 0b02 	orrne.w	fp, fp, #2
 801c788:	1bad      	subs	r5, r5, r6
 801c78a:	f7ff fe07 	bl	801c39c <rshift>
 801c78e:	687e      	ldr	r6, [r7, #4]
 801c790:	f04f 0802 	mov.w	r8, #2
 801c794:	f1bb 0f00 	cmp.w	fp, #0
 801c798:	d04a      	beq.n	801c830 <__gethex+0x3c4>
 801c79a:	68fb      	ldr	r3, [r7, #12]
 801c79c:	2b02      	cmp	r3, #2
 801c79e:	d016      	beq.n	801c7ce <__gethex+0x362>
 801c7a0:	2b03      	cmp	r3, #3
 801c7a2:	d018      	beq.n	801c7d6 <__gethex+0x36a>
 801c7a4:	2b01      	cmp	r3, #1
 801c7a6:	d109      	bne.n	801c7bc <__gethex+0x350>
 801c7a8:	f01b 0f02 	tst.w	fp, #2
 801c7ac:	d006      	beq.n	801c7bc <__gethex+0x350>
 801c7ae:	f8da 3000 	ldr.w	r3, [sl]
 801c7b2:	ea4b 0b03 	orr.w	fp, fp, r3
 801c7b6:	f01b 0f01 	tst.w	fp, #1
 801c7ba:	d10f      	bne.n	801c7dc <__gethex+0x370>
 801c7bc:	f048 0810 	orr.w	r8, r8, #16
 801c7c0:	e036      	b.n	801c830 <__gethex+0x3c4>
 801c7c2:	f04f 0b01 	mov.w	fp, #1
 801c7c6:	e7d0      	b.n	801c76a <__gethex+0x2fe>
 801c7c8:	f04f 0801 	mov.w	r8, #1
 801c7cc:	e7e2      	b.n	801c794 <__gethex+0x328>
 801c7ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c7d0:	f1c3 0301 	rsb	r3, r3, #1
 801c7d4:	930f      	str	r3, [sp, #60]	; 0x3c
 801c7d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c7d8:	2b00      	cmp	r3, #0
 801c7da:	d0ef      	beq.n	801c7bc <__gethex+0x350>
 801c7dc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801c7e0:	f104 0214 	add.w	r2, r4, #20
 801c7e4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801c7e8:	9301      	str	r3, [sp, #4]
 801c7ea:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801c7ee:	2300      	movs	r3, #0
 801c7f0:	4694      	mov	ip, r2
 801c7f2:	f852 1b04 	ldr.w	r1, [r2], #4
 801c7f6:	f1b1 3fff 	cmp.w	r1, #4294967295
 801c7fa:	d01e      	beq.n	801c83a <__gethex+0x3ce>
 801c7fc:	3101      	adds	r1, #1
 801c7fe:	f8cc 1000 	str.w	r1, [ip]
 801c802:	f1b8 0f02 	cmp.w	r8, #2
 801c806:	f104 0214 	add.w	r2, r4, #20
 801c80a:	d13d      	bne.n	801c888 <__gethex+0x41c>
 801c80c:	683b      	ldr	r3, [r7, #0]
 801c80e:	3b01      	subs	r3, #1
 801c810:	42ab      	cmp	r3, r5
 801c812:	d10b      	bne.n	801c82c <__gethex+0x3c0>
 801c814:	1169      	asrs	r1, r5, #5
 801c816:	2301      	movs	r3, #1
 801c818:	f005 051f 	and.w	r5, r5, #31
 801c81c:	fa03 f505 	lsl.w	r5, r3, r5
 801c820:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c824:	421d      	tst	r5, r3
 801c826:	bf18      	it	ne
 801c828:	f04f 0801 	movne.w	r8, #1
 801c82c:	f048 0820 	orr.w	r8, r8, #32
 801c830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c832:	601c      	str	r4, [r3, #0]
 801c834:	9b02      	ldr	r3, [sp, #8]
 801c836:	601e      	str	r6, [r3, #0]
 801c838:	e6a2      	b.n	801c580 <__gethex+0x114>
 801c83a:	4290      	cmp	r0, r2
 801c83c:	f842 3c04 	str.w	r3, [r2, #-4]
 801c840:	d8d6      	bhi.n	801c7f0 <__gethex+0x384>
 801c842:	68a2      	ldr	r2, [r4, #8]
 801c844:	4593      	cmp	fp, r2
 801c846:	db17      	blt.n	801c878 <__gethex+0x40c>
 801c848:	6861      	ldr	r1, [r4, #4]
 801c84a:	4648      	mov	r0, r9
 801c84c:	3101      	adds	r1, #1
 801c84e:	f7fd faad 	bl	8019dac <_Balloc>
 801c852:	4682      	mov	sl, r0
 801c854:	b918      	cbnz	r0, 801c85e <__gethex+0x3f2>
 801c856:	4b1b      	ldr	r3, [pc, #108]	; (801c8c4 <__gethex+0x458>)
 801c858:	4602      	mov	r2, r0
 801c85a:	2184      	movs	r1, #132	; 0x84
 801c85c:	e6b3      	b.n	801c5c6 <__gethex+0x15a>
 801c85e:	6922      	ldr	r2, [r4, #16]
 801c860:	3202      	adds	r2, #2
 801c862:	f104 010c 	add.w	r1, r4, #12
 801c866:	0092      	lsls	r2, r2, #2
 801c868:	300c      	adds	r0, #12
 801c86a:	f7fc fbc5 	bl	8018ff8 <memcpy>
 801c86e:	4621      	mov	r1, r4
 801c870:	4648      	mov	r0, r9
 801c872:	f7fd fadb 	bl	8019e2c <_Bfree>
 801c876:	4654      	mov	r4, sl
 801c878:	6922      	ldr	r2, [r4, #16]
 801c87a:	1c51      	adds	r1, r2, #1
 801c87c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801c880:	6121      	str	r1, [r4, #16]
 801c882:	2101      	movs	r1, #1
 801c884:	6151      	str	r1, [r2, #20]
 801c886:	e7bc      	b.n	801c802 <__gethex+0x396>
 801c888:	6921      	ldr	r1, [r4, #16]
 801c88a:	4559      	cmp	r1, fp
 801c88c:	dd0b      	ble.n	801c8a6 <__gethex+0x43a>
 801c88e:	2101      	movs	r1, #1
 801c890:	4620      	mov	r0, r4
 801c892:	f7ff fd83 	bl	801c39c <rshift>
 801c896:	68bb      	ldr	r3, [r7, #8]
 801c898:	3601      	adds	r6, #1
 801c89a:	42b3      	cmp	r3, r6
 801c89c:	f6ff aedb 	blt.w	801c656 <__gethex+0x1ea>
 801c8a0:	f04f 0801 	mov.w	r8, #1
 801c8a4:	e7c2      	b.n	801c82c <__gethex+0x3c0>
 801c8a6:	f015 051f 	ands.w	r5, r5, #31
 801c8aa:	d0f9      	beq.n	801c8a0 <__gethex+0x434>
 801c8ac:	9b01      	ldr	r3, [sp, #4]
 801c8ae:	441a      	add	r2, r3
 801c8b0:	f1c5 0520 	rsb	r5, r5, #32
 801c8b4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801c8b8:	f7fd fb6a 	bl	8019f90 <__hi0bits>
 801c8bc:	42a8      	cmp	r0, r5
 801c8be:	dbe6      	blt.n	801c88e <__gethex+0x422>
 801c8c0:	e7ee      	b.n	801c8a0 <__gethex+0x434>
 801c8c2:	bf00      	nop
 801c8c4:	0801db4b 	.word	0x0801db4b

0801c8c8 <L_shift>:
 801c8c8:	f1c2 0208 	rsb	r2, r2, #8
 801c8cc:	0092      	lsls	r2, r2, #2
 801c8ce:	b570      	push	{r4, r5, r6, lr}
 801c8d0:	f1c2 0620 	rsb	r6, r2, #32
 801c8d4:	6843      	ldr	r3, [r0, #4]
 801c8d6:	6804      	ldr	r4, [r0, #0]
 801c8d8:	fa03 f506 	lsl.w	r5, r3, r6
 801c8dc:	432c      	orrs	r4, r5
 801c8de:	40d3      	lsrs	r3, r2
 801c8e0:	6004      	str	r4, [r0, #0]
 801c8e2:	f840 3f04 	str.w	r3, [r0, #4]!
 801c8e6:	4288      	cmp	r0, r1
 801c8e8:	d3f4      	bcc.n	801c8d4 <L_shift+0xc>
 801c8ea:	bd70      	pop	{r4, r5, r6, pc}

0801c8ec <__match>:
 801c8ec:	b530      	push	{r4, r5, lr}
 801c8ee:	6803      	ldr	r3, [r0, #0]
 801c8f0:	3301      	adds	r3, #1
 801c8f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c8f6:	b914      	cbnz	r4, 801c8fe <__match+0x12>
 801c8f8:	6003      	str	r3, [r0, #0]
 801c8fa:	2001      	movs	r0, #1
 801c8fc:	bd30      	pop	{r4, r5, pc}
 801c8fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c902:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801c906:	2d19      	cmp	r5, #25
 801c908:	bf98      	it	ls
 801c90a:	3220      	addls	r2, #32
 801c90c:	42a2      	cmp	r2, r4
 801c90e:	d0f0      	beq.n	801c8f2 <__match+0x6>
 801c910:	2000      	movs	r0, #0
 801c912:	e7f3      	b.n	801c8fc <__match+0x10>

0801c914 <__hexnan>:
 801c914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c918:	680b      	ldr	r3, [r1, #0]
 801c91a:	6801      	ldr	r1, [r0, #0]
 801c91c:	115e      	asrs	r6, r3, #5
 801c91e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801c922:	f013 031f 	ands.w	r3, r3, #31
 801c926:	b087      	sub	sp, #28
 801c928:	bf18      	it	ne
 801c92a:	3604      	addne	r6, #4
 801c92c:	2500      	movs	r5, #0
 801c92e:	1f37      	subs	r7, r6, #4
 801c930:	4682      	mov	sl, r0
 801c932:	4690      	mov	r8, r2
 801c934:	9301      	str	r3, [sp, #4]
 801c936:	f846 5c04 	str.w	r5, [r6, #-4]
 801c93a:	46b9      	mov	r9, r7
 801c93c:	463c      	mov	r4, r7
 801c93e:	9502      	str	r5, [sp, #8]
 801c940:	46ab      	mov	fp, r5
 801c942:	784a      	ldrb	r2, [r1, #1]
 801c944:	1c4b      	adds	r3, r1, #1
 801c946:	9303      	str	r3, [sp, #12]
 801c948:	b342      	cbz	r2, 801c99c <__hexnan+0x88>
 801c94a:	4610      	mov	r0, r2
 801c94c:	9105      	str	r1, [sp, #20]
 801c94e:	9204      	str	r2, [sp, #16]
 801c950:	f7ff fd76 	bl	801c440 <__hexdig_fun>
 801c954:	2800      	cmp	r0, #0
 801c956:	d14f      	bne.n	801c9f8 <__hexnan+0xe4>
 801c958:	9a04      	ldr	r2, [sp, #16]
 801c95a:	9905      	ldr	r1, [sp, #20]
 801c95c:	2a20      	cmp	r2, #32
 801c95e:	d818      	bhi.n	801c992 <__hexnan+0x7e>
 801c960:	9b02      	ldr	r3, [sp, #8]
 801c962:	459b      	cmp	fp, r3
 801c964:	dd13      	ble.n	801c98e <__hexnan+0x7a>
 801c966:	454c      	cmp	r4, r9
 801c968:	d206      	bcs.n	801c978 <__hexnan+0x64>
 801c96a:	2d07      	cmp	r5, #7
 801c96c:	dc04      	bgt.n	801c978 <__hexnan+0x64>
 801c96e:	462a      	mov	r2, r5
 801c970:	4649      	mov	r1, r9
 801c972:	4620      	mov	r0, r4
 801c974:	f7ff ffa8 	bl	801c8c8 <L_shift>
 801c978:	4544      	cmp	r4, r8
 801c97a:	d950      	bls.n	801ca1e <__hexnan+0x10a>
 801c97c:	2300      	movs	r3, #0
 801c97e:	f1a4 0904 	sub.w	r9, r4, #4
 801c982:	f844 3c04 	str.w	r3, [r4, #-4]
 801c986:	f8cd b008 	str.w	fp, [sp, #8]
 801c98a:	464c      	mov	r4, r9
 801c98c:	461d      	mov	r5, r3
 801c98e:	9903      	ldr	r1, [sp, #12]
 801c990:	e7d7      	b.n	801c942 <__hexnan+0x2e>
 801c992:	2a29      	cmp	r2, #41	; 0x29
 801c994:	d155      	bne.n	801ca42 <__hexnan+0x12e>
 801c996:	3102      	adds	r1, #2
 801c998:	f8ca 1000 	str.w	r1, [sl]
 801c99c:	f1bb 0f00 	cmp.w	fp, #0
 801c9a0:	d04f      	beq.n	801ca42 <__hexnan+0x12e>
 801c9a2:	454c      	cmp	r4, r9
 801c9a4:	d206      	bcs.n	801c9b4 <__hexnan+0xa0>
 801c9a6:	2d07      	cmp	r5, #7
 801c9a8:	dc04      	bgt.n	801c9b4 <__hexnan+0xa0>
 801c9aa:	462a      	mov	r2, r5
 801c9ac:	4649      	mov	r1, r9
 801c9ae:	4620      	mov	r0, r4
 801c9b0:	f7ff ff8a 	bl	801c8c8 <L_shift>
 801c9b4:	4544      	cmp	r4, r8
 801c9b6:	d934      	bls.n	801ca22 <__hexnan+0x10e>
 801c9b8:	f1a8 0204 	sub.w	r2, r8, #4
 801c9bc:	4623      	mov	r3, r4
 801c9be:	f853 1b04 	ldr.w	r1, [r3], #4
 801c9c2:	f842 1f04 	str.w	r1, [r2, #4]!
 801c9c6:	429f      	cmp	r7, r3
 801c9c8:	d2f9      	bcs.n	801c9be <__hexnan+0xaa>
 801c9ca:	1b3b      	subs	r3, r7, r4
 801c9cc:	f023 0303 	bic.w	r3, r3, #3
 801c9d0:	3304      	adds	r3, #4
 801c9d2:	3e03      	subs	r6, #3
 801c9d4:	3401      	adds	r4, #1
 801c9d6:	42a6      	cmp	r6, r4
 801c9d8:	bf38      	it	cc
 801c9da:	2304      	movcc	r3, #4
 801c9dc:	4443      	add	r3, r8
 801c9de:	2200      	movs	r2, #0
 801c9e0:	f843 2b04 	str.w	r2, [r3], #4
 801c9e4:	429f      	cmp	r7, r3
 801c9e6:	d2fb      	bcs.n	801c9e0 <__hexnan+0xcc>
 801c9e8:	683b      	ldr	r3, [r7, #0]
 801c9ea:	b91b      	cbnz	r3, 801c9f4 <__hexnan+0xe0>
 801c9ec:	4547      	cmp	r7, r8
 801c9ee:	d126      	bne.n	801ca3e <__hexnan+0x12a>
 801c9f0:	2301      	movs	r3, #1
 801c9f2:	603b      	str	r3, [r7, #0]
 801c9f4:	2005      	movs	r0, #5
 801c9f6:	e025      	b.n	801ca44 <__hexnan+0x130>
 801c9f8:	3501      	adds	r5, #1
 801c9fa:	2d08      	cmp	r5, #8
 801c9fc:	f10b 0b01 	add.w	fp, fp, #1
 801ca00:	dd06      	ble.n	801ca10 <__hexnan+0xfc>
 801ca02:	4544      	cmp	r4, r8
 801ca04:	d9c3      	bls.n	801c98e <__hexnan+0x7a>
 801ca06:	2300      	movs	r3, #0
 801ca08:	f844 3c04 	str.w	r3, [r4, #-4]
 801ca0c:	2501      	movs	r5, #1
 801ca0e:	3c04      	subs	r4, #4
 801ca10:	6822      	ldr	r2, [r4, #0]
 801ca12:	f000 000f 	and.w	r0, r0, #15
 801ca16:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801ca1a:	6020      	str	r0, [r4, #0]
 801ca1c:	e7b7      	b.n	801c98e <__hexnan+0x7a>
 801ca1e:	2508      	movs	r5, #8
 801ca20:	e7b5      	b.n	801c98e <__hexnan+0x7a>
 801ca22:	9b01      	ldr	r3, [sp, #4]
 801ca24:	2b00      	cmp	r3, #0
 801ca26:	d0df      	beq.n	801c9e8 <__hexnan+0xd4>
 801ca28:	f1c3 0320 	rsb	r3, r3, #32
 801ca2c:	f04f 32ff 	mov.w	r2, #4294967295
 801ca30:	40da      	lsrs	r2, r3
 801ca32:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801ca36:	4013      	ands	r3, r2
 801ca38:	f846 3c04 	str.w	r3, [r6, #-4]
 801ca3c:	e7d4      	b.n	801c9e8 <__hexnan+0xd4>
 801ca3e:	3f04      	subs	r7, #4
 801ca40:	e7d2      	b.n	801c9e8 <__hexnan+0xd4>
 801ca42:	2004      	movs	r0, #4
 801ca44:	b007      	add	sp, #28
 801ca46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ca4a <__ascii_mbtowc>:
 801ca4a:	b082      	sub	sp, #8
 801ca4c:	b901      	cbnz	r1, 801ca50 <__ascii_mbtowc+0x6>
 801ca4e:	a901      	add	r1, sp, #4
 801ca50:	b142      	cbz	r2, 801ca64 <__ascii_mbtowc+0x1a>
 801ca52:	b14b      	cbz	r3, 801ca68 <__ascii_mbtowc+0x1e>
 801ca54:	7813      	ldrb	r3, [r2, #0]
 801ca56:	600b      	str	r3, [r1, #0]
 801ca58:	7812      	ldrb	r2, [r2, #0]
 801ca5a:	1e10      	subs	r0, r2, #0
 801ca5c:	bf18      	it	ne
 801ca5e:	2001      	movne	r0, #1
 801ca60:	b002      	add	sp, #8
 801ca62:	4770      	bx	lr
 801ca64:	4610      	mov	r0, r2
 801ca66:	e7fb      	b.n	801ca60 <__ascii_mbtowc+0x16>
 801ca68:	f06f 0001 	mvn.w	r0, #1
 801ca6c:	e7f8      	b.n	801ca60 <__ascii_mbtowc+0x16>

0801ca6e <_realloc_r>:
 801ca6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca72:	4680      	mov	r8, r0
 801ca74:	4614      	mov	r4, r2
 801ca76:	460e      	mov	r6, r1
 801ca78:	b921      	cbnz	r1, 801ca84 <_realloc_r+0x16>
 801ca7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ca7e:	4611      	mov	r1, r2
 801ca80:	f7fb b880 	b.w	8017b84 <_malloc_r>
 801ca84:	b92a      	cbnz	r2, 801ca92 <_realloc_r+0x24>
 801ca86:	f7fd f945 	bl	8019d14 <_free_r>
 801ca8a:	4625      	mov	r5, r4
 801ca8c:	4628      	mov	r0, r5
 801ca8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ca92:	f000 f8b6 	bl	801cc02 <_malloc_usable_size_r>
 801ca96:	4284      	cmp	r4, r0
 801ca98:	4607      	mov	r7, r0
 801ca9a:	d802      	bhi.n	801caa2 <_realloc_r+0x34>
 801ca9c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801caa0:	d812      	bhi.n	801cac8 <_realloc_r+0x5a>
 801caa2:	4621      	mov	r1, r4
 801caa4:	4640      	mov	r0, r8
 801caa6:	f7fb f86d 	bl	8017b84 <_malloc_r>
 801caaa:	4605      	mov	r5, r0
 801caac:	2800      	cmp	r0, #0
 801caae:	d0ed      	beq.n	801ca8c <_realloc_r+0x1e>
 801cab0:	42bc      	cmp	r4, r7
 801cab2:	4622      	mov	r2, r4
 801cab4:	4631      	mov	r1, r6
 801cab6:	bf28      	it	cs
 801cab8:	463a      	movcs	r2, r7
 801caba:	f7fc fa9d 	bl	8018ff8 <memcpy>
 801cabe:	4631      	mov	r1, r6
 801cac0:	4640      	mov	r0, r8
 801cac2:	f7fd f927 	bl	8019d14 <_free_r>
 801cac6:	e7e1      	b.n	801ca8c <_realloc_r+0x1e>
 801cac8:	4635      	mov	r5, r6
 801caca:	e7df      	b.n	801ca8c <_realloc_r+0x1e>

0801cacc <_strtoul_l.constprop.0>:
 801cacc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cad0:	4f36      	ldr	r7, [pc, #216]	; (801cbac <_strtoul_l.constprop.0+0xe0>)
 801cad2:	4686      	mov	lr, r0
 801cad4:	460d      	mov	r5, r1
 801cad6:	4628      	mov	r0, r5
 801cad8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cadc:	5d3e      	ldrb	r6, [r7, r4]
 801cade:	f016 0608 	ands.w	r6, r6, #8
 801cae2:	d1f8      	bne.n	801cad6 <_strtoul_l.constprop.0+0xa>
 801cae4:	2c2d      	cmp	r4, #45	; 0x2d
 801cae6:	d130      	bne.n	801cb4a <_strtoul_l.constprop.0+0x7e>
 801cae8:	782c      	ldrb	r4, [r5, #0]
 801caea:	2601      	movs	r6, #1
 801caec:	1c85      	adds	r5, r0, #2
 801caee:	2b00      	cmp	r3, #0
 801caf0:	d057      	beq.n	801cba2 <_strtoul_l.constprop.0+0xd6>
 801caf2:	2b10      	cmp	r3, #16
 801caf4:	d109      	bne.n	801cb0a <_strtoul_l.constprop.0+0x3e>
 801caf6:	2c30      	cmp	r4, #48	; 0x30
 801caf8:	d107      	bne.n	801cb0a <_strtoul_l.constprop.0+0x3e>
 801cafa:	7828      	ldrb	r0, [r5, #0]
 801cafc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801cb00:	2858      	cmp	r0, #88	; 0x58
 801cb02:	d149      	bne.n	801cb98 <_strtoul_l.constprop.0+0xcc>
 801cb04:	786c      	ldrb	r4, [r5, #1]
 801cb06:	2310      	movs	r3, #16
 801cb08:	3502      	adds	r5, #2
 801cb0a:	f04f 38ff 	mov.w	r8, #4294967295
 801cb0e:	2700      	movs	r7, #0
 801cb10:	fbb8 f8f3 	udiv	r8, r8, r3
 801cb14:	fb03 f908 	mul.w	r9, r3, r8
 801cb18:	ea6f 0909 	mvn.w	r9, r9
 801cb1c:	4638      	mov	r0, r7
 801cb1e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801cb22:	f1bc 0f09 	cmp.w	ip, #9
 801cb26:	d815      	bhi.n	801cb54 <_strtoul_l.constprop.0+0x88>
 801cb28:	4664      	mov	r4, ip
 801cb2a:	42a3      	cmp	r3, r4
 801cb2c:	dd23      	ble.n	801cb76 <_strtoul_l.constprop.0+0xaa>
 801cb2e:	f1b7 3fff 	cmp.w	r7, #4294967295
 801cb32:	d007      	beq.n	801cb44 <_strtoul_l.constprop.0+0x78>
 801cb34:	4580      	cmp	r8, r0
 801cb36:	d31b      	bcc.n	801cb70 <_strtoul_l.constprop.0+0xa4>
 801cb38:	d101      	bne.n	801cb3e <_strtoul_l.constprop.0+0x72>
 801cb3a:	45a1      	cmp	r9, r4
 801cb3c:	db18      	blt.n	801cb70 <_strtoul_l.constprop.0+0xa4>
 801cb3e:	fb00 4003 	mla	r0, r0, r3, r4
 801cb42:	2701      	movs	r7, #1
 801cb44:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cb48:	e7e9      	b.n	801cb1e <_strtoul_l.constprop.0+0x52>
 801cb4a:	2c2b      	cmp	r4, #43	; 0x2b
 801cb4c:	bf04      	itt	eq
 801cb4e:	782c      	ldrbeq	r4, [r5, #0]
 801cb50:	1c85      	addeq	r5, r0, #2
 801cb52:	e7cc      	b.n	801caee <_strtoul_l.constprop.0+0x22>
 801cb54:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801cb58:	f1bc 0f19 	cmp.w	ip, #25
 801cb5c:	d801      	bhi.n	801cb62 <_strtoul_l.constprop.0+0x96>
 801cb5e:	3c37      	subs	r4, #55	; 0x37
 801cb60:	e7e3      	b.n	801cb2a <_strtoul_l.constprop.0+0x5e>
 801cb62:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801cb66:	f1bc 0f19 	cmp.w	ip, #25
 801cb6a:	d804      	bhi.n	801cb76 <_strtoul_l.constprop.0+0xaa>
 801cb6c:	3c57      	subs	r4, #87	; 0x57
 801cb6e:	e7dc      	b.n	801cb2a <_strtoul_l.constprop.0+0x5e>
 801cb70:	f04f 37ff 	mov.w	r7, #4294967295
 801cb74:	e7e6      	b.n	801cb44 <_strtoul_l.constprop.0+0x78>
 801cb76:	1c7b      	adds	r3, r7, #1
 801cb78:	d106      	bne.n	801cb88 <_strtoul_l.constprop.0+0xbc>
 801cb7a:	2322      	movs	r3, #34	; 0x22
 801cb7c:	f8ce 3000 	str.w	r3, [lr]
 801cb80:	4638      	mov	r0, r7
 801cb82:	b932      	cbnz	r2, 801cb92 <_strtoul_l.constprop.0+0xc6>
 801cb84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cb88:	b106      	cbz	r6, 801cb8c <_strtoul_l.constprop.0+0xc0>
 801cb8a:	4240      	negs	r0, r0
 801cb8c:	2a00      	cmp	r2, #0
 801cb8e:	d0f9      	beq.n	801cb84 <_strtoul_l.constprop.0+0xb8>
 801cb90:	b107      	cbz	r7, 801cb94 <_strtoul_l.constprop.0+0xc8>
 801cb92:	1e69      	subs	r1, r5, #1
 801cb94:	6011      	str	r1, [r2, #0]
 801cb96:	e7f5      	b.n	801cb84 <_strtoul_l.constprop.0+0xb8>
 801cb98:	2430      	movs	r4, #48	; 0x30
 801cb9a:	2b00      	cmp	r3, #0
 801cb9c:	d1b5      	bne.n	801cb0a <_strtoul_l.constprop.0+0x3e>
 801cb9e:	2308      	movs	r3, #8
 801cba0:	e7b3      	b.n	801cb0a <_strtoul_l.constprop.0+0x3e>
 801cba2:	2c30      	cmp	r4, #48	; 0x30
 801cba4:	d0a9      	beq.n	801cafa <_strtoul_l.constprop.0+0x2e>
 801cba6:	230a      	movs	r3, #10
 801cba8:	e7af      	b.n	801cb0a <_strtoul_l.constprop.0+0x3e>
 801cbaa:	bf00      	nop
 801cbac:	0801dd09 	.word	0x0801dd09

0801cbb0 <_strtoul_r>:
 801cbb0:	f7ff bf8c 	b.w	801cacc <_strtoul_l.constprop.0>

0801cbb4 <__ascii_wctomb>:
 801cbb4:	b149      	cbz	r1, 801cbca <__ascii_wctomb+0x16>
 801cbb6:	2aff      	cmp	r2, #255	; 0xff
 801cbb8:	bf85      	ittet	hi
 801cbba:	238a      	movhi	r3, #138	; 0x8a
 801cbbc:	6003      	strhi	r3, [r0, #0]
 801cbbe:	700a      	strbls	r2, [r1, #0]
 801cbc0:	f04f 30ff 	movhi.w	r0, #4294967295
 801cbc4:	bf98      	it	ls
 801cbc6:	2001      	movls	r0, #1
 801cbc8:	4770      	bx	lr
 801cbca:	4608      	mov	r0, r1
 801cbcc:	4770      	bx	lr
	...

0801cbd0 <fiprintf>:
 801cbd0:	b40e      	push	{r1, r2, r3}
 801cbd2:	b503      	push	{r0, r1, lr}
 801cbd4:	4601      	mov	r1, r0
 801cbd6:	ab03      	add	r3, sp, #12
 801cbd8:	4805      	ldr	r0, [pc, #20]	; (801cbf0 <fiprintf+0x20>)
 801cbda:	f853 2b04 	ldr.w	r2, [r3], #4
 801cbde:	6800      	ldr	r0, [r0, #0]
 801cbe0:	9301      	str	r3, [sp, #4]
 801cbe2:	f7fe ff7b 	bl	801badc <_vfiprintf_r>
 801cbe6:	b002      	add	sp, #8
 801cbe8:	f85d eb04 	ldr.w	lr, [sp], #4
 801cbec:	b003      	add	sp, #12
 801cbee:	4770      	bx	lr
 801cbf0:	20000198 	.word	0x20000198

0801cbf4 <abort>:
 801cbf4:	b508      	push	{r3, lr}
 801cbf6:	2006      	movs	r0, #6
 801cbf8:	f000 f834 	bl	801cc64 <raise>
 801cbfc:	2001      	movs	r0, #1
 801cbfe:	f7e6 fa39 	bl	8003074 <_exit>

0801cc02 <_malloc_usable_size_r>:
 801cc02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cc06:	1f18      	subs	r0, r3, #4
 801cc08:	2b00      	cmp	r3, #0
 801cc0a:	bfbc      	itt	lt
 801cc0c:	580b      	ldrlt	r3, [r1, r0]
 801cc0e:	18c0      	addlt	r0, r0, r3
 801cc10:	4770      	bx	lr

0801cc12 <_raise_r>:
 801cc12:	291f      	cmp	r1, #31
 801cc14:	b538      	push	{r3, r4, r5, lr}
 801cc16:	4604      	mov	r4, r0
 801cc18:	460d      	mov	r5, r1
 801cc1a:	d904      	bls.n	801cc26 <_raise_r+0x14>
 801cc1c:	2316      	movs	r3, #22
 801cc1e:	6003      	str	r3, [r0, #0]
 801cc20:	f04f 30ff 	mov.w	r0, #4294967295
 801cc24:	bd38      	pop	{r3, r4, r5, pc}
 801cc26:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801cc28:	b112      	cbz	r2, 801cc30 <_raise_r+0x1e>
 801cc2a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801cc2e:	b94b      	cbnz	r3, 801cc44 <_raise_r+0x32>
 801cc30:	4620      	mov	r0, r4
 801cc32:	f000 f831 	bl	801cc98 <_getpid_r>
 801cc36:	462a      	mov	r2, r5
 801cc38:	4601      	mov	r1, r0
 801cc3a:	4620      	mov	r0, r4
 801cc3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cc40:	f000 b818 	b.w	801cc74 <_kill_r>
 801cc44:	2b01      	cmp	r3, #1
 801cc46:	d00a      	beq.n	801cc5e <_raise_r+0x4c>
 801cc48:	1c59      	adds	r1, r3, #1
 801cc4a:	d103      	bne.n	801cc54 <_raise_r+0x42>
 801cc4c:	2316      	movs	r3, #22
 801cc4e:	6003      	str	r3, [r0, #0]
 801cc50:	2001      	movs	r0, #1
 801cc52:	e7e7      	b.n	801cc24 <_raise_r+0x12>
 801cc54:	2400      	movs	r4, #0
 801cc56:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801cc5a:	4628      	mov	r0, r5
 801cc5c:	4798      	blx	r3
 801cc5e:	2000      	movs	r0, #0
 801cc60:	e7e0      	b.n	801cc24 <_raise_r+0x12>
	...

0801cc64 <raise>:
 801cc64:	4b02      	ldr	r3, [pc, #8]	; (801cc70 <raise+0xc>)
 801cc66:	4601      	mov	r1, r0
 801cc68:	6818      	ldr	r0, [r3, #0]
 801cc6a:	f7ff bfd2 	b.w	801cc12 <_raise_r>
 801cc6e:	bf00      	nop
 801cc70:	20000198 	.word	0x20000198

0801cc74 <_kill_r>:
 801cc74:	b538      	push	{r3, r4, r5, lr}
 801cc76:	4d07      	ldr	r5, [pc, #28]	; (801cc94 <_kill_r+0x20>)
 801cc78:	2300      	movs	r3, #0
 801cc7a:	4604      	mov	r4, r0
 801cc7c:	4608      	mov	r0, r1
 801cc7e:	4611      	mov	r1, r2
 801cc80:	602b      	str	r3, [r5, #0]
 801cc82:	f7e6 f9e7 	bl	8003054 <_kill>
 801cc86:	1c43      	adds	r3, r0, #1
 801cc88:	d102      	bne.n	801cc90 <_kill_r+0x1c>
 801cc8a:	682b      	ldr	r3, [r5, #0]
 801cc8c:	b103      	cbz	r3, 801cc90 <_kill_r+0x1c>
 801cc8e:	6023      	str	r3, [r4, #0]
 801cc90:	bd38      	pop	{r3, r4, r5, pc}
 801cc92:	bf00      	nop
 801cc94:	20007d88 	.word	0x20007d88

0801cc98 <_getpid_r>:
 801cc98:	f7e6 b9d4 	b.w	8003044 <_getpid>

0801cc9c <_init>:
 801cc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc9e:	bf00      	nop
 801cca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cca2:	bc08      	pop	{r3}
 801cca4:	469e      	mov	lr, r3
 801cca6:	4770      	bx	lr

0801cca8 <_fini>:
 801cca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ccaa:	bf00      	nop
 801ccac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ccae:	bc08      	pop	{r3}
 801ccb0:	469e      	mov	lr, r3
 801ccb2:	4770      	bx	lr
