
DataModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cab4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000122c  0801cc88  0801cc88  0002cc88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801deb4  0801deb4  00030308  2**0
                  CONTENTS
  4 .ARM          00000008  0801deb4  0801deb4  0002deb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801debc  0801debc  00030308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801debc  0801debc  0002debc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801dec0  0801dec0  0002dec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000308  20000000  0801dec4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008184  20000308  0801e1cc  00030308  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2000848c  0801e1cc  0003848c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030308  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030338  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003071d  00000000  00000000  0003037b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008548  00000000  00000000  00060a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002860  00000000  00000000  00068fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001eba  00000000  00000000  0006b840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000dd51  00000000  00000000  0006d6fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003c6c7  00000000  00000000  0007b44b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5ab9  00000000  00000000  000b7b12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000bce8  00000000  00000000  001ad5cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  001b92b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000308 	.word	0x20000308
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801cc6c 	.word	0x0801cc6c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000030c 	.word	0x2000030c
 800020c:	0801cc6c 	.word	0x0801cc6c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9a6 	b.w	800104c <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9e08      	ldr	r6, [sp, #32]
 8000d8a:	460d      	mov	r5, r1
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	460f      	mov	r7, r1
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d14a      	bne.n	8000e2a <__udivmoddi4+0xa6>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	4694      	mov	ip, r2
 8000d98:	d965      	bls.n	8000e66 <__udivmoddi4+0xe2>
 8000d9a:	fab2 f382 	clz	r3, r2
 8000d9e:	b143      	cbz	r3, 8000db2 <__udivmoddi4+0x2e>
 8000da0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000da4:	f1c3 0220 	rsb	r2, r3, #32
 8000da8:	409f      	lsls	r7, r3
 8000daa:	fa20 f202 	lsr.w	r2, r0, r2
 8000dae:	4317      	orrs	r7, r2
 8000db0:	409c      	lsls	r4, r3
 8000db2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000db6:	fa1f f58c 	uxth.w	r5, ip
 8000dba:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dbe:	0c22      	lsrs	r2, r4, #16
 8000dc0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dc4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000dc8:	fb01 f005 	mul.w	r0, r1, r5
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x62>
 8000dd0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dd4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dd8:	f080 811c 	bcs.w	8001014 <__udivmoddi4+0x290>
 8000ddc:	4290      	cmp	r0, r2
 8000dde:	f240 8119 	bls.w	8001014 <__udivmoddi4+0x290>
 8000de2:	3902      	subs	r1, #2
 8000de4:	4462      	add	r2, ip
 8000de6:	1a12      	subs	r2, r2, r0
 8000de8:	b2a4      	uxth	r4, r4
 8000dea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000df2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000df6:	fb00 f505 	mul.w	r5, r0, r5
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	d90a      	bls.n	8000e14 <__udivmoddi4+0x90>
 8000dfe:	eb1c 0404 	adds.w	r4, ip, r4
 8000e02:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e06:	f080 8107 	bcs.w	8001018 <__udivmoddi4+0x294>
 8000e0a:	42a5      	cmp	r5, r4
 8000e0c:	f240 8104 	bls.w	8001018 <__udivmoddi4+0x294>
 8000e10:	4464      	add	r4, ip
 8000e12:	3802      	subs	r0, #2
 8000e14:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e18:	1b64      	subs	r4, r4, r5
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	b11e      	cbz	r6, 8000e26 <__udivmoddi4+0xa2>
 8000e1e:	40dc      	lsrs	r4, r3
 8000e20:	2300      	movs	r3, #0
 8000e22:	e9c6 4300 	strd	r4, r3, [r6]
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0xbc>
 8000e2e:	2e00      	cmp	r6, #0
 8000e30:	f000 80ed 	beq.w	800100e <__udivmoddi4+0x28a>
 8000e34:	2100      	movs	r1, #0
 8000e36:	e9c6 0500 	strd	r0, r5, [r6]
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e40:	fab3 f183 	clz	r1, r3
 8000e44:	2900      	cmp	r1, #0
 8000e46:	d149      	bne.n	8000edc <__udivmoddi4+0x158>
 8000e48:	42ab      	cmp	r3, r5
 8000e4a:	d302      	bcc.n	8000e52 <__udivmoddi4+0xce>
 8000e4c:	4282      	cmp	r2, r0
 8000e4e:	f200 80f8 	bhi.w	8001042 <__udivmoddi4+0x2be>
 8000e52:	1a84      	subs	r4, r0, r2
 8000e54:	eb65 0203 	sbc.w	r2, r5, r3
 8000e58:	2001      	movs	r0, #1
 8000e5a:	4617      	mov	r7, r2
 8000e5c:	2e00      	cmp	r6, #0
 8000e5e:	d0e2      	beq.n	8000e26 <__udivmoddi4+0xa2>
 8000e60:	e9c6 4700 	strd	r4, r7, [r6]
 8000e64:	e7df      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e66:	b902      	cbnz	r2, 8000e6a <__udivmoddi4+0xe6>
 8000e68:	deff      	udf	#255	; 0xff
 8000e6a:	fab2 f382 	clz	r3, r2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f040 8090 	bne.w	8000f94 <__udivmoddi4+0x210>
 8000e74:	1a8a      	subs	r2, r1, r2
 8000e76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e7a:	fa1f fe8c 	uxth.w	lr, ip
 8000e7e:	2101      	movs	r1, #1
 8000e80:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e84:	fb07 2015 	mls	r0, r7, r5, r2
 8000e88:	0c22      	lsrs	r2, r4, #16
 8000e8a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e8e:	fb0e f005 	mul.w	r0, lr, r5
 8000e92:	4290      	cmp	r0, r2
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x124>
 8000e96:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x122>
 8000ea0:	4290      	cmp	r0, r2
 8000ea2:	f200 80cb 	bhi.w	800103c <__udivmoddi4+0x2b8>
 8000ea6:	4645      	mov	r5, r8
 8000ea8:	1a12      	subs	r2, r2, r0
 8000eaa:	b2a4      	uxth	r4, r4
 8000eac:	fbb2 f0f7 	udiv	r0, r2, r7
 8000eb0:	fb07 2210 	mls	r2, r7, r0, r2
 8000eb4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000eb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000ebc:	45a6      	cmp	lr, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x14e>
 8000ec0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ec8:	d202      	bcs.n	8000ed0 <__udivmoddi4+0x14c>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f200 80bb 	bhi.w	8001046 <__udivmoddi4+0x2c2>
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	eba4 040e 	sub.w	r4, r4, lr
 8000ed6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eda:	e79f      	b.n	8000e1c <__udivmoddi4+0x98>
 8000edc:	f1c1 0720 	rsb	r7, r1, #32
 8000ee0:	408b      	lsls	r3, r1
 8000ee2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ee6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eea:	fa05 f401 	lsl.w	r4, r5, r1
 8000eee:	fa20 f307 	lsr.w	r3, r0, r7
 8000ef2:	40fd      	lsrs	r5, r7
 8000ef4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef8:	4323      	orrs	r3, r4
 8000efa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000efe:	fa1f fe8c 	uxth.w	lr, ip
 8000f02:	fb09 5518 	mls	r5, r9, r8, r5
 8000f06:	0c1c      	lsrs	r4, r3, #16
 8000f08:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f0c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f10:	42a5      	cmp	r5, r4
 8000f12:	fa02 f201 	lsl.w	r2, r2, r1
 8000f16:	fa00 f001 	lsl.w	r0, r0, r1
 8000f1a:	d90b      	bls.n	8000f34 <__udivmoddi4+0x1b0>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f24:	f080 8088 	bcs.w	8001038 <__udivmoddi4+0x2b4>
 8000f28:	42a5      	cmp	r5, r4
 8000f2a:	f240 8085 	bls.w	8001038 <__udivmoddi4+0x2b4>
 8000f2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f32:	4464      	add	r4, ip
 8000f34:	1b64      	subs	r4, r4, r5
 8000f36:	b29d      	uxth	r5, r3
 8000f38:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f3c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f40:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f44:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f48:	45a6      	cmp	lr, r4
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x1da>
 8000f4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f50:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f54:	d26c      	bcs.n	8001030 <__udivmoddi4+0x2ac>
 8000f56:	45a6      	cmp	lr, r4
 8000f58:	d96a      	bls.n	8001030 <__udivmoddi4+0x2ac>
 8000f5a:	3b02      	subs	r3, #2
 8000f5c:	4464      	add	r4, ip
 8000f5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f62:	fba3 9502 	umull	r9, r5, r3, r2
 8000f66:	eba4 040e 	sub.w	r4, r4, lr
 8000f6a:	42ac      	cmp	r4, r5
 8000f6c:	46c8      	mov	r8, r9
 8000f6e:	46ae      	mov	lr, r5
 8000f70:	d356      	bcc.n	8001020 <__udivmoddi4+0x29c>
 8000f72:	d053      	beq.n	800101c <__udivmoddi4+0x298>
 8000f74:	b156      	cbz	r6, 8000f8c <__udivmoddi4+0x208>
 8000f76:	ebb0 0208 	subs.w	r2, r0, r8
 8000f7a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f7e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f82:	40ca      	lsrs	r2, r1
 8000f84:	40cc      	lsrs	r4, r1
 8000f86:	4317      	orrs	r7, r2
 8000f88:	e9c6 7400 	strd	r7, r4, [r6]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	2100      	movs	r1, #0
 8000f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f94:	f1c3 0120 	rsb	r1, r3, #32
 8000f98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f9c:	fa20 f201 	lsr.w	r2, r0, r1
 8000fa0:	fa25 f101 	lsr.w	r1, r5, r1
 8000fa4:	409d      	lsls	r5, r3
 8000fa6:	432a      	orrs	r2, r5
 8000fa8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fac:	fa1f fe8c 	uxth.w	lr, ip
 8000fb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fb4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fbe:	fb00 f50e 	mul.w	r5, r0, lr
 8000fc2:	428d      	cmp	r5, r1
 8000fc4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fc8:	d908      	bls.n	8000fdc <__udivmoddi4+0x258>
 8000fca:	eb1c 0101 	adds.w	r1, ip, r1
 8000fce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fd2:	d22f      	bcs.n	8001034 <__udivmoddi4+0x2b0>
 8000fd4:	428d      	cmp	r5, r1
 8000fd6:	d92d      	bls.n	8001034 <__udivmoddi4+0x2b0>
 8000fd8:	3802      	subs	r0, #2
 8000fda:	4461      	add	r1, ip
 8000fdc:	1b49      	subs	r1, r1, r5
 8000fde:	b292      	uxth	r2, r2
 8000fe0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fe4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fe8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fec:	fb05 f10e 	mul.w	r1, r5, lr
 8000ff0:	4291      	cmp	r1, r2
 8000ff2:	d908      	bls.n	8001006 <__udivmoddi4+0x282>
 8000ff4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ff8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ffc:	d216      	bcs.n	800102c <__udivmoddi4+0x2a8>
 8000ffe:	4291      	cmp	r1, r2
 8001000:	d914      	bls.n	800102c <__udivmoddi4+0x2a8>
 8001002:	3d02      	subs	r5, #2
 8001004:	4462      	add	r2, ip
 8001006:	1a52      	subs	r2, r2, r1
 8001008:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800100c:	e738      	b.n	8000e80 <__udivmoddi4+0xfc>
 800100e:	4631      	mov	r1, r6
 8001010:	4630      	mov	r0, r6
 8001012:	e708      	b.n	8000e26 <__udivmoddi4+0xa2>
 8001014:	4639      	mov	r1, r7
 8001016:	e6e6      	b.n	8000de6 <__udivmoddi4+0x62>
 8001018:	4610      	mov	r0, r2
 800101a:	e6fb      	b.n	8000e14 <__udivmoddi4+0x90>
 800101c:	4548      	cmp	r0, r9
 800101e:	d2a9      	bcs.n	8000f74 <__udivmoddi4+0x1f0>
 8001020:	ebb9 0802 	subs.w	r8, r9, r2
 8001024:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001028:	3b01      	subs	r3, #1
 800102a:	e7a3      	b.n	8000f74 <__udivmoddi4+0x1f0>
 800102c:	4645      	mov	r5, r8
 800102e:	e7ea      	b.n	8001006 <__udivmoddi4+0x282>
 8001030:	462b      	mov	r3, r5
 8001032:	e794      	b.n	8000f5e <__udivmoddi4+0x1da>
 8001034:	4640      	mov	r0, r8
 8001036:	e7d1      	b.n	8000fdc <__udivmoddi4+0x258>
 8001038:	46d0      	mov	r8, sl
 800103a:	e77b      	b.n	8000f34 <__udivmoddi4+0x1b0>
 800103c:	3d02      	subs	r5, #2
 800103e:	4462      	add	r2, ip
 8001040:	e732      	b.n	8000ea8 <__udivmoddi4+0x124>
 8001042:	4608      	mov	r0, r1
 8001044:	e70a      	b.n	8000e5c <__udivmoddi4+0xd8>
 8001046:	4464      	add	r4, ip
 8001048:	3802      	subs	r0, #2
 800104a:	e742      	b.n	8000ed2 <__udivmoddi4+0x14e>

0800104c <__aeabi_idiv0>:
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <setPath>:
FATFS *pfs;
DWORD fre_clust;
uint32_t total, free_space;

void setPath(char *dir, char *sensorData, uint8_t path)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	4613      	mov	r3, r2
 800105c:	71fb      	strb	r3, [r7, #7]
	sprintf(dir, "Data%d", path);
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	461a      	mov	r2, r3
 8001062:	4907      	ldr	r1, [pc, #28]	; (8001080 <setPath+0x30>)
 8001064:	68f8      	ldr	r0, [r7, #12]
 8001066:	f017 fd95 	bl	8018b94 <siprintf>
	sprintf(sensorData, "Data%d/Data%d.txt", path, path);
 800106a:	79fa      	ldrb	r2, [r7, #7]
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	4905      	ldr	r1, [pc, #20]	; (8001084 <setPath+0x34>)
 8001070:	68b8      	ldr	r0, [r7, #8]
 8001072:	f017 fd8f 	bl	8018b94 <siprintf>

}
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	0801cc88 	.word	0x0801cc88
 8001084:	0801cc90 	.word	0x0801cc90

08001088 <createNewFile>:
void createNewFile(char *dir, char *sensorData, uint8_t *pathPtr)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
	uint8_t path = *pathPtr;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	75fb      	strb	r3, [r7, #23]
	Mount_SD("/");
 800109a:	480d      	ldr	r0, [pc, #52]	; (80010d0 <createNewFile+0x48>)
 800109c:	f000 f81a 	bl	80010d4 <Mount_SD>
	Format_SD(path);
 80010a0:	7dfb      	ldrb	r3, [r7, #23]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 f840 	bl	8001128 <Format_SD>
	Create_Dir(dir);
 80010a8:	68f8      	ldr	r0, [r7, #12]
 80010aa:	f000 f955 	bl	8001358 <Create_Dir>
	Create_File(sensorData);
 80010ae:	68b8      	ldr	r0, [r7, #8]
 80010b0:	f000 f8d6 	bl	8001260 <Create_File>

	Unmount_SD("/");
 80010b4:	4806      	ldr	r0, [pc, #24]	; (80010d0 <createNewFile+0x48>)
 80010b6:	f000 f823 	bl	8001100 <Unmount_SD>
	(*pathPtr)++;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	3301      	adds	r3, #1
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	701a      	strb	r2, [r3, #0]
}
 80010c6:	bf00      	nop
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	0801cca4 	.word	0x0801cca4

080010d4 <Mount_SD>:
	HAL_UART_Transmit(UART, (uint8_t*) string, strlen(string), HAL_MAX_DELAY);
#endif
}

void Mount_SD(const TCHAR *path)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&SDFatFs, path, 1);
 80010dc:	2201      	movs	r2, #1
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	4805      	ldr	r0, [pc, #20]	; (80010f8 <Mount_SD+0x24>)
 80010e2:	f011 fc51 	bl	8012988 <f_mount>
 80010e6:	4603      	mov	r3, r0
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b04      	ldr	r3, [pc, #16]	; (80010fc <Mount_SD+0x28>)
 80010ec:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
		Send_Uart("ERROR!!! in mounting SD CARD...\n\n");
	else
		Send_Uart("SD CARD mounted successfully...\n");
#endif
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000324 	.word	0x20000324
 80010fc:	200009d4 	.word	0x200009d4

08001100 <Unmount_SD>:

void Unmount_SD(const TCHAR *path)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8001108:	2201      	movs	r2, #1
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	2000      	movs	r0, #0
 800110e:	f011 fc3b 	bl	8012988 <f_mount>
 8001112:	4603      	mov	r3, r0
 8001114:	461a      	mov	r2, r3
 8001116:	4b03      	ldr	r3, [pc, #12]	; (8001124 <Unmount_SD+0x24>)
 8001118:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
		Send_Uart("SD CARD UNMOUNTED successfully...\n\n\n");
	else
		Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
#endif
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200009d4 	.word	0x200009d4

08001128 <Format_SD>:
	return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD(uint8_t dirNumber)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b096      	sub	sp, #88	; 0x58
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
	DIR dir;
	FILINFO fno;
	char *path = pvPortMalloc(20 * sizeof(char));
 8001132:	2014      	movs	r0, #20
 8001134:	f015 fd50 	bl	8016bd8 <pvPortMalloc>
 8001138:	6578      	str	r0, [r7, #84]	; 0x54
	sprintf(path, "/Data%d", dirNumber);
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	461a      	mov	r2, r3
 800113e:	4943      	ldr	r1, [pc, #268]	; (800124c <Format_SD+0x124>)
 8001140:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001142:	f017 fd27 	bl	8018b94 <siprintf>
	fresult = f_opendir(&dir, path);
 8001146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800114c:	4618      	mov	r0, r3
 800114e:	f012 fa0e 	bl	801356e <f_opendir>
 8001152:	4603      	mov	r3, r0
 8001154:	461a      	mov	r2, r3
 8001156:	4b3e      	ldr	r3, [pc, #248]	; (8001250 <Format_SD+0x128>)
 8001158:	701a      	strb	r2, [r3, #0]

	if (fresult == FR_OK)
 800115a:	4b3d      	ldr	r3, [pc, #244]	; (8001250 <Format_SD+0x128>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d154      	bne.n	800120c <Format_SD+0xe4>
	{
		while (1)
		{
			fresult = f_readdir(&dir, &fno); /* Read a directory item */
 8001162:	f107 020c 	add.w	r2, r7, #12
 8001166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116a:	4611      	mov	r1, r2
 800116c:	4618      	mov	r0, r3
 800116e:	f012 faa2 	bl	80136b6 <f_readdir>
 8001172:	4603      	mov	r3, r0
 8001174:	461a      	mov	r2, r3
 8001176:	4b36      	ldr	r3, [pc, #216]	; (8001250 <Format_SD+0x128>)
 8001178:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK || fno.fname[0] == 0)
 800117a:	4b35      	ldr	r3, [pc, #212]	; (8001250 <Format_SD+0x128>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d13f      	bne.n	8001202 <Format_SD+0xda>
 8001182:	7d7b      	ldrb	r3, [r7, #21]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d03c      	beq.n	8001202 <Format_SD+0xda>
				break; /* Break on error or end of dir */
			if (!(strcmp(".", fno.fname)) || !(strcmp("..", fno.fname)))
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	3309      	adds	r3, #9
 800118e:	4619      	mov	r1, r3
 8001190:	4830      	ldr	r0, [pc, #192]	; (8001254 <Format_SD+0x12c>)
 8001192:	f7ff f83d 	bl	8000210 <strcmp>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d02f      	beq.n	80011fc <Format_SD+0xd4>
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	3309      	adds	r3, #9
 80011a2:	4619      	mov	r1, r3
 80011a4:	482c      	ldr	r0, [pc, #176]	; (8001258 <Format_SD+0x130>)
 80011a6:	f7ff f833 	bl	8000210 <strcmp>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d025      	beq.n	80011fc <Format_SD+0xd4>
			{
				continue;
			}

			sprintf(path, "/Data%d/%s", dirNumber, fno.fname);
 80011b0:	79fa      	ldrb	r2, [r7, #7]
 80011b2:	f107 030c 	add.w	r3, r7, #12
 80011b6:	3309      	adds	r3, #9
 80011b8:	4928      	ldr	r1, [pc, #160]	; (800125c <Format_SD+0x134>)
 80011ba:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80011bc:	f017 fcea 	bl	8018b94 <siprintf>
			if (fno.fattrib & AM_DIR) /* It is a directory */
 80011c0:	7d3b      	ldrb	r3, [r7, #20]
 80011c2:	f003 0310 	and.w	r3, r3, #16
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d00c      	beq.n	80011e4 <Format_SD+0xbc>
			{

				fresult = Format_SD(dirNumber);
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ffab 	bl	8001128 <Format_SD>
 80011d2:	4603      	mov	r3, r0
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <Format_SD+0x128>)
 80011d8:	701a      	strb	r2, [r3, #0]
				if (fresult != FR_OK)
 80011da:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <Format_SD+0x128>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0bf      	beq.n	8001162 <Format_SD+0x3a>
					break;
 80011e2:	e00e      	b.n	8001202 <Format_SD+0xda>
			}
			else
			{
				fresult = f_unlink(path);
 80011e4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80011e6:	f012 fae9 	bl	80137bc <f_unlink>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b18      	ldr	r3, [pc, #96]	; (8001250 <Format_SD+0x128>)
 80011f0:	701a      	strb	r2, [r3, #0]
				if (fresult != FR_OK)
 80011f2:	4b17      	ldr	r3, [pc, #92]	; (8001250 <Format_SD+0x128>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d102      	bne.n	8001200 <Format_SD+0xd8>
 80011fa:	e7b2      	b.n	8001162 <Format_SD+0x3a>
				continue;
 80011fc:	bf00      	nop
			fresult = f_readdir(&dir, &fno); /* Read a directory item */
 80011fe:	e7b0      	b.n	8001162 <Format_SD+0x3a>
					break;
 8001200:	bf00      	nop
			}
		}
		f_closedir(&dir);
 8001202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001206:	4618      	mov	r0, r3
 8001208:	f012 fa2a 	bl	8013660 <f_closedir>
	}

	if (fresult == FR_OK)
 800120c:	4b10      	ldr	r3, [pc, #64]	; (8001250 <Format_SD+0x128>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d111      	bne.n	8001238 <Format_SD+0x110>
	{
		memset(path, 0, 20);
 8001214:	2214      	movs	r2, #20
 8001216:	2100      	movs	r1, #0
 8001218:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800121a:	f017 fde1 	bl	8018de0 <memset>
		sprintf(path, "/Data%d", dirNumber);
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	461a      	mov	r2, r3
 8001222:	490a      	ldr	r1, [pc, #40]	; (800124c <Format_SD+0x124>)
 8001224:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001226:	f017 fcb5 	bl	8018b94 <siprintf>
		fresult = f_unlink(path);
 800122a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800122c:	f012 fac6 	bl	80137bc <f_unlink>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <Format_SD+0x128>)
 8001236:	701a      	strb	r2, [r3, #0]
	}

	vPortFree(path);
 8001238:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800123a:	f015 fd99 	bl	8016d70 <vPortFree>
	return (fresult);
 800123e:	4b04      	ldr	r3, [pc, #16]	; (8001250 <Format_SD+0x128>)
 8001240:	781b      	ldrb	r3, [r3, #0]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3758      	adds	r7, #88	; 0x58
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	0801ccbc 	.word	0x0801ccbc
 8001250:	200009d4 	.word	0x200009d4
 8001254:	0801ccc4 	.word	0x0801ccc4
 8001258:	0801ccc8 	.word	0x0801ccc8
 800125c:	0801cccc 	.word	0x0801cccc

08001260 <Create_File>:
		return fresult;
	}
}

FRESULT Create_File(char *name)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	fresult = f_stat(name, &fno);
 8001268:	4915      	ldr	r1, [pc, #84]	; (80012c0 <Create_File+0x60>)
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f012 fa66 	bl	801373c <f_stat>
 8001270:	4603      	mov	r3, r0
 8001272:	461a      	mov	r2, r3
 8001274:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <Create_File+0x64>)
 8001276:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <Create_File+0x64>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d102      	bne.n	8001286 <Create_File+0x26>
		sprintf(buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",
				name);
		Send_Uart(buf);
		vPortFree(buf);
#endif
		return fresult;
 8001280:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <Create_File+0x64>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	e018      	b.n	80012b8 <Create_File+0x58>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 8001286:	220b      	movs	r2, #11
 8001288:	6879      	ldr	r1, [r7, #4]
 800128a:	480f      	ldr	r0, [pc, #60]	; (80012c8 <Create_File+0x68>)
 800128c:	f011 fbe0 	bl	8012a50 <f_open>
 8001290:	4603      	mov	r3, r0
 8001292:	461a      	mov	r2, r3
 8001294:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <Create_File+0x64>)
 8001296:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001298:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <Create_File+0x64>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d002      	beq.n	80012a6 <Create_File+0x46>
			sprintf(buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult,
					name);
			Send_Uart(buf);
			vPortFree(buf);
#endif
			return fresult;
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <Create_File+0x64>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	e008      	b.n	80012b8 <Create_File+0x58>
			Send_Uart(buf);
			vPortFree(buf);
#endif
		}

		fresult = f_close(&fil);
 80012a6:	4808      	ldr	r0, [pc, #32]	; (80012c8 <Create_File+0x68>)
 80012a8:	f012 f932 	bl	8013510 <f_close>
 80012ac:	4603      	mov	r3, r0
 80012ae:	461a      	mov	r2, r3
 80012b0:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <Create_File+0x64>)
 80012b2:	701a      	strb	r2, [r3, #0]
			Send_Uart(buf);
			vPortFree(buf);
#endif
		}
	}
	return fresult;
 80012b4:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <Create_File+0x64>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	200009bc 	.word	0x200009bc
 80012c4:	200009d4 	.word	0x200009d4
 80012c8:	20000558 	.word	0x20000558

080012cc <Update_File>:

FRESULT Update_File(char *name, char *data)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat(name, &fno);
 80012d6:	491c      	ldr	r1, [pc, #112]	; (8001348 <Update_File+0x7c>)
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f012 fa2f 	bl	801373c <f_stat>
 80012de:	4603      	mov	r3, r0
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b1a      	ldr	r3, [pc, #104]	; (800134c <Update_File+0x80>)
 80012e4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80012e6:	4b19      	ldr	r3, [pc, #100]	; (800134c <Update_File+0x80>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d002      	beq.n	80012f4 <Update_File+0x28>
		char *buf = pvPortMalloc(100 * sizeof(char));
		sprintf(buf, "ERROR!!! *%s* does not exists\n\n", name);
		Send_Uart(buf);
		vPortFree(buf);
#endif
		return fresult;
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <Update_File+0x80>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	e025      	b.n	8001340 <Update_File+0x74>
	}

	else
	{
		/* Create a file with read write access and open it */
		fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 80012f4:	2232      	movs	r2, #50	; 0x32
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	4815      	ldr	r0, [pc, #84]	; (8001350 <Update_File+0x84>)
 80012fa:	f011 fba9 	bl	8012a50 <f_open>
 80012fe:	4603      	mov	r3, r0
 8001300:	461a      	mov	r2, r3
 8001302:	4b12      	ldr	r3, [pc, #72]	; (800134c <Update_File+0x80>)
 8001304:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <Update_File+0x80>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d002      	beq.n	8001314 <Update_File+0x48>
			sprintf(buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult,
					name);
			Send_Uart(buf);
			vPortFree(buf);
#endif
			return fresult;
 800130e:	4b0f      	ldr	r3, [pc, #60]	; (800134c <Update_File+0x80>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	e015      	b.n	8001340 <Update_File+0x74>
		}

		/* Writing text */
		fresult = f_write(&fil, data, strlen(data), &bw);
 8001314:	6838      	ldr	r0, [r7, #0]
 8001316:	f7fe ffdb 	bl	80002d0 <strlen>
 800131a:	4602      	mov	r2, r0
 800131c:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <Update_File+0x88>)
 800131e:	6839      	ldr	r1, [r7, #0]
 8001320:	480b      	ldr	r0, [pc, #44]	; (8001350 <Update_File+0x84>)
 8001322:	f011 fec8 	bl	80130b6 <f_write>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	4b08      	ldr	r3, [pc, #32]	; (800134c <Update_File+0x80>)
 800132c:	701a      	strb	r2, [r3, #0]
			vPortFree(buf);
#endif
		}

		/* Close file */
		fresult = f_close(&fil);
 800132e:	4808      	ldr	r0, [pc, #32]	; (8001350 <Update_File+0x84>)
 8001330:	f012 f8ee 	bl	8013510 <f_close>
 8001334:	4603      	mov	r3, r0
 8001336:	461a      	mov	r2, r3
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <Update_File+0x80>)
 800133a:	701a      	strb	r2, [r3, #0]
			Send_Uart(buf);
			vPortFree(buf);
#endif
		}
	}
	return fresult;
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <Update_File+0x80>)
 800133e:	781b      	ldrb	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	200009bc 	.word	0x200009bc
 800134c:	200009d4 	.word	0x200009d4
 8001350:	20000558 	.word	0x20000558
 8001354:	200009d8 	.word	0x200009d8

08001358 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir(char *name)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	fresult = f_mkdir(name);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f012 fadd 	bl	8013920 <f_mkdir>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b04      	ldr	r3, [pc, #16]	; (800137c <Create_Dir+0x24>)
 800136c:	701a      	strb	r2, [r3, #0]
				name);
		Send_Uart(buf);
		vPortFree(buf);
#endif
	}
	return fresult;
 800136e:	4b03      	ldr	r3, [pc, #12]	; (800137c <Create_Dir+0x24>)
 8001370:	781b      	ldrb	r3, [r3, #0]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200009d4 	.word	0x200009d4

08001380 <sendDataSD>:
	Send_Uart(buf);
	vPortFree(buf);
#endif
}
void sendDataSD(char *file, volatile int16_t *sensor)
{
 8001380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001382:	b089      	sub	sp, #36	; 0x24
 8001384:	af04      	add	r7, sp, #16
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
	char *buffer = pvPortMalloc(
 800138a:	f44f 7028 	mov.w	r0, #672	; 0x2a0
 800138e:	f015 fc23 	bl	8016bd8 <pvPortMalloc>
 8001392:	60b8      	str	r0, [r7, #8]
			(7 * TRAVEL_SENSOR_BUFFER_SIZE / 2) * sizeof(char));
	if (NULL != buffer)
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d059      	beq.n	800144e <sendDataSD+0xce>
	{
		memset(buffer, 0, (7 * TRAVEL_SENSOR_BUFFER_SIZE / 2));
 800139a:	f44f 7228 	mov.w	r2, #672	; 0x2a0
 800139e:	2100      	movs	r1, #0
 80013a0:	68b8      	ldr	r0, [r7, #8]
 80013a2:	f017 fd1d 	bl	8018de0 <memset>
		for (int i = 0; i < (TRAVEL_SENSOR_BUFFER_SIZE) / 2; i +=
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	e03f      	b.n	800142c <sendDataSD+0xac>
				NUMBER_OF_SENSORS)
		{
			sprintf(buffer + strlen(buffer), "%d;%d;%d;%d;%d;%d\n",
 80013ac:	68b8      	ldr	r0, [r7, #8]
 80013ae:	f7fe ff8f 	bl	80002d0 <strlen>
 80013b2:	4602      	mov	r2, r0
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	1898      	adds	r0, r3, r2
					sensor[i + FRONT_TRAVEL_BUFFER_POSITION],
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	4413      	add	r3, r2
 80013c0:	881b      	ldrh	r3, [r3, #0]
 80013c2:	b21b      	sxth	r3, r3
			sprintf(buffer + strlen(buffer), "%d;%d;%d;%d;%d;%d\n",
 80013c4:	461e      	mov	r6, r3
					sensor[i + REAR_TRAVEL_BUFFER_POSITION],
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	3301      	adds	r3, #1
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	4413      	add	r3, r2
 80013d0:	881b      	ldrh	r3, [r3, #0]
 80013d2:	b21b      	sxth	r3, r3
			sprintf(buffer + strlen(buffer), "%d;%d;%d;%d;%d;%d\n",
 80013d4:	469c      	mov	ip, r3
					sensor[i + FRONT_PRESSURE_BUFFER_POSITION],
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	3302      	adds	r3, #2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	4413      	add	r3, r2
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	b21b      	sxth	r3, r3
			sprintf(buffer + strlen(buffer), "%d;%d;%d;%d;%d;%d\n",
 80013e4:	4619      	mov	r1, r3
					sensor[i + REAR_PRESSURE_BUFFER_POSITION],
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	3303      	adds	r3, #3
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	4413      	add	r3, r2
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	b21b      	sxth	r3, r3
			sprintf(buffer + strlen(buffer), "%d;%d;%d;%d;%d;%d\n",
 80013f4:	461c      	mov	r4, r3
					sensor[i + LEFT_BRAKE_POSITION],
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	3304      	adds	r3, #4
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	b21b      	sxth	r3, r3
			sprintf(buffer + strlen(buffer), "%d;%d;%d;%d;%d;%d\n",
 8001404:	461d      	mov	r5, r3
					sensor[i + RIGHT_BRAKE_POSITION]);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	3305      	adds	r3, #5
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	4413      	add	r3, r2
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	b21b      	sxth	r3, r3
			sprintf(buffer + strlen(buffer), "%d;%d;%d;%d;%d;%d\n",
 8001414:	9303      	str	r3, [sp, #12]
 8001416:	9502      	str	r5, [sp, #8]
 8001418:	9401      	str	r4, [sp, #4]
 800141a:	9100      	str	r1, [sp, #0]
 800141c:	4663      	mov	r3, ip
 800141e:	4632      	mov	r2, r6
 8001420:	490e      	ldr	r1, [pc, #56]	; (800145c <sendDataSD+0xdc>)
 8001422:	f017 fbb7 	bl	8018b94 <siprintf>
		for (int i = 0; i < (TRAVEL_SENSOR_BUFFER_SIZE) / 2; i +=
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	3306      	adds	r3, #6
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2b5f      	cmp	r3, #95	; 0x5f
 8001430:	d9bc      	bls.n	80013ac <sendDataSD+0x2c>
		}
		Mount_SD("/");
 8001432:	480b      	ldr	r0, [pc, #44]	; (8001460 <sendDataSD+0xe0>)
 8001434:	f7ff fe4e 	bl	80010d4 <Mount_SD>
		Update_File(file, buffer);
 8001438:	68b9      	ldr	r1, [r7, #8]
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff ff46 	bl	80012cc <Update_File>
		Unmount_SD("/");
 8001440:	4807      	ldr	r0, [pc, #28]	; (8001460 <sendDataSD+0xe0>)
 8001442:	f7ff fe5d 	bl	8001100 <Unmount_SD>
		vPortFree(buffer);
 8001446:	68b8      	ldr	r0, [r7, #8]
 8001448:	f015 fc92 	bl	8016d70 <vPortFree>
	else
	{
		puts("Wrong alocation pressureTravel Buffer SD Card");
	}

}
 800144c:	e002      	b.n	8001454 <sendDataSD+0xd4>
		puts("Wrong alocation pressureTravel Buffer SD Card");
 800144e:	4805      	ldr	r0, [pc, #20]	; (8001464 <sendDataSD+0xe4>)
 8001450:	f017 fb98 	bl	8018b84 <puts>
}
 8001454:	bf00      	nop
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800145c:	0801ccdc 	.word	0x0801ccdc
 8001460:	0801cca4 	.word	0x0801cca4
 8001464:	0801ccf0 	.word	0x0801ccf0

08001468 <readCalibrationData>:

int readCalibrationData(calibration_t *calibration)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b096      	sub	sp, #88	; 0x58
 800146c:	af04      	add	r7, sp, #16
 800146e:	6078      	str	r0, [r7, #4]


	Mount_SD("/");
 8001470:	4837      	ldr	r0, [pc, #220]	; (8001550 <readCalibrationData+0xe8>)
 8001472:	f7ff fe2f 	bl	80010d4 <Mount_SD>
	resultCalibration = f_open(&fileCalibration, CONFIG_FILE_NAME, FA_READ);
 8001476:	2201      	movs	r2, #1
 8001478:	4936      	ldr	r1, [pc, #216]	; (8001554 <readCalibrationData+0xec>)
 800147a:	4837      	ldr	r0, [pc, #220]	; (8001558 <readCalibrationData+0xf0>)
 800147c:	f011 fae8 	bl	8012a50 <f_open>
 8001480:	4603      	mov	r3, r0
 8001482:	461a      	mov	r2, r3
 8001484:	4b35      	ldr	r3, [pc, #212]	; (800155c <readCalibrationData+0xf4>)
 8001486:	701a      	strb	r2, [r3, #0]
	if (resultCalibration != FR_OK)
 8001488:	4b34      	ldr	r3, [pc, #208]	; (800155c <readCalibrationData+0xf4>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d005      	beq.n	800149c <readCalibrationData+0x34>
	{
		printf("Nie można otworzyć pliku do odczytu\n");
 8001490:	4833      	ldr	r0, [pc, #204]	; (8001560 <readCalibrationData+0xf8>)
 8001492:	f017 fb77 	bl	8018b84 <puts>
		return -1;
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
 800149a:	e054      	b.n	8001546 <readCalibrationData+0xde>
	}

	char *buffer = (char*) calloc(160, sizeof(char));
 800149c:	2101      	movs	r1, #1
 800149e:	20a0      	movs	r0, #160	; 0xa0
 80014a0:	f016 fb0a 	bl	8017ab8 <calloc>
 80014a4:	4603      	mov	r3, r0
 80014a6:	647b      	str	r3, [r7, #68]	; 0x44
	if (buffer == NULL)
 80014a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10a      	bne.n	80014c4 <readCalibrationData+0x5c>
	{
		printf("Błąd alokacji pamięci dla bufora.\n");
 80014ae:	482d      	ldr	r0, [pc, #180]	; (8001564 <readCalibrationData+0xfc>)
 80014b0:	f017 fb68 	bl	8018b84 <puts>
		return 1;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e046      	b.n	8001546 <readCalibrationData+0xde>

	char line[30];

	while (f_gets(line, sizeof(line), &fileCalibration) != NULL)
	{
		strcat(buffer, line);
 80014b8:	f107 030c 	add.w	r3, r7, #12
 80014bc:	4619      	mov	r1, r3
 80014be:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80014c0:	f017 fc96 	bl	8018df0 <strcat>
	while (f_gets(line, sizeof(line), &fileCalibration) != NULL)
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	4a23      	ldr	r2, [pc, #140]	; (8001558 <readCalibrationData+0xf0>)
 80014ca:	211e      	movs	r1, #30
 80014cc:	4618      	mov	r0, r3
 80014ce:	f012 fb35 	bl	8013b3c <f_gets>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1ef      	bne.n	80014b8 <readCalibrationData+0x50>
	}
	sscanf(buffer,
 80014d8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80014dc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80014e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014e4:	9303      	str	r3, [sp, #12]
 80014e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014ea:	9302      	str	r3, [sp, #8]
 80014ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014f0:	9301      	str	r3, [sp, #4]
 80014f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	460b      	mov	r3, r1
 80014fa:	491b      	ldr	r1, [pc, #108]	; (8001568 <readCalibrationData+0x100>)
 80014fc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80014fe:	f017 fb69 	bl	8018bd4 <siscanf>
			"Front travel sensor: %d\nRear travel sensor: %d\nFront pressure sensor: %d\nRear pressure sensor: %d\nLeft brake sensor: %d\nRight brake sensor: %d",
			&frontTravelInt, &rearTravelInt, &frontPressureInt,
			&rearPressureInt, &leftBrakeInt, &rightBrakeInt);
	free(buffer);
 8001502:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001504:	f016 fafe 	bl	8017b04 <free>

	f_close(&fileCalibration);
 8001508:	4813      	ldr	r0, [pc, #76]	; (8001558 <readCalibrationData+0xf0>)
 800150a:	f012 f801 	bl	8013510 <f_close>

	// Konwertuj i przypisz do struktury calibration
	calibration->frontTravelSensor = frontTravelInt;
 800150e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001510:	b21a      	sxth	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	801a      	strh	r2, [r3, #0]
	calibration->rearTravelSensor = rearTravelInt;
 8001516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001518:	b21a      	sxth	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	805a      	strh	r2, [r3, #2]
	calibration->frontPressureSensor = frontPressureInt;
 800151e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001520:	b21a      	sxth	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	809a      	strh	r2, [r3, #4]
	calibration->rearPressureSensor = rearPressureInt;
 8001526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001528:	b21a      	sxth	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	80da      	strh	r2, [r3, #6]
	calibration->leftBrakeSensor = leftBrakeInt;
 800152e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001530:	b21a      	sxth	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	811a      	strh	r2, [r3, #8]
	calibration->rightBrakeSensor = rightBrakeInt;
 8001536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001538:	b21a      	sxth	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	815a      	strh	r2, [r3, #10]
	Unmount_SD("/");
 800153e:	4804      	ldr	r0, [pc, #16]	; (8001550 <readCalibrationData+0xe8>)
 8001540:	f7ff fdde 	bl	8001100 <Unmount_SD>

	return 0;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3748      	adds	r7, #72	; 0x48
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	0801cca4 	.word	0x0801cca4
 8001554:	0801cd20 	.word	0x0801cd20
 8001558:	20000788 	.word	0x20000788
 800155c:	200009b8 	.word	0x200009b8
 8001560:	0801cd2c 	.word	0x0801cd2c
 8001564:	0801cd54 	.word	0x0801cd54
 8001568:	0801cd7c 	.word	0x0801cd7c

0800156c <writeCalibrationData>:

int writeCalibrationData(const calibration_t *calibration)
{
 800156c:	b5b0      	push	{r4, r5, r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af04      	add	r7, sp, #16
 8001572:	6078      	str	r0, [r7, #4]

	Mount_SD("/");
 8001574:	4820      	ldr	r0, [pc, #128]	; (80015f8 <writeCalibrationData+0x8c>)
 8001576:	f7ff fdad 	bl	80010d4 <Mount_SD>
	resultCalibration = f_open(&fileCalibration, CONFIG_FILE_NAME, FA_WRITE | FA_CREATE_ALWAYS);
 800157a:	220a      	movs	r2, #10
 800157c:	491f      	ldr	r1, [pc, #124]	; (80015fc <writeCalibrationData+0x90>)
 800157e:	4820      	ldr	r0, [pc, #128]	; (8001600 <writeCalibrationData+0x94>)
 8001580:	f011 fa66 	bl	8012a50 <f_open>
 8001584:	4603      	mov	r3, r0
 8001586:	461a      	mov	r2, r3
 8001588:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <writeCalibrationData+0x98>)
 800158a:	701a      	strb	r2, [r3, #0]
	if (resultCalibration != FR_OK)
 800158c:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <writeCalibrationData+0x98>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <writeCalibrationData+0x34>
	{
		printf("Nie można otworzyć pliku do zapisu\n");
 8001594:	481c      	ldr	r0, [pc, #112]	; (8001608 <writeCalibrationData+0x9c>)
 8001596:	f017 faf5 	bl	8018b84 <puts>
		return -1;
 800159a:	f04f 33ff 	mov.w	r3, #4294967295
 800159e:	e027      	b.n	80015f0 <writeCalibrationData+0x84>
	}

	f_printf(&fileCalibration,
			"Front travel sensor: %d\nRear travel sensor: %d\nFront pressure sensor: %d\nRear pressure sensor: %d\nLeft brake sensor: %d\nRight brake sensor: %d\n",
			(int16_t) calibration->frontTravelSensor,
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f9b3 3000 	ldrsh.w	r3, [r3]
	f_printf(&fileCalibration,
 80015a6:	461c      	mov	r4, r3
			(int16_t) calibration->rearTravelSensor,
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	f_printf(&fileCalibration,
 80015ae:	461d      	mov	r5, r3
			(int16_t) calibration->frontPressureSensor,
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	f_printf(&fileCalibration,
 80015b6:	461a      	mov	r2, r3
			(int16_t) calibration->rearPressureSensor,
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
	f_printf(&fileCalibration,
 80015be:	4619      	mov	r1, r3
			(int16_t) calibration->leftBrakeSensor,
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
	f_printf(&fileCalibration,
 80015c6:	4618      	mov	r0, r3
			(int16_t) calibration->rightBrakeSensor);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
	f_printf(&fileCalibration,
 80015ce:	9303      	str	r3, [sp, #12]
 80015d0:	9002      	str	r0, [sp, #8]
 80015d2:	9101      	str	r1, [sp, #4]
 80015d4:	9200      	str	r2, [sp, #0]
 80015d6:	462b      	mov	r3, r5
 80015d8:	4622      	mov	r2, r4
 80015da:	490c      	ldr	r1, [pc, #48]	; (800160c <writeCalibrationData+0xa0>)
 80015dc:	4808      	ldr	r0, [pc, #32]	; (8001600 <writeCalibrationData+0x94>)
 80015de:	f012 fb61 	bl	8013ca4 <f_printf>

	f_close(&fileCalibration);
 80015e2:	4807      	ldr	r0, [pc, #28]	; (8001600 <writeCalibrationData+0x94>)
 80015e4:	f011 ff94 	bl	8013510 <f_close>
	Unmount_SD("/");
 80015e8:	4803      	ldr	r0, [pc, #12]	; (80015f8 <writeCalibrationData+0x8c>)
 80015ea:	f7ff fd89 	bl	8001100 <Unmount_SD>

	return 0;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bdb0      	pop	{r4, r5, r7, pc}
 80015f8:	0801cca4 	.word	0x0801cca4
 80015fc:	0801cd20 	.word	0x0801cd20
 8001600:	20000788 	.word	0x20000788
 8001604:	200009b8 	.word	0x200009b8
 8001608:	0801ce0c 	.word	0x0801ce0c
 800160c:	0801ce34 	.word	0x0801ce34

08001610 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001616:	463b      	mov	r3, r7
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001622:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <MX_ADC1_Init+0x98>)
 8001624:	4a21      	ldr	r2, [pc, #132]	; (80016ac <MX_ADC1_Init+0x9c>)
 8001626:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001628:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <MX_ADC1_Init+0x98>)
 800162a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800162e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001630:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <MX_ADC1_Init+0x98>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001636:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <MX_ADC1_Init+0x98>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800163c:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <MX_ADC1_Init+0x98>)
 800163e:	2200      	movs	r2, #0
 8001640:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001642:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <MX_ADC1_Init+0x98>)
 8001644:	2200      	movs	r2, #0
 8001646:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800164a:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <MX_ADC1_Init+0x98>)
 800164c:	2200      	movs	r2, #0
 800164e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001650:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <MX_ADC1_Init+0x98>)
 8001652:	4a17      	ldr	r2, [pc, #92]	; (80016b0 <MX_ADC1_Init+0xa0>)
 8001654:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001656:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <MX_ADC1_Init+0x98>)
 8001658:	2200      	movs	r2, #0
 800165a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <MX_ADC1_Init+0x98>)
 800165e:	2201      	movs	r2, #1
 8001660:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001662:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <MX_ADC1_Init+0x98>)
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800166a:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <MX_ADC1_Init+0x98>)
 800166c:	2201      	movs	r2, #1
 800166e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001670:	480d      	ldr	r0, [pc, #52]	; (80016a8 <MX_ADC1_Init+0x98>)
 8001672:	f002 fb33 	bl	8003cdc <HAL_ADC_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800167c:	f000 fec4 	bl	8002408 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001680:	2304      	movs	r3, #4
 8001682:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001684:	2301      	movs	r3, #1
 8001686:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001688:	2300      	movs	r3, #0
 800168a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800168c:	463b      	mov	r3, r7
 800168e:	4619      	mov	r1, r3
 8001690:	4805      	ldr	r0, [pc, #20]	; (80016a8 <MX_ADC1_Init+0x98>)
 8001692:	f002 fcdb 	bl	800404c <HAL_ADC_ConfigChannel>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800169c:	f000 feb4 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016a0:	bf00      	nop
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	200009dc 	.word	0x200009dc
 80016ac:	40012000 	.word	0x40012000
 80016b0:	0f000001 	.word	0x0f000001

080016b4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016ba:	463b      	mov	r3, r7
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80016c6:	4b45      	ldr	r3, [pc, #276]	; (80017dc <MX_ADC2_Init+0x128>)
 80016c8:	4a45      	ldr	r2, [pc, #276]	; (80017e0 <MX_ADC2_Init+0x12c>)
 80016ca:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016cc:	4b43      	ldr	r3, [pc, #268]	; (80017dc <MX_ADC2_Init+0x128>)
 80016ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016d2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80016d4:	4b41      	ldr	r3, [pc, #260]	; (80017dc <MX_ADC2_Init+0x128>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80016da:	4b40      	ldr	r3, [pc, #256]	; (80017dc <MX_ADC2_Init+0x128>)
 80016dc:	2201      	movs	r2, #1
 80016de:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80016e0:	4b3e      	ldr	r3, [pc, #248]	; (80017dc <MX_ADC2_Init+0x128>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80016e6:	4b3d      	ldr	r3, [pc, #244]	; (80017dc <MX_ADC2_Init+0x128>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80016ee:	4b3b      	ldr	r3, [pc, #236]	; (80017dc <MX_ADC2_Init+0x128>)
 80016f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80016f6:	4b39      	ldr	r3, [pc, #228]	; (80017dc <MX_ADC2_Init+0x128>)
 80016f8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80016fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016fe:	4b37      	ldr	r3, [pc, #220]	; (80017dc <MX_ADC2_Init+0x128>)
 8001700:	2200      	movs	r2, #0
 8001702:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 6;
 8001704:	4b35      	ldr	r3, [pc, #212]	; (80017dc <MX_ADC2_Init+0x128>)
 8001706:	2206      	movs	r2, #6
 8001708:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800170a:	4b34      	ldr	r3, [pc, #208]	; (80017dc <MX_ADC2_Init+0x128>)
 800170c:	2201      	movs	r2, #1
 800170e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001712:	4b32      	ldr	r3, [pc, #200]	; (80017dc <MX_ADC2_Init+0x128>)
 8001714:	2201      	movs	r2, #1
 8001716:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001718:	4830      	ldr	r0, [pc, #192]	; (80017dc <MX_ADC2_Init+0x128>)
 800171a:	f002 fadf 	bl	8003cdc <HAL_ADC_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8001724:	f000 fe70 	bl	8002408 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001728:	230c      	movs	r3, #12
 800172a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800172c:	2301      	movs	r3, #1
 800172e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001730:	2301      	movs	r3, #1
 8001732:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001734:	463b      	mov	r3, r7
 8001736:	4619      	mov	r1, r3
 8001738:	4828      	ldr	r0, [pc, #160]	; (80017dc <MX_ADC2_Init+0x128>)
 800173a:	f002 fc87 	bl	800404c <HAL_ADC_ConfigChannel>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8001744:	f000 fe60 	bl	8002408 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001748:	230d      	movs	r3, #13
 800174a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800174c:	2302      	movs	r3, #2
 800174e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001750:	463b      	mov	r3, r7
 8001752:	4619      	mov	r1, r3
 8001754:	4821      	ldr	r0, [pc, #132]	; (80017dc <MX_ADC2_Init+0x128>)
 8001756:	f002 fc79 	bl	800404c <HAL_ADC_ConfigChannel>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8001760:	f000 fe52 	bl	8002408 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001764:	2301      	movs	r3, #1
 8001766:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001768:	2303      	movs	r3, #3
 800176a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800176c:	463b      	mov	r3, r7
 800176e:	4619      	mov	r1, r3
 8001770:	481a      	ldr	r0, [pc, #104]	; (80017dc <MX_ADC2_Init+0x128>)
 8001772:	f002 fc6b 	bl	800404c <HAL_ADC_ConfigChannel>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 800177c:	f000 fe44 	bl	8002408 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001780:	2302      	movs	r3, #2
 8001782:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001784:	2304      	movs	r3, #4
 8001786:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001788:	463b      	mov	r3, r7
 800178a:	4619      	mov	r1, r3
 800178c:	4813      	ldr	r0, [pc, #76]	; (80017dc <MX_ADC2_Init+0x128>)
 800178e:	f002 fc5d 	bl	800404c <HAL_ADC_ConfigChannel>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_ADC2_Init+0xe8>
  {
    Error_Handler();
 8001798:	f000 fe36 	bl	8002408 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800179c:	230b      	movs	r3, #11
 800179e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80017a0:	2305      	movs	r3, #5
 80017a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017a4:	463b      	mov	r3, r7
 80017a6:	4619      	mov	r1, r3
 80017a8:	480c      	ldr	r0, [pc, #48]	; (80017dc <MX_ADC2_Init+0x128>)
 80017aa:	f002 fc4f 	bl	800404c <HAL_ADC_ConfigChannel>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_ADC2_Init+0x104>
  {
    Error_Handler();
 80017b4:	f000 fe28 	bl	8002408 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80017b8:	230a      	movs	r3, #10
 80017ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80017bc:	2306      	movs	r3, #6
 80017be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017c0:	463b      	mov	r3, r7
 80017c2:	4619      	mov	r1, r3
 80017c4:	4805      	ldr	r0, [pc, #20]	; (80017dc <MX_ADC2_Init+0x128>)
 80017c6:	f002 fc41 	bl	800404c <HAL_ADC_ConfigChannel>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_ADC2_Init+0x120>
  {
    Error_Handler();
 80017d0:	f000 fe1a 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80017d4:	bf00      	nop
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000a24 	.word	0x20000a24
 80017e0:	40012100 	.word	0x40012100

080017e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08c      	sub	sp, #48	; 0x30
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 031c 	add.w	r3, r7, #28
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a53      	ldr	r2, [pc, #332]	; (8001950 <HAL_ADC_MspInit+0x16c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d128      	bne.n	8001858 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	61bb      	str	r3, [r7, #24]
 800180a:	4b52      	ldr	r3, [pc, #328]	; (8001954 <HAL_ADC_MspInit+0x170>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180e:	4a51      	ldr	r2, [pc, #324]	; (8001954 <HAL_ADC_MspInit+0x170>)
 8001810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001814:	6453      	str	r3, [r2, #68]	; 0x44
 8001816:	4b4f      	ldr	r3, [pc, #316]	; (8001954 <HAL_ADC_MspInit+0x170>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181e:	61bb      	str	r3, [r7, #24]
 8001820:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	4b4b      	ldr	r3, [pc, #300]	; (8001954 <HAL_ADC_MspInit+0x170>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a4a      	ldr	r2, [pc, #296]	; (8001954 <HAL_ADC_MspInit+0x170>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b48      	ldr	r3, [pc, #288]	; (8001954 <HAL_ADC_MspInit+0x170>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = BATTERY_LEVEL_Pin;
 800183e:	2310      	movs	r3, #16
 8001840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001842:	2303      	movs	r3, #3
 8001844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BATTERY_LEVEL_GPIO_Port, &GPIO_InitStruct);
 800184a:	f107 031c 	add.w	r3, r7, #28
 800184e:	4619      	mov	r1, r3
 8001850:	4841      	ldr	r0, [pc, #260]	; (8001958 <HAL_ADC_MspInit+0x174>)
 8001852:	f003 fb9b 	bl	8004f8c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001856:	e077      	b.n	8001948 <HAL_ADC_MspInit+0x164>
  else if(adcHandle->Instance==ADC2)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a3f      	ldr	r2, [pc, #252]	; (800195c <HAL_ADC_MspInit+0x178>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d172      	bne.n	8001948 <HAL_ADC_MspInit+0x164>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	4b3b      	ldr	r3, [pc, #236]	; (8001954 <HAL_ADC_MspInit+0x170>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	4a3a      	ldr	r2, [pc, #232]	; (8001954 <HAL_ADC_MspInit+0x170>)
 800186c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001870:	6453      	str	r3, [r2, #68]	; 0x44
 8001872:	4b38      	ldr	r3, [pc, #224]	; (8001954 <HAL_ADC_MspInit+0x170>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	4b34      	ldr	r3, [pc, #208]	; (8001954 <HAL_ADC_MspInit+0x170>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a33      	ldr	r2, [pc, #204]	; (8001954 <HAL_ADC_MspInit+0x170>)
 8001888:	f043 0304 	orr.w	r3, r3, #4
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b31      	ldr	r3, [pc, #196]	; (8001954 <HAL_ADC_MspInit+0x170>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	4b2d      	ldr	r3, [pc, #180]	; (8001954 <HAL_ADC_MspInit+0x170>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a2c      	ldr	r2, [pc, #176]	; (8001954 <HAL_ADC_MspInit+0x170>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b2a      	ldr	r3, [pc, #168]	; (8001954 <HAL_ADC_MspInit+0x170>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BRAKE_SENSOR_RIGHT_Pin|BRAKE_SENSOR_LEFT_Pin|TRAVEL_SENSOR_FRONT_Pin|TRAVEL_SENSOR_REAR_Pin;
 80018b6:	230f      	movs	r3, #15
 80018b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ba:	2303      	movs	r3, #3
 80018bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018c2:	f107 031c 	add.w	r3, r7, #28
 80018c6:	4619      	mov	r1, r3
 80018c8:	4825      	ldr	r0, [pc, #148]	; (8001960 <HAL_ADC_MspInit+0x17c>)
 80018ca:	f003 fb5f 	bl	8004f8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PRESSURE_SENSOR_FRONT_Pin|PRESSURE_SENSOR_REAR_Pin;
 80018ce:	2306      	movs	r3, #6
 80018d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018d2:	2303      	movs	r3, #3
 80018d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018da:	f107 031c 	add.w	r3, r7, #28
 80018de:	4619      	mov	r1, r3
 80018e0:	481d      	ldr	r0, [pc, #116]	; (8001958 <HAL_ADC_MspInit+0x174>)
 80018e2:	f003 fb53 	bl	8004f8c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80018e6:	4b1f      	ldr	r3, [pc, #124]	; (8001964 <HAL_ADC_MspInit+0x180>)
 80018e8:	4a1f      	ldr	r2, [pc, #124]	; (8001968 <HAL_ADC_MspInit+0x184>)
 80018ea:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80018ec:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <HAL_ADC_MspInit+0x180>)
 80018ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018f2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018f4:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <HAL_ADC_MspInit+0x180>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80018fa:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <HAL_ADC_MspInit+0x180>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001900:	4b18      	ldr	r3, [pc, #96]	; (8001964 <HAL_ADC_MspInit+0x180>)
 8001902:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001906:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001908:	4b16      	ldr	r3, [pc, #88]	; (8001964 <HAL_ADC_MspInit+0x180>)
 800190a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800190e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001910:	4b14      	ldr	r3, [pc, #80]	; (8001964 <HAL_ADC_MspInit+0x180>)
 8001912:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001916:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001918:	4b12      	ldr	r3, [pc, #72]	; (8001964 <HAL_ADC_MspInit+0x180>)
 800191a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800191e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001920:	4b10      	ldr	r3, [pc, #64]	; (8001964 <HAL_ADC_MspInit+0x180>)
 8001922:	2200      	movs	r2, #0
 8001924:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001926:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <HAL_ADC_MspInit+0x180>)
 8001928:	2200      	movs	r2, #0
 800192a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800192c:	480d      	ldr	r0, [pc, #52]	; (8001964 <HAL_ADC_MspInit+0x180>)
 800192e:	f002 ff1f 	bl	8004770 <HAL_DMA_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <HAL_ADC_MspInit+0x158>
      Error_Handler();
 8001938:	f000 fd66 	bl	8002408 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a09      	ldr	r2, [pc, #36]	; (8001964 <HAL_ADC_MspInit+0x180>)
 8001940:	639a      	str	r2, [r3, #56]	; 0x38
 8001942:	4a08      	ldr	r2, [pc, #32]	; (8001964 <HAL_ADC_MspInit+0x180>)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001948:	bf00      	nop
 800194a:	3730      	adds	r7, #48	; 0x30
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40012000 	.word	0x40012000
 8001954:	40023800 	.word	0x40023800
 8001958:	40020000 	.word	0x40020000
 800195c:	40012100 	.word	0x40012100
 8001960:	40020800 	.word	0x40020800
 8001964:	20000a6c 	.word	0x20000a6c
 8001968:	40026440 	.word	0x40026440

0800196c <readButton>:
/******************************************************************************
 * Function Definitions
 *******************************************************************************/

button_t readButton(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	807b      	strh	r3, [r7, #2]
	button_t button = BUTTON_SNA;
 8001978:	2304      	movs	r3, #4
 800197a:	73fb      	strb	r3, [r7, #15]
	static uint8_t buttonPressedCounter = 0;
	while (GPIO_PIN_RESET == HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)
 800197c:	e01b      	b.n	80019b6 <readButton+0x4a>
			&& (BUTTON_PRESSED_COUNT >= buttonPressedCounter))
	{
		if ( BUTTON_PRESSED_COUNT > buttonPressedCounter)
 800197e:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <readButton+0x74>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b13      	cmp	r3, #19
 8001984:	d80d      	bhi.n	80019a2 <readButton+0x36>
		{

			++buttonPressedCounter;
 8001986:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <readButton+0x74>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	3301      	adds	r3, #1
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4b14      	ldr	r3, [pc, #80]	; (80019e0 <readButton+0x74>)
 8001990:	701a      	strb	r2, [r3, #0]
			button =
					(LEFT_BUTTON_Pin == GPIO_Pin) ?
							(BUTTON_LEFT) : (BUTTON_RIGHT);
 8001992:	887b      	ldrh	r3, [r7, #2]
 8001994:	2b80      	cmp	r3, #128	; 0x80
 8001996:	bf14      	ite	ne
 8001998:	2301      	movne	r3, #1
 800199a:	2300      	moveq	r3, #0
 800199c:	b2db      	uxtb	r3, r3
			button =
 800199e:	73fb      	strb	r3, [r7, #15]
 80019a0:	e006      	b.n	80019b0 <readButton+0x44>
		}
		else
		{
			button =
					(LEFT_BUTTON_Pin == GPIO_Pin) ?
							(BUTTON_LEFT_PRESSED) : (BUTTON_RIGHT_PRESSED);
 80019a2:	887b      	ldrh	r3, [r7, #2]
 80019a4:	2b80      	cmp	r3, #128	; 0x80
 80019a6:	d101      	bne.n	80019ac <readButton+0x40>
 80019a8:	2302      	movs	r3, #2
 80019aa:	e000      	b.n	80019ae <readButton+0x42>
 80019ac:	2303      	movs	r3, #3
			button =
 80019ae:	73fb      	strb	r3, [r7, #15]
		}
		osDelay(BUTTON_DELAY);
 80019b0:	201e      	movs	r0, #30
 80019b2:	f012 fcd5 	bl	8014360 <osDelay>
	while (GPIO_PIN_RESET == HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)
 80019b6:	887b      	ldrh	r3, [r7, #2]
 80019b8:	4619      	mov	r1, r3
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f003 fc7a 	bl	80052b4 <HAL_GPIO_ReadPin>
 80019c0:	4603      	mov	r3, r0
			&& (BUTTON_PRESSED_COUNT >= buttonPressedCounter))
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d103      	bne.n	80019ce <readButton+0x62>
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <readButton+0x74>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b14      	cmp	r3, #20
 80019cc:	d9d7      	bls.n	800197e <readButton+0x12>
	}
	buttonPressedCounter = 0;
 80019ce:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <readButton+0x74>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
	return (button);
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000acc 	.word	0x20000acc

080019e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	607b      	str	r3, [r7, #4]
 80019ee:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <MX_DMA_Init+0x5c>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4a13      	ldr	r2, [pc, #76]	; (8001a40 <MX_DMA_Init+0x5c>)
 80019f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <MX_DMA_Init+0x5c>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001a06:	2200      	movs	r2, #0
 8001a08:	2105      	movs	r1, #5
 8001a0a:	203a      	movs	r0, #58	; 0x3a
 8001a0c:	f002 fe86 	bl	800471c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001a10:	203a      	movs	r0, #58	; 0x3a
 8001a12:	f002 fe9f 	bl	8004754 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2105      	movs	r1, #5
 8001a1a:	203b      	movs	r0, #59	; 0x3b
 8001a1c:	f002 fe7e 	bl	800471c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001a20:	203b      	movs	r0, #59	; 0x3b
 8001a22:	f002 fe97 	bl	8004754 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2105      	movs	r1, #5
 8001a2a:	2045      	movs	r0, #69	; 0x45
 8001a2c:	f002 fe76 	bl	800471c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001a30:	2045      	movs	r0, #69	; 0x45
 8001a32:	f002 fe8f 	bl	8004754 <HAL_NVIC_EnableIRQ>

}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40023800 	.word	0x40023800

08001a44 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4a07      	ldr	r2, [pc, #28]	; (8001a70 <vApplicationGetIdleTaskMemory+0x2c>)
 8001a54:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	4a06      	ldr	r2, [pc, #24]	; (8001a74 <vApplicationGetIdleTaskMemory+0x30>)
 8001a5a:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2280      	movs	r2, #128	; 0x80
 8001a60:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8001a62:	bf00      	nop
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	20002c50 	.word	0x20002c50
 8001a74:	20002cf0 	.word	0x20002cf0

08001a78 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001a78:	b5b0      	push	{r4, r5, r7, lr}
 8001a7a:	b0aa      	sub	sp, #168	; 0xa8
 8001a7c:	af00      	add	r7, sp, #0
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of travelSensorSem */
  osSemaphoreStaticDef(travelSensorSem, &travelSensorSemControlBlock);
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001a84:	4b45      	ldr	r3, [pc, #276]	; (8001b9c <MX_FREERTOS_Init+0x124>)
 8001a86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  travelSensorSemHandle = osSemaphoreCreate(osSemaphore(travelSensorSem), 1);
 8001a8a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001a8e:	2101      	movs	r1, #1
 8001a90:	4618      	mov	r0, r3
 8001a92:	f012 fc79 	bl	8014388 <osSemaphoreCreate>
 8001a96:	4603      	mov	r3, r0
 8001a98:	4a41      	ldr	r2, [pc, #260]	; (8001ba0 <MX_FREERTOS_Init+0x128>)
 8001a9a:	6013      	str	r3, [r2, #0]

  /* definition and creation of SendData */
  osSemaphoreStaticDef(SendData, &SendDataControlBlock);
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001aa2:	4b40      	ldr	r3, [pc, #256]	; (8001ba4 <MX_FREERTOS_Init+0x12c>)
 8001aa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  SendDataHandle = osSemaphoreCreate(osSemaphore(SendData), 1);
 8001aa8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001aac:	2101      	movs	r1, #1
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f012 fc6a 	bl	8014388 <osSemaphoreCreate>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	4a3c      	ldr	r2, [pc, #240]	; (8001ba8 <MX_FREERTOS_Init+0x130>)
 8001ab8:	6013      	str	r3, [r2, #0]

  /* definition and creation of writeCalibrationSem */
  osSemaphoreStaticDef(writeCalibrationSem, &writeCalibrationSemControlBlock);
 8001aba:	2300      	movs	r3, #0
 8001abc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001ac0:	4b3a      	ldr	r3, [pc, #232]	; (8001bac <MX_FREERTOS_Init+0x134>)
 8001ac2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  writeCalibrationSemHandle = osSemaphoreCreate(osSemaphore(writeCalibrationSem), 1);
 8001ac6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001aca:	2101      	movs	r1, #1
 8001acc:	4618      	mov	r0, r3
 8001ace:	f012 fc5b 	bl	8014388 <osSemaphoreCreate>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	4a36      	ldr	r2, [pc, #216]	; (8001bb0 <MX_FREERTOS_Init+0x138>)
 8001ad6:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of SdCard */
  osThreadDef(SdCard, SdCardInit, osPriorityNormal, 0, 1024);
 8001ad8:	4b36      	ldr	r3, [pc, #216]	; (8001bb4 <MX_FREERTOS_Init+0x13c>)
 8001ada:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001ade:	461d      	mov	r5, r3
 8001ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ae4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ae8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SdCardHandle = osThreadCreate(osThread(SdCard), NULL);
 8001aec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001af0:	2100      	movs	r1, #0
 8001af2:	4618      	mov	r0, r3
 8001af4:	f012 fbe8 	bl	80142c8 <osThreadCreate>
 8001af8:	4603      	mov	r3, r0
 8001afa:	4a2f      	ldr	r2, [pc, #188]	; (8001bb8 <MX_FREERTOS_Init+0x140>)
 8001afc:	6013      	str	r3, [r2, #0]

  /* definition and creation of sensorRead */
  osThreadStaticDef(sensorRead, sensorReadInit, osPriorityNormal, 0, 1024, sensorReadBuffer, &sensorReadControlBlock);
 8001afe:	4b2f      	ldr	r3, [pc, #188]	; (8001bbc <MX_FREERTOS_Init+0x144>)
 8001b00:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001b04:	461d      	mov	r5, r3
 8001b06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sensorReadHandle = osThreadCreate(osThread(sensorRead), NULL);
 8001b12:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b16:	2100      	movs	r1, #0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f012 fbd5 	bl	80142c8 <osThreadCreate>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4a27      	ldr	r2, [pc, #156]	; (8001bc0 <MX_FREERTOS_Init+0x148>)
 8001b22:	6013      	str	r3, [r2, #0]

  /* definition and creation of ButtonTask */
  osThreadStaticDef(ButtonTask, ButtonTaskInit, osPriorityHigh, 0, 128, SdCardBuffer, &SdCardControlBlock);
 8001b24:	4b27      	ldr	r3, [pc, #156]	; (8001bc4 <MX_FREERTOS_Init+0x14c>)
 8001b26:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001b2a:	461d      	mov	r5, r3
 8001b2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b30:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ButtonTaskHandle = osThreadCreate(osThread(ButtonTask), NULL);
 8001b38:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f012 fbc2 	bl	80142c8 <osThreadCreate>
 8001b44:	4603      	mov	r3, r0
 8001b46:	4a20      	ldr	r2, [pc, #128]	; (8001bc8 <MX_FREERTOS_Init+0x150>)
 8001b48:	6013      	str	r3, [r2, #0]

  /* definition and creation of menuProcessData */
  osThreadStaticDef(menuProcessData, menuProcessDataInit, osPriorityNormal, 0, 512, menuProcessDataBuffer, &menuProcessDataControlBlock);
 8001b4a:	4b20      	ldr	r3, [pc, #128]	; (8001bcc <MX_FREERTOS_Init+0x154>)
 8001b4c:	f107 0420 	add.w	r4, r7, #32
 8001b50:	461d      	mov	r5, r3
 8001b52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b56:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  menuProcessDataHandle = osThreadCreate(osThread(menuProcessData), NULL);
 8001b5e:	f107 0320 	add.w	r3, r7, #32
 8001b62:	2100      	movs	r1, #0
 8001b64:	4618      	mov	r0, r3
 8001b66:	f012 fbaf 	bl	80142c8 <osThreadCreate>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	4a18      	ldr	r2, [pc, #96]	; (8001bd0 <MX_FREERTOS_Init+0x158>)
 8001b6e:	6013      	str	r3, [r2, #0]

  /* definition and creation of adxlTask */
  osThreadStaticDef(adxlTask, adxlTaskInit, osPriorityNormal, 0, 256, adxlTaskBuffer, &adxlTaskControlBlock);
 8001b70:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <MX_FREERTOS_Init+0x15c>)
 8001b72:	1d3c      	adds	r4, r7, #4
 8001b74:	461d      	mov	r5, r3
 8001b76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  adxlTaskHandle = osThreadCreate(osThread(adxlTask), NULL);
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f012 fb9e 	bl	80142c8 <osThreadCreate>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	4a12      	ldr	r2, [pc, #72]	; (8001bd8 <MX_FREERTOS_Init+0x160>)
 8001b90:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001b92:	bf00      	nop
 8001b94:	37a8      	adds	r7, #168	; 0xa8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bdb0      	pop	{r4, r5, r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20002b70 	.word	0x20002b70
 8001ba0:	20002b6c 	.word	0x20002b6c
 8001ba4:	20002bbc 	.word	0x20002bbc
 8001ba8:	20002bb8 	.word	0x20002bb8
 8001bac:	20002c08 	.word	0x20002c08
 8001bb0:	20002c04 	.word	0x20002c04
 8001bb4:	0801cecc 	.word	0x0801cecc
 8001bb8:	20000ad8 	.word	0x20000ad8
 8001bbc:	0801cef4 	.word	0x0801cef4
 8001bc0:	20000adc 	.word	0x20000adc
 8001bc4:	0801cf1c 	.word	0x0801cf1c
 8001bc8:	20001b80 	.word	0x20001b80
 8001bcc:	0801cf48 	.word	0x0801cf48
 8001bd0:	20001e24 	.word	0x20001e24
 8001bd4:	0801cf70 	.word	0x0801cf70
 8001bd8:	200026c8 	.word	0x200026c8

08001bdc <SdCardInit>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_SdCardInit */
void SdCardInit(void const * argument)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001be4:	f015 f9e2 	bl	8016fac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN SdCardInit */
	Mount_SD("/");
 8001be8:	4805      	ldr	r0, [pc, #20]	; (8001c00 <SdCardInit+0x24>)
 8001bea:	f7ff fa73 	bl	80010d4 <Mount_SD>
	Unmount_SD("/");
 8001bee:	4804      	ldr	r0, [pc, #16]	; (8001c00 <SdCardInit+0x24>)
 8001bf0:	f7ff fa86 	bl	8001100 <Unmount_SD>

	/* Infinite loop */
	for (;;)
	{

		osDelay(1000);
 8001bf4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bf8:	f012 fbb2 	bl	8014360 <osDelay>
 8001bfc:	e7fa      	b.n	8001bf4 <SdCardInit+0x18>
 8001bfe:	bf00      	nop
 8001c00:	0801cf8c 	.word	0x0801cf8c

08001c04 <sensorReadInit>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_sensorReadInit */
void sensorReadInit(void const * argument)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensorReadInit */

	/* Infinite loop */
	for (;;)
	{
		if (osOK == osSemaphoreWait(travelSensorSemHandle, osWaitForever))
 8001c0c:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <sensorReadInit+0x7c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f04f 31ff 	mov.w	r1, #4294967295
 8001c14:	4618      	mov	r0, r3
 8001c16:	f012 fbe9 	bl	80143ec <osSemaphoreWait>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d12a      	bne.n	8001c76 <sensorReadInit+0x72>
		{
			if (MENU_MEASURMENT_START == getMenuSelector())
 8001c20:	f000 fbf8 	bl	8002414 <getMenuSelector>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b05      	cmp	r3, #5
 8001c28:	d106      	bne.n	8001c38 <sensorReadInit+0x34>
			{
				char *sensorDataPtr = getSensorDataFileName();
 8001c2a:	f000 fc0f 	bl	800244c <getSensorDataFileName>
 8001c2e:	60f8      	str	r0, [r7, #12]
				processData(sensorDataPtr);
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f001 fd8b 	bl	800374c <processData>
 8001c36:	e01e      	b.n	8001c76 <sensorReadInit+0x72>
			}
			else if (MENU_SAG_START == getMenuSelector())
 8001c38:	f000 fbec 	bl	8002414 <getMenuSelector>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b03      	cmp	r3, #3
 8001c40:	d108      	bne.n	8001c54 <sensorReadInit+0x50>
			{
				processDataSag(result, resultPressure);
 8001c42:	4910      	ldr	r1, [pc, #64]	; (8001c84 <sensorReadInit+0x80>)
 8001c44:	4810      	ldr	r0, [pc, #64]	; (8001c88 <sensorReadInit+0x84>)
 8001c46:	f001 fd99 	bl	800377c <processDataSag>
				lcdMenuSagStart(result, resultPressure);
 8001c4a:	490e      	ldr	r1, [pc, #56]	; (8001c84 <sensorReadInit+0x80>)
 8001c4c:	480e      	ldr	r0, [pc, #56]	; (8001c88 <sensorReadInit+0x84>)
 8001c4e:	f000 f961 	bl	8001f14 <lcdMenuSagStart>
 8001c52:	e010      	b.n	8001c76 <sensorReadInit+0x72>
			}
			else if (MENU_CALIBRATION == getMenuSelector()){
 8001c54:	f000 fbde 	bl	8002414 <getMenuSelector>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d10b      	bne.n	8001c76 <sensorReadInit+0x72>
				stopAdcDma();
 8001c5e:	f001 fca7 	bl	80035b0 <stopAdcDma>
				travelPressureSensorCalibration();
 8001c62:	f001 fcb9 	bl	80035d8 <travelPressureSensorCalibration>
				lcdMenuFinishedNotification("Cal Finished");
 8001c66:	4809      	ldr	r0, [pc, #36]	; (8001c8c <sensorReadInit+0x88>)
 8001c68:	f000 f9dc 	bl	8002024 <lcdMenuFinishedNotification>
				lcdMenuStart();
 8001c6c:	f000 f9f6 	bl	800205c <lcdMenuStart>
				setMenuSelector(MENU_START);
 8001c70:	2000      	movs	r0, #0
 8001c72:	f000 fbdb 	bl	800242c <setMenuSelector>

		else
		{

		}
		osDelay(50);
 8001c76:	2032      	movs	r0, #50	; 0x32
 8001c78:	f012 fb72 	bl	8014360 <osDelay>
		if (osOK == osSemaphoreWait(travelSensorSemHandle, osWaitForever))
 8001c7c:	e7c6      	b.n	8001c0c <sensorReadInit+0x8>
 8001c7e:	bf00      	nop
 8001c80:	20002b6c 	.word	0x20002b6c
 8001c84:	20000ad4 	.word	0x20000ad4
 8001c88:	20000ad0 	.word	0x20000ad0
 8001c8c:	0801cf90 	.word	0x0801cf90

08001c90 <ButtonTaskInit>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ButtonTaskInit */
void ButtonTaskInit(void const * argument)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for (;;)
	{

		osDelay(100);
 8001c98:	2064      	movs	r0, #100	; 0x64
 8001c9a:	f012 fb61 	bl	8014360 <osDelay>
 8001c9e:	e7fb      	b.n	8001c98 <ButtonTaskInit+0x8>

08001ca0 <menuProcessDataInit>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_menuProcessDataInit */
void menuProcessDataInit(void const * argument)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN menuProcessDataInit */
	button_t buttonLeft;
	button_t buttonRight;
	HAL_I2C_Init(&hi2c1);
 8001ca8:	4811      	ldr	r0, [pc, #68]	; (8001cf0 <menuProcessDataInit+0x50>)
 8001caa:	f003 fb1b 	bl	80052e4 <HAL_I2C_Init>
	SSD1306_Init();
 8001cae:	f000 fdff 	bl	80028b0 <SSD1306_Init>
	lcdMenuStart();
 8001cb2:	f000 f9d3 	bl	800205c <lcdMenuStart>
	/* Infinite loop */
	for (;;)
	{
		buttonLeft = readButton(LEFT_BUTTON_GPIO_Port, LEFT_BUTTON_Pin);
 8001cb6:	2180      	movs	r1, #128	; 0x80
 8001cb8:	480e      	ldr	r0, [pc, #56]	; (8001cf4 <menuProcessDataInit+0x54>)
 8001cba:	f7ff fe57 	bl	800196c <readButton>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	73fb      	strb	r3, [r7, #15]
		buttonRight = readButton(RIGHT_BUTTON_GPIO_Port, RIGHT_BUTTON_Pin);
 8001cc2:	2140      	movs	r1, #64	; 0x40
 8001cc4:	480b      	ldr	r0, [pc, #44]	; (8001cf4 <menuProcessDataInit+0x54>)
 8001cc6:	f7ff fe51 	bl	800196c <readButton>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	73bb      	strb	r3, [r7, #14]
		if ((BUTTON_SNA != buttonLeft) || (BUTTON_SNA != buttonRight))
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d102      	bne.n	8001cda <menuProcessDataInit+0x3a>
 8001cd4:	7bbb      	ldrb	r3, [r7, #14]
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	d005      	beq.n	8001ce6 <menuProcessDataInit+0x46>
		{
			menuSelector(buttonLeft, buttonRight);
 8001cda:	7bba      	ldrb	r2, [r7, #14]
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
 8001cde:	4611      	mov	r1, r2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f000 fbbd 	bl	8002460 <menuSelector>
		}

		osDelay(10);
 8001ce6:	200a      	movs	r0, #10
 8001ce8:	f012 fb3a 	bl	8014360 <osDelay>
		buttonLeft = readButton(LEFT_BUTTON_GPIO_Port, LEFT_BUTTON_Pin);
 8001cec:	e7e3      	b.n	8001cb6 <menuProcessDataInit+0x16>
 8001cee:	bf00      	nop
 8001cf0:	20002ef0 	.word	0x20002ef0
 8001cf4:	40020400 	.word	0x40020400

08001cf8 <adxlTaskInit>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_adxlTaskInit */
void adxlTaskInit(void const * argument)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

		 xg = x * 0.0078;
		 yg = y * 0.0078;
		 zg = z * 0.0078;
		 printf("X: %f\nY: %f\nZ: %f\n", xg, yg, zg);*/
		osDelay(10);
 8001d00:	200a      	movs	r0, #10
 8001d02:	f012 fb2d 	bl	8014360 <osDelay>
 8001d06:	e7fb      	b.n	8001d00 <adxlTaskInit+0x8>

08001d08 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08a      	sub	sp, #40	; 0x28
 8001d0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0e:	f107 0314 	add.w	r3, r7, #20
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	60da      	str	r2, [r3, #12]
 8001d1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	4b3d      	ldr	r3, [pc, #244]	; (8001e18 <MX_GPIO_Init+0x110>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	4a3c      	ldr	r2, [pc, #240]	; (8001e18 <MX_GPIO_Init+0x110>)
 8001d28:	f043 0304 	orr.w	r3, r3, #4
 8001d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2e:	4b3a      	ldr	r3, [pc, #232]	; (8001e18 <MX_GPIO_Init+0x110>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	f003 0304 	and.w	r3, r3, #4
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	4b36      	ldr	r3, [pc, #216]	; (8001e18 <MX_GPIO_Init+0x110>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4a35      	ldr	r2, [pc, #212]	; (8001e18 <MX_GPIO_Init+0x110>)
 8001d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4b33      	ldr	r3, [pc, #204]	; (8001e18 <MX_GPIO_Init+0x110>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	60bb      	str	r3, [r7, #8]
 8001d5a:	4b2f      	ldr	r3, [pc, #188]	; (8001e18 <MX_GPIO_Init+0x110>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a2e      	ldr	r2, [pc, #184]	; (8001e18 <MX_GPIO_Init+0x110>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b2c      	ldr	r3, [pc, #176]	; (8001e18 <MX_GPIO_Init+0x110>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	4b28      	ldr	r3, [pc, #160]	; (8001e18 <MX_GPIO_Init+0x110>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a27      	ldr	r2, [pc, #156]	; (8001e18 <MX_GPIO_Init+0x110>)
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b25      	ldr	r3, [pc, #148]	; (8001e18 <MX_GPIO_Init+0x110>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	603b      	str	r3, [r7, #0]
 8001d92:	4b21      	ldr	r3, [pc, #132]	; (8001e18 <MX_GPIO_Init+0x110>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a20      	ldr	r2, [pc, #128]	; (8001e18 <MX_GPIO_Init+0x110>)
 8001d98:	f043 0308 	orr.w	r3, r3, #8
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b1e      	ldr	r3, [pc, #120]	; (8001e18 <MX_GPIO_Init+0x110>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	603b      	str	r3, [r7, #0]
 8001da8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACCELEROMETER_INT0_Pin;
 8001daa:	2380      	movs	r3, #128	; 0x80
 8001dac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001db2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACCELEROMETER_INT0_GPIO_Port, &GPIO_InitStruct);
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4817      	ldr	r0, [pc, #92]	; (8001e1c <MX_GPIO_Init+0x114>)
 8001dc0:	f003 f8e4 	bl	8004f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_detection_Pin;
 8001dc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_detection_GPIO_Port, &GPIO_InitStruct);
 8001dd2:	f107 0314 	add.w	r3, r7, #20
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4811      	ldr	r0, [pc, #68]	; (8001e20 <MX_GPIO_Init+0x118>)
 8001dda:	f003 f8d7 	bl	8004f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CHARGE_DETECTION_Pin;
 8001dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de4:	2300      	movs	r3, #0
 8001de6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CHARGE_DETECTION_GPIO_Port, &GPIO_InitStruct);
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	4619      	mov	r1, r3
 8001df2:	480b      	ldr	r0, [pc, #44]	; (8001e20 <MX_GPIO_Init+0x118>)
 8001df4:	f003 f8ca 	bl	8004f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RIGHT_BUTTON_Pin|LEFT_BUTTON_Pin;
 8001df8:	23c0      	movs	r3, #192	; 0xc0
 8001dfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e00:	2301      	movs	r3, #1
 8001e02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e04:	f107 0314 	add.w	r3, r7, #20
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4806      	ldr	r0, [pc, #24]	; (8001e24 <MX_GPIO_Init+0x11c>)
 8001e0c:	f003 f8be 	bl	8004f8c <HAL_GPIO_Init>

}
 8001e10:	bf00      	nop
 8001e12:	3728      	adds	r7, #40	; 0x28
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40020800 	.word	0x40020800
 8001e20:	40020000 	.word	0x40020000
 8001e24:	40020400 	.word	0x40020400

08001e28 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e2c:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <MX_I2C1_Init+0x50>)
 8001e2e:	4a13      	ldr	r2, [pc, #76]	; (8001e7c <MX_I2C1_Init+0x54>)
 8001e30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001e32:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <MX_I2C1_Init+0x50>)
 8001e34:	4a12      	ldr	r2, [pc, #72]	; (8001e80 <MX_I2C1_Init+0x58>)
 8001e36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e38:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <MX_I2C1_Init+0x50>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <MX_I2C1_Init+0x50>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e44:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <MX_I2C1_Init+0x50>)
 8001e46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e4c:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <MX_I2C1_Init+0x50>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <MX_I2C1_Init+0x50>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e58:	4b07      	ldr	r3, [pc, #28]	; (8001e78 <MX_I2C1_Init+0x50>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e5e:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <MX_I2C1_Init+0x50>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e64:	4804      	ldr	r0, [pc, #16]	; (8001e78 <MX_I2C1_Init+0x50>)
 8001e66:	f003 fa3d 	bl	80052e4 <HAL_I2C_Init>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e70:	f000 faca 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20002ef0 	.word	0x20002ef0
 8001e7c:	40005400 	.word	0x40005400
 8001e80:	00061a80 	.word	0x00061a80

08001e84 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08a      	sub	sp, #40	; 0x28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a19      	ldr	r2, [pc, #100]	; (8001f08 <HAL_I2C_MspInit+0x84>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d12c      	bne.n	8001f00 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	4b18      	ldr	r3, [pc, #96]	; (8001f0c <HAL_I2C_MspInit+0x88>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a17      	ldr	r2, [pc, #92]	; (8001f0c <HAL_I2C_MspInit+0x88>)
 8001eb0:	f043 0302 	orr.w	r3, r3, #2
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <HAL_I2C_MspInit+0x88>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ec2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec8:	2312      	movs	r3, #18
 8001eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ed4:	2304      	movs	r3, #4
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	4619      	mov	r1, r3
 8001ede:	480c      	ldr	r0, [pc, #48]	; (8001f10 <HAL_I2C_MspInit+0x8c>)
 8001ee0:	f003 f854 	bl	8004f8c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <HAL_I2C_MspInit+0x88>)
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	4a07      	ldr	r2, [pc, #28]	; (8001f0c <HAL_I2C_MspInit+0x88>)
 8001eee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ef2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <HAL_I2C_MspInit+0x88>)
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001f00:	bf00      	nop
 8001f02:	3728      	adds	r7, #40	; 0x28
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40005400 	.word	0x40005400
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40020400 	.word	0x40020400

08001f14 <lcdMenuSagStart>:

/******************************************************************************
 * Function Definitions
 *******************************************************************************/
void lcdMenuSagStart(int16_t *result, int16_t *resultPressure)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	; 0x28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
	char lcdFirstLineTravel[8] =
 8001f1e:	2300      	movs	r3, #0
 8001f20:	623b      	str	r3, [r7, #32]
 8001f22:	2300      	movs	r3, #0
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
	{ 0 };
	char lcSecondLineTravel[8] =
 8001f26:	2300      	movs	r3, #0
 8001f28:	61bb      	str	r3, [r7, #24]
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
	{ 0 };
	char lcdFirstLinePressure[8] =
 8001f2e:	2300      	movs	r3, #0
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
	{ 0 };
	char lcSecondLinePressure[8] =
 8001f36:	2300      	movs	r3, #0
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
	{ 0 };
	sprintf(lcdFirstLineTravel, "FT: %d", result[0]);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f44:	461a      	mov	r2, r3
 8001f46:	f107 0320 	add.w	r3, r7, #32
 8001f4a:	4930      	ldr	r1, [pc, #192]	; (800200c <lcdMenuSagStart+0xf8>)
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f016 fe21 	bl	8018b94 <siprintf>
	sprintf(lcSecondLineTravel, "RT: %d", result[1]);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	3302      	adds	r3, #2
 8001f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	f107 0318 	add.w	r3, r7, #24
 8001f60:	492b      	ldr	r1, [pc, #172]	; (8002010 <lcdMenuSagStart+0xfc>)
 8001f62:	4618      	mov	r0, r3
 8001f64:	f016 fe16 	bl	8018b94 <siprintf>
	sprintf(lcdFirstLinePressure, "FP: %d", resultPressure[0]);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	f107 0310 	add.w	r3, r7, #16
 8001f74:	4927      	ldr	r1, [pc, #156]	; (8002014 <lcdMenuSagStart+0x100>)
 8001f76:	4618      	mov	r0, r3
 8001f78:	f016 fe0c 	bl	8018b94 <siprintf>
	sprintf(lcSecondLinePressure, "RP: %d", resultPressure[1]);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	3302      	adds	r3, #2
 8001f80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f84:	461a      	mov	r2, r3
 8001f86:	f107 0308 	add.w	r3, r7, #8
 8001f8a:	4923      	ldr	r1, [pc, #140]	; (8002018 <lcdMenuSagStart+0x104>)
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f016 fe01 	bl	8018b94 <siprintf>
	SSD1306_Clear();
 8001f92:	f000 feb2 	bl	8002cfa <SSD1306_Clear>
	SSD1306_GotoXY(10, 10);
 8001f96:	210a      	movs	r1, #10
 8001f98:	200a      	movs	r0, #10
 8001f9a:	f000 fdf3 	bl	8002b84 <SSD1306_GotoXY>
	SSD1306_Puts(lcdFirstLineTravel, &Font_7x10, SSD1306_COLOR_WHITE);
 8001f9e:	f107 0320 	add.w	r3, r7, #32
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	491d      	ldr	r1, [pc, #116]	; (800201c <lcdMenuSagStart+0x108>)
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 fe82 	bl	8002cb0 <SSD1306_Puts>
	SSD1306_GotoXY(10, 30);
 8001fac:	211e      	movs	r1, #30
 8001fae:	200a      	movs	r0, #10
 8001fb0:	f000 fde8 	bl	8002b84 <SSD1306_GotoXY>
	SSD1306_Puts(lcSecondLineTravel, &Font_7x10, SSD1306_COLOR_WHITE);
 8001fb4:	f107 0318 	add.w	r3, r7, #24
 8001fb8:	2201      	movs	r2, #1
 8001fba:	4918      	ldr	r1, [pc, #96]	; (800201c <lcdMenuSagStart+0x108>)
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f000 fe77 	bl	8002cb0 <SSD1306_Puts>
	SSD1306_GotoXY(78, 10);
 8001fc2:	210a      	movs	r1, #10
 8001fc4:	204e      	movs	r0, #78	; 0x4e
 8001fc6:	f000 fddd 	bl	8002b84 <SSD1306_GotoXY>
	SSD1306_Puts(lcdFirstLinePressure, &Font_7x10, SSD1306_COLOR_WHITE);
 8001fca:	f107 0310 	add.w	r3, r7, #16
 8001fce:	2201      	movs	r2, #1
 8001fd0:	4912      	ldr	r1, [pc, #72]	; (800201c <lcdMenuSagStart+0x108>)
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 fe6c 	bl	8002cb0 <SSD1306_Puts>
	SSD1306_GotoXY(78, 30);
 8001fd8:	211e      	movs	r1, #30
 8001fda:	204e      	movs	r0, #78	; 0x4e
 8001fdc:	f000 fdd2 	bl	8002b84 <SSD1306_GotoXY>
	SSD1306_Puts(lcSecondLinePressure, &Font_7x10, SSD1306_COLOR_WHITE);
 8001fe0:	f107 0308 	add.w	r3, r7, #8
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	490d      	ldr	r1, [pc, #52]	; (800201c <lcdMenuSagStart+0x108>)
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f000 fe61 	bl	8002cb0 <SSD1306_Puts>
	SSD1306_GotoXY(10, 50);
 8001fee:	2132      	movs	r1, #50	; 0x32
 8001ff0:	200a      	movs	r0, #10
 8001ff2:	f000 fdc7 	bl	8002b84 <SSD1306_GotoXY>
	SSD1306_Puts("FINISH hold LEFT", &Font_7x10, SSD1306_COLOR_WHITE);
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	4908      	ldr	r1, [pc, #32]	; (800201c <lcdMenuSagStart+0x108>)
 8001ffa:	4809      	ldr	r0, [pc, #36]	; (8002020 <lcdMenuSagStart+0x10c>)
 8001ffc:	f000 fe58 	bl	8002cb0 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002000:	f000 fd1a 	bl	8002a38 <SSD1306_UpdateScreen>
}
 8002004:	bf00      	nop
 8002006:	3728      	adds	r7, #40	; 0x28
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	0801cfa0 	.word	0x0801cfa0
 8002010:	0801cfa8 	.word	0x0801cfa8
 8002014:	0801cfb0 	.word	0x0801cfb0
 8002018:	0801cfb8 	.word	0x0801cfb8
 800201c:	20000000 	.word	0x20000000
 8002020:	0801cfc0 	.word	0x0801cfc0

08002024 <lcdMenuFinishedNotification>:
void lcdMenuFinishedNotification(char *notification)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
	SSD1306_Clear();
 800202c:	f000 fe65 	bl	8002cfa <SSD1306_Clear>
	SSD1306_GotoXY(30, 30);
 8002030:	211e      	movs	r1, #30
 8002032:	201e      	movs	r0, #30
 8002034:	f000 fda6 	bl	8002b84 <SSD1306_GotoXY>
	SSD1306_Puts(notification, &Font_7x10, SSD1306_COLOR_WHITE);
 8002038:	2201      	movs	r2, #1
 800203a:	4907      	ldr	r1, [pc, #28]	; (8002058 <lcdMenuFinishedNotification+0x34>)
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 fe37 	bl	8002cb0 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002042:	f000 fcf9 	bl	8002a38 <SSD1306_UpdateScreen>
	osDelay(2000);
 8002046:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800204a:	f012 f989 	bl	8014360 <osDelay>
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000000 	.word	0x20000000

0800205c <lcdMenuStart>:

void lcdMenuStart()
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 8002060:	f000 fe4b 	bl	8002cfa <SSD1306_Clear>
	SSD1306_GotoXY(10, 10);
 8002064:	210a      	movs	r1, #10
 8002066:	200a      	movs	r0, #10
 8002068:	f000 fd8c 	bl	8002b84 <SSD1306_GotoXY>
	SSD1306_Puts("SAG", &Font_7x10, SSD1306_COLOR_WHITE);
 800206c:	2201      	movs	r2, #1
 800206e:	4911      	ldr	r1, [pc, #68]	; (80020b4 <lcdMenuStart+0x58>)
 8002070:	4811      	ldr	r0, [pc, #68]	; (80020b8 <lcdMenuStart+0x5c>)
 8002072:	f000 fe1d 	bl	8002cb0 <SSD1306_Puts>
	SSD1306_GotoXY(10, 30);
 8002076:	211e      	movs	r1, #30
 8002078:	200a      	movs	r0, #10
 800207a:	f000 fd83 	bl	8002b84 <SSD1306_GotoXY>
	SSD1306_Puts("LEFT", &Font_7x10, SSD1306_COLOR_WHITE);
 800207e:	2201      	movs	r2, #1
 8002080:	490c      	ldr	r1, [pc, #48]	; (80020b4 <lcdMenuStart+0x58>)
 8002082:	480e      	ldr	r0, [pc, #56]	; (80020bc <lcdMenuStart+0x60>)
 8002084:	f000 fe14 	bl	8002cb0 <SSD1306_Puts>
	SSD1306_GotoXY(68, 10);
 8002088:	210a      	movs	r1, #10
 800208a:	2044      	movs	r0, #68	; 0x44
 800208c:	f000 fd7a 	bl	8002b84 <SSD1306_GotoXY>
	SSD1306_Puts("MESSURE", &Font_7x10, SSD1306_COLOR_WHITE);
 8002090:	2201      	movs	r2, #1
 8002092:	4908      	ldr	r1, [pc, #32]	; (80020b4 <lcdMenuStart+0x58>)
 8002094:	480a      	ldr	r0, [pc, #40]	; (80020c0 <lcdMenuStart+0x64>)
 8002096:	f000 fe0b 	bl	8002cb0 <SSD1306_Puts>
	SSD1306_GotoXY(68, 30);
 800209a:	211e      	movs	r1, #30
 800209c:	2044      	movs	r0, #68	; 0x44
 800209e:	f000 fd71 	bl	8002b84 <SSD1306_GotoXY>
	SSD1306_Puts("RIGHT", &Font_7x10, SSD1306_COLOR_WHITE);
 80020a2:	2201      	movs	r2, #1
 80020a4:	4903      	ldr	r1, [pc, #12]	; (80020b4 <lcdMenuStart+0x58>)
 80020a6:	4807      	ldr	r0, [pc, #28]	; (80020c4 <lcdMenuStart+0x68>)
 80020a8:	f000 fe02 	bl	8002cb0 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80020ac:	f000 fcc4 	bl	8002a38 <SSD1306_UpdateScreen>
}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000000 	.word	0x20000000
 80020b8:	0801cfd4 	.word	0x0801cfd4
 80020bc:	0801cfd8 	.word	0x0801cfd8
 80020c0:	0801cfe0 	.word	0x0801cfe0
 80020c4:	0801cfe8 	.word	0x0801cfe8

080020c8 <lcdMenuSag>:

void lcdMenuSag()
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 80020cc:	f000 fe15 	bl	8002cfa <SSD1306_Clear>
	SSD1306_GotoXY(10, 10);
 80020d0:	210a      	movs	r1, #10
 80020d2:	200a      	movs	r0, #10
 80020d4:	f000 fd56 	bl	8002b84 <SSD1306_GotoXY>
	SSD1306_Puts("CALIB", &Font_7x10, SSD1306_COLOR_WHITE);
 80020d8:	2201      	movs	r2, #1
 80020da:	4916      	ldr	r1, [pc, #88]	; (8002134 <lcdMenuSag+0x6c>)
 80020dc:	4816      	ldr	r0, [pc, #88]	; (8002138 <lcdMenuSag+0x70>)
 80020de:	f000 fde7 	bl	8002cb0 <SSD1306_Puts>
	SSD1306_GotoXY(10, 30);
 80020e2:	211e      	movs	r1, #30
 80020e4:	200a      	movs	r0, #10
 80020e6:	f000 fd4d 	bl	8002b84 <SSD1306_GotoXY>
	SSD1306_Puts("LEFT", &Font_7x10, SSD1306_COLOR_WHITE);
 80020ea:	2201      	movs	r2, #1
 80020ec:	4911      	ldr	r1, [pc, #68]	; (8002134 <lcdMenuSag+0x6c>)
 80020ee:	4813      	ldr	r0, [pc, #76]	; (800213c <lcdMenuSag+0x74>)
 80020f0:	f000 fdde 	bl	8002cb0 <SSD1306_Puts>
	SSD1306_GotoXY(68, 10);
 80020f4:	210a      	movs	r1, #10
 80020f6:	2044      	movs	r0, #68	; 0x44
 80020f8:	f000 fd44 	bl	8002b84 <SSD1306_GotoXY>
	SSD1306_Puts("MENU", &Font_7x10, SSD1306_COLOR_WHITE);
 80020fc:	2201      	movs	r2, #1
 80020fe:	490d      	ldr	r1, [pc, #52]	; (8002134 <lcdMenuSag+0x6c>)
 8002100:	480f      	ldr	r0, [pc, #60]	; (8002140 <lcdMenuSag+0x78>)
 8002102:	f000 fdd5 	bl	8002cb0 <SSD1306_Puts>
	SSD1306_GotoXY(68, 30);
 8002106:	211e      	movs	r1, #30
 8002108:	2044      	movs	r0, #68	; 0x44
 800210a:	f000 fd3b 	bl	8002b84 <SSD1306_GotoXY>
	SSD1306_Puts("RIGHT", &Font_7x10, SSD1306_COLOR_WHITE);
 800210e:	2201      	movs	r2, #1
 8002110:	4908      	ldr	r1, [pc, #32]	; (8002134 <lcdMenuSag+0x6c>)
 8002112:	480c      	ldr	r0, [pc, #48]	; (8002144 <lcdMenuSag+0x7c>)
 8002114:	f000 fdcc 	bl	8002cb0 <SSD1306_Puts>
	SSD1306_GotoXY(10, 50);
 8002118:	2132      	movs	r1, #50	; 0x32
 800211a:	200a      	movs	r0, #10
 800211c:	f000 fd32 	bl	8002b84 <SSD1306_GotoXY>
	SSD1306_Puts("START hold LEFT", &Font_7x10, SSD1306_COLOR_WHITE);
 8002120:	2201      	movs	r2, #1
 8002122:	4904      	ldr	r1, [pc, #16]	; (8002134 <lcdMenuSag+0x6c>)
 8002124:	4808      	ldr	r0, [pc, #32]	; (8002148 <lcdMenuSag+0x80>)
 8002126:	f000 fdc3 	bl	8002cb0 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800212a:	f000 fc85 	bl	8002a38 <SSD1306_UpdateScreen>
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000000 	.word	0x20000000
 8002138:	0801cff0 	.word	0x0801cff0
 800213c:	0801cfd8 	.word	0x0801cfd8
 8002140:	0801cff8 	.word	0x0801cff8
 8002144:	0801cfe8 	.word	0x0801cfe8
 8002148:	0801d000 	.word	0x0801d000

0800214c <lcdStartMeasurement>:

void lcdStartMeasurement()
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 8002150:	f000 fdd3 	bl	8002cfa <SSD1306_Clear>
	SSD1306_GotoXY(10, 10);
 8002154:	210a      	movs	r1, #10
 8002156:	200a      	movs	r0, #10
 8002158:	f000 fd14 	bl	8002b84 <SSD1306_GotoXY>
	SSD1306_Puts("MENU", &Font_7x10, SSD1306_COLOR_WHITE);
 800215c:	2201      	movs	r2, #1
 800215e:	4911      	ldr	r1, [pc, #68]	; (80021a4 <lcdStartMeasurement+0x58>)
 8002160:	4811      	ldr	r0, [pc, #68]	; (80021a8 <lcdStartMeasurement+0x5c>)
 8002162:	f000 fda5 	bl	8002cb0 <SSD1306_Puts>
	SSD1306_GotoXY(10, 30);
 8002166:	211e      	movs	r1, #30
 8002168:	200a      	movs	r0, #10
 800216a:	f000 fd0b 	bl	8002b84 <SSD1306_GotoXY>
	SSD1306_Puts("LEFT", &Font_7x10, SSD1306_COLOR_WHITE);
 800216e:	2201      	movs	r2, #1
 8002170:	490c      	ldr	r1, [pc, #48]	; (80021a4 <lcdStartMeasurement+0x58>)
 8002172:	480e      	ldr	r0, [pc, #56]	; (80021ac <lcdStartMeasurement+0x60>)
 8002174:	f000 fd9c 	bl	8002cb0 <SSD1306_Puts>
	SSD1306_GotoXY(68, 10);
 8002178:	210a      	movs	r1, #10
 800217a:	2044      	movs	r0, #68	; 0x44
 800217c:	f000 fd02 	bl	8002b84 <SSD1306_GotoXY>
	SSD1306_Puts("MESSURE", &Font_7x10, SSD1306_COLOR_WHITE);
 8002180:	2201      	movs	r2, #1
 8002182:	4908      	ldr	r1, [pc, #32]	; (80021a4 <lcdStartMeasurement+0x58>)
 8002184:	480a      	ldr	r0, [pc, #40]	; (80021b0 <lcdStartMeasurement+0x64>)
 8002186:	f000 fd93 	bl	8002cb0 <SSD1306_Puts>
	SSD1306_GotoXY(10, 50);
 800218a:	2132      	movs	r1, #50	; 0x32
 800218c:	200a      	movs	r0, #10
 800218e:	f000 fcf9 	bl	8002b84 <SSD1306_GotoXY>
	SSD1306_Puts("START hold RIGHT", &Font_7x10, SSD1306_COLOR_WHITE);
 8002192:	2201      	movs	r2, #1
 8002194:	4903      	ldr	r1, [pc, #12]	; (80021a4 <lcdStartMeasurement+0x58>)
 8002196:	4807      	ldr	r0, [pc, #28]	; (80021b4 <lcdStartMeasurement+0x68>)
 8002198:	f000 fd8a 	bl	8002cb0 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800219c:	f000 fc4c 	bl	8002a38 <SSD1306_UpdateScreen>
}
 80021a0:	bf00      	nop
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000000 	.word	0x20000000
 80021a8:	0801cff8 	.word	0x0801cff8
 80021ac:	0801cfd8 	.word	0x0801cfd8
 80021b0:	0801cfe0 	.word	0x0801cfe0
 80021b4:	0801d010 	.word	0x0801d010

080021b8 <lcdCalibration>:

void lcdCalibration()
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 80021bc:	f000 fd9d 	bl	8002cfa <SSD1306_Clear>
	SSD1306_GotoXY(10, 10);
 80021c0:	210a      	movs	r1, #10
 80021c2:	200a      	movs	r0, #10
 80021c4:	f000 fcde 	bl	8002b84 <SSD1306_GotoXY>
	SSD1306_Puts("CALIB", &Font_7x10, SSD1306_COLOR_WHITE);
 80021c8:	2201      	movs	r2, #1
 80021ca:	4911      	ldr	r1, [pc, #68]	; (8002210 <lcdCalibration+0x58>)
 80021cc:	4811      	ldr	r0, [pc, #68]	; (8002214 <lcdCalibration+0x5c>)
 80021ce:	f000 fd6f 	bl	8002cb0 <SSD1306_Puts>
	SSD1306_GotoXY(68, 10);
 80021d2:	210a      	movs	r1, #10
 80021d4:	2044      	movs	r0, #68	; 0x44
 80021d6:	f000 fcd5 	bl	8002b84 <SSD1306_GotoXY>
	SSD1306_Puts("MENU", &Font_7x10, SSD1306_COLOR_WHITE);
 80021da:	2201      	movs	r2, #1
 80021dc:	490c      	ldr	r1, [pc, #48]	; (8002210 <lcdCalibration+0x58>)
 80021de:	480e      	ldr	r0, [pc, #56]	; (8002218 <lcdCalibration+0x60>)
 80021e0:	f000 fd66 	bl	8002cb0 <SSD1306_Puts>
	SSD1306_GotoXY(68, 30);
 80021e4:	211e      	movs	r1, #30
 80021e6:	2044      	movs	r0, #68	; 0x44
 80021e8:	f000 fccc 	bl	8002b84 <SSD1306_GotoXY>
	SSD1306_Puts("RIGHT", &Font_7x10, SSD1306_COLOR_WHITE);
 80021ec:	2201      	movs	r2, #1
 80021ee:	4908      	ldr	r1, [pc, #32]	; (8002210 <lcdCalibration+0x58>)
 80021f0:	480a      	ldr	r0, [pc, #40]	; (800221c <lcdCalibration+0x64>)
 80021f2:	f000 fd5d 	bl	8002cb0 <SSD1306_Puts>
	SSD1306_GotoXY(10, 50);
 80021f6:	2132      	movs	r1, #50	; 0x32
 80021f8:	200a      	movs	r0, #10
 80021fa:	f000 fcc3 	bl	8002b84 <SSD1306_GotoXY>
	SSD1306_Puts("START hold LEFT", &Font_7x10, SSD1306_COLOR_WHITE);
 80021fe:	2201      	movs	r2, #1
 8002200:	4903      	ldr	r1, [pc, #12]	; (8002210 <lcdCalibration+0x58>)
 8002202:	4807      	ldr	r0, [pc, #28]	; (8002220 <lcdCalibration+0x68>)
 8002204:	f000 fd54 	bl	8002cb0 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002208:	f000 fc16 	bl	8002a38 <SSD1306_UpdateScreen>
}
 800220c:	bf00      	nop
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20000000 	.word	0x20000000
 8002214:	0801cff0 	.word	0x0801cff0
 8002218:	0801cff8 	.word	0x0801cff8
 800221c:	0801cfe8 	.word	0x0801cfe8
 8002220:	0801d000 	.word	0x0801d000

08002224 <lcdMeasurementStart>:

void lcdMeasurementStart()
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 8002228:	f000 fd67 	bl	8002cfa <SSD1306_Clear>
	SSD1306_GotoXY(30, 30);
 800222c:	211e      	movs	r1, #30
 800222e:	201e      	movs	r0, #30
 8002230:	f000 fca8 	bl	8002b84 <SSD1306_GotoXY>
	SSD1306_Puts("STARTING", &Font_7x10, SSD1306_COLOR_WHITE);
 8002234:	2201      	movs	r2, #1
 8002236:	4908      	ldr	r1, [pc, #32]	; (8002258 <lcdMeasurementStart+0x34>)
 8002238:	4808      	ldr	r0, [pc, #32]	; (800225c <lcdMeasurementStart+0x38>)
 800223a:	f000 fd39 	bl	8002cb0 <SSD1306_Puts>
	SSD1306_GotoXY(10, 50);
 800223e:	2132      	movs	r1, #50	; 0x32
 8002240:	200a      	movs	r0, #10
 8002242:	f000 fc9f 	bl	8002b84 <SSD1306_GotoXY>
	SSD1306_Puts("FINISH hold RIGHT", &Font_7x10, SSD1306_COLOR_WHITE);
 8002246:	2201      	movs	r2, #1
 8002248:	4903      	ldr	r1, [pc, #12]	; (8002258 <lcdMeasurementStart+0x34>)
 800224a:	4805      	ldr	r0, [pc, #20]	; (8002260 <lcdMeasurementStart+0x3c>)
 800224c:	f000 fd30 	bl	8002cb0 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002250:	f000 fbf2 	bl	8002a38 <SSD1306_UpdateScreen>
}
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20000000 	.word	0x20000000
 800225c:	0801d024 	.word	0x0801d024
 8002260:	0801d030 	.word	0x0801d030

08002264 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800226c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002270:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b00      	cmp	r3, #0
 800227a:	d013      	beq.n	80022a4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800227c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002280:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002284:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00b      	beq.n	80022a4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800228c:	e000      	b.n	8002290 <ITM_SendChar+0x2c>
    {
      __NOP();
 800228e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002290:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f9      	beq.n	800228e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800229a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80022a4:	687b      	ldr	r3, [r7, #4]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b082      	sub	sp, #8
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff ffd1 	bl	8002264 <ITM_SendChar>
	return (ch);
 80022c2:	687b      	ldr	r3, [r7, #4]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022d0:	f001 fc9e 	bl	8003c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022d4:	f000 f81a 	bl	800230c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022d8:	f7ff fd16 	bl	8001d08 <MX_GPIO_Init>
  MX_DMA_Init();
 80022dc:	f7ff fb82 	bl	80019e4 <MX_DMA_Init>
  MX_TIM6_Init();
 80022e0:	f001 f828 	bl	8003334 <MX_TIM6_Init>
  MX_TIM8_Init();
 80022e4:	f001 f85c 	bl	80033a0 <MX_TIM8_Init>
  MX_TIM2_Init();
 80022e8:	f000 ffb2 	bl	8003250 <MX_TIM2_Init>
  MX_ADC2_Init();
 80022ec:	f7ff f9e2 	bl	80016b4 <MX_ADC2_Init>
  MX_I2C1_Init();
 80022f0:	f7ff fd9a 	bl	8001e28 <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 80022f4:	f000 f98e 	bl	8002614 <MX_SDIO_SD_Init>
  MX_ADC1_Init();
 80022f8:	f7ff f98a 	bl	8001610 <MX_ADC1_Init>
  MX_FATFS_Init();
 80022fc:	f00a ffb8 	bl	800d270 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
	//MX_SDIO_SD_Init_4B();
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002300:	f7ff fbba 	bl	8001a78 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002304:	f011 ffbd 	bl	8014282 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8002308:	e7fe      	b.n	8002308 <main+0x3c>
	...

0800230c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b094      	sub	sp, #80	; 0x50
 8002310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002312:	f107 031c 	add.w	r3, r7, #28
 8002316:	2234      	movs	r2, #52	; 0x34
 8002318:	2100      	movs	r1, #0
 800231a:	4618      	mov	r0, r3
 800231c:	f016 fd60 	bl	8018de0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002320:	f107 0308 	add.w	r3, r7, #8
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002330:	2300      	movs	r3, #0
 8002332:	607b      	str	r3, [r7, #4]
 8002334:	4b29      	ldr	r3, [pc, #164]	; (80023dc <SystemClock_Config+0xd0>)
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	4a28      	ldr	r2, [pc, #160]	; (80023dc <SystemClock_Config+0xd0>)
 800233a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800233e:	6413      	str	r3, [r2, #64]	; 0x40
 8002340:	4b26      	ldr	r3, [pc, #152]	; (80023dc <SystemClock_Config+0xd0>)
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002348:	607b      	str	r3, [r7, #4]
 800234a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800234c:	2300      	movs	r3, #0
 800234e:	603b      	str	r3, [r7, #0]
 8002350:	4b23      	ldr	r3, [pc, #140]	; (80023e0 <SystemClock_Config+0xd4>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a22      	ldr	r2, [pc, #136]	; (80023e0 <SystemClock_Config+0xd4>)
 8002356:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800235a:	6013      	str	r3, [r2, #0]
 800235c:	4b20      	ldr	r3, [pc, #128]	; (80023e0 <SystemClock_Config+0xd4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002364:	603b      	str	r3, [r7, #0]
 8002366:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002368:	2301      	movs	r3, #1
 800236a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800236c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002370:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002372:	2302      	movs	r3, #2
 8002374:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002376:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800237a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800237c:	2308      	movs	r3, #8
 800237e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002380:	23a8      	movs	r3, #168	; 0xa8
 8002382:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002384:	2302      	movs	r3, #2
 8002386:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002388:	2307      	movs	r3, #7
 800238a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800238c:	2302      	movs	r3, #2
 800238e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002390:	f107 031c 	add.w	r3, r7, #28
 8002394:	4618      	mov	r0, r3
 8002396:	f005 fea5 	bl	80080e4 <HAL_RCC_OscConfig>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80023a0:	f000 f832 	bl	8002408 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023a4:	230f      	movs	r3, #15
 80023a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023a8:	2302      	movs	r3, #2
 80023aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023ac:	2300      	movs	r3, #0
 80023ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80023b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80023bc:	f107 0308 	add.w	r3, r7, #8
 80023c0:	2105      	movs	r1, #5
 80023c2:	4618      	mov	r0, r3
 80023c4:	f004 fffe 	bl	80073c4 <HAL_RCC_ClockConfig>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80023ce:	f000 f81b 	bl	8002408 <Error_Handler>
  }
}
 80023d2:	bf00      	nop
 80023d4:	3750      	adds	r7, #80	; 0x50
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40007000 	.word	0x40007000

080023e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a04      	ldr	r2, [pc, #16]	; (8002404 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d101      	bne.n	80023fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80023f6:	f001 fc2d 	bl	8003c54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40000400 	.word	0x40000400

08002408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800240c:	b672      	cpsid	i
}
 800240e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002410:	e7fe      	b.n	8002410 <Error_Handler+0x8>
	...

08002414 <getMenuSelector>:

/******************************************************************************
 * Function Definitions
 *******************************************************************************/
menu_t getMenuSelector(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
	return (selector);
 8002418:	4b03      	ldr	r3, [pc, #12]	; (8002428 <getMenuSelector+0x14>)
 800241a:	781b      	ldrb	r3, [r3, #0]
}
 800241c:	4618      	mov	r0, r3
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	20002f44 	.word	0x20002f44

0800242c <setMenuSelector>:
void setMenuSelector(menu_t selectorState)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]
	selector = selectorState;
 8002436:	4a04      	ldr	r2, [pc, #16]	; (8002448 <setMenuSelector+0x1c>)
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	7013      	strb	r3, [r2, #0]
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	20002f44 	.word	0x20002f44

0800244c <getSensorDataFileName>:
char* getSensorDataFileName(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
	return (sensorData);
 8002450:	4b02      	ldr	r3, [pc, #8]	; (800245c <getSensorDataFileName+0x10>)
}
 8002452:	4618      	mov	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	20002f5c 	.word	0x20002f5c

08002460 <menuSelector>:

void menuSelector(button_t buttonLeft, button_t buttonRight)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	460a      	mov	r2, r1
 800246a:	71fb      	strb	r3, [r7, #7]
 800246c:	4613      	mov	r3, r2
 800246e:	71bb      	strb	r3, [r7, #6]

	switch (selector)
 8002470:	4b5c      	ldr	r3, [pc, #368]	; (80025e4 <menuSelector+0x184>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b05      	cmp	r3, #5
 8002476:	f200 80b0 	bhi.w	80025da <menuSelector+0x17a>
 800247a:	a201      	add	r2, pc, #4	; (adr r2, 8002480 <menuSelector+0x20>)
 800247c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002480:	08002499 	.word	0x08002499
 8002484:	080024c3 	.word	0x080024c3
 8002488:	08002513 	.word	0x08002513
 800248c:	08002539 	.word	0x08002539
 8002490:	08002557 	.word	0x08002557
 8002494:	080025b1 	.word	0x080025b1
	{

	case (MENU_START):

		if (BUTTON_LEFT == buttonLeft)
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d105      	bne.n	80024aa <menuSelector+0x4a>
		{
			lcdMenuSag();
 800249e:	f7ff fe13 	bl	80020c8 <lcdMenuSag>
			selector = MENU_SAG;
 80024a2:	4b50      	ldr	r3, [pc, #320]	; (80025e4 <menuSelector+0x184>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	701a      	strb	r2, [r3, #0]
		else
		{
			lcdMenuStart();
		}

		break;
 80024a8:	e097      	b.n	80025da <menuSelector+0x17a>
		else if (BUTTON_RIGHT == buttonRight)
 80024aa:	79bb      	ldrb	r3, [r7, #6]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d105      	bne.n	80024bc <menuSelector+0x5c>
			lcdStartMeasurement();
 80024b0:	f7ff fe4c 	bl	800214c <lcdStartMeasurement>
			selector = MENU_MEASURMENT;
 80024b4:	4b4b      	ldr	r3, [pc, #300]	; (80025e4 <menuSelector+0x184>)
 80024b6:	2204      	movs	r2, #4
 80024b8:	701a      	strb	r2, [r3, #0]
		break;
 80024ba:	e08e      	b.n	80025da <menuSelector+0x17a>
			lcdMenuStart();
 80024bc:	f7ff fdce 	bl	800205c <lcdMenuStart>
		break;
 80024c0:	e08b      	b.n	80025da <menuSelector+0x17a>

	case (MENU_SAG):
		if (BUTTON_LEFT_PRESSED == buttonLeft)
 80024c2:	79fb      	ldrb	r3, [r7, #7]
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d10e      	bne.n	80024e6 <menuSelector+0x86>
		{
			if(0 == readCalibrationData(&calibrationValues)){
 80024c8:	4847      	ldr	r0, [pc, #284]	; (80025e8 <menuSelector+0x188>)
 80024ca:	f7fe ffcd 	bl	8001468 <readCalibrationData>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d17f      	bne.n	80025d4 <menuSelector+0x174>
			startAdcDma();
 80024d4:	f001 f84e 	bl	8003574 <startAdcDma>
			puts("pomiar rozpoczety, Przytrzymaj LEFT aby zakonczyc\n");
 80024d8:	4844      	ldr	r0, [pc, #272]	; (80025ec <menuSelector+0x18c>)
 80024da:	f016 fb53 	bl	8018b84 <puts>
			selector = MENU_SAG_START;
 80024de:	4b41      	ldr	r3, [pc, #260]	; (80025e4 <menuSelector+0x184>)
 80024e0:	2203      	movs	r2, #3
 80024e2:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			puts("PRZYTRZYMAJ LEFT aby rozpoczac pomiar\n");
		}
		break;
 80024e4:	e076      	b.n	80025d4 <menuSelector+0x174>
		else if (BUTTON_LEFT == buttonLeft)
 80024e6:	79fb      	ldrb	r3, [r7, #7]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d105      	bne.n	80024f8 <menuSelector+0x98>
			lcdCalibration();
 80024ec:	f7ff fe64 	bl	80021b8 <lcdCalibration>
			selector = MENU_CALIBRATION;
 80024f0:	4b3c      	ldr	r3, [pc, #240]	; (80025e4 <menuSelector+0x184>)
 80024f2:	2202      	movs	r2, #2
 80024f4:	701a      	strb	r2, [r3, #0]
		break;
 80024f6:	e06d      	b.n	80025d4 <menuSelector+0x174>
		else if (BUTTON_RIGHT == buttonRight)
 80024f8:	79bb      	ldrb	r3, [r7, #6]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d105      	bne.n	800250a <menuSelector+0xaa>
			lcdMenuStart();
 80024fe:	f7ff fdad 	bl	800205c <lcdMenuStart>
			selector = MENU_START;
 8002502:	4b38      	ldr	r3, [pc, #224]	; (80025e4 <menuSelector+0x184>)
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]
		break;
 8002508:	e064      	b.n	80025d4 <menuSelector+0x174>
			puts("PRZYTRZYMAJ LEFT aby rozpoczac pomiar\n");
 800250a:	4839      	ldr	r0, [pc, #228]	; (80025f0 <menuSelector+0x190>)
 800250c:	f016 fb3a 	bl	8018b84 <puts>
		break;
 8002510:	e060      	b.n	80025d4 <menuSelector+0x174>
	case (MENU_CALIBRATION):
		if (BUTTON_LEFT_PRESSED == buttonLeft)
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	2b02      	cmp	r3, #2
 8002516:	d102      	bne.n	800251e <menuSelector+0xbe>
		{
			startAdcDma();
 8002518:	f001 f82c 	bl	8003574 <startAdcDma>
		}
		else
		{
			puts("PRZYTRZYMAJ LEFT aby rozpoczac pomiar\n");
		}
		break;
 800251c:	e05d      	b.n	80025da <menuSelector+0x17a>
		else if (BUTTON_RIGHT == buttonRight)
 800251e:	79bb      	ldrb	r3, [r7, #6]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d105      	bne.n	8002530 <menuSelector+0xd0>
			selector = MENU_START;
 8002524:	4b2f      	ldr	r3, [pc, #188]	; (80025e4 <menuSelector+0x184>)
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]
			lcdMenuStart();
 800252a:	f7ff fd97 	bl	800205c <lcdMenuStart>
		break;
 800252e:	e054      	b.n	80025da <menuSelector+0x17a>
			puts("PRZYTRZYMAJ LEFT aby rozpoczac pomiar\n");
 8002530:	482f      	ldr	r0, [pc, #188]	; (80025f0 <menuSelector+0x190>)
 8002532:	f016 fb27 	bl	8018b84 <puts>
		break;
 8002536:	e050      	b.n	80025da <menuSelector+0x17a>
	case (MENU_SAG_START):
		if (BUTTON_LEFT_PRESSED == buttonLeft)
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	2b02      	cmp	r3, #2
 800253c:	d107      	bne.n	800254e <menuSelector+0xee>
		{
			stopAdcDma();
 800253e:	f001 f837 	bl	80035b0 <stopAdcDma>
			selector = MENU_START;
 8002542:	4b28      	ldr	r3, [pc, #160]	; (80025e4 <menuSelector+0x184>)
 8002544:	2200      	movs	r2, #0
 8002546:	701a      	strb	r2, [r3, #0]
			lcdMenuStart();
 8002548:	f7ff fd88 	bl	800205c <lcdMenuStart>
		}
		else
		{
			puts("PRZYTRZYMAJ LEFT aby wrocic do menu start");
		}
		break;
 800254c:	e045      	b.n	80025da <menuSelector+0x17a>
			puts("PRZYTRZYMAJ LEFT aby wrocic do menu start");
 800254e:	4829      	ldr	r0, [pc, #164]	; (80025f4 <menuSelector+0x194>)
 8002550:	f016 fb18 	bl	8018b84 <puts>
		break;
 8002554:	e041      	b.n	80025da <menuSelector+0x17a>

	case (MENU_MEASURMENT):
		if (BUTTON_RIGHT_PRESSED == buttonRight)
 8002556:	79bb      	ldrb	r3, [r7, #6]
 8002558:	2b03      	cmp	r3, #3
 800255a:	d11c      	bne.n	8002596 <menuSelector+0x136>
		{
			lcdMeasurementStart();
 800255c:	f7ff fe62 	bl	8002224 <lcdMeasurementStart>
			setPath(dir, sensorData, path);
 8002560:	4b25      	ldr	r3, [pc, #148]	; (80025f8 <menuSelector+0x198>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	461a      	mov	r2, r3
 8002566:	4925      	ldr	r1, [pc, #148]	; (80025fc <menuSelector+0x19c>)
 8002568:	4825      	ldr	r0, [pc, #148]	; (8002600 <menuSelector+0x1a0>)
 800256a:	f7fe fd71 	bl	8001050 <setPath>
			createNewFile(dir, sensorData, &path);
 800256e:	4a22      	ldr	r2, [pc, #136]	; (80025f8 <menuSelector+0x198>)
 8002570:	4922      	ldr	r1, [pc, #136]	; (80025fc <menuSelector+0x19c>)
 8002572:	4823      	ldr	r0, [pc, #140]	; (8002600 <menuSelector+0x1a0>)
 8002574:	f7fe fd88 	bl	8001088 <createNewFile>
			if(0 == readCalibrationData(&calibrationValues)){
 8002578:	481b      	ldr	r0, [pc, #108]	; (80025e8 <menuSelector+0x188>)
 800257a:	f7fe ff75 	bl	8001468 <readCalibrationData>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d129      	bne.n	80025d8 <menuSelector+0x178>
			startAdcDma();
 8002584:	f000 fff6 	bl	8003574 <startAdcDma>
			selector = MENU_MEASURMENT_START;
 8002588:	4b16      	ldr	r3, [pc, #88]	; (80025e4 <menuSelector+0x184>)
 800258a:	2205      	movs	r2, #5
 800258c:	701a      	strb	r2, [r3, #0]
			puts("pomiar ciagly rozpoczety, PRZYTRZYMAJ RIGHT aby zakonczyc\n");
 800258e:	481d      	ldr	r0, [pc, #116]	; (8002604 <menuSelector+0x1a4>)
 8002590:	f016 faf8 	bl	8018b84 <puts>
		}
		else
		{
			puts("PRZYTRZYMAJ RIGHT aby rozpoczac pomiar\n");
		}
		break;
 8002594:	e020      	b.n	80025d8 <menuSelector+0x178>
		else if (BUTTON_LEFT == buttonLeft)
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d105      	bne.n	80025a8 <menuSelector+0x148>
			lcdMenuStart();
 800259c:	f7ff fd5e 	bl	800205c <lcdMenuStart>
			selector = MENU_START;
 80025a0:	4b10      	ldr	r3, [pc, #64]	; (80025e4 <menuSelector+0x184>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]
		break;
 80025a6:	e017      	b.n	80025d8 <menuSelector+0x178>
			puts("PRZYTRZYMAJ RIGHT aby rozpoczac pomiar\n");
 80025a8:	4817      	ldr	r0, [pc, #92]	; (8002608 <menuSelector+0x1a8>)
 80025aa:	f016 faeb 	bl	8018b84 <puts>
		break;
 80025ae:	e013      	b.n	80025d8 <menuSelector+0x178>

	case (MENU_MEASURMENT_START):
		if (BUTTON_RIGHT_PRESSED == buttonRight)
 80025b0:	79bb      	ldrb	r3, [r7, #6]
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	d10a      	bne.n	80025cc <menuSelector+0x16c>
		{
			stopAdcDma();
 80025b6:	f000 fffb 	bl	80035b0 <stopAdcDma>
			lcdMenuFinishedNotification("Mes Finished");
 80025ba:	4814      	ldr	r0, [pc, #80]	; (800260c <menuSelector+0x1ac>)
 80025bc:	f7ff fd32 	bl	8002024 <lcdMenuFinishedNotification>
			lcdMenuStart();
 80025c0:	f7ff fd4c 	bl	800205c <lcdMenuStart>
			selector = MENU_START;
 80025c4:	4b07      	ldr	r3, [pc, #28]	; (80025e4 <menuSelector+0x184>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			puts("PRZYTRZYMAJ RIGHT aby zakończyć pomiar\n");
		}
		break;
 80025ca:	e006      	b.n	80025da <menuSelector+0x17a>
			puts("PRZYTRZYMAJ RIGHT aby zakończyć pomiar\n");
 80025cc:	4810      	ldr	r0, [pc, #64]	; (8002610 <menuSelector+0x1b0>)
 80025ce:	f016 fad9 	bl	8018b84 <puts>
		break;
 80025d2:	e002      	b.n	80025da <menuSelector+0x17a>
		break;
 80025d4:	bf00      	nop
 80025d6:	e000      	b.n	80025da <menuSelector+0x17a>
		break;
 80025d8:	bf00      	nop

	default:
	}

}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20002f44 	.word	0x20002f44
 80025e8:	200035e4 	.word	0x200035e4
 80025ec:	0801d044 	.word	0x0801d044
 80025f0:	0801d078 	.word	0x0801d078
 80025f4:	0801d0a0 	.word	0x0801d0a0
 80025f8:	20002f45 	.word	0x20002f45
 80025fc:	20002f5c 	.word	0x20002f5c
 8002600:	20002f48 	.word	0x20002f48
 8002604:	0801d0cc 	.word	0x0801d0cc
 8002608:	0801d108 	.word	0x0801d108
 800260c:	0801d130 	.word	0x0801d130
 8002610:	0801d140 	.word	0x0801d140

08002614 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002618:	4b0c      	ldr	r3, [pc, #48]	; (800264c <MX_SDIO_SD_Init+0x38>)
 800261a:	4a0d      	ldr	r2, [pc, #52]	; (8002650 <MX_SDIO_SD_Init+0x3c>)
 800261c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800261e:	4b0b      	ldr	r3, [pc, #44]	; (800264c <MX_SDIO_SD_Init+0x38>)
 8002620:	2200      	movs	r2, #0
 8002622:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002624:	4b09      	ldr	r3, [pc, #36]	; (800264c <MX_SDIO_SD_Init+0x38>)
 8002626:	2200      	movs	r2, #0
 8002628:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800262a:	4b08      	ldr	r3, [pc, #32]	; (800264c <MX_SDIO_SD_Init+0x38>)
 800262c:	2200      	movs	r2, #0
 800262e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002630:	4b06      	ldr	r3, [pc, #24]	; (800264c <MX_SDIO_SD_Init+0x38>)
 8002632:	2200      	movs	r2, #0
 8002634:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002636:	4b05      	ldr	r3, [pc, #20]	; (800264c <MX_SDIO_SD_Init+0x38>)
 8002638:	2200      	movs	r2, #0
 800263a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800263c:	4b03      	ldr	r3, [pc, #12]	; (800264c <MX_SDIO_SD_Init+0x38>)
 800263e:	2200      	movs	r2, #0
 8002640:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002642:	bf00      	nop
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	20002f70 	.word	0x20002f70
 8002650:	40012c00 	.word	0x40012c00

08002654 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b0a2      	sub	sp, #136	; 0x88
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800265c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	609a      	str	r2, [r3, #8]
 8002668:	60da      	str	r2, [r3, #12]
 800266a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800266c:	f107 0318 	add.w	r3, r7, #24
 8002670:	225c      	movs	r2, #92	; 0x5c
 8002672:	2100      	movs	r1, #0
 8002674:	4618      	mov	r0, r3
 8002676:	f016 fbb3 	bl	8018de0 <memset>
  if(sdHandle->Instance==SDIO)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a83      	ldr	r2, [pc, #524]	; (800288c <HAL_SD_MspInit+0x238>)
 8002680:	4293      	cmp	r3, r2
 8002682:	f040 80fe 	bne.w	8002882 <HAL_SD_MspInit+0x22e>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8002686:	f44f 7340 	mov.w	r3, #768	; 0x300
 800268a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800268c:	2300      	movs	r3, #0
 800268e:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8002690:	2300      	movs	r3, #0
 8002692:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002694:	f107 0318 	add.w	r3, r7, #24
 8002698:	4618      	mov	r0, r3
 800269a:	f004 ffcb 	bl	8007634 <HAL_RCCEx_PeriphCLKConfig>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80026a4:	f7ff feb0 	bl	8002408 <Error_Handler>
    }

    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	4b78      	ldr	r3, [pc, #480]	; (8002890 <HAL_SD_MspInit+0x23c>)
 80026ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b0:	4a77      	ldr	r2, [pc, #476]	; (8002890 <HAL_SD_MspInit+0x23c>)
 80026b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026b6:	6453      	str	r3, [r2, #68]	; 0x44
 80026b8:	4b75      	ldr	r3, [pc, #468]	; (8002890 <HAL_SD_MspInit+0x23c>)
 80026ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026c0:	617b      	str	r3, [r7, #20]
 80026c2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c4:	2300      	movs	r3, #0
 80026c6:	613b      	str	r3, [r7, #16]
 80026c8:	4b71      	ldr	r3, [pc, #452]	; (8002890 <HAL_SD_MspInit+0x23c>)
 80026ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026cc:	4a70      	ldr	r2, [pc, #448]	; (8002890 <HAL_SD_MspInit+0x23c>)
 80026ce:	f043 0302 	orr.w	r3, r3, #2
 80026d2:	6313      	str	r3, [r2, #48]	; 0x30
 80026d4:	4b6e      	ldr	r3, [pc, #440]	; (8002890 <HAL_SD_MspInit+0x23c>)
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e0:	2300      	movs	r3, #0
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	4b6a      	ldr	r3, [pc, #424]	; (8002890 <HAL_SD_MspInit+0x23c>)
 80026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e8:	4a69      	ldr	r2, [pc, #420]	; (8002890 <HAL_SD_MspInit+0x23c>)
 80026ea:	f043 0304 	orr.w	r3, r3, #4
 80026ee:	6313      	str	r3, [r2, #48]	; 0x30
 80026f0:	4b67      	ldr	r3, [pc, #412]	; (8002890 <HAL_SD_MspInit+0x23c>)
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026fc:	2300      	movs	r3, #0
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	4b63      	ldr	r3, [pc, #396]	; (8002890 <HAL_SD_MspInit+0x23c>)
 8002702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002704:	4a62      	ldr	r2, [pc, #392]	; (8002890 <HAL_SD_MspInit+0x23c>)
 8002706:	f043 0308 	orr.w	r3, r3, #8
 800270a:	6313      	str	r3, [r2, #48]	; 0x30
 800270c:	4b60      	ldr	r3, [pc, #384]	; (8002890 <HAL_SD_MspInit+0x23c>)
 800270e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002718:	2304      	movs	r3, #4
 800271a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271c:	2302      	movs	r3, #2
 800271e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002720:	2300      	movs	r3, #0
 8002722:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002724:	2303      	movs	r3, #3
 8002726:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800272a:	230c      	movs	r3, #12
 800272c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002730:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002734:	4619      	mov	r1, r3
 8002736:	4857      	ldr	r0, [pc, #348]	; (8002894 <HAL_SD_MspInit+0x240>)
 8002738:	f002 fc28 	bl	8004f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800273c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002740:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002742:	2302      	movs	r3, #2
 8002744:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002746:	2301      	movs	r3, #1
 8002748:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274a:	2303      	movs	r3, #3
 800274c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002750:	230c      	movs	r3, #12
 8002752:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002756:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800275a:	4619      	mov	r1, r3
 800275c:	484e      	ldr	r0, [pc, #312]	; (8002898 <HAL_SD_MspInit+0x244>)
 800275e:	f002 fc15 	bl	8004f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002762:	2304      	movs	r3, #4
 8002764:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002766:	2302      	movs	r3, #2
 8002768:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800276a:	2301      	movs	r3, #1
 800276c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800276e:	2303      	movs	r3, #3
 8002770:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002774:	230c      	movs	r3, #12
 8002776:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800277a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800277e:	4619      	mov	r1, r3
 8002780:	4846      	ldr	r0, [pc, #280]	; (800289c <HAL_SD_MspInit+0x248>)
 8002782:	f002 fc03 	bl	8004f8c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8002786:	4b46      	ldr	r3, [pc, #280]	; (80028a0 <HAL_SD_MspInit+0x24c>)
 8002788:	4a46      	ldr	r2, [pc, #280]	; (80028a4 <HAL_SD_MspInit+0x250>)
 800278a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800278c:	4b44      	ldr	r3, [pc, #272]	; (80028a0 <HAL_SD_MspInit+0x24c>)
 800278e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002792:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002794:	4b42      	ldr	r3, [pc, #264]	; (80028a0 <HAL_SD_MspInit+0x24c>)
 8002796:	2200      	movs	r2, #0
 8002798:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800279a:	4b41      	ldr	r3, [pc, #260]	; (80028a0 <HAL_SD_MspInit+0x24c>)
 800279c:	2200      	movs	r2, #0
 800279e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027a0:	4b3f      	ldr	r3, [pc, #252]	; (80028a0 <HAL_SD_MspInit+0x24c>)
 80027a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027a6:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027a8:	4b3d      	ldr	r3, [pc, #244]	; (80028a0 <HAL_SD_MspInit+0x24c>)
 80027aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027ae:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80027b0:	4b3b      	ldr	r3, [pc, #236]	; (80028a0 <HAL_SD_MspInit+0x24c>)
 80027b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027b6:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80027b8:	4b39      	ldr	r3, [pc, #228]	; (80028a0 <HAL_SD_MspInit+0x24c>)
 80027ba:	2220      	movs	r2, #32
 80027bc:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027be:	4b38      	ldr	r3, [pc, #224]	; (80028a0 <HAL_SD_MspInit+0x24c>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80027c4:	4b36      	ldr	r3, [pc, #216]	; (80028a0 <HAL_SD_MspInit+0x24c>)
 80027c6:	2204      	movs	r2, #4
 80027c8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80027ca:	4b35      	ldr	r3, [pc, #212]	; (80028a0 <HAL_SD_MspInit+0x24c>)
 80027cc:	2203      	movs	r2, #3
 80027ce:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80027d0:	4b33      	ldr	r3, [pc, #204]	; (80028a0 <HAL_SD_MspInit+0x24c>)
 80027d2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80027d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80027d8:	4b31      	ldr	r3, [pc, #196]	; (80028a0 <HAL_SD_MspInit+0x24c>)
 80027da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80027de:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80027e0:	482f      	ldr	r0, [pc, #188]	; (80028a0 <HAL_SD_MspInit+0x24c>)
 80027e2:	f001 ffc5 	bl	8004770 <HAL_DMA_Init>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <HAL_SD_MspInit+0x19c>
    {
      Error_Handler();
 80027ec:	f7ff fe0c 	bl	8002408 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a2b      	ldr	r2, [pc, #172]	; (80028a0 <HAL_SD_MspInit+0x24c>)
 80027f4:	641a      	str	r2, [r3, #64]	; 0x40
 80027f6:	4a2a      	ldr	r2, [pc, #168]	; (80028a0 <HAL_SD_MspInit+0x24c>)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80027fc:	4b2a      	ldr	r3, [pc, #168]	; (80028a8 <HAL_SD_MspInit+0x254>)
 80027fe:	4a2b      	ldr	r2, [pc, #172]	; (80028ac <HAL_SD_MspInit+0x258>)
 8002800:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8002802:	4b29      	ldr	r3, [pc, #164]	; (80028a8 <HAL_SD_MspInit+0x254>)
 8002804:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002808:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800280a:	4b27      	ldr	r3, [pc, #156]	; (80028a8 <HAL_SD_MspInit+0x254>)
 800280c:	2240      	movs	r2, #64	; 0x40
 800280e:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002810:	4b25      	ldr	r3, [pc, #148]	; (80028a8 <HAL_SD_MspInit+0x254>)
 8002812:	2200      	movs	r2, #0
 8002814:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002816:	4b24      	ldr	r3, [pc, #144]	; (80028a8 <HAL_SD_MspInit+0x254>)
 8002818:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800281c:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800281e:	4b22      	ldr	r3, [pc, #136]	; (80028a8 <HAL_SD_MspInit+0x254>)
 8002820:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002824:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002826:	4b20      	ldr	r3, [pc, #128]	; (80028a8 <HAL_SD_MspInit+0x254>)
 8002828:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800282c:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800282e:	4b1e      	ldr	r3, [pc, #120]	; (80028a8 <HAL_SD_MspInit+0x254>)
 8002830:	2220      	movs	r2, #32
 8002832:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002834:	4b1c      	ldr	r3, [pc, #112]	; (80028a8 <HAL_SD_MspInit+0x254>)
 8002836:	2200      	movs	r2, #0
 8002838:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800283a:	4b1b      	ldr	r3, [pc, #108]	; (80028a8 <HAL_SD_MspInit+0x254>)
 800283c:	2204      	movs	r2, #4
 800283e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002840:	4b19      	ldr	r3, [pc, #100]	; (80028a8 <HAL_SD_MspInit+0x254>)
 8002842:	2203      	movs	r2, #3
 8002844:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002846:	4b18      	ldr	r3, [pc, #96]	; (80028a8 <HAL_SD_MspInit+0x254>)
 8002848:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800284c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800284e:	4b16      	ldr	r3, [pc, #88]	; (80028a8 <HAL_SD_MspInit+0x254>)
 8002850:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002854:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8002856:	4814      	ldr	r0, [pc, #80]	; (80028a8 <HAL_SD_MspInit+0x254>)
 8002858:	f001 ff8a 	bl	8004770 <HAL_DMA_Init>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <HAL_SD_MspInit+0x212>
    {
      Error_Handler();
 8002862:	f7ff fdd1 	bl	8002408 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a0f      	ldr	r2, [pc, #60]	; (80028a8 <HAL_SD_MspInit+0x254>)
 800286a:	63da      	str	r2, [r3, #60]	; 0x3c
 800286c:	4a0e      	ldr	r2, [pc, #56]	; (80028a8 <HAL_SD_MspInit+0x254>)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8002872:	2200      	movs	r2, #0
 8002874:	2105      	movs	r1, #5
 8002876:	2031      	movs	r0, #49	; 0x31
 8002878:	f001 ff50 	bl	800471c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800287c:	2031      	movs	r0, #49	; 0x31
 800287e:	f001 ff69 	bl	8004754 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8002882:	bf00      	nop
 8002884:	3788      	adds	r7, #136	; 0x88
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40012c00 	.word	0x40012c00
 8002890:	40023800 	.word	0x40023800
 8002894:	40020400 	.word	0x40020400
 8002898:	40020800 	.word	0x40020800
 800289c:	40020c00 	.word	0x40020c00
 80028a0:	20002ff4 	.word	0x20002ff4
 80028a4:	40026458 	.word	0x40026458
 80028a8:	20003054 	.word	0x20003054
 80028ac:	400264a0 	.word	0x400264a0

080028b0 <SSD1306_Init>:
		}
	}
}

uint8_t SSD1306_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80028b6:	f000 fa29 	bl	8002d0c <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK)
 80028ba:	f644 6320 	movw	r3, #20000	; 0x4e20
 80028be:	2201      	movs	r2, #1
 80028c0:	2178      	movs	r1, #120	; 0x78
 80028c2:	485b      	ldr	r0, [pc, #364]	; (8002a30 <SSD1306_Init+0x180>)
 80028c4:	f002 ff50 	bl	8005768 <HAL_I2C_IsDeviceReady>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <SSD1306_Init+0x22>
	{
		/* Return false */
		return 0;
 80028ce:	2300      	movs	r3, #0
 80028d0:	e0a9      	b.n	8002a26 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80028d2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80028d6:	607b      	str	r3, [r7, #4]
	while (p > 0)
 80028d8:	e002      	b.n	80028e0 <SSD1306_Init+0x30>
		p--;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3b01      	subs	r3, #1
 80028de:	607b      	str	r3, [r7, #4]
	while (p > 0)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f9      	bne.n	80028da <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80028e6:	22ae      	movs	r2, #174	; 0xae
 80028e8:	2100      	movs	r1, #0
 80028ea:	2078      	movs	r0, #120	; 0x78
 80028ec:	f000 fa8a 	bl	8002e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80028f0:	2220      	movs	r2, #32
 80028f2:	2100      	movs	r1, #0
 80028f4:	2078      	movs	r0, #120	; 0x78
 80028f6:	f000 fa85 	bl	8002e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80028fa:	2210      	movs	r2, #16
 80028fc:	2100      	movs	r1, #0
 80028fe:	2078      	movs	r0, #120	; 0x78
 8002900:	f000 fa80 	bl	8002e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002904:	22b0      	movs	r2, #176	; 0xb0
 8002906:	2100      	movs	r1, #0
 8002908:	2078      	movs	r0, #120	; 0x78
 800290a:	f000 fa7b 	bl	8002e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800290e:	22c8      	movs	r2, #200	; 0xc8
 8002910:	2100      	movs	r1, #0
 8002912:	2078      	movs	r0, #120	; 0x78
 8002914:	f000 fa76 	bl	8002e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002918:	2200      	movs	r2, #0
 800291a:	2100      	movs	r1, #0
 800291c:	2078      	movs	r0, #120	; 0x78
 800291e:	f000 fa71 	bl	8002e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002922:	2210      	movs	r2, #16
 8002924:	2100      	movs	r1, #0
 8002926:	2078      	movs	r0, #120	; 0x78
 8002928:	f000 fa6c 	bl	8002e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800292c:	2240      	movs	r2, #64	; 0x40
 800292e:	2100      	movs	r1, #0
 8002930:	2078      	movs	r0, #120	; 0x78
 8002932:	f000 fa67 	bl	8002e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002936:	2281      	movs	r2, #129	; 0x81
 8002938:	2100      	movs	r1, #0
 800293a:	2078      	movs	r0, #120	; 0x78
 800293c:	f000 fa62 	bl	8002e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002940:	22ff      	movs	r2, #255	; 0xff
 8002942:	2100      	movs	r1, #0
 8002944:	2078      	movs	r0, #120	; 0x78
 8002946:	f000 fa5d 	bl	8002e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800294a:	22a1      	movs	r2, #161	; 0xa1
 800294c:	2100      	movs	r1, #0
 800294e:	2078      	movs	r0, #120	; 0x78
 8002950:	f000 fa58 	bl	8002e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002954:	22a6      	movs	r2, #166	; 0xa6
 8002956:	2100      	movs	r1, #0
 8002958:	2078      	movs	r0, #120	; 0x78
 800295a:	f000 fa53 	bl	8002e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800295e:	22a8      	movs	r2, #168	; 0xa8
 8002960:	2100      	movs	r1, #0
 8002962:	2078      	movs	r0, #120	; 0x78
 8002964:	f000 fa4e 	bl	8002e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002968:	223f      	movs	r2, #63	; 0x3f
 800296a:	2100      	movs	r1, #0
 800296c:	2078      	movs	r0, #120	; 0x78
 800296e:	f000 fa49 	bl	8002e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002972:	22a4      	movs	r2, #164	; 0xa4
 8002974:	2100      	movs	r1, #0
 8002976:	2078      	movs	r0, #120	; 0x78
 8002978:	f000 fa44 	bl	8002e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800297c:	22d3      	movs	r2, #211	; 0xd3
 800297e:	2100      	movs	r1, #0
 8002980:	2078      	movs	r0, #120	; 0x78
 8002982:	f000 fa3f 	bl	8002e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002986:	2200      	movs	r2, #0
 8002988:	2100      	movs	r1, #0
 800298a:	2078      	movs	r0, #120	; 0x78
 800298c:	f000 fa3a 	bl	8002e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002990:	22d5      	movs	r2, #213	; 0xd5
 8002992:	2100      	movs	r1, #0
 8002994:	2078      	movs	r0, #120	; 0x78
 8002996:	f000 fa35 	bl	8002e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800299a:	22f0      	movs	r2, #240	; 0xf0
 800299c:	2100      	movs	r1, #0
 800299e:	2078      	movs	r0, #120	; 0x78
 80029a0:	f000 fa30 	bl	8002e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80029a4:	22d9      	movs	r2, #217	; 0xd9
 80029a6:	2100      	movs	r1, #0
 80029a8:	2078      	movs	r0, #120	; 0x78
 80029aa:	f000 fa2b 	bl	8002e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80029ae:	2222      	movs	r2, #34	; 0x22
 80029b0:	2100      	movs	r1, #0
 80029b2:	2078      	movs	r0, #120	; 0x78
 80029b4:	f000 fa26 	bl	8002e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80029b8:	22da      	movs	r2, #218	; 0xda
 80029ba:	2100      	movs	r1, #0
 80029bc:	2078      	movs	r0, #120	; 0x78
 80029be:	f000 fa21 	bl	8002e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80029c2:	2212      	movs	r2, #18
 80029c4:	2100      	movs	r1, #0
 80029c6:	2078      	movs	r0, #120	; 0x78
 80029c8:	f000 fa1c 	bl	8002e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80029cc:	22db      	movs	r2, #219	; 0xdb
 80029ce:	2100      	movs	r1, #0
 80029d0:	2078      	movs	r0, #120	; 0x78
 80029d2:	f000 fa17 	bl	8002e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80029d6:	2220      	movs	r2, #32
 80029d8:	2100      	movs	r1, #0
 80029da:	2078      	movs	r0, #120	; 0x78
 80029dc:	f000 fa12 	bl	8002e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80029e0:	228d      	movs	r2, #141	; 0x8d
 80029e2:	2100      	movs	r1, #0
 80029e4:	2078      	movs	r0, #120	; 0x78
 80029e6:	f000 fa0d 	bl	8002e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80029ea:	2214      	movs	r2, #20
 80029ec:	2100      	movs	r1, #0
 80029ee:	2078      	movs	r0, #120	; 0x78
 80029f0:	f000 fa08 	bl	8002e04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80029f4:	22af      	movs	r2, #175	; 0xaf
 80029f6:	2100      	movs	r1, #0
 80029f8:	2078      	movs	r0, #120	; 0x78
 80029fa:	f000 fa03 	bl	8002e04 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80029fe:	222e      	movs	r2, #46	; 0x2e
 8002a00:	2100      	movs	r1, #0
 8002a02:	2078      	movs	r0, #120	; 0x78
 8002a04:	f000 f9fe 	bl	8002e04 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f000 f843 	bl	8002a94 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8002a0e:	f000 f813 	bl	8002a38 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8002a12:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <SSD1306_Init+0x184>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002a18:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <SSD1306_Init+0x184>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002a1e:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <SSD1306_Init+0x184>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8002a24:	2301      	movs	r3, #1
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20002ef0 	.word	0x20002ef0
 8002a34:	200034b4 	.word	0x200034b4

08002a38 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++)
 8002a3e:	2300      	movs	r3, #0
 8002a40:	71fb      	strb	r3, [r7, #7]
 8002a42:	e01d      	b.n	8002a80 <SSD1306_UpdateScreen+0x48>
	{
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	3b50      	subs	r3, #80	; 0x50
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	2078      	movs	r0, #120	; 0x78
 8002a50:	f000 f9d8 	bl	8002e04 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002a54:	2200      	movs	r2, #0
 8002a56:	2100      	movs	r1, #0
 8002a58:	2078      	movs	r0, #120	; 0x78
 8002a5a:	f000 f9d3 	bl	8002e04 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002a5e:	2210      	movs	r2, #16
 8002a60:	2100      	movs	r1, #0
 8002a62:	2078      	movs	r0, #120	; 0x78
 8002a64:	f000 f9ce 	bl	8002e04 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40,
				&SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002a68:	79fb      	ldrb	r3, [r7, #7]
 8002a6a:	01db      	lsls	r3, r3, #7
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40,
 8002a6c:	4a08      	ldr	r2, [pc, #32]	; (8002a90 <SSD1306_UpdateScreen+0x58>)
 8002a6e:	441a      	add	r2, r3
 8002a70:	2380      	movs	r3, #128	; 0x80
 8002a72:	2140      	movs	r1, #64	; 0x40
 8002a74:	2078      	movs	r0, #120	; 0x78
 8002a76:	f000 f95f 	bl	8002d38 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++)
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	71fb      	strb	r3, [r7, #7]
 8002a80:	79fb      	ldrb	r3, [r7, #7]
 8002a82:	2b07      	cmp	r3, #7
 8002a84:	d9de      	bls.n	8002a44 <SSD1306_UpdateScreen+0xc>
	}
}
 8002a86:	bf00      	nop
 8002a88:	bf00      	nop
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	200030b4 	.word	0x200030b4

08002a94 <SSD1306_Fill>:
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF,
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <SSD1306_Fill+0x14>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	e000      	b.n	8002aaa <SSD1306_Fill+0x16>
 8002aa8:	23ff      	movs	r3, #255	; 0xff
 8002aaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4803      	ldr	r0, [pc, #12]	; (8002ac0 <SSD1306_Fill+0x2c>)
 8002ab2:	f016 f995 	bl	8018de0 <memset>
			sizeof(SSD1306_Buffer));
}
 8002ab6:	bf00      	nop
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	200030b4 	.word	0x200030b4

08002ac4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	80fb      	strh	r3, [r7, #6]
 8002ace:	460b      	mov	r3, r1
 8002ad0:	80bb      	strh	r3, [r7, #4]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	70fb      	strb	r3, [r7, #3]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8002ad6:	88fb      	ldrh	r3, [r7, #6]
 8002ad8:	2b7f      	cmp	r3, #127	; 0x7f
 8002ada:	d848      	bhi.n	8002b6e <SSD1306_DrawPixel+0xaa>
 8002adc:	88bb      	ldrh	r3, [r7, #4]
 8002ade:	2b3f      	cmp	r3, #63	; 0x3f
 8002ae0:	d845      	bhi.n	8002b6e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted)
 8002ae2:	4b26      	ldr	r3, [pc, #152]	; (8002b7c <SSD1306_DrawPixel+0xb8>)
 8002ae4:	791b      	ldrb	r3, [r3, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d006      	beq.n	8002af8 <SSD1306_DrawPixel+0x34>
	{
		color = (SSD1306_COLOR_t) !color;
 8002aea:	78fb      	ldrb	r3, [r7, #3]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	bf0c      	ite	eq
 8002af0:	2301      	moveq	r3, #1
 8002af2:	2300      	movne	r3, #0
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE)
 8002af8:	78fb      	ldrb	r3, [r7, #3]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d11a      	bne.n	8002b34 <SSD1306_DrawPixel+0x70>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002afe:	88fa      	ldrh	r2, [r7, #6]
 8002b00:	88bb      	ldrh	r3, [r7, #4]
 8002b02:	08db      	lsrs	r3, r3, #3
 8002b04:	b298      	uxth	r0, r3
 8002b06:	4603      	mov	r3, r0
 8002b08:	01db      	lsls	r3, r3, #7
 8002b0a:	4413      	add	r3, r2
 8002b0c:	4a1c      	ldr	r2, [pc, #112]	; (8002b80 <SSD1306_DrawPixel+0xbc>)
 8002b0e:	5cd3      	ldrb	r3, [r2, r3]
 8002b10:	b25a      	sxtb	r2, r3
 8002b12:	88bb      	ldrh	r3, [r7, #4]
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	2101      	movs	r1, #1
 8002b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1e:	b25b      	sxtb	r3, r3
 8002b20:	4313      	orrs	r3, r2
 8002b22:	b259      	sxtb	r1, r3
 8002b24:	88fa      	ldrh	r2, [r7, #6]
 8002b26:	4603      	mov	r3, r0
 8002b28:	01db      	lsls	r3, r3, #7
 8002b2a:	4413      	add	r3, r2
 8002b2c:	b2c9      	uxtb	r1, r1
 8002b2e:	4a14      	ldr	r2, [pc, #80]	; (8002b80 <SSD1306_DrawPixel+0xbc>)
 8002b30:	54d1      	strb	r1, [r2, r3]
 8002b32:	e01d      	b.n	8002b70 <SSD1306_DrawPixel+0xac>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002b34:	88fa      	ldrh	r2, [r7, #6]
 8002b36:	88bb      	ldrh	r3, [r7, #4]
 8002b38:	08db      	lsrs	r3, r3, #3
 8002b3a:	b298      	uxth	r0, r3
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	01db      	lsls	r3, r3, #7
 8002b40:	4413      	add	r3, r2
 8002b42:	4a0f      	ldr	r2, [pc, #60]	; (8002b80 <SSD1306_DrawPixel+0xbc>)
 8002b44:	5cd3      	ldrb	r3, [r2, r3]
 8002b46:	b25a      	sxtb	r2, r3
 8002b48:	88bb      	ldrh	r3, [r7, #4]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	2101      	movs	r1, #1
 8002b50:	fa01 f303 	lsl.w	r3, r1, r3
 8002b54:	b25b      	sxtb	r3, r3
 8002b56:	43db      	mvns	r3, r3
 8002b58:	b25b      	sxtb	r3, r3
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	b259      	sxtb	r1, r3
 8002b5e:	88fa      	ldrh	r2, [r7, #6]
 8002b60:	4603      	mov	r3, r0
 8002b62:	01db      	lsls	r3, r3, #7
 8002b64:	4413      	add	r3, r2
 8002b66:	b2c9      	uxtb	r1, r1
 8002b68:	4a05      	ldr	r2, [pc, #20]	; (8002b80 <SSD1306_DrawPixel+0xbc>)
 8002b6a:	54d1      	strb	r1, [r2, r3]
 8002b6c:	e000      	b.n	8002b70 <SSD1306_DrawPixel+0xac>
		return;
 8002b6e:	bf00      	nop
	}
}
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	200034b4 	.word	0x200034b4
 8002b80:	200030b4 	.word	0x200030b4

08002b84 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	460a      	mov	r2, r1
 8002b8e:	80fb      	strh	r3, [r7, #6]
 8002b90:	4613      	mov	r3, r2
 8002b92:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002b94:	4a05      	ldr	r2, [pc, #20]	; (8002bac <SSD1306_GotoXY+0x28>)
 8002b96:	88fb      	ldrh	r3, [r7, #6]
 8002b98:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002b9a:	4a04      	ldr	r2, [pc, #16]	; (8002bac <SSD1306_GotoXY+0x28>)
 8002b9c:	88bb      	ldrh	r3, [r7, #4]
 8002b9e:	8053      	strh	r3, [r2, #2]
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	200034b4 	.word	0x200034b4

08002bb0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t *Font, SSD1306_COLOR_t color)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	6039      	str	r1, [r7, #0]
 8002bba:	71fb      	strb	r3, [r7, #7]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
	SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002bc0:	4b3a      	ldr	r3, [pc, #232]	; (8002cac <SSD1306_Putc+0xfc>)
 8002bc2:	881b      	ldrh	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	4413      	add	r3, r2
	if (
 8002bcc:	2b7f      	cmp	r3, #127	; 0x7f
 8002bce:	dc07      	bgt.n	8002be0 <SSD1306_Putc+0x30>
	SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight))
 8002bd0:	4b36      	ldr	r3, [pc, #216]	; (8002cac <SSD1306_Putc+0xfc>)
 8002bd2:	885b      	ldrh	r3, [r3, #2]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	785b      	ldrb	r3, [r3, #1]
 8002bda:	4413      	add	r3, r2
	SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002bdc:	2b3f      	cmp	r3, #63	; 0x3f
 8002bde:	dd01      	ble.n	8002be4 <SSD1306_Putc+0x34>
	{
		/* Error */
		return 0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	e05e      	b.n	8002ca2 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++)
 8002be4:	2300      	movs	r3, #0
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	e04b      	b.n	8002c82 <SSD1306_Putc+0xd2>
	{
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	3b20      	subs	r3, #32
 8002bf2:	6839      	ldr	r1, [r7, #0]
 8002bf4:	7849      	ldrb	r1, [r1, #1]
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	440b      	add	r3, r1
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	4413      	add	r3, r2
 8002c04:	881b      	ldrh	r3, [r3, #0]
 8002c06:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++)
 8002c08:	2300      	movs	r3, #0
 8002c0a:	613b      	str	r3, [r7, #16]
 8002c0c:	e030      	b.n	8002c70 <SSD1306_Putc+0xc0>
		{
			if ((b << j) & 0x8000)
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d010      	beq.n	8002c40 <SSD1306_Putc+0x90>
			{
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 8002c1e:	4b23      	ldr	r3, [pc, #140]	; (8002cac <SSD1306_Putc+0xfc>)
 8002c20:	881a      	ldrh	r2, [r3, #0]
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	4413      	add	r3, r2
 8002c28:	b298      	uxth	r0, r3
 8002c2a:	4b20      	ldr	r3, [pc, #128]	; (8002cac <SSD1306_Putc+0xfc>)
 8002c2c:	885a      	ldrh	r2, [r3, #2]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	4413      	add	r3, r2
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	79ba      	ldrb	r2, [r7, #6]
 8002c38:	4619      	mov	r1, r3
 8002c3a:	f7ff ff43 	bl	8002ac4 <SSD1306_DrawPixel>
 8002c3e:	e014      	b.n	8002c6a <SSD1306_Putc+0xba>
						(SSD1306_COLOR_t) color);
			}
			else
			{
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 8002c40:	4b1a      	ldr	r3, [pc, #104]	; (8002cac <SSD1306_Putc+0xfc>)
 8002c42:	881a      	ldrh	r2, [r3, #0]
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	4413      	add	r3, r2
 8002c4a:	b298      	uxth	r0, r3
 8002c4c:	4b17      	ldr	r3, [pc, #92]	; (8002cac <SSD1306_Putc+0xfc>)
 8002c4e:	885a      	ldrh	r2, [r3, #2]
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	4413      	add	r3, r2
 8002c56:	b299      	uxth	r1, r3
 8002c58:	79bb      	ldrb	r3, [r7, #6]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	bf0c      	ite	eq
 8002c5e:	2301      	moveq	r3, #1
 8002c60:	2300      	movne	r3, #0
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	461a      	mov	r2, r3
 8002c66:	f7ff ff2d 	bl	8002ac4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++)
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	613b      	str	r3, [r7, #16]
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	461a      	mov	r2, r3
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d3c8      	bcc.n	8002c0e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++)
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	785b      	ldrb	r3, [r3, #1]
 8002c86:	461a      	mov	r2, r3
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d3ad      	bcc.n	8002bea <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002c8e:	4b07      	ldr	r3, [pc, #28]	; (8002cac <SSD1306_Putc+0xfc>)
 8002c90:	881a      	ldrh	r2, [r3, #0]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	4413      	add	r3, r2
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	4b03      	ldr	r3, [pc, #12]	; (8002cac <SSD1306_Putc+0xfc>)
 8002c9e:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8002ca0:	79fb      	ldrb	r3, [r7, #7]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	200034b4 	.word	0x200034b4

08002cb0 <SSD1306_Puts>:

char SSD1306_Puts(char *str, FontDef_t *Font, SSD1306_COLOR_t color)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str)
 8002cbe:	e012      	b.n	8002ce6 <SSD1306_Puts+0x36>
	{
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	79fa      	ldrb	r2, [r7, #7]
 8002cc6:	68b9      	ldr	r1, [r7, #8]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff ff71 	bl	8002bb0 <SSD1306_Putc>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d002      	beq.n	8002ce0 <SSD1306_Puts+0x30>
		{
			/* Return error */
			return *str;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	e008      	b.n	8002cf2 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	60fb      	str	r3, [r7, #12]
	while (*str)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1e8      	bne.n	8002cc0 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	781b      	ldrb	r3, [r3, #0]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <SSD1306_Clear>:
		SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
	}
}

void SSD1306_Clear(void)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	af00      	add	r7, sp, #0
	SSD1306_Fill(0);
 8002cfe:	2000      	movs	r0, #0
 8002d00:	f7ff fec8 	bl	8002a94 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8002d04:	f7ff fe98 	bl	8002a38 <SSD1306_UpdateScreen>
}
 8002d08:	bf00      	nop
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <ssd1306_I2C_Init>:
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init()
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
	uint32_t p = 250000;
 8002d12:	4b08      	ldr	r3, [pc, #32]	; (8002d34 <ssd1306_I2C_Init+0x28>)
 8002d14:	607b      	str	r3, [r7, #4]
	while (p > 0)
 8002d16:	e002      	b.n	8002d1e <ssd1306_I2C_Init+0x12>
		p--;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	607b      	str	r3, [r7, #4]
	while (p > 0)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1f9      	bne.n	8002d18 <ssd1306_I2C_Init+0xc>
}
 8002d24:	bf00      	nop
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	0003d090 	.word	0x0003d090

08002d38 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t *data,
		uint16_t count)
{
 8002d38:	b590      	push	{r4, r7, lr}
 8002d3a:	b0c7      	sub	sp, #284	; 0x11c
 8002d3c:	af02      	add	r7, sp, #8
 8002d3e:	4604      	mov	r4, r0
 8002d40:	4608      	mov	r0, r1
 8002d42:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002d46:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8002d4a:	600a      	str	r2, [r1, #0]
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d52:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002d56:	4622      	mov	r2, r4
 8002d58:	701a      	strb	r2, [r3, #0]
 8002d5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d5e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8002d62:	4602      	mov	r2, r0
 8002d64:	701a      	strb	r2, [r3, #0]
 8002d66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d6a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002d6e:	460a      	mov	r2, r1
 8002d70:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8002d72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002d7a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002d7e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8002d82:	7812      	ldrb	r2, [r2, #0]
 8002d84:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for (i = 0; i < count; i++)
 8002d86:	2300      	movs	r3, #0
 8002d88:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002d8c:	e015      	b.n	8002dba <ssd1306_I2C_WriteMulti+0x82>
		dt[i + 1] = data[i];
 8002d8e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002d92:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002d96:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002d9a:	6812      	ldr	r2, [r2, #0]
 8002d9c:	441a      	add	r2, r3
 8002d9e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002da2:	3301      	adds	r3, #1
 8002da4:	7811      	ldrb	r1, [r2, #0]
 8002da6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002daa:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8002dae:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < count; i++)
 8002db0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002db4:	3301      	adds	r3, #1
 8002db6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002dba:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002dc4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002dc8:	8812      	ldrh	r2, [r2, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d8df      	bhi.n	8002d8e <ssd1306_I2C_WriteMulti+0x56>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count + 1, 10);
 8002dce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002dd2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	b299      	uxth	r1, r3
 8002dda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002dde:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002de2:	881b      	ldrh	r3, [r3, #0]
 8002de4:	3301      	adds	r3, #1
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	f107 020c 	add.w	r2, r7, #12
 8002dec:	200a      	movs	r0, #10
 8002dee:	9000      	str	r0, [sp, #0]
 8002df0:	4803      	ldr	r0, [pc, #12]	; (8002e00 <ssd1306_I2C_WriteMulti+0xc8>)
 8002df2:	f002 fbbb 	bl	800556c <HAL_I2C_Master_Transmit>
}
 8002df6:	bf00      	nop
 8002df8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd90      	pop	{r4, r7, pc}
 8002e00:	20002ef0 	.word	0x20002ef0

08002e04 <ssd1306_I2C_Write>:

void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af02      	add	r7, sp, #8
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	71fb      	strb	r3, [r7, #7]
 8002e0e:	460b      	mov	r3, r1
 8002e10:	71bb      	strb	r3, [r7, #6]
 8002e12:	4613      	mov	r3, r2
 8002e14:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002e16:	79bb      	ldrb	r3, [r7, #6]
 8002e18:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002e1a:	797b      	ldrb	r3, [r7, #5]
 8002e1c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	b299      	uxth	r1, r3
 8002e22:	f107 020c 	add.w	r2, r7, #12
 8002e26:	230a      	movs	r3, #10
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	4803      	ldr	r0, [pc, #12]	; (8002e3c <ssd1306_I2C_Write+0x38>)
 8002e2e:	f002 fb9d 	bl	800556c <HAL_I2C_Master_Transmit>
}
 8002e32:	bf00      	nop
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20002ef0 	.word	0x20002ef0

08002e40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	607b      	str	r3, [r7, #4]
 8002e4a:	4b12      	ldr	r3, [pc, #72]	; (8002e94 <HAL_MspInit+0x54>)
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4e:	4a11      	ldr	r2, [pc, #68]	; (8002e94 <HAL_MspInit+0x54>)
 8002e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e54:	6453      	str	r3, [r2, #68]	; 0x44
 8002e56:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <HAL_MspInit+0x54>)
 8002e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e5e:	607b      	str	r3, [r7, #4]
 8002e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	603b      	str	r3, [r7, #0]
 8002e66:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <HAL_MspInit+0x54>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	4a0a      	ldr	r2, [pc, #40]	; (8002e94 <HAL_MspInit+0x54>)
 8002e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e70:	6413      	str	r3, [r2, #64]	; 0x40
 8002e72:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <HAL_MspInit+0x54>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7a:	603b      	str	r3, [r7, #0]
 8002e7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e7e:	2200      	movs	r2, #0
 8002e80:	210f      	movs	r1, #15
 8002e82:	f06f 0001 	mvn.w	r0, #1
 8002e86:	f001 fc49 	bl	800471c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e8a:	bf00      	nop
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40023800 	.word	0x40023800

08002e98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08e      	sub	sp, #56	; 0x38
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	4b33      	ldr	r3, [pc, #204]	; (8002f7c <HAL_InitTick+0xe4>)
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	4a32      	ldr	r2, [pc, #200]	; (8002f7c <HAL_InitTick+0xe4>)
 8002eb2:	f043 0302 	orr.w	r3, r3, #2
 8002eb6:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb8:	4b30      	ldr	r3, [pc, #192]	; (8002f7c <HAL_InitTick+0xe4>)
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ec4:	f107 0210 	add.w	r2, r7, #16
 8002ec8:	f107 0314 	add.w	r3, r7, #20
 8002ecc:	4611      	mov	r1, r2
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f004 fb7e 	bl	80075d0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d103      	bne.n	8002ee6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002ede:	f004 fb63 	bl	80075a8 <HAL_RCC_GetPCLK1Freq>
 8002ee2:	6378      	str	r0, [r7, #52]	; 0x34
 8002ee4:	e004      	b.n	8002ef0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002ee6:	f004 fb5f 	bl	80075a8 <HAL_RCC_GetPCLK1Freq>
 8002eea:	4603      	mov	r3, r0
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef2:	4a23      	ldr	r2, [pc, #140]	; (8002f80 <HAL_InitTick+0xe8>)
 8002ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef8:	0c9b      	lsrs	r3, r3, #18
 8002efa:	3b01      	subs	r3, #1
 8002efc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8002efe:	4b21      	ldr	r3, [pc, #132]	; (8002f84 <HAL_InitTick+0xec>)
 8002f00:	4a21      	ldr	r2, [pc, #132]	; (8002f88 <HAL_InitTick+0xf0>)
 8002f02:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8002f04:	4b1f      	ldr	r3, [pc, #124]	; (8002f84 <HAL_InitTick+0xec>)
 8002f06:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f0a:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8002f0c:	4a1d      	ldr	r2, [pc, #116]	; (8002f84 <HAL_InitTick+0xec>)
 8002f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f10:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8002f12:	4b1c      	ldr	r3, [pc, #112]	; (8002f84 <HAL_InitTick+0xec>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f18:	4b1a      	ldr	r3, [pc, #104]	; (8002f84 <HAL_InitTick+0xec>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f1e:	4b19      	ldr	r3, [pc, #100]	; (8002f84 <HAL_InitTick+0xec>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8002f24:	4817      	ldr	r0, [pc, #92]	; (8002f84 <HAL_InitTick+0xec>)
 8002f26:	f006 fff9 	bl	8009f1c <HAL_TIM_Base_Init>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002f30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d11b      	bne.n	8002f70 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8002f38:	4812      	ldr	r0, [pc, #72]	; (8002f84 <HAL_InitTick+0xec>)
 8002f3a:	f007 f8cf 	bl	800a0dc <HAL_TIM_Base_Start_IT>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002f44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d111      	bne.n	8002f70 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f4c:	201d      	movs	r0, #29
 8002f4e:	f001 fc01 	bl	8004754 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b0f      	cmp	r3, #15
 8002f56:	d808      	bhi.n	8002f6a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8002f58:	2200      	movs	r2, #0
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	201d      	movs	r0, #29
 8002f5e:	f001 fbdd 	bl	800471c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f62:	4a0a      	ldr	r2, [pc, #40]	; (8002f8c <HAL_InitTick+0xf4>)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6013      	str	r3, [r2, #0]
 8002f68:	e002      	b.n	8002f70 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002f70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3738      	adds	r7, #56	; 0x38
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	431bde83 	.word	0x431bde83
 8002f84:	200034bc 	.word	0x200034bc
 8002f88:	40000400 	.word	0x40000400
 8002f8c:	2000000c 	.word	0x2000000c

08002f90 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1;
volatile uint8_t Timer2;
void SDTimer_Handler(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
	if (Timer1 > 0)
 8002f94:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <SDTimer_Handler+0x40>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d006      	beq.n	8002fac <SDTimer_Handler+0x1c>
		Timer1--;
 8002f9e:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <SDTimer_Handler+0x40>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <SDTimer_Handler+0x40>)
 8002faa:	701a      	strb	r2, [r3, #0]

	if (Timer2 > 0)
 8002fac:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <SDTimer_Handler+0x44>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d006      	beq.n	8002fc4 <SDTimer_Handler+0x34>
		Timer2--;
 8002fb6:	4b07      	ldr	r3, [pc, #28]	; (8002fd4 <SDTimer_Handler+0x44>)
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	4b04      	ldr	r3, [pc, #16]	; (8002fd4 <SDTimer_Handler+0x44>)
 8002fc2:	701a      	strb	r2, [r3, #0]
}
 8002fc4:	bf00      	nop
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	20003505 	.word	0x20003505
 8002fd4:	20003506 	.word	0x20003506

08002fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8002fdc:	e7fe      	b.n	8002fdc <NMI_Handler+0x4>

08002fde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fe2:	e7fe      	b.n	8002fe2 <HardFault_Handler+0x4>

08002fe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fe8:	e7fe      	b.n	8002fe8 <MemManage_Handler+0x4>

08002fea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fea:	b480      	push	{r7}
 8002fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fee:	e7fe      	b.n	8002fee <BusFault_Handler+0x4>

08002ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ff4:	e7fe      	b.n	8002ff4 <UsageFault_Handler+0x4>

08002ff6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ffa:	bf00      	nop
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	FatFsCnt++;
 8003008:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <TIM3_IRQHandler+0x30>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	b2db      	uxtb	r3, r3
 800300e:	3301      	adds	r3, #1
 8003010:	b2da      	uxtb	r2, r3
 8003012:	4b08      	ldr	r3, [pc, #32]	; (8003034 <TIM3_IRQHandler+0x30>)
 8003014:	701a      	strb	r2, [r3, #0]
	if (FatFsCnt >= 10)
 8003016:	4b07      	ldr	r3, [pc, #28]	; (8003034 <TIM3_IRQHandler+0x30>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b09      	cmp	r3, #9
 800301e:	d904      	bls.n	800302a <TIM3_IRQHandler+0x26>
	{
		FatFsCnt = 0;
 8003020:	4b04      	ldr	r3, [pc, #16]	; (8003034 <TIM3_IRQHandler+0x30>)
 8003022:	2200      	movs	r2, #0
 8003024:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8003026:	f7ff ffb3 	bl	8002f90 <SDTimer_Handler>
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800302a:	4803      	ldr	r0, [pc, #12]	; (8003038 <TIM3_IRQHandler+0x34>)
 800302c:	f007 f91f 	bl	800a26e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003030:	bf00      	nop
 8003032:	bd80      	pop	{r7, pc}
 8003034:	20003504 	.word	0x20003504
 8003038:	200034bc 	.word	0x200034bc

0800303c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8003040:	4802      	ldr	r0, [pc, #8]	; (800304c <SDIO_IRQHandler+0x10>)
 8003042:	f006 f8c3 	bl	80091cc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20002f70 	.word	0x20002f70

08003050 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003054:	4802      	ldr	r0, [pc, #8]	; (8003060 <DMA2_Stream2_IRQHandler+0x10>)
 8003056:	f001 fd23 	bl	8004aa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	20000a6c 	.word	0x20000a6c

08003064 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8003068:	4802      	ldr	r0, [pc, #8]	; (8003074 <DMA2_Stream3_IRQHandler+0x10>)
 800306a:	f001 fd19 	bl	8004aa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800306e:	bf00      	nop
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	20002ff4 	.word	0x20002ff4

08003078 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800307c:	4802      	ldr	r0, [pc, #8]	; (8003088 <OTG_FS_IRQHandler+0x10>)
 800307e:	f003 f801 	bl	8006084 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003082:	bf00      	nop
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	20007bbc 	.word	0x20007bbc

0800308c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8003090:	4802      	ldr	r0, [pc, #8]	; (800309c <DMA2_Stream6_IRQHandler+0x10>)
 8003092:	f001 fd05 	bl	8004aa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003096:	bf00      	nop
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	20003054 	.word	0x20003054

080030a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
	return 1;
 80030a4:	2301      	movs	r3, #1
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <_kill>:

int _kill(int pid, int sig)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 80030ba:	f015 ff59 	bl	8018f70 <__errno>
 80030be:	4603      	mov	r3, r0
 80030c0:	2216      	movs	r2, #22
 80030c2:	601a      	str	r2, [r3, #0]
	return -1;
 80030c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <_exit>:

void _exit(int status)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80030d8:	f04f 31ff 	mov.w	r1, #4294967295
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f7ff ffe7 	bl	80030b0 <_kill>
	while (1)
 80030e2:	e7fe      	b.n	80030e2 <_exit+0x12>

080030e4 <_read>:
	{
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030f0:	2300      	movs	r3, #0
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	e00a      	b.n	800310c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80030f6:	f3af 8000 	nop.w
 80030fa:	4601      	mov	r1, r0
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	1c5a      	adds	r2, r3, #1
 8003100:	60ba      	str	r2, [r7, #8]
 8003102:	b2ca      	uxtb	r2, r1
 8003104:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	3301      	adds	r3, #1
 800310a:	617b      	str	r3, [r7, #20]
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	429a      	cmp	r2, r3
 8003112:	dbf0      	blt.n	80030f6 <_read+0x12>
	}

	return len;
 8003114:	687b      	ldr	r3, [r7, #4]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3718      	adds	r7, #24
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b086      	sub	sp, #24
 8003122:	af00      	add	r7, sp, #0
 8003124:	60f8      	str	r0, [r7, #12]
 8003126:	60b9      	str	r1, [r7, #8]
 8003128:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]
 800312e:	e009      	b.n	8003144 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	1c5a      	adds	r2, r3, #1
 8003134:	60ba      	str	r2, [r7, #8]
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff f8ba 	bl	80022b2 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	3301      	adds	r3, #1
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	429a      	cmp	r2, r3
 800314a:	dbf1      	blt.n	8003130 <_write+0x12>
	}
	return len;
 800314c:	687b      	ldr	r3, [r7, #4]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <_close>:

int _close(int file)
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 800315e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003162:	4618      	mov	r0, r3
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <_fstat>:

int _fstat(int file, struct stat *st)
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
 8003176:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800317e:	605a      	str	r2, [r3, #4]
	return 0;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <_isatty>:

int _isatty(int file)
{
 800318e:	b480      	push	{r7}
 8003190:	b083      	sub	sp, #12
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8003196:	2301      	movs	r3, #1
}
 8003198:	4618      	mov	r0, r3
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
	...

080031c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80031c8:	4a14      	ldr	r2, [pc, #80]	; (800321c <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80031ca:	4b15      	ldr	r3, [pc, #84]	; (8003220 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end)
 80031d4:	4b13      	ldr	r3, [pc, #76]	; (8003224 <_sbrk+0x64>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d102      	bne.n	80031e2 <_sbrk+0x22>
	{
		__sbrk_heap_end = &_end;
 80031dc:	4b11      	ldr	r3, [pc, #68]	; (8003224 <_sbrk+0x64>)
 80031de:	4a12      	ldr	r2, [pc, #72]	; (8003228 <_sbrk+0x68>)
 80031e0:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap)
 80031e2:	4b10      	ldr	r3, [pc, #64]	; (8003224 <_sbrk+0x64>)
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4413      	add	r3, r2
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d207      	bcs.n	8003200 <_sbrk+0x40>
	{
		errno = ENOMEM;
 80031f0:	f015 febe 	bl	8018f70 <__errno>
 80031f4:	4603      	mov	r3, r0
 80031f6:	220c      	movs	r2, #12
 80031f8:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80031fa:	f04f 33ff 	mov.w	r3, #4294967295
 80031fe:	e009      	b.n	8003214 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8003200:	4b08      	ldr	r3, [pc, #32]	; (8003224 <_sbrk+0x64>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8003206:	4b07      	ldr	r3, [pc, #28]	; (8003224 <_sbrk+0x64>)
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4413      	add	r3, r2
 800320e:	4a05      	ldr	r2, [pc, #20]	; (8003224 <_sbrk+0x64>)
 8003210:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8003212:	68fb      	ldr	r3, [r7, #12]
}
 8003214:	4618      	mov	r0, r3
 8003216:	3718      	adds	r7, #24
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	20020000 	.word	0x20020000
 8003220:	00000800 	.word	0x00000800
 8003224:	20003508 	.word	0x20003508
 8003228:	20008490 	.word	0x20008490

0800322c <SystemInit>:
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8003230:	4b06      	ldr	r3, [pc, #24]	; (800324c <SystemInit+0x20>)
 8003232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003236:	4a05      	ldr	r2, [pc, #20]	; (800324c <SystemInit+0x20>)
 8003238:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800323c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003240:	bf00      	nop
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	e000ed00 	.word	0xe000ed00

08003250 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b08e      	sub	sp, #56	; 0x38
 8003254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003256:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	605a      	str	r2, [r3, #4]
 8003260:	609a      	str	r2, [r3, #8]
 8003262:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003264:	f107 0320 	add.w	r3, r7, #32
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800326e:	1d3b      	adds	r3, r7, #4
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	609a      	str	r2, [r3, #8]
 8003278:	60da      	str	r2, [r3, #12]
 800327a:	611a      	str	r2, [r3, #16]
 800327c:	615a      	str	r2, [r3, #20]
 800327e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003280:	4b2b      	ldr	r3, [pc, #172]	; (8003330 <MX_TIM2_Init+0xe0>)
 8003282:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003286:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4200-1;
 8003288:	4b29      	ldr	r3, [pc, #164]	; (8003330 <MX_TIM2_Init+0xe0>)
 800328a:	f241 0267 	movw	r2, #4199	; 0x1067
 800328e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003290:	4b27      	ldr	r3, [pc, #156]	; (8003330 <MX_TIM2_Init+0xe0>)
 8003292:	2200      	movs	r2, #0
 8003294:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8003296:	4b26      	ldr	r3, [pc, #152]	; (8003330 <MX_TIM2_Init+0xe0>)
 8003298:	2263      	movs	r2, #99	; 0x63
 800329a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800329c:	4b24      	ldr	r3, [pc, #144]	; (8003330 <MX_TIM2_Init+0xe0>)
 800329e:	2200      	movs	r2, #0
 80032a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032a2:	4b23      	ldr	r3, [pc, #140]	; (8003330 <MX_TIM2_Init+0xe0>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80032a8:	4821      	ldr	r0, [pc, #132]	; (8003330 <MX_TIM2_Init+0xe0>)
 80032aa:	f006 fe37 	bl	8009f1c <HAL_TIM_Base_Init>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80032b4:	f7ff f8a8 	bl	8002408 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032bc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80032be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032c2:	4619      	mov	r1, r3
 80032c4:	481a      	ldr	r0, [pc, #104]	; (8003330 <MX_TIM2_Init+0xe0>)
 80032c6:	f007 f99d 	bl	800a604 <HAL_TIM_ConfigClockSource>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80032d0:	f7ff f89a 	bl	8002408 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80032d4:	4816      	ldr	r0, [pc, #88]	; (8003330 <MX_TIM2_Init+0xe0>)
 80032d6:	f006 ff71 	bl	800a1bc <HAL_TIM_PWM_Init>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80032e0:	f7ff f892 	bl	8002408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80032e4:	2320      	movs	r3, #32
 80032e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032e8:	2300      	movs	r3, #0
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032ec:	f107 0320 	add.w	r3, r7, #32
 80032f0:	4619      	mov	r1, r3
 80032f2:	480f      	ldr	r0, [pc, #60]	; (8003330 <MX_TIM2_Init+0xe0>)
 80032f4:	f007 fd60 	bl	800adb8 <HAL_TIMEx_MasterConfigSynchronization>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80032fe:	f7ff f883 	bl	8002408 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003302:	2360      	movs	r3, #96	; 0x60
 8003304:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003306:	2300      	movs	r3, #0
 8003308:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800330a:	2300      	movs	r3, #0
 800330c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800330e:	2300      	movs	r3, #0
 8003310:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003312:	1d3b      	adds	r3, r7, #4
 8003314:	2200      	movs	r2, #0
 8003316:	4619      	mov	r1, r3
 8003318:	4805      	ldr	r0, [pc, #20]	; (8003330 <MX_TIM2_Init+0xe0>)
 800331a:	f007 f8b1 	bl	800a480 <HAL_TIM_PWM_ConfigChannel>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003324:	f7ff f870 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003328:	bf00      	nop
 800332a:	3738      	adds	r7, #56	; 0x38
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	2000350c 	.word	0x2000350c

08003334 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800333a:	463b      	mov	r3, r7
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003342:	4b15      	ldr	r3, [pc, #84]	; (8003398 <MX_TIM6_Init+0x64>)
 8003344:	4a15      	ldr	r2, [pc, #84]	; (800339c <MX_TIM6_Init+0x68>)
 8003346:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 42000-1;
 8003348:	4b13      	ldr	r3, [pc, #76]	; (8003398 <MX_TIM6_Init+0x64>)
 800334a:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800334e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003350:	4b11      	ldr	r3, [pc, #68]	; (8003398 <MX_TIM6_Init+0x64>)
 8003352:	2200      	movs	r2, #0
 8003354:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8003356:	4b10      	ldr	r3, [pc, #64]	; (8003398 <MX_TIM6_Init+0x64>)
 8003358:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800335c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800335e:	4b0e      	ldr	r3, [pc, #56]	; (8003398 <MX_TIM6_Init+0x64>)
 8003360:	2200      	movs	r2, #0
 8003362:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003364:	480c      	ldr	r0, [pc, #48]	; (8003398 <MX_TIM6_Init+0x64>)
 8003366:	f006 fdd9 	bl	8009f1c <HAL_TIM_Base_Init>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003370:	f7ff f84a 	bl	8002408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003374:	2300      	movs	r3, #0
 8003376:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003378:	2300      	movs	r3, #0
 800337a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800337c:	463b      	mov	r3, r7
 800337e:	4619      	mov	r1, r3
 8003380:	4805      	ldr	r0, [pc, #20]	; (8003398 <MX_TIM6_Init+0x64>)
 8003382:	f007 fd19 	bl	800adb8 <HAL_TIMEx_MasterConfigSynchronization>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800338c:	f7ff f83c 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003390:	bf00      	nop
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	20003554 	.word	0x20003554
 800339c:	40001000 	.word	0x40001000

080033a0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b096      	sub	sp, #88	; 0x58
 80033a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	605a      	str	r2, [r3, #4]
 80033b0:	609a      	str	r2, [r3, #8]
 80033b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033c2:	2200      	movs	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	605a      	str	r2, [r3, #4]
 80033c8:	609a      	str	r2, [r3, #8]
 80033ca:	60da      	str	r2, [r3, #12]
 80033cc:	611a      	str	r2, [r3, #16]
 80033ce:	615a      	str	r2, [r3, #20]
 80033d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80033d2:	1d3b      	adds	r3, r7, #4
 80033d4:	2220      	movs	r2, #32
 80033d6:	2100      	movs	r1, #0
 80033d8:	4618      	mov	r0, r3
 80033da:	f015 fd01 	bl	8018de0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80033de:	4b3d      	ldr	r3, [pc, #244]	; (80034d4 <MX_TIM8_Init+0x134>)
 80033e0:	4a3d      	ldr	r2, [pc, #244]	; (80034d8 <MX_TIM8_Init+0x138>)
 80033e2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1800-1;
 80033e4:	4b3b      	ldr	r3, [pc, #236]	; (80034d4 <MX_TIM8_Init+0x134>)
 80033e6:	f240 7207 	movw	r2, #1799	; 0x707
 80033ea:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033ec:	4b39      	ldr	r3, [pc, #228]	; (80034d4 <MX_TIM8_Init+0x134>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 270-1;
 80033f2:	4b38      	ldr	r3, [pc, #224]	; (80034d4 <MX_TIM8_Init+0x134>)
 80033f4:	f240 120d 	movw	r2, #269	; 0x10d
 80033f8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033fa:	4b36      	ldr	r3, [pc, #216]	; (80034d4 <MX_TIM8_Init+0x134>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003400:	4b34      	ldr	r3, [pc, #208]	; (80034d4 <MX_TIM8_Init+0x134>)
 8003402:	2200      	movs	r2, #0
 8003404:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003406:	4b33      	ldr	r3, [pc, #204]	; (80034d4 <MX_TIM8_Init+0x134>)
 8003408:	2200      	movs	r2, #0
 800340a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800340c:	4831      	ldr	r0, [pc, #196]	; (80034d4 <MX_TIM8_Init+0x134>)
 800340e:	f006 fd85 	bl	8009f1c <HAL_TIM_Base_Init>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8003418:	f7fe fff6 	bl	8002408 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800341c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003420:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003422:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003426:	4619      	mov	r1, r3
 8003428:	482a      	ldr	r0, [pc, #168]	; (80034d4 <MX_TIM8_Init+0x134>)
 800342a:	f007 f8eb 	bl	800a604 <HAL_TIM_ConfigClockSource>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8003434:	f7fe ffe8 	bl	8002408 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003438:	4826      	ldr	r0, [pc, #152]	; (80034d4 <MX_TIM8_Init+0x134>)
 800343a:	f006 febf 	bl	800a1bc <HAL_TIM_PWM_Init>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8003444:	f7fe ffe0 	bl	8002408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003448:	2320      	movs	r3, #32
 800344a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800344c:	2300      	movs	r3, #0
 800344e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003450:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003454:	4619      	mov	r1, r3
 8003456:	481f      	ldr	r0, [pc, #124]	; (80034d4 <MX_TIM8_Init+0x134>)
 8003458:	f007 fcae 	bl	800adb8 <HAL_TIMEx_MasterConfigSynchronization>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8003462:	f7fe ffd1 	bl	8002408 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003466:	2360      	movs	r3, #96	; 0x60
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800346a:	2300      	movs	r3, #0
 800346c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800346e:	2300      	movs	r3, #0
 8003470:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003472:	2300      	movs	r3, #0
 8003474:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003476:	2300      	movs	r3, #0
 8003478:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800347a:	2300      	movs	r3, #0
 800347c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800347e:	2300      	movs	r3, #0
 8003480:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003486:	2200      	movs	r2, #0
 8003488:	4619      	mov	r1, r3
 800348a:	4812      	ldr	r0, [pc, #72]	; (80034d4 <MX_TIM8_Init+0x134>)
 800348c:	f006 fff8 	bl	800a480 <HAL_TIM_PWM_ConfigChannel>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8003496:	f7fe ffb7 	bl	8002408 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800349a:	2300      	movs	r3, #0
 800349c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800349e:	2300      	movs	r3, #0
 80034a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80034a2:	2300      	movs	r3, #0
 80034a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80034a6:	2300      	movs	r3, #0
 80034a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80034aa:	2300      	movs	r3, #0
 80034ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80034ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034b2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80034b4:	2300      	movs	r3, #0
 80034b6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80034b8:	1d3b      	adds	r3, r7, #4
 80034ba:	4619      	mov	r1, r3
 80034bc:	4805      	ldr	r0, [pc, #20]	; (80034d4 <MX_TIM8_Init+0x134>)
 80034be:	f007 fcf7 	bl	800aeb0 <HAL_TIMEx_ConfigBreakDeadTime>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 80034c8:	f7fe ff9e 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80034cc:	bf00      	nop
 80034ce:	3758      	adds	r7, #88	; 0x58
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	2000359c 	.word	0x2000359c
 80034d8:	40010400 	.word	0x40010400

080034dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80034dc:	b480      	push	{r7}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ec:	d10e      	bne.n	800350c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034ee:	2300      	movs	r3, #0
 80034f0:	617b      	str	r3, [r7, #20]
 80034f2:	4b1d      	ldr	r3, [pc, #116]	; (8003568 <HAL_TIM_Base_MspInit+0x8c>)
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	4a1c      	ldr	r2, [pc, #112]	; (8003568 <HAL_TIM_Base_MspInit+0x8c>)
 80034f8:	f043 0301 	orr.w	r3, r3, #1
 80034fc:	6413      	str	r3, [r2, #64]	; 0x40
 80034fe:	4b1a      	ldr	r3, [pc, #104]	; (8003568 <HAL_TIM_Base_MspInit+0x8c>)
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	617b      	str	r3, [r7, #20]
 8003508:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800350a:	e026      	b.n	800355a <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM6)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a16      	ldr	r2, [pc, #88]	; (800356c <HAL_TIM_Base_MspInit+0x90>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d10e      	bne.n	8003534 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	613b      	str	r3, [r7, #16]
 800351a:	4b13      	ldr	r3, [pc, #76]	; (8003568 <HAL_TIM_Base_MspInit+0x8c>)
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	4a12      	ldr	r2, [pc, #72]	; (8003568 <HAL_TIM_Base_MspInit+0x8c>)
 8003520:	f043 0310 	orr.w	r3, r3, #16
 8003524:	6413      	str	r3, [r2, #64]	; 0x40
 8003526:	4b10      	ldr	r3, [pc, #64]	; (8003568 <HAL_TIM_Base_MspInit+0x8c>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	f003 0310 	and.w	r3, r3, #16
 800352e:	613b      	str	r3, [r7, #16]
 8003530:	693b      	ldr	r3, [r7, #16]
}
 8003532:	e012      	b.n	800355a <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM8)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a0d      	ldr	r2, [pc, #52]	; (8003570 <HAL_TIM_Base_MspInit+0x94>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d10d      	bne.n	800355a <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800353e:	2300      	movs	r3, #0
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	4b09      	ldr	r3, [pc, #36]	; (8003568 <HAL_TIM_Base_MspInit+0x8c>)
 8003544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003546:	4a08      	ldr	r2, [pc, #32]	; (8003568 <HAL_TIM_Base_MspInit+0x8c>)
 8003548:	f043 0302 	orr.w	r3, r3, #2
 800354c:	6453      	str	r3, [r2, #68]	; 0x44
 800354e:	4b06      	ldr	r3, [pc, #24]	; (8003568 <HAL_TIM_Base_MspInit+0x8c>)
 8003550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	68fb      	ldr	r3, [r7, #12]
}
 800355a:	bf00      	nop
 800355c:	371c      	adds	r7, #28
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	40023800 	.word	0x40023800
 800356c:	40001000 	.word	0x40001000
 8003570:	40010400 	.word	0x40010400

08003574 <startAdcDma>:
 */
/******************************************************************************
 * Function Definitions
 *******************************************************************************/
void startAdcDma(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
	osDelayUntil((uint32_t*) osKernelSysTick(), SD_INIT_TIME);
 8003578:	f010 fe96 	bl	80142a8 <osKernelSysTick>
 800357c:	4603      	mov	r3, r0
 800357e:	210a      	movs	r1, #10
 8003580:	4618      	mov	r0, r3
 8003582:	f011 f8a7 	bl	80146d4 <osDelayUntil>
	HAL_ADC_Start_DMA(TRAVEL_SENSOR_ADC_CHANNEL, (uint32_t*) adcDataWrite,
 8003586:	22c0      	movs	r2, #192	; 0xc0
 8003588:	4905      	ldr	r1, [pc, #20]	; (80035a0 <startAdcDma+0x2c>)
 800358a:	4806      	ldr	r0, [pc, #24]	; (80035a4 <startAdcDma+0x30>)
 800358c:	f000 fbea 	bl	8003d64 <HAL_ADC_Start_DMA>
	TRAVEL_SENSOR_BUFFER_SIZE);
#ifdef CHECK_SAMPLE_TIME
	HAL_TIM_Base_Start(TRAVEL_SENSOR_TIMER_SAMPLE_CHECK);
 8003590:	4805      	ldr	r0, [pc, #20]	; (80035a8 <startAdcDma+0x34>)
 8003592:	f006 fd13 	bl	8009fbc <HAL_TIM_Base_Start>
#endif
	HAL_TIM_Base_Start(TRAVEL_SENSOR_ADC_TRIGER_TIMER);
 8003596:	4805      	ldr	r0, [pc, #20]	; (80035ac <startAdcDma+0x38>)
 8003598:	f006 fd10 	bl	8009fbc <HAL_TIM_Base_Start>
}
 800359c:	bf00      	nop
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	200035f0 	.word	0x200035f0
 80035a4:	20000a24 	.word	0x20000a24
 80035a8:	20003554 	.word	0x20003554
 80035ac:	2000350c 	.word	0x2000350c

080035b0 <stopAdcDma>:
void stopAdcDma(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(TRAVEL_SENSOR_ADC_CHANNEL);
 80035b4:	4805      	ldr	r0, [pc, #20]	; (80035cc <stopAdcDma+0x1c>)
 80035b6:	f000 fce5 	bl	8003f84 <HAL_ADC_Stop_DMA>
#ifdef CHECK_SAMPLE_TIME
	HAL_TIM_Base_Stop(TRAVEL_SENSOR_TIMER_SAMPLE_CHECK);
 80035ba:	4805      	ldr	r0, [pc, #20]	; (80035d0 <stopAdcDma+0x20>)
 80035bc:	f006 fd66 	bl	800a08c <HAL_TIM_Base_Stop>
#endif
	HAL_TIM_Base_Stop(TRAVEL_SENSOR_ADC_TRIGER_TIMER);
 80035c0:	4804      	ldr	r0, [pc, #16]	; (80035d4 <stopAdcDma+0x24>)
 80035c2:	f006 fd63 	bl	800a08c <HAL_TIM_Base_Stop>
}
 80035c6:	bf00      	nop
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20000a24 	.word	0x20000a24
 80035d0:	20003554 	.word	0x20003554
 80035d4:	2000350c 	.word	0x2000350c

080035d8 <travelPressureSensorCalibration>:
int travelPressureSensorCalibration(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
	int status;

		memset(&calibrationValues, 0, sizeof(calibration_t));
 80035de:	220c      	movs	r2, #12
 80035e0:	2100      	movs	r1, #0
 80035e2:	4857      	ldr	r0, [pc, #348]	; (8003740 <travelPressureSensorCalibration+0x168>)
 80035e4:	f015 fbfc 	bl	8018de0 <memset>
		normalizeTravelData(inBufPtr);
 80035e8:	4b56      	ldr	r3, [pc, #344]	; (8003744 <travelPressureSensorCalibration+0x16c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f000 fa39 	bl	8003a64 <normalizeTravelData>
		for (int i = 0; i <= TRAVEL_SENSOR_BUFFER_SIZE / 2 - NUMBER_OF_SENSORS;
 80035f2:	2300      	movs	r3, #0
 80035f4:	607b      	str	r3, [r7, #4]
 80035f6:	e06d      	b.n	80036d4 <travelPressureSensorCalibration+0xfc>
				i += NUMBER_OF_SENSORS)
		{
			calibrationValues.rearTravelSensor += outBufPtr[i
 80035f8:	4b53      	ldr	r3, [pc, #332]	; (8003748 <travelPressureSensorCalibration+0x170>)
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3301      	adds	r3, #1
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	4413      	add	r3, r2
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	b219      	sxth	r1, r3
 8003608:	4b4d      	ldr	r3, [pc, #308]	; (8003740 <travelPressureSensorCalibration+0x168>)
 800360a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800360e:	b29a      	uxth	r2, r3
 8003610:	b28b      	uxth	r3, r1
 8003612:	4413      	add	r3, r2
 8003614:	b29b      	uxth	r3, r3
 8003616:	b21a      	sxth	r2, r3
 8003618:	4b49      	ldr	r3, [pc, #292]	; (8003740 <travelPressureSensorCalibration+0x168>)
 800361a:	805a      	strh	r2, [r3, #2]
					+ REAR_TRAVEL_BUFFER_POSITION];
			calibrationValues.frontTravelSensor += outBufPtr[i
 800361c:	4b4a      	ldr	r3, [pc, #296]	; (8003748 <travelPressureSensorCalibration+0x170>)
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	4413      	add	r3, r2
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	b219      	sxth	r1, r3
 800362a:	4b45      	ldr	r3, [pc, #276]	; (8003740 <travelPressureSensorCalibration+0x168>)
 800362c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003630:	b29a      	uxth	r2, r3
 8003632:	b28b      	uxth	r3, r1
 8003634:	4413      	add	r3, r2
 8003636:	b29b      	uxth	r3, r3
 8003638:	b21a      	sxth	r2, r3
 800363a:	4b41      	ldr	r3, [pc, #260]	; (8003740 <travelPressureSensorCalibration+0x168>)
 800363c:	801a      	strh	r2, [r3, #0]
					+ FRONT_TRAVEL_BUFFER_POSITION];
			calibrationValues.rearPressureSensor += outBufPtr[i
 800363e:	4b42      	ldr	r3, [pc, #264]	; (8003748 <travelPressureSensorCalibration+0x170>)
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	3303      	adds	r3, #3
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	4413      	add	r3, r2
 800364a:	881b      	ldrh	r3, [r3, #0]
 800364c:	b219      	sxth	r1, r3
 800364e:	4b3c      	ldr	r3, [pc, #240]	; (8003740 <travelPressureSensorCalibration+0x168>)
 8003650:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003654:	b29a      	uxth	r2, r3
 8003656:	b28b      	uxth	r3, r1
 8003658:	4413      	add	r3, r2
 800365a:	b29b      	uxth	r3, r3
 800365c:	b21a      	sxth	r2, r3
 800365e:	4b38      	ldr	r3, [pc, #224]	; (8003740 <travelPressureSensorCalibration+0x168>)
 8003660:	80da      	strh	r2, [r3, #6]
					+ REAR_PRESSURE_BUFFER_POSITION];
			calibrationValues.frontPressureSensor += outBufPtr[i
 8003662:	4b39      	ldr	r3, [pc, #228]	; (8003748 <travelPressureSensorCalibration+0x170>)
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3302      	adds	r3, #2
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	4413      	add	r3, r2
 800366e:	881b      	ldrh	r3, [r3, #0]
 8003670:	b219      	sxth	r1, r3
 8003672:	4b33      	ldr	r3, [pc, #204]	; (8003740 <travelPressureSensorCalibration+0x168>)
 8003674:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003678:	b29a      	uxth	r2, r3
 800367a:	b28b      	uxth	r3, r1
 800367c:	4413      	add	r3, r2
 800367e:	b29b      	uxth	r3, r3
 8003680:	b21a      	sxth	r2, r3
 8003682:	4b2f      	ldr	r3, [pc, #188]	; (8003740 <travelPressureSensorCalibration+0x168>)
 8003684:	809a      	strh	r2, [r3, #4]
					+ FRONT_PRESSURE_BUFFER_POSITION];
			calibrationValues.leftBrakeSensor += outBufPtr[i
 8003686:	4b30      	ldr	r3, [pc, #192]	; (8003748 <travelPressureSensorCalibration+0x170>)
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3304      	adds	r3, #4
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	4413      	add	r3, r2
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	b219      	sxth	r1, r3
 8003696:	4b2a      	ldr	r3, [pc, #168]	; (8003740 <travelPressureSensorCalibration+0x168>)
 8003698:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800369c:	b29a      	uxth	r2, r3
 800369e:	b28b      	uxth	r3, r1
 80036a0:	4413      	add	r3, r2
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	b21a      	sxth	r2, r3
 80036a6:	4b26      	ldr	r3, [pc, #152]	; (8003740 <travelPressureSensorCalibration+0x168>)
 80036a8:	811a      	strh	r2, [r3, #8]
					+ LEFT_BRAKE_POSITION];
			calibrationValues.rightBrakeSensor += outBufPtr[i
 80036aa:	4b27      	ldr	r3, [pc, #156]	; (8003748 <travelPressureSensorCalibration+0x170>)
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	3305      	adds	r3, #5
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	4413      	add	r3, r2
 80036b6:	881b      	ldrh	r3, [r3, #0]
 80036b8:	b219      	sxth	r1, r3
 80036ba:	4b21      	ldr	r3, [pc, #132]	; (8003740 <travelPressureSensorCalibration+0x168>)
 80036bc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	b28b      	uxth	r3, r1
 80036c4:	4413      	add	r3, r2
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	b21a      	sxth	r2, r3
 80036ca:	4b1d      	ldr	r3, [pc, #116]	; (8003740 <travelPressureSensorCalibration+0x168>)
 80036cc:	815a      	strh	r2, [r3, #10]
				i += NUMBER_OF_SENSORS)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3306      	adds	r3, #6
 80036d2:	607b      	str	r3, [r7, #4]
		for (int i = 0; i <= TRAVEL_SENSOR_BUFFER_SIZE / 2 - NUMBER_OF_SENSORS;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b5a      	cmp	r3, #90	; 0x5a
 80036d8:	d98e      	bls.n	80035f8 <travelPressureSensorCalibration+0x20>
					+ RIGHT_BRAKE_POSITION];

		}
		calibrationValues.rearTravelSensor = calibrationValues.rearTravelSensor
 80036da:	4b19      	ldr	r3, [pc, #100]	; (8003740 <travelPressureSensorCalibration+0x168>)
 80036dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
				/ (TRAVEL_SENSOR_BUFFER_SIZE / HALF_BUFF_SINGLE_SENSOR);
 80036e0:	091b      	lsrs	r3, r3, #4
		calibrationValues.rearTravelSensor = calibrationValues.rearTravelSensor
 80036e2:	b21a      	sxth	r2, r3
 80036e4:	4b16      	ldr	r3, [pc, #88]	; (8003740 <travelPressureSensorCalibration+0x168>)
 80036e6:	805a      	strh	r2, [r3, #2]
		calibrationValues.frontTravelSensor =
				calibrationValues.frontTravelSensor
 80036e8:	4b15      	ldr	r3, [pc, #84]	; (8003740 <travelPressureSensorCalibration+0x168>)
 80036ea:	f9b3 3000 	ldrsh.w	r3, [r3]
						/ (TRAVEL_SENSOR_BUFFER_SIZE / HALF_BUFF_SINGLE_SENSOR);
 80036ee:	091b      	lsrs	r3, r3, #4
		calibrationValues.frontTravelSensor =
 80036f0:	b21a      	sxth	r2, r3
 80036f2:	4b13      	ldr	r3, [pc, #76]	; (8003740 <travelPressureSensorCalibration+0x168>)
 80036f4:	801a      	strh	r2, [r3, #0]
		calibrationValues.rearPressureSensor =
				calibrationValues.rearPressureSensor
 80036f6:	4b12      	ldr	r3, [pc, #72]	; (8003740 <travelPressureSensorCalibration+0x168>)
 80036f8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
						/ (TRAVEL_SENSOR_BUFFER_SIZE / HALF_BUFF_SINGLE_SENSOR);
 80036fc:	091b      	lsrs	r3, r3, #4
		calibrationValues.rearPressureSensor =
 80036fe:	b21a      	sxth	r2, r3
 8003700:	4b0f      	ldr	r3, [pc, #60]	; (8003740 <travelPressureSensorCalibration+0x168>)
 8003702:	80da      	strh	r2, [r3, #6]
		calibrationValues.frontPressureSensor =
				calibrationValues.frontPressureSensor
 8003704:	4b0e      	ldr	r3, [pc, #56]	; (8003740 <travelPressureSensorCalibration+0x168>)
 8003706:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
						/ (TRAVEL_SENSOR_BUFFER_SIZE / HALF_BUFF_SINGLE_SENSOR);
 800370a:	091b      	lsrs	r3, r3, #4
		calibrationValues.frontPressureSensor =
 800370c:	b21a      	sxth	r2, r3
 800370e:	4b0c      	ldr	r3, [pc, #48]	; (8003740 <travelPressureSensorCalibration+0x168>)
 8003710:	809a      	strh	r2, [r3, #4]
		calibrationValues.leftBrakeSensor = calibrationValues.leftBrakeSensor
 8003712:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <travelPressureSensorCalibration+0x168>)
 8003714:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
				/ (TRAVEL_SENSOR_BUFFER_SIZE / HALF_BUFF_SINGLE_SENSOR);
 8003718:	091b      	lsrs	r3, r3, #4
		calibrationValues.leftBrakeSensor = calibrationValues.leftBrakeSensor
 800371a:	b21a      	sxth	r2, r3
 800371c:	4b08      	ldr	r3, [pc, #32]	; (8003740 <travelPressureSensorCalibration+0x168>)
 800371e:	811a      	strh	r2, [r3, #8]
		calibrationValues.rightBrakeSensor = calibrationValues.rightBrakeSensor
 8003720:	4b07      	ldr	r3, [pc, #28]	; (8003740 <travelPressureSensorCalibration+0x168>)
 8003722:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
				/ (TRAVEL_SENSOR_BUFFER_SIZE / HALF_BUFF_SINGLE_SENSOR);
 8003726:	091b      	lsrs	r3, r3, #4
		calibrationValues.rightBrakeSensor = calibrationValues.rightBrakeSensor
 8003728:	b21a      	sxth	r2, r3
 800372a:	4b05      	ldr	r3, [pc, #20]	; (8003740 <travelPressureSensorCalibration+0x168>)
 800372c:	815a      	strh	r2, [r3, #10]

		status = writeCalibrationData(&calibrationValues);
 800372e:	4804      	ldr	r0, [pc, #16]	; (8003740 <travelPressureSensorCalibration+0x168>)
 8003730:	f7fd ff1c 	bl	800156c <writeCalibrationData>
 8003734:	6038      	str	r0, [r7, #0]


	return (status);
 8003736:	683b      	ldr	r3, [r7, #0]
}
 8003738:	4618      	mov	r0, r3
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	200035e4 	.word	0x200035e4
 8003744:	200038f0 	.word	0x200038f0
 8003748:	200038f4 	.word	0x200038f4

0800374c <processData>:

void processData(char *sensorsData)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
	normalizeTravelData(inBufPtr);
 8003754:	4b07      	ldr	r3, [pc, #28]	; (8003774 <processData+0x28>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f000 f983 	bl	8003a64 <normalizeTravelData>
	sendDataSD(sensorsData, outBufPtr);
 800375e:	4b06      	ldr	r3, [pc, #24]	; (8003778 <processData+0x2c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4619      	mov	r1, r3
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7fd fe0b 	bl	8001380 <sendDataSD>
}
 800376a:	bf00      	nop
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	200038f0 	.word	0x200038f0
 8003778:	200038f4 	.word	0x200038f4

0800377c <processDataSag>:

void processDataSag(int16_t *sagFrontRear, int16_t *pressureFrontRear)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
	int numberOfElements = (TRAVEL_SENSOR_BUFFER_SIZE / HALF_BUFF_SINGLE_SENSOR);
 8003786:	2310      	movs	r3, #16
 8003788:	60bb      	str	r3, [r7, #8]
	int i;
	normalizeTravelData(inBufPtr);
 800378a:	4b56      	ldr	r3, [pc, #344]	; (80038e4 <processDataSag+0x168>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f000 f968 	bl	8003a64 <normalizeTravelData>
	for (i = 0; i <= TRAVEL_SENSOR_BUFFER_SIZE / 2 - NUMBER_OF_SENSORS; i +=
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	e04d      	b.n	8003836 <processDataSag+0xba>
	NUMBER_OF_SENSORS)
	{
		sagFrontRear[0] += outBufPtr[i + FRONT_TRAVEL_BUFFER_POSITION];
 800379a:	4b53      	ldr	r3, [pc, #332]	; (80038e8 <processDataSag+0x16c>)
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	4413      	add	r3, r2
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	b219      	sxth	r1, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	b28b      	uxth	r3, r1
 80037b2:	4413      	add	r3, r2
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	b21a      	sxth	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	801a      	strh	r2, [r3, #0]
		sagFrontRear[1] += outBufPtr[i + REAR_TRAVEL_BUFFER_POSITION];
 80037bc:	4b4a      	ldr	r3, [pc, #296]	; (80038e8 <processDataSag+0x16c>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	3301      	adds	r3, #1
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	4413      	add	r3, r2
 80037c8:	881b      	ldrh	r3, [r3, #0]
 80037ca:	b219      	sxth	r1, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3302      	adds	r3, #2
 80037d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	b28b      	uxth	r3, r1
 80037d8:	4413      	add	r3, r2
 80037da:	b29a      	uxth	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3302      	adds	r3, #2
 80037e0:	b212      	sxth	r2, r2
 80037e2:	801a      	strh	r2, [r3, #0]
		pressureFrontRear[0] += outBufPtr[i + FRONT_PRESSURE_BUFFER_POSITION];
 80037e4:	4b40      	ldr	r3, [pc, #256]	; (80038e8 <processDataSag+0x16c>)
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	3302      	adds	r3, #2
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	4413      	add	r3, r2
 80037f0:	881b      	ldrh	r3, [r3, #0]
 80037f2:	b219      	sxth	r1, r3
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	b28b      	uxth	r3, r1
 80037fe:	4413      	add	r3, r2
 8003800:	b29b      	uxth	r3, r3
 8003802:	b21a      	sxth	r2, r3
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	801a      	strh	r2, [r3, #0]
		pressureFrontRear[1] += outBufPtr[i + REAR_PRESSURE_BUFFER_POSITION];
 8003808:	4b37      	ldr	r3, [pc, #220]	; (80038e8 <processDataSag+0x16c>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	3303      	adds	r3, #3
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	4413      	add	r3, r2
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	b219      	sxth	r1, r3
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	3302      	adds	r3, #2
 800381c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003820:	b29a      	uxth	r2, r3
 8003822:	b28b      	uxth	r3, r1
 8003824:	4413      	add	r3, r2
 8003826:	b29a      	uxth	r2, r3
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	3302      	adds	r3, #2
 800382c:	b212      	sxth	r2, r2
 800382e:	801a      	strh	r2, [r3, #0]
	for (i = 0; i <= TRAVEL_SENSOR_BUFFER_SIZE / 2 - NUMBER_OF_SENSORS; i +=
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	3306      	adds	r3, #6
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2b5a      	cmp	r3, #90	; 0x5a
 800383a:	d9ae      	bls.n	800379a <processDataSag+0x1e>

	}
	sagFrontRear[0] = sagFrontRear[0] / numberOfElements;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003842:	461a      	mov	r2, r3
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	fb92 f3f3 	sdiv	r3, r2, r3
 800384a:	b21a      	sxth	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	801a      	strh	r2, [r3, #0]
	sagFrontRear[1] = sagFrontRear[1] / numberOfElements;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3302      	adds	r3, #2
 8003854:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003858:	461a      	mov	r2, r3
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	fb92 f2f3 	sdiv	r2, r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3302      	adds	r3, #2
 8003864:	b212      	sxth	r2, r2
 8003866:	801a      	strh	r2, [r3, #0]
	pressureFrontRear[0] = pressureFrontRear[0] / numberOfElements;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800386e:	461a      	mov	r2, r3
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	fb92 f3f3 	sdiv	r3, r2, r3
 8003876:	b21a      	sxth	r2, r3
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	801a      	strh	r2, [r3, #0]
	pressureFrontRear[1] = pressureFrontRear[1] / numberOfElements;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	3302      	adds	r3, #2
 8003880:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003884:	461a      	mov	r2, r3
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	fb92 f2f3 	sdiv	r2, r2, r3
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	3302      	adds	r3, #2
 8003890:	b212      	sxth	r2, r2
 8003892:	801a      	strh	r2, [r3, #0]

	sagFrontRear[0] = CONVERT_TO_PERCENT * sagFrontRear[0]/(FRONT_SUSPENSION_TRAVEL - calibrationValues.frontTravelSensor);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f9b3 3000 	ldrsh.w	r3, [r3]
 800389a:	461a      	mov	r2, r3
 800389c:	2364      	movs	r3, #100	; 0x64
 800389e:	fb03 f202 	mul.w	r2, r3, r2
 80038a2:	4b12      	ldr	r3, [pc, #72]	; (80038ec <processDataSag+0x170>)
 80038a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038a8:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 80038ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b0:	b21a      	sxth	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	801a      	strh	r2, [r3, #0]
	sagFrontRear[1] = (CONVERT_TO_PERCENT * sagFrontRear[1])/ (REAR_SUSPENSION_TRAVEL - calibrationValues.rearTravelSensor);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3302      	adds	r3, #2
 80038ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038be:	461a      	mov	r2, r3
 80038c0:	2364      	movs	r3, #100	; 0x64
 80038c2:	fb03 f202 	mul.w	r2, r3, r2
 80038c6:	4b09      	ldr	r3, [pc, #36]	; (80038ec <processDataSag+0x170>)
 80038c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80038cc:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 80038d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3302      	adds	r3, #2
 80038d8:	b212      	sxth	r2, r2
 80038da:	801a      	strh	r2, [r3, #0]
	UNUSED(0);
}
 80038dc:	bf00      	nop
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	200038f0 	.word	0x200038f0
 80038e8:	200038f4 	.word	0x200038f4
 80038ec:	200035e4 	.word	0x200035e4

080038f0 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
	inBufPtr = &adcDataWrite[0];
 80038f8:	4b07      	ldr	r3, [pc, #28]	; (8003918 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 80038fa:	4a08      	ldr	r2, [pc, #32]	; (800391c <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 80038fc:	601a      	str	r2, [r3, #0]
	outBufPtr = &adcDataRead[0];
 80038fe:	4b08      	ldr	r3, [pc, #32]	; (8003920 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8003900:	4a08      	ldr	r2, [pc, #32]	; (8003924 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8003902:	601a      	str	r2, [r3, #0]
	osSemaphoreRelease(travelSensorSemHandle);
 8003904:	4b08      	ldr	r3, [pc, #32]	; (8003928 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4618      	mov	r0, r3
 800390a:	f010 fdbd 	bl	8014488 <osSemaphoreRelease>
}
 800390e:	bf00      	nop
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	200038f0 	.word	0x200038f0
 800391c:	200035f0 	.word	0x200035f0
 8003920:	200038f4 	.word	0x200038f4
 8003924:	20003770 	.word	0x20003770
 8003928:	20002b6c 	.word	0x20002b6c

0800392c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
#ifdef CHECK_SAMPLE_TIME
	previousTime = time_end;
 8003934:	4b1b      	ldr	r3, [pc, #108]	; (80039a4 <HAL_ADC_ConvCpltCallback+0x78>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a1b      	ldr	r2, [pc, #108]	; (80039a8 <HAL_ADC_ConvCpltCallback+0x7c>)
 800393a:	6013      	str	r3, [r2, #0]
	time_end = __HAL_TIM_GET_COUNTER(&htim6);
 800393c:	4b1b      	ldr	r3, [pc, #108]	; (80039ac <HAL_ADC_ConvCpltCallback+0x80>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	461a      	mov	r2, r3
 8003944:	4b17      	ldr	r3, [pc, #92]	; (80039a4 <HAL_ADC_ConvCpltCallback+0x78>)
 8003946:	601a      	str	r2, [r3, #0]
	sample_time = NUMBER_OF_SENSORS
			* ((time_end - previousTime)
 8003948:	4b16      	ldr	r3, [pc, #88]	; (80039a4 <HAL_ADC_ConvCpltCallback+0x78>)
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	4b16      	ldr	r3, [pc, #88]	; (80039a8 <HAL_ADC_ConvCpltCallback+0x7c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	1ad3      	subs	r3, r2, r3
					/ (2 * ((float) (TRAVEL_SENSOR_BUFFER_SIZE))));
 8003952:	ee07 3a90 	vmov	s15, r3
 8003956:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800395a:	eddf 6a15 	vldr	s13, [pc, #84]	; 80039b0 <HAL_ADC_ConvCpltCallback+0x84>
 800395e:	eec7 7a26 	vdiv.f32	s15, s14, s13
			* ((time_end - previousTime)
 8003962:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8003966:	ee67 7a87 	vmul.f32	s15, s15, s14
	sample_time = NUMBER_OF_SENSORS
 800396a:	4b12      	ldr	r3, [pc, #72]	; (80039b4 <HAL_ADC_ConvCpltCallback+0x88>)
 800396c:	edc3 7a00 	vstr	s15, [r3]
	printf("semFullTime: %f\n", sample_time);
 8003970:	4b10      	ldr	r3, [pc, #64]	; (80039b4 <HAL_ADC_ConvCpltCallback+0x88>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f7fc fe17 	bl	80005a8 <__aeabi_f2d>
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	480e      	ldr	r0, [pc, #56]	; (80039b8 <HAL_ADC_ConvCpltCallback+0x8c>)
 8003980:	f015 f89a 	bl	8018ab8 <iprintf>
#endif

	inBufPtr = &adcDataWrite[TRAVEL_SENSOR_BUFFER_SIZE / 2];
 8003984:	4b0d      	ldr	r3, [pc, #52]	; (80039bc <HAL_ADC_ConvCpltCallback+0x90>)
 8003986:	4a0e      	ldr	r2, [pc, #56]	; (80039c0 <HAL_ADC_ConvCpltCallback+0x94>)
 8003988:	601a      	str	r2, [r3, #0]
	outBufPtr = &adcDataRead[TRAVEL_SENSOR_BUFFER_SIZE / 2];
 800398a:	4b0e      	ldr	r3, [pc, #56]	; (80039c4 <HAL_ADC_ConvCpltCallback+0x98>)
 800398c:	4a0e      	ldr	r2, [pc, #56]	; (80039c8 <HAL_ADC_ConvCpltCallback+0x9c>)
 800398e:	601a      	str	r2, [r3, #0]
	osSemaphoreRelease(travelSensorSemHandle);
 8003990:	4b0e      	ldr	r3, [pc, #56]	; (80039cc <HAL_ADC_ConvCpltCallback+0xa0>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f010 fd77 	bl	8014488 <osSemaphoreRelease>

}
 800399a:	bf00      	nop
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	200038f8 	.word	0x200038f8
 80039a8:	200038fc 	.word	0x200038fc
 80039ac:	20003554 	.word	0x20003554
 80039b0:	43c00000 	.word	0x43c00000
 80039b4:	20003900 	.word	0x20003900
 80039b8:	0801d16c 	.word	0x0801d16c
 80039bc:	200038f0 	.word	0x200038f0
 80039c0:	200036b0 	.word	0x200036b0
 80039c4:	200038f4 	.word	0x200038f4
 80039c8:	20003830 	.word	0x20003830
 80039cc:	20002b6c 	.word	0x20002b6c

080039d0 <convertAdcToTravel>:

static int16_t convertAdcToTravel(volatile int16_t *adcDataWrite,
		int16_t sensorTravel)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	460b      	mov	r3, r1
 80039da:	807b      	strh	r3, [r7, #2]

	return (*adcDataWrite * sensorTravel /  ADC_RESOLUTION);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	b21b      	sxth	r3, r3
 80039e2:	461a      	mov	r2, r3
 80039e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80039e8:	fb02 f303 	mul.w	r3, r2, r3
 80039ec:	0b1b      	lsrs	r3, r3, #12
 80039ee:	b21b      	sxth	r3, r3
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <convertAdcToPressure>:

static int16_t convertAdcToPressure(volatile int16_t *adcDataWrite,
		int16_t sensorMaxPressure)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	807b      	strh	r3, [r7, #2]

	return ((CONVERT_MPa_to_PSI)
			* (*adcDataWrite * sensorMaxPressure / (ADC_RESOLUTION)));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	881b      	ldrh	r3, [r3, #0]
 8003a0c:	b21b      	sxth	r3, r3
 8003a0e:	461a      	mov	r2, r3
 8003a10:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a14:	fb02 f303 	mul.w	r3, r2, r3
 8003a18:	0b1b      	lsrs	r3, r3, #12
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	00d2      	lsls	r2, r2, #3
 8003a20:	441a      	add	r2, r3
 8003a22:	0112      	lsls	r2, r2, #4
 8003a24:	4413      	add	r3, r2
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	b21b      	sxth	r3, r3
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <convertAdcToBrakeForce>:

static int16_t convertAdcToBrakeForce(volatile int16_t *adcDataWrite,
		int16_t sensorBrakeMaxForce)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b083      	sub	sp, #12
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
 8003a3e:	460b      	mov	r3, r1
 8003a40:	807b      	strh	r3, [r7, #2]
	return (*adcDataWrite * sensorBrakeMaxForce /  ADC_RESOLUTION);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	881b      	ldrh	r3, [r3, #0]
 8003a46:	b21b      	sxth	r3, r3
 8003a48:	461a      	mov	r2, r3
 8003a4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a4e:	fb02 f303 	mul.w	r3, r2, r3
 8003a52:	0b1b      	lsrs	r3, r3, #12
 8003a54:	b21b      	sxth	r3, r3
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
	...

08003a64 <normalizeTravelData>:
static void normalizeTravelData(volatile int16_t *inBufPtr)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
	for (int n = 0; n <= (TRAVEL_SENSOR_BUFFER_SIZE / 2) - NUMBER_OF_SENSORS;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	e097      	b.n	8003ba2 <normalizeTravelData+0x13e>
			n += NUMBER_OF_SENSORS)
	{
		outBufPtr[n + FRONT_TRAVEL_BUFFER_POSITION] = convertAdcToTravel(
				&inBufPtr[n + FRONT_TRAVEL_BUFFER_POSITION],
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	005b      	lsls	r3, r3, #1
		outBufPtr[n + FRONT_TRAVEL_BUFFER_POSITION] = convertAdcToTravel(
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff ffa6 	bl	80039d0 <convertAdcToTravel>
 8003a84:	4603      	mov	r3, r0
 8003a86:	b29a      	uxth	r2, r3
				FRONT_SENSOR_TRAVEL) - calibrationValues.frontTravelSensor;
 8003a88:	4b4a      	ldr	r3, [pc, #296]	; (8003bb4 <normalizeTravelData+0x150>)
 8003a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	b299      	uxth	r1, r3
		outBufPtr[n + FRONT_TRAVEL_BUFFER_POSITION] = convertAdcToTravel(
 8003a94:	4b48      	ldr	r3, [pc, #288]	; (8003bb8 <normalizeTravelData+0x154>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	4413      	add	r3, r2
				FRONT_SENSOR_TRAVEL) - calibrationValues.frontTravelSensor;
 8003a9e:	b20a      	sxth	r2, r1
		outBufPtr[n + FRONT_TRAVEL_BUFFER_POSITION] = convertAdcToTravel(
 8003aa0:	801a      	strh	r2, [r3, #0]
		outBufPtr[n + REAR_TRAVEL_BUFFER_POSITION] = convertAdcToTravel(
				&inBufPtr[n + REAR_TRAVEL_BUFFER_POSITION], REAR_SENSOR_TRAVEL)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	005b      	lsls	r3, r3, #1
		outBufPtr[n + REAR_TRAVEL_BUFFER_POSITION] = convertAdcToTravel(
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	4413      	add	r3, r2
 8003aac:	217d      	movs	r1, #125	; 0x7d
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff ff8e 	bl	80039d0 <convertAdcToTravel>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	b29a      	uxth	r2, r3
				- calibrationValues.rearTravelSensor;
 8003ab8:	4b3e      	ldr	r3, [pc, #248]	; (8003bb4 <normalizeTravelData+0x150>)
 8003aba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	b299      	uxth	r1, r3
		outBufPtr[n + REAR_TRAVEL_BUFFER_POSITION] = convertAdcToTravel(
 8003ac4:	4b3c      	ldr	r3, [pc, #240]	; (8003bb8 <normalizeTravelData+0x154>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	3301      	adds	r3, #1
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	4413      	add	r3, r2
				- calibrationValues.rearTravelSensor;
 8003ad0:	b20a      	sxth	r2, r1
		outBufPtr[n + REAR_TRAVEL_BUFFER_POSITION] = convertAdcToTravel(
 8003ad2:	801a      	strh	r2, [r3, #0]
		outBufPtr[n + FRONT_PRESSURE_BUFFER_POSITION] = convertAdcToPressure(
				&inBufPtr[n + FRONT_PRESSURE_BUFFER_POSITION],
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	3302      	adds	r3, #2
 8003ad8:	005b      	lsls	r3, r3, #1
		outBufPtr[n + FRONT_PRESSURE_BUFFER_POSITION] = convertAdcToPressure(
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	4413      	add	r3, r2
 8003ade:	2106      	movs	r1, #6
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff ff8b 	bl	80039fc <convertAdcToPressure>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	b29a      	uxth	r2, r3
				PRESSURE_SENSOR_MAX_VALUE)
				- calibrationValues.frontPressureSensor;
 8003aea:	4b32      	ldr	r3, [pc, #200]	; (8003bb4 <normalizeTravelData+0x150>)
 8003aec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	b299      	uxth	r1, r3
		outBufPtr[n + FRONT_PRESSURE_BUFFER_POSITION] = convertAdcToPressure(
 8003af6:	4b30      	ldr	r3, [pc, #192]	; (8003bb8 <normalizeTravelData+0x154>)
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	3302      	adds	r3, #2
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	4413      	add	r3, r2
				- calibrationValues.frontPressureSensor;
 8003b02:	b20a      	sxth	r2, r1
		outBufPtr[n + FRONT_PRESSURE_BUFFER_POSITION] = convertAdcToPressure(
 8003b04:	801a      	strh	r2, [r3, #0]
		outBufPtr[n + REAR_PRESSURE_BUFFER_POSITION] = convertAdcToPressure(
				&inBufPtr[n + REAR_PRESSURE_BUFFER_POSITION],
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	3303      	adds	r3, #3
 8003b0a:	005b      	lsls	r3, r3, #1
		outBufPtr[n + REAR_PRESSURE_BUFFER_POSITION] = convertAdcToPressure(
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	4413      	add	r3, r2
 8003b10:	2106      	movs	r1, #6
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7ff ff72 	bl	80039fc <convertAdcToPressure>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	b29a      	uxth	r2, r3
				PRESSURE_SENSOR_MAX_VALUE)
				- calibrationValues.rearPressureSensor;
 8003b1c:	4b25      	ldr	r3, [pc, #148]	; (8003bb4 <normalizeTravelData+0x150>)
 8003b1e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	b299      	uxth	r1, r3
		outBufPtr[n + REAR_PRESSURE_BUFFER_POSITION] = convertAdcToPressure(
 8003b28:	4b23      	ldr	r3, [pc, #140]	; (8003bb8 <normalizeTravelData+0x154>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	3303      	adds	r3, #3
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	4413      	add	r3, r2
				- calibrationValues.rearPressureSensor;
 8003b34:	b20a      	sxth	r2, r1
		outBufPtr[n + REAR_PRESSURE_BUFFER_POSITION] = convertAdcToPressure(
 8003b36:	801a      	strh	r2, [r3, #0]
		outBufPtr[n + LEFT_BRAKE_POSITION] = convertAdcToBrakeForce(
				&inBufPtr[n + LEFT_BRAKE_POSITION],
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	005b      	lsls	r3, r3, #1
		outBufPtr[n + LEFT_BRAKE_POSITION] = convertAdcToBrakeForce(
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	4413      	add	r3, r2
 8003b42:	2164      	movs	r1, #100	; 0x64
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff ff76 	bl	8003a36 <convertAdcToBrakeForce>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	b29a      	uxth	r2, r3
				BRAKE_SENSOR_MAX_FORCE) - calibrationValues.leftBrakeSensor;
 8003b4e:	4b19      	ldr	r3, [pc, #100]	; (8003bb4 <normalizeTravelData+0x150>)
 8003b50:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	b299      	uxth	r1, r3
		outBufPtr[n + LEFT_BRAKE_POSITION] = convertAdcToBrakeForce(
 8003b5a:	4b17      	ldr	r3, [pc, #92]	; (8003bb8 <normalizeTravelData+0x154>)
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	3304      	adds	r3, #4
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	4413      	add	r3, r2
				BRAKE_SENSOR_MAX_FORCE) - calibrationValues.leftBrakeSensor;
 8003b66:	b20a      	sxth	r2, r1
		outBufPtr[n + LEFT_BRAKE_POSITION] = convertAdcToBrakeForce(
 8003b68:	801a      	strh	r2, [r3, #0]
		outBufPtr[n + RIGHT_BRAKE_POSITION] = convertAdcToBrakeForce(
				&inBufPtr[n + RIGHT_BRAKE_POSITION],
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	3305      	adds	r3, #5
 8003b6e:	005b      	lsls	r3, r3, #1
		outBufPtr[n + RIGHT_BRAKE_POSITION] = convertAdcToBrakeForce(
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	4413      	add	r3, r2
 8003b74:	2164      	movs	r1, #100	; 0x64
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7ff ff5d 	bl	8003a36 <convertAdcToBrakeForce>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	b29a      	uxth	r2, r3
				BRAKE_SENSOR_MAX_FORCE) - calibrationValues.rightBrakeSensor;
 8003b80:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <normalizeTravelData+0x150>)
 8003b82:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	b299      	uxth	r1, r3
		outBufPtr[n + RIGHT_BRAKE_POSITION] = convertAdcToBrakeForce(
 8003b8c:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <normalizeTravelData+0x154>)
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	3305      	adds	r3, #5
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	4413      	add	r3, r2
				BRAKE_SENSOR_MAX_FORCE) - calibrationValues.rightBrakeSensor;
 8003b98:	b20a      	sxth	r2, r1
		outBufPtr[n + RIGHT_BRAKE_POSITION] = convertAdcToBrakeForce(
 8003b9a:	801a      	strh	r2, [r3, #0]
			n += NUMBER_OF_SENSORS)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	3306      	adds	r3, #6
 8003ba0:	60fb      	str	r3, [r7, #12]
	for (int n = 0; n <= (TRAVEL_SENSOR_BUFFER_SIZE / 2) - NUMBER_OF_SENSORS;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2b5a      	cmp	r3, #90	; 0x5a
 8003ba6:	f67f af64 	bls.w	8003a72 <normalizeTravelData+0xe>

	}
}
 8003baa:	bf00      	nop
 8003bac:	bf00      	nop
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	200035e4 	.word	0x200035e4
 8003bb8:	200038f4 	.word	0x200038f4

08003bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bf4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003bc0:	480d      	ldr	r0, [pc, #52]	; (8003bf8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003bc2:	490e      	ldr	r1, [pc, #56]	; (8003bfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003bc4:	4a0e      	ldr	r2, [pc, #56]	; (8003c00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bc8:	e002      	b.n	8003bd0 <LoopCopyDataInit>

08003bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bce:	3304      	adds	r3, #4

08003bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bd4:	d3f9      	bcc.n	8003bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bd6:	4a0b      	ldr	r2, [pc, #44]	; (8003c04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003bd8:	4c0b      	ldr	r4, [pc, #44]	; (8003c08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bdc:	e001      	b.n	8003be2 <LoopFillZerobss>

08003bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003be0:	3204      	adds	r2, #4

08003be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003be4:	d3fb      	bcc.n	8003bde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003be6:	f7ff fb21 	bl	800322c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bea:	f015 f9c7 	bl	8018f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bee:	f7fe fb6d 	bl	80022cc <main>
  bx  lr    
 8003bf2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003bf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bfc:	20000308 	.word	0x20000308
  ldr r2, =_sidata
 8003c00:	0801dec4 	.word	0x0801dec4
  ldr r2, =_sbss
 8003c04:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 8003c08:	2000848c 	.word	0x2000848c

08003c0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c0c:	e7fe      	b.n	8003c0c <ADC_IRQHandler>
	...

08003c10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c14:	4b0e      	ldr	r3, [pc, #56]	; (8003c50 <HAL_Init+0x40>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a0d      	ldr	r2, [pc, #52]	; (8003c50 <HAL_Init+0x40>)
 8003c1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c20:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <HAL_Init+0x40>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a0a      	ldr	r2, [pc, #40]	; (8003c50 <HAL_Init+0x40>)
 8003c26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c2c:	4b08      	ldr	r3, [pc, #32]	; (8003c50 <HAL_Init+0x40>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a07      	ldr	r2, [pc, #28]	; (8003c50 <HAL_Init+0x40>)
 8003c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c38:	2003      	movs	r0, #3
 8003c3a:	f000 fd64 	bl	8004706 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c3e:	200f      	movs	r0, #15
 8003c40:	f7ff f92a 	bl	8002e98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c44:	f7ff f8fc 	bl	8002e40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40023c00 	.word	0x40023c00

08003c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c58:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <HAL_IncTick+0x20>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	4b06      	ldr	r3, [pc, #24]	; (8003c78 <HAL_IncTick+0x24>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4413      	add	r3, r2
 8003c64:	4a04      	ldr	r2, [pc, #16]	; (8003c78 <HAL_IncTick+0x24>)
 8003c66:	6013      	str	r3, [r2, #0]
}
 8003c68:	bf00      	nop
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	20000010 	.word	0x20000010
 8003c78:	20003904 	.word	0x20003904

08003c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8003c80:	4b03      	ldr	r3, [pc, #12]	; (8003c90 <HAL_GetTick+0x14>)
 8003c82:	681b      	ldr	r3, [r3, #0]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	20003904 	.word	0x20003904

08003c94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c9c:	f7ff ffee 	bl	8003c7c <HAL_GetTick>
 8003ca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cac:	d005      	beq.n	8003cba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cae:	4b0a      	ldr	r3, [pc, #40]	; (8003cd8 <HAL_Delay+0x44>)
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003cba:	bf00      	nop
 8003cbc:	f7ff ffde 	bl	8003c7c <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d8f7      	bhi.n	8003cbc <HAL_Delay+0x28>
  {
  }
}
 8003ccc:	bf00      	nop
 8003cce:	bf00      	nop
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	20000010 	.word	0x20000010

08003cdc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e033      	b.n	8003d5a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d109      	bne.n	8003d0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7fd fd72 	bl	80017e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	f003 0310 	and.w	r3, r3, #16
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d118      	bne.n	8003d4c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d22:	f023 0302 	bic.w	r3, r3, #2
 8003d26:	f043 0202 	orr.w	r2, r3, #2
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 fabe 	bl	80042b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	f023 0303 	bic.w	r3, r3, #3
 8003d42:	f043 0201 	orr.w	r2, r3, #1
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	641a      	str	r2, [r3, #64]	; 0x40
 8003d4a:	e001      	b.n	8003d50 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
	...

08003d64 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d101      	bne.n	8003d82 <HAL_ADC_Start_DMA+0x1e>
 8003d7e:	2302      	movs	r3, #2
 8003d80:	e0e9      	b.n	8003f56 <HAL_ADC_Start_DMA+0x1f2>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d018      	beq.n	8003dca <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689a      	ldr	r2, [r3, #8]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0201 	orr.w	r2, r2, #1
 8003da6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003da8:	4b6d      	ldr	r3, [pc, #436]	; (8003f60 <HAL_ADC_Start_DMA+0x1fc>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a6d      	ldr	r2, [pc, #436]	; (8003f64 <HAL_ADC_Start_DMA+0x200>)
 8003dae:	fba2 2303 	umull	r2, r3, r2, r3
 8003db2:	0c9a      	lsrs	r2, r3, #18
 8003db4:	4613      	mov	r3, r2
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	4413      	add	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003dbc:	e002      	b.n	8003dc4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f9      	bne.n	8003dbe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dd8:	d107      	bne.n	8003dea <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003de8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	f040 80a1 	bne.w	8003f3c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e02:	f023 0301 	bic.w	r3, r3, #1
 8003e06:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d007      	beq.n	8003e2c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e20:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e24:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e38:	d106      	bne.n	8003e48 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3e:	f023 0206 	bic.w	r2, r3, #6
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	645a      	str	r2, [r3, #68]	; 0x44
 8003e46:	e002      	b.n	8003e4e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e56:	4b44      	ldr	r3, [pc, #272]	; (8003f68 <HAL_ADC_Start_DMA+0x204>)
 8003e58:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5e:	4a43      	ldr	r2, [pc, #268]	; (8003f6c <HAL_ADC_Start_DMA+0x208>)
 8003e60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e66:	4a42      	ldr	r2, [pc, #264]	; (8003f70 <HAL_ADC_Start_DMA+0x20c>)
 8003e68:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6e:	4a41      	ldr	r2, [pc, #260]	; (8003f74 <HAL_ADC_Start_DMA+0x210>)
 8003e70:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003e7a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003e8a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689a      	ldr	r2, [r3, #8]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e9a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	334c      	adds	r3, #76	; 0x4c
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f000 fd0e 	bl	80048cc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f003 031f 	and.w	r3, r3, #31
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d12a      	bne.n	8003f12 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a2d      	ldr	r2, [pc, #180]	; (8003f78 <HAL_ADC_Start_DMA+0x214>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d015      	beq.n	8003ef2 <HAL_ADC_Start_DMA+0x18e>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a2c      	ldr	r2, [pc, #176]	; (8003f7c <HAL_ADC_Start_DMA+0x218>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d105      	bne.n	8003edc <HAL_ADC_Start_DMA+0x178>
 8003ed0:	4b25      	ldr	r3, [pc, #148]	; (8003f68 <HAL_ADC_Start_DMA+0x204>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f003 031f 	and.w	r3, r3, #31
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00a      	beq.n	8003ef2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a27      	ldr	r2, [pc, #156]	; (8003f80 <HAL_ADC_Start_DMA+0x21c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d136      	bne.n	8003f54 <HAL_ADC_Start_DMA+0x1f0>
 8003ee6:	4b20      	ldr	r3, [pc, #128]	; (8003f68 <HAL_ADC_Start_DMA+0x204>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f003 0310 	and.w	r3, r3, #16
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d130      	bne.n	8003f54 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d129      	bne.n	8003f54 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689a      	ldr	r2, [r3, #8]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f0e:	609a      	str	r2, [r3, #8]
 8003f10:	e020      	b.n	8003f54 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a18      	ldr	r2, [pc, #96]	; (8003f78 <HAL_ADC_Start_DMA+0x214>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d11b      	bne.n	8003f54 <HAL_ADC_Start_DMA+0x1f0>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d114      	bne.n	8003f54 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f38:	609a      	str	r2, [r3, #8]
 8003f3a:	e00b      	b.n	8003f54 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f40:	f043 0210 	orr.w	r2, r3, #16
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4c:	f043 0201 	orr.w	r2, r3, #1
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3718      	adds	r7, #24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	20000008 	.word	0x20000008
 8003f64:	431bde83 	.word	0x431bde83
 8003f68:	40012300 	.word	0x40012300
 8003f6c:	080044a9 	.word	0x080044a9
 8003f70:	08004563 	.word	0x08004563
 8003f74:	0800457f 	.word	0x0800457f
 8003f78:	40012000 	.word	0x40012000
 8003f7c:	40012100 	.word	0x40012100
 8003f80:	40012200 	.word	0x40012200

08003f84 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d101      	bne.n	8003f9e <HAL_ADC_Stop_DMA+0x1a>
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	e048      	b.n	8004030 <HAL_ADC_Stop_DMA+0xac>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0201 	bic.w	r2, r2, #1
 8003fb4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d130      	bne.n	8004026 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fd2:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d10f      	bne.n	8004002 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 fcc8 	bl	800497c <HAL_DMA_Abort>
 8003fec:	4603      	mov	r3, r0
 8003fee:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d005      	beq.n	8004002 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004010:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800401a:	f023 0301 	bic.w	r3, r3, #1
 800401e:	f043 0201 	orr.w	r2, r3, #1
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800402e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004056:	2300      	movs	r3, #0
 8004058:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <HAL_ADC_ConfigChannel+0x1c>
 8004064:	2302      	movs	r3, #2
 8004066:	e113      	b.n	8004290 <HAL_ADC_ConfigChannel+0x244>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b09      	cmp	r3, #9
 8004076:	d925      	bls.n	80040c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68d9      	ldr	r1, [r3, #12]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	b29b      	uxth	r3, r3
 8004084:	461a      	mov	r2, r3
 8004086:	4613      	mov	r3, r2
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	4413      	add	r3, r2
 800408c:	3b1e      	subs	r3, #30
 800408e:	2207      	movs	r2, #7
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	43da      	mvns	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	400a      	ands	r2, r1
 800409c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68d9      	ldr	r1, [r3, #12]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	4618      	mov	r0, r3
 80040b0:	4603      	mov	r3, r0
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	4403      	add	r3, r0
 80040b6:	3b1e      	subs	r3, #30
 80040b8:	409a      	lsls	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	60da      	str	r2, [r3, #12]
 80040c2:	e022      	b.n	800410a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6919      	ldr	r1, [r3, #16]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	461a      	mov	r2, r3
 80040d2:	4613      	mov	r3, r2
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	4413      	add	r3, r2
 80040d8:	2207      	movs	r2, #7
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	43da      	mvns	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	400a      	ands	r2, r1
 80040e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6919      	ldr	r1, [r3, #16]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	4618      	mov	r0, r3
 80040fa:	4603      	mov	r3, r0
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	4403      	add	r3, r0
 8004100:	409a      	lsls	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b06      	cmp	r3, #6
 8004110:	d824      	bhi.n	800415c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	4613      	mov	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	3b05      	subs	r3, #5
 8004124:	221f      	movs	r2, #31
 8004126:	fa02 f303 	lsl.w	r3, r2, r3
 800412a:	43da      	mvns	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	400a      	ands	r2, r1
 8004132:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	b29b      	uxth	r3, r3
 8004140:	4618      	mov	r0, r3
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	4613      	mov	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	4413      	add	r3, r2
 800414c:	3b05      	subs	r3, #5
 800414e:	fa00 f203 	lsl.w	r2, r0, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	635a      	str	r2, [r3, #52]	; 0x34
 800415a:	e04c      	b.n	80041f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2b0c      	cmp	r3, #12
 8004162:	d824      	bhi.n	80041ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	4613      	mov	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	3b23      	subs	r3, #35	; 0x23
 8004176:	221f      	movs	r2, #31
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	43da      	mvns	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	400a      	ands	r2, r1
 8004184:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	b29b      	uxth	r3, r3
 8004192:	4618      	mov	r0, r3
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	4613      	mov	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	3b23      	subs	r3, #35	; 0x23
 80041a0:	fa00 f203 	lsl.w	r2, r0, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	631a      	str	r2, [r3, #48]	; 0x30
 80041ac:	e023      	b.n	80041f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	4613      	mov	r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	4413      	add	r3, r2
 80041be:	3b41      	subs	r3, #65	; 0x41
 80041c0:	221f      	movs	r2, #31
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	43da      	mvns	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	400a      	ands	r2, r1
 80041ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	b29b      	uxth	r3, r3
 80041dc:	4618      	mov	r0, r3
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	4613      	mov	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4413      	add	r3, r2
 80041e8:	3b41      	subs	r3, #65	; 0x41
 80041ea:	fa00 f203 	lsl.w	r2, r0, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041f6:	4b29      	ldr	r3, [pc, #164]	; (800429c <HAL_ADC_ConfigChannel+0x250>)
 80041f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a28      	ldr	r2, [pc, #160]	; (80042a0 <HAL_ADC_ConfigChannel+0x254>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d10f      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x1d8>
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b12      	cmp	r3, #18
 800420a:	d10b      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a1d      	ldr	r2, [pc, #116]	; (80042a0 <HAL_ADC_ConfigChannel+0x254>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d12b      	bne.n	8004286 <HAL_ADC_ConfigChannel+0x23a>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a1c      	ldr	r2, [pc, #112]	; (80042a4 <HAL_ADC_ConfigChannel+0x258>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d003      	beq.n	8004240 <HAL_ADC_ConfigChannel+0x1f4>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b11      	cmp	r3, #17
 800423e:	d122      	bne.n	8004286 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a11      	ldr	r2, [pc, #68]	; (80042a4 <HAL_ADC_ConfigChannel+0x258>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d111      	bne.n	8004286 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004262:	4b11      	ldr	r3, [pc, #68]	; (80042a8 <HAL_ADC_ConfigChannel+0x25c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a11      	ldr	r2, [pc, #68]	; (80042ac <HAL_ADC_ConfigChannel+0x260>)
 8004268:	fba2 2303 	umull	r2, r3, r2, r3
 800426c:	0c9a      	lsrs	r2, r3, #18
 800426e:	4613      	mov	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004278:	e002      	b.n	8004280 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	3b01      	subs	r3, #1
 800427e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1f9      	bne.n	800427a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	40012300 	.word	0x40012300
 80042a0:	40012000 	.word	0x40012000
 80042a4:	10000012 	.word	0x10000012
 80042a8:	20000008 	.word	0x20000008
 80042ac:	431bde83 	.word	0x431bde83

080042b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042b8:	4b79      	ldr	r3, [pc, #484]	; (80044a0 <ADC_Init+0x1f0>)
 80042ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	431a      	orrs	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6859      	ldr	r1, [r3, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	021a      	lsls	r2, r3, #8
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004308:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6859      	ldr	r1, [r3, #4]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689a      	ldr	r2, [r3, #8]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800432a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6899      	ldr	r1, [r3, #8]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68da      	ldr	r2, [r3, #12]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004342:	4a58      	ldr	r2, [pc, #352]	; (80044a4 <ADC_Init+0x1f4>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d022      	beq.n	800438e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004356:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6899      	ldr	r1, [r3, #8]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004378:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6899      	ldr	r1, [r3, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	609a      	str	r2, [r3, #8]
 800438c:	e00f      	b.n	80043ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800439c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0202 	bic.w	r2, r2, #2
 80043bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6899      	ldr	r1, [r3, #8]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	7e1b      	ldrb	r3, [r3, #24]
 80043c8:	005a      	lsls	r2, r3, #1
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d01b      	beq.n	8004414 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80043fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6859      	ldr	r1, [r3, #4]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004406:	3b01      	subs	r3, #1
 8004408:	035a      	lsls	r2, r3, #13
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	430a      	orrs	r2, r1
 8004410:	605a      	str	r2, [r3, #4]
 8004412:	e007      	b.n	8004424 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004422:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004432:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	3b01      	subs	r3, #1
 8004440:	051a      	lsls	r2, r3, #20
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004458:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6899      	ldr	r1, [r3, #8]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004466:	025a      	lsls	r2, r3, #9
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800447e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6899      	ldr	r1, [r3, #8]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	029a      	lsls	r2, r3, #10
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	609a      	str	r2, [r3, #8]
}
 8004494:	bf00      	nop
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	40012300 	.word	0x40012300
 80044a4:	0f000001 	.word	0x0f000001

080044a8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d13c      	bne.n	800453c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d12b      	bne.n	8004534 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d127      	bne.n	8004534 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d006      	beq.n	8004500 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d119      	bne.n	8004534 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0220 	bic.w	r2, r2, #32
 800450e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004514:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004520:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d105      	bne.n	8004534 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452c:	f043 0201 	orr.w	r2, r3, #1
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f7ff f9f9 	bl	800392c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800453a:	e00e      	b.n	800455a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004540:	f003 0310 	and.w	r3, r3, #16
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f7ff fd75 	bl	8004038 <HAL_ADC_ErrorCallback>
}
 800454e:	e004      	b.n	800455a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	4798      	blx	r3
}
 800455a:	bf00      	nop
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b084      	sub	sp, #16
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f7ff f9bd 	bl	80038f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004576:	bf00      	nop
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b084      	sub	sp, #16
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2240      	movs	r2, #64	; 0x40
 8004590:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004596:	f043 0204 	orr.w	r2, r3, #4
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f7ff fd4a 	bl	8004038 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045a4:	bf00      	nop
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <__NVIC_SetPriorityGrouping>:
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f003 0307 	and.w	r3, r3, #7
 80045ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045bc:	4b0c      	ldr	r3, [pc, #48]	; (80045f0 <__NVIC_SetPriorityGrouping+0x44>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045c8:	4013      	ands	r3, r2
 80045ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045de:	4a04      	ldr	r2, [pc, #16]	; (80045f0 <__NVIC_SetPriorityGrouping+0x44>)
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	60d3      	str	r3, [r2, #12]
}
 80045e4:	bf00      	nop
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	e000ed00 	.word	0xe000ed00

080045f4 <__NVIC_GetPriorityGrouping>:
{
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045f8:	4b04      	ldr	r3, [pc, #16]	; (800460c <__NVIC_GetPriorityGrouping+0x18>)
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	0a1b      	lsrs	r3, r3, #8
 80045fe:	f003 0307 	and.w	r3, r3, #7
}
 8004602:	4618      	mov	r0, r3
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	e000ed00 	.word	0xe000ed00

08004610 <__NVIC_EnableIRQ>:
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	4603      	mov	r3, r0
 8004618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800461a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800461e:	2b00      	cmp	r3, #0
 8004620:	db0b      	blt.n	800463a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004622:	79fb      	ldrb	r3, [r7, #7]
 8004624:	f003 021f 	and.w	r2, r3, #31
 8004628:	4907      	ldr	r1, [pc, #28]	; (8004648 <__NVIC_EnableIRQ+0x38>)
 800462a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800462e:	095b      	lsrs	r3, r3, #5
 8004630:	2001      	movs	r0, #1
 8004632:	fa00 f202 	lsl.w	r2, r0, r2
 8004636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	e000e100 	.word	0xe000e100

0800464c <__NVIC_SetPriority>:
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	4603      	mov	r3, r0
 8004654:	6039      	str	r1, [r7, #0]
 8004656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800465c:	2b00      	cmp	r3, #0
 800465e:	db0a      	blt.n	8004676 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	b2da      	uxtb	r2, r3
 8004664:	490c      	ldr	r1, [pc, #48]	; (8004698 <__NVIC_SetPriority+0x4c>)
 8004666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800466a:	0112      	lsls	r2, r2, #4
 800466c:	b2d2      	uxtb	r2, r2
 800466e:	440b      	add	r3, r1
 8004670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004674:	e00a      	b.n	800468c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	b2da      	uxtb	r2, r3
 800467a:	4908      	ldr	r1, [pc, #32]	; (800469c <__NVIC_SetPriority+0x50>)
 800467c:	79fb      	ldrb	r3, [r7, #7]
 800467e:	f003 030f 	and.w	r3, r3, #15
 8004682:	3b04      	subs	r3, #4
 8004684:	0112      	lsls	r2, r2, #4
 8004686:	b2d2      	uxtb	r2, r2
 8004688:	440b      	add	r3, r1
 800468a:	761a      	strb	r2, [r3, #24]
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	e000e100 	.word	0xe000e100
 800469c:	e000ed00 	.word	0xe000ed00

080046a0 <NVIC_EncodePriority>:
{
 80046a0:	b480      	push	{r7}
 80046a2:	b089      	sub	sp, #36	; 0x24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f003 0307 	and.w	r3, r3, #7
 80046b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	f1c3 0307 	rsb	r3, r3, #7
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	bf28      	it	cs
 80046be:	2304      	movcs	r3, #4
 80046c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	3304      	adds	r3, #4
 80046c6:	2b06      	cmp	r3, #6
 80046c8:	d902      	bls.n	80046d0 <NVIC_EncodePriority+0x30>
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	3b03      	subs	r3, #3
 80046ce:	e000      	b.n	80046d2 <NVIC_EncodePriority+0x32>
 80046d0:	2300      	movs	r3, #0
 80046d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046d4:	f04f 32ff 	mov.w	r2, #4294967295
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	fa02 f303 	lsl.w	r3, r2, r3
 80046de:	43da      	mvns	r2, r3
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	401a      	ands	r2, r3
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046e8:	f04f 31ff 	mov.w	r1, #4294967295
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	fa01 f303 	lsl.w	r3, r1, r3
 80046f2:	43d9      	mvns	r1, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046f8:	4313      	orrs	r3, r2
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3724      	adds	r7, #36	; 0x24
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b082      	sub	sp, #8
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7ff ff4c 	bl	80045ac <__NVIC_SetPriorityGrouping>
}
 8004714:	bf00      	nop
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	4603      	mov	r3, r0
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
 8004728:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800472a:	2300      	movs	r3, #0
 800472c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800472e:	f7ff ff61 	bl	80045f4 <__NVIC_GetPriorityGrouping>
 8004732:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	68b9      	ldr	r1, [r7, #8]
 8004738:	6978      	ldr	r0, [r7, #20]
 800473a:	f7ff ffb1 	bl	80046a0 <NVIC_EncodePriority>
 800473e:	4602      	mov	r2, r0
 8004740:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004744:	4611      	mov	r1, r2
 8004746:	4618      	mov	r0, r3
 8004748:	f7ff ff80 	bl	800464c <__NVIC_SetPriority>
}
 800474c:	bf00      	nop
 800474e:	3718      	adds	r7, #24
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	4603      	mov	r3, r0
 800475c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800475e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004762:	4618      	mov	r0, r3
 8004764:	f7ff ff54 	bl	8004610 <__NVIC_EnableIRQ>
}
 8004768:	bf00      	nop
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004778:	2300      	movs	r3, #0
 800477a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800477c:	f7ff fa7e 	bl	8003c7c <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e099      	b.n	80048c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 0201 	bic.w	r2, r2, #1
 80047aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047ac:	e00f      	b.n	80047ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047ae:	f7ff fa65 	bl	8003c7c <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b05      	cmp	r3, #5
 80047ba:	d908      	bls.n	80047ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2220      	movs	r2, #32
 80047c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2203      	movs	r2, #3
 80047c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e078      	b.n	80048c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1e8      	bne.n	80047ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	4b38      	ldr	r3, [pc, #224]	; (80048c8 <HAL_DMA_Init+0x158>)
 80047e8:	4013      	ands	r3, r2
 80047ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004806:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004812:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	4313      	orrs	r3, r2
 800481e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	2b04      	cmp	r3, #4
 8004826:	d107      	bne.n	8004838 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004830:	4313      	orrs	r3, r2
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	4313      	orrs	r3, r2
 8004836:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f023 0307 	bic.w	r3, r3, #7
 800484e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	4313      	orrs	r3, r2
 8004858:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	2b04      	cmp	r3, #4
 8004860:	d117      	bne.n	8004892 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	4313      	orrs	r3, r2
 800486a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00e      	beq.n	8004892 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 fb0d 	bl	8004e94 <DMA_CheckFifoParam>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d008      	beq.n	8004892 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2240      	movs	r2, #64	; 0x40
 8004884:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800488e:	2301      	movs	r3, #1
 8004890:	e016      	b.n	80048c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 fac4 	bl	8004e28 <DMA_CalcBaseAndBitshift>
 80048a0:	4603      	mov	r3, r0
 80048a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a8:	223f      	movs	r2, #63	; 0x3f
 80048aa:	409a      	lsls	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3718      	adds	r7, #24
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	f010803f 	.word	0xf010803f

080048cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
 80048d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048da:	2300      	movs	r3, #0
 80048dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d101      	bne.n	80048f2 <HAL_DMA_Start_IT+0x26>
 80048ee:	2302      	movs	r3, #2
 80048f0:	e040      	b.n	8004974 <HAL_DMA_Start_IT+0xa8>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b01      	cmp	r3, #1
 8004904:	d12f      	bne.n	8004966 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2202      	movs	r2, #2
 800490a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	68b9      	ldr	r1, [r7, #8]
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f000 fa56 	bl	8004dcc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004924:	223f      	movs	r2, #63	; 0x3f
 8004926:	409a      	lsls	r2, r3
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f042 0216 	orr.w	r2, r2, #22
 800493a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004940:	2b00      	cmp	r3, #0
 8004942:	d007      	beq.n	8004954 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f042 0208 	orr.w	r2, r2, #8
 8004952:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f042 0201 	orr.w	r2, r2, #1
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	e005      	b.n	8004972 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800496e:	2302      	movs	r3, #2
 8004970:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004972:	7dfb      	ldrb	r3, [r7, #23]
}
 8004974:	4618      	mov	r0, r3
 8004976:	3718      	adds	r7, #24
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004988:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800498a:	f7ff f977 	bl	8003c7c <HAL_GetTick>
 800498e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b02      	cmp	r3, #2
 800499a:	d008      	beq.n	80049ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2280      	movs	r2, #128	; 0x80
 80049a0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e052      	b.n	8004a54 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 0216 	bic.w	r2, r2, #22
 80049bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	695a      	ldr	r2, [r3, #20]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d103      	bne.n	80049de <HAL_DMA_Abort+0x62>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d007      	beq.n	80049ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 0208 	bic.w	r2, r2, #8
 80049ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 0201 	bic.w	r2, r2, #1
 80049fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049fe:	e013      	b.n	8004a28 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a00:	f7ff f93c 	bl	8003c7c <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b05      	cmp	r3, #5
 8004a0c:	d90c      	bls.n	8004a28 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2220      	movs	r2, #32
 8004a12:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2203      	movs	r2, #3
 8004a18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e015      	b.n	8004a54 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1e4      	bne.n	8004a00 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a3a:	223f      	movs	r2, #63	; 0x3f
 8004a3c:	409a      	lsls	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d004      	beq.n	8004a7a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2280      	movs	r2, #128	; 0x80
 8004a74:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e00c      	b.n	8004a94 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2205      	movs	r2, #5
 8004a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 0201 	bic.w	r2, r2, #1
 8004a90:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004aac:	4b8e      	ldr	r3, [pc, #568]	; (8004ce8 <HAL_DMA_IRQHandler+0x248>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a8e      	ldr	r2, [pc, #568]	; (8004cec <HAL_DMA_IRQHandler+0x24c>)
 8004ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab6:	0a9b      	lsrs	r3, r3, #10
 8004ab8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004abe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aca:	2208      	movs	r2, #8
 8004acc:	409a      	lsls	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d01a      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d013      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 0204 	bic.w	r2, r2, #4
 8004af2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af8:	2208      	movs	r2, #8
 8004afa:	409a      	lsls	r2, r3
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b04:	f043 0201 	orr.w	r2, r3, #1
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b10:	2201      	movs	r2, #1
 8004b12:	409a      	lsls	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4013      	ands	r3, r2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d012      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00b      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b2e:	2201      	movs	r2, #1
 8004b30:	409a      	lsls	r2, r3
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b3a:	f043 0202 	orr.w	r2, r3, #2
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b46:	2204      	movs	r2, #4
 8004b48:	409a      	lsls	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d012      	beq.n	8004b78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00b      	beq.n	8004b78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b64:	2204      	movs	r2, #4
 8004b66:	409a      	lsls	r2, r3
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b70:	f043 0204 	orr.w	r2, r3, #4
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b7c:	2210      	movs	r2, #16
 8004b7e:	409a      	lsls	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4013      	ands	r3, r2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d043      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0308 	and.w	r3, r3, #8
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d03c      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b9a:	2210      	movs	r2, #16
 8004b9c:	409a      	lsls	r2, r3
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d018      	beq.n	8004be2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d108      	bne.n	8004bd0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d024      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	4798      	blx	r3
 8004bce:	e01f      	b.n	8004c10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d01b      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	4798      	blx	r3
 8004be0:	e016      	b.n	8004c10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d107      	bne.n	8004c00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 0208 	bic.w	r2, r2, #8
 8004bfe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d003      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c14:	2220      	movs	r2, #32
 8004c16:	409a      	lsls	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 808f 	beq.w	8004d40 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0310 	and.w	r3, r3, #16
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f000 8087 	beq.w	8004d40 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c36:	2220      	movs	r2, #32
 8004c38:	409a      	lsls	r2, r3
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b05      	cmp	r3, #5
 8004c48:	d136      	bne.n	8004cb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 0216 	bic.w	r2, r2, #22
 8004c58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	695a      	ldr	r2, [r3, #20]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d103      	bne.n	8004c7a <HAL_DMA_IRQHandler+0x1da>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d007      	beq.n	8004c8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 0208 	bic.w	r2, r2, #8
 8004c88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c8e:	223f      	movs	r2, #63	; 0x3f
 8004c90:	409a      	lsls	r2, r3
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d07e      	beq.n	8004dac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	4798      	blx	r3
        }
        return;
 8004cb6:	e079      	b.n	8004dac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d01d      	beq.n	8004d02 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10d      	bne.n	8004cf0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d031      	beq.n	8004d40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	4798      	blx	r3
 8004ce4:	e02c      	b.n	8004d40 <HAL_DMA_IRQHandler+0x2a0>
 8004ce6:	bf00      	nop
 8004ce8:	20000008 	.word	0x20000008
 8004cec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d023      	beq.n	8004d40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	4798      	blx	r3
 8004d00:	e01e      	b.n	8004d40 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10f      	bne.n	8004d30 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 0210 	bic.w	r2, r2, #16
 8004d1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d003      	beq.n	8004d40 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d032      	beq.n	8004dae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d022      	beq.n	8004d9a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2205      	movs	r2, #5
 8004d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 0201 	bic.w	r2, r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	3301      	adds	r3, #1
 8004d70:	60bb      	str	r3, [r7, #8]
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d307      	bcc.n	8004d88 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1f2      	bne.n	8004d6c <HAL_DMA_IRQHandler+0x2cc>
 8004d86:	e000      	b.n	8004d8a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004d88:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d005      	beq.n	8004dae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	4798      	blx	r3
 8004daa:	e000      	b.n	8004dae <HAL_DMA_IRQHandler+0x30e>
        return;
 8004dac:	bf00      	nop
    }
  }
}
 8004dae:	3718      	adds	r7, #24
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
 8004dd8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004de8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	2b40      	cmp	r3, #64	; 0x40
 8004df8:	d108      	bne.n	8004e0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e0a:	e007      	b.n	8004e1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	60da      	str	r2, [r3, #12]
}
 8004e1c:	bf00      	nop
 8004e1e:	3714      	adds	r7, #20
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	3b10      	subs	r3, #16
 8004e38:	4a14      	ldr	r2, [pc, #80]	; (8004e8c <DMA_CalcBaseAndBitshift+0x64>)
 8004e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3e:	091b      	lsrs	r3, r3, #4
 8004e40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e42:	4a13      	ldr	r2, [pc, #76]	; (8004e90 <DMA_CalcBaseAndBitshift+0x68>)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4413      	add	r3, r2
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2b03      	cmp	r3, #3
 8004e54:	d909      	bls.n	8004e6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e5e:	f023 0303 	bic.w	r3, r3, #3
 8004e62:	1d1a      	adds	r2, r3, #4
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	659a      	str	r2, [r3, #88]	; 0x58
 8004e68:	e007      	b.n	8004e7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e72:	f023 0303 	bic.w	r3, r3, #3
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3714      	adds	r7, #20
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	aaaaaaab 	.word	0xaaaaaaab
 8004e90:	0801d9b0 	.word	0x0801d9b0

08004e94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d11f      	bne.n	8004eee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	2b03      	cmp	r3, #3
 8004eb2:	d856      	bhi.n	8004f62 <DMA_CheckFifoParam+0xce>
 8004eb4:	a201      	add	r2, pc, #4	; (adr r2, 8004ebc <DMA_CheckFifoParam+0x28>)
 8004eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eba:	bf00      	nop
 8004ebc:	08004ecd 	.word	0x08004ecd
 8004ec0:	08004edf 	.word	0x08004edf
 8004ec4:	08004ecd 	.word	0x08004ecd
 8004ec8:	08004f63 	.word	0x08004f63
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d046      	beq.n	8004f66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004edc:	e043      	b.n	8004f66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ee6:	d140      	bne.n	8004f6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eec:	e03d      	b.n	8004f6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ef6:	d121      	bne.n	8004f3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	2b03      	cmp	r3, #3
 8004efc:	d837      	bhi.n	8004f6e <DMA_CheckFifoParam+0xda>
 8004efe:	a201      	add	r2, pc, #4	; (adr r2, 8004f04 <DMA_CheckFifoParam+0x70>)
 8004f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f04:	08004f15 	.word	0x08004f15
 8004f08:	08004f1b 	.word	0x08004f1b
 8004f0c:	08004f15 	.word	0x08004f15
 8004f10:	08004f2d 	.word	0x08004f2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	73fb      	strb	r3, [r7, #15]
      break;
 8004f18:	e030      	b.n	8004f7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d025      	beq.n	8004f72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f2a:	e022      	b.n	8004f72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f34:	d11f      	bne.n	8004f76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f3a:	e01c      	b.n	8004f76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d903      	bls.n	8004f4a <DMA_CheckFifoParam+0xb6>
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	2b03      	cmp	r3, #3
 8004f46:	d003      	beq.n	8004f50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f48:	e018      	b.n	8004f7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	73fb      	strb	r3, [r7, #15]
      break;
 8004f4e:	e015      	b.n	8004f7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00e      	beq.n	8004f7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f60:	e00b      	b.n	8004f7a <DMA_CheckFifoParam+0xe6>
      break;
 8004f62:	bf00      	nop
 8004f64:	e00a      	b.n	8004f7c <DMA_CheckFifoParam+0xe8>
      break;
 8004f66:	bf00      	nop
 8004f68:	e008      	b.n	8004f7c <DMA_CheckFifoParam+0xe8>
      break;
 8004f6a:	bf00      	nop
 8004f6c:	e006      	b.n	8004f7c <DMA_CheckFifoParam+0xe8>
      break;
 8004f6e:	bf00      	nop
 8004f70:	e004      	b.n	8004f7c <DMA_CheckFifoParam+0xe8>
      break;
 8004f72:	bf00      	nop
 8004f74:	e002      	b.n	8004f7c <DMA_CheckFifoParam+0xe8>
      break;   
 8004f76:	bf00      	nop
 8004f78:	e000      	b.n	8004f7c <DMA_CheckFifoParam+0xe8>
      break;
 8004f7a:	bf00      	nop
    }
  } 
  
  return status; 
 8004f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3714      	adds	r7, #20
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop

08004f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b089      	sub	sp, #36	; 0x24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f96:	2300      	movs	r3, #0
 8004f98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	61fb      	str	r3, [r7, #28]
 8004fa6:	e165      	b.n	8005274 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004fa8:	2201      	movs	r2, #1
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	f040 8154 	bne.w	800526e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f003 0303 	and.w	r3, r3, #3
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d005      	beq.n	8004fde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d130      	bne.n	8005040 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	2203      	movs	r2, #3
 8004fea:	fa02 f303 	lsl.w	r3, r2, r3
 8004fee:	43db      	mvns	r3, r3
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68da      	ldr	r2, [r3, #12]
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	4313      	orrs	r3, r2
 8005006:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005014:	2201      	movs	r2, #1
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	fa02 f303 	lsl.w	r3, r2, r3
 800501c:	43db      	mvns	r3, r3
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	4013      	ands	r3, r2
 8005022:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	091b      	lsrs	r3, r3, #4
 800502a:	f003 0201 	and.w	r2, r3, #1
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	fa02 f303 	lsl.w	r3, r2, r3
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	4313      	orrs	r3, r2
 8005038:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f003 0303 	and.w	r3, r3, #3
 8005048:	2b03      	cmp	r3, #3
 800504a:	d017      	beq.n	800507c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	005b      	lsls	r3, r3, #1
 8005056:	2203      	movs	r2, #3
 8005058:	fa02 f303 	lsl.w	r3, r2, r3
 800505c:	43db      	mvns	r3, r3
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	4013      	ands	r3, r2
 8005062:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	689a      	ldr	r2, [r3, #8]
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	fa02 f303 	lsl.w	r3, r2, r3
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	4313      	orrs	r3, r2
 8005074:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f003 0303 	and.w	r3, r3, #3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d123      	bne.n	80050d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	08da      	lsrs	r2, r3, #3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3208      	adds	r2, #8
 8005090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005094:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	f003 0307 	and.w	r3, r3, #7
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	220f      	movs	r2, #15
 80050a0:	fa02 f303 	lsl.w	r3, r2, r3
 80050a4:	43db      	mvns	r3, r3
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	4013      	ands	r3, r2
 80050aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	691a      	ldr	r2, [r3, #16]
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	f003 0307 	and.w	r3, r3, #7
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	fa02 f303 	lsl.w	r3, r2, r3
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	4313      	orrs	r3, r2
 80050c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	08da      	lsrs	r2, r3, #3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	3208      	adds	r2, #8
 80050ca:	69b9      	ldr	r1, [r7, #24]
 80050cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	2203      	movs	r2, #3
 80050dc:	fa02 f303 	lsl.w	r3, r2, r3
 80050e0:	43db      	mvns	r3, r3
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	4013      	ands	r3, r2
 80050e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f003 0203 	and.w	r2, r3, #3
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	fa02 f303 	lsl.w	r3, r2, r3
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800510c:	2b00      	cmp	r3, #0
 800510e:	f000 80ae 	beq.w	800526e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005112:	2300      	movs	r3, #0
 8005114:	60fb      	str	r3, [r7, #12]
 8005116:	4b5d      	ldr	r3, [pc, #372]	; (800528c <HAL_GPIO_Init+0x300>)
 8005118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511a:	4a5c      	ldr	r2, [pc, #368]	; (800528c <HAL_GPIO_Init+0x300>)
 800511c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005120:	6453      	str	r3, [r2, #68]	; 0x44
 8005122:	4b5a      	ldr	r3, [pc, #360]	; (800528c <HAL_GPIO_Init+0x300>)
 8005124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800512a:	60fb      	str	r3, [r7, #12]
 800512c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800512e:	4a58      	ldr	r2, [pc, #352]	; (8005290 <HAL_GPIO_Init+0x304>)
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	089b      	lsrs	r3, r3, #2
 8005134:	3302      	adds	r3, #2
 8005136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800513a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	220f      	movs	r2, #15
 8005146:	fa02 f303 	lsl.w	r3, r2, r3
 800514a:	43db      	mvns	r3, r3
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	4013      	ands	r3, r2
 8005150:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a4f      	ldr	r2, [pc, #316]	; (8005294 <HAL_GPIO_Init+0x308>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d025      	beq.n	80051a6 <HAL_GPIO_Init+0x21a>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a4e      	ldr	r2, [pc, #312]	; (8005298 <HAL_GPIO_Init+0x30c>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d01f      	beq.n	80051a2 <HAL_GPIO_Init+0x216>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a4d      	ldr	r2, [pc, #308]	; (800529c <HAL_GPIO_Init+0x310>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d019      	beq.n	800519e <HAL_GPIO_Init+0x212>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a4c      	ldr	r2, [pc, #304]	; (80052a0 <HAL_GPIO_Init+0x314>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d013      	beq.n	800519a <HAL_GPIO_Init+0x20e>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a4b      	ldr	r2, [pc, #300]	; (80052a4 <HAL_GPIO_Init+0x318>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d00d      	beq.n	8005196 <HAL_GPIO_Init+0x20a>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a4a      	ldr	r2, [pc, #296]	; (80052a8 <HAL_GPIO_Init+0x31c>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d007      	beq.n	8005192 <HAL_GPIO_Init+0x206>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a49      	ldr	r2, [pc, #292]	; (80052ac <HAL_GPIO_Init+0x320>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d101      	bne.n	800518e <HAL_GPIO_Init+0x202>
 800518a:	2306      	movs	r3, #6
 800518c:	e00c      	b.n	80051a8 <HAL_GPIO_Init+0x21c>
 800518e:	2307      	movs	r3, #7
 8005190:	e00a      	b.n	80051a8 <HAL_GPIO_Init+0x21c>
 8005192:	2305      	movs	r3, #5
 8005194:	e008      	b.n	80051a8 <HAL_GPIO_Init+0x21c>
 8005196:	2304      	movs	r3, #4
 8005198:	e006      	b.n	80051a8 <HAL_GPIO_Init+0x21c>
 800519a:	2303      	movs	r3, #3
 800519c:	e004      	b.n	80051a8 <HAL_GPIO_Init+0x21c>
 800519e:	2302      	movs	r3, #2
 80051a0:	e002      	b.n	80051a8 <HAL_GPIO_Init+0x21c>
 80051a2:	2301      	movs	r3, #1
 80051a4:	e000      	b.n	80051a8 <HAL_GPIO_Init+0x21c>
 80051a6:	2300      	movs	r3, #0
 80051a8:	69fa      	ldr	r2, [r7, #28]
 80051aa:	f002 0203 	and.w	r2, r2, #3
 80051ae:	0092      	lsls	r2, r2, #2
 80051b0:	4093      	lsls	r3, r2
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051b8:	4935      	ldr	r1, [pc, #212]	; (8005290 <HAL_GPIO_Init+0x304>)
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	089b      	lsrs	r3, r3, #2
 80051be:	3302      	adds	r3, #2
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80051c6:	4b3a      	ldr	r3, [pc, #232]	; (80052b0 <HAL_GPIO_Init+0x324>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	43db      	mvns	r3, r3
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	4013      	ands	r3, r2
 80051d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80051e2:	69ba      	ldr	r2, [r7, #24]
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80051ea:	4a31      	ldr	r2, [pc, #196]	; (80052b0 <HAL_GPIO_Init+0x324>)
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80051f0:	4b2f      	ldr	r3, [pc, #188]	; (80052b0 <HAL_GPIO_Init+0x324>)
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	43db      	mvns	r3, r3
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	4013      	ands	r3, r2
 80051fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	4313      	orrs	r3, r2
 8005212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005214:	4a26      	ldr	r2, [pc, #152]	; (80052b0 <HAL_GPIO_Init+0x324>)
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800521a:	4b25      	ldr	r3, [pc, #148]	; (80052b0 <HAL_GPIO_Init+0x324>)
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	43db      	mvns	r3, r3
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	4013      	ands	r3, r2
 8005228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	4313      	orrs	r3, r2
 800523c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800523e:	4a1c      	ldr	r2, [pc, #112]	; (80052b0 <HAL_GPIO_Init+0x324>)
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005244:	4b1a      	ldr	r3, [pc, #104]	; (80052b0 <HAL_GPIO_Init+0x324>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	43db      	mvns	r3, r3
 800524e:	69ba      	ldr	r2, [r7, #24]
 8005250:	4013      	ands	r3, r2
 8005252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d003      	beq.n	8005268 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	4313      	orrs	r3, r2
 8005266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005268:	4a11      	ldr	r2, [pc, #68]	; (80052b0 <HAL_GPIO_Init+0x324>)
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	3301      	adds	r3, #1
 8005272:	61fb      	str	r3, [r7, #28]
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	2b0f      	cmp	r3, #15
 8005278:	f67f ae96 	bls.w	8004fa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800527c:	bf00      	nop
 800527e:	bf00      	nop
 8005280:	3724      	adds	r7, #36	; 0x24
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	40023800 	.word	0x40023800
 8005290:	40013800 	.word	0x40013800
 8005294:	40020000 	.word	0x40020000
 8005298:	40020400 	.word	0x40020400
 800529c:	40020800 	.word	0x40020800
 80052a0:	40020c00 	.word	0x40020c00
 80052a4:	40021000 	.word	0x40021000
 80052a8:	40021400 	.word	0x40021400
 80052ac:	40021800 	.word	0x40021800
 80052b0:	40013c00 	.word	0x40013c00

080052b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	460b      	mov	r3, r1
 80052be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	691a      	ldr	r2, [r3, #16]
 80052c4:	887b      	ldrh	r3, [r7, #2]
 80052c6:	4013      	ands	r3, r2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d002      	beq.n	80052d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80052cc:	2301      	movs	r3, #1
 80052ce:	73fb      	strb	r3, [r7, #15]
 80052d0:	e001      	b.n	80052d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80052d2:	2300      	movs	r3, #0
 80052d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80052d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e12b      	b.n	800554e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d106      	bne.n	8005310 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7fc fdba 	bl	8001e84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2224      	movs	r2, #36	; 0x24
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0201 	bic.w	r2, r2, #1
 8005326:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005336:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005346:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005348:	f002 f92e 	bl	80075a8 <HAL_RCC_GetPCLK1Freq>
 800534c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	4a81      	ldr	r2, [pc, #516]	; (8005558 <HAL_I2C_Init+0x274>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d807      	bhi.n	8005368 <HAL_I2C_Init+0x84>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4a80      	ldr	r2, [pc, #512]	; (800555c <HAL_I2C_Init+0x278>)
 800535c:	4293      	cmp	r3, r2
 800535e:	bf94      	ite	ls
 8005360:	2301      	movls	r3, #1
 8005362:	2300      	movhi	r3, #0
 8005364:	b2db      	uxtb	r3, r3
 8005366:	e006      	b.n	8005376 <HAL_I2C_Init+0x92>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	4a7d      	ldr	r2, [pc, #500]	; (8005560 <HAL_I2C_Init+0x27c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	bf94      	ite	ls
 8005370:	2301      	movls	r3, #1
 8005372:	2300      	movhi	r3, #0
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e0e7      	b.n	800554e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	4a78      	ldr	r2, [pc, #480]	; (8005564 <HAL_I2C_Init+0x280>)
 8005382:	fba2 2303 	umull	r2, r3, r2, r3
 8005386:	0c9b      	lsrs	r3, r3, #18
 8005388:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	430a      	orrs	r2, r1
 800539c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6a1b      	ldr	r3, [r3, #32]
 80053a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	4a6a      	ldr	r2, [pc, #424]	; (8005558 <HAL_I2C_Init+0x274>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d802      	bhi.n	80053b8 <HAL_I2C_Init+0xd4>
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	3301      	adds	r3, #1
 80053b6:	e009      	b.n	80053cc <HAL_I2C_Init+0xe8>
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80053be:	fb02 f303 	mul.w	r3, r2, r3
 80053c2:	4a69      	ldr	r2, [pc, #420]	; (8005568 <HAL_I2C_Init+0x284>)
 80053c4:	fba2 2303 	umull	r2, r3, r2, r3
 80053c8:	099b      	lsrs	r3, r3, #6
 80053ca:	3301      	adds	r3, #1
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	6812      	ldr	r2, [r2, #0]
 80053d0:	430b      	orrs	r3, r1
 80053d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80053de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	495c      	ldr	r1, [pc, #368]	; (8005558 <HAL_I2C_Init+0x274>)
 80053e8:	428b      	cmp	r3, r1
 80053ea:	d819      	bhi.n	8005420 <HAL_I2C_Init+0x13c>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	1e59      	subs	r1, r3, #1
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80053fa:	1c59      	adds	r1, r3, #1
 80053fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005400:	400b      	ands	r3, r1
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00a      	beq.n	800541c <HAL_I2C_Init+0x138>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	1e59      	subs	r1, r3, #1
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	fbb1 f3f3 	udiv	r3, r1, r3
 8005414:	3301      	adds	r3, #1
 8005416:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800541a:	e051      	b.n	80054c0 <HAL_I2C_Init+0x1dc>
 800541c:	2304      	movs	r3, #4
 800541e:	e04f      	b.n	80054c0 <HAL_I2C_Init+0x1dc>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d111      	bne.n	800544c <HAL_I2C_Init+0x168>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	1e58      	subs	r0, r3, #1
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6859      	ldr	r1, [r3, #4]
 8005430:	460b      	mov	r3, r1
 8005432:	005b      	lsls	r3, r3, #1
 8005434:	440b      	add	r3, r1
 8005436:	fbb0 f3f3 	udiv	r3, r0, r3
 800543a:	3301      	adds	r3, #1
 800543c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005440:	2b00      	cmp	r3, #0
 8005442:	bf0c      	ite	eq
 8005444:	2301      	moveq	r3, #1
 8005446:	2300      	movne	r3, #0
 8005448:	b2db      	uxtb	r3, r3
 800544a:	e012      	b.n	8005472 <HAL_I2C_Init+0x18e>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	1e58      	subs	r0, r3, #1
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6859      	ldr	r1, [r3, #4]
 8005454:	460b      	mov	r3, r1
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	440b      	add	r3, r1
 800545a:	0099      	lsls	r1, r3, #2
 800545c:	440b      	add	r3, r1
 800545e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005462:	3301      	adds	r3, #1
 8005464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005468:	2b00      	cmp	r3, #0
 800546a:	bf0c      	ite	eq
 800546c:	2301      	moveq	r3, #1
 800546e:	2300      	movne	r3, #0
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <HAL_I2C_Init+0x196>
 8005476:	2301      	movs	r3, #1
 8005478:	e022      	b.n	80054c0 <HAL_I2C_Init+0x1dc>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10e      	bne.n	80054a0 <HAL_I2C_Init+0x1bc>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	1e58      	subs	r0, r3, #1
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6859      	ldr	r1, [r3, #4]
 800548a:	460b      	mov	r3, r1
 800548c:	005b      	lsls	r3, r3, #1
 800548e:	440b      	add	r3, r1
 8005490:	fbb0 f3f3 	udiv	r3, r0, r3
 8005494:	3301      	adds	r3, #1
 8005496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800549a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800549e:	e00f      	b.n	80054c0 <HAL_I2C_Init+0x1dc>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	1e58      	subs	r0, r3, #1
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6859      	ldr	r1, [r3, #4]
 80054a8:	460b      	mov	r3, r1
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	440b      	add	r3, r1
 80054ae:	0099      	lsls	r1, r3, #2
 80054b0:	440b      	add	r3, r1
 80054b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80054b6:	3301      	adds	r3, #1
 80054b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054c0:	6879      	ldr	r1, [r7, #4]
 80054c2:	6809      	ldr	r1, [r1, #0]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	69da      	ldr	r2, [r3, #28]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	431a      	orrs	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80054ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	6911      	ldr	r1, [r2, #16]
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	68d2      	ldr	r2, [r2, #12]
 80054fa:	4311      	orrs	r1, r2
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	6812      	ldr	r2, [r2, #0]
 8005500:	430b      	orrs	r3, r1
 8005502:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	695a      	ldr	r2, [r3, #20]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	431a      	orrs	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	430a      	orrs	r2, r1
 800551e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f042 0201 	orr.w	r2, r2, #1
 800552e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2220      	movs	r2, #32
 800553a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	000186a0 	.word	0x000186a0
 800555c:	001e847f 	.word	0x001e847f
 8005560:	003d08ff 	.word	0x003d08ff
 8005564:	431bde83 	.word	0x431bde83
 8005568:	10624dd3 	.word	0x10624dd3

0800556c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b088      	sub	sp, #32
 8005570:	af02      	add	r7, sp, #8
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	607a      	str	r2, [r7, #4]
 8005576:	461a      	mov	r2, r3
 8005578:	460b      	mov	r3, r1
 800557a:	817b      	strh	r3, [r7, #10]
 800557c:	4613      	mov	r3, r2
 800557e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005580:	f7fe fb7c 	bl	8003c7c <HAL_GetTick>
 8005584:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b20      	cmp	r3, #32
 8005590:	f040 80e0 	bne.w	8005754 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	2319      	movs	r3, #25
 800559a:	2201      	movs	r2, #1
 800559c:	4970      	ldr	r1, [pc, #448]	; (8005760 <HAL_I2C_Master_Transmit+0x1f4>)
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f000 fa92 	bl	8005ac8 <I2C_WaitOnFlagUntilTimeout>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80055aa:	2302      	movs	r3, #2
 80055ac:	e0d3      	b.n	8005756 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d101      	bne.n	80055bc <HAL_I2C_Master_Transmit+0x50>
 80055b8:	2302      	movs	r3, #2
 80055ba:	e0cc      	b.n	8005756 <HAL_I2C_Master_Transmit+0x1ea>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d007      	beq.n	80055e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f042 0201 	orr.w	r2, r2, #1
 80055e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2221      	movs	r2, #33	; 0x21
 80055f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2210      	movs	r2, #16
 80055fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	893a      	ldrh	r2, [r7, #8]
 8005612:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005618:	b29a      	uxth	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	4a50      	ldr	r2, [pc, #320]	; (8005764 <HAL_I2C_Master_Transmit+0x1f8>)
 8005622:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005624:	8979      	ldrh	r1, [r7, #10]
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	6a3a      	ldr	r2, [r7, #32]
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f000 f9ca 	bl	80059c4 <I2C_MasterRequestWrite>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d001      	beq.n	800563a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e08d      	b.n	8005756 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800563a:	2300      	movs	r3, #0
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	613b      	str	r3, [r7, #16]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	613b      	str	r3, [r7, #16]
 800564e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005650:	e066      	b.n	8005720 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	6a39      	ldr	r1, [r7, #32]
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f000 fb0c 	bl	8005c74 <I2C_WaitOnTXEFlagUntilTimeout>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00d      	beq.n	800567e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005666:	2b04      	cmp	r3, #4
 8005668:	d107      	bne.n	800567a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005678:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e06b      	b.n	8005756 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005682:	781a      	ldrb	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568e:	1c5a      	adds	r2, r3, #1
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005698:	b29b      	uxth	r3, r3
 800569a:	3b01      	subs	r3, #1
 800569c:	b29a      	uxth	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a6:	3b01      	subs	r3, #1
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	f003 0304 	and.w	r3, r3, #4
 80056b8:	2b04      	cmp	r3, #4
 80056ba:	d11b      	bne.n	80056f4 <HAL_I2C_Master_Transmit+0x188>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d017      	beq.n	80056f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c8:	781a      	ldrb	r2, [r3, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	1c5a      	adds	r2, r3, #1
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056de:	b29b      	uxth	r3, r3
 80056e0:	3b01      	subs	r3, #1
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ec:	3b01      	subs	r3, #1
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	6a39      	ldr	r1, [r7, #32]
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 fafc 	bl	8005cf6 <I2C_WaitOnBTFFlagUntilTimeout>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00d      	beq.n	8005720 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005708:	2b04      	cmp	r3, #4
 800570a:	d107      	bne.n	800571c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800571a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e01a      	b.n	8005756 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005724:	2b00      	cmp	r3, #0
 8005726:	d194      	bne.n	8005652 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005736:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2220      	movs	r2, #32
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005750:	2300      	movs	r3, #0
 8005752:	e000      	b.n	8005756 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005754:	2302      	movs	r3, #2
  }
}
 8005756:	4618      	mov	r0, r3
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	00100002 	.word	0x00100002
 8005764:	ffff0000 	.word	0xffff0000

08005768 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b08a      	sub	sp, #40	; 0x28
 800576c:	af02      	add	r7, sp, #8
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	607a      	str	r2, [r7, #4]
 8005772:	603b      	str	r3, [r7, #0]
 8005774:	460b      	mov	r3, r1
 8005776:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005778:	f7fe fa80 	bl	8003c7c <HAL_GetTick>
 800577c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800577e:	2300      	movs	r3, #0
 8005780:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b20      	cmp	r3, #32
 800578c:	f040 8111 	bne.w	80059b2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	2319      	movs	r3, #25
 8005796:	2201      	movs	r2, #1
 8005798:	4988      	ldr	r1, [pc, #544]	; (80059bc <HAL_I2C_IsDeviceReady+0x254>)
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 f994 	bl	8005ac8 <I2C_WaitOnFlagUntilTimeout>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80057a6:	2302      	movs	r3, #2
 80057a8:	e104      	b.n	80059b4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d101      	bne.n	80057b8 <HAL_I2C_IsDeviceReady+0x50>
 80057b4:	2302      	movs	r3, #2
 80057b6:	e0fd      	b.n	80059b4 <HAL_I2C_IsDeviceReady+0x24c>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d007      	beq.n	80057de <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f042 0201 	orr.w	r2, r2, #1
 80057dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2224      	movs	r2, #36	; 0x24
 80057f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4a70      	ldr	r2, [pc, #448]	; (80059c0 <HAL_I2C_IsDeviceReady+0x258>)
 8005800:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005810:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2200      	movs	r2, #0
 800581a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f000 f952 	bl	8005ac8 <I2C_WaitOnFlagUntilTimeout>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00d      	beq.n	8005846 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005838:	d103      	bne.n	8005842 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005840:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e0b6      	b.n	80059b4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005846:	897b      	ldrh	r3, [r7, #10]
 8005848:	b2db      	uxtb	r3, r3
 800584a:	461a      	mov	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005854:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005856:	f7fe fa11 	bl	8003c7c <HAL_GetTick>
 800585a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b02      	cmp	r3, #2
 8005868:	bf0c      	ite	eq
 800586a:	2301      	moveq	r3, #1
 800586c:	2300      	movne	r3, #0
 800586e:	b2db      	uxtb	r3, r3
 8005870:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	695b      	ldr	r3, [r3, #20]
 8005878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800587c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005880:	bf0c      	ite	eq
 8005882:	2301      	moveq	r3, #1
 8005884:	2300      	movne	r3, #0
 8005886:	b2db      	uxtb	r3, r3
 8005888:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800588a:	e025      	b.n	80058d8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800588c:	f7fe f9f6 	bl	8003c7c <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	429a      	cmp	r2, r3
 800589a:	d302      	bcc.n	80058a2 <HAL_I2C_IsDeviceReady+0x13a>
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d103      	bne.n	80058aa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	22a0      	movs	r2, #160	; 0xa0
 80058a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	bf0c      	ite	eq
 80058b8:	2301      	moveq	r3, #1
 80058ba:	2300      	movne	r3, #0
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ce:	bf0c      	ite	eq
 80058d0:	2301      	moveq	r3, #1
 80058d2:	2300      	movne	r3, #0
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2ba0      	cmp	r3, #160	; 0xa0
 80058e2:	d005      	beq.n	80058f0 <HAL_I2C_IsDeviceReady+0x188>
 80058e4:	7dfb      	ldrb	r3, [r7, #23]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d102      	bne.n	80058f0 <HAL_I2C_IsDeviceReady+0x188>
 80058ea:	7dbb      	ldrb	r3, [r7, #22]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d0cd      	beq.n	800588c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2220      	movs	r2, #32
 80058f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	f003 0302 	and.w	r3, r3, #2
 8005902:	2b02      	cmp	r3, #2
 8005904:	d129      	bne.n	800595a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005914:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005916:	2300      	movs	r3, #0
 8005918:	613b      	str	r3, [r7, #16]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	613b      	str	r3, [r7, #16]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	613b      	str	r3, [r7, #16]
 800592a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	9300      	str	r3, [sp, #0]
 8005930:	2319      	movs	r3, #25
 8005932:	2201      	movs	r2, #1
 8005934:	4921      	ldr	r1, [pc, #132]	; (80059bc <HAL_I2C_IsDeviceReady+0x254>)
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f000 f8c6 	bl	8005ac8 <I2C_WaitOnFlagUntilTimeout>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d001      	beq.n	8005946 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e036      	b.n	80059b4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2220      	movs	r2, #32
 800594a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005956:	2300      	movs	r3, #0
 8005958:	e02c      	b.n	80059b4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005968:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005972:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	2319      	movs	r3, #25
 800597a:	2201      	movs	r2, #1
 800597c:	490f      	ldr	r1, [pc, #60]	; (80059bc <HAL_I2C_IsDeviceReady+0x254>)
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f000 f8a2 	bl	8005ac8 <I2C_WaitOnFlagUntilTimeout>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e012      	b.n	80059b4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	3301      	adds	r3, #1
 8005992:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	429a      	cmp	r2, r3
 800599a:	f4ff af32 	bcc.w	8005802 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2220      	movs	r2, #32
 80059a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e000      	b.n	80059b4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80059b2:	2302      	movs	r3, #2
  }
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3720      	adds	r7, #32
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	00100002 	.word	0x00100002
 80059c0:	ffff0000 	.word	0xffff0000

080059c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b088      	sub	sp, #32
 80059c8:	af02      	add	r7, sp, #8
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	607a      	str	r2, [r7, #4]
 80059ce:	603b      	str	r3, [r7, #0]
 80059d0:	460b      	mov	r3, r1
 80059d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	2b08      	cmp	r3, #8
 80059de:	d006      	beq.n	80059ee <I2C_MasterRequestWrite+0x2a>
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d003      	beq.n	80059ee <I2C_MasterRequestWrite+0x2a>
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059ec:	d108      	bne.n	8005a00 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	e00b      	b.n	8005a18 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a04:	2b12      	cmp	r3, #18
 8005a06:	d107      	bne.n	8005a18 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	9300      	str	r3, [sp, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f000 f84f 	bl	8005ac8 <I2C_WaitOnFlagUntilTimeout>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00d      	beq.n	8005a4c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a3e:	d103      	bne.n	8005a48 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e035      	b.n	8005ab8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a54:	d108      	bne.n	8005a68 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a56:	897b      	ldrh	r3, [r7, #10]
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a64:	611a      	str	r2, [r3, #16]
 8005a66:	e01b      	b.n	8005aa0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005a68:	897b      	ldrh	r3, [r7, #10]
 8005a6a:	11db      	asrs	r3, r3, #7
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	f003 0306 	and.w	r3, r3, #6
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	f063 030f 	orn	r3, r3, #15
 8005a78:	b2da      	uxtb	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	490e      	ldr	r1, [pc, #56]	; (8005ac0 <I2C_MasterRequestWrite+0xfc>)
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 f875 	bl	8005b76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e010      	b.n	8005ab8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005a96:	897b      	ldrh	r3, [r7, #10]
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	4907      	ldr	r1, [pc, #28]	; (8005ac4 <I2C_MasterRequestWrite+0x100>)
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f000 f865 	bl	8005b76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d001      	beq.n	8005ab6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e000      	b.n	8005ab8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3718      	adds	r7, #24
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	00010008 	.word	0x00010008
 8005ac4:	00010002 	.word	0x00010002

08005ac8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	603b      	str	r3, [r7, #0]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ad8:	e025      	b.n	8005b26 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae0:	d021      	beq.n	8005b26 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ae2:	f7fe f8cb 	bl	8003c7c <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	683a      	ldr	r2, [r7, #0]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d302      	bcc.n	8005af8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d116      	bne.n	8005b26 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2220      	movs	r2, #32
 8005b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b12:	f043 0220 	orr.w	r2, r3, #32
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e023      	b.n	8005b6e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	0c1b      	lsrs	r3, r3, #16
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d10d      	bne.n	8005b4c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	43da      	mvns	r2, r3
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	bf0c      	ite	eq
 8005b42:	2301      	moveq	r3, #1
 8005b44:	2300      	movne	r3, #0
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	461a      	mov	r2, r3
 8005b4a:	e00c      	b.n	8005b66 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	43da      	mvns	r2, r3
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	4013      	ands	r3, r2
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	bf0c      	ite	eq
 8005b5e:	2301      	moveq	r3, #1
 8005b60:	2300      	movne	r3, #0
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	461a      	mov	r2, r3
 8005b66:	79fb      	ldrb	r3, [r7, #7]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d0b6      	beq.n	8005ada <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b084      	sub	sp, #16
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	60f8      	str	r0, [r7, #12]
 8005b7e:	60b9      	str	r1, [r7, #8]
 8005b80:	607a      	str	r2, [r7, #4]
 8005b82:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b84:	e051      	b.n	8005c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b94:	d123      	bne.n	8005bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ba4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2220      	movs	r2, #32
 8005bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bca:	f043 0204 	orr.w	r2, r3, #4
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e046      	b.n	8005c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be4:	d021      	beq.n	8005c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005be6:	f7fe f849 	bl	8003c7c <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d302      	bcc.n	8005bfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d116      	bne.n	8005c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2220      	movs	r2, #32
 8005c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c16:	f043 0220 	orr.w	r2, r3, #32
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e020      	b.n	8005c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	0c1b      	lsrs	r3, r3, #16
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d10c      	bne.n	8005c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	43da      	mvns	r2, r3
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	4013      	ands	r3, r2
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	bf14      	ite	ne
 8005c46:	2301      	movne	r3, #1
 8005c48:	2300      	moveq	r3, #0
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	e00b      	b.n	8005c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	43da      	mvns	r2, r3
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	4013      	ands	r3, r2
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	bf14      	ite	ne
 8005c60:	2301      	movne	r3, #1
 8005c62:	2300      	moveq	r3, #0
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d18d      	bne.n	8005b86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c80:	e02d      	b.n	8005cde <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f000 f878 	bl	8005d78 <I2C_IsAcknowledgeFailed>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e02d      	b.n	8005cee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c98:	d021      	beq.n	8005cde <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c9a:	f7fd ffef 	bl	8003c7c <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d302      	bcc.n	8005cb0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d116      	bne.n	8005cde <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2220      	movs	r2, #32
 8005cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cca:	f043 0220 	orr.w	r2, r3, #32
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e007      	b.n	8005cee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce8:	2b80      	cmp	r3, #128	; 0x80
 8005cea:	d1ca      	bne.n	8005c82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b084      	sub	sp, #16
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	60f8      	str	r0, [r7, #12]
 8005cfe:	60b9      	str	r1, [r7, #8]
 8005d00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d02:	e02d      	b.n	8005d60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f000 f837 	bl	8005d78 <I2C_IsAcknowledgeFailed>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d001      	beq.n	8005d14 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e02d      	b.n	8005d70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1a:	d021      	beq.n	8005d60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d1c:	f7fd ffae 	bl	8003c7c <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d302      	bcc.n	8005d32 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d116      	bne.n	8005d60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4c:	f043 0220 	orr.w	r2, r3, #32
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e007      	b.n	8005d70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	f003 0304 	and.w	r3, r3, #4
 8005d6a:	2b04      	cmp	r3, #4
 8005d6c:	d1ca      	bne.n	8005d04 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3710      	adds	r7, #16
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d8e:	d11b      	bne.n	8005dc8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2220      	movs	r2, #32
 8005da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db4:	f043 0204 	orr.w	r2, r3, #4
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e000      	b.n	8005dca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	370c      	adds	r7, #12
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005dd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dd8:	b08f      	sub	sp, #60	; 0x3c
 8005dda:	af0a      	add	r7, sp, #40	; 0x28
 8005ddc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d101      	bne.n	8005de8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e116      	b.n	8006016 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d106      	bne.n	8005e08 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f011 fac0 	bl	8017388 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2203      	movs	r2, #3
 8005e0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d102      	bne.n	8005e22 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f005 feef 	bl	800bc0a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	603b      	str	r3, [r7, #0]
 8005e32:	687e      	ldr	r6, [r7, #4]
 8005e34:	466d      	mov	r5, sp
 8005e36:	f106 0410 	add.w	r4, r6, #16
 8005e3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005e46:	e885 0003 	stmia.w	r5, {r0, r1}
 8005e4a:	1d33      	adds	r3, r6, #4
 8005e4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e4e:	6838      	ldr	r0, [r7, #0]
 8005e50:	f005 fdc6 	bl	800b9e0 <USB_CoreInit>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d005      	beq.n	8005e66 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e0d7      	b.n	8006016 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f005 fedd 	bl	800bc2c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e72:	2300      	movs	r3, #0
 8005e74:	73fb      	strb	r3, [r7, #15]
 8005e76:	e04a      	b.n	8005f0e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005e78:	7bfa      	ldrb	r2, [r7, #15]
 8005e7a:	6879      	ldr	r1, [r7, #4]
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	00db      	lsls	r3, r3, #3
 8005e80:	4413      	add	r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	440b      	add	r3, r1
 8005e86:	333d      	adds	r3, #61	; 0x3d
 8005e88:	2201      	movs	r2, #1
 8005e8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005e8c:	7bfa      	ldrb	r2, [r7, #15]
 8005e8e:	6879      	ldr	r1, [r7, #4]
 8005e90:	4613      	mov	r3, r2
 8005e92:	00db      	lsls	r3, r3, #3
 8005e94:	4413      	add	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	440b      	add	r3, r1
 8005e9a:	333c      	adds	r3, #60	; 0x3c
 8005e9c:	7bfa      	ldrb	r2, [r7, #15]
 8005e9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005ea0:	7bfa      	ldrb	r2, [r7, #15]
 8005ea2:	7bfb      	ldrb	r3, [r7, #15]
 8005ea4:	b298      	uxth	r0, r3
 8005ea6:	6879      	ldr	r1, [r7, #4]
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	00db      	lsls	r3, r3, #3
 8005eac:	4413      	add	r3, r2
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	440b      	add	r3, r1
 8005eb2:	3344      	adds	r3, #68	; 0x44
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005eb8:	7bfa      	ldrb	r2, [r7, #15]
 8005eba:	6879      	ldr	r1, [r7, #4]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	00db      	lsls	r3, r3, #3
 8005ec0:	4413      	add	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	440b      	add	r3, r1
 8005ec6:	3340      	adds	r3, #64	; 0x40
 8005ec8:	2200      	movs	r2, #0
 8005eca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005ecc:	7bfa      	ldrb	r2, [r7, #15]
 8005ece:	6879      	ldr	r1, [r7, #4]
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	00db      	lsls	r3, r3, #3
 8005ed4:	4413      	add	r3, r2
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	440b      	add	r3, r1
 8005eda:	3348      	adds	r3, #72	; 0x48
 8005edc:	2200      	movs	r2, #0
 8005ede:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005ee0:	7bfa      	ldrb	r2, [r7, #15]
 8005ee2:	6879      	ldr	r1, [r7, #4]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	00db      	lsls	r3, r3, #3
 8005ee8:	4413      	add	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	440b      	add	r3, r1
 8005eee:	334c      	adds	r3, #76	; 0x4c
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005ef4:	7bfa      	ldrb	r2, [r7, #15]
 8005ef6:	6879      	ldr	r1, [r7, #4]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	00db      	lsls	r3, r3, #3
 8005efc:	4413      	add	r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	440b      	add	r3, r1
 8005f02:	3354      	adds	r3, #84	; 0x54
 8005f04:	2200      	movs	r2, #0
 8005f06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f08:	7bfb      	ldrb	r3, [r7, #15]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	73fb      	strb	r3, [r7, #15]
 8005f0e:	7bfa      	ldrb	r2, [r7, #15]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d3af      	bcc.n	8005e78 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f18:	2300      	movs	r3, #0
 8005f1a:	73fb      	strb	r3, [r7, #15]
 8005f1c:	e044      	b.n	8005fa8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005f1e:	7bfa      	ldrb	r2, [r7, #15]
 8005f20:	6879      	ldr	r1, [r7, #4]
 8005f22:	4613      	mov	r3, r2
 8005f24:	00db      	lsls	r3, r3, #3
 8005f26:	4413      	add	r3, r2
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	440b      	add	r3, r1
 8005f2c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005f30:	2200      	movs	r2, #0
 8005f32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005f34:	7bfa      	ldrb	r2, [r7, #15]
 8005f36:	6879      	ldr	r1, [r7, #4]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	00db      	lsls	r3, r3, #3
 8005f3c:	4413      	add	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	440b      	add	r3, r1
 8005f42:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005f46:	7bfa      	ldrb	r2, [r7, #15]
 8005f48:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005f4a:	7bfa      	ldrb	r2, [r7, #15]
 8005f4c:	6879      	ldr	r1, [r7, #4]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	00db      	lsls	r3, r3, #3
 8005f52:	4413      	add	r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	440b      	add	r3, r1
 8005f58:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005f60:	7bfa      	ldrb	r2, [r7, #15]
 8005f62:	6879      	ldr	r1, [r7, #4]
 8005f64:	4613      	mov	r3, r2
 8005f66:	00db      	lsls	r3, r3, #3
 8005f68:	4413      	add	r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	440b      	add	r3, r1
 8005f6e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005f72:	2200      	movs	r2, #0
 8005f74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005f76:	7bfa      	ldrb	r2, [r7, #15]
 8005f78:	6879      	ldr	r1, [r7, #4]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	00db      	lsls	r3, r3, #3
 8005f7e:	4413      	add	r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	440b      	add	r3, r1
 8005f84:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005f88:	2200      	movs	r2, #0
 8005f8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005f8c:	7bfa      	ldrb	r2, [r7, #15]
 8005f8e:	6879      	ldr	r1, [r7, #4]
 8005f90:	4613      	mov	r3, r2
 8005f92:	00db      	lsls	r3, r3, #3
 8005f94:	4413      	add	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	440b      	add	r3, r1
 8005f9a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fa2:	7bfb      	ldrb	r3, [r7, #15]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	73fb      	strb	r3, [r7, #15]
 8005fa8:	7bfa      	ldrb	r2, [r7, #15]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d3b5      	bcc.n	8005f1e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	603b      	str	r3, [r7, #0]
 8005fb8:	687e      	ldr	r6, [r7, #4]
 8005fba:	466d      	mov	r5, sp
 8005fbc:	f106 0410 	add.w	r4, r6, #16
 8005fc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fc8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005fcc:	e885 0003 	stmia.w	r5, {r0, r1}
 8005fd0:	1d33      	adds	r3, r6, #4
 8005fd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005fd4:	6838      	ldr	r0, [r7, #0]
 8005fd6:	f005 fe75 	bl	800bcc4 <USB_DevInit>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d005      	beq.n	8005fec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e014      	b.n	8006016 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	2b01      	cmp	r3, #1
 8006002:	d102      	bne.n	800600a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f001 f9b9 	bl	800737c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4618      	mov	r0, r3
 8006010:	f006 ffb7 	bl	800cf82 <USB_DevDisconnect>

  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3714      	adds	r7, #20
 800601a:	46bd      	mov	sp, r7
 800601c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800601e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b084      	sub	sp, #16
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006032:	2b01      	cmp	r3, #1
 8006034:	d101      	bne.n	800603a <HAL_PCD_Start+0x1c>
 8006036:	2302      	movs	r3, #2
 8006038:	e020      	b.n	800607c <HAL_PCD_Start+0x5e>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006046:	2b01      	cmp	r3, #1
 8006048:	d109      	bne.n	800605e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800604e:	2b01      	cmp	r3, #1
 8006050:	d005      	beq.n	800605e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006056:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4618      	mov	r0, r3
 8006064:	f005 fdc0 	bl	800bbe8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4618      	mov	r0, r3
 800606e:	f006 ff67 	bl	800cf40 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006084:	b590      	push	{r4, r7, lr}
 8006086:	b08d      	sub	sp, #52	; 0x34
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006092:	6a3b      	ldr	r3, [r7, #32]
 8006094:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4618      	mov	r0, r3
 800609c:	f007 f825 	bl	800d0ea <USB_GetMode>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f040 84b7 	bne.w	8006a16 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4618      	mov	r0, r3
 80060ae:	f006 ff89 	bl	800cfc4 <USB_ReadInterrupts>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 84ad 	beq.w	8006a14 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	0a1b      	lsrs	r3, r3, #8
 80060c4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f006 ff76 	bl	800cfc4 <USB_ReadInterrupts>
 80060d8:	4603      	mov	r3, r0
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d107      	bne.n	80060f2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	695a      	ldr	r2, [r3, #20]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f002 0202 	and.w	r2, r2, #2
 80060f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4618      	mov	r0, r3
 80060f8:	f006 ff64 	bl	800cfc4 <USB_ReadInterrupts>
 80060fc:	4603      	mov	r3, r0
 80060fe:	f003 0310 	and.w	r3, r3, #16
 8006102:	2b10      	cmp	r3, #16
 8006104:	d161      	bne.n	80061ca <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	699a      	ldr	r2, [r3, #24]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f022 0210 	bic.w	r2, r2, #16
 8006114:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	f003 020f 	and.w	r2, r3, #15
 8006122:	4613      	mov	r3, r2
 8006124:	00db      	lsls	r3, r3, #3
 8006126:	4413      	add	r3, r2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	4413      	add	r3, r2
 8006132:	3304      	adds	r3, #4
 8006134:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	0c5b      	lsrs	r3, r3, #17
 800613a:	f003 030f 	and.w	r3, r3, #15
 800613e:	2b02      	cmp	r3, #2
 8006140:	d124      	bne.n	800618c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006148:	4013      	ands	r3, r2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d035      	beq.n	80061ba <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	091b      	lsrs	r3, r3, #4
 8006156:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006158:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800615c:	b29b      	uxth	r3, r3
 800615e:	461a      	mov	r2, r3
 8006160:	6a38      	ldr	r0, [r7, #32]
 8006162:	f006 fd9b 	bl	800cc9c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	691a      	ldr	r2, [r3, #16]
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	091b      	lsrs	r3, r3, #4
 800616e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006172:	441a      	add	r2, r3
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	6a1a      	ldr	r2, [r3, #32]
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	091b      	lsrs	r3, r3, #4
 8006180:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006184:	441a      	add	r2, r3
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	621a      	str	r2, [r3, #32]
 800618a:	e016      	b.n	80061ba <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	0c5b      	lsrs	r3, r3, #17
 8006190:	f003 030f 	and.w	r3, r3, #15
 8006194:	2b06      	cmp	r3, #6
 8006196:	d110      	bne.n	80061ba <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800619e:	2208      	movs	r2, #8
 80061a0:	4619      	mov	r1, r3
 80061a2:	6a38      	ldr	r0, [r7, #32]
 80061a4:	f006 fd7a 	bl	800cc9c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	6a1a      	ldr	r2, [r3, #32]
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	091b      	lsrs	r3, r3, #4
 80061b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061b4:	441a      	add	r2, r3
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	699a      	ldr	r2, [r3, #24]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f042 0210 	orr.w	r2, r2, #16
 80061c8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4618      	mov	r0, r3
 80061d0:	f006 fef8 	bl	800cfc4 <USB_ReadInterrupts>
 80061d4:	4603      	mov	r3, r0
 80061d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80061de:	f040 80a7 	bne.w	8006330 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80061e2:	2300      	movs	r3, #0
 80061e4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f006 fefd 	bl	800cfea <USB_ReadDevAllOutEpInterrupt>
 80061f0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80061f2:	e099      	b.n	8006328 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80061f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f000 808e 	beq.w	800631c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006206:	b2d2      	uxtb	r2, r2
 8006208:	4611      	mov	r1, r2
 800620a:	4618      	mov	r0, r3
 800620c:	f006 ff21 	bl	800d052 <USB_ReadDevOutEPInterrupt>
 8006210:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	f003 0301 	and.w	r3, r3, #1
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00c      	beq.n	8006236 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800621c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	4413      	add	r3, r2
 8006224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006228:	461a      	mov	r2, r3
 800622a:	2301      	movs	r3, #1
 800622c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800622e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 ff1d 	bl	8007070 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	f003 0308 	and.w	r3, r3, #8
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00c      	beq.n	800625a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006242:	015a      	lsls	r2, r3, #5
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	4413      	add	r3, r2
 8006248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800624c:	461a      	mov	r2, r3
 800624e:	2308      	movs	r3, #8
 8006250:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006252:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 fff3 	bl	8007240 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	f003 0310 	and.w	r3, r3, #16
 8006260:	2b00      	cmp	r3, #0
 8006262:	d008      	beq.n	8006276 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	015a      	lsls	r2, r3, #5
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	4413      	add	r3, r2
 800626c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006270:	461a      	mov	r2, r3
 8006272:	2310      	movs	r3, #16
 8006274:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	f003 0302 	and.w	r3, r3, #2
 800627c:	2b00      	cmp	r3, #0
 800627e:	d030      	beq.n	80062e2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006280:	6a3b      	ldr	r3, [r7, #32]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006288:	2b80      	cmp	r3, #128	; 0x80
 800628a:	d109      	bne.n	80062a0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	69fa      	ldr	r2, [r7, #28]
 8006296:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800629a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800629e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80062a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062a2:	4613      	mov	r3, r2
 80062a4:	00db      	lsls	r3, r3, #3
 80062a6:	4413      	add	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	4413      	add	r3, r2
 80062b2:	3304      	adds	r3, #4
 80062b4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	78db      	ldrb	r3, [r3, #3]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d108      	bne.n	80062d0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	2200      	movs	r2, #0
 80062c2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	4619      	mov	r1, r3
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f011 f978 	bl	80175c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062dc:	461a      	mov	r2, r3
 80062de:	2302      	movs	r3, #2
 80062e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	f003 0320 	and.w	r3, r3, #32
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d008      	beq.n	80062fe <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	015a      	lsls	r2, r3, #5
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	4413      	add	r3, r2
 80062f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f8:	461a      	mov	r2, r3
 80062fa:	2320      	movs	r3, #32
 80062fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d009      	beq.n	800631c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630a:	015a      	lsls	r2, r3, #5
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	4413      	add	r3, r2
 8006310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006314:	461a      	mov	r2, r3
 8006316:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800631a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800631c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631e:	3301      	adds	r3, #1
 8006320:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006324:	085b      	lsrs	r3, r3, #1
 8006326:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632a:	2b00      	cmp	r3, #0
 800632c:	f47f af62 	bne.w	80061f4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4618      	mov	r0, r3
 8006336:	f006 fe45 	bl	800cfc4 <USB_ReadInterrupts>
 800633a:	4603      	mov	r3, r0
 800633c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006340:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006344:	f040 80db 	bne.w	80064fe <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4618      	mov	r0, r3
 800634e:	f006 fe66 	bl	800d01e <USB_ReadDevAllInEpInterrupt>
 8006352:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006354:	2300      	movs	r3, #0
 8006356:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006358:	e0cd      	b.n	80064f6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800635a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	2b00      	cmp	r3, #0
 8006362:	f000 80c2 	beq.w	80064ea <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800636c:	b2d2      	uxtb	r2, r2
 800636e:	4611      	mov	r1, r2
 8006370:	4618      	mov	r0, r3
 8006372:	f006 fe8c 	bl	800d08e <USB_ReadDevInEPInterrupt>
 8006376:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b00      	cmp	r3, #0
 8006380:	d057      	beq.n	8006432 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006384:	f003 030f 	and.w	r3, r3, #15
 8006388:	2201      	movs	r2, #1
 800638a:	fa02 f303 	lsl.w	r3, r2, r3
 800638e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	43db      	mvns	r3, r3
 800639c:	69f9      	ldr	r1, [r7, #28]
 800639e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063a2:	4013      	ands	r3, r2
 80063a4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80063a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b2:	461a      	mov	r2, r3
 80063b4:	2301      	movs	r3, #1
 80063b6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d132      	bne.n	8006426 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80063c0:	6879      	ldr	r1, [r7, #4]
 80063c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063c4:	4613      	mov	r3, r2
 80063c6:	00db      	lsls	r3, r3, #3
 80063c8:	4413      	add	r3, r2
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	440b      	add	r3, r1
 80063ce:	334c      	adds	r3, #76	; 0x4c
 80063d0:	6819      	ldr	r1, [r3, #0]
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063d6:	4613      	mov	r3, r2
 80063d8:	00db      	lsls	r3, r3, #3
 80063da:	4413      	add	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4403      	add	r3, r0
 80063e0:	3348      	adds	r3, #72	; 0x48
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4419      	add	r1, r3
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ea:	4613      	mov	r3, r2
 80063ec:	00db      	lsls	r3, r3, #3
 80063ee:	4413      	add	r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4403      	add	r3, r0
 80063f4:	334c      	adds	r3, #76	; 0x4c
 80063f6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80063f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d113      	bne.n	8006426 <HAL_PCD_IRQHandler+0x3a2>
 80063fe:	6879      	ldr	r1, [r7, #4]
 8006400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006402:	4613      	mov	r3, r2
 8006404:	00db      	lsls	r3, r3, #3
 8006406:	4413      	add	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	440b      	add	r3, r1
 800640c:	3354      	adds	r3, #84	; 0x54
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d108      	bne.n	8006426 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6818      	ldr	r0, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800641e:	461a      	mov	r2, r3
 8006420:	2101      	movs	r1, #1
 8006422:	f006 fe93 	bl	800d14c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006428:	b2db      	uxtb	r3, r3
 800642a:	4619      	mov	r1, r3
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f011 f842 	bl	80174b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	f003 0308 	and.w	r3, r3, #8
 8006438:	2b00      	cmp	r3, #0
 800643a:	d008      	beq.n	800644e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	4413      	add	r3, r2
 8006444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006448:	461a      	mov	r2, r3
 800644a:	2308      	movs	r3, #8
 800644c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	f003 0310 	and.w	r3, r3, #16
 8006454:	2b00      	cmp	r3, #0
 8006456:	d008      	beq.n	800646a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	4413      	add	r3, r2
 8006460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006464:	461a      	mov	r2, r3
 8006466:	2310      	movs	r3, #16
 8006468:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006470:	2b00      	cmp	r3, #0
 8006472:	d008      	beq.n	8006486 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	4413      	add	r3, r2
 800647c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006480:	461a      	mov	r2, r3
 8006482:	2340      	movs	r3, #64	; 0x40
 8006484:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f003 0302 	and.w	r3, r3, #2
 800648c:	2b00      	cmp	r3, #0
 800648e:	d023      	beq.n	80064d8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006490:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006492:	6a38      	ldr	r0, [r7, #32]
 8006494:	f005 fd74 	bl	800bf80 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800649a:	4613      	mov	r3, r2
 800649c:	00db      	lsls	r3, r3, #3
 800649e:	4413      	add	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	3338      	adds	r3, #56	; 0x38
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	4413      	add	r3, r2
 80064a8:	3304      	adds	r3, #4
 80064aa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	78db      	ldrb	r3, [r3, #3]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d108      	bne.n	80064c6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	2200      	movs	r2, #0
 80064b8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80064ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	4619      	mov	r1, r3
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f011 f88f 	bl	80175e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80064c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d2:	461a      	mov	r2, r3
 80064d4:	2302      	movs	r3, #2
 80064d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d003      	beq.n	80064ea <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80064e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 fd35 	bl	8006f54 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	3301      	adds	r3, #1
 80064ee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80064f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f2:	085b      	lsrs	r3, r3, #1
 80064f4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80064f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f47f af2e 	bne.w	800635a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4618      	mov	r0, r3
 8006504:	f006 fd5e 	bl	800cfc4 <USB_ReadInterrupts>
 8006508:	4603      	mov	r3, r0
 800650a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800650e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006512:	d122      	bne.n	800655a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	69fa      	ldr	r2, [r7, #28]
 800651e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006522:	f023 0301 	bic.w	r3, r3, #1
 8006526:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800652e:	2b01      	cmp	r3, #1
 8006530:	d108      	bne.n	8006544 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800653a:	2100      	movs	r1, #0
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f011 fa29 	bl	8017994 <HAL_PCDEx_LPM_Callback>
 8006542:	e002      	b.n	800654a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f011 f82d 	bl	80175a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	695a      	ldr	r2, [r3, #20]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006558:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4618      	mov	r0, r3
 8006560:	f006 fd30 	bl	800cfc4 <USB_ReadInterrupts>
 8006564:	4603      	mov	r3, r0
 8006566:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800656a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800656e:	d112      	bne.n	8006596 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f003 0301 	and.w	r3, r3, #1
 800657c:	2b01      	cmp	r3, #1
 800657e:	d102      	bne.n	8006586 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f010 ffe9 	bl	8017558 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	695a      	ldr	r2, [r3, #20]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006594:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4618      	mov	r0, r3
 800659c:	f006 fd12 	bl	800cfc4 <USB_ReadInterrupts>
 80065a0:	4603      	mov	r3, r0
 80065a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065aa:	d121      	bne.n	80065f0 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	695a      	ldr	r2, [r3, #20]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80065ba:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d111      	bne.n	80065ea <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d4:	089b      	lsrs	r3, r3, #2
 80065d6:	f003 020f 	and.w	r2, r3, #15
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80065e0:	2101      	movs	r1, #1
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f011 f9d6 	bl	8017994 <HAL_PCDEx_LPM_Callback>
 80065e8:	e002      	b.n	80065f0 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f010 ffb4 	bl	8017558 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4618      	mov	r0, r3
 80065f6:	f006 fce5 	bl	800cfc4 <USB_ReadInterrupts>
 80065fa:	4603      	mov	r3, r0
 80065fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006604:	f040 80b7 	bne.w	8006776 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	69fa      	ldr	r2, [r7, #28]
 8006612:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006616:	f023 0301 	bic.w	r3, r3, #1
 800661a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2110      	movs	r1, #16
 8006622:	4618      	mov	r0, r3
 8006624:	f005 fcac 	bl	800bf80 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006628:	2300      	movs	r3, #0
 800662a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800662c:	e046      	b.n	80066bc <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800662e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006630:	015a      	lsls	r2, r3, #5
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	4413      	add	r3, r2
 8006636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800663a:	461a      	mov	r2, r3
 800663c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006640:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	4413      	add	r3, r2
 800664a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006652:	0151      	lsls	r1, r2, #5
 8006654:	69fa      	ldr	r2, [r7, #28]
 8006656:	440a      	add	r2, r1
 8006658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800665c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006660:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006664:	015a      	lsls	r2, r3, #5
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	4413      	add	r3, r2
 800666a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800666e:	461a      	mov	r2, r3
 8006670:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006674:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006678:	015a      	lsls	r2, r3, #5
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	4413      	add	r3, r2
 800667e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006686:	0151      	lsls	r1, r2, #5
 8006688:	69fa      	ldr	r2, [r7, #28]
 800668a:	440a      	add	r2, r1
 800668c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006690:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006694:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006698:	015a      	lsls	r2, r3, #5
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	4413      	add	r3, r2
 800669e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066a6:	0151      	lsls	r1, r2, #5
 80066a8:	69fa      	ldr	r2, [r7, #28]
 80066aa:	440a      	add	r2, r1
 80066ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066b4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b8:	3301      	adds	r3, #1
 80066ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d3b3      	bcc.n	800662e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	69fa      	ldr	r2, [r7, #28]
 80066d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066d4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80066d8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d016      	beq.n	8006710 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066ec:	69fa      	ldr	r2, [r7, #28]
 80066ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066f2:	f043 030b 	orr.w	r3, r3, #11
 80066f6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006702:	69fa      	ldr	r2, [r7, #28]
 8006704:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006708:	f043 030b 	orr.w	r3, r3, #11
 800670c:	6453      	str	r3, [r2, #68]	; 0x44
 800670e:	e015      	b.n	800673c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	69fa      	ldr	r2, [r7, #28]
 800671a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800671e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006722:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006726:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	69fa      	ldr	r2, [r7, #28]
 8006732:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006736:	f043 030b 	orr.w	r3, r3, #11
 800673a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	69fa      	ldr	r2, [r7, #28]
 8006746:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800674a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800674e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6818      	ldr	r0, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006760:	461a      	mov	r2, r3
 8006762:	f006 fcf3 	bl	800d14c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	695a      	ldr	r2, [r3, #20]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006774:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4618      	mov	r0, r3
 800677c:	f006 fc22 	bl	800cfc4 <USB_ReadInterrupts>
 8006780:	4603      	mov	r3, r0
 8006782:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800678a:	d124      	bne.n	80067d6 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4618      	mov	r0, r3
 8006792:	f006 fcb8 	bl	800d106 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4618      	mov	r0, r3
 800679c:	f005 fc6d 	bl	800c07a <USB_GetDevSpeed>
 80067a0:	4603      	mov	r3, r0
 80067a2:	461a      	mov	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681c      	ldr	r4, [r3, #0]
 80067ac:	f000 fef0 	bl	8007590 <HAL_RCC_GetHCLKFreq>
 80067b0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	461a      	mov	r2, r3
 80067ba:	4620      	mov	r0, r4
 80067bc:	f005 f972 	bl	800baa4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f010 fea0 	bl	8017506 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	695a      	ldr	r2, [r3, #20]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80067d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4618      	mov	r0, r3
 80067dc:	f006 fbf2 	bl	800cfc4 <USB_ReadInterrupts>
 80067e0:	4603      	mov	r3, r0
 80067e2:	f003 0308 	and.w	r3, r3, #8
 80067e6:	2b08      	cmp	r3, #8
 80067e8:	d10a      	bne.n	8006800 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f010 fe7d 	bl	80174ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	695a      	ldr	r2, [r3, #20]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f002 0208 	and.w	r2, r2, #8
 80067fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4618      	mov	r0, r3
 8006806:	f006 fbdd 	bl	800cfc4 <USB_ReadInterrupts>
 800680a:	4603      	mov	r3, r0
 800680c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006810:	2b80      	cmp	r3, #128	; 0x80
 8006812:	d122      	bne.n	800685a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006814:	6a3b      	ldr	r3, [r7, #32]
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006820:	2301      	movs	r3, #1
 8006822:	627b      	str	r3, [r7, #36]	; 0x24
 8006824:	e014      	b.n	8006850 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006826:	6879      	ldr	r1, [r7, #4]
 8006828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800682a:	4613      	mov	r3, r2
 800682c:	00db      	lsls	r3, r3, #3
 800682e:	4413      	add	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	440b      	add	r3, r1
 8006834:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d105      	bne.n	800684a <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800683e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006840:	b2db      	uxtb	r3, r3
 8006842:	4619      	mov	r1, r3
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 fb27 	bl	8006e98 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	3301      	adds	r3, #1
 800684e:	627b      	str	r3, [r7, #36]	; 0x24
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006856:	429a      	cmp	r2, r3
 8006858:	d3e5      	bcc.n	8006826 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4618      	mov	r0, r3
 8006860:	f006 fbb0 	bl	800cfc4 <USB_ReadInterrupts>
 8006864:	4603      	mov	r3, r0
 8006866:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800686a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800686e:	d13b      	bne.n	80068e8 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006870:	2301      	movs	r3, #1
 8006872:	627b      	str	r3, [r7, #36]	; 0x24
 8006874:	e02b      	b.n	80068ce <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	015a      	lsls	r2, r3, #5
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	4413      	add	r3, r2
 800687e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006886:	6879      	ldr	r1, [r7, #4]
 8006888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800688a:	4613      	mov	r3, r2
 800688c:	00db      	lsls	r3, r3, #3
 800688e:	4413      	add	r3, r2
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	440b      	add	r3, r1
 8006894:	3340      	adds	r3, #64	; 0x40
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d115      	bne.n	80068c8 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800689c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800689e:	2b00      	cmp	r3, #0
 80068a0:	da12      	bge.n	80068c8 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80068a2:	6879      	ldr	r1, [r7, #4]
 80068a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068a6:	4613      	mov	r3, r2
 80068a8:	00db      	lsls	r3, r3, #3
 80068aa:	4413      	add	r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	440b      	add	r3, r1
 80068b0:	333f      	adds	r3, #63	; 0x3f
 80068b2:	2201      	movs	r2, #1
 80068b4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80068b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	4619      	mov	r1, r3
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fae8 	bl	8006e98 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80068c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ca:	3301      	adds	r3, #1
 80068cc:	627b      	str	r3, [r7, #36]	; 0x24
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d3ce      	bcc.n	8006876 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	695a      	ldr	r2, [r3, #20]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80068e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4618      	mov	r0, r3
 80068ee:	f006 fb69 	bl	800cfc4 <USB_ReadInterrupts>
 80068f2:	4603      	mov	r3, r0
 80068f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068fc:	d155      	bne.n	80069aa <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80068fe:	2301      	movs	r3, #1
 8006900:	627b      	str	r3, [r7, #36]	; 0x24
 8006902:	e045      	b.n	8006990 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	015a      	lsls	r2, r3, #5
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	4413      	add	r3, r2
 800690c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006914:	6879      	ldr	r1, [r7, #4]
 8006916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006918:	4613      	mov	r3, r2
 800691a:	00db      	lsls	r3, r3, #3
 800691c:	4413      	add	r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	440b      	add	r3, r1
 8006922:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d12e      	bne.n	800698a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800692c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800692e:	2b00      	cmp	r3, #0
 8006930:	da2b      	bge.n	800698a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800693e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006942:	429a      	cmp	r2, r3
 8006944:	d121      	bne.n	800698a <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006946:	6879      	ldr	r1, [r7, #4]
 8006948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800694a:	4613      	mov	r3, r2
 800694c:	00db      	lsls	r3, r3, #3
 800694e:	4413      	add	r3, r2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	440b      	add	r3, r1
 8006954:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006958:	2201      	movs	r2, #1
 800695a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800695c:	6a3b      	ldr	r3, [r7, #32]
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006964:	6a3b      	ldr	r3, [r7, #32]
 8006966:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006968:	6a3b      	ldr	r3, [r7, #32]
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10a      	bne.n	800698a <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	69fa      	ldr	r2, [r7, #28]
 800697e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006982:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006986:	6053      	str	r3, [r2, #4]
            break;
 8006988:	e007      	b.n	800699a <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698c:	3301      	adds	r3, #1
 800698e:	627b      	str	r3, [r7, #36]	; 0x24
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006996:	429a      	cmp	r2, r3
 8006998:	d3b4      	bcc.n	8006904 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	695a      	ldr	r2, [r3, #20]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80069a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f006 fb08 	bl	800cfc4 <USB_ReadInterrupts>
 80069b4:	4603      	mov	r3, r0
 80069b6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80069ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069be:	d10a      	bne.n	80069d6 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f010 fe21 	bl	8017608 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	695a      	ldr	r2, [r3, #20]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80069d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4618      	mov	r0, r3
 80069dc:	f006 faf2 	bl	800cfc4 <USB_ReadInterrupts>
 80069e0:	4603      	mov	r3, r0
 80069e2:	f003 0304 	and.w	r3, r3, #4
 80069e6:	2b04      	cmp	r3, #4
 80069e8:	d115      	bne.n	8006a16 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	f003 0304 	and.w	r3, r3, #4
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d002      	beq.n	8006a02 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f010 fe11 	bl	8017624 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6859      	ldr	r1, [r3, #4]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	69ba      	ldr	r2, [r7, #24]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	605a      	str	r2, [r3, #4]
 8006a12:	e000      	b.n	8006a16 <HAL_PCD_IRQHandler+0x992>
      return;
 8006a14:	bf00      	nop
    }
  }
}
 8006a16:	3734      	adds	r7, #52	; 0x34
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd90      	pop	{r4, r7, pc}

08006a1c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	460b      	mov	r3, r1
 8006a26:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d101      	bne.n	8006a36 <HAL_PCD_SetAddress+0x1a>
 8006a32:	2302      	movs	r3, #2
 8006a34:	e013      	b.n	8006a5e <HAL_PCD_SetAddress+0x42>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	78fa      	ldrb	r2, [r7, #3]
 8006a42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	78fa      	ldrb	r2, [r7, #3]
 8006a4c:	4611      	mov	r1, r2
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f006 fa50 	bl	800cef4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3708      	adds	r7, #8
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b084      	sub	sp, #16
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
 8006a6e:	4608      	mov	r0, r1
 8006a70:	4611      	mov	r1, r2
 8006a72:	461a      	mov	r2, r3
 8006a74:	4603      	mov	r3, r0
 8006a76:	70fb      	strb	r3, [r7, #3]
 8006a78:	460b      	mov	r3, r1
 8006a7a:	803b      	strh	r3, [r7, #0]
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006a80:	2300      	movs	r3, #0
 8006a82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006a84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	da0f      	bge.n	8006aac <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a8c:	78fb      	ldrb	r3, [r7, #3]
 8006a8e:	f003 020f 	and.w	r2, r3, #15
 8006a92:	4613      	mov	r3, r2
 8006a94:	00db      	lsls	r3, r3, #3
 8006a96:	4413      	add	r3, r2
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	3338      	adds	r3, #56	; 0x38
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	3304      	adds	r3, #4
 8006aa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	705a      	strb	r2, [r3, #1]
 8006aaa:	e00f      	b.n	8006acc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006aac:	78fb      	ldrb	r3, [r7, #3]
 8006aae:	f003 020f 	and.w	r2, r3, #15
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	00db      	lsls	r3, r3, #3
 8006ab6:	4413      	add	r3, r2
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	3304      	adds	r3, #4
 8006ac4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006acc:	78fb      	ldrb	r3, [r7, #3]
 8006ace:	f003 030f 	and.w	r3, r3, #15
 8006ad2:	b2da      	uxtb	r2, r3
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006ad8:	883a      	ldrh	r2, [r7, #0]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	78ba      	ldrb	r2, [r7, #2]
 8006ae2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	785b      	ldrb	r3, [r3, #1]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d004      	beq.n	8006af6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006af6:	78bb      	ldrb	r3, [r7, #2]
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d102      	bne.n	8006b02 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d101      	bne.n	8006b10 <HAL_PCD_EP_Open+0xaa>
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	e00e      	b.n	8006b2e <HAL_PCD_EP_Open+0xc8>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68f9      	ldr	r1, [r7, #12]
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f005 fad0 	bl	800c0c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006b2c:	7afb      	ldrb	r3, [r7, #11]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b084      	sub	sp, #16
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
 8006b3e:	460b      	mov	r3, r1
 8006b40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006b42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	da0f      	bge.n	8006b6a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b4a:	78fb      	ldrb	r3, [r7, #3]
 8006b4c:	f003 020f 	and.w	r2, r3, #15
 8006b50:	4613      	mov	r3, r2
 8006b52:	00db      	lsls	r3, r3, #3
 8006b54:	4413      	add	r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	3338      	adds	r3, #56	; 0x38
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	3304      	adds	r3, #4
 8006b60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2201      	movs	r2, #1
 8006b66:	705a      	strb	r2, [r3, #1]
 8006b68:	e00f      	b.n	8006b8a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b6a:	78fb      	ldrb	r3, [r7, #3]
 8006b6c:	f003 020f 	and.w	r2, r3, #15
 8006b70:	4613      	mov	r3, r2
 8006b72:	00db      	lsls	r3, r3, #3
 8006b74:	4413      	add	r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	4413      	add	r3, r2
 8006b80:	3304      	adds	r3, #4
 8006b82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006b8a:	78fb      	ldrb	r3, [r7, #3]
 8006b8c:	f003 030f 	and.w	r3, r3, #15
 8006b90:	b2da      	uxtb	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d101      	bne.n	8006ba4 <HAL_PCD_EP_Close+0x6e>
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	e00e      	b.n	8006bc2 <HAL_PCD_EP_Close+0x8c>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68f9      	ldr	r1, [r7, #12]
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f005 fb0e 	bl	800c1d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b086      	sub	sp, #24
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	60f8      	str	r0, [r7, #12]
 8006bd2:	607a      	str	r2, [r7, #4]
 8006bd4:	603b      	str	r3, [r7, #0]
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006bda:	7afb      	ldrb	r3, [r7, #11]
 8006bdc:	f003 020f 	and.w	r2, r3, #15
 8006be0:	4613      	mov	r3, r2
 8006be2:	00db      	lsls	r3, r3, #3
 8006be4:	4413      	add	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	4413      	add	r3, r2
 8006bf0:	3304      	adds	r3, #4
 8006bf2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	2200      	movs	r2, #0
 8006c04:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c0c:	7afb      	ldrb	r3, [r7, #11]
 8006c0e:	f003 030f 	and.w	r3, r3, #15
 8006c12:	b2da      	uxtb	r2, r3
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d102      	bne.n	8006c26 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006c26:	7afb      	ldrb	r3, [r7, #11]
 8006c28:	f003 030f 	and.w	r3, r3, #15
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d109      	bne.n	8006c44 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6818      	ldr	r0, [r3, #0]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	6979      	ldr	r1, [r7, #20]
 8006c3e:	f005 fded 	bl	800c81c <USB_EP0StartXfer>
 8006c42:	e008      	b.n	8006c56 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6818      	ldr	r0, [r3, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	461a      	mov	r2, r3
 8006c50:	6979      	ldr	r1, [r7, #20]
 8006c52:	f005 fb9b 	bl	800c38c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3718      	adds	r7, #24
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	460b      	mov	r3, r1
 8006c6a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006c6c:	78fb      	ldrb	r3, [r7, #3]
 8006c6e:	f003 020f 	and.w	r2, r3, #15
 8006c72:	6879      	ldr	r1, [r7, #4]
 8006c74:	4613      	mov	r3, r2
 8006c76:	00db      	lsls	r3, r3, #3
 8006c78:	4413      	add	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	440b      	add	r3, r1
 8006c7e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006c82:	681b      	ldr	r3, [r3, #0]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b086      	sub	sp, #24
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	607a      	str	r2, [r7, #4]
 8006c9a:	603b      	str	r3, [r7, #0]
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ca0:	7afb      	ldrb	r3, [r7, #11]
 8006ca2:	f003 020f 	and.w	r2, r3, #15
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	00db      	lsls	r3, r3, #3
 8006caa:	4413      	add	r3, r2
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	3338      	adds	r3, #56	; 0x38
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	3304      	adds	r3, #4
 8006cb6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	683a      	ldr	r2, [r7, #0]
 8006cc2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006cd0:	7afb      	ldrb	r3, [r7, #11]
 8006cd2:	f003 030f 	and.w	r3, r3, #15
 8006cd6:	b2da      	uxtb	r2, r3
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d102      	bne.n	8006cea <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006cea:	7afb      	ldrb	r3, [r7, #11]
 8006cec:	f003 030f 	and.w	r3, r3, #15
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d109      	bne.n	8006d08 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6818      	ldr	r0, [r3, #0]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	461a      	mov	r2, r3
 8006d00:	6979      	ldr	r1, [r7, #20]
 8006d02:	f005 fd8b 	bl	800c81c <USB_EP0StartXfer>
 8006d06:	e008      	b.n	8006d1a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6818      	ldr	r0, [r3, #0]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	461a      	mov	r2, r3
 8006d14:	6979      	ldr	r1, [r7, #20]
 8006d16:	f005 fb39 	bl	800c38c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3718      	adds	r7, #24
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006d30:	78fb      	ldrb	r3, [r7, #3]
 8006d32:	f003 020f 	and.w	r2, r3, #15
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d901      	bls.n	8006d42 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e050      	b.n	8006de4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006d42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	da0f      	bge.n	8006d6a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d4a:	78fb      	ldrb	r3, [r7, #3]
 8006d4c:	f003 020f 	and.w	r2, r3, #15
 8006d50:	4613      	mov	r3, r2
 8006d52:	00db      	lsls	r3, r3, #3
 8006d54:	4413      	add	r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	3338      	adds	r3, #56	; 0x38
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	3304      	adds	r3, #4
 8006d60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2201      	movs	r2, #1
 8006d66:	705a      	strb	r2, [r3, #1]
 8006d68:	e00d      	b.n	8006d86 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006d6a:	78fa      	ldrb	r2, [r7, #3]
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	00db      	lsls	r3, r3, #3
 8006d70:	4413      	add	r3, r2
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	3304      	adds	r3, #4
 8006d7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d8c:	78fb      	ldrb	r3, [r7, #3]
 8006d8e:	f003 030f 	and.w	r3, r3, #15
 8006d92:	b2da      	uxtb	r2, r3
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d101      	bne.n	8006da6 <HAL_PCD_EP_SetStall+0x82>
 8006da2:	2302      	movs	r3, #2
 8006da4:	e01e      	b.n	8006de4 <HAL_PCD_EP_SetStall+0xc0>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68f9      	ldr	r1, [r7, #12]
 8006db4:	4618      	mov	r0, r3
 8006db6:	f005 ffc9 	bl	800cd4c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006dba:	78fb      	ldrb	r3, [r7, #3]
 8006dbc:	f003 030f 	and.w	r3, r3, #15
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10a      	bne.n	8006dda <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6818      	ldr	r0, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	b2d9      	uxtb	r1, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	f006 f9b9 	bl	800d14c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	460b      	mov	r3, r1
 8006df6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006df8:	78fb      	ldrb	r3, [r7, #3]
 8006dfa:	f003 020f 	and.w	r2, r3, #15
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d901      	bls.n	8006e0a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e042      	b.n	8006e90 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006e0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	da0f      	bge.n	8006e32 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e12:	78fb      	ldrb	r3, [r7, #3]
 8006e14:	f003 020f 	and.w	r2, r3, #15
 8006e18:	4613      	mov	r3, r2
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	4413      	add	r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	3338      	adds	r3, #56	; 0x38
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	4413      	add	r3, r2
 8006e26:	3304      	adds	r3, #4
 8006e28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	705a      	strb	r2, [r3, #1]
 8006e30:	e00f      	b.n	8006e52 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e32:	78fb      	ldrb	r3, [r7, #3]
 8006e34:	f003 020f 	and.w	r2, r3, #15
 8006e38:	4613      	mov	r3, r2
 8006e3a:	00db      	lsls	r3, r3, #3
 8006e3c:	4413      	add	r3, r2
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	4413      	add	r3, r2
 8006e48:	3304      	adds	r3, #4
 8006e4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e58:	78fb      	ldrb	r3, [r7, #3]
 8006e5a:	f003 030f 	and.w	r3, r3, #15
 8006e5e:	b2da      	uxtb	r2, r3
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d101      	bne.n	8006e72 <HAL_PCD_EP_ClrStall+0x86>
 8006e6e:	2302      	movs	r3, #2
 8006e70:	e00e      	b.n	8006e90 <HAL_PCD_EP_ClrStall+0xa4>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68f9      	ldr	r1, [r7, #12]
 8006e80:	4618      	mov	r0, r3
 8006e82:	f005 ffd1 	bl	800ce28 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006ea4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	da0c      	bge.n	8006ec6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006eac:	78fb      	ldrb	r3, [r7, #3]
 8006eae:	f003 020f 	and.w	r2, r3, #15
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	00db      	lsls	r3, r3, #3
 8006eb6:	4413      	add	r3, r2
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	3338      	adds	r3, #56	; 0x38
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	60fb      	str	r3, [r7, #12]
 8006ec4:	e00c      	b.n	8006ee0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ec6:	78fb      	ldrb	r3, [r7, #3]
 8006ec8:	f003 020f 	and.w	r2, r3, #15
 8006ecc:	4613      	mov	r3, r2
 8006ece:	00db      	lsls	r3, r3, #3
 8006ed0:	4413      	add	r3, r2
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	4413      	add	r3, r2
 8006edc:	3304      	adds	r3, #4
 8006ede:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68f9      	ldr	r1, [r7, #12]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f005 fdf0 	bl	800cacc <USB_EPStopXfer>
 8006eec:	4603      	mov	r3, r0
 8006eee:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006ef0:	7afb      	ldrb	r3, [r7, #11]
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b082      	sub	sp, #8
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
 8006f02:	460b      	mov	r3, r1
 8006f04:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d101      	bne.n	8006f14 <HAL_PCD_EP_Flush+0x1a>
 8006f10:	2302      	movs	r3, #2
 8006f12:	e01b      	b.n	8006f4c <HAL_PCD_EP_Flush+0x52>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8006f1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	da09      	bge.n	8006f38 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	78fb      	ldrb	r3, [r7, #3]
 8006f2a:	f003 030f 	and.w	r3, r3, #15
 8006f2e:	4619      	mov	r1, r3
 8006f30:	4610      	mov	r0, r2
 8006f32:	f005 f825 	bl	800bf80 <USB_FlushTxFifo>
 8006f36:	e004      	b.n	8006f42 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f005 f853 	bl	800bfe8 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3708      	adds	r7, #8
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b08a      	sub	sp, #40	; 0x28
 8006f58:	af02      	add	r7, sp, #8
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006f68:	683a      	ldr	r2, [r7, #0]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	00db      	lsls	r3, r3, #3
 8006f6e:	4413      	add	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	3338      	adds	r3, #56	; 0x38
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	4413      	add	r3, r2
 8006f78:	3304      	adds	r3, #4
 8006f7a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6a1a      	ldr	r2, [r3, #32]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d901      	bls.n	8006f8c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e06c      	b.n	8007066 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	699a      	ldr	r2, [r3, #24]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6a1b      	ldr	r3, [r3, #32]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	69fa      	ldr	r2, [r7, #28]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d902      	bls.n	8006fa8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	3303      	adds	r3, #3
 8006fac:	089b      	lsrs	r3, r3, #2
 8006fae:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006fb0:	e02b      	b.n	800700a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	699a      	ldr	r2, [r3, #24]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	69fa      	ldr	r2, [r7, #28]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d902      	bls.n	8006fce <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	3303      	adds	r3, #3
 8006fd2:	089b      	lsrs	r3, r3, #2
 8006fd4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6919      	ldr	r1, [r3, #16]
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	b2da      	uxtb	r2, r3
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	9300      	str	r3, [sp, #0]
 8006fea:	4603      	mov	r3, r0
 8006fec:	6978      	ldr	r0, [r7, #20]
 8006fee:	f005 fe17 	bl	800cc20 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	691a      	ldr	r2, [r3, #16]
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	441a      	add	r2, r3
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6a1a      	ldr	r2, [r3, #32]
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	441a      	add	r2, r3
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	015a      	lsls	r2, r3, #5
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	4413      	add	r3, r2
 8007012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800701a:	69ba      	ldr	r2, [r7, #24]
 800701c:	429a      	cmp	r2, r3
 800701e:	d809      	bhi.n	8007034 <PCD_WriteEmptyTxFifo+0xe0>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6a1a      	ldr	r2, [r3, #32]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007028:	429a      	cmp	r2, r3
 800702a:	d203      	bcs.n	8007034 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	699b      	ldr	r3, [r3, #24]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1be      	bne.n	8006fb2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	699a      	ldr	r2, [r3, #24]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6a1b      	ldr	r3, [r3, #32]
 800703c:	429a      	cmp	r2, r3
 800703e:	d811      	bhi.n	8007064 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	f003 030f 	and.w	r3, r3, #15
 8007046:	2201      	movs	r2, #1
 8007048:	fa02 f303 	lsl.w	r3, r2, r3
 800704c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007054:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	43db      	mvns	r3, r3
 800705a:	6939      	ldr	r1, [r7, #16]
 800705c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007060:	4013      	ands	r3, r2
 8007062:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3720      	adds	r7, #32
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
	...

08007070 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b088      	sub	sp, #32
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	333c      	adds	r3, #60	; 0x3c
 8007088:	3304      	adds	r3, #4
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	4413      	add	r3, r2
 8007096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d17b      	bne.n	800719e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	f003 0308 	and.w	r3, r3, #8
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d015      	beq.n	80070dc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	4a61      	ldr	r2, [pc, #388]	; (8007238 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	f240 80b9 	bls.w	800722c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f000 80b3 	beq.w	800722c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	015a      	lsls	r2, r3, #5
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	4413      	add	r3, r2
 80070ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d2:	461a      	mov	r2, r3
 80070d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070d8:	6093      	str	r3, [r2, #8]
 80070da:	e0a7      	b.n	800722c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	f003 0320 	and.w	r3, r3, #32
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d009      	beq.n	80070fa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	015a      	lsls	r2, r3, #5
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	4413      	add	r3, r2
 80070ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f2:	461a      	mov	r2, r3
 80070f4:	2320      	movs	r3, #32
 80070f6:	6093      	str	r3, [r2, #8]
 80070f8:	e098      	b.n	800722c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007100:	2b00      	cmp	r3, #0
 8007102:	f040 8093 	bne.w	800722c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	4a4b      	ldr	r2, [pc, #300]	; (8007238 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d90f      	bls.n	800712e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00a      	beq.n	800712e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	015a      	lsls	r2, r3, #5
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	4413      	add	r3, r2
 8007120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007124:	461a      	mov	r2, r3
 8007126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800712a:	6093      	str	r3, [r2, #8]
 800712c:	e07e      	b.n	800722c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	4613      	mov	r3, r2
 8007132:	00db      	lsls	r3, r3, #3
 8007134:	4413      	add	r3, r2
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	4413      	add	r3, r2
 8007140:	3304      	adds	r3, #4
 8007142:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	69da      	ldr	r2, [r3, #28]
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	0159      	lsls	r1, r3, #5
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	440b      	add	r3, r1
 8007150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800715a:	1ad2      	subs	r2, r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d114      	bne.n	8007190 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d109      	bne.n	8007182 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6818      	ldr	r0, [r3, #0]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007178:	461a      	mov	r2, r3
 800717a:	2101      	movs	r1, #1
 800717c:	f005 ffe6 	bl	800d14c <USB_EP0_OutStart>
 8007180:	e006      	b.n	8007190 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	691a      	ldr	r2, [r3, #16]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6a1b      	ldr	r3, [r3, #32]
 800718a:	441a      	add	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	b2db      	uxtb	r3, r3
 8007194:	4619      	mov	r1, r3
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f010 f972 	bl	8017480 <HAL_PCD_DataOutStageCallback>
 800719c:	e046      	b.n	800722c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	4a26      	ldr	r2, [pc, #152]	; (800723c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d124      	bne.n	80071f0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00a      	beq.n	80071c6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	015a      	lsls	r2, r3, #5
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	4413      	add	r3, r2
 80071b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071bc:	461a      	mov	r2, r3
 80071be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071c2:	6093      	str	r3, [r2, #8]
 80071c4:	e032      	b.n	800722c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	f003 0320 	and.w	r3, r3, #32
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d008      	beq.n	80071e2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	015a      	lsls	r2, r3, #5
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	4413      	add	r3, r2
 80071d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071dc:	461a      	mov	r2, r3
 80071de:	2320      	movs	r3, #32
 80071e0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	4619      	mov	r1, r3
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f010 f949 	bl	8017480 <HAL_PCD_DataOutStageCallback>
 80071ee:	e01d      	b.n	800722c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d114      	bne.n	8007220 <PCD_EP_OutXfrComplete_int+0x1b0>
 80071f6:	6879      	ldr	r1, [r7, #4]
 80071f8:	683a      	ldr	r2, [r7, #0]
 80071fa:	4613      	mov	r3, r2
 80071fc:	00db      	lsls	r3, r3, #3
 80071fe:	4413      	add	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	440b      	add	r3, r1
 8007204:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d108      	bne.n	8007220 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6818      	ldr	r0, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007218:	461a      	mov	r2, r3
 800721a:	2100      	movs	r1, #0
 800721c:	f005 ff96 	bl	800d14c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	b2db      	uxtb	r3, r3
 8007224:	4619      	mov	r1, r3
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f010 f92a 	bl	8017480 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3720      	adds	r7, #32
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	4f54300a 	.word	0x4f54300a
 800723c:	4f54310a 	.word	0x4f54310a

08007240 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	333c      	adds	r3, #60	; 0x3c
 8007258:	3304      	adds	r3, #4
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	015a      	lsls	r2, r3, #5
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	4413      	add	r3, r2
 8007266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	4a15      	ldr	r2, [pc, #84]	; (80072c8 <PCD_EP_OutSetupPacket_int+0x88>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d90e      	bls.n	8007294 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800727c:	2b00      	cmp	r3, #0
 800727e:	d009      	beq.n	8007294 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	015a      	lsls	r2, r3, #5
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	4413      	add	r3, r2
 8007288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800728c:	461a      	mov	r2, r3
 800728e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007292:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f010 f8e1 	bl	801745c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	4a0a      	ldr	r2, [pc, #40]	; (80072c8 <PCD_EP_OutSetupPacket_int+0x88>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d90c      	bls.n	80072bc <PCD_EP_OutSetupPacket_int+0x7c>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d108      	bne.n	80072bc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6818      	ldr	r0, [r3, #0]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80072b4:	461a      	mov	r2, r3
 80072b6:	2101      	movs	r1, #1
 80072b8:	f005 ff48 	bl	800d14c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3718      	adds	r7, #24
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	4f54300a 	.word	0x4f54300a

080072cc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	460b      	mov	r3, r1
 80072d6:	70fb      	strb	r3, [r7, #3]
 80072d8:	4613      	mov	r3, r2
 80072da:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80072e4:	78fb      	ldrb	r3, [r7, #3]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d107      	bne.n	80072fa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80072ea:	883b      	ldrh	r3, [r7, #0]
 80072ec:	0419      	lsls	r1, r3, #16
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	430a      	orrs	r2, r1
 80072f6:	629a      	str	r2, [r3, #40]	; 0x28
 80072f8:	e028      	b.n	800734c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007300:	0c1b      	lsrs	r3, r3, #16
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	4413      	add	r3, r2
 8007306:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007308:	2300      	movs	r3, #0
 800730a:	73fb      	strb	r3, [r7, #15]
 800730c:	e00d      	b.n	800732a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	7bfb      	ldrb	r3, [r7, #15]
 8007314:	3340      	adds	r3, #64	; 0x40
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	4413      	add	r3, r2
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	0c1b      	lsrs	r3, r3, #16
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	4413      	add	r3, r2
 8007322:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007324:	7bfb      	ldrb	r3, [r7, #15]
 8007326:	3301      	adds	r3, #1
 8007328:	73fb      	strb	r3, [r7, #15]
 800732a:	7bfa      	ldrb	r2, [r7, #15]
 800732c:	78fb      	ldrb	r3, [r7, #3]
 800732e:	3b01      	subs	r3, #1
 8007330:	429a      	cmp	r2, r3
 8007332:	d3ec      	bcc.n	800730e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007334:	883b      	ldrh	r3, [r7, #0]
 8007336:	0418      	lsls	r0, r3, #16
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6819      	ldr	r1, [r3, #0]
 800733c:	78fb      	ldrb	r3, [r7, #3]
 800733e:	3b01      	subs	r3, #1
 8007340:	68ba      	ldr	r2, [r7, #8]
 8007342:	4302      	orrs	r2, r0
 8007344:	3340      	adds	r3, #64	; 0x40
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	440b      	add	r3, r1
 800734a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3714      	adds	r7, #20
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr

0800735a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800735a:	b480      	push	{r7}
 800735c:	b083      	sub	sp, #12
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
 8007362:	460b      	mov	r3, r1
 8007364:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	887a      	ldrh	r2, [r7, #2]
 800736c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073ae:	f043 0303 	orr.w	r3, r3, #3
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3714      	adds	r7, #20
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d101      	bne.n	80073d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e0cc      	b.n	8007572 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80073d8:	4b68      	ldr	r3, [pc, #416]	; (800757c <HAL_RCC_ClockConfig+0x1b8>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 030f 	and.w	r3, r3, #15
 80073e0:	683a      	ldr	r2, [r7, #0]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d90c      	bls.n	8007400 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073e6:	4b65      	ldr	r3, [pc, #404]	; (800757c <HAL_RCC_ClockConfig+0x1b8>)
 80073e8:	683a      	ldr	r2, [r7, #0]
 80073ea:	b2d2      	uxtb	r2, r2
 80073ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80073ee:	4b63      	ldr	r3, [pc, #396]	; (800757c <HAL_RCC_ClockConfig+0x1b8>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f003 030f 	and.w	r3, r3, #15
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d001      	beq.n	8007400 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	e0b8      	b.n	8007572 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 0302 	and.w	r3, r3, #2
 8007408:	2b00      	cmp	r3, #0
 800740a:	d020      	beq.n	800744e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 0304 	and.w	r3, r3, #4
 8007414:	2b00      	cmp	r3, #0
 8007416:	d005      	beq.n	8007424 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007418:	4b59      	ldr	r3, [pc, #356]	; (8007580 <HAL_RCC_ClockConfig+0x1bc>)
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	4a58      	ldr	r2, [pc, #352]	; (8007580 <HAL_RCC_ClockConfig+0x1bc>)
 800741e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007422:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0308 	and.w	r3, r3, #8
 800742c:	2b00      	cmp	r3, #0
 800742e:	d005      	beq.n	800743c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007430:	4b53      	ldr	r3, [pc, #332]	; (8007580 <HAL_RCC_ClockConfig+0x1bc>)
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	4a52      	ldr	r2, [pc, #328]	; (8007580 <HAL_RCC_ClockConfig+0x1bc>)
 8007436:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800743a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800743c:	4b50      	ldr	r3, [pc, #320]	; (8007580 <HAL_RCC_ClockConfig+0x1bc>)
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	494d      	ldr	r1, [pc, #308]	; (8007580 <HAL_RCC_ClockConfig+0x1bc>)
 800744a:	4313      	orrs	r3, r2
 800744c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 0301 	and.w	r3, r3, #1
 8007456:	2b00      	cmp	r3, #0
 8007458:	d044      	beq.n	80074e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	2b01      	cmp	r3, #1
 8007460:	d107      	bne.n	8007472 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007462:	4b47      	ldr	r3, [pc, #284]	; (8007580 <HAL_RCC_ClockConfig+0x1bc>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800746a:	2b00      	cmp	r3, #0
 800746c:	d119      	bne.n	80074a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e07f      	b.n	8007572 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	2b02      	cmp	r3, #2
 8007478:	d003      	beq.n	8007482 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800747e:	2b03      	cmp	r3, #3
 8007480:	d107      	bne.n	8007492 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007482:	4b3f      	ldr	r3, [pc, #252]	; (8007580 <HAL_RCC_ClockConfig+0x1bc>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800748a:	2b00      	cmp	r3, #0
 800748c:	d109      	bne.n	80074a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e06f      	b.n	8007572 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007492:	4b3b      	ldr	r3, [pc, #236]	; (8007580 <HAL_RCC_ClockConfig+0x1bc>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0302 	and.w	r3, r3, #2
 800749a:	2b00      	cmp	r3, #0
 800749c:	d101      	bne.n	80074a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e067      	b.n	8007572 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80074a2:	4b37      	ldr	r3, [pc, #220]	; (8007580 <HAL_RCC_ClockConfig+0x1bc>)
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	f023 0203 	bic.w	r2, r3, #3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	4934      	ldr	r1, [pc, #208]	; (8007580 <HAL_RCC_ClockConfig+0x1bc>)
 80074b0:	4313      	orrs	r3, r2
 80074b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80074b4:	f7fc fbe2 	bl	8003c7c <HAL_GetTick>
 80074b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074ba:	e00a      	b.n	80074d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074bc:	f7fc fbde 	bl	8003c7c <HAL_GetTick>
 80074c0:	4602      	mov	r2, r0
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d901      	bls.n	80074d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e04f      	b.n	8007572 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074d2:	4b2b      	ldr	r3, [pc, #172]	; (8007580 <HAL_RCC_ClockConfig+0x1bc>)
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f003 020c 	and.w	r2, r3, #12
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d1eb      	bne.n	80074bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80074e4:	4b25      	ldr	r3, [pc, #148]	; (800757c <HAL_RCC_ClockConfig+0x1b8>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 030f 	and.w	r3, r3, #15
 80074ec:	683a      	ldr	r2, [r7, #0]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d20c      	bcs.n	800750c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074f2:	4b22      	ldr	r3, [pc, #136]	; (800757c <HAL_RCC_ClockConfig+0x1b8>)
 80074f4:	683a      	ldr	r2, [r7, #0]
 80074f6:	b2d2      	uxtb	r2, r2
 80074f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074fa:	4b20      	ldr	r3, [pc, #128]	; (800757c <HAL_RCC_ClockConfig+0x1b8>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 030f 	and.w	r3, r3, #15
 8007502:	683a      	ldr	r2, [r7, #0]
 8007504:	429a      	cmp	r2, r3
 8007506:	d001      	beq.n	800750c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	e032      	b.n	8007572 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 0304 	and.w	r3, r3, #4
 8007514:	2b00      	cmp	r3, #0
 8007516:	d008      	beq.n	800752a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007518:	4b19      	ldr	r3, [pc, #100]	; (8007580 <HAL_RCC_ClockConfig+0x1bc>)
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	4916      	ldr	r1, [pc, #88]	; (8007580 <HAL_RCC_ClockConfig+0x1bc>)
 8007526:	4313      	orrs	r3, r2
 8007528:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0308 	and.w	r3, r3, #8
 8007532:	2b00      	cmp	r3, #0
 8007534:	d009      	beq.n	800754a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007536:	4b12      	ldr	r3, [pc, #72]	; (8007580 <HAL_RCC_ClockConfig+0x1bc>)
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	00db      	lsls	r3, r3, #3
 8007544:	490e      	ldr	r1, [pc, #56]	; (8007580 <HAL_RCC_ClockConfig+0x1bc>)
 8007546:	4313      	orrs	r3, r2
 8007548:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800754a:	f000 fb9d 	bl	8007c88 <HAL_RCC_GetSysClockFreq>
 800754e:	4602      	mov	r2, r0
 8007550:	4b0b      	ldr	r3, [pc, #44]	; (8007580 <HAL_RCC_ClockConfig+0x1bc>)
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	091b      	lsrs	r3, r3, #4
 8007556:	f003 030f 	and.w	r3, r3, #15
 800755a:	490a      	ldr	r1, [pc, #40]	; (8007584 <HAL_RCC_ClockConfig+0x1c0>)
 800755c:	5ccb      	ldrb	r3, [r1, r3]
 800755e:	fa22 f303 	lsr.w	r3, r2, r3
 8007562:	4a09      	ldr	r2, [pc, #36]	; (8007588 <HAL_RCC_ClockConfig+0x1c4>)
 8007564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007566:	4b09      	ldr	r3, [pc, #36]	; (800758c <HAL_RCC_ClockConfig+0x1c8>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4618      	mov	r0, r3
 800756c:	f7fb fc94 	bl	8002e98 <HAL_InitTick>

  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	40023c00 	.word	0x40023c00
 8007580:	40023800 	.word	0x40023800
 8007584:	0801d998 	.word	0x0801d998
 8007588:	20000008 	.word	0x20000008
 800758c:	2000000c 	.word	0x2000000c

08007590 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007590:	b480      	push	{r7}
 8007592:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007594:	4b03      	ldr	r3, [pc, #12]	; (80075a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007596:	681b      	ldr	r3, [r3, #0]
}
 8007598:	4618      	mov	r0, r3
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	20000008 	.word	0x20000008

080075a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80075ac:	f7ff fff0 	bl	8007590 <HAL_RCC_GetHCLKFreq>
 80075b0:	4602      	mov	r2, r0
 80075b2:	4b05      	ldr	r3, [pc, #20]	; (80075c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	0a9b      	lsrs	r3, r3, #10
 80075b8:	f003 0307 	and.w	r3, r3, #7
 80075bc:	4903      	ldr	r1, [pc, #12]	; (80075cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80075be:	5ccb      	ldrb	r3, [r1, r3]
 80075c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	40023800 	.word	0x40023800
 80075cc:	0801d9a8 	.word	0x0801d9a8

080075d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	220f      	movs	r2, #15
 80075de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80075e0:	4b12      	ldr	r3, [pc, #72]	; (800762c <HAL_RCC_GetClockConfig+0x5c>)
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	f003 0203 	and.w	r2, r3, #3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80075ec:	4b0f      	ldr	r3, [pc, #60]	; (800762c <HAL_RCC_GetClockConfig+0x5c>)
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80075f8:	4b0c      	ldr	r3, [pc, #48]	; (800762c <HAL_RCC_GetClockConfig+0x5c>)
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007604:	4b09      	ldr	r3, [pc, #36]	; (800762c <HAL_RCC_GetClockConfig+0x5c>)
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	08db      	lsrs	r3, r3, #3
 800760a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007612:	4b07      	ldr	r3, [pc, #28]	; (8007630 <HAL_RCC_GetClockConfig+0x60>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 020f 	and.w	r2, r3, #15
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	601a      	str	r2, [r3, #0]
}
 800761e:	bf00      	nop
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	40023800 	.word	0x40023800
 8007630:	40023c00 	.word	0x40023c00

08007634 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b08c      	sub	sp, #48	; 0x30
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800763c:	2300      	movs	r3, #0
 800763e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8007640:	2300      	movs	r3, #0
 8007642:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8007644:	2300      	movs	r3, #0
 8007646:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8007648:	2300      	movs	r3, #0
 800764a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800764c:	2300      	movs	r3, #0
 800764e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8007650:	2300      	movs	r3, #0
 8007652:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8007654:	2300      	movs	r3, #0
 8007656:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8007658:	2300      	movs	r3, #0
 800765a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800765c:	2300      	movs	r3, #0
 800765e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 0301 	and.w	r3, r3, #1
 8007668:	2b00      	cmp	r3, #0
 800766a:	d010      	beq.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800766c:	4b6f      	ldr	r3, [pc, #444]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800766e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007672:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767a:	496c      	ldr	r1, [pc, #432]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800767c:	4313      	orrs	r3, r2
 800767e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007686:	2b00      	cmp	r3, #0
 8007688:	d101      	bne.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800768a:	2301      	movs	r3, #1
 800768c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 0302 	and.w	r3, r3, #2
 8007696:	2b00      	cmp	r3, #0
 8007698:	d010      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800769a:	4b64      	ldr	r3, [pc, #400]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800769c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076a0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076a8:	4960      	ldr	r1, [pc, #384]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80076aa:	4313      	orrs	r3, r2
 80076ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d101      	bne.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80076b8:	2301      	movs	r3, #1
 80076ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0304 	and.w	r3, r3, #4
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d017      	beq.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80076c8:	4b58      	ldr	r3, [pc, #352]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80076ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d6:	4955      	ldr	r1, [pc, #340]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80076d8:	4313      	orrs	r3, r2
 80076da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076e6:	d101      	bne.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80076e8:	2301      	movs	r3, #1
 80076ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d101      	bne.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80076f4:	2301      	movs	r3, #1
 80076f6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0308 	and.w	r3, r3, #8
 8007700:	2b00      	cmp	r3, #0
 8007702:	d017      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007704:	4b49      	ldr	r3, [pc, #292]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007706:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800770a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007712:	4946      	ldr	r1, [pc, #280]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007714:	4313      	orrs	r3, r2
 8007716:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800771e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007722:	d101      	bne.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8007724:	2301      	movs	r3, #1
 8007726:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800772c:	2b00      	cmp	r3, #0
 800772e:	d101      	bne.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8007730:	2301      	movs	r3, #1
 8007732:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0320 	and.w	r3, r3, #32
 800773c:	2b00      	cmp	r3, #0
 800773e:	f000 808a 	beq.w	8007856 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007742:	2300      	movs	r3, #0
 8007744:	60bb      	str	r3, [r7, #8]
 8007746:	4b39      	ldr	r3, [pc, #228]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774a:	4a38      	ldr	r2, [pc, #224]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800774c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007750:	6413      	str	r3, [r2, #64]	; 0x40
 8007752:	4b36      	ldr	r3, [pc, #216]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800775a:	60bb      	str	r3, [r7, #8]
 800775c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800775e:	4b34      	ldr	r3, [pc, #208]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a33      	ldr	r2, [pc, #204]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007768:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800776a:	f7fc fa87 	bl	8003c7c <HAL_GetTick>
 800776e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007770:	e008      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007772:	f7fc fa83 	bl	8003c7c <HAL_GetTick>
 8007776:	4602      	mov	r2, r0
 8007778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777a:	1ad3      	subs	r3, r2, r3
 800777c:	2b02      	cmp	r3, #2
 800777e:	d901      	bls.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8007780:	2303      	movs	r3, #3
 8007782:	e278      	b.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007784:	4b2a      	ldr	r3, [pc, #168]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800778c:	2b00      	cmp	r3, #0
 800778e:	d0f0      	beq.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007790:	4b26      	ldr	r3, [pc, #152]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007794:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007798:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800779a:	6a3b      	ldr	r3, [r7, #32]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d02f      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077a8:	6a3a      	ldr	r2, [r7, #32]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d028      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80077ae:	4b1f      	ldr	r3, [pc, #124]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80077b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077b6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80077b8:	4b1e      	ldr	r3, [pc, #120]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80077ba:	2201      	movs	r2, #1
 80077bc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80077be:	4b1d      	ldr	r3, [pc, #116]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80077c0:	2200      	movs	r2, #0
 80077c2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80077c4:	4a19      	ldr	r2, [pc, #100]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80077c6:	6a3b      	ldr	r3, [r7, #32]
 80077c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80077ca:	4b18      	ldr	r3, [pc, #96]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80077cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ce:	f003 0301 	and.w	r3, r3, #1
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d114      	bne.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80077d6:	f7fc fa51 	bl	8003c7c <HAL_GetTick>
 80077da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077dc:	e00a      	b.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077de:	f7fc fa4d 	bl	8003c7c <HAL_GetTick>
 80077e2:	4602      	mov	r2, r0
 80077e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d901      	bls.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80077f0:	2303      	movs	r3, #3
 80077f2:	e240      	b.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077f4:	4b0d      	ldr	r3, [pc, #52]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80077f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077f8:	f003 0302 	and.w	r3, r3, #2
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d0ee      	beq.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007804:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007808:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800780c:	d114      	bne.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800780e:	4b07      	ldr	r3, [pc, #28]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800781e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007822:	4902      	ldr	r1, [pc, #8]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007824:	4313      	orrs	r3, r2
 8007826:	608b      	str	r3, [r1, #8]
 8007828:	e00c      	b.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800782a:	bf00      	nop
 800782c:	40023800 	.word	0x40023800
 8007830:	40007000 	.word	0x40007000
 8007834:	42470e40 	.word	0x42470e40
 8007838:	4b4a      	ldr	r3, [pc, #296]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	4a49      	ldr	r2, [pc, #292]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800783e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007842:	6093      	str	r3, [r2, #8]
 8007844:	4b47      	ldr	r3, [pc, #284]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007846:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007850:	4944      	ldr	r1, [pc, #272]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007852:	4313      	orrs	r3, r2
 8007854:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f003 0310 	and.w	r3, r3, #16
 800785e:	2b00      	cmp	r3, #0
 8007860:	d004      	beq.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8007868:	4b3f      	ldr	r3, [pc, #252]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800786a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00a      	beq.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8007878:	4b3a      	ldr	r3, [pc, #232]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800787a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800787e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007886:	4937      	ldr	r1, [pc, #220]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007888:	4313      	orrs	r3, r2
 800788a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00a      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800789a:	4b32      	ldr	r3, [pc, #200]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800789c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078a0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078a8:	492e      	ldr	r1, [pc, #184]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80078aa:	4313      	orrs	r3, r2
 80078ac:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d011      	beq.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80078bc:	4b29      	ldr	r3, [pc, #164]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80078be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078c2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ca:	4926      	ldr	r1, [pc, #152]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80078cc:	4313      	orrs	r3, r2
 80078ce:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078da:	d101      	bne.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80078dc:	2301      	movs	r3, #1
 80078de:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00a      	beq.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80078ec:	4b1d      	ldr	r3, [pc, #116]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80078ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078fa:	491a      	ldr	r1, [pc, #104]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80078fc:	4313      	orrs	r3, r2
 80078fe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800790a:	2b00      	cmp	r3, #0
 800790c:	d011      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800790e:	4b15      	ldr	r3, [pc, #84]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007910:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007914:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800791c:	4911      	ldr	r1, [pc, #68]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800791e:	4313      	orrs	r3, r2
 8007920:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007928:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800792c:	d101      	bne.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800792e:	2301      	movs	r3, #1
 8007930:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007934:	2b01      	cmp	r3, #1
 8007936:	d005      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007940:	f040 80ff 	bne.w	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007944:	4b09      	ldr	r3, [pc, #36]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007946:	2200      	movs	r2, #0
 8007948:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800794a:	f7fc f997 	bl	8003c7c <HAL_GetTick>
 800794e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007950:	e00e      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007952:	f7fc f993 	bl	8003c7c <HAL_GetTick>
 8007956:	4602      	mov	r2, r0
 8007958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	2b02      	cmp	r3, #2
 800795e:	d907      	bls.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007960:	2303      	movs	r3, #3
 8007962:	e188      	b.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007964:	40023800 	.word	0x40023800
 8007968:	424711e0 	.word	0x424711e0
 800796c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007970:	4b7e      	ldr	r3, [pc, #504]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007978:	2b00      	cmp	r3, #0
 800797a:	d1ea      	bne.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 0301 	and.w	r3, r3, #1
 8007984:	2b00      	cmp	r3, #0
 8007986:	d003      	beq.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800798c:	2b00      	cmp	r3, #0
 800798e:	d009      	beq.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007998:	2b00      	cmp	r3, #0
 800799a:	d028      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d124      	bne.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80079a4:	4b71      	ldr	r3, [pc, #452]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80079a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079aa:	0c1b      	lsrs	r3, r3, #16
 80079ac:	f003 0303 	and.w	r3, r3, #3
 80079b0:	3301      	adds	r3, #1
 80079b2:	005b      	lsls	r3, r3, #1
 80079b4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80079b6:	4b6d      	ldr	r3, [pc, #436]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80079b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079bc:	0e1b      	lsrs	r3, r3, #24
 80079be:	f003 030f 	and.w	r3, r3, #15
 80079c2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685a      	ldr	r2, [r3, #4]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	019b      	lsls	r3, r3, #6
 80079ce:	431a      	orrs	r2, r3
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	085b      	lsrs	r3, r3, #1
 80079d4:	3b01      	subs	r3, #1
 80079d6:	041b      	lsls	r3, r3, #16
 80079d8:	431a      	orrs	r2, r3
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	061b      	lsls	r3, r3, #24
 80079de:	431a      	orrs	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	695b      	ldr	r3, [r3, #20]
 80079e4:	071b      	lsls	r3, r3, #28
 80079e6:	4961      	ldr	r1, [pc, #388]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80079e8:	4313      	orrs	r3, r2
 80079ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f003 0304 	and.w	r3, r3, #4
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d004      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a02:	d00a      	beq.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d035      	beq.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a18:	d130      	bne.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007a1a:	4b54      	ldr	r3, [pc, #336]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a20:	0c1b      	lsrs	r3, r3, #16
 8007a22:	f003 0303 	and.w	r3, r3, #3
 8007a26:	3301      	adds	r3, #1
 8007a28:	005b      	lsls	r3, r3, #1
 8007a2a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007a2c:	4b4f      	ldr	r3, [pc, #316]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a32:	0f1b      	lsrs	r3, r3, #28
 8007a34:	f003 0307 	and.w	r3, r3, #7
 8007a38:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	685a      	ldr	r2, [r3, #4]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	019b      	lsls	r3, r3, #6
 8007a44:	431a      	orrs	r2, r3
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	085b      	lsrs	r3, r3, #1
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	041b      	lsls	r3, r3, #16
 8007a4e:	431a      	orrs	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	061b      	lsls	r3, r3, #24
 8007a56:	431a      	orrs	r2, r3
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	071b      	lsls	r3, r3, #28
 8007a5c:	4943      	ldr	r1, [pc, #268]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007a64:	4b41      	ldr	r3, [pc, #260]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a6a:	f023 021f 	bic.w	r2, r3, #31
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a72:	3b01      	subs	r3, #1
 8007a74:	493d      	ldr	r1, [pc, #244]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a76:	4313      	orrs	r3, r2
 8007a78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d029      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a90:	d124      	bne.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007a92:	4b36      	ldr	r3, [pc, #216]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a98:	0c1b      	lsrs	r3, r3, #16
 8007a9a:	f003 0303 	and.w	r3, r3, #3
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	005b      	lsls	r3, r3, #1
 8007aa2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007aa4:	4b31      	ldr	r3, [pc, #196]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007aaa:	0f1b      	lsrs	r3, r3, #28
 8007aac:	f003 0307 	and.w	r3, r3, #7
 8007ab0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	685a      	ldr	r2, [r3, #4]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	019b      	lsls	r3, r3, #6
 8007abc:	431a      	orrs	r2, r3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	085b      	lsrs	r3, r3, #1
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	041b      	lsls	r3, r3, #16
 8007ac8:	431a      	orrs	r2, r3
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	061b      	lsls	r3, r3, #24
 8007ace:	431a      	orrs	r2, r3
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	071b      	lsls	r3, r3, #28
 8007ad4:	4925      	ldr	r1, [pc, #148]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d016      	beq.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	685a      	ldr	r2, [r3, #4]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	019b      	lsls	r3, r3, #6
 8007af2:	431a      	orrs	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	085b      	lsrs	r3, r3, #1
 8007afa:	3b01      	subs	r3, #1
 8007afc:	041b      	lsls	r3, r3, #16
 8007afe:	431a      	orrs	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	691b      	ldr	r3, [r3, #16]
 8007b04:	061b      	lsls	r3, r3, #24
 8007b06:	431a      	orrs	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	695b      	ldr	r3, [r3, #20]
 8007b0c:	071b      	lsls	r3, r3, #28
 8007b0e:	4917      	ldr	r1, [pc, #92]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007b10:	4313      	orrs	r3, r2
 8007b12:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007b16:	4b16      	ldr	r3, [pc, #88]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8007b18:	2201      	movs	r2, #1
 8007b1a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b1c:	f7fc f8ae 	bl	8003c7c <HAL_GetTick>
 8007b20:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b22:	e008      	b.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007b24:	f7fc f8aa 	bl	8003c7c <HAL_GetTick>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2c:	1ad3      	subs	r3, r2, r3
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d901      	bls.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b32:	2303      	movs	r3, #3
 8007b34:	e09f      	b.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b36:	4b0d      	ldr	r3, [pc, #52]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d0f0      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8007b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	f040 8095 	bne.w	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007b4a:	4b0a      	ldr	r3, [pc, #40]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b50:	f7fc f894 	bl	8003c7c <HAL_GetTick>
 8007b54:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007b56:	e00f      	b.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007b58:	f7fc f890 	bl	8003c7c <HAL_GetTick>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d908      	bls.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e085      	b.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007b6a:	bf00      	nop
 8007b6c:	40023800 	.word	0x40023800
 8007b70:	42470068 	.word	0x42470068
 8007b74:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007b78:	4b41      	ldr	r3, [pc, #260]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b84:	d0e8      	beq.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 0304 	and.w	r3, r3, #4
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d003      	beq.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d009      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d02b      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d127      	bne.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8007bae:	4b34      	ldr	r3, [pc, #208]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bb4:	0c1b      	lsrs	r3, r3, #16
 8007bb6:	f003 0303 	and.w	r3, r3, #3
 8007bba:	3301      	adds	r3, #1
 8007bbc:	005b      	lsls	r3, r3, #1
 8007bbe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	699a      	ldr	r2, [r3, #24]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	69db      	ldr	r3, [r3, #28]
 8007bc8:	019b      	lsls	r3, r3, #6
 8007bca:	431a      	orrs	r2, r3
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	085b      	lsrs	r3, r3, #1
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	041b      	lsls	r3, r3, #16
 8007bd4:	431a      	orrs	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bda:	061b      	lsls	r3, r3, #24
 8007bdc:	4928      	ldr	r1, [pc, #160]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007bde:	4313      	orrs	r3, r2
 8007be0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007be4:	4b26      	ldr	r3, [pc, #152]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007be6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bea:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	021b      	lsls	r3, r3, #8
 8007bf6:	4922      	ldr	r1, [pc, #136]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d01d      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c12:	d118      	bne.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007c14:	4b1a      	ldr	r3, [pc, #104]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c1a:	0e1b      	lsrs	r3, r3, #24
 8007c1c:	f003 030f 	and.w	r3, r3, #15
 8007c20:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	699a      	ldr	r2, [r3, #24]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	69db      	ldr	r3, [r3, #28]
 8007c2a:	019b      	lsls	r3, r3, #6
 8007c2c:	431a      	orrs	r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	085b      	lsrs	r3, r3, #1
 8007c34:	3b01      	subs	r3, #1
 8007c36:	041b      	lsls	r3, r3, #16
 8007c38:	431a      	orrs	r2, r3
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	061b      	lsls	r3, r3, #24
 8007c3e:	4910      	ldr	r1, [pc, #64]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007c40:	4313      	orrs	r3, r2
 8007c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007c46:	4b0f      	ldr	r3, [pc, #60]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8007c48:	2201      	movs	r2, #1
 8007c4a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007c4c:	f7fc f816 	bl	8003c7c <HAL_GetTick>
 8007c50:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007c52:	e008      	b.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007c54:	f7fc f812 	bl	8003c7c <HAL_GetTick>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	2b02      	cmp	r3, #2
 8007c60:	d901      	bls.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c62:	2303      	movs	r3, #3
 8007c64:	e007      	b.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007c66:	4b06      	ldr	r3, [pc, #24]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c72:	d1ef      	bne.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3730      	adds	r7, #48	; 0x30
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	40023800 	.word	0x40023800
 8007c84:	42470070 	.word	0x42470070

08007c88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c8c:	b0ae      	sub	sp, #184	; 0xb8
 8007c8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007c90:	2300      	movs	r3, #0
 8007c92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8007c96:	2300      	movs	r3, #0
 8007c98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007cae:	4bcb      	ldr	r3, [pc, #812]	; (8007fdc <HAL_RCC_GetSysClockFreq+0x354>)
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	f003 030c 	and.w	r3, r3, #12
 8007cb6:	2b0c      	cmp	r3, #12
 8007cb8:	f200 8204 	bhi.w	80080c4 <HAL_RCC_GetSysClockFreq+0x43c>
 8007cbc:	a201      	add	r2, pc, #4	; (adr r2, 8007cc4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8007cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc2:	bf00      	nop
 8007cc4:	08007cf9 	.word	0x08007cf9
 8007cc8:	080080c5 	.word	0x080080c5
 8007ccc:	080080c5 	.word	0x080080c5
 8007cd0:	080080c5 	.word	0x080080c5
 8007cd4:	08007d01 	.word	0x08007d01
 8007cd8:	080080c5 	.word	0x080080c5
 8007cdc:	080080c5 	.word	0x080080c5
 8007ce0:	080080c5 	.word	0x080080c5
 8007ce4:	08007d09 	.word	0x08007d09
 8007ce8:	080080c5 	.word	0x080080c5
 8007cec:	080080c5 	.word	0x080080c5
 8007cf0:	080080c5 	.word	0x080080c5
 8007cf4:	08007ef9 	.word	0x08007ef9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007cf8:	4bb9      	ldr	r3, [pc, #740]	; (8007fe0 <HAL_RCC_GetSysClockFreq+0x358>)
 8007cfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8007cfe:	e1e5      	b.n	80080cc <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d00:	4bb7      	ldr	r3, [pc, #732]	; (8007fe0 <HAL_RCC_GetSysClockFreq+0x358>)
 8007d02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007d06:	e1e1      	b.n	80080cc <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d08:	4bb4      	ldr	r3, [pc, #720]	; (8007fdc <HAL_RCC_GetSysClockFreq+0x354>)
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d14:	4bb1      	ldr	r3, [pc, #708]	; (8007fdc <HAL_RCC_GetSysClockFreq+0x354>)
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d071      	beq.n	8007e04 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d20:	4bae      	ldr	r3, [pc, #696]	; (8007fdc <HAL_RCC_GetSysClockFreq+0x354>)
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	099b      	lsrs	r3, r3, #6
 8007d26:	2200      	movs	r2, #0
 8007d28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d2c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8007d30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007d42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007d46:	4622      	mov	r2, r4
 8007d48:	462b      	mov	r3, r5
 8007d4a:	f04f 0000 	mov.w	r0, #0
 8007d4e:	f04f 0100 	mov.w	r1, #0
 8007d52:	0159      	lsls	r1, r3, #5
 8007d54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d58:	0150      	lsls	r0, r2, #5
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	4621      	mov	r1, r4
 8007d60:	1a51      	subs	r1, r2, r1
 8007d62:	6439      	str	r1, [r7, #64]	; 0x40
 8007d64:	4629      	mov	r1, r5
 8007d66:	eb63 0301 	sbc.w	r3, r3, r1
 8007d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8007d6c:	f04f 0200 	mov.w	r2, #0
 8007d70:	f04f 0300 	mov.w	r3, #0
 8007d74:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8007d78:	4649      	mov	r1, r9
 8007d7a:	018b      	lsls	r3, r1, #6
 8007d7c:	4641      	mov	r1, r8
 8007d7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007d82:	4641      	mov	r1, r8
 8007d84:	018a      	lsls	r2, r1, #6
 8007d86:	4641      	mov	r1, r8
 8007d88:	1a51      	subs	r1, r2, r1
 8007d8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007d8c:	4649      	mov	r1, r9
 8007d8e:	eb63 0301 	sbc.w	r3, r3, r1
 8007d92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d94:	f04f 0200 	mov.w	r2, #0
 8007d98:	f04f 0300 	mov.w	r3, #0
 8007d9c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8007da0:	4649      	mov	r1, r9
 8007da2:	00cb      	lsls	r3, r1, #3
 8007da4:	4641      	mov	r1, r8
 8007da6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007daa:	4641      	mov	r1, r8
 8007dac:	00ca      	lsls	r2, r1, #3
 8007dae:	4610      	mov	r0, r2
 8007db0:	4619      	mov	r1, r3
 8007db2:	4603      	mov	r3, r0
 8007db4:	4622      	mov	r2, r4
 8007db6:	189b      	adds	r3, r3, r2
 8007db8:	633b      	str	r3, [r7, #48]	; 0x30
 8007dba:	462b      	mov	r3, r5
 8007dbc:	460a      	mov	r2, r1
 8007dbe:	eb42 0303 	adc.w	r3, r2, r3
 8007dc2:	637b      	str	r3, [r7, #52]	; 0x34
 8007dc4:	f04f 0200 	mov.w	r2, #0
 8007dc8:	f04f 0300 	mov.w	r3, #0
 8007dcc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007dd0:	4629      	mov	r1, r5
 8007dd2:	028b      	lsls	r3, r1, #10
 8007dd4:	4621      	mov	r1, r4
 8007dd6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007dda:	4621      	mov	r1, r4
 8007ddc:	028a      	lsls	r2, r1, #10
 8007dde:	4610      	mov	r0, r2
 8007de0:	4619      	mov	r1, r3
 8007de2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007de6:	2200      	movs	r2, #0
 8007de8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007dec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007df0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007df4:	f7f8 ff78 	bl	8000ce8 <__aeabi_uldivmod>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e02:	e067      	b.n	8007ed4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e04:	4b75      	ldr	r3, [pc, #468]	; (8007fdc <HAL_RCC_GetSysClockFreq+0x354>)
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	099b      	lsrs	r3, r3, #6
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e10:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8007e14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e1e:	2300      	movs	r3, #0
 8007e20:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007e22:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8007e26:	4622      	mov	r2, r4
 8007e28:	462b      	mov	r3, r5
 8007e2a:	f04f 0000 	mov.w	r0, #0
 8007e2e:	f04f 0100 	mov.w	r1, #0
 8007e32:	0159      	lsls	r1, r3, #5
 8007e34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e38:	0150      	lsls	r0, r2, #5
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	4621      	mov	r1, r4
 8007e40:	1a51      	subs	r1, r2, r1
 8007e42:	62b9      	str	r1, [r7, #40]	; 0x28
 8007e44:	4629      	mov	r1, r5
 8007e46:	eb63 0301 	sbc.w	r3, r3, r1
 8007e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e4c:	f04f 0200 	mov.w	r2, #0
 8007e50:	f04f 0300 	mov.w	r3, #0
 8007e54:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8007e58:	4649      	mov	r1, r9
 8007e5a:	018b      	lsls	r3, r1, #6
 8007e5c:	4641      	mov	r1, r8
 8007e5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007e62:	4641      	mov	r1, r8
 8007e64:	018a      	lsls	r2, r1, #6
 8007e66:	4641      	mov	r1, r8
 8007e68:	ebb2 0a01 	subs.w	sl, r2, r1
 8007e6c:	4649      	mov	r1, r9
 8007e6e:	eb63 0b01 	sbc.w	fp, r3, r1
 8007e72:	f04f 0200 	mov.w	r2, #0
 8007e76:	f04f 0300 	mov.w	r3, #0
 8007e7a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007e7e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007e82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e86:	4692      	mov	sl, r2
 8007e88:	469b      	mov	fp, r3
 8007e8a:	4623      	mov	r3, r4
 8007e8c:	eb1a 0303 	adds.w	r3, sl, r3
 8007e90:	623b      	str	r3, [r7, #32]
 8007e92:	462b      	mov	r3, r5
 8007e94:	eb4b 0303 	adc.w	r3, fp, r3
 8007e98:	627b      	str	r3, [r7, #36]	; 0x24
 8007e9a:	f04f 0200 	mov.w	r2, #0
 8007e9e:	f04f 0300 	mov.w	r3, #0
 8007ea2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007ea6:	4629      	mov	r1, r5
 8007ea8:	028b      	lsls	r3, r1, #10
 8007eaa:	4621      	mov	r1, r4
 8007eac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007eb0:	4621      	mov	r1, r4
 8007eb2:	028a      	lsls	r2, r1, #10
 8007eb4:	4610      	mov	r0, r2
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	673b      	str	r3, [r7, #112]	; 0x70
 8007ec0:	677a      	str	r2, [r7, #116]	; 0x74
 8007ec2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007ec6:	f7f8 ff0f 	bl	8000ce8 <__aeabi_uldivmod>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	460b      	mov	r3, r1
 8007ece:	4613      	mov	r3, r2
 8007ed0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007ed4:	4b41      	ldr	r3, [pc, #260]	; (8007fdc <HAL_RCC_GetSysClockFreq+0x354>)
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	0c1b      	lsrs	r3, r3, #16
 8007eda:	f003 0303 	and.w	r3, r3, #3
 8007ede:	3301      	adds	r3, #1
 8007ee0:	005b      	lsls	r3, r3, #1
 8007ee2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8007ee6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007eea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ef2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007ef6:	e0e9      	b.n	80080cc <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ef8:	4b38      	ldr	r3, [pc, #224]	; (8007fdc <HAL_RCC_GetSysClockFreq+0x354>)
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007f04:	4b35      	ldr	r3, [pc, #212]	; (8007fdc <HAL_RCC_GetSysClockFreq+0x354>)
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d069      	beq.n	8007fe4 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f10:	4b32      	ldr	r3, [pc, #200]	; (8007fdc <HAL_RCC_GetSysClockFreq+0x354>)
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	099b      	lsrs	r3, r3, #6
 8007f16:	2200      	movs	r2, #0
 8007f18:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007f1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f22:	663b      	str	r3, [r7, #96]	; 0x60
 8007f24:	2300      	movs	r3, #0
 8007f26:	667b      	str	r3, [r7, #100]	; 0x64
 8007f28:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007f2c:	4622      	mov	r2, r4
 8007f2e:	462b      	mov	r3, r5
 8007f30:	f04f 0000 	mov.w	r0, #0
 8007f34:	f04f 0100 	mov.w	r1, #0
 8007f38:	0159      	lsls	r1, r3, #5
 8007f3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f3e:	0150      	lsls	r0, r2, #5
 8007f40:	4602      	mov	r2, r0
 8007f42:	460b      	mov	r3, r1
 8007f44:	4621      	mov	r1, r4
 8007f46:	1a51      	subs	r1, r2, r1
 8007f48:	61b9      	str	r1, [r7, #24]
 8007f4a:	4629      	mov	r1, r5
 8007f4c:	eb63 0301 	sbc.w	r3, r3, r1
 8007f50:	61fb      	str	r3, [r7, #28]
 8007f52:	f04f 0200 	mov.w	r2, #0
 8007f56:	f04f 0300 	mov.w	r3, #0
 8007f5a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007f5e:	4659      	mov	r1, fp
 8007f60:	018b      	lsls	r3, r1, #6
 8007f62:	4651      	mov	r1, sl
 8007f64:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007f68:	4651      	mov	r1, sl
 8007f6a:	018a      	lsls	r2, r1, #6
 8007f6c:	4651      	mov	r1, sl
 8007f6e:	ebb2 0801 	subs.w	r8, r2, r1
 8007f72:	4659      	mov	r1, fp
 8007f74:	eb63 0901 	sbc.w	r9, r3, r1
 8007f78:	f04f 0200 	mov.w	r2, #0
 8007f7c:	f04f 0300 	mov.w	r3, #0
 8007f80:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f84:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f88:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f8c:	4690      	mov	r8, r2
 8007f8e:	4699      	mov	r9, r3
 8007f90:	4623      	mov	r3, r4
 8007f92:	eb18 0303 	adds.w	r3, r8, r3
 8007f96:	613b      	str	r3, [r7, #16]
 8007f98:	462b      	mov	r3, r5
 8007f9a:	eb49 0303 	adc.w	r3, r9, r3
 8007f9e:	617b      	str	r3, [r7, #20]
 8007fa0:	f04f 0200 	mov.w	r2, #0
 8007fa4:	f04f 0300 	mov.w	r3, #0
 8007fa8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007fac:	4629      	mov	r1, r5
 8007fae:	028b      	lsls	r3, r1, #10
 8007fb0:	4621      	mov	r1, r4
 8007fb2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007fb6:	4621      	mov	r1, r4
 8007fb8:	028a      	lsls	r2, r1, #10
 8007fba:	4610      	mov	r0, r2
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	65bb      	str	r3, [r7, #88]	; 0x58
 8007fc6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007fc8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007fcc:	f7f8 fe8c 	bl	8000ce8 <__aeabi_uldivmod>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007fda:	e063      	b.n	80080a4 <HAL_RCC_GetSysClockFreq+0x41c>
 8007fdc:	40023800 	.word	0x40023800
 8007fe0:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007fe4:	4b3d      	ldr	r3, [pc, #244]	; (80080dc <HAL_RCC_GetSysClockFreq+0x454>)
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	099b      	lsrs	r3, r3, #6
 8007fea:	2200      	movs	r2, #0
 8007fec:	4618      	mov	r0, r3
 8007fee:	4611      	mov	r1, r2
 8007ff0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007ff4:	653b      	str	r3, [r7, #80]	; 0x50
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	657b      	str	r3, [r7, #84]	; 0x54
 8007ffa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8007ffe:	4642      	mov	r2, r8
 8008000:	464b      	mov	r3, r9
 8008002:	f04f 0000 	mov.w	r0, #0
 8008006:	f04f 0100 	mov.w	r1, #0
 800800a:	0159      	lsls	r1, r3, #5
 800800c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008010:	0150      	lsls	r0, r2, #5
 8008012:	4602      	mov	r2, r0
 8008014:	460b      	mov	r3, r1
 8008016:	4641      	mov	r1, r8
 8008018:	1a51      	subs	r1, r2, r1
 800801a:	60b9      	str	r1, [r7, #8]
 800801c:	4649      	mov	r1, r9
 800801e:	eb63 0301 	sbc.w	r3, r3, r1
 8008022:	60fb      	str	r3, [r7, #12]
 8008024:	f04f 0200 	mov.w	r2, #0
 8008028:	f04f 0300 	mov.w	r3, #0
 800802c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008030:	4659      	mov	r1, fp
 8008032:	018b      	lsls	r3, r1, #6
 8008034:	4651      	mov	r1, sl
 8008036:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800803a:	4651      	mov	r1, sl
 800803c:	018a      	lsls	r2, r1, #6
 800803e:	4651      	mov	r1, sl
 8008040:	1a54      	subs	r4, r2, r1
 8008042:	4659      	mov	r1, fp
 8008044:	eb63 0501 	sbc.w	r5, r3, r1
 8008048:	f04f 0200 	mov.w	r2, #0
 800804c:	f04f 0300 	mov.w	r3, #0
 8008050:	00eb      	lsls	r3, r5, #3
 8008052:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008056:	00e2      	lsls	r2, r4, #3
 8008058:	4614      	mov	r4, r2
 800805a:	461d      	mov	r5, r3
 800805c:	4643      	mov	r3, r8
 800805e:	18e3      	adds	r3, r4, r3
 8008060:	603b      	str	r3, [r7, #0]
 8008062:	464b      	mov	r3, r9
 8008064:	eb45 0303 	adc.w	r3, r5, r3
 8008068:	607b      	str	r3, [r7, #4]
 800806a:	f04f 0200 	mov.w	r2, #0
 800806e:	f04f 0300 	mov.w	r3, #0
 8008072:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008076:	4629      	mov	r1, r5
 8008078:	028b      	lsls	r3, r1, #10
 800807a:	4621      	mov	r1, r4
 800807c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008080:	4621      	mov	r1, r4
 8008082:	028a      	lsls	r2, r1, #10
 8008084:	4610      	mov	r0, r2
 8008086:	4619      	mov	r1, r3
 8008088:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800808c:	2200      	movs	r2, #0
 800808e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008090:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008092:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008096:	f7f8 fe27 	bl	8000ce8 <__aeabi_uldivmod>
 800809a:	4602      	mov	r2, r0
 800809c:	460b      	mov	r3, r1
 800809e:	4613      	mov	r3, r2
 80080a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80080a4:	4b0d      	ldr	r3, [pc, #52]	; (80080dc <HAL_RCC_GetSysClockFreq+0x454>)
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	0f1b      	lsrs	r3, r3, #28
 80080aa:	f003 0307 	and.w	r3, r3, #7
 80080ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80080b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80080b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80080ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80080be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80080c2:	e003      	b.n	80080cc <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80080c4:	4b06      	ldr	r3, [pc, #24]	; (80080e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80080c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80080ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80080cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	37b8      	adds	r7, #184	; 0xb8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080da:	bf00      	nop
 80080dc:	40023800 	.word	0x40023800
 80080e0:	00f42400 	.word	0x00f42400

080080e4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b086      	sub	sp, #24
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d101      	bne.n	80080f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	e28d      	b.n	8008612 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f003 0301 	and.w	r3, r3, #1
 80080fe:	2b00      	cmp	r3, #0
 8008100:	f000 8083 	beq.w	800820a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008104:	4b94      	ldr	r3, [pc, #592]	; (8008358 <HAL_RCC_OscConfig+0x274>)
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	f003 030c 	and.w	r3, r3, #12
 800810c:	2b04      	cmp	r3, #4
 800810e:	d019      	beq.n	8008144 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008110:	4b91      	ldr	r3, [pc, #580]	; (8008358 <HAL_RCC_OscConfig+0x274>)
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008118:	2b08      	cmp	r3, #8
 800811a:	d106      	bne.n	800812a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800811c:	4b8e      	ldr	r3, [pc, #568]	; (8008358 <HAL_RCC_OscConfig+0x274>)
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008124:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008128:	d00c      	beq.n	8008144 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800812a:	4b8b      	ldr	r3, [pc, #556]	; (8008358 <HAL_RCC_OscConfig+0x274>)
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008132:	2b0c      	cmp	r3, #12
 8008134:	d112      	bne.n	800815c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008136:	4b88      	ldr	r3, [pc, #544]	; (8008358 <HAL_RCC_OscConfig+0x274>)
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800813e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008142:	d10b      	bne.n	800815c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008144:	4b84      	ldr	r3, [pc, #528]	; (8008358 <HAL_RCC_OscConfig+0x274>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800814c:	2b00      	cmp	r3, #0
 800814e:	d05b      	beq.n	8008208 <HAL_RCC_OscConfig+0x124>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d157      	bne.n	8008208 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	e25a      	b.n	8008612 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008164:	d106      	bne.n	8008174 <HAL_RCC_OscConfig+0x90>
 8008166:	4b7c      	ldr	r3, [pc, #496]	; (8008358 <HAL_RCC_OscConfig+0x274>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a7b      	ldr	r2, [pc, #492]	; (8008358 <HAL_RCC_OscConfig+0x274>)
 800816c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008170:	6013      	str	r3, [r2, #0]
 8008172:	e01d      	b.n	80081b0 <HAL_RCC_OscConfig+0xcc>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800817c:	d10c      	bne.n	8008198 <HAL_RCC_OscConfig+0xb4>
 800817e:	4b76      	ldr	r3, [pc, #472]	; (8008358 <HAL_RCC_OscConfig+0x274>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a75      	ldr	r2, [pc, #468]	; (8008358 <HAL_RCC_OscConfig+0x274>)
 8008184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008188:	6013      	str	r3, [r2, #0]
 800818a:	4b73      	ldr	r3, [pc, #460]	; (8008358 <HAL_RCC_OscConfig+0x274>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a72      	ldr	r2, [pc, #456]	; (8008358 <HAL_RCC_OscConfig+0x274>)
 8008190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008194:	6013      	str	r3, [r2, #0]
 8008196:	e00b      	b.n	80081b0 <HAL_RCC_OscConfig+0xcc>
 8008198:	4b6f      	ldr	r3, [pc, #444]	; (8008358 <HAL_RCC_OscConfig+0x274>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a6e      	ldr	r2, [pc, #440]	; (8008358 <HAL_RCC_OscConfig+0x274>)
 800819e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081a2:	6013      	str	r3, [r2, #0]
 80081a4:	4b6c      	ldr	r3, [pc, #432]	; (8008358 <HAL_RCC_OscConfig+0x274>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a6b      	ldr	r2, [pc, #428]	; (8008358 <HAL_RCC_OscConfig+0x274>)
 80081aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80081ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d013      	beq.n	80081e0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081b8:	f7fb fd60 	bl	8003c7c <HAL_GetTick>
 80081bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081be:	e008      	b.n	80081d2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80081c0:	f7fb fd5c 	bl	8003c7c <HAL_GetTick>
 80081c4:	4602      	mov	r2, r0
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	1ad3      	subs	r3, r2, r3
 80081ca:	2b64      	cmp	r3, #100	; 0x64
 80081cc:	d901      	bls.n	80081d2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80081ce:	2303      	movs	r3, #3
 80081d0:	e21f      	b.n	8008612 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081d2:	4b61      	ldr	r3, [pc, #388]	; (8008358 <HAL_RCC_OscConfig+0x274>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d0f0      	beq.n	80081c0 <HAL_RCC_OscConfig+0xdc>
 80081de:	e014      	b.n	800820a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081e0:	f7fb fd4c 	bl	8003c7c <HAL_GetTick>
 80081e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80081e6:	e008      	b.n	80081fa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80081e8:	f7fb fd48 	bl	8003c7c <HAL_GetTick>
 80081ec:	4602      	mov	r2, r0
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	2b64      	cmp	r3, #100	; 0x64
 80081f4:	d901      	bls.n	80081fa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80081f6:	2303      	movs	r3, #3
 80081f8:	e20b      	b.n	8008612 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80081fa:	4b57      	ldr	r3, [pc, #348]	; (8008358 <HAL_RCC_OscConfig+0x274>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1f0      	bne.n	80081e8 <HAL_RCC_OscConfig+0x104>
 8008206:	e000      	b.n	800820a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 0302 	and.w	r3, r3, #2
 8008212:	2b00      	cmp	r3, #0
 8008214:	d06f      	beq.n	80082f6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008216:	4b50      	ldr	r3, [pc, #320]	; (8008358 <HAL_RCC_OscConfig+0x274>)
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	f003 030c 	and.w	r3, r3, #12
 800821e:	2b00      	cmp	r3, #0
 8008220:	d017      	beq.n	8008252 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008222:	4b4d      	ldr	r3, [pc, #308]	; (8008358 <HAL_RCC_OscConfig+0x274>)
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800822a:	2b08      	cmp	r3, #8
 800822c:	d105      	bne.n	800823a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800822e:	4b4a      	ldr	r3, [pc, #296]	; (8008358 <HAL_RCC_OscConfig+0x274>)
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00b      	beq.n	8008252 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800823a:	4b47      	ldr	r3, [pc, #284]	; (8008358 <HAL_RCC_OscConfig+0x274>)
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008242:	2b0c      	cmp	r3, #12
 8008244:	d11c      	bne.n	8008280 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008246:	4b44      	ldr	r3, [pc, #272]	; (8008358 <HAL_RCC_OscConfig+0x274>)
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800824e:	2b00      	cmp	r3, #0
 8008250:	d116      	bne.n	8008280 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008252:	4b41      	ldr	r3, [pc, #260]	; (8008358 <HAL_RCC_OscConfig+0x274>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f003 0302 	and.w	r3, r3, #2
 800825a:	2b00      	cmp	r3, #0
 800825c:	d005      	beq.n	800826a <HAL_RCC_OscConfig+0x186>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	2b01      	cmp	r3, #1
 8008264:	d001      	beq.n	800826a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e1d3      	b.n	8008612 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800826a:	4b3b      	ldr	r3, [pc, #236]	; (8008358 <HAL_RCC_OscConfig+0x274>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	00db      	lsls	r3, r3, #3
 8008278:	4937      	ldr	r1, [pc, #220]	; (8008358 <HAL_RCC_OscConfig+0x274>)
 800827a:	4313      	orrs	r3, r2
 800827c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800827e:	e03a      	b.n	80082f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d020      	beq.n	80082ca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008288:	4b34      	ldr	r3, [pc, #208]	; (800835c <HAL_RCC_OscConfig+0x278>)
 800828a:	2201      	movs	r2, #1
 800828c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800828e:	f7fb fcf5 	bl	8003c7c <HAL_GetTick>
 8008292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008294:	e008      	b.n	80082a8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008296:	f7fb fcf1 	bl	8003c7c <HAL_GetTick>
 800829a:	4602      	mov	r2, r0
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	1ad3      	subs	r3, r2, r3
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d901      	bls.n	80082a8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80082a4:	2303      	movs	r3, #3
 80082a6:	e1b4      	b.n	8008612 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082a8:	4b2b      	ldr	r3, [pc, #172]	; (8008358 <HAL_RCC_OscConfig+0x274>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f003 0302 	and.w	r3, r3, #2
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d0f0      	beq.n	8008296 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082b4:	4b28      	ldr	r3, [pc, #160]	; (8008358 <HAL_RCC_OscConfig+0x274>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	00db      	lsls	r3, r3, #3
 80082c2:	4925      	ldr	r1, [pc, #148]	; (8008358 <HAL_RCC_OscConfig+0x274>)
 80082c4:	4313      	orrs	r3, r2
 80082c6:	600b      	str	r3, [r1, #0]
 80082c8:	e015      	b.n	80082f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082ca:	4b24      	ldr	r3, [pc, #144]	; (800835c <HAL_RCC_OscConfig+0x278>)
 80082cc:	2200      	movs	r2, #0
 80082ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082d0:	f7fb fcd4 	bl	8003c7c <HAL_GetTick>
 80082d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80082d6:	e008      	b.n	80082ea <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082d8:	f7fb fcd0 	bl	8003c7c <HAL_GetTick>
 80082dc:	4602      	mov	r2, r0
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	1ad3      	subs	r3, r2, r3
 80082e2:	2b02      	cmp	r3, #2
 80082e4:	d901      	bls.n	80082ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80082e6:	2303      	movs	r3, #3
 80082e8:	e193      	b.n	8008612 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80082ea:	4b1b      	ldr	r3, [pc, #108]	; (8008358 <HAL_RCC_OscConfig+0x274>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f003 0302 	and.w	r3, r3, #2
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1f0      	bne.n	80082d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 0308 	and.w	r3, r3, #8
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d036      	beq.n	8008370 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	695b      	ldr	r3, [r3, #20]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d016      	beq.n	8008338 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800830a:	4b15      	ldr	r3, [pc, #84]	; (8008360 <HAL_RCC_OscConfig+0x27c>)
 800830c:	2201      	movs	r2, #1
 800830e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008310:	f7fb fcb4 	bl	8003c7c <HAL_GetTick>
 8008314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008316:	e008      	b.n	800832a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008318:	f7fb fcb0 	bl	8003c7c <HAL_GetTick>
 800831c:	4602      	mov	r2, r0
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	1ad3      	subs	r3, r2, r3
 8008322:	2b02      	cmp	r3, #2
 8008324:	d901      	bls.n	800832a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8008326:	2303      	movs	r3, #3
 8008328:	e173      	b.n	8008612 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800832a:	4b0b      	ldr	r3, [pc, #44]	; (8008358 <HAL_RCC_OscConfig+0x274>)
 800832c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800832e:	f003 0302 	and.w	r3, r3, #2
 8008332:	2b00      	cmp	r3, #0
 8008334:	d0f0      	beq.n	8008318 <HAL_RCC_OscConfig+0x234>
 8008336:	e01b      	b.n	8008370 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008338:	4b09      	ldr	r3, [pc, #36]	; (8008360 <HAL_RCC_OscConfig+0x27c>)
 800833a:	2200      	movs	r2, #0
 800833c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800833e:	f7fb fc9d 	bl	8003c7c <HAL_GetTick>
 8008342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008344:	e00e      	b.n	8008364 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008346:	f7fb fc99 	bl	8003c7c <HAL_GetTick>
 800834a:	4602      	mov	r2, r0
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	2b02      	cmp	r3, #2
 8008352:	d907      	bls.n	8008364 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008354:	2303      	movs	r3, #3
 8008356:	e15c      	b.n	8008612 <HAL_RCC_OscConfig+0x52e>
 8008358:	40023800 	.word	0x40023800
 800835c:	42470000 	.word	0x42470000
 8008360:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008364:	4b8a      	ldr	r3, [pc, #552]	; (8008590 <HAL_RCC_OscConfig+0x4ac>)
 8008366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008368:	f003 0302 	and.w	r3, r3, #2
 800836c:	2b00      	cmp	r3, #0
 800836e:	d1ea      	bne.n	8008346 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f003 0304 	and.w	r3, r3, #4
 8008378:	2b00      	cmp	r3, #0
 800837a:	f000 8097 	beq.w	80084ac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800837e:	2300      	movs	r3, #0
 8008380:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008382:	4b83      	ldr	r3, [pc, #524]	; (8008590 <HAL_RCC_OscConfig+0x4ac>)
 8008384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800838a:	2b00      	cmp	r3, #0
 800838c:	d10f      	bne.n	80083ae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800838e:	2300      	movs	r3, #0
 8008390:	60bb      	str	r3, [r7, #8]
 8008392:	4b7f      	ldr	r3, [pc, #508]	; (8008590 <HAL_RCC_OscConfig+0x4ac>)
 8008394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008396:	4a7e      	ldr	r2, [pc, #504]	; (8008590 <HAL_RCC_OscConfig+0x4ac>)
 8008398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800839c:	6413      	str	r3, [r2, #64]	; 0x40
 800839e:	4b7c      	ldr	r3, [pc, #496]	; (8008590 <HAL_RCC_OscConfig+0x4ac>)
 80083a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083a6:	60bb      	str	r3, [r7, #8]
 80083a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80083aa:	2301      	movs	r3, #1
 80083ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083ae:	4b79      	ldr	r3, [pc, #484]	; (8008594 <HAL_RCC_OscConfig+0x4b0>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d118      	bne.n	80083ec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80083ba:	4b76      	ldr	r3, [pc, #472]	; (8008594 <HAL_RCC_OscConfig+0x4b0>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a75      	ldr	r2, [pc, #468]	; (8008594 <HAL_RCC_OscConfig+0x4b0>)
 80083c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80083c6:	f7fb fc59 	bl	8003c7c <HAL_GetTick>
 80083ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083cc:	e008      	b.n	80083e0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083ce:	f7fb fc55 	bl	8003c7c <HAL_GetTick>
 80083d2:	4602      	mov	r2, r0
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	1ad3      	subs	r3, r2, r3
 80083d8:	2b02      	cmp	r3, #2
 80083da:	d901      	bls.n	80083e0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80083dc:	2303      	movs	r3, #3
 80083de:	e118      	b.n	8008612 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083e0:	4b6c      	ldr	r3, [pc, #432]	; (8008594 <HAL_RCC_OscConfig+0x4b0>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d0f0      	beq.n	80083ce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d106      	bne.n	8008402 <HAL_RCC_OscConfig+0x31e>
 80083f4:	4b66      	ldr	r3, [pc, #408]	; (8008590 <HAL_RCC_OscConfig+0x4ac>)
 80083f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083f8:	4a65      	ldr	r2, [pc, #404]	; (8008590 <HAL_RCC_OscConfig+0x4ac>)
 80083fa:	f043 0301 	orr.w	r3, r3, #1
 80083fe:	6713      	str	r3, [r2, #112]	; 0x70
 8008400:	e01c      	b.n	800843c <HAL_RCC_OscConfig+0x358>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	2b05      	cmp	r3, #5
 8008408:	d10c      	bne.n	8008424 <HAL_RCC_OscConfig+0x340>
 800840a:	4b61      	ldr	r3, [pc, #388]	; (8008590 <HAL_RCC_OscConfig+0x4ac>)
 800840c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800840e:	4a60      	ldr	r2, [pc, #384]	; (8008590 <HAL_RCC_OscConfig+0x4ac>)
 8008410:	f043 0304 	orr.w	r3, r3, #4
 8008414:	6713      	str	r3, [r2, #112]	; 0x70
 8008416:	4b5e      	ldr	r3, [pc, #376]	; (8008590 <HAL_RCC_OscConfig+0x4ac>)
 8008418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800841a:	4a5d      	ldr	r2, [pc, #372]	; (8008590 <HAL_RCC_OscConfig+0x4ac>)
 800841c:	f043 0301 	orr.w	r3, r3, #1
 8008420:	6713      	str	r3, [r2, #112]	; 0x70
 8008422:	e00b      	b.n	800843c <HAL_RCC_OscConfig+0x358>
 8008424:	4b5a      	ldr	r3, [pc, #360]	; (8008590 <HAL_RCC_OscConfig+0x4ac>)
 8008426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008428:	4a59      	ldr	r2, [pc, #356]	; (8008590 <HAL_RCC_OscConfig+0x4ac>)
 800842a:	f023 0301 	bic.w	r3, r3, #1
 800842e:	6713      	str	r3, [r2, #112]	; 0x70
 8008430:	4b57      	ldr	r3, [pc, #348]	; (8008590 <HAL_RCC_OscConfig+0x4ac>)
 8008432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008434:	4a56      	ldr	r2, [pc, #344]	; (8008590 <HAL_RCC_OscConfig+0x4ac>)
 8008436:	f023 0304 	bic.w	r3, r3, #4
 800843a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d015      	beq.n	8008470 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008444:	f7fb fc1a 	bl	8003c7c <HAL_GetTick>
 8008448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800844a:	e00a      	b.n	8008462 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800844c:	f7fb fc16 	bl	8003c7c <HAL_GetTick>
 8008450:	4602      	mov	r2, r0
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	1ad3      	subs	r3, r2, r3
 8008456:	f241 3288 	movw	r2, #5000	; 0x1388
 800845a:	4293      	cmp	r3, r2
 800845c:	d901      	bls.n	8008462 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800845e:	2303      	movs	r3, #3
 8008460:	e0d7      	b.n	8008612 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008462:	4b4b      	ldr	r3, [pc, #300]	; (8008590 <HAL_RCC_OscConfig+0x4ac>)
 8008464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008466:	f003 0302 	and.w	r3, r3, #2
 800846a:	2b00      	cmp	r3, #0
 800846c:	d0ee      	beq.n	800844c <HAL_RCC_OscConfig+0x368>
 800846e:	e014      	b.n	800849a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008470:	f7fb fc04 	bl	8003c7c <HAL_GetTick>
 8008474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008476:	e00a      	b.n	800848e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008478:	f7fb fc00 	bl	8003c7c <HAL_GetTick>
 800847c:	4602      	mov	r2, r0
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	f241 3288 	movw	r2, #5000	; 0x1388
 8008486:	4293      	cmp	r3, r2
 8008488:	d901      	bls.n	800848e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800848a:	2303      	movs	r3, #3
 800848c:	e0c1      	b.n	8008612 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800848e:	4b40      	ldr	r3, [pc, #256]	; (8008590 <HAL_RCC_OscConfig+0x4ac>)
 8008490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008492:	f003 0302 	and.w	r3, r3, #2
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1ee      	bne.n	8008478 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800849a:	7dfb      	ldrb	r3, [r7, #23]
 800849c:	2b01      	cmp	r3, #1
 800849e:	d105      	bne.n	80084ac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80084a0:	4b3b      	ldr	r3, [pc, #236]	; (8008590 <HAL_RCC_OscConfig+0x4ac>)
 80084a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a4:	4a3a      	ldr	r2, [pc, #232]	; (8008590 <HAL_RCC_OscConfig+0x4ac>)
 80084a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	699b      	ldr	r3, [r3, #24]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f000 80ad 	beq.w	8008610 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80084b6:	4b36      	ldr	r3, [pc, #216]	; (8008590 <HAL_RCC_OscConfig+0x4ac>)
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	f003 030c 	and.w	r3, r3, #12
 80084be:	2b08      	cmp	r3, #8
 80084c0:	d060      	beq.n	8008584 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	699b      	ldr	r3, [r3, #24]
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	d145      	bne.n	8008556 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084ca:	4b33      	ldr	r3, [pc, #204]	; (8008598 <HAL_RCC_OscConfig+0x4b4>)
 80084cc:	2200      	movs	r2, #0
 80084ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084d0:	f7fb fbd4 	bl	8003c7c <HAL_GetTick>
 80084d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084d6:	e008      	b.n	80084ea <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084d8:	f7fb fbd0 	bl	8003c7c <HAL_GetTick>
 80084dc:	4602      	mov	r2, r0
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d901      	bls.n	80084ea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80084e6:	2303      	movs	r3, #3
 80084e8:	e093      	b.n	8008612 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084ea:	4b29      	ldr	r3, [pc, #164]	; (8008590 <HAL_RCC_OscConfig+0x4ac>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d1f0      	bne.n	80084d8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	69da      	ldr	r2, [r3, #28]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a1b      	ldr	r3, [r3, #32]
 80084fe:	431a      	orrs	r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008504:	019b      	lsls	r3, r3, #6
 8008506:	431a      	orrs	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800850c:	085b      	lsrs	r3, r3, #1
 800850e:	3b01      	subs	r3, #1
 8008510:	041b      	lsls	r3, r3, #16
 8008512:	431a      	orrs	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008518:	061b      	lsls	r3, r3, #24
 800851a:	431a      	orrs	r2, r3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008520:	071b      	lsls	r3, r3, #28
 8008522:	491b      	ldr	r1, [pc, #108]	; (8008590 <HAL_RCC_OscConfig+0x4ac>)
 8008524:	4313      	orrs	r3, r2
 8008526:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008528:	4b1b      	ldr	r3, [pc, #108]	; (8008598 <HAL_RCC_OscConfig+0x4b4>)
 800852a:	2201      	movs	r2, #1
 800852c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800852e:	f7fb fba5 	bl	8003c7c <HAL_GetTick>
 8008532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008534:	e008      	b.n	8008548 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008536:	f7fb fba1 	bl	8003c7c <HAL_GetTick>
 800853a:	4602      	mov	r2, r0
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	1ad3      	subs	r3, r2, r3
 8008540:	2b02      	cmp	r3, #2
 8008542:	d901      	bls.n	8008548 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008544:	2303      	movs	r3, #3
 8008546:	e064      	b.n	8008612 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008548:	4b11      	ldr	r3, [pc, #68]	; (8008590 <HAL_RCC_OscConfig+0x4ac>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008550:	2b00      	cmp	r3, #0
 8008552:	d0f0      	beq.n	8008536 <HAL_RCC_OscConfig+0x452>
 8008554:	e05c      	b.n	8008610 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008556:	4b10      	ldr	r3, [pc, #64]	; (8008598 <HAL_RCC_OscConfig+0x4b4>)
 8008558:	2200      	movs	r2, #0
 800855a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800855c:	f7fb fb8e 	bl	8003c7c <HAL_GetTick>
 8008560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008562:	e008      	b.n	8008576 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008564:	f7fb fb8a 	bl	8003c7c <HAL_GetTick>
 8008568:	4602      	mov	r2, r0
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	1ad3      	subs	r3, r2, r3
 800856e:	2b02      	cmp	r3, #2
 8008570:	d901      	bls.n	8008576 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008572:	2303      	movs	r3, #3
 8008574:	e04d      	b.n	8008612 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008576:	4b06      	ldr	r3, [pc, #24]	; (8008590 <HAL_RCC_OscConfig+0x4ac>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800857e:	2b00      	cmp	r3, #0
 8008580:	d1f0      	bne.n	8008564 <HAL_RCC_OscConfig+0x480>
 8008582:	e045      	b.n	8008610 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	699b      	ldr	r3, [r3, #24]
 8008588:	2b01      	cmp	r3, #1
 800858a:	d107      	bne.n	800859c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	e040      	b.n	8008612 <HAL_RCC_OscConfig+0x52e>
 8008590:	40023800 	.word	0x40023800
 8008594:	40007000 	.word	0x40007000
 8008598:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800859c:	4b1f      	ldr	r3, [pc, #124]	; (800861c <HAL_RCC_OscConfig+0x538>)
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	699b      	ldr	r3, [r3, #24]
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d030      	beq.n	800860c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d129      	bne.n	800860c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d122      	bne.n	800860c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80085c6:	68fa      	ldr	r2, [r7, #12]
 80085c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80085cc:	4013      	ands	r3, r2
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80085d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d119      	bne.n	800860c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e2:	085b      	lsrs	r3, r3, #1
 80085e4:	3b01      	subs	r3, #1
 80085e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d10f      	bne.n	800860c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d107      	bne.n	800860c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008606:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008608:	429a      	cmp	r2, r3
 800860a:	d001      	beq.n	8008610 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	e000      	b.n	8008612 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3718      	adds	r7, #24
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	40023800 	.word	0x40023800

08008620 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d101      	bne.n	8008632 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	e022      	b.n	8008678 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008638:	b2db      	uxtb	r3, r3
 800863a:	2b00      	cmp	r3, #0
 800863c:	d105      	bne.n	800864a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f7fa f805 	bl	8002654 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2203      	movs	r2, #3
 800864e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 f814 	bl	8008680 <HAL_SD_InitCard>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d001      	beq.n	8008662 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	e00a      	b.n	8008678 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2201      	movs	r2, #1
 8008672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008676:	2300      	movs	r3, #0
}
 8008678:	4618      	mov	r0, r3
 800867a:	3708      	adds	r7, #8
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008680:	b5b0      	push	{r4, r5, r7, lr}
 8008682:	b08e      	sub	sp, #56	; 0x38
 8008684:	af04      	add	r7, sp, #16
 8008686:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008688:	2300      	movs	r3, #0
 800868a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800868c:	2300      	movs	r3, #0
 800868e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008690:	2300      	movs	r3, #0
 8008692:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008694:	2300      	movs	r3, #0
 8008696:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008698:	2300      	movs	r3, #0
 800869a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800869c:	2376      	movs	r3, #118	; 0x76
 800869e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681d      	ldr	r5, [r3, #0]
 80086a4:	466c      	mov	r4, sp
 80086a6:	f107 0314 	add.w	r3, r7, #20
 80086aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80086ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80086b2:	f107 0308 	add.w	r3, r7, #8
 80086b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80086b8:	4628      	mov	r0, r5
 80086ba:	f002 fc5f 	bl	800af7c <SDIO_Init>
 80086be:	4603      	mov	r3, r0
 80086c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80086c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d001      	beq.n	80086d0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	e04f      	b.n	8008770 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80086d0:	4b29      	ldr	r3, [pc, #164]	; (8008778 <HAL_SD_InitCard+0xf8>)
 80086d2:	2200      	movs	r2, #0
 80086d4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4618      	mov	r0, r3
 80086dc:	f002 fc97 	bl	800b00e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80086e0:	4b25      	ldr	r3, [pc, #148]	; (8008778 <HAL_SD_InitCard+0xf8>)
 80086e2:	2201      	movs	r2, #1
 80086e4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80086e6:	2002      	movs	r0, #2
 80086e8:	f7fb fad4 	bl	8003c94 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f001 fab9 	bl	8009c64 <SD_PowerON>
 80086f2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086f4:	6a3b      	ldr	r3, [r7, #32]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00b      	beq.n	8008712 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2201      	movs	r2, #1
 80086fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008706:	6a3b      	ldr	r3, [r7, #32]
 8008708:	431a      	orrs	r2, r3
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	e02e      	b.n	8008770 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f001 f9d8 	bl	8009ac8 <SD_InitCard>
 8008718:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800871a:	6a3b      	ldr	r3, [r7, #32]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d00b      	beq.n	8008738 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800872c:	6a3b      	ldr	r3, [r7, #32]
 800872e:	431a      	orrs	r2, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	e01b      	b.n	8008770 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008740:	4618      	mov	r0, r3
 8008742:	f002 fcf6 	bl	800b132 <SDMMC_CmdBlockLength>
 8008746:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008748:	6a3b      	ldr	r3, [r7, #32]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d00f      	beq.n	800876e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a0a      	ldr	r2, [pc, #40]	; (800877c <HAL_SD_InitCard+0xfc>)
 8008754:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800875a:	6a3b      	ldr	r3, [r7, #32]
 800875c:	431a      	orrs	r2, r3
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2201      	movs	r2, #1
 8008766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	e000      	b.n	8008770 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800876e:	2300      	movs	r3, #0
}
 8008770:	4618      	mov	r0, r3
 8008772:	3728      	adds	r7, #40	; 0x28
 8008774:	46bd      	mov	sp, r7
 8008776:	bdb0      	pop	{r4, r5, r7, pc}
 8008778:	422580a0 	.word	0x422580a0
 800877c:	004005ff 	.word	0x004005ff

08008780 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b092      	sub	sp, #72	; 0x48
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]
 800878c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800878e:	f7fb fa75 	bl	8003c7c <HAL_GetTick>
 8008792:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d107      	bne.n	80087b2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	e1bd      	b.n	8008b2e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	f040 81b0 	bne.w	8008b20 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2200      	movs	r2, #0
 80087c4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80087c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	441a      	add	r2, r3
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d907      	bls.n	80087e4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e1a4      	b.n	8008b2e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2203      	movs	r2, #3
 80087e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2200      	movs	r2, #0
 80087f2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d002      	beq.n	8008802 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80087fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fe:	025b      	lsls	r3, r3, #9
 8008800:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008802:	f04f 33ff 	mov.w	r3, #4294967295
 8008806:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	025b      	lsls	r3, r3, #9
 800880c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800880e:	2390      	movs	r3, #144	; 0x90
 8008810:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008812:	2302      	movs	r3, #2
 8008814:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008816:	2300      	movs	r3, #0
 8008818:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800881a:	2301      	movs	r3, #1
 800881c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f107 0214 	add.w	r2, r7, #20
 8008826:	4611      	mov	r1, r2
 8008828:	4618      	mov	r0, r3
 800882a:	f002 fc56 	bl	800b0da <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	2b01      	cmp	r3, #1
 8008832:	d90a      	bls.n	800884a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2202      	movs	r2, #2
 8008838:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008840:	4618      	mov	r0, r3
 8008842:	f002 fcba 	bl	800b1ba <SDMMC_CmdReadMultiBlock>
 8008846:	6478      	str	r0, [r7, #68]	; 0x44
 8008848:	e009      	b.n	800885e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2201      	movs	r2, #1
 800884e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008856:	4618      	mov	r0, r3
 8008858:	f002 fc8d 	bl	800b176 <SDMMC_CmdReadSingleBlock>
 800885c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800885e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008860:	2b00      	cmp	r3, #0
 8008862:	d012      	beq.n	800888a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a7a      	ldr	r2, [pc, #488]	; (8008a54 <HAL_SD_ReadBlocks+0x2d4>)
 800886a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008872:	431a      	orrs	r2, r3
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2200      	movs	r2, #0
 8008884:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	e151      	b.n	8008b2e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800888a:	69bb      	ldr	r3, [r7, #24]
 800888c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800888e:	e061      	b.n	8008954 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008896:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800889a:	2b00      	cmp	r3, #0
 800889c:	d03c      	beq.n	8008918 <HAL_SD_ReadBlocks+0x198>
 800889e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d039      	beq.n	8008918 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80088a4:	2300      	movs	r3, #0
 80088a6:	643b      	str	r3, [r7, #64]	; 0x40
 80088a8:	e033      	b.n	8008912 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4618      	mov	r0, r3
 80088b0:	f002 fb8f 	bl	800afd2 <SDIO_ReadFIFO>
 80088b4:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80088b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b8:	b2da      	uxtb	r2, r3
 80088ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088bc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80088be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c0:	3301      	adds	r3, #1
 80088c2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80088c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088c6:	3b01      	subs	r3, #1
 80088c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80088ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088cc:	0a1b      	lsrs	r3, r3, #8
 80088ce:	b2da      	uxtb	r2, r3
 80088d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088d2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80088d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088d6:	3301      	adds	r3, #1
 80088d8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80088da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088dc:	3b01      	subs	r3, #1
 80088de:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80088e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e2:	0c1b      	lsrs	r3, r3, #16
 80088e4:	b2da      	uxtb	r2, r3
 80088e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80088ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ec:	3301      	adds	r3, #1
 80088ee:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80088f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088f2:	3b01      	subs	r3, #1
 80088f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80088f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f8:	0e1b      	lsrs	r3, r3, #24
 80088fa:	b2da      	uxtb	r2, r3
 80088fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088fe:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008902:	3301      	adds	r3, #1
 8008904:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008908:	3b01      	subs	r3, #1
 800890a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800890c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800890e:	3301      	adds	r3, #1
 8008910:	643b      	str	r3, [r7, #64]	; 0x40
 8008912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008914:	2b07      	cmp	r3, #7
 8008916:	d9c8      	bls.n	80088aa <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008918:	f7fb f9b0 	bl	8003c7c <HAL_GetTick>
 800891c:	4602      	mov	r2, r0
 800891e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008920:	1ad3      	subs	r3, r2, r3
 8008922:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008924:	429a      	cmp	r2, r3
 8008926:	d902      	bls.n	800892e <HAL_SD_ReadBlocks+0x1ae>
 8008928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800892a:	2b00      	cmp	r3, #0
 800892c:	d112      	bne.n	8008954 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a48      	ldr	r2, [pc, #288]	; (8008a54 <HAL_SD_ReadBlocks+0x2d4>)
 8008934:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2201      	movs	r2, #1
 8008946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2200      	movs	r2, #0
 800894e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008950:	2303      	movs	r3, #3
 8008952:	e0ec      	b.n	8008b2e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800895a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800895e:	2b00      	cmp	r3, #0
 8008960:	d096      	beq.n	8008890 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800896c:	2b00      	cmp	r3, #0
 800896e:	d022      	beq.n	80089b6 <HAL_SD_ReadBlocks+0x236>
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	2b01      	cmp	r3, #1
 8008974:	d91f      	bls.n	80089b6 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800897a:	2b03      	cmp	r3, #3
 800897c:	d01b      	beq.n	80089b6 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4618      	mov	r0, r3
 8008984:	f002 fc80 	bl	800b288 <SDMMC_CmdStopTransfer>
 8008988:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800898a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800898c:	2b00      	cmp	r3, #0
 800898e:	d012      	beq.n	80089b6 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a2f      	ldr	r2, [pc, #188]	; (8008a54 <HAL_SD_ReadBlocks+0x2d4>)
 8008996:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800899c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800899e:	431a      	orrs	r2, r3
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2200      	movs	r2, #0
 80089b0:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e0bb      	b.n	8008b2e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089bc:	f003 0308 	and.w	r3, r3, #8
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d012      	beq.n	80089ea <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a22      	ldr	r2, [pc, #136]	; (8008a54 <HAL_SD_ReadBlocks+0x2d4>)
 80089ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d0:	f043 0208 	orr.w	r2, r3, #8
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2201      	movs	r2, #1
 80089dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e0a1      	b.n	8008b2e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f0:	f003 0302 	and.w	r3, r3, #2
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d012      	beq.n	8008a1e <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a15      	ldr	r2, [pc, #84]	; (8008a54 <HAL_SD_ReadBlocks+0x2d4>)
 80089fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a04:	f043 0202 	orr.w	r2, r3, #2
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2200      	movs	r2, #0
 8008a18:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e087      	b.n	8008b2e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a24:	f003 0320 	and.w	r3, r3, #32
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d064      	beq.n	8008af6 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a08      	ldr	r2, [pc, #32]	; (8008a54 <HAL_SD_ReadBlocks+0x2d4>)
 8008a32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a38:	f043 0220 	orr.w	r2, r3, #32
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2201      	movs	r2, #1
 8008a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e06d      	b.n	8008b2e <HAL_SD_ReadBlocks+0x3ae>
 8008a52:	bf00      	nop
 8008a54:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f002 fab8 	bl	800afd2 <SDIO_ReadFIFO>
 8008a62:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8008a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a66:	b2da      	uxtb	r2, r3
 8008a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a6a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a6e:	3301      	adds	r3, #1
 8008a70:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a74:	3b01      	subs	r3, #1
 8008a76:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a7a:	0a1b      	lsrs	r3, r3, #8
 8008a7c:	b2da      	uxtb	r2, r3
 8008a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a80:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a84:	3301      	adds	r3, #1
 8008a86:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a90:	0c1b      	lsrs	r3, r3, #16
 8008a92:	b2da      	uxtb	r2, r3
 8008a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a96:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aa0:	3b01      	subs	r3, #1
 8008aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa6:	0e1b      	lsrs	r3, r3, #24
 8008aa8:	b2da      	uxtb	r2, r3
 8008aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aac:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008aba:	f7fb f8df 	bl	8003c7c <HAL_GetTick>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac2:	1ad3      	subs	r3, r2, r3
 8008ac4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d902      	bls.n	8008ad0 <HAL_SD_ReadBlocks+0x350>
 8008aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d112      	bne.n	8008af6 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a18      	ldr	r2, [pc, #96]	; (8008b38 <HAL_SD_ReadBlocks+0x3b8>)
 8008ad6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008adc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2200      	movs	r2, #0
 8008af0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
 8008af4:	e01b      	b.n	8008b2e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d002      	beq.n	8008b0a <HAL_SD_ReadBlocks+0x38a>
 8008b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d1a6      	bne.n	8008a58 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f240 523a 	movw	r2, #1338	; 0x53a
 8008b12:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	e006      	b.n	8008b2e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b24:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
  }
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3748      	adds	r7, #72	; 0x48
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	004005ff 	.word	0x004005ff

08008b3c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b092      	sub	sp, #72	; 0x48
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	60b9      	str	r1, [r7, #8]
 8008b46:	607a      	str	r2, [r7, #4]
 8008b48:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008b4a:	f7fb f897 	bl	8003c7c <HAL_GetTick>
 8008b4e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d107      	bne.n	8008b6e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b62:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e165      	b.n	8008e3a <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	f040 8158 	bne.w	8008e2c <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008b82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	441a      	add	r2, r3
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d907      	bls.n	8008ba0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b94:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	e14c      	b.n	8008e3a <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2203      	movs	r2, #3
 8008ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2200      	movs	r2, #0
 8008bae:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d002      	beq.n	8008bbe <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bba:	025b      	lsls	r3, r3, #9
 8008bbc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8008bc2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	025b      	lsls	r3, r3, #9
 8008bc8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008bca:	2390      	movs	r3, #144	; 0x90
 8008bcc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f107 0218 	add.w	r2, r7, #24
 8008be2:	4611      	mov	r1, r2
 8008be4:	4618      	mov	r0, r3
 8008be6:	f002 fa78 	bl	800b0da <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d90a      	bls.n	8008c06 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2220      	movs	r2, #32
 8008bf4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f002 fb20 	bl	800b242 <SDMMC_CmdWriteMultiBlock>
 8008c02:	6478      	str	r0, [r7, #68]	; 0x44
 8008c04:	e009      	b.n	8008c1a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2210      	movs	r2, #16
 8008c0a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008c12:	4618      	mov	r0, r3
 8008c14:	f002 faf3 	bl	800b1fe <SDMMC_CmdWriteSingleBlock>
 8008c18:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d012      	beq.n	8008c46 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a87      	ldr	r2, [pc, #540]	; (8008e44 <HAL_SD_WriteBlocks+0x308>)
 8008c26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c2e:	431a      	orrs	r2, r3
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e0f9      	b.n	8008e3a <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8008c4a:	e065      	b.n	8008d18 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d040      	beq.n	8008cdc <HAL_SD_WriteBlocks+0x1a0>
 8008c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d03d      	beq.n	8008cdc <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8008c60:	2300      	movs	r3, #0
 8008c62:	643b      	str	r3, [r7, #64]	; 0x40
 8008c64:	e037      	b.n	8008cd6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8008c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c6e:	3301      	adds	r3, #1
 8008c70:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c74:	3b01      	subs	r3, #1
 8008c76:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	021a      	lsls	r2, r3, #8
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c86:	3301      	adds	r3, #1
 8008c88:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c8c:	3b01      	subs	r3, #1
 8008c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	041a      	lsls	r2, r3, #16
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ca4:	3b01      	subs	r3, #1
 8008ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	061a      	lsls	r2, r3, #24
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f107 0214 	add.w	r2, r7, #20
 8008cc8:	4611      	mov	r1, r2
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f002 f98e 	bl	800afec <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	643b      	str	r3, [r7, #64]	; 0x40
 8008cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cd8:	2b07      	cmp	r3, #7
 8008cda:	d9c4      	bls.n	8008c66 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008cdc:	f7fa ffce 	bl	8003c7c <HAL_GetTick>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce4:	1ad3      	subs	r3, r2, r3
 8008ce6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d902      	bls.n	8008cf2 <HAL_SD_WriteBlocks+0x1b6>
 8008cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d112      	bne.n	8008d18 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a53      	ldr	r2, [pc, #332]	; (8008e44 <HAL_SD_WriteBlocks+0x308>)
 8008cf8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d00:	431a      	orrs	r2, r3
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2201      	movs	r2, #1
 8008d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2200      	movs	r2, #0
 8008d12:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008d14:	2303      	movs	r3, #3
 8008d16:	e090      	b.n	8008e3a <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d1e:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d092      	beq.n	8008c4c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d022      	beq.n	8008d7a <HAL_SD_WriteBlocks+0x23e>
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d91f      	bls.n	8008d7a <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d3e:	2b03      	cmp	r3, #3
 8008d40:	d01b      	beq.n	8008d7a <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4618      	mov	r0, r3
 8008d48:	f002 fa9e 	bl	800b288 <SDMMC_CmdStopTransfer>
 8008d4c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d012      	beq.n	8008d7a <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a3a      	ldr	r2, [pc, #232]	; (8008e44 <HAL_SD_WriteBlocks+0x308>)
 8008d5a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d62:	431a      	orrs	r2, r3
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2200      	movs	r2, #0
 8008d74:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	e05f      	b.n	8008e3a <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d80:	f003 0308 	and.w	r3, r3, #8
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d012      	beq.n	8008dae <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a2d      	ldr	r2, [pc, #180]	; (8008e44 <HAL_SD_WriteBlocks+0x308>)
 8008d8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d94:	f043 0208 	orr.w	r2, r3, #8
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2200      	movs	r2, #0
 8008da8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	e045      	b.n	8008e3a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008db4:	f003 0302 	and.w	r3, r3, #2
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d012      	beq.n	8008de2 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a20      	ldr	r2, [pc, #128]	; (8008e44 <HAL_SD_WriteBlocks+0x308>)
 8008dc2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc8:	f043 0202 	orr.w	r2, r3, #2
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	e02b      	b.n	8008e3a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008de8:	f003 0310 	and.w	r3, r3, #16
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d012      	beq.n	8008e16 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a13      	ldr	r2, [pc, #76]	; (8008e44 <HAL_SD_WriteBlocks+0x308>)
 8008df6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dfc:	f043 0210 	orr.w	r2, r3, #16
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e011      	b.n	8008e3a <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f240 523a 	movw	r2, #1338	; 0x53a
 8008e1e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	e006      	b.n	8008e3a <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e30:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008e38:	2301      	movs	r3, #1
  }
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3748      	adds	r7, #72	; 0x48
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	004005ff 	.word	0x004005ff

08008e48 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b08c      	sub	sp, #48	; 0x30
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	60b9      	str	r1, [r7, #8]
 8008e52:	607a      	str	r2, [r7, #4]
 8008e54:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d107      	bne.n	8008e70 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e64:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	e0be      	b.n	8008fee <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008e76:	b2db      	uxtb	r3, r3
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	f040 80b7 	bne.w	8008fec <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2200      	movs	r2, #0
 8008e82:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008e84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	441a      	add	r2, r3
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d907      	bls.n	8008ea2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e96:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e0a5      	b.n	8008fee <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2203      	movs	r2, #3
 8008ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008ec0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec6:	4a4c      	ldr	r2, [pc, #304]	; (8008ff8 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 8008ec8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ece:	4a4b      	ldr	r2, [pc, #300]	; (8008ffc <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8008ed0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ede:	2200      	movs	r2, #0
 8008ee0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef2:	689a      	ldr	r2, [r3, #8]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	430a      	orrs	r2, r1
 8008efc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	3380      	adds	r3, #128	; 0x80
 8008f08:	4619      	mov	r1, r3
 8008f0a:	68ba      	ldr	r2, [r7, #8]
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	025b      	lsls	r3, r3, #9
 8008f10:	089b      	lsrs	r3, r3, #2
 8008f12:	f7fb fcdb 	bl	80048cc <HAL_DMA_Start_IT>
 8008f16:	4603      	mov	r3, r0
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d017      	beq.n	8008f4c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008f2a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a33      	ldr	r2, [pc, #204]	; (8009000 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8008f32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f38:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2201      	movs	r2, #1
 8008f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	e050      	b.n	8008fee <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008f4c:	4b2d      	ldr	r3, [pc, #180]	; (8009004 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8008f4e:	2201      	movs	r2, #1
 8008f50:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d002      	beq.n	8008f60 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 8008f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5c:	025b      	lsls	r3, r3, #9
 8008f5e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008f60:	f04f 33ff 	mov.w	r3, #4294967295
 8008f64:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	025b      	lsls	r3, r3, #9
 8008f6a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008f6c:	2390      	movs	r3, #144	; 0x90
 8008f6e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008f70:	2302      	movs	r3, #2
 8008f72:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008f74:	2300      	movs	r3, #0
 8008f76:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f107 0210 	add.w	r2, r7, #16
 8008f84:	4611      	mov	r1, r2
 8008f86:	4618      	mov	r0, r3
 8008f88:	f002 f8a7 	bl	800b0da <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d90a      	bls.n	8008fa8 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2282      	movs	r2, #130	; 0x82
 8008f96:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f002 f90b 	bl	800b1ba <SDMMC_CmdReadMultiBlock>
 8008fa4:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008fa6:	e009      	b.n	8008fbc <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2281      	movs	r2, #129	; 0x81
 8008fac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f002 f8de 	bl	800b176 <SDMMC_CmdReadSingleBlock>
 8008fba:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d012      	beq.n	8008fe8 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a0e      	ldr	r2, [pc, #56]	; (8009000 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8008fc8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd0:	431a      	orrs	r2, r3
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2201      	movs	r2, #1
 8008fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e002      	b.n	8008fee <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	e000      	b.n	8008fee <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 8008fec:	2302      	movs	r3, #2
  }
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3730      	adds	r7, #48	; 0x30
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	080098d7 	.word	0x080098d7
 8008ffc:	08009949 	.word	0x08009949
 8009000:	004005ff 	.word	0x004005ff
 8009004:	4225858c 	.word	0x4225858c

08009008 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b08c      	sub	sp, #48	; 0x30
 800900c:	af00      	add	r7, sp, #0
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	60b9      	str	r1, [r7, #8]
 8009012:	607a      	str	r2, [r7, #4]
 8009014:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d107      	bne.n	8009030 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009024:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800902c:	2301      	movs	r3, #1
 800902e:	e0c1      	b.n	80091b4 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009036:	b2db      	uxtb	r3, r3
 8009038:	2b01      	cmp	r3, #1
 800903a:	f040 80ba 	bne.w	80091b2 <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2200      	movs	r2, #0
 8009042:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009044:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	441a      	add	r2, r3
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800904e:	429a      	cmp	r2, r3
 8009050:	d907      	bls.n	8009062 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009056:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	e0a8      	b.n	80091b4 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2203      	movs	r2, #3
 8009066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	2200      	movs	r2, #0
 8009070:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f042 021a 	orr.w	r2, r2, #26
 8009080:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009086:	4a4d      	ldr	r2, [pc, #308]	; (80091bc <HAL_SD_WriteBlocks_DMA+0x1b4>)
 8009088:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800908e:	4a4c      	ldr	r2, [pc, #304]	; (80091c0 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 8009090:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009096:	2200      	movs	r2, #0
 8009098:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d002      	beq.n	80090a8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80090a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a4:	025b      	lsls	r3, r3, #9
 80090a6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d90a      	bls.n	80090c4 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	22a0      	movs	r2, #160	; 0xa0
 80090b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090ba:	4618      	mov	r0, r3
 80090bc:	f002 f8c1 	bl	800b242 <SDMMC_CmdWriteMultiBlock>
 80090c0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80090c2:	e009      	b.n	80090d8 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2290      	movs	r2, #144	; 0x90
 80090c8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090d0:	4618      	mov	r0, r3
 80090d2:	f002 f894 	bl	800b1fe <SDMMC_CmdWriteSingleBlock>
 80090d6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80090d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d012      	beq.n	8009104 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a38      	ldr	r2, [pc, #224]	; (80091c4 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80090e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ec:	431a      	orrs	r2, r3
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2201      	movs	r2, #1
 80090f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2200      	movs	r2, #0
 80090fe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009100:	2301      	movs	r3, #1
 8009102:	e057      	b.n	80091b4 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009104:	4b30      	ldr	r3, [pc, #192]	; (80091c8 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8009106:	2201      	movs	r2, #1
 8009108:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800910e:	2240      	movs	r2, #64	; 0x40
 8009110:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009122:	689a      	ldr	r2, [r3, #8]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	430a      	orrs	r2, r1
 800912c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009132:	68b9      	ldr	r1, [r7, #8]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	3380      	adds	r3, #128	; 0x80
 800913a:	461a      	mov	r2, r3
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	025b      	lsls	r3, r3, #9
 8009140:	089b      	lsrs	r3, r3, #2
 8009142:	f7fb fbc3 	bl	80048cc <HAL_DMA_Start_IT>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d01a      	beq.n	8009182 <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f022 021a 	bic.w	r2, r2, #26
 800915a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a18      	ldr	r2, [pc, #96]	; (80091c4 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8009162:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009168:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2201      	movs	r2, #1
 8009174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2200      	movs	r2, #0
 800917c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800917e:	2301      	movs	r3, #1
 8009180:	e018      	b.n	80091b4 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009182:	f04f 33ff 	mov.w	r3, #4294967295
 8009186:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	025b      	lsls	r3, r3, #9
 800918c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800918e:	2390      	movs	r3, #144	; 0x90
 8009190:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8009192:	2300      	movs	r3, #0
 8009194:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009196:	2300      	movs	r3, #0
 8009198:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800919a:	2301      	movs	r3, #1
 800919c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f107 0210 	add.w	r2, r7, #16
 80091a6:	4611      	mov	r1, r2
 80091a8:	4618      	mov	r0, r3
 80091aa:	f001 ff96 	bl	800b0da <SDIO_ConfigData>

      return HAL_OK;
 80091ae:	2300      	movs	r3, #0
 80091b0:	e000      	b.n	80091b4 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 80091b2:	2302      	movs	r3, #2
  }
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3730      	adds	r7, #48	; 0x30
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}
 80091bc:	080098ad 	.word	0x080098ad
 80091c0:	08009949 	.word	0x08009949
 80091c4:	004005ff 	.word	0x004005ff
 80091c8:	4225858c 	.word	0x4225858c

080091cc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d008      	beq.n	80091fa <HAL_SD_IRQHandler+0x2e>
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f003 0308 	and.w	r3, r3, #8
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d003      	beq.n	80091fa <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 fdec 	bl	8009dd0 <SD_Read_IT>
 80091f8:	e155      	b.n	80094a6 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009204:	2b00      	cmp	r3, #0
 8009206:	f000 808f 	beq.w	8009328 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009212:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	6812      	ldr	r2, [r2, #0]
 800921e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8009222:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8009226:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f022 0201 	bic.w	r2, r2, #1
 8009236:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f003 0308 	and.w	r3, r3, #8
 800923e:	2b00      	cmp	r3, #0
 8009240:	d039      	beq.n	80092b6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f003 0302 	and.w	r3, r3, #2
 8009248:	2b00      	cmp	r3, #0
 800924a:	d104      	bne.n	8009256 <HAL_SD_IRQHandler+0x8a>
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f003 0320 	and.w	r3, r3, #32
 8009252:	2b00      	cmp	r3, #0
 8009254:	d011      	beq.n	800927a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4618      	mov	r0, r3
 800925c:	f002 f814 	bl	800b288 <SDMMC_CmdStopTransfer>
 8009260:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d008      	beq.n	800927a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	431a      	orrs	r2, r3
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 f91f 	bl	80094b8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f240 523a 	movw	r2, #1338	; 0x53a
 8009282:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2201      	movs	r2, #1
 8009288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f003 0301 	and.w	r3, r3, #1
 8009298:	2b00      	cmp	r3, #0
 800929a:	d104      	bne.n	80092a6 <HAL_SD_IRQHandler+0xda>
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f003 0302 	and.w	r3, r3, #2
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d003      	beq.n	80092ae <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f004 f87a 	bl	800d3a0 <HAL_SD_RxCpltCallback>
 80092ac:	e0fb      	b.n	80094a6 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f004 f86c 	bl	800d38c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80092b4:	e0f7      	b.n	80094a6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f000 80f2 	beq.w	80094a6 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f003 0320 	and.w	r3, r3, #32
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d011      	beq.n	80092f0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4618      	mov	r0, r3
 80092d2:	f001 ffd9 	bl	800b288 <SDMMC_CmdStopTransfer>
 80092d6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d008      	beq.n	80092f0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	431a      	orrs	r2, r3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 f8e4 	bl	80094b8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f003 0301 	and.w	r3, r3, #1
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	f040 80d5 	bne.w	80094a6 <HAL_SD_IRQHandler+0x2da>
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f003 0302 	and.w	r3, r3, #2
 8009302:	2b00      	cmp	r3, #0
 8009304:	f040 80cf 	bne.w	80094a6 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f022 0208 	bic.w	r2, r2, #8
 8009316:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f004 f833 	bl	800d38c <HAL_SD_TxCpltCallback>
}
 8009326:	e0be      	b.n	80094a6 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800932e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009332:	2b00      	cmp	r3, #0
 8009334:	d008      	beq.n	8009348 <HAL_SD_IRQHandler+0x17c>
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f003 0308 	and.w	r3, r3, #8
 800933c:	2b00      	cmp	r3, #0
 800933e:	d003      	beq.n	8009348 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f000 fd96 	bl	8009e72 <SD_Write_IT>
 8009346:	e0ae      	b.n	80094a6 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800934e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8009352:	2b00      	cmp	r3, #0
 8009354:	f000 80a7 	beq.w	80094a6 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800935e:	f003 0302 	and.w	r3, r3, #2
 8009362:	2b00      	cmp	r3, #0
 8009364:	d005      	beq.n	8009372 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800936a:	f043 0202 	orr.w	r2, r3, #2
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009378:	f003 0308 	and.w	r3, r3, #8
 800937c:	2b00      	cmp	r3, #0
 800937e:	d005      	beq.n	800938c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009384:	f043 0208 	orr.w	r2, r3, #8
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009392:	f003 0320 	and.w	r3, r3, #32
 8009396:	2b00      	cmp	r3, #0
 8009398:	d005      	beq.n	80093a6 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800939e:	f043 0220 	orr.w	r2, r3, #32
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ac:	f003 0310 	and.w	r3, r3, #16
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d005      	beq.n	80093c0 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b8:	f043 0210 	orr.w	r2, r3, #16
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f240 523a 	movw	r2, #1338	; 0x53a
 80093c8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80093d8:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4618      	mov	r0, r3
 80093e0:	f001 ff52 	bl	800b288 <SDMMC_CmdStopTransfer>
 80093e4:	4602      	mov	r2, r0
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ea:	431a      	orrs	r2, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f003 0308 	and.w	r3, r3, #8
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00a      	beq.n	8009410 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2201      	movs	r2, #1
 80093fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 f855 	bl	80094b8 <HAL_SD_ErrorCallback>
}
 800940e:	e04a      	b.n	80094a6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009416:	2b00      	cmp	r3, #0
 8009418:	d045      	beq.n	80094a6 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f003 0310 	and.w	r3, r3, #16
 8009420:	2b00      	cmp	r3, #0
 8009422:	d104      	bne.n	800942e <HAL_SD_IRQHandler+0x262>
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f003 0320 	and.w	r3, r3, #32
 800942a:	2b00      	cmp	r3, #0
 800942c:	d011      	beq.n	8009452 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009432:	4a1f      	ldr	r2, [pc, #124]	; (80094b0 <HAL_SD_IRQHandler+0x2e4>)
 8009434:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800943a:	4618      	mov	r0, r3
 800943c:	f7fb fb0e 	bl	8004a5c <HAL_DMA_Abort_IT>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d02f      	beq.n	80094a6 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800944a:	4618      	mov	r0, r3
 800944c:	f000 face 	bl	80099ec <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009450:	e029      	b.n	80094a6 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f003 0301 	and.w	r3, r3, #1
 8009458:	2b00      	cmp	r3, #0
 800945a:	d104      	bne.n	8009466 <HAL_SD_IRQHandler+0x29a>
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f003 0302 	and.w	r3, r3, #2
 8009462:	2b00      	cmp	r3, #0
 8009464:	d011      	beq.n	800948a <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946a:	4a12      	ldr	r2, [pc, #72]	; (80094b4 <HAL_SD_IRQHandler+0x2e8>)
 800946c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009472:	4618      	mov	r0, r3
 8009474:	f7fb faf2 	bl	8004a5c <HAL_DMA_Abort_IT>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d013      	beq.n	80094a6 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009482:	4618      	mov	r0, r3
 8009484:	f000 fae9 	bl	8009a5a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009488:	e00d      	b.n	80094a6 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2201      	movs	r2, #1
 8009494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f003 ff6a 	bl	800d378 <HAL_SD_AbortCallback>
}
 80094a4:	e7ff      	b.n	80094a6 <HAL_SD_IRQHandler+0x2da>
 80094a6:	bf00      	nop
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	080099ed 	.word	0x080099ed
 80094b4:	08009a5b 	.word	0x08009a5b

080094b8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80094c0:	bf00      	nop
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094da:	0f9b      	lsrs	r3, r3, #30
 80094dc:	b2da      	uxtb	r2, r3
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094e6:	0e9b      	lsrs	r3, r3, #26
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	f003 030f 	and.w	r3, r3, #15
 80094ee:	b2da      	uxtb	r2, r3
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094f8:	0e1b      	lsrs	r3, r3, #24
 80094fa:	b2db      	uxtb	r3, r3
 80094fc:	f003 0303 	and.w	r3, r3, #3
 8009500:	b2da      	uxtb	r2, r3
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800950a:	0c1b      	lsrs	r3, r3, #16
 800950c:	b2da      	uxtb	r2, r3
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009516:	0a1b      	lsrs	r3, r3, #8
 8009518:	b2da      	uxtb	r2, r3
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009522:	b2da      	uxtb	r2, r3
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800952c:	0d1b      	lsrs	r3, r3, #20
 800952e:	b29a      	uxth	r2, r3
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009538:	0c1b      	lsrs	r3, r3, #16
 800953a:	b2db      	uxtb	r3, r3
 800953c:	f003 030f 	and.w	r3, r3, #15
 8009540:	b2da      	uxtb	r2, r3
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800954a:	0bdb      	lsrs	r3, r3, #15
 800954c:	b2db      	uxtb	r3, r3
 800954e:	f003 0301 	and.w	r3, r3, #1
 8009552:	b2da      	uxtb	r2, r3
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800955c:	0b9b      	lsrs	r3, r3, #14
 800955e:	b2db      	uxtb	r3, r3
 8009560:	f003 0301 	and.w	r3, r3, #1
 8009564:	b2da      	uxtb	r2, r3
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800956e:	0b5b      	lsrs	r3, r3, #13
 8009570:	b2db      	uxtb	r3, r3
 8009572:	f003 0301 	and.w	r3, r3, #1
 8009576:	b2da      	uxtb	r2, r3
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009580:	0b1b      	lsrs	r3, r3, #12
 8009582:	b2db      	uxtb	r3, r3
 8009584:	f003 0301 	and.w	r3, r3, #1
 8009588:	b2da      	uxtb	r2, r3
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	2200      	movs	r2, #0
 8009592:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009598:	2b00      	cmp	r3, #0
 800959a:	d163      	bne.n	8009664 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095a0:	009a      	lsls	r2, r3, #2
 80095a2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80095a6:	4013      	ands	r3, r2
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80095ac:	0f92      	lsrs	r2, r2, #30
 80095ae:	431a      	orrs	r2, r3
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095b8:	0edb      	lsrs	r3, r3, #27
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	f003 0307 	and.w	r3, r3, #7
 80095c0:	b2da      	uxtb	r2, r3
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095ca:	0e1b      	lsrs	r3, r3, #24
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	f003 0307 	and.w	r3, r3, #7
 80095d2:	b2da      	uxtb	r2, r3
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095dc:	0d5b      	lsrs	r3, r3, #21
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	f003 0307 	and.w	r3, r3, #7
 80095e4:	b2da      	uxtb	r2, r3
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095ee:	0c9b      	lsrs	r3, r3, #18
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	f003 0307 	and.w	r3, r3, #7
 80095f6:	b2da      	uxtb	r2, r3
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009600:	0bdb      	lsrs	r3, r3, #15
 8009602:	b2db      	uxtb	r3, r3
 8009604:	f003 0307 	and.w	r3, r3, #7
 8009608:	b2da      	uxtb	r2, r3
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	1c5a      	adds	r2, r3, #1
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	7e1b      	ldrb	r3, [r3, #24]
 800961c:	b2db      	uxtb	r3, r3
 800961e:	f003 0307 	and.w	r3, r3, #7
 8009622:	3302      	adds	r3, #2
 8009624:	2201      	movs	r2, #1
 8009626:	fa02 f303 	lsl.w	r3, r2, r3
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800962e:	fb03 f202 	mul.w	r2, r3, r2
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	7a1b      	ldrb	r3, [r3, #8]
 800963a:	b2db      	uxtb	r3, r3
 800963c:	f003 030f 	and.w	r3, r3, #15
 8009640:	2201      	movs	r2, #1
 8009642:	409a      	lsls	r2, r3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009650:	0a52      	lsrs	r2, r2, #9
 8009652:	fb03 f202 	mul.w	r2, r3, r2
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009660:	661a      	str	r2, [r3, #96]	; 0x60
 8009662:	e031      	b.n	80096c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009668:	2b01      	cmp	r3, #1
 800966a:	d11d      	bne.n	80096a8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009670:	041b      	lsls	r3, r3, #16
 8009672:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800967a:	0c1b      	lsrs	r3, r3, #16
 800967c:	431a      	orrs	r2, r3
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	691b      	ldr	r3, [r3, #16]
 8009686:	3301      	adds	r3, #1
 8009688:	029a      	lsls	r2, r3, #10
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800969c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	661a      	str	r2, [r3, #96]	; 0x60
 80096a6:	e00f      	b.n	80096c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a58      	ldr	r2, [pc, #352]	; (8009810 <HAL_SD_GetCardCSD+0x344>)
 80096ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2201      	movs	r2, #1
 80096c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80096c4:	2301      	movs	r3, #1
 80096c6:	e09d      	b.n	8009804 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096cc:	0b9b      	lsrs	r3, r3, #14
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	f003 0301 	and.w	r3, r3, #1
 80096d4:	b2da      	uxtb	r2, r3
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096de:	09db      	lsrs	r3, r3, #7
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096e6:	b2da      	uxtb	r2, r3
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096f6:	b2da      	uxtb	r2, r3
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009700:	0fdb      	lsrs	r3, r3, #31
 8009702:	b2da      	uxtb	r2, r3
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800970c:	0f5b      	lsrs	r3, r3, #29
 800970e:	b2db      	uxtb	r3, r3
 8009710:	f003 0303 	and.w	r3, r3, #3
 8009714:	b2da      	uxtb	r2, r3
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800971e:	0e9b      	lsrs	r3, r3, #26
 8009720:	b2db      	uxtb	r3, r3
 8009722:	f003 0307 	and.w	r3, r3, #7
 8009726:	b2da      	uxtb	r2, r3
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009730:	0d9b      	lsrs	r3, r3, #22
 8009732:	b2db      	uxtb	r3, r3
 8009734:	f003 030f 	and.w	r3, r3, #15
 8009738:	b2da      	uxtb	r2, r3
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009742:	0d5b      	lsrs	r3, r3, #21
 8009744:	b2db      	uxtb	r3, r3
 8009746:	f003 0301 	and.w	r3, r3, #1
 800974a:	b2da      	uxtb	r2, r3
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	2200      	movs	r2, #0
 8009756:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800975e:	0c1b      	lsrs	r3, r3, #16
 8009760:	b2db      	uxtb	r3, r3
 8009762:	f003 0301 	and.w	r3, r3, #1
 8009766:	b2da      	uxtb	r2, r3
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009772:	0bdb      	lsrs	r3, r3, #15
 8009774:	b2db      	uxtb	r3, r3
 8009776:	f003 0301 	and.w	r3, r3, #1
 800977a:	b2da      	uxtb	r2, r3
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009786:	0b9b      	lsrs	r3, r3, #14
 8009788:	b2db      	uxtb	r3, r3
 800978a:	f003 0301 	and.w	r3, r3, #1
 800978e:	b2da      	uxtb	r2, r3
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800979a:	0b5b      	lsrs	r3, r3, #13
 800979c:	b2db      	uxtb	r3, r3
 800979e:	f003 0301 	and.w	r3, r3, #1
 80097a2:	b2da      	uxtb	r2, r3
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ae:	0b1b      	lsrs	r3, r3, #12
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	f003 0301 	and.w	r3, r3, #1
 80097b6:	b2da      	uxtb	r2, r3
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097c2:	0a9b      	lsrs	r3, r3, #10
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	f003 0303 	and.w	r3, r3, #3
 80097ca:	b2da      	uxtb	r2, r3
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097d6:	0a1b      	lsrs	r3, r3, #8
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	f003 0303 	and.w	r3, r3, #3
 80097de:	b2da      	uxtb	r2, r3
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ea:	085b      	lsrs	r3, r3, #1
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097f2:	b2da      	uxtb	r2, r3
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	2201      	movs	r2, #1
 80097fe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009802:	2300      	movs	r3, #0
}
 8009804:	4618      	mov	r0, r3
 8009806:	370c      	adds	r7, #12
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr
 8009810:	004005ff 	.word	0x004005ff

08009814 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009814:	b480      	push	{r7}
 8009816:	b083      	sub	sp, #12
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800985e:	2300      	movs	r3, #0
}
 8009860:	4618      	mov	r0, r3
 8009862:	370c      	adds	r7, #12
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr

0800986c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b086      	sub	sp, #24
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009874:	2300      	movs	r3, #0
 8009876:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009878:	f107 030c 	add.w	r3, r7, #12
 800987c:	4619      	mov	r1, r3
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 fa7e 	bl	8009d80 <SD_SendStatus>
 8009884:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d005      	beq.n	8009898 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	431a      	orrs	r2, r3
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	0a5b      	lsrs	r3, r3, #9
 800989c:	f003 030f 	and.w	r3, r3, #15
 80098a0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80098a2:	693b      	ldr	r3, [r7, #16]
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3718      	adds	r7, #24
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b085      	sub	sp, #20
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098c8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80098ca:	bf00      	nop
 80098cc:	3714      	adds	r7, #20
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr

080098d6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b084      	sub	sp, #16
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098e2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098e8:	2b82      	cmp	r3, #130	; 0x82
 80098ea:	d111      	bne.n	8009910 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4618      	mov	r0, r3
 80098f2:	f001 fcc9 	bl	800b288 <SDMMC_CmdStopTransfer>
 80098f6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d008      	beq.n	8009910 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	431a      	orrs	r2, r3
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800990a:	68f8      	ldr	r0, [r7, #12]
 800990c:	f7ff fdd4 	bl	80094b8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f022 0208 	bic.w	r2, r2, #8
 800991e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f240 523a 	movw	r2, #1338	; 0x53a
 8009928:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2201      	movs	r2, #1
 800992e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2200      	movs	r2, #0
 8009936:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009938:	68f8      	ldr	r0, [r7, #12]
 800993a:	f003 fd31 	bl	800d3a0 <HAL_SD_RxCpltCallback>
#endif
}
 800993e:	bf00      	nop
 8009940:	3710      	adds	r7, #16
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
	...

08009948 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b086      	sub	sp, #24
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009954:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f7fb fa2c 	bl	8004db4 <HAL_DMA_GetError>
 800995c:	4603      	mov	r3, r0
 800995e:	2b02      	cmp	r3, #2
 8009960:	d03e      	beq.n	80099e0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009968:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800996e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009970:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	2b01      	cmp	r3, #1
 8009976:	d002      	beq.n	800997e <SD_DMAError+0x36>
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2b01      	cmp	r3, #1
 800997c:	d12d      	bne.n	80099da <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a19      	ldr	r2, [pc, #100]	; (80099e8 <SD_DMAError+0xa0>)
 8009984:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009994:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800999a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80099a2:	6978      	ldr	r0, [r7, #20]
 80099a4:	f7ff ff62 	bl	800986c <HAL_SD_GetCardState>
 80099a8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	2b06      	cmp	r3, #6
 80099ae:	d002      	beq.n	80099b6 <SD_DMAError+0x6e>
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	2b05      	cmp	r3, #5
 80099b4:	d10a      	bne.n	80099cc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4618      	mov	r0, r3
 80099bc:	f001 fc64 	bl	800b288 <SDMMC_CmdStopTransfer>
 80099c0:	4602      	mov	r2, r0
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c6:	431a      	orrs	r2, r3
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	2200      	movs	r2, #0
 80099d8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80099da:	6978      	ldr	r0, [r7, #20]
 80099dc:	f7ff fd6c 	bl	80094b8 <HAL_SD_ErrorCallback>
#endif
  }
}
 80099e0:	bf00      	nop
 80099e2:	3718      	adds	r7, #24
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}
 80099e8:	004005ff 	.word	0x004005ff

080099ec <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f240 523a 	movw	r2, #1338	; 0x53a
 8009a02:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009a04:	68f8      	ldr	r0, [r7, #12]
 8009a06:	f7ff ff31 	bl	800986c <HAL_SD_GetCardState>
 8009a0a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2200      	movs	r2, #0
 8009a18:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	2b06      	cmp	r3, #6
 8009a1e:	d002      	beq.n	8009a26 <SD_DMATxAbort+0x3a>
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	2b05      	cmp	r3, #5
 8009a24:	d10a      	bne.n	8009a3c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f001 fc2c 	bl	800b288 <SDMMC_CmdStopTransfer>
 8009a30:	4602      	mov	r2, r0
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a36:	431a      	orrs	r2, r3
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d103      	bne.n	8009a4c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009a44:	68f8      	ldr	r0, [r7, #12]
 8009a46:	f003 fc97 	bl	800d378 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009a4a:	e002      	b.n	8009a52 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009a4c:	68f8      	ldr	r0, [r7, #12]
 8009a4e:	f7ff fd33 	bl	80094b8 <HAL_SD_ErrorCallback>
}
 8009a52:	bf00      	nop
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}

08009a5a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009a5a:	b580      	push	{r7, lr}
 8009a5c:	b084      	sub	sp, #16
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a66:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f240 523a 	movw	r2, #1338	; 0x53a
 8009a70:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009a72:	68f8      	ldr	r0, [r7, #12]
 8009a74:	f7ff fefa 	bl	800986c <HAL_SD_GetCardState>
 8009a78:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2200      	movs	r2, #0
 8009a86:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	2b06      	cmp	r3, #6
 8009a8c:	d002      	beq.n	8009a94 <SD_DMARxAbort+0x3a>
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	2b05      	cmp	r3, #5
 8009a92:	d10a      	bne.n	8009aaa <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f001 fbf5 	bl	800b288 <SDMMC_CmdStopTransfer>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa4:	431a      	orrs	r2, r3
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d103      	bne.n	8009aba <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009ab2:	68f8      	ldr	r0, [r7, #12]
 8009ab4:	f003 fc60 	bl	800d378 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009ab8:	e002      	b.n	8009ac0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009aba:	68f8      	ldr	r0, [r7, #12]
 8009abc:	f7ff fcfc 	bl	80094b8 <HAL_SD_ErrorCallback>
}
 8009ac0:	bf00      	nop
 8009ac2:	3710      	adds	r7, #16
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009ac8:	b5b0      	push	{r4, r5, r7, lr}
 8009aca:	b094      	sub	sp, #80	; 0x50
 8009acc:	af04      	add	r7, sp, #16
 8009ace:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f001 faa6 	bl	800b02a <SDIO_GetPowerState>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d102      	bne.n	8009aea <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009ae4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009ae8:	e0b8      	b.n	8009c5c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aee:	2b03      	cmp	r3, #3
 8009af0:	d02f      	beq.n	8009b52 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4618      	mov	r0, r3
 8009af8:	f001 fc8d 	bl	800b416 <SDMMC_CmdSendCID>
 8009afc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d001      	beq.n	8009b08 <SD_InitCard+0x40>
    {
      return errorstate;
 8009b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b06:	e0a9      	b.n	8009c5c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	2100      	movs	r1, #0
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f001 fad0 	bl	800b0b4 <SDIO_GetResponse>
 8009b14:	4602      	mov	r2, r0
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	2104      	movs	r1, #4
 8009b20:	4618      	mov	r0, r3
 8009b22:	f001 fac7 	bl	800b0b4 <SDIO_GetResponse>
 8009b26:	4602      	mov	r2, r0
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2108      	movs	r1, #8
 8009b32:	4618      	mov	r0, r3
 8009b34:	f001 fabe 	bl	800b0b4 <SDIO_GetResponse>
 8009b38:	4602      	mov	r2, r0
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	210c      	movs	r1, #12
 8009b44:	4618      	mov	r0, r3
 8009b46:	f001 fab5 	bl	800b0b4 <SDIO_GetResponse>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b56:	2b03      	cmp	r3, #3
 8009b58:	d00d      	beq.n	8009b76 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f107 020e 	add.w	r2, r7, #14
 8009b62:	4611      	mov	r1, r2
 8009b64:	4618      	mov	r0, r3
 8009b66:	f001 fc93 	bl	800b490 <SDMMC_CmdSetRelAdd>
 8009b6a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d001      	beq.n	8009b76 <SD_InitCard+0xae>
    {
      return errorstate;
 8009b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b74:	e072      	b.n	8009c5c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b7a:	2b03      	cmp	r3, #3
 8009b7c:	d036      	beq.n	8009bec <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009b7e:	89fb      	ldrh	r3, [r7, #14]
 8009b80:	461a      	mov	r2, r3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b8e:	041b      	lsls	r3, r3, #16
 8009b90:	4619      	mov	r1, r3
 8009b92:	4610      	mov	r0, r2
 8009b94:	f001 fc5d 	bl	800b452 <SDMMC_CmdSendCSD>
 8009b98:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d001      	beq.n	8009ba4 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ba2:	e05b      	b.n	8009c5c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2100      	movs	r1, #0
 8009baa:	4618      	mov	r0, r3
 8009bac:	f001 fa82 	bl	800b0b4 <SDIO_GetResponse>
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	2104      	movs	r1, #4
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f001 fa79 	bl	800b0b4 <SDIO_GetResponse>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	2108      	movs	r1, #8
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f001 fa70 	bl	800b0b4 <SDIO_GetResponse>
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	210c      	movs	r1, #12
 8009be0:	4618      	mov	r0, r3
 8009be2:	f001 fa67 	bl	800b0b4 <SDIO_GetResponse>
 8009be6:	4602      	mov	r2, r0
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	2104      	movs	r1, #4
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f001 fa5e 	bl	800b0b4 <SDIO_GetResponse>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	0d1a      	lsrs	r2, r3, #20
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009c00:	f107 0310 	add.w	r3, r7, #16
 8009c04:	4619      	mov	r1, r3
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f7ff fc60 	bl	80094cc <HAL_SD_GetCardCSD>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d002      	beq.n	8009c18 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c16:	e021      	b.n	8009c5c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6819      	ldr	r1, [r3, #0]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c20:	041b      	lsls	r3, r3, #16
 8009c22:	2200      	movs	r2, #0
 8009c24:	461c      	mov	r4, r3
 8009c26:	4615      	mov	r5, r2
 8009c28:	4622      	mov	r2, r4
 8009c2a:	462b      	mov	r3, r5
 8009c2c:	4608      	mov	r0, r1
 8009c2e:	f001 fb4d 	bl	800b2cc <SDMMC_CmdSelDesel>
 8009c32:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d001      	beq.n	8009c3e <SD_InitCard+0x176>
  {
    return errorstate;
 8009c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c3c:	e00e      	b.n	8009c5c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681d      	ldr	r5, [r3, #0]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	466c      	mov	r4, sp
 8009c46:	f103 0210 	add.w	r2, r3, #16
 8009c4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8009c4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009c50:	3304      	adds	r3, #4
 8009c52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009c54:	4628      	mov	r0, r5
 8009c56:	f001 f991 	bl	800af7c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009c5a:	2300      	movs	r3, #0
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3740      	adds	r7, #64	; 0x40
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bdb0      	pop	{r4, r5, r7, pc}

08009c64 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b086      	sub	sp, #24
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009c70:	2300      	movs	r3, #0
 8009c72:	617b      	str	r3, [r7, #20]
 8009c74:	2300      	movs	r3, #0
 8009c76:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f001 fb48 	bl	800b312 <SDMMC_CmdGoIdleState>
 8009c82:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d001      	beq.n	8009c8e <SD_PowerON+0x2a>
  {
    return errorstate;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	e072      	b.n	8009d74 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4618      	mov	r0, r3
 8009c94:	f001 fb5b 	bl	800b34e <SDMMC_CmdOperCond>
 8009c98:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d00d      	beq.n	8009cbc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4618      	mov	r0, r3
 8009cac:	f001 fb31 	bl	800b312 <SDMMC_CmdGoIdleState>
 8009cb0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d004      	beq.n	8009cc2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	e05b      	b.n	8009d74 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d137      	bne.n	8009d3a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2100      	movs	r1, #0
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f001 fb5b 	bl	800b38c <SDMMC_CmdAppCommand>
 8009cd6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d02d      	beq.n	8009d3a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009cde:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009ce2:	e047      	b.n	8009d74 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2100      	movs	r1, #0
 8009cea:	4618      	mov	r0, r3
 8009cec:	f001 fb4e 	bl	800b38c <SDMMC_CmdAppCommand>
 8009cf0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d001      	beq.n	8009cfc <SD_PowerON+0x98>
    {
      return errorstate;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	e03b      	b.n	8009d74 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	491e      	ldr	r1, [pc, #120]	; (8009d7c <SD_PowerON+0x118>)
 8009d02:	4618      	mov	r0, r3
 8009d04:	f001 fb64 	bl	800b3d0 <SDMMC_CmdAppOperCommand>
 8009d08:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d002      	beq.n	8009d16 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009d14:	e02e      	b.n	8009d74 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	2100      	movs	r1, #0
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f001 f9c9 	bl	800b0b4 <SDIO_GetResponse>
 8009d22:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	0fdb      	lsrs	r3, r3, #31
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d101      	bne.n	8009d30 <SD_PowerON+0xcc>
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e000      	b.n	8009d32 <SD_PowerON+0xce>
 8009d30:	2300      	movs	r3, #0
 8009d32:	613b      	str	r3, [r7, #16]

    count++;
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	3301      	adds	r3, #1
 8009d38:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d802      	bhi.n	8009d4a <SD_PowerON+0xe6>
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d0cc      	beq.n	8009ce4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d902      	bls.n	8009d5a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009d54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d58:	e00c      	b.n	8009d74 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d003      	beq.n	8009d6c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2201      	movs	r2, #1
 8009d68:	645a      	str	r2, [r3, #68]	; 0x44
 8009d6a:	e002      	b.n	8009d72 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009d72:	2300      	movs	r3, #0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3718      	adds	r7, #24
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	c1100000 	.word	0xc1100000

08009d80 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d102      	bne.n	8009d96 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009d90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009d94:	e018      	b.n	8009dc8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681a      	ldr	r2, [r3, #0]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d9e:	041b      	lsls	r3, r3, #16
 8009da0:	4619      	mov	r1, r3
 8009da2:	4610      	mov	r0, r2
 8009da4:	f001 fb95 	bl	800b4d2 <SDMMC_CmdSendStatus>
 8009da8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d001      	beq.n	8009db4 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	e009      	b.n	8009dc8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2100      	movs	r1, #0
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f001 f97a 	bl	800b0b4 <SDIO_GetResponse>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009dc6:	2300      	movs	r3, #0
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3710      	adds	r7, #16
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b086      	sub	sp, #24
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ddc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d03f      	beq.n	8009e6a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009dea:	2300      	movs	r3, #0
 8009dec:	617b      	str	r3, [r7, #20]
 8009dee:	e033      	b.n	8009e58 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4618      	mov	r0, r3
 8009df6:	f001 f8ec 	bl	800afd2 <SDIO_ReadFIFO>
 8009dfa:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	b2da      	uxtb	r2, r3
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	3301      	adds	r3, #1
 8009e08:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	3b01      	subs	r3, #1
 8009e0e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	0a1b      	lsrs	r3, r3, #8
 8009e14:	b2da      	uxtb	r2, r3
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	3b01      	subs	r3, #1
 8009e24:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	0c1b      	lsrs	r3, r3, #16
 8009e2a:	b2da      	uxtb	r2, r3
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	3301      	adds	r3, #1
 8009e34:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	3b01      	subs	r3, #1
 8009e3a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	0e1b      	lsrs	r3, r3, #24
 8009e40:	b2da      	uxtb	r2, r3
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	3301      	adds	r3, #1
 8009e4a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	3b01      	subs	r3, #1
 8009e50:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	3301      	adds	r3, #1
 8009e56:	617b      	str	r3, [r7, #20]
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	2b07      	cmp	r3, #7
 8009e5c:	d9c8      	bls.n	8009df0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	68fa      	ldr	r2, [r7, #12]
 8009e62:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	693a      	ldr	r2, [r7, #16]
 8009e68:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8009e6a:	bf00      	nop
 8009e6c:	3718      	adds	r7, #24
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b086      	sub	sp, #24
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6a1b      	ldr	r3, [r3, #32]
 8009e7e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e84:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d043      	beq.n	8009f14 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	617b      	str	r3, [r7, #20]
 8009e90:	e037      	b.n	8009f02 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	021a      	lsls	r2, r3, #8
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	4313      	orrs	r3, r2
 8009eae:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	3b01      	subs	r3, #1
 8009eba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	041a      	lsls	r2, r3, #16
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	3301      	adds	r3, #1
 8009ecc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	3b01      	subs	r3, #1
 8009ed2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	061a      	lsls	r2, r3, #24
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	4313      	orrs	r3, r2
 8009ede:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f107 0208 	add.w	r2, r7, #8
 8009ef4:	4611      	mov	r1, r2
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f001 f878 	bl	800afec <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	3301      	adds	r3, #1
 8009f00:	617b      	str	r3, [r7, #20]
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	2b07      	cmp	r3, #7
 8009f06:	d9c4      	bls.n	8009e92 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	68fa      	ldr	r2, [r7, #12]
 8009f0c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	693a      	ldr	r2, [r7, #16]
 8009f12:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8009f14:	bf00      	nop
 8009f16:	3718      	adds	r7, #24
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b082      	sub	sp, #8
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d101      	bne.n	8009f2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e041      	b.n	8009fb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d106      	bne.n	8009f48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f7f9 faca 	bl	80034dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2202      	movs	r2, #2
 8009f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681a      	ldr	r2, [r3, #0]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	3304      	adds	r3, #4
 8009f58:	4619      	mov	r1, r3
 8009f5a:	4610      	mov	r0, r2
 8009f5c:	f000 fc42 	bl	800a7e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2201      	movs	r2, #1
 8009f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2201      	movs	r2, #1
 8009f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2201      	movs	r2, #1
 8009f94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2201      	movs	r2, #1
 8009fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009fb0:	2300      	movs	r3, #0
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3708      	adds	r7, #8
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
	...

08009fbc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b085      	sub	sp, #20
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d001      	beq.n	8009fd4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	e046      	b.n	800a062 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2202      	movs	r2, #2
 8009fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a23      	ldr	r2, [pc, #140]	; (800a070 <HAL_TIM_Base_Start+0xb4>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d022      	beq.n	800a02c <HAL_TIM_Base_Start+0x70>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fee:	d01d      	beq.n	800a02c <HAL_TIM_Base_Start+0x70>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a1f      	ldr	r2, [pc, #124]	; (800a074 <HAL_TIM_Base_Start+0xb8>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d018      	beq.n	800a02c <HAL_TIM_Base_Start+0x70>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a1e      	ldr	r2, [pc, #120]	; (800a078 <HAL_TIM_Base_Start+0xbc>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d013      	beq.n	800a02c <HAL_TIM_Base_Start+0x70>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a1c      	ldr	r2, [pc, #112]	; (800a07c <HAL_TIM_Base_Start+0xc0>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d00e      	beq.n	800a02c <HAL_TIM_Base_Start+0x70>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4a1b      	ldr	r2, [pc, #108]	; (800a080 <HAL_TIM_Base_Start+0xc4>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d009      	beq.n	800a02c <HAL_TIM_Base_Start+0x70>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a19      	ldr	r2, [pc, #100]	; (800a084 <HAL_TIM_Base_Start+0xc8>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d004      	beq.n	800a02c <HAL_TIM_Base_Start+0x70>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4a18      	ldr	r2, [pc, #96]	; (800a088 <HAL_TIM_Base_Start+0xcc>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d111      	bne.n	800a050 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	689b      	ldr	r3, [r3, #8]
 800a032:	f003 0307 	and.w	r3, r3, #7
 800a036:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2b06      	cmp	r3, #6
 800a03c:	d010      	beq.n	800a060 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f042 0201 	orr.w	r2, r2, #1
 800a04c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a04e:	e007      	b.n	800a060 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	681a      	ldr	r2, [r3, #0]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f042 0201 	orr.w	r2, r2, #1
 800a05e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a060:	2300      	movs	r3, #0
}
 800a062:	4618      	mov	r0, r3
 800a064:	3714      	adds	r7, #20
 800a066:	46bd      	mov	sp, r7
 800a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06c:	4770      	bx	lr
 800a06e:	bf00      	nop
 800a070:	40010000 	.word	0x40010000
 800a074:	40000400 	.word	0x40000400
 800a078:	40000800 	.word	0x40000800
 800a07c:	40000c00 	.word	0x40000c00
 800a080:	40010400 	.word	0x40010400
 800a084:	40014000 	.word	0x40014000
 800a088:	40001800 	.word	0x40001800

0800a08c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	6a1a      	ldr	r2, [r3, #32]
 800a09a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a09e:	4013      	ands	r3, r2
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d10f      	bne.n	800a0c4 <HAL_TIM_Base_Stop+0x38>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	6a1a      	ldr	r2, [r3, #32]
 800a0aa:	f240 4344 	movw	r3, #1092	; 0x444
 800a0ae:	4013      	ands	r3, r2
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d107      	bne.n	800a0c4 <HAL_TIM_Base_Stop+0x38>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f022 0201 	bic.w	r2, r2, #1
 800a0c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a0cc:	2300      	movs	r3, #0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	370c      	adds	r7, #12
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr
	...

0800a0dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b085      	sub	sp, #20
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d001      	beq.n	800a0f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	e04e      	b.n	800a192 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2202      	movs	r2, #2
 800a0f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	68da      	ldr	r2, [r3, #12]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f042 0201 	orr.w	r2, r2, #1
 800a10a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a23      	ldr	r2, [pc, #140]	; (800a1a0 <HAL_TIM_Base_Start_IT+0xc4>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d022      	beq.n	800a15c <HAL_TIM_Base_Start_IT+0x80>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a11e:	d01d      	beq.n	800a15c <HAL_TIM_Base_Start_IT+0x80>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4a1f      	ldr	r2, [pc, #124]	; (800a1a4 <HAL_TIM_Base_Start_IT+0xc8>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d018      	beq.n	800a15c <HAL_TIM_Base_Start_IT+0x80>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	4a1e      	ldr	r2, [pc, #120]	; (800a1a8 <HAL_TIM_Base_Start_IT+0xcc>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d013      	beq.n	800a15c <HAL_TIM_Base_Start_IT+0x80>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4a1c      	ldr	r2, [pc, #112]	; (800a1ac <HAL_TIM_Base_Start_IT+0xd0>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d00e      	beq.n	800a15c <HAL_TIM_Base_Start_IT+0x80>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4a1b      	ldr	r2, [pc, #108]	; (800a1b0 <HAL_TIM_Base_Start_IT+0xd4>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d009      	beq.n	800a15c <HAL_TIM_Base_Start_IT+0x80>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4a19      	ldr	r2, [pc, #100]	; (800a1b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d004      	beq.n	800a15c <HAL_TIM_Base_Start_IT+0x80>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a18      	ldr	r2, [pc, #96]	; (800a1b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d111      	bne.n	800a180 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	689b      	ldr	r3, [r3, #8]
 800a162:	f003 0307 	and.w	r3, r3, #7
 800a166:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2b06      	cmp	r3, #6
 800a16c:	d010      	beq.n	800a190 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f042 0201 	orr.w	r2, r2, #1
 800a17c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a17e:	e007      	b.n	800a190 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	681a      	ldr	r2, [r3, #0]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f042 0201 	orr.w	r2, r2, #1
 800a18e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	3714      	adds	r7, #20
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr
 800a19e:	bf00      	nop
 800a1a0:	40010000 	.word	0x40010000
 800a1a4:	40000400 	.word	0x40000400
 800a1a8:	40000800 	.word	0x40000800
 800a1ac:	40000c00 	.word	0x40000c00
 800a1b0:	40010400 	.word	0x40010400
 800a1b4:	40014000 	.word	0x40014000
 800a1b8:	40001800 	.word	0x40001800

0800a1bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d101      	bne.n	800a1ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	e041      	b.n	800a252 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d106      	bne.n	800a1e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f000 f839 	bl	800a25a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2202      	movs	r2, #2
 800a1ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	3304      	adds	r3, #4
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	4610      	mov	r0, r2
 800a1fc:	f000 faf2 	bl	800a7e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2201      	movs	r2, #1
 800a204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2201      	movs	r2, #1
 800a20c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2201      	movs	r2, #1
 800a214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2201      	movs	r2, #1
 800a21c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2201      	movs	r2, #1
 800a224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2201      	movs	r2, #1
 800a22c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2201      	movs	r2, #1
 800a234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2201      	movs	r2, #1
 800a23c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2201      	movs	r2, #1
 800a244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2201      	movs	r2, #1
 800a24c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a250:	2300      	movs	r3, #0
}
 800a252:	4618      	mov	r0, r3
 800a254:	3708      	adds	r7, #8
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}

0800a25a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a25a:	b480      	push	{r7}
 800a25c:	b083      	sub	sp, #12
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a262:	bf00      	nop
 800a264:	370c      	adds	r7, #12
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr

0800a26e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a26e:	b580      	push	{r7, lr}
 800a270:	b082      	sub	sp, #8
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	691b      	ldr	r3, [r3, #16]
 800a27c:	f003 0302 	and.w	r3, r3, #2
 800a280:	2b02      	cmp	r3, #2
 800a282:	d122      	bne.n	800a2ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	f003 0302 	and.w	r3, r3, #2
 800a28e:	2b02      	cmp	r3, #2
 800a290:	d11b      	bne.n	800a2ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f06f 0202 	mvn.w	r2, #2
 800a29a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2201      	movs	r2, #1
 800a2a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	699b      	ldr	r3, [r3, #24]
 800a2a8:	f003 0303 	and.w	r3, r3, #3
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d003      	beq.n	800a2b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 fa78 	bl	800a7a6 <HAL_TIM_IC_CaptureCallback>
 800a2b6:	e005      	b.n	800a2c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f000 fa6a 	bl	800a792 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 fa7b 	bl	800a7ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	691b      	ldr	r3, [r3, #16]
 800a2d0:	f003 0304 	and.w	r3, r3, #4
 800a2d4:	2b04      	cmp	r3, #4
 800a2d6:	d122      	bne.n	800a31e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	f003 0304 	and.w	r3, r3, #4
 800a2e2:	2b04      	cmp	r3, #4
 800a2e4:	d11b      	bne.n	800a31e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f06f 0204 	mvn.w	r2, #4
 800a2ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2202      	movs	r2, #2
 800a2f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	699b      	ldr	r3, [r3, #24]
 800a2fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a300:	2b00      	cmp	r3, #0
 800a302:	d003      	beq.n	800a30c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 fa4e 	bl	800a7a6 <HAL_TIM_IC_CaptureCallback>
 800a30a:	e005      	b.n	800a318 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f000 fa40 	bl	800a792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 fa51 	bl	800a7ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	691b      	ldr	r3, [r3, #16]
 800a324:	f003 0308 	and.w	r3, r3, #8
 800a328:	2b08      	cmp	r3, #8
 800a32a:	d122      	bne.n	800a372 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	68db      	ldr	r3, [r3, #12]
 800a332:	f003 0308 	and.w	r3, r3, #8
 800a336:	2b08      	cmp	r3, #8
 800a338:	d11b      	bne.n	800a372 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f06f 0208 	mvn.w	r2, #8
 800a342:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2204      	movs	r2, #4
 800a348:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	69db      	ldr	r3, [r3, #28]
 800a350:	f003 0303 	and.w	r3, r3, #3
 800a354:	2b00      	cmp	r3, #0
 800a356:	d003      	beq.n	800a360 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f000 fa24 	bl	800a7a6 <HAL_TIM_IC_CaptureCallback>
 800a35e:	e005      	b.n	800a36c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f000 fa16 	bl	800a792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 fa27 	bl	800a7ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2200      	movs	r2, #0
 800a370:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	691b      	ldr	r3, [r3, #16]
 800a378:	f003 0310 	and.w	r3, r3, #16
 800a37c:	2b10      	cmp	r3, #16
 800a37e:	d122      	bne.n	800a3c6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	68db      	ldr	r3, [r3, #12]
 800a386:	f003 0310 	and.w	r3, r3, #16
 800a38a:	2b10      	cmp	r3, #16
 800a38c:	d11b      	bne.n	800a3c6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f06f 0210 	mvn.w	r2, #16
 800a396:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2208      	movs	r2, #8
 800a39c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	69db      	ldr	r3, [r3, #28]
 800a3a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d003      	beq.n	800a3b4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 f9fa 	bl	800a7a6 <HAL_TIM_IC_CaptureCallback>
 800a3b2:	e005      	b.n	800a3c0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 f9ec 	bl	800a792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 f9fd 	bl	800a7ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	691b      	ldr	r3, [r3, #16]
 800a3cc:	f003 0301 	and.w	r3, r3, #1
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	d10e      	bne.n	800a3f2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	68db      	ldr	r3, [r3, #12]
 800a3da:	f003 0301 	and.w	r3, r3, #1
 800a3de:	2b01      	cmp	r3, #1
 800a3e0:	d107      	bne.n	800a3f2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f06f 0201 	mvn.w	r2, #1
 800a3ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f7f7 fff9 	bl	80023e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	691b      	ldr	r3, [r3, #16]
 800a3f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3fc:	2b80      	cmp	r3, #128	; 0x80
 800a3fe:	d10e      	bne.n	800a41e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	68db      	ldr	r3, [r3, #12]
 800a406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a40a:	2b80      	cmp	r3, #128	; 0x80
 800a40c:	d107      	bne.n	800a41e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 fda5 	bl	800af68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	691b      	ldr	r3, [r3, #16]
 800a424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a428:	2b40      	cmp	r3, #64	; 0x40
 800a42a:	d10e      	bne.n	800a44a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	68db      	ldr	r3, [r3, #12]
 800a432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a436:	2b40      	cmp	r3, #64	; 0x40
 800a438:	d107      	bne.n	800a44a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 f9c2 	bl	800a7ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	691b      	ldr	r3, [r3, #16]
 800a450:	f003 0320 	and.w	r3, r3, #32
 800a454:	2b20      	cmp	r3, #32
 800a456:	d10e      	bne.n	800a476 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	68db      	ldr	r3, [r3, #12]
 800a45e:	f003 0320 	and.w	r3, r3, #32
 800a462:	2b20      	cmp	r3, #32
 800a464:	d107      	bne.n	800a476 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f06f 0220 	mvn.w	r2, #32
 800a46e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 fd6f 	bl	800af54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a476:	bf00      	nop
 800a478:	3708      	adds	r7, #8
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
	...

0800a480 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b086      	sub	sp, #24
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a48c:	2300      	movs	r3, #0
 800a48e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a496:	2b01      	cmp	r3, #1
 800a498:	d101      	bne.n	800a49e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a49a:	2302      	movs	r3, #2
 800a49c:	e0ae      	b.n	800a5fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2b0c      	cmp	r3, #12
 800a4aa:	f200 809f 	bhi.w	800a5ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a4ae:	a201      	add	r2, pc, #4	; (adr r2, 800a4b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b4:	0800a4e9 	.word	0x0800a4e9
 800a4b8:	0800a5ed 	.word	0x0800a5ed
 800a4bc:	0800a5ed 	.word	0x0800a5ed
 800a4c0:	0800a5ed 	.word	0x0800a5ed
 800a4c4:	0800a529 	.word	0x0800a529
 800a4c8:	0800a5ed 	.word	0x0800a5ed
 800a4cc:	0800a5ed 	.word	0x0800a5ed
 800a4d0:	0800a5ed 	.word	0x0800a5ed
 800a4d4:	0800a56b 	.word	0x0800a56b
 800a4d8:	0800a5ed 	.word	0x0800a5ed
 800a4dc:	0800a5ed 	.word	0x0800a5ed
 800a4e0:	0800a5ed 	.word	0x0800a5ed
 800a4e4:	0800a5ab 	.word	0x0800a5ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	68b9      	ldr	r1, [r7, #8]
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f000 fa18 	bl	800a924 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	699a      	ldr	r2, [r3, #24]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f042 0208 	orr.w	r2, r2, #8
 800a502:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	699a      	ldr	r2, [r3, #24]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f022 0204 	bic.w	r2, r2, #4
 800a512:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	6999      	ldr	r1, [r3, #24]
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	691a      	ldr	r2, [r3, #16]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	430a      	orrs	r2, r1
 800a524:	619a      	str	r2, [r3, #24]
      break;
 800a526:	e064      	b.n	800a5f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	68b9      	ldr	r1, [r7, #8]
 800a52e:	4618      	mov	r0, r3
 800a530:	f000 fa68 	bl	800aa04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	699a      	ldr	r2, [r3, #24]
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a542:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	699a      	ldr	r2, [r3, #24]
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a552:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	6999      	ldr	r1, [r3, #24]
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	691b      	ldr	r3, [r3, #16]
 800a55e:	021a      	lsls	r2, r3, #8
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	430a      	orrs	r2, r1
 800a566:	619a      	str	r2, [r3, #24]
      break;
 800a568:	e043      	b.n	800a5f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	68b9      	ldr	r1, [r7, #8]
 800a570:	4618      	mov	r0, r3
 800a572:	f000 fabd 	bl	800aaf0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	69da      	ldr	r2, [r3, #28]
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f042 0208 	orr.w	r2, r2, #8
 800a584:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	69da      	ldr	r2, [r3, #28]
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f022 0204 	bic.w	r2, r2, #4
 800a594:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	69d9      	ldr	r1, [r3, #28]
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	691a      	ldr	r2, [r3, #16]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	430a      	orrs	r2, r1
 800a5a6:	61da      	str	r2, [r3, #28]
      break;
 800a5a8:	e023      	b.n	800a5f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	68b9      	ldr	r1, [r7, #8]
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f000 fb11 	bl	800abd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	69da      	ldr	r2, [r3, #28]
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a5c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	69da      	ldr	r2, [r3, #28]
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	69d9      	ldr	r1, [r3, #28]
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	691b      	ldr	r3, [r3, #16]
 800a5e0:	021a      	lsls	r2, r3, #8
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	430a      	orrs	r2, r1
 800a5e8:	61da      	str	r2, [r3, #28]
      break;
 800a5ea:	e002      	b.n	800a5f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	75fb      	strb	r3, [r7, #23]
      break;
 800a5f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a5fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3718      	adds	r7, #24
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b084      	sub	sp, #16
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a60e:	2300      	movs	r3, #0
 800a610:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d101      	bne.n	800a620 <HAL_TIM_ConfigClockSource+0x1c>
 800a61c:	2302      	movs	r3, #2
 800a61e:	e0b4      	b.n	800a78a <HAL_TIM_ConfigClockSource+0x186>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2201      	movs	r2, #1
 800a624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2202      	movs	r2, #2
 800a62c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a63e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a646:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	68ba      	ldr	r2, [r7, #8]
 800a64e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a658:	d03e      	beq.n	800a6d8 <HAL_TIM_ConfigClockSource+0xd4>
 800a65a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a65e:	f200 8087 	bhi.w	800a770 <HAL_TIM_ConfigClockSource+0x16c>
 800a662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a666:	f000 8086 	beq.w	800a776 <HAL_TIM_ConfigClockSource+0x172>
 800a66a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a66e:	d87f      	bhi.n	800a770 <HAL_TIM_ConfigClockSource+0x16c>
 800a670:	2b70      	cmp	r3, #112	; 0x70
 800a672:	d01a      	beq.n	800a6aa <HAL_TIM_ConfigClockSource+0xa6>
 800a674:	2b70      	cmp	r3, #112	; 0x70
 800a676:	d87b      	bhi.n	800a770 <HAL_TIM_ConfigClockSource+0x16c>
 800a678:	2b60      	cmp	r3, #96	; 0x60
 800a67a:	d050      	beq.n	800a71e <HAL_TIM_ConfigClockSource+0x11a>
 800a67c:	2b60      	cmp	r3, #96	; 0x60
 800a67e:	d877      	bhi.n	800a770 <HAL_TIM_ConfigClockSource+0x16c>
 800a680:	2b50      	cmp	r3, #80	; 0x50
 800a682:	d03c      	beq.n	800a6fe <HAL_TIM_ConfigClockSource+0xfa>
 800a684:	2b50      	cmp	r3, #80	; 0x50
 800a686:	d873      	bhi.n	800a770 <HAL_TIM_ConfigClockSource+0x16c>
 800a688:	2b40      	cmp	r3, #64	; 0x40
 800a68a:	d058      	beq.n	800a73e <HAL_TIM_ConfigClockSource+0x13a>
 800a68c:	2b40      	cmp	r3, #64	; 0x40
 800a68e:	d86f      	bhi.n	800a770 <HAL_TIM_ConfigClockSource+0x16c>
 800a690:	2b30      	cmp	r3, #48	; 0x30
 800a692:	d064      	beq.n	800a75e <HAL_TIM_ConfigClockSource+0x15a>
 800a694:	2b30      	cmp	r3, #48	; 0x30
 800a696:	d86b      	bhi.n	800a770 <HAL_TIM_ConfigClockSource+0x16c>
 800a698:	2b20      	cmp	r3, #32
 800a69a:	d060      	beq.n	800a75e <HAL_TIM_ConfigClockSource+0x15a>
 800a69c:	2b20      	cmp	r3, #32
 800a69e:	d867      	bhi.n	800a770 <HAL_TIM_ConfigClockSource+0x16c>
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d05c      	beq.n	800a75e <HAL_TIM_ConfigClockSource+0x15a>
 800a6a4:	2b10      	cmp	r3, #16
 800a6a6:	d05a      	beq.n	800a75e <HAL_TIM_ConfigClockSource+0x15a>
 800a6a8:	e062      	b.n	800a770 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6818      	ldr	r0, [r3, #0]
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	6899      	ldr	r1, [r3, #8]
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	685a      	ldr	r2, [r3, #4]
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	f000 fb5d 	bl	800ad78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	689b      	ldr	r3, [r3, #8]
 800a6c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a6cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	68ba      	ldr	r2, [r7, #8]
 800a6d4:	609a      	str	r2, [r3, #8]
      break;
 800a6d6:	e04f      	b.n	800a778 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6818      	ldr	r0, [r3, #0]
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	6899      	ldr	r1, [r3, #8]
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	685a      	ldr	r2, [r3, #4]
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	f000 fb46 	bl	800ad78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	689a      	ldr	r2, [r3, #8]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a6fa:	609a      	str	r2, [r3, #8]
      break;
 800a6fc:	e03c      	b.n	800a778 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6818      	ldr	r0, [r3, #0]
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	6859      	ldr	r1, [r3, #4]
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	68db      	ldr	r3, [r3, #12]
 800a70a:	461a      	mov	r2, r3
 800a70c:	f000 faba 	bl	800ac84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	2150      	movs	r1, #80	; 0x50
 800a716:	4618      	mov	r0, r3
 800a718:	f000 fb13 	bl	800ad42 <TIM_ITRx_SetConfig>
      break;
 800a71c:	e02c      	b.n	800a778 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6818      	ldr	r0, [r3, #0]
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	6859      	ldr	r1, [r3, #4]
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	68db      	ldr	r3, [r3, #12]
 800a72a:	461a      	mov	r2, r3
 800a72c:	f000 fad9 	bl	800ace2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2160      	movs	r1, #96	; 0x60
 800a736:	4618      	mov	r0, r3
 800a738:	f000 fb03 	bl	800ad42 <TIM_ITRx_SetConfig>
      break;
 800a73c:	e01c      	b.n	800a778 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6818      	ldr	r0, [r3, #0]
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	6859      	ldr	r1, [r3, #4]
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	68db      	ldr	r3, [r3, #12]
 800a74a:	461a      	mov	r2, r3
 800a74c:	f000 fa9a 	bl	800ac84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	2140      	movs	r1, #64	; 0x40
 800a756:	4618      	mov	r0, r3
 800a758:	f000 faf3 	bl	800ad42 <TIM_ITRx_SetConfig>
      break;
 800a75c:	e00c      	b.n	800a778 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681a      	ldr	r2, [r3, #0]
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4619      	mov	r1, r3
 800a768:	4610      	mov	r0, r2
 800a76a:	f000 faea 	bl	800ad42 <TIM_ITRx_SetConfig>
      break;
 800a76e:	e003      	b.n	800a778 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a770:	2301      	movs	r3, #1
 800a772:	73fb      	strb	r3, [r7, #15]
      break;
 800a774:	e000      	b.n	800a778 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a776:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2201      	movs	r2, #1
 800a77c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2200      	movs	r2, #0
 800a784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a788:	7bfb      	ldrb	r3, [r7, #15]
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3710      	adds	r7, #16
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}

0800a792 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a792:	b480      	push	{r7}
 800a794:	b083      	sub	sp, #12
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a79a:	bf00      	nop
 800a79c:	370c      	adds	r7, #12
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr

0800a7a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a7a6:	b480      	push	{r7}
 800a7a8:	b083      	sub	sp, #12
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a7ae:	bf00      	nop
 800a7b0:	370c      	adds	r7, #12
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b8:	4770      	bx	lr

0800a7ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a7ba:	b480      	push	{r7}
 800a7bc:	b083      	sub	sp, #12
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a7c2:	bf00      	nop
 800a7c4:	370c      	adds	r7, #12
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr

0800a7ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a7ce:	b480      	push	{r7}
 800a7d0:	b083      	sub	sp, #12
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a7d6:	bf00      	nop
 800a7d8:	370c      	adds	r7, #12
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e0:	4770      	bx	lr
	...

0800a7e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b085      	sub	sp, #20
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	4a40      	ldr	r2, [pc, #256]	; (800a8f8 <TIM_Base_SetConfig+0x114>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d013      	beq.n	800a824 <TIM_Base_SetConfig+0x40>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a802:	d00f      	beq.n	800a824 <TIM_Base_SetConfig+0x40>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	4a3d      	ldr	r2, [pc, #244]	; (800a8fc <TIM_Base_SetConfig+0x118>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	d00b      	beq.n	800a824 <TIM_Base_SetConfig+0x40>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	4a3c      	ldr	r2, [pc, #240]	; (800a900 <TIM_Base_SetConfig+0x11c>)
 800a810:	4293      	cmp	r3, r2
 800a812:	d007      	beq.n	800a824 <TIM_Base_SetConfig+0x40>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	4a3b      	ldr	r2, [pc, #236]	; (800a904 <TIM_Base_SetConfig+0x120>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d003      	beq.n	800a824 <TIM_Base_SetConfig+0x40>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	4a3a      	ldr	r2, [pc, #232]	; (800a908 <TIM_Base_SetConfig+0x124>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d108      	bne.n	800a836 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a82a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	68fa      	ldr	r2, [r7, #12]
 800a832:	4313      	orrs	r3, r2
 800a834:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	4a2f      	ldr	r2, [pc, #188]	; (800a8f8 <TIM_Base_SetConfig+0x114>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d02b      	beq.n	800a896 <TIM_Base_SetConfig+0xb2>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a844:	d027      	beq.n	800a896 <TIM_Base_SetConfig+0xb2>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	4a2c      	ldr	r2, [pc, #176]	; (800a8fc <TIM_Base_SetConfig+0x118>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d023      	beq.n	800a896 <TIM_Base_SetConfig+0xb2>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	4a2b      	ldr	r2, [pc, #172]	; (800a900 <TIM_Base_SetConfig+0x11c>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d01f      	beq.n	800a896 <TIM_Base_SetConfig+0xb2>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	4a2a      	ldr	r2, [pc, #168]	; (800a904 <TIM_Base_SetConfig+0x120>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d01b      	beq.n	800a896 <TIM_Base_SetConfig+0xb2>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	4a29      	ldr	r2, [pc, #164]	; (800a908 <TIM_Base_SetConfig+0x124>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d017      	beq.n	800a896 <TIM_Base_SetConfig+0xb2>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	4a28      	ldr	r2, [pc, #160]	; (800a90c <TIM_Base_SetConfig+0x128>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d013      	beq.n	800a896 <TIM_Base_SetConfig+0xb2>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	4a27      	ldr	r2, [pc, #156]	; (800a910 <TIM_Base_SetConfig+0x12c>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d00f      	beq.n	800a896 <TIM_Base_SetConfig+0xb2>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	4a26      	ldr	r2, [pc, #152]	; (800a914 <TIM_Base_SetConfig+0x130>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d00b      	beq.n	800a896 <TIM_Base_SetConfig+0xb2>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	4a25      	ldr	r2, [pc, #148]	; (800a918 <TIM_Base_SetConfig+0x134>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d007      	beq.n	800a896 <TIM_Base_SetConfig+0xb2>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	4a24      	ldr	r2, [pc, #144]	; (800a91c <TIM_Base_SetConfig+0x138>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d003      	beq.n	800a896 <TIM_Base_SetConfig+0xb2>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	4a23      	ldr	r2, [pc, #140]	; (800a920 <TIM_Base_SetConfig+0x13c>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d108      	bne.n	800a8a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a89c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	68db      	ldr	r3, [r3, #12]
 800a8a2:	68fa      	ldr	r2, [r7, #12]
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	695b      	ldr	r3, [r3, #20]
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	689a      	ldr	r2, [r3, #8]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	681a      	ldr	r2, [r3, #0]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	4a0a      	ldr	r2, [pc, #40]	; (800a8f8 <TIM_Base_SetConfig+0x114>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d003      	beq.n	800a8dc <TIM_Base_SetConfig+0xf8>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	4a0c      	ldr	r2, [pc, #48]	; (800a908 <TIM_Base_SetConfig+0x124>)
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d103      	bne.n	800a8e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	691a      	ldr	r2, [r3, #16]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	615a      	str	r2, [r3, #20]
}
 800a8ea:	bf00      	nop
 800a8ec:	3714      	adds	r7, #20
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr
 800a8f6:	bf00      	nop
 800a8f8:	40010000 	.word	0x40010000
 800a8fc:	40000400 	.word	0x40000400
 800a900:	40000800 	.word	0x40000800
 800a904:	40000c00 	.word	0x40000c00
 800a908:	40010400 	.word	0x40010400
 800a90c:	40014000 	.word	0x40014000
 800a910:	40014400 	.word	0x40014400
 800a914:	40014800 	.word	0x40014800
 800a918:	40001800 	.word	0x40001800
 800a91c:	40001c00 	.word	0x40001c00
 800a920:	40002000 	.word	0x40002000

0800a924 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a924:	b480      	push	{r7}
 800a926:	b087      	sub	sp, #28
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6a1b      	ldr	r3, [r3, #32]
 800a932:	f023 0201 	bic.w	r2, r3, #1
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6a1b      	ldr	r3, [r3, #32]
 800a93e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	699b      	ldr	r3, [r3, #24]
 800a94a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f023 0303 	bic.w	r3, r3, #3
 800a95a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	68fa      	ldr	r2, [r7, #12]
 800a962:	4313      	orrs	r3, r2
 800a964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	f023 0302 	bic.w	r3, r3, #2
 800a96c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	689b      	ldr	r3, [r3, #8]
 800a972:	697a      	ldr	r2, [r7, #20]
 800a974:	4313      	orrs	r3, r2
 800a976:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	4a20      	ldr	r2, [pc, #128]	; (800a9fc <TIM_OC1_SetConfig+0xd8>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d003      	beq.n	800a988 <TIM_OC1_SetConfig+0x64>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	4a1f      	ldr	r2, [pc, #124]	; (800aa00 <TIM_OC1_SetConfig+0xdc>)
 800a984:	4293      	cmp	r3, r2
 800a986:	d10c      	bne.n	800a9a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	f023 0308 	bic.w	r3, r3, #8
 800a98e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	68db      	ldr	r3, [r3, #12]
 800a994:	697a      	ldr	r2, [r7, #20]
 800a996:	4313      	orrs	r3, r2
 800a998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	f023 0304 	bic.w	r3, r3, #4
 800a9a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	4a15      	ldr	r2, [pc, #84]	; (800a9fc <TIM_OC1_SetConfig+0xd8>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d003      	beq.n	800a9b2 <TIM_OC1_SetConfig+0x8e>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	4a14      	ldr	r2, [pc, #80]	; (800aa00 <TIM_OC1_SetConfig+0xdc>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d111      	bne.n	800a9d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a9c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	695b      	ldr	r3, [r3, #20]
 800a9c6:	693a      	ldr	r2, [r7, #16]
 800a9c8:	4313      	orrs	r3, r2
 800a9ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	699b      	ldr	r3, [r3, #24]
 800a9d0:	693a      	ldr	r2, [r7, #16]
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	693a      	ldr	r2, [r7, #16]
 800a9da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	685a      	ldr	r2, [r3, #4]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	697a      	ldr	r2, [r7, #20]
 800a9ee:	621a      	str	r2, [r3, #32]
}
 800a9f0:	bf00      	nop
 800a9f2:	371c      	adds	r7, #28
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr
 800a9fc:	40010000 	.word	0x40010000
 800aa00:	40010400 	.word	0x40010400

0800aa04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b087      	sub	sp, #28
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6a1b      	ldr	r3, [r3, #32]
 800aa12:	f023 0210 	bic.w	r2, r3, #16
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6a1b      	ldr	r3, [r3, #32]
 800aa1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	699b      	ldr	r3, [r3, #24]
 800aa2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	021b      	lsls	r3, r3, #8
 800aa42:	68fa      	ldr	r2, [r7, #12]
 800aa44:	4313      	orrs	r3, r2
 800aa46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	f023 0320 	bic.w	r3, r3, #32
 800aa4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	689b      	ldr	r3, [r3, #8]
 800aa54:	011b      	lsls	r3, r3, #4
 800aa56:	697a      	ldr	r2, [r7, #20]
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	4a22      	ldr	r2, [pc, #136]	; (800aae8 <TIM_OC2_SetConfig+0xe4>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d003      	beq.n	800aa6c <TIM_OC2_SetConfig+0x68>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	4a21      	ldr	r2, [pc, #132]	; (800aaec <TIM_OC2_SetConfig+0xe8>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d10d      	bne.n	800aa88 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	68db      	ldr	r3, [r3, #12]
 800aa78:	011b      	lsls	r3, r3, #4
 800aa7a:	697a      	ldr	r2, [r7, #20]
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	4a17      	ldr	r2, [pc, #92]	; (800aae8 <TIM_OC2_SetConfig+0xe4>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d003      	beq.n	800aa98 <TIM_OC2_SetConfig+0x94>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	4a16      	ldr	r2, [pc, #88]	; (800aaec <TIM_OC2_SetConfig+0xe8>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d113      	bne.n	800aac0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aaa6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	695b      	ldr	r3, [r3, #20]
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	693a      	ldr	r2, [r7, #16]
 800aab0:	4313      	orrs	r3, r2
 800aab2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	699b      	ldr	r3, [r3, #24]
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	693a      	ldr	r2, [r7, #16]
 800aabc:	4313      	orrs	r3, r2
 800aabe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	693a      	ldr	r2, [r7, #16]
 800aac4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	68fa      	ldr	r2, [r7, #12]
 800aaca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	685a      	ldr	r2, [r3, #4]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	697a      	ldr	r2, [r7, #20]
 800aad8:	621a      	str	r2, [r3, #32]
}
 800aada:	bf00      	nop
 800aadc:	371c      	adds	r7, #28
 800aade:	46bd      	mov	sp, r7
 800aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae4:	4770      	bx	lr
 800aae6:	bf00      	nop
 800aae8:	40010000 	.word	0x40010000
 800aaec:	40010400 	.word	0x40010400

0800aaf0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b087      	sub	sp, #28
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6a1b      	ldr	r3, [r3, #32]
 800aafe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6a1b      	ldr	r3, [r3, #32]
 800ab0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	69db      	ldr	r3, [r3, #28]
 800ab16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f023 0303 	bic.w	r3, r3, #3
 800ab26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	68fa      	ldr	r2, [r7, #12]
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ab38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	689b      	ldr	r3, [r3, #8]
 800ab3e:	021b      	lsls	r3, r3, #8
 800ab40:	697a      	ldr	r2, [r7, #20]
 800ab42:	4313      	orrs	r3, r2
 800ab44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	4a21      	ldr	r2, [pc, #132]	; (800abd0 <TIM_OC3_SetConfig+0xe0>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d003      	beq.n	800ab56 <TIM_OC3_SetConfig+0x66>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	4a20      	ldr	r2, [pc, #128]	; (800abd4 <TIM_OC3_SetConfig+0xe4>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d10d      	bne.n	800ab72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	68db      	ldr	r3, [r3, #12]
 800ab62:	021b      	lsls	r3, r3, #8
 800ab64:	697a      	ldr	r2, [r7, #20]
 800ab66:	4313      	orrs	r3, r2
 800ab68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	4a16      	ldr	r2, [pc, #88]	; (800abd0 <TIM_OC3_SetConfig+0xe0>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d003      	beq.n	800ab82 <TIM_OC3_SetConfig+0x92>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	4a15      	ldr	r2, [pc, #84]	; (800abd4 <TIM_OC3_SetConfig+0xe4>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d113      	bne.n	800abaa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	695b      	ldr	r3, [r3, #20]
 800ab96:	011b      	lsls	r3, r3, #4
 800ab98:	693a      	ldr	r2, [r7, #16]
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	699b      	ldr	r3, [r3, #24]
 800aba2:	011b      	lsls	r3, r3, #4
 800aba4:	693a      	ldr	r2, [r7, #16]
 800aba6:	4313      	orrs	r3, r2
 800aba8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	693a      	ldr	r2, [r7, #16]
 800abae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	68fa      	ldr	r2, [r7, #12]
 800abb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	685a      	ldr	r2, [r3, #4]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	697a      	ldr	r2, [r7, #20]
 800abc2:	621a      	str	r2, [r3, #32]
}
 800abc4:	bf00      	nop
 800abc6:	371c      	adds	r7, #28
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr
 800abd0:	40010000 	.word	0x40010000
 800abd4:	40010400 	.word	0x40010400

0800abd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800abd8:	b480      	push	{r7}
 800abda:	b087      	sub	sp, #28
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6a1b      	ldr	r3, [r3, #32]
 800abe6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6a1b      	ldr	r3, [r3, #32]
 800abf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	69db      	ldr	r3, [r3, #28]
 800abfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	021b      	lsls	r3, r3, #8
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	689b      	ldr	r3, [r3, #8]
 800ac28:	031b      	lsls	r3, r3, #12
 800ac2a:	693a      	ldr	r2, [r7, #16]
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	4a12      	ldr	r2, [pc, #72]	; (800ac7c <TIM_OC4_SetConfig+0xa4>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d003      	beq.n	800ac40 <TIM_OC4_SetConfig+0x68>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	4a11      	ldr	r2, [pc, #68]	; (800ac80 <TIM_OC4_SetConfig+0xa8>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d109      	bne.n	800ac54 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	695b      	ldr	r3, [r3, #20]
 800ac4c:	019b      	lsls	r3, r3, #6
 800ac4e:	697a      	ldr	r2, [r7, #20]
 800ac50:	4313      	orrs	r3, r2
 800ac52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	697a      	ldr	r2, [r7, #20]
 800ac58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	68fa      	ldr	r2, [r7, #12]
 800ac5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	685a      	ldr	r2, [r3, #4]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	693a      	ldr	r2, [r7, #16]
 800ac6c:	621a      	str	r2, [r3, #32]
}
 800ac6e:	bf00      	nop
 800ac70:	371c      	adds	r7, #28
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr
 800ac7a:	bf00      	nop
 800ac7c:	40010000 	.word	0x40010000
 800ac80:	40010400 	.word	0x40010400

0800ac84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b087      	sub	sp, #28
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	60f8      	str	r0, [r7, #12]
 800ac8c:	60b9      	str	r1, [r7, #8]
 800ac8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	6a1b      	ldr	r3, [r3, #32]
 800ac94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	6a1b      	ldr	r3, [r3, #32]
 800ac9a:	f023 0201 	bic.w	r2, r3, #1
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	699b      	ldr	r3, [r3, #24]
 800aca6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800acae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	011b      	lsls	r3, r3, #4
 800acb4:	693a      	ldr	r2, [r7, #16]
 800acb6:	4313      	orrs	r3, r2
 800acb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	f023 030a 	bic.w	r3, r3, #10
 800acc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800acc2:	697a      	ldr	r2, [r7, #20]
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	4313      	orrs	r3, r2
 800acc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	693a      	ldr	r2, [r7, #16]
 800acce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	697a      	ldr	r2, [r7, #20]
 800acd4:	621a      	str	r2, [r3, #32]
}
 800acd6:	bf00      	nop
 800acd8:	371c      	adds	r7, #28
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr

0800ace2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ace2:	b480      	push	{r7}
 800ace4:	b087      	sub	sp, #28
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	60f8      	str	r0, [r7, #12]
 800acea:	60b9      	str	r1, [r7, #8]
 800acec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	6a1b      	ldr	r3, [r3, #32]
 800acf2:	f023 0210 	bic.w	r2, r3, #16
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	699b      	ldr	r3, [r3, #24]
 800acfe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	6a1b      	ldr	r3, [r3, #32]
 800ad04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ad0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	031b      	lsls	r3, r3, #12
 800ad12:	697a      	ldr	r2, [r7, #20]
 800ad14:	4313      	orrs	r3, r2
 800ad16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ad1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	011b      	lsls	r3, r3, #4
 800ad24:	693a      	ldr	r2, [r7, #16]
 800ad26:	4313      	orrs	r3, r2
 800ad28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	697a      	ldr	r2, [r7, #20]
 800ad2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	693a      	ldr	r2, [r7, #16]
 800ad34:	621a      	str	r2, [r3, #32]
}
 800ad36:	bf00      	nop
 800ad38:	371c      	adds	r7, #28
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr

0800ad42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ad42:	b480      	push	{r7}
 800ad44:	b085      	sub	sp, #20
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	6078      	str	r0, [r7, #4]
 800ad4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	689b      	ldr	r3, [r3, #8]
 800ad50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ad5a:	683a      	ldr	r2, [r7, #0]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	f043 0307 	orr.w	r3, r3, #7
 800ad64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	68fa      	ldr	r2, [r7, #12]
 800ad6a:	609a      	str	r2, [r3, #8]
}
 800ad6c:	bf00      	nop
 800ad6e:	3714      	adds	r7, #20
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr

0800ad78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b087      	sub	sp, #28
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	60b9      	str	r1, [r7, #8]
 800ad82:	607a      	str	r2, [r7, #4]
 800ad84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	689b      	ldr	r3, [r3, #8]
 800ad8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ad92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	021a      	lsls	r2, r3, #8
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	431a      	orrs	r2, r3
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	697a      	ldr	r2, [r7, #20]
 800ada2:	4313      	orrs	r3, r2
 800ada4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	697a      	ldr	r2, [r7, #20]
 800adaa:	609a      	str	r2, [r3, #8]
}
 800adac:	bf00      	nop
 800adae:	371c      	adds	r7, #28
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr

0800adb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800adb8:	b480      	push	{r7}
 800adba:	b085      	sub	sp, #20
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800adc8:	2b01      	cmp	r3, #1
 800adca:	d101      	bne.n	800add0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800adcc:	2302      	movs	r3, #2
 800adce:	e05a      	b.n	800ae86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2201      	movs	r2, #1
 800add4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2202      	movs	r2, #2
 800addc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	689b      	ldr	r3, [r3, #8]
 800adee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	68fa      	ldr	r2, [r7, #12]
 800adfe:	4313      	orrs	r3, r2
 800ae00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	68fa      	ldr	r2, [r7, #12]
 800ae08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4a21      	ldr	r2, [pc, #132]	; (800ae94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d022      	beq.n	800ae5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae1c:	d01d      	beq.n	800ae5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4a1d      	ldr	r2, [pc, #116]	; (800ae98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d018      	beq.n	800ae5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4a1b      	ldr	r2, [pc, #108]	; (800ae9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d013      	beq.n	800ae5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	4a1a      	ldr	r2, [pc, #104]	; (800aea0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d00e      	beq.n	800ae5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4a18      	ldr	r2, [pc, #96]	; (800aea4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d009      	beq.n	800ae5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	4a17      	ldr	r2, [pc, #92]	; (800aea8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d004      	beq.n	800ae5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4a15      	ldr	r2, [pc, #84]	; (800aeac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d10c      	bne.n	800ae74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	68ba      	ldr	r2, [r7, #8]
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	68ba      	ldr	r2, [r7, #8]
 800ae72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2201      	movs	r2, #1
 800ae78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ae84:	2300      	movs	r3, #0
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3714      	adds	r7, #20
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr
 800ae92:	bf00      	nop
 800ae94:	40010000 	.word	0x40010000
 800ae98:	40000400 	.word	0x40000400
 800ae9c:	40000800 	.word	0x40000800
 800aea0:	40000c00 	.word	0x40000c00
 800aea4:	40010400 	.word	0x40010400
 800aea8:	40014000 	.word	0x40014000
 800aeac:	40001800 	.word	0x40001800

0800aeb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b085      	sub	sp, #20
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800aeba:	2300      	movs	r3, #0
 800aebc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d101      	bne.n	800aecc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800aec8:	2302      	movs	r3, #2
 800aeca:	e03d      	b.n	800af48 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2201      	movs	r2, #1
 800aed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	68db      	ldr	r3, [r3, #12]
 800aede:	4313      	orrs	r3, r2
 800aee0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	689b      	ldr	r3, [r3, #8]
 800aeec:	4313      	orrs	r3, r2
 800aeee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	4313      	orrs	r3, r2
 800aefc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4313      	orrs	r3, r2
 800af0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	691b      	ldr	r3, [r3, #16]
 800af16:	4313      	orrs	r3, r2
 800af18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	695b      	ldr	r3, [r3, #20]
 800af24:	4313      	orrs	r3, r2
 800af26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	69db      	ldr	r3, [r3, #28]
 800af32:	4313      	orrs	r3, r2
 800af34:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	68fa      	ldr	r2, [r7, #12]
 800af3c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2200      	movs	r2, #0
 800af42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af46:	2300      	movs	r3, #0
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3714      	adds	r7, #20
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr

0800af54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af54:	b480      	push	{r7}
 800af56:	b083      	sub	sp, #12
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af5c:	bf00      	nop
 800af5e:	370c      	adds	r7, #12
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr

0800af68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af68:	b480      	push	{r7}
 800af6a:	b083      	sub	sp, #12
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800af70:	bf00      	nop
 800af72:	370c      	adds	r7, #12
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr

0800af7c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800af7c:	b084      	sub	sp, #16
 800af7e:	b480      	push	{r7}
 800af80:	b085      	sub	sp, #20
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
 800af86:	f107 001c 	add.w	r0, r7, #28
 800af8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800af8e:	2300      	movs	r3, #0
 800af90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800af92:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800af94:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800af96:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800af98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800af9a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800af9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800af9e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800afa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800afa2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800afa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800afa6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800afa8:	68fa      	ldr	r2, [r7, #12]
 800afaa:	4313      	orrs	r3, r2
 800afac:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	685b      	ldr	r3, [r3, #4]
 800afb2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800afb6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800afba:	68fa      	ldr	r2, [r7, #12]
 800afbc:	431a      	orrs	r2, r3
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800afc2:	2300      	movs	r3, #0
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3714      	adds	r7, #20
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	b004      	add	sp, #16
 800afd0:	4770      	bx	lr

0800afd2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800afd2:	b480      	push	{r7}
 800afd4:	b083      	sub	sp, #12
 800afd6:	af00      	add	r7, sp, #0
 800afd8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	370c      	adds	r7, #12
 800afe4:	46bd      	mov	sp, r7
 800afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afea:	4770      	bx	lr

0800afec <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800afec:	b480      	push	{r7}
 800afee:	b083      	sub	sp, #12
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b000:	2300      	movs	r3, #0
}
 800b002:	4618      	mov	r0, r3
 800b004:	370c      	adds	r7, #12
 800b006:	46bd      	mov	sp, r7
 800b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00c:	4770      	bx	lr

0800b00e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800b00e:	b480      	push	{r7}
 800b010:	b083      	sub	sp, #12
 800b012:	af00      	add	r7, sp, #0
 800b014:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2203      	movs	r2, #3
 800b01a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b01c:	2300      	movs	r3, #0
}
 800b01e:	4618      	mov	r0, r3
 800b020:	370c      	adds	r7, #12
 800b022:	46bd      	mov	sp, r7
 800b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b028:	4770      	bx	lr

0800b02a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800b02a:	b480      	push	{r7}
 800b02c:	b083      	sub	sp, #12
 800b02e:	af00      	add	r7, sp, #0
 800b030:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f003 0303 	and.w	r3, r3, #3
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	370c      	adds	r7, #12
 800b03e:	46bd      	mov	sp, r7
 800b040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b044:	4770      	bx	lr

0800b046 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800b046:	b480      	push	{r7}
 800b048:	b085      	sub	sp, #20
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6078      	str	r0, [r7, #4]
 800b04e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b050:	2300      	movs	r3, #0
 800b052:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	681a      	ldr	r2, [r3, #0]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b064:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b06a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b070:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b072:	68fa      	ldr	r2, [r7, #12]
 800b074:	4313      	orrs	r3, r2
 800b076:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	68db      	ldr	r3, [r3, #12]
 800b07c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b080:	f023 030f 	bic.w	r3, r3, #15
 800b084:	68fa      	ldr	r2, [r7, #12]
 800b086:	431a      	orrs	r2, r3
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b08c:	2300      	movs	r3, #0
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3714      	adds	r7, #20
 800b092:	46bd      	mov	sp, r7
 800b094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b098:	4770      	bx	lr

0800b09a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800b09a:	b480      	push	{r7}
 800b09c:	b083      	sub	sp, #12
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	691b      	ldr	r3, [r3, #16]
 800b0a6:	b2db      	uxtb	r3, r3
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	370c      	adds	r7, #12
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr

0800b0b4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b085      	sub	sp, #20
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	3314      	adds	r3, #20
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	4413      	add	r3, r2
 800b0c8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
}  
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3714      	adds	r7, #20
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr

0800b0da <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800b0da:	b480      	push	{r7}
 800b0dc:	b085      	sub	sp, #20
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	6078      	str	r0, [r7, #4]
 800b0e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	681a      	ldr	r2, [r3, #0]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	685a      	ldr	r2, [r3, #4]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b100:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b106:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b10c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b10e:	68fa      	ldr	r2, [r7, #12]
 800b110:	4313      	orrs	r3, r2
 800b112:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b118:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	431a      	orrs	r2, r3
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b124:	2300      	movs	r3, #0

}
 800b126:	4618      	mov	r0, r3
 800b128:	3714      	adds	r7, #20
 800b12a:	46bd      	mov	sp, r7
 800b12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b130:	4770      	bx	lr

0800b132 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800b132:	b580      	push	{r7, lr}
 800b134:	b088      	sub	sp, #32
 800b136:	af00      	add	r7, sp, #0
 800b138:	6078      	str	r0, [r7, #4]
 800b13a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b140:	2310      	movs	r3, #16
 800b142:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b144:	2340      	movs	r3, #64	; 0x40
 800b146:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b148:	2300      	movs	r3, #0
 800b14a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b14c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b150:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b152:	f107 0308 	add.w	r3, r7, #8
 800b156:	4619      	mov	r1, r3
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f7ff ff74 	bl	800b046 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800b15e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b162:	2110      	movs	r1, #16
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f000 f9d7 	bl	800b518 <SDMMC_GetCmdResp1>
 800b16a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b16c:	69fb      	ldr	r3, [r7, #28]
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3720      	adds	r7, #32
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}

0800b176 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b176:	b580      	push	{r7, lr}
 800b178:	b088      	sub	sp, #32
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	6078      	str	r0, [r7, #4]
 800b17e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b184:	2311      	movs	r3, #17
 800b186:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b188:	2340      	movs	r3, #64	; 0x40
 800b18a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b18c:	2300      	movs	r3, #0
 800b18e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b190:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b194:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b196:	f107 0308 	add.w	r3, r7, #8
 800b19a:	4619      	mov	r1, r3
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f7ff ff52 	bl	800b046 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b1a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1a6:	2111      	movs	r1, #17
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 f9b5 	bl	800b518 <SDMMC_GetCmdResp1>
 800b1ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1b0:	69fb      	ldr	r3, [r7, #28]
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3720      	adds	r7, #32
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}

0800b1ba <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b1ba:	b580      	push	{r7, lr}
 800b1bc:	b088      	sub	sp, #32
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	6078      	str	r0, [r7, #4]
 800b1c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b1c8:	2312      	movs	r3, #18
 800b1ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b1cc:	2340      	movs	r3, #64	; 0x40
 800b1ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b1d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b1da:	f107 0308 	add.w	r3, r7, #8
 800b1de:	4619      	mov	r1, r3
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f7ff ff30 	bl	800b046 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b1e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1ea:	2112      	movs	r1, #18
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f000 f993 	bl	800b518 <SDMMC_GetCmdResp1>
 800b1f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1f4:	69fb      	ldr	r3, [r7, #28]
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3720      	adds	r7, #32
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}

0800b1fe <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b1fe:	b580      	push	{r7, lr}
 800b200:	b088      	sub	sp, #32
 800b202:	af00      	add	r7, sp, #0
 800b204:	6078      	str	r0, [r7, #4]
 800b206:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b20c:	2318      	movs	r3, #24
 800b20e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b210:	2340      	movs	r3, #64	; 0x40
 800b212:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b214:	2300      	movs	r3, #0
 800b216:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b21c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b21e:	f107 0308 	add.w	r3, r7, #8
 800b222:	4619      	mov	r1, r3
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f7ff ff0e 	bl	800b046 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b22a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b22e:	2118      	movs	r1, #24
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 f971 	bl	800b518 <SDMMC_GetCmdResp1>
 800b236:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b238:	69fb      	ldr	r3, [r7, #28]
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3720      	adds	r7, #32
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}

0800b242 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b242:	b580      	push	{r7, lr}
 800b244:	b088      	sub	sp, #32
 800b246:	af00      	add	r7, sp, #0
 800b248:	6078      	str	r0, [r7, #4]
 800b24a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b250:	2319      	movs	r3, #25
 800b252:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b254:	2340      	movs	r3, #64	; 0x40
 800b256:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b258:	2300      	movs	r3, #0
 800b25a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b25c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b260:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b262:	f107 0308 	add.w	r3, r7, #8
 800b266:	4619      	mov	r1, r3
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f7ff feec 	bl	800b046 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b26e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b272:	2119      	movs	r1, #25
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f000 f94f 	bl	800b518 <SDMMC_GetCmdResp1>
 800b27a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b27c:	69fb      	ldr	r3, [r7, #28]
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3720      	adds	r7, #32
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}
	...

0800b288 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b088      	sub	sp, #32
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b290:	2300      	movs	r3, #0
 800b292:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b294:	230c      	movs	r3, #12
 800b296:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b298:	2340      	movs	r3, #64	; 0x40
 800b29a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b29c:	2300      	movs	r3, #0
 800b29e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b2a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b2a6:	f107 0308 	add.w	r3, r7, #8
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f7ff feca 	bl	800b046 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800b2b2:	4a05      	ldr	r2, [pc, #20]	; (800b2c8 <SDMMC_CmdStopTransfer+0x40>)
 800b2b4:	210c      	movs	r1, #12
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 f92e 	bl	800b518 <SDMMC_GetCmdResp1>
 800b2bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2be:	69fb      	ldr	r3, [r7, #28]
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3720      	adds	r7, #32
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}
 800b2c8:	05f5e100 	.word	0x05f5e100

0800b2cc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b08a      	sub	sp, #40	; 0x28
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	60f8      	str	r0, [r7, #12]
 800b2d4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b2dc:	2307      	movs	r3, #7
 800b2de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b2e0:	2340      	movs	r3, #64	; 0x40
 800b2e2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b2e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2ec:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b2ee:	f107 0310 	add.w	r3, r7, #16
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	68f8      	ldr	r0, [r7, #12]
 800b2f6:	f7ff fea6 	bl	800b046 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800b2fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2fe:	2107      	movs	r1, #7
 800b300:	68f8      	ldr	r0, [r7, #12]
 800b302:	f000 f909 	bl	800b518 <SDMMC_GetCmdResp1>
 800b306:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3728      	adds	r7, #40	; 0x28
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}

0800b312 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800b312:	b580      	push	{r7, lr}
 800b314:	b088      	sub	sp, #32
 800b316:	af00      	add	r7, sp, #0
 800b318:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b31a:	2300      	movs	r3, #0
 800b31c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b31e:	2300      	movs	r3, #0
 800b320:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800b322:	2300      	movs	r3, #0
 800b324:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b326:	2300      	movs	r3, #0
 800b328:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b32a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b32e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b330:	f107 0308 	add.w	r3, r7, #8
 800b334:	4619      	mov	r1, r3
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f7ff fe85 	bl	800b046 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f000 fb23 	bl	800b988 <SDMMC_GetCmdError>
 800b342:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b344:	69fb      	ldr	r3, [r7, #28]
}
 800b346:	4618      	mov	r0, r3
 800b348:	3720      	adds	r7, #32
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}

0800b34e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800b34e:	b580      	push	{r7, lr}
 800b350:	b088      	sub	sp, #32
 800b352:	af00      	add	r7, sp, #0
 800b354:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b356:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b35a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b35c:	2308      	movs	r3, #8
 800b35e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b360:	2340      	movs	r3, #64	; 0x40
 800b362:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b364:	2300      	movs	r3, #0
 800b366:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b36c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b36e:	f107 0308 	add.w	r3, r7, #8
 800b372:	4619      	mov	r1, r3
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f7ff fe66 	bl	800b046 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f000 fab6 	bl	800b8ec <SDMMC_GetCmdResp7>
 800b380:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b382:	69fb      	ldr	r3, [r7, #28]
}
 800b384:	4618      	mov	r0, r3
 800b386:	3720      	adds	r7, #32
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b088      	sub	sp, #32
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b39a:	2337      	movs	r3, #55	; 0x37
 800b39c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b39e:	2340      	movs	r3, #64	; 0x40
 800b3a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b3a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b3ac:	f107 0308 	add.w	r3, r7, #8
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f7ff fe47 	bl	800b046 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800b3b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3bc:	2137      	movs	r1, #55	; 0x37
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 f8aa 	bl	800b518 <SDMMC_GetCmdResp1>
 800b3c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3c6:	69fb      	ldr	r3, [r7, #28]
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3720      	adds	r7, #32
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b088      	sub	sp, #32
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b3e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b3e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b3e6:	2329      	movs	r3, #41	; 0x29
 800b3e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b3ea:	2340      	movs	r3, #64	; 0x40
 800b3ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b3f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b3f8:	f107 0308 	add.w	r3, r7, #8
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f7ff fe21 	bl	800b046 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f000 f9bd 	bl	800b784 <SDMMC_GetCmdResp3>
 800b40a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b40c:	69fb      	ldr	r3, [r7, #28]
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3720      	adds	r7, #32
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}

0800b416 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800b416:	b580      	push	{r7, lr}
 800b418:	b088      	sub	sp, #32
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b41e:	2300      	movs	r3, #0
 800b420:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b422:	2302      	movs	r3, #2
 800b424:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b426:	23c0      	movs	r3, #192	; 0xc0
 800b428:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b42a:	2300      	movs	r3, #0
 800b42c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b42e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b432:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b434:	f107 0308 	add.w	r3, r7, #8
 800b438:	4619      	mov	r1, r3
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f7ff fe03 	bl	800b046 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f000 f957 	bl	800b6f4 <SDMMC_GetCmdResp2>
 800b446:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b448:	69fb      	ldr	r3, [r7, #28]
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3720      	adds	r7, #32
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}

0800b452 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b452:	b580      	push	{r7, lr}
 800b454:	b088      	sub	sp, #32
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]
 800b45a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b460:	2309      	movs	r3, #9
 800b462:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b464:	23c0      	movs	r3, #192	; 0xc0
 800b466:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b468:	2300      	movs	r3, #0
 800b46a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b46c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b470:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b472:	f107 0308 	add.w	r3, r7, #8
 800b476:	4619      	mov	r1, r3
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f7ff fde4 	bl	800b046 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 f938 	bl	800b6f4 <SDMMC_GetCmdResp2>
 800b484:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b486:	69fb      	ldr	r3, [r7, #28]
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3720      	adds	r7, #32
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b088      	sub	sp, #32
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b49a:	2300      	movs	r3, #0
 800b49c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b49e:	2303      	movs	r3, #3
 800b4a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b4a2:	2340      	movs	r3, #64	; 0x40
 800b4a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b4aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b4b0:	f107 0308 	add.w	r3, r7, #8
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f7ff fdc5 	bl	800b046 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b4bc:	683a      	ldr	r2, [r7, #0]
 800b4be:	2103      	movs	r1, #3
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f000 f99d 	bl	800b800 <SDMMC_GetCmdResp6>
 800b4c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4c8:	69fb      	ldr	r3, [r7, #28]
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3720      	adds	r7, #32
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}

0800b4d2 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b4d2:	b580      	push	{r7, lr}
 800b4d4:	b088      	sub	sp, #32
 800b4d6:	af00      	add	r7, sp, #0
 800b4d8:	6078      	str	r0, [r7, #4]
 800b4da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b4e0:	230d      	movs	r3, #13
 800b4e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b4e4:	2340      	movs	r3, #64	; 0x40
 800b4e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b4ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b4f2:	f107 0308 	add.w	r3, r7, #8
 800b4f6:	4619      	mov	r1, r3
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f7ff fda4 	bl	800b046 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800b4fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800b502:	210d      	movs	r1, #13
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f000 f807 	bl	800b518 <SDMMC_GetCmdResp1>
 800b50a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b50c:	69fb      	ldr	r3, [r7, #28]
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3720      	adds	r7, #32
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
	...

0800b518 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b088      	sub	sp, #32
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	460b      	mov	r3, r1
 800b522:	607a      	str	r2, [r7, #4]
 800b524:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b526:	4b70      	ldr	r3, [pc, #448]	; (800b6e8 <SDMMC_GetCmdResp1+0x1d0>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4a70      	ldr	r2, [pc, #448]	; (800b6ec <SDMMC_GetCmdResp1+0x1d4>)
 800b52c:	fba2 2303 	umull	r2, r3, r2, r3
 800b530:	0a5a      	lsrs	r2, r3, #9
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	fb02 f303 	mul.w	r3, r2, r3
 800b538:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b53a:	69fb      	ldr	r3, [r7, #28]
 800b53c:	1e5a      	subs	r2, r3, #1
 800b53e:	61fa      	str	r2, [r7, #28]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d102      	bne.n	800b54a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b544:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b548:	e0c9      	b.n	800b6de <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b54e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b550:	69bb      	ldr	r3, [r7, #24]
 800b552:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b556:	2b00      	cmp	r3, #0
 800b558:	d0ef      	beq.n	800b53a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b55a:	69bb      	ldr	r3, [r7, #24]
 800b55c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b560:	2b00      	cmp	r3, #0
 800b562:	d1ea      	bne.n	800b53a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b568:	f003 0304 	and.w	r3, r3, #4
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d004      	beq.n	800b57a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2204      	movs	r2, #4
 800b574:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b576:	2304      	movs	r3, #4
 800b578:	e0b1      	b.n	800b6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b57e:	f003 0301 	and.w	r3, r3, #1
 800b582:	2b00      	cmp	r3, #0
 800b584:	d004      	beq.n	800b590 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2201      	movs	r2, #1
 800b58a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b58c:	2301      	movs	r3, #1
 800b58e:	e0a6      	b.n	800b6de <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	22c5      	movs	r2, #197	; 0xc5
 800b594:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b596:	68f8      	ldr	r0, [r7, #12]
 800b598:	f7ff fd7f 	bl	800b09a <SDIO_GetCommandResponse>
 800b59c:	4603      	mov	r3, r0
 800b59e:	461a      	mov	r2, r3
 800b5a0:	7afb      	ldrb	r3, [r7, #11]
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d001      	beq.n	800b5aa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	e099      	b.n	800b6de <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b5aa:	2100      	movs	r1, #0
 800b5ac:	68f8      	ldr	r0, [r7, #12]
 800b5ae:	f7ff fd81 	bl	800b0b4 <SDIO_GetResponse>
 800b5b2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b5b4:	697a      	ldr	r2, [r7, #20]
 800b5b6:	4b4e      	ldr	r3, [pc, #312]	; (800b6f0 <SDMMC_GetCmdResp1+0x1d8>)
 800b5b8:	4013      	ands	r3, r2
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d101      	bne.n	800b5c2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	e08d      	b.n	800b6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	da02      	bge.n	800b5ce <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b5c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b5cc:	e087      	b.n	800b6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d001      	beq.n	800b5dc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b5d8:	2340      	movs	r3, #64	; 0x40
 800b5da:	e080      	b.n	800b6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d001      	beq.n	800b5ea <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b5e6:	2380      	movs	r3, #128	; 0x80
 800b5e8:	e079      	b.n	800b6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d002      	beq.n	800b5fa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b5f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5f8:	e071      	b.n	800b6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b600:	2b00      	cmp	r3, #0
 800b602:	d002      	beq.n	800b60a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b604:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b608:	e069      	b.n	800b6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b610:	2b00      	cmp	r3, #0
 800b612:	d002      	beq.n	800b61a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b618:	e061      	b.n	800b6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b620:	2b00      	cmp	r3, #0
 800b622:	d002      	beq.n	800b62a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b624:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b628:	e059      	b.n	800b6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b630:	2b00      	cmp	r3, #0
 800b632:	d002      	beq.n	800b63a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b638:	e051      	b.n	800b6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b640:	2b00      	cmp	r3, #0
 800b642:	d002      	beq.n	800b64a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b644:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b648:	e049      	b.n	800b6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b650:	2b00      	cmp	r3, #0
 800b652:	d002      	beq.n	800b65a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b654:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b658:	e041      	b.n	800b6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b660:	2b00      	cmp	r3, #0
 800b662:	d002      	beq.n	800b66a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b664:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b668:	e039      	b.n	800b6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b670:	2b00      	cmp	r3, #0
 800b672:	d002      	beq.n	800b67a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b674:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b678:	e031      	b.n	800b6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b680:	2b00      	cmp	r3, #0
 800b682:	d002      	beq.n	800b68a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b684:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b688:	e029      	b.n	800b6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b690:	2b00      	cmp	r3, #0
 800b692:	d002      	beq.n	800b69a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b694:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b698:	e021      	b.n	800b6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d002      	beq.n	800b6aa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b6a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b6a8:	e019      	b.n	800b6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d002      	beq.n	800b6ba <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b6b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b6b8:	e011      	b.n	800b6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d002      	beq.n	800b6ca <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b6c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b6c8:	e009      	b.n	800b6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	f003 0308 	and.w	r3, r3, #8
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d002      	beq.n	800b6da <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b6d4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b6d8:	e001      	b.n	800b6de <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b6da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3720      	adds	r7, #32
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	20000008 	.word	0x20000008
 800b6ec:	10624dd3 	.word	0x10624dd3
 800b6f0:	fdffe008 	.word	0xfdffe008

0800b6f4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b085      	sub	sp, #20
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b6fc:	4b1f      	ldr	r3, [pc, #124]	; (800b77c <SDMMC_GetCmdResp2+0x88>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4a1f      	ldr	r2, [pc, #124]	; (800b780 <SDMMC_GetCmdResp2+0x8c>)
 800b702:	fba2 2303 	umull	r2, r3, r2, r3
 800b706:	0a5b      	lsrs	r3, r3, #9
 800b708:	f241 3288 	movw	r2, #5000	; 0x1388
 800b70c:	fb02 f303 	mul.w	r3, r2, r3
 800b710:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	1e5a      	subs	r2, r3, #1
 800b716:	60fa      	str	r2, [r7, #12]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d102      	bne.n	800b722 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b71c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b720:	e026      	b.n	800b770 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b726:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d0ef      	beq.n	800b712 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d1ea      	bne.n	800b712 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b740:	f003 0304 	and.w	r3, r3, #4
 800b744:	2b00      	cmp	r3, #0
 800b746:	d004      	beq.n	800b752 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2204      	movs	r2, #4
 800b74c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b74e:	2304      	movs	r3, #4
 800b750:	e00e      	b.n	800b770 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b756:	f003 0301 	and.w	r3, r3, #1
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d004      	beq.n	800b768 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2201      	movs	r2, #1
 800b762:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b764:	2301      	movs	r3, #1
 800b766:	e003      	b.n	800b770 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	22c5      	movs	r2, #197	; 0xc5
 800b76c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b76e:	2300      	movs	r3, #0
}
 800b770:	4618      	mov	r0, r3
 800b772:	3714      	adds	r7, #20
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr
 800b77c:	20000008 	.word	0x20000008
 800b780:	10624dd3 	.word	0x10624dd3

0800b784 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b784:	b480      	push	{r7}
 800b786:	b085      	sub	sp, #20
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b78c:	4b1a      	ldr	r3, [pc, #104]	; (800b7f8 <SDMMC_GetCmdResp3+0x74>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4a1a      	ldr	r2, [pc, #104]	; (800b7fc <SDMMC_GetCmdResp3+0x78>)
 800b792:	fba2 2303 	umull	r2, r3, r2, r3
 800b796:	0a5b      	lsrs	r3, r3, #9
 800b798:	f241 3288 	movw	r2, #5000	; 0x1388
 800b79c:	fb02 f303 	mul.w	r3, r2, r3
 800b7a0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	1e5a      	subs	r2, r3, #1
 800b7a6:	60fa      	str	r2, [r7, #12]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d102      	bne.n	800b7b2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b7ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b7b0:	e01b      	b.n	800b7ea <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7b6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d0ef      	beq.n	800b7a2 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d1ea      	bne.n	800b7a2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7d0:	f003 0304 	and.w	r3, r3, #4
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d004      	beq.n	800b7e2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2204      	movs	r2, #4
 800b7dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b7de:	2304      	movs	r3, #4
 800b7e0:	e003      	b.n	800b7ea <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	22c5      	movs	r2, #197	; 0xc5
 800b7e6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b7e8:	2300      	movs	r3, #0
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3714      	adds	r7, #20
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f4:	4770      	bx	lr
 800b7f6:	bf00      	nop
 800b7f8:	20000008 	.word	0x20000008
 800b7fc:	10624dd3 	.word	0x10624dd3

0800b800 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b088      	sub	sp, #32
 800b804:	af00      	add	r7, sp, #0
 800b806:	60f8      	str	r0, [r7, #12]
 800b808:	460b      	mov	r3, r1
 800b80a:	607a      	str	r2, [r7, #4]
 800b80c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b80e:	4b35      	ldr	r3, [pc, #212]	; (800b8e4 <SDMMC_GetCmdResp6+0xe4>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	4a35      	ldr	r2, [pc, #212]	; (800b8e8 <SDMMC_GetCmdResp6+0xe8>)
 800b814:	fba2 2303 	umull	r2, r3, r2, r3
 800b818:	0a5b      	lsrs	r3, r3, #9
 800b81a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b81e:	fb02 f303 	mul.w	r3, r2, r3
 800b822:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b824:	69fb      	ldr	r3, [r7, #28]
 800b826:	1e5a      	subs	r2, r3, #1
 800b828:	61fa      	str	r2, [r7, #28]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d102      	bne.n	800b834 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b82e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b832:	e052      	b.n	800b8da <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b838:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b83a:	69bb      	ldr	r3, [r7, #24]
 800b83c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b840:	2b00      	cmp	r3, #0
 800b842:	d0ef      	beq.n	800b824 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b844:	69bb      	ldr	r3, [r7, #24]
 800b846:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d1ea      	bne.n	800b824 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b852:	f003 0304 	and.w	r3, r3, #4
 800b856:	2b00      	cmp	r3, #0
 800b858:	d004      	beq.n	800b864 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	2204      	movs	r2, #4
 800b85e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b860:	2304      	movs	r3, #4
 800b862:	e03a      	b.n	800b8da <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b868:	f003 0301 	and.w	r3, r3, #1
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d004      	beq.n	800b87a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	2201      	movs	r2, #1
 800b874:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b876:	2301      	movs	r3, #1
 800b878:	e02f      	b.n	800b8da <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b87a:	68f8      	ldr	r0, [r7, #12]
 800b87c:	f7ff fc0d 	bl	800b09a <SDIO_GetCommandResponse>
 800b880:	4603      	mov	r3, r0
 800b882:	461a      	mov	r2, r3
 800b884:	7afb      	ldrb	r3, [r7, #11]
 800b886:	4293      	cmp	r3, r2
 800b888:	d001      	beq.n	800b88e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b88a:	2301      	movs	r3, #1
 800b88c:	e025      	b.n	800b8da <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	22c5      	movs	r2, #197	; 0xc5
 800b892:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b894:	2100      	movs	r1, #0
 800b896:	68f8      	ldr	r0, [r7, #12]
 800b898:	f7ff fc0c 	bl	800b0b4 <SDIO_GetResponse>
 800b89c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d106      	bne.n	800b8b6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	0c1b      	lsrs	r3, r3, #16
 800b8ac:	b29a      	uxth	r2, r3
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	e011      	b.n	800b8da <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d002      	beq.n	800b8c6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b8c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b8c4:	e009      	b.n	800b8da <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d002      	beq.n	800b8d6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b8d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8d4:	e001      	b.n	800b8da <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b8d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3720      	adds	r7, #32
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
 800b8e2:	bf00      	nop
 800b8e4:	20000008 	.word	0x20000008
 800b8e8:	10624dd3 	.word	0x10624dd3

0800b8ec <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b085      	sub	sp, #20
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b8f4:	4b22      	ldr	r3, [pc, #136]	; (800b980 <SDMMC_GetCmdResp7+0x94>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4a22      	ldr	r2, [pc, #136]	; (800b984 <SDMMC_GetCmdResp7+0x98>)
 800b8fa:	fba2 2303 	umull	r2, r3, r2, r3
 800b8fe:	0a5b      	lsrs	r3, r3, #9
 800b900:	f241 3288 	movw	r2, #5000	; 0x1388
 800b904:	fb02 f303 	mul.w	r3, r2, r3
 800b908:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	1e5a      	subs	r2, r3, #1
 800b90e:	60fa      	str	r2, [r7, #12]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d102      	bne.n	800b91a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b914:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b918:	e02c      	b.n	800b974 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b91e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b926:	2b00      	cmp	r3, #0
 800b928:	d0ef      	beq.n	800b90a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b930:	2b00      	cmp	r3, #0
 800b932:	d1ea      	bne.n	800b90a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b938:	f003 0304 	and.w	r3, r3, #4
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d004      	beq.n	800b94a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2204      	movs	r2, #4
 800b944:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b946:	2304      	movs	r3, #4
 800b948:	e014      	b.n	800b974 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b94e:	f003 0301 	and.w	r3, r3, #1
 800b952:	2b00      	cmp	r3, #0
 800b954:	d004      	beq.n	800b960 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2201      	movs	r2, #1
 800b95a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b95c:	2301      	movs	r3, #1
 800b95e:	e009      	b.n	800b974 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d002      	beq.n	800b972 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2240      	movs	r2, #64	; 0x40
 800b970:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b972:	2300      	movs	r3, #0
  
}
 800b974:	4618      	mov	r0, r3
 800b976:	3714      	adds	r7, #20
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr
 800b980:	20000008 	.word	0x20000008
 800b984:	10624dd3 	.word	0x10624dd3

0800b988 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800b988:	b480      	push	{r7}
 800b98a:	b085      	sub	sp, #20
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b990:	4b11      	ldr	r3, [pc, #68]	; (800b9d8 <SDMMC_GetCmdError+0x50>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	4a11      	ldr	r2, [pc, #68]	; (800b9dc <SDMMC_GetCmdError+0x54>)
 800b996:	fba2 2303 	umull	r2, r3, r2, r3
 800b99a:	0a5b      	lsrs	r3, r3, #9
 800b99c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9a0:	fb02 f303 	mul.w	r3, r2, r3
 800b9a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	1e5a      	subs	r2, r3, #1
 800b9aa:	60fa      	str	r2, [r7, #12]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d102      	bne.n	800b9b6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b9b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b9b4:	e009      	b.n	800b9ca <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d0f1      	beq.n	800b9a6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	22c5      	movs	r2, #197	; 0xc5
 800b9c6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b9c8:	2300      	movs	r3, #0
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3714      	adds	r7, #20
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr
 800b9d6:	bf00      	nop
 800b9d8:	20000008 	.word	0x20000008
 800b9dc:	10624dd3 	.word	0x10624dd3

0800b9e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b9e0:	b084      	sub	sp, #16
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b084      	sub	sp, #16
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
 800b9ea:	f107 001c 	add.w	r0, r7, #28
 800b9ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d122      	bne.n	800ba3e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	68db      	ldr	r3, [r3, #12]
 800ba08:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800ba0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	68db      	ldr	r3, [r3, #12]
 800ba18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ba20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba22:	2b01      	cmp	r3, #1
 800ba24:	d105      	bne.n	800ba32 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	68db      	ldr	r3, [r3, #12]
 800ba2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f001 fbe8 	bl	800d208 <USB_CoreReset>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	73fb      	strb	r3, [r7, #15]
 800ba3c:	e01a      	b.n	800ba74 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	68db      	ldr	r3, [r3, #12]
 800ba42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f001 fbdc 	bl	800d208 <USB_CoreReset>
 800ba50:	4603      	mov	r3, r0
 800ba52:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ba54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d106      	bne.n	800ba68 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	639a      	str	r2, [r3, #56]	; 0x38
 800ba66:	e005      	b.n	800ba74 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ba74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	d10b      	bne.n	800ba92 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	689b      	ldr	r3, [r3, #8]
 800ba7e:	f043 0206 	orr.w	r2, r3, #6
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	689b      	ldr	r3, [r3, #8]
 800ba8a:	f043 0220 	orr.w	r2, r3, #32
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ba92:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	3710      	adds	r7, #16
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ba9e:	b004      	add	sp, #16
 800baa0:	4770      	bx	lr
	...

0800baa4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b087      	sub	sp, #28
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	60f8      	str	r0, [r7, #12]
 800baac:	60b9      	str	r1, [r7, #8]
 800baae:	4613      	mov	r3, r2
 800bab0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800bab2:	79fb      	ldrb	r3, [r7, #7]
 800bab4:	2b02      	cmp	r3, #2
 800bab6:	d165      	bne.n	800bb84 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	4a41      	ldr	r2, [pc, #260]	; (800bbc0 <USB_SetTurnaroundTime+0x11c>)
 800babc:	4293      	cmp	r3, r2
 800babe:	d906      	bls.n	800bace <USB_SetTurnaroundTime+0x2a>
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	4a40      	ldr	r2, [pc, #256]	; (800bbc4 <USB_SetTurnaroundTime+0x120>)
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d202      	bcs.n	800bace <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800bac8:	230f      	movs	r3, #15
 800baca:	617b      	str	r3, [r7, #20]
 800bacc:	e062      	b.n	800bb94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	4a3c      	ldr	r2, [pc, #240]	; (800bbc4 <USB_SetTurnaroundTime+0x120>)
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d306      	bcc.n	800bae4 <USB_SetTurnaroundTime+0x40>
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	4a3b      	ldr	r2, [pc, #236]	; (800bbc8 <USB_SetTurnaroundTime+0x124>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d202      	bcs.n	800bae4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800bade:	230e      	movs	r3, #14
 800bae0:	617b      	str	r3, [r7, #20]
 800bae2:	e057      	b.n	800bb94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	4a38      	ldr	r2, [pc, #224]	; (800bbc8 <USB_SetTurnaroundTime+0x124>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d306      	bcc.n	800bafa <USB_SetTurnaroundTime+0x56>
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	4a37      	ldr	r2, [pc, #220]	; (800bbcc <USB_SetTurnaroundTime+0x128>)
 800baf0:	4293      	cmp	r3, r2
 800baf2:	d202      	bcs.n	800bafa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800baf4:	230d      	movs	r3, #13
 800baf6:	617b      	str	r3, [r7, #20]
 800baf8:	e04c      	b.n	800bb94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	4a33      	ldr	r2, [pc, #204]	; (800bbcc <USB_SetTurnaroundTime+0x128>)
 800bafe:	4293      	cmp	r3, r2
 800bb00:	d306      	bcc.n	800bb10 <USB_SetTurnaroundTime+0x6c>
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	4a32      	ldr	r2, [pc, #200]	; (800bbd0 <USB_SetTurnaroundTime+0x12c>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d802      	bhi.n	800bb10 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800bb0a:	230c      	movs	r3, #12
 800bb0c:	617b      	str	r3, [r7, #20]
 800bb0e:	e041      	b.n	800bb94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	4a2f      	ldr	r2, [pc, #188]	; (800bbd0 <USB_SetTurnaroundTime+0x12c>)
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d906      	bls.n	800bb26 <USB_SetTurnaroundTime+0x82>
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	4a2e      	ldr	r2, [pc, #184]	; (800bbd4 <USB_SetTurnaroundTime+0x130>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d802      	bhi.n	800bb26 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800bb20:	230b      	movs	r3, #11
 800bb22:	617b      	str	r3, [r7, #20]
 800bb24:	e036      	b.n	800bb94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	4a2a      	ldr	r2, [pc, #168]	; (800bbd4 <USB_SetTurnaroundTime+0x130>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d906      	bls.n	800bb3c <USB_SetTurnaroundTime+0x98>
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	4a29      	ldr	r2, [pc, #164]	; (800bbd8 <USB_SetTurnaroundTime+0x134>)
 800bb32:	4293      	cmp	r3, r2
 800bb34:	d802      	bhi.n	800bb3c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800bb36:	230a      	movs	r3, #10
 800bb38:	617b      	str	r3, [r7, #20]
 800bb3a:	e02b      	b.n	800bb94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	4a26      	ldr	r2, [pc, #152]	; (800bbd8 <USB_SetTurnaroundTime+0x134>)
 800bb40:	4293      	cmp	r3, r2
 800bb42:	d906      	bls.n	800bb52 <USB_SetTurnaroundTime+0xae>
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	4a25      	ldr	r2, [pc, #148]	; (800bbdc <USB_SetTurnaroundTime+0x138>)
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d202      	bcs.n	800bb52 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800bb4c:	2309      	movs	r3, #9
 800bb4e:	617b      	str	r3, [r7, #20]
 800bb50:	e020      	b.n	800bb94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	4a21      	ldr	r2, [pc, #132]	; (800bbdc <USB_SetTurnaroundTime+0x138>)
 800bb56:	4293      	cmp	r3, r2
 800bb58:	d306      	bcc.n	800bb68 <USB_SetTurnaroundTime+0xc4>
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	4a20      	ldr	r2, [pc, #128]	; (800bbe0 <USB_SetTurnaroundTime+0x13c>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d802      	bhi.n	800bb68 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800bb62:	2308      	movs	r3, #8
 800bb64:	617b      	str	r3, [r7, #20]
 800bb66:	e015      	b.n	800bb94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	4a1d      	ldr	r2, [pc, #116]	; (800bbe0 <USB_SetTurnaroundTime+0x13c>)
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d906      	bls.n	800bb7e <USB_SetTurnaroundTime+0xda>
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	4a1c      	ldr	r2, [pc, #112]	; (800bbe4 <USB_SetTurnaroundTime+0x140>)
 800bb74:	4293      	cmp	r3, r2
 800bb76:	d202      	bcs.n	800bb7e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800bb78:	2307      	movs	r3, #7
 800bb7a:	617b      	str	r3, [r7, #20]
 800bb7c:	e00a      	b.n	800bb94 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800bb7e:	2306      	movs	r3, #6
 800bb80:	617b      	str	r3, [r7, #20]
 800bb82:	e007      	b.n	800bb94 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800bb84:	79fb      	ldrb	r3, [r7, #7]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d102      	bne.n	800bb90 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800bb8a:	2309      	movs	r3, #9
 800bb8c:	617b      	str	r3, [r7, #20]
 800bb8e:	e001      	b.n	800bb94 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800bb90:	2309      	movs	r3, #9
 800bb92:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	68da      	ldr	r2, [r3, #12]
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	029b      	lsls	r3, r3, #10
 800bba8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800bbac:	431a      	orrs	r2, r3
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bbb2:	2300      	movs	r3, #0
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	371c      	adds	r7, #28
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr
 800bbc0:	00d8acbf 	.word	0x00d8acbf
 800bbc4:	00e4e1c0 	.word	0x00e4e1c0
 800bbc8:	00f42400 	.word	0x00f42400
 800bbcc:	01067380 	.word	0x01067380
 800bbd0:	011a499f 	.word	0x011a499f
 800bbd4:	01312cff 	.word	0x01312cff
 800bbd8:	014ca43f 	.word	0x014ca43f
 800bbdc:	016e3600 	.word	0x016e3600
 800bbe0:	01a6ab1f 	.word	0x01a6ab1f
 800bbe4:	01e84800 	.word	0x01e84800

0800bbe8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b083      	sub	sp, #12
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	689b      	ldr	r3, [r3, #8]
 800bbf4:	f043 0201 	orr.w	r2, r3, #1
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bbfc:	2300      	movs	r3, #0
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	370c      	adds	r7, #12
 800bc02:	46bd      	mov	sp, r7
 800bc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc08:	4770      	bx	lr

0800bc0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bc0a:	b480      	push	{r7}
 800bc0c:	b083      	sub	sp, #12
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	689b      	ldr	r3, [r3, #8]
 800bc16:	f023 0201 	bic.w	r2, r3, #1
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bc1e:	2300      	movs	r3, #0
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	370c      	adds	r7, #12
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr

0800bc2c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b084      	sub	sp, #16
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
 800bc34:	460b      	mov	r3, r1
 800bc36:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	68db      	ldr	r3, [r3, #12]
 800bc40:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bc48:	78fb      	ldrb	r3, [r7, #3]
 800bc4a:	2b01      	cmp	r3, #1
 800bc4c:	d115      	bne.n	800bc7a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bc5a:	2001      	movs	r0, #1
 800bc5c:	f7f8 f81a 	bl	8003c94 <HAL_Delay>
      ms++;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	3301      	adds	r3, #1
 800bc64:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f001 fa3f 	bl	800d0ea <USB_GetMode>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	d01e      	beq.n	800bcb0 <USB_SetCurrentMode+0x84>
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	2b31      	cmp	r3, #49	; 0x31
 800bc76:	d9f0      	bls.n	800bc5a <USB_SetCurrentMode+0x2e>
 800bc78:	e01a      	b.n	800bcb0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bc7a:	78fb      	ldrb	r3, [r7, #3]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d115      	bne.n	800bcac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	68db      	ldr	r3, [r3, #12]
 800bc84:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bc8c:	2001      	movs	r0, #1
 800bc8e:	f7f8 f801 	bl	8003c94 <HAL_Delay>
      ms++;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	3301      	adds	r3, #1
 800bc96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	f001 fa26 	bl	800d0ea <USB_GetMode>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d005      	beq.n	800bcb0 <USB_SetCurrentMode+0x84>
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	2b31      	cmp	r3, #49	; 0x31
 800bca8:	d9f0      	bls.n	800bc8c <USB_SetCurrentMode+0x60>
 800bcaa:	e001      	b.n	800bcb0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bcac:	2301      	movs	r3, #1
 800bcae:	e005      	b.n	800bcbc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2b32      	cmp	r3, #50	; 0x32
 800bcb4:	d101      	bne.n	800bcba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	e000      	b.n	800bcbc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bcba:	2300      	movs	r3, #0
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3710      	adds	r7, #16
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bcc4:	b084      	sub	sp, #16
 800bcc6:	b580      	push	{r7, lr}
 800bcc8:	b086      	sub	sp, #24
 800bcca:	af00      	add	r7, sp, #0
 800bccc:	6078      	str	r0, [r7, #4]
 800bcce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bcd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bcde:	2300      	movs	r3, #0
 800bce0:	613b      	str	r3, [r7, #16]
 800bce2:	e009      	b.n	800bcf8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bce4:	687a      	ldr	r2, [r7, #4]
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	3340      	adds	r3, #64	; 0x40
 800bcea:	009b      	lsls	r3, r3, #2
 800bcec:	4413      	add	r3, r2
 800bcee:	2200      	movs	r2, #0
 800bcf0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	3301      	adds	r3, #1
 800bcf6:	613b      	str	r3, [r7, #16]
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	2b0e      	cmp	r3, #14
 800bcfc:	d9f2      	bls.n	800bce4 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bcfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d11c      	bne.n	800bd3e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd0a:	685b      	ldr	r3, [r3, #4]
 800bd0c:	68fa      	ldr	r2, [r7, #12]
 800bd0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd12:	f043 0302 	orr.w	r3, r3, #2
 800bd16:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd1c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	601a      	str	r2, [r3, #0]
 800bd3c:	e005      	b.n	800bd4a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd42:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd50:	461a      	mov	r2, r3
 800bd52:	2300      	movs	r3, #0
 800bd54:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd64:	461a      	mov	r2, r3
 800bd66:	680b      	ldr	r3, [r1, #0]
 800bd68:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bd6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	d10c      	bne.n	800bd8a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bd70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d104      	bne.n	800bd80 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bd76:	2100      	movs	r1, #0
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f000 f965 	bl	800c048 <USB_SetDevSpeed>
 800bd7e:	e008      	b.n	800bd92 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bd80:	2101      	movs	r1, #1
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f000 f960 	bl	800c048 <USB_SetDevSpeed>
 800bd88:	e003      	b.n	800bd92 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bd8a:	2103      	movs	r1, #3
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f000 f95b 	bl	800c048 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bd92:	2110      	movs	r1, #16
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f000 f8f3 	bl	800bf80 <USB_FlushTxFifo>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d001      	beq.n	800bda4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800bda0:	2301      	movs	r3, #1
 800bda2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f000 f91f 	bl	800bfe8 <USB_FlushRxFifo>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d001      	beq.n	800bdb4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdba:	461a      	mov	r2, r3
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdc6:	461a      	mov	r2, r3
 800bdc8:	2300      	movs	r3, #0
 800bdca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bdd8:	2300      	movs	r3, #0
 800bdda:	613b      	str	r3, [r7, #16]
 800bddc:	e043      	b.n	800be66 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	015a      	lsls	r2, r3, #5
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	4413      	add	r3, r2
 800bde6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bdf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bdf4:	d118      	bne.n	800be28 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d10a      	bne.n	800be12 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	015a      	lsls	r2, r3, #5
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	4413      	add	r3, r2
 800be04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be08:	461a      	mov	r2, r3
 800be0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800be0e:	6013      	str	r3, [r2, #0]
 800be10:	e013      	b.n	800be3a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	015a      	lsls	r2, r3, #5
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	4413      	add	r3, r2
 800be1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be1e:	461a      	mov	r2, r3
 800be20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800be24:	6013      	str	r3, [r2, #0]
 800be26:	e008      	b.n	800be3a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	015a      	lsls	r2, r3, #5
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	4413      	add	r3, r2
 800be30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be34:	461a      	mov	r2, r3
 800be36:	2300      	movs	r3, #0
 800be38:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	015a      	lsls	r2, r3, #5
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	4413      	add	r3, r2
 800be42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be46:	461a      	mov	r2, r3
 800be48:	2300      	movs	r3, #0
 800be4a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	015a      	lsls	r2, r3, #5
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	4413      	add	r3, r2
 800be54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be58:	461a      	mov	r2, r3
 800be5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800be5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	3301      	adds	r3, #1
 800be64:	613b      	str	r3, [r7, #16]
 800be66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be68:	693a      	ldr	r2, [r7, #16]
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d3b7      	bcc.n	800bdde <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800be6e:	2300      	movs	r3, #0
 800be70:	613b      	str	r3, [r7, #16]
 800be72:	e043      	b.n	800befc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	015a      	lsls	r2, r3, #5
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	4413      	add	r3, r2
 800be7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be8a:	d118      	bne.n	800bebe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d10a      	bne.n	800bea8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	015a      	lsls	r2, r3, #5
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	4413      	add	r3, r2
 800be9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be9e:	461a      	mov	r2, r3
 800bea0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bea4:	6013      	str	r3, [r2, #0]
 800bea6:	e013      	b.n	800bed0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	015a      	lsls	r2, r3, #5
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	4413      	add	r3, r2
 800beb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800beb4:	461a      	mov	r2, r3
 800beb6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800beba:	6013      	str	r3, [r2, #0]
 800bebc:	e008      	b.n	800bed0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	015a      	lsls	r2, r3, #5
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	4413      	add	r3, r2
 800bec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800beca:	461a      	mov	r2, r3
 800becc:	2300      	movs	r3, #0
 800bece:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bed0:	693b      	ldr	r3, [r7, #16]
 800bed2:	015a      	lsls	r2, r3, #5
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	4413      	add	r3, r2
 800bed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bedc:	461a      	mov	r2, r3
 800bede:	2300      	movs	r3, #0
 800bee0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	015a      	lsls	r2, r3, #5
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	4413      	add	r3, r2
 800beea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800beee:	461a      	mov	r2, r3
 800bef0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bef4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	3301      	adds	r3, #1
 800befa:	613b      	str	r3, [r7, #16]
 800befc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befe:	693a      	ldr	r2, [r7, #16]
 800bf00:	429a      	cmp	r2, r3
 800bf02:	d3b7      	bcc.n	800be74 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf0a:	691b      	ldr	r3, [r3, #16]
 800bf0c:	68fa      	ldr	r2, [r7, #12]
 800bf0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf16:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bf24:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bf26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d105      	bne.n	800bf38 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	699b      	ldr	r3, [r3, #24]
 800bf30:	f043 0210 	orr.w	r2, r3, #16
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	699a      	ldr	r2, [r3, #24]
 800bf3c:	4b0f      	ldr	r3, [pc, #60]	; (800bf7c <USB_DevInit+0x2b8>)
 800bf3e:	4313      	orrs	r3, r2
 800bf40:	687a      	ldr	r2, [r7, #4]
 800bf42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bf44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d005      	beq.n	800bf56 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	699b      	ldr	r3, [r3, #24]
 800bf4e:	f043 0208 	orr.w	r2, r3, #8
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bf56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf58:	2b01      	cmp	r3, #1
 800bf5a:	d107      	bne.n	800bf6c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	699b      	ldr	r3, [r3, #24]
 800bf60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bf64:	f043 0304 	orr.w	r3, r3, #4
 800bf68:	687a      	ldr	r2, [r7, #4]
 800bf6a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bf6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3718      	adds	r7, #24
 800bf72:	46bd      	mov	sp, r7
 800bf74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bf78:	b004      	add	sp, #16
 800bf7a:	4770      	bx	lr
 800bf7c:	803c3800 	.word	0x803c3800

0800bf80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bf80:	b480      	push	{r7}
 800bf82:	b085      	sub	sp, #20
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	3301      	adds	r3, #1
 800bf92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	4a13      	ldr	r2, [pc, #76]	; (800bfe4 <USB_FlushTxFifo+0x64>)
 800bf98:	4293      	cmp	r3, r2
 800bf9a:	d901      	bls.n	800bfa0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bf9c:	2303      	movs	r3, #3
 800bf9e:	e01b      	b.n	800bfd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	691b      	ldr	r3, [r3, #16]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	daf2      	bge.n	800bf8e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	019b      	lsls	r3, r3, #6
 800bfb0:	f043 0220 	orr.w	r2, r3, #32
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	3301      	adds	r3, #1
 800bfbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	4a08      	ldr	r2, [pc, #32]	; (800bfe4 <USB_FlushTxFifo+0x64>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d901      	bls.n	800bfca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bfc6:	2303      	movs	r3, #3
 800bfc8:	e006      	b.n	800bfd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	691b      	ldr	r3, [r3, #16]
 800bfce:	f003 0320 	and.w	r3, r3, #32
 800bfd2:	2b20      	cmp	r3, #32
 800bfd4:	d0f0      	beq.n	800bfb8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bfd6:	2300      	movs	r3, #0
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3714      	adds	r7, #20
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe2:	4770      	bx	lr
 800bfe4:	00030d40 	.word	0x00030d40

0800bfe8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b085      	sub	sp, #20
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bff0:	2300      	movs	r3, #0
 800bff2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	3301      	adds	r3, #1
 800bff8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	4a11      	ldr	r2, [pc, #68]	; (800c044 <USB_FlushRxFifo+0x5c>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d901      	bls.n	800c006 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c002:	2303      	movs	r3, #3
 800c004:	e018      	b.n	800c038 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	691b      	ldr	r3, [r3, #16]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	daf2      	bge.n	800bff4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c00e:	2300      	movs	r3, #0
 800c010:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2210      	movs	r2, #16
 800c016:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	3301      	adds	r3, #1
 800c01c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	4a08      	ldr	r2, [pc, #32]	; (800c044 <USB_FlushRxFifo+0x5c>)
 800c022:	4293      	cmp	r3, r2
 800c024:	d901      	bls.n	800c02a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c026:	2303      	movs	r3, #3
 800c028:	e006      	b.n	800c038 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	691b      	ldr	r3, [r3, #16]
 800c02e:	f003 0310 	and.w	r3, r3, #16
 800c032:	2b10      	cmp	r3, #16
 800c034:	d0f0      	beq.n	800c018 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c036:	2300      	movs	r3, #0
}
 800c038:	4618      	mov	r0, r3
 800c03a:	3714      	adds	r7, #20
 800c03c:	46bd      	mov	sp, r7
 800c03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c042:	4770      	bx	lr
 800c044:	00030d40 	.word	0x00030d40

0800c048 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c048:	b480      	push	{r7}
 800c04a:	b085      	sub	sp, #20
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
 800c050:	460b      	mov	r3, r1
 800c052:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c05e:	681a      	ldr	r2, [r3, #0]
 800c060:	78fb      	ldrb	r3, [r7, #3]
 800c062:	68f9      	ldr	r1, [r7, #12]
 800c064:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c068:	4313      	orrs	r3, r2
 800c06a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c06c:	2300      	movs	r3, #0
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3714      	adds	r7, #20
 800c072:	46bd      	mov	sp, r7
 800c074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c078:	4770      	bx	lr

0800c07a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c07a:	b480      	push	{r7}
 800c07c:	b087      	sub	sp, #28
 800c07e:	af00      	add	r7, sp, #0
 800c080:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c08c:	689b      	ldr	r3, [r3, #8]
 800c08e:	f003 0306 	and.w	r3, r3, #6
 800c092:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d102      	bne.n	800c0a0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c09a:	2300      	movs	r3, #0
 800c09c:	75fb      	strb	r3, [r7, #23]
 800c09e:	e00a      	b.n	800c0b6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2b02      	cmp	r3, #2
 800c0a4:	d002      	beq.n	800c0ac <USB_GetDevSpeed+0x32>
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2b06      	cmp	r3, #6
 800c0aa:	d102      	bne.n	800c0b2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c0ac:	2302      	movs	r3, #2
 800c0ae:	75fb      	strb	r3, [r7, #23]
 800c0b0:	e001      	b.n	800c0b6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c0b2:	230f      	movs	r3, #15
 800c0b4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c0b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	371c      	adds	r7, #28
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr

0800c0c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b085      	sub	sp, #20
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	781b      	ldrb	r3, [r3, #0]
 800c0d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	785b      	ldrb	r3, [r3, #1]
 800c0dc:	2b01      	cmp	r3, #1
 800c0de:	d13a      	bne.n	800c156 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0e6:	69da      	ldr	r2, [r3, #28]
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	781b      	ldrb	r3, [r3, #0]
 800c0ec:	f003 030f 	and.w	r3, r3, #15
 800c0f0:	2101      	movs	r1, #1
 800c0f2:	fa01 f303 	lsl.w	r3, r1, r3
 800c0f6:	b29b      	uxth	r3, r3
 800c0f8:	68f9      	ldr	r1, [r7, #12]
 800c0fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c0fe:	4313      	orrs	r3, r2
 800c100:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	015a      	lsls	r2, r3, #5
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	4413      	add	r3, r2
 800c10a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c114:	2b00      	cmp	r3, #0
 800c116:	d155      	bne.n	800c1c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	015a      	lsls	r2, r3, #5
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	4413      	add	r3, r2
 800c120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c124:	681a      	ldr	r2, [r3, #0]
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	68db      	ldr	r3, [r3, #12]
 800c12a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	791b      	ldrb	r3, [r3, #4]
 800c132:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c134:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	059b      	lsls	r3, r3, #22
 800c13a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c13c:	4313      	orrs	r3, r2
 800c13e:	68ba      	ldr	r2, [r7, #8]
 800c140:	0151      	lsls	r1, r2, #5
 800c142:	68fa      	ldr	r2, [r7, #12]
 800c144:	440a      	add	r2, r1
 800c146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c14a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c14e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c152:	6013      	str	r3, [r2, #0]
 800c154:	e036      	b.n	800c1c4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c15c:	69da      	ldr	r2, [r3, #28]
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	781b      	ldrb	r3, [r3, #0]
 800c162:	f003 030f 	and.w	r3, r3, #15
 800c166:	2101      	movs	r1, #1
 800c168:	fa01 f303 	lsl.w	r3, r1, r3
 800c16c:	041b      	lsls	r3, r3, #16
 800c16e:	68f9      	ldr	r1, [r7, #12]
 800c170:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c174:	4313      	orrs	r3, r2
 800c176:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	015a      	lsls	r2, r3, #5
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	4413      	add	r3, r2
 800c180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d11a      	bne.n	800c1c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	015a      	lsls	r2, r3, #5
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	4413      	add	r3, r2
 800c196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c19a:	681a      	ldr	r2, [r3, #0]
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	68db      	ldr	r3, [r3, #12]
 800c1a0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	791b      	ldrb	r3, [r3, #4]
 800c1a8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c1aa:	430b      	orrs	r3, r1
 800c1ac:	4313      	orrs	r3, r2
 800c1ae:	68ba      	ldr	r2, [r7, #8]
 800c1b0:	0151      	lsls	r1, r2, #5
 800c1b2:	68fa      	ldr	r2, [r7, #12]
 800c1b4:	440a      	add	r2, r1
 800c1b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c1be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c1c2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c1c4:	2300      	movs	r3, #0
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3714      	adds	r7, #20
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d0:	4770      	bx	lr
	...

0800c1d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b085      	sub	sp, #20
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	781b      	ldrb	r3, [r3, #0]
 800c1e6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	785b      	ldrb	r3, [r3, #1]
 800c1ec:	2b01      	cmp	r3, #1
 800c1ee:	d161      	bne.n	800c2b4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	015a      	lsls	r2, r3, #5
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	4413      	add	r3, r2
 800c1f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c202:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c206:	d11f      	bne.n	800c248 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	015a      	lsls	r2, r3, #5
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	4413      	add	r3, r2
 800c210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	68ba      	ldr	r2, [r7, #8]
 800c218:	0151      	lsls	r1, r2, #5
 800c21a:	68fa      	ldr	r2, [r7, #12]
 800c21c:	440a      	add	r2, r1
 800c21e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c222:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c226:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	015a      	lsls	r2, r3, #5
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	4413      	add	r3, r2
 800c230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	68ba      	ldr	r2, [r7, #8]
 800c238:	0151      	lsls	r1, r2, #5
 800c23a:	68fa      	ldr	r2, [r7, #12]
 800c23c:	440a      	add	r2, r1
 800c23e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c242:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c246:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c24e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	781b      	ldrb	r3, [r3, #0]
 800c254:	f003 030f 	and.w	r3, r3, #15
 800c258:	2101      	movs	r1, #1
 800c25a:	fa01 f303 	lsl.w	r3, r1, r3
 800c25e:	b29b      	uxth	r3, r3
 800c260:	43db      	mvns	r3, r3
 800c262:	68f9      	ldr	r1, [r7, #12]
 800c264:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c268:	4013      	ands	r3, r2
 800c26a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c272:	69da      	ldr	r2, [r3, #28]
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	781b      	ldrb	r3, [r3, #0]
 800c278:	f003 030f 	and.w	r3, r3, #15
 800c27c:	2101      	movs	r1, #1
 800c27e:	fa01 f303 	lsl.w	r3, r1, r3
 800c282:	b29b      	uxth	r3, r3
 800c284:	43db      	mvns	r3, r3
 800c286:	68f9      	ldr	r1, [r7, #12]
 800c288:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c28c:	4013      	ands	r3, r2
 800c28e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	015a      	lsls	r2, r3, #5
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	4413      	add	r3, r2
 800c298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c29c:	681a      	ldr	r2, [r3, #0]
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	0159      	lsls	r1, r3, #5
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	440b      	add	r3, r1
 800c2a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2aa:	4619      	mov	r1, r3
 800c2ac:	4b35      	ldr	r3, [pc, #212]	; (800c384 <USB_DeactivateEndpoint+0x1b0>)
 800c2ae:	4013      	ands	r3, r2
 800c2b0:	600b      	str	r3, [r1, #0]
 800c2b2:	e060      	b.n	800c376 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	015a      	lsls	r2, r3, #5
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	4413      	add	r3, r2
 800c2bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c2c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c2ca:	d11f      	bne.n	800c30c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	015a      	lsls	r2, r3, #5
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	4413      	add	r3, r2
 800c2d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	68ba      	ldr	r2, [r7, #8]
 800c2dc:	0151      	lsls	r1, r2, #5
 800c2de:	68fa      	ldr	r2, [r7, #12]
 800c2e0:	440a      	add	r2, r1
 800c2e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c2ea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	015a      	lsls	r2, r3, #5
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	4413      	add	r3, r2
 800c2f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	68ba      	ldr	r2, [r7, #8]
 800c2fc:	0151      	lsls	r1, r2, #5
 800c2fe:	68fa      	ldr	r2, [r7, #12]
 800c300:	440a      	add	r2, r1
 800c302:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c306:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c30a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c312:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	781b      	ldrb	r3, [r3, #0]
 800c318:	f003 030f 	and.w	r3, r3, #15
 800c31c:	2101      	movs	r1, #1
 800c31e:	fa01 f303 	lsl.w	r3, r1, r3
 800c322:	041b      	lsls	r3, r3, #16
 800c324:	43db      	mvns	r3, r3
 800c326:	68f9      	ldr	r1, [r7, #12]
 800c328:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c32c:	4013      	ands	r3, r2
 800c32e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c336:	69da      	ldr	r2, [r3, #28]
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	f003 030f 	and.w	r3, r3, #15
 800c340:	2101      	movs	r1, #1
 800c342:	fa01 f303 	lsl.w	r3, r1, r3
 800c346:	041b      	lsls	r3, r3, #16
 800c348:	43db      	mvns	r3, r3
 800c34a:	68f9      	ldr	r1, [r7, #12]
 800c34c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c350:	4013      	ands	r3, r2
 800c352:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	015a      	lsls	r2, r3, #5
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	4413      	add	r3, r2
 800c35c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c360:	681a      	ldr	r2, [r3, #0]
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	0159      	lsls	r1, r3, #5
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	440b      	add	r3, r1
 800c36a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c36e:	4619      	mov	r1, r3
 800c370:	4b05      	ldr	r3, [pc, #20]	; (800c388 <USB_DeactivateEndpoint+0x1b4>)
 800c372:	4013      	ands	r3, r2
 800c374:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c376:	2300      	movs	r3, #0
}
 800c378:	4618      	mov	r0, r3
 800c37a:	3714      	adds	r7, #20
 800c37c:	46bd      	mov	sp, r7
 800c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c382:	4770      	bx	lr
 800c384:	ec337800 	.word	0xec337800
 800c388:	eff37800 	.word	0xeff37800

0800c38c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b08a      	sub	sp, #40	; 0x28
 800c390:	af02      	add	r7, sp, #8
 800c392:	60f8      	str	r0, [r7, #12]
 800c394:	60b9      	str	r1, [r7, #8]
 800c396:	4613      	mov	r3, r2
 800c398:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	785b      	ldrb	r3, [r3, #1]
 800c3a8:	2b01      	cmp	r3, #1
 800c3aa:	f040 815c 	bne.w	800c666 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	699b      	ldr	r3, [r3, #24]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d132      	bne.n	800c41c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c3b6:	69bb      	ldr	r3, [r7, #24]
 800c3b8:	015a      	lsls	r2, r3, #5
 800c3ba:	69fb      	ldr	r3, [r7, #28]
 800c3bc:	4413      	add	r3, r2
 800c3be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3c2:	691b      	ldr	r3, [r3, #16]
 800c3c4:	69ba      	ldr	r2, [r7, #24]
 800c3c6:	0151      	lsls	r1, r2, #5
 800c3c8:	69fa      	ldr	r2, [r7, #28]
 800c3ca:	440a      	add	r2, r1
 800c3cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c3d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c3d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c3da:	69bb      	ldr	r3, [r7, #24]
 800c3dc:	015a      	lsls	r2, r3, #5
 800c3de:	69fb      	ldr	r3, [r7, #28]
 800c3e0:	4413      	add	r3, r2
 800c3e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3e6:	691b      	ldr	r3, [r3, #16]
 800c3e8:	69ba      	ldr	r2, [r7, #24]
 800c3ea:	0151      	lsls	r1, r2, #5
 800c3ec:	69fa      	ldr	r2, [r7, #28]
 800c3ee:	440a      	add	r2, r1
 800c3f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c3f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c3fa:	69bb      	ldr	r3, [r7, #24]
 800c3fc:	015a      	lsls	r2, r3, #5
 800c3fe:	69fb      	ldr	r3, [r7, #28]
 800c400:	4413      	add	r3, r2
 800c402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c406:	691b      	ldr	r3, [r3, #16]
 800c408:	69ba      	ldr	r2, [r7, #24]
 800c40a:	0151      	lsls	r1, r2, #5
 800c40c:	69fa      	ldr	r2, [r7, #28]
 800c40e:	440a      	add	r2, r1
 800c410:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c414:	0cdb      	lsrs	r3, r3, #19
 800c416:	04db      	lsls	r3, r3, #19
 800c418:	6113      	str	r3, [r2, #16]
 800c41a:	e074      	b.n	800c506 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c41c:	69bb      	ldr	r3, [r7, #24]
 800c41e:	015a      	lsls	r2, r3, #5
 800c420:	69fb      	ldr	r3, [r7, #28]
 800c422:	4413      	add	r3, r2
 800c424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c428:	691b      	ldr	r3, [r3, #16]
 800c42a:	69ba      	ldr	r2, [r7, #24]
 800c42c:	0151      	lsls	r1, r2, #5
 800c42e:	69fa      	ldr	r2, [r7, #28]
 800c430:	440a      	add	r2, r1
 800c432:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c436:	0cdb      	lsrs	r3, r3, #19
 800c438:	04db      	lsls	r3, r3, #19
 800c43a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c43c:	69bb      	ldr	r3, [r7, #24]
 800c43e:	015a      	lsls	r2, r3, #5
 800c440:	69fb      	ldr	r3, [r7, #28]
 800c442:	4413      	add	r3, r2
 800c444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c448:	691b      	ldr	r3, [r3, #16]
 800c44a:	69ba      	ldr	r2, [r7, #24]
 800c44c:	0151      	lsls	r1, r2, #5
 800c44e:	69fa      	ldr	r2, [r7, #28]
 800c450:	440a      	add	r2, r1
 800c452:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c456:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c45a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c45e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c460:	69bb      	ldr	r3, [r7, #24]
 800c462:	015a      	lsls	r2, r3, #5
 800c464:	69fb      	ldr	r3, [r7, #28]
 800c466:	4413      	add	r3, r2
 800c468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c46c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	6999      	ldr	r1, [r3, #24]
 800c472:	68bb      	ldr	r3, [r7, #8]
 800c474:	68db      	ldr	r3, [r3, #12]
 800c476:	440b      	add	r3, r1
 800c478:	1e59      	subs	r1, r3, #1
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	68db      	ldr	r3, [r3, #12]
 800c47e:	fbb1 f3f3 	udiv	r3, r1, r3
 800c482:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c484:	4b9d      	ldr	r3, [pc, #628]	; (800c6fc <USB_EPStartXfer+0x370>)
 800c486:	400b      	ands	r3, r1
 800c488:	69b9      	ldr	r1, [r7, #24]
 800c48a:	0148      	lsls	r0, r1, #5
 800c48c:	69f9      	ldr	r1, [r7, #28]
 800c48e:	4401      	add	r1, r0
 800c490:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c494:	4313      	orrs	r3, r2
 800c496:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c498:	69bb      	ldr	r3, [r7, #24]
 800c49a:	015a      	lsls	r2, r3, #5
 800c49c:	69fb      	ldr	r3, [r7, #28]
 800c49e:	4413      	add	r3, r2
 800c4a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4a4:	691a      	ldr	r2, [r3, #16]
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	699b      	ldr	r3, [r3, #24]
 800c4aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c4ae:	69b9      	ldr	r1, [r7, #24]
 800c4b0:	0148      	lsls	r0, r1, #5
 800c4b2:	69f9      	ldr	r1, [r7, #28]
 800c4b4:	4401      	add	r1, r0
 800c4b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c4ba:	4313      	orrs	r3, r2
 800c4bc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	791b      	ldrb	r3, [r3, #4]
 800c4c2:	2b01      	cmp	r3, #1
 800c4c4:	d11f      	bne.n	800c506 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c4c6:	69bb      	ldr	r3, [r7, #24]
 800c4c8:	015a      	lsls	r2, r3, #5
 800c4ca:	69fb      	ldr	r3, [r7, #28]
 800c4cc:	4413      	add	r3, r2
 800c4ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4d2:	691b      	ldr	r3, [r3, #16]
 800c4d4:	69ba      	ldr	r2, [r7, #24]
 800c4d6:	0151      	lsls	r1, r2, #5
 800c4d8:	69fa      	ldr	r2, [r7, #28]
 800c4da:	440a      	add	r2, r1
 800c4dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4e0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c4e4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c4e6:	69bb      	ldr	r3, [r7, #24]
 800c4e8:	015a      	lsls	r2, r3, #5
 800c4ea:	69fb      	ldr	r3, [r7, #28]
 800c4ec:	4413      	add	r3, r2
 800c4ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4f2:	691b      	ldr	r3, [r3, #16]
 800c4f4:	69ba      	ldr	r2, [r7, #24]
 800c4f6:	0151      	lsls	r1, r2, #5
 800c4f8:	69fa      	ldr	r2, [r7, #28]
 800c4fa:	440a      	add	r2, r1
 800c4fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c500:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c504:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c506:	79fb      	ldrb	r3, [r7, #7]
 800c508:	2b01      	cmp	r3, #1
 800c50a:	d14b      	bne.n	800c5a4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	695b      	ldr	r3, [r3, #20]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d009      	beq.n	800c528 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c514:	69bb      	ldr	r3, [r7, #24]
 800c516:	015a      	lsls	r2, r3, #5
 800c518:	69fb      	ldr	r3, [r7, #28]
 800c51a:	4413      	add	r3, r2
 800c51c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c520:	461a      	mov	r2, r3
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	695b      	ldr	r3, [r3, #20]
 800c526:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	791b      	ldrb	r3, [r3, #4]
 800c52c:	2b01      	cmp	r3, #1
 800c52e:	d128      	bne.n	800c582 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c530:	69fb      	ldr	r3, [r7, #28]
 800c532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c536:	689b      	ldr	r3, [r3, #8]
 800c538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d110      	bne.n	800c562 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c540:	69bb      	ldr	r3, [r7, #24]
 800c542:	015a      	lsls	r2, r3, #5
 800c544:	69fb      	ldr	r3, [r7, #28]
 800c546:	4413      	add	r3, r2
 800c548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	69ba      	ldr	r2, [r7, #24]
 800c550:	0151      	lsls	r1, r2, #5
 800c552:	69fa      	ldr	r2, [r7, #28]
 800c554:	440a      	add	r2, r1
 800c556:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c55a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c55e:	6013      	str	r3, [r2, #0]
 800c560:	e00f      	b.n	800c582 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c562:	69bb      	ldr	r3, [r7, #24]
 800c564:	015a      	lsls	r2, r3, #5
 800c566:	69fb      	ldr	r3, [r7, #28]
 800c568:	4413      	add	r3, r2
 800c56a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	69ba      	ldr	r2, [r7, #24]
 800c572:	0151      	lsls	r1, r2, #5
 800c574:	69fa      	ldr	r2, [r7, #28]
 800c576:	440a      	add	r2, r1
 800c578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c57c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c580:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c582:	69bb      	ldr	r3, [r7, #24]
 800c584:	015a      	lsls	r2, r3, #5
 800c586:	69fb      	ldr	r3, [r7, #28]
 800c588:	4413      	add	r3, r2
 800c58a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	69ba      	ldr	r2, [r7, #24]
 800c592:	0151      	lsls	r1, r2, #5
 800c594:	69fa      	ldr	r2, [r7, #28]
 800c596:	440a      	add	r2, r1
 800c598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c59c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c5a0:	6013      	str	r3, [r2, #0]
 800c5a2:	e133      	b.n	800c80c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c5a4:	69bb      	ldr	r3, [r7, #24]
 800c5a6:	015a      	lsls	r2, r3, #5
 800c5a8:	69fb      	ldr	r3, [r7, #28]
 800c5aa:	4413      	add	r3, r2
 800c5ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	69ba      	ldr	r2, [r7, #24]
 800c5b4:	0151      	lsls	r1, r2, #5
 800c5b6:	69fa      	ldr	r2, [r7, #28]
 800c5b8:	440a      	add	r2, r1
 800c5ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c5c2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	791b      	ldrb	r3, [r3, #4]
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d015      	beq.n	800c5f8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	699b      	ldr	r3, [r3, #24]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	f000 811b 	beq.w	800c80c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c5d6:	69fb      	ldr	r3, [r7, #28]
 800c5d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	781b      	ldrb	r3, [r3, #0]
 800c5e2:	f003 030f 	and.w	r3, r3, #15
 800c5e6:	2101      	movs	r1, #1
 800c5e8:	fa01 f303 	lsl.w	r3, r1, r3
 800c5ec:	69f9      	ldr	r1, [r7, #28]
 800c5ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c5f2:	4313      	orrs	r3, r2
 800c5f4:	634b      	str	r3, [r1, #52]	; 0x34
 800c5f6:	e109      	b.n	800c80c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c5f8:	69fb      	ldr	r3, [r7, #28]
 800c5fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5fe:	689b      	ldr	r3, [r3, #8]
 800c600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c604:	2b00      	cmp	r3, #0
 800c606:	d110      	bne.n	800c62a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c608:	69bb      	ldr	r3, [r7, #24]
 800c60a:	015a      	lsls	r2, r3, #5
 800c60c:	69fb      	ldr	r3, [r7, #28]
 800c60e:	4413      	add	r3, r2
 800c610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	69ba      	ldr	r2, [r7, #24]
 800c618:	0151      	lsls	r1, r2, #5
 800c61a:	69fa      	ldr	r2, [r7, #28]
 800c61c:	440a      	add	r2, r1
 800c61e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c622:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c626:	6013      	str	r3, [r2, #0]
 800c628:	e00f      	b.n	800c64a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c62a:	69bb      	ldr	r3, [r7, #24]
 800c62c:	015a      	lsls	r2, r3, #5
 800c62e:	69fb      	ldr	r3, [r7, #28]
 800c630:	4413      	add	r3, r2
 800c632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	69ba      	ldr	r2, [r7, #24]
 800c63a:	0151      	lsls	r1, r2, #5
 800c63c:	69fa      	ldr	r2, [r7, #28]
 800c63e:	440a      	add	r2, r1
 800c640:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c648:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	6919      	ldr	r1, [r3, #16]
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	781a      	ldrb	r2, [r3, #0]
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	699b      	ldr	r3, [r3, #24]
 800c656:	b298      	uxth	r0, r3
 800c658:	79fb      	ldrb	r3, [r7, #7]
 800c65a:	9300      	str	r3, [sp, #0]
 800c65c:	4603      	mov	r3, r0
 800c65e:	68f8      	ldr	r0, [r7, #12]
 800c660:	f000 fade 	bl	800cc20 <USB_WritePacket>
 800c664:	e0d2      	b.n	800c80c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c666:	69bb      	ldr	r3, [r7, #24]
 800c668:	015a      	lsls	r2, r3, #5
 800c66a:	69fb      	ldr	r3, [r7, #28]
 800c66c:	4413      	add	r3, r2
 800c66e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c672:	691b      	ldr	r3, [r3, #16]
 800c674:	69ba      	ldr	r2, [r7, #24]
 800c676:	0151      	lsls	r1, r2, #5
 800c678:	69fa      	ldr	r2, [r7, #28]
 800c67a:	440a      	add	r2, r1
 800c67c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c680:	0cdb      	lsrs	r3, r3, #19
 800c682:	04db      	lsls	r3, r3, #19
 800c684:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c686:	69bb      	ldr	r3, [r7, #24]
 800c688:	015a      	lsls	r2, r3, #5
 800c68a:	69fb      	ldr	r3, [r7, #28]
 800c68c:	4413      	add	r3, r2
 800c68e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c692:	691b      	ldr	r3, [r3, #16]
 800c694:	69ba      	ldr	r2, [r7, #24]
 800c696:	0151      	lsls	r1, r2, #5
 800c698:	69fa      	ldr	r2, [r7, #28]
 800c69a:	440a      	add	r2, r1
 800c69c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c6a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c6a8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	699b      	ldr	r3, [r3, #24]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d126      	bne.n	800c700 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c6b2:	69bb      	ldr	r3, [r7, #24]
 800c6b4:	015a      	lsls	r2, r3, #5
 800c6b6:	69fb      	ldr	r3, [r7, #28]
 800c6b8:	4413      	add	r3, r2
 800c6ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6be:	691a      	ldr	r2, [r3, #16]
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	68db      	ldr	r3, [r3, #12]
 800c6c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c6c8:	69b9      	ldr	r1, [r7, #24]
 800c6ca:	0148      	lsls	r0, r1, #5
 800c6cc:	69f9      	ldr	r1, [r7, #28]
 800c6ce:	4401      	add	r1, r0
 800c6d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c6d4:	4313      	orrs	r3, r2
 800c6d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c6d8:	69bb      	ldr	r3, [r7, #24]
 800c6da:	015a      	lsls	r2, r3, #5
 800c6dc:	69fb      	ldr	r3, [r7, #28]
 800c6de:	4413      	add	r3, r2
 800c6e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6e4:	691b      	ldr	r3, [r3, #16]
 800c6e6:	69ba      	ldr	r2, [r7, #24]
 800c6e8:	0151      	lsls	r1, r2, #5
 800c6ea:	69fa      	ldr	r2, [r7, #28]
 800c6ec:	440a      	add	r2, r1
 800c6ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c6f6:	6113      	str	r3, [r2, #16]
 800c6f8:	e03a      	b.n	800c770 <USB_EPStartXfer+0x3e4>
 800c6fa:	bf00      	nop
 800c6fc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	699a      	ldr	r2, [r3, #24]
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	68db      	ldr	r3, [r3, #12]
 800c708:	4413      	add	r3, r2
 800c70a:	1e5a      	subs	r2, r3, #1
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	68db      	ldr	r3, [r3, #12]
 800c710:	fbb2 f3f3 	udiv	r3, r2, r3
 800c714:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	68db      	ldr	r3, [r3, #12]
 800c71a:	8afa      	ldrh	r2, [r7, #22]
 800c71c:	fb03 f202 	mul.w	r2, r3, r2
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c724:	69bb      	ldr	r3, [r7, #24]
 800c726:	015a      	lsls	r2, r3, #5
 800c728:	69fb      	ldr	r3, [r7, #28]
 800c72a:	4413      	add	r3, r2
 800c72c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c730:	691a      	ldr	r2, [r3, #16]
 800c732:	8afb      	ldrh	r3, [r7, #22]
 800c734:	04d9      	lsls	r1, r3, #19
 800c736:	4b38      	ldr	r3, [pc, #224]	; (800c818 <USB_EPStartXfer+0x48c>)
 800c738:	400b      	ands	r3, r1
 800c73a:	69b9      	ldr	r1, [r7, #24]
 800c73c:	0148      	lsls	r0, r1, #5
 800c73e:	69f9      	ldr	r1, [r7, #28]
 800c740:	4401      	add	r1, r0
 800c742:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c746:	4313      	orrs	r3, r2
 800c748:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c74a:	69bb      	ldr	r3, [r7, #24]
 800c74c:	015a      	lsls	r2, r3, #5
 800c74e:	69fb      	ldr	r3, [r7, #28]
 800c750:	4413      	add	r3, r2
 800c752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c756:	691a      	ldr	r2, [r3, #16]
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	69db      	ldr	r3, [r3, #28]
 800c75c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c760:	69b9      	ldr	r1, [r7, #24]
 800c762:	0148      	lsls	r0, r1, #5
 800c764:	69f9      	ldr	r1, [r7, #28]
 800c766:	4401      	add	r1, r0
 800c768:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c76c:	4313      	orrs	r3, r2
 800c76e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c770:	79fb      	ldrb	r3, [r7, #7]
 800c772:	2b01      	cmp	r3, #1
 800c774:	d10d      	bne.n	800c792 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	691b      	ldr	r3, [r3, #16]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d009      	beq.n	800c792 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	6919      	ldr	r1, [r3, #16]
 800c782:	69bb      	ldr	r3, [r7, #24]
 800c784:	015a      	lsls	r2, r3, #5
 800c786:	69fb      	ldr	r3, [r7, #28]
 800c788:	4413      	add	r3, r2
 800c78a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c78e:	460a      	mov	r2, r1
 800c790:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	791b      	ldrb	r3, [r3, #4]
 800c796:	2b01      	cmp	r3, #1
 800c798:	d128      	bne.n	800c7ec <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c79a:	69fb      	ldr	r3, [r7, #28]
 800c79c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7a0:	689b      	ldr	r3, [r3, #8]
 800c7a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d110      	bne.n	800c7cc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c7aa:	69bb      	ldr	r3, [r7, #24]
 800c7ac:	015a      	lsls	r2, r3, #5
 800c7ae:	69fb      	ldr	r3, [r7, #28]
 800c7b0:	4413      	add	r3, r2
 800c7b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	69ba      	ldr	r2, [r7, #24]
 800c7ba:	0151      	lsls	r1, r2, #5
 800c7bc:	69fa      	ldr	r2, [r7, #28]
 800c7be:	440a      	add	r2, r1
 800c7c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c7c8:	6013      	str	r3, [r2, #0]
 800c7ca:	e00f      	b.n	800c7ec <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c7cc:	69bb      	ldr	r3, [r7, #24]
 800c7ce:	015a      	lsls	r2, r3, #5
 800c7d0:	69fb      	ldr	r3, [r7, #28]
 800c7d2:	4413      	add	r3, r2
 800c7d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	69ba      	ldr	r2, [r7, #24]
 800c7dc:	0151      	lsls	r1, r2, #5
 800c7de:	69fa      	ldr	r2, [r7, #28]
 800c7e0:	440a      	add	r2, r1
 800c7e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c7ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c7ec:	69bb      	ldr	r3, [r7, #24]
 800c7ee:	015a      	lsls	r2, r3, #5
 800c7f0:	69fb      	ldr	r3, [r7, #28]
 800c7f2:	4413      	add	r3, r2
 800c7f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	69ba      	ldr	r2, [r7, #24]
 800c7fc:	0151      	lsls	r1, r2, #5
 800c7fe:	69fa      	ldr	r2, [r7, #28]
 800c800:	440a      	add	r2, r1
 800c802:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c806:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c80a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c80c:	2300      	movs	r3, #0
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3720      	adds	r7, #32
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
 800c816:	bf00      	nop
 800c818:	1ff80000 	.word	0x1ff80000

0800c81c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c81c:	b480      	push	{r7}
 800c81e:	b087      	sub	sp, #28
 800c820:	af00      	add	r7, sp, #0
 800c822:	60f8      	str	r0, [r7, #12]
 800c824:	60b9      	str	r1, [r7, #8]
 800c826:	4613      	mov	r3, r2
 800c828:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	781b      	ldrb	r3, [r3, #0]
 800c832:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	785b      	ldrb	r3, [r3, #1]
 800c838:	2b01      	cmp	r3, #1
 800c83a:	f040 80ce 	bne.w	800c9da <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	699b      	ldr	r3, [r3, #24]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d132      	bne.n	800c8ac <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	015a      	lsls	r2, r3, #5
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	4413      	add	r3, r2
 800c84e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c852:	691b      	ldr	r3, [r3, #16]
 800c854:	693a      	ldr	r2, [r7, #16]
 800c856:	0151      	lsls	r1, r2, #5
 800c858:	697a      	ldr	r2, [r7, #20]
 800c85a:	440a      	add	r2, r1
 800c85c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c860:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c864:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c868:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	015a      	lsls	r2, r3, #5
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	4413      	add	r3, r2
 800c872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c876:	691b      	ldr	r3, [r3, #16]
 800c878:	693a      	ldr	r2, [r7, #16]
 800c87a:	0151      	lsls	r1, r2, #5
 800c87c:	697a      	ldr	r2, [r7, #20]
 800c87e:	440a      	add	r2, r1
 800c880:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c884:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c888:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	015a      	lsls	r2, r3, #5
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	4413      	add	r3, r2
 800c892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c896:	691b      	ldr	r3, [r3, #16]
 800c898:	693a      	ldr	r2, [r7, #16]
 800c89a:	0151      	lsls	r1, r2, #5
 800c89c:	697a      	ldr	r2, [r7, #20]
 800c89e:	440a      	add	r2, r1
 800c8a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8a4:	0cdb      	lsrs	r3, r3, #19
 800c8a6:	04db      	lsls	r3, r3, #19
 800c8a8:	6113      	str	r3, [r2, #16]
 800c8aa:	e04e      	b.n	800c94a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	015a      	lsls	r2, r3, #5
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	4413      	add	r3, r2
 800c8b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8b8:	691b      	ldr	r3, [r3, #16]
 800c8ba:	693a      	ldr	r2, [r7, #16]
 800c8bc:	0151      	lsls	r1, r2, #5
 800c8be:	697a      	ldr	r2, [r7, #20]
 800c8c0:	440a      	add	r2, r1
 800c8c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8c6:	0cdb      	lsrs	r3, r3, #19
 800c8c8:	04db      	lsls	r3, r3, #19
 800c8ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	015a      	lsls	r2, r3, #5
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	4413      	add	r3, r2
 800c8d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8d8:	691b      	ldr	r3, [r3, #16]
 800c8da:	693a      	ldr	r2, [r7, #16]
 800c8dc:	0151      	lsls	r1, r2, #5
 800c8de:	697a      	ldr	r2, [r7, #20]
 800c8e0:	440a      	add	r2, r1
 800c8e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c8ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c8ee:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	699a      	ldr	r2, [r3, #24]
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	68db      	ldr	r3, [r3, #12]
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d903      	bls.n	800c904 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	68da      	ldr	r2, [r3, #12]
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c904:	693b      	ldr	r3, [r7, #16]
 800c906:	015a      	lsls	r2, r3, #5
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	4413      	add	r3, r2
 800c90c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c910:	691b      	ldr	r3, [r3, #16]
 800c912:	693a      	ldr	r2, [r7, #16]
 800c914:	0151      	lsls	r1, r2, #5
 800c916:	697a      	ldr	r2, [r7, #20]
 800c918:	440a      	add	r2, r1
 800c91a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c91e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c922:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	015a      	lsls	r2, r3, #5
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	4413      	add	r3, r2
 800c92c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c930:	691a      	ldr	r2, [r3, #16]
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	699b      	ldr	r3, [r3, #24]
 800c936:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c93a:	6939      	ldr	r1, [r7, #16]
 800c93c:	0148      	lsls	r0, r1, #5
 800c93e:	6979      	ldr	r1, [r7, #20]
 800c940:	4401      	add	r1, r0
 800c942:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c946:	4313      	orrs	r3, r2
 800c948:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c94a:	79fb      	ldrb	r3, [r7, #7]
 800c94c:	2b01      	cmp	r3, #1
 800c94e:	d11e      	bne.n	800c98e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	695b      	ldr	r3, [r3, #20]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d009      	beq.n	800c96c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	015a      	lsls	r2, r3, #5
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	4413      	add	r3, r2
 800c960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c964:	461a      	mov	r2, r3
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	695b      	ldr	r3, [r3, #20]
 800c96a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	015a      	lsls	r2, r3, #5
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	4413      	add	r3, r2
 800c974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	693a      	ldr	r2, [r7, #16]
 800c97c:	0151      	lsls	r1, r2, #5
 800c97e:	697a      	ldr	r2, [r7, #20]
 800c980:	440a      	add	r2, r1
 800c982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c986:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c98a:	6013      	str	r3, [r2, #0]
 800c98c:	e097      	b.n	800cabe <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	015a      	lsls	r2, r3, #5
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	4413      	add	r3, r2
 800c996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	693a      	ldr	r2, [r7, #16]
 800c99e:	0151      	lsls	r1, r2, #5
 800c9a0:	697a      	ldr	r2, [r7, #20]
 800c9a2:	440a      	add	r2, r1
 800c9a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c9ac:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	699b      	ldr	r3, [r3, #24]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	f000 8083 	beq.w	800cabe <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c9b8:	697b      	ldr	r3, [r7, #20]
 800c9ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	781b      	ldrb	r3, [r3, #0]
 800c9c4:	f003 030f 	and.w	r3, r3, #15
 800c9c8:	2101      	movs	r1, #1
 800c9ca:	fa01 f303 	lsl.w	r3, r1, r3
 800c9ce:	6979      	ldr	r1, [r7, #20]
 800c9d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c9d4:	4313      	orrs	r3, r2
 800c9d6:	634b      	str	r3, [r1, #52]	; 0x34
 800c9d8:	e071      	b.n	800cabe <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c9da:	693b      	ldr	r3, [r7, #16]
 800c9dc:	015a      	lsls	r2, r3, #5
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	4413      	add	r3, r2
 800c9e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9e6:	691b      	ldr	r3, [r3, #16]
 800c9e8:	693a      	ldr	r2, [r7, #16]
 800c9ea:	0151      	lsls	r1, r2, #5
 800c9ec:	697a      	ldr	r2, [r7, #20]
 800c9ee:	440a      	add	r2, r1
 800c9f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9f4:	0cdb      	lsrs	r3, r3, #19
 800c9f6:	04db      	lsls	r3, r3, #19
 800c9f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c9fa:	693b      	ldr	r3, [r7, #16]
 800c9fc:	015a      	lsls	r2, r3, #5
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	4413      	add	r3, r2
 800ca02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca06:	691b      	ldr	r3, [r3, #16]
 800ca08:	693a      	ldr	r2, [r7, #16]
 800ca0a:	0151      	lsls	r1, r2, #5
 800ca0c:	697a      	ldr	r2, [r7, #20]
 800ca0e:	440a      	add	r2, r1
 800ca10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ca18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ca1c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	699b      	ldr	r3, [r3, #24]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d003      	beq.n	800ca2e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	68da      	ldr	r2, [r3, #12]
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	68da      	ldr	r2, [r3, #12]
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	015a      	lsls	r2, r3, #5
 800ca3a:	697b      	ldr	r3, [r7, #20]
 800ca3c:	4413      	add	r3, r2
 800ca3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca42:	691b      	ldr	r3, [r3, #16]
 800ca44:	693a      	ldr	r2, [r7, #16]
 800ca46:	0151      	lsls	r1, r2, #5
 800ca48:	697a      	ldr	r2, [r7, #20]
 800ca4a:	440a      	add	r2, r1
 800ca4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ca54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ca56:	693b      	ldr	r3, [r7, #16]
 800ca58:	015a      	lsls	r2, r3, #5
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	4413      	add	r3, r2
 800ca5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca62:	691a      	ldr	r2, [r3, #16]
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	69db      	ldr	r3, [r3, #28]
 800ca68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ca6c:	6939      	ldr	r1, [r7, #16]
 800ca6e:	0148      	lsls	r0, r1, #5
 800ca70:	6979      	ldr	r1, [r7, #20]
 800ca72:	4401      	add	r1, r0
 800ca74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ca78:	4313      	orrs	r3, r2
 800ca7a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800ca7c:	79fb      	ldrb	r3, [r7, #7]
 800ca7e:	2b01      	cmp	r3, #1
 800ca80:	d10d      	bne.n	800ca9e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	691b      	ldr	r3, [r3, #16]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d009      	beq.n	800ca9e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	6919      	ldr	r1, [r3, #16]
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	015a      	lsls	r2, r3, #5
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	4413      	add	r3, r2
 800ca96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca9a:	460a      	mov	r2, r1
 800ca9c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	015a      	lsls	r2, r3, #5
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	4413      	add	r3, r2
 800caa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	693a      	ldr	r2, [r7, #16]
 800caae:	0151      	lsls	r1, r2, #5
 800cab0:	697a      	ldr	r2, [r7, #20]
 800cab2:	440a      	add	r2, r1
 800cab4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cab8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cabc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cabe:	2300      	movs	r3, #0
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	371c      	adds	r7, #28
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr

0800cacc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cacc:	b480      	push	{r7}
 800cace:	b087      	sub	sp, #28
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cad6:	2300      	movs	r3, #0
 800cad8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800cada:	2300      	movs	r3, #0
 800cadc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	785b      	ldrb	r3, [r3, #1]
 800cae6:	2b01      	cmp	r3, #1
 800cae8:	d14a      	bne.n	800cb80 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	015a      	lsls	r2, r3, #5
 800caf0:	693b      	ldr	r3, [r7, #16]
 800caf2:	4413      	add	r3, r2
 800caf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cafe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb02:	f040 8086 	bne.w	800cc12 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	781b      	ldrb	r3, [r3, #0]
 800cb0a:	015a      	lsls	r2, r3, #5
 800cb0c:	693b      	ldr	r3, [r7, #16]
 800cb0e:	4413      	add	r3, r2
 800cb10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	683a      	ldr	r2, [r7, #0]
 800cb18:	7812      	ldrb	r2, [r2, #0]
 800cb1a:	0151      	lsls	r1, r2, #5
 800cb1c:	693a      	ldr	r2, [r7, #16]
 800cb1e:	440a      	add	r2, r1
 800cb20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cb28:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	781b      	ldrb	r3, [r3, #0]
 800cb2e:	015a      	lsls	r2, r3, #5
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	4413      	add	r3, r2
 800cb34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	683a      	ldr	r2, [r7, #0]
 800cb3c:	7812      	ldrb	r2, [r2, #0]
 800cb3e:	0151      	lsls	r1, r2, #5
 800cb40:	693a      	ldr	r2, [r7, #16]
 800cb42:	440a      	add	r2, r1
 800cb44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cb4c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	3301      	adds	r3, #1
 800cb52:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	f242 7210 	movw	r2, #10000	; 0x2710
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	d902      	bls.n	800cb64 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800cb5e:	2301      	movs	r3, #1
 800cb60:	75fb      	strb	r3, [r7, #23]
          break;
 800cb62:	e056      	b.n	800cc12 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	781b      	ldrb	r3, [r3, #0]
 800cb68:	015a      	lsls	r2, r3, #5
 800cb6a:	693b      	ldr	r3, [r7, #16]
 800cb6c:	4413      	add	r3, r2
 800cb6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb7c:	d0e7      	beq.n	800cb4e <USB_EPStopXfer+0x82>
 800cb7e:	e048      	b.n	800cc12 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	781b      	ldrb	r3, [r3, #0]
 800cb84:	015a      	lsls	r2, r3, #5
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	4413      	add	r3, r2
 800cb8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb98:	d13b      	bne.n	800cc12 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	015a      	lsls	r2, r3, #5
 800cba0:	693b      	ldr	r3, [r7, #16]
 800cba2:	4413      	add	r3, r2
 800cba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	683a      	ldr	r2, [r7, #0]
 800cbac:	7812      	ldrb	r2, [r2, #0]
 800cbae:	0151      	lsls	r1, r2, #5
 800cbb0:	693a      	ldr	r2, [r7, #16]
 800cbb2:	440a      	add	r2, r1
 800cbb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbb8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cbbc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	781b      	ldrb	r3, [r3, #0]
 800cbc2:	015a      	lsls	r2, r3, #5
 800cbc4:	693b      	ldr	r3, [r7, #16]
 800cbc6:	4413      	add	r3, r2
 800cbc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	683a      	ldr	r2, [r7, #0]
 800cbd0:	7812      	ldrb	r2, [r2, #0]
 800cbd2:	0151      	lsls	r1, r2, #5
 800cbd4:	693a      	ldr	r2, [r7, #16]
 800cbd6:	440a      	add	r2, r1
 800cbd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbdc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cbe0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	3301      	adds	r3, #1
 800cbe6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	f242 7210 	movw	r2, #10000	; 0x2710
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d902      	bls.n	800cbf8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	75fb      	strb	r3, [r7, #23]
          break;
 800cbf6:	e00c      	b.n	800cc12 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	781b      	ldrb	r3, [r3, #0]
 800cbfc:	015a      	lsls	r2, r3, #5
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	4413      	add	r3, r2
 800cc02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc10:	d0e7      	beq.n	800cbe2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800cc12:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	371c      	adds	r7, #28
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1e:	4770      	bx	lr

0800cc20 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cc20:	b480      	push	{r7}
 800cc22:	b089      	sub	sp, #36	; 0x24
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	60f8      	str	r0, [r7, #12]
 800cc28:	60b9      	str	r1, [r7, #8]
 800cc2a:	4611      	mov	r1, r2
 800cc2c:	461a      	mov	r2, r3
 800cc2e:	460b      	mov	r3, r1
 800cc30:	71fb      	strb	r3, [r7, #7]
 800cc32:	4613      	mov	r3, r2
 800cc34:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800cc3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d123      	bne.n	800cc8e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cc46:	88bb      	ldrh	r3, [r7, #4]
 800cc48:	3303      	adds	r3, #3
 800cc4a:	089b      	lsrs	r3, r3, #2
 800cc4c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cc4e:	2300      	movs	r3, #0
 800cc50:	61bb      	str	r3, [r7, #24]
 800cc52:	e018      	b.n	800cc86 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cc54:	79fb      	ldrb	r3, [r7, #7]
 800cc56:	031a      	lsls	r2, r3, #12
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	4413      	add	r3, r2
 800cc5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc60:	461a      	mov	r2, r3
 800cc62:	69fb      	ldr	r3, [r7, #28]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cc68:	69fb      	ldr	r3, [r7, #28]
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cc6e:	69fb      	ldr	r3, [r7, #28]
 800cc70:	3301      	adds	r3, #1
 800cc72:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cc74:	69fb      	ldr	r3, [r7, #28]
 800cc76:	3301      	adds	r3, #1
 800cc78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cc7a:	69fb      	ldr	r3, [r7, #28]
 800cc7c:	3301      	adds	r3, #1
 800cc7e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cc80:	69bb      	ldr	r3, [r7, #24]
 800cc82:	3301      	adds	r3, #1
 800cc84:	61bb      	str	r3, [r7, #24]
 800cc86:	69ba      	ldr	r2, [r7, #24]
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	d3e2      	bcc.n	800cc54 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cc8e:	2300      	movs	r3, #0
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3724      	adds	r7, #36	; 0x24
 800cc94:	46bd      	mov	sp, r7
 800cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9a:	4770      	bx	lr

0800cc9c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b08b      	sub	sp, #44	; 0x2c
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	60f8      	str	r0, [r7, #12]
 800cca4:	60b9      	str	r1, [r7, #8]
 800cca6:	4613      	mov	r3, r2
 800cca8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ccae:	68bb      	ldr	r3, [r7, #8]
 800ccb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ccb2:	88fb      	ldrh	r3, [r7, #6]
 800ccb4:	089b      	lsrs	r3, r3, #2
 800ccb6:	b29b      	uxth	r3, r3
 800ccb8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ccba:	88fb      	ldrh	r3, [r7, #6]
 800ccbc:	f003 0303 	and.w	r3, r3, #3
 800ccc0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	623b      	str	r3, [r7, #32]
 800ccc6:	e014      	b.n	800ccf2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ccc8:	69bb      	ldr	r3, [r7, #24]
 800ccca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccce:	681a      	ldr	r2, [r3, #0]
 800ccd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd2:	601a      	str	r2, [r3, #0]
    pDest++;
 800ccd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd6:	3301      	adds	r3, #1
 800ccd8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ccda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccdc:	3301      	adds	r3, #1
 800ccde:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce2:	3301      	adds	r3, #1
 800cce4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce8:	3301      	adds	r3, #1
 800ccea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800ccec:	6a3b      	ldr	r3, [r7, #32]
 800ccee:	3301      	adds	r3, #1
 800ccf0:	623b      	str	r3, [r7, #32]
 800ccf2:	6a3a      	ldr	r2, [r7, #32]
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	d3e6      	bcc.n	800ccc8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ccfa:	8bfb      	ldrh	r3, [r7, #30]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d01e      	beq.n	800cd3e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cd00:	2300      	movs	r3, #0
 800cd02:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cd04:	69bb      	ldr	r3, [r7, #24]
 800cd06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd0a:	461a      	mov	r2, r3
 800cd0c:	f107 0310 	add.w	r3, r7, #16
 800cd10:	6812      	ldr	r2, [r2, #0]
 800cd12:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800cd14:	693a      	ldr	r2, [r7, #16]
 800cd16:	6a3b      	ldr	r3, [r7, #32]
 800cd18:	b2db      	uxtb	r3, r3
 800cd1a:	00db      	lsls	r3, r3, #3
 800cd1c:	fa22 f303 	lsr.w	r3, r2, r3
 800cd20:	b2da      	uxtb	r2, r3
 800cd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd24:	701a      	strb	r2, [r3, #0]
      i++;
 800cd26:	6a3b      	ldr	r3, [r7, #32]
 800cd28:	3301      	adds	r3, #1
 800cd2a:	623b      	str	r3, [r7, #32]
      pDest++;
 800cd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd2e:	3301      	adds	r3, #1
 800cd30:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800cd32:	8bfb      	ldrh	r3, [r7, #30]
 800cd34:	3b01      	subs	r3, #1
 800cd36:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800cd38:	8bfb      	ldrh	r3, [r7, #30]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d1ea      	bne.n	800cd14 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800cd3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	372c      	adds	r7, #44	; 0x2c
 800cd44:	46bd      	mov	sp, r7
 800cd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4a:	4770      	bx	lr

0800cd4c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b085      	sub	sp, #20
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	781b      	ldrb	r3, [r3, #0]
 800cd5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	785b      	ldrb	r3, [r3, #1]
 800cd64:	2b01      	cmp	r3, #1
 800cd66:	d12c      	bne.n	800cdc2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	015a      	lsls	r2, r3, #5
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	4413      	add	r3, r2
 800cd70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	db12      	blt.n	800cda0 <USB_EPSetStall+0x54>
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d00f      	beq.n	800cda0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	015a      	lsls	r2, r3, #5
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	4413      	add	r3, r2
 800cd88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	68ba      	ldr	r2, [r7, #8]
 800cd90:	0151      	lsls	r1, r2, #5
 800cd92:	68fa      	ldr	r2, [r7, #12]
 800cd94:	440a      	add	r2, r1
 800cd96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cd9e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	015a      	lsls	r2, r3, #5
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	4413      	add	r3, r2
 800cda8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	68ba      	ldr	r2, [r7, #8]
 800cdb0:	0151      	lsls	r1, r2, #5
 800cdb2:	68fa      	ldr	r2, [r7, #12]
 800cdb4:	440a      	add	r2, r1
 800cdb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cdbe:	6013      	str	r3, [r2, #0]
 800cdc0:	e02b      	b.n	800ce1a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	015a      	lsls	r2, r3, #5
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	4413      	add	r3, r2
 800cdca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	db12      	blt.n	800cdfa <USB_EPSetStall+0xae>
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d00f      	beq.n	800cdfa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	015a      	lsls	r2, r3, #5
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	4413      	add	r3, r2
 800cde2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	68ba      	ldr	r2, [r7, #8]
 800cdea:	0151      	lsls	r1, r2, #5
 800cdec:	68fa      	ldr	r2, [r7, #12]
 800cdee:	440a      	add	r2, r1
 800cdf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cdf4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cdf8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	015a      	lsls	r2, r3, #5
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	4413      	add	r3, r2
 800ce02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	68ba      	ldr	r2, [r7, #8]
 800ce0a:	0151      	lsls	r1, r2, #5
 800ce0c:	68fa      	ldr	r2, [r7, #12]
 800ce0e:	440a      	add	r2, r1
 800ce10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ce18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ce1a:	2300      	movs	r3, #0
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	3714      	adds	r7, #20
 800ce20:	46bd      	mov	sp, r7
 800ce22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce26:	4770      	bx	lr

0800ce28 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ce28:	b480      	push	{r7}
 800ce2a:	b085      	sub	sp, #20
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	781b      	ldrb	r3, [r3, #0]
 800ce3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	785b      	ldrb	r3, [r3, #1]
 800ce40:	2b01      	cmp	r3, #1
 800ce42:	d128      	bne.n	800ce96 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	015a      	lsls	r2, r3, #5
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	4413      	add	r3, r2
 800ce4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	68ba      	ldr	r2, [r7, #8]
 800ce54:	0151      	lsls	r1, r2, #5
 800ce56:	68fa      	ldr	r2, [r7, #12]
 800ce58:	440a      	add	r2, r1
 800ce5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ce62:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	791b      	ldrb	r3, [r3, #4]
 800ce68:	2b03      	cmp	r3, #3
 800ce6a:	d003      	beq.n	800ce74 <USB_EPClearStall+0x4c>
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	791b      	ldrb	r3, [r3, #4]
 800ce70:	2b02      	cmp	r3, #2
 800ce72:	d138      	bne.n	800cee6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	015a      	lsls	r2, r3, #5
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	4413      	add	r3, r2
 800ce7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	68ba      	ldr	r2, [r7, #8]
 800ce84:	0151      	lsls	r1, r2, #5
 800ce86:	68fa      	ldr	r2, [r7, #12]
 800ce88:	440a      	add	r2, r1
 800ce8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce92:	6013      	str	r3, [r2, #0]
 800ce94:	e027      	b.n	800cee6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	015a      	lsls	r2, r3, #5
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	4413      	add	r3, r2
 800ce9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	68ba      	ldr	r2, [r7, #8]
 800cea6:	0151      	lsls	r1, r2, #5
 800cea8:	68fa      	ldr	r2, [r7, #12]
 800ceaa:	440a      	add	r2, r1
 800ceac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ceb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ceb4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	791b      	ldrb	r3, [r3, #4]
 800ceba:	2b03      	cmp	r3, #3
 800cebc:	d003      	beq.n	800cec6 <USB_EPClearStall+0x9e>
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	791b      	ldrb	r3, [r3, #4]
 800cec2:	2b02      	cmp	r3, #2
 800cec4:	d10f      	bne.n	800cee6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	015a      	lsls	r2, r3, #5
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	4413      	add	r3, r2
 800cece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	68ba      	ldr	r2, [r7, #8]
 800ced6:	0151      	lsls	r1, r2, #5
 800ced8:	68fa      	ldr	r2, [r7, #12]
 800ceda:	440a      	add	r2, r1
 800cedc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cee4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cee6:	2300      	movs	r3, #0
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	3714      	adds	r7, #20
 800ceec:	46bd      	mov	sp, r7
 800ceee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef2:	4770      	bx	lr

0800cef4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cef4:	b480      	push	{r7}
 800cef6:	b085      	sub	sp, #20
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
 800cefc:	460b      	mov	r3, r1
 800cefe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	68fa      	ldr	r2, [r7, #12]
 800cf0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf12:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cf16:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf1e:	681a      	ldr	r2, [r3, #0]
 800cf20:	78fb      	ldrb	r3, [r7, #3]
 800cf22:	011b      	lsls	r3, r3, #4
 800cf24:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800cf28:	68f9      	ldr	r1, [r7, #12]
 800cf2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf2e:	4313      	orrs	r3, r2
 800cf30:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cf32:	2300      	movs	r3, #0
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3714      	adds	r7, #20
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3e:	4770      	bx	lr

0800cf40 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cf40:	b480      	push	{r7}
 800cf42:	b085      	sub	sp, #20
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	68fa      	ldr	r2, [r7, #12]
 800cf56:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cf5a:	f023 0303 	bic.w	r3, r3, #3
 800cf5e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf66:	685b      	ldr	r3, [r3, #4]
 800cf68:	68fa      	ldr	r2, [r7, #12]
 800cf6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf6e:	f023 0302 	bic.w	r3, r3, #2
 800cf72:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cf74:	2300      	movs	r3, #0
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3714      	adds	r7, #20
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf80:	4770      	bx	lr

0800cf82 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cf82:	b480      	push	{r7}
 800cf84:	b085      	sub	sp, #20
 800cf86:	af00      	add	r7, sp, #0
 800cf88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	68fa      	ldr	r2, [r7, #12]
 800cf98:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cf9c:	f023 0303 	bic.w	r3, r3, #3
 800cfa0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfa8:	685b      	ldr	r3, [r3, #4]
 800cfaa:	68fa      	ldr	r2, [r7, #12]
 800cfac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cfb0:	f043 0302 	orr.w	r3, r3, #2
 800cfb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cfb6:	2300      	movs	r3, #0
}
 800cfb8:	4618      	mov	r0, r3
 800cfba:	3714      	adds	r7, #20
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc2:	4770      	bx	lr

0800cfc4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b085      	sub	sp, #20
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	695b      	ldr	r3, [r3, #20]
 800cfd0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	699b      	ldr	r3, [r3, #24]
 800cfd6:	68fa      	ldr	r2, [r7, #12]
 800cfd8:	4013      	ands	r3, r2
 800cfda:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3714      	adds	r7, #20
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe8:	4770      	bx	lr

0800cfea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cfea:	b480      	push	{r7}
 800cfec:	b085      	sub	sp, #20
 800cfee:	af00      	add	r7, sp, #0
 800cff0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cffc:	699b      	ldr	r3, [r3, #24]
 800cffe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d006:	69db      	ldr	r3, [r3, #28]
 800d008:	68ba      	ldr	r2, [r7, #8]
 800d00a:	4013      	ands	r3, r2
 800d00c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	0c1b      	lsrs	r3, r3, #16
}
 800d012:	4618      	mov	r0, r3
 800d014:	3714      	adds	r7, #20
 800d016:	46bd      	mov	sp, r7
 800d018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01c:	4770      	bx	lr

0800d01e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d01e:	b480      	push	{r7}
 800d020:	b085      	sub	sp, #20
 800d022:	af00      	add	r7, sp, #0
 800d024:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d030:	699b      	ldr	r3, [r3, #24]
 800d032:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d03a:	69db      	ldr	r3, [r3, #28]
 800d03c:	68ba      	ldr	r2, [r7, #8]
 800d03e:	4013      	ands	r3, r2
 800d040:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	b29b      	uxth	r3, r3
}
 800d046:	4618      	mov	r0, r3
 800d048:	3714      	adds	r7, #20
 800d04a:	46bd      	mov	sp, r7
 800d04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d050:	4770      	bx	lr

0800d052 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d052:	b480      	push	{r7}
 800d054:	b085      	sub	sp, #20
 800d056:	af00      	add	r7, sp, #0
 800d058:	6078      	str	r0, [r7, #4]
 800d05a:	460b      	mov	r3, r1
 800d05c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d062:	78fb      	ldrb	r3, [r7, #3]
 800d064:	015a      	lsls	r2, r3, #5
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	4413      	add	r3, r2
 800d06a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d06e:	689b      	ldr	r3, [r3, #8]
 800d070:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d078:	695b      	ldr	r3, [r3, #20]
 800d07a:	68ba      	ldr	r2, [r7, #8]
 800d07c:	4013      	ands	r3, r2
 800d07e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d080:	68bb      	ldr	r3, [r7, #8]
}
 800d082:	4618      	mov	r0, r3
 800d084:	3714      	adds	r7, #20
 800d086:	46bd      	mov	sp, r7
 800d088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08c:	4770      	bx	lr

0800d08e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d08e:	b480      	push	{r7}
 800d090:	b087      	sub	sp, #28
 800d092:	af00      	add	r7, sp, #0
 800d094:	6078      	str	r0, [r7, #4]
 800d096:	460b      	mov	r3, r1
 800d098:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0a4:	691b      	ldr	r3, [r3, #16]
 800d0a6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0b0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d0b2:	78fb      	ldrb	r3, [r7, #3]
 800d0b4:	f003 030f 	and.w	r3, r3, #15
 800d0b8:	68fa      	ldr	r2, [r7, #12]
 800d0ba:	fa22 f303 	lsr.w	r3, r2, r3
 800d0be:	01db      	lsls	r3, r3, #7
 800d0c0:	b2db      	uxtb	r3, r3
 800d0c2:	693a      	ldr	r2, [r7, #16]
 800d0c4:	4313      	orrs	r3, r2
 800d0c6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d0c8:	78fb      	ldrb	r3, [r7, #3]
 800d0ca:	015a      	lsls	r2, r3, #5
 800d0cc:	697b      	ldr	r3, [r7, #20]
 800d0ce:	4413      	add	r3, r2
 800d0d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0d4:	689b      	ldr	r3, [r3, #8]
 800d0d6:	693a      	ldr	r2, [r7, #16]
 800d0d8:	4013      	ands	r3, r2
 800d0da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d0dc:	68bb      	ldr	r3, [r7, #8]
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	371c      	adds	r7, #28
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e8:	4770      	bx	lr

0800d0ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d0ea:	b480      	push	{r7}
 800d0ec:	b083      	sub	sp, #12
 800d0ee:	af00      	add	r7, sp, #0
 800d0f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	695b      	ldr	r3, [r3, #20]
 800d0f6:	f003 0301 	and.w	r3, r3, #1
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	370c      	adds	r7, #12
 800d0fe:	46bd      	mov	sp, r7
 800d100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d104:	4770      	bx	lr

0800d106 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d106:	b480      	push	{r7}
 800d108:	b085      	sub	sp, #20
 800d10a:	af00      	add	r7, sp, #0
 800d10c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	68fa      	ldr	r2, [r7, #12]
 800d11c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d120:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d124:	f023 0307 	bic.w	r3, r3, #7
 800d128:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d130:	685b      	ldr	r3, [r3, #4]
 800d132:	68fa      	ldr	r2, [r7, #12]
 800d134:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d13c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d13e:	2300      	movs	r3, #0
}
 800d140:	4618      	mov	r0, r3
 800d142:	3714      	adds	r7, #20
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr

0800d14c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d14c:	b480      	push	{r7}
 800d14e:	b087      	sub	sp, #28
 800d150:	af00      	add	r7, sp, #0
 800d152:	60f8      	str	r0, [r7, #12]
 800d154:	460b      	mov	r3, r1
 800d156:	607a      	str	r2, [r7, #4]
 800d158:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	333c      	adds	r3, #60	; 0x3c
 800d162:	3304      	adds	r3, #4
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d168:	693b      	ldr	r3, [r7, #16]
 800d16a:	4a26      	ldr	r2, [pc, #152]	; (800d204 <USB_EP0_OutStart+0xb8>)
 800d16c:	4293      	cmp	r3, r2
 800d16e:	d90a      	bls.n	800d186 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d17c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d180:	d101      	bne.n	800d186 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d182:	2300      	movs	r3, #0
 800d184:	e037      	b.n	800d1f6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d18c:	461a      	mov	r2, r3
 800d18e:	2300      	movs	r3, #0
 800d190:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d198:	691b      	ldr	r3, [r3, #16]
 800d19a:	697a      	ldr	r2, [r7, #20]
 800d19c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d1a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1ac:	691b      	ldr	r3, [r3, #16]
 800d1ae:	697a      	ldr	r2, [r7, #20]
 800d1b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1b4:	f043 0318 	orr.w	r3, r3, #24
 800d1b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1c0:	691b      	ldr	r3, [r3, #16]
 800d1c2:	697a      	ldr	r2, [r7, #20]
 800d1c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1c8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d1cc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d1ce:	7afb      	ldrb	r3, [r7, #11]
 800d1d0:	2b01      	cmp	r3, #1
 800d1d2:	d10f      	bne.n	800d1f4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1da:	461a      	mov	r2, r3
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	697a      	ldr	r2, [r7, #20]
 800d1ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1ee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d1f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d1f4:	2300      	movs	r3, #0
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	371c      	adds	r7, #28
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d200:	4770      	bx	lr
 800d202:	bf00      	nop
 800d204:	4f54300a 	.word	0x4f54300a

0800d208 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d208:	b480      	push	{r7}
 800d20a:	b085      	sub	sp, #20
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d210:	2300      	movs	r3, #0
 800d212:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	3301      	adds	r3, #1
 800d218:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	4a13      	ldr	r2, [pc, #76]	; (800d26c <USB_CoreReset+0x64>)
 800d21e:	4293      	cmp	r3, r2
 800d220:	d901      	bls.n	800d226 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d222:	2303      	movs	r3, #3
 800d224:	e01b      	b.n	800d25e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	691b      	ldr	r3, [r3, #16]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	daf2      	bge.n	800d214 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d22e:	2300      	movs	r3, #0
 800d230:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	691b      	ldr	r3, [r3, #16]
 800d236:	f043 0201 	orr.w	r2, r3, #1
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	3301      	adds	r3, #1
 800d242:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	4a09      	ldr	r2, [pc, #36]	; (800d26c <USB_CoreReset+0x64>)
 800d248:	4293      	cmp	r3, r2
 800d24a:	d901      	bls.n	800d250 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d24c:	2303      	movs	r3, #3
 800d24e:	e006      	b.n	800d25e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	691b      	ldr	r3, [r3, #16]
 800d254:	f003 0301 	and.w	r3, r3, #1
 800d258:	2b01      	cmp	r3, #1
 800d25a:	d0f0      	beq.n	800d23e <USB_CoreReset+0x36>

  return HAL_OK;
 800d25c:	2300      	movs	r3, #0
}
 800d25e:	4618      	mov	r0, r3
 800d260:	3714      	adds	r7, #20
 800d262:	46bd      	mov	sp, r7
 800d264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d268:	4770      	bx	lr
 800d26a:	bf00      	nop
 800d26c:	00030d40 	.word	0x00030d40

0800d270 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d274:	4904      	ldr	r1, [pc, #16]	; (800d288 <MX_FATFS_Init+0x18>)
 800d276:	4805      	ldr	r0, [pc, #20]	; (800d28c <MX_FATFS_Init+0x1c>)
 800d278:	f006 ff7e 	bl	8014178 <FATFS_LinkDriver>
 800d27c:	4603      	mov	r3, r0
 800d27e:	461a      	mov	r2, r3
 800d280:	4b03      	ldr	r3, [pc, #12]	; (800d290 <MX_FATFS_Init+0x20>)
 800d282:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
	/* additional user code for init */

  /* USER CODE END Init */
}
 800d284:	bf00      	nop
 800d286:	bd80      	pop	{r7, pc}
 800d288:	2000390c 	.word	0x2000390c
 800d28c:	0801d9b8 	.word	0x0801d9b8
 800d290:	20003908 	.word	0x20003908

0800d294 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d294:	b480      	push	{r7}
 800d296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
	return 0;
 800d298:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	46bd      	mov	sp, r7
 800d29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a2:	4770      	bx	lr

0800d2a4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b082      	sub	sp, #8
 800d2a8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d2ae:	f000 f888 	bl	800d3c2 <BSP_SD_IsDetected>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	2b01      	cmp	r3, #1
 800d2b6:	d001      	beq.n	800d2bc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	e005      	b.n	800d2c8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d2bc:	4804      	ldr	r0, [pc, #16]	; (800d2d0 <BSP_SD_Init+0x2c>)
 800d2be:	f7fb f9af 	bl	8008620 <HAL_SD_Init>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800d2c6:	79fb      	ldrb	r3, [r7, #7]
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	3708      	adds	r7, #8
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}
 800d2d0:	20002f70 	.word	0x20002f70

0800d2d4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b086      	sub	sp, #24
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	60f8      	str	r0, [r7, #12]
 800d2dc:	60b9      	str	r1, [r7, #8]
 800d2de:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	68ba      	ldr	r2, [r7, #8]
 800d2e8:	68f9      	ldr	r1, [r7, #12]
 800d2ea:	4806      	ldr	r0, [pc, #24]	; (800d304 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d2ec:	f7fb fdac 	bl	8008e48 <HAL_SD_ReadBlocks_DMA>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d001      	beq.n	800d2fa <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d2fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	3718      	adds	r7, #24
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}
 800d304:	20002f70 	.word	0x20002f70

0800d308 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b086      	sub	sp, #24
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	60f8      	str	r0, [r7, #12]
 800d310:	60b9      	str	r1, [r7, #8]
 800d312:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d314:	2300      	movs	r3, #0
 800d316:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	68ba      	ldr	r2, [r7, #8]
 800d31c:	68f9      	ldr	r1, [r7, #12]
 800d31e:	4806      	ldr	r0, [pc, #24]	; (800d338 <BSP_SD_WriteBlocks_DMA+0x30>)
 800d320:	f7fb fe72 	bl	8009008 <HAL_SD_WriteBlocks_DMA>
 800d324:	4603      	mov	r3, r0
 800d326:	2b00      	cmp	r3, #0
 800d328:	d001      	beq.n	800d32e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d32a:	2301      	movs	r3, #1
 800d32c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d32e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d330:	4618      	mov	r0, r3
 800d332:	3718      	adds	r7, #24
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}
 800d338:	20002f70 	.word	0x20002f70

0800d33c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d340:	4805      	ldr	r0, [pc, #20]	; (800d358 <BSP_SD_GetCardState+0x1c>)
 800d342:	f7fc fa93 	bl	800986c <HAL_SD_GetCardState>
 800d346:	4603      	mov	r3, r0
 800d348:	2b04      	cmp	r3, #4
 800d34a:	bf14      	ite	ne
 800d34c:	2301      	movne	r3, #1
 800d34e:	2300      	moveq	r3, #0
 800d350:	b2db      	uxtb	r3, r3
}
 800d352:	4618      	mov	r0, r3
 800d354:	bd80      	pop	{r7, pc}
 800d356:	bf00      	nop
 800d358:	20002f70 	.word	0x20002f70

0800d35c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b082      	sub	sp, #8
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d364:	6879      	ldr	r1, [r7, #4]
 800d366:	4803      	ldr	r0, [pc, #12]	; (800d374 <BSP_SD_GetCardInfo+0x18>)
 800d368:	f7fc fa54 	bl	8009814 <HAL_SD_GetCardInfo>
}
 800d36c:	bf00      	nop
 800d36e:	3708      	adds	r7, #8
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}
 800d374:	20002f70 	.word	0x20002f70

0800d378 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b082      	sub	sp, #8
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800d380:	f000 f818 	bl	800d3b4 <BSP_SD_AbortCallback>
}
 800d384:	bf00      	nop
 800d386:	3708      	adds	r7, #8
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b082      	sub	sp, #8
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d394:	f000 f9c4 	bl	800d720 <BSP_SD_WriteCpltCallback>
}
 800d398:	bf00      	nop
 800d39a:	3708      	adds	r7, #8
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}

0800d3a0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b082      	sub	sp, #8
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d3a8:	f000 f9c8 	bl	800d73c <BSP_SD_ReadCpltCallback>
}
 800d3ac:	bf00      	nop
 800d3ae:	3708      	adds	r7, #8
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}

0800d3b4 <BSP_SD_AbortCallback>:
 * @brief BSP SD Abort callback
 * @retval None
 * @note empty (up to the user to fill it in or to remove it if useless)
 */
__weak void BSP_SD_AbortCallback(void)
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	af00      	add	r7, sp, #0

}
 800d3b8:	bf00      	nop
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c0:	4770      	bx	lr

0800d3c2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d3c2:	b580      	push	{r7, lr}
 800d3c4:	b082      	sub	sp, #8
 800d3c6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d3cc:	f000 f80c 	bl	800d3e8 <BSP_PlatformIsDetected>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d101      	bne.n	800d3da <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d3da:	79fb      	ldrb	r3, [r7, #7]
 800d3dc:	b2db      	uxtb	r3, r3
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3708      	adds	r7, #8
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}
	...

0800d3e8 <BSP_PlatformIsDetected>:
 ******************************************************************************
 */
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b082      	sub	sp, #8
 800d3ec:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d3f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d3f6:	4806      	ldr	r0, [pc, #24]	; (800d410 <BSP_PlatformIsDetected+0x28>)
 800d3f8:	f7f7 ff5c 	bl	80052b4 <HAL_GPIO_ReadPin>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d001      	beq.n	800d406 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d402:	2300      	movs	r3, #0
 800d404:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
	/* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d406:	79fb      	ldrb	r3, [r7, #7]
}
 800d408:	4618      	mov	r0, r3
 800d40a:	3708      	adds	r7, #8
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}
 800d410:	40020000 	.word	0x40020000

0800d414 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b084      	sub	sp, #16
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800d41c:	f006 ff44 	bl	80142a8 <osKernelSysTick>
 800d420:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800d422:	e006      	b.n	800d432 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d424:	f7ff ff8a 	bl	800d33c <BSP_SD_GetCardState>
 800d428:	4603      	mov	r3, r0
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d101      	bne.n	800d432 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d42e:	2300      	movs	r3, #0
 800d430:	e009      	b.n	800d446 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800d432:	f006 ff39 	bl	80142a8 <osKernelSysTick>
 800d436:	4602      	mov	r2, r0
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	1ad3      	subs	r3, r2, r3
 800d43c:	687a      	ldr	r2, [r7, #4]
 800d43e:	429a      	cmp	r2, r3
 800d440:	d8f0      	bhi.n	800d424 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d442:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d446:	4618      	mov	r0, r3
 800d448:	3710      	adds	r7, #16
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}
	...

0800d450 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b082      	sub	sp, #8
 800d454:	af00      	add	r7, sp, #0
 800d456:	4603      	mov	r3, r0
 800d458:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d45a:	4b0b      	ldr	r3, [pc, #44]	; (800d488 <SD_CheckStatus+0x38>)
 800d45c:	2201      	movs	r2, #1
 800d45e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d460:	f7ff ff6c 	bl	800d33c <BSP_SD_GetCardState>
 800d464:	4603      	mov	r3, r0
 800d466:	2b00      	cmp	r3, #0
 800d468:	d107      	bne.n	800d47a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d46a:	4b07      	ldr	r3, [pc, #28]	; (800d488 <SD_CheckStatus+0x38>)
 800d46c:	781b      	ldrb	r3, [r3, #0]
 800d46e:	b2db      	uxtb	r3, r3
 800d470:	f023 0301 	bic.w	r3, r3, #1
 800d474:	b2da      	uxtb	r2, r3
 800d476:	4b04      	ldr	r3, [pc, #16]	; (800d488 <SD_CheckStatus+0x38>)
 800d478:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d47a:	4b03      	ldr	r3, [pc, #12]	; (800d488 <SD_CheckStatus+0x38>)
 800d47c:	781b      	ldrb	r3, [r3, #0]
 800d47e:	b2db      	uxtb	r3, r3
}
 800d480:	4618      	mov	r0, r3
 800d482:	3708      	adds	r7, #8
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}
 800d488:	20000011 	.word	0x20000011

0800d48c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d48c:	b590      	push	{r4, r7, lr}
 800d48e:	b087      	sub	sp, #28
 800d490:	af00      	add	r7, sp, #0
 800d492:	4603      	mov	r3, r0
 800d494:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d496:	4b20      	ldr	r3, [pc, #128]	; (800d518 <SD_initialize+0x8c>)
 800d498:	2201      	movs	r2, #1
 800d49a:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800d49c:	f006 fef8 	bl	8014290 <osKernelRunning>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d030      	beq.n	800d508 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800d4a6:	f7ff fefd 	bl	800d2a4 <BSP_SD_Init>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d107      	bne.n	800d4c0 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800d4b0:	79fb      	ldrb	r3, [r7, #7]
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f7ff ffcc 	bl	800d450 <SD_CheckStatus>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	461a      	mov	r2, r3
 800d4bc:	4b16      	ldr	r3, [pc, #88]	; (800d518 <SD_initialize+0x8c>)
 800d4be:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800d4c0:	4b15      	ldr	r3, [pc, #84]	; (800d518 <SD_initialize+0x8c>)
 800d4c2:	781b      	ldrb	r3, [r3, #0]
 800d4c4:	b2db      	uxtb	r3, r3
 800d4c6:	2b01      	cmp	r3, #1
 800d4c8:	d01e      	beq.n	800d508 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800d4ca:	4b14      	ldr	r3, [pc, #80]	; (800d51c <SD_initialize+0x90>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d10e      	bne.n	800d4f0 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800d4d2:	4b13      	ldr	r3, [pc, #76]	; (800d520 <SD_initialize+0x94>)
 800d4d4:	f107 0408 	add.w	r4, r7, #8
 800d4d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d4da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800d4de:	f107 0308 	add.w	r3, r7, #8
 800d4e2:	2100      	movs	r1, #0
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f007 f818 	bl	801451a <osMessageCreate>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	4a0b      	ldr	r2, [pc, #44]	; (800d51c <SD_initialize+0x90>)
 800d4ee:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800d4f0:	4b0a      	ldr	r3, [pc, #40]	; (800d51c <SD_initialize+0x90>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d107      	bne.n	800d508 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800d4f8:	4b07      	ldr	r3, [pc, #28]	; (800d518 <SD_initialize+0x8c>)
 800d4fa:	781b      	ldrb	r3, [r3, #0]
 800d4fc:	b2db      	uxtb	r3, r3
 800d4fe:	f043 0301 	orr.w	r3, r3, #1
 800d502:	b2da      	uxtb	r2, r3
 800d504:	4b04      	ldr	r3, [pc, #16]	; (800d518 <SD_initialize+0x8c>)
 800d506:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800d508:	4b03      	ldr	r3, [pc, #12]	; (800d518 <SD_initialize+0x8c>)
 800d50a:	781b      	ldrb	r3, [r3, #0]
 800d50c:	b2db      	uxtb	r3, r3
}
 800d50e:	4618      	mov	r0, r3
 800d510:	371c      	adds	r7, #28
 800d512:	46bd      	mov	sp, r7
 800d514:	bd90      	pop	{r4, r7, pc}
 800d516:	bf00      	nop
 800d518:	20000011 	.word	0x20000011
 800d51c:	20003910 	.word	0x20003910
 800d520:	0801d180 	.word	0x0801d180

0800d524 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b082      	sub	sp, #8
 800d528:	af00      	add	r7, sp, #0
 800d52a:	4603      	mov	r3, r0
 800d52c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d52e:	79fb      	ldrb	r3, [r7, #7]
 800d530:	4618      	mov	r0, r3
 800d532:	f7ff ff8d 	bl	800d450 <SD_CheckStatus>
 800d536:	4603      	mov	r3, r0
}
 800d538:	4618      	mov	r0, r3
 800d53a:	3708      	adds	r7, #8
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}

0800d540 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b08a      	sub	sp, #40	; 0x28
 800d544:	af00      	add	r7, sp, #0
 800d546:	60b9      	str	r1, [r7, #8]
 800d548:	607a      	str	r2, [r7, #4]
 800d54a:	603b      	str	r3, [r7, #0]
 800d54c:	4603      	mov	r3, r0
 800d54e:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800d550:	2301      	movs	r3, #1
 800d552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d556:	f247 5030 	movw	r0, #30000	; 0x7530
 800d55a:	f7ff ff5b 	bl	800d414 <SD_CheckStatusWithTimeout>
 800d55e:	4603      	mov	r3, r0
 800d560:	2b00      	cmp	r3, #0
 800d562:	da02      	bge.n	800d56a <SD_read+0x2a>
  {
    return res;
 800d564:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d568:	e032      	b.n	800d5d0 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800d56a:	683a      	ldr	r2, [r7, #0]
 800d56c:	6879      	ldr	r1, [r7, #4]
 800d56e:	68b8      	ldr	r0, [r7, #8]
 800d570:	f7ff feb0 	bl	800d2d4 <BSP_SD_ReadBlocks_DMA>
 800d574:	4603      	mov	r3, r0
 800d576:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800d57a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d124      	bne.n	800d5cc <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800d582:	4b15      	ldr	r3, [pc, #84]	; (800d5d8 <SD_read+0x98>)
 800d584:	6819      	ldr	r1, [r3, #0]
 800d586:	f107 0314 	add.w	r3, r7, #20
 800d58a:	f247 5230 	movw	r2, #30000	; 0x7530
 800d58e:	4618      	mov	r0, r3
 800d590:	f007 f82c 	bl	80145ec <osMessageGet>

    if (event.status == osEventMessage)
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	2b10      	cmp	r3, #16
 800d598:	d118      	bne.n	800d5cc <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800d59a:	69bb      	ldr	r3, [r7, #24]
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	d115      	bne.n	800d5cc <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800d5a0:	f006 fe82 	bl	80142a8 <osKernelSysTick>
 800d5a4:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800d5a6:	e008      	b.n	800d5ba <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d5a8:	f7ff fec8 	bl	800d33c <BSP_SD_GetCardState>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d103      	bne.n	800d5ba <SD_read+0x7a>
              {
                res = RES_OK;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800d5b8:	e008      	b.n	800d5cc <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800d5ba:	f006 fe75 	bl	80142a8 <osKernelSysTick>
 800d5be:	4602      	mov	r2, r0
 800d5c0:	6a3b      	ldr	r3, [r7, #32]
 800d5c2:	1ad3      	subs	r3, r2, r3
 800d5c4:	f247 522f 	movw	r2, #29999	; 0x752f
 800d5c8:	4293      	cmp	r3, r2
 800d5ca:	d9ed      	bls.n	800d5a8 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800d5cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3728      	adds	r7, #40	; 0x28
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}
 800d5d8:	20003910 	.word	0x20003910

0800d5dc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b08a      	sub	sp, #40	; 0x28
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	60b9      	str	r1, [r7, #8]
 800d5e4:	607a      	str	r2, [r7, #4]
 800d5e6:	603b      	str	r3, [r7, #0]
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d5f2:	f247 5030 	movw	r0, #30000	; 0x7530
 800d5f6:	f7ff ff0d 	bl	800d414 <SD_CheckStatusWithTimeout>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	da02      	bge.n	800d606 <SD_write+0x2a>
  {
    return res;
 800d600:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d604:	e02e      	b.n	800d664 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d606:	683a      	ldr	r2, [r7, #0]
 800d608:	6879      	ldr	r1, [r7, #4]
 800d60a:	68b8      	ldr	r0, [r7, #8]
 800d60c:	f7ff fe7c 	bl	800d308 <BSP_SD_WriteBlocks_DMA>
 800d610:	4603      	mov	r3, r0
 800d612:	2b00      	cmp	r3, #0
 800d614:	d124      	bne.n	800d660 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800d616:	4b15      	ldr	r3, [pc, #84]	; (800d66c <SD_write+0x90>)
 800d618:	6819      	ldr	r1, [r3, #0]
 800d61a:	f107 0314 	add.w	r3, r7, #20
 800d61e:	f247 5230 	movw	r2, #30000	; 0x7530
 800d622:	4618      	mov	r0, r3
 800d624:	f006 ffe2 	bl	80145ec <osMessageGet>

    if (event.status == osEventMessage)
 800d628:	697b      	ldr	r3, [r7, #20]
 800d62a:	2b10      	cmp	r3, #16
 800d62c:	d118      	bne.n	800d660 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800d62e:	69bb      	ldr	r3, [r7, #24]
 800d630:	2b02      	cmp	r3, #2
 800d632:	d115      	bne.n	800d660 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800d634:	f006 fe38 	bl	80142a8 <osKernelSysTick>
 800d638:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800d63a:	e008      	b.n	800d64e <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d63c:	f7ff fe7e 	bl	800d33c <BSP_SD_GetCardState>
 800d640:	4603      	mov	r3, r0
 800d642:	2b00      	cmp	r3, #0
 800d644:	d103      	bne.n	800d64e <SD_write+0x72>
          {
            res = RES_OK;
 800d646:	2300      	movs	r3, #0
 800d648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800d64c:	e008      	b.n	800d660 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800d64e:	f006 fe2b 	bl	80142a8 <osKernelSysTick>
 800d652:	4602      	mov	r2, r0
 800d654:	6a3b      	ldr	r3, [r7, #32]
 800d656:	1ad3      	subs	r3, r2, r3
 800d658:	f247 522f 	movw	r2, #29999	; 0x752f
 800d65c:	4293      	cmp	r3, r2
 800d65e:	d9ed      	bls.n	800d63c <SD_write+0x60>
    }

  }
#endif

  return res;
 800d660:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d664:	4618      	mov	r0, r3
 800d666:	3728      	adds	r7, #40	; 0x28
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}
 800d66c:	20003910 	.word	0x20003910

0800d670 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b08c      	sub	sp, #48	; 0x30
 800d674:	af00      	add	r7, sp, #0
 800d676:	4603      	mov	r3, r0
 800d678:	603a      	str	r2, [r7, #0]
 800d67a:	71fb      	strb	r3, [r7, #7]
 800d67c:	460b      	mov	r3, r1
 800d67e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d680:	2301      	movs	r3, #1
 800d682:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d686:	4b25      	ldr	r3, [pc, #148]	; (800d71c <SD_ioctl+0xac>)
 800d688:	781b      	ldrb	r3, [r3, #0]
 800d68a:	b2db      	uxtb	r3, r3
 800d68c:	f003 0301 	and.w	r3, r3, #1
 800d690:	2b00      	cmp	r3, #0
 800d692:	d001      	beq.n	800d698 <SD_ioctl+0x28>
 800d694:	2303      	movs	r3, #3
 800d696:	e03c      	b.n	800d712 <SD_ioctl+0xa2>

  switch (cmd)
 800d698:	79bb      	ldrb	r3, [r7, #6]
 800d69a:	2b03      	cmp	r3, #3
 800d69c:	d834      	bhi.n	800d708 <SD_ioctl+0x98>
 800d69e:	a201      	add	r2, pc, #4	; (adr r2, 800d6a4 <SD_ioctl+0x34>)
 800d6a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6a4:	0800d6b5 	.word	0x0800d6b5
 800d6a8:	0800d6bd 	.word	0x0800d6bd
 800d6ac:	0800d6d5 	.word	0x0800d6d5
 800d6b0:	0800d6ef 	.word	0x0800d6ef
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d6ba:	e028      	b.n	800d70e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d6bc:	f107 030c 	add.w	r3, r7, #12
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f7ff fe4b 	bl	800d35c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d6c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d6d2:	e01c      	b.n	800d70e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d6d4:	f107 030c 	add.w	r3, r7, #12
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f7ff fe3f 	bl	800d35c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e0:	b29a      	uxth	r2, r3
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d6ec:	e00f      	b.n	800d70e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d6ee:	f107 030c 	add.w	r3, r7, #12
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f7ff fe32 	bl	800d35c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6fa:	0a5a      	lsrs	r2, r3, #9
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d700:	2300      	movs	r3, #0
 800d702:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d706:	e002      	b.n	800d70e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d708:	2304      	movs	r3, #4
 800d70a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d70e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d712:	4618      	mov	r0, r3
 800d714:	3730      	adds	r7, #48	; 0x30
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}
 800d71a:	bf00      	nop
 800d71c:	20000011 	.word	0x20000011

0800d720 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800d724:	4b04      	ldr	r3, [pc, #16]	; (800d738 <BSP_SD_WriteCpltCallback+0x18>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	2200      	movs	r2, #0
 800d72a:	2102      	movs	r1, #2
 800d72c:	4618      	mov	r0, r3
 800d72e:	f006 ff1d 	bl	801456c <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800d732:	bf00      	nop
 800d734:	bd80      	pop	{r7, pc}
 800d736:	bf00      	nop
 800d738:	20003910 	.word	0x20003910

0800d73c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800d740:	4b04      	ldr	r3, [pc, #16]	; (800d754 <BSP_SD_ReadCpltCallback+0x18>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	2200      	movs	r2, #0
 800d746:	2101      	movs	r1, #1
 800d748:	4618      	mov	r0, r3
 800d74a:	f006 ff0f 	bl	801456c <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800d74e:	bf00      	nop
 800d750:	bd80      	pop	{r7, pc}
 800d752:	bf00      	nop
 800d754:	20003910 	.word	0x20003910

0800d758 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b084      	sub	sp, #16
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	460b      	mov	r3, r1
 800d762:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800d764:	f44f 701d 	mov.w	r0, #628	; 0x274
 800d768:	f00a f962 	bl	8017a30 <USBD_static_malloc>
 800d76c:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d109      	bne.n	800d788 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	32b0      	adds	r2, #176	; 0xb0
 800d77e:	2100      	movs	r1, #0
 800d780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d784:	2302      	movs	r3, #2
 800d786:	e06e      	b.n	800d866 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	32b0      	adds	r2, #176	; 0xb0
 800d792:	68f9      	ldr	r1, [r7, #12]
 800d794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	32b0      	adds	r2, #176	; 0xb0
 800d7a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	7c1b      	ldrb	r3, [r3, #16]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d12b      	bne.n	800d80c <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800d7b4:	4b2e      	ldr	r3, [pc, #184]	; (800d870 <USBD_MSC_Init+0x118>)
 800d7b6:	7819      	ldrb	r1, [r3, #0]
 800d7b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d7bc:	2202      	movs	r2, #2
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f009 ffa5 	bl	801770e <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800d7c4:	4b2a      	ldr	r3, [pc, #168]	; (800d870 <USBD_MSC_Init+0x118>)
 800d7c6:	781b      	ldrb	r3, [r3, #0]
 800d7c8:	f003 020f 	and.w	r2, r3, #15
 800d7cc:	6879      	ldr	r1, [r7, #4]
 800d7ce:	4613      	mov	r3, r2
 800d7d0:	009b      	lsls	r3, r3, #2
 800d7d2:	4413      	add	r3, r2
 800d7d4:	009b      	lsls	r3, r3, #2
 800d7d6:	440b      	add	r3, r1
 800d7d8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d7dc:	2201      	movs	r2, #1
 800d7de:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800d7e0:	4b24      	ldr	r3, [pc, #144]	; (800d874 <USBD_MSC_Init+0x11c>)
 800d7e2:	7819      	ldrb	r1, [r3, #0]
 800d7e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d7e8:	2202      	movs	r2, #2
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	f009 ff8f 	bl	801770e <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800d7f0:	4b20      	ldr	r3, [pc, #128]	; (800d874 <USBD_MSC_Init+0x11c>)
 800d7f2:	781b      	ldrb	r3, [r3, #0]
 800d7f4:	f003 020f 	and.w	r2, r3, #15
 800d7f8:	6879      	ldr	r1, [r7, #4]
 800d7fa:	4613      	mov	r3, r2
 800d7fc:	009b      	lsls	r3, r3, #2
 800d7fe:	4413      	add	r3, r2
 800d800:	009b      	lsls	r3, r3, #2
 800d802:	440b      	add	r3, r1
 800d804:	3324      	adds	r3, #36	; 0x24
 800d806:	2201      	movs	r2, #1
 800d808:	801a      	strh	r2, [r3, #0]
 800d80a:	e028      	b.n	800d85e <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800d80c:	4b18      	ldr	r3, [pc, #96]	; (800d870 <USBD_MSC_Init+0x118>)
 800d80e:	7819      	ldrb	r1, [r3, #0]
 800d810:	2340      	movs	r3, #64	; 0x40
 800d812:	2202      	movs	r2, #2
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f009 ff7a 	bl	801770e <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800d81a:	4b15      	ldr	r3, [pc, #84]	; (800d870 <USBD_MSC_Init+0x118>)
 800d81c:	781b      	ldrb	r3, [r3, #0]
 800d81e:	f003 020f 	and.w	r2, r3, #15
 800d822:	6879      	ldr	r1, [r7, #4]
 800d824:	4613      	mov	r3, r2
 800d826:	009b      	lsls	r3, r3, #2
 800d828:	4413      	add	r3, r2
 800d82a:	009b      	lsls	r3, r3, #2
 800d82c:	440b      	add	r3, r1
 800d82e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d832:	2201      	movs	r2, #1
 800d834:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800d836:	4b0f      	ldr	r3, [pc, #60]	; (800d874 <USBD_MSC_Init+0x11c>)
 800d838:	7819      	ldrb	r1, [r3, #0]
 800d83a:	2340      	movs	r3, #64	; 0x40
 800d83c:	2202      	movs	r2, #2
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f009 ff65 	bl	801770e <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800d844:	4b0b      	ldr	r3, [pc, #44]	; (800d874 <USBD_MSC_Init+0x11c>)
 800d846:	781b      	ldrb	r3, [r3, #0]
 800d848:	f003 020f 	and.w	r2, r3, #15
 800d84c:	6879      	ldr	r1, [r7, #4]
 800d84e:	4613      	mov	r3, r2
 800d850:	009b      	lsls	r3, r3, #2
 800d852:	4413      	add	r3, r2
 800d854:	009b      	lsls	r3, r3, #2
 800d856:	440b      	add	r3, r1
 800d858:	3324      	adds	r3, #36	; 0x24
 800d85a:	2201      	movs	r2, #1
 800d85c:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800d85e:	6878      	ldr	r0, [r7, #4]
 800d860:	f000 fa2c 	bl	800dcbc <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800d864:	2300      	movs	r3, #0
}
 800d866:	4618      	mov	r0, r3
 800d868:	3710      	adds	r7, #16
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}
 800d86e:	bf00      	nop
 800d870:	20000077 	.word	0x20000077
 800d874:	20000076 	.word	0x20000076

0800d878 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b082      	sub	sp, #8
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
 800d880:	460b      	mov	r3, r1
 800d882:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 800d884:	4b26      	ldr	r3, [pc, #152]	; (800d920 <USBD_MSC_DeInit+0xa8>)
 800d886:	781b      	ldrb	r3, [r3, #0]
 800d888:	4619      	mov	r1, r3
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f009 ff65 	bl	801775a <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 800d890:	4b23      	ldr	r3, [pc, #140]	; (800d920 <USBD_MSC_DeInit+0xa8>)
 800d892:	781b      	ldrb	r3, [r3, #0]
 800d894:	f003 020f 	and.w	r2, r3, #15
 800d898:	6879      	ldr	r1, [r7, #4]
 800d89a:	4613      	mov	r3, r2
 800d89c:	009b      	lsls	r3, r3, #2
 800d89e:	4413      	add	r3, r2
 800d8a0:	009b      	lsls	r3, r3, #2
 800d8a2:	440b      	add	r3, r1
 800d8a4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 800d8ac:	4b1d      	ldr	r3, [pc, #116]	; (800d924 <USBD_MSC_DeInit+0xac>)
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	4619      	mov	r1, r3
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f009 ff51 	bl	801775a <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 800d8b8:	4b1a      	ldr	r3, [pc, #104]	; (800d924 <USBD_MSC_DeInit+0xac>)
 800d8ba:	781b      	ldrb	r3, [r3, #0]
 800d8bc:	f003 020f 	and.w	r2, r3, #15
 800d8c0:	6879      	ldr	r1, [r7, #4]
 800d8c2:	4613      	mov	r3, r2
 800d8c4:	009b      	lsls	r3, r3, #2
 800d8c6:	4413      	add	r3, r2
 800d8c8:	009b      	lsls	r3, r3, #2
 800d8ca:	440b      	add	r3, r1
 800d8cc:	3324      	adds	r3, #36	; 0x24
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	32b0      	adds	r2, #176	; 0xb0
 800d8dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d018      	beq.n	800d916 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	f000 fa67 	bl	800ddb8 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	32b0      	adds	r2, #176	; 0xb0
 800d8f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f00a f8a7 	bl	8017a4c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	32b0      	adds	r2, #176	; 0xb0
 800d908:	2100      	movs	r1, #0
 800d90a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	2200      	movs	r2, #0
 800d912:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d916:	2300      	movs	r3, #0
}
 800d918:	4618      	mov	r0, r3
 800d91a:	3708      	adds	r7, #8
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}
 800d920:	20000077 	.word	0x20000077
 800d924:	20000076 	.word	0x20000076

0800d928 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b086      	sub	sp, #24
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	32b0      	adds	r2, #176	; 0xb0
 800d93c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d940:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800d942:	2300      	movs	r3, #0
 800d944:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800d946:	2300      	movs	r3, #0
 800d948:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800d94a:	693b      	ldr	r3, [r7, #16]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d101      	bne.n	800d954 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800d950:	2303      	movs	r3, #3
 800d952:	e0e1      	b.n	800db18 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	781b      	ldrb	r3, [r3, #0]
 800d958:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d053      	beq.n	800da08 <USBD_MSC_Setup+0xe0>
 800d960:	2b20      	cmp	r3, #32
 800d962:	f040 80d1 	bne.w	800db08 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	785b      	ldrb	r3, [r3, #1]
 800d96a:	2bfe      	cmp	r3, #254	; 0xfe
 800d96c:	d002      	beq.n	800d974 <USBD_MSC_Setup+0x4c>
 800d96e:	2bff      	cmp	r3, #255	; 0xff
 800d970:	d02a      	beq.n	800d9c8 <USBD_MSC_Setup+0xa0>
 800d972:	e041      	b.n	800d9f8 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	885b      	ldrh	r3, [r3, #2]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d11e      	bne.n	800d9ba <USBD_MSC_Setup+0x92>
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	88db      	ldrh	r3, [r3, #6]
 800d980:	2b01      	cmp	r3, #1
 800d982:	d11a      	bne.n	800d9ba <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	781b      	ldrb	r3, [r3, #0]
 800d988:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	da15      	bge.n	800d9ba <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d994:	687a      	ldr	r2, [r7, #4]
 800d996:	33b0      	adds	r3, #176	; 0xb0
 800d998:	009b      	lsls	r3, r3, #2
 800d99a:	4413      	add	r3, r2
 800d99c:	685b      	ldr	r3, [r3, #4]
 800d99e:	699b      	ldr	r3, [r3, #24]
 800d9a0:	4798      	blx	r3
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	461a      	mov	r2, r3
 800d9a6:	693b      	ldr	r3, [r7, #16]
 800d9a8:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	2201      	movs	r2, #1
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f003 f923 	bl	8010bfc <USBD_CtlSendData>
 800d9b6:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d9b8:	e025      	b.n	800da06 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800d9ba:	6839      	ldr	r1, [r7, #0]
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	f003 f8ac 	bl	8010b1a <USBD_CtlError>
            ret = USBD_FAIL;
 800d9c2:	2303      	movs	r3, #3
 800d9c4:	75fb      	strb	r3, [r7, #23]
          break;
 800d9c6:	e01e      	b.n	800da06 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	885b      	ldrh	r3, [r3, #2]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d10c      	bne.n	800d9ea <USBD_MSC_Setup+0xc2>
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	88db      	ldrh	r3, [r3, #6]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d108      	bne.n	800d9ea <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	781b      	ldrb	r3, [r3, #0]
 800d9dc:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	db03      	blt.n	800d9ea <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 800d9e2:	6878      	ldr	r0, [r7, #4]
 800d9e4:	f000 f9b4 	bl	800dd50 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d9e8:	e00d      	b.n	800da06 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800d9ea:	6839      	ldr	r1, [r7, #0]
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f003 f894 	bl	8010b1a <USBD_CtlError>
            ret = USBD_FAIL;
 800d9f2:	2303      	movs	r3, #3
 800d9f4:	75fb      	strb	r3, [r7, #23]
          break;
 800d9f6:	e006      	b.n	800da06 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 800d9f8:	6839      	ldr	r1, [r7, #0]
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f003 f88d 	bl	8010b1a <USBD_CtlError>
          ret = USBD_FAIL;
 800da00:	2303      	movs	r3, #3
 800da02:	75fb      	strb	r3, [r7, #23]
          break;
 800da04:	bf00      	nop
      }
      break;
 800da06:	e086      	b.n	800db16 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	785b      	ldrb	r3, [r3, #1]
 800da0c:	2b0b      	cmp	r3, #11
 800da0e:	d872      	bhi.n	800daf6 <USBD_MSC_Setup+0x1ce>
 800da10:	a201      	add	r2, pc, #4	; (adr r2, 800da18 <USBD_MSC_Setup+0xf0>)
 800da12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da16:	bf00      	nop
 800da18:	0800da49 	.word	0x0800da49
 800da1c:	0800dac5 	.word	0x0800dac5
 800da20:	0800daf7 	.word	0x0800daf7
 800da24:	0800daf7 	.word	0x0800daf7
 800da28:	0800daf7 	.word	0x0800daf7
 800da2c:	0800daf7 	.word	0x0800daf7
 800da30:	0800daf7 	.word	0x0800daf7
 800da34:	0800daf7 	.word	0x0800daf7
 800da38:	0800daf7 	.word	0x0800daf7
 800da3c:	0800daf7 	.word	0x0800daf7
 800da40:	0800da73 	.word	0x0800da73
 800da44:	0800da9d 	.word	0x0800da9d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da4e:	b2db      	uxtb	r3, r3
 800da50:	2b03      	cmp	r3, #3
 800da52:	d107      	bne.n	800da64 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800da54:	f107 030e 	add.w	r3, r7, #14
 800da58:	2202      	movs	r2, #2
 800da5a:	4619      	mov	r1, r3
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f003 f8cd 	bl	8010bfc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800da62:	e050      	b.n	800db06 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800da64:	6839      	ldr	r1, [r7, #0]
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f003 f857 	bl	8010b1a <USBD_CtlError>
            ret = USBD_FAIL;
 800da6c:	2303      	movs	r3, #3
 800da6e:	75fb      	strb	r3, [r7, #23]
          break;
 800da70:	e049      	b.n	800db06 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da78:	b2db      	uxtb	r3, r3
 800da7a:	2b03      	cmp	r3, #3
 800da7c:	d107      	bne.n	800da8e <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	3304      	adds	r3, #4
 800da82:	2201      	movs	r2, #1
 800da84:	4619      	mov	r1, r3
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	f003 f8b8 	bl	8010bfc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800da8c:	e03b      	b.n	800db06 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800da8e:	6839      	ldr	r1, [r7, #0]
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f003 f842 	bl	8010b1a <USBD_CtlError>
            ret = USBD_FAIL;
 800da96:	2303      	movs	r3, #3
 800da98:	75fb      	strb	r3, [r7, #23]
          break;
 800da9a:	e034      	b.n	800db06 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800daa2:	b2db      	uxtb	r3, r3
 800daa4:	2b03      	cmp	r3, #3
 800daa6:	d106      	bne.n	800dab6 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	885b      	ldrh	r3, [r3, #2]
 800daac:	b2db      	uxtb	r3, r3
 800daae:	461a      	mov	r2, r3
 800dab0:	693b      	ldr	r3, [r7, #16]
 800dab2:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dab4:	e027      	b.n	800db06 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800dab6:	6839      	ldr	r1, [r7, #0]
 800dab8:	6878      	ldr	r0, [r7, #4]
 800daba:	f003 f82e 	bl	8010b1a <USBD_CtlError>
            ret = USBD_FAIL;
 800dabe:	2303      	movs	r3, #3
 800dac0:	75fb      	strb	r3, [r7, #23]
          break;
 800dac2:	e020      	b.n	800db06 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800daca:	b2db      	uxtb	r3, r3
 800dacc:	2b03      	cmp	r3, #3
 800dace:	d119      	bne.n	800db04 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	885b      	ldrh	r3, [r3, #2]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d115      	bne.n	800db04 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	889b      	ldrh	r3, [r3, #4]
 800dadc:	b2db      	uxtb	r3, r3
 800dade:	4619      	mov	r1, r3
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	f009 fe59 	bl	8017798 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	889b      	ldrh	r3, [r3, #4]
 800daea:	b2db      	uxtb	r3, r3
 800daec:	4619      	mov	r1, r3
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f000 fb2e 	bl	800e150 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800daf4:	e006      	b.n	800db04 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 800daf6:	6839      	ldr	r1, [r7, #0]
 800daf8:	6878      	ldr	r0, [r7, #4]
 800dafa:	f003 f80e 	bl	8010b1a <USBD_CtlError>
          ret = USBD_FAIL;
 800dafe:	2303      	movs	r3, #3
 800db00:	75fb      	strb	r3, [r7, #23]
          break;
 800db02:	e000      	b.n	800db06 <USBD_MSC_Setup+0x1de>
          break;
 800db04:	bf00      	nop
      }
      break;
 800db06:	e006      	b.n	800db16 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 800db08:	6839      	ldr	r1, [r7, #0]
 800db0a:	6878      	ldr	r0, [r7, #4]
 800db0c:	f003 f805 	bl	8010b1a <USBD_CtlError>
      ret = USBD_FAIL;
 800db10:	2303      	movs	r3, #3
 800db12:	75fb      	strb	r3, [r7, #23]
      break;
 800db14:	bf00      	nop
  }

  return (uint8_t)ret;
 800db16:	7dfb      	ldrb	r3, [r7, #23]
}
 800db18:	4618      	mov	r0, r3
 800db1a:	3718      	adds	r7, #24
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}

0800db20 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b082      	sub	sp, #8
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
 800db28:	460b      	mov	r3, r1
 800db2a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800db2c:	78fb      	ldrb	r3, [r7, #3]
 800db2e:	4619      	mov	r1, r3
 800db30:	6878      	ldr	r0, [r7, #4]
 800db32:	f000 f959 	bl	800dde8 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800db36:	2300      	movs	r3, #0
}
 800db38:	4618      	mov	r0, r3
 800db3a:	3708      	adds	r7, #8
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd80      	pop	{r7, pc}

0800db40 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b082      	sub	sp, #8
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	460b      	mov	r3, r1
 800db4a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800db4c:	78fb      	ldrb	r3, [r7, #3]
 800db4e:	4619      	mov	r1, r3
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f000 f983 	bl	800de5c <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800db56:	2300      	movs	r3, #0
}
 800db58:	4618      	mov	r0, r3
 800db5a:	3708      	adds	r7, #8
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}

0800db60 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b084      	sub	sp, #16
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800db68:	2181      	movs	r1, #129	; 0x81
 800db6a:	4812      	ldr	r0, [pc, #72]	; (800dbb4 <USBD_MSC_GetHSCfgDesc+0x54>)
 800db6c:	f002 f972 	bl	800fe54 <USBD_GetEpDesc>
 800db70:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800db72:	2101      	movs	r1, #1
 800db74:	480f      	ldr	r0, [pc, #60]	; (800dbb4 <USBD_MSC_GetHSCfgDesc+0x54>)
 800db76:	f002 f96d 	bl	800fe54 <USBD_GetEpDesc>
 800db7a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d006      	beq.n	800db90 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	2200      	movs	r2, #0
 800db86:	711a      	strb	r2, [r3, #4]
 800db88:	2200      	movs	r2, #0
 800db8a:	f042 0202 	orr.w	r2, r2, #2
 800db8e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d006      	beq.n	800dba4 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	2200      	movs	r2, #0
 800db9a:	711a      	strb	r2, [r3, #4]
 800db9c:	2200      	movs	r2, #0
 800db9e:	f042 0202 	orr.w	r2, r2, #2
 800dba2:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2220      	movs	r2, #32
 800dba8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800dbaa:	4b02      	ldr	r3, [pc, #8]	; (800dbb4 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 800dbac:	4618      	mov	r0, r3
 800dbae:	3710      	adds	r7, #16
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}
 800dbb4:	2000004c 	.word	0x2000004c

0800dbb8 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b084      	sub	sp, #16
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800dbc0:	2181      	movs	r1, #129	; 0x81
 800dbc2:	4812      	ldr	r0, [pc, #72]	; (800dc0c <USBD_MSC_GetFSCfgDesc+0x54>)
 800dbc4:	f002 f946 	bl	800fe54 <USBD_GetEpDesc>
 800dbc8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800dbca:	2101      	movs	r1, #1
 800dbcc:	480f      	ldr	r0, [pc, #60]	; (800dc0c <USBD_MSC_GetFSCfgDesc+0x54>)
 800dbce:	f002 f941 	bl	800fe54 <USBD_GetEpDesc>
 800dbd2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d006      	beq.n	800dbe8 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	2200      	movs	r2, #0
 800dbde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dbe2:	711a      	strb	r2, [r3, #4]
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d006      	beq.n	800dbfc <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dbf6:	711a      	strb	r2, [r3, #4]
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2220      	movs	r2, #32
 800dc00:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800dc02:	4b02      	ldr	r3, [pc, #8]	; (800dc0c <USBD_MSC_GetFSCfgDesc+0x54>)
}
 800dc04:	4618      	mov	r0, r3
 800dc06:	3710      	adds	r7, #16
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}
 800dc0c:	2000004c 	.word	0x2000004c

0800dc10 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b084      	sub	sp, #16
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800dc18:	2181      	movs	r1, #129	; 0x81
 800dc1a:	4812      	ldr	r0, [pc, #72]	; (800dc64 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800dc1c:	f002 f91a 	bl	800fe54 <USBD_GetEpDesc>
 800dc20:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800dc22:	2101      	movs	r1, #1
 800dc24:	480f      	ldr	r0, [pc, #60]	; (800dc64 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800dc26:	f002 f915 	bl	800fe54 <USBD_GetEpDesc>
 800dc2a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d006      	beq.n	800dc40 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	2200      	movs	r2, #0
 800dc36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dc3a:	711a      	strb	r2, [r3, #4]
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d006      	beq.n	800dc54 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	2200      	movs	r2, #0
 800dc4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dc4e:	711a      	strb	r2, [r3, #4]
 800dc50:	2200      	movs	r2, #0
 800dc52:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2220      	movs	r2, #32
 800dc58:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800dc5a:	4b02      	ldr	r3, [pc, #8]	; (800dc64 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3710      	adds	r7, #16
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}
 800dc64:	2000004c 	.word	0x2000004c

0800dc68 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800dc68:	b480      	push	{r7}
 800dc6a:	b083      	sub	sp, #12
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	220a      	movs	r2, #10
 800dc74:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800dc76:	4b03      	ldr	r3, [pc, #12]	; (800dc84 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	370c      	adds	r7, #12
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc82:	4770      	bx	lr
 800dc84:	2000006c 	.word	0x2000006c

0800dc88 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800dc88:	b480      	push	{r7}
 800dc8a:	b083      	sub	sp, #12
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d101      	bne.n	800dc9c <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800dc98:	2303      	movs	r3, #3
 800dc9a:	e009      	b.n	800dcb0 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dca2:	687a      	ldr	r2, [r7, #4]
 800dca4:	33b0      	adds	r3, #176	; 0xb0
 800dca6:	009b      	lsls	r3, r3, #2
 800dca8:	4413      	add	r3, r2
 800dcaa:	683a      	ldr	r2, [r7, #0]
 800dcac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800dcae:	2300      	movs	r3, #0
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	370c      	adds	r7, #12
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcba:	4770      	bx	lr

0800dcbc <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b084      	sub	sp, #16
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	32b0      	adds	r2, #176	; 0xb0
 800dcce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcd2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d032      	beq.n	800dd40 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	2200      	movs	r2, #0
 800dcde:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	2200      	movs	r2, #0
 800dce4:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	2200      	movs	r2, #0
 800dcea:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dd04:	687a      	ldr	r2, [r7, #4]
 800dd06:	33b0      	adds	r3, #176	; 0xb0
 800dd08:	009b      	lsls	r3, r3, #2
 800dd0a:	4413      	add	r3, r2
 800dd0c:	685b      	ldr	r3, [r3, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	2000      	movs	r0, #0
 800dd12:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 800dd14:	4b0c      	ldr	r3, [pc, #48]	; (800dd48 <MSC_BOT_Init+0x8c>)
 800dd16:	781b      	ldrb	r3, [r3, #0]
 800dd18:	4619      	mov	r1, r3
 800dd1a:	6878      	ldr	r0, [r7, #4]
 800dd1c:	f009 fd3c 	bl	8017798 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 800dd20:	4b0a      	ldr	r3, [pc, #40]	; (800dd4c <MSC_BOT_Init+0x90>)
 800dd22:	781b      	ldrb	r3, [r3, #0]
 800dd24:	4619      	mov	r1, r3
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f009 fd36 	bl	8017798 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800dd2c:	4b06      	ldr	r3, [pc, #24]	; (800dd48 <MSC_BOT_Init+0x8c>)
 800dd2e:	7819      	ldrb	r1, [r3, #0]
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800dd36:	231f      	movs	r3, #31
 800dd38:	6878      	ldr	r0, [r7, #4]
 800dd3a:	f009 fdf6 	bl	801792a <USBD_LL_PrepareReceive>
 800dd3e:	e000      	b.n	800dd42 <MSC_BOT_Init+0x86>
    return;
 800dd40:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800dd42:	3710      	adds	r7, #16
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}
 800dd48:	20000077 	.word	0x20000077
 800dd4c:	20000076 	.word	0x20000076

0800dd50 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b084      	sub	sp, #16
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	32b0      	adds	r2, #176	; 0xb0
 800dd62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd66:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d01b      	beq.n	800dda6 <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	2200      	movs	r2, #0
 800dd72:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	2201      	movs	r2, #1
 800dd78:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800dd7a:	4b0d      	ldr	r3, [pc, #52]	; (800ddb0 <MSC_BOT_Reset+0x60>)
 800dd7c:	781b      	ldrb	r3, [r3, #0]
 800dd7e:	4619      	mov	r1, r3
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f009 fd47 	bl	8017814 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800dd86:	4b0b      	ldr	r3, [pc, #44]	; (800ddb4 <MSC_BOT_Reset+0x64>)
 800dd88:	781b      	ldrb	r3, [r3, #0]
 800dd8a:	4619      	mov	r1, r3
 800dd8c:	6878      	ldr	r0, [r7, #4]
 800dd8e:	f009 fd41 	bl	8017814 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800dd92:	4b08      	ldr	r3, [pc, #32]	; (800ddb4 <MSC_BOT_Reset+0x64>)
 800dd94:	7819      	ldrb	r1, [r3, #0]
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800dd9c:	231f      	movs	r3, #31
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f009 fdc3 	bl	801792a <USBD_LL_PrepareReceive>
 800dda4:	e000      	b.n	800dda8 <MSC_BOT_Reset+0x58>
    return;
 800dda6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800dda8:	3710      	adds	r7, #16
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}
 800ddae:	bf00      	nop
 800ddb0:	20000076 	.word	0x20000076
 800ddb4:	20000077 	.word	0x20000077

0800ddb8 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800ddb8:	b480      	push	{r7}
 800ddba:	b085      	sub	sp, #20
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	32b0      	adds	r2, #176	; 0xb0
 800ddca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddce:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d002      	beq.n	800dddc <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	2200      	movs	r2, #0
 800ddda:	721a      	strb	r2, [r3, #8]
  }
}
 800dddc:	bf00      	nop
 800ddde:	3714      	adds	r7, #20
 800dde0:	46bd      	mov	sp, r7
 800dde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde6:	4770      	bx	lr

0800dde8 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b084      	sub	sp, #16
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
 800ddf0:	460b      	mov	r3, r1
 800ddf2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	32b0      	adds	r2, #176	; 0xb0
 800ddfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de02:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d020      	beq.n	800de4c <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	7a1b      	ldrb	r3, [r3, #8]
 800de0e:	2b02      	cmp	r3, #2
 800de10:	d005      	beq.n	800de1e <MSC_BOT_DataIn+0x36>
 800de12:	2b02      	cmp	r3, #2
 800de14:	db1c      	blt.n	800de50 <MSC_BOT_DataIn+0x68>
 800de16:	3b03      	subs	r3, #3
 800de18:	2b01      	cmp	r3, #1
 800de1a:	d819      	bhi.n	800de50 <MSC_BOT_DataIn+0x68>
 800de1c:	e011      	b.n	800de42 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800de2a:	461a      	mov	r2, r3
 800de2c:	6878      	ldr	r0, [r7, #4]
 800de2e:	f000 f9c9 	bl	800e1c4 <SCSI_ProcessCmd>
 800de32:	4603      	mov	r3, r0
 800de34:	2b00      	cmp	r3, #0
 800de36:	da0d      	bge.n	800de54 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800de38:	2101      	movs	r1, #1
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f000 f90c 	bl	800e058 <MSC_BOT_SendCSW>
      }
      break;
 800de40:	e008      	b.n	800de54 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800de42:	2100      	movs	r1, #0
 800de44:	6878      	ldr	r0, [r7, #4]
 800de46:	f000 f907 	bl	800e058 <MSC_BOT_SendCSW>
      break;
 800de4a:	e004      	b.n	800de56 <MSC_BOT_DataIn+0x6e>
    return;
 800de4c:	bf00      	nop
 800de4e:	e002      	b.n	800de56 <MSC_BOT_DataIn+0x6e>

    default:
      break;
 800de50:	bf00      	nop
 800de52:	e000      	b.n	800de56 <MSC_BOT_DataIn+0x6e>
      break;
 800de54:	bf00      	nop
  }
}
 800de56:	3710      	adds	r7, #16
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}

0800de5c <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b084      	sub	sp, #16
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
 800de64:	460b      	mov	r3, r1
 800de66:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	32b0      	adds	r2, #176	; 0xb0
 800de72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de76:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d01c      	beq.n	800deb8 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	7a1b      	ldrb	r3, [r3, #8]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d002      	beq.n	800de8c <MSC_BOT_DataOut+0x30>
 800de86:	2b01      	cmp	r3, #1
 800de88:	d004      	beq.n	800de94 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800de8a:	e018      	b.n	800debe <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	f000 f819 	bl	800dec4 <MSC_BOT_CBW_Decode>
      break;
 800de92:	e014      	b.n	800debe <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800dea0:	461a      	mov	r2, r3
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	f000 f98e 	bl	800e1c4 <SCSI_ProcessCmd>
 800dea8:	4603      	mov	r3, r0
 800deaa:	2b00      	cmp	r3, #0
 800deac:	da06      	bge.n	800debc <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800deae:	2101      	movs	r1, #1
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	f000 f8d1 	bl	800e058 <MSC_BOT_SendCSW>
      break;
 800deb6:	e001      	b.n	800debc <MSC_BOT_DataOut+0x60>
    return;
 800deb8:	bf00      	nop
 800deba:	e000      	b.n	800debe <MSC_BOT_DataOut+0x62>
      break;
 800debc:	bf00      	nop
  }
}
 800debe:	3710      	adds	r7, #16
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}

0800dec4 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b084      	sub	sp, #16
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	32b0      	adds	r2, #176	; 0xb0
 800ded6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800deda:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d079      	beq.n	800dfd6 <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800defa:	4b3a      	ldr	r3, [pc, #232]	; (800dfe4 <MSC_BOT_CBW_Decode+0x120>)
 800defc:	781b      	ldrb	r3, [r3, #0]
 800defe:	4619      	mov	r1, r3
 800df00:	6878      	ldr	r0, [r7, #4]
 800df02:	f009 fd33 	bl	801796c <USBD_LL_GetRxDataSize>
 800df06:	4603      	mov	r3, r0
 800df08:	2b1f      	cmp	r3, #31
 800df0a:	d114      	bne.n	800df36 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800df12:	4a35      	ldr	r2, [pc, #212]	; (800dfe8 <MSC_BOT_CBW_Decode+0x124>)
 800df14:	4293      	cmp	r3, r2
 800df16:	d10e      	bne.n	800df36 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800df1e:	2b01      	cmp	r3, #1
 800df20:	d809      	bhi.n	800df36 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d004      	beq.n	800df36 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800df32:	2b10      	cmp	r3, #16
 800df34:	d90e      	bls.n	800df54 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800df3c:	2320      	movs	r3, #32
 800df3e:	2205      	movs	r2, #5
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f000 fe28 	bl	800eb96 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	2202      	movs	r2, #2
 800df4a:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800df4c:	6878      	ldr	r0, [r7, #4]
 800df4e:	f000 f8bd 	bl	800e0cc <MSC_BOT_Abort>
 800df52:	e043      	b.n	800dfdc <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800df60:	461a      	mov	r2, r3
 800df62:	6878      	ldr	r0, [r7, #4]
 800df64:	f000 f92e 	bl	800e1c4 <SCSI_ProcessCmd>
 800df68:	4603      	mov	r3, r0
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	da0c      	bge.n	800df88 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	7a1b      	ldrb	r3, [r3, #8]
 800df72:	2b05      	cmp	r3, #5
 800df74:	d104      	bne.n	800df80 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800df76:	2101      	movs	r1, #1
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f000 f86d 	bl	800e058 <MSC_BOT_SendCSW>
 800df7e:	e02d      	b.n	800dfdc <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	f000 f8a3 	bl	800e0cc <MSC_BOT_Abort>
 800df86:	e029      	b.n	800dfdc <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	7a1b      	ldrb	r3, [r3, #8]
 800df8c:	2b02      	cmp	r3, #2
 800df8e:	d024      	beq.n	800dfda <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800df94:	2b01      	cmp	r3, #1
 800df96:	d020      	beq.n	800dfda <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800df9c:	2b03      	cmp	r3, #3
 800df9e:	d01c      	beq.n	800dfda <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	68db      	ldr	r3, [r3, #12]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d009      	beq.n	800dfbc <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	f103 0110 	add.w	r1, r3, #16
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	68db      	ldr	r3, [r3, #12]
 800dfb2:	461a      	mov	r2, r3
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f000 f819 	bl	800dfec <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800dfba:	e00f      	b.n	800dfdc <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	68db      	ldr	r3, [r3, #12]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d104      	bne.n	800dfce <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800dfc4:	2100      	movs	r1, #0
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f000 f846 	bl	800e058 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800dfcc:	e006      	b.n	800dfdc <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f000 f87c 	bl	800e0cc <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800dfd4:	e002      	b.n	800dfdc <MSC_BOT_CBW_Decode+0x118>
    return;
 800dfd6:	bf00      	nop
 800dfd8:	e000      	b.n	800dfdc <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 800dfda:	bf00      	nop
    }
  }
}
 800dfdc:	3710      	adds	r7, #16
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}
 800dfe2:	bf00      	nop
 800dfe4:	20000077 	.word	0x20000077
 800dfe8:	43425355 	.word	0x43425355

0800dfec <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b086      	sub	sp, #24
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	60f8      	str	r0, [r7, #12]
 800dff4:	60b9      	str	r1, [r7, #8]
 800dff6:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	32b0      	adds	r2, #176	; 0xb0
 800e002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e006:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d01e      	beq.n	800e04c <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 800e00e:	697b      	ldr	r3, [r7, #20]
 800e010:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e014:	687a      	ldr	r2, [r7, #4]
 800e016:	4293      	cmp	r3, r2
 800e018:	bf28      	it	cs
 800e01a:	4613      	movcs	r3, r2
 800e01c:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800e01e:	697b      	ldr	r3, [r7, #20]
 800e020:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	1ad2      	subs	r2, r2, r3
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800e02e:	697b      	ldr	r3, [r7, #20]
 800e030:	2200      	movs	r2, #0
 800e032:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	2204      	movs	r2, #4
 800e03a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800e03c:	4b05      	ldr	r3, [pc, #20]	; (800e054 <MSC_BOT_SendData+0x68>)
 800e03e:	7819      	ldrb	r1, [r3, #0]
 800e040:	693b      	ldr	r3, [r7, #16]
 800e042:	68ba      	ldr	r2, [r7, #8]
 800e044:	68f8      	ldr	r0, [r7, #12]
 800e046:	f009 fc4f 	bl	80178e8 <USBD_LL_Transmit>
 800e04a:	e000      	b.n	800e04e <MSC_BOT_SendData+0x62>
    return;
 800e04c:	bf00      	nop
}
 800e04e:	3718      	adds	r7, #24
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}
 800e054:	20000076 	.word	0x20000076

0800e058 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b084      	sub	sp, #16
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	460b      	mov	r3, r1
 800e062:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	32b0      	adds	r2, #176	; 0xb0
 800e06e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e072:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d01d      	beq.n	800e0b6 <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	4a10      	ldr	r2, [pc, #64]	; (800e0c0 <MSC_BOT_SendCSW+0x68>)
 800e07e:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	78fa      	ldrb	r2, [r7, #3]
 800e086:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	2200      	movs	r2, #0
 800e08e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800e090:	4b0c      	ldr	r3, [pc, #48]	; (800e0c4 <MSC_BOT_SendCSW+0x6c>)
 800e092:	7819      	ldrb	r1, [r3, #0]
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800e09a:	230d      	movs	r3, #13
 800e09c:	6878      	ldr	r0, [r7, #4]
 800e09e:	f009 fc23 	bl	80178e8 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800e0a2:	4b09      	ldr	r3, [pc, #36]	; (800e0c8 <MSC_BOT_SendCSW+0x70>)
 800e0a4:	7819      	ldrb	r1, [r3, #0]
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800e0ac:	231f      	movs	r3, #31
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f009 fc3b 	bl	801792a <USBD_LL_PrepareReceive>
 800e0b4:	e000      	b.n	800e0b8 <MSC_BOT_SendCSW+0x60>
    return;
 800e0b6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800e0b8:	3710      	adds	r7, #16
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}
 800e0be:	bf00      	nop
 800e0c0:	53425355 	.word	0x53425355
 800e0c4:	20000076 	.word	0x20000076
 800e0c8:	20000077 	.word	0x20000077

0800e0cc <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b084      	sub	sp, #16
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	32b0      	adds	r2, #176	; 0xb0
 800e0de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0e2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d02a      	beq.n	800e140 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d10e      	bne.n	800e112 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d009      	beq.n	800e112 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800e102:	2b00      	cmp	r3, #0
 800e104:	d105      	bne.n	800e112 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800e106:	4b10      	ldr	r3, [pc, #64]	; (800e148 <MSC_BOT_Abort+0x7c>)
 800e108:	781b      	ldrb	r3, [r3, #0]
 800e10a:	4619      	mov	r1, r3
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f009 fb62 	bl	80177d6 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800e112:	4b0e      	ldr	r3, [pc, #56]	; (800e14c <MSC_BOT_Abort+0x80>)
 800e114:	781b      	ldrb	r3, [r3, #0]
 800e116:	4619      	mov	r1, r3
 800e118:	6878      	ldr	r0, [r7, #4]
 800e11a:	f009 fb5c 	bl	80177d6 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	7a5b      	ldrb	r3, [r3, #9]
 800e122:	2b02      	cmp	r3, #2
 800e124:	d10d      	bne.n	800e142 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800e126:	4b09      	ldr	r3, [pc, #36]	; (800e14c <MSC_BOT_Abort+0x80>)
 800e128:	781b      	ldrb	r3, [r3, #0]
 800e12a:	4619      	mov	r1, r3
 800e12c:	6878      	ldr	r0, [r7, #4]
 800e12e:	f009 fb52 	bl	80177d6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800e132:	4b05      	ldr	r3, [pc, #20]	; (800e148 <MSC_BOT_Abort+0x7c>)
 800e134:	781b      	ldrb	r3, [r3, #0]
 800e136:	4619      	mov	r1, r3
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f009 fb4c 	bl	80177d6 <USBD_LL_StallEP>
 800e13e:	e000      	b.n	800e142 <MSC_BOT_Abort+0x76>
    return;
 800e140:	bf00      	nop
  }
}
 800e142:	3710      	adds	r7, #16
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}
 800e148:	20000077 	.word	0x20000077
 800e14c:	20000076 	.word	0x20000076

0800e150 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b084      	sub	sp, #16
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	460b      	mov	r3, r1
 800e15a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	32b0      	adds	r2, #176	; 0xb0
 800e166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e16a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d01d      	beq.n	800e1ae <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	7a5b      	ldrb	r3, [r3, #9]
 800e176:	2b02      	cmp	r3, #2
 800e178:	d10c      	bne.n	800e194 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800e17a:	4b10      	ldr	r3, [pc, #64]	; (800e1bc <MSC_BOT_CplClrFeature+0x6c>)
 800e17c:	781b      	ldrb	r3, [r3, #0]
 800e17e:	4619      	mov	r1, r3
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f009 fb28 	bl	80177d6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800e186:	4b0e      	ldr	r3, [pc, #56]	; (800e1c0 <MSC_BOT_CplClrFeature+0x70>)
 800e188:	781b      	ldrb	r3, [r3, #0]
 800e18a:	4619      	mov	r1, r3
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f009 fb22 	bl	80177d6 <USBD_LL_StallEP>
 800e192:	e00f      	b.n	800e1b4 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800e194:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	da0a      	bge.n	800e1b2 <MSC_BOT_CplClrFeature+0x62>
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	7a5b      	ldrb	r3, [r3, #9]
 800e1a0:	2b01      	cmp	r3, #1
 800e1a2:	d006      	beq.n	800e1b2 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800e1a4:	2101      	movs	r1, #1
 800e1a6:	6878      	ldr	r0, [r7, #4]
 800e1a8:	f7ff ff56 	bl	800e058 <MSC_BOT_SendCSW>
 800e1ac:	e002      	b.n	800e1b4 <MSC_BOT_CplClrFeature+0x64>
    return;
 800e1ae:	bf00      	nop
 800e1b0:	e000      	b.n	800e1b4 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800e1b2:	bf00      	nop
  }
}
 800e1b4:	3710      	adds	r7, #16
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd80      	pop	{r7, pc}
 800e1ba:	bf00      	nop
 800e1bc:	20000076 	.word	0x20000076
 800e1c0:	20000077 	.word	0x20000077

0800e1c4 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b086      	sub	sp, #24
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	60f8      	str	r0, [r7, #12]
 800e1cc:	460b      	mov	r3, r1
 800e1ce:	607a      	str	r2, [r7, #4]
 800e1d0:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	32b0      	adds	r2, #176	; 0xb0
 800e1dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1e0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800e1e2:	693b      	ldr	r3, [r7, #16]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d102      	bne.n	800e1ee <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 800e1e8:	f04f 33ff 	mov.w	r3, #4294967295
 800e1ec:	e168      	b.n	800e4c0 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	781b      	ldrb	r3, [r3, #0]
 800e1f2:	2baa      	cmp	r3, #170	; 0xaa
 800e1f4:	f000 8144 	beq.w	800e480 <SCSI_ProcessCmd+0x2bc>
 800e1f8:	2baa      	cmp	r3, #170	; 0xaa
 800e1fa:	f300 8153 	bgt.w	800e4a4 <SCSI_ProcessCmd+0x2e0>
 800e1fe:	2ba8      	cmp	r3, #168	; 0xa8
 800e200:	f000 812c 	beq.w	800e45c <SCSI_ProcessCmd+0x298>
 800e204:	2ba8      	cmp	r3, #168	; 0xa8
 800e206:	f300 814d 	bgt.w	800e4a4 <SCSI_ProcessCmd+0x2e0>
 800e20a:	2b5a      	cmp	r3, #90	; 0x5a
 800e20c:	f300 80c0 	bgt.w	800e390 <SCSI_ProcessCmd+0x1cc>
 800e210:	2b00      	cmp	r3, #0
 800e212:	f2c0 8147 	blt.w	800e4a4 <SCSI_ProcessCmd+0x2e0>
 800e216:	2b5a      	cmp	r3, #90	; 0x5a
 800e218:	f200 8144 	bhi.w	800e4a4 <SCSI_ProcessCmd+0x2e0>
 800e21c:	a201      	add	r2, pc, #4	; (adr r2, 800e224 <SCSI_ProcessCmd+0x60>)
 800e21e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e222:	bf00      	nop
 800e224:	0800e397 	.word	0x0800e397
 800e228:	0800e4a5 	.word	0x0800e4a5
 800e22c:	0800e4a5 	.word	0x0800e4a5
 800e230:	0800e3a9 	.word	0x0800e3a9
 800e234:	0800e4a5 	.word	0x0800e4a5
 800e238:	0800e4a5 	.word	0x0800e4a5
 800e23c:	0800e4a5 	.word	0x0800e4a5
 800e240:	0800e4a5 	.word	0x0800e4a5
 800e244:	0800e4a5 	.word	0x0800e4a5
 800e248:	0800e4a5 	.word	0x0800e4a5
 800e24c:	0800e4a5 	.word	0x0800e4a5
 800e250:	0800e4a5 	.word	0x0800e4a5
 800e254:	0800e4a5 	.word	0x0800e4a5
 800e258:	0800e4a5 	.word	0x0800e4a5
 800e25c:	0800e4a5 	.word	0x0800e4a5
 800e260:	0800e4a5 	.word	0x0800e4a5
 800e264:	0800e4a5 	.word	0x0800e4a5
 800e268:	0800e4a5 	.word	0x0800e4a5
 800e26c:	0800e3bb 	.word	0x0800e3bb
 800e270:	0800e4a5 	.word	0x0800e4a5
 800e274:	0800e4a5 	.word	0x0800e4a5
 800e278:	0800e4a5 	.word	0x0800e4a5
 800e27c:	0800e4a5 	.word	0x0800e4a5
 800e280:	0800e4a5 	.word	0x0800e4a5
 800e284:	0800e4a5 	.word	0x0800e4a5
 800e288:	0800e4a5 	.word	0x0800e4a5
 800e28c:	0800e3f1 	.word	0x0800e3f1
 800e290:	0800e3cd 	.word	0x0800e3cd
 800e294:	0800e4a5 	.word	0x0800e4a5
 800e298:	0800e4a5 	.word	0x0800e4a5
 800e29c:	0800e3df 	.word	0x0800e3df
 800e2a0:	0800e4a5 	.word	0x0800e4a5
 800e2a4:	0800e4a5 	.word	0x0800e4a5
 800e2a8:	0800e4a5 	.word	0x0800e4a5
 800e2ac:	0800e4a5 	.word	0x0800e4a5
 800e2b0:	0800e415 	.word	0x0800e415
 800e2b4:	0800e4a5 	.word	0x0800e4a5
 800e2b8:	0800e427 	.word	0x0800e427
 800e2bc:	0800e4a5 	.word	0x0800e4a5
 800e2c0:	0800e4a5 	.word	0x0800e4a5
 800e2c4:	0800e44b 	.word	0x0800e44b
 800e2c8:	0800e4a5 	.word	0x0800e4a5
 800e2cc:	0800e46f 	.word	0x0800e46f
 800e2d0:	0800e4a5 	.word	0x0800e4a5
 800e2d4:	0800e4a5 	.word	0x0800e4a5
 800e2d8:	0800e4a5 	.word	0x0800e4a5
 800e2dc:	0800e4a5 	.word	0x0800e4a5
 800e2e0:	0800e493 	.word	0x0800e493
 800e2e4:	0800e4a5 	.word	0x0800e4a5
 800e2e8:	0800e4a5 	.word	0x0800e4a5
 800e2ec:	0800e4a5 	.word	0x0800e4a5
 800e2f0:	0800e4a5 	.word	0x0800e4a5
 800e2f4:	0800e4a5 	.word	0x0800e4a5
 800e2f8:	0800e4a5 	.word	0x0800e4a5
 800e2fc:	0800e4a5 	.word	0x0800e4a5
 800e300:	0800e4a5 	.word	0x0800e4a5
 800e304:	0800e4a5 	.word	0x0800e4a5
 800e308:	0800e4a5 	.word	0x0800e4a5
 800e30c:	0800e4a5 	.word	0x0800e4a5
 800e310:	0800e4a5 	.word	0x0800e4a5
 800e314:	0800e4a5 	.word	0x0800e4a5
 800e318:	0800e4a5 	.word	0x0800e4a5
 800e31c:	0800e4a5 	.word	0x0800e4a5
 800e320:	0800e4a5 	.word	0x0800e4a5
 800e324:	0800e4a5 	.word	0x0800e4a5
 800e328:	0800e4a5 	.word	0x0800e4a5
 800e32c:	0800e4a5 	.word	0x0800e4a5
 800e330:	0800e4a5 	.word	0x0800e4a5
 800e334:	0800e4a5 	.word	0x0800e4a5
 800e338:	0800e4a5 	.word	0x0800e4a5
 800e33c:	0800e4a5 	.word	0x0800e4a5
 800e340:	0800e4a5 	.word	0x0800e4a5
 800e344:	0800e4a5 	.word	0x0800e4a5
 800e348:	0800e4a5 	.word	0x0800e4a5
 800e34c:	0800e4a5 	.word	0x0800e4a5
 800e350:	0800e4a5 	.word	0x0800e4a5
 800e354:	0800e4a5 	.word	0x0800e4a5
 800e358:	0800e4a5 	.word	0x0800e4a5
 800e35c:	0800e4a5 	.word	0x0800e4a5
 800e360:	0800e4a5 	.word	0x0800e4a5
 800e364:	0800e4a5 	.word	0x0800e4a5
 800e368:	0800e4a5 	.word	0x0800e4a5
 800e36c:	0800e4a5 	.word	0x0800e4a5
 800e370:	0800e4a5 	.word	0x0800e4a5
 800e374:	0800e4a5 	.word	0x0800e4a5
 800e378:	0800e4a5 	.word	0x0800e4a5
 800e37c:	0800e4a5 	.word	0x0800e4a5
 800e380:	0800e4a5 	.word	0x0800e4a5
 800e384:	0800e4a5 	.word	0x0800e4a5
 800e388:	0800e4a5 	.word	0x0800e4a5
 800e38c:	0800e403 	.word	0x0800e403
 800e390:	2b9e      	cmp	r3, #158	; 0x9e
 800e392:	d051      	beq.n	800e438 <SCSI_ProcessCmd+0x274>
 800e394:	e086      	b.n	800e4a4 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800e396:	7afb      	ldrb	r3, [r7, #11]
 800e398:	687a      	ldr	r2, [r7, #4]
 800e39a:	4619      	mov	r1, r3
 800e39c:	68f8      	ldr	r0, [r7, #12]
 800e39e:	f000 f893 	bl	800e4c8 <SCSI_TestUnitReady>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	75fb      	strb	r3, [r7, #23]
      break;
 800e3a6:	e089      	b.n	800e4bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 800e3a8:	7afb      	ldrb	r3, [r7, #11]
 800e3aa:	687a      	ldr	r2, [r7, #4]
 800e3ac:	4619      	mov	r1, r3
 800e3ae:	68f8      	ldr	r0, [r7, #12]
 800e3b0:	f000 fb6e 	bl	800ea90 <SCSI_RequestSense>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	75fb      	strb	r3, [r7, #23]
      break;
 800e3b8:	e080      	b.n	800e4bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800e3ba:	7afb      	ldrb	r3, [r7, #11]
 800e3bc:	687a      	ldr	r2, [r7, #4]
 800e3be:	4619      	mov	r1, r3
 800e3c0:	68f8      	ldr	r0, [r7, #12]
 800e3c2:	f000 f8db 	bl	800e57c <SCSI_Inquiry>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	75fb      	strb	r3, [r7, #23]
      break;
 800e3ca:	e077      	b.n	800e4bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800e3cc:	7afb      	ldrb	r3, [r7, #11]
 800e3ce:	687a      	ldr	r2, [r7, #4]
 800e3d0:	4619      	mov	r1, r3
 800e3d2:	68f8      	ldr	r0, [r7, #12]
 800e3d4:	f000 fc2a 	bl	800ec2c <SCSI_StartStopUnit>
 800e3d8:	4603      	mov	r3, r0
 800e3da:	75fb      	strb	r3, [r7, #23]
      break;
 800e3dc:	e06e      	b.n	800e4bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800e3de:	7afb      	ldrb	r3, [r7, #11]
 800e3e0:	687a      	ldr	r2, [r7, #4]
 800e3e2:	4619      	mov	r1, r3
 800e3e4:	68f8      	ldr	r0, [r7, #12]
 800e3e6:	f000 fc76 	bl	800ecd6 <SCSI_AllowPreventRemovable>
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	75fb      	strb	r3, [r7, #23]
      break;
 800e3ee:	e065      	b.n	800e4bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800e3f0:	7afb      	ldrb	r3, [r7, #11]
 800e3f2:	687a      	ldr	r2, [r7, #4]
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	68f8      	ldr	r0, [r7, #12]
 800e3f8:	f000 faea 	bl	800e9d0 <SCSI_ModeSense6>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	75fb      	strb	r3, [r7, #23]
      break;
 800e400:	e05c      	b.n	800e4bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800e402:	7afb      	ldrb	r3, [r7, #11]
 800e404:	687a      	ldr	r2, [r7, #4]
 800e406:	4619      	mov	r1, r3
 800e408:	68f8      	ldr	r0, [r7, #12]
 800e40a:	f000 fb11 	bl	800ea30 <SCSI_ModeSense10>
 800e40e:	4603      	mov	r3, r0
 800e410:	75fb      	strb	r3, [r7, #23]
      break;
 800e412:	e053      	b.n	800e4bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800e414:	7afb      	ldrb	r3, [r7, #11]
 800e416:	687a      	ldr	r2, [r7, #4]
 800e418:	4619      	mov	r1, r3
 800e41a:	68f8      	ldr	r0, [r7, #12]
 800e41c:	f000 fa5d 	bl	800e8da <SCSI_ReadFormatCapacity>
 800e420:	4603      	mov	r3, r0
 800e422:	75fb      	strb	r3, [r7, #23]
      break;
 800e424:	e04a      	b.n	800e4bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800e426:	7afb      	ldrb	r3, [r7, #11]
 800e428:	687a      	ldr	r2, [r7, #4]
 800e42a:	4619      	mov	r1, r3
 800e42c:	68f8      	ldr	r0, [r7, #12]
 800e42e:	f000 f923 	bl	800e678 <SCSI_ReadCapacity10>
 800e432:	4603      	mov	r3, r0
 800e434:	75fb      	strb	r3, [r7, #23]
      break;
 800e436:	e041      	b.n	800e4bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800e438:	7afb      	ldrb	r3, [r7, #11]
 800e43a:	687a      	ldr	r2, [r7, #4]
 800e43c:	4619      	mov	r1, r3
 800e43e:	68f8      	ldr	r0, [r7, #12]
 800e440:	f000 f998 	bl	800e774 <SCSI_ReadCapacity16>
 800e444:	4603      	mov	r3, r0
 800e446:	75fb      	strb	r3, [r7, #23]
      break;
 800e448:	e038      	b.n	800e4bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800e44a:	7afb      	ldrb	r3, [r7, #11]
 800e44c:	687a      	ldr	r2, [r7, #4]
 800e44e:	4619      	mov	r1, r3
 800e450:	68f8      	ldr	r0, [r7, #12]
 800e452:	f000 fc6d 	bl	800ed30 <SCSI_Read10>
 800e456:	4603      	mov	r3, r0
 800e458:	75fb      	strb	r3, [r7, #23]
      break;
 800e45a:	e02f      	b.n	800e4bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800e45c:	7afb      	ldrb	r3, [r7, #11]
 800e45e:	687a      	ldr	r2, [r7, #4]
 800e460:	4619      	mov	r1, r3
 800e462:	68f8      	ldr	r0, [r7, #12]
 800e464:	f000 fd0e 	bl	800ee84 <SCSI_Read12>
 800e468:	4603      	mov	r3, r0
 800e46a:	75fb      	strb	r3, [r7, #23]
      break;
 800e46c:	e026      	b.n	800e4bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800e46e:	7afb      	ldrb	r3, [r7, #11]
 800e470:	687a      	ldr	r2, [r7, #4]
 800e472:	4619      	mov	r1, r3
 800e474:	68f8      	ldr	r0, [r7, #12]
 800e476:	f000 fdb9 	bl	800efec <SCSI_Write10>
 800e47a:	4603      	mov	r3, r0
 800e47c:	75fb      	strb	r3, [r7, #23]
      break;
 800e47e:	e01d      	b.n	800e4bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800e480:	7afb      	ldrb	r3, [r7, #11]
 800e482:	687a      	ldr	r2, [r7, #4]
 800e484:	4619      	mov	r1, r3
 800e486:	68f8      	ldr	r0, [r7, #12]
 800e488:	f000 fe86 	bl	800f198 <SCSI_Write12>
 800e48c:	4603      	mov	r3, r0
 800e48e:	75fb      	strb	r3, [r7, #23]
      break;
 800e490:	e014      	b.n	800e4bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800e492:	7afb      	ldrb	r3, [r7, #11]
 800e494:	687a      	ldr	r2, [r7, #4]
 800e496:	4619      	mov	r1, r3
 800e498:	68f8      	ldr	r0, [r7, #12]
 800e49a:	f000 ff63 	bl	800f364 <SCSI_Verify10>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	75fb      	strb	r3, [r7, #23]
      break;
 800e4a2:	e00b      	b.n	800e4bc <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800e4a4:	7af9      	ldrb	r1, [r7, #11]
 800e4a6:	2320      	movs	r3, #32
 800e4a8:	2205      	movs	r2, #5
 800e4aa:	68f8      	ldr	r0, [r7, #12]
 800e4ac:	f000 fb73 	bl	800eb96 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800e4b0:	693b      	ldr	r3, [r7, #16]
 800e4b2:	2202      	movs	r2, #2
 800e4b4:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800e4b6:	23ff      	movs	r3, #255	; 0xff
 800e4b8:	75fb      	strb	r3, [r7, #23]
      break;
 800e4ba:	bf00      	nop
  }

  return ret;
 800e4bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	3718      	adds	r7, #24
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}

0800e4c8 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b086      	sub	sp, #24
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	60f8      	str	r0, [r7, #12]
 800e4d0:	460b      	mov	r3, r1
 800e4d2:	607a      	str	r2, [r7, #4]
 800e4d4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	32b0      	adds	r2, #176	; 0xb0
 800e4e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4e4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800e4e6:	697b      	ldr	r3, [r7, #20]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d102      	bne.n	800e4f2 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 800e4ec:	f04f 33ff 	mov.w	r3, #4294967295
 800e4f0:	e03f      	b.n	800e572 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d00a      	beq.n	800e512 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e4fc:	697b      	ldr	r3, [r7, #20]
 800e4fe:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e502:	2320      	movs	r3, #32
 800e504:	2205      	movs	r2, #5
 800e506:	68f8      	ldr	r0, [r7, #12]
 800e508:	f000 fb45 	bl	800eb96 <SCSI_SenseCode>

    return -1;
 800e50c:	f04f 33ff 	mov.w	r3, #4294967295
 800e510:	e02f      	b.n	800e572 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800e512:	697b      	ldr	r3, [r7, #20]
 800e514:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800e518:	2b02      	cmp	r3, #2
 800e51a:	d10b      	bne.n	800e534 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e51c:	7af9      	ldrb	r1, [r7, #11]
 800e51e:	233a      	movs	r3, #58	; 0x3a
 800e520:	2202      	movs	r2, #2
 800e522:	68f8      	ldr	r0, [r7, #12]
 800e524:	f000 fb37 	bl	800eb96 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800e528:	697b      	ldr	r3, [r7, #20]
 800e52a:	2205      	movs	r2, #5
 800e52c:	721a      	strb	r2, [r3, #8]
    return -1;
 800e52e:	f04f 33ff 	mov.w	r3, #4294967295
 800e532:	e01e      	b.n	800e572 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e53a:	68fa      	ldr	r2, [r7, #12]
 800e53c:	33b0      	adds	r3, #176	; 0xb0
 800e53e:	009b      	lsls	r3, r3, #2
 800e540:	4413      	add	r3, r2
 800e542:	685b      	ldr	r3, [r3, #4]
 800e544:	689b      	ldr	r3, [r3, #8]
 800e546:	7afa      	ldrb	r2, [r7, #11]
 800e548:	4610      	mov	r0, r2
 800e54a:	4798      	blx	r3
 800e54c:	4603      	mov	r3, r0
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d00b      	beq.n	800e56a <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e552:	7af9      	ldrb	r1, [r7, #11]
 800e554:	233a      	movs	r3, #58	; 0x3a
 800e556:	2202      	movs	r2, #2
 800e558:	68f8      	ldr	r0, [r7, #12]
 800e55a:	f000 fb1c 	bl	800eb96 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800e55e:	697b      	ldr	r3, [r7, #20]
 800e560:	2205      	movs	r2, #5
 800e562:	721a      	strb	r2, [r3, #8]

    return -1;
 800e564:	f04f 33ff 	mov.w	r3, #4294967295
 800e568:	e003      	b.n	800e572 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	2200      	movs	r2, #0
 800e56e:	60da      	str	r2, [r3, #12]

  return 0;
 800e570:	2300      	movs	r3, #0
}
 800e572:	4618      	mov	r0, r3
 800e574:	3718      	adds	r7, #24
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}
	...

0800e57c <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b088      	sub	sp, #32
 800e580:	af00      	add	r7, sp, #0
 800e582:	60f8      	str	r0, [r7, #12]
 800e584:	460b      	mov	r3, r1
 800e586:	607a      	str	r2, [r7, #4]
 800e588:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	32b0      	adds	r2, #176	; 0xb0
 800e594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e598:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800e59a:	69bb      	ldr	r3, [r7, #24]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d102      	bne.n	800e5a6 <SCSI_Inquiry+0x2a>
  {
    return -1;
 800e5a0:	f04f 33ff 	mov.w	r3, #4294967295
 800e5a4:	e05f      	b.n	800e666 <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800e5a6:	69bb      	ldr	r3, [r7, #24]
 800e5a8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d10a      	bne.n	800e5c6 <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e5b0:	69bb      	ldr	r3, [r7, #24]
 800e5b2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e5b6:	2320      	movs	r3, #32
 800e5b8:	2205      	movs	r2, #5
 800e5ba:	68f8      	ldr	r0, [r7, #12]
 800e5bc:	f000 faeb 	bl	800eb96 <SCSI_SenseCode>
    return -1;
 800e5c0:	f04f 33ff 	mov.w	r3, #4294967295
 800e5c4:	e04f      	b.n	800e666 <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	3301      	adds	r3, #1
 800e5ca:	781b      	ldrb	r3, [r3, #0]
 800e5cc:	f003 0301 	and.w	r3, r3, #1
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d020      	beq.n	800e616 <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	3302      	adds	r3, #2
 800e5d8:	781b      	ldrb	r3, [r3, #0]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d105      	bne.n	800e5ea <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800e5de:	2206      	movs	r2, #6
 800e5e0:	4923      	ldr	r1, [pc, #140]	; (800e670 <SCSI_Inquiry+0xf4>)
 800e5e2:	69b8      	ldr	r0, [r7, #24]
 800e5e4:	f001 f844 	bl	800f670 <SCSI_UpdateBotData>
 800e5e8:	e03c      	b.n	800e664 <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	3302      	adds	r3, #2
 800e5ee:	781b      	ldrb	r3, [r3, #0]
 800e5f0:	2b80      	cmp	r3, #128	; 0x80
 800e5f2:	d105      	bne.n	800e600 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800e5f4:	2208      	movs	r2, #8
 800e5f6:	491f      	ldr	r1, [pc, #124]	; (800e674 <SCSI_Inquiry+0xf8>)
 800e5f8:	69b8      	ldr	r0, [r7, #24]
 800e5fa:	f001 f839 	bl	800f670 <SCSI_UpdateBotData>
 800e5fe:	e031      	b.n	800e664 <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800e600:	69bb      	ldr	r3, [r7, #24]
 800e602:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e606:	2324      	movs	r3, #36	; 0x24
 800e608:	2205      	movs	r2, #5
 800e60a:	68f8      	ldr	r0, [r7, #12]
 800e60c:	f000 fac3 	bl	800eb96 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800e610:	f04f 33ff 	mov.w	r3, #4294967295
 800e614:	e027      	b.n	800e666 <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e61c:	68fa      	ldr	r2, [r7, #12]
 800e61e:	33b0      	adds	r3, #176	; 0xb0
 800e620:	009b      	lsls	r3, r3, #2
 800e622:	4413      	add	r3, r2
 800e624:	685b      	ldr	r3, [r3, #4]
 800e626:	69d9      	ldr	r1, [r3, #28]
 800e628:	7afa      	ldrb	r2, [r7, #11]
 800e62a:	4613      	mov	r3, r2
 800e62c:	00db      	lsls	r3, r3, #3
 800e62e:	4413      	add	r3, r2
 800e630:	009b      	lsls	r3, r3, #2
 800e632:	440b      	add	r3, r1
 800e634:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	3304      	adds	r3, #4
 800e63a:	781b      	ldrb	r3, [r3, #0]
 800e63c:	b29b      	uxth	r3, r3
 800e63e:	3305      	adds	r3, #5
 800e640:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	3304      	adds	r3, #4
 800e646:	781b      	ldrb	r3, [r3, #0]
 800e648:	b29b      	uxth	r3, r3
 800e64a:	8bfa      	ldrh	r2, [r7, #30]
 800e64c:	429a      	cmp	r2, r3
 800e64e:	d303      	bcc.n	800e658 <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	3304      	adds	r3, #4
 800e654:	781b      	ldrb	r3, [r3, #0]
 800e656:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800e658:	8bfb      	ldrh	r3, [r7, #30]
 800e65a:	461a      	mov	r2, r3
 800e65c:	6979      	ldr	r1, [r7, #20]
 800e65e:	69b8      	ldr	r0, [r7, #24]
 800e660:	f001 f806 	bl	800f670 <SCSI_UpdateBotData>
  }

  return 0;
 800e664:	2300      	movs	r3, #0
}
 800e666:	4618      	mov	r0, r3
 800e668:	3720      	adds	r7, #32
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd80      	pop	{r7, pc}
 800e66e:	bf00      	nop
 800e670:	20000078 	.word	0x20000078
 800e674:	20000080 	.word	0x20000080

0800e678 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b086      	sub	sp, #24
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	60f8      	str	r0, [r7, #12]
 800e680:	460b      	mov	r3, r1
 800e682:	607a      	str	r2, [r7, #4]
 800e684:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	32b0      	adds	r2, #176	; 0xb0
 800e690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e694:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800e696:	697b      	ldr	r3, [r7, #20]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d102      	bne.n	800e6a2 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 800e69c:	f04f 33ff 	mov.w	r3, #4294967295
 800e6a0:	e064      	b.n	800e76c <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e6a8:	68fa      	ldr	r2, [r7, #12]
 800e6aa:	33b0      	adds	r3, #176	; 0xb0
 800e6ac:	009b      	lsls	r3, r3, #2
 800e6ae:	4413      	add	r3, r2
 800e6b0:	685b      	ldr	r3, [r3, #4]
 800e6b2:	685b      	ldr	r3, [r3, #4]
 800e6b4:	697a      	ldr	r2, [r7, #20]
 800e6b6:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800e6ba:	697a      	ldr	r2, [r7, #20]
 800e6bc:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800e6c0:	7af8      	ldrb	r0, [r7, #11]
 800e6c2:	4798      	blx	r3
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800e6c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d104      	bne.n	800e6da <SCSI_ReadCapacity10+0x62>
 800e6d0:	697b      	ldr	r3, [r7, #20]
 800e6d2:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800e6d6:	2b02      	cmp	r3, #2
 800e6d8:	d108      	bne.n	800e6ec <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e6da:	7af9      	ldrb	r1, [r7, #11]
 800e6dc:	233a      	movs	r3, #58	; 0x3a
 800e6de:	2202      	movs	r2, #2
 800e6e0:	68f8      	ldr	r0, [r7, #12]
 800e6e2:	f000 fa58 	bl	800eb96 <SCSI_SenseCode>
    return -1;
 800e6e6:	f04f 33ff 	mov.w	r3, #4294967295
 800e6ea:	e03f      	b.n	800e76c <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800e6ec:	697b      	ldr	r3, [r7, #20]
 800e6ee:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e6f2:	3b01      	subs	r3, #1
 800e6f4:	0e1b      	lsrs	r3, r3, #24
 800e6f6:	b2da      	uxtb	r2, r3
 800e6f8:	697b      	ldr	r3, [r7, #20]
 800e6fa:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800e6fc:	697b      	ldr	r3, [r7, #20]
 800e6fe:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e702:	3b01      	subs	r3, #1
 800e704:	0c1b      	lsrs	r3, r3, #16
 800e706:	b2da      	uxtb	r2, r3
 800e708:	697b      	ldr	r3, [r7, #20]
 800e70a:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e712:	3b01      	subs	r3, #1
 800e714:	0a1b      	lsrs	r3, r3, #8
 800e716:	b2da      	uxtb	r2, r3
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e722:	b2db      	uxtb	r3, r3
 800e724:	3b01      	subs	r3, #1
 800e726:	b2da      	uxtb	r2, r3
 800e728:	697b      	ldr	r3, [r7, #20]
 800e72a:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800e72c:	697b      	ldr	r3, [r7, #20]
 800e72e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e732:	161b      	asrs	r3, r3, #24
 800e734:	b2da      	uxtb	r2, r3
 800e736:	697b      	ldr	r3, [r7, #20]
 800e738:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800e73a:	697b      	ldr	r3, [r7, #20]
 800e73c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e740:	141b      	asrs	r3, r3, #16
 800e742:	b2da      	uxtb	r2, r3
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800e748:	697b      	ldr	r3, [r7, #20]
 800e74a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e74e:	0a1b      	lsrs	r3, r3, #8
 800e750:	b29b      	uxth	r3, r3
 800e752:	b2da      	uxtb	r2, r3
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e75e:	b2da      	uxtb	r2, r3
 800e760:	697b      	ldr	r3, [r7, #20]
 800e762:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	2208      	movs	r2, #8
 800e768:	60da      	str	r2, [r3, #12]

  return 0;
 800e76a:	2300      	movs	r3, #0

}
 800e76c:	4618      	mov	r0, r3
 800e76e:	3718      	adds	r7, #24
 800e770:	46bd      	mov	sp, r7
 800e772:	bd80      	pop	{r7, pc}

0800e774 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b088      	sub	sp, #32
 800e778:	af00      	add	r7, sp, #0
 800e77a:	60f8      	str	r0, [r7, #12]
 800e77c:	460b      	mov	r3, r1
 800e77e:	607a      	str	r2, [r7, #4]
 800e780:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	32b0      	adds	r2, #176	; 0xb0
 800e78c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e790:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800e792:	69bb      	ldr	r3, [r7, #24]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d102      	bne.n	800e79e <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 800e798:	f04f 33ff 	mov.w	r3, #4294967295
 800e79c:	e099      	b.n	800e8d2 <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e7a4:	68fa      	ldr	r2, [r7, #12]
 800e7a6:	33b0      	adds	r3, #176	; 0xb0
 800e7a8:	009b      	lsls	r3, r3, #2
 800e7aa:	4413      	add	r3, r2
 800e7ac:	685b      	ldr	r3, [r3, #4]
 800e7ae:	685b      	ldr	r3, [r3, #4]
 800e7b0:	69ba      	ldr	r2, [r7, #24]
 800e7b2:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800e7b6:	69ba      	ldr	r2, [r7, #24]
 800e7b8:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800e7bc:	7af8      	ldrb	r0, [r7, #11]
 800e7be:	4798      	blx	r3
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800e7c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d104      	bne.n	800e7d6 <SCSI_ReadCapacity16+0x62>
 800e7cc:	69bb      	ldr	r3, [r7, #24]
 800e7ce:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800e7d2:	2b02      	cmp	r3, #2
 800e7d4:	d108      	bne.n	800e7e8 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e7d6:	7af9      	ldrb	r1, [r7, #11]
 800e7d8:	233a      	movs	r3, #58	; 0x3a
 800e7da:	2202      	movs	r2, #2
 800e7dc:	68f8      	ldr	r0, [r7, #12]
 800e7de:	f000 f9da 	bl	800eb96 <SCSI_SenseCode>
    return -1;
 800e7e2:	f04f 33ff 	mov.w	r3, #4294967295
 800e7e6:	e074      	b.n	800e8d2 <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	330a      	adds	r3, #10
 800e7ec:	781b      	ldrb	r3, [r3, #0]
 800e7ee:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	330b      	adds	r3, #11
 800e7f4:	781b      	ldrb	r3, [r3, #0]
 800e7f6:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e7f8:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	330c      	adds	r3, #12
 800e7fe:	781b      	ldrb	r3, [r3, #0]
 800e800:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800e802:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800e804:	687a      	ldr	r2, [r7, #4]
 800e806:	320d      	adds	r2, #13
 800e808:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800e80a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e80c:	69bb      	ldr	r3, [r7, #24]
 800e80e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800e810:	2300      	movs	r3, #0
 800e812:	77fb      	strb	r3, [r7, #31]
 800e814:	e007      	b.n	800e826 <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 800e816:	7ffb      	ldrb	r3, [r7, #31]
 800e818:	69ba      	ldr	r2, [r7, #24]
 800e81a:	4413      	add	r3, r2
 800e81c:	2200      	movs	r2, #0
 800e81e:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800e820:	7ffb      	ldrb	r3, [r7, #31]
 800e822:	3301      	adds	r3, #1
 800e824:	77fb      	strb	r3, [r7, #31]
 800e826:	7ffa      	ldrb	r2, [r7, #31]
 800e828:	69bb      	ldr	r3, [r7, #24]
 800e82a:	68db      	ldr	r3, [r3, #12]
 800e82c:	429a      	cmp	r2, r3
 800e82e:	d3f2      	bcc.n	800e816 <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800e830:	69bb      	ldr	r3, [r7, #24]
 800e832:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e836:	3b01      	subs	r3, #1
 800e838:	0e1b      	lsrs	r3, r3, #24
 800e83a:	b2da      	uxtb	r2, r3
 800e83c:	69bb      	ldr	r3, [r7, #24]
 800e83e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800e840:	69bb      	ldr	r3, [r7, #24]
 800e842:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e846:	3b01      	subs	r3, #1
 800e848:	0c1b      	lsrs	r3, r3, #16
 800e84a:	b2da      	uxtb	r2, r3
 800e84c:	69bb      	ldr	r3, [r7, #24]
 800e84e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800e850:	69bb      	ldr	r3, [r7, #24]
 800e852:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e856:	3b01      	subs	r3, #1
 800e858:	0a1b      	lsrs	r3, r3, #8
 800e85a:	b2da      	uxtb	r2, r3
 800e85c:	69bb      	ldr	r3, [r7, #24]
 800e85e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800e860:	69bb      	ldr	r3, [r7, #24]
 800e862:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e866:	b2db      	uxtb	r3, r3
 800e868:	3b01      	subs	r3, #1
 800e86a:	b2da      	uxtb	r2, r3
 800e86c:	69bb      	ldr	r3, [r7, #24]
 800e86e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800e870:	69bb      	ldr	r3, [r7, #24]
 800e872:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e876:	161b      	asrs	r3, r3, #24
 800e878:	b2da      	uxtb	r2, r3
 800e87a:	69bb      	ldr	r3, [r7, #24]
 800e87c:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800e87e:	69bb      	ldr	r3, [r7, #24]
 800e880:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e884:	141b      	asrs	r3, r3, #16
 800e886:	b2da      	uxtb	r2, r3
 800e888:	69bb      	ldr	r3, [r7, #24]
 800e88a:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800e88c:	69bb      	ldr	r3, [r7, #24]
 800e88e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e892:	0a1b      	lsrs	r3, r3, #8
 800e894:	b29b      	uxth	r3, r3
 800e896:	b2da      	uxtb	r2, r3
 800e898:	69bb      	ldr	r3, [r7, #24]
 800e89a:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800e89c:	69bb      	ldr	r3, [r7, #24]
 800e89e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e8a2:	b2da      	uxtb	r2, r3
 800e8a4:	69bb      	ldr	r3, [r7, #24]
 800e8a6:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	330a      	adds	r3, #10
 800e8ac:	781b      	ldrb	r3, [r3, #0]
 800e8ae:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	330b      	adds	r3, #11
 800e8b4:	781b      	ldrb	r3, [r3, #0]
 800e8b6:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e8b8:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	330c      	adds	r3, #12
 800e8be:	781b      	ldrb	r3, [r3, #0]
 800e8c0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800e8c2:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800e8c4:	687a      	ldr	r2, [r7, #4]
 800e8c6:	320d      	adds	r2, #13
 800e8c8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800e8ca:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e8cc:	69bb      	ldr	r3, [r7, #24]
 800e8ce:	60da      	str	r2, [r3, #12]

  return 0;
 800e8d0:	2300      	movs	r3, #0
}
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	3720      	adds	r7, #32
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd80      	pop	{r7, pc}

0800e8da <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e8da:	b580      	push	{r7, lr}
 800e8dc:	b088      	sub	sp, #32
 800e8de:	af00      	add	r7, sp, #0
 800e8e0:	60f8      	str	r0, [r7, #12]
 800e8e2:	460b      	mov	r3, r1
 800e8e4:	607a      	str	r2, [r7, #4]
 800e8e6:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	32b0      	adds	r2, #176	; 0xb0
 800e8f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8f6:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800e8f8:	69bb      	ldr	r3, [r7, #24]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d102      	bne.n	800e904 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 800e8fe:	f04f 33ff 	mov.w	r3, #4294967295
 800e902:	e061      	b.n	800e9c8 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e90a:	68fa      	ldr	r2, [r7, #12]
 800e90c:	33b0      	adds	r3, #176	; 0xb0
 800e90e:	009b      	lsls	r3, r3, #2
 800e910:	4413      	add	r3, r2
 800e912:	685b      	ldr	r3, [r3, #4]
 800e914:	685b      	ldr	r3, [r3, #4]
 800e916:	f107 0214 	add.w	r2, r7, #20
 800e91a:	f107 0110 	add.w	r1, r7, #16
 800e91e:	7af8      	ldrb	r0, [r7, #11]
 800e920:	4798      	blx	r3
 800e922:	4603      	mov	r3, r0
 800e924:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800e926:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d104      	bne.n	800e938 <SCSI_ReadFormatCapacity+0x5e>
 800e92e:	69bb      	ldr	r3, [r7, #24]
 800e930:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800e934:	2b02      	cmp	r3, #2
 800e936:	d108      	bne.n	800e94a <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e938:	7af9      	ldrb	r1, [r7, #11]
 800e93a:	233a      	movs	r3, #58	; 0x3a
 800e93c:	2202      	movs	r2, #2
 800e93e:	68f8      	ldr	r0, [r7, #12]
 800e940:	f000 f929 	bl	800eb96 <SCSI_SenseCode>
    return -1;
 800e944:	f04f 33ff 	mov.w	r3, #4294967295
 800e948:	e03e      	b.n	800e9c8 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 800e94a:	2300      	movs	r3, #0
 800e94c:	83fb      	strh	r3, [r7, #30]
 800e94e:	e007      	b.n	800e960 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 800e950:	8bfb      	ldrh	r3, [r7, #30]
 800e952:	69ba      	ldr	r2, [r7, #24]
 800e954:	4413      	add	r3, r2
 800e956:	2200      	movs	r2, #0
 800e958:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800e95a:	8bfb      	ldrh	r3, [r7, #30]
 800e95c:	3301      	adds	r3, #1
 800e95e:	83fb      	strh	r3, [r7, #30]
 800e960:	8bfb      	ldrh	r3, [r7, #30]
 800e962:	2b0b      	cmp	r3, #11
 800e964:	d9f4      	bls.n	800e950 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 800e966:	69bb      	ldr	r3, [r7, #24]
 800e968:	2208      	movs	r2, #8
 800e96a:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800e96c:	693b      	ldr	r3, [r7, #16]
 800e96e:	3b01      	subs	r3, #1
 800e970:	0e1b      	lsrs	r3, r3, #24
 800e972:	b2da      	uxtb	r2, r3
 800e974:	69bb      	ldr	r3, [r7, #24]
 800e976:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800e978:	693b      	ldr	r3, [r7, #16]
 800e97a:	3b01      	subs	r3, #1
 800e97c:	0c1b      	lsrs	r3, r3, #16
 800e97e:	b2da      	uxtb	r2, r3
 800e980:	69bb      	ldr	r3, [r7, #24]
 800e982:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800e984:	693b      	ldr	r3, [r7, #16]
 800e986:	3b01      	subs	r3, #1
 800e988:	0a1b      	lsrs	r3, r3, #8
 800e98a:	b2da      	uxtb	r2, r3
 800e98c:	69bb      	ldr	r3, [r7, #24]
 800e98e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800e990:	693b      	ldr	r3, [r7, #16]
 800e992:	b2db      	uxtb	r3, r3
 800e994:	3b01      	subs	r3, #1
 800e996:	b2da      	uxtb	r2, r3
 800e998:	69bb      	ldr	r3, [r7, #24]
 800e99a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800e99c:	69bb      	ldr	r3, [r7, #24]
 800e99e:	2202      	movs	r2, #2
 800e9a0:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800e9a2:	8abb      	ldrh	r3, [r7, #20]
 800e9a4:	141b      	asrs	r3, r3, #16
 800e9a6:	b2da      	uxtb	r2, r3
 800e9a8:	69bb      	ldr	r3, [r7, #24]
 800e9aa:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800e9ac:	8abb      	ldrh	r3, [r7, #20]
 800e9ae:	0a1b      	lsrs	r3, r3, #8
 800e9b0:	b29b      	uxth	r3, r3
 800e9b2:	b2da      	uxtb	r2, r3
 800e9b4:	69bb      	ldr	r3, [r7, #24]
 800e9b6:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800e9b8:	8abb      	ldrh	r3, [r7, #20]
 800e9ba:	b2da      	uxtb	r2, r3
 800e9bc:	69bb      	ldr	r3, [r7, #24]
 800e9be:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800e9c0:	69bb      	ldr	r3, [r7, #24]
 800e9c2:	220c      	movs	r2, #12
 800e9c4:	60da      	str	r2, [r3, #12]

  return 0;
 800e9c6:	2300      	movs	r3, #0
}
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	3720      	adds	r7, #32
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}

0800e9d0 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b086      	sub	sp, #24
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	60f8      	str	r0, [r7, #12]
 800e9d8:	460b      	mov	r3, r1
 800e9da:	607a      	str	r2, [r7, #4]
 800e9dc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	32b0      	adds	r2, #176	; 0xb0
 800e9e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9ec:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800e9ee:	2317      	movs	r3, #23
 800e9f0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800e9f2:	693b      	ldr	r3, [r7, #16]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d102      	bne.n	800e9fe <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800e9f8:	f04f 33ff 	mov.w	r3, #4294967295
 800e9fc:	e011      	b.n	800ea22 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	3304      	adds	r3, #4
 800ea02:	781b      	ldrb	r3, [r3, #0]
 800ea04:	b29b      	uxth	r3, r3
 800ea06:	8afa      	ldrh	r2, [r7, #22]
 800ea08:	429a      	cmp	r2, r3
 800ea0a:	d303      	bcc.n	800ea14 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	3304      	adds	r3, #4
 800ea10:	781b      	ldrb	r3, [r3, #0]
 800ea12:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800ea14:	8afb      	ldrh	r3, [r7, #22]
 800ea16:	461a      	mov	r2, r3
 800ea18:	4904      	ldr	r1, [pc, #16]	; (800ea2c <SCSI_ModeSense6+0x5c>)
 800ea1a:	6938      	ldr	r0, [r7, #16]
 800ea1c:	f000 fe28 	bl	800f670 <SCSI_UpdateBotData>

  return 0;
 800ea20:	2300      	movs	r3, #0
}
 800ea22:	4618      	mov	r0, r3
 800ea24:	3718      	adds	r7, #24
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}
 800ea2a:	bf00      	nop
 800ea2c:	20000088 	.word	0x20000088

0800ea30 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b086      	sub	sp, #24
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	60f8      	str	r0, [r7, #12]
 800ea38:	460b      	mov	r3, r1
 800ea3a:	607a      	str	r2, [r7, #4]
 800ea3c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	32b0      	adds	r2, #176	; 0xb0
 800ea48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea4c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800ea4e:	231b      	movs	r3, #27
 800ea50:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800ea52:	693b      	ldr	r3, [r7, #16]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d102      	bne.n	800ea5e <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800ea58:	f04f 33ff 	mov.w	r3, #4294967295
 800ea5c:	e011      	b.n	800ea82 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	3308      	adds	r3, #8
 800ea62:	781b      	ldrb	r3, [r3, #0]
 800ea64:	b29b      	uxth	r3, r3
 800ea66:	8afa      	ldrh	r2, [r7, #22]
 800ea68:	429a      	cmp	r2, r3
 800ea6a:	d303      	bcc.n	800ea74 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	3308      	adds	r3, #8
 800ea70:	781b      	ldrb	r3, [r3, #0]
 800ea72:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800ea74:	8afb      	ldrh	r3, [r7, #22]
 800ea76:	461a      	mov	r2, r3
 800ea78:	4904      	ldr	r1, [pc, #16]	; (800ea8c <SCSI_ModeSense10+0x5c>)
 800ea7a:	6938      	ldr	r0, [r7, #16]
 800ea7c:	f000 fdf8 	bl	800f670 <SCSI_UpdateBotData>

  return 0;
 800ea80:	2300      	movs	r3, #0
}
 800ea82:	4618      	mov	r0, r3
 800ea84:	3718      	adds	r7, #24
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}
 800ea8a:	bf00      	nop
 800ea8c:	200000a0 	.word	0x200000a0

0800ea90 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b086      	sub	sp, #24
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	60f8      	str	r0, [r7, #12]
 800ea98:	460b      	mov	r3, r1
 800ea9a:	607a      	str	r2, [r7, #4]
 800ea9c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	32b0      	adds	r2, #176	; 0xb0
 800eaa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eaac:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800eaae:	693b      	ldr	r3, [r7, #16]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d102      	bne.n	800eaba <SCSI_RequestSense+0x2a>
  {
    return -1;
 800eab4:	f04f 33ff 	mov.w	r3, #4294967295
 800eab8:	e069      	b.n	800eb8e <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800eaba:	693b      	ldr	r3, [r7, #16]
 800eabc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d10a      	bne.n	800eada <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800eac4:	693b      	ldr	r3, [r7, #16]
 800eac6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800eaca:	2320      	movs	r3, #32
 800eacc:	2205      	movs	r2, #5
 800eace:	68f8      	ldr	r0, [r7, #12]
 800ead0:	f000 f861 	bl	800eb96 <SCSI_SenseCode>
    return -1;
 800ead4:	f04f 33ff 	mov.w	r3, #4294967295
 800ead8:	e059      	b.n	800eb8e <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800eada:	2300      	movs	r3, #0
 800eadc:	75fb      	strb	r3, [r7, #23]
 800eade:	e007      	b.n	800eaf0 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 800eae0:	7dfb      	ldrb	r3, [r7, #23]
 800eae2:	693a      	ldr	r2, [r7, #16]
 800eae4:	4413      	add	r3, r2
 800eae6:	2200      	movs	r2, #0
 800eae8:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800eaea:	7dfb      	ldrb	r3, [r7, #23]
 800eaec:	3301      	adds	r3, #1
 800eaee:	75fb      	strb	r3, [r7, #23]
 800eaf0:	7dfb      	ldrb	r3, [r7, #23]
 800eaf2:	2b11      	cmp	r3, #17
 800eaf4:	d9f4      	bls.n	800eae0 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 800eaf6:	693b      	ldr	r3, [r7, #16]
 800eaf8:	2270      	movs	r2, #112	; 0x70
 800eafa:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800eafc:	693b      	ldr	r3, [r7, #16]
 800eafe:	220c      	movs	r2, #12
 800eb00:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800eb02:	693b      	ldr	r3, [r7, #16]
 800eb04:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800eb08:	693b      	ldr	r3, [r7, #16]
 800eb0a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800eb0e:	429a      	cmp	r2, r3
 800eb10:	d02e      	beq.n	800eb70 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800eb12:	693b      	ldr	r3, [r7, #16]
 800eb14:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800eb18:	461a      	mov	r2, r3
 800eb1a:	693b      	ldr	r3, [r7, #16]
 800eb1c:	3248      	adds	r2, #72	; 0x48
 800eb1e:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800eb22:	693b      	ldr	r3, [r7, #16]
 800eb24:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800eb26:	693b      	ldr	r3, [r7, #16]
 800eb28:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800eb2c:	693a      	ldr	r2, [r7, #16]
 800eb2e:	3348      	adds	r3, #72	; 0x48
 800eb30:	00db      	lsls	r3, r3, #3
 800eb32:	4413      	add	r3, r2
 800eb34:	791a      	ldrb	r2, [r3, #4]
 800eb36:	693b      	ldr	r3, [r7, #16]
 800eb38:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800eb3a:	693b      	ldr	r3, [r7, #16]
 800eb3c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800eb40:	693a      	ldr	r2, [r7, #16]
 800eb42:	3348      	adds	r3, #72	; 0x48
 800eb44:	00db      	lsls	r3, r3, #3
 800eb46:	4413      	add	r3, r2
 800eb48:	795a      	ldrb	r2, [r3, #5]
 800eb4a:	693b      	ldr	r3, [r7, #16]
 800eb4c:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800eb4e:	693b      	ldr	r3, [r7, #16]
 800eb50:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800eb54:	3301      	adds	r3, #1
 800eb56:	b2da      	uxtb	r2, r3
 800eb58:	693b      	ldr	r3, [r7, #16]
 800eb5a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800eb5e:	693b      	ldr	r3, [r7, #16]
 800eb60:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800eb64:	2b04      	cmp	r3, #4
 800eb66:	d103      	bne.n	800eb70 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 800eb68:	693b      	ldr	r3, [r7, #16]
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800eb70:	693b      	ldr	r3, [r7, #16]
 800eb72:	2212      	movs	r2, #18
 800eb74:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	3304      	adds	r3, #4
 800eb7a:	781b      	ldrb	r3, [r3, #0]
 800eb7c:	2b12      	cmp	r3, #18
 800eb7e:	d805      	bhi.n	800eb8c <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	3304      	adds	r3, #4
 800eb84:	781b      	ldrb	r3, [r3, #0]
 800eb86:	461a      	mov	r2, r3
 800eb88:	693b      	ldr	r3, [r7, #16]
 800eb8a:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800eb8c:	2300      	movs	r3, #0
}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	3718      	adds	r7, #24
 800eb92:	46bd      	mov	sp, r7
 800eb94:	bd80      	pop	{r7, pc}

0800eb96 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800eb96:	b480      	push	{r7}
 800eb98:	b085      	sub	sp, #20
 800eb9a:	af00      	add	r7, sp, #0
 800eb9c:	6078      	str	r0, [r7, #4]
 800eb9e:	4608      	mov	r0, r1
 800eba0:	4611      	mov	r1, r2
 800eba2:	461a      	mov	r2, r3
 800eba4:	4603      	mov	r3, r0
 800eba6:	70fb      	strb	r3, [r7, #3]
 800eba8:	460b      	mov	r3, r1
 800ebaa:	70bb      	strb	r3, [r7, #2]
 800ebac:	4613      	mov	r3, r2
 800ebae:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	32b0      	adds	r2, #176	; 0xb0
 800ebba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebbe:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d02c      	beq.n	800ec20 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800ebcc:	461a      	mov	r2, r3
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	3248      	adds	r2, #72	; 0x48
 800ebd2:	78b9      	ldrb	r1, [r7, #2]
 800ebd4:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800ebde:	68fa      	ldr	r2, [r7, #12]
 800ebe0:	3348      	adds	r3, #72	; 0x48
 800ebe2:	00db      	lsls	r3, r3, #3
 800ebe4:	4413      	add	r3, r2
 800ebe6:	787a      	ldrb	r2, [r7, #1]
 800ebe8:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800ebf0:	68fa      	ldr	r2, [r7, #12]
 800ebf2:	3348      	adds	r3, #72	; 0x48
 800ebf4:	00db      	lsls	r3, r3, #3
 800ebf6:	4413      	add	r3, r2
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800ec02:	3301      	adds	r3, #1
 800ec04:	b2da      	uxtb	r2, r3
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800ec12:	2b04      	cmp	r3, #4
 800ec14:	d105      	bne.n	800ec22 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	2200      	movs	r2, #0
 800ec1a:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 800ec1e:	e000      	b.n	800ec22 <SCSI_SenseCode+0x8c>
    return;
 800ec20:	bf00      	nop
  }
}
 800ec22:	3714      	adds	r7, #20
 800ec24:	46bd      	mov	sp, r7
 800ec26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2a:	4770      	bx	lr

0800ec2c <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b086      	sub	sp, #24
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	60f8      	str	r0, [r7, #12]
 800ec34:	460b      	mov	r3, r1
 800ec36:	607a      	str	r2, [r7, #4]
 800ec38:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	32b0      	adds	r2, #176	; 0xb0
 800ec44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec48:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d102      	bne.n	800ec56 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800ec50:	f04f 33ff 	mov.w	r3, #4294967295
 800ec54:	e03b      	b.n	800ecce <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800ec5c:	2b01      	cmp	r3, #1
 800ec5e:	d10f      	bne.n	800ec80 <SCSI_StartStopUnit+0x54>
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	3304      	adds	r3, #4
 800ec64:	781b      	ldrb	r3, [r3, #0]
 800ec66:	f003 0303 	and.w	r3, r3, #3
 800ec6a:	2b02      	cmp	r3, #2
 800ec6c:	d108      	bne.n	800ec80 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800ec6e:	7af9      	ldrb	r1, [r7, #11]
 800ec70:	2324      	movs	r3, #36	; 0x24
 800ec72:	2205      	movs	r2, #5
 800ec74:	68f8      	ldr	r0, [r7, #12]
 800ec76:	f7ff ff8e 	bl	800eb96 <SCSI_SenseCode>

    return -1;
 800ec7a:	f04f 33ff 	mov.w	r3, #4294967295
 800ec7e:	e026      	b.n	800ecce <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	3304      	adds	r3, #4
 800ec84:	781b      	ldrb	r3, [r3, #0]
 800ec86:	f003 0303 	and.w	r3, r3, #3
 800ec8a:	2b01      	cmp	r3, #1
 800ec8c:	d104      	bne.n	800ec98 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ec8e:	697b      	ldr	r3, [r7, #20]
 800ec90:	2200      	movs	r2, #0
 800ec92:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800ec96:	e016      	b.n	800ecc6 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	3304      	adds	r3, #4
 800ec9c:	781b      	ldrb	r3, [r3, #0]
 800ec9e:	f003 0303 	and.w	r3, r3, #3
 800eca2:	2b02      	cmp	r3, #2
 800eca4:	d104      	bne.n	800ecb0 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800eca6:	697b      	ldr	r3, [r7, #20]
 800eca8:	2202      	movs	r2, #2
 800ecaa:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800ecae:	e00a      	b.n	800ecc6 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	3304      	adds	r3, #4
 800ecb4:	781b      	ldrb	r3, [r3, #0]
 800ecb6:	f003 0303 	and.w	r3, r3, #3
 800ecba:	2b03      	cmp	r3, #3
 800ecbc:	d103      	bne.n	800ecc6 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ecbe:	697b      	ldr	r3, [r7, #20]
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800ecc6:	697b      	ldr	r3, [r7, #20]
 800ecc8:	2200      	movs	r2, #0
 800ecca:	60da      	str	r2, [r3, #12]

  return 0;
 800eccc:	2300      	movs	r3, #0
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3718      	adds	r7, #24
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}

0800ecd6 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ecd6:	b480      	push	{r7}
 800ecd8:	b087      	sub	sp, #28
 800ecda:	af00      	add	r7, sp, #0
 800ecdc:	60f8      	str	r0, [r7, #12]
 800ecde:	460b      	mov	r3, r1
 800ece0:	607a      	str	r2, [r7, #4]
 800ece2:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	32b0      	adds	r2, #176	; 0xb0
 800ecee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecf2:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ecf4:	697b      	ldr	r3, [r7, #20]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d102      	bne.n	800ed00 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800ecfa:	f04f 33ff 	mov.w	r3, #4294967295
 800ecfe:	e011      	b.n	800ed24 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	3304      	adds	r3, #4
 800ed04:	781b      	ldrb	r3, [r3, #0]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d104      	bne.n	800ed14 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ed0a:	697b      	ldr	r3, [r7, #20]
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800ed12:	e003      	b.n	800ed1c <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800ed14:	697b      	ldr	r3, [r7, #20]
 800ed16:	2201      	movs	r2, #1
 800ed18:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	2200      	movs	r2, #0
 800ed20:	60da      	str	r2, [r3, #12]

  return 0;
 800ed22:	2300      	movs	r3, #0
}
 800ed24:	4618      	mov	r0, r3
 800ed26:	371c      	adds	r7, #28
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2e:	4770      	bx	lr

0800ed30 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b086      	sub	sp, #24
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	60f8      	str	r0, [r7, #12]
 800ed38:	460b      	mov	r3, r1
 800ed3a:	607a      	str	r2, [r7, #4]
 800ed3c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	32b0      	adds	r2, #176	; 0xb0
 800ed48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed4c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ed4e:	697b      	ldr	r3, [r7, #20]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d102      	bne.n	800ed5a <SCSI_Read10+0x2a>
  {
    return -1;
 800ed54:	f04f 33ff 	mov.w	r3, #4294967295
 800ed58:	e090      	b.n	800ee7c <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	7a1b      	ldrb	r3, [r3, #8]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	f040 8082 	bne.w	800ee68 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800ed64:	697b      	ldr	r3, [r7, #20]
 800ed66:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800ed6a:	b25b      	sxtb	r3, r3
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	db0a      	blt.n	800ed86 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ed70:	697b      	ldr	r3, [r7, #20]
 800ed72:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ed76:	2320      	movs	r3, #32
 800ed78:	2205      	movs	r2, #5
 800ed7a:	68f8      	ldr	r0, [r7, #12]
 800ed7c:	f7ff ff0b 	bl	800eb96 <SCSI_SenseCode>
      return -1;
 800ed80:	f04f 33ff 	mov.w	r3, #4294967295
 800ed84:	e07a      	b.n	800ee7c <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800ed86:	697b      	ldr	r3, [r7, #20]
 800ed88:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800ed8c:	2b02      	cmp	r3, #2
 800ed8e:	d108      	bne.n	800eda2 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ed90:	7af9      	ldrb	r1, [r7, #11]
 800ed92:	233a      	movs	r3, #58	; 0x3a
 800ed94:	2202      	movs	r2, #2
 800ed96:	68f8      	ldr	r0, [r7, #12]
 800ed98:	f7ff fefd 	bl	800eb96 <SCSI_SenseCode>

      return -1;
 800ed9c:	f04f 33ff 	mov.w	r3, #4294967295
 800eda0:	e06c      	b.n	800ee7c <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800eda8:	68fa      	ldr	r2, [r7, #12]
 800edaa:	33b0      	adds	r3, #176	; 0xb0
 800edac:	009b      	lsls	r3, r3, #2
 800edae:	4413      	add	r3, r2
 800edb0:	685b      	ldr	r3, [r3, #4]
 800edb2:	689b      	ldr	r3, [r3, #8]
 800edb4:	7afa      	ldrb	r2, [r7, #11]
 800edb6:	4610      	mov	r0, r2
 800edb8:	4798      	blx	r3
 800edba:	4603      	mov	r3, r0
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d008      	beq.n	800edd2 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800edc0:	7af9      	ldrb	r1, [r7, #11]
 800edc2:	233a      	movs	r3, #58	; 0x3a
 800edc4:	2202      	movs	r2, #2
 800edc6:	68f8      	ldr	r0, [r7, #12]
 800edc8:	f7ff fee5 	bl	800eb96 <SCSI_SenseCode>
      return -1;
 800edcc:	f04f 33ff 	mov.w	r3, #4294967295
 800edd0:	e054      	b.n	800ee7c <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	3302      	adds	r3, #2
 800edd6:	781b      	ldrb	r3, [r3, #0]
 800edd8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	3303      	adds	r3, #3
 800edde:	781b      	ldrb	r3, [r3, #0]
 800ede0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ede2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	3304      	adds	r3, #4
 800ede8:	781b      	ldrb	r3, [r3, #0]
 800edea:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800edec:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800edee:	687a      	ldr	r2, [r7, #4]
 800edf0:	3205      	adds	r2, #5
 800edf2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800edf4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800edf6:	697b      	ldr	r3, [r7, #20]
 800edf8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	3307      	adds	r3, #7
 800ee00:	781b      	ldrb	r3, [r3, #0]
 800ee02:	021b      	lsls	r3, r3, #8
 800ee04:	687a      	ldr	r2, [r7, #4]
 800ee06:	3208      	adds	r2, #8
 800ee08:	7812      	ldrb	r2, [r2, #0]
 800ee0a:	431a      	orrs	r2, r3
 800ee0c:	697b      	ldr	r3, [r7, #20]
 800ee0e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ee12:	697b      	ldr	r3, [r7, #20]
 800ee14:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ee1e:	7af9      	ldrb	r1, [r7, #11]
 800ee20:	68f8      	ldr	r0, [r7, #12]
 800ee22:	f000 fadc 	bl	800f3de <SCSI_CheckAddressRange>
 800ee26:	4603      	mov	r3, r0
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	da02      	bge.n	800ee32 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800ee2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ee30:	e024      	b.n	800ee7c <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800ee32:	697b      	ldr	r3, [r7, #20]
 800ee34:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800ee38:	697b      	ldr	r3, [r7, #20]
 800ee3a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ee3e:	6979      	ldr	r1, [r7, #20]
 800ee40:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800ee44:	fb01 f303 	mul.w	r3, r1, r3
 800ee48:	429a      	cmp	r2, r3
 800ee4a:	d00a      	beq.n	800ee62 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ee4c:	697b      	ldr	r3, [r7, #20]
 800ee4e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ee52:	2320      	movs	r3, #32
 800ee54:	2205      	movs	r2, #5
 800ee56:	68f8      	ldr	r0, [r7, #12]
 800ee58:	f7ff fe9d 	bl	800eb96 <SCSI_SenseCode>
      return -1;
 800ee5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ee60:	e00c      	b.n	800ee7c <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800ee62:	697b      	ldr	r3, [r7, #20]
 800ee64:	2202      	movs	r2, #2
 800ee66:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800ee68:	697b      	ldr	r3, [r7, #20]
 800ee6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ee6e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800ee70:	7afb      	ldrb	r3, [r7, #11]
 800ee72:	4619      	mov	r1, r3
 800ee74:	68f8      	ldr	r0, [r7, #12]
 800ee76:	f000 fadf 	bl	800f438 <SCSI_ProcessRead>
 800ee7a:	4603      	mov	r3, r0
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	3718      	adds	r7, #24
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}

0800ee84 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b086      	sub	sp, #24
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	60f8      	str	r0, [r7, #12]
 800ee8c:	460b      	mov	r3, r1
 800ee8e:	607a      	str	r2, [r7, #4]
 800ee90:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	32b0      	adds	r2, #176	; 0xb0
 800ee9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eea0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800eea2:	697b      	ldr	r3, [r7, #20]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d102      	bne.n	800eeae <SCSI_Read12+0x2a>
  {
    return -1;
 800eea8:	f04f 33ff 	mov.w	r3, #4294967295
 800eeac:	e09a      	b.n	800efe4 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800eeae:	697b      	ldr	r3, [r7, #20]
 800eeb0:	7a1b      	ldrb	r3, [r3, #8]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	f040 808c 	bne.w	800efd0 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800eeb8:	697b      	ldr	r3, [r7, #20]
 800eeba:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800eebe:	b25b      	sxtb	r3, r3
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	db0a      	blt.n	800eeda <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800eec4:	697b      	ldr	r3, [r7, #20]
 800eec6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800eeca:	2320      	movs	r3, #32
 800eecc:	2205      	movs	r2, #5
 800eece:	68f8      	ldr	r0, [r7, #12]
 800eed0:	f7ff fe61 	bl	800eb96 <SCSI_SenseCode>
      return -1;
 800eed4:	f04f 33ff 	mov.w	r3, #4294967295
 800eed8:	e084      	b.n	800efe4 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800eee0:	2b02      	cmp	r3, #2
 800eee2:	d108      	bne.n	800eef6 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800eee4:	7af9      	ldrb	r1, [r7, #11]
 800eee6:	233a      	movs	r3, #58	; 0x3a
 800eee8:	2202      	movs	r2, #2
 800eeea:	68f8      	ldr	r0, [r7, #12]
 800eeec:	f7ff fe53 	bl	800eb96 <SCSI_SenseCode>
      return -1;
 800eef0:	f04f 33ff 	mov.w	r3, #4294967295
 800eef4:	e076      	b.n	800efe4 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800eefc:	68fa      	ldr	r2, [r7, #12]
 800eefe:	33b0      	adds	r3, #176	; 0xb0
 800ef00:	009b      	lsls	r3, r3, #2
 800ef02:	4413      	add	r3, r2
 800ef04:	685b      	ldr	r3, [r3, #4]
 800ef06:	689b      	ldr	r3, [r3, #8]
 800ef08:	7afa      	ldrb	r2, [r7, #11]
 800ef0a:	4610      	mov	r0, r2
 800ef0c:	4798      	blx	r3
 800ef0e:	4603      	mov	r3, r0
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d008      	beq.n	800ef26 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ef14:	7af9      	ldrb	r1, [r7, #11]
 800ef16:	233a      	movs	r3, #58	; 0x3a
 800ef18:	2202      	movs	r2, #2
 800ef1a:	68f8      	ldr	r0, [r7, #12]
 800ef1c:	f7ff fe3b 	bl	800eb96 <SCSI_SenseCode>
      return -1;
 800ef20:	f04f 33ff 	mov.w	r3, #4294967295
 800ef24:	e05e      	b.n	800efe4 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	3302      	adds	r3, #2
 800ef2a:	781b      	ldrb	r3, [r3, #0]
 800ef2c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	3303      	adds	r3, #3
 800ef32:	781b      	ldrb	r3, [r3, #0]
 800ef34:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ef36:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	3304      	adds	r3, #4
 800ef3c:	781b      	ldrb	r3, [r3, #0]
 800ef3e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ef40:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ef42:	687a      	ldr	r2, [r7, #4]
 800ef44:	3205      	adds	r2, #5
 800ef46:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800ef48:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ef4a:	697b      	ldr	r3, [r7, #20]
 800ef4c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	3306      	adds	r3, #6
 800ef54:	781b      	ldrb	r3, [r3, #0]
 800ef56:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	3307      	adds	r3, #7
 800ef5c:	781b      	ldrb	r3, [r3, #0]
 800ef5e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ef60:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	3308      	adds	r3, #8
 800ef66:	781b      	ldrb	r3, [r3, #0]
 800ef68:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800ef6a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800ef6c:	687a      	ldr	r2, [r7, #4]
 800ef6e:	3209      	adds	r2, #9
 800ef70:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800ef72:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ef74:	697b      	ldr	r3, [r7, #20]
 800ef76:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800ef80:	697b      	ldr	r3, [r7, #20]
 800ef82:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ef86:	7af9      	ldrb	r1, [r7, #11]
 800ef88:	68f8      	ldr	r0, [r7, #12]
 800ef8a:	f000 fa28 	bl	800f3de <SCSI_CheckAddressRange>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	da02      	bge.n	800ef9a <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800ef94:	f04f 33ff 	mov.w	r3, #4294967295
 800ef98:	e024      	b.n	800efe4 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800ef9a:	697b      	ldr	r3, [r7, #20]
 800ef9c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800efa0:	697b      	ldr	r3, [r7, #20]
 800efa2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800efa6:	6979      	ldr	r1, [r7, #20]
 800efa8:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800efac:	fb01 f303 	mul.w	r3, r1, r3
 800efb0:	429a      	cmp	r2, r3
 800efb2:	d00a      	beq.n	800efca <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800efb4:	697b      	ldr	r3, [r7, #20]
 800efb6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800efba:	2320      	movs	r3, #32
 800efbc:	2205      	movs	r2, #5
 800efbe:	68f8      	ldr	r0, [r7, #12]
 800efc0:	f7ff fde9 	bl	800eb96 <SCSI_SenseCode>
      return -1;
 800efc4:	f04f 33ff 	mov.w	r3, #4294967295
 800efc8:	e00c      	b.n	800efe4 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800efca:	697b      	ldr	r3, [r7, #20]
 800efcc:	2202      	movs	r2, #2
 800efce:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800efd6:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800efd8:	7afb      	ldrb	r3, [r7, #11]
 800efda:	4619      	mov	r1, r3
 800efdc:	68f8      	ldr	r0, [r7, #12]
 800efde:	f000 fa2b 	bl	800f438 <SCSI_ProcessRead>
 800efe2:	4603      	mov	r3, r0
}
 800efe4:	4618      	mov	r0, r3
 800efe6:	3718      	adds	r7, #24
 800efe8:	46bd      	mov	sp, r7
 800efea:	bd80      	pop	{r7, pc}

0800efec <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b086      	sub	sp, #24
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	60f8      	str	r0, [r7, #12]
 800eff4:	460b      	mov	r3, r1
 800eff6:	607a      	str	r2, [r7, #4]
 800eff8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	32b0      	adds	r2, #176	; 0xb0
 800f004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f008:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800f00a:	697b      	ldr	r3, [r7, #20]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d102      	bne.n	800f016 <SCSI_Write10+0x2a>
  {
    return -1;
 800f010:	f04f 33ff 	mov.w	r3, #4294967295
 800f014:	e0ba      	b.n	800f18c <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800f016:	697b      	ldr	r3, [r7, #20]
 800f018:	7a1b      	ldrb	r3, [r3, #8]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	f040 80b0 	bne.w	800f180 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800f020:	697b      	ldr	r3, [r7, #20]
 800f022:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f026:	2b00      	cmp	r3, #0
 800f028:	d10a      	bne.n	800f040 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f02a:	697b      	ldr	r3, [r7, #20]
 800f02c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f030:	2320      	movs	r3, #32
 800f032:	2205      	movs	r2, #5
 800f034:	68f8      	ldr	r0, [r7, #12]
 800f036:	f7ff fdae 	bl	800eb96 <SCSI_SenseCode>
      return -1;
 800f03a:	f04f 33ff 	mov.w	r3, #4294967295
 800f03e:	e0a5      	b.n	800f18c <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800f040:	697b      	ldr	r3, [r7, #20]
 800f042:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800f046:	b25b      	sxtb	r3, r3
 800f048:	2b00      	cmp	r3, #0
 800f04a:	da0a      	bge.n	800f062 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f04c:	697b      	ldr	r3, [r7, #20]
 800f04e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f052:	2320      	movs	r3, #32
 800f054:	2205      	movs	r2, #5
 800f056:	68f8      	ldr	r0, [r7, #12]
 800f058:	f7ff fd9d 	bl	800eb96 <SCSI_SenseCode>
      return -1;
 800f05c:	f04f 33ff 	mov.w	r3, #4294967295
 800f060:	e094      	b.n	800f18c <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f068:	68fa      	ldr	r2, [r7, #12]
 800f06a:	33b0      	adds	r3, #176	; 0xb0
 800f06c:	009b      	lsls	r3, r3, #2
 800f06e:	4413      	add	r3, r2
 800f070:	685b      	ldr	r3, [r3, #4]
 800f072:	689b      	ldr	r3, [r3, #8]
 800f074:	7afa      	ldrb	r2, [r7, #11]
 800f076:	4610      	mov	r0, r2
 800f078:	4798      	blx	r3
 800f07a:	4603      	mov	r3, r0
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d008      	beq.n	800f092 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f080:	7af9      	ldrb	r1, [r7, #11]
 800f082:	233a      	movs	r3, #58	; 0x3a
 800f084:	2202      	movs	r2, #2
 800f086:	68f8      	ldr	r0, [r7, #12]
 800f088:	f7ff fd85 	bl	800eb96 <SCSI_SenseCode>
      return -1;
 800f08c:	f04f 33ff 	mov.w	r3, #4294967295
 800f090:	e07c      	b.n	800f18c <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f098:	68fa      	ldr	r2, [r7, #12]
 800f09a:	33b0      	adds	r3, #176	; 0xb0
 800f09c:	009b      	lsls	r3, r3, #2
 800f09e:	4413      	add	r3, r2
 800f0a0:	685b      	ldr	r3, [r3, #4]
 800f0a2:	68db      	ldr	r3, [r3, #12]
 800f0a4:	7afa      	ldrb	r2, [r7, #11]
 800f0a6:	4610      	mov	r0, r2
 800f0a8:	4798      	blx	r3
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d008      	beq.n	800f0c2 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800f0b0:	7af9      	ldrb	r1, [r7, #11]
 800f0b2:	2327      	movs	r3, #39	; 0x27
 800f0b4:	2202      	movs	r2, #2
 800f0b6:	68f8      	ldr	r0, [r7, #12]
 800f0b8:	f7ff fd6d 	bl	800eb96 <SCSI_SenseCode>
      return -1;
 800f0bc:	f04f 33ff 	mov.w	r3, #4294967295
 800f0c0:	e064      	b.n	800f18c <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	3302      	adds	r3, #2
 800f0c6:	781b      	ldrb	r3, [r3, #0]
 800f0c8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	3303      	adds	r3, #3
 800f0ce:	781b      	ldrb	r3, [r3, #0]
 800f0d0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f0d2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	3304      	adds	r3, #4
 800f0d8:	781b      	ldrb	r3, [r3, #0]
 800f0da:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800f0dc:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800f0de:	687a      	ldr	r2, [r7, #4]
 800f0e0:	3205      	adds	r2, #5
 800f0e2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800f0e4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f0e6:	697b      	ldr	r3, [r7, #20]
 800f0e8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	3307      	adds	r3, #7
 800f0f0:	781b      	ldrb	r3, [r3, #0]
 800f0f2:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800f0f4:	687a      	ldr	r2, [r7, #4]
 800f0f6:	3208      	adds	r2, #8
 800f0f8:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800f0fa:	431a      	orrs	r2, r3
 800f0fc:	697b      	ldr	r3, [r7, #20]
 800f0fe:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800f102:	697b      	ldr	r3, [r7, #20]
 800f104:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f10e:	7af9      	ldrb	r1, [r7, #11]
 800f110:	68f8      	ldr	r0, [r7, #12]
 800f112:	f000 f964 	bl	800f3de <SCSI_CheckAddressRange>
 800f116:	4603      	mov	r3, r0
 800f118:	2b00      	cmp	r3, #0
 800f11a:	da02      	bge.n	800f122 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800f11c:	f04f 33ff 	mov.w	r3, #4294967295
 800f120:	e034      	b.n	800f18c <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f122:	697b      	ldr	r3, [r7, #20]
 800f124:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f128:	697a      	ldr	r2, [r7, #20]
 800f12a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f12e:	fb02 f303 	mul.w	r3, r2, r3
 800f132:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800f134:	697b      	ldr	r3, [r7, #20]
 800f136:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f13a:	693a      	ldr	r2, [r7, #16]
 800f13c:	429a      	cmp	r2, r3
 800f13e:	d00a      	beq.n	800f156 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f140:	697b      	ldr	r3, [r7, #20]
 800f142:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f146:	2320      	movs	r3, #32
 800f148:	2205      	movs	r2, #5
 800f14a:	68f8      	ldr	r0, [r7, #12]
 800f14c:	f7ff fd23 	bl	800eb96 <SCSI_SenseCode>
      return -1;
 800f150:	f04f 33ff 	mov.w	r3, #4294967295
 800f154:	e01a      	b.n	800f18c <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800f156:	693b      	ldr	r3, [r7, #16]
 800f158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f15c:	bf28      	it	cs
 800f15e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f162:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800f164:	697b      	ldr	r3, [r7, #20]
 800f166:	2201      	movs	r2, #1
 800f168:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800f16a:	4b0a      	ldr	r3, [pc, #40]	; (800f194 <SCSI_Write10+0x1a8>)
 800f16c:	7819      	ldrb	r1, [r3, #0]
 800f16e:	697b      	ldr	r3, [r7, #20]
 800f170:	f103 0210 	add.w	r2, r3, #16
 800f174:	693b      	ldr	r3, [r7, #16]
 800f176:	68f8      	ldr	r0, [r7, #12]
 800f178:	f008 fbd7 	bl	801792a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800f17c:	2300      	movs	r3, #0
 800f17e:	e005      	b.n	800f18c <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 800f180:	7afb      	ldrb	r3, [r7, #11]
 800f182:	4619      	mov	r1, r3
 800f184:	68f8      	ldr	r0, [r7, #12]
 800f186:	f000 f9dd 	bl	800f544 <SCSI_ProcessWrite>
 800f18a:	4603      	mov	r3, r0
}
 800f18c:	4618      	mov	r0, r3
 800f18e:	3718      	adds	r7, #24
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}
 800f194:	20000077 	.word	0x20000077

0800f198 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b086      	sub	sp, #24
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	60f8      	str	r0, [r7, #12]
 800f1a0:	460b      	mov	r3, r1
 800f1a2:	607a      	str	r2, [r7, #4]
 800f1a4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	32b0      	adds	r2, #176	; 0xb0
 800f1b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1b4:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800f1b6:	697b      	ldr	r3, [r7, #20]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d102      	bne.n	800f1c2 <SCSI_Write12+0x2a>
  {
    return -1;
 800f1bc:	f04f 33ff 	mov.w	r3, #4294967295
 800f1c0:	e0ca      	b.n	800f358 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800f1c2:	697b      	ldr	r3, [r7, #20]
 800f1c4:	7a1b      	ldrb	r3, [r3, #8]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	f040 80c0 	bne.w	800f34c <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800f1cc:	697b      	ldr	r3, [r7, #20]
 800f1ce:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d10a      	bne.n	800f1ec <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f1d6:	697b      	ldr	r3, [r7, #20]
 800f1d8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f1dc:	2320      	movs	r3, #32
 800f1de:	2205      	movs	r2, #5
 800f1e0:	68f8      	ldr	r0, [r7, #12]
 800f1e2:	f7ff fcd8 	bl	800eb96 <SCSI_SenseCode>
      return -1;
 800f1e6:	f04f 33ff 	mov.w	r3, #4294967295
 800f1ea:	e0b5      	b.n	800f358 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800f1ec:	697b      	ldr	r3, [r7, #20]
 800f1ee:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800f1f2:	b25b      	sxtb	r3, r3
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	da0a      	bge.n	800f20e <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f1f8:	697b      	ldr	r3, [r7, #20]
 800f1fa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f1fe:	2320      	movs	r3, #32
 800f200:	2205      	movs	r2, #5
 800f202:	68f8      	ldr	r0, [r7, #12]
 800f204:	f7ff fcc7 	bl	800eb96 <SCSI_SenseCode>
      return -1;
 800f208:	f04f 33ff 	mov.w	r3, #4294967295
 800f20c:	e0a4      	b.n	800f358 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f214:	68fa      	ldr	r2, [r7, #12]
 800f216:	33b0      	adds	r3, #176	; 0xb0
 800f218:	009b      	lsls	r3, r3, #2
 800f21a:	4413      	add	r3, r2
 800f21c:	685b      	ldr	r3, [r3, #4]
 800f21e:	689b      	ldr	r3, [r3, #8]
 800f220:	7afa      	ldrb	r2, [r7, #11]
 800f222:	4610      	mov	r0, r2
 800f224:	4798      	blx	r3
 800f226:	4603      	mov	r3, r0
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d00b      	beq.n	800f244 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f22c:	7af9      	ldrb	r1, [r7, #11]
 800f22e:	233a      	movs	r3, #58	; 0x3a
 800f230:	2202      	movs	r2, #2
 800f232:	68f8      	ldr	r0, [r7, #12]
 800f234:	f7ff fcaf 	bl	800eb96 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800f238:	697b      	ldr	r3, [r7, #20]
 800f23a:	2205      	movs	r2, #5
 800f23c:	721a      	strb	r2, [r3, #8]
      return -1;
 800f23e:	f04f 33ff 	mov.w	r3, #4294967295
 800f242:	e089      	b.n	800f358 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f24a:	68fa      	ldr	r2, [r7, #12]
 800f24c:	33b0      	adds	r3, #176	; 0xb0
 800f24e:	009b      	lsls	r3, r3, #2
 800f250:	4413      	add	r3, r2
 800f252:	685b      	ldr	r3, [r3, #4]
 800f254:	68db      	ldr	r3, [r3, #12]
 800f256:	7afa      	ldrb	r2, [r7, #11]
 800f258:	4610      	mov	r0, r2
 800f25a:	4798      	blx	r3
 800f25c:	4603      	mov	r3, r0
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d00b      	beq.n	800f27a <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800f262:	7af9      	ldrb	r1, [r7, #11]
 800f264:	2327      	movs	r3, #39	; 0x27
 800f266:	2202      	movs	r2, #2
 800f268:	68f8      	ldr	r0, [r7, #12]
 800f26a:	f7ff fc94 	bl	800eb96 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800f26e:	697b      	ldr	r3, [r7, #20]
 800f270:	2205      	movs	r2, #5
 800f272:	721a      	strb	r2, [r3, #8]
      return -1;
 800f274:	f04f 33ff 	mov.w	r3, #4294967295
 800f278:	e06e      	b.n	800f358 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	3302      	adds	r3, #2
 800f27e:	781b      	ldrb	r3, [r3, #0]
 800f280:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	3303      	adds	r3, #3
 800f286:	781b      	ldrb	r3, [r3, #0]
 800f288:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f28a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	3304      	adds	r3, #4
 800f290:	781b      	ldrb	r3, [r3, #0]
 800f292:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800f294:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800f296:	687a      	ldr	r2, [r7, #4]
 800f298:	3205      	adds	r2, #5
 800f29a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800f29c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f29e:	697b      	ldr	r3, [r7, #20]
 800f2a0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	3306      	adds	r3, #6
 800f2a8:	781b      	ldrb	r3, [r3, #0]
 800f2aa:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	3307      	adds	r3, #7
 800f2b0:	781b      	ldrb	r3, [r3, #0]
 800f2b2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f2b4:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	3308      	adds	r3, #8
 800f2ba:	781b      	ldrb	r3, [r3, #0]
 800f2bc:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800f2be:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800f2c0:	687a      	ldr	r2, [r7, #4]
 800f2c2:	3209      	adds	r2, #9
 800f2c4:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800f2c6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f2c8:	697b      	ldr	r3, [r7, #20]
 800f2ca:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f2d4:	697b      	ldr	r3, [r7, #20]
 800f2d6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f2da:	7af9      	ldrb	r1, [r7, #11]
 800f2dc:	68f8      	ldr	r0, [r7, #12]
 800f2de:	f000 f87e 	bl	800f3de <SCSI_CheckAddressRange>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	da02      	bge.n	800f2ee <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800f2e8:	f04f 33ff 	mov.w	r3, #4294967295
 800f2ec:	e034      	b.n	800f358 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f2ee:	697b      	ldr	r3, [r7, #20]
 800f2f0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f2f4:	697a      	ldr	r2, [r7, #20]
 800f2f6:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f2fa:	fb02 f303 	mul.w	r3, r2, r3
 800f2fe:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800f300:	697b      	ldr	r3, [r7, #20]
 800f302:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f306:	693a      	ldr	r2, [r7, #16]
 800f308:	429a      	cmp	r2, r3
 800f30a:	d00a      	beq.n	800f322 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f30c:	697b      	ldr	r3, [r7, #20]
 800f30e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f312:	2320      	movs	r3, #32
 800f314:	2205      	movs	r2, #5
 800f316:	68f8      	ldr	r0, [r7, #12]
 800f318:	f7ff fc3d 	bl	800eb96 <SCSI_SenseCode>
      return -1;
 800f31c:	f04f 33ff 	mov.w	r3, #4294967295
 800f320:	e01a      	b.n	800f358 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800f322:	693b      	ldr	r3, [r7, #16]
 800f324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f328:	bf28      	it	cs
 800f32a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f32e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800f330:	697b      	ldr	r3, [r7, #20]
 800f332:	2201      	movs	r2, #1
 800f334:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800f336:	4b0a      	ldr	r3, [pc, #40]	; (800f360 <SCSI_Write12+0x1c8>)
 800f338:	7819      	ldrb	r1, [r3, #0]
 800f33a:	697b      	ldr	r3, [r7, #20]
 800f33c:	f103 0210 	add.w	r2, r3, #16
 800f340:	693b      	ldr	r3, [r7, #16]
 800f342:	68f8      	ldr	r0, [r7, #12]
 800f344:	f008 faf1 	bl	801792a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800f348:	2300      	movs	r3, #0
 800f34a:	e005      	b.n	800f358 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 800f34c:	7afb      	ldrb	r3, [r7, #11]
 800f34e:	4619      	mov	r1, r3
 800f350:	68f8      	ldr	r0, [r7, #12]
 800f352:	f000 f8f7 	bl	800f544 <SCSI_ProcessWrite>
 800f356:	4603      	mov	r3, r0
}
 800f358:	4618      	mov	r0, r3
 800f35a:	3718      	adds	r7, #24
 800f35c:	46bd      	mov	sp, r7
 800f35e:	bd80      	pop	{r7, pc}
 800f360:	20000077 	.word	0x20000077

0800f364 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b086      	sub	sp, #24
 800f368:	af00      	add	r7, sp, #0
 800f36a:	60f8      	str	r0, [r7, #12]
 800f36c:	460b      	mov	r3, r1
 800f36e:	607a      	str	r2, [r7, #4]
 800f370:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	32b0      	adds	r2, #176	; 0xb0
 800f37c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f380:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800f382:	697b      	ldr	r3, [r7, #20]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d102      	bne.n	800f38e <SCSI_Verify10+0x2a>
  {
    return -1;
 800f388:	f04f 33ff 	mov.w	r3, #4294967295
 800f38c:	e023      	b.n	800f3d6 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	3301      	adds	r3, #1
 800f392:	781b      	ldrb	r3, [r3, #0]
 800f394:	f003 0302 	and.w	r3, r3, #2
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d008      	beq.n	800f3ae <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800f39c:	7af9      	ldrb	r1, [r7, #11]
 800f39e:	2324      	movs	r3, #36	; 0x24
 800f3a0:	2205      	movs	r2, #5
 800f3a2:	68f8      	ldr	r0, [r7, #12]
 800f3a4:	f7ff fbf7 	bl	800eb96 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800f3a8:	f04f 33ff 	mov.w	r3, #4294967295
 800f3ac:	e013      	b.n	800f3d6 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800f3ae:	697b      	ldr	r3, [r7, #20]
 800f3b0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f3b4:	697b      	ldr	r3, [r7, #20]
 800f3b6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f3ba:	7af9      	ldrb	r1, [r7, #11]
 800f3bc:	68f8      	ldr	r0, [r7, #12]
 800f3be:	f000 f80e 	bl	800f3de <SCSI_CheckAddressRange>
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	da02      	bge.n	800f3ce <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 800f3c8:	f04f 33ff 	mov.w	r3, #4294967295
 800f3cc:	e003      	b.n	800f3d6 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 800f3ce:	697b      	ldr	r3, [r7, #20]
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	60da      	str	r2, [r3, #12]

  return 0;
 800f3d4:	2300      	movs	r3, #0
}
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	3718      	adds	r7, #24
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	bd80      	pop	{r7, pc}

0800f3de <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800f3de:	b580      	push	{r7, lr}
 800f3e0:	b086      	sub	sp, #24
 800f3e2:	af00      	add	r7, sp, #0
 800f3e4:	60f8      	str	r0, [r7, #12]
 800f3e6:	607a      	str	r2, [r7, #4]
 800f3e8:	603b      	str	r3, [r7, #0]
 800f3ea:	460b      	mov	r3, r1
 800f3ec:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	32b0      	adds	r2, #176	; 0xb0
 800f3f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3fc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800f3fe:	697b      	ldr	r3, [r7, #20]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d102      	bne.n	800f40a <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800f404:	f04f 33ff 	mov.w	r3, #4294967295
 800f408:	e011      	b.n	800f42e <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800f40a:	687a      	ldr	r2, [r7, #4]
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	441a      	add	r2, r3
 800f410:	697b      	ldr	r3, [r7, #20]
 800f412:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f416:	429a      	cmp	r2, r3
 800f418:	d908      	bls.n	800f42c <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800f41a:	7af9      	ldrb	r1, [r7, #11]
 800f41c:	2321      	movs	r3, #33	; 0x21
 800f41e:	2205      	movs	r2, #5
 800f420:	68f8      	ldr	r0, [r7, #12]
 800f422:	f7ff fbb8 	bl	800eb96 <SCSI_SenseCode>
    return -1;
 800f426:	f04f 33ff 	mov.w	r3, #4294967295
 800f42a:	e000      	b.n	800f42e <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 800f42c:	2300      	movs	r3, #0
}
 800f42e:	4618      	mov	r0, r3
 800f430:	3718      	adds	r7, #24
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}
	...

0800f438 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800f438:	b590      	push	{r4, r7, lr}
 800f43a:	b085      	sub	sp, #20
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
 800f440:	460b      	mov	r3, r1
 800f442:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	32b0      	adds	r2, #176	; 0xb0
 800f44e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f452:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d102      	bne.n	800f460 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800f45a:	f04f 33ff 	mov.w	r3, #4294967295
 800f45e:	e06a      	b.n	800f536 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f466:	68fa      	ldr	r2, [r7, #12]
 800f468:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f46c:	fb02 f303 	mul.w	r3, r2, r3
 800f470:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800f472:	68bb      	ldr	r3, [r7, #8]
 800f474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f478:	bf28      	it	cs
 800f47a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f47e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f486:	687a      	ldr	r2, [r7, #4]
 800f488:	33b0      	adds	r3, #176	; 0xb0
 800f48a:	009b      	lsls	r3, r3, #2
 800f48c:	4413      	add	r3, r2
 800f48e:	685b      	ldr	r3, [r3, #4]
 800f490:	691c      	ldr	r4, [r3, #16]
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	f103 0110 	add.w	r1, r3, #16
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	68bb      	ldr	r3, [r7, #8]
 800f4a8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800f4ac:	b29b      	uxth	r3, r3
 800f4ae:	78f8      	ldrb	r0, [r7, #3]
 800f4b0:	47a0      	blx	r4
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	da08      	bge.n	800f4ca <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800f4b8:	78f9      	ldrb	r1, [r7, #3]
 800f4ba:	2311      	movs	r3, #17
 800f4bc:	2204      	movs	r2, #4
 800f4be:	6878      	ldr	r0, [r7, #4]
 800f4c0:	f7ff fb69 	bl	800eb96 <SCSI_SenseCode>
    return -1;
 800f4c4:	f04f 33ff 	mov.w	r3, #4294967295
 800f4c8:	e035      	b.n	800f536 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800f4ca:	4b1d      	ldr	r3, [pc, #116]	; (800f540 <SCSI_ProcessRead+0x108>)
 800f4cc:	7819      	ldrb	r1, [r3, #0]
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	f103 0210 	add.w	r2, r3, #16
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	6878      	ldr	r0, [r7, #4]
 800f4d8:	f008 fa06 	bl	80178e8 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f4e8:	4619      	mov	r1, r3
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	fbb3 f3f1 	udiv	r3, r3, r1
 800f4f0:	441a      	add	r2, r3
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f504:	4619      	mov	r1, r3
 800f506:	68bb      	ldr	r3, [r7, #8]
 800f508:	fbb3 f3f1 	udiv	r3, r3, r1
 800f50c:	1ad2      	subs	r2, r2, r3
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	1ad2      	subs	r2, r2, r3
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d102      	bne.n	800f534 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	2203      	movs	r2, #3
 800f532:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800f534:	2300      	movs	r3, #0
}
 800f536:	4618      	mov	r0, r3
 800f538:	3714      	adds	r7, #20
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd90      	pop	{r4, r7, pc}
 800f53e:	bf00      	nop
 800f540:	20000076 	.word	0x20000076

0800f544 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800f544:	b590      	push	{r4, r7, lr}
 800f546:	b085      	sub	sp, #20
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
 800f54c:	460b      	mov	r3, r1
 800f54e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	32b0      	adds	r2, #176	; 0xb0
 800f55a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f55e:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d102      	bne.n	800f56c <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800f566:	f04f 33ff 	mov.w	r3, #4294967295
 800f56a:	e07a      	b.n	800f662 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f572:	68fa      	ldr	r2, [r7, #12]
 800f574:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f578:	fb02 f303 	mul.w	r3, r2, r3
 800f57c:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f584:	bf28      	it	cs
 800f586:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f58a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f592:	687a      	ldr	r2, [r7, #4]
 800f594:	33b0      	adds	r3, #176	; 0xb0
 800f596:	009b      	lsls	r3, r3, #2
 800f598:	4413      	add	r3, r2
 800f59a:	685b      	ldr	r3, [r3, #4]
 800f59c:	695c      	ldr	r4, [r3, #20]
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	f103 0110 	add.w	r1, r3, #16
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800f5b8:	b29b      	uxth	r3, r3
 800f5ba:	78f8      	ldrb	r0, [r7, #3]
 800f5bc:	47a0      	blx	r4
 800f5be:	4603      	mov	r3, r0
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	da08      	bge.n	800f5d6 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800f5c4:	78f9      	ldrb	r1, [r7, #3]
 800f5c6:	2303      	movs	r3, #3
 800f5c8:	2204      	movs	r2, #4
 800f5ca:	6878      	ldr	r0, [r7, #4]
 800f5cc:	f7ff fae3 	bl	800eb96 <SCSI_SenseCode>
    return -1;
 800f5d0:	f04f 33ff 	mov.w	r3, #4294967295
 800f5d4:	e045      	b.n	800f662 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f5e2:	4619      	mov	r1, r3
 800f5e4:	68bb      	ldr	r3, [r7, #8]
 800f5e6:	fbb3 f3f1 	udiv	r3, r3, r1
 800f5ea:	441a      	add	r2, r3
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f5fe:	4619      	mov	r1, r3
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	fbb3 f3f1 	udiv	r3, r3, r1
 800f606:	1ad2      	subs	r2, r2, r3
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800f614:	68bb      	ldr	r3, [r7, #8]
 800f616:	1ad2      	subs	r2, r2, r3
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f624:	2b00      	cmp	r3, #0
 800f626:	d104      	bne.n	800f632 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800f628:	2100      	movs	r1, #0
 800f62a:	6878      	ldr	r0, [r7, #4]
 800f62c:	f7fe fd14 	bl	800e058 <MSC_BOT_SendCSW>
 800f630:	e016      	b.n	800f660 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f638:	68fa      	ldr	r2, [r7, #12]
 800f63a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f63e:	fb02 f303 	mul.w	r3, r2, r3
 800f642:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f646:	bf28      	it	cs
 800f648:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f64c:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800f64e:	4b07      	ldr	r3, [pc, #28]	; (800f66c <SCSI_ProcessWrite+0x128>)
 800f650:	7819      	ldrb	r1, [r3, #0]
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	f103 0210 	add.w	r2, r3, #16
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	6878      	ldr	r0, [r7, #4]
 800f65c:	f008 f965 	bl	801792a <USBD_LL_PrepareReceive>
  }

  return 0;
 800f660:	2300      	movs	r3, #0
}
 800f662:	4618      	mov	r0, r3
 800f664:	3714      	adds	r7, #20
 800f666:	46bd      	mov	sp, r7
 800f668:	bd90      	pop	{r4, r7, pc}
 800f66a:	bf00      	nop
 800f66c:	20000077 	.word	0x20000077

0800f670 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800f670:	b480      	push	{r7}
 800f672:	b087      	sub	sp, #28
 800f674:	af00      	add	r7, sp, #0
 800f676:	60f8      	str	r0, [r7, #12]
 800f678:	60b9      	str	r1, [r7, #8]
 800f67a:	4613      	mov	r3, r2
 800f67c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800f67e:	88fb      	ldrh	r3, [r7, #6]
 800f680:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d102      	bne.n	800f68e <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800f688:	f04f 33ff 	mov.w	r3, #4294967295
 800f68c:	e013      	b.n	800f6b6 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800f68e:	8afa      	ldrh	r2, [r7, #22]
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800f694:	e00b      	b.n	800f6ae <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800f696:	8afb      	ldrh	r3, [r7, #22]
 800f698:	3b01      	subs	r3, #1
 800f69a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800f69c:	8afb      	ldrh	r3, [r7, #22]
 800f69e:	68ba      	ldr	r2, [r7, #8]
 800f6a0:	441a      	add	r2, r3
 800f6a2:	8afb      	ldrh	r3, [r7, #22]
 800f6a4:	7811      	ldrb	r1, [r2, #0]
 800f6a6:	68fa      	ldr	r2, [r7, #12]
 800f6a8:	4413      	add	r3, r2
 800f6aa:	460a      	mov	r2, r1
 800f6ac:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800f6ae:	8afb      	ldrh	r3, [r7, #22]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d1f0      	bne.n	800f696 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800f6b4:	2300      	movs	r3, #0
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	371c      	adds	r7, #28
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c0:	4770      	bx	lr

0800f6c2 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f6c2:	b580      	push	{r7, lr}
 800f6c4:	b086      	sub	sp, #24
 800f6c6:	af00      	add	r7, sp, #0
 800f6c8:	60f8      	str	r0, [r7, #12]
 800f6ca:	60b9      	str	r1, [r7, #8]
 800f6cc:	4613      	mov	r3, r2
 800f6ce:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d101      	bne.n	800f6da <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f6d6:	2303      	movs	r3, #3
 800f6d8:	e01f      	b.n	800f71a <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	2200      	movs	r2, #0
 800f6de:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f6f2:	68bb      	ldr	r3, [r7, #8]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d003      	beq.n	800f700 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	68ba      	ldr	r2, [r7, #8]
 800f6fc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	2201      	movs	r2, #1
 800f704:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	79fa      	ldrb	r2, [r7, #7]
 800f70c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f70e:	68f8      	ldr	r0, [r7, #12]
 800f710:	f007 ff96 	bl	8017640 <USBD_LL_Init>
 800f714:	4603      	mov	r3, r0
 800f716:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f718:	7dfb      	ldrb	r3, [r7, #23]
}
 800f71a:	4618      	mov	r0, r3
 800f71c:	3718      	adds	r7, #24
 800f71e:	46bd      	mov	sp, r7
 800f720:	bd80      	pop	{r7, pc}

0800f722 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f722:	b580      	push	{r7, lr}
 800f724:	b084      	sub	sp, #16
 800f726:	af00      	add	r7, sp, #0
 800f728:	6078      	str	r0, [r7, #4]
 800f72a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f72c:	2300      	movs	r3, #0
 800f72e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f730:	683b      	ldr	r3, [r7, #0]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d101      	bne.n	800f73a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f736:	2303      	movs	r3, #3
 800f738:	e025      	b.n	800f786 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	683a      	ldr	r2, [r7, #0]
 800f73e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	32ae      	adds	r2, #174	; 0xae
 800f74c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f752:	2b00      	cmp	r3, #0
 800f754:	d00f      	beq.n	800f776 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	32ae      	adds	r2, #174	; 0xae
 800f760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f766:	f107 020e 	add.w	r2, r7, #14
 800f76a:	4610      	mov	r0, r2
 800f76c:	4798      	blx	r3
 800f76e:	4602      	mov	r2, r0
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800f77c:	1c5a      	adds	r2, r3, #1
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800f784:	2300      	movs	r3, #0
}
 800f786:	4618      	mov	r0, r3
 800f788:	3710      	adds	r7, #16
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}

0800f78e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f78e:	b580      	push	{r7, lr}
 800f790:	b082      	sub	sp, #8
 800f792:	af00      	add	r7, sp, #0
 800f794:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	f007 ff9e 	bl	80176d8 <USBD_LL_Start>
 800f79c:	4603      	mov	r3, r0
}
 800f79e:	4618      	mov	r0, r3
 800f7a0:	3708      	adds	r7, #8
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bd80      	pop	{r7, pc}

0800f7a6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800f7a6:	b480      	push	{r7}
 800f7a8:	b083      	sub	sp, #12
 800f7aa:	af00      	add	r7, sp, #0
 800f7ac:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f7ae:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	370c      	adds	r7, #12
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ba:	4770      	bx	lr

0800f7bc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b084      	sub	sp, #16
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
 800f7c4:	460b      	mov	r3, r1
 800f7c6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d009      	beq.n	800f7ea <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	78fa      	ldrb	r2, [r7, #3]
 800f7e0:	4611      	mov	r1, r2
 800f7e2:	6878      	ldr	r0, [r7, #4]
 800f7e4:	4798      	blx	r3
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f7ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	3710      	adds	r7, #16
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bd80      	pop	{r7, pc}

0800f7f4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b084      	sub	sp, #16
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
 800f7fc:	460b      	mov	r3, r1
 800f7fe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f800:	2300      	movs	r3, #0
 800f802:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f80a:	685b      	ldr	r3, [r3, #4]
 800f80c:	78fa      	ldrb	r2, [r7, #3]
 800f80e:	4611      	mov	r1, r2
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	4798      	blx	r3
 800f814:	4603      	mov	r3, r0
 800f816:	2b00      	cmp	r3, #0
 800f818:	d001      	beq.n	800f81e <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800f81a:	2303      	movs	r3, #3
 800f81c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f81e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f820:	4618      	mov	r0, r3
 800f822:	3710      	adds	r7, #16
 800f824:	46bd      	mov	sp, r7
 800f826:	bd80      	pop	{r7, pc}

0800f828 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b084      	sub	sp, #16
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
 800f830:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f838:	6839      	ldr	r1, [r7, #0]
 800f83a:	4618      	mov	r0, r3
 800f83c:	f001 f933 	bl	8010aa6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	2201      	movs	r2, #1
 800f844:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f84e:	461a      	mov	r2, r3
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f85c:	f003 031f 	and.w	r3, r3, #31
 800f860:	2b02      	cmp	r3, #2
 800f862:	d01a      	beq.n	800f89a <USBD_LL_SetupStage+0x72>
 800f864:	2b02      	cmp	r3, #2
 800f866:	d822      	bhi.n	800f8ae <USBD_LL_SetupStage+0x86>
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d002      	beq.n	800f872 <USBD_LL_SetupStage+0x4a>
 800f86c:	2b01      	cmp	r3, #1
 800f86e:	d00a      	beq.n	800f886 <USBD_LL_SetupStage+0x5e>
 800f870:	e01d      	b.n	800f8ae <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f878:	4619      	mov	r1, r3
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	f000 fb60 	bl	800ff40 <USBD_StdDevReq>
 800f880:	4603      	mov	r3, r0
 800f882:	73fb      	strb	r3, [r7, #15]
      break;
 800f884:	e020      	b.n	800f8c8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f88c:	4619      	mov	r1, r3
 800f88e:	6878      	ldr	r0, [r7, #4]
 800f890:	f000 fbc8 	bl	8010024 <USBD_StdItfReq>
 800f894:	4603      	mov	r3, r0
 800f896:	73fb      	strb	r3, [r7, #15]
      break;
 800f898:	e016      	b.n	800f8c8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f8a0:	4619      	mov	r1, r3
 800f8a2:	6878      	ldr	r0, [r7, #4]
 800f8a4:	f000 fc2a 	bl	80100fc <USBD_StdEPReq>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	73fb      	strb	r3, [r7, #15]
      break;
 800f8ac:	e00c      	b.n	800f8c8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f8b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f8b8:	b2db      	uxtb	r3, r3
 800f8ba:	4619      	mov	r1, r3
 800f8bc:	6878      	ldr	r0, [r7, #4]
 800f8be:	f007 ff8a 	bl	80177d6 <USBD_LL_StallEP>
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	73fb      	strb	r3, [r7, #15]
      break;
 800f8c6:	bf00      	nop
  }

  return ret;
 800f8c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	3710      	adds	r7, #16
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}

0800f8d2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f8d2:	b580      	push	{r7, lr}
 800f8d4:	b086      	sub	sp, #24
 800f8d6:	af00      	add	r7, sp, #0
 800f8d8:	60f8      	str	r0, [r7, #12]
 800f8da:	460b      	mov	r3, r1
 800f8dc:	607a      	str	r2, [r7, #4]
 800f8de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800f8e4:	7afb      	ldrb	r3, [r7, #11]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d16e      	bne.n	800f9c8 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f8f0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f8f8:	2b03      	cmp	r3, #3
 800f8fa:	f040 8098 	bne.w	800fa2e <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800f8fe:	693b      	ldr	r3, [r7, #16]
 800f900:	689a      	ldr	r2, [r3, #8]
 800f902:	693b      	ldr	r3, [r7, #16]
 800f904:	68db      	ldr	r3, [r3, #12]
 800f906:	429a      	cmp	r2, r3
 800f908:	d913      	bls.n	800f932 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800f90a:	693b      	ldr	r3, [r7, #16]
 800f90c:	689a      	ldr	r2, [r3, #8]
 800f90e:	693b      	ldr	r3, [r7, #16]
 800f910:	68db      	ldr	r3, [r3, #12]
 800f912:	1ad2      	subs	r2, r2, r3
 800f914:	693b      	ldr	r3, [r7, #16]
 800f916:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f918:	693b      	ldr	r3, [r7, #16]
 800f91a:	68da      	ldr	r2, [r3, #12]
 800f91c:	693b      	ldr	r3, [r7, #16]
 800f91e:	689b      	ldr	r3, [r3, #8]
 800f920:	4293      	cmp	r3, r2
 800f922:	bf28      	it	cs
 800f924:	4613      	movcs	r3, r2
 800f926:	461a      	mov	r2, r3
 800f928:	6879      	ldr	r1, [r7, #4]
 800f92a:	68f8      	ldr	r0, [r7, #12]
 800f92c:	f001 f992 	bl	8010c54 <USBD_CtlContinueRx>
 800f930:	e07d      	b.n	800fa2e <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f938:	f003 031f 	and.w	r3, r3, #31
 800f93c:	2b02      	cmp	r3, #2
 800f93e:	d014      	beq.n	800f96a <USBD_LL_DataOutStage+0x98>
 800f940:	2b02      	cmp	r3, #2
 800f942:	d81d      	bhi.n	800f980 <USBD_LL_DataOutStage+0xae>
 800f944:	2b00      	cmp	r3, #0
 800f946:	d002      	beq.n	800f94e <USBD_LL_DataOutStage+0x7c>
 800f948:	2b01      	cmp	r3, #1
 800f94a:	d003      	beq.n	800f954 <USBD_LL_DataOutStage+0x82>
 800f94c:	e018      	b.n	800f980 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800f94e:	2300      	movs	r3, #0
 800f950:	75bb      	strb	r3, [r7, #22]
            break;
 800f952:	e018      	b.n	800f986 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800f95a:	b2db      	uxtb	r3, r3
 800f95c:	4619      	mov	r1, r3
 800f95e:	68f8      	ldr	r0, [r7, #12]
 800f960:	f000 fa5e 	bl	800fe20 <USBD_CoreFindIF>
 800f964:	4603      	mov	r3, r0
 800f966:	75bb      	strb	r3, [r7, #22]
            break;
 800f968:	e00d      	b.n	800f986 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800f970:	b2db      	uxtb	r3, r3
 800f972:	4619      	mov	r1, r3
 800f974:	68f8      	ldr	r0, [r7, #12]
 800f976:	f000 fa60 	bl	800fe3a <USBD_CoreFindEP>
 800f97a:	4603      	mov	r3, r0
 800f97c:	75bb      	strb	r3, [r7, #22]
            break;
 800f97e:	e002      	b.n	800f986 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800f980:	2300      	movs	r3, #0
 800f982:	75bb      	strb	r3, [r7, #22]
            break;
 800f984:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800f986:	7dbb      	ldrb	r3, [r7, #22]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d119      	bne.n	800f9c0 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f992:	b2db      	uxtb	r3, r3
 800f994:	2b03      	cmp	r3, #3
 800f996:	d113      	bne.n	800f9c0 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800f998:	7dba      	ldrb	r2, [r7, #22]
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	32ae      	adds	r2, #174	; 0xae
 800f99e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9a2:	691b      	ldr	r3, [r3, #16]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d00b      	beq.n	800f9c0 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800f9a8:	7dba      	ldrb	r2, [r7, #22]
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800f9b0:	7dba      	ldrb	r2, [r7, #22]
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	32ae      	adds	r2, #174	; 0xae
 800f9b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9ba:	691b      	ldr	r3, [r3, #16]
 800f9bc:	68f8      	ldr	r0, [r7, #12]
 800f9be:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f9c0:	68f8      	ldr	r0, [r7, #12]
 800f9c2:	f001 f958 	bl	8010c76 <USBD_CtlSendStatus>
 800f9c6:	e032      	b.n	800fa2e <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800f9c8:	7afb      	ldrb	r3, [r7, #11]
 800f9ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f9ce:	b2db      	uxtb	r3, r3
 800f9d0:	4619      	mov	r1, r3
 800f9d2:	68f8      	ldr	r0, [r7, #12]
 800f9d4:	f000 fa31 	bl	800fe3a <USBD_CoreFindEP>
 800f9d8:	4603      	mov	r3, r0
 800f9da:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f9dc:	7dbb      	ldrb	r3, [r7, #22]
 800f9de:	2bff      	cmp	r3, #255	; 0xff
 800f9e0:	d025      	beq.n	800fa2e <USBD_LL_DataOutStage+0x15c>
 800f9e2:	7dbb      	ldrb	r3, [r7, #22]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d122      	bne.n	800fa2e <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9ee:	b2db      	uxtb	r3, r3
 800f9f0:	2b03      	cmp	r3, #3
 800f9f2:	d117      	bne.n	800fa24 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800f9f4:	7dba      	ldrb	r2, [r7, #22]
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	32ae      	adds	r2, #174	; 0xae
 800f9fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9fe:	699b      	ldr	r3, [r3, #24]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d00f      	beq.n	800fa24 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800fa04:	7dba      	ldrb	r2, [r7, #22]
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800fa0c:	7dba      	ldrb	r2, [r7, #22]
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	32ae      	adds	r2, #174	; 0xae
 800fa12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa16:	699b      	ldr	r3, [r3, #24]
 800fa18:	7afa      	ldrb	r2, [r7, #11]
 800fa1a:	4611      	mov	r1, r2
 800fa1c:	68f8      	ldr	r0, [r7, #12]
 800fa1e:	4798      	blx	r3
 800fa20:	4603      	mov	r3, r0
 800fa22:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800fa24:	7dfb      	ldrb	r3, [r7, #23]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d001      	beq.n	800fa2e <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800fa2a:	7dfb      	ldrb	r3, [r7, #23]
 800fa2c:	e000      	b.n	800fa30 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800fa2e:	2300      	movs	r3, #0
}
 800fa30:	4618      	mov	r0, r3
 800fa32:	3718      	adds	r7, #24
 800fa34:	46bd      	mov	sp, r7
 800fa36:	bd80      	pop	{r7, pc}

0800fa38 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b086      	sub	sp, #24
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	60f8      	str	r0, [r7, #12]
 800fa40:	460b      	mov	r3, r1
 800fa42:	607a      	str	r2, [r7, #4]
 800fa44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800fa46:	7afb      	ldrb	r3, [r7, #11]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d16f      	bne.n	800fb2c <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	3314      	adds	r3, #20
 800fa50:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fa58:	2b02      	cmp	r3, #2
 800fa5a:	d15a      	bne.n	800fb12 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800fa5c:	693b      	ldr	r3, [r7, #16]
 800fa5e:	689a      	ldr	r2, [r3, #8]
 800fa60:	693b      	ldr	r3, [r7, #16]
 800fa62:	68db      	ldr	r3, [r3, #12]
 800fa64:	429a      	cmp	r2, r3
 800fa66:	d914      	bls.n	800fa92 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800fa68:	693b      	ldr	r3, [r7, #16]
 800fa6a:	689a      	ldr	r2, [r3, #8]
 800fa6c:	693b      	ldr	r3, [r7, #16]
 800fa6e:	68db      	ldr	r3, [r3, #12]
 800fa70:	1ad2      	subs	r2, r2, r3
 800fa72:	693b      	ldr	r3, [r7, #16]
 800fa74:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800fa76:	693b      	ldr	r3, [r7, #16]
 800fa78:	689b      	ldr	r3, [r3, #8]
 800fa7a:	461a      	mov	r2, r3
 800fa7c:	6879      	ldr	r1, [r7, #4]
 800fa7e:	68f8      	ldr	r0, [r7, #12]
 800fa80:	f001 f8d7 	bl	8010c32 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fa84:	2300      	movs	r3, #0
 800fa86:	2200      	movs	r2, #0
 800fa88:	2100      	movs	r1, #0
 800fa8a:	68f8      	ldr	r0, [r7, #12]
 800fa8c:	f007 ff4d 	bl	801792a <USBD_LL_PrepareReceive>
 800fa90:	e03f      	b.n	800fb12 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800fa92:	693b      	ldr	r3, [r7, #16]
 800fa94:	68da      	ldr	r2, [r3, #12]
 800fa96:	693b      	ldr	r3, [r7, #16]
 800fa98:	689b      	ldr	r3, [r3, #8]
 800fa9a:	429a      	cmp	r2, r3
 800fa9c:	d11c      	bne.n	800fad8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800fa9e:	693b      	ldr	r3, [r7, #16]
 800faa0:	685a      	ldr	r2, [r3, #4]
 800faa2:	693b      	ldr	r3, [r7, #16]
 800faa4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800faa6:	429a      	cmp	r2, r3
 800faa8:	d316      	bcc.n	800fad8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800faaa:	693b      	ldr	r3, [r7, #16]
 800faac:	685a      	ldr	r2, [r3, #4]
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800fab4:	429a      	cmp	r2, r3
 800fab6:	d20f      	bcs.n	800fad8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800fab8:	2200      	movs	r2, #0
 800faba:	2100      	movs	r1, #0
 800fabc:	68f8      	ldr	r0, [r7, #12]
 800fabe:	f001 f8b8 	bl	8010c32 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	2200      	movs	r2, #0
 800fac6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800faca:	2300      	movs	r3, #0
 800facc:	2200      	movs	r2, #0
 800face:	2100      	movs	r1, #0
 800fad0:	68f8      	ldr	r0, [r7, #12]
 800fad2:	f007 ff2a 	bl	801792a <USBD_LL_PrepareReceive>
 800fad6:	e01c      	b.n	800fb12 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fade:	b2db      	uxtb	r3, r3
 800fae0:	2b03      	cmp	r3, #3
 800fae2:	d10f      	bne.n	800fb04 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800faea:	68db      	ldr	r3, [r3, #12]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d009      	beq.n	800fb04 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	2200      	movs	r2, #0
 800faf4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fafe:	68db      	ldr	r3, [r3, #12]
 800fb00:	68f8      	ldr	r0, [r7, #12]
 800fb02:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fb04:	2180      	movs	r1, #128	; 0x80
 800fb06:	68f8      	ldr	r0, [r7, #12]
 800fb08:	f007 fe65 	bl	80177d6 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800fb0c:	68f8      	ldr	r0, [r7, #12]
 800fb0e:	f001 f8c5 	bl	8010c9c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d03a      	beq.n	800fb92 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800fb1c:	68f8      	ldr	r0, [r7, #12]
 800fb1e:	f7ff fe42 	bl	800f7a6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	2200      	movs	r2, #0
 800fb26:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800fb2a:	e032      	b.n	800fb92 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800fb2c:	7afb      	ldrb	r3, [r7, #11]
 800fb2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fb32:	b2db      	uxtb	r3, r3
 800fb34:	4619      	mov	r1, r3
 800fb36:	68f8      	ldr	r0, [r7, #12]
 800fb38:	f000 f97f 	bl	800fe3a <USBD_CoreFindEP>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fb40:	7dfb      	ldrb	r3, [r7, #23]
 800fb42:	2bff      	cmp	r3, #255	; 0xff
 800fb44:	d025      	beq.n	800fb92 <USBD_LL_DataInStage+0x15a>
 800fb46:	7dfb      	ldrb	r3, [r7, #23]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d122      	bne.n	800fb92 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb52:	b2db      	uxtb	r3, r3
 800fb54:	2b03      	cmp	r3, #3
 800fb56:	d11c      	bne.n	800fb92 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800fb58:	7dfa      	ldrb	r2, [r7, #23]
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	32ae      	adds	r2, #174	; 0xae
 800fb5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb62:	695b      	ldr	r3, [r3, #20]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d014      	beq.n	800fb92 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800fb68:	7dfa      	ldrb	r2, [r7, #23]
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800fb70:	7dfa      	ldrb	r2, [r7, #23]
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	32ae      	adds	r2, #174	; 0xae
 800fb76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb7a:	695b      	ldr	r3, [r3, #20]
 800fb7c:	7afa      	ldrb	r2, [r7, #11]
 800fb7e:	4611      	mov	r1, r2
 800fb80:	68f8      	ldr	r0, [r7, #12]
 800fb82:	4798      	blx	r3
 800fb84:	4603      	mov	r3, r0
 800fb86:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800fb88:	7dbb      	ldrb	r3, [r7, #22]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d001      	beq.n	800fb92 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800fb8e:	7dbb      	ldrb	r3, [r7, #22]
 800fb90:	e000      	b.n	800fb94 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800fb92:	2300      	movs	r3, #0
}
 800fb94:	4618      	mov	r0, r3
 800fb96:	3718      	adds	r7, #24
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	bd80      	pop	{r7, pc}

0800fb9c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b084      	sub	sp, #16
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800fba4:	2300      	movs	r3, #0
 800fba6:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	2201      	movs	r2, #1
 800fbac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	2200      	movs	r2, #0
 800fbbc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	2200      	movs	r2, #0
 800fbca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d014      	beq.n	800fc02 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbde:	685b      	ldr	r3, [r3, #4]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d00e      	beq.n	800fc02 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbea:	685b      	ldr	r3, [r3, #4]
 800fbec:	687a      	ldr	r2, [r7, #4]
 800fbee:	6852      	ldr	r2, [r2, #4]
 800fbf0:	b2d2      	uxtb	r2, r2
 800fbf2:	4611      	mov	r1, r2
 800fbf4:	6878      	ldr	r0, [r7, #4]
 800fbf6:	4798      	blx	r3
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d001      	beq.n	800fc02 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800fbfe:	2303      	movs	r3, #3
 800fc00:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fc02:	2340      	movs	r3, #64	; 0x40
 800fc04:	2200      	movs	r2, #0
 800fc06:	2100      	movs	r1, #0
 800fc08:	6878      	ldr	r0, [r7, #4]
 800fc0a:	f007 fd80 	bl	801770e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	2201      	movs	r2, #1
 800fc12:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	2240      	movs	r2, #64	; 0x40
 800fc1a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fc1e:	2340      	movs	r3, #64	; 0x40
 800fc20:	2200      	movs	r2, #0
 800fc22:	2180      	movs	r1, #128	; 0x80
 800fc24:	6878      	ldr	r0, [r7, #4]
 800fc26:	f007 fd72 	bl	801770e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	2201      	movs	r2, #1
 800fc2e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	2240      	movs	r2, #64	; 0x40
 800fc34:	621a      	str	r2, [r3, #32]

  return ret;
 800fc36:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc38:	4618      	mov	r0, r3
 800fc3a:	3710      	adds	r7, #16
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bd80      	pop	{r7, pc}

0800fc40 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800fc40:	b480      	push	{r7}
 800fc42:	b083      	sub	sp, #12
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
 800fc48:	460b      	mov	r3, r1
 800fc4a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	78fa      	ldrb	r2, [r7, #3]
 800fc50:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800fc52:	2300      	movs	r3, #0
}
 800fc54:	4618      	mov	r0, r3
 800fc56:	370c      	adds	r7, #12
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5e:	4770      	bx	lr

0800fc60 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800fc60:	b480      	push	{r7}
 800fc62:	b083      	sub	sp, #12
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc6e:	b2da      	uxtb	r2, r3
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	2204      	movs	r2, #4
 800fc7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800fc7e:	2300      	movs	r3, #0
}
 800fc80:	4618      	mov	r0, r3
 800fc82:	370c      	adds	r7, #12
 800fc84:	46bd      	mov	sp, r7
 800fc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8a:	4770      	bx	lr

0800fc8c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800fc8c:	b480      	push	{r7}
 800fc8e:	b083      	sub	sp, #12
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc9a:	b2db      	uxtb	r3, r3
 800fc9c:	2b04      	cmp	r3, #4
 800fc9e:	d106      	bne.n	800fcae <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800fca6:	b2da      	uxtb	r2, r3
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800fcae:	2300      	movs	r3, #0
}
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	370c      	adds	r7, #12
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcba:	4770      	bx	lr

0800fcbc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b082      	sub	sp, #8
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fcca:	b2db      	uxtb	r3, r3
 800fccc:	2b03      	cmp	r3, #3
 800fcce:	d110      	bne.n	800fcf2 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d00b      	beq.n	800fcf2 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fce0:	69db      	ldr	r3, [r3, #28]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d005      	beq.n	800fcf2 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fcec:	69db      	ldr	r3, [r3, #28]
 800fcee:	6878      	ldr	r0, [r7, #4]
 800fcf0:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800fcf2:	2300      	movs	r3, #0
}
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	3708      	adds	r7, #8
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}

0800fcfc <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b082      	sub	sp, #8
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	6078      	str	r0, [r7, #4]
 800fd04:	460b      	mov	r3, r1
 800fd06:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	32ae      	adds	r2, #174	; 0xae
 800fd12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d101      	bne.n	800fd1e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800fd1a:	2303      	movs	r3, #3
 800fd1c:	e01c      	b.n	800fd58 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd24:	b2db      	uxtb	r3, r3
 800fd26:	2b03      	cmp	r3, #3
 800fd28:	d115      	bne.n	800fd56 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	32ae      	adds	r2, #174	; 0xae
 800fd34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd38:	6a1b      	ldr	r3, [r3, #32]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d00b      	beq.n	800fd56 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	32ae      	adds	r2, #174	; 0xae
 800fd48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd4c:	6a1b      	ldr	r3, [r3, #32]
 800fd4e:	78fa      	ldrb	r2, [r7, #3]
 800fd50:	4611      	mov	r1, r2
 800fd52:	6878      	ldr	r0, [r7, #4]
 800fd54:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fd56:	2300      	movs	r3, #0
}
 800fd58:	4618      	mov	r0, r3
 800fd5a:	3708      	adds	r7, #8
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bd80      	pop	{r7, pc}

0800fd60 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b082      	sub	sp, #8
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
 800fd68:	460b      	mov	r3, r1
 800fd6a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	32ae      	adds	r2, #174	; 0xae
 800fd76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d101      	bne.n	800fd82 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800fd7e:	2303      	movs	r3, #3
 800fd80:	e01c      	b.n	800fdbc <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd88:	b2db      	uxtb	r3, r3
 800fd8a:	2b03      	cmp	r3, #3
 800fd8c:	d115      	bne.n	800fdba <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	32ae      	adds	r2, #174	; 0xae
 800fd98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d00b      	beq.n	800fdba <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	32ae      	adds	r2, #174	; 0xae
 800fdac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdb2:	78fa      	ldrb	r2, [r7, #3]
 800fdb4:	4611      	mov	r1, r2
 800fdb6:	6878      	ldr	r0, [r7, #4]
 800fdb8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fdba:	2300      	movs	r3, #0
}
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	3708      	adds	r7, #8
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	bd80      	pop	{r7, pc}

0800fdc4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800fdc4:	b480      	push	{r7}
 800fdc6:	b083      	sub	sp, #12
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fdcc:	2300      	movs	r3, #0
}
 800fdce:	4618      	mov	r0, r3
 800fdd0:	370c      	adds	r7, #12
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd8:	4770      	bx	lr

0800fdda <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800fdda:	b580      	push	{r7, lr}
 800fddc:	b084      	sub	sp, #16
 800fdde:	af00      	add	r7, sp, #0
 800fde0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800fde2:	2300      	movs	r3, #0
 800fde4:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	2201      	movs	r2, #1
 800fdea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d00e      	beq.n	800fe16 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fdfe:	685b      	ldr	r3, [r3, #4]
 800fe00:	687a      	ldr	r2, [r7, #4]
 800fe02:	6852      	ldr	r2, [r2, #4]
 800fe04:	b2d2      	uxtb	r2, r2
 800fe06:	4611      	mov	r1, r2
 800fe08:	6878      	ldr	r0, [r7, #4]
 800fe0a:	4798      	blx	r3
 800fe0c:	4603      	mov	r3, r0
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d001      	beq.n	800fe16 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800fe12:	2303      	movs	r3, #3
 800fe14:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fe16:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe18:	4618      	mov	r0, r3
 800fe1a:	3710      	adds	r7, #16
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}

0800fe20 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800fe20:	b480      	push	{r7}
 800fe22:	b083      	sub	sp, #12
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
 800fe28:	460b      	mov	r3, r1
 800fe2a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800fe2c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800fe2e:	4618      	mov	r0, r3
 800fe30:	370c      	adds	r7, #12
 800fe32:	46bd      	mov	sp, r7
 800fe34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe38:	4770      	bx	lr

0800fe3a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800fe3a:	b480      	push	{r7}
 800fe3c:	b083      	sub	sp, #12
 800fe3e:	af00      	add	r7, sp, #0
 800fe40:	6078      	str	r0, [r7, #4]
 800fe42:	460b      	mov	r3, r1
 800fe44:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800fe46:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800fe48:	4618      	mov	r0, r3
 800fe4a:	370c      	adds	r7, #12
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe52:	4770      	bx	lr

0800fe54 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b086      	sub	sp, #24
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
 800fe5c:	460b      	mov	r3, r1
 800fe5e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800fe68:	2300      	movs	r3, #0
 800fe6a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	885b      	ldrh	r3, [r3, #2]
 800fe70:	b29a      	uxth	r2, r3
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	781b      	ldrb	r3, [r3, #0]
 800fe76:	b29b      	uxth	r3, r3
 800fe78:	429a      	cmp	r2, r3
 800fe7a:	d920      	bls.n	800febe <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	781b      	ldrb	r3, [r3, #0]
 800fe80:	b29b      	uxth	r3, r3
 800fe82:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800fe84:	e013      	b.n	800feae <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800fe86:	f107 030a 	add.w	r3, r7, #10
 800fe8a:	4619      	mov	r1, r3
 800fe8c:	6978      	ldr	r0, [r7, #20]
 800fe8e:	f000 f81b 	bl	800fec8 <USBD_GetNextDesc>
 800fe92:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800fe94:	697b      	ldr	r3, [r7, #20]
 800fe96:	785b      	ldrb	r3, [r3, #1]
 800fe98:	2b05      	cmp	r3, #5
 800fe9a:	d108      	bne.n	800feae <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800fe9c:	697b      	ldr	r3, [r7, #20]
 800fe9e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800fea0:	693b      	ldr	r3, [r7, #16]
 800fea2:	789b      	ldrb	r3, [r3, #2]
 800fea4:	78fa      	ldrb	r2, [r7, #3]
 800fea6:	429a      	cmp	r2, r3
 800fea8:	d008      	beq.n	800febc <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800feaa:	2300      	movs	r3, #0
 800feac:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	885b      	ldrh	r3, [r3, #2]
 800feb2:	b29a      	uxth	r2, r3
 800feb4:	897b      	ldrh	r3, [r7, #10]
 800feb6:	429a      	cmp	r2, r3
 800feb8:	d8e5      	bhi.n	800fe86 <USBD_GetEpDesc+0x32>
 800feba:	e000      	b.n	800febe <USBD_GetEpDesc+0x6a>
          break;
 800febc:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800febe:	693b      	ldr	r3, [r7, #16]
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	3718      	adds	r7, #24
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}

0800fec8 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800fec8:	b480      	push	{r7}
 800feca:	b085      	sub	sp, #20
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
 800fed0:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800fed6:	683b      	ldr	r3, [r7, #0]
 800fed8:	881a      	ldrh	r2, [r3, #0]
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	781b      	ldrb	r3, [r3, #0]
 800fede:	b29b      	uxth	r3, r3
 800fee0:	4413      	add	r3, r2
 800fee2:	b29a      	uxth	r2, r3
 800fee4:	683b      	ldr	r3, [r7, #0]
 800fee6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	781b      	ldrb	r3, [r3, #0]
 800feec:	461a      	mov	r2, r3
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	4413      	add	r3, r2
 800fef2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800fef4:	68fb      	ldr	r3, [r7, #12]
}
 800fef6:	4618      	mov	r0, r3
 800fef8:	3714      	adds	r7, #20
 800fefa:	46bd      	mov	sp, r7
 800fefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff00:	4770      	bx	lr

0800ff02 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ff02:	b480      	push	{r7}
 800ff04:	b087      	sub	sp, #28
 800ff06:	af00      	add	r7, sp, #0
 800ff08:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ff0e:	697b      	ldr	r3, [r7, #20]
 800ff10:	781b      	ldrb	r3, [r3, #0]
 800ff12:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ff14:	697b      	ldr	r3, [r7, #20]
 800ff16:	3301      	adds	r3, #1
 800ff18:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ff1a:	697b      	ldr	r3, [r7, #20]
 800ff1c:	781b      	ldrb	r3, [r3, #0]
 800ff1e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ff20:	8a3b      	ldrh	r3, [r7, #16]
 800ff22:	021b      	lsls	r3, r3, #8
 800ff24:	b21a      	sxth	r2, r3
 800ff26:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ff2a:	4313      	orrs	r3, r2
 800ff2c:	b21b      	sxth	r3, r3
 800ff2e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ff30:	89fb      	ldrh	r3, [r7, #14]
}
 800ff32:	4618      	mov	r0, r3
 800ff34:	371c      	adds	r7, #28
 800ff36:	46bd      	mov	sp, r7
 800ff38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3c:	4770      	bx	lr
	...

0800ff40 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b084      	sub	sp, #16
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
 800ff48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ff4e:	683b      	ldr	r3, [r7, #0]
 800ff50:	781b      	ldrb	r3, [r3, #0]
 800ff52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ff56:	2b40      	cmp	r3, #64	; 0x40
 800ff58:	d005      	beq.n	800ff66 <USBD_StdDevReq+0x26>
 800ff5a:	2b40      	cmp	r3, #64	; 0x40
 800ff5c:	d857      	bhi.n	801000e <USBD_StdDevReq+0xce>
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d00f      	beq.n	800ff82 <USBD_StdDevReq+0x42>
 800ff62:	2b20      	cmp	r3, #32
 800ff64:	d153      	bne.n	801000e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	32ae      	adds	r2, #174	; 0xae
 800ff70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff74:	689b      	ldr	r3, [r3, #8]
 800ff76:	6839      	ldr	r1, [r7, #0]
 800ff78:	6878      	ldr	r0, [r7, #4]
 800ff7a:	4798      	blx	r3
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	73fb      	strb	r3, [r7, #15]
      break;
 800ff80:	e04a      	b.n	8010018 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	785b      	ldrb	r3, [r3, #1]
 800ff86:	2b09      	cmp	r3, #9
 800ff88:	d83b      	bhi.n	8010002 <USBD_StdDevReq+0xc2>
 800ff8a:	a201      	add	r2, pc, #4	; (adr r2, 800ff90 <USBD_StdDevReq+0x50>)
 800ff8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff90:	0800ffe5 	.word	0x0800ffe5
 800ff94:	0800fff9 	.word	0x0800fff9
 800ff98:	08010003 	.word	0x08010003
 800ff9c:	0800ffef 	.word	0x0800ffef
 800ffa0:	08010003 	.word	0x08010003
 800ffa4:	0800ffc3 	.word	0x0800ffc3
 800ffa8:	0800ffb9 	.word	0x0800ffb9
 800ffac:	08010003 	.word	0x08010003
 800ffb0:	0800ffdb 	.word	0x0800ffdb
 800ffb4:	0800ffcd 	.word	0x0800ffcd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ffb8:	6839      	ldr	r1, [r7, #0]
 800ffba:	6878      	ldr	r0, [r7, #4]
 800ffbc:	f000 fa3c 	bl	8010438 <USBD_GetDescriptor>
          break;
 800ffc0:	e024      	b.n	801000c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ffc2:	6839      	ldr	r1, [r7, #0]
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	f000 fbcb 	bl	8010760 <USBD_SetAddress>
          break;
 800ffca:	e01f      	b.n	801000c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ffcc:	6839      	ldr	r1, [r7, #0]
 800ffce:	6878      	ldr	r0, [r7, #4]
 800ffd0:	f000 fc0a 	bl	80107e8 <USBD_SetConfig>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	73fb      	strb	r3, [r7, #15]
          break;
 800ffd8:	e018      	b.n	801000c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ffda:	6839      	ldr	r1, [r7, #0]
 800ffdc:	6878      	ldr	r0, [r7, #4]
 800ffde:	f000 fcad 	bl	801093c <USBD_GetConfig>
          break;
 800ffe2:	e013      	b.n	801000c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ffe4:	6839      	ldr	r1, [r7, #0]
 800ffe6:	6878      	ldr	r0, [r7, #4]
 800ffe8:	f000 fcde 	bl	80109a8 <USBD_GetStatus>
          break;
 800ffec:	e00e      	b.n	801000c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ffee:	6839      	ldr	r1, [r7, #0]
 800fff0:	6878      	ldr	r0, [r7, #4]
 800fff2:	f000 fd0d 	bl	8010a10 <USBD_SetFeature>
          break;
 800fff6:	e009      	b.n	801000c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800fff8:	6839      	ldr	r1, [r7, #0]
 800fffa:	6878      	ldr	r0, [r7, #4]
 800fffc:	f000 fd31 	bl	8010a62 <USBD_ClrFeature>
          break;
 8010000:	e004      	b.n	801000c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8010002:	6839      	ldr	r1, [r7, #0]
 8010004:	6878      	ldr	r0, [r7, #4]
 8010006:	f000 fd88 	bl	8010b1a <USBD_CtlError>
          break;
 801000a:	bf00      	nop
      }
      break;
 801000c:	e004      	b.n	8010018 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801000e:	6839      	ldr	r1, [r7, #0]
 8010010:	6878      	ldr	r0, [r7, #4]
 8010012:	f000 fd82 	bl	8010b1a <USBD_CtlError>
      break;
 8010016:	bf00      	nop
  }

  return ret;
 8010018:	7bfb      	ldrb	r3, [r7, #15]
}
 801001a:	4618      	mov	r0, r3
 801001c:	3710      	adds	r7, #16
 801001e:	46bd      	mov	sp, r7
 8010020:	bd80      	pop	{r7, pc}
 8010022:	bf00      	nop

08010024 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b084      	sub	sp, #16
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
 801002c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801002e:	2300      	movs	r3, #0
 8010030:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010032:	683b      	ldr	r3, [r7, #0]
 8010034:	781b      	ldrb	r3, [r3, #0]
 8010036:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801003a:	2b40      	cmp	r3, #64	; 0x40
 801003c:	d005      	beq.n	801004a <USBD_StdItfReq+0x26>
 801003e:	2b40      	cmp	r3, #64	; 0x40
 8010040:	d852      	bhi.n	80100e8 <USBD_StdItfReq+0xc4>
 8010042:	2b00      	cmp	r3, #0
 8010044:	d001      	beq.n	801004a <USBD_StdItfReq+0x26>
 8010046:	2b20      	cmp	r3, #32
 8010048:	d14e      	bne.n	80100e8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010050:	b2db      	uxtb	r3, r3
 8010052:	3b01      	subs	r3, #1
 8010054:	2b02      	cmp	r3, #2
 8010056:	d840      	bhi.n	80100da <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	889b      	ldrh	r3, [r3, #4]
 801005c:	b2db      	uxtb	r3, r3
 801005e:	2b01      	cmp	r3, #1
 8010060:	d836      	bhi.n	80100d0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8010062:	683b      	ldr	r3, [r7, #0]
 8010064:	889b      	ldrh	r3, [r3, #4]
 8010066:	b2db      	uxtb	r3, r3
 8010068:	4619      	mov	r1, r3
 801006a:	6878      	ldr	r0, [r7, #4]
 801006c:	f7ff fed8 	bl	800fe20 <USBD_CoreFindIF>
 8010070:	4603      	mov	r3, r0
 8010072:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010074:	7bbb      	ldrb	r3, [r7, #14]
 8010076:	2bff      	cmp	r3, #255	; 0xff
 8010078:	d01d      	beq.n	80100b6 <USBD_StdItfReq+0x92>
 801007a:	7bbb      	ldrb	r3, [r7, #14]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d11a      	bne.n	80100b6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8010080:	7bba      	ldrb	r2, [r7, #14]
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	32ae      	adds	r2, #174	; 0xae
 8010086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801008a:	689b      	ldr	r3, [r3, #8]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d00f      	beq.n	80100b0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8010090:	7bba      	ldrb	r2, [r7, #14]
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010098:	7bba      	ldrb	r2, [r7, #14]
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	32ae      	adds	r2, #174	; 0xae
 801009e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100a2:	689b      	ldr	r3, [r3, #8]
 80100a4:	6839      	ldr	r1, [r7, #0]
 80100a6:	6878      	ldr	r0, [r7, #4]
 80100a8:	4798      	blx	r3
 80100aa:	4603      	mov	r3, r0
 80100ac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80100ae:	e004      	b.n	80100ba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80100b0:	2303      	movs	r3, #3
 80100b2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80100b4:	e001      	b.n	80100ba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80100b6:	2303      	movs	r3, #3
 80100b8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	88db      	ldrh	r3, [r3, #6]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d110      	bne.n	80100e4 <USBD_StdItfReq+0xc0>
 80100c2:	7bfb      	ldrb	r3, [r7, #15]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d10d      	bne.n	80100e4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80100c8:	6878      	ldr	r0, [r7, #4]
 80100ca:	f000 fdd4 	bl	8010c76 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80100ce:	e009      	b.n	80100e4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80100d0:	6839      	ldr	r1, [r7, #0]
 80100d2:	6878      	ldr	r0, [r7, #4]
 80100d4:	f000 fd21 	bl	8010b1a <USBD_CtlError>
          break;
 80100d8:	e004      	b.n	80100e4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80100da:	6839      	ldr	r1, [r7, #0]
 80100dc:	6878      	ldr	r0, [r7, #4]
 80100de:	f000 fd1c 	bl	8010b1a <USBD_CtlError>
          break;
 80100e2:	e000      	b.n	80100e6 <USBD_StdItfReq+0xc2>
          break;
 80100e4:	bf00      	nop
      }
      break;
 80100e6:	e004      	b.n	80100f2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80100e8:	6839      	ldr	r1, [r7, #0]
 80100ea:	6878      	ldr	r0, [r7, #4]
 80100ec:	f000 fd15 	bl	8010b1a <USBD_CtlError>
      break;
 80100f0:	bf00      	nop
  }

  return ret;
 80100f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80100f4:	4618      	mov	r0, r3
 80100f6:	3710      	adds	r7, #16
 80100f8:	46bd      	mov	sp, r7
 80100fa:	bd80      	pop	{r7, pc}

080100fc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b084      	sub	sp, #16
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
 8010104:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8010106:	2300      	movs	r3, #0
 8010108:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	889b      	ldrh	r3, [r3, #4]
 801010e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010110:	683b      	ldr	r3, [r7, #0]
 8010112:	781b      	ldrb	r3, [r3, #0]
 8010114:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010118:	2b40      	cmp	r3, #64	; 0x40
 801011a:	d007      	beq.n	801012c <USBD_StdEPReq+0x30>
 801011c:	2b40      	cmp	r3, #64	; 0x40
 801011e:	f200 817f 	bhi.w	8010420 <USBD_StdEPReq+0x324>
 8010122:	2b00      	cmp	r3, #0
 8010124:	d02a      	beq.n	801017c <USBD_StdEPReq+0x80>
 8010126:	2b20      	cmp	r3, #32
 8010128:	f040 817a 	bne.w	8010420 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801012c:	7bbb      	ldrb	r3, [r7, #14]
 801012e:	4619      	mov	r1, r3
 8010130:	6878      	ldr	r0, [r7, #4]
 8010132:	f7ff fe82 	bl	800fe3a <USBD_CoreFindEP>
 8010136:	4603      	mov	r3, r0
 8010138:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801013a:	7b7b      	ldrb	r3, [r7, #13]
 801013c:	2bff      	cmp	r3, #255	; 0xff
 801013e:	f000 8174 	beq.w	801042a <USBD_StdEPReq+0x32e>
 8010142:	7b7b      	ldrb	r3, [r7, #13]
 8010144:	2b00      	cmp	r3, #0
 8010146:	f040 8170 	bne.w	801042a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801014a:	7b7a      	ldrb	r2, [r7, #13]
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8010152:	7b7a      	ldrb	r2, [r7, #13]
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	32ae      	adds	r2, #174	; 0xae
 8010158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801015c:	689b      	ldr	r3, [r3, #8]
 801015e:	2b00      	cmp	r3, #0
 8010160:	f000 8163 	beq.w	801042a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8010164:	7b7a      	ldrb	r2, [r7, #13]
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	32ae      	adds	r2, #174	; 0xae
 801016a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801016e:	689b      	ldr	r3, [r3, #8]
 8010170:	6839      	ldr	r1, [r7, #0]
 8010172:	6878      	ldr	r0, [r7, #4]
 8010174:	4798      	blx	r3
 8010176:	4603      	mov	r3, r0
 8010178:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801017a:	e156      	b.n	801042a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	785b      	ldrb	r3, [r3, #1]
 8010180:	2b03      	cmp	r3, #3
 8010182:	d008      	beq.n	8010196 <USBD_StdEPReq+0x9a>
 8010184:	2b03      	cmp	r3, #3
 8010186:	f300 8145 	bgt.w	8010414 <USBD_StdEPReq+0x318>
 801018a:	2b00      	cmp	r3, #0
 801018c:	f000 809b 	beq.w	80102c6 <USBD_StdEPReq+0x1ca>
 8010190:	2b01      	cmp	r3, #1
 8010192:	d03c      	beq.n	801020e <USBD_StdEPReq+0x112>
 8010194:	e13e      	b.n	8010414 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801019c:	b2db      	uxtb	r3, r3
 801019e:	2b02      	cmp	r3, #2
 80101a0:	d002      	beq.n	80101a8 <USBD_StdEPReq+0xac>
 80101a2:	2b03      	cmp	r3, #3
 80101a4:	d016      	beq.n	80101d4 <USBD_StdEPReq+0xd8>
 80101a6:	e02c      	b.n	8010202 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80101a8:	7bbb      	ldrb	r3, [r7, #14]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d00d      	beq.n	80101ca <USBD_StdEPReq+0xce>
 80101ae:	7bbb      	ldrb	r3, [r7, #14]
 80101b0:	2b80      	cmp	r3, #128	; 0x80
 80101b2:	d00a      	beq.n	80101ca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80101b4:	7bbb      	ldrb	r3, [r7, #14]
 80101b6:	4619      	mov	r1, r3
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	f007 fb0c 	bl	80177d6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80101be:	2180      	movs	r1, #128	; 0x80
 80101c0:	6878      	ldr	r0, [r7, #4]
 80101c2:	f007 fb08 	bl	80177d6 <USBD_LL_StallEP>
 80101c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80101c8:	e020      	b.n	801020c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80101ca:	6839      	ldr	r1, [r7, #0]
 80101cc:	6878      	ldr	r0, [r7, #4]
 80101ce:	f000 fca4 	bl	8010b1a <USBD_CtlError>
              break;
 80101d2:	e01b      	b.n	801020c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80101d4:	683b      	ldr	r3, [r7, #0]
 80101d6:	885b      	ldrh	r3, [r3, #2]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d10e      	bne.n	80101fa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80101dc:	7bbb      	ldrb	r3, [r7, #14]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d00b      	beq.n	80101fa <USBD_StdEPReq+0xfe>
 80101e2:	7bbb      	ldrb	r3, [r7, #14]
 80101e4:	2b80      	cmp	r3, #128	; 0x80
 80101e6:	d008      	beq.n	80101fa <USBD_StdEPReq+0xfe>
 80101e8:	683b      	ldr	r3, [r7, #0]
 80101ea:	88db      	ldrh	r3, [r3, #6]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d104      	bne.n	80101fa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80101f0:	7bbb      	ldrb	r3, [r7, #14]
 80101f2:	4619      	mov	r1, r3
 80101f4:	6878      	ldr	r0, [r7, #4]
 80101f6:	f007 faee 	bl	80177d6 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80101fa:	6878      	ldr	r0, [r7, #4]
 80101fc:	f000 fd3b 	bl	8010c76 <USBD_CtlSendStatus>

              break;
 8010200:	e004      	b.n	801020c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8010202:	6839      	ldr	r1, [r7, #0]
 8010204:	6878      	ldr	r0, [r7, #4]
 8010206:	f000 fc88 	bl	8010b1a <USBD_CtlError>
              break;
 801020a:	bf00      	nop
          }
          break;
 801020c:	e107      	b.n	801041e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010214:	b2db      	uxtb	r3, r3
 8010216:	2b02      	cmp	r3, #2
 8010218:	d002      	beq.n	8010220 <USBD_StdEPReq+0x124>
 801021a:	2b03      	cmp	r3, #3
 801021c:	d016      	beq.n	801024c <USBD_StdEPReq+0x150>
 801021e:	e04b      	b.n	80102b8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010220:	7bbb      	ldrb	r3, [r7, #14]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d00d      	beq.n	8010242 <USBD_StdEPReq+0x146>
 8010226:	7bbb      	ldrb	r3, [r7, #14]
 8010228:	2b80      	cmp	r3, #128	; 0x80
 801022a:	d00a      	beq.n	8010242 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801022c:	7bbb      	ldrb	r3, [r7, #14]
 801022e:	4619      	mov	r1, r3
 8010230:	6878      	ldr	r0, [r7, #4]
 8010232:	f007 fad0 	bl	80177d6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010236:	2180      	movs	r1, #128	; 0x80
 8010238:	6878      	ldr	r0, [r7, #4]
 801023a:	f007 facc 	bl	80177d6 <USBD_LL_StallEP>
 801023e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010240:	e040      	b.n	80102c4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8010242:	6839      	ldr	r1, [r7, #0]
 8010244:	6878      	ldr	r0, [r7, #4]
 8010246:	f000 fc68 	bl	8010b1a <USBD_CtlError>
              break;
 801024a:	e03b      	b.n	80102c4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801024c:	683b      	ldr	r3, [r7, #0]
 801024e:	885b      	ldrh	r3, [r3, #2]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d136      	bne.n	80102c2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010254:	7bbb      	ldrb	r3, [r7, #14]
 8010256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801025a:	2b00      	cmp	r3, #0
 801025c:	d004      	beq.n	8010268 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801025e:	7bbb      	ldrb	r3, [r7, #14]
 8010260:	4619      	mov	r1, r3
 8010262:	6878      	ldr	r0, [r7, #4]
 8010264:	f007 fad6 	bl	8017814 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f000 fd04 	bl	8010c76 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801026e:	7bbb      	ldrb	r3, [r7, #14]
 8010270:	4619      	mov	r1, r3
 8010272:	6878      	ldr	r0, [r7, #4]
 8010274:	f7ff fde1 	bl	800fe3a <USBD_CoreFindEP>
 8010278:	4603      	mov	r3, r0
 801027a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801027c:	7b7b      	ldrb	r3, [r7, #13]
 801027e:	2bff      	cmp	r3, #255	; 0xff
 8010280:	d01f      	beq.n	80102c2 <USBD_StdEPReq+0x1c6>
 8010282:	7b7b      	ldrb	r3, [r7, #13]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d11c      	bne.n	80102c2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8010288:	7b7a      	ldrb	r2, [r7, #13]
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8010290:	7b7a      	ldrb	r2, [r7, #13]
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	32ae      	adds	r2, #174	; 0xae
 8010296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801029a:	689b      	ldr	r3, [r3, #8]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d010      	beq.n	80102c2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80102a0:	7b7a      	ldrb	r2, [r7, #13]
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	32ae      	adds	r2, #174	; 0xae
 80102a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102aa:	689b      	ldr	r3, [r3, #8]
 80102ac:	6839      	ldr	r1, [r7, #0]
 80102ae:	6878      	ldr	r0, [r7, #4]
 80102b0:	4798      	blx	r3
 80102b2:	4603      	mov	r3, r0
 80102b4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80102b6:	e004      	b.n	80102c2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80102b8:	6839      	ldr	r1, [r7, #0]
 80102ba:	6878      	ldr	r0, [r7, #4]
 80102bc:	f000 fc2d 	bl	8010b1a <USBD_CtlError>
              break;
 80102c0:	e000      	b.n	80102c4 <USBD_StdEPReq+0x1c8>
              break;
 80102c2:	bf00      	nop
          }
          break;
 80102c4:	e0ab      	b.n	801041e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80102cc:	b2db      	uxtb	r3, r3
 80102ce:	2b02      	cmp	r3, #2
 80102d0:	d002      	beq.n	80102d8 <USBD_StdEPReq+0x1dc>
 80102d2:	2b03      	cmp	r3, #3
 80102d4:	d032      	beq.n	801033c <USBD_StdEPReq+0x240>
 80102d6:	e097      	b.n	8010408 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80102d8:	7bbb      	ldrb	r3, [r7, #14]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d007      	beq.n	80102ee <USBD_StdEPReq+0x1f2>
 80102de:	7bbb      	ldrb	r3, [r7, #14]
 80102e0:	2b80      	cmp	r3, #128	; 0x80
 80102e2:	d004      	beq.n	80102ee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80102e4:	6839      	ldr	r1, [r7, #0]
 80102e6:	6878      	ldr	r0, [r7, #4]
 80102e8:	f000 fc17 	bl	8010b1a <USBD_CtlError>
                break;
 80102ec:	e091      	b.n	8010412 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80102ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	da0b      	bge.n	801030e <USBD_StdEPReq+0x212>
 80102f6:	7bbb      	ldrb	r3, [r7, #14]
 80102f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80102fc:	4613      	mov	r3, r2
 80102fe:	009b      	lsls	r3, r3, #2
 8010300:	4413      	add	r3, r2
 8010302:	009b      	lsls	r3, r3, #2
 8010304:	3310      	adds	r3, #16
 8010306:	687a      	ldr	r2, [r7, #4]
 8010308:	4413      	add	r3, r2
 801030a:	3304      	adds	r3, #4
 801030c:	e00b      	b.n	8010326 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801030e:	7bbb      	ldrb	r3, [r7, #14]
 8010310:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010314:	4613      	mov	r3, r2
 8010316:	009b      	lsls	r3, r3, #2
 8010318:	4413      	add	r3, r2
 801031a:	009b      	lsls	r3, r3, #2
 801031c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010320:	687a      	ldr	r2, [r7, #4]
 8010322:	4413      	add	r3, r2
 8010324:	3304      	adds	r3, #4
 8010326:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010328:	68bb      	ldr	r3, [r7, #8]
 801032a:	2200      	movs	r2, #0
 801032c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801032e:	68bb      	ldr	r3, [r7, #8]
 8010330:	2202      	movs	r2, #2
 8010332:	4619      	mov	r1, r3
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f000 fc61 	bl	8010bfc <USBD_CtlSendData>
              break;
 801033a:	e06a      	b.n	8010412 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801033c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010340:	2b00      	cmp	r3, #0
 8010342:	da11      	bge.n	8010368 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010344:	7bbb      	ldrb	r3, [r7, #14]
 8010346:	f003 020f 	and.w	r2, r3, #15
 801034a:	6879      	ldr	r1, [r7, #4]
 801034c:	4613      	mov	r3, r2
 801034e:	009b      	lsls	r3, r3, #2
 8010350:	4413      	add	r3, r2
 8010352:	009b      	lsls	r3, r3, #2
 8010354:	440b      	add	r3, r1
 8010356:	3324      	adds	r3, #36	; 0x24
 8010358:	881b      	ldrh	r3, [r3, #0]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d117      	bne.n	801038e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801035e:	6839      	ldr	r1, [r7, #0]
 8010360:	6878      	ldr	r0, [r7, #4]
 8010362:	f000 fbda 	bl	8010b1a <USBD_CtlError>
                  break;
 8010366:	e054      	b.n	8010412 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010368:	7bbb      	ldrb	r3, [r7, #14]
 801036a:	f003 020f 	and.w	r2, r3, #15
 801036e:	6879      	ldr	r1, [r7, #4]
 8010370:	4613      	mov	r3, r2
 8010372:	009b      	lsls	r3, r3, #2
 8010374:	4413      	add	r3, r2
 8010376:	009b      	lsls	r3, r3, #2
 8010378:	440b      	add	r3, r1
 801037a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801037e:	881b      	ldrh	r3, [r3, #0]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d104      	bne.n	801038e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010384:	6839      	ldr	r1, [r7, #0]
 8010386:	6878      	ldr	r0, [r7, #4]
 8010388:	f000 fbc7 	bl	8010b1a <USBD_CtlError>
                  break;
 801038c:	e041      	b.n	8010412 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801038e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010392:	2b00      	cmp	r3, #0
 8010394:	da0b      	bge.n	80103ae <USBD_StdEPReq+0x2b2>
 8010396:	7bbb      	ldrb	r3, [r7, #14]
 8010398:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801039c:	4613      	mov	r3, r2
 801039e:	009b      	lsls	r3, r3, #2
 80103a0:	4413      	add	r3, r2
 80103a2:	009b      	lsls	r3, r3, #2
 80103a4:	3310      	adds	r3, #16
 80103a6:	687a      	ldr	r2, [r7, #4]
 80103a8:	4413      	add	r3, r2
 80103aa:	3304      	adds	r3, #4
 80103ac:	e00b      	b.n	80103c6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80103ae:	7bbb      	ldrb	r3, [r7, #14]
 80103b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80103b4:	4613      	mov	r3, r2
 80103b6:	009b      	lsls	r3, r3, #2
 80103b8:	4413      	add	r3, r2
 80103ba:	009b      	lsls	r3, r3, #2
 80103bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80103c0:	687a      	ldr	r2, [r7, #4]
 80103c2:	4413      	add	r3, r2
 80103c4:	3304      	adds	r3, #4
 80103c6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80103c8:	7bbb      	ldrb	r3, [r7, #14]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d002      	beq.n	80103d4 <USBD_StdEPReq+0x2d8>
 80103ce:	7bbb      	ldrb	r3, [r7, #14]
 80103d0:	2b80      	cmp	r3, #128	; 0x80
 80103d2:	d103      	bne.n	80103dc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	2200      	movs	r2, #0
 80103d8:	601a      	str	r2, [r3, #0]
 80103da:	e00e      	b.n	80103fa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80103dc:	7bbb      	ldrb	r3, [r7, #14]
 80103de:	4619      	mov	r1, r3
 80103e0:	6878      	ldr	r0, [r7, #4]
 80103e2:	f007 fa36 	bl	8017852 <USBD_LL_IsStallEP>
 80103e6:	4603      	mov	r3, r0
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d003      	beq.n	80103f4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80103ec:	68bb      	ldr	r3, [r7, #8]
 80103ee:	2201      	movs	r2, #1
 80103f0:	601a      	str	r2, [r3, #0]
 80103f2:	e002      	b.n	80103fa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80103f4:	68bb      	ldr	r3, [r7, #8]
 80103f6:	2200      	movs	r2, #0
 80103f8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80103fa:	68bb      	ldr	r3, [r7, #8]
 80103fc:	2202      	movs	r2, #2
 80103fe:	4619      	mov	r1, r3
 8010400:	6878      	ldr	r0, [r7, #4]
 8010402:	f000 fbfb 	bl	8010bfc <USBD_CtlSendData>
              break;
 8010406:	e004      	b.n	8010412 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8010408:	6839      	ldr	r1, [r7, #0]
 801040a:	6878      	ldr	r0, [r7, #4]
 801040c:	f000 fb85 	bl	8010b1a <USBD_CtlError>
              break;
 8010410:	bf00      	nop
          }
          break;
 8010412:	e004      	b.n	801041e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8010414:	6839      	ldr	r1, [r7, #0]
 8010416:	6878      	ldr	r0, [r7, #4]
 8010418:	f000 fb7f 	bl	8010b1a <USBD_CtlError>
          break;
 801041c:	bf00      	nop
      }
      break;
 801041e:	e005      	b.n	801042c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8010420:	6839      	ldr	r1, [r7, #0]
 8010422:	6878      	ldr	r0, [r7, #4]
 8010424:	f000 fb79 	bl	8010b1a <USBD_CtlError>
      break;
 8010428:	e000      	b.n	801042c <USBD_StdEPReq+0x330>
      break;
 801042a:	bf00      	nop
  }

  return ret;
 801042c:	7bfb      	ldrb	r3, [r7, #15]
}
 801042e:	4618      	mov	r0, r3
 8010430:	3710      	adds	r7, #16
 8010432:	46bd      	mov	sp, r7
 8010434:	bd80      	pop	{r7, pc}
	...

08010438 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b084      	sub	sp, #16
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
 8010440:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010442:	2300      	movs	r3, #0
 8010444:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010446:	2300      	movs	r3, #0
 8010448:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801044a:	2300      	movs	r3, #0
 801044c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	885b      	ldrh	r3, [r3, #2]
 8010452:	0a1b      	lsrs	r3, r3, #8
 8010454:	b29b      	uxth	r3, r3
 8010456:	3b01      	subs	r3, #1
 8010458:	2b0e      	cmp	r3, #14
 801045a:	f200 8152 	bhi.w	8010702 <USBD_GetDescriptor+0x2ca>
 801045e:	a201      	add	r2, pc, #4	; (adr r2, 8010464 <USBD_GetDescriptor+0x2c>)
 8010460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010464:	080104d5 	.word	0x080104d5
 8010468:	080104ed 	.word	0x080104ed
 801046c:	0801052d 	.word	0x0801052d
 8010470:	08010703 	.word	0x08010703
 8010474:	08010703 	.word	0x08010703
 8010478:	080106a3 	.word	0x080106a3
 801047c:	080106cf 	.word	0x080106cf
 8010480:	08010703 	.word	0x08010703
 8010484:	08010703 	.word	0x08010703
 8010488:	08010703 	.word	0x08010703
 801048c:	08010703 	.word	0x08010703
 8010490:	08010703 	.word	0x08010703
 8010494:	08010703 	.word	0x08010703
 8010498:	08010703 	.word	0x08010703
 801049c:	080104a1 	.word	0x080104a1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80104a6:	69db      	ldr	r3, [r3, #28]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d00b      	beq.n	80104c4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80104b2:	69db      	ldr	r3, [r3, #28]
 80104b4:	687a      	ldr	r2, [r7, #4]
 80104b6:	7c12      	ldrb	r2, [r2, #16]
 80104b8:	f107 0108 	add.w	r1, r7, #8
 80104bc:	4610      	mov	r0, r2
 80104be:	4798      	blx	r3
 80104c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80104c2:	e126      	b.n	8010712 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80104c4:	6839      	ldr	r1, [r7, #0]
 80104c6:	6878      	ldr	r0, [r7, #4]
 80104c8:	f000 fb27 	bl	8010b1a <USBD_CtlError>
        err++;
 80104cc:	7afb      	ldrb	r3, [r7, #11]
 80104ce:	3301      	adds	r3, #1
 80104d0:	72fb      	strb	r3, [r7, #11]
      break;
 80104d2:	e11e      	b.n	8010712 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	687a      	ldr	r2, [r7, #4]
 80104de:	7c12      	ldrb	r2, [r2, #16]
 80104e0:	f107 0108 	add.w	r1, r7, #8
 80104e4:	4610      	mov	r0, r2
 80104e6:	4798      	blx	r3
 80104e8:	60f8      	str	r0, [r7, #12]
      break;
 80104ea:	e112      	b.n	8010712 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	7c1b      	ldrb	r3, [r3, #16]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d10d      	bne.n	8010510 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80104fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104fc:	f107 0208 	add.w	r2, r7, #8
 8010500:	4610      	mov	r0, r2
 8010502:	4798      	blx	r3
 8010504:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	3301      	adds	r3, #1
 801050a:	2202      	movs	r2, #2
 801050c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801050e:	e100      	b.n	8010712 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010518:	f107 0208 	add.w	r2, r7, #8
 801051c:	4610      	mov	r0, r2
 801051e:	4798      	blx	r3
 8010520:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	3301      	adds	r3, #1
 8010526:	2202      	movs	r2, #2
 8010528:	701a      	strb	r2, [r3, #0]
      break;
 801052a:	e0f2      	b.n	8010712 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801052c:	683b      	ldr	r3, [r7, #0]
 801052e:	885b      	ldrh	r3, [r3, #2]
 8010530:	b2db      	uxtb	r3, r3
 8010532:	2b05      	cmp	r3, #5
 8010534:	f200 80ac 	bhi.w	8010690 <USBD_GetDescriptor+0x258>
 8010538:	a201      	add	r2, pc, #4	; (adr r2, 8010540 <USBD_GetDescriptor+0x108>)
 801053a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801053e:	bf00      	nop
 8010540:	08010559 	.word	0x08010559
 8010544:	0801058d 	.word	0x0801058d
 8010548:	080105c1 	.word	0x080105c1
 801054c:	080105f5 	.word	0x080105f5
 8010550:	08010629 	.word	0x08010629
 8010554:	0801065d 	.word	0x0801065d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801055e:	685b      	ldr	r3, [r3, #4]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d00b      	beq.n	801057c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801056a:	685b      	ldr	r3, [r3, #4]
 801056c:	687a      	ldr	r2, [r7, #4]
 801056e:	7c12      	ldrb	r2, [r2, #16]
 8010570:	f107 0108 	add.w	r1, r7, #8
 8010574:	4610      	mov	r0, r2
 8010576:	4798      	blx	r3
 8010578:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801057a:	e091      	b.n	80106a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801057c:	6839      	ldr	r1, [r7, #0]
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f000 facb 	bl	8010b1a <USBD_CtlError>
            err++;
 8010584:	7afb      	ldrb	r3, [r7, #11]
 8010586:	3301      	adds	r3, #1
 8010588:	72fb      	strb	r3, [r7, #11]
          break;
 801058a:	e089      	b.n	80106a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010592:	689b      	ldr	r3, [r3, #8]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d00b      	beq.n	80105b0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801059e:	689b      	ldr	r3, [r3, #8]
 80105a0:	687a      	ldr	r2, [r7, #4]
 80105a2:	7c12      	ldrb	r2, [r2, #16]
 80105a4:	f107 0108 	add.w	r1, r7, #8
 80105a8:	4610      	mov	r0, r2
 80105aa:	4798      	blx	r3
 80105ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80105ae:	e077      	b.n	80106a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80105b0:	6839      	ldr	r1, [r7, #0]
 80105b2:	6878      	ldr	r0, [r7, #4]
 80105b4:	f000 fab1 	bl	8010b1a <USBD_CtlError>
            err++;
 80105b8:	7afb      	ldrb	r3, [r7, #11]
 80105ba:	3301      	adds	r3, #1
 80105bc:	72fb      	strb	r3, [r7, #11]
          break;
 80105be:	e06f      	b.n	80106a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80105c6:	68db      	ldr	r3, [r3, #12]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d00b      	beq.n	80105e4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80105d2:	68db      	ldr	r3, [r3, #12]
 80105d4:	687a      	ldr	r2, [r7, #4]
 80105d6:	7c12      	ldrb	r2, [r2, #16]
 80105d8:	f107 0108 	add.w	r1, r7, #8
 80105dc:	4610      	mov	r0, r2
 80105de:	4798      	blx	r3
 80105e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80105e2:	e05d      	b.n	80106a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80105e4:	6839      	ldr	r1, [r7, #0]
 80105e6:	6878      	ldr	r0, [r7, #4]
 80105e8:	f000 fa97 	bl	8010b1a <USBD_CtlError>
            err++;
 80105ec:	7afb      	ldrb	r3, [r7, #11]
 80105ee:	3301      	adds	r3, #1
 80105f0:	72fb      	strb	r3, [r7, #11]
          break;
 80105f2:	e055      	b.n	80106a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80105fa:	691b      	ldr	r3, [r3, #16]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d00b      	beq.n	8010618 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010606:	691b      	ldr	r3, [r3, #16]
 8010608:	687a      	ldr	r2, [r7, #4]
 801060a:	7c12      	ldrb	r2, [r2, #16]
 801060c:	f107 0108 	add.w	r1, r7, #8
 8010610:	4610      	mov	r0, r2
 8010612:	4798      	blx	r3
 8010614:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010616:	e043      	b.n	80106a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010618:	6839      	ldr	r1, [r7, #0]
 801061a:	6878      	ldr	r0, [r7, #4]
 801061c:	f000 fa7d 	bl	8010b1a <USBD_CtlError>
            err++;
 8010620:	7afb      	ldrb	r3, [r7, #11]
 8010622:	3301      	adds	r3, #1
 8010624:	72fb      	strb	r3, [r7, #11]
          break;
 8010626:	e03b      	b.n	80106a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801062e:	695b      	ldr	r3, [r3, #20]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d00b      	beq.n	801064c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801063a:	695b      	ldr	r3, [r3, #20]
 801063c:	687a      	ldr	r2, [r7, #4]
 801063e:	7c12      	ldrb	r2, [r2, #16]
 8010640:	f107 0108 	add.w	r1, r7, #8
 8010644:	4610      	mov	r0, r2
 8010646:	4798      	blx	r3
 8010648:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801064a:	e029      	b.n	80106a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801064c:	6839      	ldr	r1, [r7, #0]
 801064e:	6878      	ldr	r0, [r7, #4]
 8010650:	f000 fa63 	bl	8010b1a <USBD_CtlError>
            err++;
 8010654:	7afb      	ldrb	r3, [r7, #11]
 8010656:	3301      	adds	r3, #1
 8010658:	72fb      	strb	r3, [r7, #11]
          break;
 801065a:	e021      	b.n	80106a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010662:	699b      	ldr	r3, [r3, #24]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d00b      	beq.n	8010680 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801066e:	699b      	ldr	r3, [r3, #24]
 8010670:	687a      	ldr	r2, [r7, #4]
 8010672:	7c12      	ldrb	r2, [r2, #16]
 8010674:	f107 0108 	add.w	r1, r7, #8
 8010678:	4610      	mov	r0, r2
 801067a:	4798      	blx	r3
 801067c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801067e:	e00f      	b.n	80106a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010680:	6839      	ldr	r1, [r7, #0]
 8010682:	6878      	ldr	r0, [r7, #4]
 8010684:	f000 fa49 	bl	8010b1a <USBD_CtlError>
            err++;
 8010688:	7afb      	ldrb	r3, [r7, #11]
 801068a:	3301      	adds	r3, #1
 801068c:	72fb      	strb	r3, [r7, #11]
          break;
 801068e:	e007      	b.n	80106a0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010690:	6839      	ldr	r1, [r7, #0]
 8010692:	6878      	ldr	r0, [r7, #4]
 8010694:	f000 fa41 	bl	8010b1a <USBD_CtlError>
          err++;
 8010698:	7afb      	ldrb	r3, [r7, #11]
 801069a:	3301      	adds	r3, #1
 801069c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801069e:	bf00      	nop
      }
      break;
 80106a0:	e037      	b.n	8010712 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	7c1b      	ldrb	r3, [r3, #16]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d109      	bne.n	80106be <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80106b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106b2:	f107 0208 	add.w	r2, r7, #8
 80106b6:	4610      	mov	r0, r2
 80106b8:	4798      	blx	r3
 80106ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80106bc:	e029      	b.n	8010712 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80106be:	6839      	ldr	r1, [r7, #0]
 80106c0:	6878      	ldr	r0, [r7, #4]
 80106c2:	f000 fa2a 	bl	8010b1a <USBD_CtlError>
        err++;
 80106c6:	7afb      	ldrb	r3, [r7, #11]
 80106c8:	3301      	adds	r3, #1
 80106ca:	72fb      	strb	r3, [r7, #11]
      break;
 80106cc:	e021      	b.n	8010712 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	7c1b      	ldrb	r3, [r3, #16]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d10d      	bne.n	80106f2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80106dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106de:	f107 0208 	add.w	r2, r7, #8
 80106e2:	4610      	mov	r0, r2
 80106e4:	4798      	blx	r3
 80106e6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	3301      	adds	r3, #1
 80106ec:	2207      	movs	r2, #7
 80106ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80106f0:	e00f      	b.n	8010712 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80106f2:	6839      	ldr	r1, [r7, #0]
 80106f4:	6878      	ldr	r0, [r7, #4]
 80106f6:	f000 fa10 	bl	8010b1a <USBD_CtlError>
        err++;
 80106fa:	7afb      	ldrb	r3, [r7, #11]
 80106fc:	3301      	adds	r3, #1
 80106fe:	72fb      	strb	r3, [r7, #11]
      break;
 8010700:	e007      	b.n	8010712 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8010702:	6839      	ldr	r1, [r7, #0]
 8010704:	6878      	ldr	r0, [r7, #4]
 8010706:	f000 fa08 	bl	8010b1a <USBD_CtlError>
      err++;
 801070a:	7afb      	ldrb	r3, [r7, #11]
 801070c:	3301      	adds	r3, #1
 801070e:	72fb      	strb	r3, [r7, #11]
      break;
 8010710:	bf00      	nop
  }

  if (err != 0U)
 8010712:	7afb      	ldrb	r3, [r7, #11]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d11e      	bne.n	8010756 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8010718:	683b      	ldr	r3, [r7, #0]
 801071a:	88db      	ldrh	r3, [r3, #6]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d016      	beq.n	801074e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8010720:	893b      	ldrh	r3, [r7, #8]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d00e      	beq.n	8010744 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8010726:	683b      	ldr	r3, [r7, #0]
 8010728:	88da      	ldrh	r2, [r3, #6]
 801072a:	893b      	ldrh	r3, [r7, #8]
 801072c:	4293      	cmp	r3, r2
 801072e:	bf28      	it	cs
 8010730:	4613      	movcs	r3, r2
 8010732:	b29b      	uxth	r3, r3
 8010734:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010736:	893b      	ldrh	r3, [r7, #8]
 8010738:	461a      	mov	r2, r3
 801073a:	68f9      	ldr	r1, [r7, #12]
 801073c:	6878      	ldr	r0, [r7, #4]
 801073e:	f000 fa5d 	bl	8010bfc <USBD_CtlSendData>
 8010742:	e009      	b.n	8010758 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010744:	6839      	ldr	r1, [r7, #0]
 8010746:	6878      	ldr	r0, [r7, #4]
 8010748:	f000 f9e7 	bl	8010b1a <USBD_CtlError>
 801074c:	e004      	b.n	8010758 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801074e:	6878      	ldr	r0, [r7, #4]
 8010750:	f000 fa91 	bl	8010c76 <USBD_CtlSendStatus>
 8010754:	e000      	b.n	8010758 <USBD_GetDescriptor+0x320>
    return;
 8010756:	bf00      	nop
  }
}
 8010758:	3710      	adds	r7, #16
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}
 801075e:	bf00      	nop

08010760 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b084      	sub	sp, #16
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
 8010768:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801076a:	683b      	ldr	r3, [r7, #0]
 801076c:	889b      	ldrh	r3, [r3, #4]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d131      	bne.n	80107d6 <USBD_SetAddress+0x76>
 8010772:	683b      	ldr	r3, [r7, #0]
 8010774:	88db      	ldrh	r3, [r3, #6]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d12d      	bne.n	80107d6 <USBD_SetAddress+0x76>
 801077a:	683b      	ldr	r3, [r7, #0]
 801077c:	885b      	ldrh	r3, [r3, #2]
 801077e:	2b7f      	cmp	r3, #127	; 0x7f
 8010780:	d829      	bhi.n	80107d6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010782:	683b      	ldr	r3, [r7, #0]
 8010784:	885b      	ldrh	r3, [r3, #2]
 8010786:	b2db      	uxtb	r3, r3
 8010788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801078c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010794:	b2db      	uxtb	r3, r3
 8010796:	2b03      	cmp	r3, #3
 8010798:	d104      	bne.n	80107a4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801079a:	6839      	ldr	r1, [r7, #0]
 801079c:	6878      	ldr	r0, [r7, #4]
 801079e:	f000 f9bc 	bl	8010b1a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80107a2:	e01d      	b.n	80107e0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	7bfa      	ldrb	r2, [r7, #15]
 80107a8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80107ac:	7bfb      	ldrb	r3, [r7, #15]
 80107ae:	4619      	mov	r1, r3
 80107b0:	6878      	ldr	r0, [r7, #4]
 80107b2:	f007 f87a 	bl	80178aa <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80107b6:	6878      	ldr	r0, [r7, #4]
 80107b8:	f000 fa5d 	bl	8010c76 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80107bc:	7bfb      	ldrb	r3, [r7, #15]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d004      	beq.n	80107cc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	2202      	movs	r2, #2
 80107c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80107ca:	e009      	b.n	80107e0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	2201      	movs	r2, #1
 80107d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80107d4:	e004      	b.n	80107e0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80107d6:	6839      	ldr	r1, [r7, #0]
 80107d8:	6878      	ldr	r0, [r7, #4]
 80107da:	f000 f99e 	bl	8010b1a <USBD_CtlError>
  }
}
 80107de:	bf00      	nop
 80107e0:	bf00      	nop
 80107e2:	3710      	adds	r7, #16
 80107e4:	46bd      	mov	sp, r7
 80107e6:	bd80      	pop	{r7, pc}

080107e8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b084      	sub	sp, #16
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
 80107f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80107f2:	2300      	movs	r3, #0
 80107f4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	885b      	ldrh	r3, [r3, #2]
 80107fa:	b2da      	uxtb	r2, r3
 80107fc:	4b4e      	ldr	r3, [pc, #312]	; (8010938 <USBD_SetConfig+0x150>)
 80107fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010800:	4b4d      	ldr	r3, [pc, #308]	; (8010938 <USBD_SetConfig+0x150>)
 8010802:	781b      	ldrb	r3, [r3, #0]
 8010804:	2b01      	cmp	r3, #1
 8010806:	d905      	bls.n	8010814 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010808:	6839      	ldr	r1, [r7, #0]
 801080a:	6878      	ldr	r0, [r7, #4]
 801080c:	f000 f985 	bl	8010b1a <USBD_CtlError>
    return USBD_FAIL;
 8010810:	2303      	movs	r3, #3
 8010812:	e08c      	b.n	801092e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801081a:	b2db      	uxtb	r3, r3
 801081c:	2b02      	cmp	r3, #2
 801081e:	d002      	beq.n	8010826 <USBD_SetConfig+0x3e>
 8010820:	2b03      	cmp	r3, #3
 8010822:	d029      	beq.n	8010878 <USBD_SetConfig+0x90>
 8010824:	e075      	b.n	8010912 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010826:	4b44      	ldr	r3, [pc, #272]	; (8010938 <USBD_SetConfig+0x150>)
 8010828:	781b      	ldrb	r3, [r3, #0]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d020      	beq.n	8010870 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801082e:	4b42      	ldr	r3, [pc, #264]	; (8010938 <USBD_SetConfig+0x150>)
 8010830:	781b      	ldrb	r3, [r3, #0]
 8010832:	461a      	mov	r2, r3
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010838:	4b3f      	ldr	r3, [pc, #252]	; (8010938 <USBD_SetConfig+0x150>)
 801083a:	781b      	ldrb	r3, [r3, #0]
 801083c:	4619      	mov	r1, r3
 801083e:	6878      	ldr	r0, [r7, #4]
 8010840:	f7fe ffbc 	bl	800f7bc <USBD_SetClassConfig>
 8010844:	4603      	mov	r3, r0
 8010846:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010848:	7bfb      	ldrb	r3, [r7, #15]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d008      	beq.n	8010860 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801084e:	6839      	ldr	r1, [r7, #0]
 8010850:	6878      	ldr	r0, [r7, #4]
 8010852:	f000 f962 	bl	8010b1a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	2202      	movs	r2, #2
 801085a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801085e:	e065      	b.n	801092c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010860:	6878      	ldr	r0, [r7, #4]
 8010862:	f000 fa08 	bl	8010c76 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	2203      	movs	r2, #3
 801086a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801086e:	e05d      	b.n	801092c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010870:	6878      	ldr	r0, [r7, #4]
 8010872:	f000 fa00 	bl	8010c76 <USBD_CtlSendStatus>
      break;
 8010876:	e059      	b.n	801092c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010878:	4b2f      	ldr	r3, [pc, #188]	; (8010938 <USBD_SetConfig+0x150>)
 801087a:	781b      	ldrb	r3, [r3, #0]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d112      	bne.n	80108a6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2202      	movs	r2, #2
 8010884:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8010888:	4b2b      	ldr	r3, [pc, #172]	; (8010938 <USBD_SetConfig+0x150>)
 801088a:	781b      	ldrb	r3, [r3, #0]
 801088c:	461a      	mov	r2, r3
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010892:	4b29      	ldr	r3, [pc, #164]	; (8010938 <USBD_SetConfig+0x150>)
 8010894:	781b      	ldrb	r3, [r3, #0]
 8010896:	4619      	mov	r1, r3
 8010898:	6878      	ldr	r0, [r7, #4]
 801089a:	f7fe ffab 	bl	800f7f4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801089e:	6878      	ldr	r0, [r7, #4]
 80108a0:	f000 f9e9 	bl	8010c76 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80108a4:	e042      	b.n	801092c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80108a6:	4b24      	ldr	r3, [pc, #144]	; (8010938 <USBD_SetConfig+0x150>)
 80108a8:	781b      	ldrb	r3, [r3, #0]
 80108aa:	461a      	mov	r2, r3
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	685b      	ldr	r3, [r3, #4]
 80108b0:	429a      	cmp	r2, r3
 80108b2:	d02a      	beq.n	801090a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	685b      	ldr	r3, [r3, #4]
 80108b8:	b2db      	uxtb	r3, r3
 80108ba:	4619      	mov	r1, r3
 80108bc:	6878      	ldr	r0, [r7, #4]
 80108be:	f7fe ff99 	bl	800f7f4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80108c2:	4b1d      	ldr	r3, [pc, #116]	; (8010938 <USBD_SetConfig+0x150>)
 80108c4:	781b      	ldrb	r3, [r3, #0]
 80108c6:	461a      	mov	r2, r3
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80108cc:	4b1a      	ldr	r3, [pc, #104]	; (8010938 <USBD_SetConfig+0x150>)
 80108ce:	781b      	ldrb	r3, [r3, #0]
 80108d0:	4619      	mov	r1, r3
 80108d2:	6878      	ldr	r0, [r7, #4]
 80108d4:	f7fe ff72 	bl	800f7bc <USBD_SetClassConfig>
 80108d8:	4603      	mov	r3, r0
 80108da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80108dc:	7bfb      	ldrb	r3, [r7, #15]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d00f      	beq.n	8010902 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80108e2:	6839      	ldr	r1, [r7, #0]
 80108e4:	6878      	ldr	r0, [r7, #4]
 80108e6:	f000 f918 	bl	8010b1a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	685b      	ldr	r3, [r3, #4]
 80108ee:	b2db      	uxtb	r3, r3
 80108f0:	4619      	mov	r1, r3
 80108f2:	6878      	ldr	r0, [r7, #4]
 80108f4:	f7fe ff7e 	bl	800f7f4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	2202      	movs	r2, #2
 80108fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010900:	e014      	b.n	801092c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010902:	6878      	ldr	r0, [r7, #4]
 8010904:	f000 f9b7 	bl	8010c76 <USBD_CtlSendStatus>
      break;
 8010908:	e010      	b.n	801092c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801090a:	6878      	ldr	r0, [r7, #4]
 801090c:	f000 f9b3 	bl	8010c76 <USBD_CtlSendStatus>
      break;
 8010910:	e00c      	b.n	801092c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8010912:	6839      	ldr	r1, [r7, #0]
 8010914:	6878      	ldr	r0, [r7, #4]
 8010916:	f000 f900 	bl	8010b1a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801091a:	4b07      	ldr	r3, [pc, #28]	; (8010938 <USBD_SetConfig+0x150>)
 801091c:	781b      	ldrb	r3, [r3, #0]
 801091e:	4619      	mov	r1, r3
 8010920:	6878      	ldr	r0, [r7, #4]
 8010922:	f7fe ff67 	bl	800f7f4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010926:	2303      	movs	r3, #3
 8010928:	73fb      	strb	r3, [r7, #15]
      break;
 801092a:	bf00      	nop
  }

  return ret;
 801092c:	7bfb      	ldrb	r3, [r7, #15]
}
 801092e:	4618      	mov	r0, r3
 8010930:	3710      	adds	r7, #16
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}
 8010936:	bf00      	nop
 8010938:	20003914 	.word	0x20003914

0801093c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b082      	sub	sp, #8
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
 8010944:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010946:	683b      	ldr	r3, [r7, #0]
 8010948:	88db      	ldrh	r3, [r3, #6]
 801094a:	2b01      	cmp	r3, #1
 801094c:	d004      	beq.n	8010958 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801094e:	6839      	ldr	r1, [r7, #0]
 8010950:	6878      	ldr	r0, [r7, #4]
 8010952:	f000 f8e2 	bl	8010b1a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010956:	e023      	b.n	80109a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801095e:	b2db      	uxtb	r3, r3
 8010960:	2b02      	cmp	r3, #2
 8010962:	dc02      	bgt.n	801096a <USBD_GetConfig+0x2e>
 8010964:	2b00      	cmp	r3, #0
 8010966:	dc03      	bgt.n	8010970 <USBD_GetConfig+0x34>
 8010968:	e015      	b.n	8010996 <USBD_GetConfig+0x5a>
 801096a:	2b03      	cmp	r3, #3
 801096c:	d00b      	beq.n	8010986 <USBD_GetConfig+0x4a>
 801096e:	e012      	b.n	8010996 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	2200      	movs	r2, #0
 8010974:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	3308      	adds	r3, #8
 801097a:	2201      	movs	r2, #1
 801097c:	4619      	mov	r1, r3
 801097e:	6878      	ldr	r0, [r7, #4]
 8010980:	f000 f93c 	bl	8010bfc <USBD_CtlSendData>
        break;
 8010984:	e00c      	b.n	80109a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	3304      	adds	r3, #4
 801098a:	2201      	movs	r2, #1
 801098c:	4619      	mov	r1, r3
 801098e:	6878      	ldr	r0, [r7, #4]
 8010990:	f000 f934 	bl	8010bfc <USBD_CtlSendData>
        break;
 8010994:	e004      	b.n	80109a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010996:	6839      	ldr	r1, [r7, #0]
 8010998:	6878      	ldr	r0, [r7, #4]
 801099a:	f000 f8be 	bl	8010b1a <USBD_CtlError>
        break;
 801099e:	bf00      	nop
}
 80109a0:	bf00      	nop
 80109a2:	3708      	adds	r7, #8
 80109a4:	46bd      	mov	sp, r7
 80109a6:	bd80      	pop	{r7, pc}

080109a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b082      	sub	sp, #8
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
 80109b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80109b8:	b2db      	uxtb	r3, r3
 80109ba:	3b01      	subs	r3, #1
 80109bc:	2b02      	cmp	r3, #2
 80109be:	d81e      	bhi.n	80109fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80109c0:	683b      	ldr	r3, [r7, #0]
 80109c2:	88db      	ldrh	r3, [r3, #6]
 80109c4:	2b02      	cmp	r3, #2
 80109c6:	d004      	beq.n	80109d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80109c8:	6839      	ldr	r1, [r7, #0]
 80109ca:	6878      	ldr	r0, [r7, #4]
 80109cc:	f000 f8a5 	bl	8010b1a <USBD_CtlError>
        break;
 80109d0:	e01a      	b.n	8010a08 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	2201      	movs	r2, #1
 80109d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d005      	beq.n	80109ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	68db      	ldr	r3, [r3, #12]
 80109e6:	f043 0202 	orr.w	r2, r3, #2
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	330c      	adds	r3, #12
 80109f2:	2202      	movs	r2, #2
 80109f4:	4619      	mov	r1, r3
 80109f6:	6878      	ldr	r0, [r7, #4]
 80109f8:	f000 f900 	bl	8010bfc <USBD_CtlSendData>
      break;
 80109fc:	e004      	b.n	8010a08 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80109fe:	6839      	ldr	r1, [r7, #0]
 8010a00:	6878      	ldr	r0, [r7, #4]
 8010a02:	f000 f88a 	bl	8010b1a <USBD_CtlError>
      break;
 8010a06:	bf00      	nop
  }
}
 8010a08:	bf00      	nop
 8010a0a:	3708      	adds	r7, #8
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	bd80      	pop	{r7, pc}

08010a10 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b082      	sub	sp, #8
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
 8010a18:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010a1a:	683b      	ldr	r3, [r7, #0]
 8010a1c:	885b      	ldrh	r3, [r3, #2]
 8010a1e:	2b01      	cmp	r3, #1
 8010a20:	d107      	bne.n	8010a32 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	2201      	movs	r2, #1
 8010a26:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010a2a:	6878      	ldr	r0, [r7, #4]
 8010a2c:	f000 f923 	bl	8010c76 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8010a30:	e013      	b.n	8010a5a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8010a32:	683b      	ldr	r3, [r7, #0]
 8010a34:	885b      	ldrh	r3, [r3, #2]
 8010a36:	2b02      	cmp	r3, #2
 8010a38:	d10b      	bne.n	8010a52 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8010a3a:	683b      	ldr	r3, [r7, #0]
 8010a3c:	889b      	ldrh	r3, [r3, #4]
 8010a3e:	0a1b      	lsrs	r3, r3, #8
 8010a40:	b29b      	uxth	r3, r3
 8010a42:	b2da      	uxtb	r2, r3
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8010a4a:	6878      	ldr	r0, [r7, #4]
 8010a4c:	f000 f913 	bl	8010c76 <USBD_CtlSendStatus>
}
 8010a50:	e003      	b.n	8010a5a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8010a52:	6839      	ldr	r1, [r7, #0]
 8010a54:	6878      	ldr	r0, [r7, #4]
 8010a56:	f000 f860 	bl	8010b1a <USBD_CtlError>
}
 8010a5a:	bf00      	nop
 8010a5c:	3708      	adds	r7, #8
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	bd80      	pop	{r7, pc}

08010a62 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a62:	b580      	push	{r7, lr}
 8010a64:	b082      	sub	sp, #8
 8010a66:	af00      	add	r7, sp, #0
 8010a68:	6078      	str	r0, [r7, #4]
 8010a6a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a72:	b2db      	uxtb	r3, r3
 8010a74:	3b01      	subs	r3, #1
 8010a76:	2b02      	cmp	r3, #2
 8010a78:	d80b      	bhi.n	8010a92 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010a7a:	683b      	ldr	r3, [r7, #0]
 8010a7c:	885b      	ldrh	r3, [r3, #2]
 8010a7e:	2b01      	cmp	r3, #1
 8010a80:	d10c      	bne.n	8010a9c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	2200      	movs	r2, #0
 8010a86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010a8a:	6878      	ldr	r0, [r7, #4]
 8010a8c:	f000 f8f3 	bl	8010c76 <USBD_CtlSendStatus>
      }
      break;
 8010a90:	e004      	b.n	8010a9c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010a92:	6839      	ldr	r1, [r7, #0]
 8010a94:	6878      	ldr	r0, [r7, #4]
 8010a96:	f000 f840 	bl	8010b1a <USBD_CtlError>
      break;
 8010a9a:	e000      	b.n	8010a9e <USBD_ClrFeature+0x3c>
      break;
 8010a9c:	bf00      	nop
  }
}
 8010a9e:	bf00      	nop
 8010aa0:	3708      	adds	r7, #8
 8010aa2:	46bd      	mov	sp, r7
 8010aa4:	bd80      	pop	{r7, pc}

08010aa6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010aa6:	b580      	push	{r7, lr}
 8010aa8:	b084      	sub	sp, #16
 8010aaa:	af00      	add	r7, sp, #0
 8010aac:	6078      	str	r0, [r7, #4]
 8010aae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010ab0:	683b      	ldr	r3, [r7, #0]
 8010ab2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	781a      	ldrb	r2, [r3, #0]
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	3301      	adds	r3, #1
 8010ac0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	781a      	ldrb	r2, [r3, #0]
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	3301      	adds	r3, #1
 8010ace:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010ad0:	68f8      	ldr	r0, [r7, #12]
 8010ad2:	f7ff fa16 	bl	800ff02 <SWAPBYTE>
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	461a      	mov	r2, r3
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	3301      	adds	r3, #1
 8010ae2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	3301      	adds	r3, #1
 8010ae8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010aea:	68f8      	ldr	r0, [r7, #12]
 8010aec:	f7ff fa09 	bl	800ff02 <SWAPBYTE>
 8010af0:	4603      	mov	r3, r0
 8010af2:	461a      	mov	r2, r3
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	3301      	adds	r3, #1
 8010afc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	3301      	adds	r3, #1
 8010b02:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010b04:	68f8      	ldr	r0, [r7, #12]
 8010b06:	f7ff f9fc 	bl	800ff02 <SWAPBYTE>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	461a      	mov	r2, r3
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	80da      	strh	r2, [r3, #6]
}
 8010b12:	bf00      	nop
 8010b14:	3710      	adds	r7, #16
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}

08010b1a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010b1a:	b580      	push	{r7, lr}
 8010b1c:	b082      	sub	sp, #8
 8010b1e:	af00      	add	r7, sp, #0
 8010b20:	6078      	str	r0, [r7, #4]
 8010b22:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010b24:	2180      	movs	r1, #128	; 0x80
 8010b26:	6878      	ldr	r0, [r7, #4]
 8010b28:	f006 fe55 	bl	80177d6 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010b2c:	2100      	movs	r1, #0
 8010b2e:	6878      	ldr	r0, [r7, #4]
 8010b30:	f006 fe51 	bl	80177d6 <USBD_LL_StallEP>
}
 8010b34:	bf00      	nop
 8010b36:	3708      	adds	r7, #8
 8010b38:	46bd      	mov	sp, r7
 8010b3a:	bd80      	pop	{r7, pc}

08010b3c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b086      	sub	sp, #24
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	60f8      	str	r0, [r7, #12]
 8010b44:	60b9      	str	r1, [r7, #8]
 8010b46:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010b48:	2300      	movs	r3, #0
 8010b4a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d036      	beq.n	8010bc0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010b56:	6938      	ldr	r0, [r7, #16]
 8010b58:	f000 f836 	bl	8010bc8 <USBD_GetLen>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	3301      	adds	r3, #1
 8010b60:	b29b      	uxth	r3, r3
 8010b62:	005b      	lsls	r3, r3, #1
 8010b64:	b29a      	uxth	r2, r3
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010b6a:	7dfb      	ldrb	r3, [r7, #23]
 8010b6c:	68ba      	ldr	r2, [r7, #8]
 8010b6e:	4413      	add	r3, r2
 8010b70:	687a      	ldr	r2, [r7, #4]
 8010b72:	7812      	ldrb	r2, [r2, #0]
 8010b74:	701a      	strb	r2, [r3, #0]
  idx++;
 8010b76:	7dfb      	ldrb	r3, [r7, #23]
 8010b78:	3301      	adds	r3, #1
 8010b7a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010b7c:	7dfb      	ldrb	r3, [r7, #23]
 8010b7e:	68ba      	ldr	r2, [r7, #8]
 8010b80:	4413      	add	r3, r2
 8010b82:	2203      	movs	r2, #3
 8010b84:	701a      	strb	r2, [r3, #0]
  idx++;
 8010b86:	7dfb      	ldrb	r3, [r7, #23]
 8010b88:	3301      	adds	r3, #1
 8010b8a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010b8c:	e013      	b.n	8010bb6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010b8e:	7dfb      	ldrb	r3, [r7, #23]
 8010b90:	68ba      	ldr	r2, [r7, #8]
 8010b92:	4413      	add	r3, r2
 8010b94:	693a      	ldr	r2, [r7, #16]
 8010b96:	7812      	ldrb	r2, [r2, #0]
 8010b98:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010b9a:	693b      	ldr	r3, [r7, #16]
 8010b9c:	3301      	adds	r3, #1
 8010b9e:	613b      	str	r3, [r7, #16]
    idx++;
 8010ba0:	7dfb      	ldrb	r3, [r7, #23]
 8010ba2:	3301      	adds	r3, #1
 8010ba4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010ba6:	7dfb      	ldrb	r3, [r7, #23]
 8010ba8:	68ba      	ldr	r2, [r7, #8]
 8010baa:	4413      	add	r3, r2
 8010bac:	2200      	movs	r2, #0
 8010bae:	701a      	strb	r2, [r3, #0]
    idx++;
 8010bb0:	7dfb      	ldrb	r3, [r7, #23]
 8010bb2:	3301      	adds	r3, #1
 8010bb4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010bb6:	693b      	ldr	r3, [r7, #16]
 8010bb8:	781b      	ldrb	r3, [r3, #0]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d1e7      	bne.n	8010b8e <USBD_GetString+0x52>
 8010bbe:	e000      	b.n	8010bc2 <USBD_GetString+0x86>
    return;
 8010bc0:	bf00      	nop
  }
}
 8010bc2:	3718      	adds	r7, #24
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	bd80      	pop	{r7, pc}

08010bc8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010bc8:	b480      	push	{r7}
 8010bca:	b085      	sub	sp, #20
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010bd8:	e005      	b.n	8010be6 <USBD_GetLen+0x1e>
  {
    len++;
 8010bda:	7bfb      	ldrb	r3, [r7, #15]
 8010bdc:	3301      	adds	r3, #1
 8010bde:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010be0:	68bb      	ldr	r3, [r7, #8]
 8010be2:	3301      	adds	r3, #1
 8010be4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010be6:	68bb      	ldr	r3, [r7, #8]
 8010be8:	781b      	ldrb	r3, [r3, #0]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d1f5      	bne.n	8010bda <USBD_GetLen+0x12>
  }

  return len;
 8010bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	3714      	adds	r7, #20
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bfa:	4770      	bx	lr

08010bfc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b084      	sub	sp, #16
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	60f8      	str	r0, [r7, #12]
 8010c04:	60b9      	str	r1, [r7, #8]
 8010c06:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	2202      	movs	r2, #2
 8010c0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	687a      	ldr	r2, [r7, #4]
 8010c14:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	687a      	ldr	r2, [r7, #4]
 8010c1a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	68ba      	ldr	r2, [r7, #8]
 8010c20:	2100      	movs	r1, #0
 8010c22:	68f8      	ldr	r0, [r7, #12]
 8010c24:	f006 fe60 	bl	80178e8 <USBD_LL_Transmit>

  return USBD_OK;
 8010c28:	2300      	movs	r3, #0
}
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	3710      	adds	r7, #16
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	bd80      	pop	{r7, pc}

08010c32 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010c32:	b580      	push	{r7, lr}
 8010c34:	b084      	sub	sp, #16
 8010c36:	af00      	add	r7, sp, #0
 8010c38:	60f8      	str	r0, [r7, #12]
 8010c3a:	60b9      	str	r1, [r7, #8]
 8010c3c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	68ba      	ldr	r2, [r7, #8]
 8010c42:	2100      	movs	r1, #0
 8010c44:	68f8      	ldr	r0, [r7, #12]
 8010c46:	f006 fe4f 	bl	80178e8 <USBD_LL_Transmit>

  return USBD_OK;
 8010c4a:	2300      	movs	r3, #0
}
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	3710      	adds	r7, #16
 8010c50:	46bd      	mov	sp, r7
 8010c52:	bd80      	pop	{r7, pc}

08010c54 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b084      	sub	sp, #16
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	60f8      	str	r0, [r7, #12]
 8010c5c:	60b9      	str	r1, [r7, #8]
 8010c5e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	68ba      	ldr	r2, [r7, #8]
 8010c64:	2100      	movs	r1, #0
 8010c66:	68f8      	ldr	r0, [r7, #12]
 8010c68:	f006 fe5f 	bl	801792a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010c6c:	2300      	movs	r3, #0
}
 8010c6e:	4618      	mov	r0, r3
 8010c70:	3710      	adds	r7, #16
 8010c72:	46bd      	mov	sp, r7
 8010c74:	bd80      	pop	{r7, pc}

08010c76 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010c76:	b580      	push	{r7, lr}
 8010c78:	b082      	sub	sp, #8
 8010c7a:	af00      	add	r7, sp, #0
 8010c7c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	2204      	movs	r2, #4
 8010c82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010c86:	2300      	movs	r3, #0
 8010c88:	2200      	movs	r2, #0
 8010c8a:	2100      	movs	r1, #0
 8010c8c:	6878      	ldr	r0, [r7, #4]
 8010c8e:	f006 fe2b 	bl	80178e8 <USBD_LL_Transmit>

  return USBD_OK;
 8010c92:	2300      	movs	r3, #0
}
 8010c94:	4618      	mov	r0, r3
 8010c96:	3708      	adds	r7, #8
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd80      	pop	{r7, pc}

08010c9c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b082      	sub	sp, #8
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	2205      	movs	r2, #5
 8010ca8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010cac:	2300      	movs	r3, #0
 8010cae:	2200      	movs	r2, #0
 8010cb0:	2100      	movs	r1, #0
 8010cb2:	6878      	ldr	r0, [r7, #4]
 8010cb4:	f006 fe39 	bl	801792a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010cb8:	2300      	movs	r3, #0
}
 8010cba:	4618      	mov	r0, r3
 8010cbc:	3708      	adds	r7, #8
 8010cbe:	46bd      	mov	sp, r7
 8010cc0:	bd80      	pop	{r7, pc}
	...

08010cc4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b084      	sub	sp, #16
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	4603      	mov	r3, r0
 8010ccc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010cce:	79fb      	ldrb	r3, [r7, #7]
 8010cd0:	4a08      	ldr	r2, [pc, #32]	; (8010cf4 <disk_status+0x30>)
 8010cd2:	009b      	lsls	r3, r3, #2
 8010cd4:	4413      	add	r3, r2
 8010cd6:	685b      	ldr	r3, [r3, #4]
 8010cd8:	685b      	ldr	r3, [r3, #4]
 8010cda:	79fa      	ldrb	r2, [r7, #7]
 8010cdc:	4905      	ldr	r1, [pc, #20]	; (8010cf4 <disk_status+0x30>)
 8010cde:	440a      	add	r2, r1
 8010ce0:	7a12      	ldrb	r2, [r2, #8]
 8010ce2:	4610      	mov	r0, r2
 8010ce4:	4798      	blx	r3
 8010ce6:	4603      	mov	r3, r0
 8010ce8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cec:	4618      	mov	r0, r3
 8010cee:	3710      	adds	r7, #16
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	bd80      	pop	{r7, pc}
 8010cf4:	20003940 	.word	0x20003940

08010cf8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b084      	sub	sp, #16
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	4603      	mov	r3, r0
 8010d00:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010d02:	2300      	movs	r3, #0
 8010d04:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010d06:	79fb      	ldrb	r3, [r7, #7]
 8010d08:	4a0d      	ldr	r2, [pc, #52]	; (8010d40 <disk_initialize+0x48>)
 8010d0a:	5cd3      	ldrb	r3, [r2, r3]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d111      	bne.n	8010d34 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010d10:	79fb      	ldrb	r3, [r7, #7]
 8010d12:	4a0b      	ldr	r2, [pc, #44]	; (8010d40 <disk_initialize+0x48>)
 8010d14:	2101      	movs	r1, #1
 8010d16:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010d18:	79fb      	ldrb	r3, [r7, #7]
 8010d1a:	4a09      	ldr	r2, [pc, #36]	; (8010d40 <disk_initialize+0x48>)
 8010d1c:	009b      	lsls	r3, r3, #2
 8010d1e:	4413      	add	r3, r2
 8010d20:	685b      	ldr	r3, [r3, #4]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	79fa      	ldrb	r2, [r7, #7]
 8010d26:	4906      	ldr	r1, [pc, #24]	; (8010d40 <disk_initialize+0x48>)
 8010d28:	440a      	add	r2, r1
 8010d2a:	7a12      	ldrb	r2, [r2, #8]
 8010d2c:	4610      	mov	r0, r2
 8010d2e:	4798      	blx	r3
 8010d30:	4603      	mov	r3, r0
 8010d32:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d36:	4618      	mov	r0, r3
 8010d38:	3710      	adds	r7, #16
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	bd80      	pop	{r7, pc}
 8010d3e:	bf00      	nop
 8010d40:	20003940 	.word	0x20003940

08010d44 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010d44:	b590      	push	{r4, r7, lr}
 8010d46:	b087      	sub	sp, #28
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	60b9      	str	r1, [r7, #8]
 8010d4c:	607a      	str	r2, [r7, #4]
 8010d4e:	603b      	str	r3, [r7, #0]
 8010d50:	4603      	mov	r3, r0
 8010d52:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010d54:	7bfb      	ldrb	r3, [r7, #15]
 8010d56:	4a0a      	ldr	r2, [pc, #40]	; (8010d80 <disk_read+0x3c>)
 8010d58:	009b      	lsls	r3, r3, #2
 8010d5a:	4413      	add	r3, r2
 8010d5c:	685b      	ldr	r3, [r3, #4]
 8010d5e:	689c      	ldr	r4, [r3, #8]
 8010d60:	7bfb      	ldrb	r3, [r7, #15]
 8010d62:	4a07      	ldr	r2, [pc, #28]	; (8010d80 <disk_read+0x3c>)
 8010d64:	4413      	add	r3, r2
 8010d66:	7a18      	ldrb	r0, [r3, #8]
 8010d68:	683b      	ldr	r3, [r7, #0]
 8010d6a:	687a      	ldr	r2, [r7, #4]
 8010d6c:	68b9      	ldr	r1, [r7, #8]
 8010d6e:	47a0      	blx	r4
 8010d70:	4603      	mov	r3, r0
 8010d72:	75fb      	strb	r3, [r7, #23]
  return res;
 8010d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d76:	4618      	mov	r0, r3
 8010d78:	371c      	adds	r7, #28
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	bd90      	pop	{r4, r7, pc}
 8010d7e:	bf00      	nop
 8010d80:	20003940 	.word	0x20003940

08010d84 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010d84:	b590      	push	{r4, r7, lr}
 8010d86:	b087      	sub	sp, #28
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	60b9      	str	r1, [r7, #8]
 8010d8c:	607a      	str	r2, [r7, #4]
 8010d8e:	603b      	str	r3, [r7, #0]
 8010d90:	4603      	mov	r3, r0
 8010d92:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010d94:	7bfb      	ldrb	r3, [r7, #15]
 8010d96:	4a0a      	ldr	r2, [pc, #40]	; (8010dc0 <disk_write+0x3c>)
 8010d98:	009b      	lsls	r3, r3, #2
 8010d9a:	4413      	add	r3, r2
 8010d9c:	685b      	ldr	r3, [r3, #4]
 8010d9e:	68dc      	ldr	r4, [r3, #12]
 8010da0:	7bfb      	ldrb	r3, [r7, #15]
 8010da2:	4a07      	ldr	r2, [pc, #28]	; (8010dc0 <disk_write+0x3c>)
 8010da4:	4413      	add	r3, r2
 8010da6:	7a18      	ldrb	r0, [r3, #8]
 8010da8:	683b      	ldr	r3, [r7, #0]
 8010daa:	687a      	ldr	r2, [r7, #4]
 8010dac:	68b9      	ldr	r1, [r7, #8]
 8010dae:	47a0      	blx	r4
 8010db0:	4603      	mov	r3, r0
 8010db2:	75fb      	strb	r3, [r7, #23]
  return res;
 8010db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010db6:	4618      	mov	r0, r3
 8010db8:	371c      	adds	r7, #28
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	bd90      	pop	{r4, r7, pc}
 8010dbe:	bf00      	nop
 8010dc0:	20003940 	.word	0x20003940

08010dc4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b084      	sub	sp, #16
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	4603      	mov	r3, r0
 8010dcc:	603a      	str	r2, [r7, #0]
 8010dce:	71fb      	strb	r3, [r7, #7]
 8010dd0:	460b      	mov	r3, r1
 8010dd2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010dd4:	79fb      	ldrb	r3, [r7, #7]
 8010dd6:	4a09      	ldr	r2, [pc, #36]	; (8010dfc <disk_ioctl+0x38>)
 8010dd8:	009b      	lsls	r3, r3, #2
 8010dda:	4413      	add	r3, r2
 8010ddc:	685b      	ldr	r3, [r3, #4]
 8010dde:	691b      	ldr	r3, [r3, #16]
 8010de0:	79fa      	ldrb	r2, [r7, #7]
 8010de2:	4906      	ldr	r1, [pc, #24]	; (8010dfc <disk_ioctl+0x38>)
 8010de4:	440a      	add	r2, r1
 8010de6:	7a10      	ldrb	r0, [r2, #8]
 8010de8:	79b9      	ldrb	r1, [r7, #6]
 8010dea:	683a      	ldr	r2, [r7, #0]
 8010dec:	4798      	blx	r3
 8010dee:	4603      	mov	r3, r0
 8010df0:	73fb      	strb	r3, [r7, #15]
  return res;
 8010df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010df4:	4618      	mov	r0, r3
 8010df6:	3710      	adds	r7, #16
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bd80      	pop	{r7, pc}
 8010dfc:	20003940 	.word	0x20003940

08010e00 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010e00:	b480      	push	{r7}
 8010e02:	b085      	sub	sp, #20
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	3301      	adds	r3, #1
 8010e0c:	781b      	ldrb	r3, [r3, #0]
 8010e0e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010e10:	89fb      	ldrh	r3, [r7, #14]
 8010e12:	021b      	lsls	r3, r3, #8
 8010e14:	b21a      	sxth	r2, r3
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	781b      	ldrb	r3, [r3, #0]
 8010e1a:	b21b      	sxth	r3, r3
 8010e1c:	4313      	orrs	r3, r2
 8010e1e:	b21b      	sxth	r3, r3
 8010e20:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010e22:	89fb      	ldrh	r3, [r7, #14]
}
 8010e24:	4618      	mov	r0, r3
 8010e26:	3714      	adds	r7, #20
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2e:	4770      	bx	lr

08010e30 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010e30:	b480      	push	{r7}
 8010e32:	b085      	sub	sp, #20
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	3303      	adds	r3, #3
 8010e3c:	781b      	ldrb	r3, [r3, #0]
 8010e3e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	021b      	lsls	r3, r3, #8
 8010e44:	687a      	ldr	r2, [r7, #4]
 8010e46:	3202      	adds	r2, #2
 8010e48:	7812      	ldrb	r2, [r2, #0]
 8010e4a:	4313      	orrs	r3, r2
 8010e4c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	021b      	lsls	r3, r3, #8
 8010e52:	687a      	ldr	r2, [r7, #4]
 8010e54:	3201      	adds	r2, #1
 8010e56:	7812      	ldrb	r2, [r2, #0]
 8010e58:	4313      	orrs	r3, r2
 8010e5a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	021b      	lsls	r3, r3, #8
 8010e60:	687a      	ldr	r2, [r7, #4]
 8010e62:	7812      	ldrb	r2, [r2, #0]
 8010e64:	4313      	orrs	r3, r2
 8010e66:	60fb      	str	r3, [r7, #12]
	return rv;
 8010e68:	68fb      	ldr	r3, [r7, #12]
}
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	3714      	adds	r7, #20
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e74:	4770      	bx	lr

08010e76 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010e76:	b480      	push	{r7}
 8010e78:	b083      	sub	sp, #12
 8010e7a:	af00      	add	r7, sp, #0
 8010e7c:	6078      	str	r0, [r7, #4]
 8010e7e:	460b      	mov	r3, r1
 8010e80:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	1c5a      	adds	r2, r3, #1
 8010e86:	607a      	str	r2, [r7, #4]
 8010e88:	887a      	ldrh	r2, [r7, #2]
 8010e8a:	b2d2      	uxtb	r2, r2
 8010e8c:	701a      	strb	r2, [r3, #0]
 8010e8e:	887b      	ldrh	r3, [r7, #2]
 8010e90:	0a1b      	lsrs	r3, r3, #8
 8010e92:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	1c5a      	adds	r2, r3, #1
 8010e98:	607a      	str	r2, [r7, #4]
 8010e9a:	887a      	ldrh	r2, [r7, #2]
 8010e9c:	b2d2      	uxtb	r2, r2
 8010e9e:	701a      	strb	r2, [r3, #0]
}
 8010ea0:	bf00      	nop
 8010ea2:	370c      	adds	r7, #12
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eaa:	4770      	bx	lr

08010eac <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010eac:	b480      	push	{r7}
 8010eae:	b083      	sub	sp, #12
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	6078      	str	r0, [r7, #4]
 8010eb4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	1c5a      	adds	r2, r3, #1
 8010eba:	607a      	str	r2, [r7, #4]
 8010ebc:	683a      	ldr	r2, [r7, #0]
 8010ebe:	b2d2      	uxtb	r2, r2
 8010ec0:	701a      	strb	r2, [r3, #0]
 8010ec2:	683b      	ldr	r3, [r7, #0]
 8010ec4:	0a1b      	lsrs	r3, r3, #8
 8010ec6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	1c5a      	adds	r2, r3, #1
 8010ecc:	607a      	str	r2, [r7, #4]
 8010ece:	683a      	ldr	r2, [r7, #0]
 8010ed0:	b2d2      	uxtb	r2, r2
 8010ed2:	701a      	strb	r2, [r3, #0]
 8010ed4:	683b      	ldr	r3, [r7, #0]
 8010ed6:	0a1b      	lsrs	r3, r3, #8
 8010ed8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	1c5a      	adds	r2, r3, #1
 8010ede:	607a      	str	r2, [r7, #4]
 8010ee0:	683a      	ldr	r2, [r7, #0]
 8010ee2:	b2d2      	uxtb	r2, r2
 8010ee4:	701a      	strb	r2, [r3, #0]
 8010ee6:	683b      	ldr	r3, [r7, #0]
 8010ee8:	0a1b      	lsrs	r3, r3, #8
 8010eea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	1c5a      	adds	r2, r3, #1
 8010ef0:	607a      	str	r2, [r7, #4]
 8010ef2:	683a      	ldr	r2, [r7, #0]
 8010ef4:	b2d2      	uxtb	r2, r2
 8010ef6:	701a      	strb	r2, [r3, #0]
}
 8010ef8:	bf00      	nop
 8010efa:	370c      	adds	r7, #12
 8010efc:	46bd      	mov	sp, r7
 8010efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f02:	4770      	bx	lr

08010f04 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010f04:	b480      	push	{r7}
 8010f06:	b087      	sub	sp, #28
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	60f8      	str	r0, [r7, #12]
 8010f0c:	60b9      	str	r1, [r7, #8]
 8010f0e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010f14:	68bb      	ldr	r3, [r7, #8]
 8010f16:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d00d      	beq.n	8010f3a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010f1e:	693a      	ldr	r2, [r7, #16]
 8010f20:	1c53      	adds	r3, r2, #1
 8010f22:	613b      	str	r3, [r7, #16]
 8010f24:	697b      	ldr	r3, [r7, #20]
 8010f26:	1c59      	adds	r1, r3, #1
 8010f28:	6179      	str	r1, [r7, #20]
 8010f2a:	7812      	ldrb	r2, [r2, #0]
 8010f2c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	3b01      	subs	r3, #1
 8010f32:	607b      	str	r3, [r7, #4]
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d1f1      	bne.n	8010f1e <mem_cpy+0x1a>
	}
}
 8010f3a:	bf00      	nop
 8010f3c:	371c      	adds	r7, #28
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f44:	4770      	bx	lr

08010f46 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010f46:	b480      	push	{r7}
 8010f48:	b087      	sub	sp, #28
 8010f4a:	af00      	add	r7, sp, #0
 8010f4c:	60f8      	str	r0, [r7, #12]
 8010f4e:	60b9      	str	r1, [r7, #8]
 8010f50:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010f56:	697b      	ldr	r3, [r7, #20]
 8010f58:	1c5a      	adds	r2, r3, #1
 8010f5a:	617a      	str	r2, [r7, #20]
 8010f5c:	68ba      	ldr	r2, [r7, #8]
 8010f5e:	b2d2      	uxtb	r2, r2
 8010f60:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	3b01      	subs	r3, #1
 8010f66:	607b      	str	r3, [r7, #4]
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d1f3      	bne.n	8010f56 <mem_set+0x10>
}
 8010f6e:	bf00      	nop
 8010f70:	bf00      	nop
 8010f72:	371c      	adds	r7, #28
 8010f74:	46bd      	mov	sp, r7
 8010f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7a:	4770      	bx	lr

08010f7c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010f7c:	b480      	push	{r7}
 8010f7e:	b089      	sub	sp, #36	; 0x24
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	60f8      	str	r0, [r7, #12]
 8010f84:	60b9      	str	r1, [r7, #8]
 8010f86:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	61fb      	str	r3, [r7, #28]
 8010f8c:	68bb      	ldr	r3, [r7, #8]
 8010f8e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010f90:	2300      	movs	r3, #0
 8010f92:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010f94:	69fb      	ldr	r3, [r7, #28]
 8010f96:	1c5a      	adds	r2, r3, #1
 8010f98:	61fa      	str	r2, [r7, #28]
 8010f9a:	781b      	ldrb	r3, [r3, #0]
 8010f9c:	4619      	mov	r1, r3
 8010f9e:	69bb      	ldr	r3, [r7, #24]
 8010fa0:	1c5a      	adds	r2, r3, #1
 8010fa2:	61ba      	str	r2, [r7, #24]
 8010fa4:	781b      	ldrb	r3, [r3, #0]
 8010fa6:	1acb      	subs	r3, r1, r3
 8010fa8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	3b01      	subs	r3, #1
 8010fae:	607b      	str	r3, [r7, #4]
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d002      	beq.n	8010fbc <mem_cmp+0x40>
 8010fb6:	697b      	ldr	r3, [r7, #20]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d0eb      	beq.n	8010f94 <mem_cmp+0x18>

	return r;
 8010fbc:	697b      	ldr	r3, [r7, #20]
}
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	3724      	adds	r7, #36	; 0x24
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc8:	4770      	bx	lr

08010fca <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010fca:	b480      	push	{r7}
 8010fcc:	b083      	sub	sp, #12
 8010fce:	af00      	add	r7, sp, #0
 8010fd0:	6078      	str	r0, [r7, #4]
 8010fd2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010fd4:	e002      	b.n	8010fdc <chk_chr+0x12>
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	3301      	adds	r3, #1
 8010fda:	607b      	str	r3, [r7, #4]
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	781b      	ldrb	r3, [r3, #0]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d005      	beq.n	8010ff0 <chk_chr+0x26>
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	781b      	ldrb	r3, [r3, #0]
 8010fe8:	461a      	mov	r2, r3
 8010fea:	683b      	ldr	r3, [r7, #0]
 8010fec:	4293      	cmp	r3, r2
 8010fee:	d1f2      	bne.n	8010fd6 <chk_chr+0xc>
	return *str;
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	781b      	ldrb	r3, [r3, #0]
}
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	370c      	adds	r7, #12
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffe:	4770      	bx	lr

08011000 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8011000:	b580      	push	{r7, lr}
 8011002:	b082      	sub	sp, #8
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d009      	beq.n	8011022 <lock_fs+0x22>
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	68db      	ldr	r3, [r3, #12]
 8011012:	4618      	mov	r0, r3
 8011014:	f003 f8eb 	bl	80141ee <ff_req_grant>
 8011018:	4603      	mov	r3, r0
 801101a:	2b00      	cmp	r3, #0
 801101c:	d001      	beq.n	8011022 <lock_fs+0x22>
 801101e:	2301      	movs	r3, #1
 8011020:	e000      	b.n	8011024 <lock_fs+0x24>
 8011022:	2300      	movs	r3, #0
}
 8011024:	4618      	mov	r0, r3
 8011026:	3708      	adds	r7, #8
 8011028:	46bd      	mov	sp, r7
 801102a:	bd80      	pop	{r7, pc}

0801102c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 801102c:	b580      	push	{r7, lr}
 801102e:	b082      	sub	sp, #8
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
 8011034:	460b      	mov	r3, r1
 8011036:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d00d      	beq.n	801105a <unlock_fs+0x2e>
 801103e:	78fb      	ldrb	r3, [r7, #3]
 8011040:	2b0c      	cmp	r3, #12
 8011042:	d00a      	beq.n	801105a <unlock_fs+0x2e>
 8011044:	78fb      	ldrb	r3, [r7, #3]
 8011046:	2b0b      	cmp	r3, #11
 8011048:	d007      	beq.n	801105a <unlock_fs+0x2e>
 801104a:	78fb      	ldrb	r3, [r7, #3]
 801104c:	2b0f      	cmp	r3, #15
 801104e:	d004      	beq.n	801105a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	68db      	ldr	r3, [r3, #12]
 8011054:	4618      	mov	r0, r3
 8011056:	f003 f8df 	bl	8014218 <ff_rel_grant>
	}
}
 801105a:	bf00      	nop
 801105c:	3708      	adds	r7, #8
 801105e:	46bd      	mov	sp, r7
 8011060:	bd80      	pop	{r7, pc}
	...

08011064 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011064:	b480      	push	{r7}
 8011066:	b085      	sub	sp, #20
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
 801106c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801106e:	2300      	movs	r3, #0
 8011070:	60bb      	str	r3, [r7, #8]
 8011072:	68bb      	ldr	r3, [r7, #8]
 8011074:	60fb      	str	r3, [r7, #12]
 8011076:	e029      	b.n	80110cc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011078:	4a27      	ldr	r2, [pc, #156]	; (8011118 <chk_lock+0xb4>)
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	011b      	lsls	r3, r3, #4
 801107e:	4413      	add	r3, r2
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d01d      	beq.n	80110c2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011086:	4a24      	ldr	r2, [pc, #144]	; (8011118 <chk_lock+0xb4>)
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	011b      	lsls	r3, r3, #4
 801108c:	4413      	add	r3, r2
 801108e:	681a      	ldr	r2, [r3, #0]
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	429a      	cmp	r2, r3
 8011096:	d116      	bne.n	80110c6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011098:	4a1f      	ldr	r2, [pc, #124]	; (8011118 <chk_lock+0xb4>)
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	011b      	lsls	r3, r3, #4
 801109e:	4413      	add	r3, r2
 80110a0:	3304      	adds	r3, #4
 80110a2:	681a      	ldr	r2, [r3, #0]
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80110a8:	429a      	cmp	r2, r3
 80110aa:	d10c      	bne.n	80110c6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80110ac:	4a1a      	ldr	r2, [pc, #104]	; (8011118 <chk_lock+0xb4>)
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	011b      	lsls	r3, r3, #4
 80110b2:	4413      	add	r3, r2
 80110b4:	3308      	adds	r3, #8
 80110b6:	681a      	ldr	r2, [r3, #0]
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80110bc:	429a      	cmp	r2, r3
 80110be:	d102      	bne.n	80110c6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80110c0:	e007      	b.n	80110d2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80110c2:	2301      	movs	r3, #1
 80110c4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	3301      	adds	r3, #1
 80110ca:	60fb      	str	r3, [r7, #12]
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	2b01      	cmp	r3, #1
 80110d0:	d9d2      	bls.n	8011078 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	2b02      	cmp	r3, #2
 80110d6:	d109      	bne.n	80110ec <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80110d8:	68bb      	ldr	r3, [r7, #8]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d102      	bne.n	80110e4 <chk_lock+0x80>
 80110de:	683b      	ldr	r3, [r7, #0]
 80110e0:	2b02      	cmp	r3, #2
 80110e2:	d101      	bne.n	80110e8 <chk_lock+0x84>
 80110e4:	2300      	movs	r3, #0
 80110e6:	e010      	b.n	801110a <chk_lock+0xa6>
 80110e8:	2312      	movs	r3, #18
 80110ea:	e00e      	b.n	801110a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80110ec:	683b      	ldr	r3, [r7, #0]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d108      	bne.n	8011104 <chk_lock+0xa0>
 80110f2:	4a09      	ldr	r2, [pc, #36]	; (8011118 <chk_lock+0xb4>)
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	011b      	lsls	r3, r3, #4
 80110f8:	4413      	add	r3, r2
 80110fa:	330c      	adds	r3, #12
 80110fc:	881b      	ldrh	r3, [r3, #0]
 80110fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011102:	d101      	bne.n	8011108 <chk_lock+0xa4>
 8011104:	2310      	movs	r3, #16
 8011106:	e000      	b.n	801110a <chk_lock+0xa6>
 8011108:	2300      	movs	r3, #0
}
 801110a:	4618      	mov	r0, r3
 801110c:	3714      	adds	r7, #20
 801110e:	46bd      	mov	sp, r7
 8011110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011114:	4770      	bx	lr
 8011116:	bf00      	nop
 8011118:	20003920 	.word	0x20003920

0801111c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801111c:	b480      	push	{r7}
 801111e:	b083      	sub	sp, #12
 8011120:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011122:	2300      	movs	r3, #0
 8011124:	607b      	str	r3, [r7, #4]
 8011126:	e002      	b.n	801112e <enq_lock+0x12>
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	3301      	adds	r3, #1
 801112c:	607b      	str	r3, [r7, #4]
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	2b01      	cmp	r3, #1
 8011132:	d806      	bhi.n	8011142 <enq_lock+0x26>
 8011134:	4a09      	ldr	r2, [pc, #36]	; (801115c <enq_lock+0x40>)
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	011b      	lsls	r3, r3, #4
 801113a:	4413      	add	r3, r2
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d1f2      	bne.n	8011128 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	2b02      	cmp	r3, #2
 8011146:	bf14      	ite	ne
 8011148:	2301      	movne	r3, #1
 801114a:	2300      	moveq	r3, #0
 801114c:	b2db      	uxtb	r3, r3
}
 801114e:	4618      	mov	r0, r3
 8011150:	370c      	adds	r7, #12
 8011152:	46bd      	mov	sp, r7
 8011154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011158:	4770      	bx	lr
 801115a:	bf00      	nop
 801115c:	20003920 	.word	0x20003920

08011160 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011160:	b480      	push	{r7}
 8011162:	b085      	sub	sp, #20
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
 8011168:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801116a:	2300      	movs	r3, #0
 801116c:	60fb      	str	r3, [r7, #12]
 801116e:	e01f      	b.n	80111b0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011170:	4a41      	ldr	r2, [pc, #260]	; (8011278 <inc_lock+0x118>)
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	011b      	lsls	r3, r3, #4
 8011176:	4413      	add	r3, r2
 8011178:	681a      	ldr	r2, [r3, #0]
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	429a      	cmp	r2, r3
 8011180:	d113      	bne.n	80111aa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011182:	4a3d      	ldr	r2, [pc, #244]	; (8011278 <inc_lock+0x118>)
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	011b      	lsls	r3, r3, #4
 8011188:	4413      	add	r3, r2
 801118a:	3304      	adds	r3, #4
 801118c:	681a      	ldr	r2, [r3, #0]
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011192:	429a      	cmp	r2, r3
 8011194:	d109      	bne.n	80111aa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011196:	4a38      	ldr	r2, [pc, #224]	; (8011278 <inc_lock+0x118>)
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	011b      	lsls	r3, r3, #4
 801119c:	4413      	add	r3, r2
 801119e:	3308      	adds	r3, #8
 80111a0:	681a      	ldr	r2, [r3, #0]
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80111a6:	429a      	cmp	r2, r3
 80111a8:	d006      	beq.n	80111b8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	3301      	adds	r3, #1
 80111ae:	60fb      	str	r3, [r7, #12]
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	2b01      	cmp	r3, #1
 80111b4:	d9dc      	bls.n	8011170 <inc_lock+0x10>
 80111b6:	e000      	b.n	80111ba <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80111b8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	2b02      	cmp	r3, #2
 80111be:	d132      	bne.n	8011226 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80111c0:	2300      	movs	r3, #0
 80111c2:	60fb      	str	r3, [r7, #12]
 80111c4:	e002      	b.n	80111cc <inc_lock+0x6c>
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	3301      	adds	r3, #1
 80111ca:	60fb      	str	r3, [r7, #12]
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	2b01      	cmp	r3, #1
 80111d0:	d806      	bhi.n	80111e0 <inc_lock+0x80>
 80111d2:	4a29      	ldr	r2, [pc, #164]	; (8011278 <inc_lock+0x118>)
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	011b      	lsls	r3, r3, #4
 80111d8:	4413      	add	r3, r2
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d1f2      	bne.n	80111c6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	2b02      	cmp	r3, #2
 80111e4:	d101      	bne.n	80111ea <inc_lock+0x8a>
 80111e6:	2300      	movs	r3, #0
 80111e8:	e040      	b.n	801126c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	681a      	ldr	r2, [r3, #0]
 80111ee:	4922      	ldr	r1, [pc, #136]	; (8011278 <inc_lock+0x118>)
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	011b      	lsls	r3, r3, #4
 80111f4:	440b      	add	r3, r1
 80111f6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	689a      	ldr	r2, [r3, #8]
 80111fc:	491e      	ldr	r1, [pc, #120]	; (8011278 <inc_lock+0x118>)
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	011b      	lsls	r3, r3, #4
 8011202:	440b      	add	r3, r1
 8011204:	3304      	adds	r3, #4
 8011206:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	695a      	ldr	r2, [r3, #20]
 801120c:	491a      	ldr	r1, [pc, #104]	; (8011278 <inc_lock+0x118>)
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	011b      	lsls	r3, r3, #4
 8011212:	440b      	add	r3, r1
 8011214:	3308      	adds	r3, #8
 8011216:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011218:	4a17      	ldr	r2, [pc, #92]	; (8011278 <inc_lock+0x118>)
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	011b      	lsls	r3, r3, #4
 801121e:	4413      	add	r3, r2
 8011220:	330c      	adds	r3, #12
 8011222:	2200      	movs	r2, #0
 8011224:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011226:	683b      	ldr	r3, [r7, #0]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d009      	beq.n	8011240 <inc_lock+0xe0>
 801122c:	4a12      	ldr	r2, [pc, #72]	; (8011278 <inc_lock+0x118>)
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	011b      	lsls	r3, r3, #4
 8011232:	4413      	add	r3, r2
 8011234:	330c      	adds	r3, #12
 8011236:	881b      	ldrh	r3, [r3, #0]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d001      	beq.n	8011240 <inc_lock+0xe0>
 801123c:	2300      	movs	r3, #0
 801123e:	e015      	b.n	801126c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011240:	683b      	ldr	r3, [r7, #0]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d108      	bne.n	8011258 <inc_lock+0xf8>
 8011246:	4a0c      	ldr	r2, [pc, #48]	; (8011278 <inc_lock+0x118>)
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	011b      	lsls	r3, r3, #4
 801124c:	4413      	add	r3, r2
 801124e:	330c      	adds	r3, #12
 8011250:	881b      	ldrh	r3, [r3, #0]
 8011252:	3301      	adds	r3, #1
 8011254:	b29a      	uxth	r2, r3
 8011256:	e001      	b.n	801125c <inc_lock+0xfc>
 8011258:	f44f 7280 	mov.w	r2, #256	; 0x100
 801125c:	4906      	ldr	r1, [pc, #24]	; (8011278 <inc_lock+0x118>)
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	011b      	lsls	r3, r3, #4
 8011262:	440b      	add	r3, r1
 8011264:	330c      	adds	r3, #12
 8011266:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	3301      	adds	r3, #1
}
 801126c:	4618      	mov	r0, r3
 801126e:	3714      	adds	r7, #20
 8011270:	46bd      	mov	sp, r7
 8011272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011276:	4770      	bx	lr
 8011278:	20003920 	.word	0x20003920

0801127c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801127c:	b480      	push	{r7}
 801127e:	b085      	sub	sp, #20
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	3b01      	subs	r3, #1
 8011288:	607b      	str	r3, [r7, #4]
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	2b01      	cmp	r3, #1
 801128e:	d825      	bhi.n	80112dc <dec_lock+0x60>
		n = Files[i].ctr;
 8011290:	4a17      	ldr	r2, [pc, #92]	; (80112f0 <dec_lock+0x74>)
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	011b      	lsls	r3, r3, #4
 8011296:	4413      	add	r3, r2
 8011298:	330c      	adds	r3, #12
 801129a:	881b      	ldrh	r3, [r3, #0]
 801129c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801129e:	89fb      	ldrh	r3, [r7, #14]
 80112a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80112a4:	d101      	bne.n	80112aa <dec_lock+0x2e>
 80112a6:	2300      	movs	r3, #0
 80112a8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80112aa:	89fb      	ldrh	r3, [r7, #14]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d002      	beq.n	80112b6 <dec_lock+0x3a>
 80112b0:	89fb      	ldrh	r3, [r7, #14]
 80112b2:	3b01      	subs	r3, #1
 80112b4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80112b6:	4a0e      	ldr	r2, [pc, #56]	; (80112f0 <dec_lock+0x74>)
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	011b      	lsls	r3, r3, #4
 80112bc:	4413      	add	r3, r2
 80112be:	330c      	adds	r3, #12
 80112c0:	89fa      	ldrh	r2, [r7, #14]
 80112c2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80112c4:	89fb      	ldrh	r3, [r7, #14]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d105      	bne.n	80112d6 <dec_lock+0x5a>
 80112ca:	4a09      	ldr	r2, [pc, #36]	; (80112f0 <dec_lock+0x74>)
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	011b      	lsls	r3, r3, #4
 80112d0:	4413      	add	r3, r2
 80112d2:	2200      	movs	r2, #0
 80112d4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80112d6:	2300      	movs	r3, #0
 80112d8:	737b      	strb	r3, [r7, #13]
 80112da:	e001      	b.n	80112e0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80112dc:	2302      	movs	r3, #2
 80112de:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80112e0:	7b7b      	ldrb	r3, [r7, #13]
}
 80112e2:	4618      	mov	r0, r3
 80112e4:	3714      	adds	r7, #20
 80112e6:	46bd      	mov	sp, r7
 80112e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ec:	4770      	bx	lr
 80112ee:	bf00      	nop
 80112f0:	20003920 	.word	0x20003920

080112f4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80112f4:	b480      	push	{r7}
 80112f6:	b085      	sub	sp, #20
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80112fc:	2300      	movs	r3, #0
 80112fe:	60fb      	str	r3, [r7, #12]
 8011300:	e010      	b.n	8011324 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011302:	4a0d      	ldr	r2, [pc, #52]	; (8011338 <clear_lock+0x44>)
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	011b      	lsls	r3, r3, #4
 8011308:	4413      	add	r3, r2
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	687a      	ldr	r2, [r7, #4]
 801130e:	429a      	cmp	r2, r3
 8011310:	d105      	bne.n	801131e <clear_lock+0x2a>
 8011312:	4a09      	ldr	r2, [pc, #36]	; (8011338 <clear_lock+0x44>)
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	011b      	lsls	r3, r3, #4
 8011318:	4413      	add	r3, r2
 801131a:	2200      	movs	r2, #0
 801131c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	3301      	adds	r3, #1
 8011322:	60fb      	str	r3, [r7, #12]
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	2b01      	cmp	r3, #1
 8011328:	d9eb      	bls.n	8011302 <clear_lock+0xe>
	}
}
 801132a:	bf00      	nop
 801132c:	bf00      	nop
 801132e:	3714      	adds	r7, #20
 8011330:	46bd      	mov	sp, r7
 8011332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011336:	4770      	bx	lr
 8011338:	20003920 	.word	0x20003920

0801133c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801133c:	b580      	push	{r7, lr}
 801133e:	b086      	sub	sp, #24
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011344:	2300      	movs	r3, #0
 8011346:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	78db      	ldrb	r3, [r3, #3]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d034      	beq.n	80113ba <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011354:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	7858      	ldrb	r0, [r3, #1]
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011360:	2301      	movs	r3, #1
 8011362:	697a      	ldr	r2, [r7, #20]
 8011364:	f7ff fd0e 	bl	8010d84 <disk_write>
 8011368:	4603      	mov	r3, r0
 801136a:	2b00      	cmp	r3, #0
 801136c:	d002      	beq.n	8011374 <sync_window+0x38>
			res = FR_DISK_ERR;
 801136e:	2301      	movs	r3, #1
 8011370:	73fb      	strb	r3, [r7, #15]
 8011372:	e022      	b.n	80113ba <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	2200      	movs	r2, #0
 8011378:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801137e:	697a      	ldr	r2, [r7, #20]
 8011380:	1ad2      	subs	r2, r2, r3
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	69db      	ldr	r3, [r3, #28]
 8011386:	429a      	cmp	r2, r3
 8011388:	d217      	bcs.n	80113ba <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	789b      	ldrb	r3, [r3, #2]
 801138e:	613b      	str	r3, [r7, #16]
 8011390:	e010      	b.n	80113b4 <sync_window+0x78>
					wsect += fs->fsize;
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	69db      	ldr	r3, [r3, #28]
 8011396:	697a      	ldr	r2, [r7, #20]
 8011398:	4413      	add	r3, r2
 801139a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	7858      	ldrb	r0, [r3, #1]
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80113a6:	2301      	movs	r3, #1
 80113a8:	697a      	ldr	r2, [r7, #20]
 80113aa:	f7ff fceb 	bl	8010d84 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80113ae:	693b      	ldr	r3, [r7, #16]
 80113b0:	3b01      	subs	r3, #1
 80113b2:	613b      	str	r3, [r7, #16]
 80113b4:	693b      	ldr	r3, [r7, #16]
 80113b6:	2b01      	cmp	r3, #1
 80113b8:	d8eb      	bhi.n	8011392 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80113ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80113bc:	4618      	mov	r0, r3
 80113be:	3718      	adds	r7, #24
 80113c0:	46bd      	mov	sp, r7
 80113c2:	bd80      	pop	{r7, pc}

080113c4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80113c4:	b580      	push	{r7, lr}
 80113c6:	b084      	sub	sp, #16
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	6078      	str	r0, [r7, #4]
 80113cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80113ce:	2300      	movs	r3, #0
 80113d0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113d6:	683a      	ldr	r2, [r7, #0]
 80113d8:	429a      	cmp	r2, r3
 80113da:	d01b      	beq.n	8011414 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80113dc:	6878      	ldr	r0, [r7, #4]
 80113de:	f7ff ffad 	bl	801133c <sync_window>
 80113e2:	4603      	mov	r3, r0
 80113e4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80113e6:	7bfb      	ldrb	r3, [r7, #15]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d113      	bne.n	8011414 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	7858      	ldrb	r0, [r3, #1]
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80113f6:	2301      	movs	r3, #1
 80113f8:	683a      	ldr	r2, [r7, #0]
 80113fa:	f7ff fca3 	bl	8010d44 <disk_read>
 80113fe:	4603      	mov	r3, r0
 8011400:	2b00      	cmp	r3, #0
 8011402:	d004      	beq.n	801140e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011404:	f04f 33ff 	mov.w	r3, #4294967295
 8011408:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801140a:	2301      	movs	r3, #1
 801140c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	683a      	ldr	r2, [r7, #0]
 8011412:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8011414:	7bfb      	ldrb	r3, [r7, #15]
}
 8011416:	4618      	mov	r0, r3
 8011418:	3710      	adds	r7, #16
 801141a:	46bd      	mov	sp, r7
 801141c:	bd80      	pop	{r7, pc}
	...

08011420 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011420:	b580      	push	{r7, lr}
 8011422:	b084      	sub	sp, #16
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011428:	6878      	ldr	r0, [r7, #4]
 801142a:	f7ff ff87 	bl	801133c <sync_window>
 801142e:	4603      	mov	r3, r0
 8011430:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011432:	7bfb      	ldrb	r3, [r7, #15]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d158      	bne.n	80114ea <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	781b      	ldrb	r3, [r3, #0]
 801143c:	2b03      	cmp	r3, #3
 801143e:	d148      	bne.n	80114d2 <sync_fs+0xb2>
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	791b      	ldrb	r3, [r3, #4]
 8011444:	2b01      	cmp	r3, #1
 8011446:	d144      	bne.n	80114d2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	3334      	adds	r3, #52	; 0x34
 801144c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011450:	2100      	movs	r1, #0
 8011452:	4618      	mov	r0, r3
 8011454:	f7ff fd77 	bl	8010f46 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	3334      	adds	r3, #52	; 0x34
 801145c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011460:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011464:	4618      	mov	r0, r3
 8011466:	f7ff fd06 	bl	8010e76 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	3334      	adds	r3, #52	; 0x34
 801146e:	4921      	ldr	r1, [pc, #132]	; (80114f4 <sync_fs+0xd4>)
 8011470:	4618      	mov	r0, r3
 8011472:	f7ff fd1b 	bl	8010eac <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	3334      	adds	r3, #52	; 0x34
 801147a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801147e:	491e      	ldr	r1, [pc, #120]	; (80114f8 <sync_fs+0xd8>)
 8011480:	4618      	mov	r0, r3
 8011482:	f7ff fd13 	bl	8010eac <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	3334      	adds	r3, #52	; 0x34
 801148a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	695b      	ldr	r3, [r3, #20]
 8011492:	4619      	mov	r1, r3
 8011494:	4610      	mov	r0, r2
 8011496:	f7ff fd09 	bl	8010eac <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	3334      	adds	r3, #52	; 0x34
 801149e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	691b      	ldr	r3, [r3, #16]
 80114a6:	4619      	mov	r1, r3
 80114a8:	4610      	mov	r0, r2
 80114aa:	f7ff fcff 	bl	8010eac <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	6a1b      	ldr	r3, [r3, #32]
 80114b2:	1c5a      	adds	r2, r3, #1
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	7858      	ldrb	r0, [r3, #1]
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80114c6:	2301      	movs	r3, #1
 80114c8:	f7ff fc5c 	bl	8010d84 <disk_write>
			fs->fsi_flag = 0;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	2200      	movs	r2, #0
 80114d0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	785b      	ldrb	r3, [r3, #1]
 80114d6:	2200      	movs	r2, #0
 80114d8:	2100      	movs	r1, #0
 80114da:	4618      	mov	r0, r3
 80114dc:	f7ff fc72 	bl	8010dc4 <disk_ioctl>
 80114e0:	4603      	mov	r3, r0
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d001      	beq.n	80114ea <sync_fs+0xca>
 80114e6:	2301      	movs	r3, #1
 80114e8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80114ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80114ec:	4618      	mov	r0, r3
 80114ee:	3710      	adds	r7, #16
 80114f0:	46bd      	mov	sp, r7
 80114f2:	bd80      	pop	{r7, pc}
 80114f4:	41615252 	.word	0x41615252
 80114f8:	61417272 	.word	0x61417272

080114fc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80114fc:	b480      	push	{r7}
 80114fe:	b083      	sub	sp, #12
 8011500:	af00      	add	r7, sp, #0
 8011502:	6078      	str	r0, [r7, #4]
 8011504:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011506:	683b      	ldr	r3, [r7, #0]
 8011508:	3b02      	subs	r3, #2
 801150a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	699b      	ldr	r3, [r3, #24]
 8011510:	3b02      	subs	r3, #2
 8011512:	683a      	ldr	r2, [r7, #0]
 8011514:	429a      	cmp	r2, r3
 8011516:	d301      	bcc.n	801151c <clust2sect+0x20>
 8011518:	2300      	movs	r3, #0
 801151a:	e008      	b.n	801152e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	895b      	ldrh	r3, [r3, #10]
 8011520:	461a      	mov	r2, r3
 8011522:	683b      	ldr	r3, [r7, #0]
 8011524:	fb03 f202 	mul.w	r2, r3, r2
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801152c:	4413      	add	r3, r2
}
 801152e:	4618      	mov	r0, r3
 8011530:	370c      	adds	r7, #12
 8011532:	46bd      	mov	sp, r7
 8011534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011538:	4770      	bx	lr

0801153a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801153a:	b580      	push	{r7, lr}
 801153c:	b086      	sub	sp, #24
 801153e:	af00      	add	r7, sp, #0
 8011540:	6078      	str	r0, [r7, #4]
 8011542:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801154a:	683b      	ldr	r3, [r7, #0]
 801154c:	2b01      	cmp	r3, #1
 801154e:	d904      	bls.n	801155a <get_fat+0x20>
 8011550:	693b      	ldr	r3, [r7, #16]
 8011552:	699b      	ldr	r3, [r3, #24]
 8011554:	683a      	ldr	r2, [r7, #0]
 8011556:	429a      	cmp	r2, r3
 8011558:	d302      	bcc.n	8011560 <get_fat+0x26>
		val = 1;	/* Internal error */
 801155a:	2301      	movs	r3, #1
 801155c:	617b      	str	r3, [r7, #20]
 801155e:	e08f      	b.n	8011680 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011560:	f04f 33ff 	mov.w	r3, #4294967295
 8011564:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011566:	693b      	ldr	r3, [r7, #16]
 8011568:	781b      	ldrb	r3, [r3, #0]
 801156a:	2b03      	cmp	r3, #3
 801156c:	d062      	beq.n	8011634 <get_fat+0xfa>
 801156e:	2b03      	cmp	r3, #3
 8011570:	dc7c      	bgt.n	801166c <get_fat+0x132>
 8011572:	2b01      	cmp	r3, #1
 8011574:	d002      	beq.n	801157c <get_fat+0x42>
 8011576:	2b02      	cmp	r3, #2
 8011578:	d042      	beq.n	8011600 <get_fat+0xc6>
 801157a:	e077      	b.n	801166c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801157c:	683b      	ldr	r3, [r7, #0]
 801157e:	60fb      	str	r3, [r7, #12]
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	085b      	lsrs	r3, r3, #1
 8011584:	68fa      	ldr	r2, [r7, #12]
 8011586:	4413      	add	r3, r2
 8011588:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801158a:	693b      	ldr	r3, [r7, #16]
 801158c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	0a5b      	lsrs	r3, r3, #9
 8011592:	4413      	add	r3, r2
 8011594:	4619      	mov	r1, r3
 8011596:	6938      	ldr	r0, [r7, #16]
 8011598:	f7ff ff14 	bl	80113c4 <move_window>
 801159c:	4603      	mov	r3, r0
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d167      	bne.n	8011672 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	1c5a      	adds	r2, r3, #1
 80115a6:	60fa      	str	r2, [r7, #12]
 80115a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80115ac:	693a      	ldr	r2, [r7, #16]
 80115ae:	4413      	add	r3, r2
 80115b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80115b4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80115b6:	693b      	ldr	r3, [r7, #16]
 80115b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	0a5b      	lsrs	r3, r3, #9
 80115be:	4413      	add	r3, r2
 80115c0:	4619      	mov	r1, r3
 80115c2:	6938      	ldr	r0, [r7, #16]
 80115c4:	f7ff fefe 	bl	80113c4 <move_window>
 80115c8:	4603      	mov	r3, r0
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d153      	bne.n	8011676 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80115d4:	693a      	ldr	r2, [r7, #16]
 80115d6:	4413      	add	r3, r2
 80115d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80115dc:	021b      	lsls	r3, r3, #8
 80115de:	461a      	mov	r2, r3
 80115e0:	68bb      	ldr	r3, [r7, #8]
 80115e2:	4313      	orrs	r3, r2
 80115e4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80115e6:	683b      	ldr	r3, [r7, #0]
 80115e8:	f003 0301 	and.w	r3, r3, #1
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d002      	beq.n	80115f6 <get_fat+0xbc>
 80115f0:	68bb      	ldr	r3, [r7, #8]
 80115f2:	091b      	lsrs	r3, r3, #4
 80115f4:	e002      	b.n	80115fc <get_fat+0xc2>
 80115f6:	68bb      	ldr	r3, [r7, #8]
 80115f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80115fc:	617b      	str	r3, [r7, #20]
			break;
 80115fe:	e03f      	b.n	8011680 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011600:	693b      	ldr	r3, [r7, #16]
 8011602:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011604:	683b      	ldr	r3, [r7, #0]
 8011606:	0a1b      	lsrs	r3, r3, #8
 8011608:	4413      	add	r3, r2
 801160a:	4619      	mov	r1, r3
 801160c:	6938      	ldr	r0, [r7, #16]
 801160e:	f7ff fed9 	bl	80113c4 <move_window>
 8011612:	4603      	mov	r3, r0
 8011614:	2b00      	cmp	r3, #0
 8011616:	d130      	bne.n	801167a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011618:	693b      	ldr	r3, [r7, #16]
 801161a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801161e:	683b      	ldr	r3, [r7, #0]
 8011620:	005b      	lsls	r3, r3, #1
 8011622:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8011626:	4413      	add	r3, r2
 8011628:	4618      	mov	r0, r3
 801162a:	f7ff fbe9 	bl	8010e00 <ld_word>
 801162e:	4603      	mov	r3, r0
 8011630:	617b      	str	r3, [r7, #20]
			break;
 8011632:	e025      	b.n	8011680 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011634:	693b      	ldr	r3, [r7, #16]
 8011636:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	09db      	lsrs	r3, r3, #7
 801163c:	4413      	add	r3, r2
 801163e:	4619      	mov	r1, r3
 8011640:	6938      	ldr	r0, [r7, #16]
 8011642:	f7ff febf 	bl	80113c4 <move_window>
 8011646:	4603      	mov	r3, r0
 8011648:	2b00      	cmp	r3, #0
 801164a:	d118      	bne.n	801167e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801164c:	693b      	ldr	r3, [r7, #16]
 801164e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011652:	683b      	ldr	r3, [r7, #0]
 8011654:	009b      	lsls	r3, r3, #2
 8011656:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801165a:	4413      	add	r3, r2
 801165c:	4618      	mov	r0, r3
 801165e:	f7ff fbe7 	bl	8010e30 <ld_dword>
 8011662:	4603      	mov	r3, r0
 8011664:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011668:	617b      	str	r3, [r7, #20]
			break;
 801166a:	e009      	b.n	8011680 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801166c:	2301      	movs	r3, #1
 801166e:	617b      	str	r3, [r7, #20]
 8011670:	e006      	b.n	8011680 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011672:	bf00      	nop
 8011674:	e004      	b.n	8011680 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011676:	bf00      	nop
 8011678:	e002      	b.n	8011680 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801167a:	bf00      	nop
 801167c:	e000      	b.n	8011680 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801167e:	bf00      	nop
		}
	}

	return val;
 8011680:	697b      	ldr	r3, [r7, #20]
}
 8011682:	4618      	mov	r0, r3
 8011684:	3718      	adds	r7, #24
 8011686:	46bd      	mov	sp, r7
 8011688:	bd80      	pop	{r7, pc}

0801168a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801168a:	b590      	push	{r4, r7, lr}
 801168c:	b089      	sub	sp, #36	; 0x24
 801168e:	af00      	add	r7, sp, #0
 8011690:	60f8      	str	r0, [r7, #12]
 8011692:	60b9      	str	r1, [r7, #8]
 8011694:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011696:	2302      	movs	r3, #2
 8011698:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801169a:	68bb      	ldr	r3, [r7, #8]
 801169c:	2b01      	cmp	r3, #1
 801169e:	f240 80d9 	bls.w	8011854 <put_fat+0x1ca>
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	699b      	ldr	r3, [r3, #24]
 80116a6:	68ba      	ldr	r2, [r7, #8]
 80116a8:	429a      	cmp	r2, r3
 80116aa:	f080 80d3 	bcs.w	8011854 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	781b      	ldrb	r3, [r3, #0]
 80116b2:	2b03      	cmp	r3, #3
 80116b4:	f000 8096 	beq.w	80117e4 <put_fat+0x15a>
 80116b8:	2b03      	cmp	r3, #3
 80116ba:	f300 80cb 	bgt.w	8011854 <put_fat+0x1ca>
 80116be:	2b01      	cmp	r3, #1
 80116c0:	d002      	beq.n	80116c8 <put_fat+0x3e>
 80116c2:	2b02      	cmp	r3, #2
 80116c4:	d06e      	beq.n	80117a4 <put_fat+0x11a>
 80116c6:	e0c5      	b.n	8011854 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80116c8:	68bb      	ldr	r3, [r7, #8]
 80116ca:	61bb      	str	r3, [r7, #24]
 80116cc:	69bb      	ldr	r3, [r7, #24]
 80116ce:	085b      	lsrs	r3, r3, #1
 80116d0:	69ba      	ldr	r2, [r7, #24]
 80116d2:	4413      	add	r3, r2
 80116d4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80116da:	69bb      	ldr	r3, [r7, #24]
 80116dc:	0a5b      	lsrs	r3, r3, #9
 80116de:	4413      	add	r3, r2
 80116e0:	4619      	mov	r1, r3
 80116e2:	68f8      	ldr	r0, [r7, #12]
 80116e4:	f7ff fe6e 	bl	80113c4 <move_window>
 80116e8:	4603      	mov	r3, r0
 80116ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80116ec:	7ffb      	ldrb	r3, [r7, #31]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	f040 80a9 	bne.w	8011846 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80116fa:	69bb      	ldr	r3, [r7, #24]
 80116fc:	1c59      	adds	r1, r3, #1
 80116fe:	61b9      	str	r1, [r7, #24]
 8011700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011704:	4413      	add	r3, r2
 8011706:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011708:	68bb      	ldr	r3, [r7, #8]
 801170a:	f003 0301 	and.w	r3, r3, #1
 801170e:	2b00      	cmp	r3, #0
 8011710:	d00d      	beq.n	801172e <put_fat+0xa4>
 8011712:	697b      	ldr	r3, [r7, #20]
 8011714:	781b      	ldrb	r3, [r3, #0]
 8011716:	b25b      	sxtb	r3, r3
 8011718:	f003 030f 	and.w	r3, r3, #15
 801171c:	b25a      	sxtb	r2, r3
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	b2db      	uxtb	r3, r3
 8011722:	011b      	lsls	r3, r3, #4
 8011724:	b25b      	sxtb	r3, r3
 8011726:	4313      	orrs	r3, r2
 8011728:	b25b      	sxtb	r3, r3
 801172a:	b2db      	uxtb	r3, r3
 801172c:	e001      	b.n	8011732 <put_fat+0xa8>
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	b2db      	uxtb	r3, r3
 8011732:	697a      	ldr	r2, [r7, #20]
 8011734:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	2201      	movs	r2, #1
 801173a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011740:	69bb      	ldr	r3, [r7, #24]
 8011742:	0a5b      	lsrs	r3, r3, #9
 8011744:	4413      	add	r3, r2
 8011746:	4619      	mov	r1, r3
 8011748:	68f8      	ldr	r0, [r7, #12]
 801174a:	f7ff fe3b 	bl	80113c4 <move_window>
 801174e:	4603      	mov	r3, r0
 8011750:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011752:	7ffb      	ldrb	r3, [r7, #31]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d178      	bne.n	801184a <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801175e:	69bb      	ldr	r3, [r7, #24]
 8011760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011764:	4413      	add	r3, r2
 8011766:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011768:	68bb      	ldr	r3, [r7, #8]
 801176a:	f003 0301 	and.w	r3, r3, #1
 801176e:	2b00      	cmp	r3, #0
 8011770:	d003      	beq.n	801177a <put_fat+0xf0>
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	091b      	lsrs	r3, r3, #4
 8011776:	b2db      	uxtb	r3, r3
 8011778:	e00e      	b.n	8011798 <put_fat+0x10e>
 801177a:	697b      	ldr	r3, [r7, #20]
 801177c:	781b      	ldrb	r3, [r3, #0]
 801177e:	b25b      	sxtb	r3, r3
 8011780:	f023 030f 	bic.w	r3, r3, #15
 8011784:	b25a      	sxtb	r2, r3
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	0a1b      	lsrs	r3, r3, #8
 801178a:	b25b      	sxtb	r3, r3
 801178c:	f003 030f 	and.w	r3, r3, #15
 8011790:	b25b      	sxtb	r3, r3
 8011792:	4313      	orrs	r3, r2
 8011794:	b25b      	sxtb	r3, r3
 8011796:	b2db      	uxtb	r3, r3
 8011798:	697a      	ldr	r2, [r7, #20]
 801179a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	2201      	movs	r2, #1
 80117a0:	70da      	strb	r2, [r3, #3]
			break;
 80117a2:	e057      	b.n	8011854 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80117a8:	68bb      	ldr	r3, [r7, #8]
 80117aa:	0a1b      	lsrs	r3, r3, #8
 80117ac:	4413      	add	r3, r2
 80117ae:	4619      	mov	r1, r3
 80117b0:	68f8      	ldr	r0, [r7, #12]
 80117b2:	f7ff fe07 	bl	80113c4 <move_window>
 80117b6:	4603      	mov	r3, r0
 80117b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80117ba:	7ffb      	ldrb	r3, [r7, #31]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d146      	bne.n	801184e <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80117c6:	68bb      	ldr	r3, [r7, #8]
 80117c8:	005b      	lsls	r3, r3, #1
 80117ca:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80117ce:	4413      	add	r3, r2
 80117d0:	687a      	ldr	r2, [r7, #4]
 80117d2:	b292      	uxth	r2, r2
 80117d4:	4611      	mov	r1, r2
 80117d6:	4618      	mov	r0, r3
 80117d8:	f7ff fb4d 	bl	8010e76 <st_word>
			fs->wflag = 1;
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	2201      	movs	r2, #1
 80117e0:	70da      	strb	r2, [r3, #3]
			break;
 80117e2:	e037      	b.n	8011854 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80117e8:	68bb      	ldr	r3, [r7, #8]
 80117ea:	09db      	lsrs	r3, r3, #7
 80117ec:	4413      	add	r3, r2
 80117ee:	4619      	mov	r1, r3
 80117f0:	68f8      	ldr	r0, [r7, #12]
 80117f2:	f7ff fde7 	bl	80113c4 <move_window>
 80117f6:	4603      	mov	r3, r0
 80117f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80117fa:	7ffb      	ldrb	r3, [r7, #31]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d128      	bne.n	8011852 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801180c:	68bb      	ldr	r3, [r7, #8]
 801180e:	009b      	lsls	r3, r3, #2
 8011810:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8011814:	4413      	add	r3, r2
 8011816:	4618      	mov	r0, r3
 8011818:	f7ff fb0a 	bl	8010e30 <ld_dword>
 801181c:	4603      	mov	r3, r0
 801181e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011822:	4323      	orrs	r3, r4
 8011824:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801182c:	68bb      	ldr	r3, [r7, #8]
 801182e:	009b      	lsls	r3, r3, #2
 8011830:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8011834:	4413      	add	r3, r2
 8011836:	6879      	ldr	r1, [r7, #4]
 8011838:	4618      	mov	r0, r3
 801183a:	f7ff fb37 	bl	8010eac <st_dword>
			fs->wflag = 1;
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	2201      	movs	r2, #1
 8011842:	70da      	strb	r2, [r3, #3]
			break;
 8011844:	e006      	b.n	8011854 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011846:	bf00      	nop
 8011848:	e004      	b.n	8011854 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801184a:	bf00      	nop
 801184c:	e002      	b.n	8011854 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801184e:	bf00      	nop
 8011850:	e000      	b.n	8011854 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011852:	bf00      	nop
		}
	}
	return res;
 8011854:	7ffb      	ldrb	r3, [r7, #31]
}
 8011856:	4618      	mov	r0, r3
 8011858:	3724      	adds	r7, #36	; 0x24
 801185a:	46bd      	mov	sp, r7
 801185c:	bd90      	pop	{r4, r7, pc}

0801185e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801185e:	b580      	push	{r7, lr}
 8011860:	b088      	sub	sp, #32
 8011862:	af00      	add	r7, sp, #0
 8011864:	60f8      	str	r0, [r7, #12]
 8011866:	60b9      	str	r1, [r7, #8]
 8011868:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801186a:	2300      	movs	r3, #0
 801186c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011874:	68bb      	ldr	r3, [r7, #8]
 8011876:	2b01      	cmp	r3, #1
 8011878:	d904      	bls.n	8011884 <remove_chain+0x26>
 801187a:	69bb      	ldr	r3, [r7, #24]
 801187c:	699b      	ldr	r3, [r3, #24]
 801187e:	68ba      	ldr	r2, [r7, #8]
 8011880:	429a      	cmp	r2, r3
 8011882:	d301      	bcc.n	8011888 <remove_chain+0x2a>
 8011884:	2302      	movs	r3, #2
 8011886:	e04b      	b.n	8011920 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d00c      	beq.n	80118a8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801188e:	f04f 32ff 	mov.w	r2, #4294967295
 8011892:	6879      	ldr	r1, [r7, #4]
 8011894:	69b8      	ldr	r0, [r7, #24]
 8011896:	f7ff fef8 	bl	801168a <put_fat>
 801189a:	4603      	mov	r3, r0
 801189c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801189e:	7ffb      	ldrb	r3, [r7, #31]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d001      	beq.n	80118a8 <remove_chain+0x4a>
 80118a4:	7ffb      	ldrb	r3, [r7, #31]
 80118a6:	e03b      	b.n	8011920 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80118a8:	68b9      	ldr	r1, [r7, #8]
 80118aa:	68f8      	ldr	r0, [r7, #12]
 80118ac:	f7ff fe45 	bl	801153a <get_fat>
 80118b0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80118b2:	697b      	ldr	r3, [r7, #20]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d031      	beq.n	801191c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80118b8:	697b      	ldr	r3, [r7, #20]
 80118ba:	2b01      	cmp	r3, #1
 80118bc:	d101      	bne.n	80118c2 <remove_chain+0x64>
 80118be:	2302      	movs	r3, #2
 80118c0:	e02e      	b.n	8011920 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80118c2:	697b      	ldr	r3, [r7, #20]
 80118c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118c8:	d101      	bne.n	80118ce <remove_chain+0x70>
 80118ca:	2301      	movs	r3, #1
 80118cc:	e028      	b.n	8011920 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80118ce:	2200      	movs	r2, #0
 80118d0:	68b9      	ldr	r1, [r7, #8]
 80118d2:	69b8      	ldr	r0, [r7, #24]
 80118d4:	f7ff fed9 	bl	801168a <put_fat>
 80118d8:	4603      	mov	r3, r0
 80118da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80118dc:	7ffb      	ldrb	r3, [r7, #31]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d001      	beq.n	80118e6 <remove_chain+0x88>
 80118e2:	7ffb      	ldrb	r3, [r7, #31]
 80118e4:	e01c      	b.n	8011920 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80118e6:	69bb      	ldr	r3, [r7, #24]
 80118e8:	695a      	ldr	r2, [r3, #20]
 80118ea:	69bb      	ldr	r3, [r7, #24]
 80118ec:	699b      	ldr	r3, [r3, #24]
 80118ee:	3b02      	subs	r3, #2
 80118f0:	429a      	cmp	r2, r3
 80118f2:	d20b      	bcs.n	801190c <remove_chain+0xae>
			fs->free_clst++;
 80118f4:	69bb      	ldr	r3, [r7, #24]
 80118f6:	695b      	ldr	r3, [r3, #20]
 80118f8:	1c5a      	adds	r2, r3, #1
 80118fa:	69bb      	ldr	r3, [r7, #24]
 80118fc:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80118fe:	69bb      	ldr	r3, [r7, #24]
 8011900:	791b      	ldrb	r3, [r3, #4]
 8011902:	f043 0301 	orr.w	r3, r3, #1
 8011906:	b2da      	uxtb	r2, r3
 8011908:	69bb      	ldr	r3, [r7, #24]
 801190a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801190c:	697b      	ldr	r3, [r7, #20]
 801190e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011910:	69bb      	ldr	r3, [r7, #24]
 8011912:	699b      	ldr	r3, [r3, #24]
 8011914:	68ba      	ldr	r2, [r7, #8]
 8011916:	429a      	cmp	r2, r3
 8011918:	d3c6      	bcc.n	80118a8 <remove_chain+0x4a>
 801191a:	e000      	b.n	801191e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801191c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801191e:	2300      	movs	r3, #0
}
 8011920:	4618      	mov	r0, r3
 8011922:	3720      	adds	r7, #32
 8011924:	46bd      	mov	sp, r7
 8011926:	bd80      	pop	{r7, pc}

08011928 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011928:	b580      	push	{r7, lr}
 801192a:	b088      	sub	sp, #32
 801192c:	af00      	add	r7, sp, #0
 801192e:	6078      	str	r0, [r7, #4]
 8011930:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011938:	683b      	ldr	r3, [r7, #0]
 801193a:	2b00      	cmp	r3, #0
 801193c:	d10d      	bne.n	801195a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801193e:	693b      	ldr	r3, [r7, #16]
 8011940:	691b      	ldr	r3, [r3, #16]
 8011942:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011944:	69bb      	ldr	r3, [r7, #24]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d004      	beq.n	8011954 <create_chain+0x2c>
 801194a:	693b      	ldr	r3, [r7, #16]
 801194c:	699b      	ldr	r3, [r3, #24]
 801194e:	69ba      	ldr	r2, [r7, #24]
 8011950:	429a      	cmp	r2, r3
 8011952:	d31b      	bcc.n	801198c <create_chain+0x64>
 8011954:	2301      	movs	r3, #1
 8011956:	61bb      	str	r3, [r7, #24]
 8011958:	e018      	b.n	801198c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801195a:	6839      	ldr	r1, [r7, #0]
 801195c:	6878      	ldr	r0, [r7, #4]
 801195e:	f7ff fdec 	bl	801153a <get_fat>
 8011962:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	2b01      	cmp	r3, #1
 8011968:	d801      	bhi.n	801196e <create_chain+0x46>
 801196a:	2301      	movs	r3, #1
 801196c:	e070      	b.n	8011a50 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011974:	d101      	bne.n	801197a <create_chain+0x52>
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	e06a      	b.n	8011a50 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801197a:	693b      	ldr	r3, [r7, #16]
 801197c:	699b      	ldr	r3, [r3, #24]
 801197e:	68fa      	ldr	r2, [r7, #12]
 8011980:	429a      	cmp	r2, r3
 8011982:	d201      	bcs.n	8011988 <create_chain+0x60>
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	e063      	b.n	8011a50 <create_chain+0x128>
		scl = clst;
 8011988:	683b      	ldr	r3, [r7, #0]
 801198a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801198c:	69bb      	ldr	r3, [r7, #24]
 801198e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011990:	69fb      	ldr	r3, [r7, #28]
 8011992:	3301      	adds	r3, #1
 8011994:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011996:	693b      	ldr	r3, [r7, #16]
 8011998:	699b      	ldr	r3, [r3, #24]
 801199a:	69fa      	ldr	r2, [r7, #28]
 801199c:	429a      	cmp	r2, r3
 801199e:	d307      	bcc.n	80119b0 <create_chain+0x88>
				ncl = 2;
 80119a0:	2302      	movs	r3, #2
 80119a2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80119a4:	69fa      	ldr	r2, [r7, #28]
 80119a6:	69bb      	ldr	r3, [r7, #24]
 80119a8:	429a      	cmp	r2, r3
 80119aa:	d901      	bls.n	80119b0 <create_chain+0x88>
 80119ac:	2300      	movs	r3, #0
 80119ae:	e04f      	b.n	8011a50 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80119b0:	69f9      	ldr	r1, [r7, #28]
 80119b2:	6878      	ldr	r0, [r7, #4]
 80119b4:	f7ff fdc1 	bl	801153a <get_fat>
 80119b8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d00e      	beq.n	80119de <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	2b01      	cmp	r3, #1
 80119c4:	d003      	beq.n	80119ce <create_chain+0xa6>
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119cc:	d101      	bne.n	80119d2 <create_chain+0xaa>
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	e03e      	b.n	8011a50 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80119d2:	69fa      	ldr	r2, [r7, #28]
 80119d4:	69bb      	ldr	r3, [r7, #24]
 80119d6:	429a      	cmp	r2, r3
 80119d8:	d1da      	bne.n	8011990 <create_chain+0x68>
 80119da:	2300      	movs	r3, #0
 80119dc:	e038      	b.n	8011a50 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80119de:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80119e0:	f04f 32ff 	mov.w	r2, #4294967295
 80119e4:	69f9      	ldr	r1, [r7, #28]
 80119e6:	6938      	ldr	r0, [r7, #16]
 80119e8:	f7ff fe4f 	bl	801168a <put_fat>
 80119ec:	4603      	mov	r3, r0
 80119ee:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80119f0:	7dfb      	ldrb	r3, [r7, #23]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d109      	bne.n	8011a0a <create_chain+0xe2>
 80119f6:	683b      	ldr	r3, [r7, #0]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d006      	beq.n	8011a0a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80119fc:	69fa      	ldr	r2, [r7, #28]
 80119fe:	6839      	ldr	r1, [r7, #0]
 8011a00:	6938      	ldr	r0, [r7, #16]
 8011a02:	f7ff fe42 	bl	801168a <put_fat>
 8011a06:	4603      	mov	r3, r0
 8011a08:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011a0a:	7dfb      	ldrb	r3, [r7, #23]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d116      	bne.n	8011a3e <create_chain+0x116>
		fs->last_clst = ncl;
 8011a10:	693b      	ldr	r3, [r7, #16]
 8011a12:	69fa      	ldr	r2, [r7, #28]
 8011a14:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011a16:	693b      	ldr	r3, [r7, #16]
 8011a18:	695a      	ldr	r2, [r3, #20]
 8011a1a:	693b      	ldr	r3, [r7, #16]
 8011a1c:	699b      	ldr	r3, [r3, #24]
 8011a1e:	3b02      	subs	r3, #2
 8011a20:	429a      	cmp	r2, r3
 8011a22:	d804      	bhi.n	8011a2e <create_chain+0x106>
 8011a24:	693b      	ldr	r3, [r7, #16]
 8011a26:	695b      	ldr	r3, [r3, #20]
 8011a28:	1e5a      	subs	r2, r3, #1
 8011a2a:	693b      	ldr	r3, [r7, #16]
 8011a2c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8011a2e:	693b      	ldr	r3, [r7, #16]
 8011a30:	791b      	ldrb	r3, [r3, #4]
 8011a32:	f043 0301 	orr.w	r3, r3, #1
 8011a36:	b2da      	uxtb	r2, r3
 8011a38:	693b      	ldr	r3, [r7, #16]
 8011a3a:	711a      	strb	r2, [r3, #4]
 8011a3c:	e007      	b.n	8011a4e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011a3e:	7dfb      	ldrb	r3, [r7, #23]
 8011a40:	2b01      	cmp	r3, #1
 8011a42:	d102      	bne.n	8011a4a <create_chain+0x122>
 8011a44:	f04f 33ff 	mov.w	r3, #4294967295
 8011a48:	e000      	b.n	8011a4c <create_chain+0x124>
 8011a4a:	2301      	movs	r3, #1
 8011a4c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011a4e:	69fb      	ldr	r3, [r7, #28]
}
 8011a50:	4618      	mov	r0, r3
 8011a52:	3720      	adds	r7, #32
 8011a54:	46bd      	mov	sp, r7
 8011a56:	bd80      	pop	{r7, pc}

08011a58 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011a58:	b480      	push	{r7}
 8011a5a:	b087      	sub	sp, #28
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]
 8011a60:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a6c:	3304      	adds	r3, #4
 8011a6e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011a70:	683b      	ldr	r3, [r7, #0]
 8011a72:	0a5b      	lsrs	r3, r3, #9
 8011a74:	68fa      	ldr	r2, [r7, #12]
 8011a76:	8952      	ldrh	r2, [r2, #10]
 8011a78:	fbb3 f3f2 	udiv	r3, r3, r2
 8011a7c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011a7e:	693b      	ldr	r3, [r7, #16]
 8011a80:	1d1a      	adds	r2, r3, #4
 8011a82:	613a      	str	r2, [r7, #16]
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011a88:	68bb      	ldr	r3, [r7, #8]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d101      	bne.n	8011a92 <clmt_clust+0x3a>
 8011a8e:	2300      	movs	r3, #0
 8011a90:	e010      	b.n	8011ab4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8011a92:	697a      	ldr	r2, [r7, #20]
 8011a94:	68bb      	ldr	r3, [r7, #8]
 8011a96:	429a      	cmp	r2, r3
 8011a98:	d307      	bcc.n	8011aaa <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8011a9a:	697a      	ldr	r2, [r7, #20]
 8011a9c:	68bb      	ldr	r3, [r7, #8]
 8011a9e:	1ad3      	subs	r3, r2, r3
 8011aa0:	617b      	str	r3, [r7, #20]
 8011aa2:	693b      	ldr	r3, [r7, #16]
 8011aa4:	3304      	adds	r3, #4
 8011aa6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011aa8:	e7e9      	b.n	8011a7e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8011aaa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011aac:	693b      	ldr	r3, [r7, #16]
 8011aae:	681a      	ldr	r2, [r3, #0]
 8011ab0:	697b      	ldr	r3, [r7, #20]
 8011ab2:	4413      	add	r3, r2
}
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	371c      	adds	r7, #28
 8011ab8:	46bd      	mov	sp, r7
 8011aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011abe:	4770      	bx	lr

08011ac0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b086      	sub	sp, #24
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	6078      	str	r0, [r7, #4]
 8011ac8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011ad0:	683b      	ldr	r3, [r7, #0]
 8011ad2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011ad6:	d204      	bcs.n	8011ae2 <dir_sdi+0x22>
 8011ad8:	683b      	ldr	r3, [r7, #0]
 8011ada:	f003 031f 	and.w	r3, r3, #31
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d001      	beq.n	8011ae6 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011ae2:	2302      	movs	r3, #2
 8011ae4:	e063      	b.n	8011bae <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	683a      	ldr	r2, [r7, #0]
 8011aea:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	689b      	ldr	r3, [r3, #8]
 8011af0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011af2:	697b      	ldr	r3, [r7, #20]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d106      	bne.n	8011b06 <dir_sdi+0x46>
 8011af8:	693b      	ldr	r3, [r7, #16]
 8011afa:	781b      	ldrb	r3, [r3, #0]
 8011afc:	2b02      	cmp	r3, #2
 8011afe:	d902      	bls.n	8011b06 <dir_sdi+0x46>
		clst = fs->dirbase;
 8011b00:	693b      	ldr	r3, [r7, #16]
 8011b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b04:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011b06:	697b      	ldr	r3, [r7, #20]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d10c      	bne.n	8011b26 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	095b      	lsrs	r3, r3, #5
 8011b10:	693a      	ldr	r2, [r7, #16]
 8011b12:	8912      	ldrh	r2, [r2, #8]
 8011b14:	4293      	cmp	r3, r2
 8011b16:	d301      	bcc.n	8011b1c <dir_sdi+0x5c>
 8011b18:	2302      	movs	r3, #2
 8011b1a:	e048      	b.n	8011bae <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8011b1c:	693b      	ldr	r3, [r7, #16]
 8011b1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	61da      	str	r2, [r3, #28]
 8011b24:	e029      	b.n	8011b7a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011b26:	693b      	ldr	r3, [r7, #16]
 8011b28:	895b      	ldrh	r3, [r3, #10]
 8011b2a:	025b      	lsls	r3, r3, #9
 8011b2c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011b2e:	e019      	b.n	8011b64 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	6979      	ldr	r1, [r7, #20]
 8011b34:	4618      	mov	r0, r3
 8011b36:	f7ff fd00 	bl	801153a <get_fat>
 8011b3a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011b3c:	697b      	ldr	r3, [r7, #20]
 8011b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b42:	d101      	bne.n	8011b48 <dir_sdi+0x88>
 8011b44:	2301      	movs	r3, #1
 8011b46:	e032      	b.n	8011bae <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011b48:	697b      	ldr	r3, [r7, #20]
 8011b4a:	2b01      	cmp	r3, #1
 8011b4c:	d904      	bls.n	8011b58 <dir_sdi+0x98>
 8011b4e:	693b      	ldr	r3, [r7, #16]
 8011b50:	699b      	ldr	r3, [r3, #24]
 8011b52:	697a      	ldr	r2, [r7, #20]
 8011b54:	429a      	cmp	r2, r3
 8011b56:	d301      	bcc.n	8011b5c <dir_sdi+0x9c>
 8011b58:	2302      	movs	r3, #2
 8011b5a:	e028      	b.n	8011bae <dir_sdi+0xee>
			ofs -= csz;
 8011b5c:	683a      	ldr	r2, [r7, #0]
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	1ad3      	subs	r3, r2, r3
 8011b62:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011b64:	683a      	ldr	r2, [r7, #0]
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	429a      	cmp	r2, r3
 8011b6a:	d2e1      	bcs.n	8011b30 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8011b6c:	6979      	ldr	r1, [r7, #20]
 8011b6e:	6938      	ldr	r0, [r7, #16]
 8011b70:	f7ff fcc4 	bl	80114fc <clust2sect>
 8011b74:	4602      	mov	r2, r0
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	697a      	ldr	r2, [r7, #20]
 8011b7e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	69db      	ldr	r3, [r3, #28]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d101      	bne.n	8011b8c <dir_sdi+0xcc>
 8011b88:	2302      	movs	r3, #2
 8011b8a:	e010      	b.n	8011bae <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	69da      	ldr	r2, [r3, #28]
 8011b90:	683b      	ldr	r3, [r7, #0]
 8011b92:	0a5b      	lsrs	r3, r3, #9
 8011b94:	441a      	add	r2, r3
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011b9a:	693b      	ldr	r3, [r7, #16]
 8011b9c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011ba0:	683b      	ldr	r3, [r7, #0]
 8011ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ba6:	441a      	add	r2, r3
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011bac:	2300      	movs	r3, #0
}
 8011bae:	4618      	mov	r0, r3
 8011bb0:	3718      	adds	r7, #24
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	bd80      	pop	{r7, pc}

08011bb6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011bb6:	b580      	push	{r7, lr}
 8011bb8:	b086      	sub	sp, #24
 8011bba:	af00      	add	r7, sp, #0
 8011bbc:	6078      	str	r0, [r7, #4]
 8011bbe:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	695b      	ldr	r3, [r3, #20]
 8011bca:	3320      	adds	r3, #32
 8011bcc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	69db      	ldr	r3, [r3, #28]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d003      	beq.n	8011bde <dir_next+0x28>
 8011bd6:	68bb      	ldr	r3, [r7, #8]
 8011bd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011bdc:	d301      	bcc.n	8011be2 <dir_next+0x2c>
 8011bde:	2304      	movs	r3, #4
 8011be0:	e0aa      	b.n	8011d38 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011be2:	68bb      	ldr	r3, [r7, #8]
 8011be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	f040 8098 	bne.w	8011d1e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	69db      	ldr	r3, [r3, #28]
 8011bf2:	1c5a      	adds	r2, r3, #1
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	699b      	ldr	r3, [r3, #24]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d10b      	bne.n	8011c18 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011c00:	68bb      	ldr	r3, [r7, #8]
 8011c02:	095b      	lsrs	r3, r3, #5
 8011c04:	68fa      	ldr	r2, [r7, #12]
 8011c06:	8912      	ldrh	r2, [r2, #8]
 8011c08:	4293      	cmp	r3, r2
 8011c0a:	f0c0 8088 	bcc.w	8011d1e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	2200      	movs	r2, #0
 8011c12:	61da      	str	r2, [r3, #28]
 8011c14:	2304      	movs	r3, #4
 8011c16:	e08f      	b.n	8011d38 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011c18:	68bb      	ldr	r3, [r7, #8]
 8011c1a:	0a5b      	lsrs	r3, r3, #9
 8011c1c:	68fa      	ldr	r2, [r7, #12]
 8011c1e:	8952      	ldrh	r2, [r2, #10]
 8011c20:	3a01      	subs	r2, #1
 8011c22:	4013      	ands	r3, r2
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d17a      	bne.n	8011d1e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011c28:	687a      	ldr	r2, [r7, #4]
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	699b      	ldr	r3, [r3, #24]
 8011c2e:	4619      	mov	r1, r3
 8011c30:	4610      	mov	r0, r2
 8011c32:	f7ff fc82 	bl	801153a <get_fat>
 8011c36:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011c38:	697b      	ldr	r3, [r7, #20]
 8011c3a:	2b01      	cmp	r3, #1
 8011c3c:	d801      	bhi.n	8011c42 <dir_next+0x8c>
 8011c3e:	2302      	movs	r3, #2
 8011c40:	e07a      	b.n	8011d38 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011c42:	697b      	ldr	r3, [r7, #20]
 8011c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c48:	d101      	bne.n	8011c4e <dir_next+0x98>
 8011c4a:	2301      	movs	r3, #1
 8011c4c:	e074      	b.n	8011d38 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	699b      	ldr	r3, [r3, #24]
 8011c52:	697a      	ldr	r2, [r7, #20]
 8011c54:	429a      	cmp	r2, r3
 8011c56:	d358      	bcc.n	8011d0a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011c58:	683b      	ldr	r3, [r7, #0]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d104      	bne.n	8011c68 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	2200      	movs	r2, #0
 8011c62:	61da      	str	r2, [r3, #28]
 8011c64:	2304      	movs	r3, #4
 8011c66:	e067      	b.n	8011d38 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011c68:	687a      	ldr	r2, [r7, #4]
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	699b      	ldr	r3, [r3, #24]
 8011c6e:	4619      	mov	r1, r3
 8011c70:	4610      	mov	r0, r2
 8011c72:	f7ff fe59 	bl	8011928 <create_chain>
 8011c76:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011c78:	697b      	ldr	r3, [r7, #20]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d101      	bne.n	8011c82 <dir_next+0xcc>
 8011c7e:	2307      	movs	r3, #7
 8011c80:	e05a      	b.n	8011d38 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011c82:	697b      	ldr	r3, [r7, #20]
 8011c84:	2b01      	cmp	r3, #1
 8011c86:	d101      	bne.n	8011c8c <dir_next+0xd6>
 8011c88:	2302      	movs	r3, #2
 8011c8a:	e055      	b.n	8011d38 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011c8c:	697b      	ldr	r3, [r7, #20]
 8011c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c92:	d101      	bne.n	8011c98 <dir_next+0xe2>
 8011c94:	2301      	movs	r3, #1
 8011c96:	e04f      	b.n	8011d38 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011c98:	68f8      	ldr	r0, [r7, #12]
 8011c9a:	f7ff fb4f 	bl	801133c <sync_window>
 8011c9e:	4603      	mov	r3, r0
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d001      	beq.n	8011ca8 <dir_next+0xf2>
 8011ca4:	2301      	movs	r3, #1
 8011ca6:	e047      	b.n	8011d38 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	3334      	adds	r3, #52	; 0x34
 8011cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011cb0:	2100      	movs	r1, #0
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	f7ff f947 	bl	8010f46 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011cb8:	2300      	movs	r3, #0
 8011cba:	613b      	str	r3, [r7, #16]
 8011cbc:	6979      	ldr	r1, [r7, #20]
 8011cbe:	68f8      	ldr	r0, [r7, #12]
 8011cc0:	f7ff fc1c 	bl	80114fc <clust2sect>
 8011cc4:	4602      	mov	r2, r0
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	631a      	str	r2, [r3, #48]	; 0x30
 8011cca:	e012      	b.n	8011cf2 <dir_next+0x13c>
						fs->wflag = 1;
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	2201      	movs	r2, #1
 8011cd0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011cd2:	68f8      	ldr	r0, [r7, #12]
 8011cd4:	f7ff fb32 	bl	801133c <sync_window>
 8011cd8:	4603      	mov	r3, r0
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d001      	beq.n	8011ce2 <dir_next+0x12c>
 8011cde:	2301      	movs	r3, #1
 8011ce0:	e02a      	b.n	8011d38 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011ce2:	693b      	ldr	r3, [r7, #16]
 8011ce4:	3301      	adds	r3, #1
 8011ce6:	613b      	str	r3, [r7, #16]
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011cec:	1c5a      	adds	r2, r3, #1
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	631a      	str	r2, [r3, #48]	; 0x30
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	895b      	ldrh	r3, [r3, #10]
 8011cf6:	461a      	mov	r2, r3
 8011cf8:	693b      	ldr	r3, [r7, #16]
 8011cfa:	4293      	cmp	r3, r2
 8011cfc:	d3e6      	bcc.n	8011ccc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011d02:	693b      	ldr	r3, [r7, #16]
 8011d04:	1ad2      	subs	r2, r2, r3
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	697a      	ldr	r2, [r7, #20]
 8011d0e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011d10:	6979      	ldr	r1, [r7, #20]
 8011d12:	68f8      	ldr	r0, [r7, #12]
 8011d14:	f7ff fbf2 	bl	80114fc <clust2sect>
 8011d18:	4602      	mov	r2, r0
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	68ba      	ldr	r2, [r7, #8]
 8011d22:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011d2a:	68bb      	ldr	r3, [r7, #8]
 8011d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011d30:	441a      	add	r2, r3
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011d36:	2300      	movs	r3, #0
}
 8011d38:	4618      	mov	r0, r3
 8011d3a:	3718      	adds	r7, #24
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	bd80      	pop	{r7, pc}

08011d40 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011d40:	b580      	push	{r7, lr}
 8011d42:	b086      	sub	sp, #24
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	6078      	str	r0, [r7, #4]
 8011d48:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011d50:	2100      	movs	r1, #0
 8011d52:	6878      	ldr	r0, [r7, #4]
 8011d54:	f7ff feb4 	bl	8011ac0 <dir_sdi>
 8011d58:	4603      	mov	r3, r0
 8011d5a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011d5c:	7dfb      	ldrb	r3, [r7, #23]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d12b      	bne.n	8011dba <dir_alloc+0x7a>
		n = 0;
 8011d62:	2300      	movs	r3, #0
 8011d64:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	69db      	ldr	r3, [r3, #28]
 8011d6a:	4619      	mov	r1, r3
 8011d6c:	68f8      	ldr	r0, [r7, #12]
 8011d6e:	f7ff fb29 	bl	80113c4 <move_window>
 8011d72:	4603      	mov	r3, r0
 8011d74:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011d76:	7dfb      	ldrb	r3, [r7, #23]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d11d      	bne.n	8011db8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	6a1b      	ldr	r3, [r3, #32]
 8011d80:	781b      	ldrb	r3, [r3, #0]
 8011d82:	2be5      	cmp	r3, #229	; 0xe5
 8011d84:	d004      	beq.n	8011d90 <dir_alloc+0x50>
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	6a1b      	ldr	r3, [r3, #32]
 8011d8a:	781b      	ldrb	r3, [r3, #0]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d107      	bne.n	8011da0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011d90:	693b      	ldr	r3, [r7, #16]
 8011d92:	3301      	adds	r3, #1
 8011d94:	613b      	str	r3, [r7, #16]
 8011d96:	693a      	ldr	r2, [r7, #16]
 8011d98:	683b      	ldr	r3, [r7, #0]
 8011d9a:	429a      	cmp	r2, r3
 8011d9c:	d102      	bne.n	8011da4 <dir_alloc+0x64>
 8011d9e:	e00c      	b.n	8011dba <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011da0:	2300      	movs	r3, #0
 8011da2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011da4:	2101      	movs	r1, #1
 8011da6:	6878      	ldr	r0, [r7, #4]
 8011da8:	f7ff ff05 	bl	8011bb6 <dir_next>
 8011dac:	4603      	mov	r3, r0
 8011dae:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011db0:	7dfb      	ldrb	r3, [r7, #23]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d0d7      	beq.n	8011d66 <dir_alloc+0x26>
 8011db6:	e000      	b.n	8011dba <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011db8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011dba:	7dfb      	ldrb	r3, [r7, #23]
 8011dbc:	2b04      	cmp	r3, #4
 8011dbe:	d101      	bne.n	8011dc4 <dir_alloc+0x84>
 8011dc0:	2307      	movs	r3, #7
 8011dc2:	75fb      	strb	r3, [r7, #23]
	return res;
 8011dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	3718      	adds	r7, #24
 8011dca:	46bd      	mov	sp, r7
 8011dcc:	bd80      	pop	{r7, pc}

08011dce <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011dce:	b580      	push	{r7, lr}
 8011dd0:	b084      	sub	sp, #16
 8011dd2:	af00      	add	r7, sp, #0
 8011dd4:	6078      	str	r0, [r7, #4]
 8011dd6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	331a      	adds	r3, #26
 8011ddc:	4618      	mov	r0, r3
 8011dde:	f7ff f80f 	bl	8010e00 <ld_word>
 8011de2:	4603      	mov	r3, r0
 8011de4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	781b      	ldrb	r3, [r3, #0]
 8011dea:	2b03      	cmp	r3, #3
 8011dec:	d109      	bne.n	8011e02 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011dee:	683b      	ldr	r3, [r7, #0]
 8011df0:	3314      	adds	r3, #20
 8011df2:	4618      	mov	r0, r3
 8011df4:	f7ff f804 	bl	8010e00 <ld_word>
 8011df8:	4603      	mov	r3, r0
 8011dfa:	041b      	lsls	r3, r3, #16
 8011dfc:	68fa      	ldr	r2, [r7, #12]
 8011dfe:	4313      	orrs	r3, r2
 8011e00:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011e02:	68fb      	ldr	r3, [r7, #12]
}
 8011e04:	4618      	mov	r0, r3
 8011e06:	3710      	adds	r7, #16
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	bd80      	pop	{r7, pc}

08011e0c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b084      	sub	sp, #16
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	60f8      	str	r0, [r7, #12]
 8011e14:	60b9      	str	r1, [r7, #8]
 8011e16:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011e18:	68bb      	ldr	r3, [r7, #8]
 8011e1a:	331a      	adds	r3, #26
 8011e1c:	687a      	ldr	r2, [r7, #4]
 8011e1e:	b292      	uxth	r2, r2
 8011e20:	4611      	mov	r1, r2
 8011e22:	4618      	mov	r0, r3
 8011e24:	f7ff f827 	bl	8010e76 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	781b      	ldrb	r3, [r3, #0]
 8011e2c:	2b03      	cmp	r3, #3
 8011e2e:	d109      	bne.n	8011e44 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011e30:	68bb      	ldr	r3, [r7, #8]
 8011e32:	f103 0214 	add.w	r2, r3, #20
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	0c1b      	lsrs	r3, r3, #16
 8011e3a:	b29b      	uxth	r3, r3
 8011e3c:	4619      	mov	r1, r3
 8011e3e:	4610      	mov	r0, r2
 8011e40:	f7ff f819 	bl	8010e76 <st_word>
	}
}
 8011e44:	bf00      	nop
 8011e46:	3710      	adds	r7, #16
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	bd80      	pop	{r7, pc}

08011e4c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b086      	sub	sp, #24
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
 8011e54:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8011e56:	2304      	movs	r3, #4
 8011e58:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8011e60:	e03c      	b.n	8011edc <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	69db      	ldr	r3, [r3, #28]
 8011e66:	4619      	mov	r1, r3
 8011e68:	6938      	ldr	r0, [r7, #16]
 8011e6a:	f7ff faab 	bl	80113c4 <move_window>
 8011e6e:	4603      	mov	r3, r0
 8011e70:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011e72:	7dfb      	ldrb	r3, [r7, #23]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d136      	bne.n	8011ee6 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	6a1b      	ldr	r3, [r3, #32]
 8011e7c:	781b      	ldrb	r3, [r3, #0]
 8011e7e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8011e80:	7bfb      	ldrb	r3, [r7, #15]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d102      	bne.n	8011e8c <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8011e86:	2304      	movs	r3, #4
 8011e88:	75fb      	strb	r3, [r7, #23]
 8011e8a:	e031      	b.n	8011ef0 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	6a1b      	ldr	r3, [r3, #32]
 8011e90:	330b      	adds	r3, #11
 8011e92:	781b      	ldrb	r3, [r3, #0]
 8011e94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011e98:	73bb      	strb	r3, [r7, #14]
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	7bba      	ldrb	r2, [r7, #14]
 8011e9e:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8011ea0:	7bfb      	ldrb	r3, [r7, #15]
 8011ea2:	2be5      	cmp	r3, #229	; 0xe5
 8011ea4:	d011      	beq.n	8011eca <dir_read+0x7e>
 8011ea6:	7bfb      	ldrb	r3, [r7, #15]
 8011ea8:	2b2e      	cmp	r3, #46	; 0x2e
 8011eaa:	d00e      	beq.n	8011eca <dir_read+0x7e>
 8011eac:	7bbb      	ldrb	r3, [r7, #14]
 8011eae:	2b0f      	cmp	r3, #15
 8011eb0:	d00b      	beq.n	8011eca <dir_read+0x7e>
 8011eb2:	7bbb      	ldrb	r3, [r7, #14]
 8011eb4:	f023 0320 	bic.w	r3, r3, #32
 8011eb8:	2b08      	cmp	r3, #8
 8011eba:	bf0c      	ite	eq
 8011ebc:	2301      	moveq	r3, #1
 8011ebe:	2300      	movne	r3, #0
 8011ec0:	b2db      	uxtb	r3, r3
 8011ec2:	461a      	mov	r2, r3
 8011ec4:	683b      	ldr	r3, [r7, #0]
 8011ec6:	4293      	cmp	r3, r2
 8011ec8:	d00f      	beq.n	8011eea <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8011eca:	2100      	movs	r1, #0
 8011ecc:	6878      	ldr	r0, [r7, #4]
 8011ece:	f7ff fe72 	bl	8011bb6 <dir_next>
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011ed6:	7dfb      	ldrb	r3, [r7, #23]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d108      	bne.n	8011eee <dir_read+0xa2>
	while (dp->sect) {
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	69db      	ldr	r3, [r3, #28]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d1be      	bne.n	8011e62 <dir_read+0x16>
 8011ee4:	e004      	b.n	8011ef0 <dir_read+0xa4>
		if (res != FR_OK) break;
 8011ee6:	bf00      	nop
 8011ee8:	e002      	b.n	8011ef0 <dir_read+0xa4>
				break;
 8011eea:	bf00      	nop
 8011eec:	e000      	b.n	8011ef0 <dir_read+0xa4>
		if (res != FR_OK) break;
 8011eee:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8011ef0:	7dfb      	ldrb	r3, [r7, #23]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d002      	beq.n	8011efc <dir_read+0xb0>
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	2200      	movs	r2, #0
 8011efa:	61da      	str	r2, [r3, #28]
	return res;
 8011efc:	7dfb      	ldrb	r3, [r7, #23]
}
 8011efe:	4618      	mov	r0, r3
 8011f00:	3718      	adds	r7, #24
 8011f02:	46bd      	mov	sp, r7
 8011f04:	bd80      	pop	{r7, pc}

08011f06 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011f06:	b580      	push	{r7, lr}
 8011f08:	b086      	sub	sp, #24
 8011f0a:	af00      	add	r7, sp, #0
 8011f0c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011f14:	2100      	movs	r1, #0
 8011f16:	6878      	ldr	r0, [r7, #4]
 8011f18:	f7ff fdd2 	bl	8011ac0 <dir_sdi>
 8011f1c:	4603      	mov	r3, r0
 8011f1e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011f20:	7dfb      	ldrb	r3, [r7, #23]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d001      	beq.n	8011f2a <dir_find+0x24>
 8011f26:	7dfb      	ldrb	r3, [r7, #23]
 8011f28:	e03e      	b.n	8011fa8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	69db      	ldr	r3, [r3, #28]
 8011f2e:	4619      	mov	r1, r3
 8011f30:	6938      	ldr	r0, [r7, #16]
 8011f32:	f7ff fa47 	bl	80113c4 <move_window>
 8011f36:	4603      	mov	r3, r0
 8011f38:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011f3a:	7dfb      	ldrb	r3, [r7, #23]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d12f      	bne.n	8011fa0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	6a1b      	ldr	r3, [r3, #32]
 8011f44:	781b      	ldrb	r3, [r3, #0]
 8011f46:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011f48:	7bfb      	ldrb	r3, [r7, #15]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d102      	bne.n	8011f54 <dir_find+0x4e>
 8011f4e:	2304      	movs	r3, #4
 8011f50:	75fb      	strb	r3, [r7, #23]
 8011f52:	e028      	b.n	8011fa6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	6a1b      	ldr	r3, [r3, #32]
 8011f58:	330b      	adds	r3, #11
 8011f5a:	781b      	ldrb	r3, [r3, #0]
 8011f5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011f60:	b2da      	uxtb	r2, r3
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	6a1b      	ldr	r3, [r3, #32]
 8011f6a:	330b      	adds	r3, #11
 8011f6c:	781b      	ldrb	r3, [r3, #0]
 8011f6e:	f003 0308 	and.w	r3, r3, #8
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d10a      	bne.n	8011f8c <dir_find+0x86>
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	6a18      	ldr	r0, [r3, #32]
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	3324      	adds	r3, #36	; 0x24
 8011f7e:	220b      	movs	r2, #11
 8011f80:	4619      	mov	r1, r3
 8011f82:	f7fe fffb 	bl	8010f7c <mem_cmp>
 8011f86:	4603      	mov	r3, r0
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d00b      	beq.n	8011fa4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011f8c:	2100      	movs	r1, #0
 8011f8e:	6878      	ldr	r0, [r7, #4]
 8011f90:	f7ff fe11 	bl	8011bb6 <dir_next>
 8011f94:	4603      	mov	r3, r0
 8011f96:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011f98:	7dfb      	ldrb	r3, [r7, #23]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d0c5      	beq.n	8011f2a <dir_find+0x24>
 8011f9e:	e002      	b.n	8011fa6 <dir_find+0xa0>
		if (res != FR_OK) break;
 8011fa0:	bf00      	nop
 8011fa2:	e000      	b.n	8011fa6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011fa4:	bf00      	nop

	return res;
 8011fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8011fa8:	4618      	mov	r0, r3
 8011faa:	3718      	adds	r7, #24
 8011fac:	46bd      	mov	sp, r7
 8011fae:	bd80      	pop	{r7, pc}

08011fb0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011fb0:	b580      	push	{r7, lr}
 8011fb2:	b084      	sub	sp, #16
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8011fbe:	2101      	movs	r1, #1
 8011fc0:	6878      	ldr	r0, [r7, #4]
 8011fc2:	f7ff febd 	bl	8011d40 <dir_alloc>
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8011fca:	7bfb      	ldrb	r3, [r7, #15]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d11c      	bne.n	801200a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	69db      	ldr	r3, [r3, #28]
 8011fd4:	4619      	mov	r1, r3
 8011fd6:	68b8      	ldr	r0, [r7, #8]
 8011fd8:	f7ff f9f4 	bl	80113c4 <move_window>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011fe0:	7bfb      	ldrb	r3, [r7, #15]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d111      	bne.n	801200a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	6a1b      	ldr	r3, [r3, #32]
 8011fea:	2220      	movs	r2, #32
 8011fec:	2100      	movs	r1, #0
 8011fee:	4618      	mov	r0, r3
 8011ff0:	f7fe ffa9 	bl	8010f46 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	6a18      	ldr	r0, [r3, #32]
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	3324      	adds	r3, #36	; 0x24
 8011ffc:	220b      	movs	r2, #11
 8011ffe:	4619      	mov	r1, r3
 8012000:	f7fe ff80 	bl	8010f04 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012004:	68bb      	ldr	r3, [r7, #8]
 8012006:	2201      	movs	r2, #1
 8012008:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801200a:	7bfb      	ldrb	r3, [r7, #15]
}
 801200c:	4618      	mov	r0, r3
 801200e:	3710      	adds	r7, #16
 8012010:	46bd      	mov	sp, r7
 8012012:	bd80      	pop	{r7, pc}

08012014 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8012014:	b580      	push	{r7, lr}
 8012016:	b084      	sub	sp, #16
 8012018:	af00      	add	r7, sp, #0
 801201a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	69db      	ldr	r3, [r3, #28]
 8012026:	4619      	mov	r1, r3
 8012028:	68f8      	ldr	r0, [r7, #12]
 801202a:	f7ff f9cb 	bl	80113c4 <move_window>
 801202e:	4603      	mov	r3, r0
 8012030:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8012032:	7afb      	ldrb	r3, [r7, #11]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d106      	bne.n	8012046 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	6a1b      	ldr	r3, [r3, #32]
 801203c:	22e5      	movs	r2, #229	; 0xe5
 801203e:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	2201      	movs	r2, #1
 8012044:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8012046:	7afb      	ldrb	r3, [r7, #11]
}
 8012048:	4618      	mov	r0, r3
 801204a:	3710      	adds	r7, #16
 801204c:	46bd      	mov	sp, r7
 801204e:	bd80      	pop	{r7, pc}

08012050 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8012050:	b580      	push	{r7, lr}
 8012052:	b086      	sub	sp, #24
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
 8012058:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 801205a:	683b      	ldr	r3, [r7, #0]
 801205c:	2200      	movs	r2, #0
 801205e:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	69db      	ldr	r3, [r3, #28]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d04e      	beq.n	8012106 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8012068:	2300      	movs	r3, #0
 801206a:	613b      	str	r3, [r7, #16]
 801206c:	693b      	ldr	r3, [r7, #16]
 801206e:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8012070:	e021      	b.n	80120b6 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	6a1a      	ldr	r2, [r3, #32]
 8012076:	697b      	ldr	r3, [r7, #20]
 8012078:	1c59      	adds	r1, r3, #1
 801207a:	6179      	str	r1, [r7, #20]
 801207c:	4413      	add	r3, r2
 801207e:	781b      	ldrb	r3, [r3, #0]
 8012080:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8012082:	7bfb      	ldrb	r3, [r7, #15]
 8012084:	2b20      	cmp	r3, #32
 8012086:	d100      	bne.n	801208a <get_fileinfo+0x3a>
 8012088:	e015      	b.n	80120b6 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801208a:	7bfb      	ldrb	r3, [r7, #15]
 801208c:	2b05      	cmp	r3, #5
 801208e:	d101      	bne.n	8012094 <get_fileinfo+0x44>
 8012090:	23e5      	movs	r3, #229	; 0xe5
 8012092:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8012094:	697b      	ldr	r3, [r7, #20]
 8012096:	2b09      	cmp	r3, #9
 8012098:	d106      	bne.n	80120a8 <get_fileinfo+0x58>
 801209a:	693b      	ldr	r3, [r7, #16]
 801209c:	1c5a      	adds	r2, r3, #1
 801209e:	613a      	str	r2, [r7, #16]
 80120a0:	683a      	ldr	r2, [r7, #0]
 80120a2:	4413      	add	r3, r2
 80120a4:	222e      	movs	r2, #46	; 0x2e
 80120a6:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80120a8:	693b      	ldr	r3, [r7, #16]
 80120aa:	1c5a      	adds	r2, r3, #1
 80120ac:	613a      	str	r2, [r7, #16]
 80120ae:	683a      	ldr	r2, [r7, #0]
 80120b0:	4413      	add	r3, r2
 80120b2:	7bfa      	ldrb	r2, [r7, #15]
 80120b4:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 80120b6:	697b      	ldr	r3, [r7, #20]
 80120b8:	2b0a      	cmp	r3, #10
 80120ba:	d9da      	bls.n	8012072 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 80120bc:	683a      	ldr	r2, [r7, #0]
 80120be:	693b      	ldr	r3, [r7, #16]
 80120c0:	4413      	add	r3, r2
 80120c2:	3309      	adds	r3, #9
 80120c4:	2200      	movs	r2, #0
 80120c6:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	6a1b      	ldr	r3, [r3, #32]
 80120cc:	7ada      	ldrb	r2, [r3, #11]
 80120ce:	683b      	ldr	r3, [r7, #0]
 80120d0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	6a1b      	ldr	r3, [r3, #32]
 80120d6:	331c      	adds	r3, #28
 80120d8:	4618      	mov	r0, r3
 80120da:	f7fe fea9 	bl	8010e30 <ld_dword>
 80120de:	4602      	mov	r2, r0
 80120e0:	683b      	ldr	r3, [r7, #0]
 80120e2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	6a1b      	ldr	r3, [r3, #32]
 80120e8:	3316      	adds	r3, #22
 80120ea:	4618      	mov	r0, r3
 80120ec:	f7fe fea0 	bl	8010e30 <ld_dword>
 80120f0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80120f2:	68bb      	ldr	r3, [r7, #8]
 80120f4:	b29a      	uxth	r2, r3
 80120f6:	683b      	ldr	r3, [r7, #0]
 80120f8:	80da      	strh	r2, [r3, #6]
 80120fa:	68bb      	ldr	r3, [r7, #8]
 80120fc:	0c1b      	lsrs	r3, r3, #16
 80120fe:	b29a      	uxth	r2, r3
 8012100:	683b      	ldr	r3, [r7, #0]
 8012102:	809a      	strh	r2, [r3, #4]
 8012104:	e000      	b.n	8012108 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8012106:	bf00      	nop
}
 8012108:	3718      	adds	r7, #24
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}
	...

08012110 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012110:	b580      	push	{r7, lr}
 8012112:	b088      	sub	sp, #32
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
 8012118:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801211a:	683b      	ldr	r3, [r7, #0]
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	60fb      	str	r3, [r7, #12]
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	3324      	adds	r3, #36	; 0x24
 8012124:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8012126:	220b      	movs	r2, #11
 8012128:	2120      	movs	r1, #32
 801212a:	68b8      	ldr	r0, [r7, #8]
 801212c:	f7fe ff0b 	bl	8010f46 <mem_set>
	si = i = 0; ni = 8;
 8012130:	2300      	movs	r3, #0
 8012132:	613b      	str	r3, [r7, #16]
 8012134:	693b      	ldr	r3, [r7, #16]
 8012136:	61fb      	str	r3, [r7, #28]
 8012138:	2308      	movs	r3, #8
 801213a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801213c:	69fb      	ldr	r3, [r7, #28]
 801213e:	1c5a      	adds	r2, r3, #1
 8012140:	61fa      	str	r2, [r7, #28]
 8012142:	68fa      	ldr	r2, [r7, #12]
 8012144:	4413      	add	r3, r2
 8012146:	781b      	ldrb	r3, [r3, #0]
 8012148:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801214a:	7efb      	ldrb	r3, [r7, #27]
 801214c:	2b20      	cmp	r3, #32
 801214e:	d94e      	bls.n	80121ee <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012150:	7efb      	ldrb	r3, [r7, #27]
 8012152:	2b2f      	cmp	r3, #47	; 0x2f
 8012154:	d006      	beq.n	8012164 <create_name+0x54>
 8012156:	7efb      	ldrb	r3, [r7, #27]
 8012158:	2b5c      	cmp	r3, #92	; 0x5c
 801215a:	d110      	bne.n	801217e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801215c:	e002      	b.n	8012164 <create_name+0x54>
 801215e:	69fb      	ldr	r3, [r7, #28]
 8012160:	3301      	adds	r3, #1
 8012162:	61fb      	str	r3, [r7, #28]
 8012164:	68fa      	ldr	r2, [r7, #12]
 8012166:	69fb      	ldr	r3, [r7, #28]
 8012168:	4413      	add	r3, r2
 801216a:	781b      	ldrb	r3, [r3, #0]
 801216c:	2b2f      	cmp	r3, #47	; 0x2f
 801216e:	d0f6      	beq.n	801215e <create_name+0x4e>
 8012170:	68fa      	ldr	r2, [r7, #12]
 8012172:	69fb      	ldr	r3, [r7, #28]
 8012174:	4413      	add	r3, r2
 8012176:	781b      	ldrb	r3, [r3, #0]
 8012178:	2b5c      	cmp	r3, #92	; 0x5c
 801217a:	d0f0      	beq.n	801215e <create_name+0x4e>
			break;
 801217c:	e038      	b.n	80121f0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801217e:	7efb      	ldrb	r3, [r7, #27]
 8012180:	2b2e      	cmp	r3, #46	; 0x2e
 8012182:	d003      	beq.n	801218c <create_name+0x7c>
 8012184:	693a      	ldr	r2, [r7, #16]
 8012186:	697b      	ldr	r3, [r7, #20]
 8012188:	429a      	cmp	r2, r3
 801218a:	d30c      	bcc.n	80121a6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801218c:	697b      	ldr	r3, [r7, #20]
 801218e:	2b0b      	cmp	r3, #11
 8012190:	d002      	beq.n	8012198 <create_name+0x88>
 8012192:	7efb      	ldrb	r3, [r7, #27]
 8012194:	2b2e      	cmp	r3, #46	; 0x2e
 8012196:	d001      	beq.n	801219c <create_name+0x8c>
 8012198:	2306      	movs	r3, #6
 801219a:	e044      	b.n	8012226 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801219c:	2308      	movs	r3, #8
 801219e:	613b      	str	r3, [r7, #16]
 80121a0:	230b      	movs	r3, #11
 80121a2:	617b      	str	r3, [r7, #20]
			continue;
 80121a4:	e022      	b.n	80121ec <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80121a6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	da04      	bge.n	80121b8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80121ae:	7efb      	ldrb	r3, [r7, #27]
 80121b0:	3b80      	subs	r3, #128	; 0x80
 80121b2:	4a1f      	ldr	r2, [pc, #124]	; (8012230 <create_name+0x120>)
 80121b4:	5cd3      	ldrb	r3, [r2, r3]
 80121b6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80121b8:	7efb      	ldrb	r3, [r7, #27]
 80121ba:	4619      	mov	r1, r3
 80121bc:	481d      	ldr	r0, [pc, #116]	; (8012234 <create_name+0x124>)
 80121be:	f7fe ff04 	bl	8010fca <chk_chr>
 80121c2:	4603      	mov	r3, r0
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d001      	beq.n	80121cc <create_name+0xbc>
 80121c8:	2306      	movs	r3, #6
 80121ca:	e02c      	b.n	8012226 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80121cc:	7efb      	ldrb	r3, [r7, #27]
 80121ce:	2b60      	cmp	r3, #96	; 0x60
 80121d0:	d905      	bls.n	80121de <create_name+0xce>
 80121d2:	7efb      	ldrb	r3, [r7, #27]
 80121d4:	2b7a      	cmp	r3, #122	; 0x7a
 80121d6:	d802      	bhi.n	80121de <create_name+0xce>
 80121d8:	7efb      	ldrb	r3, [r7, #27]
 80121da:	3b20      	subs	r3, #32
 80121dc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80121de:	693b      	ldr	r3, [r7, #16]
 80121e0:	1c5a      	adds	r2, r3, #1
 80121e2:	613a      	str	r2, [r7, #16]
 80121e4:	68ba      	ldr	r2, [r7, #8]
 80121e6:	4413      	add	r3, r2
 80121e8:	7efa      	ldrb	r2, [r7, #27]
 80121ea:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80121ec:	e7a6      	b.n	801213c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80121ee:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80121f0:	68fa      	ldr	r2, [r7, #12]
 80121f2:	69fb      	ldr	r3, [r7, #28]
 80121f4:	441a      	add	r2, r3
 80121f6:	683b      	ldr	r3, [r7, #0]
 80121f8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80121fa:	693b      	ldr	r3, [r7, #16]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d101      	bne.n	8012204 <create_name+0xf4>
 8012200:	2306      	movs	r3, #6
 8012202:	e010      	b.n	8012226 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012204:	68bb      	ldr	r3, [r7, #8]
 8012206:	781b      	ldrb	r3, [r3, #0]
 8012208:	2be5      	cmp	r3, #229	; 0xe5
 801220a:	d102      	bne.n	8012212 <create_name+0x102>
 801220c:	68bb      	ldr	r3, [r7, #8]
 801220e:	2205      	movs	r2, #5
 8012210:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012212:	7efb      	ldrb	r3, [r7, #27]
 8012214:	2b20      	cmp	r3, #32
 8012216:	d801      	bhi.n	801221c <create_name+0x10c>
 8012218:	2204      	movs	r2, #4
 801221a:	e000      	b.n	801221e <create_name+0x10e>
 801221c:	2200      	movs	r2, #0
 801221e:	68bb      	ldr	r3, [r7, #8]
 8012220:	330b      	adds	r3, #11
 8012222:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012224:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8012226:	4618      	mov	r0, r3
 8012228:	3720      	adds	r7, #32
 801222a:	46bd      	mov	sp, r7
 801222c:	bd80      	pop	{r7, pc}
 801222e:	bf00      	nop
 8012230:	0801d9cc 	.word	0x0801d9cc
 8012234:	0801d190 	.word	0x0801d190

08012238 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012238:	b580      	push	{r7, lr}
 801223a:	b086      	sub	sp, #24
 801223c:	af00      	add	r7, sp, #0
 801223e:	6078      	str	r0, [r7, #4]
 8012240:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012246:	693b      	ldr	r3, [r7, #16]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801224c:	e002      	b.n	8012254 <follow_path+0x1c>
 801224e:	683b      	ldr	r3, [r7, #0]
 8012250:	3301      	adds	r3, #1
 8012252:	603b      	str	r3, [r7, #0]
 8012254:	683b      	ldr	r3, [r7, #0]
 8012256:	781b      	ldrb	r3, [r3, #0]
 8012258:	2b2f      	cmp	r3, #47	; 0x2f
 801225a:	d0f8      	beq.n	801224e <follow_path+0x16>
 801225c:	683b      	ldr	r3, [r7, #0]
 801225e:	781b      	ldrb	r3, [r3, #0]
 8012260:	2b5c      	cmp	r3, #92	; 0x5c
 8012262:	d0f4      	beq.n	801224e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8012264:	693b      	ldr	r3, [r7, #16]
 8012266:	2200      	movs	r2, #0
 8012268:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801226a:	683b      	ldr	r3, [r7, #0]
 801226c:	781b      	ldrb	r3, [r3, #0]
 801226e:	2b1f      	cmp	r3, #31
 8012270:	d80a      	bhi.n	8012288 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	2280      	movs	r2, #128	; 0x80
 8012276:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801227a:	2100      	movs	r1, #0
 801227c:	6878      	ldr	r0, [r7, #4]
 801227e:	f7ff fc1f 	bl	8011ac0 <dir_sdi>
 8012282:	4603      	mov	r3, r0
 8012284:	75fb      	strb	r3, [r7, #23]
 8012286:	e043      	b.n	8012310 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012288:	463b      	mov	r3, r7
 801228a:	4619      	mov	r1, r3
 801228c:	6878      	ldr	r0, [r7, #4]
 801228e:	f7ff ff3f 	bl	8012110 <create_name>
 8012292:	4603      	mov	r3, r0
 8012294:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012296:	7dfb      	ldrb	r3, [r7, #23]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d134      	bne.n	8012306 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801229c:	6878      	ldr	r0, [r7, #4]
 801229e:	f7ff fe32 	bl	8011f06 <dir_find>
 80122a2:	4603      	mov	r3, r0
 80122a4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80122ac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80122ae:	7dfb      	ldrb	r3, [r7, #23]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d00a      	beq.n	80122ca <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80122b4:	7dfb      	ldrb	r3, [r7, #23]
 80122b6:	2b04      	cmp	r3, #4
 80122b8:	d127      	bne.n	801230a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80122ba:	7afb      	ldrb	r3, [r7, #11]
 80122bc:	f003 0304 	and.w	r3, r3, #4
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d122      	bne.n	801230a <follow_path+0xd2>
 80122c4:	2305      	movs	r3, #5
 80122c6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80122c8:	e01f      	b.n	801230a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80122ca:	7afb      	ldrb	r3, [r7, #11]
 80122cc:	f003 0304 	and.w	r3, r3, #4
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d11c      	bne.n	801230e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80122d4:	693b      	ldr	r3, [r7, #16]
 80122d6:	799b      	ldrb	r3, [r3, #6]
 80122d8:	f003 0310 	and.w	r3, r3, #16
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d102      	bne.n	80122e6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80122e0:	2305      	movs	r3, #5
 80122e2:	75fb      	strb	r3, [r7, #23]
 80122e4:	e014      	b.n	8012310 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	695b      	ldr	r3, [r3, #20]
 80122f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80122f4:	4413      	add	r3, r2
 80122f6:	4619      	mov	r1, r3
 80122f8:	68f8      	ldr	r0, [r7, #12]
 80122fa:	f7ff fd68 	bl	8011dce <ld_clust>
 80122fe:	4602      	mov	r2, r0
 8012300:	693b      	ldr	r3, [r7, #16]
 8012302:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012304:	e7c0      	b.n	8012288 <follow_path+0x50>
			if (res != FR_OK) break;
 8012306:	bf00      	nop
 8012308:	e002      	b.n	8012310 <follow_path+0xd8>
				break;
 801230a:	bf00      	nop
 801230c:	e000      	b.n	8012310 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801230e:	bf00      	nop
			}
		}
	}

	return res;
 8012310:	7dfb      	ldrb	r3, [r7, #23]
}
 8012312:	4618      	mov	r0, r3
 8012314:	3718      	adds	r7, #24
 8012316:	46bd      	mov	sp, r7
 8012318:	bd80      	pop	{r7, pc}

0801231a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801231a:	b480      	push	{r7}
 801231c:	b087      	sub	sp, #28
 801231e:	af00      	add	r7, sp, #0
 8012320:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012322:	f04f 33ff 	mov.w	r3, #4294967295
 8012326:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	2b00      	cmp	r3, #0
 801232e:	d031      	beq.n	8012394 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	617b      	str	r3, [r7, #20]
 8012336:	e002      	b.n	801233e <get_ldnumber+0x24>
 8012338:	697b      	ldr	r3, [r7, #20]
 801233a:	3301      	adds	r3, #1
 801233c:	617b      	str	r3, [r7, #20]
 801233e:	697b      	ldr	r3, [r7, #20]
 8012340:	781b      	ldrb	r3, [r3, #0]
 8012342:	2b20      	cmp	r3, #32
 8012344:	d903      	bls.n	801234e <get_ldnumber+0x34>
 8012346:	697b      	ldr	r3, [r7, #20]
 8012348:	781b      	ldrb	r3, [r3, #0]
 801234a:	2b3a      	cmp	r3, #58	; 0x3a
 801234c:	d1f4      	bne.n	8012338 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801234e:	697b      	ldr	r3, [r7, #20]
 8012350:	781b      	ldrb	r3, [r3, #0]
 8012352:	2b3a      	cmp	r3, #58	; 0x3a
 8012354:	d11c      	bne.n	8012390 <get_ldnumber+0x76>
			tp = *path;
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	1c5a      	adds	r2, r3, #1
 8012360:	60fa      	str	r2, [r7, #12]
 8012362:	781b      	ldrb	r3, [r3, #0]
 8012364:	3b30      	subs	r3, #48	; 0x30
 8012366:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012368:	68bb      	ldr	r3, [r7, #8]
 801236a:	2b09      	cmp	r3, #9
 801236c:	d80e      	bhi.n	801238c <get_ldnumber+0x72>
 801236e:	68fa      	ldr	r2, [r7, #12]
 8012370:	697b      	ldr	r3, [r7, #20]
 8012372:	429a      	cmp	r2, r3
 8012374:	d10a      	bne.n	801238c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012376:	68bb      	ldr	r3, [r7, #8]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d107      	bne.n	801238c <get_ldnumber+0x72>
					vol = (int)i;
 801237c:	68bb      	ldr	r3, [r7, #8]
 801237e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012380:	697b      	ldr	r3, [r7, #20]
 8012382:	3301      	adds	r3, #1
 8012384:	617b      	str	r3, [r7, #20]
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	697a      	ldr	r2, [r7, #20]
 801238a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801238c:	693b      	ldr	r3, [r7, #16]
 801238e:	e002      	b.n	8012396 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012390:	2300      	movs	r3, #0
 8012392:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012394:	693b      	ldr	r3, [r7, #16]
}
 8012396:	4618      	mov	r0, r3
 8012398:	371c      	adds	r7, #28
 801239a:	46bd      	mov	sp, r7
 801239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a0:	4770      	bx	lr
	...

080123a4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b082      	sub	sp, #8
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
 80123ac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	2200      	movs	r2, #0
 80123b2:	70da      	strb	r2, [r3, #3]
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	f04f 32ff 	mov.w	r2, #4294967295
 80123ba:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80123bc:	6839      	ldr	r1, [r7, #0]
 80123be:	6878      	ldr	r0, [r7, #4]
 80123c0:	f7ff f800 	bl	80113c4 <move_window>
 80123c4:	4603      	mov	r3, r0
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d001      	beq.n	80123ce <check_fs+0x2a>
 80123ca:	2304      	movs	r3, #4
 80123cc:	e038      	b.n	8012440 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	3334      	adds	r3, #52	; 0x34
 80123d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80123d6:	4618      	mov	r0, r3
 80123d8:	f7fe fd12 	bl	8010e00 <ld_word>
 80123dc:	4603      	mov	r3, r0
 80123de:	461a      	mov	r2, r3
 80123e0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80123e4:	429a      	cmp	r2, r3
 80123e6:	d001      	beq.n	80123ec <check_fs+0x48>
 80123e8:	2303      	movs	r3, #3
 80123ea:	e029      	b.n	8012440 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80123f2:	2be9      	cmp	r3, #233	; 0xe9
 80123f4:	d009      	beq.n	801240a <check_fs+0x66>
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80123fc:	2beb      	cmp	r3, #235	; 0xeb
 80123fe:	d11e      	bne.n	801243e <check_fs+0x9a>
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8012406:	2b90      	cmp	r3, #144	; 0x90
 8012408:	d119      	bne.n	801243e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	3334      	adds	r3, #52	; 0x34
 801240e:	3336      	adds	r3, #54	; 0x36
 8012410:	4618      	mov	r0, r3
 8012412:	f7fe fd0d 	bl	8010e30 <ld_dword>
 8012416:	4603      	mov	r3, r0
 8012418:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801241c:	4a0a      	ldr	r2, [pc, #40]	; (8012448 <check_fs+0xa4>)
 801241e:	4293      	cmp	r3, r2
 8012420:	d101      	bne.n	8012426 <check_fs+0x82>
 8012422:	2300      	movs	r3, #0
 8012424:	e00c      	b.n	8012440 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	3334      	adds	r3, #52	; 0x34
 801242a:	3352      	adds	r3, #82	; 0x52
 801242c:	4618      	mov	r0, r3
 801242e:	f7fe fcff 	bl	8010e30 <ld_dword>
 8012432:	4603      	mov	r3, r0
 8012434:	4a05      	ldr	r2, [pc, #20]	; (801244c <check_fs+0xa8>)
 8012436:	4293      	cmp	r3, r2
 8012438:	d101      	bne.n	801243e <check_fs+0x9a>
 801243a:	2300      	movs	r3, #0
 801243c:	e000      	b.n	8012440 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801243e:	2302      	movs	r3, #2
}
 8012440:	4618      	mov	r0, r3
 8012442:	3708      	adds	r7, #8
 8012444:	46bd      	mov	sp, r7
 8012446:	bd80      	pop	{r7, pc}
 8012448:	00544146 	.word	0x00544146
 801244c:	33544146 	.word	0x33544146

08012450 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012450:	b580      	push	{r7, lr}
 8012452:	b096      	sub	sp, #88	; 0x58
 8012454:	af00      	add	r7, sp, #0
 8012456:	60f8      	str	r0, [r7, #12]
 8012458:	60b9      	str	r1, [r7, #8]
 801245a:	4613      	mov	r3, r2
 801245c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801245e:	68bb      	ldr	r3, [r7, #8]
 8012460:	2200      	movs	r2, #0
 8012462:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012464:	68f8      	ldr	r0, [r7, #12]
 8012466:	f7ff ff58 	bl	801231a <get_ldnumber>
 801246a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801246c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801246e:	2b00      	cmp	r3, #0
 8012470:	da01      	bge.n	8012476 <find_volume+0x26>
 8012472:	230b      	movs	r3, #11
 8012474:	e235      	b.n	80128e2 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012476:	4aa5      	ldr	r2, [pc, #660]	; (801270c <find_volume+0x2bc>)
 8012478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801247a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801247e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012482:	2b00      	cmp	r3, #0
 8012484:	d101      	bne.n	801248a <find_volume+0x3a>
 8012486:	230c      	movs	r3, #12
 8012488:	e22b      	b.n	80128e2 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 801248a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801248c:	f7fe fdb8 	bl	8011000 <lock_fs>
 8012490:	4603      	mov	r3, r0
 8012492:	2b00      	cmp	r3, #0
 8012494:	d101      	bne.n	801249a <find_volume+0x4a>
 8012496:	230f      	movs	r3, #15
 8012498:	e223      	b.n	80128e2 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 801249a:	68bb      	ldr	r3, [r7, #8]
 801249c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801249e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80124a0:	79fb      	ldrb	r3, [r7, #7]
 80124a2:	f023 0301 	bic.w	r3, r3, #1
 80124a6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80124a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124aa:	781b      	ldrb	r3, [r3, #0]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d01a      	beq.n	80124e6 <find_volume+0x96>
		stat = disk_status(fs->drv);
 80124b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124b2:	785b      	ldrb	r3, [r3, #1]
 80124b4:	4618      	mov	r0, r3
 80124b6:	f7fe fc05 	bl	8010cc4 <disk_status>
 80124ba:	4603      	mov	r3, r0
 80124bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80124c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80124c4:	f003 0301 	and.w	r3, r3, #1
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d10c      	bne.n	80124e6 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80124cc:	79fb      	ldrb	r3, [r7, #7]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d007      	beq.n	80124e2 <find_volume+0x92>
 80124d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80124d6:	f003 0304 	and.w	r3, r3, #4
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d001      	beq.n	80124e2 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80124de:	230a      	movs	r3, #10
 80124e0:	e1ff      	b.n	80128e2 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 80124e2:	2300      	movs	r3, #0
 80124e4:	e1fd      	b.n	80128e2 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80124e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124e8:	2200      	movs	r2, #0
 80124ea:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80124ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124ee:	b2da      	uxtb	r2, r3
 80124f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124f2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80124f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124f6:	785b      	ldrb	r3, [r3, #1]
 80124f8:	4618      	mov	r0, r3
 80124fa:	f7fe fbfd 	bl	8010cf8 <disk_initialize>
 80124fe:	4603      	mov	r3, r0
 8012500:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012504:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012508:	f003 0301 	and.w	r3, r3, #1
 801250c:	2b00      	cmp	r3, #0
 801250e:	d001      	beq.n	8012514 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012510:	2303      	movs	r3, #3
 8012512:	e1e6      	b.n	80128e2 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012514:	79fb      	ldrb	r3, [r7, #7]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d007      	beq.n	801252a <find_volume+0xda>
 801251a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801251e:	f003 0304 	and.w	r3, r3, #4
 8012522:	2b00      	cmp	r3, #0
 8012524:	d001      	beq.n	801252a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8012526:	230a      	movs	r3, #10
 8012528:	e1db      	b.n	80128e2 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801252a:	2300      	movs	r3, #0
 801252c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801252e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012530:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012532:	f7ff ff37 	bl	80123a4 <check_fs>
 8012536:	4603      	mov	r3, r0
 8012538:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801253c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012540:	2b02      	cmp	r3, #2
 8012542:	d149      	bne.n	80125d8 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012544:	2300      	movs	r3, #0
 8012546:	643b      	str	r3, [r7, #64]	; 0x40
 8012548:	e01e      	b.n	8012588 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801254a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801254c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012552:	011b      	lsls	r3, r3, #4
 8012554:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012558:	4413      	add	r3, r2
 801255a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801255c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801255e:	3304      	adds	r3, #4
 8012560:	781b      	ldrb	r3, [r3, #0]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d006      	beq.n	8012574 <find_volume+0x124>
 8012566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012568:	3308      	adds	r3, #8
 801256a:	4618      	mov	r0, r3
 801256c:	f7fe fc60 	bl	8010e30 <ld_dword>
 8012570:	4602      	mov	r2, r0
 8012572:	e000      	b.n	8012576 <find_volume+0x126>
 8012574:	2200      	movs	r2, #0
 8012576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012578:	009b      	lsls	r3, r3, #2
 801257a:	3358      	adds	r3, #88	; 0x58
 801257c:	443b      	add	r3, r7
 801257e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012584:	3301      	adds	r3, #1
 8012586:	643b      	str	r3, [r7, #64]	; 0x40
 8012588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801258a:	2b03      	cmp	r3, #3
 801258c:	d9dd      	bls.n	801254a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801258e:	2300      	movs	r3, #0
 8012590:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012594:	2b00      	cmp	r3, #0
 8012596:	d002      	beq.n	801259e <find_volume+0x14e>
 8012598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801259a:	3b01      	subs	r3, #1
 801259c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801259e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125a0:	009b      	lsls	r3, r3, #2
 80125a2:	3358      	adds	r3, #88	; 0x58
 80125a4:	443b      	add	r3, r7
 80125a6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80125aa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80125ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d005      	beq.n	80125be <find_volume+0x16e>
 80125b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80125b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80125b6:	f7ff fef5 	bl	80123a4 <check_fs>
 80125ba:	4603      	mov	r3, r0
 80125bc:	e000      	b.n	80125c0 <find_volume+0x170>
 80125be:	2303      	movs	r3, #3
 80125c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80125c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80125c8:	2b01      	cmp	r3, #1
 80125ca:	d905      	bls.n	80125d8 <find_volume+0x188>
 80125cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125ce:	3301      	adds	r3, #1
 80125d0:	643b      	str	r3, [r7, #64]	; 0x40
 80125d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125d4:	2b03      	cmp	r3, #3
 80125d6:	d9e2      	bls.n	801259e <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80125d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80125dc:	2b04      	cmp	r3, #4
 80125de:	d101      	bne.n	80125e4 <find_volume+0x194>
 80125e0:	2301      	movs	r3, #1
 80125e2:	e17e      	b.n	80128e2 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80125e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80125e8:	2b01      	cmp	r3, #1
 80125ea:	d901      	bls.n	80125f0 <find_volume+0x1a0>
 80125ec:	230d      	movs	r3, #13
 80125ee:	e178      	b.n	80128e2 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80125f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125f2:	3334      	adds	r3, #52	; 0x34
 80125f4:	330b      	adds	r3, #11
 80125f6:	4618      	mov	r0, r3
 80125f8:	f7fe fc02 	bl	8010e00 <ld_word>
 80125fc:	4603      	mov	r3, r0
 80125fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012602:	d001      	beq.n	8012608 <find_volume+0x1b8>
 8012604:	230d      	movs	r3, #13
 8012606:	e16c      	b.n	80128e2 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801260a:	3334      	adds	r3, #52	; 0x34
 801260c:	3316      	adds	r3, #22
 801260e:	4618      	mov	r0, r3
 8012610:	f7fe fbf6 	bl	8010e00 <ld_word>
 8012614:	4603      	mov	r3, r0
 8012616:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801261a:	2b00      	cmp	r3, #0
 801261c:	d106      	bne.n	801262c <find_volume+0x1dc>
 801261e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012620:	3334      	adds	r3, #52	; 0x34
 8012622:	3324      	adds	r3, #36	; 0x24
 8012624:	4618      	mov	r0, r3
 8012626:	f7fe fc03 	bl	8010e30 <ld_dword>
 801262a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801262c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801262e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012630:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012634:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8012638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801263a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801263c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801263e:	789b      	ldrb	r3, [r3, #2]
 8012640:	2b01      	cmp	r3, #1
 8012642:	d005      	beq.n	8012650 <find_volume+0x200>
 8012644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012646:	789b      	ldrb	r3, [r3, #2]
 8012648:	2b02      	cmp	r3, #2
 801264a:	d001      	beq.n	8012650 <find_volume+0x200>
 801264c:	230d      	movs	r3, #13
 801264e:	e148      	b.n	80128e2 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012652:	789b      	ldrb	r3, [r3, #2]
 8012654:	461a      	mov	r2, r3
 8012656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012658:	fb02 f303 	mul.w	r3, r2, r3
 801265c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801265e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012660:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012664:	b29a      	uxth	r2, r3
 8012666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012668:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801266a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801266c:	895b      	ldrh	r3, [r3, #10]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d008      	beq.n	8012684 <find_volume+0x234>
 8012672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012674:	895b      	ldrh	r3, [r3, #10]
 8012676:	461a      	mov	r2, r3
 8012678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801267a:	895b      	ldrh	r3, [r3, #10]
 801267c:	3b01      	subs	r3, #1
 801267e:	4013      	ands	r3, r2
 8012680:	2b00      	cmp	r3, #0
 8012682:	d001      	beq.n	8012688 <find_volume+0x238>
 8012684:	230d      	movs	r3, #13
 8012686:	e12c      	b.n	80128e2 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801268a:	3334      	adds	r3, #52	; 0x34
 801268c:	3311      	adds	r3, #17
 801268e:	4618      	mov	r0, r3
 8012690:	f7fe fbb6 	bl	8010e00 <ld_word>
 8012694:	4603      	mov	r3, r0
 8012696:	461a      	mov	r2, r3
 8012698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801269a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801269c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801269e:	891b      	ldrh	r3, [r3, #8]
 80126a0:	f003 030f 	and.w	r3, r3, #15
 80126a4:	b29b      	uxth	r3, r3
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d001      	beq.n	80126ae <find_volume+0x25e>
 80126aa:	230d      	movs	r3, #13
 80126ac:	e119      	b.n	80128e2 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80126ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126b0:	3334      	adds	r3, #52	; 0x34
 80126b2:	3313      	adds	r3, #19
 80126b4:	4618      	mov	r0, r3
 80126b6:	f7fe fba3 	bl	8010e00 <ld_word>
 80126ba:	4603      	mov	r3, r0
 80126bc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80126be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d106      	bne.n	80126d2 <find_volume+0x282>
 80126c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126c6:	3334      	adds	r3, #52	; 0x34
 80126c8:	3320      	adds	r3, #32
 80126ca:	4618      	mov	r0, r3
 80126cc:	f7fe fbb0 	bl	8010e30 <ld_dword>
 80126d0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80126d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126d4:	3334      	adds	r3, #52	; 0x34
 80126d6:	330e      	adds	r3, #14
 80126d8:	4618      	mov	r0, r3
 80126da:	f7fe fb91 	bl	8010e00 <ld_word>
 80126de:	4603      	mov	r3, r0
 80126e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80126e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d101      	bne.n	80126ec <find_volume+0x29c>
 80126e8:	230d      	movs	r3, #13
 80126ea:	e0fa      	b.n	80128e2 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80126ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80126ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126f0:	4413      	add	r3, r2
 80126f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80126f4:	8912      	ldrh	r2, [r2, #8]
 80126f6:	0912      	lsrs	r2, r2, #4
 80126f8:	b292      	uxth	r2, r2
 80126fa:	4413      	add	r3, r2
 80126fc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80126fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012702:	429a      	cmp	r2, r3
 8012704:	d204      	bcs.n	8012710 <find_volume+0x2c0>
 8012706:	230d      	movs	r3, #13
 8012708:	e0eb      	b.n	80128e2 <find_volume+0x492>
 801270a:	bf00      	nop
 801270c:	20003918 	.word	0x20003918
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012710:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012714:	1ad3      	subs	r3, r2, r3
 8012716:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012718:	8952      	ldrh	r2, [r2, #10]
 801271a:	fbb3 f3f2 	udiv	r3, r3, r2
 801271e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012722:	2b00      	cmp	r3, #0
 8012724:	d101      	bne.n	801272a <find_volume+0x2da>
 8012726:	230d      	movs	r3, #13
 8012728:	e0db      	b.n	80128e2 <find_volume+0x492>
		fmt = FS_FAT32;
 801272a:	2303      	movs	r3, #3
 801272c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012732:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012736:	4293      	cmp	r3, r2
 8012738:	d802      	bhi.n	8012740 <find_volume+0x2f0>
 801273a:	2302      	movs	r3, #2
 801273c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012742:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012746:	4293      	cmp	r3, r2
 8012748:	d802      	bhi.n	8012750 <find_volume+0x300>
 801274a:	2301      	movs	r3, #1
 801274c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012752:	1c9a      	adds	r2, r3, #2
 8012754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012756:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8012758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801275a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801275c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801275e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012762:	441a      	add	r2, r3
 8012764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012766:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8012768:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801276a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801276c:	441a      	add	r2, r3
 801276e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012770:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8012772:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012776:	2b03      	cmp	r3, #3
 8012778:	d11e      	bne.n	80127b8 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801277a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801277c:	3334      	adds	r3, #52	; 0x34
 801277e:	332a      	adds	r3, #42	; 0x2a
 8012780:	4618      	mov	r0, r3
 8012782:	f7fe fb3d 	bl	8010e00 <ld_word>
 8012786:	4603      	mov	r3, r0
 8012788:	2b00      	cmp	r3, #0
 801278a:	d001      	beq.n	8012790 <find_volume+0x340>
 801278c:	230d      	movs	r3, #13
 801278e:	e0a8      	b.n	80128e2 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012792:	891b      	ldrh	r3, [r3, #8]
 8012794:	2b00      	cmp	r3, #0
 8012796:	d001      	beq.n	801279c <find_volume+0x34c>
 8012798:	230d      	movs	r3, #13
 801279a:	e0a2      	b.n	80128e2 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801279c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801279e:	3334      	adds	r3, #52	; 0x34
 80127a0:	332c      	adds	r3, #44	; 0x2c
 80127a2:	4618      	mov	r0, r3
 80127a4:	f7fe fb44 	bl	8010e30 <ld_dword>
 80127a8:	4602      	mov	r2, r0
 80127aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127ac:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80127ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127b0:	699b      	ldr	r3, [r3, #24]
 80127b2:	009b      	lsls	r3, r3, #2
 80127b4:	647b      	str	r3, [r7, #68]	; 0x44
 80127b6:	e01f      	b.n	80127f8 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80127b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127ba:	891b      	ldrh	r3, [r3, #8]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d101      	bne.n	80127c4 <find_volume+0x374>
 80127c0:	230d      	movs	r3, #13
 80127c2:	e08e      	b.n	80128e2 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80127c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80127c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80127ca:	441a      	add	r2, r3
 80127cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127ce:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80127d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80127d4:	2b02      	cmp	r3, #2
 80127d6:	d103      	bne.n	80127e0 <find_volume+0x390>
 80127d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127da:	699b      	ldr	r3, [r3, #24]
 80127dc:	005b      	lsls	r3, r3, #1
 80127de:	e00a      	b.n	80127f6 <find_volume+0x3a6>
 80127e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127e2:	699a      	ldr	r2, [r3, #24]
 80127e4:	4613      	mov	r3, r2
 80127e6:	005b      	lsls	r3, r3, #1
 80127e8:	4413      	add	r3, r2
 80127ea:	085a      	lsrs	r2, r3, #1
 80127ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127ee:	699b      	ldr	r3, [r3, #24]
 80127f0:	f003 0301 	and.w	r3, r3, #1
 80127f4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80127f6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80127f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127fa:	69da      	ldr	r2, [r3, #28]
 80127fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80127fe:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8012802:	0a5b      	lsrs	r3, r3, #9
 8012804:	429a      	cmp	r2, r3
 8012806:	d201      	bcs.n	801280c <find_volume+0x3bc>
 8012808:	230d      	movs	r3, #13
 801280a:	e06a      	b.n	80128e2 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801280c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801280e:	f04f 32ff 	mov.w	r2, #4294967295
 8012812:	615a      	str	r2, [r3, #20]
 8012814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012816:	695a      	ldr	r2, [r3, #20]
 8012818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801281a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801281c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801281e:	2280      	movs	r2, #128	; 0x80
 8012820:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012822:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012826:	2b03      	cmp	r3, #3
 8012828:	d149      	bne.n	80128be <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801282a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801282c:	3334      	adds	r3, #52	; 0x34
 801282e:	3330      	adds	r3, #48	; 0x30
 8012830:	4618      	mov	r0, r3
 8012832:	f7fe fae5 	bl	8010e00 <ld_word>
 8012836:	4603      	mov	r3, r0
 8012838:	2b01      	cmp	r3, #1
 801283a:	d140      	bne.n	80128be <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 801283c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801283e:	3301      	adds	r3, #1
 8012840:	4619      	mov	r1, r3
 8012842:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012844:	f7fe fdbe 	bl	80113c4 <move_window>
 8012848:	4603      	mov	r3, r0
 801284a:	2b00      	cmp	r3, #0
 801284c:	d137      	bne.n	80128be <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 801284e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012850:	2200      	movs	r2, #0
 8012852:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012856:	3334      	adds	r3, #52	; 0x34
 8012858:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801285c:	4618      	mov	r0, r3
 801285e:	f7fe facf 	bl	8010e00 <ld_word>
 8012862:	4603      	mov	r3, r0
 8012864:	461a      	mov	r2, r3
 8012866:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801286a:	429a      	cmp	r2, r3
 801286c:	d127      	bne.n	80128be <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801286e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012870:	3334      	adds	r3, #52	; 0x34
 8012872:	4618      	mov	r0, r3
 8012874:	f7fe fadc 	bl	8010e30 <ld_dword>
 8012878:	4603      	mov	r3, r0
 801287a:	4a1c      	ldr	r2, [pc, #112]	; (80128ec <find_volume+0x49c>)
 801287c:	4293      	cmp	r3, r2
 801287e:	d11e      	bne.n	80128be <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012882:	3334      	adds	r3, #52	; 0x34
 8012884:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012888:	4618      	mov	r0, r3
 801288a:	f7fe fad1 	bl	8010e30 <ld_dword>
 801288e:	4603      	mov	r3, r0
 8012890:	4a17      	ldr	r2, [pc, #92]	; (80128f0 <find_volume+0x4a0>)
 8012892:	4293      	cmp	r3, r2
 8012894:	d113      	bne.n	80128be <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012898:	3334      	adds	r3, #52	; 0x34
 801289a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801289e:	4618      	mov	r0, r3
 80128a0:	f7fe fac6 	bl	8010e30 <ld_dword>
 80128a4:	4602      	mov	r2, r0
 80128a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128a8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80128aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128ac:	3334      	adds	r3, #52	; 0x34
 80128ae:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80128b2:	4618      	mov	r0, r3
 80128b4:	f7fe fabc 	bl	8010e30 <ld_dword>
 80128b8:	4602      	mov	r2, r0
 80128ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128bc:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80128be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128c0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80128c4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80128c6:	4b0b      	ldr	r3, [pc, #44]	; (80128f4 <find_volume+0x4a4>)
 80128c8:	881b      	ldrh	r3, [r3, #0]
 80128ca:	3301      	adds	r3, #1
 80128cc:	b29a      	uxth	r2, r3
 80128ce:	4b09      	ldr	r3, [pc, #36]	; (80128f4 <find_volume+0x4a4>)
 80128d0:	801a      	strh	r2, [r3, #0]
 80128d2:	4b08      	ldr	r3, [pc, #32]	; (80128f4 <find_volume+0x4a4>)
 80128d4:	881a      	ldrh	r2, [r3, #0]
 80128d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128d8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80128da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80128dc:	f7fe fd0a 	bl	80112f4 <clear_lock>
#endif
	return FR_OK;
 80128e0:	2300      	movs	r3, #0
}
 80128e2:	4618      	mov	r0, r3
 80128e4:	3758      	adds	r7, #88	; 0x58
 80128e6:	46bd      	mov	sp, r7
 80128e8:	bd80      	pop	{r7, pc}
 80128ea:	bf00      	nop
 80128ec:	41615252 	.word	0x41615252
 80128f0:	61417272 	.word	0x61417272
 80128f4:	2000391c 	.word	0x2000391c

080128f8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b084      	sub	sp, #16
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	6078      	str	r0, [r7, #4]
 8012900:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012902:	2309      	movs	r3, #9
 8012904:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d02e      	beq.n	801296a <validate+0x72>
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d02a      	beq.n	801296a <validate+0x72>
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	781b      	ldrb	r3, [r3, #0]
 801291a:	2b00      	cmp	r3, #0
 801291c:	d025      	beq.n	801296a <validate+0x72>
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	889a      	ldrh	r2, [r3, #4]
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	88db      	ldrh	r3, [r3, #6]
 8012928:	429a      	cmp	r2, r3
 801292a:	d11e      	bne.n	801296a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	4618      	mov	r0, r3
 8012932:	f7fe fb65 	bl	8011000 <lock_fs>
 8012936:	4603      	mov	r3, r0
 8012938:	2b00      	cmp	r3, #0
 801293a:	d014      	beq.n	8012966 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	785b      	ldrb	r3, [r3, #1]
 8012942:	4618      	mov	r0, r3
 8012944:	f7fe f9be 	bl	8010cc4 <disk_status>
 8012948:	4603      	mov	r3, r0
 801294a:	f003 0301 	and.w	r3, r3, #1
 801294e:	2b00      	cmp	r3, #0
 8012950:	d102      	bne.n	8012958 <validate+0x60>
				res = FR_OK;
 8012952:	2300      	movs	r3, #0
 8012954:	73fb      	strb	r3, [r7, #15]
 8012956:	e008      	b.n	801296a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	2100      	movs	r1, #0
 801295e:	4618      	mov	r0, r3
 8012960:	f7fe fb64 	bl	801102c <unlock_fs>
 8012964:	e001      	b.n	801296a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8012966:	230f      	movs	r3, #15
 8012968:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801296a:	7bfb      	ldrb	r3, [r7, #15]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d102      	bne.n	8012976 <validate+0x7e>
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	e000      	b.n	8012978 <validate+0x80>
 8012976:	2300      	movs	r3, #0
 8012978:	683a      	ldr	r2, [r7, #0]
 801297a:	6013      	str	r3, [r2, #0]
	return res;
 801297c:	7bfb      	ldrb	r3, [r7, #15]
}
 801297e:	4618      	mov	r0, r3
 8012980:	3710      	adds	r7, #16
 8012982:	46bd      	mov	sp, r7
 8012984:	bd80      	pop	{r7, pc}
	...

08012988 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012988:	b580      	push	{r7, lr}
 801298a:	b088      	sub	sp, #32
 801298c:	af00      	add	r7, sp, #0
 801298e:	60f8      	str	r0, [r7, #12]
 8012990:	60b9      	str	r1, [r7, #8]
 8012992:	4613      	mov	r3, r2
 8012994:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012996:	68bb      	ldr	r3, [r7, #8]
 8012998:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801299a:	f107 0310 	add.w	r3, r7, #16
 801299e:	4618      	mov	r0, r3
 80129a0:	f7ff fcbb 	bl	801231a <get_ldnumber>
 80129a4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80129a6:	69fb      	ldr	r3, [r7, #28]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	da01      	bge.n	80129b0 <f_mount+0x28>
 80129ac:	230b      	movs	r3, #11
 80129ae:	e048      	b.n	8012a42 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80129b0:	4a26      	ldr	r2, [pc, #152]	; (8012a4c <f_mount+0xc4>)
 80129b2:	69fb      	ldr	r3, [r7, #28]
 80129b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80129b8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80129ba:	69bb      	ldr	r3, [r7, #24]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d00f      	beq.n	80129e0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80129c0:	69b8      	ldr	r0, [r7, #24]
 80129c2:	f7fe fc97 	bl	80112f4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80129c6:	69bb      	ldr	r3, [r7, #24]
 80129c8:	68db      	ldr	r3, [r3, #12]
 80129ca:	4618      	mov	r0, r3
 80129cc:	f001 fc03 	bl	80141d6 <ff_del_syncobj>
 80129d0:	4603      	mov	r3, r0
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d101      	bne.n	80129da <f_mount+0x52>
 80129d6:	2302      	movs	r3, #2
 80129d8:	e033      	b.n	8012a42 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80129da:	69bb      	ldr	r3, [r7, #24]
 80129dc:	2200      	movs	r2, #0
 80129de:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d00f      	beq.n	8012a06 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	2200      	movs	r2, #0
 80129ea:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80129ec:	69fb      	ldr	r3, [r7, #28]
 80129ee:	b2da      	uxtb	r2, r3
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	330c      	adds	r3, #12
 80129f4:	4619      	mov	r1, r3
 80129f6:	4610      	mov	r0, r2
 80129f8:	f001 fbcd 	bl	8014196 <ff_cre_syncobj>
 80129fc:	4603      	mov	r3, r0
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d101      	bne.n	8012a06 <f_mount+0x7e>
 8012a02:	2302      	movs	r3, #2
 8012a04:	e01d      	b.n	8012a42 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012a06:	68fa      	ldr	r2, [r7, #12]
 8012a08:	4910      	ldr	r1, [pc, #64]	; (8012a4c <f_mount+0xc4>)
 8012a0a:	69fb      	ldr	r3, [r7, #28]
 8012a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d002      	beq.n	8012a1c <f_mount+0x94>
 8012a16:	79fb      	ldrb	r3, [r7, #7]
 8012a18:	2b01      	cmp	r3, #1
 8012a1a:	d001      	beq.n	8012a20 <f_mount+0x98>
 8012a1c:	2300      	movs	r3, #0
 8012a1e:	e010      	b.n	8012a42 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012a20:	f107 010c 	add.w	r1, r7, #12
 8012a24:	f107 0308 	add.w	r3, r7, #8
 8012a28:	2200      	movs	r2, #0
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	f7ff fd10 	bl	8012450 <find_volume>
 8012a30:	4603      	mov	r3, r0
 8012a32:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	7dfa      	ldrb	r2, [r7, #23]
 8012a38:	4611      	mov	r1, r2
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f7fe faf6 	bl	801102c <unlock_fs>
 8012a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a42:	4618      	mov	r0, r3
 8012a44:	3720      	adds	r7, #32
 8012a46:	46bd      	mov	sp, r7
 8012a48:	bd80      	pop	{r7, pc}
 8012a4a:	bf00      	nop
 8012a4c:	20003918 	.word	0x20003918

08012a50 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b098      	sub	sp, #96	; 0x60
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	60f8      	str	r0, [r7, #12]
 8012a58:	60b9      	str	r1, [r7, #8]
 8012a5a:	4613      	mov	r3, r2
 8012a5c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d101      	bne.n	8012a68 <f_open+0x18>
 8012a64:	2309      	movs	r3, #9
 8012a66:	e1b4      	b.n	8012dd2 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012a68:	79fb      	ldrb	r3, [r7, #7]
 8012a6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012a6e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012a70:	79fa      	ldrb	r2, [r7, #7]
 8012a72:	f107 0110 	add.w	r1, r7, #16
 8012a76:	f107 0308 	add.w	r3, r7, #8
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	f7ff fce8 	bl	8012450 <find_volume>
 8012a80:	4603      	mov	r3, r0
 8012a82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8012a86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	f040 8191 	bne.w	8012db2 <f_open+0x362>
		dj.obj.fs = fs;
 8012a90:	693b      	ldr	r3, [r7, #16]
 8012a92:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012a94:	68ba      	ldr	r2, [r7, #8]
 8012a96:	f107 0314 	add.w	r3, r7, #20
 8012a9a:	4611      	mov	r1, r2
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	f7ff fbcb 	bl	8012238 <follow_path>
 8012aa2:	4603      	mov	r3, r0
 8012aa4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012aa8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d11a      	bne.n	8012ae6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012ab0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012ab4:	b25b      	sxtb	r3, r3
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	da03      	bge.n	8012ac2 <f_open+0x72>
				res = FR_INVALID_NAME;
 8012aba:	2306      	movs	r3, #6
 8012abc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012ac0:	e011      	b.n	8012ae6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012ac2:	79fb      	ldrb	r3, [r7, #7]
 8012ac4:	f023 0301 	bic.w	r3, r3, #1
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	bf14      	ite	ne
 8012acc:	2301      	movne	r3, #1
 8012ace:	2300      	moveq	r3, #0
 8012ad0:	b2db      	uxtb	r3, r3
 8012ad2:	461a      	mov	r2, r3
 8012ad4:	f107 0314 	add.w	r3, r7, #20
 8012ad8:	4611      	mov	r1, r2
 8012ada:	4618      	mov	r0, r3
 8012adc:	f7fe fac2 	bl	8011064 <chk_lock>
 8012ae0:	4603      	mov	r3, r0
 8012ae2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012ae6:	79fb      	ldrb	r3, [r7, #7]
 8012ae8:	f003 031c 	and.w	r3, r3, #28
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d07f      	beq.n	8012bf0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8012af0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d017      	beq.n	8012b28 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012af8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012afc:	2b04      	cmp	r3, #4
 8012afe:	d10e      	bne.n	8012b1e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012b00:	f7fe fb0c 	bl	801111c <enq_lock>
 8012b04:	4603      	mov	r3, r0
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d006      	beq.n	8012b18 <f_open+0xc8>
 8012b0a:	f107 0314 	add.w	r3, r7, #20
 8012b0e:	4618      	mov	r0, r3
 8012b10:	f7ff fa4e 	bl	8011fb0 <dir_register>
 8012b14:	4603      	mov	r3, r0
 8012b16:	e000      	b.n	8012b1a <f_open+0xca>
 8012b18:	2312      	movs	r3, #18
 8012b1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012b1e:	79fb      	ldrb	r3, [r7, #7]
 8012b20:	f043 0308 	orr.w	r3, r3, #8
 8012b24:	71fb      	strb	r3, [r7, #7]
 8012b26:	e010      	b.n	8012b4a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012b28:	7ebb      	ldrb	r3, [r7, #26]
 8012b2a:	f003 0311 	and.w	r3, r3, #17
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d003      	beq.n	8012b3a <f_open+0xea>
					res = FR_DENIED;
 8012b32:	2307      	movs	r3, #7
 8012b34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012b38:	e007      	b.n	8012b4a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012b3a:	79fb      	ldrb	r3, [r7, #7]
 8012b3c:	f003 0304 	and.w	r3, r3, #4
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d002      	beq.n	8012b4a <f_open+0xfa>
 8012b44:	2308      	movs	r3, #8
 8012b46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012b4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d168      	bne.n	8012c24 <f_open+0x1d4>
 8012b52:	79fb      	ldrb	r3, [r7, #7]
 8012b54:	f003 0308 	and.w	r3, r3, #8
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d063      	beq.n	8012c24 <f_open+0x1d4>
				dw = GET_FATTIME();
 8012b5c:	f7fa fb9a 	bl	800d294 <get_fattime>
 8012b60:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b64:	330e      	adds	r3, #14
 8012b66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012b68:	4618      	mov	r0, r3
 8012b6a:	f7fe f99f 	bl	8010eac <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b70:	3316      	adds	r3, #22
 8012b72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012b74:	4618      	mov	r0, r3
 8012b76:	f7fe f999 	bl	8010eac <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b7c:	330b      	adds	r3, #11
 8012b7e:	2220      	movs	r2, #32
 8012b80:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012b82:	693b      	ldr	r3, [r7, #16]
 8012b84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012b86:	4611      	mov	r1, r2
 8012b88:	4618      	mov	r0, r3
 8012b8a:	f7ff f920 	bl	8011dce <ld_clust>
 8012b8e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012b90:	693b      	ldr	r3, [r7, #16]
 8012b92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012b94:	2200      	movs	r2, #0
 8012b96:	4618      	mov	r0, r3
 8012b98:	f7ff f938 	bl	8011e0c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b9e:	331c      	adds	r3, #28
 8012ba0:	2100      	movs	r1, #0
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	f7fe f982 	bl	8010eac <st_dword>
					fs->wflag = 1;
 8012ba8:	693b      	ldr	r3, [r7, #16]
 8012baa:	2201      	movs	r2, #1
 8012bac:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d037      	beq.n	8012c24 <f_open+0x1d4>
						dw = fs->winsect;
 8012bb4:	693b      	ldr	r3, [r7, #16]
 8012bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012bb8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8012bba:	f107 0314 	add.w	r3, r7, #20
 8012bbe:	2200      	movs	r2, #0
 8012bc0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	f7fe fe4b 	bl	801185e <remove_chain>
 8012bc8:	4603      	mov	r3, r0
 8012bca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8012bce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d126      	bne.n	8012c24 <f_open+0x1d4>
							res = move_window(fs, dw);
 8012bd6:	693b      	ldr	r3, [r7, #16]
 8012bd8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012bda:	4618      	mov	r0, r3
 8012bdc:	f7fe fbf2 	bl	80113c4 <move_window>
 8012be0:	4603      	mov	r3, r0
 8012be2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012be6:	693b      	ldr	r3, [r7, #16]
 8012be8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012bea:	3a01      	subs	r2, #1
 8012bec:	611a      	str	r2, [r3, #16]
 8012bee:	e019      	b.n	8012c24 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012bf0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d115      	bne.n	8012c24 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012bf8:	7ebb      	ldrb	r3, [r7, #26]
 8012bfa:	f003 0310 	and.w	r3, r3, #16
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d003      	beq.n	8012c0a <f_open+0x1ba>
					res = FR_NO_FILE;
 8012c02:	2304      	movs	r3, #4
 8012c04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012c08:	e00c      	b.n	8012c24 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012c0a:	79fb      	ldrb	r3, [r7, #7]
 8012c0c:	f003 0302 	and.w	r3, r3, #2
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d007      	beq.n	8012c24 <f_open+0x1d4>
 8012c14:	7ebb      	ldrb	r3, [r7, #26]
 8012c16:	f003 0301 	and.w	r3, r3, #1
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d002      	beq.n	8012c24 <f_open+0x1d4>
						res = FR_DENIED;
 8012c1e:	2307      	movs	r3, #7
 8012c20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8012c24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d128      	bne.n	8012c7e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012c2c:	79fb      	ldrb	r3, [r7, #7]
 8012c2e:	f003 0308 	and.w	r3, r3, #8
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d003      	beq.n	8012c3e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8012c36:	79fb      	ldrb	r3, [r7, #7]
 8012c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c3c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012c3e:	693b      	ldr	r3, [r7, #16]
 8012c40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8012c46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012c4c:	79fb      	ldrb	r3, [r7, #7]
 8012c4e:	f023 0301 	bic.w	r3, r3, #1
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	bf14      	ite	ne
 8012c56:	2301      	movne	r3, #1
 8012c58:	2300      	moveq	r3, #0
 8012c5a:	b2db      	uxtb	r3, r3
 8012c5c:	461a      	mov	r2, r3
 8012c5e:	f107 0314 	add.w	r3, r7, #20
 8012c62:	4611      	mov	r1, r2
 8012c64:	4618      	mov	r0, r3
 8012c66:	f7fe fa7b 	bl	8011160 <inc_lock>
 8012c6a:	4602      	mov	r2, r0
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	691b      	ldr	r3, [r3, #16]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d102      	bne.n	8012c7e <f_open+0x22e>
 8012c78:	2302      	movs	r3, #2
 8012c7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012c7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	f040 8095 	bne.w	8012db2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012c88:	693b      	ldr	r3, [r7, #16]
 8012c8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c8c:	4611      	mov	r1, r2
 8012c8e:	4618      	mov	r0, r3
 8012c90:	f7ff f89d 	bl	8011dce <ld_clust>
 8012c94:	4602      	mov	r2, r0
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c9c:	331c      	adds	r3, #28
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	f7fe f8c6 	bl	8010e30 <ld_dword>
 8012ca4:	4602      	mov	r2, r0
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	2200      	movs	r2, #0
 8012cae:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012cb0:	693a      	ldr	r2, [r7, #16]
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012cb6:	693b      	ldr	r3, [r7, #16]
 8012cb8:	88da      	ldrh	r2, [r3, #6]
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	79fa      	ldrb	r2, [r7, #7]
 8012cc2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	2200      	movs	r2, #0
 8012cc8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	2200      	movs	r2, #0
 8012cce:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	2200      	movs	r2, #0
 8012cd4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	3330      	adds	r3, #48	; 0x30
 8012cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012cde:	2100      	movs	r1, #0
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f7fe f930 	bl	8010f46 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012ce6:	79fb      	ldrb	r3, [r7, #7]
 8012ce8:	f003 0320 	and.w	r3, r3, #32
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d060      	beq.n	8012db2 <f_open+0x362>
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	68db      	ldr	r3, [r3, #12]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d05c      	beq.n	8012db2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	68da      	ldr	r2, [r3, #12]
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012d00:	693b      	ldr	r3, [r7, #16]
 8012d02:	895b      	ldrh	r3, [r3, #10]
 8012d04:	025b      	lsls	r3, r3, #9
 8012d06:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	689b      	ldr	r3, [r3, #8]
 8012d0c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	68db      	ldr	r3, [r3, #12]
 8012d12:	657b      	str	r3, [r7, #84]	; 0x54
 8012d14:	e016      	b.n	8012d44 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	f7fe fc0d 	bl	801153a <get_fat>
 8012d20:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8012d22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012d24:	2b01      	cmp	r3, #1
 8012d26:	d802      	bhi.n	8012d2e <f_open+0x2de>
 8012d28:	2302      	movs	r3, #2
 8012d2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012d2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d34:	d102      	bne.n	8012d3c <f_open+0x2ec>
 8012d36:	2301      	movs	r3, #1
 8012d38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012d3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d40:	1ad3      	subs	r3, r2, r3
 8012d42:	657b      	str	r3, [r7, #84]	; 0x54
 8012d44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d103      	bne.n	8012d54 <f_open+0x304>
 8012d4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d50:	429a      	cmp	r2, r3
 8012d52:	d8e0      	bhi.n	8012d16 <f_open+0x2c6>
				}
				fp->clust = clst;
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012d58:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012d5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d127      	bne.n	8012db2 <f_open+0x362>
 8012d62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d022      	beq.n	8012db2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012d6c:	693b      	ldr	r3, [r7, #16]
 8012d6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012d70:	4618      	mov	r0, r3
 8012d72:	f7fe fbc3 	bl	80114fc <clust2sect>
 8012d76:	6478      	str	r0, [r7, #68]	; 0x44
 8012d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d103      	bne.n	8012d86 <f_open+0x336>
						res = FR_INT_ERR;
 8012d7e:	2302      	movs	r3, #2
 8012d80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012d84:	e015      	b.n	8012db2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d88:	0a5a      	lsrs	r2, r3, #9
 8012d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d8c:	441a      	add	r2, r3
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012d92:	693b      	ldr	r3, [r7, #16]
 8012d94:	7858      	ldrb	r0, [r3, #1]
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	6a1a      	ldr	r2, [r3, #32]
 8012da0:	2301      	movs	r3, #1
 8012da2:	f7fd ffcf 	bl	8010d44 <disk_read>
 8012da6:	4603      	mov	r3, r0
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d002      	beq.n	8012db2 <f_open+0x362>
 8012dac:	2301      	movs	r3, #1
 8012dae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012db2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d002      	beq.n	8012dc0 <f_open+0x370>
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	2200      	movs	r2, #0
 8012dbe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012dc0:	693b      	ldr	r3, [r7, #16]
 8012dc2:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8012dc6:	4611      	mov	r1, r2
 8012dc8:	4618      	mov	r0, r3
 8012dca:	f7fe f92f 	bl	801102c <unlock_fs>
 8012dce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	3760      	adds	r7, #96	; 0x60
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	bd80      	pop	{r7, pc}

08012dda <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8012dda:	b580      	push	{r7, lr}
 8012ddc:	b08e      	sub	sp, #56	; 0x38
 8012dde:	af00      	add	r7, sp, #0
 8012de0:	60f8      	str	r0, [r7, #12]
 8012de2:	60b9      	str	r1, [r7, #8]
 8012de4:	607a      	str	r2, [r7, #4]
 8012de6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8012de8:	68bb      	ldr	r3, [r7, #8]
 8012dea:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8012dec:	683b      	ldr	r3, [r7, #0]
 8012dee:	2200      	movs	r2, #0
 8012df0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	f107 0214 	add.w	r2, r7, #20
 8012df8:	4611      	mov	r1, r2
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	f7ff fd7c 	bl	80128f8 <validate>
 8012e00:	4603      	mov	r3, r0
 8012e02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012e06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d107      	bne.n	8012e1e <f_read+0x44>
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	7d5b      	ldrb	r3, [r3, #21]
 8012e12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012e16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d009      	beq.n	8012e32 <f_read+0x58>
 8012e1e:	697b      	ldr	r3, [r7, #20]
 8012e20:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012e24:	4611      	mov	r1, r2
 8012e26:	4618      	mov	r0, r3
 8012e28:	f7fe f900 	bl	801102c <unlock_fs>
 8012e2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e30:	e13d      	b.n	80130ae <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	7d1b      	ldrb	r3, [r3, #20]
 8012e36:	f003 0301 	and.w	r3, r3, #1
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d106      	bne.n	8012e4c <f_read+0x72>
 8012e3e:	697b      	ldr	r3, [r7, #20]
 8012e40:	2107      	movs	r1, #7
 8012e42:	4618      	mov	r0, r3
 8012e44:	f7fe f8f2 	bl	801102c <unlock_fs>
 8012e48:	2307      	movs	r3, #7
 8012e4a:	e130      	b.n	80130ae <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	68da      	ldr	r2, [r3, #12]
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	699b      	ldr	r3, [r3, #24]
 8012e54:	1ad3      	subs	r3, r2, r3
 8012e56:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8012e58:	687a      	ldr	r2, [r7, #4]
 8012e5a:	6a3b      	ldr	r3, [r7, #32]
 8012e5c:	429a      	cmp	r2, r3
 8012e5e:	f240 811c 	bls.w	801309a <f_read+0x2c0>
 8012e62:	6a3b      	ldr	r3, [r7, #32]
 8012e64:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8012e66:	e118      	b.n	801309a <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	699b      	ldr	r3, [r3, #24]
 8012e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	f040 80e4 	bne.w	801303e <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	699b      	ldr	r3, [r3, #24]
 8012e7a:	0a5b      	lsrs	r3, r3, #9
 8012e7c:	697a      	ldr	r2, [r7, #20]
 8012e7e:	8952      	ldrh	r2, [r2, #10]
 8012e80:	3a01      	subs	r2, #1
 8012e82:	4013      	ands	r3, r2
 8012e84:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8012e86:	69fb      	ldr	r3, [r7, #28]
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d139      	bne.n	8012f00 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	699b      	ldr	r3, [r3, #24]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d103      	bne.n	8012e9c <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	689b      	ldr	r3, [r3, #8]
 8012e98:	633b      	str	r3, [r7, #48]	; 0x30
 8012e9a:	e013      	b.n	8012ec4 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d007      	beq.n	8012eb4 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	699b      	ldr	r3, [r3, #24]
 8012ea8:	4619      	mov	r1, r3
 8012eaa:	68f8      	ldr	r0, [r7, #12]
 8012eac:	f7fe fdd4 	bl	8011a58 <clmt_clust>
 8012eb0:	6338      	str	r0, [r7, #48]	; 0x30
 8012eb2:	e007      	b.n	8012ec4 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8012eb4:	68fa      	ldr	r2, [r7, #12]
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	69db      	ldr	r3, [r3, #28]
 8012eba:	4619      	mov	r1, r3
 8012ebc:	4610      	mov	r0, r2
 8012ebe:	f7fe fb3c 	bl	801153a <get_fat>
 8012ec2:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8012ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ec6:	2b01      	cmp	r3, #1
 8012ec8:	d809      	bhi.n	8012ede <f_read+0x104>
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	2202      	movs	r2, #2
 8012ece:	755a      	strb	r2, [r3, #21]
 8012ed0:	697b      	ldr	r3, [r7, #20]
 8012ed2:	2102      	movs	r1, #2
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	f7fe f8a9 	bl	801102c <unlock_fs>
 8012eda:	2302      	movs	r3, #2
 8012edc:	e0e7      	b.n	80130ae <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ee4:	d109      	bne.n	8012efa <f_read+0x120>
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	2201      	movs	r2, #1
 8012eea:	755a      	strb	r2, [r3, #21]
 8012eec:	697b      	ldr	r3, [r7, #20]
 8012eee:	2101      	movs	r1, #1
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	f7fe f89b 	bl	801102c <unlock_fs>
 8012ef6:	2301      	movs	r3, #1
 8012ef8:	e0d9      	b.n	80130ae <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012efe:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012f00:	697a      	ldr	r2, [r7, #20]
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	69db      	ldr	r3, [r3, #28]
 8012f06:	4619      	mov	r1, r3
 8012f08:	4610      	mov	r0, r2
 8012f0a:	f7fe faf7 	bl	80114fc <clust2sect>
 8012f0e:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012f10:	69bb      	ldr	r3, [r7, #24]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d109      	bne.n	8012f2a <f_read+0x150>
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	2202      	movs	r2, #2
 8012f1a:	755a      	strb	r2, [r3, #21]
 8012f1c:	697b      	ldr	r3, [r7, #20]
 8012f1e:	2102      	movs	r1, #2
 8012f20:	4618      	mov	r0, r3
 8012f22:	f7fe f883 	bl	801102c <unlock_fs>
 8012f26:	2302      	movs	r3, #2
 8012f28:	e0c1      	b.n	80130ae <f_read+0x2d4>
			sect += csect;
 8012f2a:	69ba      	ldr	r2, [r7, #24]
 8012f2c:	69fb      	ldr	r3, [r7, #28]
 8012f2e:	4413      	add	r3, r2
 8012f30:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	0a5b      	lsrs	r3, r3, #9
 8012f36:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8012f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d03e      	beq.n	8012fbc <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012f3e:	69fa      	ldr	r2, [r7, #28]
 8012f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f42:	4413      	add	r3, r2
 8012f44:	697a      	ldr	r2, [r7, #20]
 8012f46:	8952      	ldrh	r2, [r2, #10]
 8012f48:	4293      	cmp	r3, r2
 8012f4a:	d905      	bls.n	8012f58 <f_read+0x17e>
					cc = fs->csize - csect;
 8012f4c:	697b      	ldr	r3, [r7, #20]
 8012f4e:	895b      	ldrh	r3, [r3, #10]
 8012f50:	461a      	mov	r2, r3
 8012f52:	69fb      	ldr	r3, [r7, #28]
 8012f54:	1ad3      	subs	r3, r2, r3
 8012f56:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012f58:	697b      	ldr	r3, [r7, #20]
 8012f5a:	7858      	ldrb	r0, [r3, #1]
 8012f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f5e:	69ba      	ldr	r2, [r7, #24]
 8012f60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012f62:	f7fd feef 	bl	8010d44 <disk_read>
 8012f66:	4603      	mov	r3, r0
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d009      	beq.n	8012f80 <f_read+0x1a6>
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	2201      	movs	r2, #1
 8012f70:	755a      	strb	r2, [r3, #21]
 8012f72:	697b      	ldr	r3, [r7, #20]
 8012f74:	2101      	movs	r1, #1
 8012f76:	4618      	mov	r0, r3
 8012f78:	f7fe f858 	bl	801102c <unlock_fs>
 8012f7c:	2301      	movs	r3, #1
 8012f7e:	e096      	b.n	80130ae <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	7d1b      	ldrb	r3, [r3, #20]
 8012f84:	b25b      	sxtb	r3, r3
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	da14      	bge.n	8012fb4 <f_read+0x1da>
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	6a1a      	ldr	r2, [r3, #32]
 8012f8e:	69bb      	ldr	r3, [r7, #24]
 8012f90:	1ad3      	subs	r3, r2, r3
 8012f92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f94:	429a      	cmp	r2, r3
 8012f96:	d90d      	bls.n	8012fb4 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	6a1a      	ldr	r2, [r3, #32]
 8012f9c:	69bb      	ldr	r3, [r7, #24]
 8012f9e:	1ad3      	subs	r3, r2, r3
 8012fa0:	025b      	lsls	r3, r3, #9
 8012fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012fa4:	18d0      	adds	r0, r2, r3
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	3330      	adds	r3, #48	; 0x30
 8012faa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012fae:	4619      	mov	r1, r3
 8012fb0:	f7fd ffa8 	bl	8010f04 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8012fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fb6:	025b      	lsls	r3, r3, #9
 8012fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8012fba:	e05a      	b.n	8013072 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	6a1b      	ldr	r3, [r3, #32]
 8012fc0:	69ba      	ldr	r2, [r7, #24]
 8012fc2:	429a      	cmp	r2, r3
 8012fc4:	d038      	beq.n	8013038 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	7d1b      	ldrb	r3, [r3, #20]
 8012fca:	b25b      	sxtb	r3, r3
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	da1d      	bge.n	801300c <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012fd0:	697b      	ldr	r3, [r7, #20]
 8012fd2:	7858      	ldrb	r0, [r3, #1]
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	6a1a      	ldr	r2, [r3, #32]
 8012fde:	2301      	movs	r3, #1
 8012fe0:	f7fd fed0 	bl	8010d84 <disk_write>
 8012fe4:	4603      	mov	r3, r0
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d009      	beq.n	8012ffe <f_read+0x224>
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	2201      	movs	r2, #1
 8012fee:	755a      	strb	r2, [r3, #21]
 8012ff0:	697b      	ldr	r3, [r7, #20]
 8012ff2:	2101      	movs	r1, #1
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	f7fe f819 	bl	801102c <unlock_fs>
 8012ffa:	2301      	movs	r3, #1
 8012ffc:	e057      	b.n	80130ae <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	7d1b      	ldrb	r3, [r3, #20]
 8013002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013006:	b2da      	uxtb	r2, r3
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801300c:	697b      	ldr	r3, [r7, #20]
 801300e:	7858      	ldrb	r0, [r3, #1]
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013016:	2301      	movs	r3, #1
 8013018:	69ba      	ldr	r2, [r7, #24]
 801301a:	f7fd fe93 	bl	8010d44 <disk_read>
 801301e:	4603      	mov	r3, r0
 8013020:	2b00      	cmp	r3, #0
 8013022:	d009      	beq.n	8013038 <f_read+0x25e>
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	2201      	movs	r2, #1
 8013028:	755a      	strb	r2, [r3, #21]
 801302a:	697b      	ldr	r3, [r7, #20]
 801302c:	2101      	movs	r1, #1
 801302e:	4618      	mov	r0, r3
 8013030:	f7fd fffc 	bl	801102c <unlock_fs>
 8013034:	2301      	movs	r3, #1
 8013036:	e03a      	b.n	80130ae <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	69ba      	ldr	r2, [r7, #24]
 801303c:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	699b      	ldr	r3, [r3, #24]
 8013042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013046:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801304a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801304c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	429a      	cmp	r2, r3
 8013052:	d901      	bls.n	8013058 <f_read+0x27e>
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	699b      	ldr	r3, [r3, #24]
 8013062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013066:	4413      	add	r3, r2
 8013068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801306a:	4619      	mov	r1, r3
 801306c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801306e:	f7fd ff49 	bl	8010f04 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8013072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013076:	4413      	add	r3, r2
 8013078:	627b      	str	r3, [r7, #36]	; 0x24
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	699a      	ldr	r2, [r3, #24]
 801307e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013080:	441a      	add	r2, r3
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	619a      	str	r2, [r3, #24]
 8013086:	683b      	ldr	r3, [r7, #0]
 8013088:	681a      	ldr	r2, [r3, #0]
 801308a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801308c:	441a      	add	r2, r3
 801308e:	683b      	ldr	r3, [r7, #0]
 8013090:	601a      	str	r2, [r3, #0]
 8013092:	687a      	ldr	r2, [r7, #4]
 8013094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013096:	1ad3      	subs	r3, r2, r3
 8013098:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	2b00      	cmp	r3, #0
 801309e:	f47f aee3 	bne.w	8012e68 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80130a2:	697b      	ldr	r3, [r7, #20]
 80130a4:	2100      	movs	r1, #0
 80130a6:	4618      	mov	r0, r3
 80130a8:	f7fd ffc0 	bl	801102c <unlock_fs>
 80130ac:	2300      	movs	r3, #0
}
 80130ae:	4618      	mov	r0, r3
 80130b0:	3738      	adds	r7, #56	; 0x38
 80130b2:	46bd      	mov	sp, r7
 80130b4:	bd80      	pop	{r7, pc}

080130b6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80130b6:	b580      	push	{r7, lr}
 80130b8:	b08c      	sub	sp, #48	; 0x30
 80130ba:	af00      	add	r7, sp, #0
 80130bc:	60f8      	str	r0, [r7, #12]
 80130be:	60b9      	str	r1, [r7, #8]
 80130c0:	607a      	str	r2, [r7, #4]
 80130c2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80130c4:	68bb      	ldr	r3, [r7, #8]
 80130c6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80130c8:	683b      	ldr	r3, [r7, #0]
 80130ca:	2200      	movs	r2, #0
 80130cc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	f107 0210 	add.w	r2, r7, #16
 80130d4:	4611      	mov	r1, r2
 80130d6:	4618      	mov	r0, r3
 80130d8:	f7ff fc0e 	bl	80128f8 <validate>
 80130dc:	4603      	mov	r3, r0
 80130de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80130e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d107      	bne.n	80130fa <f_write+0x44>
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	7d5b      	ldrb	r3, [r3, #21]
 80130ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80130f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d009      	beq.n	801310e <f_write+0x58>
 80130fa:	693b      	ldr	r3, [r7, #16]
 80130fc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8013100:	4611      	mov	r1, r2
 8013102:	4618      	mov	r0, r3
 8013104:	f7fd ff92 	bl	801102c <unlock_fs>
 8013108:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801310c:	e173      	b.n	80133f6 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	7d1b      	ldrb	r3, [r3, #20]
 8013112:	f003 0302 	and.w	r3, r3, #2
 8013116:	2b00      	cmp	r3, #0
 8013118:	d106      	bne.n	8013128 <f_write+0x72>
 801311a:	693b      	ldr	r3, [r7, #16]
 801311c:	2107      	movs	r1, #7
 801311e:	4618      	mov	r0, r3
 8013120:	f7fd ff84 	bl	801102c <unlock_fs>
 8013124:	2307      	movs	r3, #7
 8013126:	e166      	b.n	80133f6 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	699a      	ldr	r2, [r3, #24]
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	441a      	add	r2, r3
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	699b      	ldr	r3, [r3, #24]
 8013134:	429a      	cmp	r2, r3
 8013136:	f080 814b 	bcs.w	80133d0 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	699b      	ldr	r3, [r3, #24]
 801313e:	43db      	mvns	r3, r3
 8013140:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013142:	e145      	b.n	80133d0 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	699b      	ldr	r3, [r3, #24]
 8013148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801314c:	2b00      	cmp	r3, #0
 801314e:	f040 8101 	bne.w	8013354 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	699b      	ldr	r3, [r3, #24]
 8013156:	0a5b      	lsrs	r3, r3, #9
 8013158:	693a      	ldr	r2, [r7, #16]
 801315a:	8952      	ldrh	r2, [r2, #10]
 801315c:	3a01      	subs	r2, #1
 801315e:	4013      	ands	r3, r2
 8013160:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013162:	69bb      	ldr	r3, [r7, #24]
 8013164:	2b00      	cmp	r3, #0
 8013166:	d14d      	bne.n	8013204 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	699b      	ldr	r3, [r3, #24]
 801316c:	2b00      	cmp	r3, #0
 801316e:	d10c      	bne.n	801318a <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	689b      	ldr	r3, [r3, #8]
 8013174:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013178:	2b00      	cmp	r3, #0
 801317a:	d11a      	bne.n	80131b2 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	2100      	movs	r1, #0
 8013180:	4618      	mov	r0, r3
 8013182:	f7fe fbd1 	bl	8011928 <create_chain>
 8013186:	62b8      	str	r0, [r7, #40]	; 0x28
 8013188:	e013      	b.n	80131b2 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801318e:	2b00      	cmp	r3, #0
 8013190:	d007      	beq.n	80131a2 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	699b      	ldr	r3, [r3, #24]
 8013196:	4619      	mov	r1, r3
 8013198:	68f8      	ldr	r0, [r7, #12]
 801319a:	f7fe fc5d 	bl	8011a58 <clmt_clust>
 801319e:	62b8      	str	r0, [r7, #40]	; 0x28
 80131a0:	e007      	b.n	80131b2 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80131a2:	68fa      	ldr	r2, [r7, #12]
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	69db      	ldr	r3, [r3, #28]
 80131a8:	4619      	mov	r1, r3
 80131aa:	4610      	mov	r0, r2
 80131ac:	f7fe fbbc 	bl	8011928 <create_chain>
 80131b0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80131b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	f000 8110 	beq.w	80133da <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80131ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131bc:	2b01      	cmp	r3, #1
 80131be:	d109      	bne.n	80131d4 <f_write+0x11e>
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	2202      	movs	r2, #2
 80131c4:	755a      	strb	r2, [r3, #21]
 80131c6:	693b      	ldr	r3, [r7, #16]
 80131c8:	2102      	movs	r1, #2
 80131ca:	4618      	mov	r0, r3
 80131cc:	f7fd ff2e 	bl	801102c <unlock_fs>
 80131d0:	2302      	movs	r3, #2
 80131d2:	e110      	b.n	80133f6 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80131d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131da:	d109      	bne.n	80131f0 <f_write+0x13a>
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	2201      	movs	r2, #1
 80131e0:	755a      	strb	r2, [r3, #21]
 80131e2:	693b      	ldr	r3, [r7, #16]
 80131e4:	2101      	movs	r1, #1
 80131e6:	4618      	mov	r0, r3
 80131e8:	f7fd ff20 	bl	801102c <unlock_fs>
 80131ec:	2301      	movs	r3, #1
 80131ee:	e102      	b.n	80133f6 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80131f4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	689b      	ldr	r3, [r3, #8]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d102      	bne.n	8013204 <f_write+0x14e>
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013202:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	7d1b      	ldrb	r3, [r3, #20]
 8013208:	b25b      	sxtb	r3, r3
 801320a:	2b00      	cmp	r3, #0
 801320c:	da1d      	bge.n	801324a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801320e:	693b      	ldr	r3, [r7, #16]
 8013210:	7858      	ldrb	r0, [r3, #1]
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	6a1a      	ldr	r2, [r3, #32]
 801321c:	2301      	movs	r3, #1
 801321e:	f7fd fdb1 	bl	8010d84 <disk_write>
 8013222:	4603      	mov	r3, r0
 8013224:	2b00      	cmp	r3, #0
 8013226:	d009      	beq.n	801323c <f_write+0x186>
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	2201      	movs	r2, #1
 801322c:	755a      	strb	r2, [r3, #21]
 801322e:	693b      	ldr	r3, [r7, #16]
 8013230:	2101      	movs	r1, #1
 8013232:	4618      	mov	r0, r3
 8013234:	f7fd fefa 	bl	801102c <unlock_fs>
 8013238:	2301      	movs	r3, #1
 801323a:	e0dc      	b.n	80133f6 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	7d1b      	ldrb	r3, [r3, #20]
 8013240:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013244:	b2da      	uxtb	r2, r3
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801324a:	693a      	ldr	r2, [r7, #16]
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	69db      	ldr	r3, [r3, #28]
 8013250:	4619      	mov	r1, r3
 8013252:	4610      	mov	r0, r2
 8013254:	f7fe f952 	bl	80114fc <clust2sect>
 8013258:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801325a:	697b      	ldr	r3, [r7, #20]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d109      	bne.n	8013274 <f_write+0x1be>
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	2202      	movs	r2, #2
 8013264:	755a      	strb	r2, [r3, #21]
 8013266:	693b      	ldr	r3, [r7, #16]
 8013268:	2102      	movs	r1, #2
 801326a:	4618      	mov	r0, r3
 801326c:	f7fd fede 	bl	801102c <unlock_fs>
 8013270:	2302      	movs	r3, #2
 8013272:	e0c0      	b.n	80133f6 <f_write+0x340>
			sect += csect;
 8013274:	697a      	ldr	r2, [r7, #20]
 8013276:	69bb      	ldr	r3, [r7, #24]
 8013278:	4413      	add	r3, r2
 801327a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	0a5b      	lsrs	r3, r3, #9
 8013280:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013282:	6a3b      	ldr	r3, [r7, #32]
 8013284:	2b00      	cmp	r3, #0
 8013286:	d041      	beq.n	801330c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013288:	69ba      	ldr	r2, [r7, #24]
 801328a:	6a3b      	ldr	r3, [r7, #32]
 801328c:	4413      	add	r3, r2
 801328e:	693a      	ldr	r2, [r7, #16]
 8013290:	8952      	ldrh	r2, [r2, #10]
 8013292:	4293      	cmp	r3, r2
 8013294:	d905      	bls.n	80132a2 <f_write+0x1ec>
					cc = fs->csize - csect;
 8013296:	693b      	ldr	r3, [r7, #16]
 8013298:	895b      	ldrh	r3, [r3, #10]
 801329a:	461a      	mov	r2, r3
 801329c:	69bb      	ldr	r3, [r7, #24]
 801329e:	1ad3      	subs	r3, r2, r3
 80132a0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80132a2:	693b      	ldr	r3, [r7, #16]
 80132a4:	7858      	ldrb	r0, [r3, #1]
 80132a6:	6a3b      	ldr	r3, [r7, #32]
 80132a8:	697a      	ldr	r2, [r7, #20]
 80132aa:	69f9      	ldr	r1, [r7, #28]
 80132ac:	f7fd fd6a 	bl	8010d84 <disk_write>
 80132b0:	4603      	mov	r3, r0
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d009      	beq.n	80132ca <f_write+0x214>
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	2201      	movs	r2, #1
 80132ba:	755a      	strb	r2, [r3, #21]
 80132bc:	693b      	ldr	r3, [r7, #16]
 80132be:	2101      	movs	r1, #1
 80132c0:	4618      	mov	r0, r3
 80132c2:	f7fd feb3 	bl	801102c <unlock_fs>
 80132c6:	2301      	movs	r3, #1
 80132c8:	e095      	b.n	80133f6 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	6a1a      	ldr	r2, [r3, #32]
 80132ce:	697b      	ldr	r3, [r7, #20]
 80132d0:	1ad3      	subs	r3, r2, r3
 80132d2:	6a3a      	ldr	r2, [r7, #32]
 80132d4:	429a      	cmp	r2, r3
 80132d6:	d915      	bls.n	8013304 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	6a1a      	ldr	r2, [r3, #32]
 80132e2:	697b      	ldr	r3, [r7, #20]
 80132e4:	1ad3      	subs	r3, r2, r3
 80132e6:	025b      	lsls	r3, r3, #9
 80132e8:	69fa      	ldr	r2, [r7, #28]
 80132ea:	4413      	add	r3, r2
 80132ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80132f0:	4619      	mov	r1, r3
 80132f2:	f7fd fe07 	bl	8010f04 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	7d1b      	ldrb	r3, [r3, #20]
 80132fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80132fe:	b2da      	uxtb	r2, r3
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013304:	6a3b      	ldr	r3, [r7, #32]
 8013306:	025b      	lsls	r3, r3, #9
 8013308:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801330a:	e044      	b.n	8013396 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	6a1b      	ldr	r3, [r3, #32]
 8013310:	697a      	ldr	r2, [r7, #20]
 8013312:	429a      	cmp	r2, r3
 8013314:	d01b      	beq.n	801334e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	699a      	ldr	r2, [r3, #24]
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801331e:	429a      	cmp	r2, r3
 8013320:	d215      	bcs.n	801334e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013322:	693b      	ldr	r3, [r7, #16]
 8013324:	7858      	ldrb	r0, [r3, #1]
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801332c:	2301      	movs	r3, #1
 801332e:	697a      	ldr	r2, [r7, #20]
 8013330:	f7fd fd08 	bl	8010d44 <disk_read>
 8013334:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013336:	2b00      	cmp	r3, #0
 8013338:	d009      	beq.n	801334e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	2201      	movs	r2, #1
 801333e:	755a      	strb	r2, [r3, #21]
 8013340:	693b      	ldr	r3, [r7, #16]
 8013342:	2101      	movs	r1, #1
 8013344:	4618      	mov	r0, r3
 8013346:	f7fd fe71 	bl	801102c <unlock_fs>
 801334a:	2301      	movs	r3, #1
 801334c:	e053      	b.n	80133f6 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	697a      	ldr	r2, [r7, #20]
 8013352:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	699b      	ldr	r3, [r3, #24]
 8013358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801335c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8013360:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	429a      	cmp	r2, r3
 8013368:	d901      	bls.n	801336e <f_write+0x2b8>
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	699b      	ldr	r3, [r3, #24]
 8013378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801337c:	4413      	add	r3, r2
 801337e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013380:	69f9      	ldr	r1, [r7, #28]
 8013382:	4618      	mov	r0, r3
 8013384:	f7fd fdbe 	bl	8010f04 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	7d1b      	ldrb	r3, [r3, #20]
 801338c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013390:	b2da      	uxtb	r2, r3
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013396:	69fa      	ldr	r2, [r7, #28]
 8013398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801339a:	4413      	add	r3, r2
 801339c:	61fb      	str	r3, [r7, #28]
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	699a      	ldr	r2, [r3, #24]
 80133a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133a4:	441a      	add	r2, r3
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	619a      	str	r2, [r3, #24]
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	68da      	ldr	r2, [r3, #12]
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	699b      	ldr	r3, [r3, #24]
 80133b2:	429a      	cmp	r2, r3
 80133b4:	bf38      	it	cc
 80133b6:	461a      	movcc	r2, r3
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	60da      	str	r2, [r3, #12]
 80133bc:	683b      	ldr	r3, [r7, #0]
 80133be:	681a      	ldr	r2, [r3, #0]
 80133c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133c2:	441a      	add	r2, r3
 80133c4:	683b      	ldr	r3, [r7, #0]
 80133c6:	601a      	str	r2, [r3, #0]
 80133c8:	687a      	ldr	r2, [r7, #4]
 80133ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133cc:	1ad3      	subs	r3, r2, r3
 80133ce:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	f47f aeb6 	bne.w	8013144 <f_write+0x8e>
 80133d8:	e000      	b.n	80133dc <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80133da:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	7d1b      	ldrb	r3, [r3, #20]
 80133e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80133e4:	b2da      	uxtb	r2, r3
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80133ea:	693b      	ldr	r3, [r7, #16]
 80133ec:	2100      	movs	r1, #0
 80133ee:	4618      	mov	r0, r3
 80133f0:	f7fd fe1c 	bl	801102c <unlock_fs>
 80133f4:	2300      	movs	r3, #0
}
 80133f6:	4618      	mov	r0, r3
 80133f8:	3730      	adds	r7, #48	; 0x30
 80133fa:	46bd      	mov	sp, r7
 80133fc:	bd80      	pop	{r7, pc}

080133fe <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80133fe:	b580      	push	{r7, lr}
 8013400:	b086      	sub	sp, #24
 8013402:	af00      	add	r7, sp, #0
 8013404:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	f107 0208 	add.w	r2, r7, #8
 801340c:	4611      	mov	r1, r2
 801340e:	4618      	mov	r0, r3
 8013410:	f7ff fa72 	bl	80128f8 <validate>
 8013414:	4603      	mov	r3, r0
 8013416:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013418:	7dfb      	ldrb	r3, [r7, #23]
 801341a:	2b00      	cmp	r3, #0
 801341c:	d16d      	bne.n	80134fa <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	7d1b      	ldrb	r3, [r3, #20]
 8013422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013426:	2b00      	cmp	r3, #0
 8013428:	d067      	beq.n	80134fa <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	7d1b      	ldrb	r3, [r3, #20]
 801342e:	b25b      	sxtb	r3, r3
 8013430:	2b00      	cmp	r3, #0
 8013432:	da1a      	bge.n	801346a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013434:	68bb      	ldr	r3, [r7, #8]
 8013436:	7858      	ldrb	r0, [r3, #1]
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	6a1a      	ldr	r2, [r3, #32]
 8013442:	2301      	movs	r3, #1
 8013444:	f7fd fc9e 	bl	8010d84 <disk_write>
 8013448:	4603      	mov	r3, r0
 801344a:	2b00      	cmp	r3, #0
 801344c:	d006      	beq.n	801345c <f_sync+0x5e>
 801344e:	68bb      	ldr	r3, [r7, #8]
 8013450:	2101      	movs	r1, #1
 8013452:	4618      	mov	r0, r3
 8013454:	f7fd fdea 	bl	801102c <unlock_fs>
 8013458:	2301      	movs	r3, #1
 801345a:	e055      	b.n	8013508 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	7d1b      	ldrb	r3, [r3, #20]
 8013460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013464:	b2da      	uxtb	r2, r3
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801346a:	f7f9 ff13 	bl	800d294 <get_fattime>
 801346e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013470:	68ba      	ldr	r2, [r7, #8]
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013476:	4619      	mov	r1, r3
 8013478:	4610      	mov	r0, r2
 801347a:	f7fd ffa3 	bl	80113c4 <move_window>
 801347e:	4603      	mov	r3, r0
 8013480:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013482:	7dfb      	ldrb	r3, [r7, #23]
 8013484:	2b00      	cmp	r3, #0
 8013486:	d138      	bne.n	80134fa <f_sync+0xfc>
					dir = fp->dir_ptr;
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801348c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	330b      	adds	r3, #11
 8013492:	781a      	ldrb	r2, [r3, #0]
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	330b      	adds	r3, #11
 8013498:	f042 0220 	orr.w	r2, r2, #32
 801349c:	b2d2      	uxtb	r2, r2
 801349e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	6818      	ldr	r0, [r3, #0]
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	689b      	ldr	r3, [r3, #8]
 80134a8:	461a      	mov	r2, r3
 80134aa:	68f9      	ldr	r1, [r7, #12]
 80134ac:	f7fe fcae 	bl	8011e0c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	f103 021c 	add.w	r2, r3, #28
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	68db      	ldr	r3, [r3, #12]
 80134ba:	4619      	mov	r1, r3
 80134bc:	4610      	mov	r0, r2
 80134be:	f7fd fcf5 	bl	8010eac <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	3316      	adds	r3, #22
 80134c6:	6939      	ldr	r1, [r7, #16]
 80134c8:	4618      	mov	r0, r3
 80134ca:	f7fd fcef 	bl	8010eac <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	3312      	adds	r3, #18
 80134d2:	2100      	movs	r1, #0
 80134d4:	4618      	mov	r0, r3
 80134d6:	f7fd fcce 	bl	8010e76 <st_word>
					fs->wflag = 1;
 80134da:	68bb      	ldr	r3, [r7, #8]
 80134dc:	2201      	movs	r2, #1
 80134de:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80134e0:	68bb      	ldr	r3, [r7, #8]
 80134e2:	4618      	mov	r0, r3
 80134e4:	f7fd ff9c 	bl	8011420 <sync_fs>
 80134e8:	4603      	mov	r3, r0
 80134ea:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	7d1b      	ldrb	r3, [r3, #20]
 80134f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80134f4:	b2da      	uxtb	r2, r3
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80134fa:	68bb      	ldr	r3, [r7, #8]
 80134fc:	7dfa      	ldrb	r2, [r7, #23]
 80134fe:	4611      	mov	r1, r2
 8013500:	4618      	mov	r0, r3
 8013502:	f7fd fd93 	bl	801102c <unlock_fs>
 8013506:	7dfb      	ldrb	r3, [r7, #23]
}
 8013508:	4618      	mov	r0, r3
 801350a:	3718      	adds	r7, #24
 801350c:	46bd      	mov	sp, r7
 801350e:	bd80      	pop	{r7, pc}

08013510 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013510:	b580      	push	{r7, lr}
 8013512:	b084      	sub	sp, #16
 8013514:	af00      	add	r7, sp, #0
 8013516:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013518:	6878      	ldr	r0, [r7, #4]
 801351a:	f7ff ff70 	bl	80133fe <f_sync>
 801351e:	4603      	mov	r3, r0
 8013520:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013522:	7bfb      	ldrb	r3, [r7, #15]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d11d      	bne.n	8013564 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	f107 0208 	add.w	r2, r7, #8
 801352e:	4611      	mov	r1, r2
 8013530:	4618      	mov	r0, r3
 8013532:	f7ff f9e1 	bl	80128f8 <validate>
 8013536:	4603      	mov	r3, r0
 8013538:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801353a:	7bfb      	ldrb	r3, [r7, #15]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d111      	bne.n	8013564 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	691b      	ldr	r3, [r3, #16]
 8013544:	4618      	mov	r0, r3
 8013546:	f7fd fe99 	bl	801127c <dec_lock>
 801354a:	4603      	mov	r3, r0
 801354c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801354e:	7bfb      	ldrb	r3, [r7, #15]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d102      	bne.n	801355a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	2200      	movs	r2, #0
 8013558:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 801355a:	68bb      	ldr	r3, [r7, #8]
 801355c:	2100      	movs	r1, #0
 801355e:	4618      	mov	r0, r3
 8013560:	f7fd fd64 	bl	801102c <unlock_fs>
#endif
		}
	}
	return res;
 8013564:	7bfb      	ldrb	r3, [r7, #15]
}
 8013566:	4618      	mov	r0, r3
 8013568:	3710      	adds	r7, #16
 801356a:	46bd      	mov	sp, r7
 801356c:	bd80      	pop	{r7, pc}

0801356e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801356e:	b580      	push	{r7, lr}
 8013570:	b086      	sub	sp, #24
 8013572:	af00      	add	r7, sp, #0
 8013574:	6078      	str	r0, [r7, #4]
 8013576:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	2b00      	cmp	r3, #0
 801357c:	d101      	bne.n	8013582 <f_opendir+0x14>
 801357e:	2309      	movs	r3, #9
 8013580:	e06a      	b.n	8013658 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8013586:	f107 010c 	add.w	r1, r7, #12
 801358a:	463b      	mov	r3, r7
 801358c:	2200      	movs	r2, #0
 801358e:	4618      	mov	r0, r3
 8013590:	f7fe ff5e 	bl	8012450 <find_volume>
 8013594:	4603      	mov	r3, r0
 8013596:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013598:	7dfb      	ldrb	r3, [r7, #23]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d14f      	bne.n	801363e <f_opendir+0xd0>
		obj->fs = fs;
 801359e:	68fa      	ldr	r2, [r7, #12]
 80135a0:	693b      	ldr	r3, [r7, #16]
 80135a2:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80135a4:	683b      	ldr	r3, [r7, #0]
 80135a6:	4619      	mov	r1, r3
 80135a8:	6878      	ldr	r0, [r7, #4]
 80135aa:	f7fe fe45 	bl	8012238 <follow_path>
 80135ae:	4603      	mov	r3, r0
 80135b0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80135b2:	7dfb      	ldrb	r3, [r7, #23]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d13d      	bne.n	8013634 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80135be:	b25b      	sxtb	r3, r3
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	db12      	blt.n	80135ea <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80135c4:	693b      	ldr	r3, [r7, #16]
 80135c6:	799b      	ldrb	r3, [r3, #6]
 80135c8:	f003 0310 	and.w	r3, r3, #16
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d00a      	beq.n	80135e6 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80135d0:	68fa      	ldr	r2, [r7, #12]
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	6a1b      	ldr	r3, [r3, #32]
 80135d6:	4619      	mov	r1, r3
 80135d8:	4610      	mov	r0, r2
 80135da:	f7fe fbf8 	bl	8011dce <ld_clust>
 80135de:	4602      	mov	r2, r0
 80135e0:	693b      	ldr	r3, [r7, #16]
 80135e2:	609a      	str	r2, [r3, #8]
 80135e4:	e001      	b.n	80135ea <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80135e6:	2305      	movs	r3, #5
 80135e8:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80135ea:	7dfb      	ldrb	r3, [r7, #23]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d121      	bne.n	8013634 <f_opendir+0xc6>
				obj->id = fs->id;
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	88da      	ldrh	r2, [r3, #6]
 80135f4:	693b      	ldr	r3, [r7, #16]
 80135f6:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80135f8:	2100      	movs	r1, #0
 80135fa:	6878      	ldr	r0, [r7, #4]
 80135fc:	f7fe fa60 	bl	8011ac0 <dir_sdi>
 8013600:	4603      	mov	r3, r0
 8013602:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8013604:	7dfb      	ldrb	r3, [r7, #23]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d114      	bne.n	8013634 <f_opendir+0xc6>
					if (obj->sclust) {
 801360a:	693b      	ldr	r3, [r7, #16]
 801360c:	689b      	ldr	r3, [r3, #8]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d00d      	beq.n	801362e <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8013612:	2100      	movs	r1, #0
 8013614:	6878      	ldr	r0, [r7, #4]
 8013616:	f7fd fda3 	bl	8011160 <inc_lock>
 801361a:	4602      	mov	r2, r0
 801361c:	693b      	ldr	r3, [r7, #16]
 801361e:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8013620:	693b      	ldr	r3, [r7, #16]
 8013622:	691b      	ldr	r3, [r3, #16]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d105      	bne.n	8013634 <f_opendir+0xc6>
 8013628:	2312      	movs	r3, #18
 801362a:	75fb      	strb	r3, [r7, #23]
 801362c:	e002      	b.n	8013634 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 801362e:	693b      	ldr	r3, [r7, #16]
 8013630:	2200      	movs	r2, #0
 8013632:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013634:	7dfb      	ldrb	r3, [r7, #23]
 8013636:	2b04      	cmp	r3, #4
 8013638:	d101      	bne.n	801363e <f_opendir+0xd0>
 801363a:	2305      	movs	r3, #5
 801363c:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801363e:	7dfb      	ldrb	r3, [r7, #23]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d002      	beq.n	801364a <f_opendir+0xdc>
 8013644:	693b      	ldr	r3, [r7, #16]
 8013646:	2200      	movs	r2, #0
 8013648:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	7dfa      	ldrb	r2, [r7, #23]
 801364e:	4611      	mov	r1, r2
 8013650:	4618      	mov	r0, r3
 8013652:	f7fd fceb 	bl	801102c <unlock_fs>
 8013656:	7dfb      	ldrb	r3, [r7, #23]
}
 8013658:	4618      	mov	r0, r3
 801365a:	3718      	adds	r7, #24
 801365c:	46bd      	mov	sp, r7
 801365e:	bd80      	pop	{r7, pc}

08013660 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8013660:	b580      	push	{r7, lr}
 8013662:	b084      	sub	sp, #16
 8013664:	af00      	add	r7, sp, #0
 8013666:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	f107 0208 	add.w	r2, r7, #8
 801366e:	4611      	mov	r1, r2
 8013670:	4618      	mov	r0, r3
 8013672:	f7ff f941 	bl	80128f8 <validate>
 8013676:	4603      	mov	r3, r0
 8013678:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801367a:	7bfb      	ldrb	r3, [r7, #15]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d115      	bne.n	80136ac <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	691b      	ldr	r3, [r3, #16]
 8013684:	2b00      	cmp	r3, #0
 8013686:	d006      	beq.n	8013696 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	691b      	ldr	r3, [r3, #16]
 801368c:	4618      	mov	r0, r3
 801368e:	f7fd fdf5 	bl	801127c <dec_lock>
 8013692:	4603      	mov	r3, r0
 8013694:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8013696:	7bfb      	ldrb	r3, [r7, #15]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d102      	bne.n	80136a2 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	2200      	movs	r2, #0
 80136a0:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 80136a2:	68bb      	ldr	r3, [r7, #8]
 80136a4:	2100      	movs	r1, #0
 80136a6:	4618      	mov	r0, r3
 80136a8:	f7fd fcc0 	bl	801102c <unlock_fs>
#endif
	}
	return res;
 80136ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80136ae:	4618      	mov	r0, r3
 80136b0:	3710      	adds	r7, #16
 80136b2:	46bd      	mov	sp, r7
 80136b4:	bd80      	pop	{r7, pc}

080136b6 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80136b6:	b580      	push	{r7, lr}
 80136b8:	b084      	sub	sp, #16
 80136ba:	af00      	add	r7, sp, #0
 80136bc:	6078      	str	r0, [r7, #4]
 80136be:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	f107 0208 	add.w	r2, r7, #8
 80136c6:	4611      	mov	r1, r2
 80136c8:	4618      	mov	r0, r3
 80136ca:	f7ff f915 	bl	80128f8 <validate>
 80136ce:	4603      	mov	r3, r0
 80136d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80136d2:	7bfb      	ldrb	r3, [r7, #15]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d126      	bne.n	8013726 <f_readdir+0x70>
		if (!fno) {
 80136d8:	683b      	ldr	r3, [r7, #0]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d106      	bne.n	80136ec <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80136de:	2100      	movs	r1, #0
 80136e0:	6878      	ldr	r0, [r7, #4]
 80136e2:	f7fe f9ed 	bl	8011ac0 <dir_sdi>
 80136e6:	4603      	mov	r3, r0
 80136e8:	73fb      	strb	r3, [r7, #15]
 80136ea:	e01c      	b.n	8013726 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80136ec:	2100      	movs	r1, #0
 80136ee:	6878      	ldr	r0, [r7, #4]
 80136f0:	f7fe fbac 	bl	8011e4c <dir_read>
 80136f4:	4603      	mov	r3, r0
 80136f6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80136f8:	7bfb      	ldrb	r3, [r7, #15]
 80136fa:	2b04      	cmp	r3, #4
 80136fc:	d101      	bne.n	8013702 <f_readdir+0x4c>
 80136fe:	2300      	movs	r3, #0
 8013700:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8013702:	7bfb      	ldrb	r3, [r7, #15]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d10e      	bne.n	8013726 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8013708:	6839      	ldr	r1, [r7, #0]
 801370a:	6878      	ldr	r0, [r7, #4]
 801370c:	f7fe fca0 	bl	8012050 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8013710:	2100      	movs	r1, #0
 8013712:	6878      	ldr	r0, [r7, #4]
 8013714:	f7fe fa4f 	bl	8011bb6 <dir_next>
 8013718:	4603      	mov	r3, r0
 801371a:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801371c:	7bfb      	ldrb	r3, [r7, #15]
 801371e:	2b04      	cmp	r3, #4
 8013720:	d101      	bne.n	8013726 <f_readdir+0x70>
 8013722:	2300      	movs	r3, #0
 8013724:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8013726:	68bb      	ldr	r3, [r7, #8]
 8013728:	7bfa      	ldrb	r2, [r7, #15]
 801372a:	4611      	mov	r1, r2
 801372c:	4618      	mov	r0, r3
 801372e:	f7fd fc7d 	bl	801102c <unlock_fs>
 8013732:	7bfb      	ldrb	r3, [r7, #15]
}
 8013734:	4618      	mov	r0, r3
 8013736:	3710      	adds	r7, #16
 8013738:	46bd      	mov	sp, r7
 801373a:	bd80      	pop	{r7, pc}

0801373c <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801373c:	b580      	push	{r7, lr}
 801373e:	b090      	sub	sp, #64	; 0x40
 8013740:	af00      	add	r7, sp, #0
 8013742:	6078      	str	r0, [r7, #4]
 8013744:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8013746:	f107 010c 	add.w	r1, r7, #12
 801374a:	1d3b      	adds	r3, r7, #4
 801374c:	2200      	movs	r2, #0
 801374e:	4618      	mov	r0, r3
 8013750:	f7fe fe7e 	bl	8012450 <find_volume>
 8013754:	4603      	mov	r3, r0
 8013756:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 801375a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801375e:	2b00      	cmp	r3, #0
 8013760:	d11f      	bne.n	80137a2 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013762:	687a      	ldr	r2, [r7, #4]
 8013764:	f107 030c 	add.w	r3, r7, #12
 8013768:	4611      	mov	r1, r2
 801376a:	4618      	mov	r0, r3
 801376c:	f7fe fd64 	bl	8012238 <follow_path>
 8013770:	4603      	mov	r3, r0
 8013772:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8013776:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801377a:	2b00      	cmp	r3, #0
 801377c:	d111      	bne.n	80137a2 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 801377e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013782:	b25b      	sxtb	r3, r3
 8013784:	2b00      	cmp	r3, #0
 8013786:	da03      	bge.n	8013790 <f_stat+0x54>
				res = FR_INVALID_NAME;
 8013788:	2306      	movs	r3, #6
 801378a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801378e:	e008      	b.n	80137a2 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8013790:	683b      	ldr	r3, [r7, #0]
 8013792:	2b00      	cmp	r3, #0
 8013794:	d005      	beq.n	80137a2 <f_stat+0x66>
 8013796:	f107 030c 	add.w	r3, r7, #12
 801379a:	6839      	ldr	r1, [r7, #0]
 801379c:	4618      	mov	r0, r3
 801379e:	f7fe fc57 	bl	8012050 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80137a8:	4611      	mov	r1, r2
 80137aa:	4618      	mov	r0, r3
 80137ac:	f7fd fc3e 	bl	801102c <unlock_fs>
 80137b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80137b4:	4618      	mov	r0, r3
 80137b6:	3740      	adds	r7, #64	; 0x40
 80137b8:	46bd      	mov	sp, r7
 80137ba:	bd80      	pop	{r7, pc}

080137bc <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80137bc:	b580      	push	{r7, lr}
 80137be:	b09e      	sub	sp, #120	; 0x78
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80137c4:	2300      	movs	r3, #0
 80137c6:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80137c8:	f107 010c 	add.w	r1, r7, #12
 80137cc:	1d3b      	adds	r3, r7, #4
 80137ce:	2202      	movs	r2, #2
 80137d0:	4618      	mov	r0, r3
 80137d2:	f7fe fe3d 	bl	8012450 <find_volume>
 80137d6:	4603      	mov	r3, r0
 80137d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 80137e0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	f040 808e 	bne.w	8013906 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 80137ea:	687a      	ldr	r2, [r7, #4]
 80137ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80137f0:	4611      	mov	r1, r2
 80137f2:	4618      	mov	r0, r3
 80137f4:	f7fe fd20 	bl	8012238 <follow_path>
 80137f8:	4603      	mov	r3, r0
 80137fa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 80137fe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013802:	2b00      	cmp	r3, #0
 8013804:	d108      	bne.n	8013818 <f_unlink+0x5c>
 8013806:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801380a:	2102      	movs	r1, #2
 801380c:	4618      	mov	r0, r3
 801380e:	f7fd fc29 	bl	8011064 <chk_lock>
 8013812:	4603      	mov	r3, r0
 8013814:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8013818:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801381c:	2b00      	cmp	r3, #0
 801381e:	d172      	bne.n	8013906 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013820:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013824:	b25b      	sxtb	r3, r3
 8013826:	2b00      	cmp	r3, #0
 8013828:	da03      	bge.n	8013832 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801382a:	2306      	movs	r3, #6
 801382c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013830:	e008      	b.n	8013844 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8013832:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013836:	f003 0301 	and.w	r3, r3, #1
 801383a:	2b00      	cmp	r3, #0
 801383c:	d002      	beq.n	8013844 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 801383e:	2307      	movs	r3, #7
 8013840:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8013844:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013848:	2b00      	cmp	r3, #0
 801384a:	d134      	bne.n	80138b6 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013850:	4611      	mov	r1, r2
 8013852:	4618      	mov	r0, r3
 8013854:	f7fe fabb 	bl	8011dce <ld_clust>
 8013858:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801385a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801385e:	f003 0310 	and.w	r3, r3, #16
 8013862:	2b00      	cmp	r3, #0
 8013864:	d027      	beq.n	80138b6 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801386a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801386c:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801386e:	f107 0310 	add.w	r3, r7, #16
 8013872:	2100      	movs	r1, #0
 8013874:	4618      	mov	r0, r3
 8013876:	f7fe f923 	bl	8011ac0 <dir_sdi>
 801387a:	4603      	mov	r3, r0
 801387c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8013880:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013884:	2b00      	cmp	r3, #0
 8013886:	d116      	bne.n	80138b6 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8013888:	f107 0310 	add.w	r3, r7, #16
 801388c:	2100      	movs	r1, #0
 801388e:	4618      	mov	r0, r3
 8013890:	f7fe fadc 	bl	8011e4c <dir_read>
 8013894:	4603      	mov	r3, r0
 8013896:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801389a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d102      	bne.n	80138a8 <f_unlink+0xec>
 80138a2:	2307      	movs	r3, #7
 80138a4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80138a8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80138ac:	2b04      	cmp	r3, #4
 80138ae:	d102      	bne.n	80138b6 <f_unlink+0xfa>
 80138b0:	2300      	movs	r3, #0
 80138b2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 80138b6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d123      	bne.n	8013906 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80138be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80138c2:	4618      	mov	r0, r3
 80138c4:	f7fe fba6 	bl	8012014 <dir_remove>
 80138c8:	4603      	mov	r3, r0
 80138ca:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 80138ce:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d10c      	bne.n	80138f0 <f_unlink+0x134>
 80138d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d009      	beq.n	80138f0 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 80138dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80138e0:	2200      	movs	r2, #0
 80138e2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80138e4:	4618      	mov	r0, r3
 80138e6:	f7fd ffba 	bl	801185e <remove_chain>
 80138ea:	4603      	mov	r3, r0
 80138ec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80138f0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d106      	bne.n	8013906 <f_unlink+0x14a>
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	4618      	mov	r0, r3
 80138fc:	f7fd fd90 	bl	8011420 <sync_fs>
 8013900:	4603      	mov	r3, r0
 8013902:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 801390c:	4611      	mov	r1, r2
 801390e:	4618      	mov	r0, r3
 8013910:	f7fd fb8c 	bl	801102c <unlock_fs>
 8013914:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8013918:	4618      	mov	r0, r3
 801391a:	3778      	adds	r7, #120	; 0x78
 801391c:	46bd      	mov	sp, r7
 801391e:	bd80      	pop	{r7, pc}

08013920 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8013920:	b580      	push	{r7, lr}
 8013922:	b096      	sub	sp, #88	; 0x58
 8013924:	af00      	add	r7, sp, #0
 8013926:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013928:	f107 0108 	add.w	r1, r7, #8
 801392c:	1d3b      	adds	r3, r7, #4
 801392e:	2202      	movs	r2, #2
 8013930:	4618      	mov	r0, r3
 8013932:	f7fe fd8d 	bl	8012450 <find_volume>
 8013936:	4603      	mov	r3, r0
 8013938:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 801393c:	68bb      	ldr	r3, [r7, #8]
 801393e:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8013940:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013944:	2b00      	cmp	r3, #0
 8013946:	f040 80ec 	bne.w	8013b22 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 801394a:	687a      	ldr	r2, [r7, #4]
 801394c:	f107 030c 	add.w	r3, r7, #12
 8013950:	4611      	mov	r1, r2
 8013952:	4618      	mov	r0, r3
 8013954:	f7fe fc70 	bl	8012238 <follow_path>
 8013958:	4603      	mov	r3, r0
 801395a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801395e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013962:	2b00      	cmp	r3, #0
 8013964:	d102      	bne.n	801396c <f_mkdir+0x4c>
 8013966:	2308      	movs	r3, #8
 8013968:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 801396c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013970:	2b04      	cmp	r3, #4
 8013972:	f040 80d6 	bne.w	8013b22 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8013976:	f107 030c 	add.w	r3, r7, #12
 801397a:	2100      	movs	r1, #0
 801397c:	4618      	mov	r0, r3
 801397e:	f7fd ffd3 	bl	8011928 <create_chain>
 8013982:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8013984:	68bb      	ldr	r3, [r7, #8]
 8013986:	895b      	ldrh	r3, [r3, #10]
 8013988:	025b      	lsls	r3, r3, #9
 801398a:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 801398c:	2300      	movs	r3, #0
 801398e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8013992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013994:	2b00      	cmp	r3, #0
 8013996:	d102      	bne.n	801399e <f_mkdir+0x7e>
 8013998:	2307      	movs	r3, #7
 801399a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 801399e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80139a0:	2b01      	cmp	r3, #1
 80139a2:	d102      	bne.n	80139aa <f_mkdir+0x8a>
 80139a4:	2302      	movs	r3, #2
 80139a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80139aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80139ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139b0:	d102      	bne.n	80139b8 <f_mkdir+0x98>
 80139b2:	2301      	movs	r3, #1
 80139b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80139b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d106      	bne.n	80139ce <f_mkdir+0xae>
 80139c0:	68bb      	ldr	r3, [r7, #8]
 80139c2:	4618      	mov	r0, r3
 80139c4:	f7fd fcba 	bl	801133c <sync_window>
 80139c8:	4603      	mov	r3, r0
 80139ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 80139ce:	f7f9 fc61 	bl	800d294 <get_fattime>
 80139d2:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80139d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d16a      	bne.n	8013ab2 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 80139dc:	68bb      	ldr	r3, [r7, #8]
 80139de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80139e0:	4618      	mov	r0, r3
 80139e2:	f7fd fd8b 	bl	80114fc <clust2sect>
 80139e6:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 80139e8:	68bb      	ldr	r3, [r7, #8]
 80139ea:	3334      	adds	r3, #52	; 0x34
 80139ec:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 80139ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80139f2:	2100      	movs	r1, #0
 80139f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80139f6:	f7fd faa6 	bl	8010f46 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80139fa:	220b      	movs	r2, #11
 80139fc:	2120      	movs	r1, #32
 80139fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013a00:	f7fd faa1 	bl	8010f46 <mem_set>
					dir[DIR_Name] = '.';
 8013a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a06:	222e      	movs	r2, #46	; 0x2e
 8013a08:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8013a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a0c:	330b      	adds	r3, #11
 8013a0e:	2210      	movs	r2, #16
 8013a10:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8013a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a14:	3316      	adds	r3, #22
 8013a16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013a18:	4618      	mov	r0, r3
 8013a1a:	f7fd fa47 	bl	8010eac <st_dword>
					st_clust(fs, dir, dcl);
 8013a1e:	68bb      	ldr	r3, [r7, #8]
 8013a20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013a22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013a24:	4618      	mov	r0, r3
 8013a26:	f7fe f9f1 	bl	8011e0c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8013a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a2c:	3320      	adds	r3, #32
 8013a2e:	2220      	movs	r2, #32
 8013a30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013a32:	4618      	mov	r0, r3
 8013a34:	f7fd fa66 	bl	8010f04 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8013a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a3a:	3321      	adds	r3, #33	; 0x21
 8013a3c:	222e      	movs	r2, #46	; 0x2e
 8013a3e:	701a      	strb	r2, [r3, #0]
 8013a40:	697b      	ldr	r3, [r7, #20]
 8013a42:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8013a44:	68bb      	ldr	r3, [r7, #8]
 8013a46:	781b      	ldrb	r3, [r3, #0]
 8013a48:	2b03      	cmp	r3, #3
 8013a4a:	d106      	bne.n	8013a5a <f_mkdir+0x13a>
 8013a4c:	68bb      	ldr	r3, [r7, #8]
 8013a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013a52:	429a      	cmp	r2, r3
 8013a54:	d101      	bne.n	8013a5a <f_mkdir+0x13a>
 8013a56:	2300      	movs	r3, #0
 8013a58:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8013a5a:	68b8      	ldr	r0, [r7, #8]
 8013a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a5e:	3320      	adds	r3, #32
 8013a60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013a62:	4619      	mov	r1, r3
 8013a64:	f7fe f9d2 	bl	8011e0c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013a68:	68bb      	ldr	r3, [r7, #8]
 8013a6a:	895b      	ldrh	r3, [r3, #10]
 8013a6c:	653b      	str	r3, [r7, #80]	; 0x50
 8013a6e:	e01b      	b.n	8013aa8 <f_mkdir+0x188>
					fs->winsect = dsc++;
 8013a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a72:	1c5a      	adds	r2, r3, #1
 8013a74:	64fa      	str	r2, [r7, #76]	; 0x4c
 8013a76:	68ba      	ldr	r2, [r7, #8]
 8013a78:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 8013a7a:	68bb      	ldr	r3, [r7, #8]
 8013a7c:	2201      	movs	r2, #1
 8013a7e:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8013a80:	68bb      	ldr	r3, [r7, #8]
 8013a82:	4618      	mov	r0, r3
 8013a84:	f7fd fc5a 	bl	801133c <sync_window>
 8013a88:	4603      	mov	r3, r0
 8013a8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8013a8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d10c      	bne.n	8013ab0 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8013a96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013a9a:	2100      	movs	r1, #0
 8013a9c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013a9e:	f7fd fa52 	bl	8010f46 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013aa4:	3b01      	subs	r3, #1
 8013aa6:	653b      	str	r3, [r7, #80]	; 0x50
 8013aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d1e0      	bne.n	8013a70 <f_mkdir+0x150>
 8013aae:	e000      	b.n	8013ab2 <f_mkdir+0x192>
					if (res != FR_OK) break;
 8013ab0:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8013ab2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d107      	bne.n	8013aca <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8013aba:	f107 030c 	add.w	r3, r7, #12
 8013abe:	4618      	mov	r0, r3
 8013ac0:	f7fe fa76 	bl	8011fb0 <dir_register>
 8013ac4:	4603      	mov	r3, r0
 8013ac6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8013aca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d120      	bne.n	8013b14 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8013ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8013ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ad8:	3316      	adds	r3, #22
 8013ada:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013adc:	4618      	mov	r0, r3
 8013ade:	f7fd f9e5 	bl	8010eac <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8013ae2:	68bb      	ldr	r3, [r7, #8]
 8013ae4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013ae6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013ae8:	4618      	mov	r0, r3
 8013aea:	f7fe f98f 	bl	8011e0c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8013aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013af0:	330b      	adds	r3, #11
 8013af2:	2210      	movs	r2, #16
 8013af4:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8013af6:	68bb      	ldr	r3, [r7, #8]
 8013af8:	2201      	movs	r2, #1
 8013afa:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8013afc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d10e      	bne.n	8013b22 <f_mkdir+0x202>
					res = sync_fs(fs);
 8013b04:	68bb      	ldr	r3, [r7, #8]
 8013b06:	4618      	mov	r0, r3
 8013b08:	f7fd fc8a 	bl	8011420 <sync_fs>
 8013b0c:	4603      	mov	r3, r0
 8013b0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8013b12:	e006      	b.n	8013b22 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8013b14:	f107 030c 	add.w	r3, r7, #12
 8013b18:	2200      	movs	r2, #0
 8013b1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	f7fd fe9e 	bl	801185e <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013b22:	68bb      	ldr	r3, [r7, #8]
 8013b24:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013b28:	4611      	mov	r1, r2
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	f7fd fa7e 	bl	801102c <unlock_fs>
 8013b30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8013b34:	4618      	mov	r0, r3
 8013b36:	3758      	adds	r7, #88	; 0x58
 8013b38:	46bd      	mov	sp, r7
 8013b3a:	bd80      	pop	{r7, pc}

08013b3c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8013b3c:	b580      	push	{r7, lr}
 8013b3e:	b088      	sub	sp, #32
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	60f8      	str	r0, [r7, #12]
 8013b44:	60b9      	str	r1, [r7, #8]
 8013b46:	607a      	str	r2, [r7, #4]
	int n = 0;
 8013b48:	2300      	movs	r3, #0
 8013b4a:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8013b50:	e01b      	b.n	8013b8a <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8013b52:	f107 0310 	add.w	r3, r7, #16
 8013b56:	f107 0114 	add.w	r1, r7, #20
 8013b5a:	2201      	movs	r2, #1
 8013b5c:	6878      	ldr	r0, [r7, #4]
 8013b5e:	f7ff f93c 	bl	8012dda <f_read>
		if (rc != 1) break;
 8013b62:	693b      	ldr	r3, [r7, #16]
 8013b64:	2b01      	cmp	r3, #1
 8013b66:	d116      	bne.n	8013b96 <f_gets+0x5a>
		c = s[0];
 8013b68:	7d3b      	ldrb	r3, [r7, #20]
 8013b6a:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8013b6c:	7dfb      	ldrb	r3, [r7, #23]
 8013b6e:	2b0d      	cmp	r3, #13
 8013b70:	d100      	bne.n	8013b74 <f_gets+0x38>
 8013b72:	e00a      	b.n	8013b8a <f_gets+0x4e>
		*p++ = c;
 8013b74:	69bb      	ldr	r3, [r7, #24]
 8013b76:	1c5a      	adds	r2, r3, #1
 8013b78:	61ba      	str	r2, [r7, #24]
 8013b7a:	7dfa      	ldrb	r2, [r7, #23]
 8013b7c:	701a      	strb	r2, [r3, #0]
		n++;
 8013b7e:	69fb      	ldr	r3, [r7, #28]
 8013b80:	3301      	adds	r3, #1
 8013b82:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8013b84:	7dfb      	ldrb	r3, [r7, #23]
 8013b86:	2b0a      	cmp	r3, #10
 8013b88:	d007      	beq.n	8013b9a <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8013b8a:	68bb      	ldr	r3, [r7, #8]
 8013b8c:	3b01      	subs	r3, #1
 8013b8e:	69fa      	ldr	r2, [r7, #28]
 8013b90:	429a      	cmp	r2, r3
 8013b92:	dbde      	blt.n	8013b52 <f_gets+0x16>
 8013b94:	e002      	b.n	8013b9c <f_gets+0x60>
		if (rc != 1) break;
 8013b96:	bf00      	nop
 8013b98:	e000      	b.n	8013b9c <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8013b9a:	bf00      	nop
	}
	*p = 0;
 8013b9c:	69bb      	ldr	r3, [r7, #24]
 8013b9e:	2200      	movs	r2, #0
 8013ba0:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8013ba2:	69fb      	ldr	r3, [r7, #28]
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d001      	beq.n	8013bac <f_gets+0x70>
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	e000      	b.n	8013bae <f_gets+0x72>
 8013bac:	2300      	movs	r3, #0
}
 8013bae:	4618      	mov	r0, r3
 8013bb0:	3720      	adds	r7, #32
 8013bb2:	46bd      	mov	sp, r7
 8013bb4:	bd80      	pop	{r7, pc}

08013bb6 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8013bb6:	b580      	push	{r7, lr}
 8013bb8:	b084      	sub	sp, #16
 8013bba:	af00      	add	r7, sp, #0
 8013bbc:	6078      	str	r0, [r7, #4]
 8013bbe:	460b      	mov	r3, r1
 8013bc0:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8013bc2:	78fb      	ldrb	r3, [r7, #3]
 8013bc4:	2b0a      	cmp	r3, #10
 8013bc6:	d103      	bne.n	8013bd0 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8013bc8:	210d      	movs	r1, #13
 8013bca:	6878      	ldr	r0, [r7, #4]
 8013bcc:	f7ff fff3 	bl	8013bb6 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	685b      	ldr	r3, [r3, #4]
 8013bd4:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	db25      	blt.n	8013c28 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	1c5a      	adds	r2, r3, #1
 8013be0:	60fa      	str	r2, [r7, #12]
 8013be2:	687a      	ldr	r2, [r7, #4]
 8013be4:	4413      	add	r3, r2
 8013be6:	78fa      	ldrb	r2, [r7, #3]
 8013be8:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	2b3c      	cmp	r3, #60	; 0x3c
 8013bee:	dd12      	ble.n	8013c16 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	6818      	ldr	r0, [r3, #0]
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	f103 010c 	add.w	r1, r3, #12
 8013bfa:	68fa      	ldr	r2, [r7, #12]
 8013bfc:	f107 0308 	add.w	r3, r7, #8
 8013c00:	f7ff fa59 	bl	80130b6 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8013c04:	68ba      	ldr	r2, [r7, #8]
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	429a      	cmp	r2, r3
 8013c0a:	d101      	bne.n	8013c10 <putc_bfd+0x5a>
 8013c0c:	2300      	movs	r3, #0
 8013c0e:	e001      	b.n	8013c14 <putc_bfd+0x5e>
 8013c10:	f04f 33ff 	mov.w	r3, #4294967295
 8013c14:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	68fa      	ldr	r2, [r7, #12]
 8013c1a:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	689b      	ldr	r3, [r3, #8]
 8013c20:	1c5a      	adds	r2, r3, #1
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	609a      	str	r2, [r3, #8]
 8013c26:	e000      	b.n	8013c2a <putc_bfd+0x74>
	if (i < 0) return;
 8013c28:	bf00      	nop
}
 8013c2a:	3710      	adds	r7, #16
 8013c2c:	46bd      	mov	sp, r7
 8013c2e:	bd80      	pop	{r7, pc}

08013c30 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8013c30:	b580      	push	{r7, lr}
 8013c32:	b084      	sub	sp, #16
 8013c34:	af00      	add	r7, sp, #0
 8013c36:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	685b      	ldr	r3, [r3, #4]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	db16      	blt.n	8013c6e <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	6818      	ldr	r0, [r3, #0]
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	f103 010c 	add.w	r1, r3, #12
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	685b      	ldr	r3, [r3, #4]
 8013c4e:	461a      	mov	r2, r3
 8013c50:	f107 030c 	add.w	r3, r7, #12
 8013c54:	f7ff fa2f 	bl	80130b6 <f_write>
 8013c58:	4603      	mov	r3, r0
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d107      	bne.n	8013c6e <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	685b      	ldr	r3, [r3, #4]
 8013c62:	68fa      	ldr	r2, [r7, #12]
 8013c64:	4293      	cmp	r3, r2
 8013c66:	d102      	bne.n	8013c6e <putc_flush+0x3e>
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	689b      	ldr	r3, [r3, #8]
 8013c6c:	e001      	b.n	8013c72 <putc_flush+0x42>
	return EOF;
 8013c6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013c72:	4618      	mov	r0, r3
 8013c74:	3710      	adds	r7, #16
 8013c76:	46bd      	mov	sp, r7
 8013c78:	bd80      	pop	{r7, pc}

08013c7a <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8013c7a:	b480      	push	{r7}
 8013c7c:	b083      	sub	sp, #12
 8013c7e:	af00      	add	r7, sp, #0
 8013c80:	6078      	str	r0, [r7, #4]
 8013c82:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	683a      	ldr	r2, [r7, #0]
 8013c88:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	2200      	movs	r2, #0
 8013c8e:	605a      	str	r2, [r3, #4]
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	685a      	ldr	r2, [r3, #4]
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	609a      	str	r2, [r3, #8]
}
 8013c98:	bf00      	nop
 8013c9a:	370c      	adds	r7, #12
 8013c9c:	46bd      	mov	sp, r7
 8013c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ca2:	4770      	bx	lr

08013ca4 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8013ca4:	b40e      	push	{r1, r2, r3}
 8013ca6:	b580      	push	{r7, lr}
 8013ca8:	b0a7      	sub	sp, #156	; 0x9c
 8013caa:	af00      	add	r7, sp, #0
 8013cac:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8013cae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013cb2:	6879      	ldr	r1, [r7, #4]
 8013cb4:	4618      	mov	r0, r3
 8013cb6:	f7ff ffe0 	bl	8013c7a <putc_init>

	va_start(arp, fmt);
 8013cba:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013cbe:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 8013cc0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013cc4:	1c5a      	adds	r2, r3, #1
 8013cc6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013cca:	781b      	ldrb	r3, [r3, #0]
 8013ccc:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 8013cd0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	f000 81f2 	beq.w	80140be <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 8013cda:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013cde:	2b25      	cmp	r3, #37	; 0x25
 8013ce0:	d008      	beq.n	8013cf4 <f_printf+0x50>
			putc_bfd(&pb, c);
 8013ce2:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8013ce6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013cea:	4611      	mov	r1, r2
 8013cec:	4618      	mov	r0, r3
 8013cee:	f7ff ff62 	bl	8013bb6 <putc_bfd>
			continue;
 8013cf2:	e1e3      	b.n	80140bc <f_printf+0x418>
		}
		w = f = 0;
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8013d00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013d04:	1c5a      	adds	r2, r3, #1
 8013d06:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013d0a:	781b      	ldrb	r3, [r3, #0]
 8013d0c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8013d10:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013d14:	2b30      	cmp	r3, #48	; 0x30
 8013d16:	d10b      	bne.n	8013d30 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8013d18:	2301      	movs	r3, #1
 8013d1a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8013d1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013d22:	1c5a      	adds	r2, r3, #1
 8013d24:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013d28:	781b      	ldrb	r3, [r3, #0]
 8013d2a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8013d2e:	e024      	b.n	8013d7a <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8013d30:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013d34:	2b2d      	cmp	r3, #45	; 0x2d
 8013d36:	d120      	bne.n	8013d7a <f_printf+0xd6>
				f = 2; c = *fmt++;
 8013d38:	2302      	movs	r3, #2
 8013d3a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8013d3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013d42:	1c5a      	adds	r2, r3, #1
 8013d44:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013d48:	781b      	ldrb	r3, [r3, #0]
 8013d4a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8013d4e:	e014      	b.n	8013d7a <f_printf+0xd6>
			w = w * 10 + c - '0';
 8013d50:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8013d54:	4613      	mov	r3, r2
 8013d56:	009b      	lsls	r3, r3, #2
 8013d58:	4413      	add	r3, r2
 8013d5a:	005b      	lsls	r3, r3, #1
 8013d5c:	461a      	mov	r2, r3
 8013d5e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013d62:	4413      	add	r3, r2
 8013d64:	3b30      	subs	r3, #48	; 0x30
 8013d66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 8013d6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013d6e:	1c5a      	adds	r2, r3, #1
 8013d70:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013d74:	781b      	ldrb	r3, [r3, #0]
 8013d76:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 8013d7a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013d7e:	2b2f      	cmp	r3, #47	; 0x2f
 8013d80:	d903      	bls.n	8013d8a <f_printf+0xe6>
 8013d82:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013d86:	2b39      	cmp	r3, #57	; 0x39
 8013d88:	d9e2      	bls.n	8013d50 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8013d8a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013d8e:	2b6c      	cmp	r3, #108	; 0x6c
 8013d90:	d003      	beq.n	8013d9a <f_printf+0xf6>
 8013d92:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013d96:	2b4c      	cmp	r3, #76	; 0x4c
 8013d98:	d10d      	bne.n	8013db6 <f_printf+0x112>
			f |= 4; c = *fmt++;
 8013d9a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8013d9e:	f043 0304 	orr.w	r3, r3, #4
 8013da2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8013da6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013daa:	1c5a      	adds	r2, r3, #1
 8013dac:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013db0:	781b      	ldrb	r3, [r3, #0]
 8013db2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 8013db6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	f000 8181 	beq.w	80140c2 <f_printf+0x41e>
		d = c;
 8013dc0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013dc4:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8013dc8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013dcc:	2b60      	cmp	r3, #96	; 0x60
 8013dce:	d908      	bls.n	8013de2 <f_printf+0x13e>
 8013dd0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013dd4:	2b7a      	cmp	r3, #122	; 0x7a
 8013dd6:	d804      	bhi.n	8013de2 <f_printf+0x13e>
 8013dd8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013ddc:	3b20      	subs	r3, #32
 8013dde:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 8013de2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013de6:	3b42      	subs	r3, #66	; 0x42
 8013de8:	2b16      	cmp	r3, #22
 8013dea:	f200 8098 	bhi.w	8013f1e <f_printf+0x27a>
 8013dee:	a201      	add	r2, pc, #4	; (adr r2, 8013df4 <f_printf+0x150>)
 8013df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013df4:	08013eff 	.word	0x08013eff
 8013df8:	08013ee7 	.word	0x08013ee7
 8013dfc:	08013f0f 	.word	0x08013f0f
 8013e00:	08013f1f 	.word	0x08013f1f
 8013e04:	08013f1f 	.word	0x08013f1f
 8013e08:	08013f1f 	.word	0x08013f1f
 8013e0c:	08013f1f 	.word	0x08013f1f
 8013e10:	08013f1f 	.word	0x08013f1f
 8013e14:	08013f1f 	.word	0x08013f1f
 8013e18:	08013f1f 	.word	0x08013f1f
 8013e1c:	08013f1f 	.word	0x08013f1f
 8013e20:	08013f1f 	.word	0x08013f1f
 8013e24:	08013f1f 	.word	0x08013f1f
 8013e28:	08013f07 	.word	0x08013f07
 8013e2c:	08013f1f 	.word	0x08013f1f
 8013e30:	08013f1f 	.word	0x08013f1f
 8013e34:	08013f1f 	.word	0x08013f1f
 8013e38:	08013e51 	.word	0x08013e51
 8013e3c:	08013f1f 	.word	0x08013f1f
 8013e40:	08013f0f 	.word	0x08013f0f
 8013e44:	08013f1f 	.word	0x08013f1f
 8013e48:	08013f1f 	.word	0x08013f1f
 8013e4c:	08013f17 	.word	0x08013f17
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8013e50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013e52:	1d1a      	adds	r2, r3, #4
 8013e54:	67ba      	str	r2, [r7, #120]	; 0x78
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 8013e5a:	2300      	movs	r3, #0
 8013e5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8013e60:	e004      	b.n	8013e6c <f_printf+0x1c8>
 8013e62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013e66:	3301      	adds	r3, #1
 8013e68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8013e6c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013e6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013e72:	4413      	add	r3, r2
 8013e74:	781b      	ldrb	r3, [r3, #0]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d1f3      	bne.n	8013e62 <f_printf+0x1be>
			if (!(f & 2)) {
 8013e7a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8013e7e:	f003 0302 	and.w	r3, r3, #2
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d11a      	bne.n	8013ebc <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8013e86:	e005      	b.n	8013e94 <f_printf+0x1f0>
 8013e88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013e8c:	2120      	movs	r1, #32
 8013e8e:	4618      	mov	r0, r3
 8013e90:	f7ff fe91 	bl	8013bb6 <putc_bfd>
 8013e94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013e98:	1c5a      	adds	r2, r3, #1
 8013e9a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8013e9e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8013ea2:	429a      	cmp	r2, r3
 8013ea4:	d8f0      	bhi.n	8013e88 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8013ea6:	e009      	b.n	8013ebc <f_printf+0x218>
 8013ea8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013eaa:	1c5a      	adds	r2, r3, #1
 8013eac:	67fa      	str	r2, [r7, #124]	; 0x7c
 8013eae:	781a      	ldrb	r2, [r3, #0]
 8013eb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013eb4:	4611      	mov	r1, r2
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	f7ff fe7d 	bl	8013bb6 <putc_bfd>
 8013ebc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013ebe:	781b      	ldrb	r3, [r3, #0]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d1f1      	bne.n	8013ea8 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8013ec4:	e005      	b.n	8013ed2 <f_printf+0x22e>
 8013ec6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013eca:	2120      	movs	r1, #32
 8013ecc:	4618      	mov	r0, r3
 8013ece:	f7ff fe72 	bl	8013bb6 <putc_bfd>
 8013ed2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013ed6:	1c5a      	adds	r2, r3, #1
 8013ed8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8013edc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8013ee0:	429a      	cmp	r2, r3
 8013ee2:	d8f0      	bhi.n	8013ec6 <f_printf+0x222>
			continue;
 8013ee4:	e0ea      	b.n	80140bc <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8013ee6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013ee8:	1d1a      	adds	r2, r3, #4
 8013eea:	67ba      	str	r2, [r7, #120]	; 0x78
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	b2da      	uxtb	r2, r3
 8013ef0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013ef4:	4611      	mov	r1, r2
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	f7ff fe5d 	bl	8013bb6 <putc_bfd>
 8013efc:	e0de      	b.n	80140bc <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 8013efe:	2302      	movs	r3, #2
 8013f00:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8013f04:	e014      	b.n	8013f30 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8013f06:	2308      	movs	r3, #8
 8013f08:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8013f0c:	e010      	b.n	8013f30 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8013f0e:	230a      	movs	r3, #10
 8013f10:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8013f14:	e00c      	b.n	8013f30 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8013f16:	2310      	movs	r3, #16
 8013f18:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8013f1c:	e008      	b.n	8013f30 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8013f1e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8013f22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013f26:	4611      	mov	r1, r2
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f7ff fe44 	bl	8013bb6 <putc_bfd>
 8013f2e:	e0c5      	b.n	80140bc <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8013f30:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8013f34:	f003 0304 	and.w	r3, r3, #4
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d004      	beq.n	8013f46 <f_printf+0x2a2>
 8013f3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013f3e:	1d1a      	adds	r2, r3, #4
 8013f40:	67ba      	str	r2, [r7, #120]	; 0x78
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	e00c      	b.n	8013f60 <f_printf+0x2bc>
 8013f46:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013f4a:	2b44      	cmp	r3, #68	; 0x44
 8013f4c:	d104      	bne.n	8013f58 <f_printf+0x2b4>
 8013f4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013f50:	1d1a      	adds	r2, r3, #4
 8013f52:	67ba      	str	r2, [r7, #120]	; 0x78
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	e003      	b.n	8013f60 <f_printf+0x2bc>
 8013f58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013f5a:	1d1a      	adds	r2, r3, #4
 8013f5c:	67ba      	str	r2, [r7, #120]	; 0x78
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8013f64:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013f68:	2b44      	cmp	r3, #68	; 0x44
 8013f6a:	d10e      	bne.n	8013f8a <f_printf+0x2e6>
 8013f6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	da0a      	bge.n	8013f8a <f_printf+0x2e6>
			v = 0 - v;
 8013f74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013f78:	425b      	negs	r3, r3
 8013f7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 8013f7e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8013f82:	f043 0308 	orr.w	r3, r3, #8
 8013f86:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8013f90:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8013f94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013f98:	fbb3 f1f2 	udiv	r1, r3, r2
 8013f9c:	fb01 f202 	mul.w	r2, r1, r2
 8013fa0:	1a9b      	subs	r3, r3, r2
 8013fa2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8013fa6:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8013faa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8013fb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8013fb6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013fba:	2b09      	cmp	r3, #9
 8013fbc:	d90b      	bls.n	8013fd6 <f_printf+0x332>
 8013fbe:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013fc2:	2b78      	cmp	r3, #120	; 0x78
 8013fc4:	d101      	bne.n	8013fca <f_printf+0x326>
 8013fc6:	2227      	movs	r2, #39	; 0x27
 8013fc8:	e000      	b.n	8013fcc <f_printf+0x328>
 8013fca:	2207      	movs	r2, #7
 8013fcc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013fd0:	4413      	add	r3, r2
 8013fd2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 8013fd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013fda:	1c5a      	adds	r2, r3, #1
 8013fdc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8013fe0:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8013fe4:	3230      	adds	r2, #48	; 0x30
 8013fe6:	b2d2      	uxtb	r2, r2
 8013fe8:	3398      	adds	r3, #152	; 0x98
 8013fea:	443b      	add	r3, r7
 8013fec:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8013ff0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d003      	beq.n	8014000 <f_printf+0x35c>
 8013ff8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013ffc:	2b1f      	cmp	r3, #31
 8013ffe:	d9c7      	bls.n	8013f90 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8014000:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8014004:	f003 0308 	and.w	r3, r3, #8
 8014008:	2b00      	cmp	r3, #0
 801400a:	d009      	beq.n	8014020 <f_printf+0x37c>
 801400c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014010:	1c5a      	adds	r2, r3, #1
 8014012:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8014016:	3398      	adds	r3, #152	; 0x98
 8014018:	443b      	add	r3, r7
 801401a:	222d      	movs	r2, #45	; 0x2d
 801401c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8014020:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014024:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8014028:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801402c:	f003 0301 	and.w	r3, r3, #1
 8014030:	2b00      	cmp	r3, #0
 8014032:	d001      	beq.n	8014038 <f_printf+0x394>
 8014034:	2330      	movs	r3, #48	; 0x30
 8014036:	e000      	b.n	801403a <f_printf+0x396>
 8014038:	2320      	movs	r3, #32
 801403a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 801403e:	e007      	b.n	8014050 <f_printf+0x3ac>
 8014040:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8014044:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014048:	4611      	mov	r1, r2
 801404a:	4618      	mov	r0, r3
 801404c:	f7ff fdb3 	bl	8013bb6 <putc_bfd>
 8014050:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8014054:	f003 0302 	and.w	r3, r3, #2
 8014058:	2b00      	cmp	r3, #0
 801405a:	d108      	bne.n	801406e <f_printf+0x3ca>
 801405c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014060:	1c5a      	adds	r2, r3, #1
 8014062:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8014066:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801406a:	429a      	cmp	r2, r3
 801406c:	d8e8      	bhi.n	8014040 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 801406e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014072:	3b01      	subs	r3, #1
 8014074:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014078:	f107 020c 	add.w	r2, r7, #12
 801407c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014080:	4413      	add	r3, r2
 8014082:	781a      	ldrb	r2, [r3, #0]
 8014084:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014088:	4611      	mov	r1, r2
 801408a:	4618      	mov	r0, r3
 801408c:	f7ff fd93 	bl	8013bb6 <putc_bfd>
		} while (i);
 8014090:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014094:	2b00      	cmp	r3, #0
 8014096:	d1ea      	bne.n	801406e <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 8014098:	e007      	b.n	80140aa <f_printf+0x406>
 801409a:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 801409e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80140a2:	4611      	mov	r1, r2
 80140a4:	4618      	mov	r0, r3
 80140a6:	f7ff fd86 	bl	8013bb6 <putc_bfd>
 80140aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80140ae:	1c5a      	adds	r2, r3, #1
 80140b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80140b4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80140b8:	429a      	cmp	r2, r3
 80140ba:	d8ee      	bhi.n	801409a <f_printf+0x3f6>
		c = *fmt++;
 80140bc:	e600      	b.n	8013cc0 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 80140be:	bf00      	nop
 80140c0:	e000      	b.n	80140c4 <f_printf+0x420>
		if (!c) break;
 80140c2:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 80140c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80140c8:	4618      	mov	r0, r3
 80140ca:	f7ff fdb1 	bl	8013c30 <putc_flush>
 80140ce:	4603      	mov	r3, r0
}
 80140d0:	4618      	mov	r0, r3
 80140d2:	379c      	adds	r7, #156	; 0x9c
 80140d4:	46bd      	mov	sp, r7
 80140d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80140da:	b003      	add	sp, #12
 80140dc:	4770      	bx	lr
 80140de:	bf00      	nop

080140e0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80140e0:	b480      	push	{r7}
 80140e2:	b087      	sub	sp, #28
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	60f8      	str	r0, [r7, #12]
 80140e8:	60b9      	str	r1, [r7, #8]
 80140ea:	4613      	mov	r3, r2
 80140ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80140ee:	2301      	movs	r3, #1
 80140f0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80140f2:	2300      	movs	r3, #0
 80140f4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80140f6:	4b1f      	ldr	r3, [pc, #124]	; (8014174 <FATFS_LinkDriverEx+0x94>)
 80140f8:	7a5b      	ldrb	r3, [r3, #9]
 80140fa:	b2db      	uxtb	r3, r3
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d131      	bne.n	8014164 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014100:	4b1c      	ldr	r3, [pc, #112]	; (8014174 <FATFS_LinkDriverEx+0x94>)
 8014102:	7a5b      	ldrb	r3, [r3, #9]
 8014104:	b2db      	uxtb	r3, r3
 8014106:	461a      	mov	r2, r3
 8014108:	4b1a      	ldr	r3, [pc, #104]	; (8014174 <FATFS_LinkDriverEx+0x94>)
 801410a:	2100      	movs	r1, #0
 801410c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801410e:	4b19      	ldr	r3, [pc, #100]	; (8014174 <FATFS_LinkDriverEx+0x94>)
 8014110:	7a5b      	ldrb	r3, [r3, #9]
 8014112:	b2db      	uxtb	r3, r3
 8014114:	4a17      	ldr	r2, [pc, #92]	; (8014174 <FATFS_LinkDriverEx+0x94>)
 8014116:	009b      	lsls	r3, r3, #2
 8014118:	4413      	add	r3, r2
 801411a:	68fa      	ldr	r2, [r7, #12]
 801411c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801411e:	4b15      	ldr	r3, [pc, #84]	; (8014174 <FATFS_LinkDriverEx+0x94>)
 8014120:	7a5b      	ldrb	r3, [r3, #9]
 8014122:	b2db      	uxtb	r3, r3
 8014124:	461a      	mov	r2, r3
 8014126:	4b13      	ldr	r3, [pc, #76]	; (8014174 <FATFS_LinkDriverEx+0x94>)
 8014128:	4413      	add	r3, r2
 801412a:	79fa      	ldrb	r2, [r7, #7]
 801412c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801412e:	4b11      	ldr	r3, [pc, #68]	; (8014174 <FATFS_LinkDriverEx+0x94>)
 8014130:	7a5b      	ldrb	r3, [r3, #9]
 8014132:	b2db      	uxtb	r3, r3
 8014134:	1c5a      	adds	r2, r3, #1
 8014136:	b2d1      	uxtb	r1, r2
 8014138:	4a0e      	ldr	r2, [pc, #56]	; (8014174 <FATFS_LinkDriverEx+0x94>)
 801413a:	7251      	strb	r1, [r2, #9]
 801413c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801413e:	7dbb      	ldrb	r3, [r7, #22]
 8014140:	3330      	adds	r3, #48	; 0x30
 8014142:	b2da      	uxtb	r2, r3
 8014144:	68bb      	ldr	r3, [r7, #8]
 8014146:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014148:	68bb      	ldr	r3, [r7, #8]
 801414a:	3301      	adds	r3, #1
 801414c:	223a      	movs	r2, #58	; 0x3a
 801414e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014150:	68bb      	ldr	r3, [r7, #8]
 8014152:	3302      	adds	r3, #2
 8014154:	222f      	movs	r2, #47	; 0x2f
 8014156:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014158:	68bb      	ldr	r3, [r7, #8]
 801415a:	3303      	adds	r3, #3
 801415c:	2200      	movs	r2, #0
 801415e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014160:	2300      	movs	r3, #0
 8014162:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014164:	7dfb      	ldrb	r3, [r7, #23]
}
 8014166:	4618      	mov	r0, r3
 8014168:	371c      	adds	r7, #28
 801416a:	46bd      	mov	sp, r7
 801416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014170:	4770      	bx	lr
 8014172:	bf00      	nop
 8014174:	20003940 	.word	0x20003940

08014178 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014178:	b580      	push	{r7, lr}
 801417a:	b082      	sub	sp, #8
 801417c:	af00      	add	r7, sp, #0
 801417e:	6078      	str	r0, [r7, #4]
 8014180:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014182:	2200      	movs	r2, #0
 8014184:	6839      	ldr	r1, [r7, #0]
 8014186:	6878      	ldr	r0, [r7, #4]
 8014188:	f7ff ffaa 	bl	80140e0 <FATFS_LinkDriverEx>
 801418c:	4603      	mov	r3, r0
}
 801418e:	4618      	mov	r0, r3
 8014190:	3708      	adds	r7, #8
 8014192:	46bd      	mov	sp, r7
 8014194:	bd80      	pop	{r7, pc}

08014196 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8014196:	b580      	push	{r7, lr}
 8014198:	b086      	sub	sp, #24
 801419a:	af00      	add	r7, sp, #0
 801419c:	4603      	mov	r3, r0
 801419e:	6039      	str	r1, [r7, #0]
 80141a0:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 80141a2:	2300      	movs	r3, #0
 80141a4:	60fb      	str	r3, [r7, #12]
 80141a6:	2300      	movs	r3, #0
 80141a8:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 80141aa:	f107 030c 	add.w	r3, r7, #12
 80141ae:	2101      	movs	r1, #1
 80141b0:	4618      	mov	r0, r3
 80141b2:	f000 f8e9 	bl	8014388 <osSemaphoreCreate>
 80141b6:	4602      	mov	r2, r0
 80141b8:	683b      	ldr	r3, [r7, #0]
 80141ba:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 80141bc:	683b      	ldr	r3, [r7, #0]
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	bf14      	ite	ne
 80141c4:	2301      	movne	r3, #1
 80141c6:	2300      	moveq	r3, #0
 80141c8:	b2db      	uxtb	r3, r3
 80141ca:	617b      	str	r3, [r7, #20]

    return ret;
 80141cc:	697b      	ldr	r3, [r7, #20]
}
 80141ce:	4618      	mov	r0, r3
 80141d0:	3718      	adds	r7, #24
 80141d2:	46bd      	mov	sp, r7
 80141d4:	bd80      	pop	{r7, pc}

080141d6 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80141d6:	b580      	push	{r7, lr}
 80141d8:	b082      	sub	sp, #8
 80141da:	af00      	add	r7, sp, #0
 80141dc:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80141de:	6878      	ldr	r0, [r7, #4]
 80141e0:	f000 f988 	bl	80144f4 <osSemaphoreDelete>
#endif
    return 1;
 80141e4:	2301      	movs	r3, #1
}
 80141e6:	4618      	mov	r0, r3
 80141e8:	3708      	adds	r7, #8
 80141ea:	46bd      	mov	sp, r7
 80141ec:	bd80      	pop	{r7, pc}

080141ee <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80141ee:	b580      	push	{r7, lr}
 80141f0:	b084      	sub	sp, #16
 80141f2:	af00      	add	r7, sp, #0
 80141f4:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80141f6:	2300      	movs	r3, #0
 80141f8:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 80141fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80141fe:	6878      	ldr	r0, [r7, #4]
 8014200:	f000 f8f4 	bl	80143ec <osSemaphoreWait>
 8014204:	4603      	mov	r3, r0
 8014206:	2b00      	cmp	r3, #0
 8014208:	d101      	bne.n	801420e <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 801420a:	2301      	movs	r3, #1
 801420c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801420e:	68fb      	ldr	r3, [r7, #12]
}
 8014210:	4618      	mov	r0, r3
 8014212:	3710      	adds	r7, #16
 8014214:	46bd      	mov	sp, r7
 8014216:	bd80      	pop	{r7, pc}

08014218 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8014218:	b580      	push	{r7, lr}
 801421a:	b082      	sub	sp, #8
 801421c:	af00      	add	r7, sp, #0
 801421e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8014220:	6878      	ldr	r0, [r7, #4]
 8014222:	f000 f931 	bl	8014488 <osSemaphoreRelease>
#endif
}
 8014226:	bf00      	nop
 8014228:	3708      	adds	r7, #8
 801422a:	46bd      	mov	sp, r7
 801422c:	bd80      	pop	{r7, pc}

0801422e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801422e:	b480      	push	{r7}
 8014230:	b085      	sub	sp, #20
 8014232:	af00      	add	r7, sp, #0
 8014234:	4603      	mov	r3, r0
 8014236:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8014238:	2300      	movs	r3, #0
 801423a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801423c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014240:	2b84      	cmp	r3, #132	; 0x84
 8014242:	d005      	beq.n	8014250 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8014244:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	4413      	add	r3, r2
 801424c:	3303      	adds	r3, #3
 801424e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8014250:	68fb      	ldr	r3, [r7, #12]
}
 8014252:	4618      	mov	r0, r3
 8014254:	3714      	adds	r7, #20
 8014256:	46bd      	mov	sp, r7
 8014258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801425c:	4770      	bx	lr

0801425e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801425e:	b480      	push	{r7}
 8014260:	b083      	sub	sp, #12
 8014262:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014264:	f3ef 8305 	mrs	r3, IPSR
 8014268:	607b      	str	r3, [r7, #4]
  return(result);
 801426a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 801426c:	2b00      	cmp	r3, #0
 801426e:	bf14      	ite	ne
 8014270:	2301      	movne	r3, #1
 8014272:	2300      	moveq	r3, #0
 8014274:	b2db      	uxtb	r3, r3
}
 8014276:	4618      	mov	r0, r3
 8014278:	370c      	adds	r7, #12
 801427a:	46bd      	mov	sp, r7
 801427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014280:	4770      	bx	lr

08014282 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8014282:	b580      	push	{r7, lr}
 8014284:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8014286:	f001 fc05 	bl	8015a94 <vTaskStartScheduler>
  
  return osOK;
 801428a:	2300      	movs	r3, #0
}
 801428c:	4618      	mov	r0, r3
 801428e:	bd80      	pop	{r7, pc}

08014290 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8014290:	b580      	push	{r7, lr}
 8014292:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8014294:	f002 f832 	bl	80162fc <xTaskGetSchedulerState>
 8014298:	4603      	mov	r3, r0
 801429a:	2b01      	cmp	r3, #1
 801429c:	d101      	bne.n	80142a2 <osKernelRunning+0x12>
    return 0;
 801429e:	2300      	movs	r3, #0
 80142a0:	e000      	b.n	80142a4 <osKernelRunning+0x14>
  else
    return 1;
 80142a2:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 80142a4:	4618      	mov	r0, r3
 80142a6:	bd80      	pop	{r7, pc}

080142a8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80142a8:	b580      	push	{r7, lr}
 80142aa:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80142ac:	f7ff ffd7 	bl	801425e <inHandlerMode>
 80142b0:	4603      	mov	r3, r0
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d003      	beq.n	80142be <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80142b6:	f001 fd11 	bl	8015cdc <xTaskGetTickCountFromISR>
 80142ba:	4603      	mov	r3, r0
 80142bc:	e002      	b.n	80142c4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80142be:	f001 fcfd 	bl	8015cbc <xTaskGetTickCount>
 80142c2:	4603      	mov	r3, r0
  }
}
 80142c4:	4618      	mov	r0, r3
 80142c6:	bd80      	pop	{r7, pc}

080142c8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80142c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142ca:	b089      	sub	sp, #36	; 0x24
 80142cc:	af04      	add	r7, sp, #16
 80142ce:	6078      	str	r0, [r7, #4]
 80142d0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	695b      	ldr	r3, [r3, #20]
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d020      	beq.n	801431c <osThreadCreate+0x54>
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	699b      	ldr	r3, [r3, #24]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d01c      	beq.n	801431c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	685c      	ldr	r4, [r3, #4]
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	691e      	ldr	r6, [r3, #16]
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80142f4:	4618      	mov	r0, r3
 80142f6:	f7ff ff9a 	bl	801422e <makeFreeRtosPriority>
 80142fa:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	695b      	ldr	r3, [r3, #20]
 8014300:	687a      	ldr	r2, [r7, #4]
 8014302:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014304:	9202      	str	r2, [sp, #8]
 8014306:	9301      	str	r3, [sp, #4]
 8014308:	9100      	str	r1, [sp, #0]
 801430a:	683b      	ldr	r3, [r7, #0]
 801430c:	4632      	mov	r2, r6
 801430e:	4629      	mov	r1, r5
 8014310:	4620      	mov	r0, r4
 8014312:	f001 f9e1 	bl	80156d8 <xTaskCreateStatic>
 8014316:	4603      	mov	r3, r0
 8014318:	60fb      	str	r3, [r7, #12]
 801431a:	e01c      	b.n	8014356 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	685c      	ldr	r4, [r3, #4]
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014328:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014330:	4618      	mov	r0, r3
 8014332:	f7ff ff7c 	bl	801422e <makeFreeRtosPriority>
 8014336:	4602      	mov	r2, r0
 8014338:	f107 030c 	add.w	r3, r7, #12
 801433c:	9301      	str	r3, [sp, #4]
 801433e:	9200      	str	r2, [sp, #0]
 8014340:	683b      	ldr	r3, [r7, #0]
 8014342:	4632      	mov	r2, r6
 8014344:	4629      	mov	r1, r5
 8014346:	4620      	mov	r0, r4
 8014348:	f001 fa23 	bl	8015792 <xTaskCreate>
 801434c:	4603      	mov	r3, r0
 801434e:	2b01      	cmp	r3, #1
 8014350:	d001      	beq.n	8014356 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8014352:	2300      	movs	r3, #0
 8014354:	e000      	b.n	8014358 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8014356:	68fb      	ldr	r3, [r7, #12]
}
 8014358:	4618      	mov	r0, r3
 801435a:	3714      	adds	r7, #20
 801435c:	46bd      	mov	sp, r7
 801435e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014360 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8014360:	b580      	push	{r7, lr}
 8014362:	b084      	sub	sp, #16
 8014364:	af00      	add	r7, sp, #0
 8014366:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801436c:	68fb      	ldr	r3, [r7, #12]
 801436e:	2b00      	cmp	r3, #0
 8014370:	d001      	beq.n	8014376 <osDelay+0x16>
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	e000      	b.n	8014378 <osDelay+0x18>
 8014376:	2301      	movs	r3, #1
 8014378:	4618      	mov	r0, r3
 801437a:	f001 fb57 	bl	8015a2c <vTaskDelay>
  
  return osOK;
 801437e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8014380:	4618      	mov	r0, r3
 8014382:	3710      	adds	r7, #16
 8014384:	46bd      	mov	sp, r7
 8014386:	bd80      	pop	{r7, pc}

08014388 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8014388:	b580      	push	{r7, lr}
 801438a:	b086      	sub	sp, #24
 801438c:	af02      	add	r7, sp, #8
 801438e:	6078      	str	r0, [r7, #4]
 8014390:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	685b      	ldr	r3, [r3, #4]
 8014396:	2b00      	cmp	r3, #0
 8014398:	d00f      	beq.n	80143ba <osSemaphoreCreate+0x32>
    if (count == 1) {
 801439a:	683b      	ldr	r3, [r7, #0]
 801439c:	2b01      	cmp	r3, #1
 801439e:	d10a      	bne.n	80143b6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	685b      	ldr	r3, [r3, #4]
 80143a4:	2203      	movs	r2, #3
 80143a6:	9200      	str	r2, [sp, #0]
 80143a8:	2200      	movs	r2, #0
 80143aa:	2100      	movs	r1, #0
 80143ac:	2001      	movs	r0, #1
 80143ae:	f000 fab9 	bl	8014924 <xQueueGenericCreateStatic>
 80143b2:	4603      	mov	r3, r0
 80143b4:	e016      	b.n	80143e4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80143b6:	2300      	movs	r3, #0
 80143b8:	e014      	b.n	80143e4 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80143ba:	683b      	ldr	r3, [r7, #0]
 80143bc:	2b01      	cmp	r3, #1
 80143be:	d110      	bne.n	80143e2 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80143c0:	2203      	movs	r2, #3
 80143c2:	2100      	movs	r1, #0
 80143c4:	2001      	movs	r0, #1
 80143c6:	f000 fb25 	bl	8014a14 <xQueueGenericCreate>
 80143ca:	60f8      	str	r0, [r7, #12]
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d005      	beq.n	80143de <osSemaphoreCreate+0x56>
 80143d2:	2300      	movs	r3, #0
 80143d4:	2200      	movs	r2, #0
 80143d6:	2100      	movs	r1, #0
 80143d8:	68f8      	ldr	r0, [r7, #12]
 80143da:	f000 fb75 	bl	8014ac8 <xQueueGenericSend>
      return sema;
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	e000      	b.n	80143e4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80143e2:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80143e4:	4618      	mov	r0, r3
 80143e6:	3710      	adds	r7, #16
 80143e8:	46bd      	mov	sp, r7
 80143ea:	bd80      	pop	{r7, pc}

080143ec <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80143ec:	b580      	push	{r7, lr}
 80143ee:	b084      	sub	sp, #16
 80143f0:	af00      	add	r7, sp, #0
 80143f2:	6078      	str	r0, [r7, #4]
 80143f4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80143f6:	2300      	movs	r3, #0
 80143f8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d101      	bne.n	8014404 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8014400:	2380      	movs	r3, #128	; 0x80
 8014402:	e03a      	b.n	801447a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8014404:	2300      	movs	r3, #0
 8014406:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8014408:	683b      	ldr	r3, [r7, #0]
 801440a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801440e:	d103      	bne.n	8014418 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8014410:	f04f 33ff 	mov.w	r3, #4294967295
 8014414:	60fb      	str	r3, [r7, #12]
 8014416:	e009      	b.n	801442c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8014418:	683b      	ldr	r3, [r7, #0]
 801441a:	2b00      	cmp	r3, #0
 801441c:	d006      	beq.n	801442c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801441e:	683b      	ldr	r3, [r7, #0]
 8014420:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	2b00      	cmp	r3, #0
 8014426:	d101      	bne.n	801442c <osSemaphoreWait+0x40>
      ticks = 1;
 8014428:	2301      	movs	r3, #1
 801442a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 801442c:	f7ff ff17 	bl	801425e <inHandlerMode>
 8014430:	4603      	mov	r3, r0
 8014432:	2b00      	cmp	r3, #0
 8014434:	d017      	beq.n	8014466 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8014436:	f107 0308 	add.w	r3, r7, #8
 801443a:	461a      	mov	r2, r3
 801443c:	2100      	movs	r1, #0
 801443e:	6878      	ldr	r0, [r7, #4]
 8014440:	f000 ff54 	bl	80152ec <xQueueReceiveFromISR>
 8014444:	4603      	mov	r3, r0
 8014446:	2b01      	cmp	r3, #1
 8014448:	d001      	beq.n	801444e <osSemaphoreWait+0x62>
      return osErrorOS;
 801444a:	23ff      	movs	r3, #255	; 0xff
 801444c:	e015      	b.n	801447a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801444e:	68bb      	ldr	r3, [r7, #8]
 8014450:	2b00      	cmp	r3, #0
 8014452:	d011      	beq.n	8014478 <osSemaphoreWait+0x8c>
 8014454:	4b0b      	ldr	r3, [pc, #44]	; (8014484 <osSemaphoreWait+0x98>)
 8014456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801445a:	601a      	str	r2, [r3, #0]
 801445c:	f3bf 8f4f 	dsb	sy
 8014460:	f3bf 8f6f 	isb	sy
 8014464:	e008      	b.n	8014478 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8014466:	68f9      	ldr	r1, [r7, #12]
 8014468:	6878      	ldr	r0, [r7, #4]
 801446a:	f000 fe33 	bl	80150d4 <xQueueSemaphoreTake>
 801446e:	4603      	mov	r3, r0
 8014470:	2b01      	cmp	r3, #1
 8014472:	d001      	beq.n	8014478 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8014474:	23ff      	movs	r3, #255	; 0xff
 8014476:	e000      	b.n	801447a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8014478:	2300      	movs	r3, #0
}
 801447a:	4618      	mov	r0, r3
 801447c:	3710      	adds	r7, #16
 801447e:	46bd      	mov	sp, r7
 8014480:	bd80      	pop	{r7, pc}
 8014482:	bf00      	nop
 8014484:	e000ed04 	.word	0xe000ed04

08014488 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8014488:	b580      	push	{r7, lr}
 801448a:	b084      	sub	sp, #16
 801448c:	af00      	add	r7, sp, #0
 801448e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8014490:	2300      	movs	r3, #0
 8014492:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8014494:	2300      	movs	r3, #0
 8014496:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8014498:	f7ff fee1 	bl	801425e <inHandlerMode>
 801449c:	4603      	mov	r3, r0
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d016      	beq.n	80144d0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80144a2:	f107 0308 	add.w	r3, r7, #8
 80144a6:	4619      	mov	r1, r3
 80144a8:	6878      	ldr	r0, [r7, #4]
 80144aa:	f000 fca6 	bl	8014dfa <xQueueGiveFromISR>
 80144ae:	4603      	mov	r3, r0
 80144b0:	2b01      	cmp	r3, #1
 80144b2:	d001      	beq.n	80144b8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80144b4:	23ff      	movs	r3, #255	; 0xff
 80144b6:	e017      	b.n	80144e8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80144b8:	68bb      	ldr	r3, [r7, #8]
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d013      	beq.n	80144e6 <osSemaphoreRelease+0x5e>
 80144be:	4b0c      	ldr	r3, [pc, #48]	; (80144f0 <osSemaphoreRelease+0x68>)
 80144c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144c4:	601a      	str	r2, [r3, #0]
 80144c6:	f3bf 8f4f 	dsb	sy
 80144ca:	f3bf 8f6f 	isb	sy
 80144ce:	e00a      	b.n	80144e6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80144d0:	2300      	movs	r3, #0
 80144d2:	2200      	movs	r2, #0
 80144d4:	2100      	movs	r1, #0
 80144d6:	6878      	ldr	r0, [r7, #4]
 80144d8:	f000 faf6 	bl	8014ac8 <xQueueGenericSend>
 80144dc:	4603      	mov	r3, r0
 80144de:	2b01      	cmp	r3, #1
 80144e0:	d001      	beq.n	80144e6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80144e2:	23ff      	movs	r3, #255	; 0xff
 80144e4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80144e6:	68fb      	ldr	r3, [r7, #12]
}
 80144e8:	4618      	mov	r0, r3
 80144ea:	3710      	adds	r7, #16
 80144ec:	46bd      	mov	sp, r7
 80144ee:	bd80      	pop	{r7, pc}
 80144f0:	e000ed04 	.word	0xe000ed04

080144f4 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80144f4:	b580      	push	{r7, lr}
 80144f6:	b082      	sub	sp, #8
 80144f8:	af00      	add	r7, sp, #0
 80144fa:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80144fc:	f7ff feaf 	bl	801425e <inHandlerMode>
 8014500:	4603      	mov	r3, r0
 8014502:	2b00      	cmp	r3, #0
 8014504:	d001      	beq.n	801450a <osSemaphoreDelete+0x16>
    return osErrorISR;
 8014506:	2382      	movs	r3, #130	; 0x82
 8014508:	e003      	b.n	8014512 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 801450a:	6878      	ldr	r0, [r7, #4]
 801450c:	f000 ff6e 	bl	80153ec <vQueueDelete>

  return osOK; 
 8014510:	2300      	movs	r3, #0
}
 8014512:	4618      	mov	r0, r3
 8014514:	3708      	adds	r7, #8
 8014516:	46bd      	mov	sp, r7
 8014518:	bd80      	pop	{r7, pc}

0801451a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 801451a:	b590      	push	{r4, r7, lr}
 801451c:	b085      	sub	sp, #20
 801451e:	af02      	add	r7, sp, #8
 8014520:	6078      	str	r0, [r7, #4]
 8014522:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	689b      	ldr	r3, [r3, #8]
 8014528:	2b00      	cmp	r3, #0
 801452a:	d011      	beq.n	8014550 <osMessageCreate+0x36>
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	68db      	ldr	r3, [r3, #12]
 8014530:	2b00      	cmp	r3, #0
 8014532:	d00d      	beq.n	8014550 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	6818      	ldr	r0, [r3, #0]
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	6859      	ldr	r1, [r3, #4]
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	689a      	ldr	r2, [r3, #8]
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	68db      	ldr	r3, [r3, #12]
 8014544:	2400      	movs	r4, #0
 8014546:	9400      	str	r4, [sp, #0]
 8014548:	f000 f9ec 	bl	8014924 <xQueueGenericCreateStatic>
 801454c:	4603      	mov	r3, r0
 801454e:	e008      	b.n	8014562 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	6818      	ldr	r0, [r3, #0]
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	685b      	ldr	r3, [r3, #4]
 8014558:	2200      	movs	r2, #0
 801455a:	4619      	mov	r1, r3
 801455c:	f000 fa5a 	bl	8014a14 <xQueueGenericCreate>
 8014560:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8014562:	4618      	mov	r0, r3
 8014564:	370c      	adds	r7, #12
 8014566:	46bd      	mov	sp, r7
 8014568:	bd90      	pop	{r4, r7, pc}
	...

0801456c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 801456c:	b580      	push	{r7, lr}
 801456e:	b086      	sub	sp, #24
 8014570:	af00      	add	r7, sp, #0
 8014572:	60f8      	str	r0, [r7, #12]
 8014574:	60b9      	str	r1, [r7, #8]
 8014576:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8014578:	2300      	movs	r3, #0
 801457a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8014580:	697b      	ldr	r3, [r7, #20]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d101      	bne.n	801458a <osMessagePut+0x1e>
    ticks = 1;
 8014586:	2301      	movs	r3, #1
 8014588:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 801458a:	f7ff fe68 	bl	801425e <inHandlerMode>
 801458e:	4603      	mov	r3, r0
 8014590:	2b00      	cmp	r3, #0
 8014592:	d018      	beq.n	80145c6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8014594:	f107 0210 	add.w	r2, r7, #16
 8014598:	f107 0108 	add.w	r1, r7, #8
 801459c:	2300      	movs	r3, #0
 801459e:	68f8      	ldr	r0, [r7, #12]
 80145a0:	f000 fb90 	bl	8014cc4 <xQueueGenericSendFromISR>
 80145a4:	4603      	mov	r3, r0
 80145a6:	2b01      	cmp	r3, #1
 80145a8:	d001      	beq.n	80145ae <osMessagePut+0x42>
      return osErrorOS;
 80145aa:	23ff      	movs	r3, #255	; 0xff
 80145ac:	e018      	b.n	80145e0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80145ae:	693b      	ldr	r3, [r7, #16]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d014      	beq.n	80145de <osMessagePut+0x72>
 80145b4:	4b0c      	ldr	r3, [pc, #48]	; (80145e8 <osMessagePut+0x7c>)
 80145b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80145ba:	601a      	str	r2, [r3, #0]
 80145bc:	f3bf 8f4f 	dsb	sy
 80145c0:	f3bf 8f6f 	isb	sy
 80145c4:	e00b      	b.n	80145de <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80145c6:	f107 0108 	add.w	r1, r7, #8
 80145ca:	2300      	movs	r3, #0
 80145cc:	697a      	ldr	r2, [r7, #20]
 80145ce:	68f8      	ldr	r0, [r7, #12]
 80145d0:	f000 fa7a 	bl	8014ac8 <xQueueGenericSend>
 80145d4:	4603      	mov	r3, r0
 80145d6:	2b01      	cmp	r3, #1
 80145d8:	d001      	beq.n	80145de <osMessagePut+0x72>
      return osErrorOS;
 80145da:	23ff      	movs	r3, #255	; 0xff
 80145dc:	e000      	b.n	80145e0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80145de:	2300      	movs	r3, #0
}
 80145e0:	4618      	mov	r0, r3
 80145e2:	3718      	adds	r7, #24
 80145e4:	46bd      	mov	sp, r7
 80145e6:	bd80      	pop	{r7, pc}
 80145e8:	e000ed04 	.word	0xe000ed04

080145ec <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80145ec:	b590      	push	{r4, r7, lr}
 80145ee:	b08b      	sub	sp, #44	; 0x2c
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	60f8      	str	r0, [r7, #12]
 80145f4:	60b9      	str	r1, [r7, #8]
 80145f6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80145f8:	68bb      	ldr	r3, [r7, #8]
 80145fa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80145fc:	2300      	movs	r3, #0
 80145fe:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8014600:	68bb      	ldr	r3, [r7, #8]
 8014602:	2b00      	cmp	r3, #0
 8014604:	d10a      	bne.n	801461c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8014606:	2380      	movs	r3, #128	; 0x80
 8014608:	617b      	str	r3, [r7, #20]
    return event;
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	461c      	mov	r4, r3
 801460e:	f107 0314 	add.w	r3, r7, #20
 8014612:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014616:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801461a:	e054      	b.n	80146c6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 801461c:	2300      	movs	r3, #0
 801461e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8014620:	2300      	movs	r3, #0
 8014622:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	f1b3 3fff 	cmp.w	r3, #4294967295
 801462a:	d103      	bne.n	8014634 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 801462c:	f04f 33ff 	mov.w	r3, #4294967295
 8014630:	627b      	str	r3, [r7, #36]	; 0x24
 8014632:	e009      	b.n	8014648 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	2b00      	cmp	r3, #0
 8014638:	d006      	beq.n	8014648 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 801463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014640:	2b00      	cmp	r3, #0
 8014642:	d101      	bne.n	8014648 <osMessageGet+0x5c>
      ticks = 1;
 8014644:	2301      	movs	r3, #1
 8014646:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8014648:	f7ff fe09 	bl	801425e <inHandlerMode>
 801464c:	4603      	mov	r3, r0
 801464e:	2b00      	cmp	r3, #0
 8014650:	d01c      	beq.n	801468c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8014652:	f107 0220 	add.w	r2, r7, #32
 8014656:	f107 0314 	add.w	r3, r7, #20
 801465a:	3304      	adds	r3, #4
 801465c:	4619      	mov	r1, r3
 801465e:	68b8      	ldr	r0, [r7, #8]
 8014660:	f000 fe44 	bl	80152ec <xQueueReceiveFromISR>
 8014664:	4603      	mov	r3, r0
 8014666:	2b01      	cmp	r3, #1
 8014668:	d102      	bne.n	8014670 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 801466a:	2310      	movs	r3, #16
 801466c:	617b      	str	r3, [r7, #20]
 801466e:	e001      	b.n	8014674 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8014670:	2300      	movs	r3, #0
 8014672:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014674:	6a3b      	ldr	r3, [r7, #32]
 8014676:	2b00      	cmp	r3, #0
 8014678:	d01d      	beq.n	80146b6 <osMessageGet+0xca>
 801467a:	4b15      	ldr	r3, [pc, #84]	; (80146d0 <osMessageGet+0xe4>)
 801467c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014680:	601a      	str	r2, [r3, #0]
 8014682:	f3bf 8f4f 	dsb	sy
 8014686:	f3bf 8f6f 	isb	sy
 801468a:	e014      	b.n	80146b6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 801468c:	f107 0314 	add.w	r3, r7, #20
 8014690:	3304      	adds	r3, #4
 8014692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014694:	4619      	mov	r1, r3
 8014696:	68b8      	ldr	r0, [r7, #8]
 8014698:	f000 fc3c 	bl	8014f14 <xQueueReceive>
 801469c:	4603      	mov	r3, r0
 801469e:	2b01      	cmp	r3, #1
 80146a0:	d102      	bne.n	80146a8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80146a2:	2310      	movs	r3, #16
 80146a4:	617b      	str	r3, [r7, #20]
 80146a6:	e006      	b.n	80146b6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80146a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d101      	bne.n	80146b2 <osMessageGet+0xc6>
 80146ae:	2300      	movs	r3, #0
 80146b0:	e000      	b.n	80146b4 <osMessageGet+0xc8>
 80146b2:	2340      	movs	r3, #64	; 0x40
 80146b4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	461c      	mov	r4, r3
 80146ba:	f107 0314 	add.w	r3, r7, #20
 80146be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80146c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80146c6:	68f8      	ldr	r0, [r7, #12]
 80146c8:	372c      	adds	r7, #44	; 0x2c
 80146ca:	46bd      	mov	sp, r7
 80146cc:	bd90      	pop	{r4, r7, pc}
 80146ce:	bf00      	nop
 80146d0:	e000ed04 	.word	0xe000ed04

080146d4 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 80146d4:	b480      	push	{r7}
 80146d6:	b083      	sub	sp, #12
 80146d8:	af00      	add	r7, sp, #0
 80146da:	6078      	str	r0, [r7, #4]
 80146dc:	6039      	str	r1, [r7, #0]
  return osOK;
#else
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
 80146de:	2381      	movs	r3, #129	; 0x81
#endif
}
 80146e0:	4618      	mov	r0, r3
 80146e2:	370c      	adds	r7, #12
 80146e4:	46bd      	mov	sp, r7
 80146e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ea:	4770      	bx	lr

080146ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80146ec:	b480      	push	{r7}
 80146ee:	b083      	sub	sp, #12
 80146f0:	af00      	add	r7, sp, #0
 80146f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	f103 0208 	add.w	r2, r3, #8
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	f04f 32ff 	mov.w	r2, #4294967295
 8014704:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	f103 0208 	add.w	r2, r3, #8
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	f103 0208 	add.w	r2, r3, #8
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	2200      	movs	r2, #0
 801471e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014720:	bf00      	nop
 8014722:	370c      	adds	r7, #12
 8014724:	46bd      	mov	sp, r7
 8014726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801472a:	4770      	bx	lr

0801472c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801472c:	b480      	push	{r7}
 801472e:	b083      	sub	sp, #12
 8014730:	af00      	add	r7, sp, #0
 8014732:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	2200      	movs	r2, #0
 8014738:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801473a:	bf00      	nop
 801473c:	370c      	adds	r7, #12
 801473e:	46bd      	mov	sp, r7
 8014740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014744:	4770      	bx	lr

08014746 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014746:	b480      	push	{r7}
 8014748:	b085      	sub	sp, #20
 801474a:	af00      	add	r7, sp, #0
 801474c:	6078      	str	r0, [r7, #4]
 801474e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	685b      	ldr	r3, [r3, #4]
 8014754:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014756:	683b      	ldr	r3, [r7, #0]
 8014758:	68fa      	ldr	r2, [r7, #12]
 801475a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	689a      	ldr	r2, [r3, #8]
 8014760:	683b      	ldr	r3, [r7, #0]
 8014762:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	689b      	ldr	r3, [r3, #8]
 8014768:	683a      	ldr	r2, [r7, #0]
 801476a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	683a      	ldr	r2, [r7, #0]
 8014770:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8014772:	683b      	ldr	r3, [r7, #0]
 8014774:	687a      	ldr	r2, [r7, #4]
 8014776:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	1c5a      	adds	r2, r3, #1
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	601a      	str	r2, [r3, #0]
}
 8014782:	bf00      	nop
 8014784:	3714      	adds	r7, #20
 8014786:	46bd      	mov	sp, r7
 8014788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801478c:	4770      	bx	lr

0801478e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801478e:	b480      	push	{r7}
 8014790:	b085      	sub	sp, #20
 8014792:	af00      	add	r7, sp, #0
 8014794:	6078      	str	r0, [r7, #4]
 8014796:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014798:	683b      	ldr	r3, [r7, #0]
 801479a:	681b      	ldr	r3, [r3, #0]
 801479c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801479e:	68bb      	ldr	r3, [r7, #8]
 80147a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147a4:	d103      	bne.n	80147ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	691b      	ldr	r3, [r3, #16]
 80147aa:	60fb      	str	r3, [r7, #12]
 80147ac:	e00c      	b.n	80147c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	3308      	adds	r3, #8
 80147b2:	60fb      	str	r3, [r7, #12]
 80147b4:	e002      	b.n	80147bc <vListInsert+0x2e>
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	685b      	ldr	r3, [r3, #4]
 80147ba:	60fb      	str	r3, [r7, #12]
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	685b      	ldr	r3, [r3, #4]
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	68ba      	ldr	r2, [r7, #8]
 80147c4:	429a      	cmp	r2, r3
 80147c6:	d2f6      	bcs.n	80147b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	685a      	ldr	r2, [r3, #4]
 80147cc:	683b      	ldr	r3, [r7, #0]
 80147ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80147d0:	683b      	ldr	r3, [r7, #0]
 80147d2:	685b      	ldr	r3, [r3, #4]
 80147d4:	683a      	ldr	r2, [r7, #0]
 80147d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80147d8:	683b      	ldr	r3, [r7, #0]
 80147da:	68fa      	ldr	r2, [r7, #12]
 80147dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	683a      	ldr	r2, [r7, #0]
 80147e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80147e4:	683b      	ldr	r3, [r7, #0]
 80147e6:	687a      	ldr	r2, [r7, #4]
 80147e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	1c5a      	adds	r2, r3, #1
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	601a      	str	r2, [r3, #0]
}
 80147f4:	bf00      	nop
 80147f6:	3714      	adds	r7, #20
 80147f8:	46bd      	mov	sp, r7
 80147fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147fe:	4770      	bx	lr

08014800 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014800:	b480      	push	{r7}
 8014802:	b085      	sub	sp, #20
 8014804:	af00      	add	r7, sp, #0
 8014806:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	691b      	ldr	r3, [r3, #16]
 801480c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	685b      	ldr	r3, [r3, #4]
 8014812:	687a      	ldr	r2, [r7, #4]
 8014814:	6892      	ldr	r2, [r2, #8]
 8014816:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	689b      	ldr	r3, [r3, #8]
 801481c:	687a      	ldr	r2, [r7, #4]
 801481e:	6852      	ldr	r2, [r2, #4]
 8014820:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	685b      	ldr	r3, [r3, #4]
 8014826:	687a      	ldr	r2, [r7, #4]
 8014828:	429a      	cmp	r2, r3
 801482a:	d103      	bne.n	8014834 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	689a      	ldr	r2, [r3, #8]
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	2200      	movs	r2, #0
 8014838:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	1e5a      	subs	r2, r3, #1
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	681b      	ldr	r3, [r3, #0]
}
 8014848:	4618      	mov	r0, r3
 801484a:	3714      	adds	r7, #20
 801484c:	46bd      	mov	sp, r7
 801484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014852:	4770      	bx	lr

08014854 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8014854:	b580      	push	{r7, lr}
 8014856:	b084      	sub	sp, #16
 8014858:	af00      	add	r7, sp, #0
 801485a:	6078      	str	r0, [r7, #4]
 801485c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	2b00      	cmp	r3, #0
 8014866:	d10a      	bne.n	801487e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014868:	f04f 0350 	mov.w	r3, #80	; 0x50
 801486c:	f383 8811 	msr	BASEPRI, r3
 8014870:	f3bf 8f6f 	isb	sy
 8014874:	f3bf 8f4f 	dsb	sy
 8014878:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801487a:	bf00      	nop
 801487c:	e7fe      	b.n	801487c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801487e:	f002 f889 	bl	8016994 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	681a      	ldr	r2, [r3, #0]
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801488a:	68f9      	ldr	r1, [r7, #12]
 801488c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801488e:	fb01 f303 	mul.w	r3, r1, r3
 8014892:	441a      	add	r2, r3
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	2200      	movs	r2, #0
 801489c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	681a      	ldr	r2, [r3, #0]
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	681a      	ldr	r2, [r3, #0]
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80148ae:	3b01      	subs	r3, #1
 80148b0:	68f9      	ldr	r1, [r7, #12]
 80148b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80148b4:	fb01 f303 	mul.w	r3, r1, r3
 80148b8:	441a      	add	r2, r3
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	22ff      	movs	r2, #255	; 0xff
 80148c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	22ff      	movs	r2, #255	; 0xff
 80148ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80148ce:	683b      	ldr	r3, [r7, #0]
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d114      	bne.n	80148fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	691b      	ldr	r3, [r3, #16]
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d01a      	beq.n	8014912 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	3310      	adds	r3, #16
 80148e0:	4618      	mov	r0, r3
 80148e2:	f001 fb4b 	bl	8015f7c <xTaskRemoveFromEventList>
 80148e6:	4603      	mov	r3, r0
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d012      	beq.n	8014912 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80148ec:	4b0c      	ldr	r3, [pc, #48]	; (8014920 <xQueueGenericReset+0xcc>)
 80148ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80148f2:	601a      	str	r2, [r3, #0]
 80148f4:	f3bf 8f4f 	dsb	sy
 80148f8:	f3bf 8f6f 	isb	sy
 80148fc:	e009      	b.n	8014912 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	3310      	adds	r3, #16
 8014902:	4618      	mov	r0, r3
 8014904:	f7ff fef2 	bl	80146ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	3324      	adds	r3, #36	; 0x24
 801490c:	4618      	mov	r0, r3
 801490e:	f7ff feed 	bl	80146ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8014912:	f002 f86f 	bl	80169f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8014916:	2301      	movs	r3, #1
}
 8014918:	4618      	mov	r0, r3
 801491a:	3710      	adds	r7, #16
 801491c:	46bd      	mov	sp, r7
 801491e:	bd80      	pop	{r7, pc}
 8014920:	e000ed04 	.word	0xe000ed04

08014924 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8014924:	b580      	push	{r7, lr}
 8014926:	b08e      	sub	sp, #56	; 0x38
 8014928:	af02      	add	r7, sp, #8
 801492a:	60f8      	str	r0, [r7, #12]
 801492c:	60b9      	str	r1, [r7, #8]
 801492e:	607a      	str	r2, [r7, #4]
 8014930:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	2b00      	cmp	r3, #0
 8014936:	d10a      	bne.n	801494e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8014938:	f04f 0350 	mov.w	r3, #80	; 0x50
 801493c:	f383 8811 	msr	BASEPRI, r3
 8014940:	f3bf 8f6f 	isb	sy
 8014944:	f3bf 8f4f 	dsb	sy
 8014948:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801494a:	bf00      	nop
 801494c:	e7fe      	b.n	801494c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801494e:	683b      	ldr	r3, [r7, #0]
 8014950:	2b00      	cmp	r3, #0
 8014952:	d10a      	bne.n	801496a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8014954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014958:	f383 8811 	msr	BASEPRI, r3
 801495c:	f3bf 8f6f 	isb	sy
 8014960:	f3bf 8f4f 	dsb	sy
 8014964:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014966:	bf00      	nop
 8014968:	e7fe      	b.n	8014968 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	2b00      	cmp	r3, #0
 801496e:	d002      	beq.n	8014976 <xQueueGenericCreateStatic+0x52>
 8014970:	68bb      	ldr	r3, [r7, #8]
 8014972:	2b00      	cmp	r3, #0
 8014974:	d001      	beq.n	801497a <xQueueGenericCreateStatic+0x56>
 8014976:	2301      	movs	r3, #1
 8014978:	e000      	b.n	801497c <xQueueGenericCreateStatic+0x58>
 801497a:	2300      	movs	r3, #0
 801497c:	2b00      	cmp	r3, #0
 801497e:	d10a      	bne.n	8014996 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8014980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014984:	f383 8811 	msr	BASEPRI, r3
 8014988:	f3bf 8f6f 	isb	sy
 801498c:	f3bf 8f4f 	dsb	sy
 8014990:	623b      	str	r3, [r7, #32]
}
 8014992:	bf00      	nop
 8014994:	e7fe      	b.n	8014994 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	2b00      	cmp	r3, #0
 801499a:	d102      	bne.n	80149a2 <xQueueGenericCreateStatic+0x7e>
 801499c:	68bb      	ldr	r3, [r7, #8]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d101      	bne.n	80149a6 <xQueueGenericCreateStatic+0x82>
 80149a2:	2301      	movs	r3, #1
 80149a4:	e000      	b.n	80149a8 <xQueueGenericCreateStatic+0x84>
 80149a6:	2300      	movs	r3, #0
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d10a      	bne.n	80149c2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80149ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149b0:	f383 8811 	msr	BASEPRI, r3
 80149b4:	f3bf 8f6f 	isb	sy
 80149b8:	f3bf 8f4f 	dsb	sy
 80149bc:	61fb      	str	r3, [r7, #28]
}
 80149be:	bf00      	nop
 80149c0:	e7fe      	b.n	80149c0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80149c2:	2348      	movs	r3, #72	; 0x48
 80149c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80149c6:	697b      	ldr	r3, [r7, #20]
 80149c8:	2b48      	cmp	r3, #72	; 0x48
 80149ca:	d00a      	beq.n	80149e2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80149cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149d0:	f383 8811 	msr	BASEPRI, r3
 80149d4:	f3bf 8f6f 	isb	sy
 80149d8:	f3bf 8f4f 	dsb	sy
 80149dc:	61bb      	str	r3, [r7, #24]
}
 80149de:	bf00      	nop
 80149e0:	e7fe      	b.n	80149e0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80149e2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80149e4:	683b      	ldr	r3, [r7, #0]
 80149e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80149e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d00d      	beq.n	8014a0a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80149ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149f0:	2201      	movs	r2, #1
 80149f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80149f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80149fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149fc:	9300      	str	r3, [sp, #0]
 80149fe:	4613      	mov	r3, r2
 8014a00:	687a      	ldr	r2, [r7, #4]
 8014a02:	68b9      	ldr	r1, [r7, #8]
 8014a04:	68f8      	ldr	r0, [r7, #12]
 8014a06:	f000 f83f 	bl	8014a88 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	3730      	adds	r7, #48	; 0x30
 8014a10:	46bd      	mov	sp, r7
 8014a12:	bd80      	pop	{r7, pc}

08014a14 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8014a14:	b580      	push	{r7, lr}
 8014a16:	b08a      	sub	sp, #40	; 0x28
 8014a18:	af02      	add	r7, sp, #8
 8014a1a:	60f8      	str	r0, [r7, #12]
 8014a1c:	60b9      	str	r1, [r7, #8]
 8014a1e:	4613      	mov	r3, r2
 8014a20:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d10a      	bne.n	8014a3e <xQueueGenericCreate+0x2a>
	__asm volatile
 8014a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a2c:	f383 8811 	msr	BASEPRI, r3
 8014a30:	f3bf 8f6f 	isb	sy
 8014a34:	f3bf 8f4f 	dsb	sy
 8014a38:	613b      	str	r3, [r7, #16]
}
 8014a3a:	bf00      	nop
 8014a3c:	e7fe      	b.n	8014a3c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	68ba      	ldr	r2, [r7, #8]
 8014a42:	fb02 f303 	mul.w	r3, r2, r3
 8014a46:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014a48:	69fb      	ldr	r3, [r7, #28]
 8014a4a:	3348      	adds	r3, #72	; 0x48
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	f002 f8c3 	bl	8016bd8 <pvPortMalloc>
 8014a52:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014a54:	69bb      	ldr	r3, [r7, #24]
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d011      	beq.n	8014a7e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8014a5a:	69bb      	ldr	r3, [r7, #24]
 8014a5c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014a5e:	697b      	ldr	r3, [r7, #20]
 8014a60:	3348      	adds	r3, #72	; 0x48
 8014a62:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014a64:	69bb      	ldr	r3, [r7, #24]
 8014a66:	2200      	movs	r2, #0
 8014a68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014a6c:	79fa      	ldrb	r2, [r7, #7]
 8014a6e:	69bb      	ldr	r3, [r7, #24]
 8014a70:	9300      	str	r3, [sp, #0]
 8014a72:	4613      	mov	r3, r2
 8014a74:	697a      	ldr	r2, [r7, #20]
 8014a76:	68b9      	ldr	r1, [r7, #8]
 8014a78:	68f8      	ldr	r0, [r7, #12]
 8014a7a:	f000 f805 	bl	8014a88 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014a7e:	69bb      	ldr	r3, [r7, #24]
	}
 8014a80:	4618      	mov	r0, r3
 8014a82:	3720      	adds	r7, #32
 8014a84:	46bd      	mov	sp, r7
 8014a86:	bd80      	pop	{r7, pc}

08014a88 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8014a88:	b580      	push	{r7, lr}
 8014a8a:	b084      	sub	sp, #16
 8014a8c:	af00      	add	r7, sp, #0
 8014a8e:	60f8      	str	r0, [r7, #12]
 8014a90:	60b9      	str	r1, [r7, #8]
 8014a92:	607a      	str	r2, [r7, #4]
 8014a94:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8014a96:	68bb      	ldr	r3, [r7, #8]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d103      	bne.n	8014aa4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014a9c:	69bb      	ldr	r3, [r7, #24]
 8014a9e:	69ba      	ldr	r2, [r7, #24]
 8014aa0:	601a      	str	r2, [r3, #0]
 8014aa2:	e002      	b.n	8014aaa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014aa4:	69bb      	ldr	r3, [r7, #24]
 8014aa6:	687a      	ldr	r2, [r7, #4]
 8014aa8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8014aaa:	69bb      	ldr	r3, [r7, #24]
 8014aac:	68fa      	ldr	r2, [r7, #12]
 8014aae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014ab0:	69bb      	ldr	r3, [r7, #24]
 8014ab2:	68ba      	ldr	r2, [r7, #8]
 8014ab4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014ab6:	2101      	movs	r1, #1
 8014ab8:	69b8      	ldr	r0, [r7, #24]
 8014aba:	f7ff fecb 	bl	8014854 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8014abe:	bf00      	nop
 8014ac0:	3710      	adds	r7, #16
 8014ac2:	46bd      	mov	sp, r7
 8014ac4:	bd80      	pop	{r7, pc}
	...

08014ac8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b08e      	sub	sp, #56	; 0x38
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	60f8      	str	r0, [r7, #12]
 8014ad0:	60b9      	str	r1, [r7, #8]
 8014ad2:	607a      	str	r2, [r7, #4]
 8014ad4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014ad6:	2300      	movs	r3, #0
 8014ad8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d10a      	bne.n	8014afa <xQueueGenericSend+0x32>
	__asm volatile
 8014ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ae8:	f383 8811 	msr	BASEPRI, r3
 8014aec:	f3bf 8f6f 	isb	sy
 8014af0:	f3bf 8f4f 	dsb	sy
 8014af4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014af6:	bf00      	nop
 8014af8:	e7fe      	b.n	8014af8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014afa:	68bb      	ldr	r3, [r7, #8]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d103      	bne.n	8014b08 <xQueueGenericSend+0x40>
 8014b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d101      	bne.n	8014b0c <xQueueGenericSend+0x44>
 8014b08:	2301      	movs	r3, #1
 8014b0a:	e000      	b.n	8014b0e <xQueueGenericSend+0x46>
 8014b0c:	2300      	movs	r3, #0
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d10a      	bne.n	8014b28 <xQueueGenericSend+0x60>
	__asm volatile
 8014b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b16:	f383 8811 	msr	BASEPRI, r3
 8014b1a:	f3bf 8f6f 	isb	sy
 8014b1e:	f3bf 8f4f 	dsb	sy
 8014b22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014b24:	bf00      	nop
 8014b26:	e7fe      	b.n	8014b26 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014b28:	683b      	ldr	r3, [r7, #0]
 8014b2a:	2b02      	cmp	r3, #2
 8014b2c:	d103      	bne.n	8014b36 <xQueueGenericSend+0x6e>
 8014b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014b32:	2b01      	cmp	r3, #1
 8014b34:	d101      	bne.n	8014b3a <xQueueGenericSend+0x72>
 8014b36:	2301      	movs	r3, #1
 8014b38:	e000      	b.n	8014b3c <xQueueGenericSend+0x74>
 8014b3a:	2300      	movs	r3, #0
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d10a      	bne.n	8014b56 <xQueueGenericSend+0x8e>
	__asm volatile
 8014b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b44:	f383 8811 	msr	BASEPRI, r3
 8014b48:	f3bf 8f6f 	isb	sy
 8014b4c:	f3bf 8f4f 	dsb	sy
 8014b50:	623b      	str	r3, [r7, #32]
}
 8014b52:	bf00      	nop
 8014b54:	e7fe      	b.n	8014b54 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014b56:	f001 fbd1 	bl	80162fc <xTaskGetSchedulerState>
 8014b5a:	4603      	mov	r3, r0
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d102      	bne.n	8014b66 <xQueueGenericSend+0x9e>
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d101      	bne.n	8014b6a <xQueueGenericSend+0xa2>
 8014b66:	2301      	movs	r3, #1
 8014b68:	e000      	b.n	8014b6c <xQueueGenericSend+0xa4>
 8014b6a:	2300      	movs	r3, #0
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d10a      	bne.n	8014b86 <xQueueGenericSend+0xbe>
	__asm volatile
 8014b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b74:	f383 8811 	msr	BASEPRI, r3
 8014b78:	f3bf 8f6f 	isb	sy
 8014b7c:	f3bf 8f4f 	dsb	sy
 8014b80:	61fb      	str	r3, [r7, #28]
}
 8014b82:	bf00      	nop
 8014b84:	e7fe      	b.n	8014b84 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014b86:	f001 ff05 	bl	8016994 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014b92:	429a      	cmp	r2, r3
 8014b94:	d302      	bcc.n	8014b9c <xQueueGenericSend+0xd4>
 8014b96:	683b      	ldr	r3, [r7, #0]
 8014b98:	2b02      	cmp	r3, #2
 8014b9a:	d129      	bne.n	8014bf0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014b9c:	683a      	ldr	r2, [r7, #0]
 8014b9e:	68b9      	ldr	r1, [r7, #8]
 8014ba0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014ba2:	f000 fc5e 	bl	8015462 <prvCopyDataToQueue>
 8014ba6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d010      	beq.n	8014bd2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bb2:	3324      	adds	r3, #36	; 0x24
 8014bb4:	4618      	mov	r0, r3
 8014bb6:	f001 f9e1 	bl	8015f7c <xTaskRemoveFromEventList>
 8014bba:	4603      	mov	r3, r0
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d013      	beq.n	8014be8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014bc0:	4b3f      	ldr	r3, [pc, #252]	; (8014cc0 <xQueueGenericSend+0x1f8>)
 8014bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014bc6:	601a      	str	r2, [r3, #0]
 8014bc8:	f3bf 8f4f 	dsb	sy
 8014bcc:	f3bf 8f6f 	isb	sy
 8014bd0:	e00a      	b.n	8014be8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d007      	beq.n	8014be8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014bd8:	4b39      	ldr	r3, [pc, #228]	; (8014cc0 <xQueueGenericSend+0x1f8>)
 8014bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014bde:	601a      	str	r2, [r3, #0]
 8014be0:	f3bf 8f4f 	dsb	sy
 8014be4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014be8:	f001 ff04 	bl	80169f4 <vPortExitCritical>
				return pdPASS;
 8014bec:	2301      	movs	r3, #1
 8014bee:	e063      	b.n	8014cb8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d103      	bne.n	8014bfe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014bf6:	f001 fefd 	bl	80169f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8014bfa:	2300      	movs	r3, #0
 8014bfc:	e05c      	b.n	8014cb8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d106      	bne.n	8014c12 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014c04:	f107 0314 	add.w	r3, r7, #20
 8014c08:	4618      	mov	r0, r3
 8014c0a:	f001 fa19 	bl	8016040 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014c0e:	2301      	movs	r3, #1
 8014c10:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014c12:	f001 feef 	bl	80169f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014c16:	f000 ffa7 	bl	8015b68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014c1a:	f001 febb 	bl	8016994 <vPortEnterCritical>
 8014c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014c24:	b25b      	sxtb	r3, r3
 8014c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c2a:	d103      	bne.n	8014c34 <xQueueGenericSend+0x16c>
 8014c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c2e:	2200      	movs	r2, #0
 8014c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014c3a:	b25b      	sxtb	r3, r3
 8014c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c40:	d103      	bne.n	8014c4a <xQueueGenericSend+0x182>
 8014c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c44:	2200      	movs	r2, #0
 8014c46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014c4a:	f001 fed3 	bl	80169f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014c4e:	1d3a      	adds	r2, r7, #4
 8014c50:	f107 0314 	add.w	r3, r7, #20
 8014c54:	4611      	mov	r1, r2
 8014c56:	4618      	mov	r0, r3
 8014c58:	f001 fa08 	bl	801606c <xTaskCheckForTimeOut>
 8014c5c:	4603      	mov	r3, r0
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d124      	bne.n	8014cac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014c62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014c64:	f000 fcf5 	bl	8015652 <prvIsQueueFull>
 8014c68:	4603      	mov	r3, r0
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d018      	beq.n	8014ca0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c70:	3310      	adds	r3, #16
 8014c72:	687a      	ldr	r2, [r7, #4]
 8014c74:	4611      	mov	r1, r2
 8014c76:	4618      	mov	r0, r3
 8014c78:	f001 f95c 	bl	8015f34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014c7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014c7e:	f000 fc80 	bl	8015582 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8014c82:	f000 ff7f 	bl	8015b84 <xTaskResumeAll>
 8014c86:	4603      	mov	r3, r0
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	f47f af7c 	bne.w	8014b86 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8014c8e:	4b0c      	ldr	r3, [pc, #48]	; (8014cc0 <xQueueGenericSend+0x1f8>)
 8014c90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014c94:	601a      	str	r2, [r3, #0]
 8014c96:	f3bf 8f4f 	dsb	sy
 8014c9a:	f3bf 8f6f 	isb	sy
 8014c9e:	e772      	b.n	8014b86 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014ca0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014ca2:	f000 fc6e 	bl	8015582 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014ca6:	f000 ff6d 	bl	8015b84 <xTaskResumeAll>
 8014caa:	e76c      	b.n	8014b86 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014cac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014cae:	f000 fc68 	bl	8015582 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014cb2:	f000 ff67 	bl	8015b84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8014cb6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8014cb8:	4618      	mov	r0, r3
 8014cba:	3738      	adds	r7, #56	; 0x38
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	bd80      	pop	{r7, pc}
 8014cc0:	e000ed04 	.word	0xe000ed04

08014cc4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8014cc4:	b580      	push	{r7, lr}
 8014cc6:	b090      	sub	sp, #64	; 0x40
 8014cc8:	af00      	add	r7, sp, #0
 8014cca:	60f8      	str	r0, [r7, #12]
 8014ccc:	60b9      	str	r1, [r7, #8]
 8014cce:	607a      	str	r2, [r7, #4]
 8014cd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8014cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d10a      	bne.n	8014cf2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8014cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ce0:	f383 8811 	msr	BASEPRI, r3
 8014ce4:	f3bf 8f6f 	isb	sy
 8014ce8:	f3bf 8f4f 	dsb	sy
 8014cec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014cee:	bf00      	nop
 8014cf0:	e7fe      	b.n	8014cf0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014cf2:	68bb      	ldr	r3, [r7, #8]
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d103      	bne.n	8014d00 <xQueueGenericSendFromISR+0x3c>
 8014cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d101      	bne.n	8014d04 <xQueueGenericSendFromISR+0x40>
 8014d00:	2301      	movs	r3, #1
 8014d02:	e000      	b.n	8014d06 <xQueueGenericSendFromISR+0x42>
 8014d04:	2300      	movs	r3, #0
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d10a      	bne.n	8014d20 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8014d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d0e:	f383 8811 	msr	BASEPRI, r3
 8014d12:	f3bf 8f6f 	isb	sy
 8014d16:	f3bf 8f4f 	dsb	sy
 8014d1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014d1c:	bf00      	nop
 8014d1e:	e7fe      	b.n	8014d1e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014d20:	683b      	ldr	r3, [r7, #0]
 8014d22:	2b02      	cmp	r3, #2
 8014d24:	d103      	bne.n	8014d2e <xQueueGenericSendFromISR+0x6a>
 8014d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014d2a:	2b01      	cmp	r3, #1
 8014d2c:	d101      	bne.n	8014d32 <xQueueGenericSendFromISR+0x6e>
 8014d2e:	2301      	movs	r3, #1
 8014d30:	e000      	b.n	8014d34 <xQueueGenericSendFromISR+0x70>
 8014d32:	2300      	movs	r3, #0
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d10a      	bne.n	8014d4e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8014d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d3c:	f383 8811 	msr	BASEPRI, r3
 8014d40:	f3bf 8f6f 	isb	sy
 8014d44:	f3bf 8f4f 	dsb	sy
 8014d48:	623b      	str	r3, [r7, #32]
}
 8014d4a:	bf00      	nop
 8014d4c:	e7fe      	b.n	8014d4c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014d4e:	f001 ff03 	bl	8016b58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8014d52:	f3ef 8211 	mrs	r2, BASEPRI
 8014d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d5a:	f383 8811 	msr	BASEPRI, r3
 8014d5e:	f3bf 8f6f 	isb	sy
 8014d62:	f3bf 8f4f 	dsb	sy
 8014d66:	61fa      	str	r2, [r7, #28]
 8014d68:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8014d6a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014d6c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014d76:	429a      	cmp	r2, r3
 8014d78:	d302      	bcc.n	8014d80 <xQueueGenericSendFromISR+0xbc>
 8014d7a:	683b      	ldr	r3, [r7, #0]
 8014d7c:	2b02      	cmp	r3, #2
 8014d7e:	d12f      	bne.n	8014de0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014d86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014d90:	683a      	ldr	r2, [r7, #0]
 8014d92:	68b9      	ldr	r1, [r7, #8]
 8014d94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014d96:	f000 fb64 	bl	8015462 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014d9a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8014d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014da2:	d112      	bne.n	8014dca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d016      	beq.n	8014dda <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dae:	3324      	adds	r3, #36	; 0x24
 8014db0:	4618      	mov	r0, r3
 8014db2:	f001 f8e3 	bl	8015f7c <xTaskRemoveFromEventList>
 8014db6:	4603      	mov	r3, r0
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d00e      	beq.n	8014dda <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d00b      	beq.n	8014dda <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	2201      	movs	r2, #1
 8014dc6:	601a      	str	r2, [r3, #0]
 8014dc8:	e007      	b.n	8014dda <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014dca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014dce:	3301      	adds	r3, #1
 8014dd0:	b2db      	uxtb	r3, r3
 8014dd2:	b25a      	sxtb	r2, r3
 8014dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8014dda:	2301      	movs	r3, #1
 8014ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8014dde:	e001      	b.n	8014de4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014de0:	2300      	movs	r3, #0
 8014de2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014de6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8014de8:	697b      	ldr	r3, [r7, #20]
 8014dea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8014dee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8014df2:	4618      	mov	r0, r3
 8014df4:	3740      	adds	r7, #64	; 0x40
 8014df6:	46bd      	mov	sp, r7
 8014df8:	bd80      	pop	{r7, pc}

08014dfa <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014dfa:	b580      	push	{r7, lr}
 8014dfc:	b08e      	sub	sp, #56	; 0x38
 8014dfe:	af00      	add	r7, sp, #0
 8014e00:	6078      	str	r0, [r7, #4]
 8014e02:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8014e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d10a      	bne.n	8014e24 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8014e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e12:	f383 8811 	msr	BASEPRI, r3
 8014e16:	f3bf 8f6f 	isb	sy
 8014e1a:	f3bf 8f4f 	dsb	sy
 8014e1e:	623b      	str	r3, [r7, #32]
}
 8014e20:	bf00      	nop
 8014e22:	e7fe      	b.n	8014e22 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d00a      	beq.n	8014e42 <xQueueGiveFromISR+0x48>
	__asm volatile
 8014e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e30:	f383 8811 	msr	BASEPRI, r3
 8014e34:	f3bf 8f6f 	isb	sy
 8014e38:	f3bf 8f4f 	dsb	sy
 8014e3c:	61fb      	str	r3, [r7, #28]
}
 8014e3e:	bf00      	nop
 8014e40:	e7fe      	b.n	8014e40 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8014e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d103      	bne.n	8014e52 <xQueueGiveFromISR+0x58>
 8014e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e4c:	689b      	ldr	r3, [r3, #8]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d101      	bne.n	8014e56 <xQueueGiveFromISR+0x5c>
 8014e52:	2301      	movs	r3, #1
 8014e54:	e000      	b.n	8014e58 <xQueueGiveFromISR+0x5e>
 8014e56:	2300      	movs	r3, #0
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d10a      	bne.n	8014e72 <xQueueGiveFromISR+0x78>
	__asm volatile
 8014e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e60:	f383 8811 	msr	BASEPRI, r3
 8014e64:	f3bf 8f6f 	isb	sy
 8014e68:	f3bf 8f4f 	dsb	sy
 8014e6c:	61bb      	str	r3, [r7, #24]
}
 8014e6e:	bf00      	nop
 8014e70:	e7fe      	b.n	8014e70 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014e72:	f001 fe71 	bl	8016b58 <vPortValidateInterruptPriority>
	__asm volatile
 8014e76:	f3ef 8211 	mrs	r2, BASEPRI
 8014e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e7e:	f383 8811 	msr	BASEPRI, r3
 8014e82:	f3bf 8f6f 	isb	sy
 8014e86:	f3bf 8f4f 	dsb	sy
 8014e8a:	617a      	str	r2, [r7, #20]
 8014e8c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8014e8e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014e90:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e96:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8014e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014e9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014e9e:	429a      	cmp	r2, r3
 8014ea0:	d22b      	bcs.n	8014efa <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ea4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014ea8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014eae:	1c5a      	adds	r2, r3, #1
 8014eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014eb2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014eb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ebc:	d112      	bne.n	8014ee4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d016      	beq.n	8014ef4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ec8:	3324      	adds	r3, #36	; 0x24
 8014eca:	4618      	mov	r0, r3
 8014ecc:	f001 f856 	bl	8015f7c <xTaskRemoveFromEventList>
 8014ed0:	4603      	mov	r3, r0
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d00e      	beq.n	8014ef4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014ed6:	683b      	ldr	r3, [r7, #0]
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d00b      	beq.n	8014ef4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014edc:	683b      	ldr	r3, [r7, #0]
 8014ede:	2201      	movs	r2, #1
 8014ee0:	601a      	str	r2, [r3, #0]
 8014ee2:	e007      	b.n	8014ef4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014ee8:	3301      	adds	r3, #1
 8014eea:	b2db      	uxtb	r3, r3
 8014eec:	b25a      	sxtb	r2, r3
 8014eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8014ef4:	2301      	movs	r3, #1
 8014ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8014ef8:	e001      	b.n	8014efe <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014efa:	2300      	movs	r3, #0
 8014efc:	637b      	str	r3, [r7, #52]	; 0x34
 8014efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f00:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	f383 8811 	msr	BASEPRI, r3
}
 8014f08:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014f0c:	4618      	mov	r0, r3
 8014f0e:	3738      	adds	r7, #56	; 0x38
 8014f10:	46bd      	mov	sp, r7
 8014f12:	bd80      	pop	{r7, pc}

08014f14 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8014f14:	b580      	push	{r7, lr}
 8014f16:	b08c      	sub	sp, #48	; 0x30
 8014f18:	af00      	add	r7, sp, #0
 8014f1a:	60f8      	str	r0, [r7, #12]
 8014f1c:	60b9      	str	r1, [r7, #8]
 8014f1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8014f20:	2300      	movs	r3, #0
 8014f22:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d10a      	bne.n	8014f44 <xQueueReceive+0x30>
	__asm volatile
 8014f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f32:	f383 8811 	msr	BASEPRI, r3
 8014f36:	f3bf 8f6f 	isb	sy
 8014f3a:	f3bf 8f4f 	dsb	sy
 8014f3e:	623b      	str	r3, [r7, #32]
}
 8014f40:	bf00      	nop
 8014f42:	e7fe      	b.n	8014f42 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014f44:	68bb      	ldr	r3, [r7, #8]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d103      	bne.n	8014f52 <xQueueReceive+0x3e>
 8014f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d101      	bne.n	8014f56 <xQueueReceive+0x42>
 8014f52:	2301      	movs	r3, #1
 8014f54:	e000      	b.n	8014f58 <xQueueReceive+0x44>
 8014f56:	2300      	movs	r3, #0
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d10a      	bne.n	8014f72 <xQueueReceive+0x5e>
	__asm volatile
 8014f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f60:	f383 8811 	msr	BASEPRI, r3
 8014f64:	f3bf 8f6f 	isb	sy
 8014f68:	f3bf 8f4f 	dsb	sy
 8014f6c:	61fb      	str	r3, [r7, #28]
}
 8014f6e:	bf00      	nop
 8014f70:	e7fe      	b.n	8014f70 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014f72:	f001 f9c3 	bl	80162fc <xTaskGetSchedulerState>
 8014f76:	4603      	mov	r3, r0
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d102      	bne.n	8014f82 <xQueueReceive+0x6e>
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d101      	bne.n	8014f86 <xQueueReceive+0x72>
 8014f82:	2301      	movs	r3, #1
 8014f84:	e000      	b.n	8014f88 <xQueueReceive+0x74>
 8014f86:	2300      	movs	r3, #0
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d10a      	bne.n	8014fa2 <xQueueReceive+0x8e>
	__asm volatile
 8014f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f90:	f383 8811 	msr	BASEPRI, r3
 8014f94:	f3bf 8f6f 	isb	sy
 8014f98:	f3bf 8f4f 	dsb	sy
 8014f9c:	61bb      	str	r3, [r7, #24]
}
 8014f9e:	bf00      	nop
 8014fa0:	e7fe      	b.n	8014fa0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014fa2:	f001 fcf7 	bl	8016994 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014faa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d01f      	beq.n	8014ff2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014fb2:	68b9      	ldr	r1, [r7, #8]
 8014fb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014fb6:	f000 fabe 	bl	8015536 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fbc:	1e5a      	subs	r2, r3, #1
 8014fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fc0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fc4:	691b      	ldr	r3, [r3, #16]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d00f      	beq.n	8014fea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fcc:	3310      	adds	r3, #16
 8014fce:	4618      	mov	r0, r3
 8014fd0:	f000 ffd4 	bl	8015f7c <xTaskRemoveFromEventList>
 8014fd4:	4603      	mov	r3, r0
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d007      	beq.n	8014fea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014fda:	4b3d      	ldr	r3, [pc, #244]	; (80150d0 <xQueueReceive+0x1bc>)
 8014fdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014fe0:	601a      	str	r2, [r3, #0]
 8014fe2:	f3bf 8f4f 	dsb	sy
 8014fe6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014fea:	f001 fd03 	bl	80169f4 <vPortExitCritical>
				return pdPASS;
 8014fee:	2301      	movs	r3, #1
 8014ff0:	e069      	b.n	80150c6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d103      	bne.n	8015000 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014ff8:	f001 fcfc 	bl	80169f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014ffc:	2300      	movs	r3, #0
 8014ffe:	e062      	b.n	80150c6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015002:	2b00      	cmp	r3, #0
 8015004:	d106      	bne.n	8015014 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015006:	f107 0310 	add.w	r3, r7, #16
 801500a:	4618      	mov	r0, r3
 801500c:	f001 f818 	bl	8016040 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015010:	2301      	movs	r3, #1
 8015012:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015014:	f001 fcee 	bl	80169f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015018:	f000 fda6 	bl	8015b68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801501c:	f001 fcba 	bl	8016994 <vPortEnterCritical>
 8015020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015022:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015026:	b25b      	sxtb	r3, r3
 8015028:	f1b3 3fff 	cmp.w	r3, #4294967295
 801502c:	d103      	bne.n	8015036 <xQueueReceive+0x122>
 801502e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015030:	2200      	movs	r2, #0
 8015032:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015038:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801503c:	b25b      	sxtb	r3, r3
 801503e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015042:	d103      	bne.n	801504c <xQueueReceive+0x138>
 8015044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015046:	2200      	movs	r2, #0
 8015048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801504c:	f001 fcd2 	bl	80169f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015050:	1d3a      	adds	r2, r7, #4
 8015052:	f107 0310 	add.w	r3, r7, #16
 8015056:	4611      	mov	r1, r2
 8015058:	4618      	mov	r0, r3
 801505a:	f001 f807 	bl	801606c <xTaskCheckForTimeOut>
 801505e:	4603      	mov	r3, r0
 8015060:	2b00      	cmp	r3, #0
 8015062:	d123      	bne.n	80150ac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015064:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015066:	f000 fade 	bl	8015626 <prvIsQueueEmpty>
 801506a:	4603      	mov	r3, r0
 801506c:	2b00      	cmp	r3, #0
 801506e:	d017      	beq.n	80150a0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015072:	3324      	adds	r3, #36	; 0x24
 8015074:	687a      	ldr	r2, [r7, #4]
 8015076:	4611      	mov	r1, r2
 8015078:	4618      	mov	r0, r3
 801507a:	f000 ff5b 	bl	8015f34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801507e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015080:	f000 fa7f 	bl	8015582 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015084:	f000 fd7e 	bl	8015b84 <xTaskResumeAll>
 8015088:	4603      	mov	r3, r0
 801508a:	2b00      	cmp	r3, #0
 801508c:	d189      	bne.n	8014fa2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801508e:	4b10      	ldr	r3, [pc, #64]	; (80150d0 <xQueueReceive+0x1bc>)
 8015090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015094:	601a      	str	r2, [r3, #0]
 8015096:	f3bf 8f4f 	dsb	sy
 801509a:	f3bf 8f6f 	isb	sy
 801509e:	e780      	b.n	8014fa2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80150a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80150a2:	f000 fa6e 	bl	8015582 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80150a6:	f000 fd6d 	bl	8015b84 <xTaskResumeAll>
 80150aa:	e77a      	b.n	8014fa2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80150ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80150ae:	f000 fa68 	bl	8015582 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80150b2:	f000 fd67 	bl	8015b84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80150b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80150b8:	f000 fab5 	bl	8015626 <prvIsQueueEmpty>
 80150bc:	4603      	mov	r3, r0
 80150be:	2b00      	cmp	r3, #0
 80150c0:	f43f af6f 	beq.w	8014fa2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80150c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80150c6:	4618      	mov	r0, r3
 80150c8:	3730      	adds	r7, #48	; 0x30
 80150ca:	46bd      	mov	sp, r7
 80150cc:	bd80      	pop	{r7, pc}
 80150ce:	bf00      	nop
 80150d0:	e000ed04 	.word	0xe000ed04

080150d4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80150d4:	b580      	push	{r7, lr}
 80150d6:	b08e      	sub	sp, #56	; 0x38
 80150d8:	af00      	add	r7, sp, #0
 80150da:	6078      	str	r0, [r7, #4]
 80150dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80150de:	2300      	movs	r3, #0
 80150e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80150e6:	2300      	movs	r3, #0
 80150e8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80150ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d10a      	bne.n	8015106 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80150f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150f4:	f383 8811 	msr	BASEPRI, r3
 80150f8:	f3bf 8f6f 	isb	sy
 80150fc:	f3bf 8f4f 	dsb	sy
 8015100:	623b      	str	r3, [r7, #32]
}
 8015102:	bf00      	nop
 8015104:	e7fe      	b.n	8015104 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801510a:	2b00      	cmp	r3, #0
 801510c:	d00a      	beq.n	8015124 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801510e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015112:	f383 8811 	msr	BASEPRI, r3
 8015116:	f3bf 8f6f 	isb	sy
 801511a:	f3bf 8f4f 	dsb	sy
 801511e:	61fb      	str	r3, [r7, #28]
}
 8015120:	bf00      	nop
 8015122:	e7fe      	b.n	8015122 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015124:	f001 f8ea 	bl	80162fc <xTaskGetSchedulerState>
 8015128:	4603      	mov	r3, r0
 801512a:	2b00      	cmp	r3, #0
 801512c:	d102      	bne.n	8015134 <xQueueSemaphoreTake+0x60>
 801512e:	683b      	ldr	r3, [r7, #0]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d101      	bne.n	8015138 <xQueueSemaphoreTake+0x64>
 8015134:	2301      	movs	r3, #1
 8015136:	e000      	b.n	801513a <xQueueSemaphoreTake+0x66>
 8015138:	2300      	movs	r3, #0
 801513a:	2b00      	cmp	r3, #0
 801513c:	d10a      	bne.n	8015154 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801513e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015142:	f383 8811 	msr	BASEPRI, r3
 8015146:	f3bf 8f6f 	isb	sy
 801514a:	f3bf 8f4f 	dsb	sy
 801514e:	61bb      	str	r3, [r7, #24]
}
 8015150:	bf00      	nop
 8015152:	e7fe      	b.n	8015152 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015154:	f001 fc1e 	bl	8016994 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8015158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801515a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801515c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801515e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015160:	2b00      	cmp	r3, #0
 8015162:	d024      	beq.n	80151ae <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8015164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015166:	1e5a      	subs	r2, r3, #1
 8015168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801516a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801516c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	2b00      	cmp	r3, #0
 8015172:	d104      	bne.n	801517e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8015174:	f001 fa6a 	bl	801664c <pvTaskIncrementMutexHeldCount>
 8015178:	4602      	mov	r2, r0
 801517a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801517c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801517e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015180:	691b      	ldr	r3, [r3, #16]
 8015182:	2b00      	cmp	r3, #0
 8015184:	d00f      	beq.n	80151a6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015188:	3310      	adds	r3, #16
 801518a:	4618      	mov	r0, r3
 801518c:	f000 fef6 	bl	8015f7c <xTaskRemoveFromEventList>
 8015190:	4603      	mov	r3, r0
 8015192:	2b00      	cmp	r3, #0
 8015194:	d007      	beq.n	80151a6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015196:	4b54      	ldr	r3, [pc, #336]	; (80152e8 <xQueueSemaphoreTake+0x214>)
 8015198:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801519c:	601a      	str	r2, [r3, #0]
 801519e:	f3bf 8f4f 	dsb	sy
 80151a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80151a6:	f001 fc25 	bl	80169f4 <vPortExitCritical>
				return pdPASS;
 80151aa:	2301      	movs	r3, #1
 80151ac:	e097      	b.n	80152de <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80151ae:	683b      	ldr	r3, [r7, #0]
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d111      	bne.n	80151d8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80151b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d00a      	beq.n	80151d0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80151ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151be:	f383 8811 	msr	BASEPRI, r3
 80151c2:	f3bf 8f6f 	isb	sy
 80151c6:	f3bf 8f4f 	dsb	sy
 80151ca:	617b      	str	r3, [r7, #20]
}
 80151cc:	bf00      	nop
 80151ce:	e7fe      	b.n	80151ce <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80151d0:	f001 fc10 	bl	80169f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80151d4:	2300      	movs	r3, #0
 80151d6:	e082      	b.n	80152de <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80151d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d106      	bne.n	80151ec <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80151de:	f107 030c 	add.w	r3, r7, #12
 80151e2:	4618      	mov	r0, r3
 80151e4:	f000 ff2c 	bl	8016040 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80151e8:	2301      	movs	r3, #1
 80151ea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80151ec:	f001 fc02 	bl	80169f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80151f0:	f000 fcba 	bl	8015b68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80151f4:	f001 fbce 	bl	8016994 <vPortEnterCritical>
 80151f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80151fe:	b25b      	sxtb	r3, r3
 8015200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015204:	d103      	bne.n	801520e <xQueueSemaphoreTake+0x13a>
 8015206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015208:	2200      	movs	r2, #0
 801520a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801520e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015210:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015214:	b25b      	sxtb	r3, r3
 8015216:	f1b3 3fff 	cmp.w	r3, #4294967295
 801521a:	d103      	bne.n	8015224 <xQueueSemaphoreTake+0x150>
 801521c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801521e:	2200      	movs	r2, #0
 8015220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015224:	f001 fbe6 	bl	80169f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015228:	463a      	mov	r2, r7
 801522a:	f107 030c 	add.w	r3, r7, #12
 801522e:	4611      	mov	r1, r2
 8015230:	4618      	mov	r0, r3
 8015232:	f000 ff1b 	bl	801606c <xTaskCheckForTimeOut>
 8015236:	4603      	mov	r3, r0
 8015238:	2b00      	cmp	r3, #0
 801523a:	d132      	bne.n	80152a2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801523c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801523e:	f000 f9f2 	bl	8015626 <prvIsQueueEmpty>
 8015242:	4603      	mov	r3, r0
 8015244:	2b00      	cmp	r3, #0
 8015246:	d026      	beq.n	8015296 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801524a:	681b      	ldr	r3, [r3, #0]
 801524c:	2b00      	cmp	r3, #0
 801524e:	d109      	bne.n	8015264 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8015250:	f001 fba0 	bl	8016994 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015256:	689b      	ldr	r3, [r3, #8]
 8015258:	4618      	mov	r0, r3
 801525a:	f001 f86d 	bl	8016338 <xTaskPriorityInherit>
 801525e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8015260:	f001 fbc8 	bl	80169f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015266:	3324      	adds	r3, #36	; 0x24
 8015268:	683a      	ldr	r2, [r7, #0]
 801526a:	4611      	mov	r1, r2
 801526c:	4618      	mov	r0, r3
 801526e:	f000 fe61 	bl	8015f34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015272:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015274:	f000 f985 	bl	8015582 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015278:	f000 fc84 	bl	8015b84 <xTaskResumeAll>
 801527c:	4603      	mov	r3, r0
 801527e:	2b00      	cmp	r3, #0
 8015280:	f47f af68 	bne.w	8015154 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8015284:	4b18      	ldr	r3, [pc, #96]	; (80152e8 <xQueueSemaphoreTake+0x214>)
 8015286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801528a:	601a      	str	r2, [r3, #0]
 801528c:	f3bf 8f4f 	dsb	sy
 8015290:	f3bf 8f6f 	isb	sy
 8015294:	e75e      	b.n	8015154 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8015296:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015298:	f000 f973 	bl	8015582 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801529c:	f000 fc72 	bl	8015b84 <xTaskResumeAll>
 80152a0:	e758      	b.n	8015154 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80152a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80152a4:	f000 f96d 	bl	8015582 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80152a8:	f000 fc6c 	bl	8015b84 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80152ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80152ae:	f000 f9ba 	bl	8015626 <prvIsQueueEmpty>
 80152b2:	4603      	mov	r3, r0
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	f43f af4d 	beq.w	8015154 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80152ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d00d      	beq.n	80152dc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80152c0:	f001 fb68 	bl	8016994 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80152c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80152c6:	f000 f8b4 	bl	8015432 <prvGetDisinheritPriorityAfterTimeout>
 80152ca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80152cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152ce:	689b      	ldr	r3, [r3, #8]
 80152d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80152d2:	4618      	mov	r0, r3
 80152d4:	f001 f92c 	bl	8016530 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80152d8:	f001 fb8c 	bl	80169f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80152dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80152de:	4618      	mov	r0, r3
 80152e0:	3738      	adds	r7, #56	; 0x38
 80152e2:	46bd      	mov	sp, r7
 80152e4:	bd80      	pop	{r7, pc}
 80152e6:	bf00      	nop
 80152e8:	e000ed04 	.word	0xe000ed04

080152ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80152ec:	b580      	push	{r7, lr}
 80152ee:	b08e      	sub	sp, #56	; 0x38
 80152f0:	af00      	add	r7, sp, #0
 80152f2:	60f8      	str	r0, [r7, #12]
 80152f4:	60b9      	str	r1, [r7, #8]
 80152f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80152fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d10a      	bne.n	8015318 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8015302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015306:	f383 8811 	msr	BASEPRI, r3
 801530a:	f3bf 8f6f 	isb	sy
 801530e:	f3bf 8f4f 	dsb	sy
 8015312:	623b      	str	r3, [r7, #32]
}
 8015314:	bf00      	nop
 8015316:	e7fe      	b.n	8015316 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015318:	68bb      	ldr	r3, [r7, #8]
 801531a:	2b00      	cmp	r3, #0
 801531c:	d103      	bne.n	8015326 <xQueueReceiveFromISR+0x3a>
 801531e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015322:	2b00      	cmp	r3, #0
 8015324:	d101      	bne.n	801532a <xQueueReceiveFromISR+0x3e>
 8015326:	2301      	movs	r3, #1
 8015328:	e000      	b.n	801532c <xQueueReceiveFromISR+0x40>
 801532a:	2300      	movs	r3, #0
 801532c:	2b00      	cmp	r3, #0
 801532e:	d10a      	bne.n	8015346 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8015330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015334:	f383 8811 	msr	BASEPRI, r3
 8015338:	f3bf 8f6f 	isb	sy
 801533c:	f3bf 8f4f 	dsb	sy
 8015340:	61fb      	str	r3, [r7, #28]
}
 8015342:	bf00      	nop
 8015344:	e7fe      	b.n	8015344 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015346:	f001 fc07 	bl	8016b58 <vPortValidateInterruptPriority>
	__asm volatile
 801534a:	f3ef 8211 	mrs	r2, BASEPRI
 801534e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015352:	f383 8811 	msr	BASEPRI, r3
 8015356:	f3bf 8f6f 	isb	sy
 801535a:	f3bf 8f4f 	dsb	sy
 801535e:	61ba      	str	r2, [r7, #24]
 8015360:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8015362:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015364:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801536a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801536c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801536e:	2b00      	cmp	r3, #0
 8015370:	d02f      	beq.n	80153d2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8015372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015374:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801537c:	68b9      	ldr	r1, [r7, #8]
 801537e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015380:	f000 f8d9 	bl	8015536 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015386:	1e5a      	subs	r2, r3, #1
 8015388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801538a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801538c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015394:	d112      	bne.n	80153bc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015398:	691b      	ldr	r3, [r3, #16]
 801539a:	2b00      	cmp	r3, #0
 801539c:	d016      	beq.n	80153cc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801539e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153a0:	3310      	adds	r3, #16
 80153a2:	4618      	mov	r0, r3
 80153a4:	f000 fdea 	bl	8015f7c <xTaskRemoveFromEventList>
 80153a8:	4603      	mov	r3, r0
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d00e      	beq.n	80153cc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d00b      	beq.n	80153cc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	2201      	movs	r2, #1
 80153b8:	601a      	str	r2, [r3, #0]
 80153ba:	e007      	b.n	80153cc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80153bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80153c0:	3301      	adds	r3, #1
 80153c2:	b2db      	uxtb	r3, r3
 80153c4:	b25a      	sxtb	r2, r3
 80153c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80153cc:	2301      	movs	r3, #1
 80153ce:	637b      	str	r3, [r7, #52]	; 0x34
 80153d0:	e001      	b.n	80153d6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80153d2:	2300      	movs	r3, #0
 80153d4:	637b      	str	r3, [r7, #52]	; 0x34
 80153d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80153da:	693b      	ldr	r3, [r7, #16]
 80153dc:	f383 8811 	msr	BASEPRI, r3
}
 80153e0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80153e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80153e4:	4618      	mov	r0, r3
 80153e6:	3738      	adds	r7, #56	; 0x38
 80153e8:	46bd      	mov	sp, r7
 80153ea:	bd80      	pop	{r7, pc}

080153ec <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80153ec:	b580      	push	{r7, lr}
 80153ee:	b084      	sub	sp, #16
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d10a      	bne.n	8015414 <vQueueDelete+0x28>
	__asm volatile
 80153fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015402:	f383 8811 	msr	BASEPRI, r3
 8015406:	f3bf 8f6f 	isb	sy
 801540a:	f3bf 8f4f 	dsb	sy
 801540e:	60bb      	str	r3, [r7, #8]
}
 8015410:	bf00      	nop
 8015412:	e7fe      	b.n	8015412 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8015414:	68f8      	ldr	r0, [r7, #12]
 8015416:	f000 f935 	bl	8015684 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8015420:	2b00      	cmp	r3, #0
 8015422:	d102      	bne.n	801542a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8015424:	68f8      	ldr	r0, [r7, #12]
 8015426:	f001 fca3 	bl	8016d70 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801542a:	bf00      	nop
 801542c:	3710      	adds	r7, #16
 801542e:	46bd      	mov	sp, r7
 8015430:	bd80      	pop	{r7, pc}

08015432 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8015432:	b480      	push	{r7}
 8015434:	b085      	sub	sp, #20
 8015436:	af00      	add	r7, sp, #0
 8015438:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801543e:	2b00      	cmp	r3, #0
 8015440:	d006      	beq.n	8015450 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	f1c3 0307 	rsb	r3, r3, #7
 801544c:	60fb      	str	r3, [r7, #12]
 801544e:	e001      	b.n	8015454 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8015450:	2300      	movs	r3, #0
 8015452:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8015454:	68fb      	ldr	r3, [r7, #12]
	}
 8015456:	4618      	mov	r0, r3
 8015458:	3714      	adds	r7, #20
 801545a:	46bd      	mov	sp, r7
 801545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015460:	4770      	bx	lr

08015462 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015462:	b580      	push	{r7, lr}
 8015464:	b086      	sub	sp, #24
 8015466:	af00      	add	r7, sp, #0
 8015468:	60f8      	str	r0, [r7, #12]
 801546a:	60b9      	str	r1, [r7, #8]
 801546c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801546e:	2300      	movs	r3, #0
 8015470:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015476:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801547c:	2b00      	cmp	r3, #0
 801547e:	d10d      	bne.n	801549c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	2b00      	cmp	r3, #0
 8015486:	d14d      	bne.n	8015524 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	689b      	ldr	r3, [r3, #8]
 801548c:	4618      	mov	r0, r3
 801548e:	f000 ffc9 	bl	8016424 <xTaskPriorityDisinherit>
 8015492:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	2200      	movs	r2, #0
 8015498:	609a      	str	r2, [r3, #8]
 801549a:	e043      	b.n	8015524 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d119      	bne.n	80154d6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	6858      	ldr	r0, [r3, #4]
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80154aa:	461a      	mov	r2, r3
 80154ac:	68b9      	ldr	r1, [r7, #8]
 80154ae:	f003 fd8b 	bl	8018fc8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	685a      	ldr	r2, [r3, #4]
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80154ba:	441a      	add	r2, r3
 80154bc:	68fb      	ldr	r3, [r7, #12]
 80154be:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80154c0:	68fb      	ldr	r3, [r7, #12]
 80154c2:	685a      	ldr	r2, [r3, #4]
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	689b      	ldr	r3, [r3, #8]
 80154c8:	429a      	cmp	r2, r3
 80154ca:	d32b      	bcc.n	8015524 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80154cc:	68fb      	ldr	r3, [r7, #12]
 80154ce:	681a      	ldr	r2, [r3, #0]
 80154d0:	68fb      	ldr	r3, [r7, #12]
 80154d2:	605a      	str	r2, [r3, #4]
 80154d4:	e026      	b.n	8015524 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80154d6:	68fb      	ldr	r3, [r7, #12]
 80154d8:	68d8      	ldr	r0, [r3, #12]
 80154da:	68fb      	ldr	r3, [r7, #12]
 80154dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80154de:	461a      	mov	r2, r3
 80154e0:	68b9      	ldr	r1, [r7, #8]
 80154e2:	f003 fd71 	bl	8018fc8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80154e6:	68fb      	ldr	r3, [r7, #12]
 80154e8:	68da      	ldr	r2, [r3, #12]
 80154ea:	68fb      	ldr	r3, [r7, #12]
 80154ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80154ee:	425b      	negs	r3, r3
 80154f0:	441a      	add	r2, r3
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	68da      	ldr	r2, [r3, #12]
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	429a      	cmp	r2, r3
 8015500:	d207      	bcs.n	8015512 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015502:	68fb      	ldr	r3, [r7, #12]
 8015504:	689a      	ldr	r2, [r3, #8]
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801550a:	425b      	negs	r3, r3
 801550c:	441a      	add	r2, r3
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	2b02      	cmp	r3, #2
 8015516:	d105      	bne.n	8015524 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015518:	693b      	ldr	r3, [r7, #16]
 801551a:	2b00      	cmp	r3, #0
 801551c:	d002      	beq.n	8015524 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801551e:	693b      	ldr	r3, [r7, #16]
 8015520:	3b01      	subs	r3, #1
 8015522:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015524:	693b      	ldr	r3, [r7, #16]
 8015526:	1c5a      	adds	r2, r3, #1
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801552c:	697b      	ldr	r3, [r7, #20]
}
 801552e:	4618      	mov	r0, r3
 8015530:	3718      	adds	r7, #24
 8015532:	46bd      	mov	sp, r7
 8015534:	bd80      	pop	{r7, pc}

08015536 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015536:	b580      	push	{r7, lr}
 8015538:	b082      	sub	sp, #8
 801553a:	af00      	add	r7, sp, #0
 801553c:	6078      	str	r0, [r7, #4]
 801553e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015544:	2b00      	cmp	r3, #0
 8015546:	d018      	beq.n	801557a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	68da      	ldr	r2, [r3, #12]
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015550:	441a      	add	r2, r3
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	68da      	ldr	r2, [r3, #12]
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	689b      	ldr	r3, [r3, #8]
 801555e:	429a      	cmp	r2, r3
 8015560:	d303      	bcc.n	801556a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	681a      	ldr	r2, [r3, #0]
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	68d9      	ldr	r1, [r3, #12]
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015572:	461a      	mov	r2, r3
 8015574:	6838      	ldr	r0, [r7, #0]
 8015576:	f003 fd27 	bl	8018fc8 <memcpy>
	}
}
 801557a:	bf00      	nop
 801557c:	3708      	adds	r7, #8
 801557e:	46bd      	mov	sp, r7
 8015580:	bd80      	pop	{r7, pc}

08015582 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015582:	b580      	push	{r7, lr}
 8015584:	b084      	sub	sp, #16
 8015586:	af00      	add	r7, sp, #0
 8015588:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801558a:	f001 fa03 	bl	8016994 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015594:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015596:	e011      	b.n	80155bc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801559c:	2b00      	cmp	r3, #0
 801559e:	d012      	beq.n	80155c6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	3324      	adds	r3, #36	; 0x24
 80155a4:	4618      	mov	r0, r3
 80155a6:	f000 fce9 	bl	8015f7c <xTaskRemoveFromEventList>
 80155aa:	4603      	mov	r3, r0
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d001      	beq.n	80155b4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80155b0:	f000 fdbe 	bl	8016130 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80155b4:	7bfb      	ldrb	r3, [r7, #15]
 80155b6:	3b01      	subs	r3, #1
 80155b8:	b2db      	uxtb	r3, r3
 80155ba:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80155bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	dce9      	bgt.n	8015598 <prvUnlockQueue+0x16>
 80155c4:	e000      	b.n	80155c8 <prvUnlockQueue+0x46>
					break;
 80155c6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	22ff      	movs	r2, #255	; 0xff
 80155cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80155d0:	f001 fa10 	bl	80169f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80155d4:	f001 f9de 	bl	8016994 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80155de:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80155e0:	e011      	b.n	8015606 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	691b      	ldr	r3, [r3, #16]
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d012      	beq.n	8015610 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	3310      	adds	r3, #16
 80155ee:	4618      	mov	r0, r3
 80155f0:	f000 fcc4 	bl	8015f7c <xTaskRemoveFromEventList>
 80155f4:	4603      	mov	r3, r0
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d001      	beq.n	80155fe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80155fa:	f000 fd99 	bl	8016130 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80155fe:	7bbb      	ldrb	r3, [r7, #14]
 8015600:	3b01      	subs	r3, #1
 8015602:	b2db      	uxtb	r3, r3
 8015604:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015606:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801560a:	2b00      	cmp	r3, #0
 801560c:	dce9      	bgt.n	80155e2 <prvUnlockQueue+0x60>
 801560e:	e000      	b.n	8015612 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8015610:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	22ff      	movs	r2, #255	; 0xff
 8015616:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801561a:	f001 f9eb 	bl	80169f4 <vPortExitCritical>
}
 801561e:	bf00      	nop
 8015620:	3710      	adds	r7, #16
 8015622:	46bd      	mov	sp, r7
 8015624:	bd80      	pop	{r7, pc}

08015626 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015626:	b580      	push	{r7, lr}
 8015628:	b084      	sub	sp, #16
 801562a:	af00      	add	r7, sp, #0
 801562c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801562e:	f001 f9b1 	bl	8016994 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015636:	2b00      	cmp	r3, #0
 8015638:	d102      	bne.n	8015640 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801563a:	2301      	movs	r3, #1
 801563c:	60fb      	str	r3, [r7, #12]
 801563e:	e001      	b.n	8015644 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8015640:	2300      	movs	r3, #0
 8015642:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015644:	f001 f9d6 	bl	80169f4 <vPortExitCritical>

	return xReturn;
 8015648:	68fb      	ldr	r3, [r7, #12]
}
 801564a:	4618      	mov	r0, r3
 801564c:	3710      	adds	r7, #16
 801564e:	46bd      	mov	sp, r7
 8015650:	bd80      	pop	{r7, pc}

08015652 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8015652:	b580      	push	{r7, lr}
 8015654:	b084      	sub	sp, #16
 8015656:	af00      	add	r7, sp, #0
 8015658:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801565a:	f001 f99b 	bl	8016994 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015666:	429a      	cmp	r2, r3
 8015668:	d102      	bne.n	8015670 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801566a:	2301      	movs	r3, #1
 801566c:	60fb      	str	r3, [r7, #12]
 801566e:	e001      	b.n	8015674 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8015670:	2300      	movs	r3, #0
 8015672:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015674:	f001 f9be 	bl	80169f4 <vPortExitCritical>

	return xReturn;
 8015678:	68fb      	ldr	r3, [r7, #12]
}
 801567a:	4618      	mov	r0, r3
 801567c:	3710      	adds	r7, #16
 801567e:	46bd      	mov	sp, r7
 8015680:	bd80      	pop	{r7, pc}
	...

08015684 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8015684:	b480      	push	{r7}
 8015686:	b085      	sub	sp, #20
 8015688:	af00      	add	r7, sp, #0
 801568a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801568c:	2300      	movs	r3, #0
 801568e:	60fb      	str	r3, [r7, #12]
 8015690:	e016      	b.n	80156c0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8015692:	4a10      	ldr	r2, [pc, #64]	; (80156d4 <vQueueUnregisterQueue+0x50>)
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	00db      	lsls	r3, r3, #3
 8015698:	4413      	add	r3, r2
 801569a:	685b      	ldr	r3, [r3, #4]
 801569c:	687a      	ldr	r2, [r7, #4]
 801569e:	429a      	cmp	r2, r3
 80156a0:	d10b      	bne.n	80156ba <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80156a2:	4a0c      	ldr	r2, [pc, #48]	; (80156d4 <vQueueUnregisterQueue+0x50>)
 80156a4:	68fb      	ldr	r3, [r7, #12]
 80156a6:	2100      	movs	r1, #0
 80156a8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80156ac:	4a09      	ldr	r2, [pc, #36]	; (80156d4 <vQueueUnregisterQueue+0x50>)
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	00db      	lsls	r3, r3, #3
 80156b2:	4413      	add	r3, r2
 80156b4:	2200      	movs	r2, #0
 80156b6:	605a      	str	r2, [r3, #4]
				break;
 80156b8:	e006      	b.n	80156c8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	3301      	adds	r3, #1
 80156be:	60fb      	str	r3, [r7, #12]
 80156c0:	68fb      	ldr	r3, [r7, #12]
 80156c2:	2b07      	cmp	r3, #7
 80156c4:	d9e5      	bls.n	8015692 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80156c6:	bf00      	nop
 80156c8:	bf00      	nop
 80156ca:	3714      	adds	r7, #20
 80156cc:	46bd      	mov	sp, r7
 80156ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d2:	4770      	bx	lr
 80156d4:	2000394c 	.word	0x2000394c

080156d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80156d8:	b580      	push	{r7, lr}
 80156da:	b08e      	sub	sp, #56	; 0x38
 80156dc:	af04      	add	r7, sp, #16
 80156de:	60f8      	str	r0, [r7, #12]
 80156e0:	60b9      	str	r1, [r7, #8]
 80156e2:	607a      	str	r2, [r7, #4]
 80156e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80156e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d10a      	bne.n	8015702 <xTaskCreateStatic+0x2a>
	__asm volatile
 80156ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156f0:	f383 8811 	msr	BASEPRI, r3
 80156f4:	f3bf 8f6f 	isb	sy
 80156f8:	f3bf 8f4f 	dsb	sy
 80156fc:	623b      	str	r3, [r7, #32]
}
 80156fe:	bf00      	nop
 8015700:	e7fe      	b.n	8015700 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8015702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015704:	2b00      	cmp	r3, #0
 8015706:	d10a      	bne.n	801571e <xTaskCreateStatic+0x46>
	__asm volatile
 8015708:	f04f 0350 	mov.w	r3, #80	; 0x50
 801570c:	f383 8811 	msr	BASEPRI, r3
 8015710:	f3bf 8f6f 	isb	sy
 8015714:	f3bf 8f4f 	dsb	sy
 8015718:	61fb      	str	r3, [r7, #28]
}
 801571a:	bf00      	nop
 801571c:	e7fe      	b.n	801571c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801571e:	23a0      	movs	r3, #160	; 0xa0
 8015720:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8015722:	693b      	ldr	r3, [r7, #16]
 8015724:	2ba0      	cmp	r3, #160	; 0xa0
 8015726:	d00a      	beq.n	801573e <xTaskCreateStatic+0x66>
	__asm volatile
 8015728:	f04f 0350 	mov.w	r3, #80	; 0x50
 801572c:	f383 8811 	msr	BASEPRI, r3
 8015730:	f3bf 8f6f 	isb	sy
 8015734:	f3bf 8f4f 	dsb	sy
 8015738:	61bb      	str	r3, [r7, #24]
}
 801573a:	bf00      	nop
 801573c:	e7fe      	b.n	801573c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801573e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8015740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015742:	2b00      	cmp	r3, #0
 8015744:	d01e      	beq.n	8015784 <xTaskCreateStatic+0xac>
 8015746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015748:	2b00      	cmp	r3, #0
 801574a:	d01b      	beq.n	8015784 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801574c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801574e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8015750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015752:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015754:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8015756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015758:	2202      	movs	r2, #2
 801575a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801575e:	2300      	movs	r3, #0
 8015760:	9303      	str	r3, [sp, #12]
 8015762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015764:	9302      	str	r3, [sp, #8]
 8015766:	f107 0314 	add.w	r3, r7, #20
 801576a:	9301      	str	r3, [sp, #4]
 801576c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801576e:	9300      	str	r3, [sp, #0]
 8015770:	683b      	ldr	r3, [r7, #0]
 8015772:	687a      	ldr	r2, [r7, #4]
 8015774:	68b9      	ldr	r1, [r7, #8]
 8015776:	68f8      	ldr	r0, [r7, #12]
 8015778:	f000 f850 	bl	801581c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801577c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801577e:	f000 f8eb 	bl	8015958 <prvAddNewTaskToReadyList>
 8015782:	e001      	b.n	8015788 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8015784:	2300      	movs	r3, #0
 8015786:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8015788:	697b      	ldr	r3, [r7, #20]
	}
 801578a:	4618      	mov	r0, r3
 801578c:	3728      	adds	r7, #40	; 0x28
 801578e:	46bd      	mov	sp, r7
 8015790:	bd80      	pop	{r7, pc}

08015792 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8015792:	b580      	push	{r7, lr}
 8015794:	b08c      	sub	sp, #48	; 0x30
 8015796:	af04      	add	r7, sp, #16
 8015798:	60f8      	str	r0, [r7, #12]
 801579a:	60b9      	str	r1, [r7, #8]
 801579c:	603b      	str	r3, [r7, #0]
 801579e:	4613      	mov	r3, r2
 80157a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80157a2:	88fb      	ldrh	r3, [r7, #6]
 80157a4:	009b      	lsls	r3, r3, #2
 80157a6:	4618      	mov	r0, r3
 80157a8:	f001 fa16 	bl	8016bd8 <pvPortMalloc>
 80157ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80157ae:	697b      	ldr	r3, [r7, #20]
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d00e      	beq.n	80157d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80157b4:	20a0      	movs	r0, #160	; 0xa0
 80157b6:	f001 fa0f 	bl	8016bd8 <pvPortMalloc>
 80157ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80157bc:	69fb      	ldr	r3, [r7, #28]
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d003      	beq.n	80157ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80157c2:	69fb      	ldr	r3, [r7, #28]
 80157c4:	697a      	ldr	r2, [r7, #20]
 80157c6:	631a      	str	r2, [r3, #48]	; 0x30
 80157c8:	e005      	b.n	80157d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80157ca:	6978      	ldr	r0, [r7, #20]
 80157cc:	f001 fad0 	bl	8016d70 <vPortFree>
 80157d0:	e001      	b.n	80157d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80157d2:	2300      	movs	r3, #0
 80157d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80157d6:	69fb      	ldr	r3, [r7, #28]
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d017      	beq.n	801580c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80157dc:	69fb      	ldr	r3, [r7, #28]
 80157de:	2200      	movs	r2, #0
 80157e0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80157e4:	88fa      	ldrh	r2, [r7, #6]
 80157e6:	2300      	movs	r3, #0
 80157e8:	9303      	str	r3, [sp, #12]
 80157ea:	69fb      	ldr	r3, [r7, #28]
 80157ec:	9302      	str	r3, [sp, #8]
 80157ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157f0:	9301      	str	r3, [sp, #4]
 80157f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157f4:	9300      	str	r3, [sp, #0]
 80157f6:	683b      	ldr	r3, [r7, #0]
 80157f8:	68b9      	ldr	r1, [r7, #8]
 80157fa:	68f8      	ldr	r0, [r7, #12]
 80157fc:	f000 f80e 	bl	801581c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015800:	69f8      	ldr	r0, [r7, #28]
 8015802:	f000 f8a9 	bl	8015958 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8015806:	2301      	movs	r3, #1
 8015808:	61bb      	str	r3, [r7, #24]
 801580a:	e002      	b.n	8015812 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801580c:	f04f 33ff 	mov.w	r3, #4294967295
 8015810:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8015812:	69bb      	ldr	r3, [r7, #24]
	}
 8015814:	4618      	mov	r0, r3
 8015816:	3720      	adds	r7, #32
 8015818:	46bd      	mov	sp, r7
 801581a:	bd80      	pop	{r7, pc}

0801581c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801581c:	b580      	push	{r7, lr}
 801581e:	b088      	sub	sp, #32
 8015820:	af00      	add	r7, sp, #0
 8015822:	60f8      	str	r0, [r7, #12]
 8015824:	60b9      	str	r1, [r7, #8]
 8015826:	607a      	str	r2, [r7, #4]
 8015828:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801582a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801582c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015834:	3b01      	subs	r3, #1
 8015836:	009b      	lsls	r3, r3, #2
 8015838:	4413      	add	r3, r2
 801583a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801583c:	69bb      	ldr	r3, [r7, #24]
 801583e:	f023 0307 	bic.w	r3, r3, #7
 8015842:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8015844:	69bb      	ldr	r3, [r7, #24]
 8015846:	f003 0307 	and.w	r3, r3, #7
 801584a:	2b00      	cmp	r3, #0
 801584c:	d00a      	beq.n	8015864 <prvInitialiseNewTask+0x48>
	__asm volatile
 801584e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015852:	f383 8811 	msr	BASEPRI, r3
 8015856:	f3bf 8f6f 	isb	sy
 801585a:	f3bf 8f4f 	dsb	sy
 801585e:	617b      	str	r3, [r7, #20]
}
 8015860:	bf00      	nop
 8015862:	e7fe      	b.n	8015862 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8015864:	68bb      	ldr	r3, [r7, #8]
 8015866:	2b00      	cmp	r3, #0
 8015868:	d01f      	beq.n	80158aa <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801586a:	2300      	movs	r3, #0
 801586c:	61fb      	str	r3, [r7, #28]
 801586e:	e012      	b.n	8015896 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015870:	68ba      	ldr	r2, [r7, #8]
 8015872:	69fb      	ldr	r3, [r7, #28]
 8015874:	4413      	add	r3, r2
 8015876:	7819      	ldrb	r1, [r3, #0]
 8015878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801587a:	69fb      	ldr	r3, [r7, #28]
 801587c:	4413      	add	r3, r2
 801587e:	3334      	adds	r3, #52	; 0x34
 8015880:	460a      	mov	r2, r1
 8015882:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8015884:	68ba      	ldr	r2, [r7, #8]
 8015886:	69fb      	ldr	r3, [r7, #28]
 8015888:	4413      	add	r3, r2
 801588a:	781b      	ldrb	r3, [r3, #0]
 801588c:	2b00      	cmp	r3, #0
 801588e:	d006      	beq.n	801589e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015890:	69fb      	ldr	r3, [r7, #28]
 8015892:	3301      	adds	r3, #1
 8015894:	61fb      	str	r3, [r7, #28]
 8015896:	69fb      	ldr	r3, [r7, #28]
 8015898:	2b0f      	cmp	r3, #15
 801589a:	d9e9      	bls.n	8015870 <prvInitialiseNewTask+0x54>
 801589c:	e000      	b.n	80158a0 <prvInitialiseNewTask+0x84>
			{
				break;
 801589e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80158a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158a2:	2200      	movs	r2, #0
 80158a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80158a8:	e003      	b.n	80158b2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80158aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158ac:	2200      	movs	r2, #0
 80158ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80158b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158b4:	2b06      	cmp	r3, #6
 80158b6:	d901      	bls.n	80158bc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80158b8:	2306      	movs	r3, #6
 80158ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80158bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80158c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80158c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80158c6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80158c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158ca:	2200      	movs	r2, #0
 80158cc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80158ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158d0:	3304      	adds	r3, #4
 80158d2:	4618      	mov	r0, r3
 80158d4:	f7fe ff2a 	bl	801472c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80158d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158da:	3318      	adds	r3, #24
 80158dc:	4618      	mov	r0, r3
 80158de:	f7fe ff25 	bl	801472c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80158e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80158e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80158e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158ea:	f1c3 0207 	rsb	r2, r3, #7
 80158ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80158f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80158f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80158f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158fa:	2200      	movs	r2, #0
 80158fc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015902:	2200      	movs	r2, #0
 8015904:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8015908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801590a:	334c      	adds	r3, #76	; 0x4c
 801590c:	224c      	movs	r2, #76	; 0x4c
 801590e:	2100      	movs	r1, #0
 8015910:	4618      	mov	r0, r3
 8015912:	f003 fa65 	bl	8018de0 <memset>
 8015916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015918:	4a0c      	ldr	r2, [pc, #48]	; (801594c <prvInitialiseNewTask+0x130>)
 801591a:	651a      	str	r2, [r3, #80]	; 0x50
 801591c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801591e:	4a0c      	ldr	r2, [pc, #48]	; (8015950 <prvInitialiseNewTask+0x134>)
 8015920:	655a      	str	r2, [r3, #84]	; 0x54
 8015922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015924:	4a0b      	ldr	r2, [pc, #44]	; (8015954 <prvInitialiseNewTask+0x138>)
 8015926:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015928:	683a      	ldr	r2, [r7, #0]
 801592a:	68f9      	ldr	r1, [r7, #12]
 801592c:	69b8      	ldr	r0, [r7, #24]
 801592e:	f000 ff07 	bl	8016740 <pxPortInitialiseStack>
 8015932:	4602      	mov	r2, r0
 8015934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015936:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8015938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801593a:	2b00      	cmp	r3, #0
 801593c:	d002      	beq.n	8015944 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801593e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015942:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015944:	bf00      	nop
 8015946:	3720      	adds	r7, #32
 8015948:	46bd      	mov	sp, r7
 801594a:	bd80      	pop	{r7, pc}
 801594c:	20008348 	.word	0x20008348
 8015950:	200083b0 	.word	0x200083b0
 8015954:	20008418 	.word	0x20008418

08015958 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015958:	b580      	push	{r7, lr}
 801595a:	b082      	sub	sp, #8
 801595c:	af00      	add	r7, sp, #0
 801595e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015960:	f001 f818 	bl	8016994 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015964:	4b2a      	ldr	r3, [pc, #168]	; (8015a10 <prvAddNewTaskToReadyList+0xb8>)
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	3301      	adds	r3, #1
 801596a:	4a29      	ldr	r2, [pc, #164]	; (8015a10 <prvAddNewTaskToReadyList+0xb8>)
 801596c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801596e:	4b29      	ldr	r3, [pc, #164]	; (8015a14 <prvAddNewTaskToReadyList+0xbc>)
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	2b00      	cmp	r3, #0
 8015974:	d109      	bne.n	801598a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8015976:	4a27      	ldr	r2, [pc, #156]	; (8015a14 <prvAddNewTaskToReadyList+0xbc>)
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801597c:	4b24      	ldr	r3, [pc, #144]	; (8015a10 <prvAddNewTaskToReadyList+0xb8>)
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	2b01      	cmp	r3, #1
 8015982:	d110      	bne.n	80159a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015984:	f000 fbf8 	bl	8016178 <prvInitialiseTaskLists>
 8015988:	e00d      	b.n	80159a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801598a:	4b23      	ldr	r3, [pc, #140]	; (8015a18 <prvAddNewTaskToReadyList+0xc0>)
 801598c:	681b      	ldr	r3, [r3, #0]
 801598e:	2b00      	cmp	r3, #0
 8015990:	d109      	bne.n	80159a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8015992:	4b20      	ldr	r3, [pc, #128]	; (8015a14 <prvAddNewTaskToReadyList+0xbc>)
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801599c:	429a      	cmp	r2, r3
 801599e:	d802      	bhi.n	80159a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80159a0:	4a1c      	ldr	r2, [pc, #112]	; (8015a14 <prvAddNewTaskToReadyList+0xbc>)
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80159a6:	4b1d      	ldr	r3, [pc, #116]	; (8015a1c <prvAddNewTaskToReadyList+0xc4>)
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	3301      	adds	r3, #1
 80159ac:	4a1b      	ldr	r2, [pc, #108]	; (8015a1c <prvAddNewTaskToReadyList+0xc4>)
 80159ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159b4:	2201      	movs	r2, #1
 80159b6:	409a      	lsls	r2, r3
 80159b8:	4b19      	ldr	r3, [pc, #100]	; (8015a20 <prvAddNewTaskToReadyList+0xc8>)
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	4313      	orrs	r3, r2
 80159be:	4a18      	ldr	r2, [pc, #96]	; (8015a20 <prvAddNewTaskToReadyList+0xc8>)
 80159c0:	6013      	str	r3, [r2, #0]
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80159c6:	4613      	mov	r3, r2
 80159c8:	009b      	lsls	r3, r3, #2
 80159ca:	4413      	add	r3, r2
 80159cc:	009b      	lsls	r3, r3, #2
 80159ce:	4a15      	ldr	r2, [pc, #84]	; (8015a24 <prvAddNewTaskToReadyList+0xcc>)
 80159d0:	441a      	add	r2, r3
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	3304      	adds	r3, #4
 80159d6:	4619      	mov	r1, r3
 80159d8:	4610      	mov	r0, r2
 80159da:	f7fe feb4 	bl	8014746 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80159de:	f001 f809 	bl	80169f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80159e2:	4b0d      	ldr	r3, [pc, #52]	; (8015a18 <prvAddNewTaskToReadyList+0xc0>)
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d00e      	beq.n	8015a08 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80159ea:	4b0a      	ldr	r3, [pc, #40]	; (8015a14 <prvAddNewTaskToReadyList+0xbc>)
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159f4:	429a      	cmp	r2, r3
 80159f6:	d207      	bcs.n	8015a08 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80159f8:	4b0b      	ldr	r3, [pc, #44]	; (8015a28 <prvAddNewTaskToReadyList+0xd0>)
 80159fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80159fe:	601a      	str	r2, [r3, #0]
 8015a00:	f3bf 8f4f 	dsb	sy
 8015a04:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015a08:	bf00      	nop
 8015a0a:	3708      	adds	r7, #8
 8015a0c:	46bd      	mov	sp, r7
 8015a0e:	bd80      	pop	{r7, pc}
 8015a10:	20003a8c 	.word	0x20003a8c
 8015a14:	2000398c 	.word	0x2000398c
 8015a18:	20003a98 	.word	0x20003a98
 8015a1c:	20003aa8 	.word	0x20003aa8
 8015a20:	20003a94 	.word	0x20003a94
 8015a24:	20003990 	.word	0x20003990
 8015a28:	e000ed04 	.word	0xe000ed04

08015a2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015a2c:	b580      	push	{r7, lr}
 8015a2e:	b084      	sub	sp, #16
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8015a34:	2300      	movs	r3, #0
 8015a36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d017      	beq.n	8015a6e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8015a3e:	4b13      	ldr	r3, [pc, #76]	; (8015a8c <vTaskDelay+0x60>)
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d00a      	beq.n	8015a5c <vTaskDelay+0x30>
	__asm volatile
 8015a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a4a:	f383 8811 	msr	BASEPRI, r3
 8015a4e:	f3bf 8f6f 	isb	sy
 8015a52:	f3bf 8f4f 	dsb	sy
 8015a56:	60bb      	str	r3, [r7, #8]
}
 8015a58:	bf00      	nop
 8015a5a:	e7fe      	b.n	8015a5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8015a5c:	f000 f884 	bl	8015b68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8015a60:	2100      	movs	r1, #0
 8015a62:	6878      	ldr	r0, [r7, #4]
 8015a64:	f000 fe06 	bl	8016674 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8015a68:	f000 f88c 	bl	8015b84 <xTaskResumeAll>
 8015a6c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d107      	bne.n	8015a84 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8015a74:	4b06      	ldr	r3, [pc, #24]	; (8015a90 <vTaskDelay+0x64>)
 8015a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015a7a:	601a      	str	r2, [r3, #0]
 8015a7c:	f3bf 8f4f 	dsb	sy
 8015a80:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015a84:	bf00      	nop
 8015a86:	3710      	adds	r7, #16
 8015a88:	46bd      	mov	sp, r7
 8015a8a:	bd80      	pop	{r7, pc}
 8015a8c:	20003ab4 	.word	0x20003ab4
 8015a90:	e000ed04 	.word	0xe000ed04

08015a94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015a94:	b580      	push	{r7, lr}
 8015a96:	b08a      	sub	sp, #40	; 0x28
 8015a98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8015a9e:	2300      	movs	r3, #0
 8015aa0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8015aa2:	463a      	mov	r2, r7
 8015aa4:	1d39      	adds	r1, r7, #4
 8015aa6:	f107 0308 	add.w	r3, r7, #8
 8015aaa:	4618      	mov	r0, r3
 8015aac:	f7eb ffca 	bl	8001a44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8015ab0:	6839      	ldr	r1, [r7, #0]
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	68ba      	ldr	r2, [r7, #8]
 8015ab6:	9202      	str	r2, [sp, #8]
 8015ab8:	9301      	str	r3, [sp, #4]
 8015aba:	2300      	movs	r3, #0
 8015abc:	9300      	str	r3, [sp, #0]
 8015abe:	2300      	movs	r3, #0
 8015ac0:	460a      	mov	r2, r1
 8015ac2:	4921      	ldr	r1, [pc, #132]	; (8015b48 <vTaskStartScheduler+0xb4>)
 8015ac4:	4821      	ldr	r0, [pc, #132]	; (8015b4c <vTaskStartScheduler+0xb8>)
 8015ac6:	f7ff fe07 	bl	80156d8 <xTaskCreateStatic>
 8015aca:	4603      	mov	r3, r0
 8015acc:	4a20      	ldr	r2, [pc, #128]	; (8015b50 <vTaskStartScheduler+0xbc>)
 8015ace:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8015ad0:	4b1f      	ldr	r3, [pc, #124]	; (8015b50 <vTaskStartScheduler+0xbc>)
 8015ad2:	681b      	ldr	r3, [r3, #0]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d002      	beq.n	8015ade <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8015ad8:	2301      	movs	r3, #1
 8015ada:	617b      	str	r3, [r7, #20]
 8015adc:	e001      	b.n	8015ae2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8015ade:	2300      	movs	r3, #0
 8015ae0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8015ae2:	697b      	ldr	r3, [r7, #20]
 8015ae4:	2b01      	cmp	r3, #1
 8015ae6:	d11b      	bne.n	8015b20 <vTaskStartScheduler+0x8c>
	__asm volatile
 8015ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015aec:	f383 8811 	msr	BASEPRI, r3
 8015af0:	f3bf 8f6f 	isb	sy
 8015af4:	f3bf 8f4f 	dsb	sy
 8015af8:	613b      	str	r3, [r7, #16]
}
 8015afa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8015afc:	4b15      	ldr	r3, [pc, #84]	; (8015b54 <vTaskStartScheduler+0xc0>)
 8015afe:	681b      	ldr	r3, [r3, #0]
 8015b00:	334c      	adds	r3, #76	; 0x4c
 8015b02:	4a15      	ldr	r2, [pc, #84]	; (8015b58 <vTaskStartScheduler+0xc4>)
 8015b04:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015b06:	4b15      	ldr	r3, [pc, #84]	; (8015b5c <vTaskStartScheduler+0xc8>)
 8015b08:	f04f 32ff 	mov.w	r2, #4294967295
 8015b0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015b0e:	4b14      	ldr	r3, [pc, #80]	; (8015b60 <vTaskStartScheduler+0xcc>)
 8015b10:	2201      	movs	r2, #1
 8015b12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8015b14:	4b13      	ldr	r3, [pc, #76]	; (8015b64 <vTaskStartScheduler+0xd0>)
 8015b16:	2200      	movs	r2, #0
 8015b18:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015b1a:	f000 fe99 	bl	8016850 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015b1e:	e00e      	b.n	8015b3e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015b20:	697b      	ldr	r3, [r7, #20]
 8015b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b26:	d10a      	bne.n	8015b3e <vTaskStartScheduler+0xaa>
	__asm volatile
 8015b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b2c:	f383 8811 	msr	BASEPRI, r3
 8015b30:	f3bf 8f6f 	isb	sy
 8015b34:	f3bf 8f4f 	dsb	sy
 8015b38:	60fb      	str	r3, [r7, #12]
}
 8015b3a:	bf00      	nop
 8015b3c:	e7fe      	b.n	8015b3c <vTaskStartScheduler+0xa8>
}
 8015b3e:	bf00      	nop
 8015b40:	3718      	adds	r7, #24
 8015b42:	46bd      	mov	sp, r7
 8015b44:	bd80      	pop	{r7, pc}
 8015b46:	bf00      	nop
 8015b48:	0801d1d4 	.word	0x0801d1d4
 8015b4c:	08016149 	.word	0x08016149
 8015b50:	20003ab0 	.word	0x20003ab0
 8015b54:	2000398c 	.word	0x2000398c
 8015b58:	20000198 	.word	0x20000198
 8015b5c:	20003aac 	.word	0x20003aac
 8015b60:	20003a98 	.word	0x20003a98
 8015b64:	20003a90 	.word	0x20003a90

08015b68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015b68:	b480      	push	{r7}
 8015b6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8015b6c:	4b04      	ldr	r3, [pc, #16]	; (8015b80 <vTaskSuspendAll+0x18>)
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	3301      	adds	r3, #1
 8015b72:	4a03      	ldr	r2, [pc, #12]	; (8015b80 <vTaskSuspendAll+0x18>)
 8015b74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8015b76:	bf00      	nop
 8015b78:	46bd      	mov	sp, r7
 8015b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b7e:	4770      	bx	lr
 8015b80:	20003ab4 	.word	0x20003ab4

08015b84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015b84:	b580      	push	{r7, lr}
 8015b86:	b084      	sub	sp, #16
 8015b88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015b8a:	2300      	movs	r3, #0
 8015b8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015b8e:	2300      	movs	r3, #0
 8015b90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8015b92:	4b41      	ldr	r3, [pc, #260]	; (8015c98 <xTaskResumeAll+0x114>)
 8015b94:	681b      	ldr	r3, [r3, #0]
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d10a      	bne.n	8015bb0 <xTaskResumeAll+0x2c>
	__asm volatile
 8015b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b9e:	f383 8811 	msr	BASEPRI, r3
 8015ba2:	f3bf 8f6f 	isb	sy
 8015ba6:	f3bf 8f4f 	dsb	sy
 8015baa:	603b      	str	r3, [r7, #0]
}
 8015bac:	bf00      	nop
 8015bae:	e7fe      	b.n	8015bae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015bb0:	f000 fef0 	bl	8016994 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8015bb4:	4b38      	ldr	r3, [pc, #224]	; (8015c98 <xTaskResumeAll+0x114>)
 8015bb6:	681b      	ldr	r3, [r3, #0]
 8015bb8:	3b01      	subs	r3, #1
 8015bba:	4a37      	ldr	r2, [pc, #220]	; (8015c98 <xTaskResumeAll+0x114>)
 8015bbc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015bbe:	4b36      	ldr	r3, [pc, #216]	; (8015c98 <xTaskResumeAll+0x114>)
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d161      	bne.n	8015c8a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8015bc6:	4b35      	ldr	r3, [pc, #212]	; (8015c9c <xTaskResumeAll+0x118>)
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d05d      	beq.n	8015c8a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015bce:	e02e      	b.n	8015c2e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015bd0:	4b33      	ldr	r3, [pc, #204]	; (8015ca0 <xTaskResumeAll+0x11c>)
 8015bd2:	68db      	ldr	r3, [r3, #12]
 8015bd4:	68db      	ldr	r3, [r3, #12]
 8015bd6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015bd8:	68fb      	ldr	r3, [r7, #12]
 8015bda:	3318      	adds	r3, #24
 8015bdc:	4618      	mov	r0, r3
 8015bde:	f7fe fe0f 	bl	8014800 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	3304      	adds	r3, #4
 8015be6:	4618      	mov	r0, r3
 8015be8:	f7fe fe0a 	bl	8014800 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015bec:	68fb      	ldr	r3, [r7, #12]
 8015bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015bf0:	2201      	movs	r2, #1
 8015bf2:	409a      	lsls	r2, r3
 8015bf4:	4b2b      	ldr	r3, [pc, #172]	; (8015ca4 <xTaskResumeAll+0x120>)
 8015bf6:	681b      	ldr	r3, [r3, #0]
 8015bf8:	4313      	orrs	r3, r2
 8015bfa:	4a2a      	ldr	r2, [pc, #168]	; (8015ca4 <xTaskResumeAll+0x120>)
 8015bfc:	6013      	str	r3, [r2, #0]
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c02:	4613      	mov	r3, r2
 8015c04:	009b      	lsls	r3, r3, #2
 8015c06:	4413      	add	r3, r2
 8015c08:	009b      	lsls	r3, r3, #2
 8015c0a:	4a27      	ldr	r2, [pc, #156]	; (8015ca8 <xTaskResumeAll+0x124>)
 8015c0c:	441a      	add	r2, r3
 8015c0e:	68fb      	ldr	r3, [r7, #12]
 8015c10:	3304      	adds	r3, #4
 8015c12:	4619      	mov	r1, r3
 8015c14:	4610      	mov	r0, r2
 8015c16:	f7fe fd96 	bl	8014746 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c1e:	4b23      	ldr	r3, [pc, #140]	; (8015cac <xTaskResumeAll+0x128>)
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c24:	429a      	cmp	r2, r3
 8015c26:	d302      	bcc.n	8015c2e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8015c28:	4b21      	ldr	r3, [pc, #132]	; (8015cb0 <xTaskResumeAll+0x12c>)
 8015c2a:	2201      	movs	r2, #1
 8015c2c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015c2e:	4b1c      	ldr	r3, [pc, #112]	; (8015ca0 <xTaskResumeAll+0x11c>)
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d1cc      	bne.n	8015bd0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d001      	beq.n	8015c40 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8015c3c:	f000 fb3e 	bl	80162bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8015c40:	4b1c      	ldr	r3, [pc, #112]	; (8015cb4 <xTaskResumeAll+0x130>)
 8015c42:	681b      	ldr	r3, [r3, #0]
 8015c44:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d010      	beq.n	8015c6e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8015c4c:	f000 f858 	bl	8015d00 <xTaskIncrementTick>
 8015c50:	4603      	mov	r3, r0
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d002      	beq.n	8015c5c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8015c56:	4b16      	ldr	r3, [pc, #88]	; (8015cb0 <xTaskResumeAll+0x12c>)
 8015c58:	2201      	movs	r2, #1
 8015c5a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	3b01      	subs	r3, #1
 8015c60:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d1f1      	bne.n	8015c4c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8015c68:	4b12      	ldr	r3, [pc, #72]	; (8015cb4 <xTaskResumeAll+0x130>)
 8015c6a:	2200      	movs	r2, #0
 8015c6c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015c6e:	4b10      	ldr	r3, [pc, #64]	; (8015cb0 <xTaskResumeAll+0x12c>)
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d009      	beq.n	8015c8a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015c76:	2301      	movs	r3, #1
 8015c78:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015c7a:	4b0f      	ldr	r3, [pc, #60]	; (8015cb8 <xTaskResumeAll+0x134>)
 8015c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c80:	601a      	str	r2, [r3, #0]
 8015c82:	f3bf 8f4f 	dsb	sy
 8015c86:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015c8a:	f000 feb3 	bl	80169f4 <vPortExitCritical>

	return xAlreadyYielded;
 8015c8e:	68bb      	ldr	r3, [r7, #8]
}
 8015c90:	4618      	mov	r0, r3
 8015c92:	3710      	adds	r7, #16
 8015c94:	46bd      	mov	sp, r7
 8015c96:	bd80      	pop	{r7, pc}
 8015c98:	20003ab4 	.word	0x20003ab4
 8015c9c:	20003a8c 	.word	0x20003a8c
 8015ca0:	20003a4c 	.word	0x20003a4c
 8015ca4:	20003a94 	.word	0x20003a94
 8015ca8:	20003990 	.word	0x20003990
 8015cac:	2000398c 	.word	0x2000398c
 8015cb0:	20003aa0 	.word	0x20003aa0
 8015cb4:	20003a9c 	.word	0x20003a9c
 8015cb8:	e000ed04 	.word	0xe000ed04

08015cbc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015cbc:	b480      	push	{r7}
 8015cbe:	b083      	sub	sp, #12
 8015cc0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8015cc2:	4b05      	ldr	r3, [pc, #20]	; (8015cd8 <xTaskGetTickCount+0x1c>)
 8015cc4:	681b      	ldr	r3, [r3, #0]
 8015cc6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8015cc8:	687b      	ldr	r3, [r7, #4]
}
 8015cca:	4618      	mov	r0, r3
 8015ccc:	370c      	adds	r7, #12
 8015cce:	46bd      	mov	sp, r7
 8015cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cd4:	4770      	bx	lr
 8015cd6:	bf00      	nop
 8015cd8:	20003a90 	.word	0x20003a90

08015cdc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8015cdc:	b580      	push	{r7, lr}
 8015cde:	b082      	sub	sp, #8
 8015ce0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015ce2:	f000 ff39 	bl	8016b58 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8015ce6:	2300      	movs	r3, #0
 8015ce8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8015cea:	4b04      	ldr	r3, [pc, #16]	; (8015cfc <xTaskGetTickCountFromISR+0x20>)
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015cf0:	683b      	ldr	r3, [r7, #0]
}
 8015cf2:	4618      	mov	r0, r3
 8015cf4:	3708      	adds	r7, #8
 8015cf6:	46bd      	mov	sp, r7
 8015cf8:	bd80      	pop	{r7, pc}
 8015cfa:	bf00      	nop
 8015cfc:	20003a90 	.word	0x20003a90

08015d00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015d00:	b580      	push	{r7, lr}
 8015d02:	b086      	sub	sp, #24
 8015d04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015d06:	2300      	movs	r3, #0
 8015d08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015d0a:	4b4e      	ldr	r3, [pc, #312]	; (8015e44 <xTaskIncrementTick+0x144>)
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	f040 808e 	bne.w	8015e30 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015d14:	4b4c      	ldr	r3, [pc, #304]	; (8015e48 <xTaskIncrementTick+0x148>)
 8015d16:	681b      	ldr	r3, [r3, #0]
 8015d18:	3301      	adds	r3, #1
 8015d1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015d1c:	4a4a      	ldr	r2, [pc, #296]	; (8015e48 <xTaskIncrementTick+0x148>)
 8015d1e:	693b      	ldr	r3, [r7, #16]
 8015d20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015d22:	693b      	ldr	r3, [r7, #16]
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d120      	bne.n	8015d6a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8015d28:	4b48      	ldr	r3, [pc, #288]	; (8015e4c <xTaskIncrementTick+0x14c>)
 8015d2a:	681b      	ldr	r3, [r3, #0]
 8015d2c:	681b      	ldr	r3, [r3, #0]
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d00a      	beq.n	8015d48 <xTaskIncrementTick+0x48>
	__asm volatile
 8015d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d36:	f383 8811 	msr	BASEPRI, r3
 8015d3a:	f3bf 8f6f 	isb	sy
 8015d3e:	f3bf 8f4f 	dsb	sy
 8015d42:	603b      	str	r3, [r7, #0]
}
 8015d44:	bf00      	nop
 8015d46:	e7fe      	b.n	8015d46 <xTaskIncrementTick+0x46>
 8015d48:	4b40      	ldr	r3, [pc, #256]	; (8015e4c <xTaskIncrementTick+0x14c>)
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	60fb      	str	r3, [r7, #12]
 8015d4e:	4b40      	ldr	r3, [pc, #256]	; (8015e50 <xTaskIncrementTick+0x150>)
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	4a3e      	ldr	r2, [pc, #248]	; (8015e4c <xTaskIncrementTick+0x14c>)
 8015d54:	6013      	str	r3, [r2, #0]
 8015d56:	4a3e      	ldr	r2, [pc, #248]	; (8015e50 <xTaskIncrementTick+0x150>)
 8015d58:	68fb      	ldr	r3, [r7, #12]
 8015d5a:	6013      	str	r3, [r2, #0]
 8015d5c:	4b3d      	ldr	r3, [pc, #244]	; (8015e54 <xTaskIncrementTick+0x154>)
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	3301      	adds	r3, #1
 8015d62:	4a3c      	ldr	r2, [pc, #240]	; (8015e54 <xTaskIncrementTick+0x154>)
 8015d64:	6013      	str	r3, [r2, #0]
 8015d66:	f000 faa9 	bl	80162bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015d6a:	4b3b      	ldr	r3, [pc, #236]	; (8015e58 <xTaskIncrementTick+0x158>)
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	693a      	ldr	r2, [r7, #16]
 8015d70:	429a      	cmp	r2, r3
 8015d72:	d348      	bcc.n	8015e06 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015d74:	4b35      	ldr	r3, [pc, #212]	; (8015e4c <xTaskIncrementTick+0x14c>)
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d104      	bne.n	8015d88 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015d7e:	4b36      	ldr	r3, [pc, #216]	; (8015e58 <xTaskIncrementTick+0x158>)
 8015d80:	f04f 32ff 	mov.w	r2, #4294967295
 8015d84:	601a      	str	r2, [r3, #0]
					break;
 8015d86:	e03e      	b.n	8015e06 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015d88:	4b30      	ldr	r3, [pc, #192]	; (8015e4c <xTaskIncrementTick+0x14c>)
 8015d8a:	681b      	ldr	r3, [r3, #0]
 8015d8c:	68db      	ldr	r3, [r3, #12]
 8015d8e:	68db      	ldr	r3, [r3, #12]
 8015d90:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015d92:	68bb      	ldr	r3, [r7, #8]
 8015d94:	685b      	ldr	r3, [r3, #4]
 8015d96:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015d98:	693a      	ldr	r2, [r7, #16]
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	429a      	cmp	r2, r3
 8015d9e:	d203      	bcs.n	8015da8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015da0:	4a2d      	ldr	r2, [pc, #180]	; (8015e58 <xTaskIncrementTick+0x158>)
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015da6:	e02e      	b.n	8015e06 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015da8:	68bb      	ldr	r3, [r7, #8]
 8015daa:	3304      	adds	r3, #4
 8015dac:	4618      	mov	r0, r3
 8015dae:	f7fe fd27 	bl	8014800 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015db2:	68bb      	ldr	r3, [r7, #8]
 8015db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d004      	beq.n	8015dc4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015dba:	68bb      	ldr	r3, [r7, #8]
 8015dbc:	3318      	adds	r3, #24
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	f7fe fd1e 	bl	8014800 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015dc4:	68bb      	ldr	r3, [r7, #8]
 8015dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015dc8:	2201      	movs	r2, #1
 8015dca:	409a      	lsls	r2, r3
 8015dcc:	4b23      	ldr	r3, [pc, #140]	; (8015e5c <xTaskIncrementTick+0x15c>)
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	4313      	orrs	r3, r2
 8015dd2:	4a22      	ldr	r2, [pc, #136]	; (8015e5c <xTaskIncrementTick+0x15c>)
 8015dd4:	6013      	str	r3, [r2, #0]
 8015dd6:	68bb      	ldr	r3, [r7, #8]
 8015dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015dda:	4613      	mov	r3, r2
 8015ddc:	009b      	lsls	r3, r3, #2
 8015dde:	4413      	add	r3, r2
 8015de0:	009b      	lsls	r3, r3, #2
 8015de2:	4a1f      	ldr	r2, [pc, #124]	; (8015e60 <xTaskIncrementTick+0x160>)
 8015de4:	441a      	add	r2, r3
 8015de6:	68bb      	ldr	r3, [r7, #8]
 8015de8:	3304      	adds	r3, #4
 8015dea:	4619      	mov	r1, r3
 8015dec:	4610      	mov	r0, r2
 8015dee:	f7fe fcaa 	bl	8014746 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015df2:	68bb      	ldr	r3, [r7, #8]
 8015df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015df6:	4b1b      	ldr	r3, [pc, #108]	; (8015e64 <xTaskIncrementTick+0x164>)
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015dfc:	429a      	cmp	r2, r3
 8015dfe:	d3b9      	bcc.n	8015d74 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8015e00:	2301      	movs	r3, #1
 8015e02:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015e04:	e7b6      	b.n	8015d74 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015e06:	4b17      	ldr	r3, [pc, #92]	; (8015e64 <xTaskIncrementTick+0x164>)
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015e0c:	4914      	ldr	r1, [pc, #80]	; (8015e60 <xTaskIncrementTick+0x160>)
 8015e0e:	4613      	mov	r3, r2
 8015e10:	009b      	lsls	r3, r3, #2
 8015e12:	4413      	add	r3, r2
 8015e14:	009b      	lsls	r3, r3, #2
 8015e16:	440b      	add	r3, r1
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	2b01      	cmp	r3, #1
 8015e1c:	d901      	bls.n	8015e22 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8015e1e:	2301      	movs	r3, #1
 8015e20:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8015e22:	4b11      	ldr	r3, [pc, #68]	; (8015e68 <xTaskIncrementTick+0x168>)
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d007      	beq.n	8015e3a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8015e2a:	2301      	movs	r3, #1
 8015e2c:	617b      	str	r3, [r7, #20]
 8015e2e:	e004      	b.n	8015e3a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8015e30:	4b0e      	ldr	r3, [pc, #56]	; (8015e6c <xTaskIncrementTick+0x16c>)
 8015e32:	681b      	ldr	r3, [r3, #0]
 8015e34:	3301      	adds	r3, #1
 8015e36:	4a0d      	ldr	r2, [pc, #52]	; (8015e6c <xTaskIncrementTick+0x16c>)
 8015e38:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8015e3a:	697b      	ldr	r3, [r7, #20]
}
 8015e3c:	4618      	mov	r0, r3
 8015e3e:	3718      	adds	r7, #24
 8015e40:	46bd      	mov	sp, r7
 8015e42:	bd80      	pop	{r7, pc}
 8015e44:	20003ab4 	.word	0x20003ab4
 8015e48:	20003a90 	.word	0x20003a90
 8015e4c:	20003a44 	.word	0x20003a44
 8015e50:	20003a48 	.word	0x20003a48
 8015e54:	20003aa4 	.word	0x20003aa4
 8015e58:	20003aac 	.word	0x20003aac
 8015e5c:	20003a94 	.word	0x20003a94
 8015e60:	20003990 	.word	0x20003990
 8015e64:	2000398c 	.word	0x2000398c
 8015e68:	20003aa0 	.word	0x20003aa0
 8015e6c:	20003a9c 	.word	0x20003a9c

08015e70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015e70:	b480      	push	{r7}
 8015e72:	b087      	sub	sp, #28
 8015e74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015e76:	4b29      	ldr	r3, [pc, #164]	; (8015f1c <vTaskSwitchContext+0xac>)
 8015e78:	681b      	ldr	r3, [r3, #0]
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d003      	beq.n	8015e86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015e7e:	4b28      	ldr	r3, [pc, #160]	; (8015f20 <vTaskSwitchContext+0xb0>)
 8015e80:	2201      	movs	r2, #1
 8015e82:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015e84:	e044      	b.n	8015f10 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8015e86:	4b26      	ldr	r3, [pc, #152]	; (8015f20 <vTaskSwitchContext+0xb0>)
 8015e88:	2200      	movs	r2, #0
 8015e8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015e8c:	4b25      	ldr	r3, [pc, #148]	; (8015f24 <vTaskSwitchContext+0xb4>)
 8015e8e:	681b      	ldr	r3, [r3, #0]
 8015e90:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	fab3 f383 	clz	r3, r3
 8015e98:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8015e9a:	7afb      	ldrb	r3, [r7, #11]
 8015e9c:	f1c3 031f 	rsb	r3, r3, #31
 8015ea0:	617b      	str	r3, [r7, #20]
 8015ea2:	4921      	ldr	r1, [pc, #132]	; (8015f28 <vTaskSwitchContext+0xb8>)
 8015ea4:	697a      	ldr	r2, [r7, #20]
 8015ea6:	4613      	mov	r3, r2
 8015ea8:	009b      	lsls	r3, r3, #2
 8015eaa:	4413      	add	r3, r2
 8015eac:	009b      	lsls	r3, r3, #2
 8015eae:	440b      	add	r3, r1
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d10a      	bne.n	8015ecc <vTaskSwitchContext+0x5c>
	__asm volatile
 8015eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015eba:	f383 8811 	msr	BASEPRI, r3
 8015ebe:	f3bf 8f6f 	isb	sy
 8015ec2:	f3bf 8f4f 	dsb	sy
 8015ec6:	607b      	str	r3, [r7, #4]
}
 8015ec8:	bf00      	nop
 8015eca:	e7fe      	b.n	8015eca <vTaskSwitchContext+0x5a>
 8015ecc:	697a      	ldr	r2, [r7, #20]
 8015ece:	4613      	mov	r3, r2
 8015ed0:	009b      	lsls	r3, r3, #2
 8015ed2:	4413      	add	r3, r2
 8015ed4:	009b      	lsls	r3, r3, #2
 8015ed6:	4a14      	ldr	r2, [pc, #80]	; (8015f28 <vTaskSwitchContext+0xb8>)
 8015ed8:	4413      	add	r3, r2
 8015eda:	613b      	str	r3, [r7, #16]
 8015edc:	693b      	ldr	r3, [r7, #16]
 8015ede:	685b      	ldr	r3, [r3, #4]
 8015ee0:	685a      	ldr	r2, [r3, #4]
 8015ee2:	693b      	ldr	r3, [r7, #16]
 8015ee4:	605a      	str	r2, [r3, #4]
 8015ee6:	693b      	ldr	r3, [r7, #16]
 8015ee8:	685a      	ldr	r2, [r3, #4]
 8015eea:	693b      	ldr	r3, [r7, #16]
 8015eec:	3308      	adds	r3, #8
 8015eee:	429a      	cmp	r2, r3
 8015ef0:	d104      	bne.n	8015efc <vTaskSwitchContext+0x8c>
 8015ef2:	693b      	ldr	r3, [r7, #16]
 8015ef4:	685b      	ldr	r3, [r3, #4]
 8015ef6:	685a      	ldr	r2, [r3, #4]
 8015ef8:	693b      	ldr	r3, [r7, #16]
 8015efa:	605a      	str	r2, [r3, #4]
 8015efc:	693b      	ldr	r3, [r7, #16]
 8015efe:	685b      	ldr	r3, [r3, #4]
 8015f00:	68db      	ldr	r3, [r3, #12]
 8015f02:	4a0a      	ldr	r2, [pc, #40]	; (8015f2c <vTaskSwitchContext+0xbc>)
 8015f04:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8015f06:	4b09      	ldr	r3, [pc, #36]	; (8015f2c <vTaskSwitchContext+0xbc>)
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	334c      	adds	r3, #76	; 0x4c
 8015f0c:	4a08      	ldr	r2, [pc, #32]	; (8015f30 <vTaskSwitchContext+0xc0>)
 8015f0e:	6013      	str	r3, [r2, #0]
}
 8015f10:	bf00      	nop
 8015f12:	371c      	adds	r7, #28
 8015f14:	46bd      	mov	sp, r7
 8015f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f1a:	4770      	bx	lr
 8015f1c:	20003ab4 	.word	0x20003ab4
 8015f20:	20003aa0 	.word	0x20003aa0
 8015f24:	20003a94 	.word	0x20003a94
 8015f28:	20003990 	.word	0x20003990
 8015f2c:	2000398c 	.word	0x2000398c
 8015f30:	20000198 	.word	0x20000198

08015f34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015f34:	b580      	push	{r7, lr}
 8015f36:	b084      	sub	sp, #16
 8015f38:	af00      	add	r7, sp, #0
 8015f3a:	6078      	str	r0, [r7, #4]
 8015f3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d10a      	bne.n	8015f5a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8015f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f48:	f383 8811 	msr	BASEPRI, r3
 8015f4c:	f3bf 8f6f 	isb	sy
 8015f50:	f3bf 8f4f 	dsb	sy
 8015f54:	60fb      	str	r3, [r7, #12]
}
 8015f56:	bf00      	nop
 8015f58:	e7fe      	b.n	8015f58 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015f5a:	4b07      	ldr	r3, [pc, #28]	; (8015f78 <vTaskPlaceOnEventList+0x44>)
 8015f5c:	681b      	ldr	r3, [r3, #0]
 8015f5e:	3318      	adds	r3, #24
 8015f60:	4619      	mov	r1, r3
 8015f62:	6878      	ldr	r0, [r7, #4]
 8015f64:	f7fe fc13 	bl	801478e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015f68:	2101      	movs	r1, #1
 8015f6a:	6838      	ldr	r0, [r7, #0]
 8015f6c:	f000 fb82 	bl	8016674 <prvAddCurrentTaskToDelayedList>
}
 8015f70:	bf00      	nop
 8015f72:	3710      	adds	r7, #16
 8015f74:	46bd      	mov	sp, r7
 8015f76:	bd80      	pop	{r7, pc}
 8015f78:	2000398c 	.word	0x2000398c

08015f7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015f7c:	b580      	push	{r7, lr}
 8015f7e:	b086      	sub	sp, #24
 8015f80:	af00      	add	r7, sp, #0
 8015f82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	68db      	ldr	r3, [r3, #12]
 8015f88:	68db      	ldr	r3, [r3, #12]
 8015f8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015f8c:	693b      	ldr	r3, [r7, #16]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d10a      	bne.n	8015fa8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8015f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f96:	f383 8811 	msr	BASEPRI, r3
 8015f9a:	f3bf 8f6f 	isb	sy
 8015f9e:	f3bf 8f4f 	dsb	sy
 8015fa2:	60fb      	str	r3, [r7, #12]
}
 8015fa4:	bf00      	nop
 8015fa6:	e7fe      	b.n	8015fa6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015fa8:	693b      	ldr	r3, [r7, #16]
 8015faa:	3318      	adds	r3, #24
 8015fac:	4618      	mov	r0, r3
 8015fae:	f7fe fc27 	bl	8014800 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015fb2:	4b1d      	ldr	r3, [pc, #116]	; (8016028 <xTaskRemoveFromEventList+0xac>)
 8015fb4:	681b      	ldr	r3, [r3, #0]
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d11c      	bne.n	8015ff4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015fba:	693b      	ldr	r3, [r7, #16]
 8015fbc:	3304      	adds	r3, #4
 8015fbe:	4618      	mov	r0, r3
 8015fc0:	f7fe fc1e 	bl	8014800 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015fc4:	693b      	ldr	r3, [r7, #16]
 8015fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015fc8:	2201      	movs	r2, #1
 8015fca:	409a      	lsls	r2, r3
 8015fcc:	4b17      	ldr	r3, [pc, #92]	; (801602c <xTaskRemoveFromEventList+0xb0>)
 8015fce:	681b      	ldr	r3, [r3, #0]
 8015fd0:	4313      	orrs	r3, r2
 8015fd2:	4a16      	ldr	r2, [pc, #88]	; (801602c <xTaskRemoveFromEventList+0xb0>)
 8015fd4:	6013      	str	r3, [r2, #0]
 8015fd6:	693b      	ldr	r3, [r7, #16]
 8015fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015fda:	4613      	mov	r3, r2
 8015fdc:	009b      	lsls	r3, r3, #2
 8015fde:	4413      	add	r3, r2
 8015fe0:	009b      	lsls	r3, r3, #2
 8015fe2:	4a13      	ldr	r2, [pc, #76]	; (8016030 <xTaskRemoveFromEventList+0xb4>)
 8015fe4:	441a      	add	r2, r3
 8015fe6:	693b      	ldr	r3, [r7, #16]
 8015fe8:	3304      	adds	r3, #4
 8015fea:	4619      	mov	r1, r3
 8015fec:	4610      	mov	r0, r2
 8015fee:	f7fe fbaa 	bl	8014746 <vListInsertEnd>
 8015ff2:	e005      	b.n	8016000 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015ff4:	693b      	ldr	r3, [r7, #16]
 8015ff6:	3318      	adds	r3, #24
 8015ff8:	4619      	mov	r1, r3
 8015ffa:	480e      	ldr	r0, [pc, #56]	; (8016034 <xTaskRemoveFromEventList+0xb8>)
 8015ffc:	f7fe fba3 	bl	8014746 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016000:	693b      	ldr	r3, [r7, #16]
 8016002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016004:	4b0c      	ldr	r3, [pc, #48]	; (8016038 <xTaskRemoveFromEventList+0xbc>)
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801600a:	429a      	cmp	r2, r3
 801600c:	d905      	bls.n	801601a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801600e:	2301      	movs	r3, #1
 8016010:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016012:	4b0a      	ldr	r3, [pc, #40]	; (801603c <xTaskRemoveFromEventList+0xc0>)
 8016014:	2201      	movs	r2, #1
 8016016:	601a      	str	r2, [r3, #0]
 8016018:	e001      	b.n	801601e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 801601a:	2300      	movs	r3, #0
 801601c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801601e:	697b      	ldr	r3, [r7, #20]
}
 8016020:	4618      	mov	r0, r3
 8016022:	3718      	adds	r7, #24
 8016024:	46bd      	mov	sp, r7
 8016026:	bd80      	pop	{r7, pc}
 8016028:	20003ab4 	.word	0x20003ab4
 801602c:	20003a94 	.word	0x20003a94
 8016030:	20003990 	.word	0x20003990
 8016034:	20003a4c 	.word	0x20003a4c
 8016038:	2000398c 	.word	0x2000398c
 801603c:	20003aa0 	.word	0x20003aa0

08016040 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016040:	b480      	push	{r7}
 8016042:	b083      	sub	sp, #12
 8016044:	af00      	add	r7, sp, #0
 8016046:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016048:	4b06      	ldr	r3, [pc, #24]	; (8016064 <vTaskInternalSetTimeOutState+0x24>)
 801604a:	681a      	ldr	r2, [r3, #0]
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016050:	4b05      	ldr	r3, [pc, #20]	; (8016068 <vTaskInternalSetTimeOutState+0x28>)
 8016052:	681a      	ldr	r2, [r3, #0]
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	605a      	str	r2, [r3, #4]
}
 8016058:	bf00      	nop
 801605a:	370c      	adds	r7, #12
 801605c:	46bd      	mov	sp, r7
 801605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016062:	4770      	bx	lr
 8016064:	20003aa4 	.word	0x20003aa4
 8016068:	20003a90 	.word	0x20003a90

0801606c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801606c:	b580      	push	{r7, lr}
 801606e:	b088      	sub	sp, #32
 8016070:	af00      	add	r7, sp, #0
 8016072:	6078      	str	r0, [r7, #4]
 8016074:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	2b00      	cmp	r3, #0
 801607a:	d10a      	bne.n	8016092 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801607c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016080:	f383 8811 	msr	BASEPRI, r3
 8016084:	f3bf 8f6f 	isb	sy
 8016088:	f3bf 8f4f 	dsb	sy
 801608c:	613b      	str	r3, [r7, #16]
}
 801608e:	bf00      	nop
 8016090:	e7fe      	b.n	8016090 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8016092:	683b      	ldr	r3, [r7, #0]
 8016094:	2b00      	cmp	r3, #0
 8016096:	d10a      	bne.n	80160ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8016098:	f04f 0350 	mov.w	r3, #80	; 0x50
 801609c:	f383 8811 	msr	BASEPRI, r3
 80160a0:	f3bf 8f6f 	isb	sy
 80160a4:	f3bf 8f4f 	dsb	sy
 80160a8:	60fb      	str	r3, [r7, #12]
}
 80160aa:	bf00      	nop
 80160ac:	e7fe      	b.n	80160ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80160ae:	f000 fc71 	bl	8016994 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80160b2:	4b1d      	ldr	r3, [pc, #116]	; (8016128 <xTaskCheckForTimeOut+0xbc>)
 80160b4:	681b      	ldr	r3, [r3, #0]
 80160b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	685b      	ldr	r3, [r3, #4]
 80160bc:	69ba      	ldr	r2, [r7, #24]
 80160be:	1ad3      	subs	r3, r2, r3
 80160c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80160c2:	683b      	ldr	r3, [r7, #0]
 80160c4:	681b      	ldr	r3, [r3, #0]
 80160c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80160ca:	d102      	bne.n	80160d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80160cc:	2300      	movs	r3, #0
 80160ce:	61fb      	str	r3, [r7, #28]
 80160d0:	e023      	b.n	801611a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	681a      	ldr	r2, [r3, #0]
 80160d6:	4b15      	ldr	r3, [pc, #84]	; (801612c <xTaskCheckForTimeOut+0xc0>)
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	429a      	cmp	r2, r3
 80160dc:	d007      	beq.n	80160ee <xTaskCheckForTimeOut+0x82>
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	685b      	ldr	r3, [r3, #4]
 80160e2:	69ba      	ldr	r2, [r7, #24]
 80160e4:	429a      	cmp	r2, r3
 80160e6:	d302      	bcc.n	80160ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80160e8:	2301      	movs	r3, #1
 80160ea:	61fb      	str	r3, [r7, #28]
 80160ec:	e015      	b.n	801611a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80160ee:	683b      	ldr	r3, [r7, #0]
 80160f0:	681b      	ldr	r3, [r3, #0]
 80160f2:	697a      	ldr	r2, [r7, #20]
 80160f4:	429a      	cmp	r2, r3
 80160f6:	d20b      	bcs.n	8016110 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80160f8:	683b      	ldr	r3, [r7, #0]
 80160fa:	681a      	ldr	r2, [r3, #0]
 80160fc:	697b      	ldr	r3, [r7, #20]
 80160fe:	1ad2      	subs	r2, r2, r3
 8016100:	683b      	ldr	r3, [r7, #0]
 8016102:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8016104:	6878      	ldr	r0, [r7, #4]
 8016106:	f7ff ff9b 	bl	8016040 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801610a:	2300      	movs	r3, #0
 801610c:	61fb      	str	r3, [r7, #28]
 801610e:	e004      	b.n	801611a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8016110:	683b      	ldr	r3, [r7, #0]
 8016112:	2200      	movs	r2, #0
 8016114:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8016116:	2301      	movs	r3, #1
 8016118:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801611a:	f000 fc6b 	bl	80169f4 <vPortExitCritical>

	return xReturn;
 801611e:	69fb      	ldr	r3, [r7, #28]
}
 8016120:	4618      	mov	r0, r3
 8016122:	3720      	adds	r7, #32
 8016124:	46bd      	mov	sp, r7
 8016126:	bd80      	pop	{r7, pc}
 8016128:	20003a90 	.word	0x20003a90
 801612c:	20003aa4 	.word	0x20003aa4

08016130 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016130:	b480      	push	{r7}
 8016132:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016134:	4b03      	ldr	r3, [pc, #12]	; (8016144 <vTaskMissedYield+0x14>)
 8016136:	2201      	movs	r2, #1
 8016138:	601a      	str	r2, [r3, #0]
}
 801613a:	bf00      	nop
 801613c:	46bd      	mov	sp, r7
 801613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016142:	4770      	bx	lr
 8016144:	20003aa0 	.word	0x20003aa0

08016148 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016148:	b580      	push	{r7, lr}
 801614a:	b082      	sub	sp, #8
 801614c:	af00      	add	r7, sp, #0
 801614e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016150:	f000 f852 	bl	80161f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016154:	4b06      	ldr	r3, [pc, #24]	; (8016170 <prvIdleTask+0x28>)
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	2b01      	cmp	r3, #1
 801615a:	d9f9      	bls.n	8016150 <prvIdleTask+0x8>
			{
				taskYIELD();
 801615c:	4b05      	ldr	r3, [pc, #20]	; (8016174 <prvIdleTask+0x2c>)
 801615e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016162:	601a      	str	r2, [r3, #0]
 8016164:	f3bf 8f4f 	dsb	sy
 8016168:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801616c:	e7f0      	b.n	8016150 <prvIdleTask+0x8>
 801616e:	bf00      	nop
 8016170:	20003990 	.word	0x20003990
 8016174:	e000ed04 	.word	0xe000ed04

08016178 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016178:	b580      	push	{r7, lr}
 801617a:	b082      	sub	sp, #8
 801617c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801617e:	2300      	movs	r3, #0
 8016180:	607b      	str	r3, [r7, #4]
 8016182:	e00c      	b.n	801619e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016184:	687a      	ldr	r2, [r7, #4]
 8016186:	4613      	mov	r3, r2
 8016188:	009b      	lsls	r3, r3, #2
 801618a:	4413      	add	r3, r2
 801618c:	009b      	lsls	r3, r3, #2
 801618e:	4a12      	ldr	r2, [pc, #72]	; (80161d8 <prvInitialiseTaskLists+0x60>)
 8016190:	4413      	add	r3, r2
 8016192:	4618      	mov	r0, r3
 8016194:	f7fe faaa 	bl	80146ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	3301      	adds	r3, #1
 801619c:	607b      	str	r3, [r7, #4]
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	2b06      	cmp	r3, #6
 80161a2:	d9ef      	bls.n	8016184 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80161a4:	480d      	ldr	r0, [pc, #52]	; (80161dc <prvInitialiseTaskLists+0x64>)
 80161a6:	f7fe faa1 	bl	80146ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80161aa:	480d      	ldr	r0, [pc, #52]	; (80161e0 <prvInitialiseTaskLists+0x68>)
 80161ac:	f7fe fa9e 	bl	80146ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80161b0:	480c      	ldr	r0, [pc, #48]	; (80161e4 <prvInitialiseTaskLists+0x6c>)
 80161b2:	f7fe fa9b 	bl	80146ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80161b6:	480c      	ldr	r0, [pc, #48]	; (80161e8 <prvInitialiseTaskLists+0x70>)
 80161b8:	f7fe fa98 	bl	80146ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80161bc:	480b      	ldr	r0, [pc, #44]	; (80161ec <prvInitialiseTaskLists+0x74>)
 80161be:	f7fe fa95 	bl	80146ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80161c2:	4b0b      	ldr	r3, [pc, #44]	; (80161f0 <prvInitialiseTaskLists+0x78>)
 80161c4:	4a05      	ldr	r2, [pc, #20]	; (80161dc <prvInitialiseTaskLists+0x64>)
 80161c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80161c8:	4b0a      	ldr	r3, [pc, #40]	; (80161f4 <prvInitialiseTaskLists+0x7c>)
 80161ca:	4a05      	ldr	r2, [pc, #20]	; (80161e0 <prvInitialiseTaskLists+0x68>)
 80161cc:	601a      	str	r2, [r3, #0]
}
 80161ce:	bf00      	nop
 80161d0:	3708      	adds	r7, #8
 80161d2:	46bd      	mov	sp, r7
 80161d4:	bd80      	pop	{r7, pc}
 80161d6:	bf00      	nop
 80161d8:	20003990 	.word	0x20003990
 80161dc:	20003a1c 	.word	0x20003a1c
 80161e0:	20003a30 	.word	0x20003a30
 80161e4:	20003a4c 	.word	0x20003a4c
 80161e8:	20003a60 	.word	0x20003a60
 80161ec:	20003a78 	.word	0x20003a78
 80161f0:	20003a44 	.word	0x20003a44
 80161f4:	20003a48 	.word	0x20003a48

080161f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80161f8:	b580      	push	{r7, lr}
 80161fa:	b082      	sub	sp, #8
 80161fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80161fe:	e019      	b.n	8016234 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016200:	f000 fbc8 	bl	8016994 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016204:	4b10      	ldr	r3, [pc, #64]	; (8016248 <prvCheckTasksWaitingTermination+0x50>)
 8016206:	68db      	ldr	r3, [r3, #12]
 8016208:	68db      	ldr	r3, [r3, #12]
 801620a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	3304      	adds	r3, #4
 8016210:	4618      	mov	r0, r3
 8016212:	f7fe faf5 	bl	8014800 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016216:	4b0d      	ldr	r3, [pc, #52]	; (801624c <prvCheckTasksWaitingTermination+0x54>)
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	3b01      	subs	r3, #1
 801621c:	4a0b      	ldr	r2, [pc, #44]	; (801624c <prvCheckTasksWaitingTermination+0x54>)
 801621e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016220:	4b0b      	ldr	r3, [pc, #44]	; (8016250 <prvCheckTasksWaitingTermination+0x58>)
 8016222:	681b      	ldr	r3, [r3, #0]
 8016224:	3b01      	subs	r3, #1
 8016226:	4a0a      	ldr	r2, [pc, #40]	; (8016250 <prvCheckTasksWaitingTermination+0x58>)
 8016228:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801622a:	f000 fbe3 	bl	80169f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801622e:	6878      	ldr	r0, [r7, #4]
 8016230:	f000 f810 	bl	8016254 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016234:	4b06      	ldr	r3, [pc, #24]	; (8016250 <prvCheckTasksWaitingTermination+0x58>)
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	2b00      	cmp	r3, #0
 801623a:	d1e1      	bne.n	8016200 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801623c:	bf00      	nop
 801623e:	bf00      	nop
 8016240:	3708      	adds	r7, #8
 8016242:	46bd      	mov	sp, r7
 8016244:	bd80      	pop	{r7, pc}
 8016246:	bf00      	nop
 8016248:	20003a60 	.word	0x20003a60
 801624c:	20003a8c 	.word	0x20003a8c
 8016250:	20003a74 	.word	0x20003a74

08016254 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016254:	b580      	push	{r7, lr}
 8016256:	b084      	sub	sp, #16
 8016258:	af00      	add	r7, sp, #0
 801625a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	334c      	adds	r3, #76	; 0x4c
 8016260:	4618      	mov	r0, r3
 8016262:	f002 fde9 	bl	8018e38 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 801626c:	2b00      	cmp	r3, #0
 801626e:	d108      	bne.n	8016282 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016274:	4618      	mov	r0, r3
 8016276:	f000 fd7b 	bl	8016d70 <vPortFree>
				vPortFree( pxTCB );
 801627a:	6878      	ldr	r0, [r7, #4]
 801627c:	f000 fd78 	bl	8016d70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016280:	e018      	b.n	80162b4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8016288:	2b01      	cmp	r3, #1
 801628a:	d103      	bne.n	8016294 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801628c:	6878      	ldr	r0, [r7, #4]
 801628e:	f000 fd6f 	bl	8016d70 <vPortFree>
	}
 8016292:	e00f      	b.n	80162b4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 801629a:	2b02      	cmp	r3, #2
 801629c:	d00a      	beq.n	80162b4 <prvDeleteTCB+0x60>
	__asm volatile
 801629e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162a2:	f383 8811 	msr	BASEPRI, r3
 80162a6:	f3bf 8f6f 	isb	sy
 80162aa:	f3bf 8f4f 	dsb	sy
 80162ae:	60fb      	str	r3, [r7, #12]
}
 80162b0:	bf00      	nop
 80162b2:	e7fe      	b.n	80162b2 <prvDeleteTCB+0x5e>
	}
 80162b4:	bf00      	nop
 80162b6:	3710      	adds	r7, #16
 80162b8:	46bd      	mov	sp, r7
 80162ba:	bd80      	pop	{r7, pc}

080162bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80162bc:	b480      	push	{r7}
 80162be:	b083      	sub	sp, #12
 80162c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80162c2:	4b0c      	ldr	r3, [pc, #48]	; (80162f4 <prvResetNextTaskUnblockTime+0x38>)
 80162c4:	681b      	ldr	r3, [r3, #0]
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d104      	bne.n	80162d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80162cc:	4b0a      	ldr	r3, [pc, #40]	; (80162f8 <prvResetNextTaskUnblockTime+0x3c>)
 80162ce:	f04f 32ff 	mov.w	r2, #4294967295
 80162d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80162d4:	e008      	b.n	80162e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80162d6:	4b07      	ldr	r3, [pc, #28]	; (80162f4 <prvResetNextTaskUnblockTime+0x38>)
 80162d8:	681b      	ldr	r3, [r3, #0]
 80162da:	68db      	ldr	r3, [r3, #12]
 80162dc:	68db      	ldr	r3, [r3, #12]
 80162de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	685b      	ldr	r3, [r3, #4]
 80162e4:	4a04      	ldr	r2, [pc, #16]	; (80162f8 <prvResetNextTaskUnblockTime+0x3c>)
 80162e6:	6013      	str	r3, [r2, #0]
}
 80162e8:	bf00      	nop
 80162ea:	370c      	adds	r7, #12
 80162ec:	46bd      	mov	sp, r7
 80162ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162f2:	4770      	bx	lr
 80162f4:	20003a44 	.word	0x20003a44
 80162f8:	20003aac 	.word	0x20003aac

080162fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80162fc:	b480      	push	{r7}
 80162fe:	b083      	sub	sp, #12
 8016300:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016302:	4b0b      	ldr	r3, [pc, #44]	; (8016330 <xTaskGetSchedulerState+0x34>)
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	2b00      	cmp	r3, #0
 8016308:	d102      	bne.n	8016310 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801630a:	2301      	movs	r3, #1
 801630c:	607b      	str	r3, [r7, #4]
 801630e:	e008      	b.n	8016322 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016310:	4b08      	ldr	r3, [pc, #32]	; (8016334 <xTaskGetSchedulerState+0x38>)
 8016312:	681b      	ldr	r3, [r3, #0]
 8016314:	2b00      	cmp	r3, #0
 8016316:	d102      	bne.n	801631e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016318:	2302      	movs	r3, #2
 801631a:	607b      	str	r3, [r7, #4]
 801631c:	e001      	b.n	8016322 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801631e:	2300      	movs	r3, #0
 8016320:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016322:	687b      	ldr	r3, [r7, #4]
	}
 8016324:	4618      	mov	r0, r3
 8016326:	370c      	adds	r7, #12
 8016328:	46bd      	mov	sp, r7
 801632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801632e:	4770      	bx	lr
 8016330:	20003a98 	.word	0x20003a98
 8016334:	20003ab4 	.word	0x20003ab4

08016338 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8016338:	b580      	push	{r7, lr}
 801633a:	b084      	sub	sp, #16
 801633c:	af00      	add	r7, sp, #0
 801633e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8016344:	2300      	movs	r3, #0
 8016346:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	2b00      	cmp	r3, #0
 801634c:	d05e      	beq.n	801640c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801634e:	68bb      	ldr	r3, [r7, #8]
 8016350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016352:	4b31      	ldr	r3, [pc, #196]	; (8016418 <xTaskPriorityInherit+0xe0>)
 8016354:	681b      	ldr	r3, [r3, #0]
 8016356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016358:	429a      	cmp	r2, r3
 801635a:	d24e      	bcs.n	80163fa <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801635c:	68bb      	ldr	r3, [r7, #8]
 801635e:	699b      	ldr	r3, [r3, #24]
 8016360:	2b00      	cmp	r3, #0
 8016362:	db06      	blt.n	8016372 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016364:	4b2c      	ldr	r3, [pc, #176]	; (8016418 <xTaskPriorityInherit+0xe0>)
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801636a:	f1c3 0207 	rsb	r2, r3, #7
 801636e:	68bb      	ldr	r3, [r7, #8]
 8016370:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8016372:	68bb      	ldr	r3, [r7, #8]
 8016374:	6959      	ldr	r1, [r3, #20]
 8016376:	68bb      	ldr	r3, [r7, #8]
 8016378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801637a:	4613      	mov	r3, r2
 801637c:	009b      	lsls	r3, r3, #2
 801637e:	4413      	add	r3, r2
 8016380:	009b      	lsls	r3, r3, #2
 8016382:	4a26      	ldr	r2, [pc, #152]	; (801641c <xTaskPriorityInherit+0xe4>)
 8016384:	4413      	add	r3, r2
 8016386:	4299      	cmp	r1, r3
 8016388:	d12f      	bne.n	80163ea <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801638a:	68bb      	ldr	r3, [r7, #8]
 801638c:	3304      	adds	r3, #4
 801638e:	4618      	mov	r0, r3
 8016390:	f7fe fa36 	bl	8014800 <uxListRemove>
 8016394:	4603      	mov	r3, r0
 8016396:	2b00      	cmp	r3, #0
 8016398:	d10a      	bne.n	80163b0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 801639a:	68bb      	ldr	r3, [r7, #8]
 801639c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801639e:	2201      	movs	r2, #1
 80163a0:	fa02 f303 	lsl.w	r3, r2, r3
 80163a4:	43da      	mvns	r2, r3
 80163a6:	4b1e      	ldr	r3, [pc, #120]	; (8016420 <xTaskPriorityInherit+0xe8>)
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	4013      	ands	r3, r2
 80163ac:	4a1c      	ldr	r2, [pc, #112]	; (8016420 <xTaskPriorityInherit+0xe8>)
 80163ae:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80163b0:	4b19      	ldr	r3, [pc, #100]	; (8016418 <xTaskPriorityInherit+0xe0>)
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80163b6:	68bb      	ldr	r3, [r7, #8]
 80163b8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80163ba:	68bb      	ldr	r3, [r7, #8]
 80163bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163be:	2201      	movs	r2, #1
 80163c0:	409a      	lsls	r2, r3
 80163c2:	4b17      	ldr	r3, [pc, #92]	; (8016420 <xTaskPriorityInherit+0xe8>)
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	4313      	orrs	r3, r2
 80163c8:	4a15      	ldr	r2, [pc, #84]	; (8016420 <xTaskPriorityInherit+0xe8>)
 80163ca:	6013      	str	r3, [r2, #0]
 80163cc:	68bb      	ldr	r3, [r7, #8]
 80163ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80163d0:	4613      	mov	r3, r2
 80163d2:	009b      	lsls	r3, r3, #2
 80163d4:	4413      	add	r3, r2
 80163d6:	009b      	lsls	r3, r3, #2
 80163d8:	4a10      	ldr	r2, [pc, #64]	; (801641c <xTaskPriorityInherit+0xe4>)
 80163da:	441a      	add	r2, r3
 80163dc:	68bb      	ldr	r3, [r7, #8]
 80163de:	3304      	adds	r3, #4
 80163e0:	4619      	mov	r1, r3
 80163e2:	4610      	mov	r0, r2
 80163e4:	f7fe f9af 	bl	8014746 <vListInsertEnd>
 80163e8:	e004      	b.n	80163f4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80163ea:	4b0b      	ldr	r3, [pc, #44]	; (8016418 <xTaskPriorityInherit+0xe0>)
 80163ec:	681b      	ldr	r3, [r3, #0]
 80163ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80163f0:	68bb      	ldr	r3, [r7, #8]
 80163f2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80163f4:	2301      	movs	r3, #1
 80163f6:	60fb      	str	r3, [r7, #12]
 80163f8:	e008      	b.n	801640c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80163fa:	68bb      	ldr	r3, [r7, #8]
 80163fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80163fe:	4b06      	ldr	r3, [pc, #24]	; (8016418 <xTaskPriorityInherit+0xe0>)
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016404:	429a      	cmp	r2, r3
 8016406:	d201      	bcs.n	801640c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8016408:	2301      	movs	r3, #1
 801640a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801640c:	68fb      	ldr	r3, [r7, #12]
	}
 801640e:	4618      	mov	r0, r3
 8016410:	3710      	adds	r7, #16
 8016412:	46bd      	mov	sp, r7
 8016414:	bd80      	pop	{r7, pc}
 8016416:	bf00      	nop
 8016418:	2000398c 	.word	0x2000398c
 801641c:	20003990 	.word	0x20003990
 8016420:	20003a94 	.word	0x20003a94

08016424 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016424:	b580      	push	{r7, lr}
 8016426:	b086      	sub	sp, #24
 8016428:	af00      	add	r7, sp, #0
 801642a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016430:	2300      	movs	r3, #0
 8016432:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	2b00      	cmp	r3, #0
 8016438:	d06e      	beq.n	8016518 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801643a:	4b3a      	ldr	r3, [pc, #232]	; (8016524 <xTaskPriorityDisinherit+0x100>)
 801643c:	681b      	ldr	r3, [r3, #0]
 801643e:	693a      	ldr	r2, [r7, #16]
 8016440:	429a      	cmp	r2, r3
 8016442:	d00a      	beq.n	801645a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8016444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016448:	f383 8811 	msr	BASEPRI, r3
 801644c:	f3bf 8f6f 	isb	sy
 8016450:	f3bf 8f4f 	dsb	sy
 8016454:	60fb      	str	r3, [r7, #12]
}
 8016456:	bf00      	nop
 8016458:	e7fe      	b.n	8016458 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801645a:	693b      	ldr	r3, [r7, #16]
 801645c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801645e:	2b00      	cmp	r3, #0
 8016460:	d10a      	bne.n	8016478 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8016462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016466:	f383 8811 	msr	BASEPRI, r3
 801646a:	f3bf 8f6f 	isb	sy
 801646e:	f3bf 8f4f 	dsb	sy
 8016472:	60bb      	str	r3, [r7, #8]
}
 8016474:	bf00      	nop
 8016476:	e7fe      	b.n	8016476 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8016478:	693b      	ldr	r3, [r7, #16]
 801647a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801647c:	1e5a      	subs	r2, r3, #1
 801647e:	693b      	ldr	r3, [r7, #16]
 8016480:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016482:	693b      	ldr	r3, [r7, #16]
 8016484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016486:	693b      	ldr	r3, [r7, #16]
 8016488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801648a:	429a      	cmp	r2, r3
 801648c:	d044      	beq.n	8016518 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801648e:	693b      	ldr	r3, [r7, #16]
 8016490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016492:	2b00      	cmp	r3, #0
 8016494:	d140      	bne.n	8016518 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016496:	693b      	ldr	r3, [r7, #16]
 8016498:	3304      	adds	r3, #4
 801649a:	4618      	mov	r0, r3
 801649c:	f7fe f9b0 	bl	8014800 <uxListRemove>
 80164a0:	4603      	mov	r3, r0
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d115      	bne.n	80164d2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80164a6:	693b      	ldr	r3, [r7, #16]
 80164a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80164aa:	491f      	ldr	r1, [pc, #124]	; (8016528 <xTaskPriorityDisinherit+0x104>)
 80164ac:	4613      	mov	r3, r2
 80164ae:	009b      	lsls	r3, r3, #2
 80164b0:	4413      	add	r3, r2
 80164b2:	009b      	lsls	r3, r3, #2
 80164b4:	440b      	add	r3, r1
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d10a      	bne.n	80164d2 <xTaskPriorityDisinherit+0xae>
 80164bc:	693b      	ldr	r3, [r7, #16]
 80164be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164c0:	2201      	movs	r2, #1
 80164c2:	fa02 f303 	lsl.w	r3, r2, r3
 80164c6:	43da      	mvns	r2, r3
 80164c8:	4b18      	ldr	r3, [pc, #96]	; (801652c <xTaskPriorityDisinherit+0x108>)
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	4013      	ands	r3, r2
 80164ce:	4a17      	ldr	r2, [pc, #92]	; (801652c <xTaskPriorityDisinherit+0x108>)
 80164d0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80164d2:	693b      	ldr	r3, [r7, #16]
 80164d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80164d6:	693b      	ldr	r3, [r7, #16]
 80164d8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80164da:	693b      	ldr	r3, [r7, #16]
 80164dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164de:	f1c3 0207 	rsb	r2, r3, #7
 80164e2:	693b      	ldr	r3, [r7, #16]
 80164e4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80164e6:	693b      	ldr	r3, [r7, #16]
 80164e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164ea:	2201      	movs	r2, #1
 80164ec:	409a      	lsls	r2, r3
 80164ee:	4b0f      	ldr	r3, [pc, #60]	; (801652c <xTaskPriorityDisinherit+0x108>)
 80164f0:	681b      	ldr	r3, [r3, #0]
 80164f2:	4313      	orrs	r3, r2
 80164f4:	4a0d      	ldr	r2, [pc, #52]	; (801652c <xTaskPriorityDisinherit+0x108>)
 80164f6:	6013      	str	r3, [r2, #0]
 80164f8:	693b      	ldr	r3, [r7, #16]
 80164fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80164fc:	4613      	mov	r3, r2
 80164fe:	009b      	lsls	r3, r3, #2
 8016500:	4413      	add	r3, r2
 8016502:	009b      	lsls	r3, r3, #2
 8016504:	4a08      	ldr	r2, [pc, #32]	; (8016528 <xTaskPriorityDisinherit+0x104>)
 8016506:	441a      	add	r2, r3
 8016508:	693b      	ldr	r3, [r7, #16]
 801650a:	3304      	adds	r3, #4
 801650c:	4619      	mov	r1, r3
 801650e:	4610      	mov	r0, r2
 8016510:	f7fe f919 	bl	8014746 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016514:	2301      	movs	r3, #1
 8016516:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016518:	697b      	ldr	r3, [r7, #20]
	}
 801651a:	4618      	mov	r0, r3
 801651c:	3718      	adds	r7, #24
 801651e:	46bd      	mov	sp, r7
 8016520:	bd80      	pop	{r7, pc}
 8016522:	bf00      	nop
 8016524:	2000398c 	.word	0x2000398c
 8016528:	20003990 	.word	0x20003990
 801652c:	20003a94 	.word	0x20003a94

08016530 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8016530:	b580      	push	{r7, lr}
 8016532:	b088      	sub	sp, #32
 8016534:	af00      	add	r7, sp, #0
 8016536:	6078      	str	r0, [r7, #4]
 8016538:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801653e:	2301      	movs	r3, #1
 8016540:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	2b00      	cmp	r3, #0
 8016546:	d077      	beq.n	8016638 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8016548:	69bb      	ldr	r3, [r7, #24]
 801654a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801654c:	2b00      	cmp	r3, #0
 801654e:	d10a      	bne.n	8016566 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8016550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016554:	f383 8811 	msr	BASEPRI, r3
 8016558:	f3bf 8f6f 	isb	sy
 801655c:	f3bf 8f4f 	dsb	sy
 8016560:	60fb      	str	r3, [r7, #12]
}
 8016562:	bf00      	nop
 8016564:	e7fe      	b.n	8016564 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8016566:	69bb      	ldr	r3, [r7, #24]
 8016568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801656a:	683a      	ldr	r2, [r7, #0]
 801656c:	429a      	cmp	r2, r3
 801656e:	d902      	bls.n	8016576 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8016570:	683b      	ldr	r3, [r7, #0]
 8016572:	61fb      	str	r3, [r7, #28]
 8016574:	e002      	b.n	801657c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8016576:	69bb      	ldr	r3, [r7, #24]
 8016578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801657a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801657c:	69bb      	ldr	r3, [r7, #24]
 801657e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016580:	69fa      	ldr	r2, [r7, #28]
 8016582:	429a      	cmp	r2, r3
 8016584:	d058      	beq.n	8016638 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8016586:	69bb      	ldr	r3, [r7, #24]
 8016588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801658a:	697a      	ldr	r2, [r7, #20]
 801658c:	429a      	cmp	r2, r3
 801658e:	d153      	bne.n	8016638 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8016590:	4b2b      	ldr	r3, [pc, #172]	; (8016640 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8016592:	681b      	ldr	r3, [r3, #0]
 8016594:	69ba      	ldr	r2, [r7, #24]
 8016596:	429a      	cmp	r2, r3
 8016598:	d10a      	bne.n	80165b0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801659a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801659e:	f383 8811 	msr	BASEPRI, r3
 80165a2:	f3bf 8f6f 	isb	sy
 80165a6:	f3bf 8f4f 	dsb	sy
 80165aa:	60bb      	str	r3, [r7, #8]
}
 80165ac:	bf00      	nop
 80165ae:	e7fe      	b.n	80165ae <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80165b0:	69bb      	ldr	r3, [r7, #24]
 80165b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165b4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80165b6:	69bb      	ldr	r3, [r7, #24]
 80165b8:	69fa      	ldr	r2, [r7, #28]
 80165ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80165bc:	69bb      	ldr	r3, [r7, #24]
 80165be:	699b      	ldr	r3, [r3, #24]
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	db04      	blt.n	80165ce <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80165c4:	69fb      	ldr	r3, [r7, #28]
 80165c6:	f1c3 0207 	rsb	r2, r3, #7
 80165ca:	69bb      	ldr	r3, [r7, #24]
 80165cc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80165ce:	69bb      	ldr	r3, [r7, #24]
 80165d0:	6959      	ldr	r1, [r3, #20]
 80165d2:	693a      	ldr	r2, [r7, #16]
 80165d4:	4613      	mov	r3, r2
 80165d6:	009b      	lsls	r3, r3, #2
 80165d8:	4413      	add	r3, r2
 80165da:	009b      	lsls	r3, r3, #2
 80165dc:	4a19      	ldr	r2, [pc, #100]	; (8016644 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80165de:	4413      	add	r3, r2
 80165e0:	4299      	cmp	r1, r3
 80165e2:	d129      	bne.n	8016638 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80165e4:	69bb      	ldr	r3, [r7, #24]
 80165e6:	3304      	adds	r3, #4
 80165e8:	4618      	mov	r0, r3
 80165ea:	f7fe f909 	bl	8014800 <uxListRemove>
 80165ee:	4603      	mov	r3, r0
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d10a      	bne.n	801660a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80165f4:	69bb      	ldr	r3, [r7, #24]
 80165f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165f8:	2201      	movs	r2, #1
 80165fa:	fa02 f303 	lsl.w	r3, r2, r3
 80165fe:	43da      	mvns	r2, r3
 8016600:	4b11      	ldr	r3, [pc, #68]	; (8016648 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8016602:	681b      	ldr	r3, [r3, #0]
 8016604:	4013      	ands	r3, r2
 8016606:	4a10      	ldr	r2, [pc, #64]	; (8016648 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8016608:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801660a:	69bb      	ldr	r3, [r7, #24]
 801660c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801660e:	2201      	movs	r2, #1
 8016610:	409a      	lsls	r2, r3
 8016612:	4b0d      	ldr	r3, [pc, #52]	; (8016648 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	4313      	orrs	r3, r2
 8016618:	4a0b      	ldr	r2, [pc, #44]	; (8016648 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801661a:	6013      	str	r3, [r2, #0]
 801661c:	69bb      	ldr	r3, [r7, #24]
 801661e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016620:	4613      	mov	r3, r2
 8016622:	009b      	lsls	r3, r3, #2
 8016624:	4413      	add	r3, r2
 8016626:	009b      	lsls	r3, r3, #2
 8016628:	4a06      	ldr	r2, [pc, #24]	; (8016644 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801662a:	441a      	add	r2, r3
 801662c:	69bb      	ldr	r3, [r7, #24]
 801662e:	3304      	adds	r3, #4
 8016630:	4619      	mov	r1, r3
 8016632:	4610      	mov	r0, r2
 8016634:	f7fe f887 	bl	8014746 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016638:	bf00      	nop
 801663a:	3720      	adds	r7, #32
 801663c:	46bd      	mov	sp, r7
 801663e:	bd80      	pop	{r7, pc}
 8016640:	2000398c 	.word	0x2000398c
 8016644:	20003990 	.word	0x20003990
 8016648:	20003a94 	.word	0x20003a94

0801664c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801664c:	b480      	push	{r7}
 801664e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8016650:	4b07      	ldr	r3, [pc, #28]	; (8016670 <pvTaskIncrementMutexHeldCount+0x24>)
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	2b00      	cmp	r3, #0
 8016656:	d004      	beq.n	8016662 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8016658:	4b05      	ldr	r3, [pc, #20]	; (8016670 <pvTaskIncrementMutexHeldCount+0x24>)
 801665a:	681b      	ldr	r3, [r3, #0]
 801665c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801665e:	3201      	adds	r2, #1
 8016660:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8016662:	4b03      	ldr	r3, [pc, #12]	; (8016670 <pvTaskIncrementMutexHeldCount+0x24>)
 8016664:	681b      	ldr	r3, [r3, #0]
	}
 8016666:	4618      	mov	r0, r3
 8016668:	46bd      	mov	sp, r7
 801666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801666e:	4770      	bx	lr
 8016670:	2000398c 	.word	0x2000398c

08016674 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016674:	b580      	push	{r7, lr}
 8016676:	b084      	sub	sp, #16
 8016678:	af00      	add	r7, sp, #0
 801667a:	6078      	str	r0, [r7, #4]
 801667c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801667e:	4b29      	ldr	r3, [pc, #164]	; (8016724 <prvAddCurrentTaskToDelayedList+0xb0>)
 8016680:	681b      	ldr	r3, [r3, #0]
 8016682:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016684:	4b28      	ldr	r3, [pc, #160]	; (8016728 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016686:	681b      	ldr	r3, [r3, #0]
 8016688:	3304      	adds	r3, #4
 801668a:	4618      	mov	r0, r3
 801668c:	f7fe f8b8 	bl	8014800 <uxListRemove>
 8016690:	4603      	mov	r3, r0
 8016692:	2b00      	cmp	r3, #0
 8016694:	d10b      	bne.n	80166ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8016696:	4b24      	ldr	r3, [pc, #144]	; (8016728 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801669c:	2201      	movs	r2, #1
 801669e:	fa02 f303 	lsl.w	r3, r2, r3
 80166a2:	43da      	mvns	r2, r3
 80166a4:	4b21      	ldr	r3, [pc, #132]	; (801672c <prvAddCurrentTaskToDelayedList+0xb8>)
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	4013      	ands	r3, r2
 80166aa:	4a20      	ldr	r2, [pc, #128]	; (801672c <prvAddCurrentTaskToDelayedList+0xb8>)
 80166ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166b4:	d10a      	bne.n	80166cc <prvAddCurrentTaskToDelayedList+0x58>
 80166b6:	683b      	ldr	r3, [r7, #0]
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	d007      	beq.n	80166cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80166bc:	4b1a      	ldr	r3, [pc, #104]	; (8016728 <prvAddCurrentTaskToDelayedList+0xb4>)
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	3304      	adds	r3, #4
 80166c2:	4619      	mov	r1, r3
 80166c4:	481a      	ldr	r0, [pc, #104]	; (8016730 <prvAddCurrentTaskToDelayedList+0xbc>)
 80166c6:	f7fe f83e 	bl	8014746 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80166ca:	e026      	b.n	801671a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80166cc:	68fa      	ldr	r2, [r7, #12]
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	4413      	add	r3, r2
 80166d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80166d4:	4b14      	ldr	r3, [pc, #80]	; (8016728 <prvAddCurrentTaskToDelayedList+0xb4>)
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	68ba      	ldr	r2, [r7, #8]
 80166da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80166dc:	68ba      	ldr	r2, [r7, #8]
 80166de:	68fb      	ldr	r3, [r7, #12]
 80166e0:	429a      	cmp	r2, r3
 80166e2:	d209      	bcs.n	80166f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80166e4:	4b13      	ldr	r3, [pc, #76]	; (8016734 <prvAddCurrentTaskToDelayedList+0xc0>)
 80166e6:	681a      	ldr	r2, [r3, #0]
 80166e8:	4b0f      	ldr	r3, [pc, #60]	; (8016728 <prvAddCurrentTaskToDelayedList+0xb4>)
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	3304      	adds	r3, #4
 80166ee:	4619      	mov	r1, r3
 80166f0:	4610      	mov	r0, r2
 80166f2:	f7fe f84c 	bl	801478e <vListInsert>
}
 80166f6:	e010      	b.n	801671a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80166f8:	4b0f      	ldr	r3, [pc, #60]	; (8016738 <prvAddCurrentTaskToDelayedList+0xc4>)
 80166fa:	681a      	ldr	r2, [r3, #0]
 80166fc:	4b0a      	ldr	r3, [pc, #40]	; (8016728 <prvAddCurrentTaskToDelayedList+0xb4>)
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	3304      	adds	r3, #4
 8016702:	4619      	mov	r1, r3
 8016704:	4610      	mov	r0, r2
 8016706:	f7fe f842 	bl	801478e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801670a:	4b0c      	ldr	r3, [pc, #48]	; (801673c <prvAddCurrentTaskToDelayedList+0xc8>)
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	68ba      	ldr	r2, [r7, #8]
 8016710:	429a      	cmp	r2, r3
 8016712:	d202      	bcs.n	801671a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8016714:	4a09      	ldr	r2, [pc, #36]	; (801673c <prvAddCurrentTaskToDelayedList+0xc8>)
 8016716:	68bb      	ldr	r3, [r7, #8]
 8016718:	6013      	str	r3, [r2, #0]
}
 801671a:	bf00      	nop
 801671c:	3710      	adds	r7, #16
 801671e:	46bd      	mov	sp, r7
 8016720:	bd80      	pop	{r7, pc}
 8016722:	bf00      	nop
 8016724:	20003a90 	.word	0x20003a90
 8016728:	2000398c 	.word	0x2000398c
 801672c:	20003a94 	.word	0x20003a94
 8016730:	20003a78 	.word	0x20003a78
 8016734:	20003a48 	.word	0x20003a48
 8016738:	20003a44 	.word	0x20003a44
 801673c:	20003aac 	.word	0x20003aac

08016740 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016740:	b480      	push	{r7}
 8016742:	b085      	sub	sp, #20
 8016744:	af00      	add	r7, sp, #0
 8016746:	60f8      	str	r0, [r7, #12]
 8016748:	60b9      	str	r1, [r7, #8]
 801674a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801674c:	68fb      	ldr	r3, [r7, #12]
 801674e:	3b04      	subs	r3, #4
 8016750:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016752:	68fb      	ldr	r3, [r7, #12]
 8016754:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016758:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801675a:	68fb      	ldr	r3, [r7, #12]
 801675c:	3b04      	subs	r3, #4
 801675e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016760:	68bb      	ldr	r3, [r7, #8]
 8016762:	f023 0201 	bic.w	r2, r3, #1
 8016766:	68fb      	ldr	r3, [r7, #12]
 8016768:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801676a:	68fb      	ldr	r3, [r7, #12]
 801676c:	3b04      	subs	r3, #4
 801676e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016770:	4a0c      	ldr	r2, [pc, #48]	; (80167a4 <pxPortInitialiseStack+0x64>)
 8016772:	68fb      	ldr	r3, [r7, #12]
 8016774:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016776:	68fb      	ldr	r3, [r7, #12]
 8016778:	3b14      	subs	r3, #20
 801677a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801677c:	687a      	ldr	r2, [r7, #4]
 801677e:	68fb      	ldr	r3, [r7, #12]
 8016780:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016782:	68fb      	ldr	r3, [r7, #12]
 8016784:	3b04      	subs	r3, #4
 8016786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	f06f 0202 	mvn.w	r2, #2
 801678e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	3b20      	subs	r3, #32
 8016794:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016796:	68fb      	ldr	r3, [r7, #12]
}
 8016798:	4618      	mov	r0, r3
 801679a:	3714      	adds	r7, #20
 801679c:	46bd      	mov	sp, r7
 801679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167a2:	4770      	bx	lr
 80167a4:	080167a9 	.word	0x080167a9

080167a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80167a8:	b480      	push	{r7}
 80167aa:	b085      	sub	sp, #20
 80167ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80167ae:	2300      	movs	r3, #0
 80167b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80167b2:	4b12      	ldr	r3, [pc, #72]	; (80167fc <prvTaskExitError+0x54>)
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80167ba:	d00a      	beq.n	80167d2 <prvTaskExitError+0x2a>
	__asm volatile
 80167bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167c0:	f383 8811 	msr	BASEPRI, r3
 80167c4:	f3bf 8f6f 	isb	sy
 80167c8:	f3bf 8f4f 	dsb	sy
 80167cc:	60fb      	str	r3, [r7, #12]
}
 80167ce:	bf00      	nop
 80167d0:	e7fe      	b.n	80167d0 <prvTaskExitError+0x28>
	__asm volatile
 80167d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167d6:	f383 8811 	msr	BASEPRI, r3
 80167da:	f3bf 8f6f 	isb	sy
 80167de:	f3bf 8f4f 	dsb	sy
 80167e2:	60bb      	str	r3, [r7, #8]
}
 80167e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80167e6:	bf00      	nop
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d0fc      	beq.n	80167e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80167ee:	bf00      	nop
 80167f0:	bf00      	nop
 80167f2:	3714      	adds	r7, #20
 80167f4:	46bd      	mov	sp, r7
 80167f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167fa:	4770      	bx	lr
 80167fc:	200000bc 	.word	0x200000bc

08016800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016800:	4b07      	ldr	r3, [pc, #28]	; (8016820 <pxCurrentTCBConst2>)
 8016802:	6819      	ldr	r1, [r3, #0]
 8016804:	6808      	ldr	r0, [r1, #0]
 8016806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801680a:	f380 8809 	msr	PSP, r0
 801680e:	f3bf 8f6f 	isb	sy
 8016812:	f04f 0000 	mov.w	r0, #0
 8016816:	f380 8811 	msr	BASEPRI, r0
 801681a:	4770      	bx	lr
 801681c:	f3af 8000 	nop.w

08016820 <pxCurrentTCBConst2>:
 8016820:	2000398c 	.word	0x2000398c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016824:	bf00      	nop
 8016826:	bf00      	nop

08016828 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016828:	4808      	ldr	r0, [pc, #32]	; (801684c <prvPortStartFirstTask+0x24>)
 801682a:	6800      	ldr	r0, [r0, #0]
 801682c:	6800      	ldr	r0, [r0, #0]
 801682e:	f380 8808 	msr	MSP, r0
 8016832:	f04f 0000 	mov.w	r0, #0
 8016836:	f380 8814 	msr	CONTROL, r0
 801683a:	b662      	cpsie	i
 801683c:	b661      	cpsie	f
 801683e:	f3bf 8f4f 	dsb	sy
 8016842:	f3bf 8f6f 	isb	sy
 8016846:	df00      	svc	0
 8016848:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801684a:	bf00      	nop
 801684c:	e000ed08 	.word	0xe000ed08

08016850 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016850:	b580      	push	{r7, lr}
 8016852:	b086      	sub	sp, #24
 8016854:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016856:	4b46      	ldr	r3, [pc, #280]	; (8016970 <xPortStartScheduler+0x120>)
 8016858:	681b      	ldr	r3, [r3, #0]
 801685a:	4a46      	ldr	r2, [pc, #280]	; (8016974 <xPortStartScheduler+0x124>)
 801685c:	4293      	cmp	r3, r2
 801685e:	d10a      	bne.n	8016876 <xPortStartScheduler+0x26>
	__asm volatile
 8016860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016864:	f383 8811 	msr	BASEPRI, r3
 8016868:	f3bf 8f6f 	isb	sy
 801686c:	f3bf 8f4f 	dsb	sy
 8016870:	613b      	str	r3, [r7, #16]
}
 8016872:	bf00      	nop
 8016874:	e7fe      	b.n	8016874 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016876:	4b3e      	ldr	r3, [pc, #248]	; (8016970 <xPortStartScheduler+0x120>)
 8016878:	681b      	ldr	r3, [r3, #0]
 801687a:	4a3f      	ldr	r2, [pc, #252]	; (8016978 <xPortStartScheduler+0x128>)
 801687c:	4293      	cmp	r3, r2
 801687e:	d10a      	bne.n	8016896 <xPortStartScheduler+0x46>
	__asm volatile
 8016880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016884:	f383 8811 	msr	BASEPRI, r3
 8016888:	f3bf 8f6f 	isb	sy
 801688c:	f3bf 8f4f 	dsb	sy
 8016890:	60fb      	str	r3, [r7, #12]
}
 8016892:	bf00      	nop
 8016894:	e7fe      	b.n	8016894 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016896:	4b39      	ldr	r3, [pc, #228]	; (801697c <xPortStartScheduler+0x12c>)
 8016898:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801689a:	697b      	ldr	r3, [r7, #20]
 801689c:	781b      	ldrb	r3, [r3, #0]
 801689e:	b2db      	uxtb	r3, r3
 80168a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80168a2:	697b      	ldr	r3, [r7, #20]
 80168a4:	22ff      	movs	r2, #255	; 0xff
 80168a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80168a8:	697b      	ldr	r3, [r7, #20]
 80168aa:	781b      	ldrb	r3, [r3, #0]
 80168ac:	b2db      	uxtb	r3, r3
 80168ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80168b0:	78fb      	ldrb	r3, [r7, #3]
 80168b2:	b2db      	uxtb	r3, r3
 80168b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80168b8:	b2da      	uxtb	r2, r3
 80168ba:	4b31      	ldr	r3, [pc, #196]	; (8016980 <xPortStartScheduler+0x130>)
 80168bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80168be:	4b31      	ldr	r3, [pc, #196]	; (8016984 <xPortStartScheduler+0x134>)
 80168c0:	2207      	movs	r2, #7
 80168c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80168c4:	e009      	b.n	80168da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80168c6:	4b2f      	ldr	r3, [pc, #188]	; (8016984 <xPortStartScheduler+0x134>)
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	3b01      	subs	r3, #1
 80168cc:	4a2d      	ldr	r2, [pc, #180]	; (8016984 <xPortStartScheduler+0x134>)
 80168ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80168d0:	78fb      	ldrb	r3, [r7, #3]
 80168d2:	b2db      	uxtb	r3, r3
 80168d4:	005b      	lsls	r3, r3, #1
 80168d6:	b2db      	uxtb	r3, r3
 80168d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80168da:	78fb      	ldrb	r3, [r7, #3]
 80168dc:	b2db      	uxtb	r3, r3
 80168de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80168e2:	2b80      	cmp	r3, #128	; 0x80
 80168e4:	d0ef      	beq.n	80168c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80168e6:	4b27      	ldr	r3, [pc, #156]	; (8016984 <xPortStartScheduler+0x134>)
 80168e8:	681b      	ldr	r3, [r3, #0]
 80168ea:	f1c3 0307 	rsb	r3, r3, #7
 80168ee:	2b04      	cmp	r3, #4
 80168f0:	d00a      	beq.n	8016908 <xPortStartScheduler+0xb8>
	__asm volatile
 80168f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168f6:	f383 8811 	msr	BASEPRI, r3
 80168fa:	f3bf 8f6f 	isb	sy
 80168fe:	f3bf 8f4f 	dsb	sy
 8016902:	60bb      	str	r3, [r7, #8]
}
 8016904:	bf00      	nop
 8016906:	e7fe      	b.n	8016906 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016908:	4b1e      	ldr	r3, [pc, #120]	; (8016984 <xPortStartScheduler+0x134>)
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	021b      	lsls	r3, r3, #8
 801690e:	4a1d      	ldr	r2, [pc, #116]	; (8016984 <xPortStartScheduler+0x134>)
 8016910:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016912:	4b1c      	ldr	r3, [pc, #112]	; (8016984 <xPortStartScheduler+0x134>)
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801691a:	4a1a      	ldr	r2, [pc, #104]	; (8016984 <xPortStartScheduler+0x134>)
 801691c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	b2da      	uxtb	r2, r3
 8016922:	697b      	ldr	r3, [r7, #20]
 8016924:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016926:	4b18      	ldr	r3, [pc, #96]	; (8016988 <xPortStartScheduler+0x138>)
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	4a17      	ldr	r2, [pc, #92]	; (8016988 <xPortStartScheduler+0x138>)
 801692c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016930:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016932:	4b15      	ldr	r3, [pc, #84]	; (8016988 <xPortStartScheduler+0x138>)
 8016934:	681b      	ldr	r3, [r3, #0]
 8016936:	4a14      	ldr	r2, [pc, #80]	; (8016988 <xPortStartScheduler+0x138>)
 8016938:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801693c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801693e:	f000 f8dd 	bl	8016afc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016942:	4b12      	ldr	r3, [pc, #72]	; (801698c <xPortStartScheduler+0x13c>)
 8016944:	2200      	movs	r2, #0
 8016946:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016948:	f000 f8fc 	bl	8016b44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801694c:	4b10      	ldr	r3, [pc, #64]	; (8016990 <xPortStartScheduler+0x140>)
 801694e:	681b      	ldr	r3, [r3, #0]
 8016950:	4a0f      	ldr	r2, [pc, #60]	; (8016990 <xPortStartScheduler+0x140>)
 8016952:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016956:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016958:	f7ff ff66 	bl	8016828 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801695c:	f7ff fa88 	bl	8015e70 <vTaskSwitchContext>
	prvTaskExitError();
 8016960:	f7ff ff22 	bl	80167a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016964:	2300      	movs	r3, #0
}
 8016966:	4618      	mov	r0, r3
 8016968:	3718      	adds	r7, #24
 801696a:	46bd      	mov	sp, r7
 801696c:	bd80      	pop	{r7, pc}
 801696e:	bf00      	nop
 8016970:	e000ed00 	.word	0xe000ed00
 8016974:	410fc271 	.word	0x410fc271
 8016978:	410fc270 	.word	0x410fc270
 801697c:	e000e400 	.word	0xe000e400
 8016980:	20003ab8 	.word	0x20003ab8
 8016984:	20003abc 	.word	0x20003abc
 8016988:	e000ed20 	.word	0xe000ed20
 801698c:	200000bc 	.word	0x200000bc
 8016990:	e000ef34 	.word	0xe000ef34

08016994 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016994:	b480      	push	{r7}
 8016996:	b083      	sub	sp, #12
 8016998:	af00      	add	r7, sp, #0
	__asm volatile
 801699a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801699e:	f383 8811 	msr	BASEPRI, r3
 80169a2:	f3bf 8f6f 	isb	sy
 80169a6:	f3bf 8f4f 	dsb	sy
 80169aa:	607b      	str	r3, [r7, #4]
}
 80169ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80169ae:	4b0f      	ldr	r3, [pc, #60]	; (80169ec <vPortEnterCritical+0x58>)
 80169b0:	681b      	ldr	r3, [r3, #0]
 80169b2:	3301      	adds	r3, #1
 80169b4:	4a0d      	ldr	r2, [pc, #52]	; (80169ec <vPortEnterCritical+0x58>)
 80169b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80169b8:	4b0c      	ldr	r3, [pc, #48]	; (80169ec <vPortEnterCritical+0x58>)
 80169ba:	681b      	ldr	r3, [r3, #0]
 80169bc:	2b01      	cmp	r3, #1
 80169be:	d10f      	bne.n	80169e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80169c0:	4b0b      	ldr	r3, [pc, #44]	; (80169f0 <vPortEnterCritical+0x5c>)
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	b2db      	uxtb	r3, r3
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d00a      	beq.n	80169e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80169ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169ce:	f383 8811 	msr	BASEPRI, r3
 80169d2:	f3bf 8f6f 	isb	sy
 80169d6:	f3bf 8f4f 	dsb	sy
 80169da:	603b      	str	r3, [r7, #0]
}
 80169dc:	bf00      	nop
 80169de:	e7fe      	b.n	80169de <vPortEnterCritical+0x4a>
	}
}
 80169e0:	bf00      	nop
 80169e2:	370c      	adds	r7, #12
 80169e4:	46bd      	mov	sp, r7
 80169e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169ea:	4770      	bx	lr
 80169ec:	200000bc 	.word	0x200000bc
 80169f0:	e000ed04 	.word	0xe000ed04

080169f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80169f4:	b480      	push	{r7}
 80169f6:	b083      	sub	sp, #12
 80169f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80169fa:	4b12      	ldr	r3, [pc, #72]	; (8016a44 <vPortExitCritical+0x50>)
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d10a      	bne.n	8016a18 <vPortExitCritical+0x24>
	__asm volatile
 8016a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a06:	f383 8811 	msr	BASEPRI, r3
 8016a0a:	f3bf 8f6f 	isb	sy
 8016a0e:	f3bf 8f4f 	dsb	sy
 8016a12:	607b      	str	r3, [r7, #4]
}
 8016a14:	bf00      	nop
 8016a16:	e7fe      	b.n	8016a16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8016a18:	4b0a      	ldr	r3, [pc, #40]	; (8016a44 <vPortExitCritical+0x50>)
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	3b01      	subs	r3, #1
 8016a1e:	4a09      	ldr	r2, [pc, #36]	; (8016a44 <vPortExitCritical+0x50>)
 8016a20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016a22:	4b08      	ldr	r3, [pc, #32]	; (8016a44 <vPortExitCritical+0x50>)
 8016a24:	681b      	ldr	r3, [r3, #0]
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d105      	bne.n	8016a36 <vPortExitCritical+0x42>
 8016a2a:	2300      	movs	r3, #0
 8016a2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016a2e:	683b      	ldr	r3, [r7, #0]
 8016a30:	f383 8811 	msr	BASEPRI, r3
}
 8016a34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016a36:	bf00      	nop
 8016a38:	370c      	adds	r7, #12
 8016a3a:	46bd      	mov	sp, r7
 8016a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a40:	4770      	bx	lr
 8016a42:	bf00      	nop
 8016a44:	200000bc 	.word	0x200000bc
	...

08016a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016a50:	f3ef 8009 	mrs	r0, PSP
 8016a54:	f3bf 8f6f 	isb	sy
 8016a58:	4b15      	ldr	r3, [pc, #84]	; (8016ab0 <pxCurrentTCBConst>)
 8016a5a:	681a      	ldr	r2, [r3, #0]
 8016a5c:	f01e 0f10 	tst.w	lr, #16
 8016a60:	bf08      	it	eq
 8016a62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016a66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a6a:	6010      	str	r0, [r2, #0]
 8016a6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016a70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016a74:	f380 8811 	msr	BASEPRI, r0
 8016a78:	f3bf 8f4f 	dsb	sy
 8016a7c:	f3bf 8f6f 	isb	sy
 8016a80:	f7ff f9f6 	bl	8015e70 <vTaskSwitchContext>
 8016a84:	f04f 0000 	mov.w	r0, #0
 8016a88:	f380 8811 	msr	BASEPRI, r0
 8016a8c:	bc09      	pop	{r0, r3}
 8016a8e:	6819      	ldr	r1, [r3, #0]
 8016a90:	6808      	ldr	r0, [r1, #0]
 8016a92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a96:	f01e 0f10 	tst.w	lr, #16
 8016a9a:	bf08      	it	eq
 8016a9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016aa0:	f380 8809 	msr	PSP, r0
 8016aa4:	f3bf 8f6f 	isb	sy
 8016aa8:	4770      	bx	lr
 8016aaa:	bf00      	nop
 8016aac:	f3af 8000 	nop.w

08016ab0 <pxCurrentTCBConst>:
 8016ab0:	2000398c 	.word	0x2000398c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016ab4:	bf00      	nop
 8016ab6:	bf00      	nop

08016ab8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016ab8:	b580      	push	{r7, lr}
 8016aba:	b082      	sub	sp, #8
 8016abc:	af00      	add	r7, sp, #0
	__asm volatile
 8016abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ac2:	f383 8811 	msr	BASEPRI, r3
 8016ac6:	f3bf 8f6f 	isb	sy
 8016aca:	f3bf 8f4f 	dsb	sy
 8016ace:	607b      	str	r3, [r7, #4]
}
 8016ad0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016ad2:	f7ff f915 	bl	8015d00 <xTaskIncrementTick>
 8016ad6:	4603      	mov	r3, r0
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d003      	beq.n	8016ae4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016adc:	4b06      	ldr	r3, [pc, #24]	; (8016af8 <SysTick_Handler+0x40>)
 8016ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016ae2:	601a      	str	r2, [r3, #0]
 8016ae4:	2300      	movs	r3, #0
 8016ae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016ae8:	683b      	ldr	r3, [r7, #0]
 8016aea:	f383 8811 	msr	BASEPRI, r3
}
 8016aee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016af0:	bf00      	nop
 8016af2:	3708      	adds	r7, #8
 8016af4:	46bd      	mov	sp, r7
 8016af6:	bd80      	pop	{r7, pc}
 8016af8:	e000ed04 	.word	0xe000ed04

08016afc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016afc:	b480      	push	{r7}
 8016afe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016b00:	4b0b      	ldr	r3, [pc, #44]	; (8016b30 <vPortSetupTimerInterrupt+0x34>)
 8016b02:	2200      	movs	r2, #0
 8016b04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016b06:	4b0b      	ldr	r3, [pc, #44]	; (8016b34 <vPortSetupTimerInterrupt+0x38>)
 8016b08:	2200      	movs	r2, #0
 8016b0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016b0c:	4b0a      	ldr	r3, [pc, #40]	; (8016b38 <vPortSetupTimerInterrupt+0x3c>)
 8016b0e:	681b      	ldr	r3, [r3, #0]
 8016b10:	4a0a      	ldr	r2, [pc, #40]	; (8016b3c <vPortSetupTimerInterrupt+0x40>)
 8016b12:	fba2 2303 	umull	r2, r3, r2, r3
 8016b16:	099b      	lsrs	r3, r3, #6
 8016b18:	4a09      	ldr	r2, [pc, #36]	; (8016b40 <vPortSetupTimerInterrupt+0x44>)
 8016b1a:	3b01      	subs	r3, #1
 8016b1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8016b1e:	4b04      	ldr	r3, [pc, #16]	; (8016b30 <vPortSetupTimerInterrupt+0x34>)
 8016b20:	2207      	movs	r2, #7
 8016b22:	601a      	str	r2, [r3, #0]
}
 8016b24:	bf00      	nop
 8016b26:	46bd      	mov	sp, r7
 8016b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b2c:	4770      	bx	lr
 8016b2e:	bf00      	nop
 8016b30:	e000e010 	.word	0xe000e010
 8016b34:	e000e018 	.word	0xe000e018
 8016b38:	20000008 	.word	0x20000008
 8016b3c:	10624dd3 	.word	0x10624dd3
 8016b40:	e000e014 	.word	0xe000e014

08016b44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016b44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016b54 <vPortEnableVFP+0x10>
 8016b48:	6801      	ldr	r1, [r0, #0]
 8016b4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8016b4e:	6001      	str	r1, [r0, #0]
 8016b50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016b52:	bf00      	nop
 8016b54:	e000ed88 	.word	0xe000ed88

08016b58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016b58:	b480      	push	{r7}
 8016b5a:	b085      	sub	sp, #20
 8016b5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8016b5e:	f3ef 8305 	mrs	r3, IPSR
 8016b62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	2b0f      	cmp	r3, #15
 8016b68:	d914      	bls.n	8016b94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8016b6a:	4a17      	ldr	r2, [pc, #92]	; (8016bc8 <vPortValidateInterruptPriority+0x70>)
 8016b6c:	68fb      	ldr	r3, [r7, #12]
 8016b6e:	4413      	add	r3, r2
 8016b70:	781b      	ldrb	r3, [r3, #0]
 8016b72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016b74:	4b15      	ldr	r3, [pc, #84]	; (8016bcc <vPortValidateInterruptPriority+0x74>)
 8016b76:	781b      	ldrb	r3, [r3, #0]
 8016b78:	7afa      	ldrb	r2, [r7, #11]
 8016b7a:	429a      	cmp	r2, r3
 8016b7c:	d20a      	bcs.n	8016b94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8016b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b82:	f383 8811 	msr	BASEPRI, r3
 8016b86:	f3bf 8f6f 	isb	sy
 8016b8a:	f3bf 8f4f 	dsb	sy
 8016b8e:	607b      	str	r3, [r7, #4]
}
 8016b90:	bf00      	nop
 8016b92:	e7fe      	b.n	8016b92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016b94:	4b0e      	ldr	r3, [pc, #56]	; (8016bd0 <vPortValidateInterruptPriority+0x78>)
 8016b96:	681b      	ldr	r3, [r3, #0]
 8016b98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8016b9c:	4b0d      	ldr	r3, [pc, #52]	; (8016bd4 <vPortValidateInterruptPriority+0x7c>)
 8016b9e:	681b      	ldr	r3, [r3, #0]
 8016ba0:	429a      	cmp	r2, r3
 8016ba2:	d90a      	bls.n	8016bba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8016ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ba8:	f383 8811 	msr	BASEPRI, r3
 8016bac:	f3bf 8f6f 	isb	sy
 8016bb0:	f3bf 8f4f 	dsb	sy
 8016bb4:	603b      	str	r3, [r7, #0]
}
 8016bb6:	bf00      	nop
 8016bb8:	e7fe      	b.n	8016bb8 <vPortValidateInterruptPriority+0x60>
	}
 8016bba:	bf00      	nop
 8016bbc:	3714      	adds	r7, #20
 8016bbe:	46bd      	mov	sp, r7
 8016bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bc4:	4770      	bx	lr
 8016bc6:	bf00      	nop
 8016bc8:	e000e3f0 	.word	0xe000e3f0
 8016bcc:	20003ab8 	.word	0x20003ab8
 8016bd0:	e000ed0c 	.word	0xe000ed0c
 8016bd4:	20003abc 	.word	0x20003abc

08016bd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016bd8:	b580      	push	{r7, lr}
 8016bda:	b08a      	sub	sp, #40	; 0x28
 8016bdc:	af00      	add	r7, sp, #0
 8016bde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016be0:	2300      	movs	r3, #0
 8016be2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016be4:	f7fe ffc0 	bl	8015b68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016be8:	4b5b      	ldr	r3, [pc, #364]	; (8016d58 <pvPortMalloc+0x180>)
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d101      	bne.n	8016bf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016bf0:	f000 f920 	bl	8016e34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016bf4:	4b59      	ldr	r3, [pc, #356]	; (8016d5c <pvPortMalloc+0x184>)
 8016bf6:	681a      	ldr	r2, [r3, #0]
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	4013      	ands	r3, r2
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	f040 8093 	bne.w	8016d28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d01d      	beq.n	8016c44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8016c08:	2208      	movs	r2, #8
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	4413      	add	r3, r2
 8016c0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	f003 0307 	and.w	r3, r3, #7
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	d014      	beq.n	8016c44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	f023 0307 	bic.w	r3, r3, #7
 8016c20:	3308      	adds	r3, #8
 8016c22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	f003 0307 	and.w	r3, r3, #7
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d00a      	beq.n	8016c44 <pvPortMalloc+0x6c>
	__asm volatile
 8016c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c32:	f383 8811 	msr	BASEPRI, r3
 8016c36:	f3bf 8f6f 	isb	sy
 8016c3a:	f3bf 8f4f 	dsb	sy
 8016c3e:	617b      	str	r3, [r7, #20]
}
 8016c40:	bf00      	nop
 8016c42:	e7fe      	b.n	8016c42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d06e      	beq.n	8016d28 <pvPortMalloc+0x150>
 8016c4a:	4b45      	ldr	r3, [pc, #276]	; (8016d60 <pvPortMalloc+0x188>)
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	687a      	ldr	r2, [r7, #4]
 8016c50:	429a      	cmp	r2, r3
 8016c52:	d869      	bhi.n	8016d28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016c54:	4b43      	ldr	r3, [pc, #268]	; (8016d64 <pvPortMalloc+0x18c>)
 8016c56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016c58:	4b42      	ldr	r3, [pc, #264]	; (8016d64 <pvPortMalloc+0x18c>)
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016c5e:	e004      	b.n	8016c6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8016c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c6c:	685b      	ldr	r3, [r3, #4]
 8016c6e:	687a      	ldr	r2, [r7, #4]
 8016c70:	429a      	cmp	r2, r3
 8016c72:	d903      	bls.n	8016c7c <pvPortMalloc+0xa4>
 8016c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c76:	681b      	ldr	r3, [r3, #0]
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	d1f1      	bne.n	8016c60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016c7c:	4b36      	ldr	r3, [pc, #216]	; (8016d58 <pvPortMalloc+0x180>)
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016c82:	429a      	cmp	r2, r3
 8016c84:	d050      	beq.n	8016d28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016c86:	6a3b      	ldr	r3, [r7, #32]
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	2208      	movs	r2, #8
 8016c8c:	4413      	add	r3, r2
 8016c8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c92:	681a      	ldr	r2, [r3, #0]
 8016c94:	6a3b      	ldr	r3, [r7, #32]
 8016c96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c9a:	685a      	ldr	r2, [r3, #4]
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	1ad2      	subs	r2, r2, r3
 8016ca0:	2308      	movs	r3, #8
 8016ca2:	005b      	lsls	r3, r3, #1
 8016ca4:	429a      	cmp	r2, r3
 8016ca6:	d91f      	bls.n	8016ce8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	4413      	add	r3, r2
 8016cae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016cb0:	69bb      	ldr	r3, [r7, #24]
 8016cb2:	f003 0307 	and.w	r3, r3, #7
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d00a      	beq.n	8016cd0 <pvPortMalloc+0xf8>
	__asm volatile
 8016cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cbe:	f383 8811 	msr	BASEPRI, r3
 8016cc2:	f3bf 8f6f 	isb	sy
 8016cc6:	f3bf 8f4f 	dsb	sy
 8016cca:	613b      	str	r3, [r7, #16]
}
 8016ccc:	bf00      	nop
 8016cce:	e7fe      	b.n	8016cce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cd2:	685a      	ldr	r2, [r3, #4]
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	1ad2      	subs	r2, r2, r3
 8016cd8:	69bb      	ldr	r3, [r7, #24]
 8016cda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cde:	687a      	ldr	r2, [r7, #4]
 8016ce0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016ce2:	69b8      	ldr	r0, [r7, #24]
 8016ce4:	f000 f908 	bl	8016ef8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016ce8:	4b1d      	ldr	r3, [pc, #116]	; (8016d60 <pvPortMalloc+0x188>)
 8016cea:	681a      	ldr	r2, [r3, #0]
 8016cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cee:	685b      	ldr	r3, [r3, #4]
 8016cf0:	1ad3      	subs	r3, r2, r3
 8016cf2:	4a1b      	ldr	r2, [pc, #108]	; (8016d60 <pvPortMalloc+0x188>)
 8016cf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016cf6:	4b1a      	ldr	r3, [pc, #104]	; (8016d60 <pvPortMalloc+0x188>)
 8016cf8:	681a      	ldr	r2, [r3, #0]
 8016cfa:	4b1b      	ldr	r3, [pc, #108]	; (8016d68 <pvPortMalloc+0x190>)
 8016cfc:	681b      	ldr	r3, [r3, #0]
 8016cfe:	429a      	cmp	r2, r3
 8016d00:	d203      	bcs.n	8016d0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016d02:	4b17      	ldr	r3, [pc, #92]	; (8016d60 <pvPortMalloc+0x188>)
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	4a18      	ldr	r2, [pc, #96]	; (8016d68 <pvPortMalloc+0x190>)
 8016d08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d0c:	685a      	ldr	r2, [r3, #4]
 8016d0e:	4b13      	ldr	r3, [pc, #76]	; (8016d5c <pvPortMalloc+0x184>)
 8016d10:	681b      	ldr	r3, [r3, #0]
 8016d12:	431a      	orrs	r2, r3
 8016d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d1a:	2200      	movs	r2, #0
 8016d1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8016d1e:	4b13      	ldr	r3, [pc, #76]	; (8016d6c <pvPortMalloc+0x194>)
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	3301      	adds	r3, #1
 8016d24:	4a11      	ldr	r2, [pc, #68]	; (8016d6c <pvPortMalloc+0x194>)
 8016d26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016d28:	f7fe ff2c 	bl	8015b84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016d2c:	69fb      	ldr	r3, [r7, #28]
 8016d2e:	f003 0307 	and.w	r3, r3, #7
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d00a      	beq.n	8016d4c <pvPortMalloc+0x174>
	__asm volatile
 8016d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d3a:	f383 8811 	msr	BASEPRI, r3
 8016d3e:	f3bf 8f6f 	isb	sy
 8016d42:	f3bf 8f4f 	dsb	sy
 8016d46:	60fb      	str	r3, [r7, #12]
}
 8016d48:	bf00      	nop
 8016d4a:	e7fe      	b.n	8016d4a <pvPortMalloc+0x172>
	return pvReturn;
 8016d4c:	69fb      	ldr	r3, [r7, #28]
}
 8016d4e:	4618      	mov	r0, r3
 8016d50:	3728      	adds	r7, #40	; 0x28
 8016d52:	46bd      	mov	sp, r7
 8016d54:	bd80      	pop	{r7, pc}
 8016d56:	bf00      	nop
 8016d58:	200076c8 	.word	0x200076c8
 8016d5c:	200076dc 	.word	0x200076dc
 8016d60:	200076cc 	.word	0x200076cc
 8016d64:	200076c0 	.word	0x200076c0
 8016d68:	200076d0 	.word	0x200076d0
 8016d6c:	200076d4 	.word	0x200076d4

08016d70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016d70:	b580      	push	{r7, lr}
 8016d72:	b086      	sub	sp, #24
 8016d74:	af00      	add	r7, sp, #0
 8016d76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d04d      	beq.n	8016e1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016d82:	2308      	movs	r3, #8
 8016d84:	425b      	negs	r3, r3
 8016d86:	697a      	ldr	r2, [r7, #20]
 8016d88:	4413      	add	r3, r2
 8016d8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016d8c:	697b      	ldr	r3, [r7, #20]
 8016d8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016d90:	693b      	ldr	r3, [r7, #16]
 8016d92:	685a      	ldr	r2, [r3, #4]
 8016d94:	4b24      	ldr	r3, [pc, #144]	; (8016e28 <vPortFree+0xb8>)
 8016d96:	681b      	ldr	r3, [r3, #0]
 8016d98:	4013      	ands	r3, r2
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d10a      	bne.n	8016db4 <vPortFree+0x44>
	__asm volatile
 8016d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016da2:	f383 8811 	msr	BASEPRI, r3
 8016da6:	f3bf 8f6f 	isb	sy
 8016daa:	f3bf 8f4f 	dsb	sy
 8016dae:	60fb      	str	r3, [r7, #12]
}
 8016db0:	bf00      	nop
 8016db2:	e7fe      	b.n	8016db2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016db4:	693b      	ldr	r3, [r7, #16]
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d00a      	beq.n	8016dd2 <vPortFree+0x62>
	__asm volatile
 8016dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dc0:	f383 8811 	msr	BASEPRI, r3
 8016dc4:	f3bf 8f6f 	isb	sy
 8016dc8:	f3bf 8f4f 	dsb	sy
 8016dcc:	60bb      	str	r3, [r7, #8]
}
 8016dce:	bf00      	nop
 8016dd0:	e7fe      	b.n	8016dd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016dd2:	693b      	ldr	r3, [r7, #16]
 8016dd4:	685a      	ldr	r2, [r3, #4]
 8016dd6:	4b14      	ldr	r3, [pc, #80]	; (8016e28 <vPortFree+0xb8>)
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	4013      	ands	r3, r2
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d01e      	beq.n	8016e1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016de0:	693b      	ldr	r3, [r7, #16]
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d11a      	bne.n	8016e1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016de8:	693b      	ldr	r3, [r7, #16]
 8016dea:	685a      	ldr	r2, [r3, #4]
 8016dec:	4b0e      	ldr	r3, [pc, #56]	; (8016e28 <vPortFree+0xb8>)
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	43db      	mvns	r3, r3
 8016df2:	401a      	ands	r2, r3
 8016df4:	693b      	ldr	r3, [r7, #16]
 8016df6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016df8:	f7fe feb6 	bl	8015b68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016dfc:	693b      	ldr	r3, [r7, #16]
 8016dfe:	685a      	ldr	r2, [r3, #4]
 8016e00:	4b0a      	ldr	r3, [pc, #40]	; (8016e2c <vPortFree+0xbc>)
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	4413      	add	r3, r2
 8016e06:	4a09      	ldr	r2, [pc, #36]	; (8016e2c <vPortFree+0xbc>)
 8016e08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016e0a:	6938      	ldr	r0, [r7, #16]
 8016e0c:	f000 f874 	bl	8016ef8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016e10:	4b07      	ldr	r3, [pc, #28]	; (8016e30 <vPortFree+0xc0>)
 8016e12:	681b      	ldr	r3, [r3, #0]
 8016e14:	3301      	adds	r3, #1
 8016e16:	4a06      	ldr	r2, [pc, #24]	; (8016e30 <vPortFree+0xc0>)
 8016e18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8016e1a:	f7fe feb3 	bl	8015b84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016e1e:	bf00      	nop
 8016e20:	3718      	adds	r7, #24
 8016e22:	46bd      	mov	sp, r7
 8016e24:	bd80      	pop	{r7, pc}
 8016e26:	bf00      	nop
 8016e28:	200076dc 	.word	0x200076dc
 8016e2c:	200076cc 	.word	0x200076cc
 8016e30:	200076d8 	.word	0x200076d8

08016e34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016e34:	b480      	push	{r7}
 8016e36:	b085      	sub	sp, #20
 8016e38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016e3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8016e3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016e40:	4b27      	ldr	r3, [pc, #156]	; (8016ee0 <prvHeapInit+0xac>)
 8016e42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016e44:	68fb      	ldr	r3, [r7, #12]
 8016e46:	f003 0307 	and.w	r3, r3, #7
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d00c      	beq.n	8016e68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016e4e:	68fb      	ldr	r3, [r7, #12]
 8016e50:	3307      	adds	r3, #7
 8016e52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016e54:	68fb      	ldr	r3, [r7, #12]
 8016e56:	f023 0307 	bic.w	r3, r3, #7
 8016e5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016e5c:	68ba      	ldr	r2, [r7, #8]
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	1ad3      	subs	r3, r2, r3
 8016e62:	4a1f      	ldr	r2, [pc, #124]	; (8016ee0 <prvHeapInit+0xac>)
 8016e64:	4413      	add	r3, r2
 8016e66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016e68:	68fb      	ldr	r3, [r7, #12]
 8016e6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016e6c:	4a1d      	ldr	r2, [pc, #116]	; (8016ee4 <prvHeapInit+0xb0>)
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016e72:	4b1c      	ldr	r3, [pc, #112]	; (8016ee4 <prvHeapInit+0xb0>)
 8016e74:	2200      	movs	r2, #0
 8016e76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	68ba      	ldr	r2, [r7, #8]
 8016e7c:	4413      	add	r3, r2
 8016e7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016e80:	2208      	movs	r2, #8
 8016e82:	68fb      	ldr	r3, [r7, #12]
 8016e84:	1a9b      	subs	r3, r3, r2
 8016e86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016e88:	68fb      	ldr	r3, [r7, #12]
 8016e8a:	f023 0307 	bic.w	r3, r3, #7
 8016e8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016e90:	68fb      	ldr	r3, [r7, #12]
 8016e92:	4a15      	ldr	r2, [pc, #84]	; (8016ee8 <prvHeapInit+0xb4>)
 8016e94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016e96:	4b14      	ldr	r3, [pc, #80]	; (8016ee8 <prvHeapInit+0xb4>)
 8016e98:	681b      	ldr	r3, [r3, #0]
 8016e9a:	2200      	movs	r2, #0
 8016e9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016e9e:	4b12      	ldr	r3, [pc, #72]	; (8016ee8 <prvHeapInit+0xb4>)
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	2200      	movs	r2, #0
 8016ea4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016eaa:	683b      	ldr	r3, [r7, #0]
 8016eac:	68fa      	ldr	r2, [r7, #12]
 8016eae:	1ad2      	subs	r2, r2, r3
 8016eb0:	683b      	ldr	r3, [r7, #0]
 8016eb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016eb4:	4b0c      	ldr	r3, [pc, #48]	; (8016ee8 <prvHeapInit+0xb4>)
 8016eb6:	681a      	ldr	r2, [r3, #0]
 8016eb8:	683b      	ldr	r3, [r7, #0]
 8016eba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016ebc:	683b      	ldr	r3, [r7, #0]
 8016ebe:	685b      	ldr	r3, [r3, #4]
 8016ec0:	4a0a      	ldr	r2, [pc, #40]	; (8016eec <prvHeapInit+0xb8>)
 8016ec2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016ec4:	683b      	ldr	r3, [r7, #0]
 8016ec6:	685b      	ldr	r3, [r3, #4]
 8016ec8:	4a09      	ldr	r2, [pc, #36]	; (8016ef0 <prvHeapInit+0xbc>)
 8016eca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016ecc:	4b09      	ldr	r3, [pc, #36]	; (8016ef4 <prvHeapInit+0xc0>)
 8016ece:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016ed2:	601a      	str	r2, [r3, #0]
}
 8016ed4:	bf00      	nop
 8016ed6:	3714      	adds	r7, #20
 8016ed8:	46bd      	mov	sp, r7
 8016eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ede:	4770      	bx	lr
 8016ee0:	20003ac0 	.word	0x20003ac0
 8016ee4:	200076c0 	.word	0x200076c0
 8016ee8:	200076c8 	.word	0x200076c8
 8016eec:	200076d0 	.word	0x200076d0
 8016ef0:	200076cc 	.word	0x200076cc
 8016ef4:	200076dc 	.word	0x200076dc

08016ef8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016ef8:	b480      	push	{r7}
 8016efa:	b085      	sub	sp, #20
 8016efc:	af00      	add	r7, sp, #0
 8016efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016f00:	4b28      	ldr	r3, [pc, #160]	; (8016fa4 <prvInsertBlockIntoFreeList+0xac>)
 8016f02:	60fb      	str	r3, [r7, #12]
 8016f04:	e002      	b.n	8016f0c <prvInsertBlockIntoFreeList+0x14>
 8016f06:	68fb      	ldr	r3, [r7, #12]
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	60fb      	str	r3, [r7, #12]
 8016f0c:	68fb      	ldr	r3, [r7, #12]
 8016f0e:	681b      	ldr	r3, [r3, #0]
 8016f10:	687a      	ldr	r2, [r7, #4]
 8016f12:	429a      	cmp	r2, r3
 8016f14:	d8f7      	bhi.n	8016f06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016f16:	68fb      	ldr	r3, [r7, #12]
 8016f18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016f1a:	68fb      	ldr	r3, [r7, #12]
 8016f1c:	685b      	ldr	r3, [r3, #4]
 8016f1e:	68ba      	ldr	r2, [r7, #8]
 8016f20:	4413      	add	r3, r2
 8016f22:	687a      	ldr	r2, [r7, #4]
 8016f24:	429a      	cmp	r2, r3
 8016f26:	d108      	bne.n	8016f3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016f28:	68fb      	ldr	r3, [r7, #12]
 8016f2a:	685a      	ldr	r2, [r3, #4]
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	685b      	ldr	r3, [r3, #4]
 8016f30:	441a      	add	r2, r3
 8016f32:	68fb      	ldr	r3, [r7, #12]
 8016f34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016f36:	68fb      	ldr	r3, [r7, #12]
 8016f38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	685b      	ldr	r3, [r3, #4]
 8016f42:	68ba      	ldr	r2, [r7, #8]
 8016f44:	441a      	add	r2, r3
 8016f46:	68fb      	ldr	r3, [r7, #12]
 8016f48:	681b      	ldr	r3, [r3, #0]
 8016f4a:	429a      	cmp	r2, r3
 8016f4c:	d118      	bne.n	8016f80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016f4e:	68fb      	ldr	r3, [r7, #12]
 8016f50:	681a      	ldr	r2, [r3, #0]
 8016f52:	4b15      	ldr	r3, [pc, #84]	; (8016fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	429a      	cmp	r2, r3
 8016f58:	d00d      	beq.n	8016f76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	685a      	ldr	r2, [r3, #4]
 8016f5e:	68fb      	ldr	r3, [r7, #12]
 8016f60:	681b      	ldr	r3, [r3, #0]
 8016f62:	685b      	ldr	r3, [r3, #4]
 8016f64:	441a      	add	r2, r3
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	681b      	ldr	r3, [r3, #0]
 8016f6e:	681a      	ldr	r2, [r3, #0]
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	601a      	str	r2, [r3, #0]
 8016f74:	e008      	b.n	8016f88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016f76:	4b0c      	ldr	r3, [pc, #48]	; (8016fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8016f78:	681a      	ldr	r2, [r3, #0]
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	601a      	str	r2, [r3, #0]
 8016f7e:	e003      	b.n	8016f88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	681a      	ldr	r2, [r3, #0]
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016f88:	68fa      	ldr	r2, [r7, #12]
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	429a      	cmp	r2, r3
 8016f8e:	d002      	beq.n	8016f96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016f90:	68fb      	ldr	r3, [r7, #12]
 8016f92:	687a      	ldr	r2, [r7, #4]
 8016f94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016f96:	bf00      	nop
 8016f98:	3714      	adds	r7, #20
 8016f9a:	46bd      	mov	sp, r7
 8016f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fa0:	4770      	bx	lr
 8016fa2:	bf00      	nop
 8016fa4:	200076c0 	.word	0x200076c0
 8016fa8:	200076c8 	.word	0x200076c8

08016fac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016fac:	b580      	push	{r7, lr}
 8016fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016fb0:	2200      	movs	r2, #0
 8016fb2:	4912      	ldr	r1, [pc, #72]	; (8016ffc <MX_USB_DEVICE_Init+0x50>)
 8016fb4:	4812      	ldr	r0, [pc, #72]	; (8017000 <MX_USB_DEVICE_Init+0x54>)
 8016fb6:	f7f8 fb84 	bl	800f6c2 <USBD_Init>
 8016fba:	4603      	mov	r3, r0
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d001      	beq.n	8016fc4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016fc0:	f7eb fa22 	bl	8002408 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8016fc4:	490f      	ldr	r1, [pc, #60]	; (8017004 <MX_USB_DEVICE_Init+0x58>)
 8016fc6:	480e      	ldr	r0, [pc, #56]	; (8017000 <MX_USB_DEVICE_Init+0x54>)
 8016fc8:	f7f8 fbab 	bl	800f722 <USBD_RegisterClass>
 8016fcc:	4603      	mov	r3, r0
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d001      	beq.n	8016fd6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016fd2:	f7eb fa19 	bl	8002408 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8016fd6:	490c      	ldr	r1, [pc, #48]	; (8017008 <MX_USB_DEVICE_Init+0x5c>)
 8016fd8:	4809      	ldr	r0, [pc, #36]	; (8017000 <MX_USB_DEVICE_Init+0x54>)
 8016fda:	f7f6 fe55 	bl	800dc88 <USBD_MSC_RegisterStorage>
 8016fde:	4603      	mov	r3, r0
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	d001      	beq.n	8016fe8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016fe4:	f7eb fa10 	bl	8002408 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016fe8:	4805      	ldr	r0, [pc, #20]	; (8017000 <MX_USB_DEVICE_Init+0x54>)
 8016fea:	f7f8 fbd0 	bl	800f78e <USBD_Start>
 8016fee:	4603      	mov	r3, r0
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d001      	beq.n	8016ff8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016ff4:	f7eb fa08 	bl	8002408 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016ff8:	bf00      	nop
 8016ffa:	bd80      	pop	{r7, pc}
 8016ffc:	200000c0 	.word	0x200000c0
 8017000:	200076e0 	.word	0x200076e0
 8017004:	20000014 	.word	0x20000014
 8017008:	20000120 	.word	0x20000120

0801700c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801700c:	b480      	push	{r7}
 801700e:	b083      	sub	sp, #12
 8017010:	af00      	add	r7, sp, #0
 8017012:	4603      	mov	r3, r0
 8017014:	6039      	str	r1, [r7, #0]
 8017016:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017018:	683b      	ldr	r3, [r7, #0]
 801701a:	2212      	movs	r2, #18
 801701c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801701e:	4b03      	ldr	r3, [pc, #12]	; (801702c <USBD_FS_DeviceDescriptor+0x20>)
}
 8017020:	4618      	mov	r0, r3
 8017022:	370c      	adds	r7, #12
 8017024:	46bd      	mov	sp, r7
 8017026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801702a:	4770      	bx	lr
 801702c:	200000e0 	.word	0x200000e0

08017030 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017030:	b480      	push	{r7}
 8017032:	b083      	sub	sp, #12
 8017034:	af00      	add	r7, sp, #0
 8017036:	4603      	mov	r3, r0
 8017038:	6039      	str	r1, [r7, #0]
 801703a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801703c:	683b      	ldr	r3, [r7, #0]
 801703e:	2204      	movs	r2, #4
 8017040:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017042:	4b03      	ldr	r3, [pc, #12]	; (8017050 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017044:	4618      	mov	r0, r3
 8017046:	370c      	adds	r7, #12
 8017048:	46bd      	mov	sp, r7
 801704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801704e:	4770      	bx	lr
 8017050:	20000100 	.word	0x20000100

08017054 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017054:	b580      	push	{r7, lr}
 8017056:	b082      	sub	sp, #8
 8017058:	af00      	add	r7, sp, #0
 801705a:	4603      	mov	r3, r0
 801705c:	6039      	str	r1, [r7, #0]
 801705e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017060:	79fb      	ldrb	r3, [r7, #7]
 8017062:	2b00      	cmp	r3, #0
 8017064:	d105      	bne.n	8017072 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017066:	683a      	ldr	r2, [r7, #0]
 8017068:	4907      	ldr	r1, [pc, #28]	; (8017088 <USBD_FS_ProductStrDescriptor+0x34>)
 801706a:	4808      	ldr	r0, [pc, #32]	; (801708c <USBD_FS_ProductStrDescriptor+0x38>)
 801706c:	f7f9 fd66 	bl	8010b3c <USBD_GetString>
 8017070:	e004      	b.n	801707c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017072:	683a      	ldr	r2, [r7, #0]
 8017074:	4904      	ldr	r1, [pc, #16]	; (8017088 <USBD_FS_ProductStrDescriptor+0x34>)
 8017076:	4805      	ldr	r0, [pc, #20]	; (801708c <USBD_FS_ProductStrDescriptor+0x38>)
 8017078:	f7f9 fd60 	bl	8010b3c <USBD_GetString>
  }
  return USBD_StrDesc;
 801707c:	4b02      	ldr	r3, [pc, #8]	; (8017088 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801707e:	4618      	mov	r0, r3
 8017080:	3708      	adds	r7, #8
 8017082:	46bd      	mov	sp, r7
 8017084:	bd80      	pop	{r7, pc}
 8017086:	bf00      	nop
 8017088:	200079bc 	.word	0x200079bc
 801708c:	0801d1dc 	.word	0x0801d1dc

08017090 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017090:	b580      	push	{r7, lr}
 8017092:	b082      	sub	sp, #8
 8017094:	af00      	add	r7, sp, #0
 8017096:	4603      	mov	r3, r0
 8017098:	6039      	str	r1, [r7, #0]
 801709a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801709c:	683a      	ldr	r2, [r7, #0]
 801709e:	4904      	ldr	r1, [pc, #16]	; (80170b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80170a0:	4804      	ldr	r0, [pc, #16]	; (80170b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80170a2:	f7f9 fd4b 	bl	8010b3c <USBD_GetString>
  return USBD_StrDesc;
 80170a6:	4b02      	ldr	r3, [pc, #8]	; (80170b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80170a8:	4618      	mov	r0, r3
 80170aa:	3708      	adds	r7, #8
 80170ac:	46bd      	mov	sp, r7
 80170ae:	bd80      	pop	{r7, pc}
 80170b0:	200079bc 	.word	0x200079bc
 80170b4:	0801d1f0 	.word	0x0801d1f0

080170b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80170b8:	b580      	push	{r7, lr}
 80170ba:	b082      	sub	sp, #8
 80170bc:	af00      	add	r7, sp, #0
 80170be:	4603      	mov	r3, r0
 80170c0:	6039      	str	r1, [r7, #0]
 80170c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80170c4:	683b      	ldr	r3, [r7, #0]
 80170c6:	221a      	movs	r2, #26
 80170c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80170ca:	f000 f855 	bl	8017178 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80170ce:	4b02      	ldr	r3, [pc, #8]	; (80170d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80170d0:	4618      	mov	r0, r3
 80170d2:	3708      	adds	r7, #8
 80170d4:	46bd      	mov	sp, r7
 80170d6:	bd80      	pop	{r7, pc}
 80170d8:	20000104 	.word	0x20000104

080170dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80170dc:	b580      	push	{r7, lr}
 80170de:	b082      	sub	sp, #8
 80170e0:	af00      	add	r7, sp, #0
 80170e2:	4603      	mov	r3, r0
 80170e4:	6039      	str	r1, [r7, #0]
 80170e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80170e8:	79fb      	ldrb	r3, [r7, #7]
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d105      	bne.n	80170fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80170ee:	683a      	ldr	r2, [r7, #0]
 80170f0:	4907      	ldr	r1, [pc, #28]	; (8017110 <USBD_FS_ConfigStrDescriptor+0x34>)
 80170f2:	4808      	ldr	r0, [pc, #32]	; (8017114 <USBD_FS_ConfigStrDescriptor+0x38>)
 80170f4:	f7f9 fd22 	bl	8010b3c <USBD_GetString>
 80170f8:	e004      	b.n	8017104 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80170fa:	683a      	ldr	r2, [r7, #0]
 80170fc:	4904      	ldr	r1, [pc, #16]	; (8017110 <USBD_FS_ConfigStrDescriptor+0x34>)
 80170fe:	4805      	ldr	r0, [pc, #20]	; (8017114 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017100:	f7f9 fd1c 	bl	8010b3c <USBD_GetString>
  }
  return USBD_StrDesc;
 8017104:	4b02      	ldr	r3, [pc, #8]	; (8017110 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8017106:	4618      	mov	r0, r3
 8017108:	3708      	adds	r7, #8
 801710a:	46bd      	mov	sp, r7
 801710c:	bd80      	pop	{r7, pc}
 801710e:	bf00      	nop
 8017110:	200079bc 	.word	0x200079bc
 8017114:	0801d204 	.word	0x0801d204

08017118 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017118:	b580      	push	{r7, lr}
 801711a:	b082      	sub	sp, #8
 801711c:	af00      	add	r7, sp, #0
 801711e:	4603      	mov	r3, r0
 8017120:	6039      	str	r1, [r7, #0]
 8017122:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017124:	79fb      	ldrb	r3, [r7, #7]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d105      	bne.n	8017136 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801712a:	683a      	ldr	r2, [r7, #0]
 801712c:	4907      	ldr	r1, [pc, #28]	; (801714c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801712e:	4808      	ldr	r0, [pc, #32]	; (8017150 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017130:	f7f9 fd04 	bl	8010b3c <USBD_GetString>
 8017134:	e004      	b.n	8017140 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017136:	683a      	ldr	r2, [r7, #0]
 8017138:	4904      	ldr	r1, [pc, #16]	; (801714c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801713a:	4805      	ldr	r0, [pc, #20]	; (8017150 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801713c:	f7f9 fcfe 	bl	8010b3c <USBD_GetString>
  }
  return USBD_StrDesc;
 8017140:	4b02      	ldr	r3, [pc, #8]	; (801714c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8017142:	4618      	mov	r0, r3
 8017144:	3708      	adds	r7, #8
 8017146:	46bd      	mov	sp, r7
 8017148:	bd80      	pop	{r7, pc}
 801714a:	bf00      	nop
 801714c:	200079bc 	.word	0x200079bc
 8017150:	0801d210 	.word	0x0801d210

08017154 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017154:	b480      	push	{r7}
 8017156:	b083      	sub	sp, #12
 8017158:	af00      	add	r7, sp, #0
 801715a:	4603      	mov	r3, r0
 801715c:	6039      	str	r1, [r7, #0]
 801715e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8017160:	683b      	ldr	r3, [r7, #0]
 8017162:	220c      	movs	r2, #12
 8017164:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8017166:	4b03      	ldr	r3, [pc, #12]	; (8017174 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8017168:	4618      	mov	r0, r3
 801716a:	370c      	adds	r7, #12
 801716c:	46bd      	mov	sp, r7
 801716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017172:	4770      	bx	lr
 8017174:	200000f4 	.word	0x200000f4

08017178 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017178:	b580      	push	{r7, lr}
 801717a:	b084      	sub	sp, #16
 801717c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801717e:	4b0f      	ldr	r3, [pc, #60]	; (80171bc <Get_SerialNum+0x44>)
 8017180:	681b      	ldr	r3, [r3, #0]
 8017182:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017184:	4b0e      	ldr	r3, [pc, #56]	; (80171c0 <Get_SerialNum+0x48>)
 8017186:	681b      	ldr	r3, [r3, #0]
 8017188:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801718a:	4b0e      	ldr	r3, [pc, #56]	; (80171c4 <Get_SerialNum+0x4c>)
 801718c:	681b      	ldr	r3, [r3, #0]
 801718e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017190:	68fa      	ldr	r2, [r7, #12]
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	4413      	add	r3, r2
 8017196:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017198:	68fb      	ldr	r3, [r7, #12]
 801719a:	2b00      	cmp	r3, #0
 801719c:	d009      	beq.n	80171b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801719e:	2208      	movs	r2, #8
 80171a0:	4909      	ldr	r1, [pc, #36]	; (80171c8 <Get_SerialNum+0x50>)
 80171a2:	68f8      	ldr	r0, [r7, #12]
 80171a4:	f000 f814 	bl	80171d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80171a8:	2204      	movs	r2, #4
 80171aa:	4908      	ldr	r1, [pc, #32]	; (80171cc <Get_SerialNum+0x54>)
 80171ac:	68b8      	ldr	r0, [r7, #8]
 80171ae:	f000 f80f 	bl	80171d0 <IntToUnicode>
  }
}
 80171b2:	bf00      	nop
 80171b4:	3710      	adds	r7, #16
 80171b6:	46bd      	mov	sp, r7
 80171b8:	bd80      	pop	{r7, pc}
 80171ba:	bf00      	nop
 80171bc:	1fff7a10 	.word	0x1fff7a10
 80171c0:	1fff7a14 	.word	0x1fff7a14
 80171c4:	1fff7a18 	.word	0x1fff7a18
 80171c8:	20000106 	.word	0x20000106
 80171cc:	20000116 	.word	0x20000116

080171d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80171d0:	b480      	push	{r7}
 80171d2:	b087      	sub	sp, #28
 80171d4:	af00      	add	r7, sp, #0
 80171d6:	60f8      	str	r0, [r7, #12]
 80171d8:	60b9      	str	r1, [r7, #8]
 80171da:	4613      	mov	r3, r2
 80171dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80171de:	2300      	movs	r3, #0
 80171e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80171e2:	2300      	movs	r3, #0
 80171e4:	75fb      	strb	r3, [r7, #23]
 80171e6:	e027      	b.n	8017238 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	0f1b      	lsrs	r3, r3, #28
 80171ec:	2b09      	cmp	r3, #9
 80171ee:	d80b      	bhi.n	8017208 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	0f1b      	lsrs	r3, r3, #28
 80171f4:	b2da      	uxtb	r2, r3
 80171f6:	7dfb      	ldrb	r3, [r7, #23]
 80171f8:	005b      	lsls	r3, r3, #1
 80171fa:	4619      	mov	r1, r3
 80171fc:	68bb      	ldr	r3, [r7, #8]
 80171fe:	440b      	add	r3, r1
 8017200:	3230      	adds	r2, #48	; 0x30
 8017202:	b2d2      	uxtb	r2, r2
 8017204:	701a      	strb	r2, [r3, #0]
 8017206:	e00a      	b.n	801721e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	0f1b      	lsrs	r3, r3, #28
 801720c:	b2da      	uxtb	r2, r3
 801720e:	7dfb      	ldrb	r3, [r7, #23]
 8017210:	005b      	lsls	r3, r3, #1
 8017212:	4619      	mov	r1, r3
 8017214:	68bb      	ldr	r3, [r7, #8]
 8017216:	440b      	add	r3, r1
 8017218:	3237      	adds	r2, #55	; 0x37
 801721a:	b2d2      	uxtb	r2, r2
 801721c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801721e:	68fb      	ldr	r3, [r7, #12]
 8017220:	011b      	lsls	r3, r3, #4
 8017222:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017224:	7dfb      	ldrb	r3, [r7, #23]
 8017226:	005b      	lsls	r3, r3, #1
 8017228:	3301      	adds	r3, #1
 801722a:	68ba      	ldr	r2, [r7, #8]
 801722c:	4413      	add	r3, r2
 801722e:	2200      	movs	r2, #0
 8017230:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017232:	7dfb      	ldrb	r3, [r7, #23]
 8017234:	3301      	adds	r3, #1
 8017236:	75fb      	strb	r3, [r7, #23]
 8017238:	7dfa      	ldrb	r2, [r7, #23]
 801723a:	79fb      	ldrb	r3, [r7, #7]
 801723c:	429a      	cmp	r2, r3
 801723e:	d3d3      	bcc.n	80171e8 <IntToUnicode+0x18>
  }
}
 8017240:	bf00      	nop
 8017242:	bf00      	nop
 8017244:	371c      	adds	r7, #28
 8017246:	46bd      	mov	sp, r7
 8017248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801724c:	4770      	bx	lr

0801724e <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801724e:	b480      	push	{r7}
 8017250:	b083      	sub	sp, #12
 8017252:	af00      	add	r7, sp, #0
 8017254:	4603      	mov	r3, r0
 8017256:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
	UNUSED(lun);

	return (USBD_OK);
 8017258:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801725a:	4618      	mov	r0, r3
 801725c:	370c      	adds	r7, #12
 801725e:	46bd      	mov	sp, r7
 8017260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017264:	4770      	bx	lr
	...

08017268 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8017268:	b580      	push	{r7, lr}
 801726a:	b08e      	sub	sp, #56	; 0x38
 801726c:	af00      	add	r7, sp, #0
 801726e:	4603      	mov	r3, r0
 8017270:	60b9      	str	r1, [r7, #8]
 8017272:	607a      	str	r2, [r7, #4]
 8017274:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	HAL_SD_CardInfoTypeDef info;
	int8_t ret = -1;
 8017276:	23ff      	movs	r3, #255	; 0xff
 8017278:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	HAL_SD_GetCardInfo(&hsd, &info);
 801727c:	f107 0314 	add.w	r3, r7, #20
 8017280:	4619      	mov	r1, r3
 8017282:	480a      	ldr	r0, [pc, #40]	; (80172ac <STORAGE_GetCapacity_FS+0x44>)
 8017284:	f7f2 fac6 	bl	8009814 <HAL_SD_GetCardInfo>

	*block_num = info.LogBlockNbr - 1;
 8017288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801728a:	1e5a      	subs	r2, r3, #1
 801728c:	68bb      	ldr	r3, [r7, #8]
 801728e:	601a      	str	r2, [r3, #0]
	*block_size = info.LogBlockSize;
 8017290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017292:	b29a      	uxth	r2, r3
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	801a      	strh	r2, [r3, #0]
	ret = 0;
 8017298:	2300      	movs	r3, #0
 801729a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	return ret;
 801729e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 80172a2:	4618      	mov	r0, r3
 80172a4:	3738      	adds	r7, #56	; 0x38
 80172a6:	46bd      	mov	sp, r7
 80172a8:	bd80      	pop	{r7, pc}
 80172aa:	bf00      	nop
 80172ac:	20002f70 	.word	0x20002f70

080172b0 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80172b0:	b480      	push	{r7}
 80172b2:	b083      	sub	sp, #12
 80172b4:	af00      	add	r7, sp, #0
 80172b6:	4603      	mov	r3, r0
 80172b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
	UNUSED(lun);

	return (USBD_OK);
 80172ba:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80172bc:	4618      	mov	r0, r3
 80172be:	370c      	adds	r7, #12
 80172c0:	46bd      	mov	sp, r7
 80172c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172c6:	4770      	bx	lr

080172c8 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80172c8:	b480      	push	{r7}
 80172ca:	b083      	sub	sp, #12
 80172cc:	af00      	add	r7, sp, #0
 80172ce:	4603      	mov	r3, r0
 80172d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
	UNUSED(lun);

	return (USBD_OK);
 80172d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80172d4:	4618      	mov	r0, r3
 80172d6:	370c      	adds	r7, #12
 80172d8:	46bd      	mov	sp, r7
 80172da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172de:	4770      	bx	lr

080172e0 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80172e0:	b580      	push	{r7, lr}
 80172e2:	b088      	sub	sp, #32
 80172e4:	af02      	add	r7, sp, #8
 80172e6:	60b9      	str	r1, [r7, #8]
 80172e8:	607a      	str	r2, [r7, #4]
 80172ea:	461a      	mov	r2, r3
 80172ec:	4603      	mov	r3, r0
 80172ee:	73fb      	strb	r3, [r7, #15]
 80172f0:	4613      	mov	r3, r2
 80172f2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	int8_t ret = -1;
 80172f4:	23ff      	movs	r3, #255	; 0xff
 80172f6:	75fb      	strb	r3, [r7, #23]

	HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 80172f8:	89bb      	ldrh	r3, [r7, #12]
 80172fa:	f04f 32ff 	mov.w	r2, #4294967295
 80172fe:	9200      	str	r2, [sp, #0]
 8017300:	687a      	ldr	r2, [r7, #4]
 8017302:	68b9      	ldr	r1, [r7, #8]
 8017304:	4808      	ldr	r0, [pc, #32]	; (8017328 <STORAGE_Read_FS+0x48>)
 8017306:	f7f1 fa3b 	bl	8008780 <HAL_SD_ReadBlocks>

	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER)
 801730a:	bf00      	nop
 801730c:	4806      	ldr	r0, [pc, #24]	; (8017328 <STORAGE_Read_FS+0x48>)
 801730e:	f7f2 faad 	bl	800986c <HAL_SD_GetCardState>
 8017312:	4603      	mov	r3, r0
 8017314:	2b04      	cmp	r3, #4
 8017316:	d1f9      	bne.n	801730c <STORAGE_Read_FS+0x2c>
	{
	}
	ret = 0;
 8017318:	2300      	movs	r3, #0
 801731a:	75fb      	strb	r3, [r7, #23]
	return ret;
 801731c:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 8017320:	4618      	mov	r0, r3
 8017322:	3718      	adds	r7, #24
 8017324:	46bd      	mov	sp, r7
 8017326:	bd80      	pop	{r7, pc}
 8017328:	20002f70 	.word	0x20002f70

0801732c <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801732c:	b580      	push	{r7, lr}
 801732e:	b088      	sub	sp, #32
 8017330:	af02      	add	r7, sp, #8
 8017332:	60b9      	str	r1, [r7, #8]
 8017334:	607a      	str	r2, [r7, #4]
 8017336:	461a      	mov	r2, r3
 8017338:	4603      	mov	r3, r0
 801733a:	73fb      	strb	r3, [r7, #15]
 801733c:	4613      	mov	r3, r2
 801733e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t ret = -1;
 8017340:	23ff      	movs	r3, #255	; 0xff
 8017342:	75fb      	strb	r3, [r7, #23]

	HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8017344:	89bb      	ldrh	r3, [r7, #12]
 8017346:	f04f 32ff 	mov.w	r2, #4294967295
 801734a:	9200      	str	r2, [sp, #0]
 801734c:	687a      	ldr	r2, [r7, #4]
 801734e:	68b9      	ldr	r1, [r7, #8]
 8017350:	4808      	ldr	r0, [pc, #32]	; (8017374 <STORAGE_Write_FS+0x48>)
 8017352:	f7f1 fbf3 	bl	8008b3c <HAL_SD_WriteBlocks>

	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER)
 8017356:	bf00      	nop
 8017358:	4806      	ldr	r0, [pc, #24]	; (8017374 <STORAGE_Write_FS+0x48>)
 801735a:	f7f2 fa87 	bl	800986c <HAL_SD_GetCardState>
 801735e:	4603      	mov	r3, r0
 8017360:	2b04      	cmp	r3, #4
 8017362:	d1f9      	bne.n	8017358 <STORAGE_Write_FS+0x2c>
	{
	}
	ret = 0;
 8017364:	2300      	movs	r3, #0
 8017366:	75fb      	strb	r3, [r7, #23]
	return ret;
 8017368:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801736c:	4618      	mov	r0, r3
 801736e:	3718      	adds	r7, #24
 8017370:	46bd      	mov	sp, r7
 8017372:	bd80      	pop	{r7, pc}
 8017374:	20002f70 	.word	0x20002f70

08017378 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8017378:	b480      	push	{r7}
 801737a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
	return (STORAGE_LUN_NBR - 1);
 801737c:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801737e:	4618      	mov	r0, r3
 8017380:	46bd      	mov	sp, r7
 8017382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017386:	4770      	bx	lr

08017388 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017388:	b580      	push	{r7, lr}
 801738a:	b0a0      	sub	sp, #128	; 0x80
 801738c:	af00      	add	r7, sp, #0
 801738e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017390:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8017394:	2200      	movs	r2, #0
 8017396:	601a      	str	r2, [r3, #0]
 8017398:	605a      	str	r2, [r3, #4]
 801739a:	609a      	str	r2, [r3, #8]
 801739c:	60da      	str	r2, [r3, #12]
 801739e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80173a0:	f107 0310 	add.w	r3, r7, #16
 80173a4:	225c      	movs	r2, #92	; 0x5c
 80173a6:	2100      	movs	r1, #0
 80173a8:	4618      	mov	r0, r3
 80173aa:	f001 fd19 	bl	8018de0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	681b      	ldr	r3, [r3, #0]
 80173b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80173b6:	d149      	bne.n	801744c <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80173b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80173bc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80173be:	2300      	movs	r3, #0
 80173c0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80173c2:	f107 0310 	add.w	r3, r7, #16
 80173c6:	4618      	mov	r0, r3
 80173c8:	f7f0 f934 	bl	8007634 <HAL_RCCEx_PeriphCLKConfig>
 80173cc:	4603      	mov	r3, r0
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d001      	beq.n	80173d6 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80173d2:	f7eb f819 	bl	8002408 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80173d6:	2300      	movs	r3, #0
 80173d8:	60fb      	str	r3, [r7, #12]
 80173da:	4b1e      	ldr	r3, [pc, #120]	; (8017454 <HAL_PCD_MspInit+0xcc>)
 80173dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173de:	4a1d      	ldr	r2, [pc, #116]	; (8017454 <HAL_PCD_MspInit+0xcc>)
 80173e0:	f043 0301 	orr.w	r3, r3, #1
 80173e4:	6313      	str	r3, [r2, #48]	; 0x30
 80173e6:	4b1b      	ldr	r3, [pc, #108]	; (8017454 <HAL_PCD_MspInit+0xcc>)
 80173e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173ea:	f003 0301 	and.w	r3, r3, #1
 80173ee:	60fb      	str	r3, [r7, #12]
 80173f0:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80173f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80173f6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80173f8:	2302      	movs	r3, #2
 80173fa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80173fc:	2300      	movs	r3, #0
 80173fe:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017400:	2303      	movs	r3, #3
 8017402:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8017404:	230a      	movs	r3, #10
 8017406:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017408:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801740c:	4619      	mov	r1, r3
 801740e:	4812      	ldr	r0, [pc, #72]	; (8017458 <HAL_PCD_MspInit+0xd0>)
 8017410:	f7ed fdbc 	bl	8004f8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017414:	4b0f      	ldr	r3, [pc, #60]	; (8017454 <HAL_PCD_MspInit+0xcc>)
 8017416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017418:	4a0e      	ldr	r2, [pc, #56]	; (8017454 <HAL_PCD_MspInit+0xcc>)
 801741a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801741e:	6353      	str	r3, [r2, #52]	; 0x34
 8017420:	2300      	movs	r3, #0
 8017422:	60bb      	str	r3, [r7, #8]
 8017424:	4b0b      	ldr	r3, [pc, #44]	; (8017454 <HAL_PCD_MspInit+0xcc>)
 8017426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017428:	4a0a      	ldr	r2, [pc, #40]	; (8017454 <HAL_PCD_MspInit+0xcc>)
 801742a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801742e:	6453      	str	r3, [r2, #68]	; 0x44
 8017430:	4b08      	ldr	r3, [pc, #32]	; (8017454 <HAL_PCD_MspInit+0xcc>)
 8017432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017434:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017438:	60bb      	str	r3, [r7, #8]
 801743a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801743c:	2200      	movs	r2, #0
 801743e:	2105      	movs	r1, #5
 8017440:	2043      	movs	r0, #67	; 0x43
 8017442:	f7ed f96b 	bl	800471c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017446:	2043      	movs	r0, #67	; 0x43
 8017448:	f7ed f984 	bl	8004754 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801744c:	bf00      	nop
 801744e:	3780      	adds	r7, #128	; 0x80
 8017450:	46bd      	mov	sp, r7
 8017452:	bd80      	pop	{r7, pc}
 8017454:	40023800 	.word	0x40023800
 8017458:	40020000 	.word	0x40020000

0801745c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801745c:	b580      	push	{r7, lr}
 801745e:	b082      	sub	sp, #8
 8017460:	af00      	add	r7, sp, #0
 8017462:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8017470:	4619      	mov	r1, r3
 8017472:	4610      	mov	r0, r2
 8017474:	f7f8 f9d8 	bl	800f828 <USBD_LL_SetupStage>
}
 8017478:	bf00      	nop
 801747a:	3708      	adds	r7, #8
 801747c:	46bd      	mov	sp, r7
 801747e:	bd80      	pop	{r7, pc}

08017480 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017480:	b580      	push	{r7, lr}
 8017482:	b082      	sub	sp, #8
 8017484:	af00      	add	r7, sp, #0
 8017486:	6078      	str	r0, [r7, #4]
 8017488:	460b      	mov	r3, r1
 801748a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8017492:	78fa      	ldrb	r2, [r7, #3]
 8017494:	6879      	ldr	r1, [r7, #4]
 8017496:	4613      	mov	r3, r2
 8017498:	00db      	lsls	r3, r3, #3
 801749a:	4413      	add	r3, r2
 801749c:	009b      	lsls	r3, r3, #2
 801749e:	440b      	add	r3, r1
 80174a0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80174a4:	681a      	ldr	r2, [r3, #0]
 80174a6:	78fb      	ldrb	r3, [r7, #3]
 80174a8:	4619      	mov	r1, r3
 80174aa:	f7f8 fa12 	bl	800f8d2 <USBD_LL_DataOutStage>
}
 80174ae:	bf00      	nop
 80174b0:	3708      	adds	r7, #8
 80174b2:	46bd      	mov	sp, r7
 80174b4:	bd80      	pop	{r7, pc}

080174b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80174b6:	b580      	push	{r7, lr}
 80174b8:	b082      	sub	sp, #8
 80174ba:	af00      	add	r7, sp, #0
 80174bc:	6078      	str	r0, [r7, #4]
 80174be:	460b      	mov	r3, r1
 80174c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80174c8:	78fa      	ldrb	r2, [r7, #3]
 80174ca:	6879      	ldr	r1, [r7, #4]
 80174cc:	4613      	mov	r3, r2
 80174ce:	00db      	lsls	r3, r3, #3
 80174d0:	4413      	add	r3, r2
 80174d2:	009b      	lsls	r3, r3, #2
 80174d4:	440b      	add	r3, r1
 80174d6:	334c      	adds	r3, #76	; 0x4c
 80174d8:	681a      	ldr	r2, [r3, #0]
 80174da:	78fb      	ldrb	r3, [r7, #3]
 80174dc:	4619      	mov	r1, r3
 80174de:	f7f8 faab 	bl	800fa38 <USBD_LL_DataInStage>
}
 80174e2:	bf00      	nop
 80174e4:	3708      	adds	r7, #8
 80174e6:	46bd      	mov	sp, r7
 80174e8:	bd80      	pop	{r7, pc}

080174ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80174ea:	b580      	push	{r7, lr}
 80174ec:	b082      	sub	sp, #8
 80174ee:	af00      	add	r7, sp, #0
 80174f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80174f8:	4618      	mov	r0, r3
 80174fa:	f7f8 fbdf 	bl	800fcbc <USBD_LL_SOF>
}
 80174fe:	bf00      	nop
 8017500:	3708      	adds	r7, #8
 8017502:	46bd      	mov	sp, r7
 8017504:	bd80      	pop	{r7, pc}

08017506 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017506:	b580      	push	{r7, lr}
 8017508:	b084      	sub	sp, #16
 801750a:	af00      	add	r7, sp, #0
 801750c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801750e:	2301      	movs	r3, #1
 8017510:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	68db      	ldr	r3, [r3, #12]
 8017516:	2b00      	cmp	r3, #0
 8017518:	d102      	bne.n	8017520 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801751a:	2300      	movs	r3, #0
 801751c:	73fb      	strb	r3, [r7, #15]
 801751e:	e008      	b.n	8017532 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	68db      	ldr	r3, [r3, #12]
 8017524:	2b02      	cmp	r3, #2
 8017526:	d102      	bne.n	801752e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017528:	2301      	movs	r3, #1
 801752a:	73fb      	strb	r3, [r7, #15]
 801752c:	e001      	b.n	8017532 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801752e:	f7ea ff6b 	bl	8002408 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017538:	7bfa      	ldrb	r2, [r7, #15]
 801753a:	4611      	mov	r1, r2
 801753c:	4618      	mov	r0, r3
 801753e:	f7f8 fb7f 	bl	800fc40 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017548:	4618      	mov	r0, r3
 801754a:	f7f8 fb27 	bl	800fb9c <USBD_LL_Reset>
}
 801754e:	bf00      	nop
 8017550:	3710      	adds	r7, #16
 8017552:	46bd      	mov	sp, r7
 8017554:	bd80      	pop	{r7, pc}
	...

08017558 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017558:	b580      	push	{r7, lr}
 801755a:	b082      	sub	sp, #8
 801755c:	af00      	add	r7, sp, #0
 801755e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017566:	4618      	mov	r0, r3
 8017568:	f7f8 fb7a 	bl	800fc60 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	681b      	ldr	r3, [r3, #0]
 8017570:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017574:	681b      	ldr	r3, [r3, #0]
 8017576:	687a      	ldr	r2, [r7, #4]
 8017578:	6812      	ldr	r2, [r2, #0]
 801757a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801757e:	f043 0301 	orr.w	r3, r3, #1
 8017582:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
	if (hpcd->Init.low_power_enable)
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	6a1b      	ldr	r3, [r3, #32]
 8017588:	2b00      	cmp	r3, #0
 801758a:	d005      	beq.n	8017598 <HAL_PCD_SuspendCallback+0x40>
	{
		/* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
		SCB->SCR |= (uint32_t) ((uint32_t) (SCB_SCR_SLEEPDEEP_Msk
 801758c:	4b04      	ldr	r3, [pc, #16]	; (80175a0 <HAL_PCD_SuspendCallback+0x48>)
 801758e:	691b      	ldr	r3, [r3, #16]
 8017590:	4a03      	ldr	r2, [pc, #12]	; (80175a0 <HAL_PCD_SuspendCallback+0x48>)
 8017592:	f043 0306 	orr.w	r3, r3, #6
 8017596:	6113      	str	r3, [r2, #16]
				| SCB_SCR_SLEEPONEXIT_Msk));
	}
  /* USER CODE END 2 */
}
 8017598:	bf00      	nop
 801759a:	3708      	adds	r7, #8
 801759c:	46bd      	mov	sp, r7
 801759e:	bd80      	pop	{r7, pc}
 80175a0:	e000ed00 	.word	0xe000ed00

080175a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80175a4:	b580      	push	{r7, lr}
 80175a6:	b082      	sub	sp, #8
 80175a8:	af00      	add	r7, sp, #0
 80175aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80175b2:	4618      	mov	r0, r3
 80175b4:	f7f8 fb6a 	bl	800fc8c <USBD_LL_Resume>
}
 80175b8:	bf00      	nop
 80175ba:	3708      	adds	r7, #8
 80175bc:	46bd      	mov	sp, r7
 80175be:	bd80      	pop	{r7, pc}

080175c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80175c0:	b580      	push	{r7, lr}
 80175c2:	b082      	sub	sp, #8
 80175c4:	af00      	add	r7, sp, #0
 80175c6:	6078      	str	r0, [r7, #4]
 80175c8:	460b      	mov	r3, r1
 80175ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80175d2:	78fa      	ldrb	r2, [r7, #3]
 80175d4:	4611      	mov	r1, r2
 80175d6:	4618      	mov	r0, r3
 80175d8:	f7f8 fbc2 	bl	800fd60 <USBD_LL_IsoOUTIncomplete>
}
 80175dc:	bf00      	nop
 80175de:	3708      	adds	r7, #8
 80175e0:	46bd      	mov	sp, r7
 80175e2:	bd80      	pop	{r7, pc}

080175e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80175e4:	b580      	push	{r7, lr}
 80175e6:	b082      	sub	sp, #8
 80175e8:	af00      	add	r7, sp, #0
 80175ea:	6078      	str	r0, [r7, #4]
 80175ec:	460b      	mov	r3, r1
 80175ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80175f6:	78fa      	ldrb	r2, [r7, #3]
 80175f8:	4611      	mov	r1, r2
 80175fa:	4618      	mov	r0, r3
 80175fc:	f7f8 fb7e 	bl	800fcfc <USBD_LL_IsoINIncomplete>
}
 8017600:	bf00      	nop
 8017602:	3708      	adds	r7, #8
 8017604:	46bd      	mov	sp, r7
 8017606:	bd80      	pop	{r7, pc}

08017608 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017608:	b580      	push	{r7, lr}
 801760a:	b082      	sub	sp, #8
 801760c:	af00      	add	r7, sp, #0
 801760e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017616:	4618      	mov	r0, r3
 8017618:	f7f8 fbd4 	bl	800fdc4 <USBD_LL_DevConnected>
}
 801761c:	bf00      	nop
 801761e:	3708      	adds	r7, #8
 8017620:	46bd      	mov	sp, r7
 8017622:	bd80      	pop	{r7, pc}

08017624 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017624:	b580      	push	{r7, lr}
 8017626:	b082      	sub	sp, #8
 8017628:	af00      	add	r7, sp, #0
 801762a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017632:	4618      	mov	r0, r3
 8017634:	f7f8 fbd1 	bl	800fdda <USBD_LL_DevDisconnected>
}
 8017638:	bf00      	nop
 801763a:	3708      	adds	r7, #8
 801763c:	46bd      	mov	sp, r7
 801763e:	bd80      	pop	{r7, pc}

08017640 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017640:	b580      	push	{r7, lr}
 8017642:	b082      	sub	sp, #8
 8017644:	af00      	add	r7, sp, #0
 8017646:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	781b      	ldrb	r3, [r3, #0]
 801764c:	2b00      	cmp	r3, #0
 801764e:	d13c      	bne.n	80176ca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8017650:	4a20      	ldr	r2, [pc, #128]	; (80176d4 <USBD_LL_Init+0x94>)
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	4a1e      	ldr	r2, [pc, #120]	; (80176d4 <USBD_LL_Init+0x94>)
 801765c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017660:	4b1c      	ldr	r3, [pc, #112]	; (80176d4 <USBD_LL_Init+0x94>)
 8017662:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8017666:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8017668:	4b1a      	ldr	r3, [pc, #104]	; (80176d4 <USBD_LL_Init+0x94>)
 801766a:	2206      	movs	r2, #6
 801766c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801766e:	4b19      	ldr	r3, [pc, #100]	; (80176d4 <USBD_LL_Init+0x94>)
 8017670:	2202      	movs	r2, #2
 8017672:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017674:	4b17      	ldr	r3, [pc, #92]	; (80176d4 <USBD_LL_Init+0x94>)
 8017676:	2200      	movs	r2, #0
 8017678:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801767a:	4b16      	ldr	r3, [pc, #88]	; (80176d4 <USBD_LL_Init+0x94>)
 801767c:	2202      	movs	r2, #2
 801767e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017680:	4b14      	ldr	r3, [pc, #80]	; (80176d4 <USBD_LL_Init+0x94>)
 8017682:	2200      	movs	r2, #0
 8017684:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8017686:	4b13      	ldr	r3, [pc, #76]	; (80176d4 <USBD_LL_Init+0x94>)
 8017688:	2200      	movs	r2, #0
 801768a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801768c:	4b11      	ldr	r3, [pc, #68]	; (80176d4 <USBD_LL_Init+0x94>)
 801768e:	2200      	movs	r2, #0
 8017690:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8017692:	4b10      	ldr	r3, [pc, #64]	; (80176d4 <USBD_LL_Init+0x94>)
 8017694:	2200      	movs	r2, #0
 8017696:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8017698:	4b0e      	ldr	r3, [pc, #56]	; (80176d4 <USBD_LL_Init+0x94>)
 801769a:	2200      	movs	r2, #0
 801769c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801769e:	480d      	ldr	r0, [pc, #52]	; (80176d4 <USBD_LL_Init+0x94>)
 80176a0:	f7ee fb99 	bl	8005dd6 <HAL_PCD_Init>
 80176a4:	4603      	mov	r3, r0
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d001      	beq.n	80176ae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80176aa:	f7ea fead 	bl	8002408 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80176ae:	2180      	movs	r1, #128	; 0x80
 80176b0:	4808      	ldr	r0, [pc, #32]	; (80176d4 <USBD_LL_Init+0x94>)
 80176b2:	f7ef fe52 	bl	800735a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80176b6:	2240      	movs	r2, #64	; 0x40
 80176b8:	2100      	movs	r1, #0
 80176ba:	4806      	ldr	r0, [pc, #24]	; (80176d4 <USBD_LL_Init+0x94>)
 80176bc:	f7ef fe06 	bl	80072cc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80176c0:	2280      	movs	r2, #128	; 0x80
 80176c2:	2101      	movs	r1, #1
 80176c4:	4803      	ldr	r0, [pc, #12]	; (80176d4 <USBD_LL_Init+0x94>)
 80176c6:	f7ef fe01 	bl	80072cc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80176ca:	2300      	movs	r3, #0
}
 80176cc:	4618      	mov	r0, r3
 80176ce:	3708      	adds	r7, #8
 80176d0:	46bd      	mov	sp, r7
 80176d2:	bd80      	pop	{r7, pc}
 80176d4:	20007bbc 	.word	0x20007bbc

080176d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80176d8:	b580      	push	{r7, lr}
 80176da:	b084      	sub	sp, #16
 80176dc:	af00      	add	r7, sp, #0
 80176de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80176e0:	2300      	movs	r3, #0
 80176e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80176e4:	2300      	movs	r3, #0
 80176e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80176ee:	4618      	mov	r0, r3
 80176f0:	f7ee fc95 	bl	800601e <HAL_PCD_Start>
 80176f4:	4603      	mov	r3, r0
 80176f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80176f8:	7bfb      	ldrb	r3, [r7, #15]
 80176fa:	4618      	mov	r0, r3
 80176fc:	f000 f9b0 	bl	8017a60 <USBD_Get_USB_Status>
 8017700:	4603      	mov	r3, r0
 8017702:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017704:	7bbb      	ldrb	r3, [r7, #14]
}
 8017706:	4618      	mov	r0, r3
 8017708:	3710      	adds	r7, #16
 801770a:	46bd      	mov	sp, r7
 801770c:	bd80      	pop	{r7, pc}

0801770e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801770e:	b580      	push	{r7, lr}
 8017710:	b084      	sub	sp, #16
 8017712:	af00      	add	r7, sp, #0
 8017714:	6078      	str	r0, [r7, #4]
 8017716:	4608      	mov	r0, r1
 8017718:	4611      	mov	r1, r2
 801771a:	461a      	mov	r2, r3
 801771c:	4603      	mov	r3, r0
 801771e:	70fb      	strb	r3, [r7, #3]
 8017720:	460b      	mov	r3, r1
 8017722:	70bb      	strb	r3, [r7, #2]
 8017724:	4613      	mov	r3, r2
 8017726:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017728:	2300      	movs	r3, #0
 801772a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801772c:	2300      	movs	r3, #0
 801772e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017736:	78bb      	ldrb	r3, [r7, #2]
 8017738:	883a      	ldrh	r2, [r7, #0]
 801773a:	78f9      	ldrb	r1, [r7, #3]
 801773c:	f7ef f993 	bl	8006a66 <HAL_PCD_EP_Open>
 8017740:	4603      	mov	r3, r0
 8017742:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017744:	7bfb      	ldrb	r3, [r7, #15]
 8017746:	4618      	mov	r0, r3
 8017748:	f000 f98a 	bl	8017a60 <USBD_Get_USB_Status>
 801774c:	4603      	mov	r3, r0
 801774e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017750:	7bbb      	ldrb	r3, [r7, #14]
}
 8017752:	4618      	mov	r0, r3
 8017754:	3710      	adds	r7, #16
 8017756:	46bd      	mov	sp, r7
 8017758:	bd80      	pop	{r7, pc}

0801775a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801775a:	b580      	push	{r7, lr}
 801775c:	b084      	sub	sp, #16
 801775e:	af00      	add	r7, sp, #0
 8017760:	6078      	str	r0, [r7, #4]
 8017762:	460b      	mov	r3, r1
 8017764:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017766:	2300      	movs	r3, #0
 8017768:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801776a:	2300      	movs	r3, #0
 801776c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017774:	78fa      	ldrb	r2, [r7, #3]
 8017776:	4611      	mov	r1, r2
 8017778:	4618      	mov	r0, r3
 801777a:	f7ef f9dc 	bl	8006b36 <HAL_PCD_EP_Close>
 801777e:	4603      	mov	r3, r0
 8017780:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017782:	7bfb      	ldrb	r3, [r7, #15]
 8017784:	4618      	mov	r0, r3
 8017786:	f000 f96b 	bl	8017a60 <USBD_Get_USB_Status>
 801778a:	4603      	mov	r3, r0
 801778c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801778e:	7bbb      	ldrb	r3, [r7, #14]
}
 8017790:	4618      	mov	r0, r3
 8017792:	3710      	adds	r7, #16
 8017794:	46bd      	mov	sp, r7
 8017796:	bd80      	pop	{r7, pc}

08017798 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017798:	b580      	push	{r7, lr}
 801779a:	b084      	sub	sp, #16
 801779c:	af00      	add	r7, sp, #0
 801779e:	6078      	str	r0, [r7, #4]
 80177a0:	460b      	mov	r3, r1
 80177a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80177a4:	2300      	movs	r3, #0
 80177a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80177a8:	2300      	movs	r3, #0
 80177aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80177b2:	78fa      	ldrb	r2, [r7, #3]
 80177b4:	4611      	mov	r1, r2
 80177b6:	4618      	mov	r0, r3
 80177b8:	f7ef fb9f 	bl	8006efa <HAL_PCD_EP_Flush>
 80177bc:	4603      	mov	r3, r0
 80177be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80177c0:	7bfb      	ldrb	r3, [r7, #15]
 80177c2:	4618      	mov	r0, r3
 80177c4:	f000 f94c 	bl	8017a60 <USBD_Get_USB_Status>
 80177c8:	4603      	mov	r3, r0
 80177ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80177cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80177ce:	4618      	mov	r0, r3
 80177d0:	3710      	adds	r7, #16
 80177d2:	46bd      	mov	sp, r7
 80177d4:	bd80      	pop	{r7, pc}

080177d6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80177d6:	b580      	push	{r7, lr}
 80177d8:	b084      	sub	sp, #16
 80177da:	af00      	add	r7, sp, #0
 80177dc:	6078      	str	r0, [r7, #4]
 80177de:	460b      	mov	r3, r1
 80177e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80177e2:	2300      	movs	r3, #0
 80177e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80177e6:	2300      	movs	r3, #0
 80177e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80177f0:	78fa      	ldrb	r2, [r7, #3]
 80177f2:	4611      	mov	r1, r2
 80177f4:	4618      	mov	r0, r3
 80177f6:	f7ef fa95 	bl	8006d24 <HAL_PCD_EP_SetStall>
 80177fa:	4603      	mov	r3, r0
 80177fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80177fe:	7bfb      	ldrb	r3, [r7, #15]
 8017800:	4618      	mov	r0, r3
 8017802:	f000 f92d 	bl	8017a60 <USBD_Get_USB_Status>
 8017806:	4603      	mov	r3, r0
 8017808:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801780a:	7bbb      	ldrb	r3, [r7, #14]
}
 801780c:	4618      	mov	r0, r3
 801780e:	3710      	adds	r7, #16
 8017810:	46bd      	mov	sp, r7
 8017812:	bd80      	pop	{r7, pc}

08017814 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017814:	b580      	push	{r7, lr}
 8017816:	b084      	sub	sp, #16
 8017818:	af00      	add	r7, sp, #0
 801781a:	6078      	str	r0, [r7, #4]
 801781c:	460b      	mov	r3, r1
 801781e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017820:	2300      	movs	r3, #0
 8017822:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017824:	2300      	movs	r3, #0
 8017826:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801782e:	78fa      	ldrb	r2, [r7, #3]
 8017830:	4611      	mov	r1, r2
 8017832:	4618      	mov	r0, r3
 8017834:	f7ef fada 	bl	8006dec <HAL_PCD_EP_ClrStall>
 8017838:	4603      	mov	r3, r0
 801783a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801783c:	7bfb      	ldrb	r3, [r7, #15]
 801783e:	4618      	mov	r0, r3
 8017840:	f000 f90e 	bl	8017a60 <USBD_Get_USB_Status>
 8017844:	4603      	mov	r3, r0
 8017846:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017848:	7bbb      	ldrb	r3, [r7, #14]
}
 801784a:	4618      	mov	r0, r3
 801784c:	3710      	adds	r7, #16
 801784e:	46bd      	mov	sp, r7
 8017850:	bd80      	pop	{r7, pc}

08017852 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017852:	b480      	push	{r7}
 8017854:	b085      	sub	sp, #20
 8017856:	af00      	add	r7, sp, #0
 8017858:	6078      	str	r0, [r7, #4]
 801785a:	460b      	mov	r3, r1
 801785c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017864:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017866:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801786a:	2b00      	cmp	r3, #0
 801786c:	da0b      	bge.n	8017886 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801786e:	78fb      	ldrb	r3, [r7, #3]
 8017870:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017874:	68f9      	ldr	r1, [r7, #12]
 8017876:	4613      	mov	r3, r2
 8017878:	00db      	lsls	r3, r3, #3
 801787a:	4413      	add	r3, r2
 801787c:	009b      	lsls	r3, r3, #2
 801787e:	440b      	add	r3, r1
 8017880:	333e      	adds	r3, #62	; 0x3e
 8017882:	781b      	ldrb	r3, [r3, #0]
 8017884:	e00b      	b.n	801789e <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017886:	78fb      	ldrb	r3, [r7, #3]
 8017888:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801788c:	68f9      	ldr	r1, [r7, #12]
 801788e:	4613      	mov	r3, r2
 8017890:	00db      	lsls	r3, r3, #3
 8017892:	4413      	add	r3, r2
 8017894:	009b      	lsls	r3, r3, #2
 8017896:	440b      	add	r3, r1
 8017898:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801789c:	781b      	ldrb	r3, [r3, #0]
  }
}
 801789e:	4618      	mov	r0, r3
 80178a0:	3714      	adds	r7, #20
 80178a2:	46bd      	mov	sp, r7
 80178a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178a8:	4770      	bx	lr

080178aa <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80178aa:	b580      	push	{r7, lr}
 80178ac:	b084      	sub	sp, #16
 80178ae:	af00      	add	r7, sp, #0
 80178b0:	6078      	str	r0, [r7, #4]
 80178b2:	460b      	mov	r3, r1
 80178b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80178b6:	2300      	movs	r3, #0
 80178b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80178ba:	2300      	movs	r3, #0
 80178bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80178c4:	78fa      	ldrb	r2, [r7, #3]
 80178c6:	4611      	mov	r1, r2
 80178c8:	4618      	mov	r0, r3
 80178ca:	f7ef f8a7 	bl	8006a1c <HAL_PCD_SetAddress>
 80178ce:	4603      	mov	r3, r0
 80178d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80178d2:	7bfb      	ldrb	r3, [r7, #15]
 80178d4:	4618      	mov	r0, r3
 80178d6:	f000 f8c3 	bl	8017a60 <USBD_Get_USB_Status>
 80178da:	4603      	mov	r3, r0
 80178dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80178de:	7bbb      	ldrb	r3, [r7, #14]
}
 80178e0:	4618      	mov	r0, r3
 80178e2:	3710      	adds	r7, #16
 80178e4:	46bd      	mov	sp, r7
 80178e6:	bd80      	pop	{r7, pc}

080178e8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80178e8:	b580      	push	{r7, lr}
 80178ea:	b086      	sub	sp, #24
 80178ec:	af00      	add	r7, sp, #0
 80178ee:	60f8      	str	r0, [r7, #12]
 80178f0:	607a      	str	r2, [r7, #4]
 80178f2:	603b      	str	r3, [r7, #0]
 80178f4:	460b      	mov	r3, r1
 80178f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80178f8:	2300      	movs	r3, #0
 80178fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80178fc:	2300      	movs	r3, #0
 80178fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017900:	68fb      	ldr	r3, [r7, #12]
 8017902:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017906:	7af9      	ldrb	r1, [r7, #11]
 8017908:	683b      	ldr	r3, [r7, #0]
 801790a:	687a      	ldr	r2, [r7, #4]
 801790c:	f7ef f9c0 	bl	8006c90 <HAL_PCD_EP_Transmit>
 8017910:	4603      	mov	r3, r0
 8017912:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017914:	7dfb      	ldrb	r3, [r7, #23]
 8017916:	4618      	mov	r0, r3
 8017918:	f000 f8a2 	bl	8017a60 <USBD_Get_USB_Status>
 801791c:	4603      	mov	r3, r0
 801791e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017920:	7dbb      	ldrb	r3, [r7, #22]
}
 8017922:	4618      	mov	r0, r3
 8017924:	3718      	adds	r7, #24
 8017926:	46bd      	mov	sp, r7
 8017928:	bd80      	pop	{r7, pc}

0801792a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801792a:	b580      	push	{r7, lr}
 801792c:	b086      	sub	sp, #24
 801792e:	af00      	add	r7, sp, #0
 8017930:	60f8      	str	r0, [r7, #12]
 8017932:	607a      	str	r2, [r7, #4]
 8017934:	603b      	str	r3, [r7, #0]
 8017936:	460b      	mov	r3, r1
 8017938:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801793a:	2300      	movs	r3, #0
 801793c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801793e:	2300      	movs	r3, #0
 8017940:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017942:	68fb      	ldr	r3, [r7, #12]
 8017944:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017948:	7af9      	ldrb	r1, [r7, #11]
 801794a:	683b      	ldr	r3, [r7, #0]
 801794c:	687a      	ldr	r2, [r7, #4]
 801794e:	f7ef f93c 	bl	8006bca <HAL_PCD_EP_Receive>
 8017952:	4603      	mov	r3, r0
 8017954:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017956:	7dfb      	ldrb	r3, [r7, #23]
 8017958:	4618      	mov	r0, r3
 801795a:	f000 f881 	bl	8017a60 <USBD_Get_USB_Status>
 801795e:	4603      	mov	r3, r0
 8017960:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017962:	7dbb      	ldrb	r3, [r7, #22]
}
 8017964:	4618      	mov	r0, r3
 8017966:	3718      	adds	r7, #24
 8017968:	46bd      	mov	sp, r7
 801796a:	bd80      	pop	{r7, pc}

0801796c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801796c:	b580      	push	{r7, lr}
 801796e:	b082      	sub	sp, #8
 8017970:	af00      	add	r7, sp, #0
 8017972:	6078      	str	r0, [r7, #4]
 8017974:	460b      	mov	r3, r1
 8017976:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801797e:	78fa      	ldrb	r2, [r7, #3]
 8017980:	4611      	mov	r1, r2
 8017982:	4618      	mov	r0, r3
 8017984:	f7ef f96c 	bl	8006c60 <HAL_PCD_EP_GetRxCount>
 8017988:	4603      	mov	r3, r0
}
 801798a:	4618      	mov	r0, r3
 801798c:	3708      	adds	r7, #8
 801798e:	46bd      	mov	sp, r7
 8017990:	bd80      	pop	{r7, pc}
	...

08017994 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8017994:	b580      	push	{r7, lr}
 8017996:	b082      	sub	sp, #8
 8017998:	af00      	add	r7, sp, #0
 801799a:	6078      	str	r0, [r7, #4]
 801799c:	460b      	mov	r3, r1
 801799e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80179a0:	78fb      	ldrb	r3, [r7, #3]
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	d002      	beq.n	80179ac <HAL_PCDEx_LPM_Callback+0x18>
 80179a6:	2b01      	cmp	r3, #1
 80179a8:	d01f      	beq.n	80179ea <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80179aa:	e03b      	b.n	8017a24 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	6a1b      	ldr	r3, [r3, #32]
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	d007      	beq.n	80179c4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 80179b4:	f7ea fcaa 	bl	800230c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80179b8:	4b1c      	ldr	r3, [pc, #112]	; (8017a2c <HAL_PCDEx_LPM_Callback+0x98>)
 80179ba:	691b      	ldr	r3, [r3, #16]
 80179bc:	4a1b      	ldr	r2, [pc, #108]	; (8017a2c <HAL_PCDEx_LPM_Callback+0x98>)
 80179be:	f023 0306 	bic.w	r3, r3, #6
 80179c2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	681b      	ldr	r3, [r3, #0]
 80179c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80179cc:	681b      	ldr	r3, [r3, #0]
 80179ce:	687a      	ldr	r2, [r7, #4]
 80179d0:	6812      	ldr	r2, [r2, #0]
 80179d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80179d6:	f023 0301 	bic.w	r3, r3, #1
 80179da:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80179e2:	4618      	mov	r0, r3
 80179e4:	f7f8 f952 	bl	800fc8c <USBD_LL_Resume>
    break;
 80179e8:	e01c      	b.n	8017a24 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	681b      	ldr	r3, [r3, #0]
 80179ee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80179f2:	681b      	ldr	r3, [r3, #0]
 80179f4:	687a      	ldr	r2, [r7, #4]
 80179f6:	6812      	ldr	r2, [r2, #0]
 80179f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80179fc:	f043 0301 	orr.w	r3, r3, #1
 8017a00:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017a08:	4618      	mov	r0, r3
 8017a0a:	f7f8 f929 	bl	800fc60 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	6a1b      	ldr	r3, [r3, #32]
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d005      	beq.n	8017a22 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017a16:	4b05      	ldr	r3, [pc, #20]	; (8017a2c <HAL_PCDEx_LPM_Callback+0x98>)
 8017a18:	691b      	ldr	r3, [r3, #16]
 8017a1a:	4a04      	ldr	r2, [pc, #16]	; (8017a2c <HAL_PCDEx_LPM_Callback+0x98>)
 8017a1c:	f043 0306 	orr.w	r3, r3, #6
 8017a20:	6113      	str	r3, [r2, #16]
    break;
 8017a22:	bf00      	nop
}
 8017a24:	bf00      	nop
 8017a26:	3708      	adds	r7, #8
 8017a28:	46bd      	mov	sp, r7
 8017a2a:	bd80      	pop	{r7, pc}
 8017a2c:	e000ed00 	.word	0xe000ed00

08017a30 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017a30:	b480      	push	{r7}
 8017a32:	b083      	sub	sp, #12
 8017a34:	af00      	add	r7, sp, #0
 8017a36:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017a38:	4b03      	ldr	r3, [pc, #12]	; (8017a48 <USBD_static_malloc+0x18>)
}
 8017a3a:	4618      	mov	r0, r3
 8017a3c:	370c      	adds	r7, #12
 8017a3e:	46bd      	mov	sp, r7
 8017a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a44:	4770      	bx	lr
 8017a46:	bf00      	nop
 8017a48:	200080c8 	.word	0x200080c8

08017a4c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017a4c:	b480      	push	{r7}
 8017a4e:	b083      	sub	sp, #12
 8017a50:	af00      	add	r7, sp, #0
 8017a52:	6078      	str	r0, [r7, #4]

}
 8017a54:	bf00      	nop
 8017a56:	370c      	adds	r7, #12
 8017a58:	46bd      	mov	sp, r7
 8017a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a5e:	4770      	bx	lr

08017a60 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017a60:	b480      	push	{r7}
 8017a62:	b085      	sub	sp, #20
 8017a64:	af00      	add	r7, sp, #0
 8017a66:	4603      	mov	r3, r0
 8017a68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017a6a:	2300      	movs	r3, #0
 8017a6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017a6e:	79fb      	ldrb	r3, [r7, #7]
 8017a70:	2b03      	cmp	r3, #3
 8017a72:	d817      	bhi.n	8017aa4 <USBD_Get_USB_Status+0x44>
 8017a74:	a201      	add	r2, pc, #4	; (adr r2, 8017a7c <USBD_Get_USB_Status+0x1c>)
 8017a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a7a:	bf00      	nop
 8017a7c:	08017a8d 	.word	0x08017a8d
 8017a80:	08017a93 	.word	0x08017a93
 8017a84:	08017a99 	.word	0x08017a99
 8017a88:	08017a9f 	.word	0x08017a9f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017a8c:	2300      	movs	r3, #0
 8017a8e:	73fb      	strb	r3, [r7, #15]
    break;
 8017a90:	e00b      	b.n	8017aaa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017a92:	2303      	movs	r3, #3
 8017a94:	73fb      	strb	r3, [r7, #15]
    break;
 8017a96:	e008      	b.n	8017aaa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017a98:	2301      	movs	r3, #1
 8017a9a:	73fb      	strb	r3, [r7, #15]
    break;
 8017a9c:	e005      	b.n	8017aaa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017a9e:	2303      	movs	r3, #3
 8017aa0:	73fb      	strb	r3, [r7, #15]
    break;
 8017aa2:	e002      	b.n	8017aaa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017aa4:	2303      	movs	r3, #3
 8017aa6:	73fb      	strb	r3, [r7, #15]
    break;
 8017aa8:	bf00      	nop
  }
  return usb_status;
 8017aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8017aac:	4618      	mov	r0, r3
 8017aae:	3714      	adds	r7, #20
 8017ab0:	46bd      	mov	sp, r7
 8017ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ab6:	4770      	bx	lr

08017ab8 <calloc>:
 8017ab8:	4b02      	ldr	r3, [pc, #8]	; (8017ac4 <calloc+0xc>)
 8017aba:	460a      	mov	r2, r1
 8017abc:	4601      	mov	r1, r0
 8017abe:	6818      	ldr	r0, [r3, #0]
 8017ac0:	f000 b802 	b.w	8017ac8 <_calloc_r>
 8017ac4:	20000198 	.word	0x20000198

08017ac8 <_calloc_r>:
 8017ac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017aca:	fba1 2402 	umull	r2, r4, r1, r2
 8017ace:	b94c      	cbnz	r4, 8017ae4 <_calloc_r+0x1c>
 8017ad0:	4611      	mov	r1, r2
 8017ad2:	9201      	str	r2, [sp, #4]
 8017ad4:	f000 f83e 	bl	8017b54 <_malloc_r>
 8017ad8:	9a01      	ldr	r2, [sp, #4]
 8017ada:	4605      	mov	r5, r0
 8017adc:	b930      	cbnz	r0, 8017aec <_calloc_r+0x24>
 8017ade:	4628      	mov	r0, r5
 8017ae0:	b003      	add	sp, #12
 8017ae2:	bd30      	pop	{r4, r5, pc}
 8017ae4:	220c      	movs	r2, #12
 8017ae6:	6002      	str	r2, [r0, #0]
 8017ae8:	2500      	movs	r5, #0
 8017aea:	e7f8      	b.n	8017ade <_calloc_r+0x16>
 8017aec:	4621      	mov	r1, r4
 8017aee:	f001 f977 	bl	8018de0 <memset>
 8017af2:	e7f4      	b.n	8017ade <_calloc_r+0x16>

08017af4 <malloc>:
 8017af4:	4b02      	ldr	r3, [pc, #8]	; (8017b00 <malloc+0xc>)
 8017af6:	4601      	mov	r1, r0
 8017af8:	6818      	ldr	r0, [r3, #0]
 8017afa:	f000 b82b 	b.w	8017b54 <_malloc_r>
 8017afe:	bf00      	nop
 8017b00:	20000198 	.word	0x20000198

08017b04 <free>:
 8017b04:	4b02      	ldr	r3, [pc, #8]	; (8017b10 <free+0xc>)
 8017b06:	4601      	mov	r1, r0
 8017b08:	6818      	ldr	r0, [r3, #0]
 8017b0a:	f002 b8eb 	b.w	8019ce4 <_free_r>
 8017b0e:	bf00      	nop
 8017b10:	20000198 	.word	0x20000198

08017b14 <sbrk_aligned>:
 8017b14:	b570      	push	{r4, r5, r6, lr}
 8017b16:	4e0e      	ldr	r6, [pc, #56]	; (8017b50 <sbrk_aligned+0x3c>)
 8017b18:	460c      	mov	r4, r1
 8017b1a:	6831      	ldr	r1, [r6, #0]
 8017b1c:	4605      	mov	r5, r0
 8017b1e:	b911      	cbnz	r1, 8017b26 <sbrk_aligned+0x12>
 8017b20:	f001 fa04 	bl	8018f2c <_sbrk_r>
 8017b24:	6030      	str	r0, [r6, #0]
 8017b26:	4621      	mov	r1, r4
 8017b28:	4628      	mov	r0, r5
 8017b2a:	f001 f9ff 	bl	8018f2c <_sbrk_r>
 8017b2e:	1c43      	adds	r3, r0, #1
 8017b30:	d00a      	beq.n	8017b48 <sbrk_aligned+0x34>
 8017b32:	1cc4      	adds	r4, r0, #3
 8017b34:	f024 0403 	bic.w	r4, r4, #3
 8017b38:	42a0      	cmp	r0, r4
 8017b3a:	d007      	beq.n	8017b4c <sbrk_aligned+0x38>
 8017b3c:	1a21      	subs	r1, r4, r0
 8017b3e:	4628      	mov	r0, r5
 8017b40:	f001 f9f4 	bl	8018f2c <_sbrk_r>
 8017b44:	3001      	adds	r0, #1
 8017b46:	d101      	bne.n	8017b4c <sbrk_aligned+0x38>
 8017b48:	f04f 34ff 	mov.w	r4, #4294967295
 8017b4c:	4620      	mov	r0, r4
 8017b4e:	bd70      	pop	{r4, r5, r6, pc}
 8017b50:	20008344 	.word	0x20008344

08017b54 <_malloc_r>:
 8017b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017b58:	1ccd      	adds	r5, r1, #3
 8017b5a:	f025 0503 	bic.w	r5, r5, #3
 8017b5e:	3508      	adds	r5, #8
 8017b60:	2d0c      	cmp	r5, #12
 8017b62:	bf38      	it	cc
 8017b64:	250c      	movcc	r5, #12
 8017b66:	2d00      	cmp	r5, #0
 8017b68:	4607      	mov	r7, r0
 8017b6a:	db01      	blt.n	8017b70 <_malloc_r+0x1c>
 8017b6c:	42a9      	cmp	r1, r5
 8017b6e:	d905      	bls.n	8017b7c <_malloc_r+0x28>
 8017b70:	230c      	movs	r3, #12
 8017b72:	603b      	str	r3, [r7, #0]
 8017b74:	2600      	movs	r6, #0
 8017b76:	4630      	mov	r0, r6
 8017b78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017b7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017c50 <_malloc_r+0xfc>
 8017b80:	f000 f868 	bl	8017c54 <__malloc_lock>
 8017b84:	f8d8 3000 	ldr.w	r3, [r8]
 8017b88:	461c      	mov	r4, r3
 8017b8a:	bb5c      	cbnz	r4, 8017be4 <_malloc_r+0x90>
 8017b8c:	4629      	mov	r1, r5
 8017b8e:	4638      	mov	r0, r7
 8017b90:	f7ff ffc0 	bl	8017b14 <sbrk_aligned>
 8017b94:	1c43      	adds	r3, r0, #1
 8017b96:	4604      	mov	r4, r0
 8017b98:	d155      	bne.n	8017c46 <_malloc_r+0xf2>
 8017b9a:	f8d8 4000 	ldr.w	r4, [r8]
 8017b9e:	4626      	mov	r6, r4
 8017ba0:	2e00      	cmp	r6, #0
 8017ba2:	d145      	bne.n	8017c30 <_malloc_r+0xdc>
 8017ba4:	2c00      	cmp	r4, #0
 8017ba6:	d048      	beq.n	8017c3a <_malloc_r+0xe6>
 8017ba8:	6823      	ldr	r3, [r4, #0]
 8017baa:	4631      	mov	r1, r6
 8017bac:	4638      	mov	r0, r7
 8017bae:	eb04 0903 	add.w	r9, r4, r3
 8017bb2:	f001 f9bb 	bl	8018f2c <_sbrk_r>
 8017bb6:	4581      	cmp	r9, r0
 8017bb8:	d13f      	bne.n	8017c3a <_malloc_r+0xe6>
 8017bba:	6821      	ldr	r1, [r4, #0]
 8017bbc:	1a6d      	subs	r5, r5, r1
 8017bbe:	4629      	mov	r1, r5
 8017bc0:	4638      	mov	r0, r7
 8017bc2:	f7ff ffa7 	bl	8017b14 <sbrk_aligned>
 8017bc6:	3001      	adds	r0, #1
 8017bc8:	d037      	beq.n	8017c3a <_malloc_r+0xe6>
 8017bca:	6823      	ldr	r3, [r4, #0]
 8017bcc:	442b      	add	r3, r5
 8017bce:	6023      	str	r3, [r4, #0]
 8017bd0:	f8d8 3000 	ldr.w	r3, [r8]
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	d038      	beq.n	8017c4a <_malloc_r+0xf6>
 8017bd8:	685a      	ldr	r2, [r3, #4]
 8017bda:	42a2      	cmp	r2, r4
 8017bdc:	d12b      	bne.n	8017c36 <_malloc_r+0xe2>
 8017bde:	2200      	movs	r2, #0
 8017be0:	605a      	str	r2, [r3, #4]
 8017be2:	e00f      	b.n	8017c04 <_malloc_r+0xb0>
 8017be4:	6822      	ldr	r2, [r4, #0]
 8017be6:	1b52      	subs	r2, r2, r5
 8017be8:	d41f      	bmi.n	8017c2a <_malloc_r+0xd6>
 8017bea:	2a0b      	cmp	r2, #11
 8017bec:	d917      	bls.n	8017c1e <_malloc_r+0xca>
 8017bee:	1961      	adds	r1, r4, r5
 8017bf0:	42a3      	cmp	r3, r4
 8017bf2:	6025      	str	r5, [r4, #0]
 8017bf4:	bf18      	it	ne
 8017bf6:	6059      	strne	r1, [r3, #4]
 8017bf8:	6863      	ldr	r3, [r4, #4]
 8017bfa:	bf08      	it	eq
 8017bfc:	f8c8 1000 	streq.w	r1, [r8]
 8017c00:	5162      	str	r2, [r4, r5]
 8017c02:	604b      	str	r3, [r1, #4]
 8017c04:	4638      	mov	r0, r7
 8017c06:	f104 060b 	add.w	r6, r4, #11
 8017c0a:	f000 f829 	bl	8017c60 <__malloc_unlock>
 8017c0e:	f026 0607 	bic.w	r6, r6, #7
 8017c12:	1d23      	adds	r3, r4, #4
 8017c14:	1af2      	subs	r2, r6, r3
 8017c16:	d0ae      	beq.n	8017b76 <_malloc_r+0x22>
 8017c18:	1b9b      	subs	r3, r3, r6
 8017c1a:	50a3      	str	r3, [r4, r2]
 8017c1c:	e7ab      	b.n	8017b76 <_malloc_r+0x22>
 8017c1e:	42a3      	cmp	r3, r4
 8017c20:	6862      	ldr	r2, [r4, #4]
 8017c22:	d1dd      	bne.n	8017be0 <_malloc_r+0x8c>
 8017c24:	f8c8 2000 	str.w	r2, [r8]
 8017c28:	e7ec      	b.n	8017c04 <_malloc_r+0xb0>
 8017c2a:	4623      	mov	r3, r4
 8017c2c:	6864      	ldr	r4, [r4, #4]
 8017c2e:	e7ac      	b.n	8017b8a <_malloc_r+0x36>
 8017c30:	4634      	mov	r4, r6
 8017c32:	6876      	ldr	r6, [r6, #4]
 8017c34:	e7b4      	b.n	8017ba0 <_malloc_r+0x4c>
 8017c36:	4613      	mov	r3, r2
 8017c38:	e7cc      	b.n	8017bd4 <_malloc_r+0x80>
 8017c3a:	230c      	movs	r3, #12
 8017c3c:	603b      	str	r3, [r7, #0]
 8017c3e:	4638      	mov	r0, r7
 8017c40:	f000 f80e 	bl	8017c60 <__malloc_unlock>
 8017c44:	e797      	b.n	8017b76 <_malloc_r+0x22>
 8017c46:	6025      	str	r5, [r4, #0]
 8017c48:	e7dc      	b.n	8017c04 <_malloc_r+0xb0>
 8017c4a:	605b      	str	r3, [r3, #4]
 8017c4c:	deff      	udf	#255	; 0xff
 8017c4e:	bf00      	nop
 8017c50:	20008340 	.word	0x20008340

08017c54 <__malloc_lock>:
 8017c54:	4801      	ldr	r0, [pc, #4]	; (8017c5c <__malloc_lock+0x8>)
 8017c56:	f001 b9b5 	b.w	8018fc4 <__retarget_lock_acquire_recursive>
 8017c5a:	bf00      	nop
 8017c5c:	20008488 	.word	0x20008488

08017c60 <__malloc_unlock>:
 8017c60:	4801      	ldr	r0, [pc, #4]	; (8017c68 <__malloc_unlock+0x8>)
 8017c62:	f001 b9b0 	b.w	8018fc6 <__retarget_lock_release_recursive>
 8017c66:	bf00      	nop
 8017c68:	20008488 	.word	0x20008488

08017c6c <__cvt>:
 8017c6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017c70:	ec55 4b10 	vmov	r4, r5, d0
 8017c74:	2d00      	cmp	r5, #0
 8017c76:	460e      	mov	r6, r1
 8017c78:	4619      	mov	r1, r3
 8017c7a:	462b      	mov	r3, r5
 8017c7c:	bfbb      	ittet	lt
 8017c7e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8017c82:	461d      	movlt	r5, r3
 8017c84:	2300      	movge	r3, #0
 8017c86:	232d      	movlt	r3, #45	; 0x2d
 8017c88:	700b      	strb	r3, [r1, #0]
 8017c8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017c8c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8017c90:	4691      	mov	r9, r2
 8017c92:	f023 0820 	bic.w	r8, r3, #32
 8017c96:	bfbc      	itt	lt
 8017c98:	4622      	movlt	r2, r4
 8017c9a:	4614      	movlt	r4, r2
 8017c9c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8017ca0:	d005      	beq.n	8017cae <__cvt+0x42>
 8017ca2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8017ca6:	d100      	bne.n	8017caa <__cvt+0x3e>
 8017ca8:	3601      	adds	r6, #1
 8017caa:	2102      	movs	r1, #2
 8017cac:	e000      	b.n	8017cb0 <__cvt+0x44>
 8017cae:	2103      	movs	r1, #3
 8017cb0:	ab03      	add	r3, sp, #12
 8017cb2:	9301      	str	r3, [sp, #4]
 8017cb4:	ab02      	add	r3, sp, #8
 8017cb6:	9300      	str	r3, [sp, #0]
 8017cb8:	ec45 4b10 	vmov	d0, r4, r5
 8017cbc:	4653      	mov	r3, sl
 8017cbe:	4632      	mov	r2, r6
 8017cc0:	f001 fa1e 	bl	8019100 <_dtoa_r>
 8017cc4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8017cc8:	4607      	mov	r7, r0
 8017cca:	d102      	bne.n	8017cd2 <__cvt+0x66>
 8017ccc:	f019 0f01 	tst.w	r9, #1
 8017cd0:	d022      	beq.n	8017d18 <__cvt+0xac>
 8017cd2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8017cd6:	eb07 0906 	add.w	r9, r7, r6
 8017cda:	d110      	bne.n	8017cfe <__cvt+0x92>
 8017cdc:	783b      	ldrb	r3, [r7, #0]
 8017cde:	2b30      	cmp	r3, #48	; 0x30
 8017ce0:	d10a      	bne.n	8017cf8 <__cvt+0x8c>
 8017ce2:	2200      	movs	r2, #0
 8017ce4:	2300      	movs	r3, #0
 8017ce6:	4620      	mov	r0, r4
 8017ce8:	4629      	mov	r1, r5
 8017cea:	f7e8 ff1d 	bl	8000b28 <__aeabi_dcmpeq>
 8017cee:	b918      	cbnz	r0, 8017cf8 <__cvt+0x8c>
 8017cf0:	f1c6 0601 	rsb	r6, r6, #1
 8017cf4:	f8ca 6000 	str.w	r6, [sl]
 8017cf8:	f8da 3000 	ldr.w	r3, [sl]
 8017cfc:	4499      	add	r9, r3
 8017cfe:	2200      	movs	r2, #0
 8017d00:	2300      	movs	r3, #0
 8017d02:	4620      	mov	r0, r4
 8017d04:	4629      	mov	r1, r5
 8017d06:	f7e8 ff0f 	bl	8000b28 <__aeabi_dcmpeq>
 8017d0a:	b108      	cbz	r0, 8017d10 <__cvt+0xa4>
 8017d0c:	f8cd 900c 	str.w	r9, [sp, #12]
 8017d10:	2230      	movs	r2, #48	; 0x30
 8017d12:	9b03      	ldr	r3, [sp, #12]
 8017d14:	454b      	cmp	r3, r9
 8017d16:	d307      	bcc.n	8017d28 <__cvt+0xbc>
 8017d18:	9b03      	ldr	r3, [sp, #12]
 8017d1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017d1c:	1bdb      	subs	r3, r3, r7
 8017d1e:	4638      	mov	r0, r7
 8017d20:	6013      	str	r3, [r2, #0]
 8017d22:	b004      	add	sp, #16
 8017d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d28:	1c59      	adds	r1, r3, #1
 8017d2a:	9103      	str	r1, [sp, #12]
 8017d2c:	701a      	strb	r2, [r3, #0]
 8017d2e:	e7f0      	b.n	8017d12 <__cvt+0xa6>

08017d30 <__exponent>:
 8017d30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017d32:	4603      	mov	r3, r0
 8017d34:	2900      	cmp	r1, #0
 8017d36:	bfb8      	it	lt
 8017d38:	4249      	neglt	r1, r1
 8017d3a:	f803 2b02 	strb.w	r2, [r3], #2
 8017d3e:	bfb4      	ite	lt
 8017d40:	222d      	movlt	r2, #45	; 0x2d
 8017d42:	222b      	movge	r2, #43	; 0x2b
 8017d44:	2909      	cmp	r1, #9
 8017d46:	7042      	strb	r2, [r0, #1]
 8017d48:	dd2a      	ble.n	8017da0 <__exponent+0x70>
 8017d4a:	f10d 0207 	add.w	r2, sp, #7
 8017d4e:	4617      	mov	r7, r2
 8017d50:	260a      	movs	r6, #10
 8017d52:	4694      	mov	ip, r2
 8017d54:	fb91 f5f6 	sdiv	r5, r1, r6
 8017d58:	fb06 1415 	mls	r4, r6, r5, r1
 8017d5c:	3430      	adds	r4, #48	; 0x30
 8017d5e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8017d62:	460c      	mov	r4, r1
 8017d64:	2c63      	cmp	r4, #99	; 0x63
 8017d66:	f102 32ff 	add.w	r2, r2, #4294967295
 8017d6a:	4629      	mov	r1, r5
 8017d6c:	dcf1      	bgt.n	8017d52 <__exponent+0x22>
 8017d6e:	3130      	adds	r1, #48	; 0x30
 8017d70:	f1ac 0402 	sub.w	r4, ip, #2
 8017d74:	f802 1c01 	strb.w	r1, [r2, #-1]
 8017d78:	1c41      	adds	r1, r0, #1
 8017d7a:	4622      	mov	r2, r4
 8017d7c:	42ba      	cmp	r2, r7
 8017d7e:	d30a      	bcc.n	8017d96 <__exponent+0x66>
 8017d80:	f10d 0209 	add.w	r2, sp, #9
 8017d84:	eba2 020c 	sub.w	r2, r2, ip
 8017d88:	42bc      	cmp	r4, r7
 8017d8a:	bf88      	it	hi
 8017d8c:	2200      	movhi	r2, #0
 8017d8e:	4413      	add	r3, r2
 8017d90:	1a18      	subs	r0, r3, r0
 8017d92:	b003      	add	sp, #12
 8017d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d96:	f812 5b01 	ldrb.w	r5, [r2], #1
 8017d9a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8017d9e:	e7ed      	b.n	8017d7c <__exponent+0x4c>
 8017da0:	2330      	movs	r3, #48	; 0x30
 8017da2:	3130      	adds	r1, #48	; 0x30
 8017da4:	7083      	strb	r3, [r0, #2]
 8017da6:	70c1      	strb	r1, [r0, #3]
 8017da8:	1d03      	adds	r3, r0, #4
 8017daa:	e7f1      	b.n	8017d90 <__exponent+0x60>

08017dac <_printf_float>:
 8017dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017db0:	ed2d 8b02 	vpush	{d8}
 8017db4:	b08d      	sub	sp, #52	; 0x34
 8017db6:	460c      	mov	r4, r1
 8017db8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8017dbc:	4616      	mov	r6, r2
 8017dbe:	461f      	mov	r7, r3
 8017dc0:	4605      	mov	r5, r0
 8017dc2:	f001 f825 	bl	8018e10 <_localeconv_r>
 8017dc6:	f8d0 a000 	ldr.w	sl, [r0]
 8017dca:	4650      	mov	r0, sl
 8017dcc:	f7e8 fa80 	bl	80002d0 <strlen>
 8017dd0:	2300      	movs	r3, #0
 8017dd2:	930a      	str	r3, [sp, #40]	; 0x28
 8017dd4:	6823      	ldr	r3, [r4, #0]
 8017dd6:	9305      	str	r3, [sp, #20]
 8017dd8:	f8d8 3000 	ldr.w	r3, [r8]
 8017ddc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8017de0:	3307      	adds	r3, #7
 8017de2:	f023 0307 	bic.w	r3, r3, #7
 8017de6:	f103 0208 	add.w	r2, r3, #8
 8017dea:	f8c8 2000 	str.w	r2, [r8]
 8017dee:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017df2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017df6:	9307      	str	r3, [sp, #28]
 8017df8:	f8cd 8018 	str.w	r8, [sp, #24]
 8017dfc:	ee08 0a10 	vmov	s16, r0
 8017e00:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8017e04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017e08:	4b9e      	ldr	r3, [pc, #632]	; (8018084 <_printf_float+0x2d8>)
 8017e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8017e0e:	f7e8 febd 	bl	8000b8c <__aeabi_dcmpun>
 8017e12:	bb88      	cbnz	r0, 8017e78 <_printf_float+0xcc>
 8017e14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017e18:	4b9a      	ldr	r3, [pc, #616]	; (8018084 <_printf_float+0x2d8>)
 8017e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8017e1e:	f7e8 fe97 	bl	8000b50 <__aeabi_dcmple>
 8017e22:	bb48      	cbnz	r0, 8017e78 <_printf_float+0xcc>
 8017e24:	2200      	movs	r2, #0
 8017e26:	2300      	movs	r3, #0
 8017e28:	4640      	mov	r0, r8
 8017e2a:	4649      	mov	r1, r9
 8017e2c:	f7e8 fe86 	bl	8000b3c <__aeabi_dcmplt>
 8017e30:	b110      	cbz	r0, 8017e38 <_printf_float+0x8c>
 8017e32:	232d      	movs	r3, #45	; 0x2d
 8017e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017e38:	4a93      	ldr	r2, [pc, #588]	; (8018088 <_printf_float+0x2dc>)
 8017e3a:	4b94      	ldr	r3, [pc, #592]	; (801808c <_printf_float+0x2e0>)
 8017e3c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8017e40:	bf94      	ite	ls
 8017e42:	4690      	movls	r8, r2
 8017e44:	4698      	movhi	r8, r3
 8017e46:	2303      	movs	r3, #3
 8017e48:	6123      	str	r3, [r4, #16]
 8017e4a:	9b05      	ldr	r3, [sp, #20]
 8017e4c:	f023 0304 	bic.w	r3, r3, #4
 8017e50:	6023      	str	r3, [r4, #0]
 8017e52:	f04f 0900 	mov.w	r9, #0
 8017e56:	9700      	str	r7, [sp, #0]
 8017e58:	4633      	mov	r3, r6
 8017e5a:	aa0b      	add	r2, sp, #44	; 0x2c
 8017e5c:	4621      	mov	r1, r4
 8017e5e:	4628      	mov	r0, r5
 8017e60:	f000 f9da 	bl	8018218 <_printf_common>
 8017e64:	3001      	adds	r0, #1
 8017e66:	f040 8090 	bne.w	8017f8a <_printf_float+0x1de>
 8017e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8017e6e:	b00d      	add	sp, #52	; 0x34
 8017e70:	ecbd 8b02 	vpop	{d8}
 8017e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e78:	4642      	mov	r2, r8
 8017e7a:	464b      	mov	r3, r9
 8017e7c:	4640      	mov	r0, r8
 8017e7e:	4649      	mov	r1, r9
 8017e80:	f7e8 fe84 	bl	8000b8c <__aeabi_dcmpun>
 8017e84:	b140      	cbz	r0, 8017e98 <_printf_float+0xec>
 8017e86:	464b      	mov	r3, r9
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	bfbc      	itt	lt
 8017e8c:	232d      	movlt	r3, #45	; 0x2d
 8017e8e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8017e92:	4a7f      	ldr	r2, [pc, #508]	; (8018090 <_printf_float+0x2e4>)
 8017e94:	4b7f      	ldr	r3, [pc, #508]	; (8018094 <_printf_float+0x2e8>)
 8017e96:	e7d1      	b.n	8017e3c <_printf_float+0x90>
 8017e98:	6863      	ldr	r3, [r4, #4]
 8017e9a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8017e9e:	9206      	str	r2, [sp, #24]
 8017ea0:	1c5a      	adds	r2, r3, #1
 8017ea2:	d13f      	bne.n	8017f24 <_printf_float+0x178>
 8017ea4:	2306      	movs	r3, #6
 8017ea6:	6063      	str	r3, [r4, #4]
 8017ea8:	9b05      	ldr	r3, [sp, #20]
 8017eaa:	6861      	ldr	r1, [r4, #4]
 8017eac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8017eb0:	2300      	movs	r3, #0
 8017eb2:	9303      	str	r3, [sp, #12]
 8017eb4:	ab0a      	add	r3, sp, #40	; 0x28
 8017eb6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8017eba:	ab09      	add	r3, sp, #36	; 0x24
 8017ebc:	ec49 8b10 	vmov	d0, r8, r9
 8017ec0:	9300      	str	r3, [sp, #0]
 8017ec2:	6022      	str	r2, [r4, #0]
 8017ec4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8017ec8:	4628      	mov	r0, r5
 8017eca:	f7ff fecf 	bl	8017c6c <__cvt>
 8017ece:	9b06      	ldr	r3, [sp, #24]
 8017ed0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017ed2:	2b47      	cmp	r3, #71	; 0x47
 8017ed4:	4680      	mov	r8, r0
 8017ed6:	d108      	bne.n	8017eea <_printf_float+0x13e>
 8017ed8:	1cc8      	adds	r0, r1, #3
 8017eda:	db02      	blt.n	8017ee2 <_printf_float+0x136>
 8017edc:	6863      	ldr	r3, [r4, #4]
 8017ede:	4299      	cmp	r1, r3
 8017ee0:	dd41      	ble.n	8017f66 <_printf_float+0x1ba>
 8017ee2:	f1ab 0302 	sub.w	r3, fp, #2
 8017ee6:	fa5f fb83 	uxtb.w	fp, r3
 8017eea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017eee:	d820      	bhi.n	8017f32 <_printf_float+0x186>
 8017ef0:	3901      	subs	r1, #1
 8017ef2:	465a      	mov	r2, fp
 8017ef4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8017ef8:	9109      	str	r1, [sp, #36]	; 0x24
 8017efa:	f7ff ff19 	bl	8017d30 <__exponent>
 8017efe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017f00:	1813      	adds	r3, r2, r0
 8017f02:	2a01      	cmp	r2, #1
 8017f04:	4681      	mov	r9, r0
 8017f06:	6123      	str	r3, [r4, #16]
 8017f08:	dc02      	bgt.n	8017f10 <_printf_float+0x164>
 8017f0a:	6822      	ldr	r2, [r4, #0]
 8017f0c:	07d2      	lsls	r2, r2, #31
 8017f0e:	d501      	bpl.n	8017f14 <_printf_float+0x168>
 8017f10:	3301      	adds	r3, #1
 8017f12:	6123      	str	r3, [r4, #16]
 8017f14:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d09c      	beq.n	8017e56 <_printf_float+0xaa>
 8017f1c:	232d      	movs	r3, #45	; 0x2d
 8017f1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017f22:	e798      	b.n	8017e56 <_printf_float+0xaa>
 8017f24:	9a06      	ldr	r2, [sp, #24]
 8017f26:	2a47      	cmp	r2, #71	; 0x47
 8017f28:	d1be      	bne.n	8017ea8 <_printf_float+0xfc>
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	d1bc      	bne.n	8017ea8 <_printf_float+0xfc>
 8017f2e:	2301      	movs	r3, #1
 8017f30:	e7b9      	b.n	8017ea6 <_printf_float+0xfa>
 8017f32:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8017f36:	d118      	bne.n	8017f6a <_printf_float+0x1be>
 8017f38:	2900      	cmp	r1, #0
 8017f3a:	6863      	ldr	r3, [r4, #4]
 8017f3c:	dd0b      	ble.n	8017f56 <_printf_float+0x1aa>
 8017f3e:	6121      	str	r1, [r4, #16]
 8017f40:	b913      	cbnz	r3, 8017f48 <_printf_float+0x19c>
 8017f42:	6822      	ldr	r2, [r4, #0]
 8017f44:	07d0      	lsls	r0, r2, #31
 8017f46:	d502      	bpl.n	8017f4e <_printf_float+0x1a2>
 8017f48:	3301      	adds	r3, #1
 8017f4a:	440b      	add	r3, r1
 8017f4c:	6123      	str	r3, [r4, #16]
 8017f4e:	65a1      	str	r1, [r4, #88]	; 0x58
 8017f50:	f04f 0900 	mov.w	r9, #0
 8017f54:	e7de      	b.n	8017f14 <_printf_float+0x168>
 8017f56:	b913      	cbnz	r3, 8017f5e <_printf_float+0x1b2>
 8017f58:	6822      	ldr	r2, [r4, #0]
 8017f5a:	07d2      	lsls	r2, r2, #31
 8017f5c:	d501      	bpl.n	8017f62 <_printf_float+0x1b6>
 8017f5e:	3302      	adds	r3, #2
 8017f60:	e7f4      	b.n	8017f4c <_printf_float+0x1a0>
 8017f62:	2301      	movs	r3, #1
 8017f64:	e7f2      	b.n	8017f4c <_printf_float+0x1a0>
 8017f66:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8017f6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f6c:	4299      	cmp	r1, r3
 8017f6e:	db05      	blt.n	8017f7c <_printf_float+0x1d0>
 8017f70:	6823      	ldr	r3, [r4, #0]
 8017f72:	6121      	str	r1, [r4, #16]
 8017f74:	07d8      	lsls	r0, r3, #31
 8017f76:	d5ea      	bpl.n	8017f4e <_printf_float+0x1a2>
 8017f78:	1c4b      	adds	r3, r1, #1
 8017f7a:	e7e7      	b.n	8017f4c <_printf_float+0x1a0>
 8017f7c:	2900      	cmp	r1, #0
 8017f7e:	bfd4      	ite	le
 8017f80:	f1c1 0202 	rsble	r2, r1, #2
 8017f84:	2201      	movgt	r2, #1
 8017f86:	4413      	add	r3, r2
 8017f88:	e7e0      	b.n	8017f4c <_printf_float+0x1a0>
 8017f8a:	6823      	ldr	r3, [r4, #0]
 8017f8c:	055a      	lsls	r2, r3, #21
 8017f8e:	d407      	bmi.n	8017fa0 <_printf_float+0x1f4>
 8017f90:	6923      	ldr	r3, [r4, #16]
 8017f92:	4642      	mov	r2, r8
 8017f94:	4631      	mov	r1, r6
 8017f96:	4628      	mov	r0, r5
 8017f98:	47b8      	blx	r7
 8017f9a:	3001      	adds	r0, #1
 8017f9c:	d12c      	bne.n	8017ff8 <_printf_float+0x24c>
 8017f9e:	e764      	b.n	8017e6a <_printf_float+0xbe>
 8017fa0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017fa4:	f240 80e0 	bls.w	8018168 <_printf_float+0x3bc>
 8017fa8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017fac:	2200      	movs	r2, #0
 8017fae:	2300      	movs	r3, #0
 8017fb0:	f7e8 fdba 	bl	8000b28 <__aeabi_dcmpeq>
 8017fb4:	2800      	cmp	r0, #0
 8017fb6:	d034      	beq.n	8018022 <_printf_float+0x276>
 8017fb8:	4a37      	ldr	r2, [pc, #220]	; (8018098 <_printf_float+0x2ec>)
 8017fba:	2301      	movs	r3, #1
 8017fbc:	4631      	mov	r1, r6
 8017fbe:	4628      	mov	r0, r5
 8017fc0:	47b8      	blx	r7
 8017fc2:	3001      	adds	r0, #1
 8017fc4:	f43f af51 	beq.w	8017e6a <_printf_float+0xbe>
 8017fc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017fcc:	429a      	cmp	r2, r3
 8017fce:	db02      	blt.n	8017fd6 <_printf_float+0x22a>
 8017fd0:	6823      	ldr	r3, [r4, #0]
 8017fd2:	07d8      	lsls	r0, r3, #31
 8017fd4:	d510      	bpl.n	8017ff8 <_printf_float+0x24c>
 8017fd6:	ee18 3a10 	vmov	r3, s16
 8017fda:	4652      	mov	r2, sl
 8017fdc:	4631      	mov	r1, r6
 8017fde:	4628      	mov	r0, r5
 8017fe0:	47b8      	blx	r7
 8017fe2:	3001      	adds	r0, #1
 8017fe4:	f43f af41 	beq.w	8017e6a <_printf_float+0xbe>
 8017fe8:	f04f 0800 	mov.w	r8, #0
 8017fec:	f104 091a 	add.w	r9, r4, #26
 8017ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ff2:	3b01      	subs	r3, #1
 8017ff4:	4543      	cmp	r3, r8
 8017ff6:	dc09      	bgt.n	801800c <_printf_float+0x260>
 8017ff8:	6823      	ldr	r3, [r4, #0]
 8017ffa:	079b      	lsls	r3, r3, #30
 8017ffc:	f100 8107 	bmi.w	801820e <_printf_float+0x462>
 8018000:	68e0      	ldr	r0, [r4, #12]
 8018002:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018004:	4298      	cmp	r0, r3
 8018006:	bfb8      	it	lt
 8018008:	4618      	movlt	r0, r3
 801800a:	e730      	b.n	8017e6e <_printf_float+0xc2>
 801800c:	2301      	movs	r3, #1
 801800e:	464a      	mov	r2, r9
 8018010:	4631      	mov	r1, r6
 8018012:	4628      	mov	r0, r5
 8018014:	47b8      	blx	r7
 8018016:	3001      	adds	r0, #1
 8018018:	f43f af27 	beq.w	8017e6a <_printf_float+0xbe>
 801801c:	f108 0801 	add.w	r8, r8, #1
 8018020:	e7e6      	b.n	8017ff0 <_printf_float+0x244>
 8018022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018024:	2b00      	cmp	r3, #0
 8018026:	dc39      	bgt.n	801809c <_printf_float+0x2f0>
 8018028:	4a1b      	ldr	r2, [pc, #108]	; (8018098 <_printf_float+0x2ec>)
 801802a:	2301      	movs	r3, #1
 801802c:	4631      	mov	r1, r6
 801802e:	4628      	mov	r0, r5
 8018030:	47b8      	blx	r7
 8018032:	3001      	adds	r0, #1
 8018034:	f43f af19 	beq.w	8017e6a <_printf_float+0xbe>
 8018038:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801803c:	4313      	orrs	r3, r2
 801803e:	d102      	bne.n	8018046 <_printf_float+0x29a>
 8018040:	6823      	ldr	r3, [r4, #0]
 8018042:	07d9      	lsls	r1, r3, #31
 8018044:	d5d8      	bpl.n	8017ff8 <_printf_float+0x24c>
 8018046:	ee18 3a10 	vmov	r3, s16
 801804a:	4652      	mov	r2, sl
 801804c:	4631      	mov	r1, r6
 801804e:	4628      	mov	r0, r5
 8018050:	47b8      	blx	r7
 8018052:	3001      	adds	r0, #1
 8018054:	f43f af09 	beq.w	8017e6a <_printf_float+0xbe>
 8018058:	f04f 0900 	mov.w	r9, #0
 801805c:	f104 0a1a 	add.w	sl, r4, #26
 8018060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018062:	425b      	negs	r3, r3
 8018064:	454b      	cmp	r3, r9
 8018066:	dc01      	bgt.n	801806c <_printf_float+0x2c0>
 8018068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801806a:	e792      	b.n	8017f92 <_printf_float+0x1e6>
 801806c:	2301      	movs	r3, #1
 801806e:	4652      	mov	r2, sl
 8018070:	4631      	mov	r1, r6
 8018072:	4628      	mov	r0, r5
 8018074:	47b8      	blx	r7
 8018076:	3001      	adds	r0, #1
 8018078:	f43f aef7 	beq.w	8017e6a <_printf_float+0xbe>
 801807c:	f109 0901 	add.w	r9, r9, #1
 8018080:	e7ee      	b.n	8018060 <_printf_float+0x2b4>
 8018082:	bf00      	nop
 8018084:	7fefffff 	.word	0x7fefffff
 8018088:	0801da70 	.word	0x0801da70
 801808c:	0801da74 	.word	0x0801da74
 8018090:	0801da78 	.word	0x0801da78
 8018094:	0801da7c 	.word	0x0801da7c
 8018098:	0801de08 	.word	0x0801de08
 801809c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801809e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80180a0:	429a      	cmp	r2, r3
 80180a2:	bfa8      	it	ge
 80180a4:	461a      	movge	r2, r3
 80180a6:	2a00      	cmp	r2, #0
 80180a8:	4691      	mov	r9, r2
 80180aa:	dc37      	bgt.n	801811c <_printf_float+0x370>
 80180ac:	f04f 0b00 	mov.w	fp, #0
 80180b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80180b4:	f104 021a 	add.w	r2, r4, #26
 80180b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80180ba:	9305      	str	r3, [sp, #20]
 80180bc:	eba3 0309 	sub.w	r3, r3, r9
 80180c0:	455b      	cmp	r3, fp
 80180c2:	dc33      	bgt.n	801812c <_printf_float+0x380>
 80180c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80180c8:	429a      	cmp	r2, r3
 80180ca:	db3b      	blt.n	8018144 <_printf_float+0x398>
 80180cc:	6823      	ldr	r3, [r4, #0]
 80180ce:	07da      	lsls	r2, r3, #31
 80180d0:	d438      	bmi.n	8018144 <_printf_float+0x398>
 80180d2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80180d6:	eba2 0903 	sub.w	r9, r2, r3
 80180da:	9b05      	ldr	r3, [sp, #20]
 80180dc:	1ad2      	subs	r2, r2, r3
 80180de:	4591      	cmp	r9, r2
 80180e0:	bfa8      	it	ge
 80180e2:	4691      	movge	r9, r2
 80180e4:	f1b9 0f00 	cmp.w	r9, #0
 80180e8:	dc35      	bgt.n	8018156 <_printf_float+0x3aa>
 80180ea:	f04f 0800 	mov.w	r8, #0
 80180ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80180f2:	f104 0a1a 	add.w	sl, r4, #26
 80180f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80180fa:	1a9b      	subs	r3, r3, r2
 80180fc:	eba3 0309 	sub.w	r3, r3, r9
 8018100:	4543      	cmp	r3, r8
 8018102:	f77f af79 	ble.w	8017ff8 <_printf_float+0x24c>
 8018106:	2301      	movs	r3, #1
 8018108:	4652      	mov	r2, sl
 801810a:	4631      	mov	r1, r6
 801810c:	4628      	mov	r0, r5
 801810e:	47b8      	blx	r7
 8018110:	3001      	adds	r0, #1
 8018112:	f43f aeaa 	beq.w	8017e6a <_printf_float+0xbe>
 8018116:	f108 0801 	add.w	r8, r8, #1
 801811a:	e7ec      	b.n	80180f6 <_printf_float+0x34a>
 801811c:	4613      	mov	r3, r2
 801811e:	4631      	mov	r1, r6
 8018120:	4642      	mov	r2, r8
 8018122:	4628      	mov	r0, r5
 8018124:	47b8      	blx	r7
 8018126:	3001      	adds	r0, #1
 8018128:	d1c0      	bne.n	80180ac <_printf_float+0x300>
 801812a:	e69e      	b.n	8017e6a <_printf_float+0xbe>
 801812c:	2301      	movs	r3, #1
 801812e:	4631      	mov	r1, r6
 8018130:	4628      	mov	r0, r5
 8018132:	9205      	str	r2, [sp, #20]
 8018134:	47b8      	blx	r7
 8018136:	3001      	adds	r0, #1
 8018138:	f43f ae97 	beq.w	8017e6a <_printf_float+0xbe>
 801813c:	9a05      	ldr	r2, [sp, #20]
 801813e:	f10b 0b01 	add.w	fp, fp, #1
 8018142:	e7b9      	b.n	80180b8 <_printf_float+0x30c>
 8018144:	ee18 3a10 	vmov	r3, s16
 8018148:	4652      	mov	r2, sl
 801814a:	4631      	mov	r1, r6
 801814c:	4628      	mov	r0, r5
 801814e:	47b8      	blx	r7
 8018150:	3001      	adds	r0, #1
 8018152:	d1be      	bne.n	80180d2 <_printf_float+0x326>
 8018154:	e689      	b.n	8017e6a <_printf_float+0xbe>
 8018156:	9a05      	ldr	r2, [sp, #20]
 8018158:	464b      	mov	r3, r9
 801815a:	4442      	add	r2, r8
 801815c:	4631      	mov	r1, r6
 801815e:	4628      	mov	r0, r5
 8018160:	47b8      	blx	r7
 8018162:	3001      	adds	r0, #1
 8018164:	d1c1      	bne.n	80180ea <_printf_float+0x33e>
 8018166:	e680      	b.n	8017e6a <_printf_float+0xbe>
 8018168:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801816a:	2a01      	cmp	r2, #1
 801816c:	dc01      	bgt.n	8018172 <_printf_float+0x3c6>
 801816e:	07db      	lsls	r3, r3, #31
 8018170:	d53a      	bpl.n	80181e8 <_printf_float+0x43c>
 8018172:	2301      	movs	r3, #1
 8018174:	4642      	mov	r2, r8
 8018176:	4631      	mov	r1, r6
 8018178:	4628      	mov	r0, r5
 801817a:	47b8      	blx	r7
 801817c:	3001      	adds	r0, #1
 801817e:	f43f ae74 	beq.w	8017e6a <_printf_float+0xbe>
 8018182:	ee18 3a10 	vmov	r3, s16
 8018186:	4652      	mov	r2, sl
 8018188:	4631      	mov	r1, r6
 801818a:	4628      	mov	r0, r5
 801818c:	47b8      	blx	r7
 801818e:	3001      	adds	r0, #1
 8018190:	f43f ae6b 	beq.w	8017e6a <_printf_float+0xbe>
 8018194:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8018198:	2200      	movs	r2, #0
 801819a:	2300      	movs	r3, #0
 801819c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80181a0:	f7e8 fcc2 	bl	8000b28 <__aeabi_dcmpeq>
 80181a4:	b9d8      	cbnz	r0, 80181de <_printf_float+0x432>
 80181a6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80181aa:	f108 0201 	add.w	r2, r8, #1
 80181ae:	4631      	mov	r1, r6
 80181b0:	4628      	mov	r0, r5
 80181b2:	47b8      	blx	r7
 80181b4:	3001      	adds	r0, #1
 80181b6:	d10e      	bne.n	80181d6 <_printf_float+0x42a>
 80181b8:	e657      	b.n	8017e6a <_printf_float+0xbe>
 80181ba:	2301      	movs	r3, #1
 80181bc:	4652      	mov	r2, sl
 80181be:	4631      	mov	r1, r6
 80181c0:	4628      	mov	r0, r5
 80181c2:	47b8      	blx	r7
 80181c4:	3001      	adds	r0, #1
 80181c6:	f43f ae50 	beq.w	8017e6a <_printf_float+0xbe>
 80181ca:	f108 0801 	add.w	r8, r8, #1
 80181ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80181d0:	3b01      	subs	r3, #1
 80181d2:	4543      	cmp	r3, r8
 80181d4:	dcf1      	bgt.n	80181ba <_printf_float+0x40e>
 80181d6:	464b      	mov	r3, r9
 80181d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80181dc:	e6da      	b.n	8017f94 <_printf_float+0x1e8>
 80181de:	f04f 0800 	mov.w	r8, #0
 80181e2:	f104 0a1a 	add.w	sl, r4, #26
 80181e6:	e7f2      	b.n	80181ce <_printf_float+0x422>
 80181e8:	2301      	movs	r3, #1
 80181ea:	4642      	mov	r2, r8
 80181ec:	e7df      	b.n	80181ae <_printf_float+0x402>
 80181ee:	2301      	movs	r3, #1
 80181f0:	464a      	mov	r2, r9
 80181f2:	4631      	mov	r1, r6
 80181f4:	4628      	mov	r0, r5
 80181f6:	47b8      	blx	r7
 80181f8:	3001      	adds	r0, #1
 80181fa:	f43f ae36 	beq.w	8017e6a <_printf_float+0xbe>
 80181fe:	f108 0801 	add.w	r8, r8, #1
 8018202:	68e3      	ldr	r3, [r4, #12]
 8018204:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018206:	1a5b      	subs	r3, r3, r1
 8018208:	4543      	cmp	r3, r8
 801820a:	dcf0      	bgt.n	80181ee <_printf_float+0x442>
 801820c:	e6f8      	b.n	8018000 <_printf_float+0x254>
 801820e:	f04f 0800 	mov.w	r8, #0
 8018212:	f104 0919 	add.w	r9, r4, #25
 8018216:	e7f4      	b.n	8018202 <_printf_float+0x456>

08018218 <_printf_common>:
 8018218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801821c:	4616      	mov	r6, r2
 801821e:	4699      	mov	r9, r3
 8018220:	688a      	ldr	r2, [r1, #8]
 8018222:	690b      	ldr	r3, [r1, #16]
 8018224:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018228:	4293      	cmp	r3, r2
 801822a:	bfb8      	it	lt
 801822c:	4613      	movlt	r3, r2
 801822e:	6033      	str	r3, [r6, #0]
 8018230:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018234:	4607      	mov	r7, r0
 8018236:	460c      	mov	r4, r1
 8018238:	b10a      	cbz	r2, 801823e <_printf_common+0x26>
 801823a:	3301      	adds	r3, #1
 801823c:	6033      	str	r3, [r6, #0]
 801823e:	6823      	ldr	r3, [r4, #0]
 8018240:	0699      	lsls	r1, r3, #26
 8018242:	bf42      	ittt	mi
 8018244:	6833      	ldrmi	r3, [r6, #0]
 8018246:	3302      	addmi	r3, #2
 8018248:	6033      	strmi	r3, [r6, #0]
 801824a:	6825      	ldr	r5, [r4, #0]
 801824c:	f015 0506 	ands.w	r5, r5, #6
 8018250:	d106      	bne.n	8018260 <_printf_common+0x48>
 8018252:	f104 0a19 	add.w	sl, r4, #25
 8018256:	68e3      	ldr	r3, [r4, #12]
 8018258:	6832      	ldr	r2, [r6, #0]
 801825a:	1a9b      	subs	r3, r3, r2
 801825c:	42ab      	cmp	r3, r5
 801825e:	dc26      	bgt.n	80182ae <_printf_common+0x96>
 8018260:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018264:	1e13      	subs	r3, r2, #0
 8018266:	6822      	ldr	r2, [r4, #0]
 8018268:	bf18      	it	ne
 801826a:	2301      	movne	r3, #1
 801826c:	0692      	lsls	r2, r2, #26
 801826e:	d42b      	bmi.n	80182c8 <_printf_common+0xb0>
 8018270:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018274:	4649      	mov	r1, r9
 8018276:	4638      	mov	r0, r7
 8018278:	47c0      	blx	r8
 801827a:	3001      	adds	r0, #1
 801827c:	d01e      	beq.n	80182bc <_printf_common+0xa4>
 801827e:	6823      	ldr	r3, [r4, #0]
 8018280:	6922      	ldr	r2, [r4, #16]
 8018282:	f003 0306 	and.w	r3, r3, #6
 8018286:	2b04      	cmp	r3, #4
 8018288:	bf02      	ittt	eq
 801828a:	68e5      	ldreq	r5, [r4, #12]
 801828c:	6833      	ldreq	r3, [r6, #0]
 801828e:	1aed      	subeq	r5, r5, r3
 8018290:	68a3      	ldr	r3, [r4, #8]
 8018292:	bf0c      	ite	eq
 8018294:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018298:	2500      	movne	r5, #0
 801829a:	4293      	cmp	r3, r2
 801829c:	bfc4      	itt	gt
 801829e:	1a9b      	subgt	r3, r3, r2
 80182a0:	18ed      	addgt	r5, r5, r3
 80182a2:	2600      	movs	r6, #0
 80182a4:	341a      	adds	r4, #26
 80182a6:	42b5      	cmp	r5, r6
 80182a8:	d11a      	bne.n	80182e0 <_printf_common+0xc8>
 80182aa:	2000      	movs	r0, #0
 80182ac:	e008      	b.n	80182c0 <_printf_common+0xa8>
 80182ae:	2301      	movs	r3, #1
 80182b0:	4652      	mov	r2, sl
 80182b2:	4649      	mov	r1, r9
 80182b4:	4638      	mov	r0, r7
 80182b6:	47c0      	blx	r8
 80182b8:	3001      	adds	r0, #1
 80182ba:	d103      	bne.n	80182c4 <_printf_common+0xac>
 80182bc:	f04f 30ff 	mov.w	r0, #4294967295
 80182c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80182c4:	3501      	adds	r5, #1
 80182c6:	e7c6      	b.n	8018256 <_printf_common+0x3e>
 80182c8:	18e1      	adds	r1, r4, r3
 80182ca:	1c5a      	adds	r2, r3, #1
 80182cc:	2030      	movs	r0, #48	; 0x30
 80182ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80182d2:	4422      	add	r2, r4
 80182d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80182d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80182dc:	3302      	adds	r3, #2
 80182de:	e7c7      	b.n	8018270 <_printf_common+0x58>
 80182e0:	2301      	movs	r3, #1
 80182e2:	4622      	mov	r2, r4
 80182e4:	4649      	mov	r1, r9
 80182e6:	4638      	mov	r0, r7
 80182e8:	47c0      	blx	r8
 80182ea:	3001      	adds	r0, #1
 80182ec:	d0e6      	beq.n	80182bc <_printf_common+0xa4>
 80182ee:	3601      	adds	r6, #1
 80182f0:	e7d9      	b.n	80182a6 <_printf_common+0x8e>
	...

080182f4 <_printf_i>:
 80182f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80182f8:	7e0f      	ldrb	r7, [r1, #24]
 80182fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80182fc:	2f78      	cmp	r7, #120	; 0x78
 80182fe:	4691      	mov	r9, r2
 8018300:	4680      	mov	r8, r0
 8018302:	460c      	mov	r4, r1
 8018304:	469a      	mov	sl, r3
 8018306:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801830a:	d807      	bhi.n	801831c <_printf_i+0x28>
 801830c:	2f62      	cmp	r7, #98	; 0x62
 801830e:	d80a      	bhi.n	8018326 <_printf_i+0x32>
 8018310:	2f00      	cmp	r7, #0
 8018312:	f000 80d4 	beq.w	80184be <_printf_i+0x1ca>
 8018316:	2f58      	cmp	r7, #88	; 0x58
 8018318:	f000 80c0 	beq.w	801849c <_printf_i+0x1a8>
 801831c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018320:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018324:	e03a      	b.n	801839c <_printf_i+0xa8>
 8018326:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801832a:	2b15      	cmp	r3, #21
 801832c:	d8f6      	bhi.n	801831c <_printf_i+0x28>
 801832e:	a101      	add	r1, pc, #4	; (adr r1, 8018334 <_printf_i+0x40>)
 8018330:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018334:	0801838d 	.word	0x0801838d
 8018338:	080183a1 	.word	0x080183a1
 801833c:	0801831d 	.word	0x0801831d
 8018340:	0801831d 	.word	0x0801831d
 8018344:	0801831d 	.word	0x0801831d
 8018348:	0801831d 	.word	0x0801831d
 801834c:	080183a1 	.word	0x080183a1
 8018350:	0801831d 	.word	0x0801831d
 8018354:	0801831d 	.word	0x0801831d
 8018358:	0801831d 	.word	0x0801831d
 801835c:	0801831d 	.word	0x0801831d
 8018360:	080184a5 	.word	0x080184a5
 8018364:	080183cd 	.word	0x080183cd
 8018368:	0801845f 	.word	0x0801845f
 801836c:	0801831d 	.word	0x0801831d
 8018370:	0801831d 	.word	0x0801831d
 8018374:	080184c7 	.word	0x080184c7
 8018378:	0801831d 	.word	0x0801831d
 801837c:	080183cd 	.word	0x080183cd
 8018380:	0801831d 	.word	0x0801831d
 8018384:	0801831d 	.word	0x0801831d
 8018388:	08018467 	.word	0x08018467
 801838c:	682b      	ldr	r3, [r5, #0]
 801838e:	1d1a      	adds	r2, r3, #4
 8018390:	681b      	ldr	r3, [r3, #0]
 8018392:	602a      	str	r2, [r5, #0]
 8018394:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018398:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801839c:	2301      	movs	r3, #1
 801839e:	e09f      	b.n	80184e0 <_printf_i+0x1ec>
 80183a0:	6820      	ldr	r0, [r4, #0]
 80183a2:	682b      	ldr	r3, [r5, #0]
 80183a4:	0607      	lsls	r7, r0, #24
 80183a6:	f103 0104 	add.w	r1, r3, #4
 80183aa:	6029      	str	r1, [r5, #0]
 80183ac:	d501      	bpl.n	80183b2 <_printf_i+0xbe>
 80183ae:	681e      	ldr	r6, [r3, #0]
 80183b0:	e003      	b.n	80183ba <_printf_i+0xc6>
 80183b2:	0646      	lsls	r6, r0, #25
 80183b4:	d5fb      	bpl.n	80183ae <_printf_i+0xba>
 80183b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80183ba:	2e00      	cmp	r6, #0
 80183bc:	da03      	bge.n	80183c6 <_printf_i+0xd2>
 80183be:	232d      	movs	r3, #45	; 0x2d
 80183c0:	4276      	negs	r6, r6
 80183c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80183c6:	485a      	ldr	r0, [pc, #360]	; (8018530 <_printf_i+0x23c>)
 80183c8:	230a      	movs	r3, #10
 80183ca:	e012      	b.n	80183f2 <_printf_i+0xfe>
 80183cc:	682b      	ldr	r3, [r5, #0]
 80183ce:	6820      	ldr	r0, [r4, #0]
 80183d0:	1d19      	adds	r1, r3, #4
 80183d2:	6029      	str	r1, [r5, #0]
 80183d4:	0605      	lsls	r5, r0, #24
 80183d6:	d501      	bpl.n	80183dc <_printf_i+0xe8>
 80183d8:	681e      	ldr	r6, [r3, #0]
 80183da:	e002      	b.n	80183e2 <_printf_i+0xee>
 80183dc:	0641      	lsls	r1, r0, #25
 80183de:	d5fb      	bpl.n	80183d8 <_printf_i+0xe4>
 80183e0:	881e      	ldrh	r6, [r3, #0]
 80183e2:	4853      	ldr	r0, [pc, #332]	; (8018530 <_printf_i+0x23c>)
 80183e4:	2f6f      	cmp	r7, #111	; 0x6f
 80183e6:	bf0c      	ite	eq
 80183e8:	2308      	moveq	r3, #8
 80183ea:	230a      	movne	r3, #10
 80183ec:	2100      	movs	r1, #0
 80183ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80183f2:	6865      	ldr	r5, [r4, #4]
 80183f4:	60a5      	str	r5, [r4, #8]
 80183f6:	2d00      	cmp	r5, #0
 80183f8:	bfa2      	ittt	ge
 80183fa:	6821      	ldrge	r1, [r4, #0]
 80183fc:	f021 0104 	bicge.w	r1, r1, #4
 8018400:	6021      	strge	r1, [r4, #0]
 8018402:	b90e      	cbnz	r6, 8018408 <_printf_i+0x114>
 8018404:	2d00      	cmp	r5, #0
 8018406:	d04b      	beq.n	80184a0 <_printf_i+0x1ac>
 8018408:	4615      	mov	r5, r2
 801840a:	fbb6 f1f3 	udiv	r1, r6, r3
 801840e:	fb03 6711 	mls	r7, r3, r1, r6
 8018412:	5dc7      	ldrb	r7, [r0, r7]
 8018414:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018418:	4637      	mov	r7, r6
 801841a:	42bb      	cmp	r3, r7
 801841c:	460e      	mov	r6, r1
 801841e:	d9f4      	bls.n	801840a <_printf_i+0x116>
 8018420:	2b08      	cmp	r3, #8
 8018422:	d10b      	bne.n	801843c <_printf_i+0x148>
 8018424:	6823      	ldr	r3, [r4, #0]
 8018426:	07de      	lsls	r6, r3, #31
 8018428:	d508      	bpl.n	801843c <_printf_i+0x148>
 801842a:	6923      	ldr	r3, [r4, #16]
 801842c:	6861      	ldr	r1, [r4, #4]
 801842e:	4299      	cmp	r1, r3
 8018430:	bfde      	ittt	le
 8018432:	2330      	movle	r3, #48	; 0x30
 8018434:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018438:	f105 35ff 	addle.w	r5, r5, #4294967295
 801843c:	1b52      	subs	r2, r2, r5
 801843e:	6122      	str	r2, [r4, #16]
 8018440:	f8cd a000 	str.w	sl, [sp]
 8018444:	464b      	mov	r3, r9
 8018446:	aa03      	add	r2, sp, #12
 8018448:	4621      	mov	r1, r4
 801844a:	4640      	mov	r0, r8
 801844c:	f7ff fee4 	bl	8018218 <_printf_common>
 8018450:	3001      	adds	r0, #1
 8018452:	d14a      	bne.n	80184ea <_printf_i+0x1f6>
 8018454:	f04f 30ff 	mov.w	r0, #4294967295
 8018458:	b004      	add	sp, #16
 801845a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801845e:	6823      	ldr	r3, [r4, #0]
 8018460:	f043 0320 	orr.w	r3, r3, #32
 8018464:	6023      	str	r3, [r4, #0]
 8018466:	4833      	ldr	r0, [pc, #204]	; (8018534 <_printf_i+0x240>)
 8018468:	2778      	movs	r7, #120	; 0x78
 801846a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801846e:	6823      	ldr	r3, [r4, #0]
 8018470:	6829      	ldr	r1, [r5, #0]
 8018472:	061f      	lsls	r7, r3, #24
 8018474:	f851 6b04 	ldr.w	r6, [r1], #4
 8018478:	d402      	bmi.n	8018480 <_printf_i+0x18c>
 801847a:	065f      	lsls	r7, r3, #25
 801847c:	bf48      	it	mi
 801847e:	b2b6      	uxthmi	r6, r6
 8018480:	07df      	lsls	r7, r3, #31
 8018482:	bf48      	it	mi
 8018484:	f043 0320 	orrmi.w	r3, r3, #32
 8018488:	6029      	str	r1, [r5, #0]
 801848a:	bf48      	it	mi
 801848c:	6023      	strmi	r3, [r4, #0]
 801848e:	b91e      	cbnz	r6, 8018498 <_printf_i+0x1a4>
 8018490:	6823      	ldr	r3, [r4, #0]
 8018492:	f023 0320 	bic.w	r3, r3, #32
 8018496:	6023      	str	r3, [r4, #0]
 8018498:	2310      	movs	r3, #16
 801849a:	e7a7      	b.n	80183ec <_printf_i+0xf8>
 801849c:	4824      	ldr	r0, [pc, #144]	; (8018530 <_printf_i+0x23c>)
 801849e:	e7e4      	b.n	801846a <_printf_i+0x176>
 80184a0:	4615      	mov	r5, r2
 80184a2:	e7bd      	b.n	8018420 <_printf_i+0x12c>
 80184a4:	682b      	ldr	r3, [r5, #0]
 80184a6:	6826      	ldr	r6, [r4, #0]
 80184a8:	6961      	ldr	r1, [r4, #20]
 80184aa:	1d18      	adds	r0, r3, #4
 80184ac:	6028      	str	r0, [r5, #0]
 80184ae:	0635      	lsls	r5, r6, #24
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	d501      	bpl.n	80184b8 <_printf_i+0x1c4>
 80184b4:	6019      	str	r1, [r3, #0]
 80184b6:	e002      	b.n	80184be <_printf_i+0x1ca>
 80184b8:	0670      	lsls	r0, r6, #25
 80184ba:	d5fb      	bpl.n	80184b4 <_printf_i+0x1c0>
 80184bc:	8019      	strh	r1, [r3, #0]
 80184be:	2300      	movs	r3, #0
 80184c0:	6123      	str	r3, [r4, #16]
 80184c2:	4615      	mov	r5, r2
 80184c4:	e7bc      	b.n	8018440 <_printf_i+0x14c>
 80184c6:	682b      	ldr	r3, [r5, #0]
 80184c8:	1d1a      	adds	r2, r3, #4
 80184ca:	602a      	str	r2, [r5, #0]
 80184cc:	681d      	ldr	r5, [r3, #0]
 80184ce:	6862      	ldr	r2, [r4, #4]
 80184d0:	2100      	movs	r1, #0
 80184d2:	4628      	mov	r0, r5
 80184d4:	f7e7 feac 	bl	8000230 <memchr>
 80184d8:	b108      	cbz	r0, 80184de <_printf_i+0x1ea>
 80184da:	1b40      	subs	r0, r0, r5
 80184dc:	6060      	str	r0, [r4, #4]
 80184de:	6863      	ldr	r3, [r4, #4]
 80184e0:	6123      	str	r3, [r4, #16]
 80184e2:	2300      	movs	r3, #0
 80184e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80184e8:	e7aa      	b.n	8018440 <_printf_i+0x14c>
 80184ea:	6923      	ldr	r3, [r4, #16]
 80184ec:	462a      	mov	r2, r5
 80184ee:	4649      	mov	r1, r9
 80184f0:	4640      	mov	r0, r8
 80184f2:	47d0      	blx	sl
 80184f4:	3001      	adds	r0, #1
 80184f6:	d0ad      	beq.n	8018454 <_printf_i+0x160>
 80184f8:	6823      	ldr	r3, [r4, #0]
 80184fa:	079b      	lsls	r3, r3, #30
 80184fc:	d413      	bmi.n	8018526 <_printf_i+0x232>
 80184fe:	68e0      	ldr	r0, [r4, #12]
 8018500:	9b03      	ldr	r3, [sp, #12]
 8018502:	4298      	cmp	r0, r3
 8018504:	bfb8      	it	lt
 8018506:	4618      	movlt	r0, r3
 8018508:	e7a6      	b.n	8018458 <_printf_i+0x164>
 801850a:	2301      	movs	r3, #1
 801850c:	4632      	mov	r2, r6
 801850e:	4649      	mov	r1, r9
 8018510:	4640      	mov	r0, r8
 8018512:	47d0      	blx	sl
 8018514:	3001      	adds	r0, #1
 8018516:	d09d      	beq.n	8018454 <_printf_i+0x160>
 8018518:	3501      	adds	r5, #1
 801851a:	68e3      	ldr	r3, [r4, #12]
 801851c:	9903      	ldr	r1, [sp, #12]
 801851e:	1a5b      	subs	r3, r3, r1
 8018520:	42ab      	cmp	r3, r5
 8018522:	dcf2      	bgt.n	801850a <_printf_i+0x216>
 8018524:	e7eb      	b.n	80184fe <_printf_i+0x20a>
 8018526:	2500      	movs	r5, #0
 8018528:	f104 0619 	add.w	r6, r4, #25
 801852c:	e7f5      	b.n	801851a <_printf_i+0x226>
 801852e:	bf00      	nop
 8018530:	0801da80 	.word	0x0801da80
 8018534:	0801da91 	.word	0x0801da91

08018538 <_scanf_float>:
 8018538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801853c:	b087      	sub	sp, #28
 801853e:	4617      	mov	r7, r2
 8018540:	9303      	str	r3, [sp, #12]
 8018542:	688b      	ldr	r3, [r1, #8]
 8018544:	1e5a      	subs	r2, r3, #1
 8018546:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801854a:	bf83      	ittte	hi
 801854c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8018550:	195b      	addhi	r3, r3, r5
 8018552:	9302      	strhi	r3, [sp, #8]
 8018554:	2300      	movls	r3, #0
 8018556:	bf86      	itte	hi
 8018558:	f240 135d 	movwhi	r3, #349	; 0x15d
 801855c:	608b      	strhi	r3, [r1, #8]
 801855e:	9302      	strls	r3, [sp, #8]
 8018560:	680b      	ldr	r3, [r1, #0]
 8018562:	468b      	mov	fp, r1
 8018564:	2500      	movs	r5, #0
 8018566:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801856a:	f84b 3b1c 	str.w	r3, [fp], #28
 801856e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8018572:	4680      	mov	r8, r0
 8018574:	460c      	mov	r4, r1
 8018576:	465e      	mov	r6, fp
 8018578:	46aa      	mov	sl, r5
 801857a:	46a9      	mov	r9, r5
 801857c:	9501      	str	r5, [sp, #4]
 801857e:	68a2      	ldr	r2, [r4, #8]
 8018580:	b152      	cbz	r2, 8018598 <_scanf_float+0x60>
 8018582:	683b      	ldr	r3, [r7, #0]
 8018584:	781b      	ldrb	r3, [r3, #0]
 8018586:	2b4e      	cmp	r3, #78	; 0x4e
 8018588:	d864      	bhi.n	8018654 <_scanf_float+0x11c>
 801858a:	2b40      	cmp	r3, #64	; 0x40
 801858c:	d83c      	bhi.n	8018608 <_scanf_float+0xd0>
 801858e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8018592:	b2c8      	uxtb	r0, r1
 8018594:	280e      	cmp	r0, #14
 8018596:	d93a      	bls.n	801860e <_scanf_float+0xd6>
 8018598:	f1b9 0f00 	cmp.w	r9, #0
 801859c:	d003      	beq.n	80185a6 <_scanf_float+0x6e>
 801859e:	6823      	ldr	r3, [r4, #0]
 80185a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80185a4:	6023      	str	r3, [r4, #0]
 80185a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80185aa:	f1ba 0f01 	cmp.w	sl, #1
 80185ae:	f200 8113 	bhi.w	80187d8 <_scanf_float+0x2a0>
 80185b2:	455e      	cmp	r6, fp
 80185b4:	f200 8105 	bhi.w	80187c2 <_scanf_float+0x28a>
 80185b8:	2501      	movs	r5, #1
 80185ba:	4628      	mov	r0, r5
 80185bc:	b007      	add	sp, #28
 80185be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185c2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80185c6:	2a0d      	cmp	r2, #13
 80185c8:	d8e6      	bhi.n	8018598 <_scanf_float+0x60>
 80185ca:	a101      	add	r1, pc, #4	; (adr r1, 80185d0 <_scanf_float+0x98>)
 80185cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80185d0:	0801870f 	.word	0x0801870f
 80185d4:	08018599 	.word	0x08018599
 80185d8:	08018599 	.word	0x08018599
 80185dc:	08018599 	.word	0x08018599
 80185e0:	0801876f 	.word	0x0801876f
 80185e4:	08018747 	.word	0x08018747
 80185e8:	08018599 	.word	0x08018599
 80185ec:	08018599 	.word	0x08018599
 80185f0:	0801871d 	.word	0x0801871d
 80185f4:	08018599 	.word	0x08018599
 80185f8:	08018599 	.word	0x08018599
 80185fc:	08018599 	.word	0x08018599
 8018600:	08018599 	.word	0x08018599
 8018604:	080186d5 	.word	0x080186d5
 8018608:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801860c:	e7db      	b.n	80185c6 <_scanf_float+0x8e>
 801860e:	290e      	cmp	r1, #14
 8018610:	d8c2      	bhi.n	8018598 <_scanf_float+0x60>
 8018612:	a001      	add	r0, pc, #4	; (adr r0, 8018618 <_scanf_float+0xe0>)
 8018614:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8018618:	080186c7 	.word	0x080186c7
 801861c:	08018599 	.word	0x08018599
 8018620:	080186c7 	.word	0x080186c7
 8018624:	0801875b 	.word	0x0801875b
 8018628:	08018599 	.word	0x08018599
 801862c:	08018675 	.word	0x08018675
 8018630:	080186b1 	.word	0x080186b1
 8018634:	080186b1 	.word	0x080186b1
 8018638:	080186b1 	.word	0x080186b1
 801863c:	080186b1 	.word	0x080186b1
 8018640:	080186b1 	.word	0x080186b1
 8018644:	080186b1 	.word	0x080186b1
 8018648:	080186b1 	.word	0x080186b1
 801864c:	080186b1 	.word	0x080186b1
 8018650:	080186b1 	.word	0x080186b1
 8018654:	2b6e      	cmp	r3, #110	; 0x6e
 8018656:	d809      	bhi.n	801866c <_scanf_float+0x134>
 8018658:	2b60      	cmp	r3, #96	; 0x60
 801865a:	d8b2      	bhi.n	80185c2 <_scanf_float+0x8a>
 801865c:	2b54      	cmp	r3, #84	; 0x54
 801865e:	d077      	beq.n	8018750 <_scanf_float+0x218>
 8018660:	2b59      	cmp	r3, #89	; 0x59
 8018662:	d199      	bne.n	8018598 <_scanf_float+0x60>
 8018664:	2d07      	cmp	r5, #7
 8018666:	d197      	bne.n	8018598 <_scanf_float+0x60>
 8018668:	2508      	movs	r5, #8
 801866a:	e029      	b.n	80186c0 <_scanf_float+0x188>
 801866c:	2b74      	cmp	r3, #116	; 0x74
 801866e:	d06f      	beq.n	8018750 <_scanf_float+0x218>
 8018670:	2b79      	cmp	r3, #121	; 0x79
 8018672:	e7f6      	b.n	8018662 <_scanf_float+0x12a>
 8018674:	6821      	ldr	r1, [r4, #0]
 8018676:	05c8      	lsls	r0, r1, #23
 8018678:	d51a      	bpl.n	80186b0 <_scanf_float+0x178>
 801867a:	9b02      	ldr	r3, [sp, #8]
 801867c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8018680:	6021      	str	r1, [r4, #0]
 8018682:	f109 0901 	add.w	r9, r9, #1
 8018686:	b11b      	cbz	r3, 8018690 <_scanf_float+0x158>
 8018688:	3b01      	subs	r3, #1
 801868a:	3201      	adds	r2, #1
 801868c:	9302      	str	r3, [sp, #8]
 801868e:	60a2      	str	r2, [r4, #8]
 8018690:	68a3      	ldr	r3, [r4, #8]
 8018692:	3b01      	subs	r3, #1
 8018694:	60a3      	str	r3, [r4, #8]
 8018696:	6923      	ldr	r3, [r4, #16]
 8018698:	3301      	adds	r3, #1
 801869a:	6123      	str	r3, [r4, #16]
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	3b01      	subs	r3, #1
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	607b      	str	r3, [r7, #4]
 80186a4:	f340 8084 	ble.w	80187b0 <_scanf_float+0x278>
 80186a8:	683b      	ldr	r3, [r7, #0]
 80186aa:	3301      	adds	r3, #1
 80186ac:	603b      	str	r3, [r7, #0]
 80186ae:	e766      	b.n	801857e <_scanf_float+0x46>
 80186b0:	eb1a 0f05 	cmn.w	sl, r5
 80186b4:	f47f af70 	bne.w	8018598 <_scanf_float+0x60>
 80186b8:	6822      	ldr	r2, [r4, #0]
 80186ba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80186be:	6022      	str	r2, [r4, #0]
 80186c0:	f806 3b01 	strb.w	r3, [r6], #1
 80186c4:	e7e4      	b.n	8018690 <_scanf_float+0x158>
 80186c6:	6822      	ldr	r2, [r4, #0]
 80186c8:	0610      	lsls	r0, r2, #24
 80186ca:	f57f af65 	bpl.w	8018598 <_scanf_float+0x60>
 80186ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80186d2:	e7f4      	b.n	80186be <_scanf_float+0x186>
 80186d4:	f1ba 0f00 	cmp.w	sl, #0
 80186d8:	d10e      	bne.n	80186f8 <_scanf_float+0x1c0>
 80186da:	f1b9 0f00 	cmp.w	r9, #0
 80186de:	d10e      	bne.n	80186fe <_scanf_float+0x1c6>
 80186e0:	6822      	ldr	r2, [r4, #0]
 80186e2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80186e6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80186ea:	d108      	bne.n	80186fe <_scanf_float+0x1c6>
 80186ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80186f0:	6022      	str	r2, [r4, #0]
 80186f2:	f04f 0a01 	mov.w	sl, #1
 80186f6:	e7e3      	b.n	80186c0 <_scanf_float+0x188>
 80186f8:	f1ba 0f02 	cmp.w	sl, #2
 80186fc:	d055      	beq.n	80187aa <_scanf_float+0x272>
 80186fe:	2d01      	cmp	r5, #1
 8018700:	d002      	beq.n	8018708 <_scanf_float+0x1d0>
 8018702:	2d04      	cmp	r5, #4
 8018704:	f47f af48 	bne.w	8018598 <_scanf_float+0x60>
 8018708:	3501      	adds	r5, #1
 801870a:	b2ed      	uxtb	r5, r5
 801870c:	e7d8      	b.n	80186c0 <_scanf_float+0x188>
 801870e:	f1ba 0f01 	cmp.w	sl, #1
 8018712:	f47f af41 	bne.w	8018598 <_scanf_float+0x60>
 8018716:	f04f 0a02 	mov.w	sl, #2
 801871a:	e7d1      	b.n	80186c0 <_scanf_float+0x188>
 801871c:	b97d      	cbnz	r5, 801873e <_scanf_float+0x206>
 801871e:	f1b9 0f00 	cmp.w	r9, #0
 8018722:	f47f af3c 	bne.w	801859e <_scanf_float+0x66>
 8018726:	6822      	ldr	r2, [r4, #0]
 8018728:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801872c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8018730:	f47f af39 	bne.w	80185a6 <_scanf_float+0x6e>
 8018734:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8018738:	6022      	str	r2, [r4, #0]
 801873a:	2501      	movs	r5, #1
 801873c:	e7c0      	b.n	80186c0 <_scanf_float+0x188>
 801873e:	2d03      	cmp	r5, #3
 8018740:	d0e2      	beq.n	8018708 <_scanf_float+0x1d0>
 8018742:	2d05      	cmp	r5, #5
 8018744:	e7de      	b.n	8018704 <_scanf_float+0x1cc>
 8018746:	2d02      	cmp	r5, #2
 8018748:	f47f af26 	bne.w	8018598 <_scanf_float+0x60>
 801874c:	2503      	movs	r5, #3
 801874e:	e7b7      	b.n	80186c0 <_scanf_float+0x188>
 8018750:	2d06      	cmp	r5, #6
 8018752:	f47f af21 	bne.w	8018598 <_scanf_float+0x60>
 8018756:	2507      	movs	r5, #7
 8018758:	e7b2      	b.n	80186c0 <_scanf_float+0x188>
 801875a:	6822      	ldr	r2, [r4, #0]
 801875c:	0591      	lsls	r1, r2, #22
 801875e:	f57f af1b 	bpl.w	8018598 <_scanf_float+0x60>
 8018762:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8018766:	6022      	str	r2, [r4, #0]
 8018768:	f8cd 9004 	str.w	r9, [sp, #4]
 801876c:	e7a8      	b.n	80186c0 <_scanf_float+0x188>
 801876e:	6822      	ldr	r2, [r4, #0]
 8018770:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8018774:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8018778:	d006      	beq.n	8018788 <_scanf_float+0x250>
 801877a:	0550      	lsls	r0, r2, #21
 801877c:	f57f af0c 	bpl.w	8018598 <_scanf_float+0x60>
 8018780:	f1b9 0f00 	cmp.w	r9, #0
 8018784:	f43f af0f 	beq.w	80185a6 <_scanf_float+0x6e>
 8018788:	0591      	lsls	r1, r2, #22
 801878a:	bf58      	it	pl
 801878c:	9901      	ldrpl	r1, [sp, #4]
 801878e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8018792:	bf58      	it	pl
 8018794:	eba9 0101 	subpl.w	r1, r9, r1
 8018798:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801879c:	bf58      	it	pl
 801879e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80187a2:	6022      	str	r2, [r4, #0]
 80187a4:	f04f 0900 	mov.w	r9, #0
 80187a8:	e78a      	b.n	80186c0 <_scanf_float+0x188>
 80187aa:	f04f 0a03 	mov.w	sl, #3
 80187ae:	e787      	b.n	80186c0 <_scanf_float+0x188>
 80187b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80187b4:	4639      	mov	r1, r7
 80187b6:	4640      	mov	r0, r8
 80187b8:	4798      	blx	r3
 80187ba:	2800      	cmp	r0, #0
 80187bc:	f43f aedf 	beq.w	801857e <_scanf_float+0x46>
 80187c0:	e6ea      	b.n	8018598 <_scanf_float+0x60>
 80187c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80187c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80187ca:	463a      	mov	r2, r7
 80187cc:	4640      	mov	r0, r8
 80187ce:	4798      	blx	r3
 80187d0:	6923      	ldr	r3, [r4, #16]
 80187d2:	3b01      	subs	r3, #1
 80187d4:	6123      	str	r3, [r4, #16]
 80187d6:	e6ec      	b.n	80185b2 <_scanf_float+0x7a>
 80187d8:	1e6b      	subs	r3, r5, #1
 80187da:	2b06      	cmp	r3, #6
 80187dc:	d825      	bhi.n	801882a <_scanf_float+0x2f2>
 80187de:	2d02      	cmp	r5, #2
 80187e0:	d836      	bhi.n	8018850 <_scanf_float+0x318>
 80187e2:	455e      	cmp	r6, fp
 80187e4:	f67f aee8 	bls.w	80185b8 <_scanf_float+0x80>
 80187e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80187ec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80187f0:	463a      	mov	r2, r7
 80187f2:	4640      	mov	r0, r8
 80187f4:	4798      	blx	r3
 80187f6:	6923      	ldr	r3, [r4, #16]
 80187f8:	3b01      	subs	r3, #1
 80187fa:	6123      	str	r3, [r4, #16]
 80187fc:	e7f1      	b.n	80187e2 <_scanf_float+0x2aa>
 80187fe:	9802      	ldr	r0, [sp, #8]
 8018800:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018804:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8018808:	9002      	str	r0, [sp, #8]
 801880a:	463a      	mov	r2, r7
 801880c:	4640      	mov	r0, r8
 801880e:	4798      	blx	r3
 8018810:	6923      	ldr	r3, [r4, #16]
 8018812:	3b01      	subs	r3, #1
 8018814:	6123      	str	r3, [r4, #16]
 8018816:	f10a 3aff 	add.w	sl, sl, #4294967295
 801881a:	fa5f fa8a 	uxtb.w	sl, sl
 801881e:	f1ba 0f02 	cmp.w	sl, #2
 8018822:	d1ec      	bne.n	80187fe <_scanf_float+0x2c6>
 8018824:	3d03      	subs	r5, #3
 8018826:	b2ed      	uxtb	r5, r5
 8018828:	1b76      	subs	r6, r6, r5
 801882a:	6823      	ldr	r3, [r4, #0]
 801882c:	05da      	lsls	r2, r3, #23
 801882e:	d52f      	bpl.n	8018890 <_scanf_float+0x358>
 8018830:	055b      	lsls	r3, r3, #21
 8018832:	d510      	bpl.n	8018856 <_scanf_float+0x31e>
 8018834:	455e      	cmp	r6, fp
 8018836:	f67f aebf 	bls.w	80185b8 <_scanf_float+0x80>
 801883a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801883e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8018842:	463a      	mov	r2, r7
 8018844:	4640      	mov	r0, r8
 8018846:	4798      	blx	r3
 8018848:	6923      	ldr	r3, [r4, #16]
 801884a:	3b01      	subs	r3, #1
 801884c:	6123      	str	r3, [r4, #16]
 801884e:	e7f1      	b.n	8018834 <_scanf_float+0x2fc>
 8018850:	46aa      	mov	sl, r5
 8018852:	9602      	str	r6, [sp, #8]
 8018854:	e7df      	b.n	8018816 <_scanf_float+0x2de>
 8018856:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801885a:	6923      	ldr	r3, [r4, #16]
 801885c:	2965      	cmp	r1, #101	; 0x65
 801885e:	f103 33ff 	add.w	r3, r3, #4294967295
 8018862:	f106 35ff 	add.w	r5, r6, #4294967295
 8018866:	6123      	str	r3, [r4, #16]
 8018868:	d00c      	beq.n	8018884 <_scanf_float+0x34c>
 801886a:	2945      	cmp	r1, #69	; 0x45
 801886c:	d00a      	beq.n	8018884 <_scanf_float+0x34c>
 801886e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018872:	463a      	mov	r2, r7
 8018874:	4640      	mov	r0, r8
 8018876:	4798      	blx	r3
 8018878:	6923      	ldr	r3, [r4, #16]
 801887a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801887e:	3b01      	subs	r3, #1
 8018880:	1eb5      	subs	r5, r6, #2
 8018882:	6123      	str	r3, [r4, #16]
 8018884:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018888:	463a      	mov	r2, r7
 801888a:	4640      	mov	r0, r8
 801888c:	4798      	blx	r3
 801888e:	462e      	mov	r6, r5
 8018890:	6825      	ldr	r5, [r4, #0]
 8018892:	f015 0510 	ands.w	r5, r5, #16
 8018896:	d158      	bne.n	801894a <_scanf_float+0x412>
 8018898:	7035      	strb	r5, [r6, #0]
 801889a:	6823      	ldr	r3, [r4, #0]
 801889c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80188a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80188a4:	d11c      	bne.n	80188e0 <_scanf_float+0x3a8>
 80188a6:	9b01      	ldr	r3, [sp, #4]
 80188a8:	454b      	cmp	r3, r9
 80188aa:	eba3 0209 	sub.w	r2, r3, r9
 80188ae:	d124      	bne.n	80188fa <_scanf_float+0x3c2>
 80188b0:	2200      	movs	r2, #0
 80188b2:	4659      	mov	r1, fp
 80188b4:	4640      	mov	r0, r8
 80188b6:	f002 fd1b 	bl	801b2f0 <_strtod_r>
 80188ba:	9b03      	ldr	r3, [sp, #12]
 80188bc:	6821      	ldr	r1, [r4, #0]
 80188be:	681b      	ldr	r3, [r3, #0]
 80188c0:	f011 0f02 	tst.w	r1, #2
 80188c4:	ec57 6b10 	vmov	r6, r7, d0
 80188c8:	f103 0204 	add.w	r2, r3, #4
 80188cc:	d020      	beq.n	8018910 <_scanf_float+0x3d8>
 80188ce:	9903      	ldr	r1, [sp, #12]
 80188d0:	600a      	str	r2, [r1, #0]
 80188d2:	681b      	ldr	r3, [r3, #0]
 80188d4:	e9c3 6700 	strd	r6, r7, [r3]
 80188d8:	68e3      	ldr	r3, [r4, #12]
 80188da:	3301      	adds	r3, #1
 80188dc:	60e3      	str	r3, [r4, #12]
 80188de:	e66c      	b.n	80185ba <_scanf_float+0x82>
 80188e0:	9b04      	ldr	r3, [sp, #16]
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	d0e4      	beq.n	80188b0 <_scanf_float+0x378>
 80188e6:	9905      	ldr	r1, [sp, #20]
 80188e8:	230a      	movs	r3, #10
 80188ea:	462a      	mov	r2, r5
 80188ec:	3101      	adds	r1, #1
 80188ee:	4640      	mov	r0, r8
 80188f0:	f002 fd86 	bl	801b400 <_strtol_r>
 80188f4:	9b04      	ldr	r3, [sp, #16]
 80188f6:	9e05      	ldr	r6, [sp, #20]
 80188f8:	1ac2      	subs	r2, r0, r3
 80188fa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80188fe:	429e      	cmp	r6, r3
 8018900:	bf28      	it	cs
 8018902:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8018906:	4912      	ldr	r1, [pc, #72]	; (8018950 <_scanf_float+0x418>)
 8018908:	4630      	mov	r0, r6
 801890a:	f000 f943 	bl	8018b94 <siprintf>
 801890e:	e7cf      	b.n	80188b0 <_scanf_float+0x378>
 8018910:	f011 0f04 	tst.w	r1, #4
 8018914:	9903      	ldr	r1, [sp, #12]
 8018916:	600a      	str	r2, [r1, #0]
 8018918:	d1db      	bne.n	80188d2 <_scanf_float+0x39a>
 801891a:	f8d3 8000 	ldr.w	r8, [r3]
 801891e:	ee10 2a10 	vmov	r2, s0
 8018922:	ee10 0a10 	vmov	r0, s0
 8018926:	463b      	mov	r3, r7
 8018928:	4639      	mov	r1, r7
 801892a:	f7e8 f92f 	bl	8000b8c <__aeabi_dcmpun>
 801892e:	b128      	cbz	r0, 801893c <_scanf_float+0x404>
 8018930:	4808      	ldr	r0, [pc, #32]	; (8018954 <_scanf_float+0x41c>)
 8018932:	f000 fb57 	bl	8018fe4 <nanf>
 8018936:	ed88 0a00 	vstr	s0, [r8]
 801893a:	e7cd      	b.n	80188d8 <_scanf_float+0x3a0>
 801893c:	4630      	mov	r0, r6
 801893e:	4639      	mov	r1, r7
 8018940:	f7e8 f982 	bl	8000c48 <__aeabi_d2f>
 8018944:	f8c8 0000 	str.w	r0, [r8]
 8018948:	e7c6      	b.n	80188d8 <_scanf_float+0x3a0>
 801894a:	2500      	movs	r5, #0
 801894c:	e635      	b.n	80185ba <_scanf_float+0x82>
 801894e:	bf00      	nop
 8018950:	0801daa2 	.word	0x0801daa2
 8018954:	0801de50 	.word	0x0801de50

08018958 <std>:
 8018958:	2300      	movs	r3, #0
 801895a:	b510      	push	{r4, lr}
 801895c:	4604      	mov	r4, r0
 801895e:	e9c0 3300 	strd	r3, r3, [r0]
 8018962:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018966:	6083      	str	r3, [r0, #8]
 8018968:	8181      	strh	r1, [r0, #12]
 801896a:	6643      	str	r3, [r0, #100]	; 0x64
 801896c:	81c2      	strh	r2, [r0, #14]
 801896e:	6183      	str	r3, [r0, #24]
 8018970:	4619      	mov	r1, r3
 8018972:	2208      	movs	r2, #8
 8018974:	305c      	adds	r0, #92	; 0x5c
 8018976:	f000 fa33 	bl	8018de0 <memset>
 801897a:	4b05      	ldr	r3, [pc, #20]	; (8018990 <std+0x38>)
 801897c:	6263      	str	r3, [r4, #36]	; 0x24
 801897e:	4b05      	ldr	r3, [pc, #20]	; (8018994 <std+0x3c>)
 8018980:	62a3      	str	r3, [r4, #40]	; 0x28
 8018982:	4b05      	ldr	r3, [pc, #20]	; (8018998 <std+0x40>)
 8018984:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018986:	4b05      	ldr	r3, [pc, #20]	; (801899c <std+0x44>)
 8018988:	6224      	str	r4, [r4, #32]
 801898a:	6323      	str	r3, [r4, #48]	; 0x30
 801898c:	bd10      	pop	{r4, pc}
 801898e:	bf00      	nop
 8018990:	08018c2d 	.word	0x08018c2d
 8018994:	08018c53 	.word	0x08018c53
 8018998:	08018c8b 	.word	0x08018c8b
 801899c:	08018caf 	.word	0x08018caf

080189a0 <stdio_exit_handler>:
 80189a0:	4a02      	ldr	r2, [pc, #8]	; (80189ac <stdio_exit_handler+0xc>)
 80189a2:	4903      	ldr	r1, [pc, #12]	; (80189b0 <stdio_exit_handler+0x10>)
 80189a4:	4803      	ldr	r0, [pc, #12]	; (80189b4 <stdio_exit_handler+0x14>)
 80189a6:	f000 b869 	b.w	8018a7c <_fwalk_sglue>
 80189aa:	bf00      	nop
 80189ac:	20000140 	.word	0x20000140
 80189b0:	0801c089 	.word	0x0801c089
 80189b4:	2000014c 	.word	0x2000014c

080189b8 <cleanup_stdio>:
 80189b8:	6841      	ldr	r1, [r0, #4]
 80189ba:	4b0c      	ldr	r3, [pc, #48]	; (80189ec <cleanup_stdio+0x34>)
 80189bc:	4299      	cmp	r1, r3
 80189be:	b510      	push	{r4, lr}
 80189c0:	4604      	mov	r4, r0
 80189c2:	d001      	beq.n	80189c8 <cleanup_stdio+0x10>
 80189c4:	f003 fb60 	bl	801c088 <_fflush_r>
 80189c8:	68a1      	ldr	r1, [r4, #8]
 80189ca:	4b09      	ldr	r3, [pc, #36]	; (80189f0 <cleanup_stdio+0x38>)
 80189cc:	4299      	cmp	r1, r3
 80189ce:	d002      	beq.n	80189d6 <cleanup_stdio+0x1e>
 80189d0:	4620      	mov	r0, r4
 80189d2:	f003 fb59 	bl	801c088 <_fflush_r>
 80189d6:	68e1      	ldr	r1, [r4, #12]
 80189d8:	4b06      	ldr	r3, [pc, #24]	; (80189f4 <cleanup_stdio+0x3c>)
 80189da:	4299      	cmp	r1, r3
 80189dc:	d004      	beq.n	80189e8 <cleanup_stdio+0x30>
 80189de:	4620      	mov	r0, r4
 80189e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80189e4:	f003 bb50 	b.w	801c088 <_fflush_r>
 80189e8:	bd10      	pop	{r4, pc}
 80189ea:	bf00      	nop
 80189ec:	20008348 	.word	0x20008348
 80189f0:	200083b0 	.word	0x200083b0
 80189f4:	20008418 	.word	0x20008418

080189f8 <global_stdio_init.part.0>:
 80189f8:	b510      	push	{r4, lr}
 80189fa:	4b0b      	ldr	r3, [pc, #44]	; (8018a28 <global_stdio_init.part.0+0x30>)
 80189fc:	4c0b      	ldr	r4, [pc, #44]	; (8018a2c <global_stdio_init.part.0+0x34>)
 80189fe:	4a0c      	ldr	r2, [pc, #48]	; (8018a30 <global_stdio_init.part.0+0x38>)
 8018a00:	601a      	str	r2, [r3, #0]
 8018a02:	4620      	mov	r0, r4
 8018a04:	2200      	movs	r2, #0
 8018a06:	2104      	movs	r1, #4
 8018a08:	f7ff ffa6 	bl	8018958 <std>
 8018a0c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8018a10:	2201      	movs	r2, #1
 8018a12:	2109      	movs	r1, #9
 8018a14:	f7ff ffa0 	bl	8018958 <std>
 8018a18:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8018a1c:	2202      	movs	r2, #2
 8018a1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018a22:	2112      	movs	r1, #18
 8018a24:	f7ff bf98 	b.w	8018958 <std>
 8018a28:	20008480 	.word	0x20008480
 8018a2c:	20008348 	.word	0x20008348
 8018a30:	080189a1 	.word	0x080189a1

08018a34 <__sfp_lock_acquire>:
 8018a34:	4801      	ldr	r0, [pc, #4]	; (8018a3c <__sfp_lock_acquire+0x8>)
 8018a36:	f000 bac5 	b.w	8018fc4 <__retarget_lock_acquire_recursive>
 8018a3a:	bf00      	nop
 8018a3c:	20008489 	.word	0x20008489

08018a40 <__sfp_lock_release>:
 8018a40:	4801      	ldr	r0, [pc, #4]	; (8018a48 <__sfp_lock_release+0x8>)
 8018a42:	f000 bac0 	b.w	8018fc6 <__retarget_lock_release_recursive>
 8018a46:	bf00      	nop
 8018a48:	20008489 	.word	0x20008489

08018a4c <__sinit>:
 8018a4c:	b510      	push	{r4, lr}
 8018a4e:	4604      	mov	r4, r0
 8018a50:	f7ff fff0 	bl	8018a34 <__sfp_lock_acquire>
 8018a54:	6a23      	ldr	r3, [r4, #32]
 8018a56:	b11b      	cbz	r3, 8018a60 <__sinit+0x14>
 8018a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018a5c:	f7ff bff0 	b.w	8018a40 <__sfp_lock_release>
 8018a60:	4b04      	ldr	r3, [pc, #16]	; (8018a74 <__sinit+0x28>)
 8018a62:	6223      	str	r3, [r4, #32]
 8018a64:	4b04      	ldr	r3, [pc, #16]	; (8018a78 <__sinit+0x2c>)
 8018a66:	681b      	ldr	r3, [r3, #0]
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	d1f5      	bne.n	8018a58 <__sinit+0xc>
 8018a6c:	f7ff ffc4 	bl	80189f8 <global_stdio_init.part.0>
 8018a70:	e7f2      	b.n	8018a58 <__sinit+0xc>
 8018a72:	bf00      	nop
 8018a74:	080189b9 	.word	0x080189b9
 8018a78:	20008480 	.word	0x20008480

08018a7c <_fwalk_sglue>:
 8018a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a80:	4607      	mov	r7, r0
 8018a82:	4688      	mov	r8, r1
 8018a84:	4614      	mov	r4, r2
 8018a86:	2600      	movs	r6, #0
 8018a88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018a8c:	f1b9 0901 	subs.w	r9, r9, #1
 8018a90:	d505      	bpl.n	8018a9e <_fwalk_sglue+0x22>
 8018a92:	6824      	ldr	r4, [r4, #0]
 8018a94:	2c00      	cmp	r4, #0
 8018a96:	d1f7      	bne.n	8018a88 <_fwalk_sglue+0xc>
 8018a98:	4630      	mov	r0, r6
 8018a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a9e:	89ab      	ldrh	r3, [r5, #12]
 8018aa0:	2b01      	cmp	r3, #1
 8018aa2:	d907      	bls.n	8018ab4 <_fwalk_sglue+0x38>
 8018aa4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018aa8:	3301      	adds	r3, #1
 8018aaa:	d003      	beq.n	8018ab4 <_fwalk_sglue+0x38>
 8018aac:	4629      	mov	r1, r5
 8018aae:	4638      	mov	r0, r7
 8018ab0:	47c0      	blx	r8
 8018ab2:	4306      	orrs	r6, r0
 8018ab4:	3568      	adds	r5, #104	; 0x68
 8018ab6:	e7e9      	b.n	8018a8c <_fwalk_sglue+0x10>

08018ab8 <iprintf>:
 8018ab8:	b40f      	push	{r0, r1, r2, r3}
 8018aba:	b507      	push	{r0, r1, r2, lr}
 8018abc:	4906      	ldr	r1, [pc, #24]	; (8018ad8 <iprintf+0x20>)
 8018abe:	ab04      	add	r3, sp, #16
 8018ac0:	6808      	ldr	r0, [r1, #0]
 8018ac2:	f853 2b04 	ldr.w	r2, [r3], #4
 8018ac6:	6881      	ldr	r1, [r0, #8]
 8018ac8:	9301      	str	r3, [sp, #4]
 8018aca:	f002 ffef 	bl	801baac <_vfiprintf_r>
 8018ace:	b003      	add	sp, #12
 8018ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8018ad4:	b004      	add	sp, #16
 8018ad6:	4770      	bx	lr
 8018ad8:	20000198 	.word	0x20000198

08018adc <_puts_r>:
 8018adc:	6a03      	ldr	r3, [r0, #32]
 8018ade:	b570      	push	{r4, r5, r6, lr}
 8018ae0:	6884      	ldr	r4, [r0, #8]
 8018ae2:	4605      	mov	r5, r0
 8018ae4:	460e      	mov	r6, r1
 8018ae6:	b90b      	cbnz	r3, 8018aec <_puts_r+0x10>
 8018ae8:	f7ff ffb0 	bl	8018a4c <__sinit>
 8018aec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018aee:	07db      	lsls	r3, r3, #31
 8018af0:	d405      	bmi.n	8018afe <_puts_r+0x22>
 8018af2:	89a3      	ldrh	r3, [r4, #12]
 8018af4:	0598      	lsls	r0, r3, #22
 8018af6:	d402      	bmi.n	8018afe <_puts_r+0x22>
 8018af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018afa:	f000 fa63 	bl	8018fc4 <__retarget_lock_acquire_recursive>
 8018afe:	89a3      	ldrh	r3, [r4, #12]
 8018b00:	0719      	lsls	r1, r3, #28
 8018b02:	d513      	bpl.n	8018b2c <_puts_r+0x50>
 8018b04:	6923      	ldr	r3, [r4, #16]
 8018b06:	b18b      	cbz	r3, 8018b2c <_puts_r+0x50>
 8018b08:	3e01      	subs	r6, #1
 8018b0a:	68a3      	ldr	r3, [r4, #8]
 8018b0c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8018b10:	3b01      	subs	r3, #1
 8018b12:	60a3      	str	r3, [r4, #8]
 8018b14:	b9e9      	cbnz	r1, 8018b52 <_puts_r+0x76>
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	da2e      	bge.n	8018b78 <_puts_r+0x9c>
 8018b1a:	4622      	mov	r2, r4
 8018b1c:	210a      	movs	r1, #10
 8018b1e:	4628      	mov	r0, r5
 8018b20:	f000 f8c9 	bl	8018cb6 <__swbuf_r>
 8018b24:	3001      	adds	r0, #1
 8018b26:	d007      	beq.n	8018b38 <_puts_r+0x5c>
 8018b28:	250a      	movs	r5, #10
 8018b2a:	e007      	b.n	8018b3c <_puts_r+0x60>
 8018b2c:	4621      	mov	r1, r4
 8018b2e:	4628      	mov	r0, r5
 8018b30:	f000 f8fe 	bl	8018d30 <__swsetup_r>
 8018b34:	2800      	cmp	r0, #0
 8018b36:	d0e7      	beq.n	8018b08 <_puts_r+0x2c>
 8018b38:	f04f 35ff 	mov.w	r5, #4294967295
 8018b3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018b3e:	07da      	lsls	r2, r3, #31
 8018b40:	d405      	bmi.n	8018b4e <_puts_r+0x72>
 8018b42:	89a3      	ldrh	r3, [r4, #12]
 8018b44:	059b      	lsls	r3, r3, #22
 8018b46:	d402      	bmi.n	8018b4e <_puts_r+0x72>
 8018b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018b4a:	f000 fa3c 	bl	8018fc6 <__retarget_lock_release_recursive>
 8018b4e:	4628      	mov	r0, r5
 8018b50:	bd70      	pop	{r4, r5, r6, pc}
 8018b52:	2b00      	cmp	r3, #0
 8018b54:	da04      	bge.n	8018b60 <_puts_r+0x84>
 8018b56:	69a2      	ldr	r2, [r4, #24]
 8018b58:	429a      	cmp	r2, r3
 8018b5a:	dc06      	bgt.n	8018b6a <_puts_r+0x8e>
 8018b5c:	290a      	cmp	r1, #10
 8018b5e:	d004      	beq.n	8018b6a <_puts_r+0x8e>
 8018b60:	6823      	ldr	r3, [r4, #0]
 8018b62:	1c5a      	adds	r2, r3, #1
 8018b64:	6022      	str	r2, [r4, #0]
 8018b66:	7019      	strb	r1, [r3, #0]
 8018b68:	e7cf      	b.n	8018b0a <_puts_r+0x2e>
 8018b6a:	4622      	mov	r2, r4
 8018b6c:	4628      	mov	r0, r5
 8018b6e:	f000 f8a2 	bl	8018cb6 <__swbuf_r>
 8018b72:	3001      	adds	r0, #1
 8018b74:	d1c9      	bne.n	8018b0a <_puts_r+0x2e>
 8018b76:	e7df      	b.n	8018b38 <_puts_r+0x5c>
 8018b78:	6823      	ldr	r3, [r4, #0]
 8018b7a:	250a      	movs	r5, #10
 8018b7c:	1c5a      	adds	r2, r3, #1
 8018b7e:	6022      	str	r2, [r4, #0]
 8018b80:	701d      	strb	r5, [r3, #0]
 8018b82:	e7db      	b.n	8018b3c <_puts_r+0x60>

08018b84 <puts>:
 8018b84:	4b02      	ldr	r3, [pc, #8]	; (8018b90 <puts+0xc>)
 8018b86:	4601      	mov	r1, r0
 8018b88:	6818      	ldr	r0, [r3, #0]
 8018b8a:	f7ff bfa7 	b.w	8018adc <_puts_r>
 8018b8e:	bf00      	nop
 8018b90:	20000198 	.word	0x20000198

08018b94 <siprintf>:
 8018b94:	b40e      	push	{r1, r2, r3}
 8018b96:	b500      	push	{lr}
 8018b98:	b09c      	sub	sp, #112	; 0x70
 8018b9a:	ab1d      	add	r3, sp, #116	; 0x74
 8018b9c:	9002      	str	r0, [sp, #8]
 8018b9e:	9006      	str	r0, [sp, #24]
 8018ba0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018ba4:	4809      	ldr	r0, [pc, #36]	; (8018bcc <siprintf+0x38>)
 8018ba6:	9107      	str	r1, [sp, #28]
 8018ba8:	9104      	str	r1, [sp, #16]
 8018baa:	4909      	ldr	r1, [pc, #36]	; (8018bd0 <siprintf+0x3c>)
 8018bac:	f853 2b04 	ldr.w	r2, [r3], #4
 8018bb0:	9105      	str	r1, [sp, #20]
 8018bb2:	6800      	ldr	r0, [r0, #0]
 8018bb4:	9301      	str	r3, [sp, #4]
 8018bb6:	a902      	add	r1, sp, #8
 8018bb8:	f002 fc7e 	bl	801b4b8 <_svfiprintf_r>
 8018bbc:	9b02      	ldr	r3, [sp, #8]
 8018bbe:	2200      	movs	r2, #0
 8018bc0:	701a      	strb	r2, [r3, #0]
 8018bc2:	b01c      	add	sp, #112	; 0x70
 8018bc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8018bc8:	b003      	add	sp, #12
 8018bca:	4770      	bx	lr
 8018bcc:	20000198 	.word	0x20000198
 8018bd0:	ffff0208 	.word	0xffff0208

08018bd4 <siscanf>:
 8018bd4:	b40e      	push	{r1, r2, r3}
 8018bd6:	b510      	push	{r4, lr}
 8018bd8:	b09f      	sub	sp, #124	; 0x7c
 8018bda:	ac21      	add	r4, sp, #132	; 0x84
 8018bdc:	f44f 7101 	mov.w	r1, #516	; 0x204
 8018be0:	f854 2b04 	ldr.w	r2, [r4], #4
 8018be4:	9201      	str	r2, [sp, #4]
 8018be6:	f8ad 101c 	strh.w	r1, [sp, #28]
 8018bea:	9004      	str	r0, [sp, #16]
 8018bec:	9008      	str	r0, [sp, #32]
 8018bee:	f7e7 fb6f 	bl	80002d0 <strlen>
 8018bf2:	4b0c      	ldr	r3, [pc, #48]	; (8018c24 <siscanf+0x50>)
 8018bf4:	9005      	str	r0, [sp, #20]
 8018bf6:	9009      	str	r0, [sp, #36]	; 0x24
 8018bf8:	930d      	str	r3, [sp, #52]	; 0x34
 8018bfa:	480b      	ldr	r0, [pc, #44]	; (8018c28 <siscanf+0x54>)
 8018bfc:	9a01      	ldr	r2, [sp, #4]
 8018bfe:	6800      	ldr	r0, [r0, #0]
 8018c00:	9403      	str	r4, [sp, #12]
 8018c02:	2300      	movs	r3, #0
 8018c04:	9311      	str	r3, [sp, #68]	; 0x44
 8018c06:	9316      	str	r3, [sp, #88]	; 0x58
 8018c08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018c0c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018c10:	a904      	add	r1, sp, #16
 8018c12:	4623      	mov	r3, r4
 8018c14:	f002 fda8 	bl	801b768 <__ssvfiscanf_r>
 8018c18:	b01f      	add	sp, #124	; 0x7c
 8018c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018c1e:	b003      	add	sp, #12
 8018c20:	4770      	bx	lr
 8018c22:	bf00      	nop
 8018c24:	08018c4f 	.word	0x08018c4f
 8018c28:	20000198 	.word	0x20000198

08018c2c <__sread>:
 8018c2c:	b510      	push	{r4, lr}
 8018c2e:	460c      	mov	r4, r1
 8018c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018c34:	f000 f968 	bl	8018f08 <_read_r>
 8018c38:	2800      	cmp	r0, #0
 8018c3a:	bfab      	itete	ge
 8018c3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018c3e:	89a3      	ldrhlt	r3, [r4, #12]
 8018c40:	181b      	addge	r3, r3, r0
 8018c42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018c46:	bfac      	ite	ge
 8018c48:	6563      	strge	r3, [r4, #84]	; 0x54
 8018c4a:	81a3      	strhlt	r3, [r4, #12]
 8018c4c:	bd10      	pop	{r4, pc}

08018c4e <__seofread>:
 8018c4e:	2000      	movs	r0, #0
 8018c50:	4770      	bx	lr

08018c52 <__swrite>:
 8018c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c56:	461f      	mov	r7, r3
 8018c58:	898b      	ldrh	r3, [r1, #12]
 8018c5a:	05db      	lsls	r3, r3, #23
 8018c5c:	4605      	mov	r5, r0
 8018c5e:	460c      	mov	r4, r1
 8018c60:	4616      	mov	r6, r2
 8018c62:	d505      	bpl.n	8018c70 <__swrite+0x1e>
 8018c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018c68:	2302      	movs	r3, #2
 8018c6a:	2200      	movs	r2, #0
 8018c6c:	f000 f93a 	bl	8018ee4 <_lseek_r>
 8018c70:	89a3      	ldrh	r3, [r4, #12]
 8018c72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018c76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018c7a:	81a3      	strh	r3, [r4, #12]
 8018c7c:	4632      	mov	r2, r6
 8018c7e:	463b      	mov	r3, r7
 8018c80:	4628      	mov	r0, r5
 8018c82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018c86:	f000 b961 	b.w	8018f4c <_write_r>

08018c8a <__sseek>:
 8018c8a:	b510      	push	{r4, lr}
 8018c8c:	460c      	mov	r4, r1
 8018c8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018c92:	f000 f927 	bl	8018ee4 <_lseek_r>
 8018c96:	1c43      	adds	r3, r0, #1
 8018c98:	89a3      	ldrh	r3, [r4, #12]
 8018c9a:	bf15      	itete	ne
 8018c9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8018c9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018ca2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018ca6:	81a3      	strheq	r3, [r4, #12]
 8018ca8:	bf18      	it	ne
 8018caa:	81a3      	strhne	r3, [r4, #12]
 8018cac:	bd10      	pop	{r4, pc}

08018cae <__sclose>:
 8018cae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018cb2:	f000 b8b1 	b.w	8018e18 <_close_r>

08018cb6 <__swbuf_r>:
 8018cb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018cb8:	460e      	mov	r6, r1
 8018cba:	4614      	mov	r4, r2
 8018cbc:	4605      	mov	r5, r0
 8018cbe:	b118      	cbz	r0, 8018cc8 <__swbuf_r+0x12>
 8018cc0:	6a03      	ldr	r3, [r0, #32]
 8018cc2:	b90b      	cbnz	r3, 8018cc8 <__swbuf_r+0x12>
 8018cc4:	f7ff fec2 	bl	8018a4c <__sinit>
 8018cc8:	69a3      	ldr	r3, [r4, #24]
 8018cca:	60a3      	str	r3, [r4, #8]
 8018ccc:	89a3      	ldrh	r3, [r4, #12]
 8018cce:	071a      	lsls	r2, r3, #28
 8018cd0:	d525      	bpl.n	8018d1e <__swbuf_r+0x68>
 8018cd2:	6923      	ldr	r3, [r4, #16]
 8018cd4:	b31b      	cbz	r3, 8018d1e <__swbuf_r+0x68>
 8018cd6:	6823      	ldr	r3, [r4, #0]
 8018cd8:	6922      	ldr	r2, [r4, #16]
 8018cda:	1a98      	subs	r0, r3, r2
 8018cdc:	6963      	ldr	r3, [r4, #20]
 8018cde:	b2f6      	uxtb	r6, r6
 8018ce0:	4283      	cmp	r3, r0
 8018ce2:	4637      	mov	r7, r6
 8018ce4:	dc04      	bgt.n	8018cf0 <__swbuf_r+0x3a>
 8018ce6:	4621      	mov	r1, r4
 8018ce8:	4628      	mov	r0, r5
 8018cea:	f003 f9cd 	bl	801c088 <_fflush_r>
 8018cee:	b9e0      	cbnz	r0, 8018d2a <__swbuf_r+0x74>
 8018cf0:	68a3      	ldr	r3, [r4, #8]
 8018cf2:	3b01      	subs	r3, #1
 8018cf4:	60a3      	str	r3, [r4, #8]
 8018cf6:	6823      	ldr	r3, [r4, #0]
 8018cf8:	1c5a      	adds	r2, r3, #1
 8018cfa:	6022      	str	r2, [r4, #0]
 8018cfc:	701e      	strb	r6, [r3, #0]
 8018cfe:	6962      	ldr	r2, [r4, #20]
 8018d00:	1c43      	adds	r3, r0, #1
 8018d02:	429a      	cmp	r2, r3
 8018d04:	d004      	beq.n	8018d10 <__swbuf_r+0x5a>
 8018d06:	89a3      	ldrh	r3, [r4, #12]
 8018d08:	07db      	lsls	r3, r3, #31
 8018d0a:	d506      	bpl.n	8018d1a <__swbuf_r+0x64>
 8018d0c:	2e0a      	cmp	r6, #10
 8018d0e:	d104      	bne.n	8018d1a <__swbuf_r+0x64>
 8018d10:	4621      	mov	r1, r4
 8018d12:	4628      	mov	r0, r5
 8018d14:	f003 f9b8 	bl	801c088 <_fflush_r>
 8018d18:	b938      	cbnz	r0, 8018d2a <__swbuf_r+0x74>
 8018d1a:	4638      	mov	r0, r7
 8018d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d1e:	4621      	mov	r1, r4
 8018d20:	4628      	mov	r0, r5
 8018d22:	f000 f805 	bl	8018d30 <__swsetup_r>
 8018d26:	2800      	cmp	r0, #0
 8018d28:	d0d5      	beq.n	8018cd6 <__swbuf_r+0x20>
 8018d2a:	f04f 37ff 	mov.w	r7, #4294967295
 8018d2e:	e7f4      	b.n	8018d1a <__swbuf_r+0x64>

08018d30 <__swsetup_r>:
 8018d30:	b538      	push	{r3, r4, r5, lr}
 8018d32:	4b2a      	ldr	r3, [pc, #168]	; (8018ddc <__swsetup_r+0xac>)
 8018d34:	4605      	mov	r5, r0
 8018d36:	6818      	ldr	r0, [r3, #0]
 8018d38:	460c      	mov	r4, r1
 8018d3a:	b118      	cbz	r0, 8018d44 <__swsetup_r+0x14>
 8018d3c:	6a03      	ldr	r3, [r0, #32]
 8018d3e:	b90b      	cbnz	r3, 8018d44 <__swsetup_r+0x14>
 8018d40:	f7ff fe84 	bl	8018a4c <__sinit>
 8018d44:	89a3      	ldrh	r3, [r4, #12]
 8018d46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018d4a:	0718      	lsls	r0, r3, #28
 8018d4c:	d422      	bmi.n	8018d94 <__swsetup_r+0x64>
 8018d4e:	06d9      	lsls	r1, r3, #27
 8018d50:	d407      	bmi.n	8018d62 <__swsetup_r+0x32>
 8018d52:	2309      	movs	r3, #9
 8018d54:	602b      	str	r3, [r5, #0]
 8018d56:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018d5a:	81a3      	strh	r3, [r4, #12]
 8018d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8018d60:	e034      	b.n	8018dcc <__swsetup_r+0x9c>
 8018d62:	0758      	lsls	r0, r3, #29
 8018d64:	d512      	bpl.n	8018d8c <__swsetup_r+0x5c>
 8018d66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018d68:	b141      	cbz	r1, 8018d7c <__swsetup_r+0x4c>
 8018d6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018d6e:	4299      	cmp	r1, r3
 8018d70:	d002      	beq.n	8018d78 <__swsetup_r+0x48>
 8018d72:	4628      	mov	r0, r5
 8018d74:	f000 ffb6 	bl	8019ce4 <_free_r>
 8018d78:	2300      	movs	r3, #0
 8018d7a:	6363      	str	r3, [r4, #52]	; 0x34
 8018d7c:	89a3      	ldrh	r3, [r4, #12]
 8018d7e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018d82:	81a3      	strh	r3, [r4, #12]
 8018d84:	2300      	movs	r3, #0
 8018d86:	6063      	str	r3, [r4, #4]
 8018d88:	6923      	ldr	r3, [r4, #16]
 8018d8a:	6023      	str	r3, [r4, #0]
 8018d8c:	89a3      	ldrh	r3, [r4, #12]
 8018d8e:	f043 0308 	orr.w	r3, r3, #8
 8018d92:	81a3      	strh	r3, [r4, #12]
 8018d94:	6923      	ldr	r3, [r4, #16]
 8018d96:	b94b      	cbnz	r3, 8018dac <__swsetup_r+0x7c>
 8018d98:	89a3      	ldrh	r3, [r4, #12]
 8018d9a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018d9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018da2:	d003      	beq.n	8018dac <__swsetup_r+0x7c>
 8018da4:	4621      	mov	r1, r4
 8018da6:	4628      	mov	r0, r5
 8018da8:	f003 f9bc 	bl	801c124 <__smakebuf_r>
 8018dac:	89a0      	ldrh	r0, [r4, #12]
 8018dae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018db2:	f010 0301 	ands.w	r3, r0, #1
 8018db6:	d00a      	beq.n	8018dce <__swsetup_r+0x9e>
 8018db8:	2300      	movs	r3, #0
 8018dba:	60a3      	str	r3, [r4, #8]
 8018dbc:	6963      	ldr	r3, [r4, #20]
 8018dbe:	425b      	negs	r3, r3
 8018dc0:	61a3      	str	r3, [r4, #24]
 8018dc2:	6923      	ldr	r3, [r4, #16]
 8018dc4:	b943      	cbnz	r3, 8018dd8 <__swsetup_r+0xa8>
 8018dc6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018dca:	d1c4      	bne.n	8018d56 <__swsetup_r+0x26>
 8018dcc:	bd38      	pop	{r3, r4, r5, pc}
 8018dce:	0781      	lsls	r1, r0, #30
 8018dd0:	bf58      	it	pl
 8018dd2:	6963      	ldrpl	r3, [r4, #20]
 8018dd4:	60a3      	str	r3, [r4, #8]
 8018dd6:	e7f4      	b.n	8018dc2 <__swsetup_r+0x92>
 8018dd8:	2000      	movs	r0, #0
 8018dda:	e7f7      	b.n	8018dcc <__swsetup_r+0x9c>
 8018ddc:	20000198 	.word	0x20000198

08018de0 <memset>:
 8018de0:	4402      	add	r2, r0
 8018de2:	4603      	mov	r3, r0
 8018de4:	4293      	cmp	r3, r2
 8018de6:	d100      	bne.n	8018dea <memset+0xa>
 8018de8:	4770      	bx	lr
 8018dea:	f803 1b01 	strb.w	r1, [r3], #1
 8018dee:	e7f9      	b.n	8018de4 <memset+0x4>

08018df0 <strcat>:
 8018df0:	b510      	push	{r4, lr}
 8018df2:	4602      	mov	r2, r0
 8018df4:	7814      	ldrb	r4, [r2, #0]
 8018df6:	4613      	mov	r3, r2
 8018df8:	3201      	adds	r2, #1
 8018dfa:	2c00      	cmp	r4, #0
 8018dfc:	d1fa      	bne.n	8018df4 <strcat+0x4>
 8018dfe:	3b01      	subs	r3, #1
 8018e00:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018e04:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018e08:	2a00      	cmp	r2, #0
 8018e0a:	d1f9      	bne.n	8018e00 <strcat+0x10>
 8018e0c:	bd10      	pop	{r4, pc}
	...

08018e10 <_localeconv_r>:
 8018e10:	4800      	ldr	r0, [pc, #0]	; (8018e14 <_localeconv_r+0x4>)
 8018e12:	4770      	bx	lr
 8018e14:	2000028c 	.word	0x2000028c

08018e18 <_close_r>:
 8018e18:	b538      	push	{r3, r4, r5, lr}
 8018e1a:	4d06      	ldr	r5, [pc, #24]	; (8018e34 <_close_r+0x1c>)
 8018e1c:	2300      	movs	r3, #0
 8018e1e:	4604      	mov	r4, r0
 8018e20:	4608      	mov	r0, r1
 8018e22:	602b      	str	r3, [r5, #0]
 8018e24:	f7ea f997 	bl	8003156 <_close>
 8018e28:	1c43      	adds	r3, r0, #1
 8018e2a:	d102      	bne.n	8018e32 <_close_r+0x1a>
 8018e2c:	682b      	ldr	r3, [r5, #0]
 8018e2e:	b103      	cbz	r3, 8018e32 <_close_r+0x1a>
 8018e30:	6023      	str	r3, [r4, #0]
 8018e32:	bd38      	pop	{r3, r4, r5, pc}
 8018e34:	20008484 	.word	0x20008484

08018e38 <_reclaim_reent>:
 8018e38:	4b29      	ldr	r3, [pc, #164]	; (8018ee0 <_reclaim_reent+0xa8>)
 8018e3a:	681b      	ldr	r3, [r3, #0]
 8018e3c:	4283      	cmp	r3, r0
 8018e3e:	b570      	push	{r4, r5, r6, lr}
 8018e40:	4604      	mov	r4, r0
 8018e42:	d04b      	beq.n	8018edc <_reclaim_reent+0xa4>
 8018e44:	69c3      	ldr	r3, [r0, #28]
 8018e46:	b143      	cbz	r3, 8018e5a <_reclaim_reent+0x22>
 8018e48:	68db      	ldr	r3, [r3, #12]
 8018e4a:	2b00      	cmp	r3, #0
 8018e4c:	d144      	bne.n	8018ed8 <_reclaim_reent+0xa0>
 8018e4e:	69e3      	ldr	r3, [r4, #28]
 8018e50:	6819      	ldr	r1, [r3, #0]
 8018e52:	b111      	cbz	r1, 8018e5a <_reclaim_reent+0x22>
 8018e54:	4620      	mov	r0, r4
 8018e56:	f000 ff45 	bl	8019ce4 <_free_r>
 8018e5a:	6961      	ldr	r1, [r4, #20]
 8018e5c:	b111      	cbz	r1, 8018e64 <_reclaim_reent+0x2c>
 8018e5e:	4620      	mov	r0, r4
 8018e60:	f000 ff40 	bl	8019ce4 <_free_r>
 8018e64:	69e1      	ldr	r1, [r4, #28]
 8018e66:	b111      	cbz	r1, 8018e6e <_reclaim_reent+0x36>
 8018e68:	4620      	mov	r0, r4
 8018e6a:	f000 ff3b 	bl	8019ce4 <_free_r>
 8018e6e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018e70:	b111      	cbz	r1, 8018e78 <_reclaim_reent+0x40>
 8018e72:	4620      	mov	r0, r4
 8018e74:	f000 ff36 	bl	8019ce4 <_free_r>
 8018e78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018e7a:	b111      	cbz	r1, 8018e82 <_reclaim_reent+0x4a>
 8018e7c:	4620      	mov	r0, r4
 8018e7e:	f000 ff31 	bl	8019ce4 <_free_r>
 8018e82:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018e84:	b111      	cbz	r1, 8018e8c <_reclaim_reent+0x54>
 8018e86:	4620      	mov	r0, r4
 8018e88:	f000 ff2c 	bl	8019ce4 <_free_r>
 8018e8c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8018e8e:	b111      	cbz	r1, 8018e96 <_reclaim_reent+0x5e>
 8018e90:	4620      	mov	r0, r4
 8018e92:	f000 ff27 	bl	8019ce4 <_free_r>
 8018e96:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8018e98:	b111      	cbz	r1, 8018ea0 <_reclaim_reent+0x68>
 8018e9a:	4620      	mov	r0, r4
 8018e9c:	f000 ff22 	bl	8019ce4 <_free_r>
 8018ea0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8018ea2:	b111      	cbz	r1, 8018eaa <_reclaim_reent+0x72>
 8018ea4:	4620      	mov	r0, r4
 8018ea6:	f000 ff1d 	bl	8019ce4 <_free_r>
 8018eaa:	6a23      	ldr	r3, [r4, #32]
 8018eac:	b1b3      	cbz	r3, 8018edc <_reclaim_reent+0xa4>
 8018eae:	4620      	mov	r0, r4
 8018eb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018eb4:	4718      	bx	r3
 8018eb6:	5949      	ldr	r1, [r1, r5]
 8018eb8:	b941      	cbnz	r1, 8018ecc <_reclaim_reent+0x94>
 8018eba:	3504      	adds	r5, #4
 8018ebc:	69e3      	ldr	r3, [r4, #28]
 8018ebe:	2d80      	cmp	r5, #128	; 0x80
 8018ec0:	68d9      	ldr	r1, [r3, #12]
 8018ec2:	d1f8      	bne.n	8018eb6 <_reclaim_reent+0x7e>
 8018ec4:	4620      	mov	r0, r4
 8018ec6:	f000 ff0d 	bl	8019ce4 <_free_r>
 8018eca:	e7c0      	b.n	8018e4e <_reclaim_reent+0x16>
 8018ecc:	680e      	ldr	r6, [r1, #0]
 8018ece:	4620      	mov	r0, r4
 8018ed0:	f000 ff08 	bl	8019ce4 <_free_r>
 8018ed4:	4631      	mov	r1, r6
 8018ed6:	e7ef      	b.n	8018eb8 <_reclaim_reent+0x80>
 8018ed8:	2500      	movs	r5, #0
 8018eda:	e7ef      	b.n	8018ebc <_reclaim_reent+0x84>
 8018edc:	bd70      	pop	{r4, r5, r6, pc}
 8018ede:	bf00      	nop
 8018ee0:	20000198 	.word	0x20000198

08018ee4 <_lseek_r>:
 8018ee4:	b538      	push	{r3, r4, r5, lr}
 8018ee6:	4d07      	ldr	r5, [pc, #28]	; (8018f04 <_lseek_r+0x20>)
 8018ee8:	4604      	mov	r4, r0
 8018eea:	4608      	mov	r0, r1
 8018eec:	4611      	mov	r1, r2
 8018eee:	2200      	movs	r2, #0
 8018ef0:	602a      	str	r2, [r5, #0]
 8018ef2:	461a      	mov	r2, r3
 8018ef4:	f7ea f956 	bl	80031a4 <_lseek>
 8018ef8:	1c43      	adds	r3, r0, #1
 8018efa:	d102      	bne.n	8018f02 <_lseek_r+0x1e>
 8018efc:	682b      	ldr	r3, [r5, #0]
 8018efe:	b103      	cbz	r3, 8018f02 <_lseek_r+0x1e>
 8018f00:	6023      	str	r3, [r4, #0]
 8018f02:	bd38      	pop	{r3, r4, r5, pc}
 8018f04:	20008484 	.word	0x20008484

08018f08 <_read_r>:
 8018f08:	b538      	push	{r3, r4, r5, lr}
 8018f0a:	4d07      	ldr	r5, [pc, #28]	; (8018f28 <_read_r+0x20>)
 8018f0c:	4604      	mov	r4, r0
 8018f0e:	4608      	mov	r0, r1
 8018f10:	4611      	mov	r1, r2
 8018f12:	2200      	movs	r2, #0
 8018f14:	602a      	str	r2, [r5, #0]
 8018f16:	461a      	mov	r2, r3
 8018f18:	f7ea f8e4 	bl	80030e4 <_read>
 8018f1c:	1c43      	adds	r3, r0, #1
 8018f1e:	d102      	bne.n	8018f26 <_read_r+0x1e>
 8018f20:	682b      	ldr	r3, [r5, #0]
 8018f22:	b103      	cbz	r3, 8018f26 <_read_r+0x1e>
 8018f24:	6023      	str	r3, [r4, #0]
 8018f26:	bd38      	pop	{r3, r4, r5, pc}
 8018f28:	20008484 	.word	0x20008484

08018f2c <_sbrk_r>:
 8018f2c:	b538      	push	{r3, r4, r5, lr}
 8018f2e:	4d06      	ldr	r5, [pc, #24]	; (8018f48 <_sbrk_r+0x1c>)
 8018f30:	2300      	movs	r3, #0
 8018f32:	4604      	mov	r4, r0
 8018f34:	4608      	mov	r0, r1
 8018f36:	602b      	str	r3, [r5, #0]
 8018f38:	f7ea f942 	bl	80031c0 <_sbrk>
 8018f3c:	1c43      	adds	r3, r0, #1
 8018f3e:	d102      	bne.n	8018f46 <_sbrk_r+0x1a>
 8018f40:	682b      	ldr	r3, [r5, #0]
 8018f42:	b103      	cbz	r3, 8018f46 <_sbrk_r+0x1a>
 8018f44:	6023      	str	r3, [r4, #0]
 8018f46:	bd38      	pop	{r3, r4, r5, pc}
 8018f48:	20008484 	.word	0x20008484

08018f4c <_write_r>:
 8018f4c:	b538      	push	{r3, r4, r5, lr}
 8018f4e:	4d07      	ldr	r5, [pc, #28]	; (8018f6c <_write_r+0x20>)
 8018f50:	4604      	mov	r4, r0
 8018f52:	4608      	mov	r0, r1
 8018f54:	4611      	mov	r1, r2
 8018f56:	2200      	movs	r2, #0
 8018f58:	602a      	str	r2, [r5, #0]
 8018f5a:	461a      	mov	r2, r3
 8018f5c:	f7ea f8df 	bl	800311e <_write>
 8018f60:	1c43      	adds	r3, r0, #1
 8018f62:	d102      	bne.n	8018f6a <_write_r+0x1e>
 8018f64:	682b      	ldr	r3, [r5, #0]
 8018f66:	b103      	cbz	r3, 8018f6a <_write_r+0x1e>
 8018f68:	6023      	str	r3, [r4, #0]
 8018f6a:	bd38      	pop	{r3, r4, r5, pc}
 8018f6c:	20008484 	.word	0x20008484

08018f70 <__errno>:
 8018f70:	4b01      	ldr	r3, [pc, #4]	; (8018f78 <__errno+0x8>)
 8018f72:	6818      	ldr	r0, [r3, #0]
 8018f74:	4770      	bx	lr
 8018f76:	bf00      	nop
 8018f78:	20000198 	.word	0x20000198

08018f7c <__libc_init_array>:
 8018f7c:	b570      	push	{r4, r5, r6, lr}
 8018f7e:	4d0d      	ldr	r5, [pc, #52]	; (8018fb4 <__libc_init_array+0x38>)
 8018f80:	4c0d      	ldr	r4, [pc, #52]	; (8018fb8 <__libc_init_array+0x3c>)
 8018f82:	1b64      	subs	r4, r4, r5
 8018f84:	10a4      	asrs	r4, r4, #2
 8018f86:	2600      	movs	r6, #0
 8018f88:	42a6      	cmp	r6, r4
 8018f8a:	d109      	bne.n	8018fa0 <__libc_init_array+0x24>
 8018f8c:	4d0b      	ldr	r5, [pc, #44]	; (8018fbc <__libc_init_array+0x40>)
 8018f8e:	4c0c      	ldr	r4, [pc, #48]	; (8018fc0 <__libc_init_array+0x44>)
 8018f90:	f003 fe6c 	bl	801cc6c <_init>
 8018f94:	1b64      	subs	r4, r4, r5
 8018f96:	10a4      	asrs	r4, r4, #2
 8018f98:	2600      	movs	r6, #0
 8018f9a:	42a6      	cmp	r6, r4
 8018f9c:	d105      	bne.n	8018faa <__libc_init_array+0x2e>
 8018f9e:	bd70      	pop	{r4, r5, r6, pc}
 8018fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8018fa4:	4798      	blx	r3
 8018fa6:	3601      	adds	r6, #1
 8018fa8:	e7ee      	b.n	8018f88 <__libc_init_array+0xc>
 8018faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8018fae:	4798      	blx	r3
 8018fb0:	3601      	adds	r6, #1
 8018fb2:	e7f2      	b.n	8018f9a <__libc_init_array+0x1e>
 8018fb4:	0801debc 	.word	0x0801debc
 8018fb8:	0801debc 	.word	0x0801debc
 8018fbc:	0801debc 	.word	0x0801debc
 8018fc0:	0801dec0 	.word	0x0801dec0

08018fc4 <__retarget_lock_acquire_recursive>:
 8018fc4:	4770      	bx	lr

08018fc6 <__retarget_lock_release_recursive>:
 8018fc6:	4770      	bx	lr

08018fc8 <memcpy>:
 8018fc8:	440a      	add	r2, r1
 8018fca:	4291      	cmp	r1, r2
 8018fcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8018fd0:	d100      	bne.n	8018fd4 <memcpy+0xc>
 8018fd2:	4770      	bx	lr
 8018fd4:	b510      	push	{r4, lr}
 8018fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018fda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018fde:	4291      	cmp	r1, r2
 8018fe0:	d1f9      	bne.n	8018fd6 <memcpy+0xe>
 8018fe2:	bd10      	pop	{r4, pc}

08018fe4 <nanf>:
 8018fe4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8018fec <nanf+0x8>
 8018fe8:	4770      	bx	lr
 8018fea:	bf00      	nop
 8018fec:	7fc00000 	.word	0x7fc00000

08018ff0 <quorem>:
 8018ff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ff4:	6903      	ldr	r3, [r0, #16]
 8018ff6:	690c      	ldr	r4, [r1, #16]
 8018ff8:	42a3      	cmp	r3, r4
 8018ffa:	4607      	mov	r7, r0
 8018ffc:	db7e      	blt.n	80190fc <quorem+0x10c>
 8018ffe:	3c01      	subs	r4, #1
 8019000:	f101 0814 	add.w	r8, r1, #20
 8019004:	f100 0514 	add.w	r5, r0, #20
 8019008:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801900c:	9301      	str	r3, [sp, #4]
 801900e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8019012:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019016:	3301      	adds	r3, #1
 8019018:	429a      	cmp	r2, r3
 801901a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801901e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8019022:	fbb2 f6f3 	udiv	r6, r2, r3
 8019026:	d331      	bcc.n	801908c <quorem+0x9c>
 8019028:	f04f 0e00 	mov.w	lr, #0
 801902c:	4640      	mov	r0, r8
 801902e:	46ac      	mov	ip, r5
 8019030:	46f2      	mov	sl, lr
 8019032:	f850 2b04 	ldr.w	r2, [r0], #4
 8019036:	b293      	uxth	r3, r2
 8019038:	fb06 e303 	mla	r3, r6, r3, lr
 801903c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8019040:	0c1a      	lsrs	r2, r3, #16
 8019042:	b29b      	uxth	r3, r3
 8019044:	ebaa 0303 	sub.w	r3, sl, r3
 8019048:	f8dc a000 	ldr.w	sl, [ip]
 801904c:	fa13 f38a 	uxtah	r3, r3, sl
 8019050:	fb06 220e 	mla	r2, r6, lr, r2
 8019054:	9300      	str	r3, [sp, #0]
 8019056:	9b00      	ldr	r3, [sp, #0]
 8019058:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801905c:	b292      	uxth	r2, r2
 801905e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8019062:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8019066:	f8bd 3000 	ldrh.w	r3, [sp]
 801906a:	4581      	cmp	r9, r0
 801906c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019070:	f84c 3b04 	str.w	r3, [ip], #4
 8019074:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8019078:	d2db      	bcs.n	8019032 <quorem+0x42>
 801907a:	f855 300b 	ldr.w	r3, [r5, fp]
 801907e:	b92b      	cbnz	r3, 801908c <quorem+0x9c>
 8019080:	9b01      	ldr	r3, [sp, #4]
 8019082:	3b04      	subs	r3, #4
 8019084:	429d      	cmp	r5, r3
 8019086:	461a      	mov	r2, r3
 8019088:	d32c      	bcc.n	80190e4 <quorem+0xf4>
 801908a:	613c      	str	r4, [r7, #16]
 801908c:	4638      	mov	r0, r7
 801908e:	f001 f93b 	bl	801a308 <__mcmp>
 8019092:	2800      	cmp	r0, #0
 8019094:	db22      	blt.n	80190dc <quorem+0xec>
 8019096:	3601      	adds	r6, #1
 8019098:	4629      	mov	r1, r5
 801909a:	2000      	movs	r0, #0
 801909c:	f858 2b04 	ldr.w	r2, [r8], #4
 80190a0:	f8d1 c000 	ldr.w	ip, [r1]
 80190a4:	b293      	uxth	r3, r2
 80190a6:	1ac3      	subs	r3, r0, r3
 80190a8:	0c12      	lsrs	r2, r2, #16
 80190aa:	fa13 f38c 	uxtah	r3, r3, ip
 80190ae:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80190b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80190b6:	b29b      	uxth	r3, r3
 80190b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80190bc:	45c1      	cmp	r9, r8
 80190be:	f841 3b04 	str.w	r3, [r1], #4
 80190c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80190c6:	d2e9      	bcs.n	801909c <quorem+0xac>
 80190c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80190cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80190d0:	b922      	cbnz	r2, 80190dc <quorem+0xec>
 80190d2:	3b04      	subs	r3, #4
 80190d4:	429d      	cmp	r5, r3
 80190d6:	461a      	mov	r2, r3
 80190d8:	d30a      	bcc.n	80190f0 <quorem+0x100>
 80190da:	613c      	str	r4, [r7, #16]
 80190dc:	4630      	mov	r0, r6
 80190de:	b003      	add	sp, #12
 80190e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190e4:	6812      	ldr	r2, [r2, #0]
 80190e6:	3b04      	subs	r3, #4
 80190e8:	2a00      	cmp	r2, #0
 80190ea:	d1ce      	bne.n	801908a <quorem+0x9a>
 80190ec:	3c01      	subs	r4, #1
 80190ee:	e7c9      	b.n	8019084 <quorem+0x94>
 80190f0:	6812      	ldr	r2, [r2, #0]
 80190f2:	3b04      	subs	r3, #4
 80190f4:	2a00      	cmp	r2, #0
 80190f6:	d1f0      	bne.n	80190da <quorem+0xea>
 80190f8:	3c01      	subs	r4, #1
 80190fa:	e7eb      	b.n	80190d4 <quorem+0xe4>
 80190fc:	2000      	movs	r0, #0
 80190fe:	e7ee      	b.n	80190de <quorem+0xee>

08019100 <_dtoa_r>:
 8019100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019104:	ed2d 8b04 	vpush	{d8-d9}
 8019108:	69c5      	ldr	r5, [r0, #28]
 801910a:	b093      	sub	sp, #76	; 0x4c
 801910c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8019110:	ec57 6b10 	vmov	r6, r7, d0
 8019114:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8019118:	9107      	str	r1, [sp, #28]
 801911a:	4604      	mov	r4, r0
 801911c:	920a      	str	r2, [sp, #40]	; 0x28
 801911e:	930d      	str	r3, [sp, #52]	; 0x34
 8019120:	b975      	cbnz	r5, 8019140 <_dtoa_r+0x40>
 8019122:	2010      	movs	r0, #16
 8019124:	f7fe fce6 	bl	8017af4 <malloc>
 8019128:	4602      	mov	r2, r0
 801912a:	61e0      	str	r0, [r4, #28]
 801912c:	b920      	cbnz	r0, 8019138 <_dtoa_r+0x38>
 801912e:	4bae      	ldr	r3, [pc, #696]	; (80193e8 <_dtoa_r+0x2e8>)
 8019130:	21ef      	movs	r1, #239	; 0xef
 8019132:	48ae      	ldr	r0, [pc, #696]	; (80193ec <_dtoa_r+0x2ec>)
 8019134:	f003 f8fc 	bl	801c330 <__assert_func>
 8019138:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801913c:	6005      	str	r5, [r0, #0]
 801913e:	60c5      	str	r5, [r0, #12]
 8019140:	69e3      	ldr	r3, [r4, #28]
 8019142:	6819      	ldr	r1, [r3, #0]
 8019144:	b151      	cbz	r1, 801915c <_dtoa_r+0x5c>
 8019146:	685a      	ldr	r2, [r3, #4]
 8019148:	604a      	str	r2, [r1, #4]
 801914a:	2301      	movs	r3, #1
 801914c:	4093      	lsls	r3, r2
 801914e:	608b      	str	r3, [r1, #8]
 8019150:	4620      	mov	r0, r4
 8019152:	f000 fe53 	bl	8019dfc <_Bfree>
 8019156:	69e3      	ldr	r3, [r4, #28]
 8019158:	2200      	movs	r2, #0
 801915a:	601a      	str	r2, [r3, #0]
 801915c:	1e3b      	subs	r3, r7, #0
 801915e:	bfbb      	ittet	lt
 8019160:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8019164:	9303      	strlt	r3, [sp, #12]
 8019166:	2300      	movge	r3, #0
 8019168:	2201      	movlt	r2, #1
 801916a:	bfac      	ite	ge
 801916c:	f8c8 3000 	strge.w	r3, [r8]
 8019170:	f8c8 2000 	strlt.w	r2, [r8]
 8019174:	4b9e      	ldr	r3, [pc, #632]	; (80193f0 <_dtoa_r+0x2f0>)
 8019176:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801917a:	ea33 0308 	bics.w	r3, r3, r8
 801917e:	d11b      	bne.n	80191b8 <_dtoa_r+0xb8>
 8019180:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019182:	f242 730f 	movw	r3, #9999	; 0x270f
 8019186:	6013      	str	r3, [r2, #0]
 8019188:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801918c:	4333      	orrs	r3, r6
 801918e:	f000 8593 	beq.w	8019cb8 <_dtoa_r+0xbb8>
 8019192:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019194:	b963      	cbnz	r3, 80191b0 <_dtoa_r+0xb0>
 8019196:	4b97      	ldr	r3, [pc, #604]	; (80193f4 <_dtoa_r+0x2f4>)
 8019198:	e027      	b.n	80191ea <_dtoa_r+0xea>
 801919a:	4b97      	ldr	r3, [pc, #604]	; (80193f8 <_dtoa_r+0x2f8>)
 801919c:	9300      	str	r3, [sp, #0]
 801919e:	3308      	adds	r3, #8
 80191a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80191a2:	6013      	str	r3, [r2, #0]
 80191a4:	9800      	ldr	r0, [sp, #0]
 80191a6:	b013      	add	sp, #76	; 0x4c
 80191a8:	ecbd 8b04 	vpop	{d8-d9}
 80191ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191b0:	4b90      	ldr	r3, [pc, #576]	; (80193f4 <_dtoa_r+0x2f4>)
 80191b2:	9300      	str	r3, [sp, #0]
 80191b4:	3303      	adds	r3, #3
 80191b6:	e7f3      	b.n	80191a0 <_dtoa_r+0xa0>
 80191b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80191bc:	2200      	movs	r2, #0
 80191be:	ec51 0b17 	vmov	r0, r1, d7
 80191c2:	eeb0 8a47 	vmov.f32	s16, s14
 80191c6:	eef0 8a67 	vmov.f32	s17, s15
 80191ca:	2300      	movs	r3, #0
 80191cc:	f7e7 fcac 	bl	8000b28 <__aeabi_dcmpeq>
 80191d0:	4681      	mov	r9, r0
 80191d2:	b160      	cbz	r0, 80191ee <_dtoa_r+0xee>
 80191d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80191d6:	2301      	movs	r3, #1
 80191d8:	6013      	str	r3, [r2, #0]
 80191da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80191dc:	2b00      	cmp	r3, #0
 80191de:	f000 8568 	beq.w	8019cb2 <_dtoa_r+0xbb2>
 80191e2:	4b86      	ldr	r3, [pc, #536]	; (80193fc <_dtoa_r+0x2fc>)
 80191e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80191e6:	6013      	str	r3, [r2, #0]
 80191e8:	3b01      	subs	r3, #1
 80191ea:	9300      	str	r3, [sp, #0]
 80191ec:	e7da      	b.n	80191a4 <_dtoa_r+0xa4>
 80191ee:	aa10      	add	r2, sp, #64	; 0x40
 80191f0:	a911      	add	r1, sp, #68	; 0x44
 80191f2:	4620      	mov	r0, r4
 80191f4:	eeb0 0a48 	vmov.f32	s0, s16
 80191f8:	eef0 0a68 	vmov.f32	s1, s17
 80191fc:	f001 f99a 	bl	801a534 <__d2b>
 8019200:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8019204:	4682      	mov	sl, r0
 8019206:	2d00      	cmp	r5, #0
 8019208:	d07f      	beq.n	801930a <_dtoa_r+0x20a>
 801920a:	ee18 3a90 	vmov	r3, s17
 801920e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019212:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8019216:	ec51 0b18 	vmov	r0, r1, d8
 801921a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801921e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8019222:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8019226:	4619      	mov	r1, r3
 8019228:	2200      	movs	r2, #0
 801922a:	4b75      	ldr	r3, [pc, #468]	; (8019400 <_dtoa_r+0x300>)
 801922c:	f7e7 f85c 	bl	80002e8 <__aeabi_dsub>
 8019230:	a367      	add	r3, pc, #412	; (adr r3, 80193d0 <_dtoa_r+0x2d0>)
 8019232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019236:	f7e7 fa0f 	bl	8000658 <__aeabi_dmul>
 801923a:	a367      	add	r3, pc, #412	; (adr r3, 80193d8 <_dtoa_r+0x2d8>)
 801923c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019240:	f7e7 f854 	bl	80002ec <__adddf3>
 8019244:	4606      	mov	r6, r0
 8019246:	4628      	mov	r0, r5
 8019248:	460f      	mov	r7, r1
 801924a:	f7e7 f99b 	bl	8000584 <__aeabi_i2d>
 801924e:	a364      	add	r3, pc, #400	; (adr r3, 80193e0 <_dtoa_r+0x2e0>)
 8019250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019254:	f7e7 fa00 	bl	8000658 <__aeabi_dmul>
 8019258:	4602      	mov	r2, r0
 801925a:	460b      	mov	r3, r1
 801925c:	4630      	mov	r0, r6
 801925e:	4639      	mov	r1, r7
 8019260:	f7e7 f844 	bl	80002ec <__adddf3>
 8019264:	4606      	mov	r6, r0
 8019266:	460f      	mov	r7, r1
 8019268:	f7e7 fca6 	bl	8000bb8 <__aeabi_d2iz>
 801926c:	2200      	movs	r2, #0
 801926e:	4683      	mov	fp, r0
 8019270:	2300      	movs	r3, #0
 8019272:	4630      	mov	r0, r6
 8019274:	4639      	mov	r1, r7
 8019276:	f7e7 fc61 	bl	8000b3c <__aeabi_dcmplt>
 801927a:	b148      	cbz	r0, 8019290 <_dtoa_r+0x190>
 801927c:	4658      	mov	r0, fp
 801927e:	f7e7 f981 	bl	8000584 <__aeabi_i2d>
 8019282:	4632      	mov	r2, r6
 8019284:	463b      	mov	r3, r7
 8019286:	f7e7 fc4f 	bl	8000b28 <__aeabi_dcmpeq>
 801928a:	b908      	cbnz	r0, 8019290 <_dtoa_r+0x190>
 801928c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019290:	f1bb 0f16 	cmp.w	fp, #22
 8019294:	d857      	bhi.n	8019346 <_dtoa_r+0x246>
 8019296:	4b5b      	ldr	r3, [pc, #364]	; (8019404 <_dtoa_r+0x304>)
 8019298:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801929c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192a0:	ec51 0b18 	vmov	r0, r1, d8
 80192a4:	f7e7 fc4a 	bl	8000b3c <__aeabi_dcmplt>
 80192a8:	2800      	cmp	r0, #0
 80192aa:	d04e      	beq.n	801934a <_dtoa_r+0x24a>
 80192ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80192b0:	2300      	movs	r3, #0
 80192b2:	930c      	str	r3, [sp, #48]	; 0x30
 80192b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80192b6:	1b5b      	subs	r3, r3, r5
 80192b8:	1e5a      	subs	r2, r3, #1
 80192ba:	bf45      	ittet	mi
 80192bc:	f1c3 0301 	rsbmi	r3, r3, #1
 80192c0:	9305      	strmi	r3, [sp, #20]
 80192c2:	2300      	movpl	r3, #0
 80192c4:	2300      	movmi	r3, #0
 80192c6:	9206      	str	r2, [sp, #24]
 80192c8:	bf54      	ite	pl
 80192ca:	9305      	strpl	r3, [sp, #20]
 80192cc:	9306      	strmi	r3, [sp, #24]
 80192ce:	f1bb 0f00 	cmp.w	fp, #0
 80192d2:	db3c      	blt.n	801934e <_dtoa_r+0x24e>
 80192d4:	9b06      	ldr	r3, [sp, #24]
 80192d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80192da:	445b      	add	r3, fp
 80192dc:	9306      	str	r3, [sp, #24]
 80192de:	2300      	movs	r3, #0
 80192e0:	9308      	str	r3, [sp, #32]
 80192e2:	9b07      	ldr	r3, [sp, #28]
 80192e4:	2b09      	cmp	r3, #9
 80192e6:	d868      	bhi.n	80193ba <_dtoa_r+0x2ba>
 80192e8:	2b05      	cmp	r3, #5
 80192ea:	bfc4      	itt	gt
 80192ec:	3b04      	subgt	r3, #4
 80192ee:	9307      	strgt	r3, [sp, #28]
 80192f0:	9b07      	ldr	r3, [sp, #28]
 80192f2:	f1a3 0302 	sub.w	r3, r3, #2
 80192f6:	bfcc      	ite	gt
 80192f8:	2500      	movgt	r5, #0
 80192fa:	2501      	movle	r5, #1
 80192fc:	2b03      	cmp	r3, #3
 80192fe:	f200 8085 	bhi.w	801940c <_dtoa_r+0x30c>
 8019302:	e8df f003 	tbb	[pc, r3]
 8019306:	3b2e      	.short	0x3b2e
 8019308:	5839      	.short	0x5839
 801930a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801930e:	441d      	add	r5, r3
 8019310:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8019314:	2b20      	cmp	r3, #32
 8019316:	bfc1      	itttt	gt
 8019318:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801931c:	fa08 f803 	lslgt.w	r8, r8, r3
 8019320:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8019324:	fa26 f303 	lsrgt.w	r3, r6, r3
 8019328:	bfd6      	itet	le
 801932a:	f1c3 0320 	rsble	r3, r3, #32
 801932e:	ea48 0003 	orrgt.w	r0, r8, r3
 8019332:	fa06 f003 	lslle.w	r0, r6, r3
 8019336:	f7e7 f915 	bl	8000564 <__aeabi_ui2d>
 801933a:	2201      	movs	r2, #1
 801933c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8019340:	3d01      	subs	r5, #1
 8019342:	920e      	str	r2, [sp, #56]	; 0x38
 8019344:	e76f      	b.n	8019226 <_dtoa_r+0x126>
 8019346:	2301      	movs	r3, #1
 8019348:	e7b3      	b.n	80192b2 <_dtoa_r+0x1b2>
 801934a:	900c      	str	r0, [sp, #48]	; 0x30
 801934c:	e7b2      	b.n	80192b4 <_dtoa_r+0x1b4>
 801934e:	9b05      	ldr	r3, [sp, #20]
 8019350:	eba3 030b 	sub.w	r3, r3, fp
 8019354:	9305      	str	r3, [sp, #20]
 8019356:	f1cb 0300 	rsb	r3, fp, #0
 801935a:	9308      	str	r3, [sp, #32]
 801935c:	2300      	movs	r3, #0
 801935e:	930b      	str	r3, [sp, #44]	; 0x2c
 8019360:	e7bf      	b.n	80192e2 <_dtoa_r+0x1e2>
 8019362:	2300      	movs	r3, #0
 8019364:	9309      	str	r3, [sp, #36]	; 0x24
 8019366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019368:	2b00      	cmp	r3, #0
 801936a:	dc52      	bgt.n	8019412 <_dtoa_r+0x312>
 801936c:	2301      	movs	r3, #1
 801936e:	9301      	str	r3, [sp, #4]
 8019370:	9304      	str	r3, [sp, #16]
 8019372:	461a      	mov	r2, r3
 8019374:	920a      	str	r2, [sp, #40]	; 0x28
 8019376:	e00b      	b.n	8019390 <_dtoa_r+0x290>
 8019378:	2301      	movs	r3, #1
 801937a:	e7f3      	b.n	8019364 <_dtoa_r+0x264>
 801937c:	2300      	movs	r3, #0
 801937e:	9309      	str	r3, [sp, #36]	; 0x24
 8019380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019382:	445b      	add	r3, fp
 8019384:	9301      	str	r3, [sp, #4]
 8019386:	3301      	adds	r3, #1
 8019388:	2b01      	cmp	r3, #1
 801938a:	9304      	str	r3, [sp, #16]
 801938c:	bfb8      	it	lt
 801938e:	2301      	movlt	r3, #1
 8019390:	69e0      	ldr	r0, [r4, #28]
 8019392:	2100      	movs	r1, #0
 8019394:	2204      	movs	r2, #4
 8019396:	f102 0614 	add.w	r6, r2, #20
 801939a:	429e      	cmp	r6, r3
 801939c:	d93d      	bls.n	801941a <_dtoa_r+0x31a>
 801939e:	6041      	str	r1, [r0, #4]
 80193a0:	4620      	mov	r0, r4
 80193a2:	f000 fceb 	bl	8019d7c <_Balloc>
 80193a6:	9000      	str	r0, [sp, #0]
 80193a8:	2800      	cmp	r0, #0
 80193aa:	d139      	bne.n	8019420 <_dtoa_r+0x320>
 80193ac:	4b16      	ldr	r3, [pc, #88]	; (8019408 <_dtoa_r+0x308>)
 80193ae:	4602      	mov	r2, r0
 80193b0:	f240 11af 	movw	r1, #431	; 0x1af
 80193b4:	e6bd      	b.n	8019132 <_dtoa_r+0x32>
 80193b6:	2301      	movs	r3, #1
 80193b8:	e7e1      	b.n	801937e <_dtoa_r+0x27e>
 80193ba:	2501      	movs	r5, #1
 80193bc:	2300      	movs	r3, #0
 80193be:	9307      	str	r3, [sp, #28]
 80193c0:	9509      	str	r5, [sp, #36]	; 0x24
 80193c2:	f04f 33ff 	mov.w	r3, #4294967295
 80193c6:	9301      	str	r3, [sp, #4]
 80193c8:	9304      	str	r3, [sp, #16]
 80193ca:	2200      	movs	r2, #0
 80193cc:	2312      	movs	r3, #18
 80193ce:	e7d1      	b.n	8019374 <_dtoa_r+0x274>
 80193d0:	636f4361 	.word	0x636f4361
 80193d4:	3fd287a7 	.word	0x3fd287a7
 80193d8:	8b60c8b3 	.word	0x8b60c8b3
 80193dc:	3fc68a28 	.word	0x3fc68a28
 80193e0:	509f79fb 	.word	0x509f79fb
 80193e4:	3fd34413 	.word	0x3fd34413
 80193e8:	0801dab4 	.word	0x0801dab4
 80193ec:	0801dacb 	.word	0x0801dacb
 80193f0:	7ff00000 	.word	0x7ff00000
 80193f4:	0801dab0 	.word	0x0801dab0
 80193f8:	0801daa7 	.word	0x0801daa7
 80193fc:	0801de09 	.word	0x0801de09
 8019400:	3ff80000 	.word	0x3ff80000
 8019404:	0801dbb8 	.word	0x0801dbb8
 8019408:	0801db23 	.word	0x0801db23
 801940c:	2301      	movs	r3, #1
 801940e:	9309      	str	r3, [sp, #36]	; 0x24
 8019410:	e7d7      	b.n	80193c2 <_dtoa_r+0x2c2>
 8019412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019414:	9301      	str	r3, [sp, #4]
 8019416:	9304      	str	r3, [sp, #16]
 8019418:	e7ba      	b.n	8019390 <_dtoa_r+0x290>
 801941a:	3101      	adds	r1, #1
 801941c:	0052      	lsls	r2, r2, #1
 801941e:	e7ba      	b.n	8019396 <_dtoa_r+0x296>
 8019420:	69e3      	ldr	r3, [r4, #28]
 8019422:	9a00      	ldr	r2, [sp, #0]
 8019424:	601a      	str	r2, [r3, #0]
 8019426:	9b04      	ldr	r3, [sp, #16]
 8019428:	2b0e      	cmp	r3, #14
 801942a:	f200 80a8 	bhi.w	801957e <_dtoa_r+0x47e>
 801942e:	2d00      	cmp	r5, #0
 8019430:	f000 80a5 	beq.w	801957e <_dtoa_r+0x47e>
 8019434:	f1bb 0f00 	cmp.w	fp, #0
 8019438:	dd38      	ble.n	80194ac <_dtoa_r+0x3ac>
 801943a:	4bc0      	ldr	r3, [pc, #768]	; (801973c <_dtoa_r+0x63c>)
 801943c:	f00b 020f 	and.w	r2, fp, #15
 8019440:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019444:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8019448:	e9d3 6700 	ldrd	r6, r7, [r3]
 801944c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8019450:	d019      	beq.n	8019486 <_dtoa_r+0x386>
 8019452:	4bbb      	ldr	r3, [pc, #748]	; (8019740 <_dtoa_r+0x640>)
 8019454:	ec51 0b18 	vmov	r0, r1, d8
 8019458:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801945c:	f7e7 fa26 	bl	80008ac <__aeabi_ddiv>
 8019460:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019464:	f008 080f 	and.w	r8, r8, #15
 8019468:	2503      	movs	r5, #3
 801946a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8019740 <_dtoa_r+0x640>
 801946e:	f1b8 0f00 	cmp.w	r8, #0
 8019472:	d10a      	bne.n	801948a <_dtoa_r+0x38a>
 8019474:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019478:	4632      	mov	r2, r6
 801947a:	463b      	mov	r3, r7
 801947c:	f7e7 fa16 	bl	80008ac <__aeabi_ddiv>
 8019480:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019484:	e02b      	b.n	80194de <_dtoa_r+0x3de>
 8019486:	2502      	movs	r5, #2
 8019488:	e7ef      	b.n	801946a <_dtoa_r+0x36a>
 801948a:	f018 0f01 	tst.w	r8, #1
 801948e:	d008      	beq.n	80194a2 <_dtoa_r+0x3a2>
 8019490:	4630      	mov	r0, r6
 8019492:	4639      	mov	r1, r7
 8019494:	e9d9 2300 	ldrd	r2, r3, [r9]
 8019498:	f7e7 f8de 	bl	8000658 <__aeabi_dmul>
 801949c:	3501      	adds	r5, #1
 801949e:	4606      	mov	r6, r0
 80194a0:	460f      	mov	r7, r1
 80194a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80194a6:	f109 0908 	add.w	r9, r9, #8
 80194aa:	e7e0      	b.n	801946e <_dtoa_r+0x36e>
 80194ac:	f000 809f 	beq.w	80195ee <_dtoa_r+0x4ee>
 80194b0:	f1cb 0600 	rsb	r6, fp, #0
 80194b4:	4ba1      	ldr	r3, [pc, #644]	; (801973c <_dtoa_r+0x63c>)
 80194b6:	4fa2      	ldr	r7, [pc, #648]	; (8019740 <_dtoa_r+0x640>)
 80194b8:	f006 020f 	and.w	r2, r6, #15
 80194bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80194c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194c4:	ec51 0b18 	vmov	r0, r1, d8
 80194c8:	f7e7 f8c6 	bl	8000658 <__aeabi_dmul>
 80194cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80194d0:	1136      	asrs	r6, r6, #4
 80194d2:	2300      	movs	r3, #0
 80194d4:	2502      	movs	r5, #2
 80194d6:	2e00      	cmp	r6, #0
 80194d8:	d17e      	bne.n	80195d8 <_dtoa_r+0x4d8>
 80194da:	2b00      	cmp	r3, #0
 80194dc:	d1d0      	bne.n	8019480 <_dtoa_r+0x380>
 80194de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80194e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80194e4:	2b00      	cmp	r3, #0
 80194e6:	f000 8084 	beq.w	80195f2 <_dtoa_r+0x4f2>
 80194ea:	4b96      	ldr	r3, [pc, #600]	; (8019744 <_dtoa_r+0x644>)
 80194ec:	2200      	movs	r2, #0
 80194ee:	4640      	mov	r0, r8
 80194f0:	4649      	mov	r1, r9
 80194f2:	f7e7 fb23 	bl	8000b3c <__aeabi_dcmplt>
 80194f6:	2800      	cmp	r0, #0
 80194f8:	d07b      	beq.n	80195f2 <_dtoa_r+0x4f2>
 80194fa:	9b04      	ldr	r3, [sp, #16]
 80194fc:	2b00      	cmp	r3, #0
 80194fe:	d078      	beq.n	80195f2 <_dtoa_r+0x4f2>
 8019500:	9b01      	ldr	r3, [sp, #4]
 8019502:	2b00      	cmp	r3, #0
 8019504:	dd39      	ble.n	801957a <_dtoa_r+0x47a>
 8019506:	4b90      	ldr	r3, [pc, #576]	; (8019748 <_dtoa_r+0x648>)
 8019508:	2200      	movs	r2, #0
 801950a:	4640      	mov	r0, r8
 801950c:	4649      	mov	r1, r9
 801950e:	f7e7 f8a3 	bl	8000658 <__aeabi_dmul>
 8019512:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019516:	9e01      	ldr	r6, [sp, #4]
 8019518:	f10b 37ff 	add.w	r7, fp, #4294967295
 801951c:	3501      	adds	r5, #1
 801951e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8019522:	4628      	mov	r0, r5
 8019524:	f7e7 f82e 	bl	8000584 <__aeabi_i2d>
 8019528:	4642      	mov	r2, r8
 801952a:	464b      	mov	r3, r9
 801952c:	f7e7 f894 	bl	8000658 <__aeabi_dmul>
 8019530:	4b86      	ldr	r3, [pc, #536]	; (801974c <_dtoa_r+0x64c>)
 8019532:	2200      	movs	r2, #0
 8019534:	f7e6 feda 	bl	80002ec <__adddf3>
 8019538:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801953c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019540:	9303      	str	r3, [sp, #12]
 8019542:	2e00      	cmp	r6, #0
 8019544:	d158      	bne.n	80195f8 <_dtoa_r+0x4f8>
 8019546:	4b82      	ldr	r3, [pc, #520]	; (8019750 <_dtoa_r+0x650>)
 8019548:	2200      	movs	r2, #0
 801954a:	4640      	mov	r0, r8
 801954c:	4649      	mov	r1, r9
 801954e:	f7e6 fecb 	bl	80002e8 <__aeabi_dsub>
 8019552:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019556:	4680      	mov	r8, r0
 8019558:	4689      	mov	r9, r1
 801955a:	f7e7 fb0d 	bl	8000b78 <__aeabi_dcmpgt>
 801955e:	2800      	cmp	r0, #0
 8019560:	f040 8296 	bne.w	8019a90 <_dtoa_r+0x990>
 8019564:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8019568:	4640      	mov	r0, r8
 801956a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801956e:	4649      	mov	r1, r9
 8019570:	f7e7 fae4 	bl	8000b3c <__aeabi_dcmplt>
 8019574:	2800      	cmp	r0, #0
 8019576:	f040 8289 	bne.w	8019a8c <_dtoa_r+0x98c>
 801957a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801957e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019580:	2b00      	cmp	r3, #0
 8019582:	f2c0 814e 	blt.w	8019822 <_dtoa_r+0x722>
 8019586:	f1bb 0f0e 	cmp.w	fp, #14
 801958a:	f300 814a 	bgt.w	8019822 <_dtoa_r+0x722>
 801958e:	4b6b      	ldr	r3, [pc, #428]	; (801973c <_dtoa_r+0x63c>)
 8019590:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8019594:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801959a:	2b00      	cmp	r3, #0
 801959c:	f280 80dc 	bge.w	8019758 <_dtoa_r+0x658>
 80195a0:	9b04      	ldr	r3, [sp, #16]
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	f300 80d8 	bgt.w	8019758 <_dtoa_r+0x658>
 80195a8:	f040 826f 	bne.w	8019a8a <_dtoa_r+0x98a>
 80195ac:	4b68      	ldr	r3, [pc, #416]	; (8019750 <_dtoa_r+0x650>)
 80195ae:	2200      	movs	r2, #0
 80195b0:	4640      	mov	r0, r8
 80195b2:	4649      	mov	r1, r9
 80195b4:	f7e7 f850 	bl	8000658 <__aeabi_dmul>
 80195b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80195bc:	f7e7 fad2 	bl	8000b64 <__aeabi_dcmpge>
 80195c0:	9e04      	ldr	r6, [sp, #16]
 80195c2:	4637      	mov	r7, r6
 80195c4:	2800      	cmp	r0, #0
 80195c6:	f040 8245 	bne.w	8019a54 <_dtoa_r+0x954>
 80195ca:	9d00      	ldr	r5, [sp, #0]
 80195cc:	2331      	movs	r3, #49	; 0x31
 80195ce:	f805 3b01 	strb.w	r3, [r5], #1
 80195d2:	f10b 0b01 	add.w	fp, fp, #1
 80195d6:	e241      	b.n	8019a5c <_dtoa_r+0x95c>
 80195d8:	07f2      	lsls	r2, r6, #31
 80195da:	d505      	bpl.n	80195e8 <_dtoa_r+0x4e8>
 80195dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80195e0:	f7e7 f83a 	bl	8000658 <__aeabi_dmul>
 80195e4:	3501      	adds	r5, #1
 80195e6:	2301      	movs	r3, #1
 80195e8:	1076      	asrs	r6, r6, #1
 80195ea:	3708      	adds	r7, #8
 80195ec:	e773      	b.n	80194d6 <_dtoa_r+0x3d6>
 80195ee:	2502      	movs	r5, #2
 80195f0:	e775      	b.n	80194de <_dtoa_r+0x3de>
 80195f2:	9e04      	ldr	r6, [sp, #16]
 80195f4:	465f      	mov	r7, fp
 80195f6:	e792      	b.n	801951e <_dtoa_r+0x41e>
 80195f8:	9900      	ldr	r1, [sp, #0]
 80195fa:	4b50      	ldr	r3, [pc, #320]	; (801973c <_dtoa_r+0x63c>)
 80195fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019600:	4431      	add	r1, r6
 8019602:	9102      	str	r1, [sp, #8]
 8019604:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019606:	eeb0 9a47 	vmov.f32	s18, s14
 801960a:	eef0 9a67 	vmov.f32	s19, s15
 801960e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8019612:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8019616:	2900      	cmp	r1, #0
 8019618:	d044      	beq.n	80196a4 <_dtoa_r+0x5a4>
 801961a:	494e      	ldr	r1, [pc, #312]	; (8019754 <_dtoa_r+0x654>)
 801961c:	2000      	movs	r0, #0
 801961e:	f7e7 f945 	bl	80008ac <__aeabi_ddiv>
 8019622:	ec53 2b19 	vmov	r2, r3, d9
 8019626:	f7e6 fe5f 	bl	80002e8 <__aeabi_dsub>
 801962a:	9d00      	ldr	r5, [sp, #0]
 801962c:	ec41 0b19 	vmov	d9, r0, r1
 8019630:	4649      	mov	r1, r9
 8019632:	4640      	mov	r0, r8
 8019634:	f7e7 fac0 	bl	8000bb8 <__aeabi_d2iz>
 8019638:	4606      	mov	r6, r0
 801963a:	f7e6 ffa3 	bl	8000584 <__aeabi_i2d>
 801963e:	4602      	mov	r2, r0
 8019640:	460b      	mov	r3, r1
 8019642:	4640      	mov	r0, r8
 8019644:	4649      	mov	r1, r9
 8019646:	f7e6 fe4f 	bl	80002e8 <__aeabi_dsub>
 801964a:	3630      	adds	r6, #48	; 0x30
 801964c:	f805 6b01 	strb.w	r6, [r5], #1
 8019650:	ec53 2b19 	vmov	r2, r3, d9
 8019654:	4680      	mov	r8, r0
 8019656:	4689      	mov	r9, r1
 8019658:	f7e7 fa70 	bl	8000b3c <__aeabi_dcmplt>
 801965c:	2800      	cmp	r0, #0
 801965e:	d164      	bne.n	801972a <_dtoa_r+0x62a>
 8019660:	4642      	mov	r2, r8
 8019662:	464b      	mov	r3, r9
 8019664:	4937      	ldr	r1, [pc, #220]	; (8019744 <_dtoa_r+0x644>)
 8019666:	2000      	movs	r0, #0
 8019668:	f7e6 fe3e 	bl	80002e8 <__aeabi_dsub>
 801966c:	ec53 2b19 	vmov	r2, r3, d9
 8019670:	f7e7 fa64 	bl	8000b3c <__aeabi_dcmplt>
 8019674:	2800      	cmp	r0, #0
 8019676:	f040 80b6 	bne.w	80197e6 <_dtoa_r+0x6e6>
 801967a:	9b02      	ldr	r3, [sp, #8]
 801967c:	429d      	cmp	r5, r3
 801967e:	f43f af7c 	beq.w	801957a <_dtoa_r+0x47a>
 8019682:	4b31      	ldr	r3, [pc, #196]	; (8019748 <_dtoa_r+0x648>)
 8019684:	ec51 0b19 	vmov	r0, r1, d9
 8019688:	2200      	movs	r2, #0
 801968a:	f7e6 ffe5 	bl	8000658 <__aeabi_dmul>
 801968e:	4b2e      	ldr	r3, [pc, #184]	; (8019748 <_dtoa_r+0x648>)
 8019690:	ec41 0b19 	vmov	d9, r0, r1
 8019694:	2200      	movs	r2, #0
 8019696:	4640      	mov	r0, r8
 8019698:	4649      	mov	r1, r9
 801969a:	f7e6 ffdd 	bl	8000658 <__aeabi_dmul>
 801969e:	4680      	mov	r8, r0
 80196a0:	4689      	mov	r9, r1
 80196a2:	e7c5      	b.n	8019630 <_dtoa_r+0x530>
 80196a4:	ec51 0b17 	vmov	r0, r1, d7
 80196a8:	f7e6 ffd6 	bl	8000658 <__aeabi_dmul>
 80196ac:	9b02      	ldr	r3, [sp, #8]
 80196ae:	9d00      	ldr	r5, [sp, #0]
 80196b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80196b2:	ec41 0b19 	vmov	d9, r0, r1
 80196b6:	4649      	mov	r1, r9
 80196b8:	4640      	mov	r0, r8
 80196ba:	f7e7 fa7d 	bl	8000bb8 <__aeabi_d2iz>
 80196be:	4606      	mov	r6, r0
 80196c0:	f7e6 ff60 	bl	8000584 <__aeabi_i2d>
 80196c4:	3630      	adds	r6, #48	; 0x30
 80196c6:	4602      	mov	r2, r0
 80196c8:	460b      	mov	r3, r1
 80196ca:	4640      	mov	r0, r8
 80196cc:	4649      	mov	r1, r9
 80196ce:	f7e6 fe0b 	bl	80002e8 <__aeabi_dsub>
 80196d2:	f805 6b01 	strb.w	r6, [r5], #1
 80196d6:	9b02      	ldr	r3, [sp, #8]
 80196d8:	429d      	cmp	r5, r3
 80196da:	4680      	mov	r8, r0
 80196dc:	4689      	mov	r9, r1
 80196de:	f04f 0200 	mov.w	r2, #0
 80196e2:	d124      	bne.n	801972e <_dtoa_r+0x62e>
 80196e4:	4b1b      	ldr	r3, [pc, #108]	; (8019754 <_dtoa_r+0x654>)
 80196e6:	ec51 0b19 	vmov	r0, r1, d9
 80196ea:	f7e6 fdff 	bl	80002ec <__adddf3>
 80196ee:	4602      	mov	r2, r0
 80196f0:	460b      	mov	r3, r1
 80196f2:	4640      	mov	r0, r8
 80196f4:	4649      	mov	r1, r9
 80196f6:	f7e7 fa3f 	bl	8000b78 <__aeabi_dcmpgt>
 80196fa:	2800      	cmp	r0, #0
 80196fc:	d173      	bne.n	80197e6 <_dtoa_r+0x6e6>
 80196fe:	ec53 2b19 	vmov	r2, r3, d9
 8019702:	4914      	ldr	r1, [pc, #80]	; (8019754 <_dtoa_r+0x654>)
 8019704:	2000      	movs	r0, #0
 8019706:	f7e6 fdef 	bl	80002e8 <__aeabi_dsub>
 801970a:	4602      	mov	r2, r0
 801970c:	460b      	mov	r3, r1
 801970e:	4640      	mov	r0, r8
 8019710:	4649      	mov	r1, r9
 8019712:	f7e7 fa13 	bl	8000b3c <__aeabi_dcmplt>
 8019716:	2800      	cmp	r0, #0
 8019718:	f43f af2f 	beq.w	801957a <_dtoa_r+0x47a>
 801971c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801971e:	1e6b      	subs	r3, r5, #1
 8019720:	930f      	str	r3, [sp, #60]	; 0x3c
 8019722:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8019726:	2b30      	cmp	r3, #48	; 0x30
 8019728:	d0f8      	beq.n	801971c <_dtoa_r+0x61c>
 801972a:	46bb      	mov	fp, r7
 801972c:	e04a      	b.n	80197c4 <_dtoa_r+0x6c4>
 801972e:	4b06      	ldr	r3, [pc, #24]	; (8019748 <_dtoa_r+0x648>)
 8019730:	f7e6 ff92 	bl	8000658 <__aeabi_dmul>
 8019734:	4680      	mov	r8, r0
 8019736:	4689      	mov	r9, r1
 8019738:	e7bd      	b.n	80196b6 <_dtoa_r+0x5b6>
 801973a:	bf00      	nop
 801973c:	0801dbb8 	.word	0x0801dbb8
 8019740:	0801db90 	.word	0x0801db90
 8019744:	3ff00000 	.word	0x3ff00000
 8019748:	40240000 	.word	0x40240000
 801974c:	401c0000 	.word	0x401c0000
 8019750:	40140000 	.word	0x40140000
 8019754:	3fe00000 	.word	0x3fe00000
 8019758:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801975c:	9d00      	ldr	r5, [sp, #0]
 801975e:	4642      	mov	r2, r8
 8019760:	464b      	mov	r3, r9
 8019762:	4630      	mov	r0, r6
 8019764:	4639      	mov	r1, r7
 8019766:	f7e7 f8a1 	bl	80008ac <__aeabi_ddiv>
 801976a:	f7e7 fa25 	bl	8000bb8 <__aeabi_d2iz>
 801976e:	9001      	str	r0, [sp, #4]
 8019770:	f7e6 ff08 	bl	8000584 <__aeabi_i2d>
 8019774:	4642      	mov	r2, r8
 8019776:	464b      	mov	r3, r9
 8019778:	f7e6 ff6e 	bl	8000658 <__aeabi_dmul>
 801977c:	4602      	mov	r2, r0
 801977e:	460b      	mov	r3, r1
 8019780:	4630      	mov	r0, r6
 8019782:	4639      	mov	r1, r7
 8019784:	f7e6 fdb0 	bl	80002e8 <__aeabi_dsub>
 8019788:	9e01      	ldr	r6, [sp, #4]
 801978a:	9f04      	ldr	r7, [sp, #16]
 801978c:	3630      	adds	r6, #48	; 0x30
 801978e:	f805 6b01 	strb.w	r6, [r5], #1
 8019792:	9e00      	ldr	r6, [sp, #0]
 8019794:	1bae      	subs	r6, r5, r6
 8019796:	42b7      	cmp	r7, r6
 8019798:	4602      	mov	r2, r0
 801979a:	460b      	mov	r3, r1
 801979c:	d134      	bne.n	8019808 <_dtoa_r+0x708>
 801979e:	f7e6 fda5 	bl	80002ec <__adddf3>
 80197a2:	4642      	mov	r2, r8
 80197a4:	464b      	mov	r3, r9
 80197a6:	4606      	mov	r6, r0
 80197a8:	460f      	mov	r7, r1
 80197aa:	f7e7 f9e5 	bl	8000b78 <__aeabi_dcmpgt>
 80197ae:	b9c8      	cbnz	r0, 80197e4 <_dtoa_r+0x6e4>
 80197b0:	4642      	mov	r2, r8
 80197b2:	464b      	mov	r3, r9
 80197b4:	4630      	mov	r0, r6
 80197b6:	4639      	mov	r1, r7
 80197b8:	f7e7 f9b6 	bl	8000b28 <__aeabi_dcmpeq>
 80197bc:	b110      	cbz	r0, 80197c4 <_dtoa_r+0x6c4>
 80197be:	9b01      	ldr	r3, [sp, #4]
 80197c0:	07db      	lsls	r3, r3, #31
 80197c2:	d40f      	bmi.n	80197e4 <_dtoa_r+0x6e4>
 80197c4:	4651      	mov	r1, sl
 80197c6:	4620      	mov	r0, r4
 80197c8:	f000 fb18 	bl	8019dfc <_Bfree>
 80197cc:	2300      	movs	r3, #0
 80197ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80197d0:	702b      	strb	r3, [r5, #0]
 80197d2:	f10b 0301 	add.w	r3, fp, #1
 80197d6:	6013      	str	r3, [r2, #0]
 80197d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80197da:	2b00      	cmp	r3, #0
 80197dc:	f43f ace2 	beq.w	80191a4 <_dtoa_r+0xa4>
 80197e0:	601d      	str	r5, [r3, #0]
 80197e2:	e4df      	b.n	80191a4 <_dtoa_r+0xa4>
 80197e4:	465f      	mov	r7, fp
 80197e6:	462b      	mov	r3, r5
 80197e8:	461d      	mov	r5, r3
 80197ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80197ee:	2a39      	cmp	r2, #57	; 0x39
 80197f0:	d106      	bne.n	8019800 <_dtoa_r+0x700>
 80197f2:	9a00      	ldr	r2, [sp, #0]
 80197f4:	429a      	cmp	r2, r3
 80197f6:	d1f7      	bne.n	80197e8 <_dtoa_r+0x6e8>
 80197f8:	9900      	ldr	r1, [sp, #0]
 80197fa:	2230      	movs	r2, #48	; 0x30
 80197fc:	3701      	adds	r7, #1
 80197fe:	700a      	strb	r2, [r1, #0]
 8019800:	781a      	ldrb	r2, [r3, #0]
 8019802:	3201      	adds	r2, #1
 8019804:	701a      	strb	r2, [r3, #0]
 8019806:	e790      	b.n	801972a <_dtoa_r+0x62a>
 8019808:	4ba3      	ldr	r3, [pc, #652]	; (8019a98 <_dtoa_r+0x998>)
 801980a:	2200      	movs	r2, #0
 801980c:	f7e6 ff24 	bl	8000658 <__aeabi_dmul>
 8019810:	2200      	movs	r2, #0
 8019812:	2300      	movs	r3, #0
 8019814:	4606      	mov	r6, r0
 8019816:	460f      	mov	r7, r1
 8019818:	f7e7 f986 	bl	8000b28 <__aeabi_dcmpeq>
 801981c:	2800      	cmp	r0, #0
 801981e:	d09e      	beq.n	801975e <_dtoa_r+0x65e>
 8019820:	e7d0      	b.n	80197c4 <_dtoa_r+0x6c4>
 8019822:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019824:	2a00      	cmp	r2, #0
 8019826:	f000 80ca 	beq.w	80199be <_dtoa_r+0x8be>
 801982a:	9a07      	ldr	r2, [sp, #28]
 801982c:	2a01      	cmp	r2, #1
 801982e:	f300 80ad 	bgt.w	801998c <_dtoa_r+0x88c>
 8019832:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019834:	2a00      	cmp	r2, #0
 8019836:	f000 80a5 	beq.w	8019984 <_dtoa_r+0x884>
 801983a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801983e:	9e08      	ldr	r6, [sp, #32]
 8019840:	9d05      	ldr	r5, [sp, #20]
 8019842:	9a05      	ldr	r2, [sp, #20]
 8019844:	441a      	add	r2, r3
 8019846:	9205      	str	r2, [sp, #20]
 8019848:	9a06      	ldr	r2, [sp, #24]
 801984a:	2101      	movs	r1, #1
 801984c:	441a      	add	r2, r3
 801984e:	4620      	mov	r0, r4
 8019850:	9206      	str	r2, [sp, #24]
 8019852:	f000 fbd3 	bl	8019ffc <__i2b>
 8019856:	4607      	mov	r7, r0
 8019858:	b165      	cbz	r5, 8019874 <_dtoa_r+0x774>
 801985a:	9b06      	ldr	r3, [sp, #24]
 801985c:	2b00      	cmp	r3, #0
 801985e:	dd09      	ble.n	8019874 <_dtoa_r+0x774>
 8019860:	42ab      	cmp	r3, r5
 8019862:	9a05      	ldr	r2, [sp, #20]
 8019864:	bfa8      	it	ge
 8019866:	462b      	movge	r3, r5
 8019868:	1ad2      	subs	r2, r2, r3
 801986a:	9205      	str	r2, [sp, #20]
 801986c:	9a06      	ldr	r2, [sp, #24]
 801986e:	1aed      	subs	r5, r5, r3
 8019870:	1ad3      	subs	r3, r2, r3
 8019872:	9306      	str	r3, [sp, #24]
 8019874:	9b08      	ldr	r3, [sp, #32]
 8019876:	b1f3      	cbz	r3, 80198b6 <_dtoa_r+0x7b6>
 8019878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801987a:	2b00      	cmp	r3, #0
 801987c:	f000 80a3 	beq.w	80199c6 <_dtoa_r+0x8c6>
 8019880:	2e00      	cmp	r6, #0
 8019882:	dd10      	ble.n	80198a6 <_dtoa_r+0x7a6>
 8019884:	4639      	mov	r1, r7
 8019886:	4632      	mov	r2, r6
 8019888:	4620      	mov	r0, r4
 801988a:	f000 fc77 	bl	801a17c <__pow5mult>
 801988e:	4652      	mov	r2, sl
 8019890:	4601      	mov	r1, r0
 8019892:	4607      	mov	r7, r0
 8019894:	4620      	mov	r0, r4
 8019896:	f000 fbc7 	bl	801a028 <__multiply>
 801989a:	4651      	mov	r1, sl
 801989c:	4680      	mov	r8, r0
 801989e:	4620      	mov	r0, r4
 80198a0:	f000 faac 	bl	8019dfc <_Bfree>
 80198a4:	46c2      	mov	sl, r8
 80198a6:	9b08      	ldr	r3, [sp, #32]
 80198a8:	1b9a      	subs	r2, r3, r6
 80198aa:	d004      	beq.n	80198b6 <_dtoa_r+0x7b6>
 80198ac:	4651      	mov	r1, sl
 80198ae:	4620      	mov	r0, r4
 80198b0:	f000 fc64 	bl	801a17c <__pow5mult>
 80198b4:	4682      	mov	sl, r0
 80198b6:	2101      	movs	r1, #1
 80198b8:	4620      	mov	r0, r4
 80198ba:	f000 fb9f 	bl	8019ffc <__i2b>
 80198be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80198c0:	2b00      	cmp	r3, #0
 80198c2:	4606      	mov	r6, r0
 80198c4:	f340 8081 	ble.w	80199ca <_dtoa_r+0x8ca>
 80198c8:	461a      	mov	r2, r3
 80198ca:	4601      	mov	r1, r0
 80198cc:	4620      	mov	r0, r4
 80198ce:	f000 fc55 	bl	801a17c <__pow5mult>
 80198d2:	9b07      	ldr	r3, [sp, #28]
 80198d4:	2b01      	cmp	r3, #1
 80198d6:	4606      	mov	r6, r0
 80198d8:	dd7a      	ble.n	80199d0 <_dtoa_r+0x8d0>
 80198da:	f04f 0800 	mov.w	r8, #0
 80198de:	6933      	ldr	r3, [r6, #16]
 80198e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80198e4:	6918      	ldr	r0, [r3, #16]
 80198e6:	f000 fb3b 	bl	8019f60 <__hi0bits>
 80198ea:	f1c0 0020 	rsb	r0, r0, #32
 80198ee:	9b06      	ldr	r3, [sp, #24]
 80198f0:	4418      	add	r0, r3
 80198f2:	f010 001f 	ands.w	r0, r0, #31
 80198f6:	f000 8094 	beq.w	8019a22 <_dtoa_r+0x922>
 80198fa:	f1c0 0320 	rsb	r3, r0, #32
 80198fe:	2b04      	cmp	r3, #4
 8019900:	f340 8085 	ble.w	8019a0e <_dtoa_r+0x90e>
 8019904:	9b05      	ldr	r3, [sp, #20]
 8019906:	f1c0 001c 	rsb	r0, r0, #28
 801990a:	4403      	add	r3, r0
 801990c:	9305      	str	r3, [sp, #20]
 801990e:	9b06      	ldr	r3, [sp, #24]
 8019910:	4403      	add	r3, r0
 8019912:	4405      	add	r5, r0
 8019914:	9306      	str	r3, [sp, #24]
 8019916:	9b05      	ldr	r3, [sp, #20]
 8019918:	2b00      	cmp	r3, #0
 801991a:	dd05      	ble.n	8019928 <_dtoa_r+0x828>
 801991c:	4651      	mov	r1, sl
 801991e:	461a      	mov	r2, r3
 8019920:	4620      	mov	r0, r4
 8019922:	f000 fc85 	bl	801a230 <__lshift>
 8019926:	4682      	mov	sl, r0
 8019928:	9b06      	ldr	r3, [sp, #24]
 801992a:	2b00      	cmp	r3, #0
 801992c:	dd05      	ble.n	801993a <_dtoa_r+0x83a>
 801992e:	4631      	mov	r1, r6
 8019930:	461a      	mov	r2, r3
 8019932:	4620      	mov	r0, r4
 8019934:	f000 fc7c 	bl	801a230 <__lshift>
 8019938:	4606      	mov	r6, r0
 801993a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801993c:	2b00      	cmp	r3, #0
 801993e:	d072      	beq.n	8019a26 <_dtoa_r+0x926>
 8019940:	4631      	mov	r1, r6
 8019942:	4650      	mov	r0, sl
 8019944:	f000 fce0 	bl	801a308 <__mcmp>
 8019948:	2800      	cmp	r0, #0
 801994a:	da6c      	bge.n	8019a26 <_dtoa_r+0x926>
 801994c:	2300      	movs	r3, #0
 801994e:	4651      	mov	r1, sl
 8019950:	220a      	movs	r2, #10
 8019952:	4620      	mov	r0, r4
 8019954:	f000 fa74 	bl	8019e40 <__multadd>
 8019958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801995a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801995e:	4682      	mov	sl, r0
 8019960:	2b00      	cmp	r3, #0
 8019962:	f000 81b0 	beq.w	8019cc6 <_dtoa_r+0xbc6>
 8019966:	2300      	movs	r3, #0
 8019968:	4639      	mov	r1, r7
 801996a:	220a      	movs	r2, #10
 801996c:	4620      	mov	r0, r4
 801996e:	f000 fa67 	bl	8019e40 <__multadd>
 8019972:	9b01      	ldr	r3, [sp, #4]
 8019974:	2b00      	cmp	r3, #0
 8019976:	4607      	mov	r7, r0
 8019978:	f300 8096 	bgt.w	8019aa8 <_dtoa_r+0x9a8>
 801997c:	9b07      	ldr	r3, [sp, #28]
 801997e:	2b02      	cmp	r3, #2
 8019980:	dc59      	bgt.n	8019a36 <_dtoa_r+0x936>
 8019982:	e091      	b.n	8019aa8 <_dtoa_r+0x9a8>
 8019984:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019986:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801998a:	e758      	b.n	801983e <_dtoa_r+0x73e>
 801998c:	9b04      	ldr	r3, [sp, #16]
 801998e:	1e5e      	subs	r6, r3, #1
 8019990:	9b08      	ldr	r3, [sp, #32]
 8019992:	42b3      	cmp	r3, r6
 8019994:	bfbf      	itttt	lt
 8019996:	9b08      	ldrlt	r3, [sp, #32]
 8019998:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801999a:	9608      	strlt	r6, [sp, #32]
 801999c:	1af3      	sublt	r3, r6, r3
 801999e:	bfb4      	ite	lt
 80199a0:	18d2      	addlt	r2, r2, r3
 80199a2:	1b9e      	subge	r6, r3, r6
 80199a4:	9b04      	ldr	r3, [sp, #16]
 80199a6:	bfbc      	itt	lt
 80199a8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80199aa:	2600      	movlt	r6, #0
 80199ac:	2b00      	cmp	r3, #0
 80199ae:	bfb7      	itett	lt
 80199b0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80199b4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80199b8:	1a9d      	sublt	r5, r3, r2
 80199ba:	2300      	movlt	r3, #0
 80199bc:	e741      	b.n	8019842 <_dtoa_r+0x742>
 80199be:	9e08      	ldr	r6, [sp, #32]
 80199c0:	9d05      	ldr	r5, [sp, #20]
 80199c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80199c4:	e748      	b.n	8019858 <_dtoa_r+0x758>
 80199c6:	9a08      	ldr	r2, [sp, #32]
 80199c8:	e770      	b.n	80198ac <_dtoa_r+0x7ac>
 80199ca:	9b07      	ldr	r3, [sp, #28]
 80199cc:	2b01      	cmp	r3, #1
 80199ce:	dc19      	bgt.n	8019a04 <_dtoa_r+0x904>
 80199d0:	9b02      	ldr	r3, [sp, #8]
 80199d2:	b9bb      	cbnz	r3, 8019a04 <_dtoa_r+0x904>
 80199d4:	9b03      	ldr	r3, [sp, #12]
 80199d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80199da:	b99b      	cbnz	r3, 8019a04 <_dtoa_r+0x904>
 80199dc:	9b03      	ldr	r3, [sp, #12]
 80199de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80199e2:	0d1b      	lsrs	r3, r3, #20
 80199e4:	051b      	lsls	r3, r3, #20
 80199e6:	b183      	cbz	r3, 8019a0a <_dtoa_r+0x90a>
 80199e8:	9b05      	ldr	r3, [sp, #20]
 80199ea:	3301      	adds	r3, #1
 80199ec:	9305      	str	r3, [sp, #20]
 80199ee:	9b06      	ldr	r3, [sp, #24]
 80199f0:	3301      	adds	r3, #1
 80199f2:	9306      	str	r3, [sp, #24]
 80199f4:	f04f 0801 	mov.w	r8, #1
 80199f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80199fa:	2b00      	cmp	r3, #0
 80199fc:	f47f af6f 	bne.w	80198de <_dtoa_r+0x7de>
 8019a00:	2001      	movs	r0, #1
 8019a02:	e774      	b.n	80198ee <_dtoa_r+0x7ee>
 8019a04:	f04f 0800 	mov.w	r8, #0
 8019a08:	e7f6      	b.n	80199f8 <_dtoa_r+0x8f8>
 8019a0a:	4698      	mov	r8, r3
 8019a0c:	e7f4      	b.n	80199f8 <_dtoa_r+0x8f8>
 8019a0e:	d082      	beq.n	8019916 <_dtoa_r+0x816>
 8019a10:	9a05      	ldr	r2, [sp, #20]
 8019a12:	331c      	adds	r3, #28
 8019a14:	441a      	add	r2, r3
 8019a16:	9205      	str	r2, [sp, #20]
 8019a18:	9a06      	ldr	r2, [sp, #24]
 8019a1a:	441a      	add	r2, r3
 8019a1c:	441d      	add	r5, r3
 8019a1e:	9206      	str	r2, [sp, #24]
 8019a20:	e779      	b.n	8019916 <_dtoa_r+0x816>
 8019a22:	4603      	mov	r3, r0
 8019a24:	e7f4      	b.n	8019a10 <_dtoa_r+0x910>
 8019a26:	9b04      	ldr	r3, [sp, #16]
 8019a28:	2b00      	cmp	r3, #0
 8019a2a:	dc37      	bgt.n	8019a9c <_dtoa_r+0x99c>
 8019a2c:	9b07      	ldr	r3, [sp, #28]
 8019a2e:	2b02      	cmp	r3, #2
 8019a30:	dd34      	ble.n	8019a9c <_dtoa_r+0x99c>
 8019a32:	9b04      	ldr	r3, [sp, #16]
 8019a34:	9301      	str	r3, [sp, #4]
 8019a36:	9b01      	ldr	r3, [sp, #4]
 8019a38:	b963      	cbnz	r3, 8019a54 <_dtoa_r+0x954>
 8019a3a:	4631      	mov	r1, r6
 8019a3c:	2205      	movs	r2, #5
 8019a3e:	4620      	mov	r0, r4
 8019a40:	f000 f9fe 	bl	8019e40 <__multadd>
 8019a44:	4601      	mov	r1, r0
 8019a46:	4606      	mov	r6, r0
 8019a48:	4650      	mov	r0, sl
 8019a4a:	f000 fc5d 	bl	801a308 <__mcmp>
 8019a4e:	2800      	cmp	r0, #0
 8019a50:	f73f adbb 	bgt.w	80195ca <_dtoa_r+0x4ca>
 8019a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019a56:	9d00      	ldr	r5, [sp, #0]
 8019a58:	ea6f 0b03 	mvn.w	fp, r3
 8019a5c:	f04f 0800 	mov.w	r8, #0
 8019a60:	4631      	mov	r1, r6
 8019a62:	4620      	mov	r0, r4
 8019a64:	f000 f9ca 	bl	8019dfc <_Bfree>
 8019a68:	2f00      	cmp	r7, #0
 8019a6a:	f43f aeab 	beq.w	80197c4 <_dtoa_r+0x6c4>
 8019a6e:	f1b8 0f00 	cmp.w	r8, #0
 8019a72:	d005      	beq.n	8019a80 <_dtoa_r+0x980>
 8019a74:	45b8      	cmp	r8, r7
 8019a76:	d003      	beq.n	8019a80 <_dtoa_r+0x980>
 8019a78:	4641      	mov	r1, r8
 8019a7a:	4620      	mov	r0, r4
 8019a7c:	f000 f9be 	bl	8019dfc <_Bfree>
 8019a80:	4639      	mov	r1, r7
 8019a82:	4620      	mov	r0, r4
 8019a84:	f000 f9ba 	bl	8019dfc <_Bfree>
 8019a88:	e69c      	b.n	80197c4 <_dtoa_r+0x6c4>
 8019a8a:	2600      	movs	r6, #0
 8019a8c:	4637      	mov	r7, r6
 8019a8e:	e7e1      	b.n	8019a54 <_dtoa_r+0x954>
 8019a90:	46bb      	mov	fp, r7
 8019a92:	4637      	mov	r7, r6
 8019a94:	e599      	b.n	80195ca <_dtoa_r+0x4ca>
 8019a96:	bf00      	nop
 8019a98:	40240000 	.word	0x40240000
 8019a9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019a9e:	2b00      	cmp	r3, #0
 8019aa0:	f000 80c8 	beq.w	8019c34 <_dtoa_r+0xb34>
 8019aa4:	9b04      	ldr	r3, [sp, #16]
 8019aa6:	9301      	str	r3, [sp, #4]
 8019aa8:	2d00      	cmp	r5, #0
 8019aaa:	dd05      	ble.n	8019ab8 <_dtoa_r+0x9b8>
 8019aac:	4639      	mov	r1, r7
 8019aae:	462a      	mov	r2, r5
 8019ab0:	4620      	mov	r0, r4
 8019ab2:	f000 fbbd 	bl	801a230 <__lshift>
 8019ab6:	4607      	mov	r7, r0
 8019ab8:	f1b8 0f00 	cmp.w	r8, #0
 8019abc:	d05b      	beq.n	8019b76 <_dtoa_r+0xa76>
 8019abe:	6879      	ldr	r1, [r7, #4]
 8019ac0:	4620      	mov	r0, r4
 8019ac2:	f000 f95b 	bl	8019d7c <_Balloc>
 8019ac6:	4605      	mov	r5, r0
 8019ac8:	b928      	cbnz	r0, 8019ad6 <_dtoa_r+0x9d6>
 8019aca:	4b83      	ldr	r3, [pc, #524]	; (8019cd8 <_dtoa_r+0xbd8>)
 8019acc:	4602      	mov	r2, r0
 8019ace:	f240 21ef 	movw	r1, #751	; 0x2ef
 8019ad2:	f7ff bb2e 	b.w	8019132 <_dtoa_r+0x32>
 8019ad6:	693a      	ldr	r2, [r7, #16]
 8019ad8:	3202      	adds	r2, #2
 8019ada:	0092      	lsls	r2, r2, #2
 8019adc:	f107 010c 	add.w	r1, r7, #12
 8019ae0:	300c      	adds	r0, #12
 8019ae2:	f7ff fa71 	bl	8018fc8 <memcpy>
 8019ae6:	2201      	movs	r2, #1
 8019ae8:	4629      	mov	r1, r5
 8019aea:	4620      	mov	r0, r4
 8019aec:	f000 fba0 	bl	801a230 <__lshift>
 8019af0:	9b00      	ldr	r3, [sp, #0]
 8019af2:	3301      	adds	r3, #1
 8019af4:	9304      	str	r3, [sp, #16]
 8019af6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019afa:	4413      	add	r3, r2
 8019afc:	9308      	str	r3, [sp, #32]
 8019afe:	9b02      	ldr	r3, [sp, #8]
 8019b00:	f003 0301 	and.w	r3, r3, #1
 8019b04:	46b8      	mov	r8, r7
 8019b06:	9306      	str	r3, [sp, #24]
 8019b08:	4607      	mov	r7, r0
 8019b0a:	9b04      	ldr	r3, [sp, #16]
 8019b0c:	4631      	mov	r1, r6
 8019b0e:	3b01      	subs	r3, #1
 8019b10:	4650      	mov	r0, sl
 8019b12:	9301      	str	r3, [sp, #4]
 8019b14:	f7ff fa6c 	bl	8018ff0 <quorem>
 8019b18:	4641      	mov	r1, r8
 8019b1a:	9002      	str	r0, [sp, #8]
 8019b1c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8019b20:	4650      	mov	r0, sl
 8019b22:	f000 fbf1 	bl	801a308 <__mcmp>
 8019b26:	463a      	mov	r2, r7
 8019b28:	9005      	str	r0, [sp, #20]
 8019b2a:	4631      	mov	r1, r6
 8019b2c:	4620      	mov	r0, r4
 8019b2e:	f000 fc07 	bl	801a340 <__mdiff>
 8019b32:	68c2      	ldr	r2, [r0, #12]
 8019b34:	4605      	mov	r5, r0
 8019b36:	bb02      	cbnz	r2, 8019b7a <_dtoa_r+0xa7a>
 8019b38:	4601      	mov	r1, r0
 8019b3a:	4650      	mov	r0, sl
 8019b3c:	f000 fbe4 	bl	801a308 <__mcmp>
 8019b40:	4602      	mov	r2, r0
 8019b42:	4629      	mov	r1, r5
 8019b44:	4620      	mov	r0, r4
 8019b46:	9209      	str	r2, [sp, #36]	; 0x24
 8019b48:	f000 f958 	bl	8019dfc <_Bfree>
 8019b4c:	9b07      	ldr	r3, [sp, #28]
 8019b4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019b50:	9d04      	ldr	r5, [sp, #16]
 8019b52:	ea43 0102 	orr.w	r1, r3, r2
 8019b56:	9b06      	ldr	r3, [sp, #24]
 8019b58:	4319      	orrs	r1, r3
 8019b5a:	d110      	bne.n	8019b7e <_dtoa_r+0xa7e>
 8019b5c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8019b60:	d029      	beq.n	8019bb6 <_dtoa_r+0xab6>
 8019b62:	9b05      	ldr	r3, [sp, #20]
 8019b64:	2b00      	cmp	r3, #0
 8019b66:	dd02      	ble.n	8019b6e <_dtoa_r+0xa6e>
 8019b68:	9b02      	ldr	r3, [sp, #8]
 8019b6a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8019b6e:	9b01      	ldr	r3, [sp, #4]
 8019b70:	f883 9000 	strb.w	r9, [r3]
 8019b74:	e774      	b.n	8019a60 <_dtoa_r+0x960>
 8019b76:	4638      	mov	r0, r7
 8019b78:	e7ba      	b.n	8019af0 <_dtoa_r+0x9f0>
 8019b7a:	2201      	movs	r2, #1
 8019b7c:	e7e1      	b.n	8019b42 <_dtoa_r+0xa42>
 8019b7e:	9b05      	ldr	r3, [sp, #20]
 8019b80:	2b00      	cmp	r3, #0
 8019b82:	db04      	blt.n	8019b8e <_dtoa_r+0xa8e>
 8019b84:	9907      	ldr	r1, [sp, #28]
 8019b86:	430b      	orrs	r3, r1
 8019b88:	9906      	ldr	r1, [sp, #24]
 8019b8a:	430b      	orrs	r3, r1
 8019b8c:	d120      	bne.n	8019bd0 <_dtoa_r+0xad0>
 8019b8e:	2a00      	cmp	r2, #0
 8019b90:	dded      	ble.n	8019b6e <_dtoa_r+0xa6e>
 8019b92:	4651      	mov	r1, sl
 8019b94:	2201      	movs	r2, #1
 8019b96:	4620      	mov	r0, r4
 8019b98:	f000 fb4a 	bl	801a230 <__lshift>
 8019b9c:	4631      	mov	r1, r6
 8019b9e:	4682      	mov	sl, r0
 8019ba0:	f000 fbb2 	bl	801a308 <__mcmp>
 8019ba4:	2800      	cmp	r0, #0
 8019ba6:	dc03      	bgt.n	8019bb0 <_dtoa_r+0xab0>
 8019ba8:	d1e1      	bne.n	8019b6e <_dtoa_r+0xa6e>
 8019baa:	f019 0f01 	tst.w	r9, #1
 8019bae:	d0de      	beq.n	8019b6e <_dtoa_r+0xa6e>
 8019bb0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8019bb4:	d1d8      	bne.n	8019b68 <_dtoa_r+0xa68>
 8019bb6:	9a01      	ldr	r2, [sp, #4]
 8019bb8:	2339      	movs	r3, #57	; 0x39
 8019bba:	7013      	strb	r3, [r2, #0]
 8019bbc:	462b      	mov	r3, r5
 8019bbe:	461d      	mov	r5, r3
 8019bc0:	3b01      	subs	r3, #1
 8019bc2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8019bc6:	2a39      	cmp	r2, #57	; 0x39
 8019bc8:	d06c      	beq.n	8019ca4 <_dtoa_r+0xba4>
 8019bca:	3201      	adds	r2, #1
 8019bcc:	701a      	strb	r2, [r3, #0]
 8019bce:	e747      	b.n	8019a60 <_dtoa_r+0x960>
 8019bd0:	2a00      	cmp	r2, #0
 8019bd2:	dd07      	ble.n	8019be4 <_dtoa_r+0xae4>
 8019bd4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8019bd8:	d0ed      	beq.n	8019bb6 <_dtoa_r+0xab6>
 8019bda:	9a01      	ldr	r2, [sp, #4]
 8019bdc:	f109 0301 	add.w	r3, r9, #1
 8019be0:	7013      	strb	r3, [r2, #0]
 8019be2:	e73d      	b.n	8019a60 <_dtoa_r+0x960>
 8019be4:	9b04      	ldr	r3, [sp, #16]
 8019be6:	9a08      	ldr	r2, [sp, #32]
 8019be8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8019bec:	4293      	cmp	r3, r2
 8019bee:	d043      	beq.n	8019c78 <_dtoa_r+0xb78>
 8019bf0:	4651      	mov	r1, sl
 8019bf2:	2300      	movs	r3, #0
 8019bf4:	220a      	movs	r2, #10
 8019bf6:	4620      	mov	r0, r4
 8019bf8:	f000 f922 	bl	8019e40 <__multadd>
 8019bfc:	45b8      	cmp	r8, r7
 8019bfe:	4682      	mov	sl, r0
 8019c00:	f04f 0300 	mov.w	r3, #0
 8019c04:	f04f 020a 	mov.w	r2, #10
 8019c08:	4641      	mov	r1, r8
 8019c0a:	4620      	mov	r0, r4
 8019c0c:	d107      	bne.n	8019c1e <_dtoa_r+0xb1e>
 8019c0e:	f000 f917 	bl	8019e40 <__multadd>
 8019c12:	4680      	mov	r8, r0
 8019c14:	4607      	mov	r7, r0
 8019c16:	9b04      	ldr	r3, [sp, #16]
 8019c18:	3301      	adds	r3, #1
 8019c1a:	9304      	str	r3, [sp, #16]
 8019c1c:	e775      	b.n	8019b0a <_dtoa_r+0xa0a>
 8019c1e:	f000 f90f 	bl	8019e40 <__multadd>
 8019c22:	4639      	mov	r1, r7
 8019c24:	4680      	mov	r8, r0
 8019c26:	2300      	movs	r3, #0
 8019c28:	220a      	movs	r2, #10
 8019c2a:	4620      	mov	r0, r4
 8019c2c:	f000 f908 	bl	8019e40 <__multadd>
 8019c30:	4607      	mov	r7, r0
 8019c32:	e7f0      	b.n	8019c16 <_dtoa_r+0xb16>
 8019c34:	9b04      	ldr	r3, [sp, #16]
 8019c36:	9301      	str	r3, [sp, #4]
 8019c38:	9d00      	ldr	r5, [sp, #0]
 8019c3a:	4631      	mov	r1, r6
 8019c3c:	4650      	mov	r0, sl
 8019c3e:	f7ff f9d7 	bl	8018ff0 <quorem>
 8019c42:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8019c46:	9b00      	ldr	r3, [sp, #0]
 8019c48:	f805 9b01 	strb.w	r9, [r5], #1
 8019c4c:	1aea      	subs	r2, r5, r3
 8019c4e:	9b01      	ldr	r3, [sp, #4]
 8019c50:	4293      	cmp	r3, r2
 8019c52:	dd07      	ble.n	8019c64 <_dtoa_r+0xb64>
 8019c54:	4651      	mov	r1, sl
 8019c56:	2300      	movs	r3, #0
 8019c58:	220a      	movs	r2, #10
 8019c5a:	4620      	mov	r0, r4
 8019c5c:	f000 f8f0 	bl	8019e40 <__multadd>
 8019c60:	4682      	mov	sl, r0
 8019c62:	e7ea      	b.n	8019c3a <_dtoa_r+0xb3a>
 8019c64:	9b01      	ldr	r3, [sp, #4]
 8019c66:	2b00      	cmp	r3, #0
 8019c68:	bfc8      	it	gt
 8019c6a:	461d      	movgt	r5, r3
 8019c6c:	9b00      	ldr	r3, [sp, #0]
 8019c6e:	bfd8      	it	le
 8019c70:	2501      	movle	r5, #1
 8019c72:	441d      	add	r5, r3
 8019c74:	f04f 0800 	mov.w	r8, #0
 8019c78:	4651      	mov	r1, sl
 8019c7a:	2201      	movs	r2, #1
 8019c7c:	4620      	mov	r0, r4
 8019c7e:	f000 fad7 	bl	801a230 <__lshift>
 8019c82:	4631      	mov	r1, r6
 8019c84:	4682      	mov	sl, r0
 8019c86:	f000 fb3f 	bl	801a308 <__mcmp>
 8019c8a:	2800      	cmp	r0, #0
 8019c8c:	dc96      	bgt.n	8019bbc <_dtoa_r+0xabc>
 8019c8e:	d102      	bne.n	8019c96 <_dtoa_r+0xb96>
 8019c90:	f019 0f01 	tst.w	r9, #1
 8019c94:	d192      	bne.n	8019bbc <_dtoa_r+0xabc>
 8019c96:	462b      	mov	r3, r5
 8019c98:	461d      	mov	r5, r3
 8019c9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019c9e:	2a30      	cmp	r2, #48	; 0x30
 8019ca0:	d0fa      	beq.n	8019c98 <_dtoa_r+0xb98>
 8019ca2:	e6dd      	b.n	8019a60 <_dtoa_r+0x960>
 8019ca4:	9a00      	ldr	r2, [sp, #0]
 8019ca6:	429a      	cmp	r2, r3
 8019ca8:	d189      	bne.n	8019bbe <_dtoa_r+0xabe>
 8019caa:	f10b 0b01 	add.w	fp, fp, #1
 8019cae:	2331      	movs	r3, #49	; 0x31
 8019cb0:	e796      	b.n	8019be0 <_dtoa_r+0xae0>
 8019cb2:	4b0a      	ldr	r3, [pc, #40]	; (8019cdc <_dtoa_r+0xbdc>)
 8019cb4:	f7ff ba99 	b.w	80191ea <_dtoa_r+0xea>
 8019cb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019cba:	2b00      	cmp	r3, #0
 8019cbc:	f47f aa6d 	bne.w	801919a <_dtoa_r+0x9a>
 8019cc0:	4b07      	ldr	r3, [pc, #28]	; (8019ce0 <_dtoa_r+0xbe0>)
 8019cc2:	f7ff ba92 	b.w	80191ea <_dtoa_r+0xea>
 8019cc6:	9b01      	ldr	r3, [sp, #4]
 8019cc8:	2b00      	cmp	r3, #0
 8019cca:	dcb5      	bgt.n	8019c38 <_dtoa_r+0xb38>
 8019ccc:	9b07      	ldr	r3, [sp, #28]
 8019cce:	2b02      	cmp	r3, #2
 8019cd0:	f73f aeb1 	bgt.w	8019a36 <_dtoa_r+0x936>
 8019cd4:	e7b0      	b.n	8019c38 <_dtoa_r+0xb38>
 8019cd6:	bf00      	nop
 8019cd8:	0801db23 	.word	0x0801db23
 8019cdc:	0801de08 	.word	0x0801de08
 8019ce0:	0801daa7 	.word	0x0801daa7

08019ce4 <_free_r>:
 8019ce4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019ce6:	2900      	cmp	r1, #0
 8019ce8:	d044      	beq.n	8019d74 <_free_r+0x90>
 8019cea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019cee:	9001      	str	r0, [sp, #4]
 8019cf0:	2b00      	cmp	r3, #0
 8019cf2:	f1a1 0404 	sub.w	r4, r1, #4
 8019cf6:	bfb8      	it	lt
 8019cf8:	18e4      	addlt	r4, r4, r3
 8019cfa:	f7fd ffab 	bl	8017c54 <__malloc_lock>
 8019cfe:	4a1e      	ldr	r2, [pc, #120]	; (8019d78 <_free_r+0x94>)
 8019d00:	9801      	ldr	r0, [sp, #4]
 8019d02:	6813      	ldr	r3, [r2, #0]
 8019d04:	b933      	cbnz	r3, 8019d14 <_free_r+0x30>
 8019d06:	6063      	str	r3, [r4, #4]
 8019d08:	6014      	str	r4, [r2, #0]
 8019d0a:	b003      	add	sp, #12
 8019d0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019d10:	f7fd bfa6 	b.w	8017c60 <__malloc_unlock>
 8019d14:	42a3      	cmp	r3, r4
 8019d16:	d908      	bls.n	8019d2a <_free_r+0x46>
 8019d18:	6825      	ldr	r5, [r4, #0]
 8019d1a:	1961      	adds	r1, r4, r5
 8019d1c:	428b      	cmp	r3, r1
 8019d1e:	bf01      	itttt	eq
 8019d20:	6819      	ldreq	r1, [r3, #0]
 8019d22:	685b      	ldreq	r3, [r3, #4]
 8019d24:	1949      	addeq	r1, r1, r5
 8019d26:	6021      	streq	r1, [r4, #0]
 8019d28:	e7ed      	b.n	8019d06 <_free_r+0x22>
 8019d2a:	461a      	mov	r2, r3
 8019d2c:	685b      	ldr	r3, [r3, #4]
 8019d2e:	b10b      	cbz	r3, 8019d34 <_free_r+0x50>
 8019d30:	42a3      	cmp	r3, r4
 8019d32:	d9fa      	bls.n	8019d2a <_free_r+0x46>
 8019d34:	6811      	ldr	r1, [r2, #0]
 8019d36:	1855      	adds	r5, r2, r1
 8019d38:	42a5      	cmp	r5, r4
 8019d3a:	d10b      	bne.n	8019d54 <_free_r+0x70>
 8019d3c:	6824      	ldr	r4, [r4, #0]
 8019d3e:	4421      	add	r1, r4
 8019d40:	1854      	adds	r4, r2, r1
 8019d42:	42a3      	cmp	r3, r4
 8019d44:	6011      	str	r1, [r2, #0]
 8019d46:	d1e0      	bne.n	8019d0a <_free_r+0x26>
 8019d48:	681c      	ldr	r4, [r3, #0]
 8019d4a:	685b      	ldr	r3, [r3, #4]
 8019d4c:	6053      	str	r3, [r2, #4]
 8019d4e:	440c      	add	r4, r1
 8019d50:	6014      	str	r4, [r2, #0]
 8019d52:	e7da      	b.n	8019d0a <_free_r+0x26>
 8019d54:	d902      	bls.n	8019d5c <_free_r+0x78>
 8019d56:	230c      	movs	r3, #12
 8019d58:	6003      	str	r3, [r0, #0]
 8019d5a:	e7d6      	b.n	8019d0a <_free_r+0x26>
 8019d5c:	6825      	ldr	r5, [r4, #0]
 8019d5e:	1961      	adds	r1, r4, r5
 8019d60:	428b      	cmp	r3, r1
 8019d62:	bf04      	itt	eq
 8019d64:	6819      	ldreq	r1, [r3, #0]
 8019d66:	685b      	ldreq	r3, [r3, #4]
 8019d68:	6063      	str	r3, [r4, #4]
 8019d6a:	bf04      	itt	eq
 8019d6c:	1949      	addeq	r1, r1, r5
 8019d6e:	6021      	streq	r1, [r4, #0]
 8019d70:	6054      	str	r4, [r2, #4]
 8019d72:	e7ca      	b.n	8019d0a <_free_r+0x26>
 8019d74:	b003      	add	sp, #12
 8019d76:	bd30      	pop	{r4, r5, pc}
 8019d78:	20008340 	.word	0x20008340

08019d7c <_Balloc>:
 8019d7c:	b570      	push	{r4, r5, r6, lr}
 8019d7e:	69c6      	ldr	r6, [r0, #28]
 8019d80:	4604      	mov	r4, r0
 8019d82:	460d      	mov	r5, r1
 8019d84:	b976      	cbnz	r6, 8019da4 <_Balloc+0x28>
 8019d86:	2010      	movs	r0, #16
 8019d88:	f7fd feb4 	bl	8017af4 <malloc>
 8019d8c:	4602      	mov	r2, r0
 8019d8e:	61e0      	str	r0, [r4, #28]
 8019d90:	b920      	cbnz	r0, 8019d9c <_Balloc+0x20>
 8019d92:	4b18      	ldr	r3, [pc, #96]	; (8019df4 <_Balloc+0x78>)
 8019d94:	4818      	ldr	r0, [pc, #96]	; (8019df8 <_Balloc+0x7c>)
 8019d96:	216b      	movs	r1, #107	; 0x6b
 8019d98:	f002 faca 	bl	801c330 <__assert_func>
 8019d9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019da0:	6006      	str	r6, [r0, #0]
 8019da2:	60c6      	str	r6, [r0, #12]
 8019da4:	69e6      	ldr	r6, [r4, #28]
 8019da6:	68f3      	ldr	r3, [r6, #12]
 8019da8:	b183      	cbz	r3, 8019dcc <_Balloc+0x50>
 8019daa:	69e3      	ldr	r3, [r4, #28]
 8019dac:	68db      	ldr	r3, [r3, #12]
 8019dae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019db2:	b9b8      	cbnz	r0, 8019de4 <_Balloc+0x68>
 8019db4:	2101      	movs	r1, #1
 8019db6:	fa01 f605 	lsl.w	r6, r1, r5
 8019dba:	1d72      	adds	r2, r6, #5
 8019dbc:	0092      	lsls	r2, r2, #2
 8019dbe:	4620      	mov	r0, r4
 8019dc0:	f7fd fe82 	bl	8017ac8 <_calloc_r>
 8019dc4:	b160      	cbz	r0, 8019de0 <_Balloc+0x64>
 8019dc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8019dca:	e00e      	b.n	8019dea <_Balloc+0x6e>
 8019dcc:	2221      	movs	r2, #33	; 0x21
 8019dce:	2104      	movs	r1, #4
 8019dd0:	4620      	mov	r0, r4
 8019dd2:	f7fd fe79 	bl	8017ac8 <_calloc_r>
 8019dd6:	69e3      	ldr	r3, [r4, #28]
 8019dd8:	60f0      	str	r0, [r6, #12]
 8019dda:	68db      	ldr	r3, [r3, #12]
 8019ddc:	2b00      	cmp	r3, #0
 8019dde:	d1e4      	bne.n	8019daa <_Balloc+0x2e>
 8019de0:	2000      	movs	r0, #0
 8019de2:	bd70      	pop	{r4, r5, r6, pc}
 8019de4:	6802      	ldr	r2, [r0, #0]
 8019de6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019dea:	2300      	movs	r3, #0
 8019dec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019df0:	e7f7      	b.n	8019de2 <_Balloc+0x66>
 8019df2:	bf00      	nop
 8019df4:	0801dab4 	.word	0x0801dab4
 8019df8:	0801db34 	.word	0x0801db34

08019dfc <_Bfree>:
 8019dfc:	b570      	push	{r4, r5, r6, lr}
 8019dfe:	69c6      	ldr	r6, [r0, #28]
 8019e00:	4605      	mov	r5, r0
 8019e02:	460c      	mov	r4, r1
 8019e04:	b976      	cbnz	r6, 8019e24 <_Bfree+0x28>
 8019e06:	2010      	movs	r0, #16
 8019e08:	f7fd fe74 	bl	8017af4 <malloc>
 8019e0c:	4602      	mov	r2, r0
 8019e0e:	61e8      	str	r0, [r5, #28]
 8019e10:	b920      	cbnz	r0, 8019e1c <_Bfree+0x20>
 8019e12:	4b09      	ldr	r3, [pc, #36]	; (8019e38 <_Bfree+0x3c>)
 8019e14:	4809      	ldr	r0, [pc, #36]	; (8019e3c <_Bfree+0x40>)
 8019e16:	218f      	movs	r1, #143	; 0x8f
 8019e18:	f002 fa8a 	bl	801c330 <__assert_func>
 8019e1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019e20:	6006      	str	r6, [r0, #0]
 8019e22:	60c6      	str	r6, [r0, #12]
 8019e24:	b13c      	cbz	r4, 8019e36 <_Bfree+0x3a>
 8019e26:	69eb      	ldr	r3, [r5, #28]
 8019e28:	6862      	ldr	r2, [r4, #4]
 8019e2a:	68db      	ldr	r3, [r3, #12]
 8019e2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019e30:	6021      	str	r1, [r4, #0]
 8019e32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019e36:	bd70      	pop	{r4, r5, r6, pc}
 8019e38:	0801dab4 	.word	0x0801dab4
 8019e3c:	0801db34 	.word	0x0801db34

08019e40 <__multadd>:
 8019e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e44:	690d      	ldr	r5, [r1, #16]
 8019e46:	4607      	mov	r7, r0
 8019e48:	460c      	mov	r4, r1
 8019e4a:	461e      	mov	r6, r3
 8019e4c:	f101 0c14 	add.w	ip, r1, #20
 8019e50:	2000      	movs	r0, #0
 8019e52:	f8dc 3000 	ldr.w	r3, [ip]
 8019e56:	b299      	uxth	r1, r3
 8019e58:	fb02 6101 	mla	r1, r2, r1, r6
 8019e5c:	0c1e      	lsrs	r6, r3, #16
 8019e5e:	0c0b      	lsrs	r3, r1, #16
 8019e60:	fb02 3306 	mla	r3, r2, r6, r3
 8019e64:	b289      	uxth	r1, r1
 8019e66:	3001      	adds	r0, #1
 8019e68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8019e6c:	4285      	cmp	r5, r0
 8019e6e:	f84c 1b04 	str.w	r1, [ip], #4
 8019e72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8019e76:	dcec      	bgt.n	8019e52 <__multadd+0x12>
 8019e78:	b30e      	cbz	r6, 8019ebe <__multadd+0x7e>
 8019e7a:	68a3      	ldr	r3, [r4, #8]
 8019e7c:	42ab      	cmp	r3, r5
 8019e7e:	dc19      	bgt.n	8019eb4 <__multadd+0x74>
 8019e80:	6861      	ldr	r1, [r4, #4]
 8019e82:	4638      	mov	r0, r7
 8019e84:	3101      	adds	r1, #1
 8019e86:	f7ff ff79 	bl	8019d7c <_Balloc>
 8019e8a:	4680      	mov	r8, r0
 8019e8c:	b928      	cbnz	r0, 8019e9a <__multadd+0x5a>
 8019e8e:	4602      	mov	r2, r0
 8019e90:	4b0c      	ldr	r3, [pc, #48]	; (8019ec4 <__multadd+0x84>)
 8019e92:	480d      	ldr	r0, [pc, #52]	; (8019ec8 <__multadd+0x88>)
 8019e94:	21ba      	movs	r1, #186	; 0xba
 8019e96:	f002 fa4b 	bl	801c330 <__assert_func>
 8019e9a:	6922      	ldr	r2, [r4, #16]
 8019e9c:	3202      	adds	r2, #2
 8019e9e:	f104 010c 	add.w	r1, r4, #12
 8019ea2:	0092      	lsls	r2, r2, #2
 8019ea4:	300c      	adds	r0, #12
 8019ea6:	f7ff f88f 	bl	8018fc8 <memcpy>
 8019eaa:	4621      	mov	r1, r4
 8019eac:	4638      	mov	r0, r7
 8019eae:	f7ff ffa5 	bl	8019dfc <_Bfree>
 8019eb2:	4644      	mov	r4, r8
 8019eb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8019eb8:	3501      	adds	r5, #1
 8019eba:	615e      	str	r6, [r3, #20]
 8019ebc:	6125      	str	r5, [r4, #16]
 8019ebe:	4620      	mov	r0, r4
 8019ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ec4:	0801db23 	.word	0x0801db23
 8019ec8:	0801db34 	.word	0x0801db34

08019ecc <__s2b>:
 8019ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019ed0:	460c      	mov	r4, r1
 8019ed2:	4615      	mov	r5, r2
 8019ed4:	461f      	mov	r7, r3
 8019ed6:	2209      	movs	r2, #9
 8019ed8:	3308      	adds	r3, #8
 8019eda:	4606      	mov	r6, r0
 8019edc:	fb93 f3f2 	sdiv	r3, r3, r2
 8019ee0:	2100      	movs	r1, #0
 8019ee2:	2201      	movs	r2, #1
 8019ee4:	429a      	cmp	r2, r3
 8019ee6:	db09      	blt.n	8019efc <__s2b+0x30>
 8019ee8:	4630      	mov	r0, r6
 8019eea:	f7ff ff47 	bl	8019d7c <_Balloc>
 8019eee:	b940      	cbnz	r0, 8019f02 <__s2b+0x36>
 8019ef0:	4602      	mov	r2, r0
 8019ef2:	4b19      	ldr	r3, [pc, #100]	; (8019f58 <__s2b+0x8c>)
 8019ef4:	4819      	ldr	r0, [pc, #100]	; (8019f5c <__s2b+0x90>)
 8019ef6:	21d3      	movs	r1, #211	; 0xd3
 8019ef8:	f002 fa1a 	bl	801c330 <__assert_func>
 8019efc:	0052      	lsls	r2, r2, #1
 8019efe:	3101      	adds	r1, #1
 8019f00:	e7f0      	b.n	8019ee4 <__s2b+0x18>
 8019f02:	9b08      	ldr	r3, [sp, #32]
 8019f04:	6143      	str	r3, [r0, #20]
 8019f06:	2d09      	cmp	r5, #9
 8019f08:	f04f 0301 	mov.w	r3, #1
 8019f0c:	6103      	str	r3, [r0, #16]
 8019f0e:	dd16      	ble.n	8019f3e <__s2b+0x72>
 8019f10:	f104 0909 	add.w	r9, r4, #9
 8019f14:	46c8      	mov	r8, r9
 8019f16:	442c      	add	r4, r5
 8019f18:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019f1c:	4601      	mov	r1, r0
 8019f1e:	3b30      	subs	r3, #48	; 0x30
 8019f20:	220a      	movs	r2, #10
 8019f22:	4630      	mov	r0, r6
 8019f24:	f7ff ff8c 	bl	8019e40 <__multadd>
 8019f28:	45a0      	cmp	r8, r4
 8019f2a:	d1f5      	bne.n	8019f18 <__s2b+0x4c>
 8019f2c:	f1a5 0408 	sub.w	r4, r5, #8
 8019f30:	444c      	add	r4, r9
 8019f32:	1b2d      	subs	r5, r5, r4
 8019f34:	1963      	adds	r3, r4, r5
 8019f36:	42bb      	cmp	r3, r7
 8019f38:	db04      	blt.n	8019f44 <__s2b+0x78>
 8019f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019f3e:	340a      	adds	r4, #10
 8019f40:	2509      	movs	r5, #9
 8019f42:	e7f6      	b.n	8019f32 <__s2b+0x66>
 8019f44:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019f48:	4601      	mov	r1, r0
 8019f4a:	3b30      	subs	r3, #48	; 0x30
 8019f4c:	220a      	movs	r2, #10
 8019f4e:	4630      	mov	r0, r6
 8019f50:	f7ff ff76 	bl	8019e40 <__multadd>
 8019f54:	e7ee      	b.n	8019f34 <__s2b+0x68>
 8019f56:	bf00      	nop
 8019f58:	0801db23 	.word	0x0801db23
 8019f5c:	0801db34 	.word	0x0801db34

08019f60 <__hi0bits>:
 8019f60:	0c03      	lsrs	r3, r0, #16
 8019f62:	041b      	lsls	r3, r3, #16
 8019f64:	b9d3      	cbnz	r3, 8019f9c <__hi0bits+0x3c>
 8019f66:	0400      	lsls	r0, r0, #16
 8019f68:	2310      	movs	r3, #16
 8019f6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019f6e:	bf04      	itt	eq
 8019f70:	0200      	lsleq	r0, r0, #8
 8019f72:	3308      	addeq	r3, #8
 8019f74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019f78:	bf04      	itt	eq
 8019f7a:	0100      	lsleq	r0, r0, #4
 8019f7c:	3304      	addeq	r3, #4
 8019f7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8019f82:	bf04      	itt	eq
 8019f84:	0080      	lsleq	r0, r0, #2
 8019f86:	3302      	addeq	r3, #2
 8019f88:	2800      	cmp	r0, #0
 8019f8a:	db05      	blt.n	8019f98 <__hi0bits+0x38>
 8019f8c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019f90:	f103 0301 	add.w	r3, r3, #1
 8019f94:	bf08      	it	eq
 8019f96:	2320      	moveq	r3, #32
 8019f98:	4618      	mov	r0, r3
 8019f9a:	4770      	bx	lr
 8019f9c:	2300      	movs	r3, #0
 8019f9e:	e7e4      	b.n	8019f6a <__hi0bits+0xa>

08019fa0 <__lo0bits>:
 8019fa0:	6803      	ldr	r3, [r0, #0]
 8019fa2:	f013 0207 	ands.w	r2, r3, #7
 8019fa6:	d00c      	beq.n	8019fc2 <__lo0bits+0x22>
 8019fa8:	07d9      	lsls	r1, r3, #31
 8019faa:	d422      	bmi.n	8019ff2 <__lo0bits+0x52>
 8019fac:	079a      	lsls	r2, r3, #30
 8019fae:	bf49      	itett	mi
 8019fb0:	085b      	lsrmi	r3, r3, #1
 8019fb2:	089b      	lsrpl	r3, r3, #2
 8019fb4:	6003      	strmi	r3, [r0, #0]
 8019fb6:	2201      	movmi	r2, #1
 8019fb8:	bf5c      	itt	pl
 8019fba:	6003      	strpl	r3, [r0, #0]
 8019fbc:	2202      	movpl	r2, #2
 8019fbe:	4610      	mov	r0, r2
 8019fc0:	4770      	bx	lr
 8019fc2:	b299      	uxth	r1, r3
 8019fc4:	b909      	cbnz	r1, 8019fca <__lo0bits+0x2a>
 8019fc6:	0c1b      	lsrs	r3, r3, #16
 8019fc8:	2210      	movs	r2, #16
 8019fca:	b2d9      	uxtb	r1, r3
 8019fcc:	b909      	cbnz	r1, 8019fd2 <__lo0bits+0x32>
 8019fce:	3208      	adds	r2, #8
 8019fd0:	0a1b      	lsrs	r3, r3, #8
 8019fd2:	0719      	lsls	r1, r3, #28
 8019fd4:	bf04      	itt	eq
 8019fd6:	091b      	lsreq	r3, r3, #4
 8019fd8:	3204      	addeq	r2, #4
 8019fda:	0799      	lsls	r1, r3, #30
 8019fdc:	bf04      	itt	eq
 8019fde:	089b      	lsreq	r3, r3, #2
 8019fe0:	3202      	addeq	r2, #2
 8019fe2:	07d9      	lsls	r1, r3, #31
 8019fe4:	d403      	bmi.n	8019fee <__lo0bits+0x4e>
 8019fe6:	085b      	lsrs	r3, r3, #1
 8019fe8:	f102 0201 	add.w	r2, r2, #1
 8019fec:	d003      	beq.n	8019ff6 <__lo0bits+0x56>
 8019fee:	6003      	str	r3, [r0, #0]
 8019ff0:	e7e5      	b.n	8019fbe <__lo0bits+0x1e>
 8019ff2:	2200      	movs	r2, #0
 8019ff4:	e7e3      	b.n	8019fbe <__lo0bits+0x1e>
 8019ff6:	2220      	movs	r2, #32
 8019ff8:	e7e1      	b.n	8019fbe <__lo0bits+0x1e>
	...

08019ffc <__i2b>:
 8019ffc:	b510      	push	{r4, lr}
 8019ffe:	460c      	mov	r4, r1
 801a000:	2101      	movs	r1, #1
 801a002:	f7ff febb 	bl	8019d7c <_Balloc>
 801a006:	4602      	mov	r2, r0
 801a008:	b928      	cbnz	r0, 801a016 <__i2b+0x1a>
 801a00a:	4b05      	ldr	r3, [pc, #20]	; (801a020 <__i2b+0x24>)
 801a00c:	4805      	ldr	r0, [pc, #20]	; (801a024 <__i2b+0x28>)
 801a00e:	f240 1145 	movw	r1, #325	; 0x145
 801a012:	f002 f98d 	bl	801c330 <__assert_func>
 801a016:	2301      	movs	r3, #1
 801a018:	6144      	str	r4, [r0, #20]
 801a01a:	6103      	str	r3, [r0, #16]
 801a01c:	bd10      	pop	{r4, pc}
 801a01e:	bf00      	nop
 801a020:	0801db23 	.word	0x0801db23
 801a024:	0801db34 	.word	0x0801db34

0801a028 <__multiply>:
 801a028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a02c:	4691      	mov	r9, r2
 801a02e:	690a      	ldr	r2, [r1, #16]
 801a030:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a034:	429a      	cmp	r2, r3
 801a036:	bfb8      	it	lt
 801a038:	460b      	movlt	r3, r1
 801a03a:	460c      	mov	r4, r1
 801a03c:	bfbc      	itt	lt
 801a03e:	464c      	movlt	r4, r9
 801a040:	4699      	movlt	r9, r3
 801a042:	6927      	ldr	r7, [r4, #16]
 801a044:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801a048:	68a3      	ldr	r3, [r4, #8]
 801a04a:	6861      	ldr	r1, [r4, #4]
 801a04c:	eb07 060a 	add.w	r6, r7, sl
 801a050:	42b3      	cmp	r3, r6
 801a052:	b085      	sub	sp, #20
 801a054:	bfb8      	it	lt
 801a056:	3101      	addlt	r1, #1
 801a058:	f7ff fe90 	bl	8019d7c <_Balloc>
 801a05c:	b930      	cbnz	r0, 801a06c <__multiply+0x44>
 801a05e:	4602      	mov	r2, r0
 801a060:	4b44      	ldr	r3, [pc, #272]	; (801a174 <__multiply+0x14c>)
 801a062:	4845      	ldr	r0, [pc, #276]	; (801a178 <__multiply+0x150>)
 801a064:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801a068:	f002 f962 	bl	801c330 <__assert_func>
 801a06c:	f100 0514 	add.w	r5, r0, #20
 801a070:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801a074:	462b      	mov	r3, r5
 801a076:	2200      	movs	r2, #0
 801a078:	4543      	cmp	r3, r8
 801a07a:	d321      	bcc.n	801a0c0 <__multiply+0x98>
 801a07c:	f104 0314 	add.w	r3, r4, #20
 801a080:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801a084:	f109 0314 	add.w	r3, r9, #20
 801a088:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801a08c:	9202      	str	r2, [sp, #8]
 801a08e:	1b3a      	subs	r2, r7, r4
 801a090:	3a15      	subs	r2, #21
 801a092:	f022 0203 	bic.w	r2, r2, #3
 801a096:	3204      	adds	r2, #4
 801a098:	f104 0115 	add.w	r1, r4, #21
 801a09c:	428f      	cmp	r7, r1
 801a09e:	bf38      	it	cc
 801a0a0:	2204      	movcc	r2, #4
 801a0a2:	9201      	str	r2, [sp, #4]
 801a0a4:	9a02      	ldr	r2, [sp, #8]
 801a0a6:	9303      	str	r3, [sp, #12]
 801a0a8:	429a      	cmp	r2, r3
 801a0aa:	d80c      	bhi.n	801a0c6 <__multiply+0x9e>
 801a0ac:	2e00      	cmp	r6, #0
 801a0ae:	dd03      	ble.n	801a0b8 <__multiply+0x90>
 801a0b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	d05b      	beq.n	801a170 <__multiply+0x148>
 801a0b8:	6106      	str	r6, [r0, #16]
 801a0ba:	b005      	add	sp, #20
 801a0bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0c0:	f843 2b04 	str.w	r2, [r3], #4
 801a0c4:	e7d8      	b.n	801a078 <__multiply+0x50>
 801a0c6:	f8b3 a000 	ldrh.w	sl, [r3]
 801a0ca:	f1ba 0f00 	cmp.w	sl, #0
 801a0ce:	d024      	beq.n	801a11a <__multiply+0xf2>
 801a0d0:	f104 0e14 	add.w	lr, r4, #20
 801a0d4:	46a9      	mov	r9, r5
 801a0d6:	f04f 0c00 	mov.w	ip, #0
 801a0da:	f85e 2b04 	ldr.w	r2, [lr], #4
 801a0de:	f8d9 1000 	ldr.w	r1, [r9]
 801a0e2:	fa1f fb82 	uxth.w	fp, r2
 801a0e6:	b289      	uxth	r1, r1
 801a0e8:	fb0a 110b 	mla	r1, sl, fp, r1
 801a0ec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801a0f0:	f8d9 2000 	ldr.w	r2, [r9]
 801a0f4:	4461      	add	r1, ip
 801a0f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801a0fa:	fb0a c20b 	mla	r2, sl, fp, ip
 801a0fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801a102:	b289      	uxth	r1, r1
 801a104:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801a108:	4577      	cmp	r7, lr
 801a10a:	f849 1b04 	str.w	r1, [r9], #4
 801a10e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801a112:	d8e2      	bhi.n	801a0da <__multiply+0xb2>
 801a114:	9a01      	ldr	r2, [sp, #4]
 801a116:	f845 c002 	str.w	ip, [r5, r2]
 801a11a:	9a03      	ldr	r2, [sp, #12]
 801a11c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801a120:	3304      	adds	r3, #4
 801a122:	f1b9 0f00 	cmp.w	r9, #0
 801a126:	d021      	beq.n	801a16c <__multiply+0x144>
 801a128:	6829      	ldr	r1, [r5, #0]
 801a12a:	f104 0c14 	add.w	ip, r4, #20
 801a12e:	46ae      	mov	lr, r5
 801a130:	f04f 0a00 	mov.w	sl, #0
 801a134:	f8bc b000 	ldrh.w	fp, [ip]
 801a138:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801a13c:	fb09 220b 	mla	r2, r9, fp, r2
 801a140:	4452      	add	r2, sl
 801a142:	b289      	uxth	r1, r1
 801a144:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801a148:	f84e 1b04 	str.w	r1, [lr], #4
 801a14c:	f85c 1b04 	ldr.w	r1, [ip], #4
 801a150:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801a154:	f8be 1000 	ldrh.w	r1, [lr]
 801a158:	fb09 110a 	mla	r1, r9, sl, r1
 801a15c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801a160:	4567      	cmp	r7, ip
 801a162:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801a166:	d8e5      	bhi.n	801a134 <__multiply+0x10c>
 801a168:	9a01      	ldr	r2, [sp, #4]
 801a16a:	50a9      	str	r1, [r5, r2]
 801a16c:	3504      	adds	r5, #4
 801a16e:	e799      	b.n	801a0a4 <__multiply+0x7c>
 801a170:	3e01      	subs	r6, #1
 801a172:	e79b      	b.n	801a0ac <__multiply+0x84>
 801a174:	0801db23 	.word	0x0801db23
 801a178:	0801db34 	.word	0x0801db34

0801a17c <__pow5mult>:
 801a17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a180:	4615      	mov	r5, r2
 801a182:	f012 0203 	ands.w	r2, r2, #3
 801a186:	4606      	mov	r6, r0
 801a188:	460f      	mov	r7, r1
 801a18a:	d007      	beq.n	801a19c <__pow5mult+0x20>
 801a18c:	4c25      	ldr	r4, [pc, #148]	; (801a224 <__pow5mult+0xa8>)
 801a18e:	3a01      	subs	r2, #1
 801a190:	2300      	movs	r3, #0
 801a192:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a196:	f7ff fe53 	bl	8019e40 <__multadd>
 801a19a:	4607      	mov	r7, r0
 801a19c:	10ad      	asrs	r5, r5, #2
 801a19e:	d03d      	beq.n	801a21c <__pow5mult+0xa0>
 801a1a0:	69f4      	ldr	r4, [r6, #28]
 801a1a2:	b97c      	cbnz	r4, 801a1c4 <__pow5mult+0x48>
 801a1a4:	2010      	movs	r0, #16
 801a1a6:	f7fd fca5 	bl	8017af4 <malloc>
 801a1aa:	4602      	mov	r2, r0
 801a1ac:	61f0      	str	r0, [r6, #28]
 801a1ae:	b928      	cbnz	r0, 801a1bc <__pow5mult+0x40>
 801a1b0:	4b1d      	ldr	r3, [pc, #116]	; (801a228 <__pow5mult+0xac>)
 801a1b2:	481e      	ldr	r0, [pc, #120]	; (801a22c <__pow5mult+0xb0>)
 801a1b4:	f240 11b3 	movw	r1, #435	; 0x1b3
 801a1b8:	f002 f8ba 	bl	801c330 <__assert_func>
 801a1bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a1c0:	6004      	str	r4, [r0, #0]
 801a1c2:	60c4      	str	r4, [r0, #12]
 801a1c4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801a1c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a1cc:	b94c      	cbnz	r4, 801a1e2 <__pow5mult+0x66>
 801a1ce:	f240 2171 	movw	r1, #625	; 0x271
 801a1d2:	4630      	mov	r0, r6
 801a1d4:	f7ff ff12 	bl	8019ffc <__i2b>
 801a1d8:	2300      	movs	r3, #0
 801a1da:	f8c8 0008 	str.w	r0, [r8, #8]
 801a1de:	4604      	mov	r4, r0
 801a1e0:	6003      	str	r3, [r0, #0]
 801a1e2:	f04f 0900 	mov.w	r9, #0
 801a1e6:	07eb      	lsls	r3, r5, #31
 801a1e8:	d50a      	bpl.n	801a200 <__pow5mult+0x84>
 801a1ea:	4639      	mov	r1, r7
 801a1ec:	4622      	mov	r2, r4
 801a1ee:	4630      	mov	r0, r6
 801a1f0:	f7ff ff1a 	bl	801a028 <__multiply>
 801a1f4:	4639      	mov	r1, r7
 801a1f6:	4680      	mov	r8, r0
 801a1f8:	4630      	mov	r0, r6
 801a1fa:	f7ff fdff 	bl	8019dfc <_Bfree>
 801a1fe:	4647      	mov	r7, r8
 801a200:	106d      	asrs	r5, r5, #1
 801a202:	d00b      	beq.n	801a21c <__pow5mult+0xa0>
 801a204:	6820      	ldr	r0, [r4, #0]
 801a206:	b938      	cbnz	r0, 801a218 <__pow5mult+0x9c>
 801a208:	4622      	mov	r2, r4
 801a20a:	4621      	mov	r1, r4
 801a20c:	4630      	mov	r0, r6
 801a20e:	f7ff ff0b 	bl	801a028 <__multiply>
 801a212:	6020      	str	r0, [r4, #0]
 801a214:	f8c0 9000 	str.w	r9, [r0]
 801a218:	4604      	mov	r4, r0
 801a21a:	e7e4      	b.n	801a1e6 <__pow5mult+0x6a>
 801a21c:	4638      	mov	r0, r7
 801a21e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a222:	bf00      	nop
 801a224:	0801dc80 	.word	0x0801dc80
 801a228:	0801dab4 	.word	0x0801dab4
 801a22c:	0801db34 	.word	0x0801db34

0801a230 <__lshift>:
 801a230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a234:	460c      	mov	r4, r1
 801a236:	6849      	ldr	r1, [r1, #4]
 801a238:	6923      	ldr	r3, [r4, #16]
 801a23a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a23e:	68a3      	ldr	r3, [r4, #8]
 801a240:	4607      	mov	r7, r0
 801a242:	4691      	mov	r9, r2
 801a244:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a248:	f108 0601 	add.w	r6, r8, #1
 801a24c:	42b3      	cmp	r3, r6
 801a24e:	db0b      	blt.n	801a268 <__lshift+0x38>
 801a250:	4638      	mov	r0, r7
 801a252:	f7ff fd93 	bl	8019d7c <_Balloc>
 801a256:	4605      	mov	r5, r0
 801a258:	b948      	cbnz	r0, 801a26e <__lshift+0x3e>
 801a25a:	4602      	mov	r2, r0
 801a25c:	4b28      	ldr	r3, [pc, #160]	; (801a300 <__lshift+0xd0>)
 801a25e:	4829      	ldr	r0, [pc, #164]	; (801a304 <__lshift+0xd4>)
 801a260:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801a264:	f002 f864 	bl	801c330 <__assert_func>
 801a268:	3101      	adds	r1, #1
 801a26a:	005b      	lsls	r3, r3, #1
 801a26c:	e7ee      	b.n	801a24c <__lshift+0x1c>
 801a26e:	2300      	movs	r3, #0
 801a270:	f100 0114 	add.w	r1, r0, #20
 801a274:	f100 0210 	add.w	r2, r0, #16
 801a278:	4618      	mov	r0, r3
 801a27a:	4553      	cmp	r3, sl
 801a27c:	db33      	blt.n	801a2e6 <__lshift+0xb6>
 801a27e:	6920      	ldr	r0, [r4, #16]
 801a280:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a284:	f104 0314 	add.w	r3, r4, #20
 801a288:	f019 091f 	ands.w	r9, r9, #31
 801a28c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a290:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a294:	d02b      	beq.n	801a2ee <__lshift+0xbe>
 801a296:	f1c9 0e20 	rsb	lr, r9, #32
 801a29a:	468a      	mov	sl, r1
 801a29c:	2200      	movs	r2, #0
 801a29e:	6818      	ldr	r0, [r3, #0]
 801a2a0:	fa00 f009 	lsl.w	r0, r0, r9
 801a2a4:	4310      	orrs	r0, r2
 801a2a6:	f84a 0b04 	str.w	r0, [sl], #4
 801a2aa:	f853 2b04 	ldr.w	r2, [r3], #4
 801a2ae:	459c      	cmp	ip, r3
 801a2b0:	fa22 f20e 	lsr.w	r2, r2, lr
 801a2b4:	d8f3      	bhi.n	801a29e <__lshift+0x6e>
 801a2b6:	ebac 0304 	sub.w	r3, ip, r4
 801a2ba:	3b15      	subs	r3, #21
 801a2bc:	f023 0303 	bic.w	r3, r3, #3
 801a2c0:	3304      	adds	r3, #4
 801a2c2:	f104 0015 	add.w	r0, r4, #21
 801a2c6:	4584      	cmp	ip, r0
 801a2c8:	bf38      	it	cc
 801a2ca:	2304      	movcc	r3, #4
 801a2cc:	50ca      	str	r2, [r1, r3]
 801a2ce:	b10a      	cbz	r2, 801a2d4 <__lshift+0xa4>
 801a2d0:	f108 0602 	add.w	r6, r8, #2
 801a2d4:	3e01      	subs	r6, #1
 801a2d6:	4638      	mov	r0, r7
 801a2d8:	612e      	str	r6, [r5, #16]
 801a2da:	4621      	mov	r1, r4
 801a2dc:	f7ff fd8e 	bl	8019dfc <_Bfree>
 801a2e0:	4628      	mov	r0, r5
 801a2e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a2e6:	f842 0f04 	str.w	r0, [r2, #4]!
 801a2ea:	3301      	adds	r3, #1
 801a2ec:	e7c5      	b.n	801a27a <__lshift+0x4a>
 801a2ee:	3904      	subs	r1, #4
 801a2f0:	f853 2b04 	ldr.w	r2, [r3], #4
 801a2f4:	f841 2f04 	str.w	r2, [r1, #4]!
 801a2f8:	459c      	cmp	ip, r3
 801a2fa:	d8f9      	bhi.n	801a2f0 <__lshift+0xc0>
 801a2fc:	e7ea      	b.n	801a2d4 <__lshift+0xa4>
 801a2fe:	bf00      	nop
 801a300:	0801db23 	.word	0x0801db23
 801a304:	0801db34 	.word	0x0801db34

0801a308 <__mcmp>:
 801a308:	b530      	push	{r4, r5, lr}
 801a30a:	6902      	ldr	r2, [r0, #16]
 801a30c:	690c      	ldr	r4, [r1, #16]
 801a30e:	1b12      	subs	r2, r2, r4
 801a310:	d10e      	bne.n	801a330 <__mcmp+0x28>
 801a312:	f100 0314 	add.w	r3, r0, #20
 801a316:	3114      	adds	r1, #20
 801a318:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801a31c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801a320:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801a324:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801a328:	42a5      	cmp	r5, r4
 801a32a:	d003      	beq.n	801a334 <__mcmp+0x2c>
 801a32c:	d305      	bcc.n	801a33a <__mcmp+0x32>
 801a32e:	2201      	movs	r2, #1
 801a330:	4610      	mov	r0, r2
 801a332:	bd30      	pop	{r4, r5, pc}
 801a334:	4283      	cmp	r3, r0
 801a336:	d3f3      	bcc.n	801a320 <__mcmp+0x18>
 801a338:	e7fa      	b.n	801a330 <__mcmp+0x28>
 801a33a:	f04f 32ff 	mov.w	r2, #4294967295
 801a33e:	e7f7      	b.n	801a330 <__mcmp+0x28>

0801a340 <__mdiff>:
 801a340:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a344:	460c      	mov	r4, r1
 801a346:	4606      	mov	r6, r0
 801a348:	4611      	mov	r1, r2
 801a34a:	4620      	mov	r0, r4
 801a34c:	4690      	mov	r8, r2
 801a34e:	f7ff ffdb 	bl	801a308 <__mcmp>
 801a352:	1e05      	subs	r5, r0, #0
 801a354:	d110      	bne.n	801a378 <__mdiff+0x38>
 801a356:	4629      	mov	r1, r5
 801a358:	4630      	mov	r0, r6
 801a35a:	f7ff fd0f 	bl	8019d7c <_Balloc>
 801a35e:	b930      	cbnz	r0, 801a36e <__mdiff+0x2e>
 801a360:	4b3a      	ldr	r3, [pc, #232]	; (801a44c <__mdiff+0x10c>)
 801a362:	4602      	mov	r2, r0
 801a364:	f240 2137 	movw	r1, #567	; 0x237
 801a368:	4839      	ldr	r0, [pc, #228]	; (801a450 <__mdiff+0x110>)
 801a36a:	f001 ffe1 	bl	801c330 <__assert_func>
 801a36e:	2301      	movs	r3, #1
 801a370:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a374:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a378:	bfa4      	itt	ge
 801a37a:	4643      	movge	r3, r8
 801a37c:	46a0      	movge	r8, r4
 801a37e:	4630      	mov	r0, r6
 801a380:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801a384:	bfa6      	itte	ge
 801a386:	461c      	movge	r4, r3
 801a388:	2500      	movge	r5, #0
 801a38a:	2501      	movlt	r5, #1
 801a38c:	f7ff fcf6 	bl	8019d7c <_Balloc>
 801a390:	b920      	cbnz	r0, 801a39c <__mdiff+0x5c>
 801a392:	4b2e      	ldr	r3, [pc, #184]	; (801a44c <__mdiff+0x10c>)
 801a394:	4602      	mov	r2, r0
 801a396:	f240 2145 	movw	r1, #581	; 0x245
 801a39a:	e7e5      	b.n	801a368 <__mdiff+0x28>
 801a39c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801a3a0:	6926      	ldr	r6, [r4, #16]
 801a3a2:	60c5      	str	r5, [r0, #12]
 801a3a4:	f104 0914 	add.w	r9, r4, #20
 801a3a8:	f108 0514 	add.w	r5, r8, #20
 801a3ac:	f100 0e14 	add.w	lr, r0, #20
 801a3b0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801a3b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801a3b8:	f108 0210 	add.w	r2, r8, #16
 801a3bc:	46f2      	mov	sl, lr
 801a3be:	2100      	movs	r1, #0
 801a3c0:	f859 3b04 	ldr.w	r3, [r9], #4
 801a3c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801a3c8:	fa11 f88b 	uxtah	r8, r1, fp
 801a3cc:	b299      	uxth	r1, r3
 801a3ce:	0c1b      	lsrs	r3, r3, #16
 801a3d0:	eba8 0801 	sub.w	r8, r8, r1
 801a3d4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801a3d8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801a3dc:	fa1f f888 	uxth.w	r8, r8
 801a3e0:	1419      	asrs	r1, r3, #16
 801a3e2:	454e      	cmp	r6, r9
 801a3e4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801a3e8:	f84a 3b04 	str.w	r3, [sl], #4
 801a3ec:	d8e8      	bhi.n	801a3c0 <__mdiff+0x80>
 801a3ee:	1b33      	subs	r3, r6, r4
 801a3f0:	3b15      	subs	r3, #21
 801a3f2:	f023 0303 	bic.w	r3, r3, #3
 801a3f6:	3304      	adds	r3, #4
 801a3f8:	3415      	adds	r4, #21
 801a3fa:	42a6      	cmp	r6, r4
 801a3fc:	bf38      	it	cc
 801a3fe:	2304      	movcc	r3, #4
 801a400:	441d      	add	r5, r3
 801a402:	4473      	add	r3, lr
 801a404:	469e      	mov	lr, r3
 801a406:	462e      	mov	r6, r5
 801a408:	4566      	cmp	r6, ip
 801a40a:	d30e      	bcc.n	801a42a <__mdiff+0xea>
 801a40c:	f10c 0203 	add.w	r2, ip, #3
 801a410:	1b52      	subs	r2, r2, r5
 801a412:	f022 0203 	bic.w	r2, r2, #3
 801a416:	3d03      	subs	r5, #3
 801a418:	45ac      	cmp	ip, r5
 801a41a:	bf38      	it	cc
 801a41c:	2200      	movcc	r2, #0
 801a41e:	4413      	add	r3, r2
 801a420:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801a424:	b17a      	cbz	r2, 801a446 <__mdiff+0x106>
 801a426:	6107      	str	r7, [r0, #16]
 801a428:	e7a4      	b.n	801a374 <__mdiff+0x34>
 801a42a:	f856 8b04 	ldr.w	r8, [r6], #4
 801a42e:	fa11 f288 	uxtah	r2, r1, r8
 801a432:	1414      	asrs	r4, r2, #16
 801a434:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801a438:	b292      	uxth	r2, r2
 801a43a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801a43e:	f84e 2b04 	str.w	r2, [lr], #4
 801a442:	1421      	asrs	r1, r4, #16
 801a444:	e7e0      	b.n	801a408 <__mdiff+0xc8>
 801a446:	3f01      	subs	r7, #1
 801a448:	e7ea      	b.n	801a420 <__mdiff+0xe0>
 801a44a:	bf00      	nop
 801a44c:	0801db23 	.word	0x0801db23
 801a450:	0801db34 	.word	0x0801db34

0801a454 <__ulp>:
 801a454:	b082      	sub	sp, #8
 801a456:	ed8d 0b00 	vstr	d0, [sp]
 801a45a:	9a01      	ldr	r2, [sp, #4]
 801a45c:	4b0f      	ldr	r3, [pc, #60]	; (801a49c <__ulp+0x48>)
 801a45e:	4013      	ands	r3, r2
 801a460:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801a464:	2b00      	cmp	r3, #0
 801a466:	dc08      	bgt.n	801a47a <__ulp+0x26>
 801a468:	425b      	negs	r3, r3
 801a46a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801a46e:	ea4f 5223 	mov.w	r2, r3, asr #20
 801a472:	da04      	bge.n	801a47e <__ulp+0x2a>
 801a474:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801a478:	4113      	asrs	r3, r2
 801a47a:	2200      	movs	r2, #0
 801a47c:	e008      	b.n	801a490 <__ulp+0x3c>
 801a47e:	f1a2 0314 	sub.w	r3, r2, #20
 801a482:	2b1e      	cmp	r3, #30
 801a484:	bfda      	itte	le
 801a486:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801a48a:	40da      	lsrle	r2, r3
 801a48c:	2201      	movgt	r2, #1
 801a48e:	2300      	movs	r3, #0
 801a490:	4619      	mov	r1, r3
 801a492:	4610      	mov	r0, r2
 801a494:	ec41 0b10 	vmov	d0, r0, r1
 801a498:	b002      	add	sp, #8
 801a49a:	4770      	bx	lr
 801a49c:	7ff00000 	.word	0x7ff00000

0801a4a0 <__b2d>:
 801a4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4a4:	6906      	ldr	r6, [r0, #16]
 801a4a6:	f100 0814 	add.w	r8, r0, #20
 801a4aa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801a4ae:	1f37      	subs	r7, r6, #4
 801a4b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801a4b4:	4610      	mov	r0, r2
 801a4b6:	f7ff fd53 	bl	8019f60 <__hi0bits>
 801a4ba:	f1c0 0320 	rsb	r3, r0, #32
 801a4be:	280a      	cmp	r0, #10
 801a4c0:	600b      	str	r3, [r1, #0]
 801a4c2:	491b      	ldr	r1, [pc, #108]	; (801a530 <__b2d+0x90>)
 801a4c4:	dc15      	bgt.n	801a4f2 <__b2d+0x52>
 801a4c6:	f1c0 0c0b 	rsb	ip, r0, #11
 801a4ca:	fa22 f30c 	lsr.w	r3, r2, ip
 801a4ce:	45b8      	cmp	r8, r7
 801a4d0:	ea43 0501 	orr.w	r5, r3, r1
 801a4d4:	bf34      	ite	cc
 801a4d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801a4da:	2300      	movcs	r3, #0
 801a4dc:	3015      	adds	r0, #21
 801a4de:	fa02 f000 	lsl.w	r0, r2, r0
 801a4e2:	fa23 f30c 	lsr.w	r3, r3, ip
 801a4e6:	4303      	orrs	r3, r0
 801a4e8:	461c      	mov	r4, r3
 801a4ea:	ec45 4b10 	vmov	d0, r4, r5
 801a4ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a4f2:	45b8      	cmp	r8, r7
 801a4f4:	bf3a      	itte	cc
 801a4f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801a4fa:	f1a6 0708 	subcc.w	r7, r6, #8
 801a4fe:	2300      	movcs	r3, #0
 801a500:	380b      	subs	r0, #11
 801a502:	d012      	beq.n	801a52a <__b2d+0x8a>
 801a504:	f1c0 0120 	rsb	r1, r0, #32
 801a508:	fa23 f401 	lsr.w	r4, r3, r1
 801a50c:	4082      	lsls	r2, r0
 801a50e:	4322      	orrs	r2, r4
 801a510:	4547      	cmp	r7, r8
 801a512:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801a516:	bf8c      	ite	hi
 801a518:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801a51c:	2200      	movls	r2, #0
 801a51e:	4083      	lsls	r3, r0
 801a520:	40ca      	lsrs	r2, r1
 801a522:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801a526:	4313      	orrs	r3, r2
 801a528:	e7de      	b.n	801a4e8 <__b2d+0x48>
 801a52a:	ea42 0501 	orr.w	r5, r2, r1
 801a52e:	e7db      	b.n	801a4e8 <__b2d+0x48>
 801a530:	3ff00000 	.word	0x3ff00000

0801a534 <__d2b>:
 801a534:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a538:	460f      	mov	r7, r1
 801a53a:	2101      	movs	r1, #1
 801a53c:	ec59 8b10 	vmov	r8, r9, d0
 801a540:	4616      	mov	r6, r2
 801a542:	f7ff fc1b 	bl	8019d7c <_Balloc>
 801a546:	4604      	mov	r4, r0
 801a548:	b930      	cbnz	r0, 801a558 <__d2b+0x24>
 801a54a:	4602      	mov	r2, r0
 801a54c:	4b24      	ldr	r3, [pc, #144]	; (801a5e0 <__d2b+0xac>)
 801a54e:	4825      	ldr	r0, [pc, #148]	; (801a5e4 <__d2b+0xb0>)
 801a550:	f240 310f 	movw	r1, #783	; 0x30f
 801a554:	f001 feec 	bl	801c330 <__assert_func>
 801a558:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801a55c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a560:	bb2d      	cbnz	r5, 801a5ae <__d2b+0x7a>
 801a562:	9301      	str	r3, [sp, #4]
 801a564:	f1b8 0300 	subs.w	r3, r8, #0
 801a568:	d026      	beq.n	801a5b8 <__d2b+0x84>
 801a56a:	4668      	mov	r0, sp
 801a56c:	9300      	str	r3, [sp, #0]
 801a56e:	f7ff fd17 	bl	8019fa0 <__lo0bits>
 801a572:	e9dd 1200 	ldrd	r1, r2, [sp]
 801a576:	b1e8      	cbz	r0, 801a5b4 <__d2b+0x80>
 801a578:	f1c0 0320 	rsb	r3, r0, #32
 801a57c:	fa02 f303 	lsl.w	r3, r2, r3
 801a580:	430b      	orrs	r3, r1
 801a582:	40c2      	lsrs	r2, r0
 801a584:	6163      	str	r3, [r4, #20]
 801a586:	9201      	str	r2, [sp, #4]
 801a588:	9b01      	ldr	r3, [sp, #4]
 801a58a:	61a3      	str	r3, [r4, #24]
 801a58c:	2b00      	cmp	r3, #0
 801a58e:	bf14      	ite	ne
 801a590:	2202      	movne	r2, #2
 801a592:	2201      	moveq	r2, #1
 801a594:	6122      	str	r2, [r4, #16]
 801a596:	b1bd      	cbz	r5, 801a5c8 <__d2b+0x94>
 801a598:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801a59c:	4405      	add	r5, r0
 801a59e:	603d      	str	r5, [r7, #0]
 801a5a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a5a4:	6030      	str	r0, [r6, #0]
 801a5a6:	4620      	mov	r0, r4
 801a5a8:	b003      	add	sp, #12
 801a5aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a5ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a5b2:	e7d6      	b.n	801a562 <__d2b+0x2e>
 801a5b4:	6161      	str	r1, [r4, #20]
 801a5b6:	e7e7      	b.n	801a588 <__d2b+0x54>
 801a5b8:	a801      	add	r0, sp, #4
 801a5ba:	f7ff fcf1 	bl	8019fa0 <__lo0bits>
 801a5be:	9b01      	ldr	r3, [sp, #4]
 801a5c0:	6163      	str	r3, [r4, #20]
 801a5c2:	3020      	adds	r0, #32
 801a5c4:	2201      	movs	r2, #1
 801a5c6:	e7e5      	b.n	801a594 <__d2b+0x60>
 801a5c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a5cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a5d0:	6038      	str	r0, [r7, #0]
 801a5d2:	6918      	ldr	r0, [r3, #16]
 801a5d4:	f7ff fcc4 	bl	8019f60 <__hi0bits>
 801a5d8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801a5dc:	e7e2      	b.n	801a5a4 <__d2b+0x70>
 801a5de:	bf00      	nop
 801a5e0:	0801db23 	.word	0x0801db23
 801a5e4:	0801db34 	.word	0x0801db34

0801a5e8 <__ratio>:
 801a5e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5ec:	4688      	mov	r8, r1
 801a5ee:	4669      	mov	r1, sp
 801a5f0:	4681      	mov	r9, r0
 801a5f2:	f7ff ff55 	bl	801a4a0 <__b2d>
 801a5f6:	a901      	add	r1, sp, #4
 801a5f8:	4640      	mov	r0, r8
 801a5fa:	ec55 4b10 	vmov	r4, r5, d0
 801a5fe:	f7ff ff4f 	bl	801a4a0 <__b2d>
 801a602:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a606:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801a60a:	eba3 0c02 	sub.w	ip, r3, r2
 801a60e:	e9dd 3200 	ldrd	r3, r2, [sp]
 801a612:	1a9b      	subs	r3, r3, r2
 801a614:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801a618:	ec51 0b10 	vmov	r0, r1, d0
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	bfd6      	itet	le
 801a620:	460a      	movle	r2, r1
 801a622:	462a      	movgt	r2, r5
 801a624:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801a628:	468b      	mov	fp, r1
 801a62a:	462f      	mov	r7, r5
 801a62c:	bfd4      	ite	le
 801a62e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801a632:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801a636:	4620      	mov	r0, r4
 801a638:	ee10 2a10 	vmov	r2, s0
 801a63c:	465b      	mov	r3, fp
 801a63e:	4639      	mov	r1, r7
 801a640:	f7e6 f934 	bl	80008ac <__aeabi_ddiv>
 801a644:	ec41 0b10 	vmov	d0, r0, r1
 801a648:	b003      	add	sp, #12
 801a64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a64e <__copybits>:
 801a64e:	3901      	subs	r1, #1
 801a650:	b570      	push	{r4, r5, r6, lr}
 801a652:	1149      	asrs	r1, r1, #5
 801a654:	6914      	ldr	r4, [r2, #16]
 801a656:	3101      	adds	r1, #1
 801a658:	f102 0314 	add.w	r3, r2, #20
 801a65c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801a660:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801a664:	1f05      	subs	r5, r0, #4
 801a666:	42a3      	cmp	r3, r4
 801a668:	d30c      	bcc.n	801a684 <__copybits+0x36>
 801a66a:	1aa3      	subs	r3, r4, r2
 801a66c:	3b11      	subs	r3, #17
 801a66e:	f023 0303 	bic.w	r3, r3, #3
 801a672:	3211      	adds	r2, #17
 801a674:	42a2      	cmp	r2, r4
 801a676:	bf88      	it	hi
 801a678:	2300      	movhi	r3, #0
 801a67a:	4418      	add	r0, r3
 801a67c:	2300      	movs	r3, #0
 801a67e:	4288      	cmp	r0, r1
 801a680:	d305      	bcc.n	801a68e <__copybits+0x40>
 801a682:	bd70      	pop	{r4, r5, r6, pc}
 801a684:	f853 6b04 	ldr.w	r6, [r3], #4
 801a688:	f845 6f04 	str.w	r6, [r5, #4]!
 801a68c:	e7eb      	b.n	801a666 <__copybits+0x18>
 801a68e:	f840 3b04 	str.w	r3, [r0], #4
 801a692:	e7f4      	b.n	801a67e <__copybits+0x30>

0801a694 <__any_on>:
 801a694:	f100 0214 	add.w	r2, r0, #20
 801a698:	6900      	ldr	r0, [r0, #16]
 801a69a:	114b      	asrs	r3, r1, #5
 801a69c:	4298      	cmp	r0, r3
 801a69e:	b510      	push	{r4, lr}
 801a6a0:	db11      	blt.n	801a6c6 <__any_on+0x32>
 801a6a2:	dd0a      	ble.n	801a6ba <__any_on+0x26>
 801a6a4:	f011 011f 	ands.w	r1, r1, #31
 801a6a8:	d007      	beq.n	801a6ba <__any_on+0x26>
 801a6aa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801a6ae:	fa24 f001 	lsr.w	r0, r4, r1
 801a6b2:	fa00 f101 	lsl.w	r1, r0, r1
 801a6b6:	428c      	cmp	r4, r1
 801a6b8:	d10b      	bne.n	801a6d2 <__any_on+0x3e>
 801a6ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a6be:	4293      	cmp	r3, r2
 801a6c0:	d803      	bhi.n	801a6ca <__any_on+0x36>
 801a6c2:	2000      	movs	r0, #0
 801a6c4:	bd10      	pop	{r4, pc}
 801a6c6:	4603      	mov	r3, r0
 801a6c8:	e7f7      	b.n	801a6ba <__any_on+0x26>
 801a6ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a6ce:	2900      	cmp	r1, #0
 801a6d0:	d0f5      	beq.n	801a6be <__any_on+0x2a>
 801a6d2:	2001      	movs	r0, #1
 801a6d4:	e7f6      	b.n	801a6c4 <__any_on+0x30>

0801a6d6 <sulp>:
 801a6d6:	b570      	push	{r4, r5, r6, lr}
 801a6d8:	4604      	mov	r4, r0
 801a6da:	460d      	mov	r5, r1
 801a6dc:	ec45 4b10 	vmov	d0, r4, r5
 801a6e0:	4616      	mov	r6, r2
 801a6e2:	f7ff feb7 	bl	801a454 <__ulp>
 801a6e6:	ec51 0b10 	vmov	r0, r1, d0
 801a6ea:	b17e      	cbz	r6, 801a70c <sulp+0x36>
 801a6ec:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801a6f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a6f4:	2b00      	cmp	r3, #0
 801a6f6:	dd09      	ble.n	801a70c <sulp+0x36>
 801a6f8:	051b      	lsls	r3, r3, #20
 801a6fa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801a6fe:	2400      	movs	r4, #0
 801a700:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801a704:	4622      	mov	r2, r4
 801a706:	462b      	mov	r3, r5
 801a708:	f7e5 ffa6 	bl	8000658 <__aeabi_dmul>
 801a70c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a710 <_strtod_l>:
 801a710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a714:	ed2d 8b02 	vpush	{d8}
 801a718:	b09b      	sub	sp, #108	; 0x6c
 801a71a:	4604      	mov	r4, r0
 801a71c:	9213      	str	r2, [sp, #76]	; 0x4c
 801a71e:	2200      	movs	r2, #0
 801a720:	9216      	str	r2, [sp, #88]	; 0x58
 801a722:	460d      	mov	r5, r1
 801a724:	f04f 0800 	mov.w	r8, #0
 801a728:	f04f 0900 	mov.w	r9, #0
 801a72c:	460a      	mov	r2, r1
 801a72e:	9215      	str	r2, [sp, #84]	; 0x54
 801a730:	7811      	ldrb	r1, [r2, #0]
 801a732:	292b      	cmp	r1, #43	; 0x2b
 801a734:	d04c      	beq.n	801a7d0 <_strtod_l+0xc0>
 801a736:	d83a      	bhi.n	801a7ae <_strtod_l+0x9e>
 801a738:	290d      	cmp	r1, #13
 801a73a:	d834      	bhi.n	801a7a6 <_strtod_l+0x96>
 801a73c:	2908      	cmp	r1, #8
 801a73e:	d834      	bhi.n	801a7aa <_strtod_l+0x9a>
 801a740:	2900      	cmp	r1, #0
 801a742:	d03d      	beq.n	801a7c0 <_strtod_l+0xb0>
 801a744:	2200      	movs	r2, #0
 801a746:	920a      	str	r2, [sp, #40]	; 0x28
 801a748:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801a74a:	7832      	ldrb	r2, [r6, #0]
 801a74c:	2a30      	cmp	r2, #48	; 0x30
 801a74e:	f040 80b4 	bne.w	801a8ba <_strtod_l+0x1aa>
 801a752:	7872      	ldrb	r2, [r6, #1]
 801a754:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801a758:	2a58      	cmp	r2, #88	; 0x58
 801a75a:	d170      	bne.n	801a83e <_strtod_l+0x12e>
 801a75c:	9302      	str	r3, [sp, #8]
 801a75e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a760:	9301      	str	r3, [sp, #4]
 801a762:	ab16      	add	r3, sp, #88	; 0x58
 801a764:	9300      	str	r3, [sp, #0]
 801a766:	4a8e      	ldr	r2, [pc, #568]	; (801a9a0 <_strtod_l+0x290>)
 801a768:	ab17      	add	r3, sp, #92	; 0x5c
 801a76a:	a915      	add	r1, sp, #84	; 0x54
 801a76c:	4620      	mov	r0, r4
 801a76e:	f001 fe65 	bl	801c43c <__gethex>
 801a772:	f010 070f 	ands.w	r7, r0, #15
 801a776:	4605      	mov	r5, r0
 801a778:	d005      	beq.n	801a786 <_strtod_l+0x76>
 801a77a:	2f06      	cmp	r7, #6
 801a77c:	d12a      	bne.n	801a7d4 <_strtod_l+0xc4>
 801a77e:	3601      	adds	r6, #1
 801a780:	2300      	movs	r3, #0
 801a782:	9615      	str	r6, [sp, #84]	; 0x54
 801a784:	930a      	str	r3, [sp, #40]	; 0x28
 801a786:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a788:	2b00      	cmp	r3, #0
 801a78a:	f040 857f 	bne.w	801b28c <_strtod_l+0xb7c>
 801a78e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a790:	b1db      	cbz	r3, 801a7ca <_strtod_l+0xba>
 801a792:	4642      	mov	r2, r8
 801a794:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801a798:	ec43 2b10 	vmov	d0, r2, r3
 801a79c:	b01b      	add	sp, #108	; 0x6c
 801a79e:	ecbd 8b02 	vpop	{d8}
 801a7a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7a6:	2920      	cmp	r1, #32
 801a7a8:	d1cc      	bne.n	801a744 <_strtod_l+0x34>
 801a7aa:	3201      	adds	r2, #1
 801a7ac:	e7bf      	b.n	801a72e <_strtod_l+0x1e>
 801a7ae:	292d      	cmp	r1, #45	; 0x2d
 801a7b0:	d1c8      	bne.n	801a744 <_strtod_l+0x34>
 801a7b2:	2101      	movs	r1, #1
 801a7b4:	910a      	str	r1, [sp, #40]	; 0x28
 801a7b6:	1c51      	adds	r1, r2, #1
 801a7b8:	9115      	str	r1, [sp, #84]	; 0x54
 801a7ba:	7852      	ldrb	r2, [r2, #1]
 801a7bc:	2a00      	cmp	r2, #0
 801a7be:	d1c3      	bne.n	801a748 <_strtod_l+0x38>
 801a7c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a7c2:	9515      	str	r5, [sp, #84]	; 0x54
 801a7c4:	2b00      	cmp	r3, #0
 801a7c6:	f040 855f 	bne.w	801b288 <_strtod_l+0xb78>
 801a7ca:	4642      	mov	r2, r8
 801a7cc:	464b      	mov	r3, r9
 801a7ce:	e7e3      	b.n	801a798 <_strtod_l+0x88>
 801a7d0:	2100      	movs	r1, #0
 801a7d2:	e7ef      	b.n	801a7b4 <_strtod_l+0xa4>
 801a7d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801a7d6:	b13a      	cbz	r2, 801a7e8 <_strtod_l+0xd8>
 801a7d8:	2135      	movs	r1, #53	; 0x35
 801a7da:	a818      	add	r0, sp, #96	; 0x60
 801a7dc:	f7ff ff37 	bl	801a64e <__copybits>
 801a7e0:	9916      	ldr	r1, [sp, #88]	; 0x58
 801a7e2:	4620      	mov	r0, r4
 801a7e4:	f7ff fb0a 	bl	8019dfc <_Bfree>
 801a7e8:	3f01      	subs	r7, #1
 801a7ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a7ec:	2f04      	cmp	r7, #4
 801a7ee:	d806      	bhi.n	801a7fe <_strtod_l+0xee>
 801a7f0:	e8df f007 	tbb	[pc, r7]
 801a7f4:	201d0314 	.word	0x201d0314
 801a7f8:	14          	.byte	0x14
 801a7f9:	00          	.byte	0x00
 801a7fa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801a7fe:	05e9      	lsls	r1, r5, #23
 801a800:	bf48      	it	mi
 801a802:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801a806:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a80a:	0d1b      	lsrs	r3, r3, #20
 801a80c:	051b      	lsls	r3, r3, #20
 801a80e:	2b00      	cmp	r3, #0
 801a810:	d1b9      	bne.n	801a786 <_strtod_l+0x76>
 801a812:	f7fe fbad 	bl	8018f70 <__errno>
 801a816:	2322      	movs	r3, #34	; 0x22
 801a818:	6003      	str	r3, [r0, #0]
 801a81a:	e7b4      	b.n	801a786 <_strtod_l+0x76>
 801a81c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 801a820:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a824:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801a828:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801a82c:	e7e7      	b.n	801a7fe <_strtod_l+0xee>
 801a82e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801a9a8 <_strtod_l+0x298>
 801a832:	e7e4      	b.n	801a7fe <_strtod_l+0xee>
 801a834:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801a838:	f04f 38ff 	mov.w	r8, #4294967295
 801a83c:	e7df      	b.n	801a7fe <_strtod_l+0xee>
 801a83e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a840:	1c5a      	adds	r2, r3, #1
 801a842:	9215      	str	r2, [sp, #84]	; 0x54
 801a844:	785b      	ldrb	r3, [r3, #1]
 801a846:	2b30      	cmp	r3, #48	; 0x30
 801a848:	d0f9      	beq.n	801a83e <_strtod_l+0x12e>
 801a84a:	2b00      	cmp	r3, #0
 801a84c:	d09b      	beq.n	801a786 <_strtod_l+0x76>
 801a84e:	2301      	movs	r3, #1
 801a850:	f04f 0a00 	mov.w	sl, #0
 801a854:	9304      	str	r3, [sp, #16]
 801a856:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a858:	930b      	str	r3, [sp, #44]	; 0x2c
 801a85a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801a85e:	46d3      	mov	fp, sl
 801a860:	220a      	movs	r2, #10
 801a862:	9815      	ldr	r0, [sp, #84]	; 0x54
 801a864:	7806      	ldrb	r6, [r0, #0]
 801a866:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801a86a:	b2d9      	uxtb	r1, r3
 801a86c:	2909      	cmp	r1, #9
 801a86e:	d926      	bls.n	801a8be <_strtod_l+0x1ae>
 801a870:	494c      	ldr	r1, [pc, #304]	; (801a9a4 <_strtod_l+0x294>)
 801a872:	2201      	movs	r2, #1
 801a874:	f001 fd1f 	bl	801c2b6 <strncmp>
 801a878:	2800      	cmp	r0, #0
 801a87a:	d030      	beq.n	801a8de <_strtod_l+0x1ce>
 801a87c:	2000      	movs	r0, #0
 801a87e:	4632      	mov	r2, r6
 801a880:	9005      	str	r0, [sp, #20]
 801a882:	465e      	mov	r6, fp
 801a884:	4603      	mov	r3, r0
 801a886:	2a65      	cmp	r2, #101	; 0x65
 801a888:	d001      	beq.n	801a88e <_strtod_l+0x17e>
 801a88a:	2a45      	cmp	r2, #69	; 0x45
 801a88c:	d113      	bne.n	801a8b6 <_strtod_l+0x1a6>
 801a88e:	b91e      	cbnz	r6, 801a898 <_strtod_l+0x188>
 801a890:	9a04      	ldr	r2, [sp, #16]
 801a892:	4302      	orrs	r2, r0
 801a894:	d094      	beq.n	801a7c0 <_strtod_l+0xb0>
 801a896:	2600      	movs	r6, #0
 801a898:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801a89a:	1c6a      	adds	r2, r5, #1
 801a89c:	9215      	str	r2, [sp, #84]	; 0x54
 801a89e:	786a      	ldrb	r2, [r5, #1]
 801a8a0:	2a2b      	cmp	r2, #43	; 0x2b
 801a8a2:	d074      	beq.n	801a98e <_strtod_l+0x27e>
 801a8a4:	2a2d      	cmp	r2, #45	; 0x2d
 801a8a6:	d078      	beq.n	801a99a <_strtod_l+0x28a>
 801a8a8:	f04f 0c00 	mov.w	ip, #0
 801a8ac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801a8b0:	2909      	cmp	r1, #9
 801a8b2:	d97f      	bls.n	801a9b4 <_strtod_l+0x2a4>
 801a8b4:	9515      	str	r5, [sp, #84]	; 0x54
 801a8b6:	2700      	movs	r7, #0
 801a8b8:	e09e      	b.n	801a9f8 <_strtod_l+0x2e8>
 801a8ba:	2300      	movs	r3, #0
 801a8bc:	e7c8      	b.n	801a850 <_strtod_l+0x140>
 801a8be:	f1bb 0f08 	cmp.w	fp, #8
 801a8c2:	bfd8      	it	le
 801a8c4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801a8c6:	f100 0001 	add.w	r0, r0, #1
 801a8ca:	bfda      	itte	le
 801a8cc:	fb02 3301 	mlale	r3, r2, r1, r3
 801a8d0:	9309      	strle	r3, [sp, #36]	; 0x24
 801a8d2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801a8d6:	f10b 0b01 	add.w	fp, fp, #1
 801a8da:	9015      	str	r0, [sp, #84]	; 0x54
 801a8dc:	e7c1      	b.n	801a862 <_strtod_l+0x152>
 801a8de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a8e0:	1c5a      	adds	r2, r3, #1
 801a8e2:	9215      	str	r2, [sp, #84]	; 0x54
 801a8e4:	785a      	ldrb	r2, [r3, #1]
 801a8e6:	f1bb 0f00 	cmp.w	fp, #0
 801a8ea:	d037      	beq.n	801a95c <_strtod_l+0x24c>
 801a8ec:	9005      	str	r0, [sp, #20]
 801a8ee:	465e      	mov	r6, fp
 801a8f0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801a8f4:	2b09      	cmp	r3, #9
 801a8f6:	d912      	bls.n	801a91e <_strtod_l+0x20e>
 801a8f8:	2301      	movs	r3, #1
 801a8fa:	e7c4      	b.n	801a886 <_strtod_l+0x176>
 801a8fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a8fe:	1c5a      	adds	r2, r3, #1
 801a900:	9215      	str	r2, [sp, #84]	; 0x54
 801a902:	785a      	ldrb	r2, [r3, #1]
 801a904:	3001      	adds	r0, #1
 801a906:	2a30      	cmp	r2, #48	; 0x30
 801a908:	d0f8      	beq.n	801a8fc <_strtod_l+0x1ec>
 801a90a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801a90e:	2b08      	cmp	r3, #8
 801a910:	f200 84c1 	bhi.w	801b296 <_strtod_l+0xb86>
 801a914:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a916:	9005      	str	r0, [sp, #20]
 801a918:	2000      	movs	r0, #0
 801a91a:	930b      	str	r3, [sp, #44]	; 0x2c
 801a91c:	4606      	mov	r6, r0
 801a91e:	3a30      	subs	r2, #48	; 0x30
 801a920:	f100 0301 	add.w	r3, r0, #1
 801a924:	d014      	beq.n	801a950 <_strtod_l+0x240>
 801a926:	9905      	ldr	r1, [sp, #20]
 801a928:	4419      	add	r1, r3
 801a92a:	9105      	str	r1, [sp, #20]
 801a92c:	4633      	mov	r3, r6
 801a92e:	eb00 0c06 	add.w	ip, r0, r6
 801a932:	210a      	movs	r1, #10
 801a934:	4563      	cmp	r3, ip
 801a936:	d113      	bne.n	801a960 <_strtod_l+0x250>
 801a938:	1833      	adds	r3, r6, r0
 801a93a:	2b08      	cmp	r3, #8
 801a93c:	f106 0601 	add.w	r6, r6, #1
 801a940:	4406      	add	r6, r0
 801a942:	dc1a      	bgt.n	801a97a <_strtod_l+0x26a>
 801a944:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a946:	230a      	movs	r3, #10
 801a948:	fb03 2301 	mla	r3, r3, r1, r2
 801a94c:	9309      	str	r3, [sp, #36]	; 0x24
 801a94e:	2300      	movs	r3, #0
 801a950:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801a952:	1c51      	adds	r1, r2, #1
 801a954:	9115      	str	r1, [sp, #84]	; 0x54
 801a956:	7852      	ldrb	r2, [r2, #1]
 801a958:	4618      	mov	r0, r3
 801a95a:	e7c9      	b.n	801a8f0 <_strtod_l+0x1e0>
 801a95c:	4658      	mov	r0, fp
 801a95e:	e7d2      	b.n	801a906 <_strtod_l+0x1f6>
 801a960:	2b08      	cmp	r3, #8
 801a962:	f103 0301 	add.w	r3, r3, #1
 801a966:	dc03      	bgt.n	801a970 <_strtod_l+0x260>
 801a968:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801a96a:	434f      	muls	r7, r1
 801a96c:	9709      	str	r7, [sp, #36]	; 0x24
 801a96e:	e7e1      	b.n	801a934 <_strtod_l+0x224>
 801a970:	2b10      	cmp	r3, #16
 801a972:	bfd8      	it	le
 801a974:	fb01 fa0a 	mulle.w	sl, r1, sl
 801a978:	e7dc      	b.n	801a934 <_strtod_l+0x224>
 801a97a:	2e10      	cmp	r6, #16
 801a97c:	bfdc      	itt	le
 801a97e:	230a      	movle	r3, #10
 801a980:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801a984:	e7e3      	b.n	801a94e <_strtod_l+0x23e>
 801a986:	2300      	movs	r3, #0
 801a988:	9305      	str	r3, [sp, #20]
 801a98a:	2301      	movs	r3, #1
 801a98c:	e780      	b.n	801a890 <_strtod_l+0x180>
 801a98e:	f04f 0c00 	mov.w	ip, #0
 801a992:	1caa      	adds	r2, r5, #2
 801a994:	9215      	str	r2, [sp, #84]	; 0x54
 801a996:	78aa      	ldrb	r2, [r5, #2]
 801a998:	e788      	b.n	801a8ac <_strtod_l+0x19c>
 801a99a:	f04f 0c01 	mov.w	ip, #1
 801a99e:	e7f8      	b.n	801a992 <_strtod_l+0x282>
 801a9a0:	0801dc90 	.word	0x0801dc90
 801a9a4:	0801dc8c 	.word	0x0801dc8c
 801a9a8:	7ff00000 	.word	0x7ff00000
 801a9ac:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801a9ae:	1c51      	adds	r1, r2, #1
 801a9b0:	9115      	str	r1, [sp, #84]	; 0x54
 801a9b2:	7852      	ldrb	r2, [r2, #1]
 801a9b4:	2a30      	cmp	r2, #48	; 0x30
 801a9b6:	d0f9      	beq.n	801a9ac <_strtod_l+0x29c>
 801a9b8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801a9bc:	2908      	cmp	r1, #8
 801a9be:	f63f af7a 	bhi.w	801a8b6 <_strtod_l+0x1a6>
 801a9c2:	3a30      	subs	r2, #48	; 0x30
 801a9c4:	9208      	str	r2, [sp, #32]
 801a9c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801a9c8:	920c      	str	r2, [sp, #48]	; 0x30
 801a9ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801a9cc:	1c57      	adds	r7, r2, #1
 801a9ce:	9715      	str	r7, [sp, #84]	; 0x54
 801a9d0:	7852      	ldrb	r2, [r2, #1]
 801a9d2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801a9d6:	f1be 0f09 	cmp.w	lr, #9
 801a9da:	d938      	bls.n	801aa4e <_strtod_l+0x33e>
 801a9dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a9de:	1a7f      	subs	r7, r7, r1
 801a9e0:	2f08      	cmp	r7, #8
 801a9e2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801a9e6:	dc03      	bgt.n	801a9f0 <_strtod_l+0x2e0>
 801a9e8:	9908      	ldr	r1, [sp, #32]
 801a9ea:	428f      	cmp	r7, r1
 801a9ec:	bfa8      	it	ge
 801a9ee:	460f      	movge	r7, r1
 801a9f0:	f1bc 0f00 	cmp.w	ip, #0
 801a9f4:	d000      	beq.n	801a9f8 <_strtod_l+0x2e8>
 801a9f6:	427f      	negs	r7, r7
 801a9f8:	2e00      	cmp	r6, #0
 801a9fa:	d14f      	bne.n	801aa9c <_strtod_l+0x38c>
 801a9fc:	9904      	ldr	r1, [sp, #16]
 801a9fe:	4301      	orrs	r1, r0
 801aa00:	f47f aec1 	bne.w	801a786 <_strtod_l+0x76>
 801aa04:	2b00      	cmp	r3, #0
 801aa06:	f47f aedb 	bne.w	801a7c0 <_strtod_l+0xb0>
 801aa0a:	2a69      	cmp	r2, #105	; 0x69
 801aa0c:	d029      	beq.n	801aa62 <_strtod_l+0x352>
 801aa0e:	dc26      	bgt.n	801aa5e <_strtod_l+0x34e>
 801aa10:	2a49      	cmp	r2, #73	; 0x49
 801aa12:	d026      	beq.n	801aa62 <_strtod_l+0x352>
 801aa14:	2a4e      	cmp	r2, #78	; 0x4e
 801aa16:	f47f aed3 	bne.w	801a7c0 <_strtod_l+0xb0>
 801aa1a:	499b      	ldr	r1, [pc, #620]	; (801ac88 <_strtod_l+0x578>)
 801aa1c:	a815      	add	r0, sp, #84	; 0x54
 801aa1e:	f001 ff4d 	bl	801c8bc <__match>
 801aa22:	2800      	cmp	r0, #0
 801aa24:	f43f aecc 	beq.w	801a7c0 <_strtod_l+0xb0>
 801aa28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801aa2a:	781b      	ldrb	r3, [r3, #0]
 801aa2c:	2b28      	cmp	r3, #40	; 0x28
 801aa2e:	d12f      	bne.n	801aa90 <_strtod_l+0x380>
 801aa30:	4996      	ldr	r1, [pc, #600]	; (801ac8c <_strtod_l+0x57c>)
 801aa32:	aa18      	add	r2, sp, #96	; 0x60
 801aa34:	a815      	add	r0, sp, #84	; 0x54
 801aa36:	f001 ff55 	bl	801c8e4 <__hexnan>
 801aa3a:	2805      	cmp	r0, #5
 801aa3c:	d128      	bne.n	801aa90 <_strtod_l+0x380>
 801aa3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801aa40:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801aa44:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801aa48:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801aa4c:	e69b      	b.n	801a786 <_strtod_l+0x76>
 801aa4e:	9f08      	ldr	r7, [sp, #32]
 801aa50:	210a      	movs	r1, #10
 801aa52:	fb01 2107 	mla	r1, r1, r7, r2
 801aa56:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801aa5a:	9208      	str	r2, [sp, #32]
 801aa5c:	e7b5      	b.n	801a9ca <_strtod_l+0x2ba>
 801aa5e:	2a6e      	cmp	r2, #110	; 0x6e
 801aa60:	e7d9      	b.n	801aa16 <_strtod_l+0x306>
 801aa62:	498b      	ldr	r1, [pc, #556]	; (801ac90 <_strtod_l+0x580>)
 801aa64:	a815      	add	r0, sp, #84	; 0x54
 801aa66:	f001 ff29 	bl	801c8bc <__match>
 801aa6a:	2800      	cmp	r0, #0
 801aa6c:	f43f aea8 	beq.w	801a7c0 <_strtod_l+0xb0>
 801aa70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801aa72:	4988      	ldr	r1, [pc, #544]	; (801ac94 <_strtod_l+0x584>)
 801aa74:	3b01      	subs	r3, #1
 801aa76:	a815      	add	r0, sp, #84	; 0x54
 801aa78:	9315      	str	r3, [sp, #84]	; 0x54
 801aa7a:	f001 ff1f 	bl	801c8bc <__match>
 801aa7e:	b910      	cbnz	r0, 801aa86 <_strtod_l+0x376>
 801aa80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801aa82:	3301      	adds	r3, #1
 801aa84:	9315      	str	r3, [sp, #84]	; 0x54
 801aa86:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801aca4 <_strtod_l+0x594>
 801aa8a:	f04f 0800 	mov.w	r8, #0
 801aa8e:	e67a      	b.n	801a786 <_strtod_l+0x76>
 801aa90:	4881      	ldr	r0, [pc, #516]	; (801ac98 <_strtod_l+0x588>)
 801aa92:	f001 fc45 	bl	801c320 <nan>
 801aa96:	ec59 8b10 	vmov	r8, r9, d0
 801aa9a:	e674      	b.n	801a786 <_strtod_l+0x76>
 801aa9c:	9b05      	ldr	r3, [sp, #20]
 801aa9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aaa0:	1afb      	subs	r3, r7, r3
 801aaa2:	f1bb 0f00 	cmp.w	fp, #0
 801aaa6:	bf08      	it	eq
 801aaa8:	46b3      	moveq	fp, r6
 801aaaa:	2e10      	cmp	r6, #16
 801aaac:	9308      	str	r3, [sp, #32]
 801aaae:	4635      	mov	r5, r6
 801aab0:	bfa8      	it	ge
 801aab2:	2510      	movge	r5, #16
 801aab4:	f7e5 fd56 	bl	8000564 <__aeabi_ui2d>
 801aab8:	2e09      	cmp	r6, #9
 801aaba:	4680      	mov	r8, r0
 801aabc:	4689      	mov	r9, r1
 801aabe:	dd13      	ble.n	801aae8 <_strtod_l+0x3d8>
 801aac0:	4b76      	ldr	r3, [pc, #472]	; (801ac9c <_strtod_l+0x58c>)
 801aac2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801aac6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801aaca:	f7e5 fdc5 	bl	8000658 <__aeabi_dmul>
 801aace:	4680      	mov	r8, r0
 801aad0:	4650      	mov	r0, sl
 801aad2:	4689      	mov	r9, r1
 801aad4:	f7e5 fd46 	bl	8000564 <__aeabi_ui2d>
 801aad8:	4602      	mov	r2, r0
 801aada:	460b      	mov	r3, r1
 801aadc:	4640      	mov	r0, r8
 801aade:	4649      	mov	r1, r9
 801aae0:	f7e5 fc04 	bl	80002ec <__adddf3>
 801aae4:	4680      	mov	r8, r0
 801aae6:	4689      	mov	r9, r1
 801aae8:	2e0f      	cmp	r6, #15
 801aaea:	dc38      	bgt.n	801ab5e <_strtod_l+0x44e>
 801aaec:	9b08      	ldr	r3, [sp, #32]
 801aaee:	2b00      	cmp	r3, #0
 801aaf0:	f43f ae49 	beq.w	801a786 <_strtod_l+0x76>
 801aaf4:	dd24      	ble.n	801ab40 <_strtod_l+0x430>
 801aaf6:	2b16      	cmp	r3, #22
 801aaf8:	dc0b      	bgt.n	801ab12 <_strtod_l+0x402>
 801aafa:	4968      	ldr	r1, [pc, #416]	; (801ac9c <_strtod_l+0x58c>)
 801aafc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801ab00:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ab04:	4642      	mov	r2, r8
 801ab06:	464b      	mov	r3, r9
 801ab08:	f7e5 fda6 	bl	8000658 <__aeabi_dmul>
 801ab0c:	4680      	mov	r8, r0
 801ab0e:	4689      	mov	r9, r1
 801ab10:	e639      	b.n	801a786 <_strtod_l+0x76>
 801ab12:	9a08      	ldr	r2, [sp, #32]
 801ab14:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 801ab18:	4293      	cmp	r3, r2
 801ab1a:	db20      	blt.n	801ab5e <_strtod_l+0x44e>
 801ab1c:	4c5f      	ldr	r4, [pc, #380]	; (801ac9c <_strtod_l+0x58c>)
 801ab1e:	f1c6 060f 	rsb	r6, r6, #15
 801ab22:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801ab26:	4642      	mov	r2, r8
 801ab28:	464b      	mov	r3, r9
 801ab2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ab2e:	f7e5 fd93 	bl	8000658 <__aeabi_dmul>
 801ab32:	9b08      	ldr	r3, [sp, #32]
 801ab34:	1b9e      	subs	r6, r3, r6
 801ab36:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801ab3a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801ab3e:	e7e3      	b.n	801ab08 <_strtod_l+0x3f8>
 801ab40:	9b08      	ldr	r3, [sp, #32]
 801ab42:	3316      	adds	r3, #22
 801ab44:	db0b      	blt.n	801ab5e <_strtod_l+0x44e>
 801ab46:	9b05      	ldr	r3, [sp, #20]
 801ab48:	1bdf      	subs	r7, r3, r7
 801ab4a:	4b54      	ldr	r3, [pc, #336]	; (801ac9c <_strtod_l+0x58c>)
 801ab4c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801ab50:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ab54:	4640      	mov	r0, r8
 801ab56:	4649      	mov	r1, r9
 801ab58:	f7e5 fea8 	bl	80008ac <__aeabi_ddiv>
 801ab5c:	e7d6      	b.n	801ab0c <_strtod_l+0x3fc>
 801ab5e:	9b08      	ldr	r3, [sp, #32]
 801ab60:	1b75      	subs	r5, r6, r5
 801ab62:	441d      	add	r5, r3
 801ab64:	2d00      	cmp	r5, #0
 801ab66:	dd70      	ble.n	801ac4a <_strtod_l+0x53a>
 801ab68:	f015 030f 	ands.w	r3, r5, #15
 801ab6c:	d00a      	beq.n	801ab84 <_strtod_l+0x474>
 801ab6e:	494b      	ldr	r1, [pc, #300]	; (801ac9c <_strtod_l+0x58c>)
 801ab70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801ab74:	4642      	mov	r2, r8
 801ab76:	464b      	mov	r3, r9
 801ab78:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ab7c:	f7e5 fd6c 	bl	8000658 <__aeabi_dmul>
 801ab80:	4680      	mov	r8, r0
 801ab82:	4689      	mov	r9, r1
 801ab84:	f035 050f 	bics.w	r5, r5, #15
 801ab88:	d04d      	beq.n	801ac26 <_strtod_l+0x516>
 801ab8a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801ab8e:	dd22      	ble.n	801abd6 <_strtod_l+0x4c6>
 801ab90:	2500      	movs	r5, #0
 801ab92:	46ab      	mov	fp, r5
 801ab94:	9509      	str	r5, [sp, #36]	; 0x24
 801ab96:	9505      	str	r5, [sp, #20]
 801ab98:	2322      	movs	r3, #34	; 0x22
 801ab9a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801aca4 <_strtod_l+0x594>
 801ab9e:	6023      	str	r3, [r4, #0]
 801aba0:	f04f 0800 	mov.w	r8, #0
 801aba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aba6:	2b00      	cmp	r3, #0
 801aba8:	f43f aded 	beq.w	801a786 <_strtod_l+0x76>
 801abac:	9916      	ldr	r1, [sp, #88]	; 0x58
 801abae:	4620      	mov	r0, r4
 801abb0:	f7ff f924 	bl	8019dfc <_Bfree>
 801abb4:	9905      	ldr	r1, [sp, #20]
 801abb6:	4620      	mov	r0, r4
 801abb8:	f7ff f920 	bl	8019dfc <_Bfree>
 801abbc:	4659      	mov	r1, fp
 801abbe:	4620      	mov	r0, r4
 801abc0:	f7ff f91c 	bl	8019dfc <_Bfree>
 801abc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801abc6:	4620      	mov	r0, r4
 801abc8:	f7ff f918 	bl	8019dfc <_Bfree>
 801abcc:	4629      	mov	r1, r5
 801abce:	4620      	mov	r0, r4
 801abd0:	f7ff f914 	bl	8019dfc <_Bfree>
 801abd4:	e5d7      	b.n	801a786 <_strtod_l+0x76>
 801abd6:	4b32      	ldr	r3, [pc, #200]	; (801aca0 <_strtod_l+0x590>)
 801abd8:	9304      	str	r3, [sp, #16]
 801abda:	2300      	movs	r3, #0
 801abdc:	112d      	asrs	r5, r5, #4
 801abde:	4640      	mov	r0, r8
 801abe0:	4649      	mov	r1, r9
 801abe2:	469a      	mov	sl, r3
 801abe4:	2d01      	cmp	r5, #1
 801abe6:	dc21      	bgt.n	801ac2c <_strtod_l+0x51c>
 801abe8:	b10b      	cbz	r3, 801abee <_strtod_l+0x4de>
 801abea:	4680      	mov	r8, r0
 801abec:	4689      	mov	r9, r1
 801abee:	492c      	ldr	r1, [pc, #176]	; (801aca0 <_strtod_l+0x590>)
 801abf0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801abf4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801abf8:	4642      	mov	r2, r8
 801abfa:	464b      	mov	r3, r9
 801abfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ac00:	f7e5 fd2a 	bl	8000658 <__aeabi_dmul>
 801ac04:	4b27      	ldr	r3, [pc, #156]	; (801aca4 <_strtod_l+0x594>)
 801ac06:	460a      	mov	r2, r1
 801ac08:	400b      	ands	r3, r1
 801ac0a:	4927      	ldr	r1, [pc, #156]	; (801aca8 <_strtod_l+0x598>)
 801ac0c:	428b      	cmp	r3, r1
 801ac0e:	4680      	mov	r8, r0
 801ac10:	d8be      	bhi.n	801ab90 <_strtod_l+0x480>
 801ac12:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801ac16:	428b      	cmp	r3, r1
 801ac18:	bf86      	itte	hi
 801ac1a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801acac <_strtod_l+0x59c>
 801ac1e:	f04f 38ff 	movhi.w	r8, #4294967295
 801ac22:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801ac26:	2300      	movs	r3, #0
 801ac28:	9304      	str	r3, [sp, #16]
 801ac2a:	e07b      	b.n	801ad24 <_strtod_l+0x614>
 801ac2c:	07ea      	lsls	r2, r5, #31
 801ac2e:	d505      	bpl.n	801ac3c <_strtod_l+0x52c>
 801ac30:	9b04      	ldr	r3, [sp, #16]
 801ac32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac36:	f7e5 fd0f 	bl	8000658 <__aeabi_dmul>
 801ac3a:	2301      	movs	r3, #1
 801ac3c:	9a04      	ldr	r2, [sp, #16]
 801ac3e:	3208      	adds	r2, #8
 801ac40:	f10a 0a01 	add.w	sl, sl, #1
 801ac44:	106d      	asrs	r5, r5, #1
 801ac46:	9204      	str	r2, [sp, #16]
 801ac48:	e7cc      	b.n	801abe4 <_strtod_l+0x4d4>
 801ac4a:	d0ec      	beq.n	801ac26 <_strtod_l+0x516>
 801ac4c:	426d      	negs	r5, r5
 801ac4e:	f015 020f 	ands.w	r2, r5, #15
 801ac52:	d00a      	beq.n	801ac6a <_strtod_l+0x55a>
 801ac54:	4b11      	ldr	r3, [pc, #68]	; (801ac9c <_strtod_l+0x58c>)
 801ac56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ac5a:	4640      	mov	r0, r8
 801ac5c:	4649      	mov	r1, r9
 801ac5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac62:	f7e5 fe23 	bl	80008ac <__aeabi_ddiv>
 801ac66:	4680      	mov	r8, r0
 801ac68:	4689      	mov	r9, r1
 801ac6a:	112d      	asrs	r5, r5, #4
 801ac6c:	d0db      	beq.n	801ac26 <_strtod_l+0x516>
 801ac6e:	2d1f      	cmp	r5, #31
 801ac70:	dd1e      	ble.n	801acb0 <_strtod_l+0x5a0>
 801ac72:	2500      	movs	r5, #0
 801ac74:	46ab      	mov	fp, r5
 801ac76:	9509      	str	r5, [sp, #36]	; 0x24
 801ac78:	9505      	str	r5, [sp, #20]
 801ac7a:	2322      	movs	r3, #34	; 0x22
 801ac7c:	f04f 0800 	mov.w	r8, #0
 801ac80:	f04f 0900 	mov.w	r9, #0
 801ac84:	6023      	str	r3, [r4, #0]
 801ac86:	e78d      	b.n	801aba4 <_strtod_l+0x494>
 801ac88:	0801da7d 	.word	0x0801da7d
 801ac8c:	0801dca4 	.word	0x0801dca4
 801ac90:	0801da75 	.word	0x0801da75
 801ac94:	0801daaa 	.word	0x0801daaa
 801ac98:	0801de50 	.word	0x0801de50
 801ac9c:	0801dbb8 	.word	0x0801dbb8
 801aca0:	0801db90 	.word	0x0801db90
 801aca4:	7ff00000 	.word	0x7ff00000
 801aca8:	7ca00000 	.word	0x7ca00000
 801acac:	7fefffff 	.word	0x7fefffff
 801acb0:	f015 0310 	ands.w	r3, r5, #16
 801acb4:	bf18      	it	ne
 801acb6:	236a      	movne	r3, #106	; 0x6a
 801acb8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801b05c <_strtod_l+0x94c>
 801acbc:	9304      	str	r3, [sp, #16]
 801acbe:	4640      	mov	r0, r8
 801acc0:	4649      	mov	r1, r9
 801acc2:	2300      	movs	r3, #0
 801acc4:	07ea      	lsls	r2, r5, #31
 801acc6:	d504      	bpl.n	801acd2 <_strtod_l+0x5c2>
 801acc8:	e9da 2300 	ldrd	r2, r3, [sl]
 801accc:	f7e5 fcc4 	bl	8000658 <__aeabi_dmul>
 801acd0:	2301      	movs	r3, #1
 801acd2:	106d      	asrs	r5, r5, #1
 801acd4:	f10a 0a08 	add.w	sl, sl, #8
 801acd8:	d1f4      	bne.n	801acc4 <_strtod_l+0x5b4>
 801acda:	b10b      	cbz	r3, 801ace0 <_strtod_l+0x5d0>
 801acdc:	4680      	mov	r8, r0
 801acde:	4689      	mov	r9, r1
 801ace0:	9b04      	ldr	r3, [sp, #16]
 801ace2:	b1bb      	cbz	r3, 801ad14 <_strtod_l+0x604>
 801ace4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801ace8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801acec:	2b00      	cmp	r3, #0
 801acee:	4649      	mov	r1, r9
 801acf0:	dd10      	ble.n	801ad14 <_strtod_l+0x604>
 801acf2:	2b1f      	cmp	r3, #31
 801acf4:	f340 811e 	ble.w	801af34 <_strtod_l+0x824>
 801acf8:	2b34      	cmp	r3, #52	; 0x34
 801acfa:	bfde      	ittt	le
 801acfc:	f04f 33ff 	movle.w	r3, #4294967295
 801ad00:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801ad04:	4093      	lslle	r3, r2
 801ad06:	f04f 0800 	mov.w	r8, #0
 801ad0a:	bfcc      	ite	gt
 801ad0c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801ad10:	ea03 0901 	andle.w	r9, r3, r1
 801ad14:	2200      	movs	r2, #0
 801ad16:	2300      	movs	r3, #0
 801ad18:	4640      	mov	r0, r8
 801ad1a:	4649      	mov	r1, r9
 801ad1c:	f7e5 ff04 	bl	8000b28 <__aeabi_dcmpeq>
 801ad20:	2800      	cmp	r0, #0
 801ad22:	d1a6      	bne.n	801ac72 <_strtod_l+0x562>
 801ad24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad26:	9300      	str	r3, [sp, #0]
 801ad28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ad2a:	4633      	mov	r3, r6
 801ad2c:	465a      	mov	r2, fp
 801ad2e:	4620      	mov	r0, r4
 801ad30:	f7ff f8cc 	bl	8019ecc <__s2b>
 801ad34:	9009      	str	r0, [sp, #36]	; 0x24
 801ad36:	2800      	cmp	r0, #0
 801ad38:	f43f af2a 	beq.w	801ab90 <_strtod_l+0x480>
 801ad3c:	9a08      	ldr	r2, [sp, #32]
 801ad3e:	9b05      	ldr	r3, [sp, #20]
 801ad40:	2a00      	cmp	r2, #0
 801ad42:	eba3 0307 	sub.w	r3, r3, r7
 801ad46:	bfa8      	it	ge
 801ad48:	2300      	movge	r3, #0
 801ad4a:	930c      	str	r3, [sp, #48]	; 0x30
 801ad4c:	2500      	movs	r5, #0
 801ad4e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801ad52:	9312      	str	r3, [sp, #72]	; 0x48
 801ad54:	46ab      	mov	fp, r5
 801ad56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad58:	4620      	mov	r0, r4
 801ad5a:	6859      	ldr	r1, [r3, #4]
 801ad5c:	f7ff f80e 	bl	8019d7c <_Balloc>
 801ad60:	9005      	str	r0, [sp, #20]
 801ad62:	2800      	cmp	r0, #0
 801ad64:	f43f af18 	beq.w	801ab98 <_strtod_l+0x488>
 801ad68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad6a:	691a      	ldr	r2, [r3, #16]
 801ad6c:	3202      	adds	r2, #2
 801ad6e:	f103 010c 	add.w	r1, r3, #12
 801ad72:	0092      	lsls	r2, r2, #2
 801ad74:	300c      	adds	r0, #12
 801ad76:	f7fe f927 	bl	8018fc8 <memcpy>
 801ad7a:	ec49 8b10 	vmov	d0, r8, r9
 801ad7e:	aa18      	add	r2, sp, #96	; 0x60
 801ad80:	a917      	add	r1, sp, #92	; 0x5c
 801ad82:	4620      	mov	r0, r4
 801ad84:	f7ff fbd6 	bl	801a534 <__d2b>
 801ad88:	ec49 8b18 	vmov	d8, r8, r9
 801ad8c:	9016      	str	r0, [sp, #88]	; 0x58
 801ad8e:	2800      	cmp	r0, #0
 801ad90:	f43f af02 	beq.w	801ab98 <_strtod_l+0x488>
 801ad94:	2101      	movs	r1, #1
 801ad96:	4620      	mov	r0, r4
 801ad98:	f7ff f930 	bl	8019ffc <__i2b>
 801ad9c:	4683      	mov	fp, r0
 801ad9e:	2800      	cmp	r0, #0
 801ada0:	f43f aefa 	beq.w	801ab98 <_strtod_l+0x488>
 801ada4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801ada6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ada8:	2e00      	cmp	r6, #0
 801adaa:	bfab      	itete	ge
 801adac:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801adae:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 801adb0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801adb2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 801adb6:	bfac      	ite	ge
 801adb8:	eb06 0a03 	addge.w	sl, r6, r3
 801adbc:	1b9f      	sublt	r7, r3, r6
 801adbe:	9b04      	ldr	r3, [sp, #16]
 801adc0:	1af6      	subs	r6, r6, r3
 801adc2:	4416      	add	r6, r2
 801adc4:	4ba0      	ldr	r3, [pc, #640]	; (801b048 <_strtod_l+0x938>)
 801adc6:	3e01      	subs	r6, #1
 801adc8:	429e      	cmp	r6, r3
 801adca:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801adce:	f280 80c4 	bge.w	801af5a <_strtod_l+0x84a>
 801add2:	1b9b      	subs	r3, r3, r6
 801add4:	2b1f      	cmp	r3, #31
 801add6:	eba2 0203 	sub.w	r2, r2, r3
 801adda:	f04f 0101 	mov.w	r1, #1
 801adde:	f300 80b0 	bgt.w	801af42 <_strtod_l+0x832>
 801ade2:	fa01 f303 	lsl.w	r3, r1, r3
 801ade6:	930e      	str	r3, [sp, #56]	; 0x38
 801ade8:	2300      	movs	r3, #0
 801adea:	930d      	str	r3, [sp, #52]	; 0x34
 801adec:	eb0a 0602 	add.w	r6, sl, r2
 801adf0:	9b04      	ldr	r3, [sp, #16]
 801adf2:	45b2      	cmp	sl, r6
 801adf4:	4417      	add	r7, r2
 801adf6:	441f      	add	r7, r3
 801adf8:	4653      	mov	r3, sl
 801adfa:	bfa8      	it	ge
 801adfc:	4633      	movge	r3, r6
 801adfe:	42bb      	cmp	r3, r7
 801ae00:	bfa8      	it	ge
 801ae02:	463b      	movge	r3, r7
 801ae04:	2b00      	cmp	r3, #0
 801ae06:	bfc2      	ittt	gt
 801ae08:	1af6      	subgt	r6, r6, r3
 801ae0a:	1aff      	subgt	r7, r7, r3
 801ae0c:	ebaa 0a03 	subgt.w	sl, sl, r3
 801ae10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ae12:	2b00      	cmp	r3, #0
 801ae14:	dd17      	ble.n	801ae46 <_strtod_l+0x736>
 801ae16:	4659      	mov	r1, fp
 801ae18:	461a      	mov	r2, r3
 801ae1a:	4620      	mov	r0, r4
 801ae1c:	f7ff f9ae 	bl	801a17c <__pow5mult>
 801ae20:	4683      	mov	fp, r0
 801ae22:	2800      	cmp	r0, #0
 801ae24:	f43f aeb8 	beq.w	801ab98 <_strtod_l+0x488>
 801ae28:	4601      	mov	r1, r0
 801ae2a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801ae2c:	4620      	mov	r0, r4
 801ae2e:	f7ff f8fb 	bl	801a028 <__multiply>
 801ae32:	900b      	str	r0, [sp, #44]	; 0x2c
 801ae34:	2800      	cmp	r0, #0
 801ae36:	f43f aeaf 	beq.w	801ab98 <_strtod_l+0x488>
 801ae3a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801ae3c:	4620      	mov	r0, r4
 801ae3e:	f7fe ffdd 	bl	8019dfc <_Bfree>
 801ae42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ae44:	9316      	str	r3, [sp, #88]	; 0x58
 801ae46:	2e00      	cmp	r6, #0
 801ae48:	f300 808c 	bgt.w	801af64 <_strtod_l+0x854>
 801ae4c:	9b08      	ldr	r3, [sp, #32]
 801ae4e:	2b00      	cmp	r3, #0
 801ae50:	dd08      	ble.n	801ae64 <_strtod_l+0x754>
 801ae52:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ae54:	9905      	ldr	r1, [sp, #20]
 801ae56:	4620      	mov	r0, r4
 801ae58:	f7ff f990 	bl	801a17c <__pow5mult>
 801ae5c:	9005      	str	r0, [sp, #20]
 801ae5e:	2800      	cmp	r0, #0
 801ae60:	f43f ae9a 	beq.w	801ab98 <_strtod_l+0x488>
 801ae64:	2f00      	cmp	r7, #0
 801ae66:	dd08      	ble.n	801ae7a <_strtod_l+0x76a>
 801ae68:	9905      	ldr	r1, [sp, #20]
 801ae6a:	463a      	mov	r2, r7
 801ae6c:	4620      	mov	r0, r4
 801ae6e:	f7ff f9df 	bl	801a230 <__lshift>
 801ae72:	9005      	str	r0, [sp, #20]
 801ae74:	2800      	cmp	r0, #0
 801ae76:	f43f ae8f 	beq.w	801ab98 <_strtod_l+0x488>
 801ae7a:	f1ba 0f00 	cmp.w	sl, #0
 801ae7e:	dd08      	ble.n	801ae92 <_strtod_l+0x782>
 801ae80:	4659      	mov	r1, fp
 801ae82:	4652      	mov	r2, sl
 801ae84:	4620      	mov	r0, r4
 801ae86:	f7ff f9d3 	bl	801a230 <__lshift>
 801ae8a:	4683      	mov	fp, r0
 801ae8c:	2800      	cmp	r0, #0
 801ae8e:	f43f ae83 	beq.w	801ab98 <_strtod_l+0x488>
 801ae92:	9a05      	ldr	r2, [sp, #20]
 801ae94:	9916      	ldr	r1, [sp, #88]	; 0x58
 801ae96:	4620      	mov	r0, r4
 801ae98:	f7ff fa52 	bl	801a340 <__mdiff>
 801ae9c:	4605      	mov	r5, r0
 801ae9e:	2800      	cmp	r0, #0
 801aea0:	f43f ae7a 	beq.w	801ab98 <_strtod_l+0x488>
 801aea4:	68c3      	ldr	r3, [r0, #12]
 801aea6:	930b      	str	r3, [sp, #44]	; 0x2c
 801aea8:	2300      	movs	r3, #0
 801aeaa:	60c3      	str	r3, [r0, #12]
 801aeac:	4659      	mov	r1, fp
 801aeae:	f7ff fa2b 	bl	801a308 <__mcmp>
 801aeb2:	2800      	cmp	r0, #0
 801aeb4:	da60      	bge.n	801af78 <_strtod_l+0x868>
 801aeb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aeb8:	ea53 0308 	orrs.w	r3, r3, r8
 801aebc:	f040 8084 	bne.w	801afc8 <_strtod_l+0x8b8>
 801aec0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801aec4:	2b00      	cmp	r3, #0
 801aec6:	d17f      	bne.n	801afc8 <_strtod_l+0x8b8>
 801aec8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801aecc:	0d1b      	lsrs	r3, r3, #20
 801aece:	051b      	lsls	r3, r3, #20
 801aed0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801aed4:	d978      	bls.n	801afc8 <_strtod_l+0x8b8>
 801aed6:	696b      	ldr	r3, [r5, #20]
 801aed8:	b913      	cbnz	r3, 801aee0 <_strtod_l+0x7d0>
 801aeda:	692b      	ldr	r3, [r5, #16]
 801aedc:	2b01      	cmp	r3, #1
 801aede:	dd73      	ble.n	801afc8 <_strtod_l+0x8b8>
 801aee0:	4629      	mov	r1, r5
 801aee2:	2201      	movs	r2, #1
 801aee4:	4620      	mov	r0, r4
 801aee6:	f7ff f9a3 	bl	801a230 <__lshift>
 801aeea:	4659      	mov	r1, fp
 801aeec:	4605      	mov	r5, r0
 801aeee:	f7ff fa0b 	bl	801a308 <__mcmp>
 801aef2:	2800      	cmp	r0, #0
 801aef4:	dd68      	ble.n	801afc8 <_strtod_l+0x8b8>
 801aef6:	9904      	ldr	r1, [sp, #16]
 801aef8:	4a54      	ldr	r2, [pc, #336]	; (801b04c <_strtod_l+0x93c>)
 801aefa:	464b      	mov	r3, r9
 801aefc:	2900      	cmp	r1, #0
 801aefe:	f000 8084 	beq.w	801b00a <_strtod_l+0x8fa>
 801af02:	ea02 0109 	and.w	r1, r2, r9
 801af06:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801af0a:	dc7e      	bgt.n	801b00a <_strtod_l+0x8fa>
 801af0c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801af10:	f77f aeb3 	ble.w	801ac7a <_strtod_l+0x56a>
 801af14:	4b4e      	ldr	r3, [pc, #312]	; (801b050 <_strtod_l+0x940>)
 801af16:	4640      	mov	r0, r8
 801af18:	4649      	mov	r1, r9
 801af1a:	2200      	movs	r2, #0
 801af1c:	f7e5 fb9c 	bl	8000658 <__aeabi_dmul>
 801af20:	4b4a      	ldr	r3, [pc, #296]	; (801b04c <_strtod_l+0x93c>)
 801af22:	400b      	ands	r3, r1
 801af24:	4680      	mov	r8, r0
 801af26:	4689      	mov	r9, r1
 801af28:	2b00      	cmp	r3, #0
 801af2a:	f47f ae3f 	bne.w	801abac <_strtod_l+0x49c>
 801af2e:	2322      	movs	r3, #34	; 0x22
 801af30:	6023      	str	r3, [r4, #0]
 801af32:	e63b      	b.n	801abac <_strtod_l+0x49c>
 801af34:	f04f 32ff 	mov.w	r2, #4294967295
 801af38:	fa02 f303 	lsl.w	r3, r2, r3
 801af3c:	ea03 0808 	and.w	r8, r3, r8
 801af40:	e6e8      	b.n	801ad14 <_strtod_l+0x604>
 801af42:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801af46:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801af4a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801af4e:	36e2      	adds	r6, #226	; 0xe2
 801af50:	fa01 f306 	lsl.w	r3, r1, r6
 801af54:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 801af58:	e748      	b.n	801adec <_strtod_l+0x6dc>
 801af5a:	2100      	movs	r1, #0
 801af5c:	2301      	movs	r3, #1
 801af5e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801af62:	e743      	b.n	801adec <_strtod_l+0x6dc>
 801af64:	9916      	ldr	r1, [sp, #88]	; 0x58
 801af66:	4632      	mov	r2, r6
 801af68:	4620      	mov	r0, r4
 801af6a:	f7ff f961 	bl	801a230 <__lshift>
 801af6e:	9016      	str	r0, [sp, #88]	; 0x58
 801af70:	2800      	cmp	r0, #0
 801af72:	f47f af6b 	bne.w	801ae4c <_strtod_l+0x73c>
 801af76:	e60f      	b.n	801ab98 <_strtod_l+0x488>
 801af78:	46ca      	mov	sl, r9
 801af7a:	d171      	bne.n	801b060 <_strtod_l+0x950>
 801af7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801af7e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801af82:	b352      	cbz	r2, 801afda <_strtod_l+0x8ca>
 801af84:	4a33      	ldr	r2, [pc, #204]	; (801b054 <_strtod_l+0x944>)
 801af86:	4293      	cmp	r3, r2
 801af88:	d12a      	bne.n	801afe0 <_strtod_l+0x8d0>
 801af8a:	9b04      	ldr	r3, [sp, #16]
 801af8c:	4641      	mov	r1, r8
 801af8e:	b1fb      	cbz	r3, 801afd0 <_strtod_l+0x8c0>
 801af90:	4b2e      	ldr	r3, [pc, #184]	; (801b04c <_strtod_l+0x93c>)
 801af92:	ea09 0303 	and.w	r3, r9, r3
 801af96:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801af9a:	f04f 32ff 	mov.w	r2, #4294967295
 801af9e:	d81a      	bhi.n	801afd6 <_strtod_l+0x8c6>
 801afa0:	0d1b      	lsrs	r3, r3, #20
 801afa2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801afa6:	fa02 f303 	lsl.w	r3, r2, r3
 801afaa:	4299      	cmp	r1, r3
 801afac:	d118      	bne.n	801afe0 <_strtod_l+0x8d0>
 801afae:	4b2a      	ldr	r3, [pc, #168]	; (801b058 <_strtod_l+0x948>)
 801afb0:	459a      	cmp	sl, r3
 801afb2:	d102      	bne.n	801afba <_strtod_l+0x8aa>
 801afb4:	3101      	adds	r1, #1
 801afb6:	f43f adef 	beq.w	801ab98 <_strtod_l+0x488>
 801afba:	4b24      	ldr	r3, [pc, #144]	; (801b04c <_strtod_l+0x93c>)
 801afbc:	ea0a 0303 	and.w	r3, sl, r3
 801afc0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801afc4:	f04f 0800 	mov.w	r8, #0
 801afc8:	9b04      	ldr	r3, [sp, #16]
 801afca:	2b00      	cmp	r3, #0
 801afcc:	d1a2      	bne.n	801af14 <_strtod_l+0x804>
 801afce:	e5ed      	b.n	801abac <_strtod_l+0x49c>
 801afd0:	f04f 33ff 	mov.w	r3, #4294967295
 801afd4:	e7e9      	b.n	801afaa <_strtod_l+0x89a>
 801afd6:	4613      	mov	r3, r2
 801afd8:	e7e7      	b.n	801afaa <_strtod_l+0x89a>
 801afda:	ea53 0308 	orrs.w	r3, r3, r8
 801afde:	d08a      	beq.n	801aef6 <_strtod_l+0x7e6>
 801afe0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801afe2:	b1e3      	cbz	r3, 801b01e <_strtod_l+0x90e>
 801afe4:	ea13 0f0a 	tst.w	r3, sl
 801afe8:	d0ee      	beq.n	801afc8 <_strtod_l+0x8b8>
 801afea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801afec:	9a04      	ldr	r2, [sp, #16]
 801afee:	4640      	mov	r0, r8
 801aff0:	4649      	mov	r1, r9
 801aff2:	b1c3      	cbz	r3, 801b026 <_strtod_l+0x916>
 801aff4:	f7ff fb6f 	bl	801a6d6 <sulp>
 801aff8:	4602      	mov	r2, r0
 801affa:	460b      	mov	r3, r1
 801affc:	ec51 0b18 	vmov	r0, r1, d8
 801b000:	f7e5 f974 	bl	80002ec <__adddf3>
 801b004:	4680      	mov	r8, r0
 801b006:	4689      	mov	r9, r1
 801b008:	e7de      	b.n	801afc8 <_strtod_l+0x8b8>
 801b00a:	4013      	ands	r3, r2
 801b00c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801b010:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801b014:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801b018:	f04f 38ff 	mov.w	r8, #4294967295
 801b01c:	e7d4      	b.n	801afc8 <_strtod_l+0x8b8>
 801b01e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b020:	ea13 0f08 	tst.w	r3, r8
 801b024:	e7e0      	b.n	801afe8 <_strtod_l+0x8d8>
 801b026:	f7ff fb56 	bl	801a6d6 <sulp>
 801b02a:	4602      	mov	r2, r0
 801b02c:	460b      	mov	r3, r1
 801b02e:	ec51 0b18 	vmov	r0, r1, d8
 801b032:	f7e5 f959 	bl	80002e8 <__aeabi_dsub>
 801b036:	2200      	movs	r2, #0
 801b038:	2300      	movs	r3, #0
 801b03a:	4680      	mov	r8, r0
 801b03c:	4689      	mov	r9, r1
 801b03e:	f7e5 fd73 	bl	8000b28 <__aeabi_dcmpeq>
 801b042:	2800      	cmp	r0, #0
 801b044:	d0c0      	beq.n	801afc8 <_strtod_l+0x8b8>
 801b046:	e618      	b.n	801ac7a <_strtod_l+0x56a>
 801b048:	fffffc02 	.word	0xfffffc02
 801b04c:	7ff00000 	.word	0x7ff00000
 801b050:	39500000 	.word	0x39500000
 801b054:	000fffff 	.word	0x000fffff
 801b058:	7fefffff 	.word	0x7fefffff
 801b05c:	0801dcb8 	.word	0x0801dcb8
 801b060:	4659      	mov	r1, fp
 801b062:	4628      	mov	r0, r5
 801b064:	f7ff fac0 	bl	801a5e8 <__ratio>
 801b068:	ec57 6b10 	vmov	r6, r7, d0
 801b06c:	ee10 0a10 	vmov	r0, s0
 801b070:	2200      	movs	r2, #0
 801b072:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b076:	4639      	mov	r1, r7
 801b078:	f7e5 fd6a 	bl	8000b50 <__aeabi_dcmple>
 801b07c:	2800      	cmp	r0, #0
 801b07e:	d071      	beq.n	801b164 <_strtod_l+0xa54>
 801b080:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b082:	2b00      	cmp	r3, #0
 801b084:	d17c      	bne.n	801b180 <_strtod_l+0xa70>
 801b086:	f1b8 0f00 	cmp.w	r8, #0
 801b08a:	d15a      	bne.n	801b142 <_strtod_l+0xa32>
 801b08c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b090:	2b00      	cmp	r3, #0
 801b092:	d15d      	bne.n	801b150 <_strtod_l+0xa40>
 801b094:	4b90      	ldr	r3, [pc, #576]	; (801b2d8 <_strtod_l+0xbc8>)
 801b096:	2200      	movs	r2, #0
 801b098:	4630      	mov	r0, r6
 801b09a:	4639      	mov	r1, r7
 801b09c:	f7e5 fd4e 	bl	8000b3c <__aeabi_dcmplt>
 801b0a0:	2800      	cmp	r0, #0
 801b0a2:	d15c      	bne.n	801b15e <_strtod_l+0xa4e>
 801b0a4:	4630      	mov	r0, r6
 801b0a6:	4639      	mov	r1, r7
 801b0a8:	4b8c      	ldr	r3, [pc, #560]	; (801b2dc <_strtod_l+0xbcc>)
 801b0aa:	2200      	movs	r2, #0
 801b0ac:	f7e5 fad4 	bl	8000658 <__aeabi_dmul>
 801b0b0:	4606      	mov	r6, r0
 801b0b2:	460f      	mov	r7, r1
 801b0b4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 801b0b8:	9606      	str	r6, [sp, #24]
 801b0ba:	9307      	str	r3, [sp, #28]
 801b0bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b0c0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801b0c4:	4b86      	ldr	r3, [pc, #536]	; (801b2e0 <_strtod_l+0xbd0>)
 801b0c6:	ea0a 0303 	and.w	r3, sl, r3
 801b0ca:	930d      	str	r3, [sp, #52]	; 0x34
 801b0cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b0ce:	4b85      	ldr	r3, [pc, #532]	; (801b2e4 <_strtod_l+0xbd4>)
 801b0d0:	429a      	cmp	r2, r3
 801b0d2:	f040 8090 	bne.w	801b1f6 <_strtod_l+0xae6>
 801b0d6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801b0da:	ec49 8b10 	vmov	d0, r8, r9
 801b0de:	f7ff f9b9 	bl	801a454 <__ulp>
 801b0e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b0e6:	ec51 0b10 	vmov	r0, r1, d0
 801b0ea:	f7e5 fab5 	bl	8000658 <__aeabi_dmul>
 801b0ee:	4642      	mov	r2, r8
 801b0f0:	464b      	mov	r3, r9
 801b0f2:	f7e5 f8fb 	bl	80002ec <__adddf3>
 801b0f6:	460b      	mov	r3, r1
 801b0f8:	4979      	ldr	r1, [pc, #484]	; (801b2e0 <_strtod_l+0xbd0>)
 801b0fa:	4a7b      	ldr	r2, [pc, #492]	; (801b2e8 <_strtod_l+0xbd8>)
 801b0fc:	4019      	ands	r1, r3
 801b0fe:	4291      	cmp	r1, r2
 801b100:	4680      	mov	r8, r0
 801b102:	d944      	bls.n	801b18e <_strtod_l+0xa7e>
 801b104:	ee18 2a90 	vmov	r2, s17
 801b108:	4b78      	ldr	r3, [pc, #480]	; (801b2ec <_strtod_l+0xbdc>)
 801b10a:	429a      	cmp	r2, r3
 801b10c:	d104      	bne.n	801b118 <_strtod_l+0xa08>
 801b10e:	ee18 3a10 	vmov	r3, s16
 801b112:	3301      	adds	r3, #1
 801b114:	f43f ad40 	beq.w	801ab98 <_strtod_l+0x488>
 801b118:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801b2ec <_strtod_l+0xbdc>
 801b11c:	f04f 38ff 	mov.w	r8, #4294967295
 801b120:	9916      	ldr	r1, [sp, #88]	; 0x58
 801b122:	4620      	mov	r0, r4
 801b124:	f7fe fe6a 	bl	8019dfc <_Bfree>
 801b128:	9905      	ldr	r1, [sp, #20]
 801b12a:	4620      	mov	r0, r4
 801b12c:	f7fe fe66 	bl	8019dfc <_Bfree>
 801b130:	4659      	mov	r1, fp
 801b132:	4620      	mov	r0, r4
 801b134:	f7fe fe62 	bl	8019dfc <_Bfree>
 801b138:	4629      	mov	r1, r5
 801b13a:	4620      	mov	r0, r4
 801b13c:	f7fe fe5e 	bl	8019dfc <_Bfree>
 801b140:	e609      	b.n	801ad56 <_strtod_l+0x646>
 801b142:	f1b8 0f01 	cmp.w	r8, #1
 801b146:	d103      	bne.n	801b150 <_strtod_l+0xa40>
 801b148:	f1b9 0f00 	cmp.w	r9, #0
 801b14c:	f43f ad95 	beq.w	801ac7a <_strtod_l+0x56a>
 801b150:	ed9f 7b55 	vldr	d7, [pc, #340]	; 801b2a8 <_strtod_l+0xb98>
 801b154:	4f60      	ldr	r7, [pc, #384]	; (801b2d8 <_strtod_l+0xbc8>)
 801b156:	ed8d 7b06 	vstr	d7, [sp, #24]
 801b15a:	2600      	movs	r6, #0
 801b15c:	e7ae      	b.n	801b0bc <_strtod_l+0x9ac>
 801b15e:	4f5f      	ldr	r7, [pc, #380]	; (801b2dc <_strtod_l+0xbcc>)
 801b160:	2600      	movs	r6, #0
 801b162:	e7a7      	b.n	801b0b4 <_strtod_l+0x9a4>
 801b164:	4b5d      	ldr	r3, [pc, #372]	; (801b2dc <_strtod_l+0xbcc>)
 801b166:	4630      	mov	r0, r6
 801b168:	4639      	mov	r1, r7
 801b16a:	2200      	movs	r2, #0
 801b16c:	f7e5 fa74 	bl	8000658 <__aeabi_dmul>
 801b170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b172:	4606      	mov	r6, r0
 801b174:	460f      	mov	r7, r1
 801b176:	2b00      	cmp	r3, #0
 801b178:	d09c      	beq.n	801b0b4 <_strtod_l+0x9a4>
 801b17a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801b17e:	e79d      	b.n	801b0bc <_strtod_l+0x9ac>
 801b180:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 801b2b0 <_strtod_l+0xba0>
 801b184:	ed8d 7b06 	vstr	d7, [sp, #24]
 801b188:	ec57 6b17 	vmov	r6, r7, d7
 801b18c:	e796      	b.n	801b0bc <_strtod_l+0x9ac>
 801b18e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801b192:	9b04      	ldr	r3, [sp, #16]
 801b194:	46ca      	mov	sl, r9
 801b196:	2b00      	cmp	r3, #0
 801b198:	d1c2      	bne.n	801b120 <_strtod_l+0xa10>
 801b19a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801b19e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b1a0:	0d1b      	lsrs	r3, r3, #20
 801b1a2:	051b      	lsls	r3, r3, #20
 801b1a4:	429a      	cmp	r2, r3
 801b1a6:	d1bb      	bne.n	801b120 <_strtod_l+0xa10>
 801b1a8:	4630      	mov	r0, r6
 801b1aa:	4639      	mov	r1, r7
 801b1ac:	f7e5 fdb4 	bl	8000d18 <__aeabi_d2lz>
 801b1b0:	f7e5 fa24 	bl	80005fc <__aeabi_l2d>
 801b1b4:	4602      	mov	r2, r0
 801b1b6:	460b      	mov	r3, r1
 801b1b8:	4630      	mov	r0, r6
 801b1ba:	4639      	mov	r1, r7
 801b1bc:	f7e5 f894 	bl	80002e8 <__aeabi_dsub>
 801b1c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b1c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b1c6:	ea43 0308 	orr.w	r3, r3, r8
 801b1ca:	4313      	orrs	r3, r2
 801b1cc:	4606      	mov	r6, r0
 801b1ce:	460f      	mov	r7, r1
 801b1d0:	d054      	beq.n	801b27c <_strtod_l+0xb6c>
 801b1d2:	a339      	add	r3, pc, #228	; (adr r3, 801b2b8 <_strtod_l+0xba8>)
 801b1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1d8:	f7e5 fcb0 	bl	8000b3c <__aeabi_dcmplt>
 801b1dc:	2800      	cmp	r0, #0
 801b1de:	f47f ace5 	bne.w	801abac <_strtod_l+0x49c>
 801b1e2:	a337      	add	r3, pc, #220	; (adr r3, 801b2c0 <_strtod_l+0xbb0>)
 801b1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1e8:	4630      	mov	r0, r6
 801b1ea:	4639      	mov	r1, r7
 801b1ec:	f7e5 fcc4 	bl	8000b78 <__aeabi_dcmpgt>
 801b1f0:	2800      	cmp	r0, #0
 801b1f2:	d095      	beq.n	801b120 <_strtod_l+0xa10>
 801b1f4:	e4da      	b.n	801abac <_strtod_l+0x49c>
 801b1f6:	9b04      	ldr	r3, [sp, #16]
 801b1f8:	b333      	cbz	r3, 801b248 <_strtod_l+0xb38>
 801b1fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b1fc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801b200:	d822      	bhi.n	801b248 <_strtod_l+0xb38>
 801b202:	a331      	add	r3, pc, #196	; (adr r3, 801b2c8 <_strtod_l+0xbb8>)
 801b204:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b208:	4630      	mov	r0, r6
 801b20a:	4639      	mov	r1, r7
 801b20c:	f7e5 fca0 	bl	8000b50 <__aeabi_dcmple>
 801b210:	b1a0      	cbz	r0, 801b23c <_strtod_l+0xb2c>
 801b212:	4639      	mov	r1, r7
 801b214:	4630      	mov	r0, r6
 801b216:	f7e5 fcf7 	bl	8000c08 <__aeabi_d2uiz>
 801b21a:	2801      	cmp	r0, #1
 801b21c:	bf38      	it	cc
 801b21e:	2001      	movcc	r0, #1
 801b220:	f7e5 f9a0 	bl	8000564 <__aeabi_ui2d>
 801b224:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b226:	4606      	mov	r6, r0
 801b228:	460f      	mov	r7, r1
 801b22a:	bb23      	cbnz	r3, 801b276 <_strtod_l+0xb66>
 801b22c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b230:	9010      	str	r0, [sp, #64]	; 0x40
 801b232:	9311      	str	r3, [sp, #68]	; 0x44
 801b234:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801b238:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801b23c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b23e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b240:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801b244:	1a9b      	subs	r3, r3, r2
 801b246:	930f      	str	r3, [sp, #60]	; 0x3c
 801b248:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801b24c:	eeb0 0a48 	vmov.f32	s0, s16
 801b250:	eef0 0a68 	vmov.f32	s1, s17
 801b254:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801b258:	f7ff f8fc 	bl	801a454 <__ulp>
 801b25c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801b260:	ec53 2b10 	vmov	r2, r3, d0
 801b264:	f7e5 f9f8 	bl	8000658 <__aeabi_dmul>
 801b268:	ec53 2b18 	vmov	r2, r3, d8
 801b26c:	f7e5 f83e 	bl	80002ec <__adddf3>
 801b270:	4680      	mov	r8, r0
 801b272:	4689      	mov	r9, r1
 801b274:	e78d      	b.n	801b192 <_strtod_l+0xa82>
 801b276:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801b27a:	e7db      	b.n	801b234 <_strtod_l+0xb24>
 801b27c:	a314      	add	r3, pc, #80	; (adr r3, 801b2d0 <_strtod_l+0xbc0>)
 801b27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b282:	f7e5 fc5b 	bl	8000b3c <__aeabi_dcmplt>
 801b286:	e7b3      	b.n	801b1f0 <_strtod_l+0xae0>
 801b288:	2300      	movs	r3, #0
 801b28a:	930a      	str	r3, [sp, #40]	; 0x28
 801b28c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b28e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b290:	6013      	str	r3, [r2, #0]
 801b292:	f7ff ba7c 	b.w	801a78e <_strtod_l+0x7e>
 801b296:	2a65      	cmp	r2, #101	; 0x65
 801b298:	f43f ab75 	beq.w	801a986 <_strtod_l+0x276>
 801b29c:	2a45      	cmp	r2, #69	; 0x45
 801b29e:	f43f ab72 	beq.w	801a986 <_strtod_l+0x276>
 801b2a2:	2301      	movs	r3, #1
 801b2a4:	f7ff bbaa 	b.w	801a9fc <_strtod_l+0x2ec>
 801b2a8:	00000000 	.word	0x00000000
 801b2ac:	bff00000 	.word	0xbff00000
 801b2b0:	00000000 	.word	0x00000000
 801b2b4:	3ff00000 	.word	0x3ff00000
 801b2b8:	94a03595 	.word	0x94a03595
 801b2bc:	3fdfffff 	.word	0x3fdfffff
 801b2c0:	35afe535 	.word	0x35afe535
 801b2c4:	3fe00000 	.word	0x3fe00000
 801b2c8:	ffc00000 	.word	0xffc00000
 801b2cc:	41dfffff 	.word	0x41dfffff
 801b2d0:	94a03595 	.word	0x94a03595
 801b2d4:	3fcfffff 	.word	0x3fcfffff
 801b2d8:	3ff00000 	.word	0x3ff00000
 801b2dc:	3fe00000 	.word	0x3fe00000
 801b2e0:	7ff00000 	.word	0x7ff00000
 801b2e4:	7fe00000 	.word	0x7fe00000
 801b2e8:	7c9fffff 	.word	0x7c9fffff
 801b2ec:	7fefffff 	.word	0x7fefffff

0801b2f0 <_strtod_r>:
 801b2f0:	4b01      	ldr	r3, [pc, #4]	; (801b2f8 <_strtod_r+0x8>)
 801b2f2:	f7ff ba0d 	b.w	801a710 <_strtod_l>
 801b2f6:	bf00      	nop
 801b2f8:	2000019c 	.word	0x2000019c

0801b2fc <_strtol_l.constprop.0>:
 801b2fc:	2b01      	cmp	r3, #1
 801b2fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b302:	d001      	beq.n	801b308 <_strtol_l.constprop.0+0xc>
 801b304:	2b24      	cmp	r3, #36	; 0x24
 801b306:	d906      	bls.n	801b316 <_strtol_l.constprop.0+0x1a>
 801b308:	f7fd fe32 	bl	8018f70 <__errno>
 801b30c:	2316      	movs	r3, #22
 801b30e:	6003      	str	r3, [r0, #0]
 801b310:	2000      	movs	r0, #0
 801b312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b316:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801b3fc <_strtol_l.constprop.0+0x100>
 801b31a:	460d      	mov	r5, r1
 801b31c:	462e      	mov	r6, r5
 801b31e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b322:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801b326:	f017 0708 	ands.w	r7, r7, #8
 801b32a:	d1f7      	bne.n	801b31c <_strtol_l.constprop.0+0x20>
 801b32c:	2c2d      	cmp	r4, #45	; 0x2d
 801b32e:	d132      	bne.n	801b396 <_strtol_l.constprop.0+0x9a>
 801b330:	782c      	ldrb	r4, [r5, #0]
 801b332:	2701      	movs	r7, #1
 801b334:	1cb5      	adds	r5, r6, #2
 801b336:	2b00      	cmp	r3, #0
 801b338:	d05b      	beq.n	801b3f2 <_strtol_l.constprop.0+0xf6>
 801b33a:	2b10      	cmp	r3, #16
 801b33c:	d109      	bne.n	801b352 <_strtol_l.constprop.0+0x56>
 801b33e:	2c30      	cmp	r4, #48	; 0x30
 801b340:	d107      	bne.n	801b352 <_strtol_l.constprop.0+0x56>
 801b342:	782c      	ldrb	r4, [r5, #0]
 801b344:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801b348:	2c58      	cmp	r4, #88	; 0x58
 801b34a:	d14d      	bne.n	801b3e8 <_strtol_l.constprop.0+0xec>
 801b34c:	786c      	ldrb	r4, [r5, #1]
 801b34e:	2310      	movs	r3, #16
 801b350:	3502      	adds	r5, #2
 801b352:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801b356:	f108 38ff 	add.w	r8, r8, #4294967295
 801b35a:	f04f 0e00 	mov.w	lr, #0
 801b35e:	fbb8 f9f3 	udiv	r9, r8, r3
 801b362:	4676      	mov	r6, lr
 801b364:	fb03 8a19 	mls	sl, r3, r9, r8
 801b368:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801b36c:	f1bc 0f09 	cmp.w	ip, #9
 801b370:	d816      	bhi.n	801b3a0 <_strtol_l.constprop.0+0xa4>
 801b372:	4664      	mov	r4, ip
 801b374:	42a3      	cmp	r3, r4
 801b376:	dd24      	ble.n	801b3c2 <_strtol_l.constprop.0+0xc6>
 801b378:	f1be 3fff 	cmp.w	lr, #4294967295
 801b37c:	d008      	beq.n	801b390 <_strtol_l.constprop.0+0x94>
 801b37e:	45b1      	cmp	r9, r6
 801b380:	d31c      	bcc.n	801b3bc <_strtol_l.constprop.0+0xc0>
 801b382:	d101      	bne.n	801b388 <_strtol_l.constprop.0+0x8c>
 801b384:	45a2      	cmp	sl, r4
 801b386:	db19      	blt.n	801b3bc <_strtol_l.constprop.0+0xc0>
 801b388:	fb06 4603 	mla	r6, r6, r3, r4
 801b38c:	f04f 0e01 	mov.w	lr, #1
 801b390:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b394:	e7e8      	b.n	801b368 <_strtol_l.constprop.0+0x6c>
 801b396:	2c2b      	cmp	r4, #43	; 0x2b
 801b398:	bf04      	itt	eq
 801b39a:	782c      	ldrbeq	r4, [r5, #0]
 801b39c:	1cb5      	addeq	r5, r6, #2
 801b39e:	e7ca      	b.n	801b336 <_strtol_l.constprop.0+0x3a>
 801b3a0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801b3a4:	f1bc 0f19 	cmp.w	ip, #25
 801b3a8:	d801      	bhi.n	801b3ae <_strtol_l.constprop.0+0xb2>
 801b3aa:	3c37      	subs	r4, #55	; 0x37
 801b3ac:	e7e2      	b.n	801b374 <_strtol_l.constprop.0+0x78>
 801b3ae:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801b3b2:	f1bc 0f19 	cmp.w	ip, #25
 801b3b6:	d804      	bhi.n	801b3c2 <_strtol_l.constprop.0+0xc6>
 801b3b8:	3c57      	subs	r4, #87	; 0x57
 801b3ba:	e7db      	b.n	801b374 <_strtol_l.constprop.0+0x78>
 801b3bc:	f04f 3eff 	mov.w	lr, #4294967295
 801b3c0:	e7e6      	b.n	801b390 <_strtol_l.constprop.0+0x94>
 801b3c2:	f1be 3fff 	cmp.w	lr, #4294967295
 801b3c6:	d105      	bne.n	801b3d4 <_strtol_l.constprop.0+0xd8>
 801b3c8:	2322      	movs	r3, #34	; 0x22
 801b3ca:	6003      	str	r3, [r0, #0]
 801b3cc:	4646      	mov	r6, r8
 801b3ce:	b942      	cbnz	r2, 801b3e2 <_strtol_l.constprop.0+0xe6>
 801b3d0:	4630      	mov	r0, r6
 801b3d2:	e79e      	b.n	801b312 <_strtol_l.constprop.0+0x16>
 801b3d4:	b107      	cbz	r7, 801b3d8 <_strtol_l.constprop.0+0xdc>
 801b3d6:	4276      	negs	r6, r6
 801b3d8:	2a00      	cmp	r2, #0
 801b3da:	d0f9      	beq.n	801b3d0 <_strtol_l.constprop.0+0xd4>
 801b3dc:	f1be 0f00 	cmp.w	lr, #0
 801b3e0:	d000      	beq.n	801b3e4 <_strtol_l.constprop.0+0xe8>
 801b3e2:	1e69      	subs	r1, r5, #1
 801b3e4:	6011      	str	r1, [r2, #0]
 801b3e6:	e7f3      	b.n	801b3d0 <_strtol_l.constprop.0+0xd4>
 801b3e8:	2430      	movs	r4, #48	; 0x30
 801b3ea:	2b00      	cmp	r3, #0
 801b3ec:	d1b1      	bne.n	801b352 <_strtol_l.constprop.0+0x56>
 801b3ee:	2308      	movs	r3, #8
 801b3f0:	e7af      	b.n	801b352 <_strtol_l.constprop.0+0x56>
 801b3f2:	2c30      	cmp	r4, #48	; 0x30
 801b3f4:	d0a5      	beq.n	801b342 <_strtol_l.constprop.0+0x46>
 801b3f6:	230a      	movs	r3, #10
 801b3f8:	e7ab      	b.n	801b352 <_strtol_l.constprop.0+0x56>
 801b3fa:	bf00      	nop
 801b3fc:	0801dce1 	.word	0x0801dce1

0801b400 <_strtol_r>:
 801b400:	f7ff bf7c 	b.w	801b2fc <_strtol_l.constprop.0>

0801b404 <__ssputs_r>:
 801b404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b408:	688e      	ldr	r6, [r1, #8]
 801b40a:	461f      	mov	r7, r3
 801b40c:	42be      	cmp	r6, r7
 801b40e:	680b      	ldr	r3, [r1, #0]
 801b410:	4682      	mov	sl, r0
 801b412:	460c      	mov	r4, r1
 801b414:	4690      	mov	r8, r2
 801b416:	d82c      	bhi.n	801b472 <__ssputs_r+0x6e>
 801b418:	898a      	ldrh	r2, [r1, #12]
 801b41a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b41e:	d026      	beq.n	801b46e <__ssputs_r+0x6a>
 801b420:	6965      	ldr	r5, [r4, #20]
 801b422:	6909      	ldr	r1, [r1, #16]
 801b424:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b428:	eba3 0901 	sub.w	r9, r3, r1
 801b42c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b430:	1c7b      	adds	r3, r7, #1
 801b432:	444b      	add	r3, r9
 801b434:	106d      	asrs	r5, r5, #1
 801b436:	429d      	cmp	r5, r3
 801b438:	bf38      	it	cc
 801b43a:	461d      	movcc	r5, r3
 801b43c:	0553      	lsls	r3, r2, #21
 801b43e:	d527      	bpl.n	801b490 <__ssputs_r+0x8c>
 801b440:	4629      	mov	r1, r5
 801b442:	f7fc fb87 	bl	8017b54 <_malloc_r>
 801b446:	4606      	mov	r6, r0
 801b448:	b360      	cbz	r0, 801b4a4 <__ssputs_r+0xa0>
 801b44a:	6921      	ldr	r1, [r4, #16]
 801b44c:	464a      	mov	r2, r9
 801b44e:	f7fd fdbb 	bl	8018fc8 <memcpy>
 801b452:	89a3      	ldrh	r3, [r4, #12]
 801b454:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b45c:	81a3      	strh	r3, [r4, #12]
 801b45e:	6126      	str	r6, [r4, #16]
 801b460:	6165      	str	r5, [r4, #20]
 801b462:	444e      	add	r6, r9
 801b464:	eba5 0509 	sub.w	r5, r5, r9
 801b468:	6026      	str	r6, [r4, #0]
 801b46a:	60a5      	str	r5, [r4, #8]
 801b46c:	463e      	mov	r6, r7
 801b46e:	42be      	cmp	r6, r7
 801b470:	d900      	bls.n	801b474 <__ssputs_r+0x70>
 801b472:	463e      	mov	r6, r7
 801b474:	6820      	ldr	r0, [r4, #0]
 801b476:	4632      	mov	r2, r6
 801b478:	4641      	mov	r1, r8
 801b47a:	f000 ff02 	bl	801c282 <memmove>
 801b47e:	68a3      	ldr	r3, [r4, #8]
 801b480:	1b9b      	subs	r3, r3, r6
 801b482:	60a3      	str	r3, [r4, #8]
 801b484:	6823      	ldr	r3, [r4, #0]
 801b486:	4433      	add	r3, r6
 801b488:	6023      	str	r3, [r4, #0]
 801b48a:	2000      	movs	r0, #0
 801b48c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b490:	462a      	mov	r2, r5
 801b492:	f001 fad4 	bl	801ca3e <_realloc_r>
 801b496:	4606      	mov	r6, r0
 801b498:	2800      	cmp	r0, #0
 801b49a:	d1e0      	bne.n	801b45e <__ssputs_r+0x5a>
 801b49c:	6921      	ldr	r1, [r4, #16]
 801b49e:	4650      	mov	r0, sl
 801b4a0:	f7fe fc20 	bl	8019ce4 <_free_r>
 801b4a4:	230c      	movs	r3, #12
 801b4a6:	f8ca 3000 	str.w	r3, [sl]
 801b4aa:	89a3      	ldrh	r3, [r4, #12]
 801b4ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b4b0:	81a3      	strh	r3, [r4, #12]
 801b4b2:	f04f 30ff 	mov.w	r0, #4294967295
 801b4b6:	e7e9      	b.n	801b48c <__ssputs_r+0x88>

0801b4b8 <_svfiprintf_r>:
 801b4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4bc:	4698      	mov	r8, r3
 801b4be:	898b      	ldrh	r3, [r1, #12]
 801b4c0:	061b      	lsls	r3, r3, #24
 801b4c2:	b09d      	sub	sp, #116	; 0x74
 801b4c4:	4607      	mov	r7, r0
 801b4c6:	460d      	mov	r5, r1
 801b4c8:	4614      	mov	r4, r2
 801b4ca:	d50e      	bpl.n	801b4ea <_svfiprintf_r+0x32>
 801b4cc:	690b      	ldr	r3, [r1, #16]
 801b4ce:	b963      	cbnz	r3, 801b4ea <_svfiprintf_r+0x32>
 801b4d0:	2140      	movs	r1, #64	; 0x40
 801b4d2:	f7fc fb3f 	bl	8017b54 <_malloc_r>
 801b4d6:	6028      	str	r0, [r5, #0]
 801b4d8:	6128      	str	r0, [r5, #16]
 801b4da:	b920      	cbnz	r0, 801b4e6 <_svfiprintf_r+0x2e>
 801b4dc:	230c      	movs	r3, #12
 801b4de:	603b      	str	r3, [r7, #0]
 801b4e0:	f04f 30ff 	mov.w	r0, #4294967295
 801b4e4:	e0d0      	b.n	801b688 <_svfiprintf_r+0x1d0>
 801b4e6:	2340      	movs	r3, #64	; 0x40
 801b4e8:	616b      	str	r3, [r5, #20]
 801b4ea:	2300      	movs	r3, #0
 801b4ec:	9309      	str	r3, [sp, #36]	; 0x24
 801b4ee:	2320      	movs	r3, #32
 801b4f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b4f4:	f8cd 800c 	str.w	r8, [sp, #12]
 801b4f8:	2330      	movs	r3, #48	; 0x30
 801b4fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801b6a0 <_svfiprintf_r+0x1e8>
 801b4fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b502:	f04f 0901 	mov.w	r9, #1
 801b506:	4623      	mov	r3, r4
 801b508:	469a      	mov	sl, r3
 801b50a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b50e:	b10a      	cbz	r2, 801b514 <_svfiprintf_r+0x5c>
 801b510:	2a25      	cmp	r2, #37	; 0x25
 801b512:	d1f9      	bne.n	801b508 <_svfiprintf_r+0x50>
 801b514:	ebba 0b04 	subs.w	fp, sl, r4
 801b518:	d00b      	beq.n	801b532 <_svfiprintf_r+0x7a>
 801b51a:	465b      	mov	r3, fp
 801b51c:	4622      	mov	r2, r4
 801b51e:	4629      	mov	r1, r5
 801b520:	4638      	mov	r0, r7
 801b522:	f7ff ff6f 	bl	801b404 <__ssputs_r>
 801b526:	3001      	adds	r0, #1
 801b528:	f000 80a9 	beq.w	801b67e <_svfiprintf_r+0x1c6>
 801b52c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b52e:	445a      	add	r2, fp
 801b530:	9209      	str	r2, [sp, #36]	; 0x24
 801b532:	f89a 3000 	ldrb.w	r3, [sl]
 801b536:	2b00      	cmp	r3, #0
 801b538:	f000 80a1 	beq.w	801b67e <_svfiprintf_r+0x1c6>
 801b53c:	2300      	movs	r3, #0
 801b53e:	f04f 32ff 	mov.w	r2, #4294967295
 801b542:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b546:	f10a 0a01 	add.w	sl, sl, #1
 801b54a:	9304      	str	r3, [sp, #16]
 801b54c:	9307      	str	r3, [sp, #28]
 801b54e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b552:	931a      	str	r3, [sp, #104]	; 0x68
 801b554:	4654      	mov	r4, sl
 801b556:	2205      	movs	r2, #5
 801b558:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b55c:	4850      	ldr	r0, [pc, #320]	; (801b6a0 <_svfiprintf_r+0x1e8>)
 801b55e:	f7e4 fe67 	bl	8000230 <memchr>
 801b562:	9a04      	ldr	r2, [sp, #16]
 801b564:	b9d8      	cbnz	r0, 801b59e <_svfiprintf_r+0xe6>
 801b566:	06d0      	lsls	r0, r2, #27
 801b568:	bf44      	itt	mi
 801b56a:	2320      	movmi	r3, #32
 801b56c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b570:	0711      	lsls	r1, r2, #28
 801b572:	bf44      	itt	mi
 801b574:	232b      	movmi	r3, #43	; 0x2b
 801b576:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b57a:	f89a 3000 	ldrb.w	r3, [sl]
 801b57e:	2b2a      	cmp	r3, #42	; 0x2a
 801b580:	d015      	beq.n	801b5ae <_svfiprintf_r+0xf6>
 801b582:	9a07      	ldr	r2, [sp, #28]
 801b584:	4654      	mov	r4, sl
 801b586:	2000      	movs	r0, #0
 801b588:	f04f 0c0a 	mov.w	ip, #10
 801b58c:	4621      	mov	r1, r4
 801b58e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b592:	3b30      	subs	r3, #48	; 0x30
 801b594:	2b09      	cmp	r3, #9
 801b596:	d94d      	bls.n	801b634 <_svfiprintf_r+0x17c>
 801b598:	b1b0      	cbz	r0, 801b5c8 <_svfiprintf_r+0x110>
 801b59a:	9207      	str	r2, [sp, #28]
 801b59c:	e014      	b.n	801b5c8 <_svfiprintf_r+0x110>
 801b59e:	eba0 0308 	sub.w	r3, r0, r8
 801b5a2:	fa09 f303 	lsl.w	r3, r9, r3
 801b5a6:	4313      	orrs	r3, r2
 801b5a8:	9304      	str	r3, [sp, #16]
 801b5aa:	46a2      	mov	sl, r4
 801b5ac:	e7d2      	b.n	801b554 <_svfiprintf_r+0x9c>
 801b5ae:	9b03      	ldr	r3, [sp, #12]
 801b5b0:	1d19      	adds	r1, r3, #4
 801b5b2:	681b      	ldr	r3, [r3, #0]
 801b5b4:	9103      	str	r1, [sp, #12]
 801b5b6:	2b00      	cmp	r3, #0
 801b5b8:	bfbb      	ittet	lt
 801b5ba:	425b      	neglt	r3, r3
 801b5bc:	f042 0202 	orrlt.w	r2, r2, #2
 801b5c0:	9307      	strge	r3, [sp, #28]
 801b5c2:	9307      	strlt	r3, [sp, #28]
 801b5c4:	bfb8      	it	lt
 801b5c6:	9204      	strlt	r2, [sp, #16]
 801b5c8:	7823      	ldrb	r3, [r4, #0]
 801b5ca:	2b2e      	cmp	r3, #46	; 0x2e
 801b5cc:	d10c      	bne.n	801b5e8 <_svfiprintf_r+0x130>
 801b5ce:	7863      	ldrb	r3, [r4, #1]
 801b5d0:	2b2a      	cmp	r3, #42	; 0x2a
 801b5d2:	d134      	bne.n	801b63e <_svfiprintf_r+0x186>
 801b5d4:	9b03      	ldr	r3, [sp, #12]
 801b5d6:	1d1a      	adds	r2, r3, #4
 801b5d8:	681b      	ldr	r3, [r3, #0]
 801b5da:	9203      	str	r2, [sp, #12]
 801b5dc:	2b00      	cmp	r3, #0
 801b5de:	bfb8      	it	lt
 801b5e0:	f04f 33ff 	movlt.w	r3, #4294967295
 801b5e4:	3402      	adds	r4, #2
 801b5e6:	9305      	str	r3, [sp, #20]
 801b5e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801b6b0 <_svfiprintf_r+0x1f8>
 801b5ec:	7821      	ldrb	r1, [r4, #0]
 801b5ee:	2203      	movs	r2, #3
 801b5f0:	4650      	mov	r0, sl
 801b5f2:	f7e4 fe1d 	bl	8000230 <memchr>
 801b5f6:	b138      	cbz	r0, 801b608 <_svfiprintf_r+0x150>
 801b5f8:	9b04      	ldr	r3, [sp, #16]
 801b5fa:	eba0 000a 	sub.w	r0, r0, sl
 801b5fe:	2240      	movs	r2, #64	; 0x40
 801b600:	4082      	lsls	r2, r0
 801b602:	4313      	orrs	r3, r2
 801b604:	3401      	adds	r4, #1
 801b606:	9304      	str	r3, [sp, #16]
 801b608:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b60c:	4825      	ldr	r0, [pc, #148]	; (801b6a4 <_svfiprintf_r+0x1ec>)
 801b60e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b612:	2206      	movs	r2, #6
 801b614:	f7e4 fe0c 	bl	8000230 <memchr>
 801b618:	2800      	cmp	r0, #0
 801b61a:	d038      	beq.n	801b68e <_svfiprintf_r+0x1d6>
 801b61c:	4b22      	ldr	r3, [pc, #136]	; (801b6a8 <_svfiprintf_r+0x1f0>)
 801b61e:	bb1b      	cbnz	r3, 801b668 <_svfiprintf_r+0x1b0>
 801b620:	9b03      	ldr	r3, [sp, #12]
 801b622:	3307      	adds	r3, #7
 801b624:	f023 0307 	bic.w	r3, r3, #7
 801b628:	3308      	adds	r3, #8
 801b62a:	9303      	str	r3, [sp, #12]
 801b62c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b62e:	4433      	add	r3, r6
 801b630:	9309      	str	r3, [sp, #36]	; 0x24
 801b632:	e768      	b.n	801b506 <_svfiprintf_r+0x4e>
 801b634:	fb0c 3202 	mla	r2, ip, r2, r3
 801b638:	460c      	mov	r4, r1
 801b63a:	2001      	movs	r0, #1
 801b63c:	e7a6      	b.n	801b58c <_svfiprintf_r+0xd4>
 801b63e:	2300      	movs	r3, #0
 801b640:	3401      	adds	r4, #1
 801b642:	9305      	str	r3, [sp, #20]
 801b644:	4619      	mov	r1, r3
 801b646:	f04f 0c0a 	mov.w	ip, #10
 801b64a:	4620      	mov	r0, r4
 801b64c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b650:	3a30      	subs	r2, #48	; 0x30
 801b652:	2a09      	cmp	r2, #9
 801b654:	d903      	bls.n	801b65e <_svfiprintf_r+0x1a6>
 801b656:	2b00      	cmp	r3, #0
 801b658:	d0c6      	beq.n	801b5e8 <_svfiprintf_r+0x130>
 801b65a:	9105      	str	r1, [sp, #20]
 801b65c:	e7c4      	b.n	801b5e8 <_svfiprintf_r+0x130>
 801b65e:	fb0c 2101 	mla	r1, ip, r1, r2
 801b662:	4604      	mov	r4, r0
 801b664:	2301      	movs	r3, #1
 801b666:	e7f0      	b.n	801b64a <_svfiprintf_r+0x192>
 801b668:	ab03      	add	r3, sp, #12
 801b66a:	9300      	str	r3, [sp, #0]
 801b66c:	462a      	mov	r2, r5
 801b66e:	4b0f      	ldr	r3, [pc, #60]	; (801b6ac <_svfiprintf_r+0x1f4>)
 801b670:	a904      	add	r1, sp, #16
 801b672:	4638      	mov	r0, r7
 801b674:	f7fc fb9a 	bl	8017dac <_printf_float>
 801b678:	1c42      	adds	r2, r0, #1
 801b67a:	4606      	mov	r6, r0
 801b67c:	d1d6      	bne.n	801b62c <_svfiprintf_r+0x174>
 801b67e:	89ab      	ldrh	r3, [r5, #12]
 801b680:	065b      	lsls	r3, r3, #25
 801b682:	f53f af2d 	bmi.w	801b4e0 <_svfiprintf_r+0x28>
 801b686:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b688:	b01d      	add	sp, #116	; 0x74
 801b68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b68e:	ab03      	add	r3, sp, #12
 801b690:	9300      	str	r3, [sp, #0]
 801b692:	462a      	mov	r2, r5
 801b694:	4b05      	ldr	r3, [pc, #20]	; (801b6ac <_svfiprintf_r+0x1f4>)
 801b696:	a904      	add	r1, sp, #16
 801b698:	4638      	mov	r0, r7
 801b69a:	f7fc fe2b 	bl	80182f4 <_printf_i>
 801b69e:	e7eb      	b.n	801b678 <_svfiprintf_r+0x1c0>
 801b6a0:	0801dde1 	.word	0x0801dde1
 801b6a4:	0801ddeb 	.word	0x0801ddeb
 801b6a8:	08017dad 	.word	0x08017dad
 801b6ac:	0801b405 	.word	0x0801b405
 801b6b0:	0801dde7 	.word	0x0801dde7

0801b6b4 <_sungetc_r>:
 801b6b4:	b538      	push	{r3, r4, r5, lr}
 801b6b6:	1c4b      	adds	r3, r1, #1
 801b6b8:	4614      	mov	r4, r2
 801b6ba:	d103      	bne.n	801b6c4 <_sungetc_r+0x10>
 801b6bc:	f04f 35ff 	mov.w	r5, #4294967295
 801b6c0:	4628      	mov	r0, r5
 801b6c2:	bd38      	pop	{r3, r4, r5, pc}
 801b6c4:	8993      	ldrh	r3, [r2, #12]
 801b6c6:	f023 0320 	bic.w	r3, r3, #32
 801b6ca:	8193      	strh	r3, [r2, #12]
 801b6cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b6ce:	6852      	ldr	r2, [r2, #4]
 801b6d0:	b2cd      	uxtb	r5, r1
 801b6d2:	b18b      	cbz	r3, 801b6f8 <_sungetc_r+0x44>
 801b6d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b6d6:	4293      	cmp	r3, r2
 801b6d8:	dd08      	ble.n	801b6ec <_sungetc_r+0x38>
 801b6da:	6823      	ldr	r3, [r4, #0]
 801b6dc:	1e5a      	subs	r2, r3, #1
 801b6de:	6022      	str	r2, [r4, #0]
 801b6e0:	f803 5c01 	strb.w	r5, [r3, #-1]
 801b6e4:	6863      	ldr	r3, [r4, #4]
 801b6e6:	3301      	adds	r3, #1
 801b6e8:	6063      	str	r3, [r4, #4]
 801b6ea:	e7e9      	b.n	801b6c0 <_sungetc_r+0xc>
 801b6ec:	4621      	mov	r1, r4
 801b6ee:	f000 fd8e 	bl	801c20e <__submore>
 801b6f2:	2800      	cmp	r0, #0
 801b6f4:	d0f1      	beq.n	801b6da <_sungetc_r+0x26>
 801b6f6:	e7e1      	b.n	801b6bc <_sungetc_r+0x8>
 801b6f8:	6921      	ldr	r1, [r4, #16]
 801b6fa:	6823      	ldr	r3, [r4, #0]
 801b6fc:	b151      	cbz	r1, 801b714 <_sungetc_r+0x60>
 801b6fe:	4299      	cmp	r1, r3
 801b700:	d208      	bcs.n	801b714 <_sungetc_r+0x60>
 801b702:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801b706:	42a9      	cmp	r1, r5
 801b708:	d104      	bne.n	801b714 <_sungetc_r+0x60>
 801b70a:	3b01      	subs	r3, #1
 801b70c:	3201      	adds	r2, #1
 801b70e:	6023      	str	r3, [r4, #0]
 801b710:	6062      	str	r2, [r4, #4]
 801b712:	e7d5      	b.n	801b6c0 <_sungetc_r+0xc>
 801b714:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801b718:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b71c:	6363      	str	r3, [r4, #52]	; 0x34
 801b71e:	2303      	movs	r3, #3
 801b720:	63a3      	str	r3, [r4, #56]	; 0x38
 801b722:	4623      	mov	r3, r4
 801b724:	f803 5f46 	strb.w	r5, [r3, #70]!
 801b728:	6023      	str	r3, [r4, #0]
 801b72a:	2301      	movs	r3, #1
 801b72c:	e7dc      	b.n	801b6e8 <_sungetc_r+0x34>

0801b72e <__ssrefill_r>:
 801b72e:	b510      	push	{r4, lr}
 801b730:	460c      	mov	r4, r1
 801b732:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801b734:	b169      	cbz	r1, 801b752 <__ssrefill_r+0x24>
 801b736:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b73a:	4299      	cmp	r1, r3
 801b73c:	d001      	beq.n	801b742 <__ssrefill_r+0x14>
 801b73e:	f7fe fad1 	bl	8019ce4 <_free_r>
 801b742:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b744:	6063      	str	r3, [r4, #4]
 801b746:	2000      	movs	r0, #0
 801b748:	6360      	str	r0, [r4, #52]	; 0x34
 801b74a:	b113      	cbz	r3, 801b752 <__ssrefill_r+0x24>
 801b74c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801b74e:	6023      	str	r3, [r4, #0]
 801b750:	bd10      	pop	{r4, pc}
 801b752:	6923      	ldr	r3, [r4, #16]
 801b754:	6023      	str	r3, [r4, #0]
 801b756:	2300      	movs	r3, #0
 801b758:	6063      	str	r3, [r4, #4]
 801b75a:	89a3      	ldrh	r3, [r4, #12]
 801b75c:	f043 0320 	orr.w	r3, r3, #32
 801b760:	81a3      	strh	r3, [r4, #12]
 801b762:	f04f 30ff 	mov.w	r0, #4294967295
 801b766:	e7f3      	b.n	801b750 <__ssrefill_r+0x22>

0801b768 <__ssvfiscanf_r>:
 801b768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b76c:	460c      	mov	r4, r1
 801b76e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801b772:	2100      	movs	r1, #0
 801b774:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801b778:	49a6      	ldr	r1, [pc, #664]	; (801ba14 <__ssvfiscanf_r+0x2ac>)
 801b77a:	91a0      	str	r1, [sp, #640]	; 0x280
 801b77c:	f10d 0804 	add.w	r8, sp, #4
 801b780:	49a5      	ldr	r1, [pc, #660]	; (801ba18 <__ssvfiscanf_r+0x2b0>)
 801b782:	4fa6      	ldr	r7, [pc, #664]	; (801ba1c <__ssvfiscanf_r+0x2b4>)
 801b784:	f8df 9298 	ldr.w	r9, [pc, #664]	; 801ba20 <__ssvfiscanf_r+0x2b8>
 801b788:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801b78c:	4606      	mov	r6, r0
 801b78e:	91a1      	str	r1, [sp, #644]	; 0x284
 801b790:	9300      	str	r3, [sp, #0]
 801b792:	7813      	ldrb	r3, [r2, #0]
 801b794:	2b00      	cmp	r3, #0
 801b796:	f000 815a 	beq.w	801ba4e <__ssvfiscanf_r+0x2e6>
 801b79a:	5cf9      	ldrb	r1, [r7, r3]
 801b79c:	f011 0108 	ands.w	r1, r1, #8
 801b7a0:	f102 0501 	add.w	r5, r2, #1
 801b7a4:	d019      	beq.n	801b7da <__ssvfiscanf_r+0x72>
 801b7a6:	6863      	ldr	r3, [r4, #4]
 801b7a8:	2b00      	cmp	r3, #0
 801b7aa:	dd0f      	ble.n	801b7cc <__ssvfiscanf_r+0x64>
 801b7ac:	6823      	ldr	r3, [r4, #0]
 801b7ae:	781a      	ldrb	r2, [r3, #0]
 801b7b0:	5cba      	ldrb	r2, [r7, r2]
 801b7b2:	0712      	lsls	r2, r2, #28
 801b7b4:	d401      	bmi.n	801b7ba <__ssvfiscanf_r+0x52>
 801b7b6:	462a      	mov	r2, r5
 801b7b8:	e7eb      	b.n	801b792 <__ssvfiscanf_r+0x2a>
 801b7ba:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801b7bc:	3201      	adds	r2, #1
 801b7be:	9245      	str	r2, [sp, #276]	; 0x114
 801b7c0:	6862      	ldr	r2, [r4, #4]
 801b7c2:	3301      	adds	r3, #1
 801b7c4:	3a01      	subs	r2, #1
 801b7c6:	6062      	str	r2, [r4, #4]
 801b7c8:	6023      	str	r3, [r4, #0]
 801b7ca:	e7ec      	b.n	801b7a6 <__ssvfiscanf_r+0x3e>
 801b7cc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801b7ce:	4621      	mov	r1, r4
 801b7d0:	4630      	mov	r0, r6
 801b7d2:	4798      	blx	r3
 801b7d4:	2800      	cmp	r0, #0
 801b7d6:	d0e9      	beq.n	801b7ac <__ssvfiscanf_r+0x44>
 801b7d8:	e7ed      	b.n	801b7b6 <__ssvfiscanf_r+0x4e>
 801b7da:	2b25      	cmp	r3, #37	; 0x25
 801b7dc:	d012      	beq.n	801b804 <__ssvfiscanf_r+0x9c>
 801b7de:	469a      	mov	sl, r3
 801b7e0:	6863      	ldr	r3, [r4, #4]
 801b7e2:	2b00      	cmp	r3, #0
 801b7e4:	f340 8091 	ble.w	801b90a <__ssvfiscanf_r+0x1a2>
 801b7e8:	6822      	ldr	r2, [r4, #0]
 801b7ea:	7813      	ldrb	r3, [r2, #0]
 801b7ec:	4553      	cmp	r3, sl
 801b7ee:	f040 812e 	bne.w	801ba4e <__ssvfiscanf_r+0x2e6>
 801b7f2:	6863      	ldr	r3, [r4, #4]
 801b7f4:	3b01      	subs	r3, #1
 801b7f6:	6063      	str	r3, [r4, #4]
 801b7f8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801b7fa:	3201      	adds	r2, #1
 801b7fc:	3301      	adds	r3, #1
 801b7fe:	6022      	str	r2, [r4, #0]
 801b800:	9345      	str	r3, [sp, #276]	; 0x114
 801b802:	e7d8      	b.n	801b7b6 <__ssvfiscanf_r+0x4e>
 801b804:	9141      	str	r1, [sp, #260]	; 0x104
 801b806:	9143      	str	r1, [sp, #268]	; 0x10c
 801b808:	7853      	ldrb	r3, [r2, #1]
 801b80a:	2b2a      	cmp	r3, #42	; 0x2a
 801b80c:	bf02      	ittt	eq
 801b80e:	2310      	moveq	r3, #16
 801b810:	1c95      	addeq	r5, r2, #2
 801b812:	9341      	streq	r3, [sp, #260]	; 0x104
 801b814:	220a      	movs	r2, #10
 801b816:	46aa      	mov	sl, r5
 801b818:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801b81c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801b820:	2b09      	cmp	r3, #9
 801b822:	d91c      	bls.n	801b85e <__ssvfiscanf_r+0xf6>
 801b824:	487e      	ldr	r0, [pc, #504]	; (801ba20 <__ssvfiscanf_r+0x2b8>)
 801b826:	2203      	movs	r2, #3
 801b828:	f7e4 fd02 	bl	8000230 <memchr>
 801b82c:	b138      	cbz	r0, 801b83e <__ssvfiscanf_r+0xd6>
 801b82e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801b830:	eba0 0009 	sub.w	r0, r0, r9
 801b834:	2301      	movs	r3, #1
 801b836:	4083      	lsls	r3, r0
 801b838:	4313      	orrs	r3, r2
 801b83a:	9341      	str	r3, [sp, #260]	; 0x104
 801b83c:	4655      	mov	r5, sl
 801b83e:	f815 3b01 	ldrb.w	r3, [r5], #1
 801b842:	2b78      	cmp	r3, #120	; 0x78
 801b844:	d806      	bhi.n	801b854 <__ssvfiscanf_r+0xec>
 801b846:	2b57      	cmp	r3, #87	; 0x57
 801b848:	d810      	bhi.n	801b86c <__ssvfiscanf_r+0x104>
 801b84a:	2b25      	cmp	r3, #37	; 0x25
 801b84c:	d0c7      	beq.n	801b7de <__ssvfiscanf_r+0x76>
 801b84e:	d857      	bhi.n	801b900 <__ssvfiscanf_r+0x198>
 801b850:	2b00      	cmp	r3, #0
 801b852:	d065      	beq.n	801b920 <__ssvfiscanf_r+0x1b8>
 801b854:	2303      	movs	r3, #3
 801b856:	9347      	str	r3, [sp, #284]	; 0x11c
 801b858:	230a      	movs	r3, #10
 801b85a:	9342      	str	r3, [sp, #264]	; 0x108
 801b85c:	e076      	b.n	801b94c <__ssvfiscanf_r+0x1e4>
 801b85e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801b860:	fb02 1103 	mla	r1, r2, r3, r1
 801b864:	3930      	subs	r1, #48	; 0x30
 801b866:	9143      	str	r1, [sp, #268]	; 0x10c
 801b868:	4655      	mov	r5, sl
 801b86a:	e7d4      	b.n	801b816 <__ssvfiscanf_r+0xae>
 801b86c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801b870:	2a20      	cmp	r2, #32
 801b872:	d8ef      	bhi.n	801b854 <__ssvfiscanf_r+0xec>
 801b874:	a101      	add	r1, pc, #4	; (adr r1, 801b87c <__ssvfiscanf_r+0x114>)
 801b876:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801b87a:	bf00      	nop
 801b87c:	0801b92f 	.word	0x0801b92f
 801b880:	0801b855 	.word	0x0801b855
 801b884:	0801b855 	.word	0x0801b855
 801b888:	0801b98d 	.word	0x0801b98d
 801b88c:	0801b855 	.word	0x0801b855
 801b890:	0801b855 	.word	0x0801b855
 801b894:	0801b855 	.word	0x0801b855
 801b898:	0801b855 	.word	0x0801b855
 801b89c:	0801b855 	.word	0x0801b855
 801b8a0:	0801b855 	.word	0x0801b855
 801b8a4:	0801b855 	.word	0x0801b855
 801b8a8:	0801b9a3 	.word	0x0801b9a3
 801b8ac:	0801b989 	.word	0x0801b989
 801b8b0:	0801b907 	.word	0x0801b907
 801b8b4:	0801b907 	.word	0x0801b907
 801b8b8:	0801b907 	.word	0x0801b907
 801b8bc:	0801b855 	.word	0x0801b855
 801b8c0:	0801b945 	.word	0x0801b945
 801b8c4:	0801b855 	.word	0x0801b855
 801b8c8:	0801b855 	.word	0x0801b855
 801b8cc:	0801b855 	.word	0x0801b855
 801b8d0:	0801b855 	.word	0x0801b855
 801b8d4:	0801b9b3 	.word	0x0801b9b3
 801b8d8:	0801b981 	.word	0x0801b981
 801b8dc:	0801b927 	.word	0x0801b927
 801b8e0:	0801b855 	.word	0x0801b855
 801b8e4:	0801b855 	.word	0x0801b855
 801b8e8:	0801b9af 	.word	0x0801b9af
 801b8ec:	0801b855 	.word	0x0801b855
 801b8f0:	0801b989 	.word	0x0801b989
 801b8f4:	0801b855 	.word	0x0801b855
 801b8f8:	0801b855 	.word	0x0801b855
 801b8fc:	0801b92f 	.word	0x0801b92f
 801b900:	3b45      	subs	r3, #69	; 0x45
 801b902:	2b02      	cmp	r3, #2
 801b904:	d8a6      	bhi.n	801b854 <__ssvfiscanf_r+0xec>
 801b906:	2305      	movs	r3, #5
 801b908:	e01f      	b.n	801b94a <__ssvfiscanf_r+0x1e2>
 801b90a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801b90c:	4621      	mov	r1, r4
 801b90e:	4630      	mov	r0, r6
 801b910:	4798      	blx	r3
 801b912:	2800      	cmp	r0, #0
 801b914:	f43f af68 	beq.w	801b7e8 <__ssvfiscanf_r+0x80>
 801b918:	9844      	ldr	r0, [sp, #272]	; 0x110
 801b91a:	2800      	cmp	r0, #0
 801b91c:	f040 808d 	bne.w	801ba3a <__ssvfiscanf_r+0x2d2>
 801b920:	f04f 30ff 	mov.w	r0, #4294967295
 801b924:	e08f      	b.n	801ba46 <__ssvfiscanf_r+0x2de>
 801b926:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801b928:	f042 0220 	orr.w	r2, r2, #32
 801b92c:	9241      	str	r2, [sp, #260]	; 0x104
 801b92e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801b930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801b934:	9241      	str	r2, [sp, #260]	; 0x104
 801b936:	2210      	movs	r2, #16
 801b938:	2b6f      	cmp	r3, #111	; 0x6f
 801b93a:	9242      	str	r2, [sp, #264]	; 0x108
 801b93c:	bf34      	ite	cc
 801b93e:	2303      	movcc	r3, #3
 801b940:	2304      	movcs	r3, #4
 801b942:	e002      	b.n	801b94a <__ssvfiscanf_r+0x1e2>
 801b944:	2300      	movs	r3, #0
 801b946:	9342      	str	r3, [sp, #264]	; 0x108
 801b948:	2303      	movs	r3, #3
 801b94a:	9347      	str	r3, [sp, #284]	; 0x11c
 801b94c:	6863      	ldr	r3, [r4, #4]
 801b94e:	2b00      	cmp	r3, #0
 801b950:	dd3d      	ble.n	801b9ce <__ssvfiscanf_r+0x266>
 801b952:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801b954:	0659      	lsls	r1, r3, #25
 801b956:	d404      	bmi.n	801b962 <__ssvfiscanf_r+0x1fa>
 801b958:	6823      	ldr	r3, [r4, #0]
 801b95a:	781a      	ldrb	r2, [r3, #0]
 801b95c:	5cba      	ldrb	r2, [r7, r2]
 801b95e:	0712      	lsls	r2, r2, #28
 801b960:	d43c      	bmi.n	801b9dc <__ssvfiscanf_r+0x274>
 801b962:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801b964:	2b02      	cmp	r3, #2
 801b966:	dc4b      	bgt.n	801ba00 <__ssvfiscanf_r+0x298>
 801b968:	466b      	mov	r3, sp
 801b96a:	4622      	mov	r2, r4
 801b96c:	a941      	add	r1, sp, #260	; 0x104
 801b96e:	4630      	mov	r0, r6
 801b970:	f000 f9b6 	bl	801bce0 <_scanf_chars>
 801b974:	2801      	cmp	r0, #1
 801b976:	d06a      	beq.n	801ba4e <__ssvfiscanf_r+0x2e6>
 801b978:	2802      	cmp	r0, #2
 801b97a:	f47f af1c 	bne.w	801b7b6 <__ssvfiscanf_r+0x4e>
 801b97e:	e7cb      	b.n	801b918 <__ssvfiscanf_r+0x1b0>
 801b980:	2308      	movs	r3, #8
 801b982:	9342      	str	r3, [sp, #264]	; 0x108
 801b984:	2304      	movs	r3, #4
 801b986:	e7e0      	b.n	801b94a <__ssvfiscanf_r+0x1e2>
 801b988:	220a      	movs	r2, #10
 801b98a:	e7d5      	b.n	801b938 <__ssvfiscanf_r+0x1d0>
 801b98c:	4629      	mov	r1, r5
 801b98e:	4640      	mov	r0, r8
 801b990:	f000 fc04 	bl	801c19c <__sccl>
 801b994:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801b996:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b99a:	9341      	str	r3, [sp, #260]	; 0x104
 801b99c:	4605      	mov	r5, r0
 801b99e:	2301      	movs	r3, #1
 801b9a0:	e7d3      	b.n	801b94a <__ssvfiscanf_r+0x1e2>
 801b9a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801b9a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b9a8:	9341      	str	r3, [sp, #260]	; 0x104
 801b9aa:	2300      	movs	r3, #0
 801b9ac:	e7cd      	b.n	801b94a <__ssvfiscanf_r+0x1e2>
 801b9ae:	2302      	movs	r3, #2
 801b9b0:	e7cb      	b.n	801b94a <__ssvfiscanf_r+0x1e2>
 801b9b2:	9841      	ldr	r0, [sp, #260]	; 0x104
 801b9b4:	06c3      	lsls	r3, r0, #27
 801b9b6:	f53f aefe 	bmi.w	801b7b6 <__ssvfiscanf_r+0x4e>
 801b9ba:	9b00      	ldr	r3, [sp, #0]
 801b9bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801b9be:	1d19      	adds	r1, r3, #4
 801b9c0:	9100      	str	r1, [sp, #0]
 801b9c2:	681b      	ldr	r3, [r3, #0]
 801b9c4:	07c0      	lsls	r0, r0, #31
 801b9c6:	bf4c      	ite	mi
 801b9c8:	801a      	strhmi	r2, [r3, #0]
 801b9ca:	601a      	strpl	r2, [r3, #0]
 801b9cc:	e6f3      	b.n	801b7b6 <__ssvfiscanf_r+0x4e>
 801b9ce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801b9d0:	4621      	mov	r1, r4
 801b9d2:	4630      	mov	r0, r6
 801b9d4:	4798      	blx	r3
 801b9d6:	2800      	cmp	r0, #0
 801b9d8:	d0bb      	beq.n	801b952 <__ssvfiscanf_r+0x1ea>
 801b9da:	e79d      	b.n	801b918 <__ssvfiscanf_r+0x1b0>
 801b9dc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801b9de:	3201      	adds	r2, #1
 801b9e0:	9245      	str	r2, [sp, #276]	; 0x114
 801b9e2:	6862      	ldr	r2, [r4, #4]
 801b9e4:	3a01      	subs	r2, #1
 801b9e6:	2a00      	cmp	r2, #0
 801b9e8:	6062      	str	r2, [r4, #4]
 801b9ea:	dd02      	ble.n	801b9f2 <__ssvfiscanf_r+0x28a>
 801b9ec:	3301      	adds	r3, #1
 801b9ee:	6023      	str	r3, [r4, #0]
 801b9f0:	e7b2      	b.n	801b958 <__ssvfiscanf_r+0x1f0>
 801b9f2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801b9f4:	4621      	mov	r1, r4
 801b9f6:	4630      	mov	r0, r6
 801b9f8:	4798      	blx	r3
 801b9fa:	2800      	cmp	r0, #0
 801b9fc:	d0ac      	beq.n	801b958 <__ssvfiscanf_r+0x1f0>
 801b9fe:	e78b      	b.n	801b918 <__ssvfiscanf_r+0x1b0>
 801ba00:	2b04      	cmp	r3, #4
 801ba02:	dc0f      	bgt.n	801ba24 <__ssvfiscanf_r+0x2bc>
 801ba04:	466b      	mov	r3, sp
 801ba06:	4622      	mov	r2, r4
 801ba08:	a941      	add	r1, sp, #260	; 0x104
 801ba0a:	4630      	mov	r0, r6
 801ba0c:	f000 f9c2 	bl	801bd94 <_scanf_i>
 801ba10:	e7b0      	b.n	801b974 <__ssvfiscanf_r+0x20c>
 801ba12:	bf00      	nop
 801ba14:	0801b6b5 	.word	0x0801b6b5
 801ba18:	0801b72f 	.word	0x0801b72f
 801ba1c:	0801dce1 	.word	0x0801dce1
 801ba20:	0801dde7 	.word	0x0801dde7
 801ba24:	4b0b      	ldr	r3, [pc, #44]	; (801ba54 <__ssvfiscanf_r+0x2ec>)
 801ba26:	2b00      	cmp	r3, #0
 801ba28:	f43f aec5 	beq.w	801b7b6 <__ssvfiscanf_r+0x4e>
 801ba2c:	466b      	mov	r3, sp
 801ba2e:	4622      	mov	r2, r4
 801ba30:	a941      	add	r1, sp, #260	; 0x104
 801ba32:	4630      	mov	r0, r6
 801ba34:	f7fc fd80 	bl	8018538 <_scanf_float>
 801ba38:	e79c      	b.n	801b974 <__ssvfiscanf_r+0x20c>
 801ba3a:	89a3      	ldrh	r3, [r4, #12]
 801ba3c:	f013 0f40 	tst.w	r3, #64	; 0x40
 801ba40:	bf18      	it	ne
 801ba42:	f04f 30ff 	movne.w	r0, #4294967295
 801ba46:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801ba4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba4e:	9844      	ldr	r0, [sp, #272]	; 0x110
 801ba50:	e7f9      	b.n	801ba46 <__ssvfiscanf_r+0x2de>
 801ba52:	bf00      	nop
 801ba54:	08018539 	.word	0x08018539

0801ba58 <__sfputc_r>:
 801ba58:	6893      	ldr	r3, [r2, #8]
 801ba5a:	3b01      	subs	r3, #1
 801ba5c:	2b00      	cmp	r3, #0
 801ba5e:	b410      	push	{r4}
 801ba60:	6093      	str	r3, [r2, #8]
 801ba62:	da08      	bge.n	801ba76 <__sfputc_r+0x1e>
 801ba64:	6994      	ldr	r4, [r2, #24]
 801ba66:	42a3      	cmp	r3, r4
 801ba68:	db01      	blt.n	801ba6e <__sfputc_r+0x16>
 801ba6a:	290a      	cmp	r1, #10
 801ba6c:	d103      	bne.n	801ba76 <__sfputc_r+0x1e>
 801ba6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ba72:	f7fd b920 	b.w	8018cb6 <__swbuf_r>
 801ba76:	6813      	ldr	r3, [r2, #0]
 801ba78:	1c58      	adds	r0, r3, #1
 801ba7a:	6010      	str	r0, [r2, #0]
 801ba7c:	7019      	strb	r1, [r3, #0]
 801ba7e:	4608      	mov	r0, r1
 801ba80:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ba84:	4770      	bx	lr

0801ba86 <__sfputs_r>:
 801ba86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba88:	4606      	mov	r6, r0
 801ba8a:	460f      	mov	r7, r1
 801ba8c:	4614      	mov	r4, r2
 801ba8e:	18d5      	adds	r5, r2, r3
 801ba90:	42ac      	cmp	r4, r5
 801ba92:	d101      	bne.n	801ba98 <__sfputs_r+0x12>
 801ba94:	2000      	movs	r0, #0
 801ba96:	e007      	b.n	801baa8 <__sfputs_r+0x22>
 801ba98:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ba9c:	463a      	mov	r2, r7
 801ba9e:	4630      	mov	r0, r6
 801baa0:	f7ff ffda 	bl	801ba58 <__sfputc_r>
 801baa4:	1c43      	adds	r3, r0, #1
 801baa6:	d1f3      	bne.n	801ba90 <__sfputs_r+0xa>
 801baa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801baac <_vfiprintf_r>:
 801baac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bab0:	460d      	mov	r5, r1
 801bab2:	b09d      	sub	sp, #116	; 0x74
 801bab4:	4614      	mov	r4, r2
 801bab6:	4698      	mov	r8, r3
 801bab8:	4606      	mov	r6, r0
 801baba:	b118      	cbz	r0, 801bac4 <_vfiprintf_r+0x18>
 801babc:	6a03      	ldr	r3, [r0, #32]
 801babe:	b90b      	cbnz	r3, 801bac4 <_vfiprintf_r+0x18>
 801bac0:	f7fc ffc4 	bl	8018a4c <__sinit>
 801bac4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bac6:	07d9      	lsls	r1, r3, #31
 801bac8:	d405      	bmi.n	801bad6 <_vfiprintf_r+0x2a>
 801baca:	89ab      	ldrh	r3, [r5, #12]
 801bacc:	059a      	lsls	r2, r3, #22
 801bace:	d402      	bmi.n	801bad6 <_vfiprintf_r+0x2a>
 801bad0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bad2:	f7fd fa77 	bl	8018fc4 <__retarget_lock_acquire_recursive>
 801bad6:	89ab      	ldrh	r3, [r5, #12]
 801bad8:	071b      	lsls	r3, r3, #28
 801bada:	d501      	bpl.n	801bae0 <_vfiprintf_r+0x34>
 801badc:	692b      	ldr	r3, [r5, #16]
 801bade:	b99b      	cbnz	r3, 801bb08 <_vfiprintf_r+0x5c>
 801bae0:	4629      	mov	r1, r5
 801bae2:	4630      	mov	r0, r6
 801bae4:	f7fd f924 	bl	8018d30 <__swsetup_r>
 801bae8:	b170      	cbz	r0, 801bb08 <_vfiprintf_r+0x5c>
 801baea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801baec:	07dc      	lsls	r4, r3, #31
 801baee:	d504      	bpl.n	801bafa <_vfiprintf_r+0x4e>
 801baf0:	f04f 30ff 	mov.w	r0, #4294967295
 801baf4:	b01d      	add	sp, #116	; 0x74
 801baf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bafa:	89ab      	ldrh	r3, [r5, #12]
 801bafc:	0598      	lsls	r0, r3, #22
 801bafe:	d4f7      	bmi.n	801baf0 <_vfiprintf_r+0x44>
 801bb00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bb02:	f7fd fa60 	bl	8018fc6 <__retarget_lock_release_recursive>
 801bb06:	e7f3      	b.n	801baf0 <_vfiprintf_r+0x44>
 801bb08:	2300      	movs	r3, #0
 801bb0a:	9309      	str	r3, [sp, #36]	; 0x24
 801bb0c:	2320      	movs	r3, #32
 801bb0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bb12:	f8cd 800c 	str.w	r8, [sp, #12]
 801bb16:	2330      	movs	r3, #48	; 0x30
 801bb18:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801bccc <_vfiprintf_r+0x220>
 801bb1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bb20:	f04f 0901 	mov.w	r9, #1
 801bb24:	4623      	mov	r3, r4
 801bb26:	469a      	mov	sl, r3
 801bb28:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bb2c:	b10a      	cbz	r2, 801bb32 <_vfiprintf_r+0x86>
 801bb2e:	2a25      	cmp	r2, #37	; 0x25
 801bb30:	d1f9      	bne.n	801bb26 <_vfiprintf_r+0x7a>
 801bb32:	ebba 0b04 	subs.w	fp, sl, r4
 801bb36:	d00b      	beq.n	801bb50 <_vfiprintf_r+0xa4>
 801bb38:	465b      	mov	r3, fp
 801bb3a:	4622      	mov	r2, r4
 801bb3c:	4629      	mov	r1, r5
 801bb3e:	4630      	mov	r0, r6
 801bb40:	f7ff ffa1 	bl	801ba86 <__sfputs_r>
 801bb44:	3001      	adds	r0, #1
 801bb46:	f000 80a9 	beq.w	801bc9c <_vfiprintf_r+0x1f0>
 801bb4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bb4c:	445a      	add	r2, fp
 801bb4e:	9209      	str	r2, [sp, #36]	; 0x24
 801bb50:	f89a 3000 	ldrb.w	r3, [sl]
 801bb54:	2b00      	cmp	r3, #0
 801bb56:	f000 80a1 	beq.w	801bc9c <_vfiprintf_r+0x1f0>
 801bb5a:	2300      	movs	r3, #0
 801bb5c:	f04f 32ff 	mov.w	r2, #4294967295
 801bb60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bb64:	f10a 0a01 	add.w	sl, sl, #1
 801bb68:	9304      	str	r3, [sp, #16]
 801bb6a:	9307      	str	r3, [sp, #28]
 801bb6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bb70:	931a      	str	r3, [sp, #104]	; 0x68
 801bb72:	4654      	mov	r4, sl
 801bb74:	2205      	movs	r2, #5
 801bb76:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bb7a:	4854      	ldr	r0, [pc, #336]	; (801bccc <_vfiprintf_r+0x220>)
 801bb7c:	f7e4 fb58 	bl	8000230 <memchr>
 801bb80:	9a04      	ldr	r2, [sp, #16]
 801bb82:	b9d8      	cbnz	r0, 801bbbc <_vfiprintf_r+0x110>
 801bb84:	06d1      	lsls	r1, r2, #27
 801bb86:	bf44      	itt	mi
 801bb88:	2320      	movmi	r3, #32
 801bb8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bb8e:	0713      	lsls	r3, r2, #28
 801bb90:	bf44      	itt	mi
 801bb92:	232b      	movmi	r3, #43	; 0x2b
 801bb94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bb98:	f89a 3000 	ldrb.w	r3, [sl]
 801bb9c:	2b2a      	cmp	r3, #42	; 0x2a
 801bb9e:	d015      	beq.n	801bbcc <_vfiprintf_r+0x120>
 801bba0:	9a07      	ldr	r2, [sp, #28]
 801bba2:	4654      	mov	r4, sl
 801bba4:	2000      	movs	r0, #0
 801bba6:	f04f 0c0a 	mov.w	ip, #10
 801bbaa:	4621      	mov	r1, r4
 801bbac:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bbb0:	3b30      	subs	r3, #48	; 0x30
 801bbb2:	2b09      	cmp	r3, #9
 801bbb4:	d94d      	bls.n	801bc52 <_vfiprintf_r+0x1a6>
 801bbb6:	b1b0      	cbz	r0, 801bbe6 <_vfiprintf_r+0x13a>
 801bbb8:	9207      	str	r2, [sp, #28]
 801bbba:	e014      	b.n	801bbe6 <_vfiprintf_r+0x13a>
 801bbbc:	eba0 0308 	sub.w	r3, r0, r8
 801bbc0:	fa09 f303 	lsl.w	r3, r9, r3
 801bbc4:	4313      	orrs	r3, r2
 801bbc6:	9304      	str	r3, [sp, #16]
 801bbc8:	46a2      	mov	sl, r4
 801bbca:	e7d2      	b.n	801bb72 <_vfiprintf_r+0xc6>
 801bbcc:	9b03      	ldr	r3, [sp, #12]
 801bbce:	1d19      	adds	r1, r3, #4
 801bbd0:	681b      	ldr	r3, [r3, #0]
 801bbd2:	9103      	str	r1, [sp, #12]
 801bbd4:	2b00      	cmp	r3, #0
 801bbd6:	bfbb      	ittet	lt
 801bbd8:	425b      	neglt	r3, r3
 801bbda:	f042 0202 	orrlt.w	r2, r2, #2
 801bbde:	9307      	strge	r3, [sp, #28]
 801bbe0:	9307      	strlt	r3, [sp, #28]
 801bbe2:	bfb8      	it	lt
 801bbe4:	9204      	strlt	r2, [sp, #16]
 801bbe6:	7823      	ldrb	r3, [r4, #0]
 801bbe8:	2b2e      	cmp	r3, #46	; 0x2e
 801bbea:	d10c      	bne.n	801bc06 <_vfiprintf_r+0x15a>
 801bbec:	7863      	ldrb	r3, [r4, #1]
 801bbee:	2b2a      	cmp	r3, #42	; 0x2a
 801bbf0:	d134      	bne.n	801bc5c <_vfiprintf_r+0x1b0>
 801bbf2:	9b03      	ldr	r3, [sp, #12]
 801bbf4:	1d1a      	adds	r2, r3, #4
 801bbf6:	681b      	ldr	r3, [r3, #0]
 801bbf8:	9203      	str	r2, [sp, #12]
 801bbfa:	2b00      	cmp	r3, #0
 801bbfc:	bfb8      	it	lt
 801bbfe:	f04f 33ff 	movlt.w	r3, #4294967295
 801bc02:	3402      	adds	r4, #2
 801bc04:	9305      	str	r3, [sp, #20]
 801bc06:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801bcdc <_vfiprintf_r+0x230>
 801bc0a:	7821      	ldrb	r1, [r4, #0]
 801bc0c:	2203      	movs	r2, #3
 801bc0e:	4650      	mov	r0, sl
 801bc10:	f7e4 fb0e 	bl	8000230 <memchr>
 801bc14:	b138      	cbz	r0, 801bc26 <_vfiprintf_r+0x17a>
 801bc16:	9b04      	ldr	r3, [sp, #16]
 801bc18:	eba0 000a 	sub.w	r0, r0, sl
 801bc1c:	2240      	movs	r2, #64	; 0x40
 801bc1e:	4082      	lsls	r2, r0
 801bc20:	4313      	orrs	r3, r2
 801bc22:	3401      	adds	r4, #1
 801bc24:	9304      	str	r3, [sp, #16]
 801bc26:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bc2a:	4829      	ldr	r0, [pc, #164]	; (801bcd0 <_vfiprintf_r+0x224>)
 801bc2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801bc30:	2206      	movs	r2, #6
 801bc32:	f7e4 fafd 	bl	8000230 <memchr>
 801bc36:	2800      	cmp	r0, #0
 801bc38:	d03f      	beq.n	801bcba <_vfiprintf_r+0x20e>
 801bc3a:	4b26      	ldr	r3, [pc, #152]	; (801bcd4 <_vfiprintf_r+0x228>)
 801bc3c:	bb1b      	cbnz	r3, 801bc86 <_vfiprintf_r+0x1da>
 801bc3e:	9b03      	ldr	r3, [sp, #12]
 801bc40:	3307      	adds	r3, #7
 801bc42:	f023 0307 	bic.w	r3, r3, #7
 801bc46:	3308      	adds	r3, #8
 801bc48:	9303      	str	r3, [sp, #12]
 801bc4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc4c:	443b      	add	r3, r7
 801bc4e:	9309      	str	r3, [sp, #36]	; 0x24
 801bc50:	e768      	b.n	801bb24 <_vfiprintf_r+0x78>
 801bc52:	fb0c 3202 	mla	r2, ip, r2, r3
 801bc56:	460c      	mov	r4, r1
 801bc58:	2001      	movs	r0, #1
 801bc5a:	e7a6      	b.n	801bbaa <_vfiprintf_r+0xfe>
 801bc5c:	2300      	movs	r3, #0
 801bc5e:	3401      	adds	r4, #1
 801bc60:	9305      	str	r3, [sp, #20]
 801bc62:	4619      	mov	r1, r3
 801bc64:	f04f 0c0a 	mov.w	ip, #10
 801bc68:	4620      	mov	r0, r4
 801bc6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bc6e:	3a30      	subs	r2, #48	; 0x30
 801bc70:	2a09      	cmp	r2, #9
 801bc72:	d903      	bls.n	801bc7c <_vfiprintf_r+0x1d0>
 801bc74:	2b00      	cmp	r3, #0
 801bc76:	d0c6      	beq.n	801bc06 <_vfiprintf_r+0x15a>
 801bc78:	9105      	str	r1, [sp, #20]
 801bc7a:	e7c4      	b.n	801bc06 <_vfiprintf_r+0x15a>
 801bc7c:	fb0c 2101 	mla	r1, ip, r1, r2
 801bc80:	4604      	mov	r4, r0
 801bc82:	2301      	movs	r3, #1
 801bc84:	e7f0      	b.n	801bc68 <_vfiprintf_r+0x1bc>
 801bc86:	ab03      	add	r3, sp, #12
 801bc88:	9300      	str	r3, [sp, #0]
 801bc8a:	462a      	mov	r2, r5
 801bc8c:	4b12      	ldr	r3, [pc, #72]	; (801bcd8 <_vfiprintf_r+0x22c>)
 801bc8e:	a904      	add	r1, sp, #16
 801bc90:	4630      	mov	r0, r6
 801bc92:	f7fc f88b 	bl	8017dac <_printf_float>
 801bc96:	4607      	mov	r7, r0
 801bc98:	1c78      	adds	r0, r7, #1
 801bc9a:	d1d6      	bne.n	801bc4a <_vfiprintf_r+0x19e>
 801bc9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bc9e:	07d9      	lsls	r1, r3, #31
 801bca0:	d405      	bmi.n	801bcae <_vfiprintf_r+0x202>
 801bca2:	89ab      	ldrh	r3, [r5, #12]
 801bca4:	059a      	lsls	r2, r3, #22
 801bca6:	d402      	bmi.n	801bcae <_vfiprintf_r+0x202>
 801bca8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bcaa:	f7fd f98c 	bl	8018fc6 <__retarget_lock_release_recursive>
 801bcae:	89ab      	ldrh	r3, [r5, #12]
 801bcb0:	065b      	lsls	r3, r3, #25
 801bcb2:	f53f af1d 	bmi.w	801baf0 <_vfiprintf_r+0x44>
 801bcb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bcb8:	e71c      	b.n	801baf4 <_vfiprintf_r+0x48>
 801bcba:	ab03      	add	r3, sp, #12
 801bcbc:	9300      	str	r3, [sp, #0]
 801bcbe:	462a      	mov	r2, r5
 801bcc0:	4b05      	ldr	r3, [pc, #20]	; (801bcd8 <_vfiprintf_r+0x22c>)
 801bcc2:	a904      	add	r1, sp, #16
 801bcc4:	4630      	mov	r0, r6
 801bcc6:	f7fc fb15 	bl	80182f4 <_printf_i>
 801bcca:	e7e4      	b.n	801bc96 <_vfiprintf_r+0x1ea>
 801bccc:	0801dde1 	.word	0x0801dde1
 801bcd0:	0801ddeb 	.word	0x0801ddeb
 801bcd4:	08017dad 	.word	0x08017dad
 801bcd8:	0801ba87 	.word	0x0801ba87
 801bcdc:	0801dde7 	.word	0x0801dde7

0801bce0 <_scanf_chars>:
 801bce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bce4:	4615      	mov	r5, r2
 801bce6:	688a      	ldr	r2, [r1, #8]
 801bce8:	4680      	mov	r8, r0
 801bcea:	460c      	mov	r4, r1
 801bcec:	b932      	cbnz	r2, 801bcfc <_scanf_chars+0x1c>
 801bcee:	698a      	ldr	r2, [r1, #24]
 801bcf0:	2a00      	cmp	r2, #0
 801bcf2:	bf0c      	ite	eq
 801bcf4:	2201      	moveq	r2, #1
 801bcf6:	f04f 32ff 	movne.w	r2, #4294967295
 801bcfa:	608a      	str	r2, [r1, #8]
 801bcfc:	6822      	ldr	r2, [r4, #0]
 801bcfe:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801bd90 <_scanf_chars+0xb0>
 801bd02:	06d1      	lsls	r1, r2, #27
 801bd04:	bf5f      	itttt	pl
 801bd06:	681a      	ldrpl	r2, [r3, #0]
 801bd08:	1d11      	addpl	r1, r2, #4
 801bd0a:	6019      	strpl	r1, [r3, #0]
 801bd0c:	6816      	ldrpl	r6, [r2, #0]
 801bd0e:	2700      	movs	r7, #0
 801bd10:	69a0      	ldr	r0, [r4, #24]
 801bd12:	b188      	cbz	r0, 801bd38 <_scanf_chars+0x58>
 801bd14:	2801      	cmp	r0, #1
 801bd16:	d107      	bne.n	801bd28 <_scanf_chars+0x48>
 801bd18:	682a      	ldr	r2, [r5, #0]
 801bd1a:	7811      	ldrb	r1, [r2, #0]
 801bd1c:	6962      	ldr	r2, [r4, #20]
 801bd1e:	5c52      	ldrb	r2, [r2, r1]
 801bd20:	b952      	cbnz	r2, 801bd38 <_scanf_chars+0x58>
 801bd22:	2f00      	cmp	r7, #0
 801bd24:	d031      	beq.n	801bd8a <_scanf_chars+0xaa>
 801bd26:	e022      	b.n	801bd6e <_scanf_chars+0x8e>
 801bd28:	2802      	cmp	r0, #2
 801bd2a:	d120      	bne.n	801bd6e <_scanf_chars+0x8e>
 801bd2c:	682b      	ldr	r3, [r5, #0]
 801bd2e:	781b      	ldrb	r3, [r3, #0]
 801bd30:	f819 3003 	ldrb.w	r3, [r9, r3]
 801bd34:	071b      	lsls	r3, r3, #28
 801bd36:	d41a      	bmi.n	801bd6e <_scanf_chars+0x8e>
 801bd38:	6823      	ldr	r3, [r4, #0]
 801bd3a:	06da      	lsls	r2, r3, #27
 801bd3c:	bf5e      	ittt	pl
 801bd3e:	682b      	ldrpl	r3, [r5, #0]
 801bd40:	781b      	ldrbpl	r3, [r3, #0]
 801bd42:	f806 3b01 	strbpl.w	r3, [r6], #1
 801bd46:	682a      	ldr	r2, [r5, #0]
 801bd48:	686b      	ldr	r3, [r5, #4]
 801bd4a:	3201      	adds	r2, #1
 801bd4c:	602a      	str	r2, [r5, #0]
 801bd4e:	68a2      	ldr	r2, [r4, #8]
 801bd50:	3b01      	subs	r3, #1
 801bd52:	3a01      	subs	r2, #1
 801bd54:	606b      	str	r3, [r5, #4]
 801bd56:	3701      	adds	r7, #1
 801bd58:	60a2      	str	r2, [r4, #8]
 801bd5a:	b142      	cbz	r2, 801bd6e <_scanf_chars+0x8e>
 801bd5c:	2b00      	cmp	r3, #0
 801bd5e:	dcd7      	bgt.n	801bd10 <_scanf_chars+0x30>
 801bd60:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801bd64:	4629      	mov	r1, r5
 801bd66:	4640      	mov	r0, r8
 801bd68:	4798      	blx	r3
 801bd6a:	2800      	cmp	r0, #0
 801bd6c:	d0d0      	beq.n	801bd10 <_scanf_chars+0x30>
 801bd6e:	6823      	ldr	r3, [r4, #0]
 801bd70:	f013 0310 	ands.w	r3, r3, #16
 801bd74:	d105      	bne.n	801bd82 <_scanf_chars+0xa2>
 801bd76:	68e2      	ldr	r2, [r4, #12]
 801bd78:	3201      	adds	r2, #1
 801bd7a:	60e2      	str	r2, [r4, #12]
 801bd7c:	69a2      	ldr	r2, [r4, #24]
 801bd7e:	b102      	cbz	r2, 801bd82 <_scanf_chars+0xa2>
 801bd80:	7033      	strb	r3, [r6, #0]
 801bd82:	6923      	ldr	r3, [r4, #16]
 801bd84:	443b      	add	r3, r7
 801bd86:	6123      	str	r3, [r4, #16]
 801bd88:	2000      	movs	r0, #0
 801bd8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bd8e:	bf00      	nop
 801bd90:	0801dce1 	.word	0x0801dce1

0801bd94 <_scanf_i>:
 801bd94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd98:	4698      	mov	r8, r3
 801bd9a:	4b74      	ldr	r3, [pc, #464]	; (801bf6c <_scanf_i+0x1d8>)
 801bd9c:	460c      	mov	r4, r1
 801bd9e:	4682      	mov	sl, r0
 801bda0:	4616      	mov	r6, r2
 801bda2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801bda6:	b087      	sub	sp, #28
 801bda8:	ab03      	add	r3, sp, #12
 801bdaa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801bdae:	4b70      	ldr	r3, [pc, #448]	; (801bf70 <_scanf_i+0x1dc>)
 801bdb0:	69a1      	ldr	r1, [r4, #24]
 801bdb2:	4a70      	ldr	r2, [pc, #448]	; (801bf74 <_scanf_i+0x1e0>)
 801bdb4:	2903      	cmp	r1, #3
 801bdb6:	bf18      	it	ne
 801bdb8:	461a      	movne	r2, r3
 801bdba:	68a3      	ldr	r3, [r4, #8]
 801bdbc:	9201      	str	r2, [sp, #4]
 801bdbe:	1e5a      	subs	r2, r3, #1
 801bdc0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801bdc4:	bf88      	it	hi
 801bdc6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801bdca:	4627      	mov	r7, r4
 801bdcc:	bf82      	ittt	hi
 801bdce:	eb03 0905 	addhi.w	r9, r3, r5
 801bdd2:	f240 135d 	movwhi	r3, #349	; 0x15d
 801bdd6:	60a3      	strhi	r3, [r4, #8]
 801bdd8:	f857 3b1c 	ldr.w	r3, [r7], #28
 801bddc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801bde0:	bf98      	it	ls
 801bde2:	f04f 0900 	movls.w	r9, #0
 801bde6:	6023      	str	r3, [r4, #0]
 801bde8:	463d      	mov	r5, r7
 801bdea:	f04f 0b00 	mov.w	fp, #0
 801bdee:	6831      	ldr	r1, [r6, #0]
 801bdf0:	ab03      	add	r3, sp, #12
 801bdf2:	7809      	ldrb	r1, [r1, #0]
 801bdf4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801bdf8:	2202      	movs	r2, #2
 801bdfa:	f7e4 fa19 	bl	8000230 <memchr>
 801bdfe:	b328      	cbz	r0, 801be4c <_scanf_i+0xb8>
 801be00:	f1bb 0f01 	cmp.w	fp, #1
 801be04:	d159      	bne.n	801beba <_scanf_i+0x126>
 801be06:	6862      	ldr	r2, [r4, #4]
 801be08:	b92a      	cbnz	r2, 801be16 <_scanf_i+0x82>
 801be0a:	6822      	ldr	r2, [r4, #0]
 801be0c:	2308      	movs	r3, #8
 801be0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801be12:	6063      	str	r3, [r4, #4]
 801be14:	6022      	str	r2, [r4, #0]
 801be16:	6822      	ldr	r2, [r4, #0]
 801be18:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801be1c:	6022      	str	r2, [r4, #0]
 801be1e:	68a2      	ldr	r2, [r4, #8]
 801be20:	1e51      	subs	r1, r2, #1
 801be22:	60a1      	str	r1, [r4, #8]
 801be24:	b192      	cbz	r2, 801be4c <_scanf_i+0xb8>
 801be26:	6832      	ldr	r2, [r6, #0]
 801be28:	1c51      	adds	r1, r2, #1
 801be2a:	6031      	str	r1, [r6, #0]
 801be2c:	7812      	ldrb	r2, [r2, #0]
 801be2e:	f805 2b01 	strb.w	r2, [r5], #1
 801be32:	6872      	ldr	r2, [r6, #4]
 801be34:	3a01      	subs	r2, #1
 801be36:	2a00      	cmp	r2, #0
 801be38:	6072      	str	r2, [r6, #4]
 801be3a:	dc07      	bgt.n	801be4c <_scanf_i+0xb8>
 801be3c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801be40:	4631      	mov	r1, r6
 801be42:	4650      	mov	r0, sl
 801be44:	4790      	blx	r2
 801be46:	2800      	cmp	r0, #0
 801be48:	f040 8085 	bne.w	801bf56 <_scanf_i+0x1c2>
 801be4c:	f10b 0b01 	add.w	fp, fp, #1
 801be50:	f1bb 0f03 	cmp.w	fp, #3
 801be54:	d1cb      	bne.n	801bdee <_scanf_i+0x5a>
 801be56:	6863      	ldr	r3, [r4, #4]
 801be58:	b90b      	cbnz	r3, 801be5e <_scanf_i+0xca>
 801be5a:	230a      	movs	r3, #10
 801be5c:	6063      	str	r3, [r4, #4]
 801be5e:	6863      	ldr	r3, [r4, #4]
 801be60:	4945      	ldr	r1, [pc, #276]	; (801bf78 <_scanf_i+0x1e4>)
 801be62:	6960      	ldr	r0, [r4, #20]
 801be64:	1ac9      	subs	r1, r1, r3
 801be66:	f000 f999 	bl	801c19c <__sccl>
 801be6a:	f04f 0b00 	mov.w	fp, #0
 801be6e:	68a3      	ldr	r3, [r4, #8]
 801be70:	6822      	ldr	r2, [r4, #0]
 801be72:	2b00      	cmp	r3, #0
 801be74:	d03d      	beq.n	801bef2 <_scanf_i+0x15e>
 801be76:	6831      	ldr	r1, [r6, #0]
 801be78:	6960      	ldr	r0, [r4, #20]
 801be7a:	f891 c000 	ldrb.w	ip, [r1]
 801be7e:	f810 000c 	ldrb.w	r0, [r0, ip]
 801be82:	2800      	cmp	r0, #0
 801be84:	d035      	beq.n	801bef2 <_scanf_i+0x15e>
 801be86:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801be8a:	d124      	bne.n	801bed6 <_scanf_i+0x142>
 801be8c:	0510      	lsls	r0, r2, #20
 801be8e:	d522      	bpl.n	801bed6 <_scanf_i+0x142>
 801be90:	f10b 0b01 	add.w	fp, fp, #1
 801be94:	f1b9 0f00 	cmp.w	r9, #0
 801be98:	d003      	beq.n	801bea2 <_scanf_i+0x10e>
 801be9a:	3301      	adds	r3, #1
 801be9c:	f109 39ff 	add.w	r9, r9, #4294967295
 801bea0:	60a3      	str	r3, [r4, #8]
 801bea2:	6873      	ldr	r3, [r6, #4]
 801bea4:	3b01      	subs	r3, #1
 801bea6:	2b00      	cmp	r3, #0
 801bea8:	6073      	str	r3, [r6, #4]
 801beaa:	dd1b      	ble.n	801bee4 <_scanf_i+0x150>
 801beac:	6833      	ldr	r3, [r6, #0]
 801beae:	3301      	adds	r3, #1
 801beb0:	6033      	str	r3, [r6, #0]
 801beb2:	68a3      	ldr	r3, [r4, #8]
 801beb4:	3b01      	subs	r3, #1
 801beb6:	60a3      	str	r3, [r4, #8]
 801beb8:	e7d9      	b.n	801be6e <_scanf_i+0xda>
 801beba:	f1bb 0f02 	cmp.w	fp, #2
 801bebe:	d1ae      	bne.n	801be1e <_scanf_i+0x8a>
 801bec0:	6822      	ldr	r2, [r4, #0]
 801bec2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801bec6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801beca:	d1bf      	bne.n	801be4c <_scanf_i+0xb8>
 801becc:	2310      	movs	r3, #16
 801bece:	6063      	str	r3, [r4, #4]
 801bed0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801bed4:	e7a2      	b.n	801be1c <_scanf_i+0x88>
 801bed6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801beda:	6022      	str	r2, [r4, #0]
 801bedc:	780b      	ldrb	r3, [r1, #0]
 801bede:	f805 3b01 	strb.w	r3, [r5], #1
 801bee2:	e7de      	b.n	801bea2 <_scanf_i+0x10e>
 801bee4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801bee8:	4631      	mov	r1, r6
 801beea:	4650      	mov	r0, sl
 801beec:	4798      	blx	r3
 801beee:	2800      	cmp	r0, #0
 801bef0:	d0df      	beq.n	801beb2 <_scanf_i+0x11e>
 801bef2:	6823      	ldr	r3, [r4, #0]
 801bef4:	05d9      	lsls	r1, r3, #23
 801bef6:	d50d      	bpl.n	801bf14 <_scanf_i+0x180>
 801bef8:	42bd      	cmp	r5, r7
 801befa:	d909      	bls.n	801bf10 <_scanf_i+0x17c>
 801befc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801bf00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bf04:	4632      	mov	r2, r6
 801bf06:	4650      	mov	r0, sl
 801bf08:	4798      	blx	r3
 801bf0a:	f105 39ff 	add.w	r9, r5, #4294967295
 801bf0e:	464d      	mov	r5, r9
 801bf10:	42bd      	cmp	r5, r7
 801bf12:	d028      	beq.n	801bf66 <_scanf_i+0x1d2>
 801bf14:	6822      	ldr	r2, [r4, #0]
 801bf16:	f012 0210 	ands.w	r2, r2, #16
 801bf1a:	d113      	bne.n	801bf44 <_scanf_i+0x1b0>
 801bf1c:	702a      	strb	r2, [r5, #0]
 801bf1e:	6863      	ldr	r3, [r4, #4]
 801bf20:	9e01      	ldr	r6, [sp, #4]
 801bf22:	4639      	mov	r1, r7
 801bf24:	4650      	mov	r0, sl
 801bf26:	47b0      	blx	r6
 801bf28:	f8d8 3000 	ldr.w	r3, [r8]
 801bf2c:	6821      	ldr	r1, [r4, #0]
 801bf2e:	1d1a      	adds	r2, r3, #4
 801bf30:	f8c8 2000 	str.w	r2, [r8]
 801bf34:	f011 0f20 	tst.w	r1, #32
 801bf38:	681b      	ldr	r3, [r3, #0]
 801bf3a:	d00f      	beq.n	801bf5c <_scanf_i+0x1c8>
 801bf3c:	6018      	str	r0, [r3, #0]
 801bf3e:	68e3      	ldr	r3, [r4, #12]
 801bf40:	3301      	adds	r3, #1
 801bf42:	60e3      	str	r3, [r4, #12]
 801bf44:	6923      	ldr	r3, [r4, #16]
 801bf46:	1bed      	subs	r5, r5, r7
 801bf48:	445d      	add	r5, fp
 801bf4a:	442b      	add	r3, r5
 801bf4c:	6123      	str	r3, [r4, #16]
 801bf4e:	2000      	movs	r0, #0
 801bf50:	b007      	add	sp, #28
 801bf52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf56:	f04f 0b00 	mov.w	fp, #0
 801bf5a:	e7ca      	b.n	801bef2 <_scanf_i+0x15e>
 801bf5c:	07ca      	lsls	r2, r1, #31
 801bf5e:	bf4c      	ite	mi
 801bf60:	8018      	strhmi	r0, [r3, #0]
 801bf62:	6018      	strpl	r0, [r3, #0]
 801bf64:	e7eb      	b.n	801bf3e <_scanf_i+0x1aa>
 801bf66:	2001      	movs	r0, #1
 801bf68:	e7f2      	b.n	801bf50 <_scanf_i+0x1bc>
 801bf6a:	bf00      	nop
 801bf6c:	0801d220 	.word	0x0801d220
 801bf70:	0801cb81 	.word	0x0801cb81
 801bf74:	0801b401 	.word	0x0801b401
 801bf78:	0801de02 	.word	0x0801de02

0801bf7c <__sflush_r>:
 801bf7c:	898a      	ldrh	r2, [r1, #12]
 801bf7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bf82:	4605      	mov	r5, r0
 801bf84:	0710      	lsls	r0, r2, #28
 801bf86:	460c      	mov	r4, r1
 801bf88:	d458      	bmi.n	801c03c <__sflush_r+0xc0>
 801bf8a:	684b      	ldr	r3, [r1, #4]
 801bf8c:	2b00      	cmp	r3, #0
 801bf8e:	dc05      	bgt.n	801bf9c <__sflush_r+0x20>
 801bf90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801bf92:	2b00      	cmp	r3, #0
 801bf94:	dc02      	bgt.n	801bf9c <__sflush_r+0x20>
 801bf96:	2000      	movs	r0, #0
 801bf98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bf9e:	2e00      	cmp	r6, #0
 801bfa0:	d0f9      	beq.n	801bf96 <__sflush_r+0x1a>
 801bfa2:	2300      	movs	r3, #0
 801bfa4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801bfa8:	682f      	ldr	r7, [r5, #0]
 801bfaa:	6a21      	ldr	r1, [r4, #32]
 801bfac:	602b      	str	r3, [r5, #0]
 801bfae:	d032      	beq.n	801c016 <__sflush_r+0x9a>
 801bfb0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801bfb2:	89a3      	ldrh	r3, [r4, #12]
 801bfb4:	075a      	lsls	r2, r3, #29
 801bfb6:	d505      	bpl.n	801bfc4 <__sflush_r+0x48>
 801bfb8:	6863      	ldr	r3, [r4, #4]
 801bfba:	1ac0      	subs	r0, r0, r3
 801bfbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bfbe:	b10b      	cbz	r3, 801bfc4 <__sflush_r+0x48>
 801bfc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bfc2:	1ac0      	subs	r0, r0, r3
 801bfc4:	2300      	movs	r3, #0
 801bfc6:	4602      	mov	r2, r0
 801bfc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bfca:	6a21      	ldr	r1, [r4, #32]
 801bfcc:	4628      	mov	r0, r5
 801bfce:	47b0      	blx	r6
 801bfd0:	1c43      	adds	r3, r0, #1
 801bfd2:	89a3      	ldrh	r3, [r4, #12]
 801bfd4:	d106      	bne.n	801bfe4 <__sflush_r+0x68>
 801bfd6:	6829      	ldr	r1, [r5, #0]
 801bfd8:	291d      	cmp	r1, #29
 801bfda:	d82b      	bhi.n	801c034 <__sflush_r+0xb8>
 801bfdc:	4a29      	ldr	r2, [pc, #164]	; (801c084 <__sflush_r+0x108>)
 801bfde:	410a      	asrs	r2, r1
 801bfe0:	07d6      	lsls	r6, r2, #31
 801bfe2:	d427      	bmi.n	801c034 <__sflush_r+0xb8>
 801bfe4:	2200      	movs	r2, #0
 801bfe6:	6062      	str	r2, [r4, #4]
 801bfe8:	04d9      	lsls	r1, r3, #19
 801bfea:	6922      	ldr	r2, [r4, #16]
 801bfec:	6022      	str	r2, [r4, #0]
 801bfee:	d504      	bpl.n	801bffa <__sflush_r+0x7e>
 801bff0:	1c42      	adds	r2, r0, #1
 801bff2:	d101      	bne.n	801bff8 <__sflush_r+0x7c>
 801bff4:	682b      	ldr	r3, [r5, #0]
 801bff6:	b903      	cbnz	r3, 801bffa <__sflush_r+0x7e>
 801bff8:	6560      	str	r0, [r4, #84]	; 0x54
 801bffa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bffc:	602f      	str	r7, [r5, #0]
 801bffe:	2900      	cmp	r1, #0
 801c000:	d0c9      	beq.n	801bf96 <__sflush_r+0x1a>
 801c002:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c006:	4299      	cmp	r1, r3
 801c008:	d002      	beq.n	801c010 <__sflush_r+0x94>
 801c00a:	4628      	mov	r0, r5
 801c00c:	f7fd fe6a 	bl	8019ce4 <_free_r>
 801c010:	2000      	movs	r0, #0
 801c012:	6360      	str	r0, [r4, #52]	; 0x34
 801c014:	e7c0      	b.n	801bf98 <__sflush_r+0x1c>
 801c016:	2301      	movs	r3, #1
 801c018:	4628      	mov	r0, r5
 801c01a:	47b0      	blx	r6
 801c01c:	1c41      	adds	r1, r0, #1
 801c01e:	d1c8      	bne.n	801bfb2 <__sflush_r+0x36>
 801c020:	682b      	ldr	r3, [r5, #0]
 801c022:	2b00      	cmp	r3, #0
 801c024:	d0c5      	beq.n	801bfb2 <__sflush_r+0x36>
 801c026:	2b1d      	cmp	r3, #29
 801c028:	d001      	beq.n	801c02e <__sflush_r+0xb2>
 801c02a:	2b16      	cmp	r3, #22
 801c02c:	d101      	bne.n	801c032 <__sflush_r+0xb6>
 801c02e:	602f      	str	r7, [r5, #0]
 801c030:	e7b1      	b.n	801bf96 <__sflush_r+0x1a>
 801c032:	89a3      	ldrh	r3, [r4, #12]
 801c034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c038:	81a3      	strh	r3, [r4, #12]
 801c03a:	e7ad      	b.n	801bf98 <__sflush_r+0x1c>
 801c03c:	690f      	ldr	r7, [r1, #16]
 801c03e:	2f00      	cmp	r7, #0
 801c040:	d0a9      	beq.n	801bf96 <__sflush_r+0x1a>
 801c042:	0793      	lsls	r3, r2, #30
 801c044:	680e      	ldr	r6, [r1, #0]
 801c046:	bf08      	it	eq
 801c048:	694b      	ldreq	r3, [r1, #20]
 801c04a:	600f      	str	r7, [r1, #0]
 801c04c:	bf18      	it	ne
 801c04e:	2300      	movne	r3, #0
 801c050:	eba6 0807 	sub.w	r8, r6, r7
 801c054:	608b      	str	r3, [r1, #8]
 801c056:	f1b8 0f00 	cmp.w	r8, #0
 801c05a:	dd9c      	ble.n	801bf96 <__sflush_r+0x1a>
 801c05c:	6a21      	ldr	r1, [r4, #32]
 801c05e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c060:	4643      	mov	r3, r8
 801c062:	463a      	mov	r2, r7
 801c064:	4628      	mov	r0, r5
 801c066:	47b0      	blx	r6
 801c068:	2800      	cmp	r0, #0
 801c06a:	dc06      	bgt.n	801c07a <__sflush_r+0xfe>
 801c06c:	89a3      	ldrh	r3, [r4, #12]
 801c06e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c072:	81a3      	strh	r3, [r4, #12]
 801c074:	f04f 30ff 	mov.w	r0, #4294967295
 801c078:	e78e      	b.n	801bf98 <__sflush_r+0x1c>
 801c07a:	4407      	add	r7, r0
 801c07c:	eba8 0800 	sub.w	r8, r8, r0
 801c080:	e7e9      	b.n	801c056 <__sflush_r+0xda>
 801c082:	bf00      	nop
 801c084:	dfbffffe 	.word	0xdfbffffe

0801c088 <_fflush_r>:
 801c088:	b538      	push	{r3, r4, r5, lr}
 801c08a:	690b      	ldr	r3, [r1, #16]
 801c08c:	4605      	mov	r5, r0
 801c08e:	460c      	mov	r4, r1
 801c090:	b913      	cbnz	r3, 801c098 <_fflush_r+0x10>
 801c092:	2500      	movs	r5, #0
 801c094:	4628      	mov	r0, r5
 801c096:	bd38      	pop	{r3, r4, r5, pc}
 801c098:	b118      	cbz	r0, 801c0a2 <_fflush_r+0x1a>
 801c09a:	6a03      	ldr	r3, [r0, #32]
 801c09c:	b90b      	cbnz	r3, 801c0a2 <_fflush_r+0x1a>
 801c09e:	f7fc fcd5 	bl	8018a4c <__sinit>
 801c0a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c0a6:	2b00      	cmp	r3, #0
 801c0a8:	d0f3      	beq.n	801c092 <_fflush_r+0xa>
 801c0aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c0ac:	07d0      	lsls	r0, r2, #31
 801c0ae:	d404      	bmi.n	801c0ba <_fflush_r+0x32>
 801c0b0:	0599      	lsls	r1, r3, #22
 801c0b2:	d402      	bmi.n	801c0ba <_fflush_r+0x32>
 801c0b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c0b6:	f7fc ff85 	bl	8018fc4 <__retarget_lock_acquire_recursive>
 801c0ba:	4628      	mov	r0, r5
 801c0bc:	4621      	mov	r1, r4
 801c0be:	f7ff ff5d 	bl	801bf7c <__sflush_r>
 801c0c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c0c4:	07da      	lsls	r2, r3, #31
 801c0c6:	4605      	mov	r5, r0
 801c0c8:	d4e4      	bmi.n	801c094 <_fflush_r+0xc>
 801c0ca:	89a3      	ldrh	r3, [r4, #12]
 801c0cc:	059b      	lsls	r3, r3, #22
 801c0ce:	d4e1      	bmi.n	801c094 <_fflush_r+0xc>
 801c0d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c0d2:	f7fc ff78 	bl	8018fc6 <__retarget_lock_release_recursive>
 801c0d6:	e7dd      	b.n	801c094 <_fflush_r+0xc>

0801c0d8 <__swhatbuf_r>:
 801c0d8:	b570      	push	{r4, r5, r6, lr}
 801c0da:	460c      	mov	r4, r1
 801c0dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c0e0:	2900      	cmp	r1, #0
 801c0e2:	b096      	sub	sp, #88	; 0x58
 801c0e4:	4615      	mov	r5, r2
 801c0e6:	461e      	mov	r6, r3
 801c0e8:	da0d      	bge.n	801c106 <__swhatbuf_r+0x2e>
 801c0ea:	89a3      	ldrh	r3, [r4, #12]
 801c0ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 801c0f0:	f04f 0100 	mov.w	r1, #0
 801c0f4:	bf0c      	ite	eq
 801c0f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801c0fa:	2340      	movne	r3, #64	; 0x40
 801c0fc:	2000      	movs	r0, #0
 801c0fe:	6031      	str	r1, [r6, #0]
 801c100:	602b      	str	r3, [r5, #0]
 801c102:	b016      	add	sp, #88	; 0x58
 801c104:	bd70      	pop	{r4, r5, r6, pc}
 801c106:	466a      	mov	r2, sp
 801c108:	f000 f8e8 	bl	801c2dc <_fstat_r>
 801c10c:	2800      	cmp	r0, #0
 801c10e:	dbec      	blt.n	801c0ea <__swhatbuf_r+0x12>
 801c110:	9901      	ldr	r1, [sp, #4]
 801c112:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801c116:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801c11a:	4259      	negs	r1, r3
 801c11c:	4159      	adcs	r1, r3
 801c11e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c122:	e7eb      	b.n	801c0fc <__swhatbuf_r+0x24>

0801c124 <__smakebuf_r>:
 801c124:	898b      	ldrh	r3, [r1, #12]
 801c126:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c128:	079d      	lsls	r5, r3, #30
 801c12a:	4606      	mov	r6, r0
 801c12c:	460c      	mov	r4, r1
 801c12e:	d507      	bpl.n	801c140 <__smakebuf_r+0x1c>
 801c130:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c134:	6023      	str	r3, [r4, #0]
 801c136:	6123      	str	r3, [r4, #16]
 801c138:	2301      	movs	r3, #1
 801c13a:	6163      	str	r3, [r4, #20]
 801c13c:	b002      	add	sp, #8
 801c13e:	bd70      	pop	{r4, r5, r6, pc}
 801c140:	ab01      	add	r3, sp, #4
 801c142:	466a      	mov	r2, sp
 801c144:	f7ff ffc8 	bl	801c0d8 <__swhatbuf_r>
 801c148:	9900      	ldr	r1, [sp, #0]
 801c14a:	4605      	mov	r5, r0
 801c14c:	4630      	mov	r0, r6
 801c14e:	f7fb fd01 	bl	8017b54 <_malloc_r>
 801c152:	b948      	cbnz	r0, 801c168 <__smakebuf_r+0x44>
 801c154:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c158:	059a      	lsls	r2, r3, #22
 801c15a:	d4ef      	bmi.n	801c13c <__smakebuf_r+0x18>
 801c15c:	f023 0303 	bic.w	r3, r3, #3
 801c160:	f043 0302 	orr.w	r3, r3, #2
 801c164:	81a3      	strh	r3, [r4, #12]
 801c166:	e7e3      	b.n	801c130 <__smakebuf_r+0xc>
 801c168:	89a3      	ldrh	r3, [r4, #12]
 801c16a:	6020      	str	r0, [r4, #0]
 801c16c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c170:	81a3      	strh	r3, [r4, #12]
 801c172:	9b00      	ldr	r3, [sp, #0]
 801c174:	6163      	str	r3, [r4, #20]
 801c176:	9b01      	ldr	r3, [sp, #4]
 801c178:	6120      	str	r0, [r4, #16]
 801c17a:	b15b      	cbz	r3, 801c194 <__smakebuf_r+0x70>
 801c17c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c180:	4630      	mov	r0, r6
 801c182:	f000 f8bd 	bl	801c300 <_isatty_r>
 801c186:	b128      	cbz	r0, 801c194 <__smakebuf_r+0x70>
 801c188:	89a3      	ldrh	r3, [r4, #12]
 801c18a:	f023 0303 	bic.w	r3, r3, #3
 801c18e:	f043 0301 	orr.w	r3, r3, #1
 801c192:	81a3      	strh	r3, [r4, #12]
 801c194:	89a3      	ldrh	r3, [r4, #12]
 801c196:	431d      	orrs	r5, r3
 801c198:	81a5      	strh	r5, [r4, #12]
 801c19a:	e7cf      	b.n	801c13c <__smakebuf_r+0x18>

0801c19c <__sccl>:
 801c19c:	b570      	push	{r4, r5, r6, lr}
 801c19e:	780b      	ldrb	r3, [r1, #0]
 801c1a0:	4604      	mov	r4, r0
 801c1a2:	2b5e      	cmp	r3, #94	; 0x5e
 801c1a4:	bf0b      	itete	eq
 801c1a6:	784b      	ldrbeq	r3, [r1, #1]
 801c1a8:	1c4a      	addne	r2, r1, #1
 801c1aa:	1c8a      	addeq	r2, r1, #2
 801c1ac:	2100      	movne	r1, #0
 801c1ae:	bf08      	it	eq
 801c1b0:	2101      	moveq	r1, #1
 801c1b2:	3801      	subs	r0, #1
 801c1b4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801c1b8:	f800 1f01 	strb.w	r1, [r0, #1]!
 801c1bc:	42a8      	cmp	r0, r5
 801c1be:	d1fb      	bne.n	801c1b8 <__sccl+0x1c>
 801c1c0:	b90b      	cbnz	r3, 801c1c6 <__sccl+0x2a>
 801c1c2:	1e50      	subs	r0, r2, #1
 801c1c4:	bd70      	pop	{r4, r5, r6, pc}
 801c1c6:	f081 0101 	eor.w	r1, r1, #1
 801c1ca:	54e1      	strb	r1, [r4, r3]
 801c1cc:	4610      	mov	r0, r2
 801c1ce:	4602      	mov	r2, r0
 801c1d0:	f812 5b01 	ldrb.w	r5, [r2], #1
 801c1d4:	2d2d      	cmp	r5, #45	; 0x2d
 801c1d6:	d005      	beq.n	801c1e4 <__sccl+0x48>
 801c1d8:	2d5d      	cmp	r5, #93	; 0x5d
 801c1da:	d016      	beq.n	801c20a <__sccl+0x6e>
 801c1dc:	2d00      	cmp	r5, #0
 801c1de:	d0f1      	beq.n	801c1c4 <__sccl+0x28>
 801c1e0:	462b      	mov	r3, r5
 801c1e2:	e7f2      	b.n	801c1ca <__sccl+0x2e>
 801c1e4:	7846      	ldrb	r6, [r0, #1]
 801c1e6:	2e5d      	cmp	r6, #93	; 0x5d
 801c1e8:	d0fa      	beq.n	801c1e0 <__sccl+0x44>
 801c1ea:	42b3      	cmp	r3, r6
 801c1ec:	dcf8      	bgt.n	801c1e0 <__sccl+0x44>
 801c1ee:	3002      	adds	r0, #2
 801c1f0:	461a      	mov	r2, r3
 801c1f2:	3201      	adds	r2, #1
 801c1f4:	4296      	cmp	r6, r2
 801c1f6:	54a1      	strb	r1, [r4, r2]
 801c1f8:	dcfb      	bgt.n	801c1f2 <__sccl+0x56>
 801c1fa:	1af2      	subs	r2, r6, r3
 801c1fc:	3a01      	subs	r2, #1
 801c1fe:	1c5d      	adds	r5, r3, #1
 801c200:	42b3      	cmp	r3, r6
 801c202:	bfa8      	it	ge
 801c204:	2200      	movge	r2, #0
 801c206:	18ab      	adds	r3, r5, r2
 801c208:	e7e1      	b.n	801c1ce <__sccl+0x32>
 801c20a:	4610      	mov	r0, r2
 801c20c:	e7da      	b.n	801c1c4 <__sccl+0x28>

0801c20e <__submore>:
 801c20e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c212:	460c      	mov	r4, r1
 801c214:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801c216:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c21a:	4299      	cmp	r1, r3
 801c21c:	d11d      	bne.n	801c25a <__submore+0x4c>
 801c21e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801c222:	f7fb fc97 	bl	8017b54 <_malloc_r>
 801c226:	b918      	cbnz	r0, 801c230 <__submore+0x22>
 801c228:	f04f 30ff 	mov.w	r0, #4294967295
 801c22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c234:	63a3      	str	r3, [r4, #56]	; 0x38
 801c236:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801c23a:	6360      	str	r0, [r4, #52]	; 0x34
 801c23c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801c240:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801c244:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801c248:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801c24c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801c250:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801c254:	6020      	str	r0, [r4, #0]
 801c256:	2000      	movs	r0, #0
 801c258:	e7e8      	b.n	801c22c <__submore+0x1e>
 801c25a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801c25c:	0077      	lsls	r7, r6, #1
 801c25e:	463a      	mov	r2, r7
 801c260:	f000 fbed 	bl	801ca3e <_realloc_r>
 801c264:	4605      	mov	r5, r0
 801c266:	2800      	cmp	r0, #0
 801c268:	d0de      	beq.n	801c228 <__submore+0x1a>
 801c26a:	eb00 0806 	add.w	r8, r0, r6
 801c26e:	4601      	mov	r1, r0
 801c270:	4632      	mov	r2, r6
 801c272:	4640      	mov	r0, r8
 801c274:	f7fc fea8 	bl	8018fc8 <memcpy>
 801c278:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801c27c:	f8c4 8000 	str.w	r8, [r4]
 801c280:	e7e9      	b.n	801c256 <__submore+0x48>

0801c282 <memmove>:
 801c282:	4288      	cmp	r0, r1
 801c284:	b510      	push	{r4, lr}
 801c286:	eb01 0402 	add.w	r4, r1, r2
 801c28a:	d902      	bls.n	801c292 <memmove+0x10>
 801c28c:	4284      	cmp	r4, r0
 801c28e:	4623      	mov	r3, r4
 801c290:	d807      	bhi.n	801c2a2 <memmove+0x20>
 801c292:	1e43      	subs	r3, r0, #1
 801c294:	42a1      	cmp	r1, r4
 801c296:	d008      	beq.n	801c2aa <memmove+0x28>
 801c298:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c29c:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c2a0:	e7f8      	b.n	801c294 <memmove+0x12>
 801c2a2:	4402      	add	r2, r0
 801c2a4:	4601      	mov	r1, r0
 801c2a6:	428a      	cmp	r2, r1
 801c2a8:	d100      	bne.n	801c2ac <memmove+0x2a>
 801c2aa:	bd10      	pop	{r4, pc}
 801c2ac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c2b0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c2b4:	e7f7      	b.n	801c2a6 <memmove+0x24>

0801c2b6 <strncmp>:
 801c2b6:	b510      	push	{r4, lr}
 801c2b8:	b16a      	cbz	r2, 801c2d6 <strncmp+0x20>
 801c2ba:	3901      	subs	r1, #1
 801c2bc:	1884      	adds	r4, r0, r2
 801c2be:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c2c2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801c2c6:	429a      	cmp	r2, r3
 801c2c8:	d103      	bne.n	801c2d2 <strncmp+0x1c>
 801c2ca:	42a0      	cmp	r0, r4
 801c2cc:	d001      	beq.n	801c2d2 <strncmp+0x1c>
 801c2ce:	2a00      	cmp	r2, #0
 801c2d0:	d1f5      	bne.n	801c2be <strncmp+0x8>
 801c2d2:	1ad0      	subs	r0, r2, r3
 801c2d4:	bd10      	pop	{r4, pc}
 801c2d6:	4610      	mov	r0, r2
 801c2d8:	e7fc      	b.n	801c2d4 <strncmp+0x1e>
	...

0801c2dc <_fstat_r>:
 801c2dc:	b538      	push	{r3, r4, r5, lr}
 801c2de:	4d07      	ldr	r5, [pc, #28]	; (801c2fc <_fstat_r+0x20>)
 801c2e0:	2300      	movs	r3, #0
 801c2e2:	4604      	mov	r4, r0
 801c2e4:	4608      	mov	r0, r1
 801c2e6:	4611      	mov	r1, r2
 801c2e8:	602b      	str	r3, [r5, #0]
 801c2ea:	f7e6 ff40 	bl	800316e <_fstat>
 801c2ee:	1c43      	adds	r3, r0, #1
 801c2f0:	d102      	bne.n	801c2f8 <_fstat_r+0x1c>
 801c2f2:	682b      	ldr	r3, [r5, #0]
 801c2f4:	b103      	cbz	r3, 801c2f8 <_fstat_r+0x1c>
 801c2f6:	6023      	str	r3, [r4, #0]
 801c2f8:	bd38      	pop	{r3, r4, r5, pc}
 801c2fa:	bf00      	nop
 801c2fc:	20008484 	.word	0x20008484

0801c300 <_isatty_r>:
 801c300:	b538      	push	{r3, r4, r5, lr}
 801c302:	4d06      	ldr	r5, [pc, #24]	; (801c31c <_isatty_r+0x1c>)
 801c304:	2300      	movs	r3, #0
 801c306:	4604      	mov	r4, r0
 801c308:	4608      	mov	r0, r1
 801c30a:	602b      	str	r3, [r5, #0]
 801c30c:	f7e6 ff3f 	bl	800318e <_isatty>
 801c310:	1c43      	adds	r3, r0, #1
 801c312:	d102      	bne.n	801c31a <_isatty_r+0x1a>
 801c314:	682b      	ldr	r3, [r5, #0]
 801c316:	b103      	cbz	r3, 801c31a <_isatty_r+0x1a>
 801c318:	6023      	str	r3, [r4, #0]
 801c31a:	bd38      	pop	{r3, r4, r5, pc}
 801c31c:	20008484 	.word	0x20008484

0801c320 <nan>:
 801c320:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801c328 <nan+0x8>
 801c324:	4770      	bx	lr
 801c326:	bf00      	nop
 801c328:	00000000 	.word	0x00000000
 801c32c:	7ff80000 	.word	0x7ff80000

0801c330 <__assert_func>:
 801c330:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c332:	4614      	mov	r4, r2
 801c334:	461a      	mov	r2, r3
 801c336:	4b09      	ldr	r3, [pc, #36]	; (801c35c <__assert_func+0x2c>)
 801c338:	681b      	ldr	r3, [r3, #0]
 801c33a:	4605      	mov	r5, r0
 801c33c:	68d8      	ldr	r0, [r3, #12]
 801c33e:	b14c      	cbz	r4, 801c354 <__assert_func+0x24>
 801c340:	4b07      	ldr	r3, [pc, #28]	; (801c360 <__assert_func+0x30>)
 801c342:	9100      	str	r1, [sp, #0]
 801c344:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c348:	4906      	ldr	r1, [pc, #24]	; (801c364 <__assert_func+0x34>)
 801c34a:	462b      	mov	r3, r5
 801c34c:	f000 fc28 	bl	801cba0 <fiprintf>
 801c350:	f000 fc38 	bl	801cbc4 <abort>
 801c354:	4b04      	ldr	r3, [pc, #16]	; (801c368 <__assert_func+0x38>)
 801c356:	461c      	mov	r4, r3
 801c358:	e7f3      	b.n	801c342 <__assert_func+0x12>
 801c35a:	bf00      	nop
 801c35c:	20000198 	.word	0x20000198
 801c360:	0801de15 	.word	0x0801de15
 801c364:	0801de22 	.word	0x0801de22
 801c368:	0801de50 	.word	0x0801de50

0801c36c <rshift>:
 801c36c:	6903      	ldr	r3, [r0, #16]
 801c36e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801c372:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c376:	ea4f 1261 	mov.w	r2, r1, asr #5
 801c37a:	f100 0414 	add.w	r4, r0, #20
 801c37e:	dd45      	ble.n	801c40c <rshift+0xa0>
 801c380:	f011 011f 	ands.w	r1, r1, #31
 801c384:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801c388:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801c38c:	d10c      	bne.n	801c3a8 <rshift+0x3c>
 801c38e:	f100 0710 	add.w	r7, r0, #16
 801c392:	4629      	mov	r1, r5
 801c394:	42b1      	cmp	r1, r6
 801c396:	d334      	bcc.n	801c402 <rshift+0x96>
 801c398:	1a9b      	subs	r3, r3, r2
 801c39a:	009b      	lsls	r3, r3, #2
 801c39c:	1eea      	subs	r2, r5, #3
 801c39e:	4296      	cmp	r6, r2
 801c3a0:	bf38      	it	cc
 801c3a2:	2300      	movcc	r3, #0
 801c3a4:	4423      	add	r3, r4
 801c3a6:	e015      	b.n	801c3d4 <rshift+0x68>
 801c3a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801c3ac:	f1c1 0820 	rsb	r8, r1, #32
 801c3b0:	40cf      	lsrs	r7, r1
 801c3b2:	f105 0e04 	add.w	lr, r5, #4
 801c3b6:	46a1      	mov	r9, r4
 801c3b8:	4576      	cmp	r6, lr
 801c3ba:	46f4      	mov	ip, lr
 801c3bc:	d815      	bhi.n	801c3ea <rshift+0x7e>
 801c3be:	1a9a      	subs	r2, r3, r2
 801c3c0:	0092      	lsls	r2, r2, #2
 801c3c2:	3a04      	subs	r2, #4
 801c3c4:	3501      	adds	r5, #1
 801c3c6:	42ae      	cmp	r6, r5
 801c3c8:	bf38      	it	cc
 801c3ca:	2200      	movcc	r2, #0
 801c3cc:	18a3      	adds	r3, r4, r2
 801c3ce:	50a7      	str	r7, [r4, r2]
 801c3d0:	b107      	cbz	r7, 801c3d4 <rshift+0x68>
 801c3d2:	3304      	adds	r3, #4
 801c3d4:	1b1a      	subs	r2, r3, r4
 801c3d6:	42a3      	cmp	r3, r4
 801c3d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c3dc:	bf08      	it	eq
 801c3de:	2300      	moveq	r3, #0
 801c3e0:	6102      	str	r2, [r0, #16]
 801c3e2:	bf08      	it	eq
 801c3e4:	6143      	streq	r3, [r0, #20]
 801c3e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c3ea:	f8dc c000 	ldr.w	ip, [ip]
 801c3ee:	fa0c fc08 	lsl.w	ip, ip, r8
 801c3f2:	ea4c 0707 	orr.w	r7, ip, r7
 801c3f6:	f849 7b04 	str.w	r7, [r9], #4
 801c3fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c3fe:	40cf      	lsrs	r7, r1
 801c400:	e7da      	b.n	801c3b8 <rshift+0x4c>
 801c402:	f851 cb04 	ldr.w	ip, [r1], #4
 801c406:	f847 cf04 	str.w	ip, [r7, #4]!
 801c40a:	e7c3      	b.n	801c394 <rshift+0x28>
 801c40c:	4623      	mov	r3, r4
 801c40e:	e7e1      	b.n	801c3d4 <rshift+0x68>

0801c410 <__hexdig_fun>:
 801c410:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801c414:	2b09      	cmp	r3, #9
 801c416:	d802      	bhi.n	801c41e <__hexdig_fun+0xe>
 801c418:	3820      	subs	r0, #32
 801c41a:	b2c0      	uxtb	r0, r0
 801c41c:	4770      	bx	lr
 801c41e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801c422:	2b05      	cmp	r3, #5
 801c424:	d801      	bhi.n	801c42a <__hexdig_fun+0x1a>
 801c426:	3847      	subs	r0, #71	; 0x47
 801c428:	e7f7      	b.n	801c41a <__hexdig_fun+0xa>
 801c42a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801c42e:	2b05      	cmp	r3, #5
 801c430:	d801      	bhi.n	801c436 <__hexdig_fun+0x26>
 801c432:	3827      	subs	r0, #39	; 0x27
 801c434:	e7f1      	b.n	801c41a <__hexdig_fun+0xa>
 801c436:	2000      	movs	r0, #0
 801c438:	4770      	bx	lr
	...

0801c43c <__gethex>:
 801c43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c440:	4617      	mov	r7, r2
 801c442:	680a      	ldr	r2, [r1, #0]
 801c444:	b085      	sub	sp, #20
 801c446:	f102 0b02 	add.w	fp, r2, #2
 801c44a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801c44e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801c452:	4681      	mov	r9, r0
 801c454:	468a      	mov	sl, r1
 801c456:	9302      	str	r3, [sp, #8]
 801c458:	32fe      	adds	r2, #254	; 0xfe
 801c45a:	eb02 030b 	add.w	r3, r2, fp
 801c45e:	46d8      	mov	r8, fp
 801c460:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801c464:	9301      	str	r3, [sp, #4]
 801c466:	2830      	cmp	r0, #48	; 0x30
 801c468:	d0f7      	beq.n	801c45a <__gethex+0x1e>
 801c46a:	f7ff ffd1 	bl	801c410 <__hexdig_fun>
 801c46e:	4604      	mov	r4, r0
 801c470:	2800      	cmp	r0, #0
 801c472:	d138      	bne.n	801c4e6 <__gethex+0xaa>
 801c474:	49a7      	ldr	r1, [pc, #668]	; (801c714 <__gethex+0x2d8>)
 801c476:	2201      	movs	r2, #1
 801c478:	4640      	mov	r0, r8
 801c47a:	f7ff ff1c 	bl	801c2b6 <strncmp>
 801c47e:	4606      	mov	r6, r0
 801c480:	2800      	cmp	r0, #0
 801c482:	d169      	bne.n	801c558 <__gethex+0x11c>
 801c484:	f898 0001 	ldrb.w	r0, [r8, #1]
 801c488:	465d      	mov	r5, fp
 801c48a:	f7ff ffc1 	bl	801c410 <__hexdig_fun>
 801c48e:	2800      	cmp	r0, #0
 801c490:	d064      	beq.n	801c55c <__gethex+0x120>
 801c492:	465a      	mov	r2, fp
 801c494:	7810      	ldrb	r0, [r2, #0]
 801c496:	2830      	cmp	r0, #48	; 0x30
 801c498:	4690      	mov	r8, r2
 801c49a:	f102 0201 	add.w	r2, r2, #1
 801c49e:	d0f9      	beq.n	801c494 <__gethex+0x58>
 801c4a0:	f7ff ffb6 	bl	801c410 <__hexdig_fun>
 801c4a4:	2301      	movs	r3, #1
 801c4a6:	fab0 f480 	clz	r4, r0
 801c4aa:	0964      	lsrs	r4, r4, #5
 801c4ac:	465e      	mov	r6, fp
 801c4ae:	9301      	str	r3, [sp, #4]
 801c4b0:	4642      	mov	r2, r8
 801c4b2:	4615      	mov	r5, r2
 801c4b4:	3201      	adds	r2, #1
 801c4b6:	7828      	ldrb	r0, [r5, #0]
 801c4b8:	f7ff ffaa 	bl	801c410 <__hexdig_fun>
 801c4bc:	2800      	cmp	r0, #0
 801c4be:	d1f8      	bne.n	801c4b2 <__gethex+0x76>
 801c4c0:	4994      	ldr	r1, [pc, #592]	; (801c714 <__gethex+0x2d8>)
 801c4c2:	2201      	movs	r2, #1
 801c4c4:	4628      	mov	r0, r5
 801c4c6:	f7ff fef6 	bl	801c2b6 <strncmp>
 801c4ca:	b978      	cbnz	r0, 801c4ec <__gethex+0xb0>
 801c4cc:	b946      	cbnz	r6, 801c4e0 <__gethex+0xa4>
 801c4ce:	1c6e      	adds	r6, r5, #1
 801c4d0:	4632      	mov	r2, r6
 801c4d2:	4615      	mov	r5, r2
 801c4d4:	3201      	adds	r2, #1
 801c4d6:	7828      	ldrb	r0, [r5, #0]
 801c4d8:	f7ff ff9a 	bl	801c410 <__hexdig_fun>
 801c4dc:	2800      	cmp	r0, #0
 801c4de:	d1f8      	bne.n	801c4d2 <__gethex+0x96>
 801c4e0:	1b73      	subs	r3, r6, r5
 801c4e2:	009e      	lsls	r6, r3, #2
 801c4e4:	e004      	b.n	801c4f0 <__gethex+0xb4>
 801c4e6:	2400      	movs	r4, #0
 801c4e8:	4626      	mov	r6, r4
 801c4ea:	e7e1      	b.n	801c4b0 <__gethex+0x74>
 801c4ec:	2e00      	cmp	r6, #0
 801c4ee:	d1f7      	bne.n	801c4e0 <__gethex+0xa4>
 801c4f0:	782b      	ldrb	r3, [r5, #0]
 801c4f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c4f6:	2b50      	cmp	r3, #80	; 0x50
 801c4f8:	d13d      	bne.n	801c576 <__gethex+0x13a>
 801c4fa:	786b      	ldrb	r3, [r5, #1]
 801c4fc:	2b2b      	cmp	r3, #43	; 0x2b
 801c4fe:	d02f      	beq.n	801c560 <__gethex+0x124>
 801c500:	2b2d      	cmp	r3, #45	; 0x2d
 801c502:	d031      	beq.n	801c568 <__gethex+0x12c>
 801c504:	1c69      	adds	r1, r5, #1
 801c506:	f04f 0b00 	mov.w	fp, #0
 801c50a:	7808      	ldrb	r0, [r1, #0]
 801c50c:	f7ff ff80 	bl	801c410 <__hexdig_fun>
 801c510:	1e42      	subs	r2, r0, #1
 801c512:	b2d2      	uxtb	r2, r2
 801c514:	2a18      	cmp	r2, #24
 801c516:	d82e      	bhi.n	801c576 <__gethex+0x13a>
 801c518:	f1a0 0210 	sub.w	r2, r0, #16
 801c51c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c520:	f7ff ff76 	bl	801c410 <__hexdig_fun>
 801c524:	f100 3cff 	add.w	ip, r0, #4294967295
 801c528:	fa5f fc8c 	uxtb.w	ip, ip
 801c52c:	f1bc 0f18 	cmp.w	ip, #24
 801c530:	d91d      	bls.n	801c56e <__gethex+0x132>
 801c532:	f1bb 0f00 	cmp.w	fp, #0
 801c536:	d000      	beq.n	801c53a <__gethex+0xfe>
 801c538:	4252      	negs	r2, r2
 801c53a:	4416      	add	r6, r2
 801c53c:	f8ca 1000 	str.w	r1, [sl]
 801c540:	b1dc      	cbz	r4, 801c57a <__gethex+0x13e>
 801c542:	9b01      	ldr	r3, [sp, #4]
 801c544:	2b00      	cmp	r3, #0
 801c546:	bf14      	ite	ne
 801c548:	f04f 0800 	movne.w	r8, #0
 801c54c:	f04f 0806 	moveq.w	r8, #6
 801c550:	4640      	mov	r0, r8
 801c552:	b005      	add	sp, #20
 801c554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c558:	4645      	mov	r5, r8
 801c55a:	4626      	mov	r6, r4
 801c55c:	2401      	movs	r4, #1
 801c55e:	e7c7      	b.n	801c4f0 <__gethex+0xb4>
 801c560:	f04f 0b00 	mov.w	fp, #0
 801c564:	1ca9      	adds	r1, r5, #2
 801c566:	e7d0      	b.n	801c50a <__gethex+0xce>
 801c568:	f04f 0b01 	mov.w	fp, #1
 801c56c:	e7fa      	b.n	801c564 <__gethex+0x128>
 801c56e:	230a      	movs	r3, #10
 801c570:	fb03 0002 	mla	r0, r3, r2, r0
 801c574:	e7d0      	b.n	801c518 <__gethex+0xdc>
 801c576:	4629      	mov	r1, r5
 801c578:	e7e0      	b.n	801c53c <__gethex+0x100>
 801c57a:	eba5 0308 	sub.w	r3, r5, r8
 801c57e:	3b01      	subs	r3, #1
 801c580:	4621      	mov	r1, r4
 801c582:	2b07      	cmp	r3, #7
 801c584:	dc0a      	bgt.n	801c59c <__gethex+0x160>
 801c586:	4648      	mov	r0, r9
 801c588:	f7fd fbf8 	bl	8019d7c <_Balloc>
 801c58c:	4604      	mov	r4, r0
 801c58e:	b940      	cbnz	r0, 801c5a2 <__gethex+0x166>
 801c590:	4b61      	ldr	r3, [pc, #388]	; (801c718 <__gethex+0x2dc>)
 801c592:	4602      	mov	r2, r0
 801c594:	21e4      	movs	r1, #228	; 0xe4
 801c596:	4861      	ldr	r0, [pc, #388]	; (801c71c <__gethex+0x2e0>)
 801c598:	f7ff feca 	bl	801c330 <__assert_func>
 801c59c:	3101      	adds	r1, #1
 801c59e:	105b      	asrs	r3, r3, #1
 801c5a0:	e7ef      	b.n	801c582 <__gethex+0x146>
 801c5a2:	f100 0a14 	add.w	sl, r0, #20
 801c5a6:	2300      	movs	r3, #0
 801c5a8:	495a      	ldr	r1, [pc, #360]	; (801c714 <__gethex+0x2d8>)
 801c5aa:	f8cd a004 	str.w	sl, [sp, #4]
 801c5ae:	469b      	mov	fp, r3
 801c5b0:	45a8      	cmp	r8, r5
 801c5b2:	d342      	bcc.n	801c63a <__gethex+0x1fe>
 801c5b4:	9801      	ldr	r0, [sp, #4]
 801c5b6:	f840 bb04 	str.w	fp, [r0], #4
 801c5ba:	eba0 000a 	sub.w	r0, r0, sl
 801c5be:	1080      	asrs	r0, r0, #2
 801c5c0:	6120      	str	r0, [r4, #16]
 801c5c2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801c5c6:	4658      	mov	r0, fp
 801c5c8:	f7fd fcca 	bl	8019f60 <__hi0bits>
 801c5cc:	683d      	ldr	r5, [r7, #0]
 801c5ce:	eba8 0000 	sub.w	r0, r8, r0
 801c5d2:	42a8      	cmp	r0, r5
 801c5d4:	dd59      	ble.n	801c68a <__gethex+0x24e>
 801c5d6:	eba0 0805 	sub.w	r8, r0, r5
 801c5da:	4641      	mov	r1, r8
 801c5dc:	4620      	mov	r0, r4
 801c5de:	f7fe f859 	bl	801a694 <__any_on>
 801c5e2:	4683      	mov	fp, r0
 801c5e4:	b1b8      	cbz	r0, 801c616 <__gethex+0x1da>
 801c5e6:	f108 33ff 	add.w	r3, r8, #4294967295
 801c5ea:	1159      	asrs	r1, r3, #5
 801c5ec:	f003 021f 	and.w	r2, r3, #31
 801c5f0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801c5f4:	f04f 0b01 	mov.w	fp, #1
 801c5f8:	fa0b f202 	lsl.w	r2, fp, r2
 801c5fc:	420a      	tst	r2, r1
 801c5fe:	d00a      	beq.n	801c616 <__gethex+0x1da>
 801c600:	455b      	cmp	r3, fp
 801c602:	dd06      	ble.n	801c612 <__gethex+0x1d6>
 801c604:	f1a8 0102 	sub.w	r1, r8, #2
 801c608:	4620      	mov	r0, r4
 801c60a:	f7fe f843 	bl	801a694 <__any_on>
 801c60e:	2800      	cmp	r0, #0
 801c610:	d138      	bne.n	801c684 <__gethex+0x248>
 801c612:	f04f 0b02 	mov.w	fp, #2
 801c616:	4641      	mov	r1, r8
 801c618:	4620      	mov	r0, r4
 801c61a:	f7ff fea7 	bl	801c36c <rshift>
 801c61e:	4446      	add	r6, r8
 801c620:	68bb      	ldr	r3, [r7, #8]
 801c622:	42b3      	cmp	r3, r6
 801c624:	da41      	bge.n	801c6aa <__gethex+0x26e>
 801c626:	4621      	mov	r1, r4
 801c628:	4648      	mov	r0, r9
 801c62a:	f7fd fbe7 	bl	8019dfc <_Bfree>
 801c62e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c630:	2300      	movs	r3, #0
 801c632:	6013      	str	r3, [r2, #0]
 801c634:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801c638:	e78a      	b.n	801c550 <__gethex+0x114>
 801c63a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801c63e:	2a2e      	cmp	r2, #46	; 0x2e
 801c640:	d014      	beq.n	801c66c <__gethex+0x230>
 801c642:	2b20      	cmp	r3, #32
 801c644:	d106      	bne.n	801c654 <__gethex+0x218>
 801c646:	9b01      	ldr	r3, [sp, #4]
 801c648:	f843 bb04 	str.w	fp, [r3], #4
 801c64c:	f04f 0b00 	mov.w	fp, #0
 801c650:	9301      	str	r3, [sp, #4]
 801c652:	465b      	mov	r3, fp
 801c654:	7828      	ldrb	r0, [r5, #0]
 801c656:	9303      	str	r3, [sp, #12]
 801c658:	f7ff feda 	bl	801c410 <__hexdig_fun>
 801c65c:	9b03      	ldr	r3, [sp, #12]
 801c65e:	f000 000f 	and.w	r0, r0, #15
 801c662:	4098      	lsls	r0, r3
 801c664:	ea4b 0b00 	orr.w	fp, fp, r0
 801c668:	3304      	adds	r3, #4
 801c66a:	e7a1      	b.n	801c5b0 <__gethex+0x174>
 801c66c:	45a8      	cmp	r8, r5
 801c66e:	d8e8      	bhi.n	801c642 <__gethex+0x206>
 801c670:	2201      	movs	r2, #1
 801c672:	4628      	mov	r0, r5
 801c674:	9303      	str	r3, [sp, #12]
 801c676:	f7ff fe1e 	bl	801c2b6 <strncmp>
 801c67a:	4926      	ldr	r1, [pc, #152]	; (801c714 <__gethex+0x2d8>)
 801c67c:	9b03      	ldr	r3, [sp, #12]
 801c67e:	2800      	cmp	r0, #0
 801c680:	d1df      	bne.n	801c642 <__gethex+0x206>
 801c682:	e795      	b.n	801c5b0 <__gethex+0x174>
 801c684:	f04f 0b03 	mov.w	fp, #3
 801c688:	e7c5      	b.n	801c616 <__gethex+0x1da>
 801c68a:	da0b      	bge.n	801c6a4 <__gethex+0x268>
 801c68c:	eba5 0800 	sub.w	r8, r5, r0
 801c690:	4621      	mov	r1, r4
 801c692:	4642      	mov	r2, r8
 801c694:	4648      	mov	r0, r9
 801c696:	f7fd fdcb 	bl	801a230 <__lshift>
 801c69a:	eba6 0608 	sub.w	r6, r6, r8
 801c69e:	4604      	mov	r4, r0
 801c6a0:	f100 0a14 	add.w	sl, r0, #20
 801c6a4:	f04f 0b00 	mov.w	fp, #0
 801c6a8:	e7ba      	b.n	801c620 <__gethex+0x1e4>
 801c6aa:	687b      	ldr	r3, [r7, #4]
 801c6ac:	42b3      	cmp	r3, r6
 801c6ae:	dd73      	ble.n	801c798 <__gethex+0x35c>
 801c6b0:	1b9e      	subs	r6, r3, r6
 801c6b2:	42b5      	cmp	r5, r6
 801c6b4:	dc34      	bgt.n	801c720 <__gethex+0x2e4>
 801c6b6:	68fb      	ldr	r3, [r7, #12]
 801c6b8:	2b02      	cmp	r3, #2
 801c6ba:	d023      	beq.n	801c704 <__gethex+0x2c8>
 801c6bc:	2b03      	cmp	r3, #3
 801c6be:	d025      	beq.n	801c70c <__gethex+0x2d0>
 801c6c0:	2b01      	cmp	r3, #1
 801c6c2:	d115      	bne.n	801c6f0 <__gethex+0x2b4>
 801c6c4:	42b5      	cmp	r5, r6
 801c6c6:	d113      	bne.n	801c6f0 <__gethex+0x2b4>
 801c6c8:	2d01      	cmp	r5, #1
 801c6ca:	d10b      	bne.n	801c6e4 <__gethex+0x2a8>
 801c6cc:	9a02      	ldr	r2, [sp, #8]
 801c6ce:	687b      	ldr	r3, [r7, #4]
 801c6d0:	6013      	str	r3, [r2, #0]
 801c6d2:	2301      	movs	r3, #1
 801c6d4:	6123      	str	r3, [r4, #16]
 801c6d6:	f8ca 3000 	str.w	r3, [sl]
 801c6da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c6dc:	f04f 0862 	mov.w	r8, #98	; 0x62
 801c6e0:	601c      	str	r4, [r3, #0]
 801c6e2:	e735      	b.n	801c550 <__gethex+0x114>
 801c6e4:	1e69      	subs	r1, r5, #1
 801c6e6:	4620      	mov	r0, r4
 801c6e8:	f7fd ffd4 	bl	801a694 <__any_on>
 801c6ec:	2800      	cmp	r0, #0
 801c6ee:	d1ed      	bne.n	801c6cc <__gethex+0x290>
 801c6f0:	4621      	mov	r1, r4
 801c6f2:	4648      	mov	r0, r9
 801c6f4:	f7fd fb82 	bl	8019dfc <_Bfree>
 801c6f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c6fa:	2300      	movs	r3, #0
 801c6fc:	6013      	str	r3, [r2, #0]
 801c6fe:	f04f 0850 	mov.w	r8, #80	; 0x50
 801c702:	e725      	b.n	801c550 <__gethex+0x114>
 801c704:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c706:	2b00      	cmp	r3, #0
 801c708:	d1f2      	bne.n	801c6f0 <__gethex+0x2b4>
 801c70a:	e7df      	b.n	801c6cc <__gethex+0x290>
 801c70c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c70e:	2b00      	cmp	r3, #0
 801c710:	d1dc      	bne.n	801c6cc <__gethex+0x290>
 801c712:	e7ed      	b.n	801c6f0 <__gethex+0x2b4>
 801c714:	0801dc8c 	.word	0x0801dc8c
 801c718:	0801db23 	.word	0x0801db23
 801c71c:	0801de51 	.word	0x0801de51
 801c720:	f106 38ff 	add.w	r8, r6, #4294967295
 801c724:	f1bb 0f00 	cmp.w	fp, #0
 801c728:	d133      	bne.n	801c792 <__gethex+0x356>
 801c72a:	f1b8 0f00 	cmp.w	r8, #0
 801c72e:	d004      	beq.n	801c73a <__gethex+0x2fe>
 801c730:	4641      	mov	r1, r8
 801c732:	4620      	mov	r0, r4
 801c734:	f7fd ffae 	bl	801a694 <__any_on>
 801c738:	4683      	mov	fp, r0
 801c73a:	ea4f 1268 	mov.w	r2, r8, asr #5
 801c73e:	2301      	movs	r3, #1
 801c740:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801c744:	f008 081f 	and.w	r8, r8, #31
 801c748:	fa03 f308 	lsl.w	r3, r3, r8
 801c74c:	4213      	tst	r3, r2
 801c74e:	4631      	mov	r1, r6
 801c750:	4620      	mov	r0, r4
 801c752:	bf18      	it	ne
 801c754:	f04b 0b02 	orrne.w	fp, fp, #2
 801c758:	1bad      	subs	r5, r5, r6
 801c75a:	f7ff fe07 	bl	801c36c <rshift>
 801c75e:	687e      	ldr	r6, [r7, #4]
 801c760:	f04f 0802 	mov.w	r8, #2
 801c764:	f1bb 0f00 	cmp.w	fp, #0
 801c768:	d04a      	beq.n	801c800 <__gethex+0x3c4>
 801c76a:	68fb      	ldr	r3, [r7, #12]
 801c76c:	2b02      	cmp	r3, #2
 801c76e:	d016      	beq.n	801c79e <__gethex+0x362>
 801c770:	2b03      	cmp	r3, #3
 801c772:	d018      	beq.n	801c7a6 <__gethex+0x36a>
 801c774:	2b01      	cmp	r3, #1
 801c776:	d109      	bne.n	801c78c <__gethex+0x350>
 801c778:	f01b 0f02 	tst.w	fp, #2
 801c77c:	d006      	beq.n	801c78c <__gethex+0x350>
 801c77e:	f8da 3000 	ldr.w	r3, [sl]
 801c782:	ea4b 0b03 	orr.w	fp, fp, r3
 801c786:	f01b 0f01 	tst.w	fp, #1
 801c78a:	d10f      	bne.n	801c7ac <__gethex+0x370>
 801c78c:	f048 0810 	orr.w	r8, r8, #16
 801c790:	e036      	b.n	801c800 <__gethex+0x3c4>
 801c792:	f04f 0b01 	mov.w	fp, #1
 801c796:	e7d0      	b.n	801c73a <__gethex+0x2fe>
 801c798:	f04f 0801 	mov.w	r8, #1
 801c79c:	e7e2      	b.n	801c764 <__gethex+0x328>
 801c79e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c7a0:	f1c3 0301 	rsb	r3, r3, #1
 801c7a4:	930f      	str	r3, [sp, #60]	; 0x3c
 801c7a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c7a8:	2b00      	cmp	r3, #0
 801c7aa:	d0ef      	beq.n	801c78c <__gethex+0x350>
 801c7ac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801c7b0:	f104 0214 	add.w	r2, r4, #20
 801c7b4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801c7b8:	9301      	str	r3, [sp, #4]
 801c7ba:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801c7be:	2300      	movs	r3, #0
 801c7c0:	4694      	mov	ip, r2
 801c7c2:	f852 1b04 	ldr.w	r1, [r2], #4
 801c7c6:	f1b1 3fff 	cmp.w	r1, #4294967295
 801c7ca:	d01e      	beq.n	801c80a <__gethex+0x3ce>
 801c7cc:	3101      	adds	r1, #1
 801c7ce:	f8cc 1000 	str.w	r1, [ip]
 801c7d2:	f1b8 0f02 	cmp.w	r8, #2
 801c7d6:	f104 0214 	add.w	r2, r4, #20
 801c7da:	d13d      	bne.n	801c858 <__gethex+0x41c>
 801c7dc:	683b      	ldr	r3, [r7, #0]
 801c7de:	3b01      	subs	r3, #1
 801c7e0:	42ab      	cmp	r3, r5
 801c7e2:	d10b      	bne.n	801c7fc <__gethex+0x3c0>
 801c7e4:	1169      	asrs	r1, r5, #5
 801c7e6:	2301      	movs	r3, #1
 801c7e8:	f005 051f 	and.w	r5, r5, #31
 801c7ec:	fa03 f505 	lsl.w	r5, r3, r5
 801c7f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c7f4:	421d      	tst	r5, r3
 801c7f6:	bf18      	it	ne
 801c7f8:	f04f 0801 	movne.w	r8, #1
 801c7fc:	f048 0820 	orr.w	r8, r8, #32
 801c800:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c802:	601c      	str	r4, [r3, #0]
 801c804:	9b02      	ldr	r3, [sp, #8]
 801c806:	601e      	str	r6, [r3, #0]
 801c808:	e6a2      	b.n	801c550 <__gethex+0x114>
 801c80a:	4290      	cmp	r0, r2
 801c80c:	f842 3c04 	str.w	r3, [r2, #-4]
 801c810:	d8d6      	bhi.n	801c7c0 <__gethex+0x384>
 801c812:	68a2      	ldr	r2, [r4, #8]
 801c814:	4593      	cmp	fp, r2
 801c816:	db17      	blt.n	801c848 <__gethex+0x40c>
 801c818:	6861      	ldr	r1, [r4, #4]
 801c81a:	4648      	mov	r0, r9
 801c81c:	3101      	adds	r1, #1
 801c81e:	f7fd faad 	bl	8019d7c <_Balloc>
 801c822:	4682      	mov	sl, r0
 801c824:	b918      	cbnz	r0, 801c82e <__gethex+0x3f2>
 801c826:	4b1b      	ldr	r3, [pc, #108]	; (801c894 <__gethex+0x458>)
 801c828:	4602      	mov	r2, r0
 801c82a:	2184      	movs	r1, #132	; 0x84
 801c82c:	e6b3      	b.n	801c596 <__gethex+0x15a>
 801c82e:	6922      	ldr	r2, [r4, #16]
 801c830:	3202      	adds	r2, #2
 801c832:	f104 010c 	add.w	r1, r4, #12
 801c836:	0092      	lsls	r2, r2, #2
 801c838:	300c      	adds	r0, #12
 801c83a:	f7fc fbc5 	bl	8018fc8 <memcpy>
 801c83e:	4621      	mov	r1, r4
 801c840:	4648      	mov	r0, r9
 801c842:	f7fd fadb 	bl	8019dfc <_Bfree>
 801c846:	4654      	mov	r4, sl
 801c848:	6922      	ldr	r2, [r4, #16]
 801c84a:	1c51      	adds	r1, r2, #1
 801c84c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801c850:	6121      	str	r1, [r4, #16]
 801c852:	2101      	movs	r1, #1
 801c854:	6151      	str	r1, [r2, #20]
 801c856:	e7bc      	b.n	801c7d2 <__gethex+0x396>
 801c858:	6921      	ldr	r1, [r4, #16]
 801c85a:	4559      	cmp	r1, fp
 801c85c:	dd0b      	ble.n	801c876 <__gethex+0x43a>
 801c85e:	2101      	movs	r1, #1
 801c860:	4620      	mov	r0, r4
 801c862:	f7ff fd83 	bl	801c36c <rshift>
 801c866:	68bb      	ldr	r3, [r7, #8]
 801c868:	3601      	adds	r6, #1
 801c86a:	42b3      	cmp	r3, r6
 801c86c:	f6ff aedb 	blt.w	801c626 <__gethex+0x1ea>
 801c870:	f04f 0801 	mov.w	r8, #1
 801c874:	e7c2      	b.n	801c7fc <__gethex+0x3c0>
 801c876:	f015 051f 	ands.w	r5, r5, #31
 801c87a:	d0f9      	beq.n	801c870 <__gethex+0x434>
 801c87c:	9b01      	ldr	r3, [sp, #4]
 801c87e:	441a      	add	r2, r3
 801c880:	f1c5 0520 	rsb	r5, r5, #32
 801c884:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801c888:	f7fd fb6a 	bl	8019f60 <__hi0bits>
 801c88c:	42a8      	cmp	r0, r5
 801c88e:	dbe6      	blt.n	801c85e <__gethex+0x422>
 801c890:	e7ee      	b.n	801c870 <__gethex+0x434>
 801c892:	bf00      	nop
 801c894:	0801db23 	.word	0x0801db23

0801c898 <L_shift>:
 801c898:	f1c2 0208 	rsb	r2, r2, #8
 801c89c:	0092      	lsls	r2, r2, #2
 801c89e:	b570      	push	{r4, r5, r6, lr}
 801c8a0:	f1c2 0620 	rsb	r6, r2, #32
 801c8a4:	6843      	ldr	r3, [r0, #4]
 801c8a6:	6804      	ldr	r4, [r0, #0]
 801c8a8:	fa03 f506 	lsl.w	r5, r3, r6
 801c8ac:	432c      	orrs	r4, r5
 801c8ae:	40d3      	lsrs	r3, r2
 801c8b0:	6004      	str	r4, [r0, #0]
 801c8b2:	f840 3f04 	str.w	r3, [r0, #4]!
 801c8b6:	4288      	cmp	r0, r1
 801c8b8:	d3f4      	bcc.n	801c8a4 <L_shift+0xc>
 801c8ba:	bd70      	pop	{r4, r5, r6, pc}

0801c8bc <__match>:
 801c8bc:	b530      	push	{r4, r5, lr}
 801c8be:	6803      	ldr	r3, [r0, #0]
 801c8c0:	3301      	adds	r3, #1
 801c8c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c8c6:	b914      	cbnz	r4, 801c8ce <__match+0x12>
 801c8c8:	6003      	str	r3, [r0, #0]
 801c8ca:	2001      	movs	r0, #1
 801c8cc:	bd30      	pop	{r4, r5, pc}
 801c8ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c8d2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801c8d6:	2d19      	cmp	r5, #25
 801c8d8:	bf98      	it	ls
 801c8da:	3220      	addls	r2, #32
 801c8dc:	42a2      	cmp	r2, r4
 801c8de:	d0f0      	beq.n	801c8c2 <__match+0x6>
 801c8e0:	2000      	movs	r0, #0
 801c8e2:	e7f3      	b.n	801c8cc <__match+0x10>

0801c8e4 <__hexnan>:
 801c8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8e8:	680b      	ldr	r3, [r1, #0]
 801c8ea:	6801      	ldr	r1, [r0, #0]
 801c8ec:	115e      	asrs	r6, r3, #5
 801c8ee:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801c8f2:	f013 031f 	ands.w	r3, r3, #31
 801c8f6:	b087      	sub	sp, #28
 801c8f8:	bf18      	it	ne
 801c8fa:	3604      	addne	r6, #4
 801c8fc:	2500      	movs	r5, #0
 801c8fe:	1f37      	subs	r7, r6, #4
 801c900:	4682      	mov	sl, r0
 801c902:	4690      	mov	r8, r2
 801c904:	9301      	str	r3, [sp, #4]
 801c906:	f846 5c04 	str.w	r5, [r6, #-4]
 801c90a:	46b9      	mov	r9, r7
 801c90c:	463c      	mov	r4, r7
 801c90e:	9502      	str	r5, [sp, #8]
 801c910:	46ab      	mov	fp, r5
 801c912:	784a      	ldrb	r2, [r1, #1]
 801c914:	1c4b      	adds	r3, r1, #1
 801c916:	9303      	str	r3, [sp, #12]
 801c918:	b342      	cbz	r2, 801c96c <__hexnan+0x88>
 801c91a:	4610      	mov	r0, r2
 801c91c:	9105      	str	r1, [sp, #20]
 801c91e:	9204      	str	r2, [sp, #16]
 801c920:	f7ff fd76 	bl	801c410 <__hexdig_fun>
 801c924:	2800      	cmp	r0, #0
 801c926:	d14f      	bne.n	801c9c8 <__hexnan+0xe4>
 801c928:	9a04      	ldr	r2, [sp, #16]
 801c92a:	9905      	ldr	r1, [sp, #20]
 801c92c:	2a20      	cmp	r2, #32
 801c92e:	d818      	bhi.n	801c962 <__hexnan+0x7e>
 801c930:	9b02      	ldr	r3, [sp, #8]
 801c932:	459b      	cmp	fp, r3
 801c934:	dd13      	ble.n	801c95e <__hexnan+0x7a>
 801c936:	454c      	cmp	r4, r9
 801c938:	d206      	bcs.n	801c948 <__hexnan+0x64>
 801c93a:	2d07      	cmp	r5, #7
 801c93c:	dc04      	bgt.n	801c948 <__hexnan+0x64>
 801c93e:	462a      	mov	r2, r5
 801c940:	4649      	mov	r1, r9
 801c942:	4620      	mov	r0, r4
 801c944:	f7ff ffa8 	bl	801c898 <L_shift>
 801c948:	4544      	cmp	r4, r8
 801c94a:	d950      	bls.n	801c9ee <__hexnan+0x10a>
 801c94c:	2300      	movs	r3, #0
 801c94e:	f1a4 0904 	sub.w	r9, r4, #4
 801c952:	f844 3c04 	str.w	r3, [r4, #-4]
 801c956:	f8cd b008 	str.w	fp, [sp, #8]
 801c95a:	464c      	mov	r4, r9
 801c95c:	461d      	mov	r5, r3
 801c95e:	9903      	ldr	r1, [sp, #12]
 801c960:	e7d7      	b.n	801c912 <__hexnan+0x2e>
 801c962:	2a29      	cmp	r2, #41	; 0x29
 801c964:	d155      	bne.n	801ca12 <__hexnan+0x12e>
 801c966:	3102      	adds	r1, #2
 801c968:	f8ca 1000 	str.w	r1, [sl]
 801c96c:	f1bb 0f00 	cmp.w	fp, #0
 801c970:	d04f      	beq.n	801ca12 <__hexnan+0x12e>
 801c972:	454c      	cmp	r4, r9
 801c974:	d206      	bcs.n	801c984 <__hexnan+0xa0>
 801c976:	2d07      	cmp	r5, #7
 801c978:	dc04      	bgt.n	801c984 <__hexnan+0xa0>
 801c97a:	462a      	mov	r2, r5
 801c97c:	4649      	mov	r1, r9
 801c97e:	4620      	mov	r0, r4
 801c980:	f7ff ff8a 	bl	801c898 <L_shift>
 801c984:	4544      	cmp	r4, r8
 801c986:	d934      	bls.n	801c9f2 <__hexnan+0x10e>
 801c988:	f1a8 0204 	sub.w	r2, r8, #4
 801c98c:	4623      	mov	r3, r4
 801c98e:	f853 1b04 	ldr.w	r1, [r3], #4
 801c992:	f842 1f04 	str.w	r1, [r2, #4]!
 801c996:	429f      	cmp	r7, r3
 801c998:	d2f9      	bcs.n	801c98e <__hexnan+0xaa>
 801c99a:	1b3b      	subs	r3, r7, r4
 801c99c:	f023 0303 	bic.w	r3, r3, #3
 801c9a0:	3304      	adds	r3, #4
 801c9a2:	3e03      	subs	r6, #3
 801c9a4:	3401      	adds	r4, #1
 801c9a6:	42a6      	cmp	r6, r4
 801c9a8:	bf38      	it	cc
 801c9aa:	2304      	movcc	r3, #4
 801c9ac:	4443      	add	r3, r8
 801c9ae:	2200      	movs	r2, #0
 801c9b0:	f843 2b04 	str.w	r2, [r3], #4
 801c9b4:	429f      	cmp	r7, r3
 801c9b6:	d2fb      	bcs.n	801c9b0 <__hexnan+0xcc>
 801c9b8:	683b      	ldr	r3, [r7, #0]
 801c9ba:	b91b      	cbnz	r3, 801c9c4 <__hexnan+0xe0>
 801c9bc:	4547      	cmp	r7, r8
 801c9be:	d126      	bne.n	801ca0e <__hexnan+0x12a>
 801c9c0:	2301      	movs	r3, #1
 801c9c2:	603b      	str	r3, [r7, #0]
 801c9c4:	2005      	movs	r0, #5
 801c9c6:	e025      	b.n	801ca14 <__hexnan+0x130>
 801c9c8:	3501      	adds	r5, #1
 801c9ca:	2d08      	cmp	r5, #8
 801c9cc:	f10b 0b01 	add.w	fp, fp, #1
 801c9d0:	dd06      	ble.n	801c9e0 <__hexnan+0xfc>
 801c9d2:	4544      	cmp	r4, r8
 801c9d4:	d9c3      	bls.n	801c95e <__hexnan+0x7a>
 801c9d6:	2300      	movs	r3, #0
 801c9d8:	f844 3c04 	str.w	r3, [r4, #-4]
 801c9dc:	2501      	movs	r5, #1
 801c9de:	3c04      	subs	r4, #4
 801c9e0:	6822      	ldr	r2, [r4, #0]
 801c9e2:	f000 000f 	and.w	r0, r0, #15
 801c9e6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801c9ea:	6020      	str	r0, [r4, #0]
 801c9ec:	e7b7      	b.n	801c95e <__hexnan+0x7a>
 801c9ee:	2508      	movs	r5, #8
 801c9f0:	e7b5      	b.n	801c95e <__hexnan+0x7a>
 801c9f2:	9b01      	ldr	r3, [sp, #4]
 801c9f4:	2b00      	cmp	r3, #0
 801c9f6:	d0df      	beq.n	801c9b8 <__hexnan+0xd4>
 801c9f8:	f1c3 0320 	rsb	r3, r3, #32
 801c9fc:	f04f 32ff 	mov.w	r2, #4294967295
 801ca00:	40da      	lsrs	r2, r3
 801ca02:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801ca06:	4013      	ands	r3, r2
 801ca08:	f846 3c04 	str.w	r3, [r6, #-4]
 801ca0c:	e7d4      	b.n	801c9b8 <__hexnan+0xd4>
 801ca0e:	3f04      	subs	r7, #4
 801ca10:	e7d2      	b.n	801c9b8 <__hexnan+0xd4>
 801ca12:	2004      	movs	r0, #4
 801ca14:	b007      	add	sp, #28
 801ca16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ca1a <__ascii_mbtowc>:
 801ca1a:	b082      	sub	sp, #8
 801ca1c:	b901      	cbnz	r1, 801ca20 <__ascii_mbtowc+0x6>
 801ca1e:	a901      	add	r1, sp, #4
 801ca20:	b142      	cbz	r2, 801ca34 <__ascii_mbtowc+0x1a>
 801ca22:	b14b      	cbz	r3, 801ca38 <__ascii_mbtowc+0x1e>
 801ca24:	7813      	ldrb	r3, [r2, #0]
 801ca26:	600b      	str	r3, [r1, #0]
 801ca28:	7812      	ldrb	r2, [r2, #0]
 801ca2a:	1e10      	subs	r0, r2, #0
 801ca2c:	bf18      	it	ne
 801ca2e:	2001      	movne	r0, #1
 801ca30:	b002      	add	sp, #8
 801ca32:	4770      	bx	lr
 801ca34:	4610      	mov	r0, r2
 801ca36:	e7fb      	b.n	801ca30 <__ascii_mbtowc+0x16>
 801ca38:	f06f 0001 	mvn.w	r0, #1
 801ca3c:	e7f8      	b.n	801ca30 <__ascii_mbtowc+0x16>

0801ca3e <_realloc_r>:
 801ca3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca42:	4680      	mov	r8, r0
 801ca44:	4614      	mov	r4, r2
 801ca46:	460e      	mov	r6, r1
 801ca48:	b921      	cbnz	r1, 801ca54 <_realloc_r+0x16>
 801ca4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ca4e:	4611      	mov	r1, r2
 801ca50:	f7fb b880 	b.w	8017b54 <_malloc_r>
 801ca54:	b92a      	cbnz	r2, 801ca62 <_realloc_r+0x24>
 801ca56:	f7fd f945 	bl	8019ce4 <_free_r>
 801ca5a:	4625      	mov	r5, r4
 801ca5c:	4628      	mov	r0, r5
 801ca5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ca62:	f000 f8b6 	bl	801cbd2 <_malloc_usable_size_r>
 801ca66:	4284      	cmp	r4, r0
 801ca68:	4607      	mov	r7, r0
 801ca6a:	d802      	bhi.n	801ca72 <_realloc_r+0x34>
 801ca6c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801ca70:	d812      	bhi.n	801ca98 <_realloc_r+0x5a>
 801ca72:	4621      	mov	r1, r4
 801ca74:	4640      	mov	r0, r8
 801ca76:	f7fb f86d 	bl	8017b54 <_malloc_r>
 801ca7a:	4605      	mov	r5, r0
 801ca7c:	2800      	cmp	r0, #0
 801ca7e:	d0ed      	beq.n	801ca5c <_realloc_r+0x1e>
 801ca80:	42bc      	cmp	r4, r7
 801ca82:	4622      	mov	r2, r4
 801ca84:	4631      	mov	r1, r6
 801ca86:	bf28      	it	cs
 801ca88:	463a      	movcs	r2, r7
 801ca8a:	f7fc fa9d 	bl	8018fc8 <memcpy>
 801ca8e:	4631      	mov	r1, r6
 801ca90:	4640      	mov	r0, r8
 801ca92:	f7fd f927 	bl	8019ce4 <_free_r>
 801ca96:	e7e1      	b.n	801ca5c <_realloc_r+0x1e>
 801ca98:	4635      	mov	r5, r6
 801ca9a:	e7df      	b.n	801ca5c <_realloc_r+0x1e>

0801ca9c <_strtoul_l.constprop.0>:
 801ca9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801caa0:	4f36      	ldr	r7, [pc, #216]	; (801cb7c <_strtoul_l.constprop.0+0xe0>)
 801caa2:	4686      	mov	lr, r0
 801caa4:	460d      	mov	r5, r1
 801caa6:	4628      	mov	r0, r5
 801caa8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801caac:	5d3e      	ldrb	r6, [r7, r4]
 801caae:	f016 0608 	ands.w	r6, r6, #8
 801cab2:	d1f8      	bne.n	801caa6 <_strtoul_l.constprop.0+0xa>
 801cab4:	2c2d      	cmp	r4, #45	; 0x2d
 801cab6:	d130      	bne.n	801cb1a <_strtoul_l.constprop.0+0x7e>
 801cab8:	782c      	ldrb	r4, [r5, #0]
 801caba:	2601      	movs	r6, #1
 801cabc:	1c85      	adds	r5, r0, #2
 801cabe:	2b00      	cmp	r3, #0
 801cac0:	d057      	beq.n	801cb72 <_strtoul_l.constprop.0+0xd6>
 801cac2:	2b10      	cmp	r3, #16
 801cac4:	d109      	bne.n	801cada <_strtoul_l.constprop.0+0x3e>
 801cac6:	2c30      	cmp	r4, #48	; 0x30
 801cac8:	d107      	bne.n	801cada <_strtoul_l.constprop.0+0x3e>
 801caca:	7828      	ldrb	r0, [r5, #0]
 801cacc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801cad0:	2858      	cmp	r0, #88	; 0x58
 801cad2:	d149      	bne.n	801cb68 <_strtoul_l.constprop.0+0xcc>
 801cad4:	786c      	ldrb	r4, [r5, #1]
 801cad6:	2310      	movs	r3, #16
 801cad8:	3502      	adds	r5, #2
 801cada:	f04f 38ff 	mov.w	r8, #4294967295
 801cade:	2700      	movs	r7, #0
 801cae0:	fbb8 f8f3 	udiv	r8, r8, r3
 801cae4:	fb03 f908 	mul.w	r9, r3, r8
 801cae8:	ea6f 0909 	mvn.w	r9, r9
 801caec:	4638      	mov	r0, r7
 801caee:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801caf2:	f1bc 0f09 	cmp.w	ip, #9
 801caf6:	d815      	bhi.n	801cb24 <_strtoul_l.constprop.0+0x88>
 801caf8:	4664      	mov	r4, ip
 801cafa:	42a3      	cmp	r3, r4
 801cafc:	dd23      	ble.n	801cb46 <_strtoul_l.constprop.0+0xaa>
 801cafe:	f1b7 3fff 	cmp.w	r7, #4294967295
 801cb02:	d007      	beq.n	801cb14 <_strtoul_l.constprop.0+0x78>
 801cb04:	4580      	cmp	r8, r0
 801cb06:	d31b      	bcc.n	801cb40 <_strtoul_l.constprop.0+0xa4>
 801cb08:	d101      	bne.n	801cb0e <_strtoul_l.constprop.0+0x72>
 801cb0a:	45a1      	cmp	r9, r4
 801cb0c:	db18      	blt.n	801cb40 <_strtoul_l.constprop.0+0xa4>
 801cb0e:	fb00 4003 	mla	r0, r0, r3, r4
 801cb12:	2701      	movs	r7, #1
 801cb14:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cb18:	e7e9      	b.n	801caee <_strtoul_l.constprop.0+0x52>
 801cb1a:	2c2b      	cmp	r4, #43	; 0x2b
 801cb1c:	bf04      	itt	eq
 801cb1e:	782c      	ldrbeq	r4, [r5, #0]
 801cb20:	1c85      	addeq	r5, r0, #2
 801cb22:	e7cc      	b.n	801cabe <_strtoul_l.constprop.0+0x22>
 801cb24:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801cb28:	f1bc 0f19 	cmp.w	ip, #25
 801cb2c:	d801      	bhi.n	801cb32 <_strtoul_l.constprop.0+0x96>
 801cb2e:	3c37      	subs	r4, #55	; 0x37
 801cb30:	e7e3      	b.n	801cafa <_strtoul_l.constprop.0+0x5e>
 801cb32:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801cb36:	f1bc 0f19 	cmp.w	ip, #25
 801cb3a:	d804      	bhi.n	801cb46 <_strtoul_l.constprop.0+0xaa>
 801cb3c:	3c57      	subs	r4, #87	; 0x57
 801cb3e:	e7dc      	b.n	801cafa <_strtoul_l.constprop.0+0x5e>
 801cb40:	f04f 37ff 	mov.w	r7, #4294967295
 801cb44:	e7e6      	b.n	801cb14 <_strtoul_l.constprop.0+0x78>
 801cb46:	1c7b      	adds	r3, r7, #1
 801cb48:	d106      	bne.n	801cb58 <_strtoul_l.constprop.0+0xbc>
 801cb4a:	2322      	movs	r3, #34	; 0x22
 801cb4c:	f8ce 3000 	str.w	r3, [lr]
 801cb50:	4638      	mov	r0, r7
 801cb52:	b932      	cbnz	r2, 801cb62 <_strtoul_l.constprop.0+0xc6>
 801cb54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cb58:	b106      	cbz	r6, 801cb5c <_strtoul_l.constprop.0+0xc0>
 801cb5a:	4240      	negs	r0, r0
 801cb5c:	2a00      	cmp	r2, #0
 801cb5e:	d0f9      	beq.n	801cb54 <_strtoul_l.constprop.0+0xb8>
 801cb60:	b107      	cbz	r7, 801cb64 <_strtoul_l.constprop.0+0xc8>
 801cb62:	1e69      	subs	r1, r5, #1
 801cb64:	6011      	str	r1, [r2, #0]
 801cb66:	e7f5      	b.n	801cb54 <_strtoul_l.constprop.0+0xb8>
 801cb68:	2430      	movs	r4, #48	; 0x30
 801cb6a:	2b00      	cmp	r3, #0
 801cb6c:	d1b5      	bne.n	801cada <_strtoul_l.constprop.0+0x3e>
 801cb6e:	2308      	movs	r3, #8
 801cb70:	e7b3      	b.n	801cada <_strtoul_l.constprop.0+0x3e>
 801cb72:	2c30      	cmp	r4, #48	; 0x30
 801cb74:	d0a9      	beq.n	801caca <_strtoul_l.constprop.0+0x2e>
 801cb76:	230a      	movs	r3, #10
 801cb78:	e7af      	b.n	801cada <_strtoul_l.constprop.0+0x3e>
 801cb7a:	bf00      	nop
 801cb7c:	0801dce1 	.word	0x0801dce1

0801cb80 <_strtoul_r>:
 801cb80:	f7ff bf8c 	b.w	801ca9c <_strtoul_l.constprop.0>

0801cb84 <__ascii_wctomb>:
 801cb84:	b149      	cbz	r1, 801cb9a <__ascii_wctomb+0x16>
 801cb86:	2aff      	cmp	r2, #255	; 0xff
 801cb88:	bf85      	ittet	hi
 801cb8a:	238a      	movhi	r3, #138	; 0x8a
 801cb8c:	6003      	strhi	r3, [r0, #0]
 801cb8e:	700a      	strbls	r2, [r1, #0]
 801cb90:	f04f 30ff 	movhi.w	r0, #4294967295
 801cb94:	bf98      	it	ls
 801cb96:	2001      	movls	r0, #1
 801cb98:	4770      	bx	lr
 801cb9a:	4608      	mov	r0, r1
 801cb9c:	4770      	bx	lr
	...

0801cba0 <fiprintf>:
 801cba0:	b40e      	push	{r1, r2, r3}
 801cba2:	b503      	push	{r0, r1, lr}
 801cba4:	4601      	mov	r1, r0
 801cba6:	ab03      	add	r3, sp, #12
 801cba8:	4805      	ldr	r0, [pc, #20]	; (801cbc0 <fiprintf+0x20>)
 801cbaa:	f853 2b04 	ldr.w	r2, [r3], #4
 801cbae:	6800      	ldr	r0, [r0, #0]
 801cbb0:	9301      	str	r3, [sp, #4]
 801cbb2:	f7fe ff7b 	bl	801baac <_vfiprintf_r>
 801cbb6:	b002      	add	sp, #8
 801cbb8:	f85d eb04 	ldr.w	lr, [sp], #4
 801cbbc:	b003      	add	sp, #12
 801cbbe:	4770      	bx	lr
 801cbc0:	20000198 	.word	0x20000198

0801cbc4 <abort>:
 801cbc4:	b508      	push	{r3, lr}
 801cbc6:	2006      	movs	r0, #6
 801cbc8:	f000 f834 	bl	801cc34 <raise>
 801cbcc:	2001      	movs	r0, #1
 801cbce:	f7e6 fa7f 	bl	80030d0 <_exit>

0801cbd2 <_malloc_usable_size_r>:
 801cbd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cbd6:	1f18      	subs	r0, r3, #4
 801cbd8:	2b00      	cmp	r3, #0
 801cbda:	bfbc      	itt	lt
 801cbdc:	580b      	ldrlt	r3, [r1, r0]
 801cbde:	18c0      	addlt	r0, r0, r3
 801cbe0:	4770      	bx	lr

0801cbe2 <_raise_r>:
 801cbe2:	291f      	cmp	r1, #31
 801cbe4:	b538      	push	{r3, r4, r5, lr}
 801cbe6:	4604      	mov	r4, r0
 801cbe8:	460d      	mov	r5, r1
 801cbea:	d904      	bls.n	801cbf6 <_raise_r+0x14>
 801cbec:	2316      	movs	r3, #22
 801cbee:	6003      	str	r3, [r0, #0]
 801cbf0:	f04f 30ff 	mov.w	r0, #4294967295
 801cbf4:	bd38      	pop	{r3, r4, r5, pc}
 801cbf6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801cbf8:	b112      	cbz	r2, 801cc00 <_raise_r+0x1e>
 801cbfa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801cbfe:	b94b      	cbnz	r3, 801cc14 <_raise_r+0x32>
 801cc00:	4620      	mov	r0, r4
 801cc02:	f000 f831 	bl	801cc68 <_getpid_r>
 801cc06:	462a      	mov	r2, r5
 801cc08:	4601      	mov	r1, r0
 801cc0a:	4620      	mov	r0, r4
 801cc0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cc10:	f000 b818 	b.w	801cc44 <_kill_r>
 801cc14:	2b01      	cmp	r3, #1
 801cc16:	d00a      	beq.n	801cc2e <_raise_r+0x4c>
 801cc18:	1c59      	adds	r1, r3, #1
 801cc1a:	d103      	bne.n	801cc24 <_raise_r+0x42>
 801cc1c:	2316      	movs	r3, #22
 801cc1e:	6003      	str	r3, [r0, #0]
 801cc20:	2001      	movs	r0, #1
 801cc22:	e7e7      	b.n	801cbf4 <_raise_r+0x12>
 801cc24:	2400      	movs	r4, #0
 801cc26:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801cc2a:	4628      	mov	r0, r5
 801cc2c:	4798      	blx	r3
 801cc2e:	2000      	movs	r0, #0
 801cc30:	e7e0      	b.n	801cbf4 <_raise_r+0x12>
	...

0801cc34 <raise>:
 801cc34:	4b02      	ldr	r3, [pc, #8]	; (801cc40 <raise+0xc>)
 801cc36:	4601      	mov	r1, r0
 801cc38:	6818      	ldr	r0, [r3, #0]
 801cc3a:	f7ff bfd2 	b.w	801cbe2 <_raise_r>
 801cc3e:	bf00      	nop
 801cc40:	20000198 	.word	0x20000198

0801cc44 <_kill_r>:
 801cc44:	b538      	push	{r3, r4, r5, lr}
 801cc46:	4d07      	ldr	r5, [pc, #28]	; (801cc64 <_kill_r+0x20>)
 801cc48:	2300      	movs	r3, #0
 801cc4a:	4604      	mov	r4, r0
 801cc4c:	4608      	mov	r0, r1
 801cc4e:	4611      	mov	r1, r2
 801cc50:	602b      	str	r3, [r5, #0]
 801cc52:	f7e6 fa2d 	bl	80030b0 <_kill>
 801cc56:	1c43      	adds	r3, r0, #1
 801cc58:	d102      	bne.n	801cc60 <_kill_r+0x1c>
 801cc5a:	682b      	ldr	r3, [r5, #0]
 801cc5c:	b103      	cbz	r3, 801cc60 <_kill_r+0x1c>
 801cc5e:	6023      	str	r3, [r4, #0]
 801cc60:	bd38      	pop	{r3, r4, r5, pc}
 801cc62:	bf00      	nop
 801cc64:	20008484 	.word	0x20008484

0801cc68 <_getpid_r>:
 801cc68:	f7e6 ba1a 	b.w	80030a0 <_getpid>

0801cc6c <_init>:
 801cc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc6e:	bf00      	nop
 801cc70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cc72:	bc08      	pop	{r3}
 801cc74:	469e      	mov	lr, r3
 801cc76:	4770      	bx	lr

0801cc78 <_fini>:
 801cc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc7a:	bf00      	nop
 801cc7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cc7e:	bc08      	pop	{r3}
 801cc80:	469e      	mov	lr, r3
 801cc82:	4770      	bx	lr
