
DataModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000113d4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d64  080115a8  080115a8  000215a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801230c  0801230c  00030210  2**0
                  CONTENTS
  4 .ARM          00000008  0801230c  0801230c  0002230c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012314  08012314  00030210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012314  08012314  00022314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012318  08012318  00022318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0801231c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009dfc  20000210  0801252c  00030210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a00c  0801252c  0003a00c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025588  00000000  00000000  00030283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000613c  00000000  00000000  0005580b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002000  00000000  00000000  0005b948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000018ce  00000000  00000000  0005d948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b756  00000000  00000000  0005f216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e43c  00000000  00000000  0008a96c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef48e  00000000  00000000  000b8da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009538  00000000  00000000  001a8238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  001b1770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801158c 	.word	0x0801158c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	0801158c 	.word	0x0801158c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b970 	b.w	8000f00 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9e08      	ldr	r6, [sp, #32]
 8000c3e:	460d      	mov	r5, r1
 8000c40:	4604      	mov	r4, r0
 8000c42:	460f      	mov	r7, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14a      	bne.n	8000cde <__udivmoddi4+0xa6>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4694      	mov	ip, r2
 8000c4c:	d965      	bls.n	8000d1a <__udivmoddi4+0xe2>
 8000c4e:	fab2 f382 	clz	r3, r2
 8000c52:	b143      	cbz	r3, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c58:	f1c3 0220 	rsb	r2, r3, #32
 8000c5c:	409f      	lsls	r7, r3
 8000c5e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c62:	4317      	orrs	r7, r2
 8000c64:	409c      	lsls	r4, r3
 8000c66:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c6a:	fa1f f58c 	uxth.w	r5, ip
 8000c6e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c72:	0c22      	lsrs	r2, r4, #16
 8000c74:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c78:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c7c:	fb01 f005 	mul.w	r0, r1, r5
 8000c80:	4290      	cmp	r0, r2
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x62>
 8000c84:	eb1c 0202 	adds.w	r2, ip, r2
 8000c88:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c8c:	f080 811c 	bcs.w	8000ec8 <__udivmoddi4+0x290>
 8000c90:	4290      	cmp	r0, r2
 8000c92:	f240 8119 	bls.w	8000ec8 <__udivmoddi4+0x290>
 8000c96:	3902      	subs	r1, #2
 8000c98:	4462      	add	r2, ip
 8000c9a:	1a12      	subs	r2, r2, r0
 8000c9c:	b2a4      	uxth	r4, r4
 8000c9e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ca2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ca6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000caa:	fb00 f505 	mul.w	r5, r0, r5
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	d90a      	bls.n	8000cc8 <__udivmoddi4+0x90>
 8000cb2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cba:	f080 8107 	bcs.w	8000ecc <__udivmoddi4+0x294>
 8000cbe:	42a5      	cmp	r5, r4
 8000cc0:	f240 8104 	bls.w	8000ecc <__udivmoddi4+0x294>
 8000cc4:	4464      	add	r4, ip
 8000cc6:	3802      	subs	r0, #2
 8000cc8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ccc:	1b64      	subs	r4, r4, r5
 8000cce:	2100      	movs	r1, #0
 8000cd0:	b11e      	cbz	r6, 8000cda <__udivmoddi4+0xa2>
 8000cd2:	40dc      	lsrs	r4, r3
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0xbc>
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	f000 80ed 	beq.w	8000ec2 <__udivmoddi4+0x28a>
 8000ce8:	2100      	movs	r1, #0
 8000cea:	e9c6 0500 	strd	r0, r5, [r6]
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf4:	fab3 f183 	clz	r1, r3
 8000cf8:	2900      	cmp	r1, #0
 8000cfa:	d149      	bne.n	8000d90 <__udivmoddi4+0x158>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	d302      	bcc.n	8000d06 <__udivmoddi4+0xce>
 8000d00:	4282      	cmp	r2, r0
 8000d02:	f200 80f8 	bhi.w	8000ef6 <__udivmoddi4+0x2be>
 8000d06:	1a84      	subs	r4, r0, r2
 8000d08:	eb65 0203 	sbc.w	r2, r5, r3
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	4617      	mov	r7, r2
 8000d10:	2e00      	cmp	r6, #0
 8000d12:	d0e2      	beq.n	8000cda <__udivmoddi4+0xa2>
 8000d14:	e9c6 4700 	strd	r4, r7, [r6]
 8000d18:	e7df      	b.n	8000cda <__udivmoddi4+0xa2>
 8000d1a:	b902      	cbnz	r2, 8000d1e <__udivmoddi4+0xe6>
 8000d1c:	deff      	udf	#255	; 0xff
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f040 8090 	bne.w	8000e48 <__udivmoddi4+0x210>
 8000d28:	1a8a      	subs	r2, r1, r2
 8000d2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2e:	fa1f fe8c 	uxth.w	lr, ip
 8000d32:	2101      	movs	r1, #1
 8000d34:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d38:	fb07 2015 	mls	r0, r7, r5, r2
 8000d3c:	0c22      	lsrs	r2, r4, #16
 8000d3e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d42:	fb0e f005 	mul.w	r0, lr, r5
 8000d46:	4290      	cmp	r0, r2
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x124>
 8000d4a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d4e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x122>
 8000d54:	4290      	cmp	r0, r2
 8000d56:	f200 80cb 	bhi.w	8000ef0 <__udivmoddi4+0x2b8>
 8000d5a:	4645      	mov	r5, r8
 8000d5c:	1a12      	subs	r2, r2, r0
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d64:	fb07 2210 	mls	r2, r7, r0, r2
 8000d68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d6c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d70:	45a6      	cmp	lr, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x14e>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7c:	d202      	bcs.n	8000d84 <__udivmoddi4+0x14c>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f200 80bb 	bhi.w	8000efa <__udivmoddi4+0x2c2>
 8000d84:	4610      	mov	r0, r2
 8000d86:	eba4 040e 	sub.w	r4, r4, lr
 8000d8a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d8e:	e79f      	b.n	8000cd0 <__udivmoddi4+0x98>
 8000d90:	f1c1 0720 	rsb	r7, r1, #32
 8000d94:	408b      	lsls	r3, r1
 8000d96:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d9a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d9e:	fa05 f401 	lsl.w	r4, r5, r1
 8000da2:	fa20 f307 	lsr.w	r3, r0, r7
 8000da6:	40fd      	lsrs	r5, r7
 8000da8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dac:	4323      	orrs	r3, r4
 8000dae:	fbb5 f8f9 	udiv	r8, r5, r9
 8000db2:	fa1f fe8c 	uxth.w	lr, ip
 8000db6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dba:	0c1c      	lsrs	r4, r3, #16
 8000dbc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dc0:	fb08 f50e 	mul.w	r5, r8, lr
 8000dc4:	42a5      	cmp	r5, r4
 8000dc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dca:	fa00 f001 	lsl.w	r0, r0, r1
 8000dce:	d90b      	bls.n	8000de8 <__udivmoddi4+0x1b0>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd8:	f080 8088 	bcs.w	8000eec <__udivmoddi4+0x2b4>
 8000ddc:	42a5      	cmp	r5, r4
 8000dde:	f240 8085 	bls.w	8000eec <__udivmoddi4+0x2b4>
 8000de2:	f1a8 0802 	sub.w	r8, r8, #2
 8000de6:	4464      	add	r4, ip
 8000de8:	1b64      	subs	r4, r4, r5
 8000dea:	b29d      	uxth	r5, r3
 8000dec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000df0:	fb09 4413 	mls	r4, r9, r3, r4
 8000df4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000df8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x1da>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e08:	d26c      	bcs.n	8000ee4 <__udivmoddi4+0x2ac>
 8000e0a:	45a6      	cmp	lr, r4
 8000e0c:	d96a      	bls.n	8000ee4 <__udivmoddi4+0x2ac>
 8000e0e:	3b02      	subs	r3, #2
 8000e10:	4464      	add	r4, ip
 8000e12:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e16:	fba3 9502 	umull	r9, r5, r3, r2
 8000e1a:	eba4 040e 	sub.w	r4, r4, lr
 8000e1e:	42ac      	cmp	r4, r5
 8000e20:	46c8      	mov	r8, r9
 8000e22:	46ae      	mov	lr, r5
 8000e24:	d356      	bcc.n	8000ed4 <__udivmoddi4+0x29c>
 8000e26:	d053      	beq.n	8000ed0 <__udivmoddi4+0x298>
 8000e28:	b156      	cbz	r6, 8000e40 <__udivmoddi4+0x208>
 8000e2a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e2e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e32:	fa04 f707 	lsl.w	r7, r4, r7
 8000e36:	40ca      	lsrs	r2, r1
 8000e38:	40cc      	lsrs	r4, r1
 8000e3a:	4317      	orrs	r7, r2
 8000e3c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e40:	4618      	mov	r0, r3
 8000e42:	2100      	movs	r1, #0
 8000e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e48:	f1c3 0120 	rsb	r1, r3, #32
 8000e4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e50:	fa20 f201 	lsr.w	r2, r0, r1
 8000e54:	fa25 f101 	lsr.w	r1, r5, r1
 8000e58:	409d      	lsls	r5, r3
 8000e5a:	432a      	orrs	r2, r5
 8000e5c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e60:	fa1f fe8c 	uxth.w	lr, ip
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1510 	mls	r5, r7, r0, r1
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e72:	fb00 f50e 	mul.w	r5, r0, lr
 8000e76:	428d      	cmp	r5, r1
 8000e78:	fa04 f403 	lsl.w	r4, r4, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x258>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e86:	d22f      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000e88:	428d      	cmp	r5, r1
 8000e8a:	d92d      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	4461      	add	r1, ip
 8000e90:	1b49      	subs	r1, r1, r5
 8000e92:	b292      	uxth	r2, r2
 8000e94:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e98:	fb07 1115 	mls	r1, r7, r5, r1
 8000e9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ea4:	4291      	cmp	r1, r2
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x282>
 8000ea8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eac:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eb0:	d216      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000eb2:	4291      	cmp	r1, r2
 8000eb4:	d914      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000eb6:	3d02      	subs	r5, #2
 8000eb8:	4462      	add	r2, ip
 8000eba:	1a52      	subs	r2, r2, r1
 8000ebc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ec0:	e738      	b.n	8000d34 <__udivmoddi4+0xfc>
 8000ec2:	4631      	mov	r1, r6
 8000ec4:	4630      	mov	r0, r6
 8000ec6:	e708      	b.n	8000cda <__udivmoddi4+0xa2>
 8000ec8:	4639      	mov	r1, r7
 8000eca:	e6e6      	b.n	8000c9a <__udivmoddi4+0x62>
 8000ecc:	4610      	mov	r0, r2
 8000ece:	e6fb      	b.n	8000cc8 <__udivmoddi4+0x90>
 8000ed0:	4548      	cmp	r0, r9
 8000ed2:	d2a9      	bcs.n	8000e28 <__udivmoddi4+0x1f0>
 8000ed4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000edc:	3b01      	subs	r3, #1
 8000ede:	e7a3      	b.n	8000e28 <__udivmoddi4+0x1f0>
 8000ee0:	4645      	mov	r5, r8
 8000ee2:	e7ea      	b.n	8000eba <__udivmoddi4+0x282>
 8000ee4:	462b      	mov	r3, r5
 8000ee6:	e794      	b.n	8000e12 <__udivmoddi4+0x1da>
 8000ee8:	4640      	mov	r0, r8
 8000eea:	e7d1      	b.n	8000e90 <__udivmoddi4+0x258>
 8000eec:	46d0      	mov	r8, sl
 8000eee:	e77b      	b.n	8000de8 <__udivmoddi4+0x1b0>
 8000ef0:	3d02      	subs	r5, #2
 8000ef2:	4462      	add	r2, ip
 8000ef4:	e732      	b.n	8000d5c <__udivmoddi4+0x124>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e70a      	b.n	8000d10 <__udivmoddi4+0xd8>
 8000efa:	4464      	add	r4, ip
 8000efc:	3802      	subs	r0, #2
 8000efe:	e742      	b.n	8000d86 <__udivmoddi4+0x14e>

08000f00 <__aeabi_idiv0>:
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <setPath>:
DWORD fre_clust;
uint32_t total, free_space;

void setPath(char *dir, char *frontSensor, char *rearSensor,
		char *frontPressureSensor, char *rearPressureSensor, uint8_t path)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
 8000f10:	603b      	str	r3, [r7, #0]
	sprintf(dir, "Data%d", path);
 8000f12:	7f3b      	ldrb	r3, [r7, #28]
 8000f14:	461a      	mov	r2, r3
 8000f16:	4910      	ldr	r1, [pc, #64]	; (8000f58 <setPath+0x54>)
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f00e f973 	bl	800f204 <siprintf>
	sprintf(frontSensor, "Data%d/FRONT%d.txt", path, path);
 8000f1e:	7f3a      	ldrb	r2, [r7, #28]
 8000f20:	7f3b      	ldrb	r3, [r7, #28]
 8000f22:	490e      	ldr	r1, [pc, #56]	; (8000f5c <setPath+0x58>)
 8000f24:	68b8      	ldr	r0, [r7, #8]
 8000f26:	f00e f96d 	bl	800f204 <siprintf>
	sprintf(rearSensor, "Data%d/Rear%d.txt", path, path);
 8000f2a:	7f3a      	ldrb	r2, [r7, #28]
 8000f2c:	7f3b      	ldrb	r3, [r7, #28]
 8000f2e:	490c      	ldr	r1, [pc, #48]	; (8000f60 <setPath+0x5c>)
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f00e f967 	bl	800f204 <siprintf>
	sprintf(frontPressureSensor, "Data%d/F_PSI%d.txt", path, path);
 8000f36:	7f3a      	ldrb	r2, [r7, #28]
 8000f38:	7f3b      	ldrb	r3, [r7, #28]
 8000f3a:	490a      	ldr	r1, [pc, #40]	; (8000f64 <setPath+0x60>)
 8000f3c:	6838      	ldr	r0, [r7, #0]
 8000f3e:	f00e f961 	bl	800f204 <siprintf>
	sprintf(rearPressureSensor, "Data%d/R_PSI%d.txt", path, path);
 8000f42:	7f3a      	ldrb	r2, [r7, #28]
 8000f44:	7f3b      	ldrb	r3, [r7, #28]
 8000f46:	4908      	ldr	r1, [pc, #32]	; (8000f68 <setPath+0x64>)
 8000f48:	69b8      	ldr	r0, [r7, #24]
 8000f4a:	f00e f95b 	bl	800f204 <siprintf>
}
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	080115a8 	.word	0x080115a8
 8000f5c:	080115b0 	.word	0x080115b0
 8000f60:	080115c4 	.word	0x080115c4
 8000f64:	080115d8 	.word	0x080115d8
 8000f68:	080115ec 	.word	0x080115ec

08000f6c <createNewFile>:
void createNewFile(char *dir, char *frontSensor, char *rearSensor,
		char *frontPressureSensor, char *rearPressureSensor, uint8_t *pathPtr)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
 8000f78:	603b      	str	r3, [r7, #0]
	uint8_t path = *pathPtr;
 8000f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	75fb      	strb	r3, [r7, #23]
	Mount_SD("/");
 8000f80:	4811      	ldr	r0, [pc, #68]	; (8000fc8 <createNewFile+0x5c>)
 8000f82:	f000 f839 	bl	8000ff8 <Mount_SD>
	Format_SD(path);
 8000f86:	7dfb      	ldrb	r3, [r7, #23]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f000 f87b 	bl	8001084 <Format_SD>
	Create_Dir(dir);
 8000f8e:	68f8      	ldr	r0, [r7, #12]
 8000f90:	f000 fa6a 	bl	8001468 <Create_Dir>
	Create_File(frontSensor);
 8000f94:	68b8      	ldr	r0, [r7, #8]
 8000f96:	f000 f911 	bl	80011bc <Create_File>
	Create_File(rearSensor);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f000 f90e 	bl	80011bc <Create_File>
	Create_File(frontPressureSensor);
 8000fa0:	6838      	ldr	r0, [r7, #0]
 8000fa2:	f000 f90b 	bl	80011bc <Create_File>
	Create_File(rearPressureSensor);
 8000fa6:	6a38      	ldr	r0, [r7, #32]
 8000fa8:	f000 f908 	bl	80011bc <Create_File>
	Unmount_SD("/");
 8000fac:	4806      	ldr	r0, [pc, #24]	; (8000fc8 <createNewFile+0x5c>)
 8000fae:	f000 f847 	bl	8001040 <Unmount_SD>
	(*pathPtr)++;
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbc:	701a      	strb	r2, [r3, #0]
}
 8000fbe:	bf00      	nop
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	08011600 	.word	0x08011600

08000fcc <Send_Uart>:

void Send_Uart(char *string)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t*) string, strlen(string), HAL_MAX_DELAY);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff f97b 	bl	80002d0 <strlen>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <Send_Uart+0x28>)
 8000fe6:	f007 fcd2 	bl	800898e <HAL_UART_Transmit>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200060a8 	.word	0x200060a8

08000ff8 <Mount_SD>:

void Mount_SD(const TCHAR *path)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8001000:	2201      	movs	r2, #1
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	480a      	ldr	r0, [pc, #40]	; (8001030 <Mount_SD+0x38>)
 8001006:	f009 ff09 	bl	800ae1c <f_mount>
 800100a:	4603      	mov	r3, r0
 800100c:	461a      	mov	r2, r3
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <Mount_SD+0x3c>)
 8001010:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <Mount_SD+0x3c>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <Mount_SD+0x2a>
		Send_Uart("ERROR!!! in mounting SD CARD...\n\n");
 800101a:	4807      	ldr	r0, [pc, #28]	; (8001038 <Mount_SD+0x40>)
 800101c:	f7ff ffd6 	bl	8000fcc <Send_Uart>
	else
		Send_Uart("SD CARD mounted successfully...\n");
}
 8001020:	e002      	b.n	8001028 <Mount_SD+0x30>
		Send_Uart("SD CARD mounted successfully...\n");
 8001022:	4806      	ldr	r0, [pc, #24]	; (800103c <Mount_SD+0x44>)
 8001024:	f7ff ffd2 	bl	8000fcc <Send_Uart>
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	2000022c 	.word	0x2000022c
 8001034:	200006a8 	.word	0x200006a8
 8001038:	08011604 	.word	0x08011604
 800103c:	08011628 	.word	0x08011628

08001040 <Unmount_SD>:

void Unmount_SD(const TCHAR *path)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8001048:	2201      	movs	r2, #1
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	2000      	movs	r0, #0
 800104e:	f009 fee5 	bl	800ae1c <f_mount>
 8001052:	4603      	mov	r3, r0
 8001054:	461a      	mov	r2, r3
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <Unmount_SD+0x38>)
 8001058:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 800105a:	4b07      	ldr	r3, [pc, #28]	; (8001078 <Unmount_SD+0x38>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d103      	bne.n	800106a <Unmount_SD+0x2a>
		Send_Uart("SD CARD UNMOUNTED successfully...\n\n\n");
 8001062:	4806      	ldr	r0, [pc, #24]	; (800107c <Unmount_SD+0x3c>)
 8001064:	f7ff ffb2 	bl	8000fcc <Send_Uart>
	else
		Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 8001068:	e002      	b.n	8001070 <Unmount_SD+0x30>
		Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
 800106a:	4805      	ldr	r0, [pc, #20]	; (8001080 <Unmount_SD+0x40>)
 800106c:	f7ff ffae 	bl	8000fcc <Send_Uart>
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200006a8 	.word	0x200006a8
 800107c:	0801164c 	.word	0x0801164c
 8001080:	08011674 	.word	0x08011674

08001084 <Format_SD>:
	return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD(uint8_t dirNumber)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b096      	sub	sp, #88	; 0x58
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
	DIR dir;
	FILINFO fno;
	char *path = pvPortMalloc(20 * sizeof(char));
 800108e:	2014      	movs	r0, #20
 8001090:	f00d f94a 	bl	800e328 <pvPortMalloc>
 8001094:	6578      	str	r0, [r7, #84]	; 0x54
	sprintf(path, "/Data%d", dirNumber);
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	461a      	mov	r2, r3
 800109a:	4943      	ldr	r1, [pc, #268]	; (80011a8 <Format_SD+0x124>)
 800109c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800109e:	f00e f8b1 	bl	800f204 <siprintf>
	fresult = f_opendir(&dir, path);
 80010a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80010a8:	4618      	mov	r0, r3
 80010aa:	f00a fb3c 	bl	800b726 <f_opendir>
 80010ae:	4603      	mov	r3, r0
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b3e      	ldr	r3, [pc, #248]	; (80011ac <Format_SD+0x128>)
 80010b4:	701a      	strb	r2, [r3, #0]

	if (fresult == FR_OK)
 80010b6:	4b3d      	ldr	r3, [pc, #244]	; (80011ac <Format_SD+0x128>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d154      	bne.n	8001168 <Format_SD+0xe4>
	{
		while (1)
		{
			fresult = f_readdir(&dir, &fno); /* Read a directory item */
 80010be:	f107 020c 	add.w	r2, r7, #12
 80010c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c6:	4611      	mov	r1, r2
 80010c8:	4618      	mov	r0, r3
 80010ca:	f00a fbd0 	bl	800b86e <f_readdir>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b36      	ldr	r3, [pc, #216]	; (80011ac <Format_SD+0x128>)
 80010d4:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK || fno.fname[0] == 0)
 80010d6:	4b35      	ldr	r3, [pc, #212]	; (80011ac <Format_SD+0x128>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d13f      	bne.n	800115e <Format_SD+0xda>
 80010de:	7d7b      	ldrb	r3, [r7, #21]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d03c      	beq.n	800115e <Format_SD+0xda>
				break; /* Break on error or end of dir */
			if (!(strcmp(".", fno.fname)) || !(strcmp("..", fno.fname)))
 80010e4:	f107 030c 	add.w	r3, r7, #12
 80010e8:	3309      	adds	r3, #9
 80010ea:	4619      	mov	r1, r3
 80010ec:	4830      	ldr	r0, [pc, #192]	; (80011b0 <Format_SD+0x12c>)
 80010ee:	f7ff f88f 	bl	8000210 <strcmp>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d02f      	beq.n	8001158 <Format_SD+0xd4>
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	3309      	adds	r3, #9
 80010fe:	4619      	mov	r1, r3
 8001100:	482c      	ldr	r0, [pc, #176]	; (80011b4 <Format_SD+0x130>)
 8001102:	f7ff f885 	bl	8000210 <strcmp>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d025      	beq.n	8001158 <Format_SD+0xd4>
			{
				continue;
			}

			sprintf(path, "/Data%d/%s", dirNumber, fno.fname);
 800110c:	79fa      	ldrb	r2, [r7, #7]
 800110e:	f107 030c 	add.w	r3, r7, #12
 8001112:	3309      	adds	r3, #9
 8001114:	4928      	ldr	r1, [pc, #160]	; (80011b8 <Format_SD+0x134>)
 8001116:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001118:	f00e f874 	bl	800f204 <siprintf>
			if (fno.fattrib & AM_DIR) /* It is a directory */
 800111c:	7d3b      	ldrb	r3, [r7, #20]
 800111e:	f003 0310 	and.w	r3, r3, #16
 8001122:	2b00      	cmp	r3, #0
 8001124:	d00c      	beq.n	8001140 <Format_SD+0xbc>
			{

				fresult = Format_SD(dirNumber);
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ffab 	bl	8001084 <Format_SD>
 800112e:	4603      	mov	r3, r0
 8001130:	461a      	mov	r2, r3
 8001132:	4b1e      	ldr	r3, [pc, #120]	; (80011ac <Format_SD+0x128>)
 8001134:	701a      	strb	r2, [r3, #0]
				if (fresult != FR_OK)
 8001136:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <Format_SD+0x128>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0bf      	beq.n	80010be <Format_SD+0x3a>
					break;
 800113e:	e00e      	b.n	800115e <Format_SD+0xda>
			}
			else
			{
				fresult = f_unlink(path);
 8001140:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001142:	f00a fc17 	bl	800b974 <f_unlink>
 8001146:	4603      	mov	r3, r0
 8001148:	461a      	mov	r2, r3
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <Format_SD+0x128>)
 800114c:	701a      	strb	r2, [r3, #0]
				if (fresult != FR_OK)
 800114e:	4b17      	ldr	r3, [pc, #92]	; (80011ac <Format_SD+0x128>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d102      	bne.n	800115c <Format_SD+0xd8>
 8001156:	e7b2      	b.n	80010be <Format_SD+0x3a>
				continue;
 8001158:	bf00      	nop
			fresult = f_readdir(&dir, &fno); /* Read a directory item */
 800115a:	e7b0      	b.n	80010be <Format_SD+0x3a>
					break;
 800115c:	bf00      	nop
			}
		}
		f_closedir(&dir);
 800115e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001162:	4618      	mov	r0, r3
 8001164:	f00a fb58 	bl	800b818 <f_closedir>
	}

	if (fresult == FR_OK)
 8001168:	4b10      	ldr	r3, [pc, #64]	; (80011ac <Format_SD+0x128>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d111      	bne.n	8001194 <Format_SD+0x110>
	{
		memset(path, 0, 20);
 8001170:	2214      	movs	r2, #20
 8001172:	2100      	movs	r1, #0
 8001174:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001176:	f00e f93d 	bl	800f3f4 <memset>
		sprintf(path, "/Data%d", dirNumber);
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	461a      	mov	r2, r3
 800117e:	490a      	ldr	r1, [pc, #40]	; (80011a8 <Format_SD+0x124>)
 8001180:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001182:	f00e f83f 	bl	800f204 <siprintf>
		fresult = f_unlink(path);
 8001186:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001188:	f00a fbf4 	bl	800b974 <f_unlink>
 800118c:	4603      	mov	r3, r0
 800118e:	461a      	mov	r2, r3
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <Format_SD+0x128>)
 8001192:	701a      	strb	r2, [r3, #0]
	}

	vPortFree(path);
 8001194:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001196:	f00d f993 	bl	800e4c0 <vPortFree>
	return (fresult);
 800119a:	4b04      	ldr	r3, [pc, #16]	; (80011ac <Format_SD+0x128>)
 800119c:	781b      	ldrb	r3, [r3, #0]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3758      	adds	r7, #88	; 0x58
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	080116c8 	.word	0x080116c8
 80011ac:	200006a8 	.word	0x200006a8
 80011b0:	080116d0 	.word	0x080116d0
 80011b4:	080116d4 	.word	0x080116d4
 80011b8:	080116d8 	.word	0x080116d8

080011bc <Create_File>:
		return fresult;
	}
}

FRESULT Create_File(char *name)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	fresult = f_stat(name, &fno);
 80011c4:	4940      	ldr	r1, [pc, #256]	; (80012c8 <Create_File+0x10c>)
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f00a fb94 	bl	800b8f4 <f_stat>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	4b3e      	ldr	r3, [pc, #248]	; (80012cc <Create_File+0x110>)
 80011d2:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 80011d4:	4b3d      	ldr	r3, [pc, #244]	; (80012cc <Create_File+0x110>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d111      	bne.n	8001200 <Create_File+0x44>
	{
		char *buf = pvPortMalloc(100 * sizeof(char));
 80011dc:	2064      	movs	r0, #100	; 0x64
 80011de:	f00d f8a3 	bl	800e328 <pvPortMalloc>
 80011e2:	60f8      	str	r0, [r7, #12]
		sprintf(buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	493a      	ldr	r1, [pc, #232]	; (80012d0 <Create_File+0x114>)
 80011e8:	68f8      	ldr	r0, [r7, #12]
 80011ea:	f00e f80b 	bl	800f204 <siprintf>
				name);
		Send_Uart(buf);
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	f7ff feec 	bl	8000fcc <Send_Uart>
		vPortFree(buf);
 80011f4:	68f8      	ldr	r0, [r7, #12]
 80011f6:	f00d f963 	bl	800e4c0 <vPortFree>
		return fresult;
 80011fa:	4b34      	ldr	r3, [pc, #208]	; (80012cc <Create_File+0x110>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	e05f      	b.n	80012c0 <Create_File+0x104>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 8001200:	220b      	movs	r2, #11
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	4833      	ldr	r0, [pc, #204]	; (80012d4 <Create_File+0x118>)
 8001206:	f009 fe6d 	bl	800aee4 <f_open>
 800120a:	4603      	mov	r3, r0
 800120c:	461a      	mov	r2, r3
 800120e:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <Create_File+0x110>)
 8001210:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001212:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <Create_File+0x110>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d014      	beq.n	8001244 <Create_File+0x88>
		{
			char *buf = pvPortMalloc(100 * sizeof(char));
 800121a:	2064      	movs	r0, #100	; 0x64
 800121c:	f00d f884 	bl	800e328 <pvPortMalloc>
 8001220:	6138      	str	r0, [r7, #16]
			sprintf(buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult,
 8001222:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <Create_File+0x110>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	492b      	ldr	r1, [pc, #172]	; (80012d8 <Create_File+0x11c>)
 800122c:	6938      	ldr	r0, [r7, #16]
 800122e:	f00d ffe9 	bl	800f204 <siprintf>
					name);
			Send_Uart(buf);
 8001232:	6938      	ldr	r0, [r7, #16]
 8001234:	f7ff feca 	bl	8000fcc <Send_Uart>
			vPortFree(buf);
 8001238:	6938      	ldr	r0, [r7, #16]
 800123a:	f00d f941 	bl	800e4c0 <vPortFree>
			return fresult;
 800123e:	4b23      	ldr	r3, [pc, #140]	; (80012cc <Create_File+0x110>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	e03d      	b.n	80012c0 <Create_File+0x104>
		}
		else
		{
			char *buf = pvPortMalloc(100 * sizeof(char));
 8001244:	2064      	movs	r0, #100	; 0x64
 8001246:	f00d f86f 	bl	800e328 <pvPortMalloc>
 800124a:	61f8      	str	r0, [r7, #28]
			sprintf(buf,
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	4923      	ldr	r1, [pc, #140]	; (80012dc <Create_File+0x120>)
 8001250:	69f8      	ldr	r0, [r7, #28]
 8001252:	f00d ffd7 	bl	800f204 <siprintf>
					"*%s* created successfully\n Now use Write_File to write data\n",
					name);
			Send_Uart(buf);
 8001256:	69f8      	ldr	r0, [r7, #28]
 8001258:	f7ff feb8 	bl	8000fcc <Send_Uart>
			vPortFree(buf);
 800125c:	69f8      	ldr	r0, [r7, #28]
 800125e:	f00d f92f 	bl	800e4c0 <vPortFree>
		}

		fresult = f_close(&fil);
 8001262:	481c      	ldr	r0, [pc, #112]	; (80012d4 <Create_File+0x118>)
 8001264:	f00a fa30 	bl	800b6c8 <f_close>
 8001268:	4603      	mov	r3, r0
 800126a:	461a      	mov	r2, r3
 800126c:	4b17      	ldr	r3, [pc, #92]	; (80012cc <Create_File+0x110>)
 800126e:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001270:	4b16      	ldr	r3, [pc, #88]	; (80012cc <Create_File+0x110>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d012      	beq.n	800129e <Create_File+0xe2>
		{
			char *buf = pvPortMalloc(100 * sizeof(char));
 8001278:	2064      	movs	r0, #100	; 0x64
 800127a:	f00d f855 	bl	800e328 <pvPortMalloc>
 800127e:	6178      	str	r0, [r7, #20]
			sprintf(buf, "ERROR No. %d in closing file *%s*\n\n", fresult,
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <Create_File+0x110>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4915      	ldr	r1, [pc, #84]	; (80012e0 <Create_File+0x124>)
 800128a:	6978      	ldr	r0, [r7, #20]
 800128c:	f00d ffba 	bl	800f204 <siprintf>
					name);
			Send_Uart(buf);
 8001290:	6978      	ldr	r0, [r7, #20]
 8001292:	f7ff fe9b 	bl	8000fcc <Send_Uart>
			vPortFree(buf);
 8001296:	6978      	ldr	r0, [r7, #20]
 8001298:	f00d f912 	bl	800e4c0 <vPortFree>
 800129c:	e00e      	b.n	80012bc <Create_File+0x100>
		}
		else
		{
			char *buf = pvPortMalloc(100 * sizeof(char));
 800129e:	2064      	movs	r0, #100	; 0x64
 80012a0:	f00d f842 	bl	800e328 <pvPortMalloc>
 80012a4:	61b8      	str	r0, [r7, #24]
			sprintf(buf, "File *%s* CLOSED successfully\n", name);
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	490e      	ldr	r1, [pc, #56]	; (80012e4 <Create_File+0x128>)
 80012aa:	69b8      	ldr	r0, [r7, #24]
 80012ac:	f00d ffaa 	bl	800f204 <siprintf>
			Send_Uart(buf);
 80012b0:	69b8      	ldr	r0, [r7, #24]
 80012b2:	f7ff fe8b 	bl	8000fcc <Send_Uart>
			vPortFree(buf);
 80012b6:	69b8      	ldr	r0, [r7, #24]
 80012b8:	f00d f902 	bl	800e4c0 <vPortFree>
		}
	}
	return fresult;
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <Create_File+0x110>)
 80012be:	781b      	ldrb	r3, [r3, #0]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3720      	adds	r7, #32
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000690 	.word	0x20000690
 80012cc:	200006a8 	.word	0x200006a8
 80012d0:	0801185c 	.word	0x0801185c
 80012d4:	20000460 	.word	0x20000460
 80012d8:	08011894 	.word	0x08011894
 80012dc:	080118bc 	.word	0x080118bc
 80012e0:	080118fc 	.word	0x080118fc
 80012e4:	0801183c 	.word	0x0801183c

080012e8 <Update_File>:

FRESULT Update_File(char *name, char *data)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat(name, &fno);
 80012f2:	4953      	ldr	r1, [pc, #332]	; (8001440 <Update_File+0x158>)
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f00a fafd 	bl	800b8f4 <f_stat>
 80012fa:	4603      	mov	r3, r0
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b51      	ldr	r3, [pc, #324]	; (8001444 <Update_File+0x15c>)
 8001300:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001302:	4b50      	ldr	r3, [pc, #320]	; (8001444 <Update_File+0x15c>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d011      	beq.n	800132e <Update_File+0x46>
	{
		char *buf = pvPortMalloc(100 * sizeof(char));
 800130a:	2064      	movs	r0, #100	; 0x64
 800130c:	f00d f80c 	bl	800e328 <pvPortMalloc>
 8001310:	60b8      	str	r0, [r7, #8]
		sprintf(buf, "ERROR!!! *%s* does not exists\n\n", name);
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	494c      	ldr	r1, [pc, #304]	; (8001448 <Update_File+0x160>)
 8001316:	68b8      	ldr	r0, [r7, #8]
 8001318:	f00d ff74 	bl	800f204 <siprintf>
		Send_Uart(buf);
 800131c:	68b8      	ldr	r0, [r7, #8]
 800131e:	f7ff fe55 	bl	8000fcc <Send_Uart>
		vPortFree(buf);
 8001322:	68b8      	ldr	r0, [r7, #8]
 8001324:	f00d f8cc 	bl	800e4c0 <vPortFree>
		return fresult;
 8001328:	4b46      	ldr	r3, [pc, #280]	; (8001444 <Update_File+0x15c>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	e083      	b.n	8001436 <Update_File+0x14e>
	}

	else
	{
		/* Create a file with read write access and open it */
		fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 800132e:	2232      	movs	r2, #50	; 0x32
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	4846      	ldr	r0, [pc, #280]	; (800144c <Update_File+0x164>)
 8001334:	f009 fdd6 	bl	800aee4 <f_open>
 8001338:	4603      	mov	r3, r0
 800133a:	461a      	mov	r2, r3
 800133c:	4b41      	ldr	r3, [pc, #260]	; (8001444 <Update_File+0x15c>)
 800133e:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001340:	4b40      	ldr	r3, [pc, #256]	; (8001444 <Update_File+0x15c>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d014      	beq.n	8001372 <Update_File+0x8a>
		{
			char *buf = pvPortMalloc(100 * sizeof(char));
 8001348:	2064      	movs	r0, #100	; 0x64
 800134a:	f00c ffed 	bl	800e328 <pvPortMalloc>
 800134e:	60f8      	str	r0, [r7, #12]
			sprintf(buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult,
 8001350:	4b3c      	ldr	r3, [pc, #240]	; (8001444 <Update_File+0x15c>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	493d      	ldr	r1, [pc, #244]	; (8001450 <Update_File+0x168>)
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f00d ff52 	bl	800f204 <siprintf>
					name);
			Send_Uart(buf);
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f7ff fe33 	bl	8000fcc <Send_Uart>
			vPortFree(buf);
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f00d f8aa 	bl	800e4c0 <vPortFree>
			return fresult;
 800136c:	4b35      	ldr	r3, [pc, #212]	; (8001444 <Update_File+0x15c>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	e061      	b.n	8001436 <Update_File+0x14e>
		}

		/* Writing text */
		fresult = f_write(&fil, data, strlen(data), &bw);
 8001372:	6838      	ldr	r0, [r7, #0]
 8001374:	f7fe ffac 	bl	80002d0 <strlen>
 8001378:	4602      	mov	r2, r0
 800137a:	4b36      	ldr	r3, [pc, #216]	; (8001454 <Update_File+0x16c>)
 800137c:	6839      	ldr	r1, [r7, #0]
 800137e:	4833      	ldr	r0, [pc, #204]	; (800144c <Update_File+0x164>)
 8001380:	f009 ff75 	bl	800b26e <f_write>
 8001384:	4603      	mov	r3, r0
 8001386:	461a      	mov	r2, r3
 8001388:	4b2e      	ldr	r3, [pc, #184]	; (8001444 <Update_File+0x15c>)
 800138a:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 800138c:	4b2d      	ldr	r3, [pc, #180]	; (8001444 <Update_File+0x15c>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d012      	beq.n	80013ba <Update_File+0xd2>
		{
			char *buf = pvPortMalloc(100 * sizeof(char));
 8001394:	2064      	movs	r0, #100	; 0x64
 8001396:	f00c ffc7 	bl	800e328 <pvPortMalloc>
 800139a:	61b8      	str	r0, [r7, #24]
			sprintf(buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult,
 800139c:	4b29      	ldr	r3, [pc, #164]	; (8001444 <Update_File+0x15c>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	492c      	ldr	r1, [pc, #176]	; (8001458 <Update_File+0x170>)
 80013a6:	69b8      	ldr	r0, [r7, #24]
 80013a8:	f00d ff2c 	bl	800f204 <siprintf>
					name);
			Send_Uart(buf);
 80013ac:	69b8      	ldr	r0, [r7, #24]
 80013ae:	f7ff fe0d 	bl	8000fcc <Send_Uart>
			vPortFree(buf);
 80013b2:	69b8      	ldr	r0, [r7, #24]
 80013b4:	f00d f884 	bl	800e4c0 <vPortFree>
 80013b8:	e00e      	b.n	80013d8 <Update_File+0xf0>
		}

		else
		{
			char *buf = pvPortMalloc(100 * sizeof(char));
 80013ba:	2064      	movs	r0, #100	; 0x64
 80013bc:	f00c ffb4 	bl	800e328 <pvPortMalloc>
 80013c0:	61f8      	str	r0, [r7, #28]
			sprintf(buf, "*%s* UPDATED successfully\n", name);
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	4925      	ldr	r1, [pc, #148]	; (800145c <Update_File+0x174>)
 80013c6:	69f8      	ldr	r0, [r7, #28]
 80013c8:	f00d ff1c 	bl	800f204 <siprintf>
			Send_Uart(buf);
 80013cc:	69f8      	ldr	r0, [r7, #28]
 80013ce:	f7ff fdfd 	bl	8000fcc <Send_Uart>
			vPortFree(buf);
 80013d2:	69f8      	ldr	r0, [r7, #28]
 80013d4:	f00d f874 	bl	800e4c0 <vPortFree>
		}

		/* Close file */
		fresult = f_close(&fil);
 80013d8:	481c      	ldr	r0, [pc, #112]	; (800144c <Update_File+0x164>)
 80013da:	f00a f975 	bl	800b6c8 <f_close>
 80013de:	4603      	mov	r3, r0
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b18      	ldr	r3, [pc, #96]	; (8001444 <Update_File+0x15c>)
 80013e4:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80013e6:	4b17      	ldr	r3, [pc, #92]	; (8001444 <Update_File+0x15c>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d012      	beq.n	8001414 <Update_File+0x12c>
		{
			char *buf = pvPortMalloc(100 * sizeof(char));
 80013ee:	2064      	movs	r0, #100	; 0x64
 80013f0:	f00c ff9a 	bl	800e328 <pvPortMalloc>
 80013f4:	6138      	str	r0, [r7, #16]
			sprintf(buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult,
 80013f6:	4b13      	ldr	r3, [pc, #76]	; (8001444 <Update_File+0x15c>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	461a      	mov	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4918      	ldr	r1, [pc, #96]	; (8001460 <Update_File+0x178>)
 8001400:	6938      	ldr	r0, [r7, #16]
 8001402:	f00d feff 	bl	800f204 <siprintf>
					name);
			Send_Uart(buf);
 8001406:	6938      	ldr	r0, [r7, #16]
 8001408:	f7ff fde0 	bl	8000fcc <Send_Uart>
			vPortFree(buf);
 800140c:	6938      	ldr	r0, [r7, #16]
 800140e:	f00d f857 	bl	800e4c0 <vPortFree>
 8001412:	e00e      	b.n	8001432 <Update_File+0x14a>
		}
		else
		{
			char *buf = pvPortMalloc(100 * sizeof(char));
 8001414:	2064      	movs	r0, #100	; 0x64
 8001416:	f00c ff87 	bl	800e328 <pvPortMalloc>
 800141a:	6178      	str	r0, [r7, #20]
			sprintf(buf, "File *%s* CLOSED successfully\n", name);
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	4911      	ldr	r1, [pc, #68]	; (8001464 <Update_File+0x17c>)
 8001420:	6978      	ldr	r0, [r7, #20]
 8001422:	f00d feef 	bl	800f204 <siprintf>
			Send_Uart(buf);
 8001426:	6978      	ldr	r0, [r7, #20]
 8001428:	f7ff fdd0 	bl	8000fcc <Send_Uart>
			vPortFree(buf);
 800142c:	6978      	ldr	r0, [r7, #20]
 800142e:	f00d f847 	bl	800e4c0 <vPortFree>
		}
	}
	return fresult;
 8001432:	4b04      	ldr	r3, [pc, #16]	; (8001444 <Update_File+0x15c>)
 8001434:	781b      	ldrb	r3, [r3, #0]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3720      	adds	r7, #32
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000690 	.word	0x20000690
 8001444:	200006a8 	.word	0x200006a8
 8001448:	080116e4 	.word	0x080116e4
 800144c:	20000460 	.word	0x20000460
 8001450:	08011704 	.word	0x08011704
 8001454:	200006ac 	.word	0x200006ac
 8001458:	08011920 	.word	0x08011920
 800145c:	08011948 	.word	0x08011948
 8001460:	08011814 	.word	0x08011814
 8001464:	0801183c 	.word	0x0801183c

08001468 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir(char *name)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	fresult = f_mkdir(name);
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f00a fb31 	bl	800bad8 <f_mkdir>
 8001476:	4603      	mov	r3, r0
 8001478:	461a      	mov	r2, r3
 800147a:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <Create_Dir+0x70>)
 800147c:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 800147e:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <Create_Dir+0x70>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d10f      	bne.n	80014a6 <Create_Dir+0x3e>
	{
		char *buf = pvPortMalloc(100 * sizeof(char));
 8001486:	2064      	movs	r0, #100	; 0x64
 8001488:	f00c ff4e 	bl	800e328 <pvPortMalloc>
 800148c:	60b8      	str	r0, [r7, #8]
		sprintf(buf, "*%s* has been created successfully\n", name);
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	4912      	ldr	r1, [pc, #72]	; (80014dc <Create_Dir+0x74>)
 8001492:	68b8      	ldr	r0, [r7, #8]
 8001494:	f00d feb6 	bl	800f204 <siprintf>
		Send_Uart(buf);
 8001498:	68b8      	ldr	r0, [r7, #8]
 800149a:	f7ff fd97 	bl	8000fcc <Send_Uart>
		vPortFree(buf);
 800149e:	68b8      	ldr	r0, [r7, #8]
 80014a0:	f00d f80e 	bl	800e4c0 <vPortFree>
 80014a4:	e011      	b.n	80014ca <Create_Dir+0x62>
	}
	else
	{
		char *buf = pvPortMalloc(100 * sizeof(char));
 80014a6:	2064      	movs	r0, #100	; 0x64
 80014a8:	f00c ff3e 	bl	800e328 <pvPortMalloc>
 80014ac:	60f8      	str	r0, [r7, #12]
		sprintf(buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <Create_Dir+0x70>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	490a      	ldr	r1, [pc, #40]	; (80014e0 <Create_Dir+0x78>)
 80014b8:	68f8      	ldr	r0, [r7, #12]
 80014ba:	f00d fea3 	bl	800f204 <siprintf>
				name);
		Send_Uart(buf);
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f7ff fd84 	bl	8000fcc <Send_Uart>
		vPortFree(buf);
 80014c4:	68f8      	ldr	r0, [r7, #12]
 80014c6:	f00c fffb 	bl	800e4c0 <vPortFree>
	}
	return fresult;
 80014ca:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <Create_Dir+0x70>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200006a8 	.word	0x200006a8
 80014dc:	080119a8 	.word	0x080119a8
 80014e0:	080119cc 	.word	0x080119cc

080014e4 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ea:	463b      	mov	r3, r7
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80014f6:	4b38      	ldr	r3, [pc, #224]	; (80015d8 <MX_ADC2_Init+0xf4>)
 80014f8:	4a38      	ldr	r2, [pc, #224]	; (80015dc <MX_ADC2_Init+0xf8>)
 80014fa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014fc:	4b36      	ldr	r3, [pc, #216]	; (80015d8 <MX_ADC2_Init+0xf4>)
 80014fe:	2200      	movs	r2, #0
 8001500:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001502:	4b35      	ldr	r3, [pc, #212]	; (80015d8 <MX_ADC2_Init+0xf4>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8001508:	4b33      	ldr	r3, [pc, #204]	; (80015d8 <MX_ADC2_Init+0xf4>)
 800150a:	2201      	movs	r2, #1
 800150c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800150e:	4b32      	ldr	r3, [pc, #200]	; (80015d8 <MX_ADC2_Init+0xf4>)
 8001510:	2200      	movs	r2, #0
 8001512:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001514:	4b30      	ldr	r3, [pc, #192]	; (80015d8 <MX_ADC2_Init+0xf4>)
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800151c:	4b2e      	ldr	r3, [pc, #184]	; (80015d8 <MX_ADC2_Init+0xf4>)
 800151e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001522:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001524:	4b2c      	ldr	r3, [pc, #176]	; (80015d8 <MX_ADC2_Init+0xf4>)
 8001526:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800152a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800152c:	4b2a      	ldr	r3, [pc, #168]	; (80015d8 <MX_ADC2_Init+0xf4>)
 800152e:	2200      	movs	r2, #0
 8001530:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8001532:	4b29      	ldr	r3, [pc, #164]	; (80015d8 <MX_ADC2_Init+0xf4>)
 8001534:	2204      	movs	r2, #4
 8001536:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001538:	4b27      	ldr	r3, [pc, #156]	; (80015d8 <MX_ADC2_Init+0xf4>)
 800153a:	2201      	movs	r2, #1
 800153c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001540:	4b25      	ldr	r3, [pc, #148]	; (80015d8 <MX_ADC2_Init+0xf4>)
 8001542:	2201      	movs	r2, #1
 8001544:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001546:	4824      	ldr	r0, [pc, #144]	; (80015d8 <MX_ADC2_Init+0xf4>)
 8001548:	f002 fe88 	bl	800425c <HAL_ADC_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8001552:	f001 fc99 	bl	8002e88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001556:	2304      	movs	r3, #4
 8001558:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800155a:	2301      	movs	r3, #1
 800155c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800155e:	2301      	movs	r3, #1
 8001560:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001562:	463b      	mov	r3, r7
 8001564:	4619      	mov	r1, r3
 8001566:	481c      	ldr	r0, [pc, #112]	; (80015d8 <MX_ADC2_Init+0xf4>)
 8001568:	f003 f9ce 	bl	8004908 <HAL_ADC_ConfigChannel>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 8001572:	f001 fc89 	bl	8002e88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001576:	2301      	movs	r3, #1
 8001578:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800157a:	2302      	movs	r3, #2
 800157c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800157e:	463b      	mov	r3, r7
 8001580:	4619      	mov	r1, r3
 8001582:	4815      	ldr	r0, [pc, #84]	; (80015d8 <MX_ADC2_Init+0xf4>)
 8001584:	f003 f9c0 	bl	8004908 <HAL_ADC_ConfigChannel>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_ADC2_Init+0xae>
  {
    Error_Handler();
 800158e:	f001 fc7b 	bl	8002e88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001592:	230f      	movs	r3, #15
 8001594:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001596:	2303      	movs	r3, #3
 8001598:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800159a:	463b      	mov	r3, r7
 800159c:	4619      	mov	r1, r3
 800159e:	480e      	ldr	r0, [pc, #56]	; (80015d8 <MX_ADC2_Init+0xf4>)
 80015a0:	f003 f9b2 	bl	8004908 <HAL_ADC_ConfigChannel>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_ADC2_Init+0xca>
  {
    Error_Handler();
 80015aa:	f001 fc6d 	bl	8002e88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80015ae:	230e      	movs	r3, #14
 80015b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80015b2:	2304      	movs	r3, #4
 80015b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015ba:	463b      	mov	r3, r7
 80015bc:	4619      	mov	r1, r3
 80015be:	4806      	ldr	r0, [pc, #24]	; (80015d8 <MX_ADC2_Init+0xf4>)
 80015c0:	f003 f9a2 	bl	8004908 <HAL_ADC_ConfigChannel>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_ADC2_Init+0xea>
  {
    Error_Handler();
 80015ca:	f001 fc5d 	bl	8002e88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200006b0 	.word	0x200006b0
 80015dc:	40012100 	.word	0x40012100

080015e0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015e6:	463b      	mov	r3, r7
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80015f2:	4b21      	ldr	r3, [pc, #132]	; (8001678 <MX_ADC3_Init+0x98>)
 80015f4:	4a21      	ldr	r2, [pc, #132]	; (800167c <MX_ADC3_Init+0x9c>)
 80015f6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80015f8:	4b1f      	ldr	r3, [pc, #124]	; (8001678 <MX_ADC3_Init+0x98>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80015fe:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <MX_ADC3_Init+0x98>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8001604:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <MX_ADC3_Init+0x98>)
 8001606:	2201      	movs	r2, #1
 8001608:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800160a:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <MX_ADC3_Init+0x98>)
 800160c:	2201      	movs	r2, #1
 800160e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001610:	4b19      	ldr	r3, [pc, #100]	; (8001678 <MX_ADC3_Init+0x98>)
 8001612:	2200      	movs	r2, #0
 8001614:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001618:	4b17      	ldr	r3, [pc, #92]	; (8001678 <MX_ADC3_Init+0x98>)
 800161a:	2200      	movs	r2, #0
 800161c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800161e:	4b16      	ldr	r3, [pc, #88]	; (8001678 <MX_ADC3_Init+0x98>)
 8001620:	4a17      	ldr	r2, [pc, #92]	; (8001680 <MX_ADC3_Init+0xa0>)
 8001622:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001624:	4b14      	ldr	r3, [pc, #80]	; (8001678 <MX_ADC3_Init+0x98>)
 8001626:	2200      	movs	r2, #0
 8001628:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <MX_ADC3_Init+0x98>)
 800162c:	2201      	movs	r2, #1
 800162e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <MX_ADC3_Init+0x98>)
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001638:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <MX_ADC3_Init+0x98>)
 800163a:	2201      	movs	r2, #1
 800163c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800163e:	480e      	ldr	r0, [pc, #56]	; (8001678 <MX_ADC3_Init+0x98>)
 8001640:	f002 fe0c 	bl	800425c <HAL_ADC_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 800164a:	f001 fc1d 	bl	8002e88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800164e:	2300      	movs	r3, #0
 8001650:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001652:	2301      	movs	r3, #1
 8001654:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001656:	2300      	movs	r3, #0
 8001658:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800165a:	463b      	mov	r3, r7
 800165c:	4619      	mov	r1, r3
 800165e:	4806      	ldr	r0, [pc, #24]	; (8001678 <MX_ADC3_Init+0x98>)
 8001660:	f003 f952 	bl	8004908 <HAL_ADC_ConfigChannel>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800166a:	f001 fc0d 	bl	8002e88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800166e:	bf00      	nop
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200006f8 	.word	0x200006f8
 800167c:	40012200 	.word	0x40012200
 8001680:	0f000001 	.word	0x0f000001

08001684 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08c      	sub	sp, #48	; 0x30
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 031c 	add.w	r3, r7, #28
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a53      	ldr	r2, [pc, #332]	; (80017f0 <HAL_ADC_MspInit+0x16c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d173      	bne.n	800178e <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	61bb      	str	r3, [r7, #24]
 80016aa:	4b52      	ldr	r3, [pc, #328]	; (80017f4 <HAL_ADC_MspInit+0x170>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	4a51      	ldr	r2, [pc, #324]	; (80017f4 <HAL_ADC_MspInit+0x170>)
 80016b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016b4:	6453      	str	r3, [r2, #68]	; 0x44
 80016b6:	4b4f      	ldr	r3, [pc, #316]	; (80017f4 <HAL_ADC_MspInit+0x170>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016be:	61bb      	str	r3, [r7, #24]
 80016c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	4b4b      	ldr	r3, [pc, #300]	; (80017f4 <HAL_ADC_MspInit+0x170>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a4a      	ldr	r2, [pc, #296]	; (80017f4 <HAL_ADC_MspInit+0x170>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b48      	ldr	r3, [pc, #288]	; (80017f4 <HAL_ADC_MspInit+0x170>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	4b44      	ldr	r3, [pc, #272]	; (80017f4 <HAL_ADC_MspInit+0x170>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a43      	ldr	r2, [pc, #268]	; (80017f4 <HAL_ADC_MspInit+0x170>)
 80016e8:	f043 0304 	orr.w	r3, r3, #4
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b41      	ldr	r3, [pc, #260]	; (80017f4 <HAL_ADC_MspInit+0x170>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	693b      	ldr	r3, [r7, #16]
    PA1     ------> ADC2_IN1
    PA4     ------> ADC2_IN4
    PC4     ------> ADC2_IN14
    PC5     ------> ADC2_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 80016fa:	2312      	movs	r3, #18
 80016fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016fe:	2303      	movs	r3, #3
 8001700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	4619      	mov	r1, r3
 800170c:	483a      	ldr	r0, [pc, #232]	; (80017f8 <HAL_ADC_MspInit+0x174>)
 800170e:	f004 f86d 	bl	80057ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001712:	2330      	movs	r3, #48	; 0x30
 8001714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001716:	2303      	movs	r3, #3
 8001718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800171e:	f107 031c 	add.w	r3, r7, #28
 8001722:	4619      	mov	r1, r3
 8001724:	4835      	ldr	r0, [pc, #212]	; (80017fc <HAL_ADC_MspInit+0x178>)
 8001726:	f004 f861 	bl	80057ec <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 800172a:	4b35      	ldr	r3, [pc, #212]	; (8001800 <HAL_ADC_MspInit+0x17c>)
 800172c:	4a35      	ldr	r2, [pc, #212]	; (8001804 <HAL_ADC_MspInit+0x180>)
 800172e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001730:	4b33      	ldr	r3, [pc, #204]	; (8001800 <HAL_ADC_MspInit+0x17c>)
 8001732:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001736:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001738:	4b31      	ldr	r3, [pc, #196]	; (8001800 <HAL_ADC_MspInit+0x17c>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800173e:	4b30      	ldr	r3, [pc, #192]	; (8001800 <HAL_ADC_MspInit+0x17c>)
 8001740:	2200      	movs	r2, #0
 8001742:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001744:	4b2e      	ldr	r3, [pc, #184]	; (8001800 <HAL_ADC_MspInit+0x17c>)
 8001746:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800174a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800174c:	4b2c      	ldr	r3, [pc, #176]	; (8001800 <HAL_ADC_MspInit+0x17c>)
 800174e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001752:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001754:	4b2a      	ldr	r3, [pc, #168]	; (8001800 <HAL_ADC_MspInit+0x17c>)
 8001756:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800175a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800175c:	4b28      	ldr	r3, [pc, #160]	; (8001800 <HAL_ADC_MspInit+0x17c>)
 800175e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001762:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001764:	4b26      	ldr	r3, [pc, #152]	; (8001800 <HAL_ADC_MspInit+0x17c>)
 8001766:	2200      	movs	r2, #0
 8001768:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800176a:	4b25      	ldr	r3, [pc, #148]	; (8001800 <HAL_ADC_MspInit+0x17c>)
 800176c:	2200      	movs	r2, #0
 800176e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001770:	4823      	ldr	r0, [pc, #140]	; (8001800 <HAL_ADC_MspInit+0x17c>)
 8001772:	f003 fc5b 	bl	800502c <HAL_DMA_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 800177c:	f001 fb84 	bl	8002e88 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a1f      	ldr	r2, [pc, #124]	; (8001800 <HAL_ADC_MspInit+0x17c>)
 8001784:	639a      	str	r2, [r3, #56]	; 0x38
 8001786:	4a1e      	ldr	r2, [pc, #120]	; (8001800 <HAL_ADC_MspInit+0x17c>)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800178c:	e02c      	b.n	80017e8 <HAL_ADC_MspInit+0x164>
  else if(adcHandle->Instance==ADC3)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a1d      	ldr	r2, [pc, #116]	; (8001808 <HAL_ADC_MspInit+0x184>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d127      	bne.n	80017e8 <HAL_ADC_MspInit+0x164>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001798:	2300      	movs	r3, #0
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <HAL_ADC_MspInit+0x170>)
 800179e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a0:	4a14      	ldr	r2, [pc, #80]	; (80017f4 <HAL_ADC_MspInit+0x170>)
 80017a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017a6:	6453      	str	r3, [r2, #68]	; 0x44
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <HAL_ADC_MspInit+0x170>)
 80017aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b4:	2300      	movs	r3, #0
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <HAL_ADC_MspInit+0x170>)
 80017ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017bc:	4a0d      	ldr	r2, [pc, #52]	; (80017f4 <HAL_ADC_MspInit+0x170>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	6313      	str	r3, [r2, #48]	; 0x30
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_ADC_MspInit+0x170>)
 80017c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017d0:	2301      	movs	r3, #1
 80017d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017d4:	2303      	movs	r3, #3
 80017d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017dc:	f107 031c 	add.w	r3, r7, #28
 80017e0:	4619      	mov	r1, r3
 80017e2:	4805      	ldr	r0, [pc, #20]	; (80017f8 <HAL_ADC_MspInit+0x174>)
 80017e4:	f004 f802 	bl	80057ec <HAL_GPIO_Init>
}
 80017e8:	bf00      	nop
 80017ea:	3730      	adds	r7, #48	; 0x30
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40012100 	.word	0x40012100
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020000 	.word	0x40020000
 80017fc:	40020800 	.word	0x40020800
 8001800:	20000740 	.word	0x20000740
 8001804:	40026440 	.word	0x40026440
 8001808:	40012200 	.word	0x40012200

0800180c <readButton>:
/******************************************************************************
 * Function Definitions
 *******************************************************************************/

button_t readButton(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
	button_t button;
	static uint8_t buttonLock;
	uint16_t buttonAdcValue = BUTTON_NO_BUTTON_ADC_VAL;
 8001812:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001816:	80bb      	strh	r3, [r7, #4]
	HAL_ADC_Start(BUTTON_ADC_CHANNEL);
 8001818:	4830      	ldr	r0, [pc, #192]	; (80018dc <readButton+0xd0>)
 800181a:	f002 fd63 	bl	80042e4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(BUTTON_ADC_CHANNEL, 10);
 800181e:	210a      	movs	r1, #10
 8001820:	482e      	ldr	r0, [pc, #184]	; (80018dc <readButton+0xd0>)
 8001822:	f002 fe64 	bl	80044ee <HAL_ADC_PollForConversion>
	buttonAdcValue = HAL_ADC_GetValue(BUTTON_ADC_CHANNEL);
 8001826:	482d      	ldr	r0, [pc, #180]	; (80018dc <readButton+0xd0>)
 8001828:	f003 f856 	bl	80048d8 <HAL_ADC_GetValue>
 800182c:	4603      	mov	r3, r0
 800182e:	80bb      	strh	r3, [r7, #4]
	HAL_ADC_Stop(BUTTON_ADC_CHANNEL);
 8001830:	482a      	ldr	r0, [pc, #168]	; (80018dc <readButton+0xd0>)
 8001832:	f002 fe29 	bl	8004488 <HAL_ADC_Stop>
	if (0 == buttonLock)
 8001836:	4b2a      	ldr	r3, [pc, #168]	; (80018e0 <readButton+0xd4>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d13b      	bne.n	80018b6 <readButton+0xaa>
	{
		if (BUTTON_RANGE(buttonAdcValue, BUTTON_SELECT_ADC_VAL))
 800183e:	88bb      	ldrh	r3, [r7, #4]
 8001840:	f640 320e 	movw	r2, #2830	; 0xb0e
 8001844:	4293      	cmp	r3, r2
 8001846:	d907      	bls.n	8001858 <readButton+0x4c>
 8001848:	88bb      	ldrh	r3, [r7, #4]
 800184a:	f640 3271 	movw	r2, #2929	; 0xb71
 800184e:	4293      	cmp	r3, r2
 8001850:	d802      	bhi.n	8001858 <readButton+0x4c>
		{
			button = BUTTON_SELECT;
 8001852:	2300      	movs	r3, #0
 8001854:	71fb      	strb	r3, [r7, #7]
 8001856:	e02a      	b.n	80018ae <readButton+0xa2>
		}
		else if (BUTTON_RANGE(buttonAdcValue, BUTTON_UP_ADC_VAL))
 8001858:	88bb      	ldrh	r3, [r7, #4]
 800185a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800185e:	d906      	bls.n	800186e <readButton+0x62>
 8001860:	88bb      	ldrh	r3, [r7, #4]
 8001862:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001866:	d202      	bcs.n	800186e <readButton+0x62>
		{
			button = BUTTON_UP;
 8001868:	2301      	movs	r3, #1
 800186a:	71fb      	strb	r3, [r7, #7]
 800186c:	e01f      	b.n	80018ae <readButton+0xa2>
		}
		else if (BUTTON_RANGE(buttonAdcValue, BUTTON_DOWN_ADC_VAL))
 800186e:	88bb      	ldrh	r3, [r7, #4]
 8001870:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001874:	d907      	bls.n	8001886 <readButton+0x7a>
 8001876:	88bb      	ldrh	r3, [r7, #4]
 8001878:	f240 5213 	movw	r2, #1299	; 0x513
 800187c:	4293      	cmp	r3, r2
 800187e:	d802      	bhi.n	8001886 <readButton+0x7a>
		{
			button = BUTTON_DOWN;
 8001880:	2302      	movs	r3, #2
 8001882:	71fb      	strb	r3, [r7, #7]
 8001884:	e013      	b.n	80018ae <readButton+0xa2>
		}
		else if (BUTTON_RANGE(buttonAdcValue, BUTTON_LEFT_ADC_VAL))
 8001886:	88bb      	ldrh	r3, [r7, #4]
 8001888:	f5b3 6feb 	cmp.w	r3, #1880	; 0x758
 800188c:	d907      	bls.n	800189e <readButton+0x92>
 800188e:	88bb      	ldrh	r3, [r7, #4]
 8001890:	f240 72bb 	movw	r2, #1979	; 0x7bb
 8001894:	4293      	cmp	r3, r2
 8001896:	d802      	bhi.n	800189e <readButton+0x92>
		{
			button = BUTTON_LEFT;
 8001898:	2303      	movs	r3, #3
 800189a:	71fb      	strb	r3, [r7, #7]
 800189c:	e007      	b.n	80018ae <readButton+0xa2>
		}
		else if (BUTTON_RANGE(buttonAdcValue, BUTTON_RIGHT_ADC_VAL))
 800189e:	88bb      	ldrh	r3, [r7, #4]
 80018a0:	2b31      	cmp	r3, #49	; 0x31
 80018a2:	d802      	bhi.n	80018aa <readButton+0x9e>
		{
			button = BUTTON_RIGHT;
 80018a4:	2304      	movs	r3, #4
 80018a6:	71fb      	strb	r3, [r7, #7]
 80018a8:	e001      	b.n	80018ae <readButton+0xa2>
		}
		else
		{
			button = BUTTON_SNA;
 80018aa:	2305      	movs	r3, #5
 80018ac:	71fb      	strb	r3, [r7, #7]
		}
		buttonLock = 1;
 80018ae:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <readButton+0xd4>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	701a      	strb	r2, [r3, #0]
 80018b4:	e001      	b.n	80018ba <readButton+0xae>
	}
	else
	{
		button = BUTTON_SNA;
 80018b6:	2305      	movs	r3, #5
 80018b8:	71fb      	strb	r3, [r7, #7]
	}
	buttonLock = (buttonAdcValue < BUTTON_NO_BUTTON_ADC_VAL) ? (1) : (0);
 80018ba:	88bb      	ldrh	r3, [r7, #4]
 80018bc:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80018c0:	4293      	cmp	r3, r2
 80018c2:	bf94      	ite	ls
 80018c4:	2301      	movls	r3, #1
 80018c6:	2300      	movhi	r3, #0
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	461a      	mov	r2, r3
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <readButton+0xd4>)
 80018ce:	701a      	strb	r2, [r3, #0]

	return (button);
 80018d0:	79fb      	ldrb	r3, [r7, #7]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200006f8 	.word	0x200006f8
 80018e0:	200007a0 	.word	0x200007a0

080018e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <MX_DMA_Init+0x3c>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <MX_DMA_Init+0x3c>)
 80018f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <MX_DMA_Init+0x3c>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	2105      	movs	r1, #5
 800190a:	203a      	movs	r0, #58	; 0x3a
 800190c:	f003 fb64 	bl	8004fd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001910:	203a      	movs	r0, #58	; 0x3a
 8001912:	f003 fb7d 	bl	8005010 <HAL_NVIC_EnableIRQ>

}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800

08001924 <SELECT>:
static uint8_t CardType; /* SD type 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0; /* Power condition Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001928:	2200      	movs	r2, #0
 800192a:	2101      	movs	r1, #1
 800192c:	4802      	ldr	r0, [pc, #8]	; (8001938 <SELECT+0x14>)
 800192e:	f004 f8f1 	bl	8005b14 <HAL_GPIO_WritePin>
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40020400 	.word	0x40020400

0800193c <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001940:	2201      	movs	r2, #1
 8001942:	2101      	movs	r1, #1
 8001944:	4802      	ldr	r0, [pc, #8]	; (8001950 <DESELECT+0x14>)
 8001946:	f004 f8e5 	bl	8005b14 <HAL_GPIO_WritePin>
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40020400 	.word	0x40020400

08001954 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY)
 800195e:	bf00      	nop
 8001960:	4808      	ldr	r0, [pc, #32]	; (8001984 <SPI_TxByte+0x30>)
 8001962:	f005 febe 	bl	80076e2 <HAL_SPI_GetState>
 8001966:	4603      	mov	r3, r0
 8001968:	2b01      	cmp	r3, #1
 800196a:	d1f9      	bne.n	8001960 <SPI_TxByte+0xc>
		;
	HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 800196c:	1df9      	adds	r1, r7, #7
 800196e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001972:	2201      	movs	r2, #1
 8001974:	4803      	ldr	r0, [pc, #12]	; (8001984 <SPI_TxByte+0x30>)
 8001976:	f005 fbd6 	bl	8007126 <HAL_SPI_Transmit>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	2000571c 	.word	0x2000571c

08001988 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800198e:	23ff      	movs	r3, #255	; 0xff
 8001990:	71fb      	strb	r3, [r7, #7]
	data = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	71bb      	strb	r3, [r7, #6]

	while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY))
 8001996:	bf00      	nop
 8001998:	4809      	ldr	r0, [pc, #36]	; (80019c0 <SPI_RxByte+0x38>)
 800199a:	f005 fea2 	bl	80076e2 <HAL_SPI_GetState>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d1f9      	bne.n	8001998 <SPI_RxByte+0x10>
		;
	HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 80019a4:	1dba      	adds	r2, r7, #6
 80019a6:	1df9      	adds	r1, r7, #7
 80019a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	2301      	movs	r3, #1
 80019b0:	4803      	ldr	r0, [pc, #12]	; (80019c0 <SPI_RxByte+0x38>)
 80019b2:	f005 fcf4 	bl	800739e <HAL_SPI_TransmitReceive>

	return data;
 80019b6:	79bb      	ldrb	r3, [r7, #6]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	2000571c 	.word	0x2000571c

080019c4 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80019cc:	f7ff ffdc 	bl	8001988 <SPI_RxByte>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	701a      	strb	r2, [r3, #0]
}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
	uint8_t res;

	/* 500ms Counter preparation*/
	Timer2 = 50;
 80019e6:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <SD_ReadyWait+0x34>)
 80019e8:	2232      	movs	r2, #50	; 0x32
 80019ea:	701a      	strb	r2, [r3, #0]

	SPI_RxByte();
 80019ec:	f7ff ffcc 	bl	8001988 <SPI_RxByte>

	do
	{
		/* 0xFF SPI communication until a value is received */
		res = SPI_RxByte();
 80019f0:	f7ff ffca 	bl	8001988 <SPI_RxByte>
 80019f4:	4603      	mov	r3, r0
 80019f6:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	2bff      	cmp	r3, #255	; 0xff
 80019fc:	d004      	beq.n	8001a08 <SD_ReadyWait+0x28>
 80019fe:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <SD_ReadyWait+0x34>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1f3      	bne.n	80019f0 <SD_ReadyWait+0x10>

	return res;
 8001a08:	79fb      	ldrb	r3, [r7, #7]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	200057be 	.word	0x200057be

08001a18 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
	uint8_t cmd_arg[6];
	uint32_t Count = 0x1FFF;
 8001a1e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001a22:	617b      	str	r3, [r7, #20]

	DESELECT();
 8001a24:	f7ff ff8a 	bl	800193c <DESELECT>

	for (int i = 0; i < 10; i++)
 8001a28:	2300      	movs	r3, #0
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	e005      	b.n	8001a3a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001a2e:	20ff      	movs	r0, #255	; 0xff
 8001a30:	f7ff ff90 	bl	8001954 <SPI_TxByte>
	for (int i = 0; i < 10; i++)
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	3301      	adds	r3, #1
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	2b09      	cmp	r3, #9
 8001a3e:	ddf6      	ble.n	8001a2e <SD_PowerOn+0x16>
	}

	/* SPI Chips Select */
	SELECT();
 8001a40:	f7ff ff70 	bl	8001924 <SELECT>

	/*  GO_IDLE_STATE State transitions*/
	cmd_arg[0] = (CMD0 | 0x40);
 8001a44:	2340      	movs	r3, #64	; 0x40
 8001a46:	713b      	strb	r3, [r7, #4]
	cmd_arg[1] = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	717b      	strb	r3, [r7, #5]
	cmd_arg[2] = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	71bb      	strb	r3, [r7, #6]
	cmd_arg[3] = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	71fb      	strb	r3, [r7, #7]
	cmd_arg[4] = 0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	723b      	strb	r3, [r7, #8]
	cmd_arg[5] = 0x95;
 8001a58:	2395      	movs	r3, #149	; 0x95
 8001a5a:	727b      	strb	r3, [r7, #9]

	/* Command transmission*/
	for (int i = 0; i < 6; i++)
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	e009      	b.n	8001a76 <SD_PowerOn+0x5e>
	{
		SPI_TxByte(cmd_arg[i]);
 8001a62:	1d3a      	adds	r2, r7, #4
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4413      	add	r3, r2
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff ff72 	bl	8001954 <SPI_TxByte>
	for (int i = 0; i < 6; i++)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	3301      	adds	r3, #1
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2b05      	cmp	r3, #5
 8001a7a:	ddf2      	ble.n	8001a62 <SD_PowerOn+0x4a>
	}

	/* Answer waiting*/
	while ((SPI_RxByte() != 0x01) && Count)
 8001a7c:	e002      	b.n	8001a84 <SD_PowerOn+0x6c>
	{
		Count--;
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	3b01      	subs	r3, #1
 8001a82:	617b      	str	r3, [r7, #20]
	while ((SPI_RxByte() != 0x01) && Count)
 8001a84:	f7ff ff80 	bl	8001988 <SPI_RxByte>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d002      	beq.n	8001a94 <SD_PowerOn+0x7c>
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1f4      	bne.n	8001a7e <SD_PowerOn+0x66>
	}

	DESELECT();
 8001a94:	f7ff ff52 	bl	800193c <DESELECT>
	SPI_TxByte(0XFF);
 8001a98:	20ff      	movs	r0, #255	; 0xff
 8001a9a:	f7ff ff5b 	bl	8001954 <SPI_TxByte>

	PowerFlag = 1;
 8001a9e:	4b03      	ldr	r3, [pc, #12]	; (8001aac <SD_PowerOn+0x94>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	701a      	strb	r2, [r3, #0]
}
 8001aa4:	bf00      	nop
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	200007a2 	.word	0x200007a2

08001ab0 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001ab4:	4b03      	ldr	r3, [pc, #12]	; (8001ac4 <SD_PowerOff+0x14>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
}
 8001aba:	bf00      	nop
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	200007a2 	.word	0x200007a2

08001ac8 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
	/*  0=off, 1=on */
	return PowerFlag;
 8001acc:	4b03      	ldr	r3, [pc, #12]	; (8001adc <SD_CheckPower+0x14>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	200007a2 	.word	0x200007a2

08001ae0 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* 100ms 타이머 */
	Timer1 = 10;
 8001aea:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <SD_RxDataBlock+0x68>)
 8001aec:	220a      	movs	r2, #10
 8001aee:	701a      	strb	r2, [r3, #0]

	/* 응답 대기 */
	do
	{
		token = SPI_RxByte();
 8001af0:	f7ff ff4a 	bl	8001988 <SPI_RxByte>
 8001af4:	4603      	mov	r3, r0
 8001af6:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	2bff      	cmp	r3, #255	; 0xff
 8001afc:	d104      	bne.n	8001b08 <SD_RxDataBlock+0x28>
 8001afe:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <SD_RxDataBlock+0x68>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1f3      	bne.n	8001af0 <SD_RxDataBlock+0x10>

	/* 0xFE 이외 Token 수신 시 에러 처리 */
	if (token != 0xFE)
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
 8001b0a:	2bfe      	cmp	r3, #254	; 0xfe
 8001b0c:	d001      	beq.n	8001b12 <SD_RxDataBlock+0x32>
		return FALSE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	e016      	b.n	8001b40 <SD_RxDataBlock+0x60>

	/* 버퍼에 데이터 수신 */
	do
	{
		SPI_RxBytePtr(buff++);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	1c5a      	adds	r2, r3, #1
 8001b16:	607a      	str	r2, [r7, #4]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff53 	bl	80019c4 <SPI_RxBytePtr>
		SPI_RxBytePtr(buff++);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	1c5a      	adds	r2, r3, #1
 8001b22:	607a      	str	r2, [r7, #4]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff ff4d 	bl	80019c4 <SPI_RxBytePtr>
	} while (btr -= 2);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	3b02      	subs	r3, #2
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1ed      	bne.n	8001b12 <SD_RxDataBlock+0x32>

	SPI_RxByte(); /* CRC 무시 */
 8001b36:	f7ff ff27 	bl	8001988 <SPI_RxByte>
	SPI_RxByte();
 8001b3a:	f7ff ff25 	bl	8001988 <SPI_RxByte>

	return TRUE;
 8001b3e:	2301      	movs	r3, #1
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	200057bd 	.word	0x200057bd

08001b4c <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	70fb      	strb	r3, [r7, #3]
	uint8_t resp, wc;
	uint8_t i = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	737b      	strb	r3, [r7, #13]

	/* SD카드 준비 대기 */
	if (SD_ReadyWait() != 0xFF)
 8001b5c:	f7ff ff40 	bl	80019e0 <SD_ReadyWait>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2bff      	cmp	r3, #255	; 0xff
 8001b64:	d001      	beq.n	8001b6a <SD_TxDataBlock+0x1e>
		return FALSE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	e040      	b.n	8001bec <SD_TxDataBlock+0xa0>

	/* 토큰 전송 */
	SPI_TxByte(token);
 8001b6a:	78fb      	ldrb	r3, [r7, #3]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff fef1 	bl	8001954 <SPI_TxByte>

	/* 데이터 토큰인 경우 */
	if (token != 0xFD)
 8001b72:	78fb      	ldrb	r3, [r7, #3]
 8001b74:	2bfd      	cmp	r3, #253	; 0xfd
 8001b76:	d031      	beq.n	8001bdc <SD_TxDataBlock+0x90>
	{
		wc = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	73bb      	strb	r3, [r7, #14]

		/* 512 바이트 데이터 전송 */
		do
		{
			SPI_TxByte(*buff++);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fee5 	bl	8001954 <SPI_TxByte>
			SPI_TxByte(*buff++);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	1c5a      	adds	r2, r3, #1
 8001b8e:	607a      	str	r2, [r7, #4]
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fede 	bl	8001954 <SPI_TxByte>
		} while (--wc);
 8001b98:	7bbb      	ldrb	r3, [r7, #14]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	73bb      	strb	r3, [r7, #14]
 8001b9e:	7bbb      	ldrb	r3, [r7, #14]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1eb      	bne.n	8001b7c <SD_TxDataBlock+0x30>

		SPI_RxByte(); /* CRC 무시 */
 8001ba4:	f7ff fef0 	bl	8001988 <SPI_RxByte>
		SPI_RxByte();
 8001ba8:	f7ff feee 	bl	8001988 <SPI_RxByte>

		/* 데이트 응답 수신 */
		while (i <= 64)
 8001bac:	e00b      	b.n	8001bc6 <SD_TxDataBlock+0x7a>
		{
			resp = SPI_RxByte();
 8001bae:	f7ff feeb 	bl	8001988 <SPI_RxByte>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	73fb      	strb	r3, [r7, #15]

			/* 에러 응답 처리 */
			if ((resp & 0x1F) == 0x05)
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	f003 031f 	and.w	r3, r3, #31
 8001bbc:	2b05      	cmp	r3, #5
 8001bbe:	d006      	beq.n	8001bce <SD_TxDataBlock+0x82>
				break;

			i++;
 8001bc0:	7b7b      	ldrb	r3, [r7, #13]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	737b      	strb	r3, [r7, #13]
		while (i <= 64)
 8001bc6:	7b7b      	ldrb	r3, [r7, #13]
 8001bc8:	2b40      	cmp	r3, #64	; 0x40
 8001bca:	d9f0      	bls.n	8001bae <SD_TxDataBlock+0x62>
 8001bcc:	e000      	b.n	8001bd0 <SD_TxDataBlock+0x84>
				break;
 8001bce:	bf00      	nop
		}

		/* SPI 수신 버퍼 Clear */
		while (SPI_RxByte() == 0)
 8001bd0:	bf00      	nop
 8001bd2:	f7ff fed9 	bl	8001988 <SPI_RxByte>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0fa      	beq.n	8001bd2 <SD_TxDataBlock+0x86>
			;
	}

	if ((resp & 0x1F) == 0x05)
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	f003 031f 	and.w	r3, r3, #31
 8001be2:	2b05      	cmp	r3, #5
 8001be4:	d101      	bne.n	8001bea <SD_TxDataBlock+0x9e>
		return TRUE;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <SD_TxDataBlock+0xa0>
	else
		return FALSE;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	6039      	str	r1, [r7, #0]
 8001bfe:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* SD카드 대기 */
	if (SD_ReadyWait() != 0xFF)
 8001c00:	f7ff feee 	bl	80019e0 <SD_ReadyWait>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2bff      	cmp	r3, #255	; 0xff
 8001c08:	d001      	beq.n	8001c0e <SD_SendCmd+0x1a>
		return 0xFF;
 8001c0a:	23ff      	movs	r3, #255	; 0xff
 8001c0c:	e040      	b.n	8001c90 <SD_SendCmd+0x9c>

	/* 명령 패킷 전송 */
	SPI_TxByte(cmd); /* Command */
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fe9f 	bl	8001954 <SPI_TxByte>
	SPI_TxByte((BYTE) (arg >> 24)); /* Argument[31..24] */
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	0e1b      	lsrs	r3, r3, #24
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff fe99 	bl	8001954 <SPI_TxByte>
	SPI_TxByte((BYTE) (arg >> 16)); /* Argument[23..16] */
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	0c1b      	lsrs	r3, r3, #16
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff fe93 	bl	8001954 <SPI_TxByte>
	SPI_TxByte((BYTE) (arg >> 8)); /* Argument[15..8] */
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	0a1b      	lsrs	r3, r3, #8
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fe8d 	bl	8001954 <SPI_TxByte>
	SPI_TxByte((BYTE) arg); /* Argument[7..0] */
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fe88 	bl	8001954 <SPI_TxByte>

	/* 명령별 CRC 준비 */
	crc = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	2b40      	cmp	r3, #64	; 0x40
 8001c4c:	d101      	bne.n	8001c52 <SD_SendCmd+0x5e>
		crc = 0x95; /* CRC for CMD0(0) */
 8001c4e:	2395      	movs	r3, #149	; 0x95
 8001c50:	73fb      	strb	r3, [r7, #15]

	if (cmd == CMD8)
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	2b48      	cmp	r3, #72	; 0x48
 8001c56:	d101      	bne.n	8001c5c <SD_SendCmd+0x68>
		crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001c58:	2387      	movs	r3, #135	; 0x87
 8001c5a:	73fb      	strb	r3, [r7, #15]

	/* CRC 전송 */
	SPI_TxByte(crc);
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff fe78 	bl	8001954 <SPI_TxByte>

	/* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
	if (cmd == CMD12)
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	2b4c      	cmp	r3, #76	; 0x4c
 8001c68:	d101      	bne.n	8001c6e <SD_SendCmd+0x7a>
		SPI_RxByte();
 8001c6a:	f7ff fe8d 	bl	8001988 <SPI_RxByte>

	/* 10회 내에 정상 데이터를 수신한다. */
	uint8_t n = 10;
 8001c6e:	230a      	movs	r3, #10
 8001c70:	73bb      	strb	r3, [r7, #14]
	do
	{
		res = SPI_RxByte();
 8001c72:	f7ff fe89 	bl	8001988 <SPI_RxByte>
 8001c76:	4603      	mov	r3, r0
 8001c78:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001c7a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	da05      	bge.n	8001c8e <SD_SendCmd+0x9a>
 8001c82:	7bbb      	ldrb	r3, [r7, #14]
 8001c84:	3b01      	subs	r3, #1
 8001c86:	73bb      	strb	r3, [r7, #14]
 8001c88:	7bbb      	ldrb	r3, [r7, #14]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f1      	bne.n	8001c72 <SD_SendCmd+0x7e>

	return res;
 8001c8e:	7b7b      	ldrb	r3, [r7, #13]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <SD_disk_initialize>:
 user_diskio.c 파일에서 사용된다.
 -----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* 한종류의 드라이브만 지원 */
	if (drv)
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <SD_disk_initialize+0x14>
		return STA_NOINIT;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0d5      	b.n	8001e58 <SD_disk_initialize+0x1c0>

	/* SD카드 미삽입 */
	if (Stat & STA_NODISK)
 8001cac:	4b6c      	ldr	r3, [pc, #432]	; (8001e60 <SD_disk_initialize+0x1c8>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <SD_disk_initialize+0x2a>
		return Stat;
 8001cba:	4b69      	ldr	r3, [pc, #420]	; (8001e60 <SD_disk_initialize+0x1c8>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	e0ca      	b.n	8001e58 <SD_disk_initialize+0x1c0>

	/* SD카드 Power On */
	SD_PowerOn();
 8001cc2:	f7ff fea9 	bl	8001a18 <SD_PowerOn>

	/* SPI 통신을 위해 Chip Select */
	SELECT();
 8001cc6:	f7ff fe2d 	bl	8001924 <SELECT>

	/* SD카드 타입변수 초기화 */
	type = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	73bb      	strb	r3, [r7, #14]

	/* Idle 상태 진입 */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001cce:	2100      	movs	r1, #0
 8001cd0:	2040      	movs	r0, #64	; 0x40
 8001cd2:	f7ff ff8f 	bl	8001bf4 <SD_SendCmd>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	f040 80a5 	bne.w	8001e28 <SD_disk_initialize+0x190>
	{
		/* 타이머 1초 설정 */
		Timer1 = 100;
 8001cde:	4b61      	ldr	r3, [pc, #388]	; (8001e64 <SD_disk_initialize+0x1cc>)
 8001ce0:	2264      	movs	r2, #100	; 0x64
 8001ce2:	701a      	strb	r2, [r3, #0]

		/* SD 인터페이스 동작 조건 확인 */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001ce4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001ce8:	2048      	movs	r0, #72	; 0x48
 8001cea:	f7ff ff83 	bl	8001bf4 <SD_SendCmd>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d158      	bne.n	8001da6 <SD_disk_initialize+0x10e>
		{
			/* SDC Ver2+ */
			for (n = 0; n < 4; n++)
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	73fb      	strb	r3, [r7, #15]
 8001cf8:	e00c      	b.n	8001d14 <SD_disk_initialize+0x7c>
			{
				ocr[n] = SPI_RxByte();
 8001cfa:	7bfc      	ldrb	r4, [r7, #15]
 8001cfc:	f7ff fe44 	bl	8001988 <SPI_RxByte>
 8001d00:	4603      	mov	r3, r0
 8001d02:	461a      	mov	r2, r3
 8001d04:	f104 0310 	add.w	r3, r4, #16
 8001d08:	443b      	add	r3, r7
 8001d0a:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
 8001d10:	3301      	adds	r3, #1
 8001d12:	73fb      	strb	r3, [r7, #15]
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	2b03      	cmp	r3, #3
 8001d18:	d9ef      	bls.n	8001cfa <SD_disk_initialize+0x62>
			}

			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001d1a:	7abb      	ldrb	r3, [r7, #10]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	f040 8083 	bne.w	8001e28 <SD_disk_initialize+0x190>
 8001d22:	7afb      	ldrb	r3, [r7, #11]
 8001d24:	2baa      	cmp	r3, #170	; 0xaa
 8001d26:	d17f      	bne.n	8001e28 <SD_disk_initialize+0x190>
			{
				/* 2.7-3.6V 전압범위 동작 */
				do
				{
					if (SD_SendCmd(CMD55, 0) <= 1
 8001d28:	2100      	movs	r1, #0
 8001d2a:	2077      	movs	r0, #119	; 0x77
 8001d2c:	f7ff ff62 	bl	8001bf4 <SD_SendCmd>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d807      	bhi.n	8001d46 <SD_disk_initialize+0xae>
							&& SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001d36:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d3a:	2069      	movs	r0, #105	; 0x69
 8001d3c:	f7ff ff5a 	bl	8001bf4 <SD_SendCmd>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d005      	beq.n	8001d52 <SD_disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 8001d46:	4b47      	ldr	r3, [pc, #284]	; (8001e64 <SD_disk_initialize+0x1cc>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1eb      	bne.n	8001d28 <SD_disk_initialize+0x90>
 8001d50:	e000      	b.n	8001d54 <SD_disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 8001d52:	bf00      	nop

				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001d54:	4b43      	ldr	r3, [pc, #268]	; (8001e64 <SD_disk_initialize+0x1cc>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d064      	beq.n	8001e28 <SD_disk_initialize+0x190>
 8001d5e:	2100      	movs	r1, #0
 8001d60:	207a      	movs	r0, #122	; 0x7a
 8001d62:	f7ff ff47 	bl	8001bf4 <SD_SendCmd>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d15d      	bne.n	8001e28 <SD_disk_initialize+0x190>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	73fb      	strb	r3, [r7, #15]
 8001d70:	e00c      	b.n	8001d8c <SD_disk_initialize+0xf4>
					{
						ocr[n] = SPI_RxByte();
 8001d72:	7bfc      	ldrb	r4, [r7, #15]
 8001d74:	f7ff fe08 	bl	8001988 <SPI_RxByte>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	f104 0310 	add.w	r3, r4, #16
 8001d80:	443b      	add	r3, r7
 8001d82:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	73fb      	strb	r3, [r7, #15]
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	2b03      	cmp	r3, #3
 8001d90:	d9ef      	bls.n	8001d72 <SD_disk_initialize+0xda>
					}

					type = (ocr[0] & 0x40) ? 6 : 2;
 8001d92:	7a3b      	ldrb	r3, [r7, #8]
 8001d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <SD_disk_initialize+0x108>
 8001d9c:	2306      	movs	r3, #6
 8001d9e:	e000      	b.n	8001da2 <SD_disk_initialize+0x10a>
 8001da0:	2302      	movs	r3, #2
 8001da2:	73bb      	strb	r3, [r7, #14]
 8001da4:	e040      	b.n	8001e28 <SD_disk_initialize+0x190>
			}
		}
		else
		{
			/* SDC Ver1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ?
 8001da6:	2100      	movs	r1, #0
 8001da8:	2077      	movs	r0, #119	; 0x77
 8001daa:	f7ff ff23 	bl	8001bf4 <SD_SendCmd>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d808      	bhi.n	8001dc6 <SD_disk_initialize+0x12e>
 8001db4:	2100      	movs	r1, #0
 8001db6:	2069      	movs	r0, #105	; 0x69
 8001db8:	f7ff ff1c 	bl	8001bf4 <SD_SendCmd>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d801      	bhi.n	8001dc6 <SD_disk_initialize+0x12e>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	e000      	b.n	8001dc8 <SD_disk_initialize+0x130>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	73bb      	strb	r3, [r7, #14]
					2 : 1; /* SDC : MMC */

			do
			{
				if (type == 2)
 8001dca:	7bbb      	ldrb	r3, [r7, #14]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d10e      	bne.n	8001dee <SD_disk_initialize+0x156>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	2077      	movs	r0, #119	; 0x77
 8001dd4:	f7ff ff0e 	bl	8001bf4 <SD_SendCmd>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d80e      	bhi.n	8001dfc <SD_disk_initialize+0x164>
 8001dde:	2100      	movs	r1, #0
 8001de0:	2069      	movs	r0, #105	; 0x69
 8001de2:	f7ff ff07 	bl	8001bf4 <SD_SendCmd>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d107      	bne.n	8001dfc <SD_disk_initialize+0x164>
						break; /* ACMD41 */
 8001dec:	e00d      	b.n	8001e0a <SD_disk_initialize+0x172>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0)
 8001dee:	2100      	movs	r1, #0
 8001df0:	2041      	movs	r0, #65	; 0x41
 8001df2:	f7ff feff 	bl	8001bf4 <SD_SendCmd>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <SD_disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 8001dfc:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <SD_disk_initialize+0x1cc>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1e1      	bne.n	8001dca <SD_disk_initialize+0x132>
 8001e06:	e000      	b.n	8001e0a <SD_disk_initialize+0x172>
						break; /* CMD1 */
 8001e08:	bf00      	nop

			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001e0a:	4b16      	ldr	r3, [pc, #88]	; (8001e64 <SD_disk_initialize+0x1cc>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d007      	beq.n	8001e24 <SD_disk_initialize+0x18c>
 8001e14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e18:	2050      	movs	r0, #80	; 0x50
 8001e1a:	f7ff feeb 	bl	8001bf4 <SD_SendCmd>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <SD_disk_initialize+0x190>
			{
				/* 블럭 길이 선택 */
				type = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	73bb      	strb	r3, [r7, #14]
			}
		}
	}

	CardType = type;
 8001e28:	4a0f      	ldr	r2, [pc, #60]	; (8001e68 <SD_disk_initialize+0x1d0>)
 8001e2a:	7bbb      	ldrb	r3, [r7, #14]
 8001e2c:	7013      	strb	r3, [r2, #0]

	DESELECT();
 8001e2e:	f7ff fd85 	bl	800193c <DESELECT>

	SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001e32:	f7ff fda9 	bl	8001988 <SPI_RxByte>

	if (type)
 8001e36:	7bbb      	ldrb	r3, [r7, #14]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d008      	beq.n	8001e4e <SD_disk_initialize+0x1b6>
	{
		/* Clear STA_NOINIT */
		Stat &= ~STA_NOINIT;
 8001e3c:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <SD_disk_initialize+0x1c8>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	f023 0301 	bic.w	r3, r3, #1
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <SD_disk_initialize+0x1c8>)
 8001e4a:	701a      	strb	r2, [r3, #0]
 8001e4c:	e001      	b.n	8001e52 <SD_disk_initialize+0x1ba>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001e4e:	f7ff fe2f 	bl	8001ab0 <SD_PowerOff>
	}

	return Stat;
 8001e52:	4b03      	ldr	r3, [pc, #12]	; (8001e60 <SD_disk_initialize+0x1c8>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	b2db      	uxtb	r3, r3
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd90      	pop	{r4, r7, pc}
 8001e60:	20000000 	.word	0x20000000
 8001e64:	200057bd 	.word	0x200057bd
 8001e68:	200007a1 	.word	0x200007a1

08001e6c <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
	if (drv)
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <SD_disk_status+0x14>
		return STA_NOINIT;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e002      	b.n	8001e86 <SD_disk_status+0x1a>

	return Stat;
 8001e80:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <SD_disk_status+0x28>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	b2db      	uxtb	r3, r3
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	20000000 	.word	0x20000000

08001e98 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
 8001ea2:	603b      	str	r3, [r7, #0]
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d102      	bne.n	8001eb4 <SD_disk_read+0x1c>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <SD_disk_read+0x20>
		return RES_PARERR;
 8001eb4:	2304      	movs	r3, #4
 8001eb6:	e051      	b.n	8001f5c <SD_disk_read+0xc4>

	if (Stat & STA_NOINIT)
 8001eb8:	4b2a      	ldr	r3, [pc, #168]	; (8001f64 <SD_disk_read+0xcc>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <SD_disk_read+0x32>
		return RES_NOTRDY;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e048      	b.n	8001f5c <SD_disk_read+0xc4>

	if (!(CardType & 4))
 8001eca:	4b27      	ldr	r3, [pc, #156]	; (8001f68 <SD_disk_read+0xd0>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	f003 0304 	and.w	r3, r3, #4
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d102      	bne.n	8001edc <SD_disk_read+0x44>
		sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	025b      	lsls	r3, r3, #9
 8001eda:	607b      	str	r3, [r7, #4]

	SELECT();
 8001edc:	f7ff fd22 	bl	8001924 <SELECT>

	if (count == 1)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d111      	bne.n	8001f0a <SD_disk_read+0x72>
	{
		/* 싱글 블록 읽기 */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	2051      	movs	r0, #81	; 0x51
 8001eea:	f7ff fe83 	bl	8001bf4 <SD_SendCmd>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d129      	bne.n	8001f48 <SD_disk_read+0xb0>
 8001ef4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ef8:	68b8      	ldr	r0, [r7, #8]
 8001efa:	f7ff fdf1 	bl	8001ae0 <SD_RxDataBlock>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d021      	beq.n	8001f48 <SD_disk_read+0xb0>
			count = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	603b      	str	r3, [r7, #0]
 8001f08:	e01e      	b.n	8001f48 <SD_disk_read+0xb0>
	}
	else
	{
		/* 다중 블록 읽기 */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	2052      	movs	r0, #82	; 0x52
 8001f0e:	f7ff fe71 	bl	8001bf4 <SD_SendCmd>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d117      	bne.n	8001f48 <SD_disk_read+0xb0>
		{
			do
			{
				if (!SD_RxDataBlock(buff, 512))
 8001f18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f1c:	68b8      	ldr	r0, [r7, #8]
 8001f1e:	f7ff fddf 	bl	8001ae0 <SD_RxDataBlock>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00a      	beq.n	8001f3e <SD_disk_read+0xa6>
					break;

				buff += 512;
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001f2e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	603b      	str	r3, [r7, #0]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1ed      	bne.n	8001f18 <SD_disk_read+0x80>
 8001f3c:	e000      	b.n	8001f40 <SD_disk_read+0xa8>
					break;
 8001f3e:	bf00      	nop

			/* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
			SD_SendCmd(CMD12, 0);
 8001f40:	2100      	movs	r1, #0
 8001f42:	204c      	movs	r0, #76	; 0x4c
 8001f44:	f7ff fe56 	bl	8001bf4 <SD_SendCmd>
		}
	}

	DESELECT();
 8001f48:	f7ff fcf8 	bl	800193c <DESELECT>
	SPI_RxByte(); /* Idle 상태(Release DO) */
 8001f4c:	f7ff fd1c 	bl	8001988 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	bf14      	ite	ne
 8001f56:	2301      	movne	r3, #1
 8001f58:	2300      	moveq	r3, #0
 8001f5a:	b2db      	uxtb	r3, r3
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20000000 	.word	0x20000000
 8001f68:	200007a1 	.word	0x200007a1

08001f6c <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE *buff, DWORD sector, UINT count)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60b9      	str	r1, [r7, #8]
 8001f74:	607a      	str	r2, [r7, #4]
 8001f76:	603b      	str	r3, [r7, #0]
 8001f78:	4603      	mov	r3, r0
 8001f7a:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d102      	bne.n	8001f88 <SD_disk_write+0x1c>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <SD_disk_write+0x20>
		return RES_PARERR;
 8001f88:	2304      	movs	r3, #4
 8001f8a:	e06b      	b.n	8002064 <SD_disk_write+0xf8>

	if (Stat & STA_NOINIT)
 8001f8c:	4b37      	ldr	r3, [pc, #220]	; (800206c <SD_disk_write+0x100>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <SD_disk_write+0x32>
		return RES_NOTRDY;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e062      	b.n	8002064 <SD_disk_write+0xf8>

	if (Stat & STA_PROTECT)
 8001f9e:	4b33      	ldr	r3, [pc, #204]	; (800206c <SD_disk_write+0x100>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <SD_disk_write+0x44>
		return RES_WRPRT;
 8001fac:	2302      	movs	r3, #2
 8001fae:	e059      	b.n	8002064 <SD_disk_write+0xf8>

	if (!(CardType & 4))
 8001fb0:	4b2f      	ldr	r3, [pc, #188]	; (8002070 <SD_disk_write+0x104>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d102      	bne.n	8001fc2 <SD_disk_write+0x56>
		sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	025b      	lsls	r3, r3, #9
 8001fc0:	607b      	str	r3, [r7, #4]

	SELECT();
 8001fc2:	f7ff fcaf 	bl	8001924 <SELECT>

	if (count == 1)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d110      	bne.n	8001fee <SD_disk_write+0x82>
	{
		/* 싱글 블록 쓰기 */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	2058      	movs	r0, #88	; 0x58
 8001fd0:	f7ff fe10 	bl	8001bf4 <SD_SendCmd>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d13a      	bne.n	8002050 <SD_disk_write+0xe4>
 8001fda:	21fe      	movs	r1, #254	; 0xfe
 8001fdc:	68b8      	ldr	r0, [r7, #8]
 8001fde:	f7ff fdb5 	bl	8001b4c <SD_TxDataBlock>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d033      	beq.n	8002050 <SD_disk_write+0xe4>
			count = 0;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	e030      	b.n	8002050 <SD_disk_write+0xe4>
	}
	else
	{
		/* 다중 블록 쓰기 */
		if (CardType & 2)
 8001fee:	4b20      	ldr	r3, [pc, #128]	; (8002070 <SD_disk_write+0x104>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d007      	beq.n	800200a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	2077      	movs	r0, #119	; 0x77
 8001ffe:	f7ff fdf9 	bl	8001bf4 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8002002:	6839      	ldr	r1, [r7, #0]
 8002004:	2057      	movs	r0, #87	; 0x57
 8002006:	f7ff fdf5 	bl	8001bf4 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	2059      	movs	r0, #89	; 0x59
 800200e:	f7ff fdf1 	bl	8001bf4 <SD_SendCmd>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d11b      	bne.n	8002050 <SD_disk_write+0xe4>
		{
			do
			{
				if (!SD_TxDataBlock(buff, 0xFC))
 8002018:	21fc      	movs	r1, #252	; 0xfc
 800201a:	68b8      	ldr	r0, [r7, #8]
 800201c:	f7ff fd96 	bl	8001b4c <SD_TxDataBlock>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00a      	beq.n	800203c <SD_disk_write+0xd0>
					break;

				buff += 512;
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800202c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	3b01      	subs	r3, #1
 8002032:	603b      	str	r3, [r7, #0]
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1ee      	bne.n	8002018 <SD_disk_write+0xac>
 800203a:	e000      	b.n	800203e <SD_disk_write+0xd2>
					break;
 800203c:	bf00      	nop

			if (!SD_TxDataBlock(0, 0xFD))
 800203e:	21fd      	movs	r1, #253	; 0xfd
 8002040:	2000      	movs	r0, #0
 8002042:	f7ff fd83 	bl	8001b4c <SD_TxDataBlock>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <SD_disk_write+0xe4>
			{
				count = 1;
 800204c:	2301      	movs	r3, #1
 800204e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	DESELECT();
 8002050:	f7ff fc74 	bl	800193c <DESELECT>
	SPI_RxByte();
 8002054:	f7ff fc98 	bl	8001988 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	bf14      	ite	ne
 800205e:	2301      	movne	r3, #1
 8002060:	2300      	moveq	r3, #0
 8002062:	b2db      	uxtb	r3, r3
}
 8002064:	4618      	mov	r0, r3
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000000 	.word	0x20000000
 8002070:	200007a1 	.word	0x200007a1

08002074 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8002074:	b590      	push	{r4, r7, lr}
 8002076:	b08b      	sub	sp, #44	; 0x2c
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	603a      	str	r2, [r7, #0]
 800207e:	71fb      	strb	r3, [r7, #7]
 8002080:	460b      	mov	r3, r1
 8002082:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	623b      	str	r3, [r7, #32]
	WORD csize;

	if (drv)
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <SD_disk_ioctl+0x1e>
		return RES_PARERR;
 800208e:	2304      	movs	r3, #4
 8002090:	e11b      	b.n	80022ca <SD_disk_ioctl+0x256>

	res = RES_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8002098:	79bb      	ldrb	r3, [r7, #6]
 800209a:	2b05      	cmp	r3, #5
 800209c:	d129      	bne.n	80020f2 <SD_disk_ioctl+0x7e>
	{
		switch (*ptr)
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d017      	beq.n	80020d6 <SD_disk_ioctl+0x62>
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	dc1f      	bgt.n	80020ea <SD_disk_ioctl+0x76>
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d002      	beq.n	80020b4 <SD_disk_ioctl+0x40>
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d00b      	beq.n	80020ca <SD_disk_ioctl+0x56>
 80020b2:	e01a      	b.n	80020ea <SD_disk_ioctl+0x76>
		{
		case 0:
			if (SD_CheckPower())
 80020b4:	f7ff fd08 	bl	8001ac8 <SD_CheckPower>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <SD_disk_ioctl+0x4e>
				SD_PowerOff(); /* Power Off */
 80020be:	f7ff fcf7 	bl	8001ab0 <SD_PowerOff>
			res = RES_OK;
 80020c2:	2300      	movs	r3, #0
 80020c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80020c8:	e0fd      	b.n	80022c6 <SD_disk_ioctl+0x252>
		case 1:
			SD_PowerOn(); /* Power On */
 80020ca:	f7ff fca5 	bl	8001a18 <SD_PowerOn>
			res = RES_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80020d4:	e0f7      	b.n	80022c6 <SD_disk_ioctl+0x252>
		case 2:
			*(ptr + 1) = (BYTE) SD_CheckPower();
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	1c5c      	adds	r4, r3, #1
 80020da:	f7ff fcf5 	bl	8001ac8 <SD_CheckPower>
 80020de:	4603      	mov	r3, r0
 80020e0:	7023      	strb	r3, [r4, #0]
			res = RES_OK; /* Power Check */
 80020e2:	2300      	movs	r3, #0
 80020e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80020e8:	e0ed      	b.n	80022c6 <SD_disk_ioctl+0x252>
		default:
			res = RES_PARERR;
 80020ea:	2304      	movs	r3, #4
 80020ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80020f0:	e0e9      	b.n	80022c6 <SD_disk_ioctl+0x252>
		}
	}
	else
	{
		if (Stat & STA_NOINIT)
 80020f2:	4b78      	ldr	r3, [pc, #480]	; (80022d4 <SD_disk_ioctl+0x260>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <SD_disk_ioctl+0x90>
			return RES_NOTRDY;
 8002100:	2303      	movs	r3, #3
 8002102:	e0e2      	b.n	80022ca <SD_disk_ioctl+0x256>

		SELECT();
 8002104:	f7ff fc0e 	bl	8001924 <SELECT>

		switch (ctrl)
 8002108:	79bb      	ldrb	r3, [r7, #6]
 800210a:	2b0d      	cmp	r3, #13
 800210c:	f200 80cc 	bhi.w	80022a8 <SD_disk_ioctl+0x234>
 8002110:	a201      	add	r2, pc, #4	; (adr r2, 8002118 <SD_disk_ioctl+0xa4>)
 8002112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002116:	bf00      	nop
 8002118:	08002213 	.word	0x08002213
 800211c:	08002151 	.word	0x08002151
 8002120:	08002203 	.word	0x08002203
 8002124:	080022a9 	.word	0x080022a9
 8002128:	080022a9 	.word	0x080022a9
 800212c:	080022a9 	.word	0x080022a9
 8002130:	080022a9 	.word	0x080022a9
 8002134:	080022a9 	.word	0x080022a9
 8002138:	080022a9 	.word	0x080022a9
 800213c:	080022a9 	.word	0x080022a9
 8002140:	080022a9 	.word	0x080022a9
 8002144:	08002225 	.word	0x08002225
 8002148:	08002249 	.word	0x08002249
 800214c:	0800226d 	.word	0x0800226d
		{
		case GET_SECTOR_COUNT:
			/* SD카드 내 Sector의 개수 (DWORD) */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002150:	2100      	movs	r1, #0
 8002152:	2049      	movs	r0, #73	; 0x49
 8002154:	f7ff fd4e 	bl	8001bf4 <SD_SendCmd>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	f040 80a8 	bne.w	80022b0 <SD_disk_ioctl+0x23c>
 8002160:	f107 030c 	add.w	r3, r7, #12
 8002164:	2110      	movs	r1, #16
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff fcba 	bl	8001ae0 <SD_RxDataBlock>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 809e 	beq.w	80022b0 <SD_disk_ioctl+0x23c>
			{
				if ((csd[0] >> 6) == 1)
 8002174:	7b3b      	ldrb	r3, [r7, #12]
 8002176:	099b      	lsrs	r3, r3, #6
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b01      	cmp	r3, #1
 800217c:	d10e      	bne.n	800219c <SD_disk_ioctl+0x128>
				{
					/* SDC ver 2.00 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800217e:	7d7b      	ldrb	r3, [r7, #21]
 8002180:	b29a      	uxth	r2, r3
 8002182:	7d3b      	ldrb	r3, [r7, #20]
 8002184:	b29b      	uxth	r3, r3
 8002186:	021b      	lsls	r3, r3, #8
 8002188:	b29b      	uxth	r3, r3
 800218a:	4413      	add	r3, r2
 800218c:	b29b      	uxth	r3, r3
 800218e:	3301      	adds	r3, #1
 8002190:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8002192:	8bfb      	ldrh	r3, [r7, #30]
 8002194:	029a      	lsls	r2, r3, #10
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	e02e      	b.n	80021fa <SD_disk_ioctl+0x186>
				}
				else
				{
					/* MMC or SDC ver 1.XX */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 800219c:	7c7b      	ldrb	r3, [r7, #17]
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	7dbb      	ldrb	r3, [r7, #22]
 80021a6:	09db      	lsrs	r3, r3, #7
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	4413      	add	r3, r2
 80021ac:	b2da      	uxtb	r2, r3
							+ ((csd[9] & 3) << 1) + 2;
 80021ae:	7d7b      	ldrb	r3, [r7, #21]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	f003 0306 	and.w	r3, r3, #6
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	4413      	add	r3, r2
 80021bc:	b2db      	uxtb	r3, r3
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 80021be:	3302      	adds	r3, #2
 80021c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 80021c4:	7d3b      	ldrb	r3, [r7, #20]
 80021c6:	099b      	lsrs	r3, r3, #6
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	7cfb      	ldrb	r3, [r7, #19]
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	4413      	add	r3, r2
 80021d6:	b29a      	uxth	r2, r3
							+ ((WORD) (csd[6] & 3) << 10) + 1;
 80021d8:	7cbb      	ldrb	r3, [r7, #18]
 80021da:	029b      	lsls	r3, r3, #10
 80021dc:	b29b      	uxth	r3, r3
 80021de:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	4413      	add	r3, r2
 80021e6:	b29b      	uxth	r3, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 80021e8:	3301      	adds	r3, #1
 80021ea:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80021ec:	8bfa      	ldrh	r2, [r7, #30]
 80021ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80021f2:	3b09      	subs	r3, #9
 80021f4:	409a      	lsls	r2, r3
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	601a      	str	r2, [r3, #0]
				}

				res = RES_OK;
 80021fa:	2300      	movs	r3, #0
 80021fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8002200:	e056      	b.n	80022b0 <SD_disk_ioctl+0x23c>

		case GET_SECTOR_SIZE:
			/* 섹터의 단위 크기 (WORD) */
			*(WORD*) buff = 512;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002208:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800220a:	2300      	movs	r3, #0
 800220c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002210:	e055      	b.n	80022be <SD_disk_ioctl+0x24a>

		case CTRL_SYNC:
			/* 쓰기 동기화 */
			if (SD_ReadyWait() == 0xFF)
 8002212:	f7ff fbe5 	bl	80019e0 <SD_ReadyWait>
 8002216:	4603      	mov	r3, r0
 8002218:	2bff      	cmp	r3, #255	; 0xff
 800221a:	d14b      	bne.n	80022b4 <SD_disk_ioctl+0x240>
				res = RES_OK;
 800221c:	2300      	movs	r3, #0
 800221e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002222:	e047      	b.n	80022b4 <SD_disk_ioctl+0x240>

		case MMC_GET_CSD:
			/* CSD 정보 수신 (16 bytes) */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002224:	2100      	movs	r1, #0
 8002226:	2049      	movs	r0, #73	; 0x49
 8002228:	f7ff fce4 	bl	8001bf4 <SD_SendCmd>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d142      	bne.n	80022b8 <SD_disk_ioctl+0x244>
 8002232:	2110      	movs	r1, #16
 8002234:	6a38      	ldr	r0, [r7, #32]
 8002236:	f7ff fc53 	bl	8001ae0 <SD_RxDataBlock>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d03b      	beq.n	80022b8 <SD_disk_ioctl+0x244>
				res = RES_OK;
 8002240:	2300      	movs	r3, #0
 8002242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002246:	e037      	b.n	80022b8 <SD_disk_ioctl+0x244>

		case MMC_GET_CID:
			/* CID 정보 수신 (16 bytes) */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002248:	2100      	movs	r1, #0
 800224a:	204a      	movs	r0, #74	; 0x4a
 800224c:	f7ff fcd2 	bl	8001bf4 <SD_SendCmd>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d132      	bne.n	80022bc <SD_disk_ioctl+0x248>
 8002256:	2110      	movs	r1, #16
 8002258:	6a38      	ldr	r0, [r7, #32]
 800225a:	f7ff fc41 	bl	8001ae0 <SD_RxDataBlock>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d02b      	beq.n	80022bc <SD_disk_ioctl+0x248>
				res = RES_OK;
 8002264:	2300      	movs	r3, #0
 8002266:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800226a:	e027      	b.n	80022bc <SD_disk_ioctl+0x248>

		case MMC_GET_OCR:
			/* OCR 정보 수신 (4 bytes) */
			if (SD_SendCmd(CMD58, 0) == 0)
 800226c:	2100      	movs	r1, #0
 800226e:	207a      	movs	r0, #122	; 0x7a
 8002270:	f7ff fcc0 	bl	8001bf4 <SD_SendCmd>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d116      	bne.n	80022a8 <SD_disk_ioctl+0x234>
			{
				for (n = 0; n < 4; n++)
 800227a:	2300      	movs	r3, #0
 800227c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002280:	e00b      	b.n	800229a <SD_disk_ioctl+0x226>
				{
					*ptr++ = SPI_RxByte();
 8002282:	6a3c      	ldr	r4, [r7, #32]
 8002284:	1c63      	adds	r3, r4, #1
 8002286:	623b      	str	r3, [r7, #32]
 8002288:	f7ff fb7e 	bl	8001988 <SPI_RxByte>
 800228c:	4603      	mov	r3, r0
 800228e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8002290:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002294:	3301      	adds	r3, #1
 8002296:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800229a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d9ef      	bls.n	8002282 <SD_disk_ioctl+0x20e>
				}

				res = RES_OK;
 80022a2:	2300      	movs	r3, #0
 80022a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}

		default:
			res = RES_PARERR;
 80022a8:	2304      	movs	r3, #4
 80022aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80022ae:	e006      	b.n	80022be <SD_disk_ioctl+0x24a>
			break;
 80022b0:	bf00      	nop
 80022b2:	e004      	b.n	80022be <SD_disk_ioctl+0x24a>
			break;
 80022b4:	bf00      	nop
 80022b6:	e002      	b.n	80022be <SD_disk_ioctl+0x24a>
			break;
 80022b8:	bf00      	nop
 80022ba:	e000      	b.n	80022be <SD_disk_ioctl+0x24a>
			break;
 80022bc:	bf00      	nop
		}

		DESELECT();
 80022be:	f7ff fb3d 	bl	800193c <DESELECT>
		SPI_RxByte();
 80022c2:	f7ff fb61 	bl	8001988 <SPI_RxByte>
	}

	return res;
 80022c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	372c      	adds	r7, #44	; 0x2c
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd90      	pop	{r4, r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000000 	.word	0x20000000

080022d8 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4a07      	ldr	r2, [pc, #28]	; (8002304 <vApplicationGetIdleTaskMemory+0x2c>)
 80022e8:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	4a06      	ldr	r2, [pc, #24]	; (8002308 <vApplicationGetIdleTaskMemory+0x30>)
 80022ee:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2280      	movs	r2, #128	; 0x80
 80022f4:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80022f6:	bf00      	nop
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	200053bc 	.word	0x200053bc
 8002308:	2000545c 	.word	0x2000545c

0800230c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800230c:	b5b0      	push	{r4, r5, r7, lr}
 800230e:	b0aa      	sub	sp, #168	; 0xa8
 8002310:	af00      	add	r7, sp, #0
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of travelSensorSem */
  osSemaphoreStaticDef(travelSensorSem, &travelSensorSemControlBlock);
 8002312:	2300      	movs	r3, #0
 8002314:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002318:	4b45      	ldr	r3, [pc, #276]	; (8002430 <MX_FREERTOS_Init+0x124>)
 800231a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  travelSensorSemHandle = osSemaphoreCreate(osSemaphore(travelSensorSem), 1);
 800231e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002322:	2101      	movs	r1, #1
 8002324:	4618      	mov	r0, r3
 8002326:	f009 fe2d 	bl	800bf84 <osSemaphoreCreate>
 800232a:	4603      	mov	r3, r0
 800232c:	4a41      	ldr	r2, [pc, #260]	; (8002434 <MX_FREERTOS_Init+0x128>)
 800232e:	6013      	str	r3, [r2, #0]

  /* definition and creation of SendData */
  osSemaphoreStaticDef(SendData, &SendDataControlBlock);
 8002330:	2300      	movs	r3, #0
 8002332:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002336:	4b40      	ldr	r3, [pc, #256]	; (8002438 <MX_FREERTOS_Init+0x12c>)
 8002338:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  SendDataHandle = osSemaphoreCreate(osSemaphore(SendData), 1);
 800233c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002340:	2101      	movs	r1, #1
 8002342:	4618      	mov	r0, r3
 8002344:	f009 fe1e 	bl	800bf84 <osSemaphoreCreate>
 8002348:	4603      	mov	r3, r0
 800234a:	4a3c      	ldr	r2, [pc, #240]	; (800243c <MX_FREERTOS_Init+0x130>)
 800234c:	6013      	str	r3, [r2, #0]

  /* definition and creation of buttonSem */
  osSemaphoreStaticDef(buttonSem, &buttonSemControlBlock);
 800234e:	2300      	movs	r3, #0
 8002350:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002354:	4b3a      	ldr	r3, [pc, #232]	; (8002440 <MX_FREERTOS_Init+0x134>)
 8002356:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  buttonSemHandle = osSemaphoreCreate(osSemaphore(buttonSem), 1);
 800235a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800235e:	2101      	movs	r1, #1
 8002360:	4618      	mov	r0, r3
 8002362:	f009 fe0f 	bl	800bf84 <osSemaphoreCreate>
 8002366:	4603      	mov	r3, r0
 8002368:	4a36      	ldr	r2, [pc, #216]	; (8002444 <MX_FREERTOS_Init+0x138>)
 800236a:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of buttonTask */
  osThreadStaticDef(buttonTask, buttonTaskInit, osPriorityNormal, 0, 128, buttonTaskBuffer, &buttonTaskControlBlock);
 800236c:	4b36      	ldr	r3, [pc, #216]	; (8002448 <MX_FREERTOS_Init+0x13c>)
 800236e:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8002372:	461d      	mov	r5, r3
 8002374:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002376:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002378:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800237c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buttonTaskHandle = osThreadCreate(osThread(buttonTask), NULL);
 8002380:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002384:	2100      	movs	r1, #0
 8002386:	4618      	mov	r0, r3
 8002388:	f009 fd9c 	bl	800bec4 <osThreadCreate>
 800238c:	4603      	mov	r3, r0
 800238e:	4a2f      	ldr	r2, [pc, #188]	; (800244c <MX_FREERTOS_Init+0x140>)
 8002390:	6013      	str	r3, [r2, #0]

  /* definition and creation of sensorRead */
  osThreadStaticDef(sensorRead, initSensorRead, osPriorityNormal, 0, 2048, sensorReadBuffer, &sensorReadControlBlock);
 8002392:	4b2f      	ldr	r3, [pc, #188]	; (8002450 <MX_FREERTOS_Init+0x144>)
 8002394:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002398:	461d      	mov	r5, r3
 800239a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800239c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800239e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sensorReadHandle = osThreadCreate(osThread(sensorRead), NULL);
 80023a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023aa:	2100      	movs	r1, #0
 80023ac:	4618      	mov	r0, r3
 80023ae:	f009 fd89 	bl	800bec4 <osThreadCreate>
 80023b2:	4603      	mov	r3, r0
 80023b4:	4a27      	ldr	r2, [pc, #156]	; (8002454 <MX_FREERTOS_Init+0x148>)
 80023b6:	6013      	str	r3, [r2, #0]

  /* definition and creation of SdCard */
  osThreadStaticDef(SdCard, SdCardInit, osPriorityHigh, 0, 256, SdCardBuffer, &SdCardControlBlock);
 80023b8:	4b27      	ldr	r3, [pc, #156]	; (8002458 <MX_FREERTOS_Init+0x14c>)
 80023ba:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80023be:	461d      	mov	r5, r3
 80023c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SdCardHandle = osThreadCreate(osThread(SdCard), NULL);
 80023cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80023d0:	2100      	movs	r1, #0
 80023d2:	4618      	mov	r0, r3
 80023d4:	f009 fd76 	bl	800bec4 <osThreadCreate>
 80023d8:	4603      	mov	r3, r0
 80023da:	4a20      	ldr	r2, [pc, #128]	; (800245c <MX_FREERTOS_Init+0x150>)
 80023dc:	6013      	str	r3, [r2, #0]

  /* definition and creation of menuProcessData */
  osThreadStaticDef(menuProcessData, menuProcessDataInit, osPriorityNormal, 0, 2048, menuProcessDataBuffer, &menuProcessDataControlBlock);
 80023de:	4b20      	ldr	r3, [pc, #128]	; (8002460 <MX_FREERTOS_Init+0x154>)
 80023e0:	f107 0420 	add.w	r4, r7, #32
 80023e4:	461d      	mov	r5, r3
 80023e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  menuProcessDataHandle = osThreadCreate(osThread(menuProcessData), NULL);
 80023f2:	f107 0320 	add.w	r3, r7, #32
 80023f6:	2100      	movs	r1, #0
 80023f8:	4618      	mov	r0, r3
 80023fa:	f009 fd63 	bl	800bec4 <osThreadCreate>
 80023fe:	4603      	mov	r3, r0
 8002400:	4a18      	ldr	r2, [pc, #96]	; (8002464 <MX_FREERTOS_Init+0x158>)
 8002402:	6013      	str	r3, [r2, #0]

  /* definition and creation of lcdTask */
  osThreadStaticDef(lcdTask, lcdTaskInit, osPriorityNormal, 0, 128, lcdTaskBuffer, &lcdTaskControlBlock);
 8002404:	4b18      	ldr	r3, [pc, #96]	; (8002468 <MX_FREERTOS_Init+0x15c>)
 8002406:	1d3c      	adds	r4, r7, #4
 8002408:	461d      	mov	r5, r3
 800240a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800240c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800240e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002412:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lcdTaskHandle = osThreadCreate(osThread(lcdTask), NULL);
 8002416:	1d3b      	adds	r3, r7, #4
 8002418:	2100      	movs	r1, #0
 800241a:	4618      	mov	r0, r3
 800241c:	f009 fd52 	bl	800bec4 <osThreadCreate>
 8002420:	4603      	mov	r3, r0
 8002422:	4a12      	ldr	r2, [pc, #72]	; (800246c <MX_FREERTOS_Init+0x160>)
 8002424:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002426:	bf00      	nop
 8002428:	37a8      	adds	r7, #168	; 0xa8
 800242a:	46bd      	mov	sp, r7
 800242c:	bdb0      	pop	{r4, r5, r7, pc}
 800242e:	bf00      	nop
 8002430:	200052dc 	.word	0x200052dc
 8002434:	200052d8 	.word	0x200052d8
 8002438:	20005328 	.word	0x20005328
 800243c:	20005324 	.word	0x20005324
 8002440:	20005374 	.word	0x20005374
 8002444:	20005370 	.word	0x20005370
 8002448:	08011a40 	.word	0x08011a40
 800244c:	200007a4 	.word	0x200007a4
 8002450:	08011a68 	.word	0x08011a68
 8002454:	20000a48 	.word	0x20000a48
 8002458:	08011a8c 	.word	0x08011a8c
 800245c:	20002aec 	.word	0x20002aec
 8002460:	08011ab8 	.word	0x08011ab8
 8002464:	20002f90 	.word	0x20002f90
 8002468:	08011adc 	.word	0x08011adc
 800246c:	20005034 	.word	0x20005034

08002470 <buttonTaskInit>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_buttonTaskInit */
void buttonTaskInit(void const * argument)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN buttonTaskInit */
	/* Infinite loop */
	for (;;)
	{
		buttonMenu = readButton();
 8002478:	f7ff f9c8 	bl	800180c <readButton>
 800247c:	4603      	mov	r3, r0
 800247e:	461a      	mov	r2, r3
 8002480:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <buttonTaskInit+0x30>)
 8002482:	701a      	strb	r2, [r3, #0]
		if ( MAX_ACTIVE_BUTTON >= buttonMenu)
 8002484:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <buttonTaskInit+0x30>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b04      	cmp	r3, #4
 800248a:	d804      	bhi.n	8002496 <buttonTaskInit+0x26>
		{
			osSemaphoreRelease(buttonSemHandle);
 800248c:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <buttonTaskInit+0x34>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f009 fdf7 	bl	800c084 <osSemaphoreRelease>
		}
		osDelay(30);
 8002496:	201e      	movs	r0, #30
 8002498:	f009 fd60 	bl	800bf5c <osDelay>
		buttonMenu = readButton();
 800249c:	e7ec      	b.n	8002478 <buttonTaskInit+0x8>
 800249e:	bf00      	nop
 80024a0:	20000001 	.word	0x20000001
 80024a4:	20005370 	.word	0x20005370

080024a8 <initSensorRead>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_initSensorRead */
void initSensorRead(void const * argument)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for (;;)
	{

		osDelay(30);
 80024b0:	201e      	movs	r0, #30
 80024b2:	f009 fd53 	bl	800bf5c <osDelay>
 80024b6:	e7fb      	b.n	80024b0 <initSensorRead+0x8>

080024b8 <SdCardInit>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_SdCardInit */
void SdCardInit(void const * argument)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SdCardInit */
	puts(
 80024c0:	480b      	ldr	r0, [pc, #44]	; (80024f0 <SdCardInit+0x38>)
 80024c2:	f00c fe97 	bl	800f1f4 <puts>
			"jestes w menu start, kliknij:\n1.Pomiar Sagu\n2.Rozpocznij pomiary pracy zawieszenia\n");
	/* Infinite loop */
	for (;;)
	{

		if (MAX_ACTIVE_BUTTON >= buttonMenu)
 80024c6:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <SdCardInit+0x3c>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d804      	bhi.n	80024d8 <SdCardInit+0x20>
		{
			menuSelector(buttonMenu);
 80024ce:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <SdCardInit+0x3c>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 fcde 	bl	8002e94 <menuSelector>
		}
		osSemaphoreWait(buttonSemHandle, osWaitForever);
 80024d8:	4b07      	ldr	r3, [pc, #28]	; (80024f8 <SdCardInit+0x40>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f04f 31ff 	mov.w	r1, #4294967295
 80024e0:	4618      	mov	r0, r3
 80024e2:	f009 fd81 	bl	800bfe8 <osSemaphoreWait>
		osDelay(20);
 80024e6:	2014      	movs	r0, #20
 80024e8:	f009 fd38 	bl	800bf5c <osDelay>
		if (MAX_ACTIVE_BUTTON >= buttonMenu)
 80024ec:	e7eb      	b.n	80024c6 <SdCardInit+0xe>
 80024ee:	bf00      	nop
 80024f0:	08011af8 	.word	0x08011af8
 80024f4:	20000001 	.word	0x20000001
 80024f8:	20005370 	.word	0x20005370

080024fc <menuProcessDataInit>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_menuProcessDataInit */
void menuProcessDataInit(void const * argument)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN menuProcessDataInit */
	/* Infinite loop */
	for (;;)
	{
		menuCalculateBlock();
 8002504:	f000 fd96 	bl	8003034 <menuCalculateBlock>
		osDelay(10);
 8002508:	200a      	movs	r0, #10
 800250a:	f009 fd27 	bl	800bf5c <osDelay>
		menuCalculateBlock();
 800250e:	e7f9      	b.n	8002504 <menuProcessDataInit+0x8>

08002510 <lcdTaskInit>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_lcdTaskInit */
void lcdTaskInit(void const * argument)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN lcdTaskInit */
  /* Infinite loop */
	  HD44780_Init(2);
 8002518:	2002      	movs	r0, #2
 800251a:	f000 f961 	bl	80027e0 <HD44780_Init>
	  HD44780_Clear();
 800251e:	f000 f9e3 	bl	80028e8 <HD44780_Clear>
	  HD44780_SetCursor(0,0);
 8002522:	2100      	movs	r1, #0
 8002524:	2000      	movs	r0, #0
 8002526:	f000 f9f5 	bl	8002914 <HD44780_SetCursor>
	  HD44780_PrintStr("HELLO");
 800252a:	4828      	ldr	r0, [pc, #160]	; (80025cc <lcdTaskInit+0xbc>)
 800252c:	f000 fad1 	bl	8002ad2 <HD44780_PrintStr>
	  HD44780_SetCursor(10,1);
 8002530:	2101      	movs	r1, #1
 8002532:	200a      	movs	r0, #10
 8002534:	f000 f9ee 	bl	8002914 <HD44780_SetCursor>
	  HD44780_PrintStr("WORLD");
 8002538:	4825      	ldr	r0, [pc, #148]	; (80025d0 <lcdTaskInit+0xc0>)
 800253a:	f000 faca 	bl	8002ad2 <HD44780_PrintStr>
	  osDelay(2000);
 800253e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002542:	f009 fd0b 	bl	800bf5c <osDelay>

	  HD44780_Clear();
 8002546:	f000 f9cf 	bl	80028e8 <HD44780_Clear>
	  HD44780_SetCursor(0,0);
 800254a:	2100      	movs	r1, #0
 800254c:	2000      	movs	r0, #0
 800254e:	f000 f9e1 	bl	8002914 <HD44780_SetCursor>
	  HD44780_PrintStr("HELLO");
 8002552:	481e      	ldr	r0, [pc, #120]	; (80025cc <lcdTaskInit+0xbc>)
 8002554:	f000 fabd 	bl	8002ad2 <HD44780_PrintStr>
	  osDelay(2000);
 8002558:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800255c:	f009 fcfe 	bl	800bf5c <osDelay>
	  HD44780_NoBacklight();
 8002560:	f000 facc 	bl	8002afc <HD44780_NoBacklight>
	  osDelay(2000);
 8002564:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002568:	f009 fcf8 	bl	800bf5c <osDelay>
	  HD44780_Backlight();
 800256c:	f000 fad2 	bl	8002b14 <HD44780_Backlight>

	  osDelay(2000);
 8002570:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002574:	f009 fcf2 	bl	800bf5c <osDelay>
	  HD44780_Cursor();
 8002578:	f000 fa40 	bl	80029fc <HD44780_Cursor>
	  osDelay(2000);
 800257c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002580:	f009 fcec 	bl	800bf5c <osDelay>
	  HD44780_Blink();
 8002584:	f000 fa66 	bl	8002a54 <HD44780_Blink>
	  osDelay(5000);
 8002588:	f241 3088 	movw	r0, #5000	; 0x1388
 800258c:	f009 fce6 	bl	800bf5c <osDelay>
	  HD44780_NoBlink();
 8002590:	f000 fa4a 	bl	8002a28 <HD44780_NoBlink>
	  osDelay(2000);
 8002594:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002598:	f009 fce0 	bl	800bf5c <osDelay>
	  HD44780_NoCursor();
 800259c:	f000 fa18 	bl	80029d0 <HD44780_NoCursor>
	  osDelay(2000);
 80025a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80025a4:	f009 fcda 	bl	800bf5c <osDelay>

	  HD44780_NoDisplay();
 80025a8:	f000 f9e6 	bl	8002978 <HD44780_NoDisplay>
	  osDelay(2000);
 80025ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80025b0:	f009 fcd4 	bl	800bf5c <osDelay>
	  HD44780_Display();
 80025b4:	f000 f9f6 	bl	80029a4 <HD44780_Display>

	  HD44780_Clear();
 80025b8:	f000 f996 	bl	80028e8 <HD44780_Clear>
	  HD44780_SetCursor(0,0);
 80025bc:	2100      	movs	r1, #0
 80025be:	2000      	movs	r0, #0
 80025c0:	f000 f9a8 	bl	8002914 <HD44780_SetCursor>
  for(;;)
  {

    osDelay(1);
 80025c4:	2001      	movs	r0, #1
 80025c6:	f009 fcc9 	bl	800bf5c <osDelay>
 80025ca:	e7fb      	b.n	80025c4 <lcdTaskInit+0xb4>
 80025cc:	08011b4c 	.word	0x08011b4c
 80025d0:	08011b54 	.word	0x08011b54

080025d4 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC5   ------> ADCx_IN15
*/
void MX_GPIO_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08a      	sub	sp, #40	; 0x28
 80025d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025da:	f107 0314 	add.w	r3, r7, #20
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	605a      	str	r2, [r3, #4]
 80025e4:	609a      	str	r2, [r3, #8]
 80025e6:	60da      	str	r2, [r3, #12]
 80025e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	4b3d      	ldr	r3, [pc, #244]	; (80026e4 <MX_GPIO_Init+0x110>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	4a3c      	ldr	r2, [pc, #240]	; (80026e4 <MX_GPIO_Init+0x110>)
 80025f4:	f043 0304 	orr.w	r3, r3, #4
 80025f8:	6313      	str	r3, [r2, #48]	; 0x30
 80025fa:	4b3a      	ldr	r3, [pc, #232]	; (80026e4 <MX_GPIO_Init+0x110>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	613b      	str	r3, [r7, #16]
 8002604:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	4b36      	ldr	r3, [pc, #216]	; (80026e4 <MX_GPIO_Init+0x110>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	4a35      	ldr	r2, [pc, #212]	; (80026e4 <MX_GPIO_Init+0x110>)
 8002610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002614:	6313      	str	r3, [r2, #48]	; 0x30
 8002616:	4b33      	ldr	r3, [pc, #204]	; (80026e4 <MX_GPIO_Init+0x110>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	60bb      	str	r3, [r7, #8]
 8002626:	4b2f      	ldr	r3, [pc, #188]	; (80026e4 <MX_GPIO_Init+0x110>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	4a2e      	ldr	r2, [pc, #184]	; (80026e4 <MX_GPIO_Init+0x110>)
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	6313      	str	r3, [r2, #48]	; 0x30
 8002632:	4b2c      	ldr	r3, [pc, #176]	; (80026e4 <MX_GPIO_Init+0x110>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	60bb      	str	r3, [r7, #8]
 800263c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	607b      	str	r3, [r7, #4]
 8002642:	4b28      	ldr	r3, [pc, #160]	; (80026e4 <MX_GPIO_Init+0x110>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	4a27      	ldr	r2, [pc, #156]	; (80026e4 <MX_GPIO_Init+0x110>)
 8002648:	f043 0302 	orr.w	r3, r3, #2
 800264c:	6313      	str	r3, [r2, #48]	; 0x30
 800264e:	4b25      	ldr	r3, [pc, #148]	; (80026e4 <MX_GPIO_Init+0x110>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	607b      	str	r3, [r7, #4]
 8002658:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800265a:	2200      	movs	r2, #0
 800265c:	2120      	movs	r1, #32
 800265e:	4822      	ldr	r0, [pc, #136]	; (80026e8 <MX_GPIO_Init+0x114>)
 8002660:	f003 fa58 	bl	8005b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002664:	2200      	movs	r2, #0
 8002666:	2101      	movs	r1, #1
 8002668:	4820      	ldr	r0, [pc, #128]	; (80026ec <MX_GPIO_Init+0x118>)
 800266a:	f003 fa53 	bl	8005b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800266e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002674:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800267e:	f107 0314 	add.w	r3, r7, #20
 8002682:	4619      	mov	r1, r3
 8002684:	481a      	ldr	r0, [pc, #104]	; (80026f0 <MX_GPIO_Init+0x11c>)
 8002686:	f003 f8b1 	bl	80057ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800268a:	2320      	movs	r3, #32
 800268c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800268e:	2301      	movs	r3, #1
 8002690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002696:	2300      	movs	r3, #0
 8002698:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800269a:	f107 0314 	add.w	r3, r7, #20
 800269e:	4619      	mov	r1, r3
 80026a0:	4811      	ldr	r0, [pc, #68]	; (80026e8 <MX_GPIO_Init+0x114>)
 80026a2:	f003 f8a3 	bl	80057ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80026a6:	2320      	movs	r3, #32
 80026a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026aa:	2303      	movs	r3, #3
 80026ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b2:	f107 0314 	add.w	r3, r7, #20
 80026b6:	4619      	mov	r1, r3
 80026b8:	480d      	ldr	r0, [pc, #52]	; (80026f0 <MX_GPIO_Init+0x11c>)
 80026ba:	f003 f897 	bl	80057ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026be:	2301      	movs	r3, #1
 80026c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026c2:	2301      	movs	r3, #1
 80026c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ca:	2300      	movs	r3, #0
 80026cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ce:	f107 0314 	add.w	r3, r7, #20
 80026d2:	4619      	mov	r1, r3
 80026d4:	4805      	ldr	r0, [pc, #20]	; (80026ec <MX_GPIO_Init+0x118>)
 80026d6:	f003 f889 	bl	80057ec <HAL_GPIO_Init>

}
 80026da:	bf00      	nop
 80026dc:	3728      	adds	r7, #40	; 0x28
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40023800 	.word	0x40023800
 80026e8:	40020000 	.word	0x40020000
 80026ec:	40020400 	.word	0x40020400
 80026f0:	40020800 	.word	0x40020800

080026f4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026f8:	4b12      	ldr	r3, [pc, #72]	; (8002744 <MX_I2C1_Init+0x50>)
 80026fa:	4a13      	ldr	r2, [pc, #76]	; (8002748 <MX_I2C1_Init+0x54>)
 80026fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80026fe:	4b11      	ldr	r3, [pc, #68]	; (8002744 <MX_I2C1_Init+0x50>)
 8002700:	4a12      	ldr	r2, [pc, #72]	; (800274c <MX_I2C1_Init+0x58>)
 8002702:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002704:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <MX_I2C1_Init+0x50>)
 8002706:	2200      	movs	r2, #0
 8002708:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800270a:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <MX_I2C1_Init+0x50>)
 800270c:	2200      	movs	r2, #0
 800270e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002710:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <MX_I2C1_Init+0x50>)
 8002712:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002716:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002718:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <MX_I2C1_Init+0x50>)
 800271a:	2200      	movs	r2, #0
 800271c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800271e:	4b09      	ldr	r3, [pc, #36]	; (8002744 <MX_I2C1_Init+0x50>)
 8002720:	2200      	movs	r2, #0
 8002722:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002724:	4b07      	ldr	r3, [pc, #28]	; (8002744 <MX_I2C1_Init+0x50>)
 8002726:	2200      	movs	r2, #0
 8002728:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800272a:	4b06      	ldr	r3, [pc, #24]	; (8002744 <MX_I2C1_Init+0x50>)
 800272c:	2200      	movs	r2, #0
 800272e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002730:	4804      	ldr	r0, [pc, #16]	; (8002744 <MX_I2C1_Init+0x50>)
 8002732:	f003 fa09 	bl	8005b48 <HAL_I2C_Init>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800273c:	f000 fba4 	bl	8002e88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}
 8002744:	2000565c 	.word	0x2000565c
 8002748:	40005400 	.word	0x40005400
 800274c:	000186a0 	.word	0x000186a0

08002750 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08a      	sub	sp, #40	; 0x28
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	f107 0314 	add.w	r3, r7, #20
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
 8002766:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a19      	ldr	r2, [pc, #100]	; (80027d4 <HAL_I2C_MspInit+0x84>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d12c      	bne.n	80027cc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	4b18      	ldr	r3, [pc, #96]	; (80027d8 <HAL_I2C_MspInit+0x88>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	4a17      	ldr	r2, [pc, #92]	; (80027d8 <HAL_I2C_MspInit+0x88>)
 800277c:	f043 0302 	orr.w	r3, r3, #2
 8002780:	6313      	str	r3, [r2, #48]	; 0x30
 8002782:	4b15      	ldr	r3, [pc, #84]	; (80027d8 <HAL_I2C_MspInit+0x88>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800278e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002794:	2312      	movs	r3, #18
 8002796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279c:	2303      	movs	r3, #3
 800279e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027a0:	2304      	movs	r3, #4
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	4619      	mov	r1, r3
 80027aa:	480c      	ldr	r0, [pc, #48]	; (80027dc <HAL_I2C_MspInit+0x8c>)
 80027ac:	f003 f81e 	bl	80057ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <HAL_I2C_MspInit+0x88>)
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	4a07      	ldr	r2, [pc, #28]	; (80027d8 <HAL_I2C_MspInit+0x88>)
 80027ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027be:	6413      	str	r3, [r2, #64]	; 0x40
 80027c0:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <HAL_I2C_MspInit+0x88>)
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80027cc:	bf00      	nop
 80027ce:	3728      	adds	r7, #40	; 0x28
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40005400 	.word	0x40005400
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40020400 	.word	0x40020400

080027e0 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80027ea:	4a38      	ldr	r2, [pc, #224]	; (80028cc <HD44780_Init+0xec>)
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80027f0:	4b37      	ldr	r3, [pc, #220]	; (80028d0 <HD44780_Init+0xf0>)
 80027f2:	2208      	movs	r2, #8
 80027f4:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80027f6:	4b37      	ldr	r3, [pc, #220]	; (80028d4 <HD44780_Init+0xf4>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80027fc:	4b33      	ldr	r3, [pc, #204]	; (80028cc <HD44780_Init+0xec>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d907      	bls.n	8002814 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8002804:	4b33      	ldr	r3, [pc, #204]	; (80028d4 <HD44780_Init+0xf4>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	f043 0308 	orr.w	r3, r3, #8
 800280c:	b2da      	uxtb	r2, r3
 800280e:	4b31      	ldr	r3, [pc, #196]	; (80028d4 <HD44780_Init+0xf4>)
 8002810:	701a      	strb	r2, [r3, #0]
 8002812:	e006      	b.n	8002822 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8002814:	4b2f      	ldr	r3, [pc, #188]	; (80028d4 <HD44780_Init+0xf4>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	f043 0304 	orr.w	r3, r3, #4
 800281c:	b2da      	uxtb	r2, r3
 800281e:	4b2d      	ldr	r3, [pc, #180]	; (80028d4 <HD44780_Init+0xf4>)
 8002820:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8002822:	f000 fa0b 	bl	8002c3c <DelayInit>
  osDelay(50);
 8002826:	2032      	movs	r0, #50	; 0x32
 8002828:	f009 fb98 	bl	800bf5c <osDelay>

  ExpanderWrite(dpBacklight);
 800282c:	4b28      	ldr	r3, [pc, #160]	; (80028d0 <HD44780_Init+0xf0>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f000 f9c9 	bl	8002bc8 <ExpanderWrite>
  osDelay(1000);
 8002836:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800283a:	f009 fb8f 	bl	800bf5c <osDelay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800283e:	2030      	movs	r0, #48	; 0x30
 8002840:	f000 f9b1 	bl	8002ba6 <Write4Bits>
  DelayUS(4500);
 8002844:	f241 1094 	movw	r0, #4500	; 0x1194
 8002848:	f000 fa22 	bl	8002c90 <DelayUS>

  Write4Bits(0x03 << 4);
 800284c:	2030      	movs	r0, #48	; 0x30
 800284e:	f000 f9aa 	bl	8002ba6 <Write4Bits>
  DelayUS(4500);
 8002852:	f241 1094 	movw	r0, #4500	; 0x1194
 8002856:	f000 fa1b 	bl	8002c90 <DelayUS>

  Write4Bits(0x03 << 4);
 800285a:	2030      	movs	r0, #48	; 0x30
 800285c:	f000 f9a3 	bl	8002ba6 <Write4Bits>
  DelayUS(4500);
 8002860:	f241 1094 	movw	r0, #4500	; 0x1194
 8002864:	f000 fa14 	bl	8002c90 <DelayUS>

  Write4Bits(0x02 << 4);
 8002868:	2020      	movs	r0, #32
 800286a:	f000 f99c 	bl	8002ba6 <Write4Bits>
  DelayUS(100);
 800286e:	2064      	movs	r0, #100	; 0x64
 8002870:	f000 fa0e 	bl	8002c90 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8002874:	4b17      	ldr	r3, [pc, #92]	; (80028d4 <HD44780_Init+0xf4>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	f043 0320 	orr.w	r3, r3, #32
 800287c:	b2db      	uxtb	r3, r3
 800287e:	4618      	mov	r0, r3
 8002880:	f000 f954 	bl	8002b2c <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8002884:	4b14      	ldr	r3, [pc, #80]	; (80028d8 <HD44780_Init+0xf8>)
 8002886:	2204      	movs	r2, #4
 8002888:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800288a:	f000 f88b 	bl	80029a4 <HD44780_Display>
  HD44780_Clear();
 800288e:	f000 f82b 	bl	80028e8 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8002892:	4b12      	ldr	r3, [pc, #72]	; (80028dc <HD44780_Init+0xfc>)
 8002894:	2202      	movs	r2, #2
 8002896:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8002898:	4b10      	ldr	r3, [pc, #64]	; (80028dc <HD44780_Init+0xfc>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	f043 0304 	orr.w	r3, r3, #4
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 f942 	bl	8002b2c <SendCommand>
  DelayUS(4500);
 80028a8:	f241 1094 	movw	r0, #4500	; 0x1194
 80028ac:	f000 f9f0 	bl	8002c90 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80028b0:	490b      	ldr	r1, [pc, #44]	; (80028e0 <HD44780_Init+0x100>)
 80028b2:	2000      	movs	r0, #0
 80028b4:	f000 f8e4 	bl	8002a80 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80028b8:	490a      	ldr	r1, [pc, #40]	; (80028e4 <HD44780_Init+0x104>)
 80028ba:	2001      	movs	r0, #1
 80028bc:	f000 f8e0 	bl	8002a80 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80028c0:	f000 f81d 	bl	80028fe <HD44780_Home>
}
 80028c4:	bf00      	nop
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	200056b3 	.word	0x200056b3
 80028d0:	200056b4 	.word	0x200056b4
 80028d4:	200056b0 	.word	0x200056b0
 80028d8:	200056b1 	.word	0x200056b1
 80028dc:	200056b2 	.word	0x200056b2
 80028e0:	20000004 	.word	0x20000004
 80028e4:	2000000c 	.word	0x2000000c

080028e8 <HD44780_Clear>:

void HD44780_Clear()
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80028ec:	2001      	movs	r0, #1
 80028ee:	f000 f91d 	bl	8002b2c <SendCommand>
  DelayUS(2000);
 80028f2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80028f6:	f000 f9cb 	bl	8002c90 <DelayUS>
}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HD44780_Home>:

void HD44780_Home()
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8002902:	2002      	movs	r0, #2
 8002904:	f000 f912 	bl	8002b2c <SendCommand>
  DelayUS(2000);
 8002908:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800290c:	f000 f9c0 	bl	8002c90 <DelayUS>
}
 8002910:	bf00      	nop
 8002912:	bd80      	pop	{r7, pc}

08002914 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8002914:	b590      	push	{r4, r7, lr}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	460a      	mov	r2, r1
 800291e:	71fb      	strb	r3, [r7, #7]
 8002920:	4613      	mov	r3, r2
 8002922:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8002924:	4b12      	ldr	r3, [pc, #72]	; (8002970 <HD44780_SetCursor+0x5c>)
 8002926:	f107 0408 	add.w	r4, r7, #8
 800292a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800292c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8002930:	4b10      	ldr	r3, [pc, #64]	; (8002974 <HD44780_SetCursor+0x60>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	79ba      	ldrb	r2, [r7, #6]
 8002936:	429a      	cmp	r2, r3
 8002938:	d303      	bcc.n	8002942 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800293a:	4b0e      	ldr	r3, [pc, #56]	; (8002974 <HD44780_SetCursor+0x60>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	3b01      	subs	r3, #1
 8002940:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8002942:	79bb      	ldrb	r3, [r7, #6]
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	3318      	adds	r3, #24
 8002948:	443b      	add	r3, r7
 800294a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800294e:	b2da      	uxtb	r2, r3
 8002950:	79fb      	ldrb	r3, [r7, #7]
 8002952:	4413      	add	r3, r2
 8002954:	b2db      	uxtb	r3, r3
 8002956:	b25b      	sxtb	r3, r3
 8002958:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800295c:	b25b      	sxtb	r3, r3
 800295e:	b2db      	uxtb	r3, r3
 8002960:	4618      	mov	r0, r3
 8002962:	f000 f8e3 	bl	8002b2c <SendCommand>
}
 8002966:	bf00      	nop
 8002968:	371c      	adds	r7, #28
 800296a:	46bd      	mov	sp, r7
 800296c:	bd90      	pop	{r4, r7, pc}
 800296e:	bf00      	nop
 8002970:	08011b5c 	.word	0x08011b5c
 8002974:	200056b3 	.word	0x200056b3

08002978 <HD44780_NoDisplay>:

void HD44780_NoDisplay()
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_DISPLAYON;
 800297c:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <HD44780_NoDisplay+0x28>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	f023 0304 	bic.w	r3, r3, #4
 8002984:	b2da      	uxtb	r2, r3
 8002986:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <HD44780_NoDisplay+0x28>)
 8002988:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800298a:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <HD44780_NoDisplay+0x28>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	f043 0308 	orr.w	r3, r3, #8
 8002992:	b2db      	uxtb	r3, r3
 8002994:	4618      	mov	r0, r3
 8002996:	f000 f8c9 	bl	8002b2c <SendCommand>
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	200056b1 	.word	0x200056b1

080029a4 <HD44780_Display>:

void HD44780_Display()
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80029a8:	4b08      	ldr	r3, [pc, #32]	; (80029cc <HD44780_Display+0x28>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	f043 0304 	orr.w	r3, r3, #4
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	4b06      	ldr	r3, [pc, #24]	; (80029cc <HD44780_Display+0x28>)
 80029b4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80029b6:	4b05      	ldr	r3, [pc, #20]	; (80029cc <HD44780_Display+0x28>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	f043 0308 	orr.w	r3, r3, #8
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	4618      	mov	r0, r3
 80029c2:	f000 f8b3 	bl	8002b2c <SendCommand>
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	200056b1 	.word	0x200056b1

080029d0 <HD44780_NoCursor>:

void HD44780_NoCursor()
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_CURSORON;
 80029d4:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <HD44780_NoCursor+0x28>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	f023 0302 	bic.w	r3, r3, #2
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <HD44780_NoCursor+0x28>)
 80029e0:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80029e2:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <HD44780_NoCursor+0x28>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	f043 0308 	orr.w	r3, r3, #8
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	4618      	mov	r0, r3
 80029ee:	f000 f89d 	bl	8002b2c <SendCommand>
}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	200056b1 	.word	0x200056b1

080029fc <HD44780_Cursor>:

void HD44780_Cursor()
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  dpControl |= LCD_CURSORON;
 8002a00:	4b08      	ldr	r3, [pc, #32]	; (8002a24 <HD44780_Cursor+0x28>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	f043 0302 	orr.w	r3, r3, #2
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <HD44780_Cursor+0x28>)
 8002a0c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8002a0e:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <HD44780_Cursor+0x28>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	f043 0308 	orr.w	r3, r3, #8
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f000 f887 	bl	8002b2c <SendCommand>
}
 8002a1e:	bf00      	nop
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	200056b1 	.word	0x200056b1

08002a28 <HD44780_NoBlink>:

void HD44780_NoBlink()
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_BLINKON;
 8002a2c:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <HD44780_NoBlink+0x28>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	f023 0301 	bic.w	r3, r3, #1
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <HD44780_NoBlink+0x28>)
 8002a38:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8002a3a:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <HD44780_NoBlink+0x28>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	f043 0308 	orr.w	r3, r3, #8
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 f871 	bl	8002b2c <SendCommand>
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	200056b1 	.word	0x200056b1

08002a54 <HD44780_Blink>:

void HD44780_Blink()
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  dpControl |= LCD_BLINKON;
 8002a58:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <HD44780_Blink+0x28>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HD44780_Blink+0x28>)
 8002a64:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8002a66:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <HD44780_Blink+0x28>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	f043 0308 	orr.w	r3, r3, #8
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	4618      	mov	r0, r3
 8002a72:	f000 f85b 	bl	8002b2c <SendCommand>
}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	200056b1 	.word	0x200056b1

08002a80 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	6039      	str	r1, [r7, #0]
 8002a8a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8002a8c:	79fb      	ldrb	r3, [r7, #7]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8002a94:	79fb      	ldrb	r3, [r7, #7]
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	b25b      	sxtb	r3, r3
 8002a9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a9e:	b25b      	sxtb	r3, r3
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 f842 	bl	8002b2c <SendCommand>
  for (int i=0; i<8; i++)
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	e009      	b.n	8002ac2 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 f846 	bl	8002b48 <SendChar>
  for (int i=0; i<8; i++)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2b07      	cmp	r3, #7
 8002ac6:	ddf2      	ble.n	8002aae <HD44780_CreateSpecialChar+0x2e>
  }
}
 8002ac8:	bf00      	nop
 8002aca:	bf00      	nop
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8002ada:	e006      	b.n	8002aea <HD44780_PrintStr+0x18>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	1c5a      	adds	r2, r3, #1
 8002ae0:	607a      	str	r2, [r7, #4]
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 f82f 	bl	8002b48 <SendChar>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f4      	bne.n	8002adc <HD44780_PrintStr+0xa>
}
 8002af2:	bf00      	nop
 8002af4:	bf00      	nop
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HD44780_NoBacklight>:
  if(new_val) HD44780_Backlight();
  else HD44780_NoBacklight();
}

void HD44780_NoBacklight(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  dpBacklight=LCD_NOBACKLIGHT;
 8002b00:	4b03      	ldr	r3, [pc, #12]	; (8002b10 <HD44780_NoBacklight+0x14>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 8002b06:	2000      	movs	r0, #0
 8002b08:	f000 f85e 	bl	8002bc8 <ExpanderWrite>
}
 8002b0c:	bf00      	nop
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	200056b4 	.word	0x200056b4

08002b14 <HD44780_Backlight>:

void HD44780_Backlight(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  dpBacklight=LCD_BACKLIGHT;
 8002b18:	4b03      	ldr	r3, [pc, #12]	; (8002b28 <HD44780_Backlight+0x14>)
 8002b1a:	2208      	movs	r2, #8
 8002b1c:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 8002b1e:	2000      	movs	r0, #0
 8002b20:	f000 f852 	bl	8002bc8 <ExpanderWrite>
}
 8002b24:	bf00      	nop
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	200056b4 	.word	0x200056b4

08002b2c <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	2100      	movs	r1, #0
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 f812 	bl	8002b64 <Send>
}
 8002b40:	bf00      	nop
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <SendChar>:

static void SendChar(uint8_t ch)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	2101      	movs	r1, #1
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 f804 	bl	8002b64 <Send>
}
 8002b5c:	bf00      	nop
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	460a      	mov	r2, r1
 8002b6e:	71fb      	strb	r3, [r7, #7]
 8002b70:	4613      	mov	r3, r2
 8002b72:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8002b74:	79fb      	ldrb	r3, [r7, #7]
 8002b76:	f023 030f 	bic.w	r3, r3, #15
 8002b7a:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8002b82:	7bfa      	ldrb	r2, [r7, #15]
 8002b84:	79bb      	ldrb	r3, [r7, #6]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 f80b 	bl	8002ba6 <Write4Bits>
  Write4Bits((lownib)|mode);
 8002b90:	7bba      	ldrb	r2, [r7, #14]
 8002b92:	79bb      	ldrb	r3, [r7, #6]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f000 f804 	bl	8002ba6 <Write4Bits>
}
 8002b9e:	bf00      	nop
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	4603      	mov	r3, r0
 8002bae:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8002bb0:	79fb      	ldrb	r3, [r7, #7]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 f808 	bl	8002bc8 <ExpanderWrite>
  PulseEnable(value);
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 f820 	bl	8002c00 <PulseEnable>
}
 8002bc0:	bf00      	nop
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af02      	add	r7, sp, #8
 8002bce:	4603      	mov	r3, r0
 8002bd0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8002bd2:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <ExpanderWrite+0x30>)
 8002bd4:	781a      	ldrb	r2, [r3, #0]
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8002bde:	f107 020f 	add.w	r2, r7, #15
 8002be2:	230a      	movs	r3, #10
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	2301      	movs	r3, #1
 8002be8:	214e      	movs	r1, #78	; 0x4e
 8002bea:	4804      	ldr	r0, [pc, #16]	; (8002bfc <ExpanderWrite+0x34>)
 8002bec:	f003 f8f0 	bl	8005dd0 <HAL_I2C_Master_Transmit>
}
 8002bf0:	bf00      	nop
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	200056b4 	.word	0x200056b4
 8002bfc:	2000565c 	.word	0x2000565c

08002c00 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	f043 0304 	orr.w	r3, r3, #4
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff ffd8 	bl	8002bc8 <ExpanderWrite>
  DelayUS(20);
 8002c18:	2014      	movs	r0, #20
 8002c1a:	f000 f839 	bl	8002c90 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8002c1e:	79fb      	ldrb	r3, [r7, #7]
 8002c20:	f023 0304 	bic.w	r3, r3, #4
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff ffce 	bl	8002bc8 <ExpanderWrite>
  DelayUS(20);
 8002c2c:	2014      	movs	r0, #20
 8002c2e:	f000 f82f 	bl	8002c90 <DelayUS>
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <DelayInit>:

static void DelayInit(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8002c40:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <DelayInit+0x4c>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	4a10      	ldr	r2, [pc, #64]	; (8002c88 <DelayInit+0x4c>)
 8002c46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c4a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8002c4c:	4b0e      	ldr	r3, [pc, #56]	; (8002c88 <DelayInit+0x4c>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	4a0d      	ldr	r2, [pc, #52]	; (8002c88 <DelayInit+0x4c>)
 8002c52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c56:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8002c58:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <DelayInit+0x50>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a0b      	ldr	r2, [pc, #44]	; (8002c8c <DelayInit+0x50>)
 8002c5e:	f023 0301 	bic.w	r3, r3, #1
 8002c62:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8002c64:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <DelayInit+0x50>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a08      	ldr	r2, [pc, #32]	; (8002c8c <DelayInit+0x50>)
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8002c70:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <DelayInit+0x50>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8002c76:	bf00      	nop
  __ASM volatile ("NOP");
 8002c78:	bf00      	nop
  __ASM volatile ("NOP");
 8002c7a:	bf00      	nop
}
 8002c7c:	bf00      	nop
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	e000edf0 	.word	0xe000edf0
 8002c8c:	e0001000 	.word	0xe0001000

08002c90 <DelayUS>:

static void DelayUS(uint32_t us) {
 8002c90:	b480      	push	{r7}
 8002c92:	b087      	sub	sp, #28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8002c98:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <DelayUS+0x44>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a0e      	ldr	r2, [pc, #56]	; (8002cd8 <DelayUS+0x48>)
 8002c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca2:	0c9a      	lsrs	r2, r3, #18
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	fb02 f303 	mul.w	r3, r2, r3
 8002caa:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8002cac:	4b0b      	ldr	r3, [pc, #44]	; (8002cdc <DelayUS+0x4c>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8002cb2:	4b0a      	ldr	r3, [pc, #40]	; (8002cdc <DelayUS+0x4c>)
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d8f6      	bhi.n	8002cb2 <DelayUS+0x22>
}
 8002cc4:	bf00      	nop
 8002cc6:	bf00      	nop
 8002cc8:	371c      	adds	r7, #28
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	20000014 	.word	0x20000014
 8002cd8:	431bde83 	.word	0x431bde83
 8002cdc:	e0001000 	.word	0xe0001000

08002ce0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002ce8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002cec:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d013      	beq.n	8002d20 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002cf8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002cfc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002d00:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00b      	beq.n	8002d20 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002d08:	e000      	b.n	8002d0c <ITM_SendChar+0x2c>
    {
      __NOP();
 8002d0a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002d0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0f9      	beq.n	8002d0a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002d16:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002d20:	687b      	ldr	r3, [r7, #4]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b082      	sub	sp, #8
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff ffd1 	bl	8002ce0 <ITM_SendChar>
	return (ch);
 8002d3e:	687b      	ldr	r3, [r7, #4]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d4c:	f001 fa44 	bl	80041d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d50:	f000 f81c 	bl	8002d8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d54:	f7ff fc3e 	bl	80025d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002d58:	f7fe fdc4 	bl	80018e4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002d5c:	f001 f9a0 	bl	80040a0 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8002d60:	f000 f9a8 	bl	80030b4 <MX_SPI2_Init>
  MX_FATFS_Init();
 8002d64:	f006 f988 	bl	8009078 <MX_FATFS_Init>
  MX_TIM6_Init();
 8002d68:	f000 fca4 	bl	80036b4 <MX_TIM6_Init>
  MX_TIM8_Init();
 8002d6c:	f000 fcd8 	bl	8003720 <MX_TIM8_Init>
  MX_TIM2_Init();
 8002d70:	f000 fc2e 	bl	80035d0 <MX_TIM2_Init>
  MX_ADC2_Init();
 8002d74:	f7fe fbb6 	bl	80014e4 <MX_ADC2_Init>
  MX_ADC3_Init();
 8002d78:	f7fe fc32 	bl	80015e0 <MX_ADC3_Init>
  MX_I2C1_Init();
 8002d7c:	f7ff fcba 	bl	80026f4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002d80:	f7ff fac4 	bl	800230c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002d84:	f009 f887 	bl	800be96 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8002d88:	e7fe      	b.n	8002d88 <main+0x40>
	...

08002d8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b094      	sub	sp, #80	; 0x50
 8002d90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d92:	f107 031c 	add.w	r3, r7, #28
 8002d96:	2234      	movs	r2, #52	; 0x34
 8002d98:	2100      	movs	r1, #0
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f00c fb2a 	bl	800f3f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002da0:	f107 0308 	add.w	r3, r7, #8
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	605a      	str	r2, [r3, #4]
 8002daa:	609a      	str	r2, [r3, #8]
 8002dac:	60da      	str	r2, [r3, #12]
 8002dae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002db0:	2300      	movs	r3, #0
 8002db2:	607b      	str	r3, [r7, #4]
 8002db4:	4b29      	ldr	r3, [pc, #164]	; (8002e5c <SystemClock_Config+0xd0>)
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	4a28      	ldr	r2, [pc, #160]	; (8002e5c <SystemClock_Config+0xd0>)
 8002dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	6413      	str	r3, [r2, #64]	; 0x40
 8002dc0:	4b26      	ldr	r3, [pc, #152]	; (8002e5c <SystemClock_Config+0xd0>)
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc8:	607b      	str	r3, [r7, #4]
 8002dca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dcc:	2300      	movs	r3, #0
 8002dce:	603b      	str	r3, [r7, #0]
 8002dd0:	4b23      	ldr	r3, [pc, #140]	; (8002e60 <SystemClock_Config+0xd4>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a22      	ldr	r2, [pc, #136]	; (8002e60 <SystemClock_Config+0xd4>)
 8002dd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	4b20      	ldr	r3, [pc, #128]	; (8002e60 <SystemClock_Config+0xd4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002de4:	603b      	str	r3, [r7, #0]
 8002de6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002de8:	2302      	movs	r3, #2
 8002dea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002dec:	2301      	movs	r3, #1
 8002dee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002df0:	2310      	movs	r3, #16
 8002df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002df4:	2302      	movs	r3, #2
 8002df6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002dfc:	2308      	movs	r3, #8
 8002dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 8002e00:	2390      	movs	r3, #144	; 0x90
 8002e02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e04:	2302      	movs	r3, #2
 8002e06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002e08:	2302      	movs	r3, #2
 8002e0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e10:	f107 031c 	add.w	r3, r7, #28
 8002e14:	4618      	mov	r0, r3
 8002e16:	f003 fe5f 	bl	8006ad8 <HAL_RCC_OscConfig>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002e20:	f000 f832 	bl	8002e88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e24:	230f      	movs	r3, #15
 8002e26:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e28:	2302      	movs	r3, #2
 8002e2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002e30:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e3a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002e3c:	f107 0308 	add.w	r3, r7, #8
 8002e40:	2104      	movs	r1, #4
 8002e42:	4618      	mov	r0, r3
 8002e44:	f003 facc 	bl	80063e0 <HAL_RCC_ClockConfig>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002e4e:	f000 f81b 	bl	8002e88 <Error_Handler>
  }
}
 8002e52:	bf00      	nop
 8002e54:	3750      	adds	r7, #80	; 0x50
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	40007000 	.word	0x40007000

08002e64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a04      	ldr	r2, [pc, #16]	; (8002e84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d101      	bne.n	8002e7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002e76:	f001 f9d1 	bl	800421c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002e7a:	bf00      	nop
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40000400 	.word	0x40000400

08002e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e8c:	b672      	cpsid	i
}
 8002e8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002e90:	e7fe      	b.n	8002e90 <Error_Handler+0x8>
	...

08002e94 <menuSelector>:

/******************************************************************************
 * Function Definitions
 *******************************************************************************/
void menuSelector(button_t button)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af02      	add	r7, sp, #8
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	71fb      	strb	r3, [r7, #7]

	switch (selector)
 8002e9e:	4b53      	ldr	r3, [pc, #332]	; (8002fec <menuSelector+0x158>)
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	2b05      	cmp	r3, #5
 8002ea4:	f200 809e 	bhi.w	8002fe4 <menuSelector+0x150>
 8002ea8:	a201      	add	r2, pc, #4	; (adr r2, 8002eb0 <menuSelector+0x1c>)
 8002eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eae:	bf00      	nop
 8002eb0:	08002ec9 	.word	0x08002ec9
 8002eb4:	08002efd 	.word	0x08002efd
 8002eb8:	08002f31 	.word	0x08002f31
 8002ebc:	08002f63 	.word	0x08002f63
 8002ec0:	08002f7f 	.word	0x08002f7f
 8002ec4:	08002fc9 	.word	0x08002fc9
	{

	case (MENU_START):
		if (BUTTON_LEFT == button)
 8002ec8:	79fb      	ldrb	r3, [r7, #7]
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	d106      	bne.n	8002edc <menuSelector+0x48>
		{
			selector = MENU_SAG;
 8002ece:	4b47      	ldr	r3, [pc, #284]	; (8002fec <menuSelector+0x158>)
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	701a      	strb	r2, [r3, #0]
			puts(
 8002ed4:	4846      	ldr	r0, [pc, #280]	; (8002ff0 <menuSelector+0x15c>)
 8002ed6:	f00c f98d 	bl	800f1f4 <puts>
 8002eda:	e00c      	b.n	8002ef6 <menuSelector+0x62>
					"jestes w menu sag, kliknij select aby rozpoczac pomiar\nkliknij left aby rozoczac kalibracje\n");
		}
		else if (BUTTON_RIGHT == button)
 8002edc:	79fb      	ldrb	r3, [r7, #7]
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d106      	bne.n	8002ef0 <menuSelector+0x5c>
		{
			selector = MENU_MEASURMENT;
 8002ee2:	4b42      	ldr	r3, [pc, #264]	; (8002fec <menuSelector+0x158>)
 8002ee4:	2204      	movs	r2, #4
 8002ee6:	701a      	strb	r2, [r3, #0]
			puts(
 8002ee8:	4842      	ldr	r0, [pc, #264]	; (8002ff4 <menuSelector+0x160>)
 8002eea:	f00c f983 	bl	800f1f4 <puts>
 8002eee:	e002      	b.n	8002ef6 <menuSelector+0x62>
					"jestes w menu measurment, kliknij select aby rozpoczac pomiar\n");
		}
		else
		{
			puts(
 8002ef0:	4841      	ldr	r0, [pc, #260]	; (8002ff8 <menuSelector+0x164>)
 8002ef2:	f00c f97f 	bl	800f1f4 <puts>
					"jestes w menu start, kliknij:\n1.Pomiar Sagu\n2.Rozpocznij pomiary pracy zawieszenia\n");
		}
		stopAdcDma();
 8002ef6:	f000 fd1d 	bl	8003934 <stopAdcDma>
		break;
 8002efa:	e073      	b.n	8002fe4 <menuSelector+0x150>

	case (MENU_SAG):
		if (BUTTON_SELECT == button)
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d108      	bne.n	8002f14 <menuSelector+0x80>
		{
			startAdcDma();
 8002f02:	f000 fcf7 	bl	80038f4 <startAdcDma>
			selector = MENU_SAG_START;
 8002f06:	4b39      	ldr	r3, [pc, #228]	; (8002fec <menuSelector+0x158>)
 8002f08:	2203      	movs	r2, #3
 8002f0a:	701a      	strb	r2, [r3, #0]
			puts("pomiar rozpoczety, kliknij select aby zakonczyc\n");
 8002f0c:	483b      	ldr	r0, [pc, #236]	; (8002ffc <menuSelector+0x168>)
 8002f0e:	f00c f971 	bl	800f1f4 <puts>
		}
		else
		{
			puts("nacisnij select aby rozpoczac pomiar\n");
		}
		break;
 8002f12:	e067      	b.n	8002fe4 <menuSelector+0x150>
		else if (BUTTON_LEFT == button)
 8002f14:	79fb      	ldrb	r3, [r7, #7]
 8002f16:	2b03      	cmp	r3, #3
 8002f18:	d106      	bne.n	8002f28 <menuSelector+0x94>
			selector = MENU_CALIBRATION;
 8002f1a:	4b34      	ldr	r3, [pc, #208]	; (8002fec <menuSelector+0x158>)
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	701a      	strb	r2, [r3, #0]
			puts(
 8002f20:	4837      	ldr	r0, [pc, #220]	; (8003000 <menuSelector+0x16c>)
 8002f22:	f00c f967 	bl	800f1f4 <puts>
		break;
 8002f26:	e05d      	b.n	8002fe4 <menuSelector+0x150>
			puts("nacisnij select aby rozpoczac pomiar\n");
 8002f28:	4836      	ldr	r0, [pc, #216]	; (8003004 <menuSelector+0x170>)
 8002f2a:	f00c f963 	bl	800f1f4 <puts>
		break;
 8002f2e:	e059      	b.n	8002fe4 <menuSelector+0x150>
	case (MENU_CALIBRATION):
		if (BUTTON_SELECT == button)
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d107      	bne.n	8002f46 <menuSelector+0xb2>
		{
			startAdcDma();
 8002f36:	f000 fcdd 	bl	80038f4 <startAdcDma>
			travelPressureSensorCalibration();
 8002f3a:	f000 fd0f 	bl	800395c <travelPressureSensorCalibration>
			puts("nacisnij right aby wrocic do menu start\n");
 8002f3e:	4832      	ldr	r0, [pc, #200]	; (8003008 <menuSelector+0x174>)
 8002f40:	f00c f958 	bl	800f1f4 <puts>
		}
		else
		{
			puts("nacisnij select aby rozpoczac pomiar\n");
		}
		break;
 8002f44:	e04e      	b.n	8002fe4 <menuSelector+0x150>
		else if (BUTTON_RIGHT == button)
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	2b04      	cmp	r3, #4
 8002f4a:	d106      	bne.n	8002f5a <menuSelector+0xc6>
			selector = MENU_START;
 8002f4c:	4b27      	ldr	r3, [pc, #156]	; (8002fec <menuSelector+0x158>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	701a      	strb	r2, [r3, #0]
			puts(
 8002f52:	4829      	ldr	r0, [pc, #164]	; (8002ff8 <menuSelector+0x164>)
 8002f54:	f00c f94e 	bl	800f1f4 <puts>
		break;
 8002f58:	e044      	b.n	8002fe4 <menuSelector+0x150>
			puts("nacisnij select aby rozpoczac pomiar\n");
 8002f5a:	482a      	ldr	r0, [pc, #168]	; (8003004 <menuSelector+0x170>)
 8002f5c:	f00c f94a 	bl	800f1f4 <puts>
		break;
 8002f60:	e040      	b.n	8002fe4 <menuSelector+0x150>
	case (MENU_SAG_START):
		if (BUTTON_SELECT == button)
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d106      	bne.n	8002f76 <menuSelector+0xe2>
		{

			selector = MENU_START;
 8002f68:	4b20      	ldr	r3, [pc, #128]	; (8002fec <menuSelector+0x158>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	701a      	strb	r2, [r3, #0]
			puts(
 8002f6e:	4827      	ldr	r0, [pc, #156]	; (800300c <menuSelector+0x178>)
 8002f70:	f00c f940 	bl	800f1f4 <puts>
		}
		else
		{
			puts("nacisnij select aby wrocic do menu start");
		}
		break;
 8002f74:	e036      	b.n	8002fe4 <menuSelector+0x150>
			puts("nacisnij select aby wrocic do menu start");
 8002f76:	4826      	ldr	r0, [pc, #152]	; (8003010 <menuSelector+0x17c>)
 8002f78:	f00c f93c 	bl	800f1f4 <puts>
		break;
 8002f7c:	e032      	b.n	8002fe4 <menuSelector+0x150>

	case (MENU_MEASURMENT):
		if (BUTTON_SELECT == button)
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d11d      	bne.n	8002fc0 <menuSelector+0x12c>
		{
			setPath(dir, frontSensor, rearSensor, frontPressureSensor,
 8002f84:	4b23      	ldr	r3, [pc, #140]	; (8003014 <menuSelector+0x180>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	9301      	str	r3, [sp, #4]
 8002f8a:	4b23      	ldr	r3, [pc, #140]	; (8003018 <menuSelector+0x184>)
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	4b23      	ldr	r3, [pc, #140]	; (800301c <menuSelector+0x188>)
 8002f90:	4a23      	ldr	r2, [pc, #140]	; (8003020 <menuSelector+0x18c>)
 8002f92:	4924      	ldr	r1, [pc, #144]	; (8003024 <menuSelector+0x190>)
 8002f94:	4824      	ldr	r0, [pc, #144]	; (8003028 <menuSelector+0x194>)
 8002f96:	f7fd ffb5 	bl	8000f04 <setPath>
					rearPressureSensor, path);
			createNewFile(dir, frontSensor, rearSensor, frontPressureSensor,
 8002f9a:	4b1e      	ldr	r3, [pc, #120]	; (8003014 <menuSelector+0x180>)
 8002f9c:	9301      	str	r3, [sp, #4]
 8002f9e:	4b1e      	ldr	r3, [pc, #120]	; (8003018 <menuSelector+0x184>)
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	4b1e      	ldr	r3, [pc, #120]	; (800301c <menuSelector+0x188>)
 8002fa4:	4a1e      	ldr	r2, [pc, #120]	; (8003020 <menuSelector+0x18c>)
 8002fa6:	491f      	ldr	r1, [pc, #124]	; (8003024 <menuSelector+0x190>)
 8002fa8:	481f      	ldr	r0, [pc, #124]	; (8003028 <menuSelector+0x194>)
 8002faa:	f7fd ffdf 	bl	8000f6c <createNewFile>
					rearPressureSensor, &path);
			startAdcDma();
 8002fae:	f000 fca1 	bl	80038f4 <startAdcDma>
			selector = MENU_MEASURMENT_START;
 8002fb2:	4b0e      	ldr	r3, [pc, #56]	; (8002fec <menuSelector+0x158>)
 8002fb4:	2205      	movs	r2, #5
 8002fb6:	701a      	strb	r2, [r3, #0]
			puts("pomiar ciagly rozpoczety, kliknij select aby zakonczyc\n");
 8002fb8:	481c      	ldr	r0, [pc, #112]	; (800302c <menuSelector+0x198>)
 8002fba:	f00c f91b 	bl	800f1f4 <puts>
		}
		else
		{
			puts("nacisnij select aby rozpoczac pomiar\n");
		}
		break;
 8002fbe:	e011      	b.n	8002fe4 <menuSelector+0x150>
			puts("nacisnij select aby rozpoczac pomiar\n");
 8002fc0:	4810      	ldr	r0, [pc, #64]	; (8003004 <menuSelector+0x170>)
 8002fc2:	f00c f917 	bl	800f1f4 <puts>
		break;
 8002fc6:	e00d      	b.n	8002fe4 <menuSelector+0x150>

	case (MENU_MEASURMENT_START):
		if (BUTTON_SELECT == button)
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d106      	bne.n	8002fdc <menuSelector+0x148>
		{
			selector = MENU_START;
 8002fce:	4b07      	ldr	r3, [pc, #28]	; (8002fec <menuSelector+0x158>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	701a      	strb	r2, [r3, #0]
			puts(
 8002fd4:	4816      	ldr	r0, [pc, #88]	; (8003030 <menuSelector+0x19c>)
 8002fd6:	f00c f90d 	bl	800f1f4 <puts>
		}
		else
		{
			puts("nacisnij select aby wrocic do menu start");
		}
		break;
 8002fda:	e002      	b.n	8002fe2 <menuSelector+0x14e>
			puts("nacisnij select aby wrocic do menu start");
 8002fdc:	480c      	ldr	r0, [pc, #48]	; (8003010 <menuSelector+0x17c>)
 8002fde:	f00c f909 	bl	800f1f4 <puts>
		break;
 8002fe2:	bf00      	nop

	default:
	}

}
 8002fe4:	bf00      	nop
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	200056b5 	.word	0x200056b5
 8002ff0:	08011b6c 	.word	0x08011b6c
 8002ff4:	08011bcc 	.word	0x08011bcc
 8002ff8:	08011c0c 	.word	0x08011c0c
 8002ffc:	08011c60 	.word	0x08011c60
 8003000:	08011c94 	.word	0x08011c94
 8003004:	08011cd8 	.word	0x08011cd8
 8003008:	08011d00 	.word	0x08011d00
 800300c:	08011d2c 	.word	0x08011d2c
 8003010:	08011d94 	.word	0x08011d94
 8003014:	200056b6 	.word	0x200056b6
 8003018:	20005708 	.word	0x20005708
 800301c:	200056f4 	.word	0x200056f4
 8003020:	200056e0 	.word	0x200056e0
 8003024:	200056cc 	.word	0x200056cc
 8003028:	200056b8 	.word	0x200056b8
 800302c:	08011dc0 	.word	0x08011dc0
 8003030:	08011df8 	.word	0x08011df8

08003034 <menuCalculateBlock>:
void menuCalculateBlock(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
	switch (selector)
 800303a:	4b17      	ldr	r3, [pc, #92]	; (8003098 <menuCalculateBlock+0x64>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b03      	cmp	r3, #3
 8003040:	d002      	beq.n	8003048 <menuCalculateBlock+0x14>
 8003042:	2b05      	cmp	r3, #5
 8003044:	d01d      	beq.n	8003082 <menuCalculateBlock+0x4e>
				rearPressureSensor);
		break;
	default:
	}

}
 8003046:	e023      	b.n	8003090 <menuCalculateBlock+0x5c>
		int16_t result[2] =
 8003048:	2300      	movs	r3, #0
 800304a:	607b      	str	r3, [r7, #4]
		int16_t resultPressure[2] =
 800304c:	2300      	movs	r3, #0
 800304e:	603b      	str	r3, [r7, #0]
		processDataSag(result, resultPressure);
 8003050:	463a      	mov	r2, r7
 8003052:	1d3b      	adds	r3, r7, #4
 8003054:	4611      	mov	r1, r2
 8003056:	4618      	mov	r0, r3
 8003058:	f000 fd38 	bl	8003acc <processDataSag>
		printf("REAR: %d\nFRONT: %d\n", result[0], result[1]);
 800305c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003060:	4619      	mov	r1, r3
 8003062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003066:	461a      	mov	r2, r3
 8003068:	480c      	ldr	r0, [pc, #48]	; (800309c <menuCalculateBlock+0x68>)
 800306a:	f00c f85d 	bl	800f128 <iprintf>
		printf("REAR_PRESSURE: %d\nFRONT_PRESSURE: %d\n", resultPressure[0],
 800306e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003072:	4619      	mov	r1, r3
				resultPressure[1]);
 8003074:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
		printf("REAR_PRESSURE: %d\nFRONT_PRESSURE: %d\n", resultPressure[0],
 8003078:	461a      	mov	r2, r3
 800307a:	4809      	ldr	r0, [pc, #36]	; (80030a0 <menuCalculateBlock+0x6c>)
 800307c:	f00c f854 	bl	800f128 <iprintf>
		break;
 8003080:	e006      	b.n	8003090 <menuCalculateBlock+0x5c>
		processData(frontSensor, rearSensor, frontPressureSensor,
 8003082:	4b08      	ldr	r3, [pc, #32]	; (80030a4 <menuCalculateBlock+0x70>)
 8003084:	4a08      	ldr	r2, [pc, #32]	; (80030a8 <menuCalculateBlock+0x74>)
 8003086:	4909      	ldr	r1, [pc, #36]	; (80030ac <menuCalculateBlock+0x78>)
 8003088:	4809      	ldr	r0, [pc, #36]	; (80030b0 <menuCalculateBlock+0x7c>)
 800308a:	f000 fceb 	bl	8003a64 <processData>
		break;
 800308e:	bf00      	nop
}
 8003090:	bf00      	nop
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	200056b5 	.word	0x200056b5
 800309c:	08011e68 	.word	0x08011e68
 80030a0:	08011e7c 	.word	0x08011e7c
 80030a4:	20005708 	.word	0x20005708
 80030a8:	200056f4 	.word	0x200056f4
 80030ac:	200056e0 	.word	0x200056e0
 80030b0:	200056cc 	.word	0x200056cc

080030b4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80030b8:	4b17      	ldr	r3, [pc, #92]	; (8003118 <MX_SPI2_Init+0x64>)
 80030ba:	4a18      	ldr	r2, [pc, #96]	; (800311c <MX_SPI2_Init+0x68>)
 80030bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80030be:	4b16      	ldr	r3, [pc, #88]	; (8003118 <MX_SPI2_Init+0x64>)
 80030c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80030c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80030c6:	4b14      	ldr	r3, [pc, #80]	; (8003118 <MX_SPI2_Init+0x64>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80030cc:	4b12      	ldr	r3, [pc, #72]	; (8003118 <MX_SPI2_Init+0x64>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80030d2:	4b11      	ldr	r3, [pc, #68]	; (8003118 <MX_SPI2_Init+0x64>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030d8:	4b0f      	ldr	r3, [pc, #60]	; (8003118 <MX_SPI2_Init+0x64>)
 80030da:	2200      	movs	r2, #0
 80030dc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80030de:	4b0e      	ldr	r3, [pc, #56]	; (8003118 <MX_SPI2_Init+0x64>)
 80030e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030e4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80030e6:	4b0c      	ldr	r3, [pc, #48]	; (8003118 <MX_SPI2_Init+0x64>)
 80030e8:	2218      	movs	r2, #24
 80030ea:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030ec:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <MX_SPI2_Init+0x64>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80030f2:	4b09      	ldr	r3, [pc, #36]	; (8003118 <MX_SPI2_Init+0x64>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030f8:	4b07      	ldr	r3, [pc, #28]	; (8003118 <MX_SPI2_Init+0x64>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80030fe:	4b06      	ldr	r3, [pc, #24]	; (8003118 <MX_SPI2_Init+0x64>)
 8003100:	220a      	movs	r2, #10
 8003102:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003104:	4804      	ldr	r0, [pc, #16]	; (8003118 <MX_SPI2_Init+0x64>)
 8003106:	f003 ff85 	bl	8007014 <HAL_SPI_Init>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003110:	f7ff feba 	bl	8002e88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003114:	bf00      	nop
 8003116:	bd80      	pop	{r7, pc}
 8003118:	2000571c 	.word	0x2000571c
 800311c:	40003800 	.word	0x40003800

08003120 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b08a      	sub	sp, #40	; 0x28
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003128:	f107 0314 	add.w	r3, r7, #20
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	605a      	str	r2, [r3, #4]
 8003132:	609a      	str	r2, [r3, #8]
 8003134:	60da      	str	r2, [r3, #12]
 8003136:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a30      	ldr	r2, [pc, #192]	; (8003200 <HAL_SPI_MspInit+0xe0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d15a      	bne.n	80031f8 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003142:	2300      	movs	r3, #0
 8003144:	613b      	str	r3, [r7, #16]
 8003146:	4b2f      	ldr	r3, [pc, #188]	; (8003204 <HAL_SPI_MspInit+0xe4>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	4a2e      	ldr	r2, [pc, #184]	; (8003204 <HAL_SPI_MspInit+0xe4>)
 800314c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003150:	6413      	str	r3, [r2, #64]	; 0x40
 8003152:	4b2c      	ldr	r3, [pc, #176]	; (8003204 <HAL_SPI_MspInit+0xe4>)
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800315a:	613b      	str	r3, [r7, #16]
 800315c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800315e:	2300      	movs	r3, #0
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	4b28      	ldr	r3, [pc, #160]	; (8003204 <HAL_SPI_MspInit+0xe4>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	4a27      	ldr	r2, [pc, #156]	; (8003204 <HAL_SPI_MspInit+0xe4>)
 8003168:	f043 0304 	orr.w	r3, r3, #4
 800316c:	6313      	str	r3, [r2, #48]	; 0x30
 800316e:	4b25      	ldr	r3, [pc, #148]	; (8003204 <HAL_SPI_MspInit+0xe4>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	f003 0304 	and.w	r3, r3, #4
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800317a:	2300      	movs	r3, #0
 800317c:	60bb      	str	r3, [r7, #8]
 800317e:	4b21      	ldr	r3, [pc, #132]	; (8003204 <HAL_SPI_MspInit+0xe4>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	4a20      	ldr	r2, [pc, #128]	; (8003204 <HAL_SPI_MspInit+0xe4>)
 8003184:	f043 0302 	orr.w	r3, r3, #2
 8003188:	6313      	str	r3, [r2, #48]	; 0x30
 800318a:	4b1e      	ldr	r3, [pc, #120]	; (8003204 <HAL_SPI_MspInit+0xe4>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	60bb      	str	r3, [r7, #8]
 8003194:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003196:	2302      	movs	r3, #2
 8003198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319a:	2302      	movs	r3, #2
 800319c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319e:	2300      	movs	r3, #0
 80031a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031a2:	2303      	movs	r3, #3
 80031a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80031a6:	2307      	movs	r3, #7
 80031a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031aa:	f107 0314 	add.w	r3, r7, #20
 80031ae:	4619      	mov	r1, r3
 80031b0:	4815      	ldr	r0, [pc, #84]	; (8003208 <HAL_SPI_MspInit+0xe8>)
 80031b2:	f002 fb1b 	bl	80057ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80031b6:	2304      	movs	r3, #4
 80031b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ba:	2302      	movs	r3, #2
 80031bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031be:	2300      	movs	r3, #0
 80031c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031c2:	2303      	movs	r3, #3
 80031c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031c6:	2305      	movs	r3, #5
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031ca:	f107 0314 	add.w	r3, r7, #20
 80031ce:	4619      	mov	r1, r3
 80031d0:	480d      	ldr	r0, [pc, #52]	; (8003208 <HAL_SPI_MspInit+0xe8>)
 80031d2:	f002 fb0b 	bl	80057ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80031d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031dc:	2302      	movs	r3, #2
 80031de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e0:	2300      	movs	r3, #0
 80031e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031e4:	2303      	movs	r3, #3
 80031e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031e8:	2305      	movs	r3, #5
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ec:	f107 0314 	add.w	r3, r7, #20
 80031f0:	4619      	mov	r1, r3
 80031f2:	4806      	ldr	r0, [pc, #24]	; (800320c <HAL_SPI_MspInit+0xec>)
 80031f4:	f002 fafa 	bl	80057ec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80031f8:	bf00      	nop
 80031fa:	3728      	adds	r7, #40	; 0x28
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40003800 	.word	0x40003800
 8003204:	40023800 	.word	0x40023800
 8003208:	40020800 	.word	0x40020800
 800320c:	40020400 	.word	0x40020400

08003210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003216:	2300      	movs	r3, #0
 8003218:	607b      	str	r3, [r7, #4]
 800321a:	4b12      	ldr	r3, [pc, #72]	; (8003264 <HAL_MspInit+0x54>)
 800321c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321e:	4a11      	ldr	r2, [pc, #68]	; (8003264 <HAL_MspInit+0x54>)
 8003220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003224:	6453      	str	r3, [r2, #68]	; 0x44
 8003226:	4b0f      	ldr	r3, [pc, #60]	; (8003264 <HAL_MspInit+0x54>)
 8003228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800322e:	607b      	str	r3, [r7, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003232:	2300      	movs	r3, #0
 8003234:	603b      	str	r3, [r7, #0]
 8003236:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <HAL_MspInit+0x54>)
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	4a0a      	ldr	r2, [pc, #40]	; (8003264 <HAL_MspInit+0x54>)
 800323c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003240:	6413      	str	r3, [r2, #64]	; 0x40
 8003242:	4b08      	ldr	r3, [pc, #32]	; (8003264 <HAL_MspInit+0x54>)
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324a:	603b      	str	r3, [r7, #0]
 800324c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800324e:	2200      	movs	r2, #0
 8003250:	210f      	movs	r1, #15
 8003252:	f06f 0001 	mvn.w	r0, #1
 8003256:	f001 febf 	bl	8004fd8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40023800 	.word	0x40023800

08003268 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b08e      	sub	sp, #56	; 0x38
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8003278:	2300      	movs	r3, #0
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	4b33      	ldr	r3, [pc, #204]	; (800334c <HAL_InitTick+0xe4>)
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	4a32      	ldr	r2, [pc, #200]	; (800334c <HAL_InitTick+0xe4>)
 8003282:	f043 0302 	orr.w	r3, r3, #2
 8003286:	6413      	str	r3, [r2, #64]	; 0x40
 8003288:	4b30      	ldr	r3, [pc, #192]	; (800334c <HAL_InitTick+0xe4>)
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003294:	f107 0210 	add.w	r2, r7, #16
 8003298:	f107 0314 	add.w	r3, r7, #20
 800329c:	4611      	mov	r1, r2
 800329e:	4618      	mov	r0, r3
 80032a0:	f003 f9b8 	bl	8006614 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80032a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d103      	bne.n	80032b6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80032ae:	f003 f989 	bl	80065c4 <HAL_RCC_GetPCLK1Freq>
 80032b2:	6378      	str	r0, [r7, #52]	; 0x34
 80032b4:	e004      	b.n	80032c0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80032b6:	f003 f985 	bl	80065c4 <HAL_RCC_GetPCLK1Freq>
 80032ba:	4603      	mov	r3, r0
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80032c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c2:	4a23      	ldr	r2, [pc, #140]	; (8003350 <HAL_InitTick+0xe8>)
 80032c4:	fba2 2303 	umull	r2, r3, r2, r3
 80032c8:	0c9b      	lsrs	r3, r3, #18
 80032ca:	3b01      	subs	r3, #1
 80032cc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80032ce:	4b21      	ldr	r3, [pc, #132]	; (8003354 <HAL_InitTick+0xec>)
 80032d0:	4a21      	ldr	r2, [pc, #132]	; (8003358 <HAL_InitTick+0xf0>)
 80032d2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80032d4:	4b1f      	ldr	r3, [pc, #124]	; (8003354 <HAL_InitTick+0xec>)
 80032d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80032da:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80032dc:	4a1d      	ldr	r2, [pc, #116]	; (8003354 <HAL_InitTick+0xec>)
 80032de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e0:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80032e2:	4b1c      	ldr	r3, [pc, #112]	; (8003354 <HAL_InitTick+0xec>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032e8:	4b1a      	ldr	r3, [pc, #104]	; (8003354 <HAL_InitTick+0xec>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032ee:	4b19      	ldr	r3, [pc, #100]	; (8003354 <HAL_InitTick+0xec>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80032f4:	4817      	ldr	r0, [pc, #92]	; (8003354 <HAL_InitTick+0xec>)
 80032f6:	f004 facd 	bl	8007894 <HAL_TIM_Base_Init>
 80032fa:	4603      	mov	r3, r0
 80032fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003300:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003304:	2b00      	cmp	r3, #0
 8003306:	d11b      	bne.n	8003340 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8003308:	4812      	ldr	r0, [pc, #72]	; (8003354 <HAL_InitTick+0xec>)
 800330a:	f004 fba3 	bl	8007a54 <HAL_TIM_Base_Start_IT>
 800330e:	4603      	mov	r3, r0
 8003310:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003314:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003318:	2b00      	cmp	r3, #0
 800331a:	d111      	bne.n	8003340 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800331c:	201d      	movs	r0, #29
 800331e:	f001 fe77 	bl	8005010 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b0f      	cmp	r3, #15
 8003326:	d808      	bhi.n	800333a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8003328:	2200      	movs	r2, #0
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	201d      	movs	r0, #29
 800332e:	f001 fe53 	bl	8004fd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003332:	4a0a      	ldr	r2, [pc, #40]	; (800335c <HAL_InitTick+0xf4>)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	e002      	b.n	8003340 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003340:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003344:	4618      	mov	r0, r3
 8003346:	3738      	adds	r7, #56	; 0x38
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40023800 	.word	0x40023800
 8003350:	431bde83 	.word	0x431bde83
 8003354:	20005774 	.word	0x20005774
 8003358:	40000400 	.word	0x40000400
 800335c:	20000028 	.word	0x20000028

08003360 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1;
volatile uint8_t Timer2;
void SDTimer_Handler(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
	if (Timer1 > 0)
 8003364:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <SDTimer_Handler+0x40>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d006      	beq.n	800337c <SDTimer_Handler+0x1c>
		Timer1--;
 800336e:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <SDTimer_Handler+0x40>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	b2db      	uxtb	r3, r3
 8003374:	3b01      	subs	r3, #1
 8003376:	b2da      	uxtb	r2, r3
 8003378:	4b09      	ldr	r3, [pc, #36]	; (80033a0 <SDTimer_Handler+0x40>)
 800337a:	701a      	strb	r2, [r3, #0]

	if (Timer2 > 0)
 800337c:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <SDTimer_Handler+0x44>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d006      	beq.n	8003394 <SDTimer_Handler+0x34>
		Timer2--;
 8003386:	4b07      	ldr	r3, [pc, #28]	; (80033a4 <SDTimer_Handler+0x44>)
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	b2db      	uxtb	r3, r3
 800338c:	3b01      	subs	r3, #1
 800338e:	b2da      	uxtb	r2, r3
 8003390:	4b04      	ldr	r3, [pc, #16]	; (80033a4 <SDTimer_Handler+0x44>)
 8003392:	701a      	strb	r2, [r3, #0]
}
 8003394:	bf00      	nop
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	200057bd 	.word	0x200057bd
 80033a4:	200057be 	.word	0x200057be

080033a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80033ac:	e7fe      	b.n	80033ac <NMI_Handler+0x4>

080033ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033ae:	b480      	push	{r7}
 80033b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033b2:	e7fe      	b.n	80033b2 <HardFault_Handler+0x4>

080033b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033b8:	e7fe      	b.n	80033b8 <MemManage_Handler+0x4>

080033ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033ba:	b480      	push	{r7}
 80033bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033be:	e7fe      	b.n	80033be <BusFault_Handler+0x4>

080033c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033c4:	e7fe      	b.n	80033c4 <UsageFault_Handler+0x4>

080033c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033c6:	b480      	push	{r7}
 80033c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033ca:	bf00      	nop
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	FatFsCnt++;
 80033d8:	4b0a      	ldr	r3, [pc, #40]	; (8003404 <TIM3_IRQHandler+0x30>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	3301      	adds	r3, #1
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	4b08      	ldr	r3, [pc, #32]	; (8003404 <TIM3_IRQHandler+0x30>)
 80033e4:	701a      	strb	r2, [r3, #0]
	if (FatFsCnt >= 10)
 80033e6:	4b07      	ldr	r3, [pc, #28]	; (8003404 <TIM3_IRQHandler+0x30>)
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b09      	cmp	r3, #9
 80033ee:	d904      	bls.n	80033fa <TIM3_IRQHandler+0x26>
	{
		FatFsCnt = 0;
 80033f0:	4b04      	ldr	r3, [pc, #16]	; (8003404 <TIM3_IRQHandler+0x30>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 80033f6:	f7ff ffb3 	bl	8003360 <SDTimer_Handler>
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80033fa:	4803      	ldr	r0, [pc, #12]	; (8003408 <TIM3_IRQHandler+0x34>)
 80033fc:	f004 fbf3 	bl	8007be6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003400:	bf00      	nop
 8003402:	bd80      	pop	{r7, pc}
 8003404:	200057bc 	.word	0x200057bc
 8003408:	20005774 	.word	0x20005774

0800340c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003410:	4802      	ldr	r0, [pc, #8]	; (800341c <DMA2_Stream2_IRQHandler+0x10>)
 8003412:	f001 ff81 	bl	8005318 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003416:	bf00      	nop
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	20000740 	.word	0x20000740

08003420 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
	return 1;
 8003424:	2301      	movs	r3, #1
}
 8003426:	4618      	mov	r0, r3
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <_kill>:

int _kill(int pid, int sig)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 800343a:	f00c f897 	bl	800f56c <__errno>
 800343e:	4603      	mov	r3, r0
 8003440:	2216      	movs	r2, #22
 8003442:	601a      	str	r2, [r3, #0]
	return -1;
 8003444:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003448:	4618      	mov	r0, r3
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <_exit>:

void _exit(int status)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003458:	f04f 31ff 	mov.w	r1, #4294967295
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f7ff ffe7 	bl	8003430 <_kill>
	while (1)
 8003462:	e7fe      	b.n	8003462 <_exit+0x12>

08003464 <_read>:
	{
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003470:	2300      	movs	r3, #0
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	e00a      	b.n	800348c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003476:	f3af 8000 	nop.w
 800347a:	4601      	mov	r1, r0
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	1c5a      	adds	r2, r3, #1
 8003480:	60ba      	str	r2, [r7, #8]
 8003482:	b2ca      	uxtb	r2, r1
 8003484:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	3301      	adds	r3, #1
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	429a      	cmp	r2, r3
 8003492:	dbf0      	blt.n	8003476 <_read+0x12>
	}

	return len;
 8003494:	687b      	ldr	r3, [r7, #4]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b086      	sub	sp, #24
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	60f8      	str	r0, [r7, #12]
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034aa:	2300      	movs	r3, #0
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	e009      	b.n	80034c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	1c5a      	adds	r2, r3, #1
 80034b4:	60ba      	str	r2, [r7, #8]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff fc38 	bl	8002d2e <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	3301      	adds	r3, #1
 80034c2:	617b      	str	r3, [r7, #20]
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	dbf1      	blt.n	80034b0 <_write+0x12>
	}
	return len;
 80034cc:	687b      	ldr	r3, [r7, #4]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <_close>:

int _close(int file)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80034de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <_fstat>:

int _fstat(int file, struct stat *st)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034fe:	605a      	str	r2, [r3, #4]
	return 0;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <_isatty>:

int _isatty(int file)
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8003516:	2301      	movs	r3, #1
}
 8003518:	4618      	mov	r0, r3
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
	...

08003540 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8003548:	4a14      	ldr	r2, [pc, #80]	; (800359c <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800354a:	4b15      	ldr	r3, [pc, #84]	; (80035a0 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end)
 8003554:	4b13      	ldr	r3, [pc, #76]	; (80035a4 <_sbrk+0x64>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d102      	bne.n	8003562 <_sbrk+0x22>
	{
		__sbrk_heap_end = &_end;
 800355c:	4b11      	ldr	r3, [pc, #68]	; (80035a4 <_sbrk+0x64>)
 800355e:	4a12      	ldr	r2, [pc, #72]	; (80035a8 <_sbrk+0x68>)
 8003560:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap)
 8003562:	4b10      	ldr	r3, [pc, #64]	; (80035a4 <_sbrk+0x64>)
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4413      	add	r3, r2
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	429a      	cmp	r2, r3
 800356e:	d207      	bcs.n	8003580 <_sbrk+0x40>
	{
		errno = ENOMEM;
 8003570:	f00b fffc 	bl	800f56c <__errno>
 8003574:	4603      	mov	r3, r0
 8003576:	220c      	movs	r2, #12
 8003578:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800357a:	f04f 33ff 	mov.w	r3, #4294967295
 800357e:	e009      	b.n	8003594 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8003580:	4b08      	ldr	r3, [pc, #32]	; (80035a4 <_sbrk+0x64>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8003586:	4b07      	ldr	r3, [pc, #28]	; (80035a4 <_sbrk+0x64>)
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4413      	add	r3, r2
 800358e:	4a05      	ldr	r2, [pc, #20]	; (80035a4 <_sbrk+0x64>)
 8003590:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8003592:	68fb      	ldr	r3, [r7, #12]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	20020000 	.word	0x20020000
 80035a0:	00000400 	.word	0x00000400
 80035a4:	200057c0 	.word	0x200057c0
 80035a8:	2000a010 	.word	0x2000a010

080035ac <SystemInit>:
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 80035b0:	4b06      	ldr	r3, [pc, #24]	; (80035cc <SystemInit+0x20>)
 80035b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b6:	4a05      	ldr	r2, [pc, #20]	; (80035cc <SystemInit+0x20>)
 80035b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035c0:	bf00      	nop
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	e000ed00 	.word	0xe000ed00

080035d0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08e      	sub	sp, #56	; 0x38
 80035d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	605a      	str	r2, [r3, #4]
 80035e0:	609a      	str	r2, [r3, #8]
 80035e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035e4:	f107 0320 	add.w	r3, r7, #32
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035ee:	1d3b      	adds	r3, r7, #4
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	605a      	str	r2, [r3, #4]
 80035f6:	609a      	str	r2, [r3, #8]
 80035f8:	60da      	str	r2, [r3, #12]
 80035fa:	611a      	str	r2, [r3, #16]
 80035fc:	615a      	str	r2, [r3, #20]
 80035fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003600:	4b2b      	ldr	r3, [pc, #172]	; (80036b0 <MX_TIM2_Init+0xe0>)
 8003602:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003606:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3600-1;
 8003608:	4b29      	ldr	r3, [pc, #164]	; (80036b0 <MX_TIM2_Init+0xe0>)
 800360a:	f640 620f 	movw	r2, #3599	; 0xe0f
 800360e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003610:	4b27      	ldr	r3, [pc, #156]	; (80036b0 <MX_TIM2_Init+0xe0>)
 8003612:	2200      	movs	r2, #0
 8003614:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8003616:	4b26      	ldr	r3, [pc, #152]	; (80036b0 <MX_TIM2_Init+0xe0>)
 8003618:	2263      	movs	r2, #99	; 0x63
 800361a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800361c:	4b24      	ldr	r3, [pc, #144]	; (80036b0 <MX_TIM2_Init+0xe0>)
 800361e:	2200      	movs	r2, #0
 8003620:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003622:	4b23      	ldr	r3, [pc, #140]	; (80036b0 <MX_TIM2_Init+0xe0>)
 8003624:	2200      	movs	r2, #0
 8003626:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003628:	4821      	ldr	r0, [pc, #132]	; (80036b0 <MX_TIM2_Init+0xe0>)
 800362a:	f004 f933 	bl	8007894 <HAL_TIM_Base_Init>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003634:	f7ff fc28 	bl	8002e88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800363c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800363e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003642:	4619      	mov	r1, r3
 8003644:	481a      	ldr	r0, [pc, #104]	; (80036b0 <MX_TIM2_Init+0xe0>)
 8003646:	f004 fc99 	bl	8007f7c <HAL_TIM_ConfigClockSource>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003650:	f7ff fc1a 	bl	8002e88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003654:	4816      	ldr	r0, [pc, #88]	; (80036b0 <MX_TIM2_Init+0xe0>)
 8003656:	f004 fa6d 	bl	8007b34 <HAL_TIM_PWM_Init>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003660:	f7ff fc12 	bl	8002e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003664:	2320      	movs	r3, #32
 8003666:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003668:	2300      	movs	r3, #0
 800366a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800366c:	f107 0320 	add.w	r3, r7, #32
 8003670:	4619      	mov	r1, r3
 8003672:	480f      	ldr	r0, [pc, #60]	; (80036b0 <MX_TIM2_Init+0xe0>)
 8003674:	f005 f85c 	bl	8008730 <HAL_TIMEx_MasterConfigSynchronization>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800367e:	f7ff fc03 	bl	8002e88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003682:	2360      	movs	r3, #96	; 0x60
 8003684:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003686:	2300      	movs	r3, #0
 8003688:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800368a:	2300      	movs	r3, #0
 800368c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003692:	1d3b      	adds	r3, r7, #4
 8003694:	2200      	movs	r2, #0
 8003696:	4619      	mov	r1, r3
 8003698:	4805      	ldr	r0, [pc, #20]	; (80036b0 <MX_TIM2_Init+0xe0>)
 800369a:	f004 fbad 	bl	8007df8 <HAL_TIM_PWM_ConfigChannel>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80036a4:	f7ff fbf0 	bl	8002e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80036a8:	bf00      	nop
 80036aa:	3738      	adds	r7, #56	; 0x38
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	200057c4 	.word	0x200057c4

080036b4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036ba:	463b      	mov	r3, r7
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80036c2:	4b15      	ldr	r3, [pc, #84]	; (8003718 <MX_TIM6_Init+0x64>)
 80036c4:	4a15      	ldr	r2, [pc, #84]	; (800371c <MX_TIM6_Init+0x68>)
 80036c6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 36000-1;
 80036c8:	4b13      	ldr	r3, [pc, #76]	; (8003718 <MX_TIM6_Init+0x64>)
 80036ca:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80036ce:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036d0:	4b11      	ldr	r3, [pc, #68]	; (8003718 <MX_TIM6_Init+0x64>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80036d6:	4b10      	ldr	r3, [pc, #64]	; (8003718 <MX_TIM6_Init+0x64>)
 80036d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036dc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036de:	4b0e      	ldr	r3, [pc, #56]	; (8003718 <MX_TIM6_Init+0x64>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80036e4:	480c      	ldr	r0, [pc, #48]	; (8003718 <MX_TIM6_Init+0x64>)
 80036e6:	f004 f8d5 	bl	8007894 <HAL_TIM_Base_Init>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80036f0:	f7ff fbca 	bl	8002e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036f4:	2300      	movs	r3, #0
 80036f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036f8:	2300      	movs	r3, #0
 80036fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80036fc:	463b      	mov	r3, r7
 80036fe:	4619      	mov	r1, r3
 8003700:	4805      	ldr	r0, [pc, #20]	; (8003718 <MX_TIM6_Init+0x64>)
 8003702:	f005 f815 	bl	8008730 <HAL_TIMEx_MasterConfigSynchronization>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800370c:	f7ff fbbc 	bl	8002e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003710:	bf00      	nop
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	2000580c 	.word	0x2000580c
 800371c:	40001000 	.word	0x40001000

08003720 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b096      	sub	sp, #88	; 0x58
 8003724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003726:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	605a      	str	r2, [r3, #4]
 8003730:	609a      	str	r2, [r3, #8]
 8003732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003734:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800373e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	605a      	str	r2, [r3, #4]
 8003748:	609a      	str	r2, [r3, #8]
 800374a:	60da      	str	r2, [r3, #12]
 800374c:	611a      	str	r2, [r3, #16]
 800374e:	615a      	str	r2, [r3, #20]
 8003750:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003752:	1d3b      	adds	r3, r7, #4
 8003754:	2220      	movs	r2, #32
 8003756:	2100      	movs	r1, #0
 8003758:	4618      	mov	r0, r3
 800375a:	f00b fe4b 	bl	800f3f4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800375e:	4b3d      	ldr	r3, [pc, #244]	; (8003854 <MX_TIM8_Init+0x134>)
 8003760:	4a3d      	ldr	r2, [pc, #244]	; (8003858 <MX_TIM8_Init+0x138>)
 8003762:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1800-1;
 8003764:	4b3b      	ldr	r3, [pc, #236]	; (8003854 <MX_TIM8_Init+0x134>)
 8003766:	f240 7207 	movw	r2, #1799	; 0x707
 800376a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800376c:	4b39      	ldr	r3, [pc, #228]	; (8003854 <MX_TIM8_Init+0x134>)
 800376e:	2200      	movs	r2, #0
 8003770:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 270-1;
 8003772:	4b38      	ldr	r3, [pc, #224]	; (8003854 <MX_TIM8_Init+0x134>)
 8003774:	f240 120d 	movw	r2, #269	; 0x10d
 8003778:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800377a:	4b36      	ldr	r3, [pc, #216]	; (8003854 <MX_TIM8_Init+0x134>)
 800377c:	2200      	movs	r2, #0
 800377e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003780:	4b34      	ldr	r3, [pc, #208]	; (8003854 <MX_TIM8_Init+0x134>)
 8003782:	2200      	movs	r2, #0
 8003784:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003786:	4b33      	ldr	r3, [pc, #204]	; (8003854 <MX_TIM8_Init+0x134>)
 8003788:	2200      	movs	r2, #0
 800378a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800378c:	4831      	ldr	r0, [pc, #196]	; (8003854 <MX_TIM8_Init+0x134>)
 800378e:	f004 f881 	bl	8007894 <HAL_TIM_Base_Init>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8003798:	f7ff fb76 	bl	8002e88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800379c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037a0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80037a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037a6:	4619      	mov	r1, r3
 80037a8:	482a      	ldr	r0, [pc, #168]	; (8003854 <MX_TIM8_Init+0x134>)
 80037aa:	f004 fbe7 	bl	8007f7c <HAL_TIM_ConfigClockSource>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80037b4:	f7ff fb68 	bl	8002e88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80037b8:	4826      	ldr	r0, [pc, #152]	; (8003854 <MX_TIM8_Init+0x134>)
 80037ba:	f004 f9bb 	bl	8007b34 <HAL_TIM_PWM_Init>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80037c4:	f7ff fb60 	bl	8002e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80037c8:	2320      	movs	r3, #32
 80037ca:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037cc:	2300      	movs	r3, #0
 80037ce:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80037d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037d4:	4619      	mov	r1, r3
 80037d6:	481f      	ldr	r0, [pc, #124]	; (8003854 <MX_TIM8_Init+0x134>)
 80037d8:	f004 ffaa 	bl	8008730 <HAL_TIMEx_MasterConfigSynchronization>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 80037e2:	f7ff fb51 	bl	8002e88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037e6:	2360      	movs	r3, #96	; 0x60
 80037e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80037ea:	2300      	movs	r3, #0
 80037ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037ee:	2300      	movs	r3, #0
 80037f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80037f2:	2300      	movs	r3, #0
 80037f4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037f6:	2300      	movs	r3, #0
 80037f8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80037fa:	2300      	movs	r3, #0
 80037fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80037fe:	2300      	movs	r3, #0
 8003800:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003806:	2200      	movs	r2, #0
 8003808:	4619      	mov	r1, r3
 800380a:	4812      	ldr	r0, [pc, #72]	; (8003854 <MX_TIM8_Init+0x134>)
 800380c:	f004 faf4 	bl	8007df8 <HAL_TIM_PWM_ConfigChannel>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8003816:	f7ff fb37 	bl	8002e88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800381a:	2300      	movs	r3, #0
 800381c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800381e:	2300      	movs	r3, #0
 8003820:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003822:	2300      	movs	r3, #0
 8003824:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003826:	2300      	movs	r3, #0
 8003828:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800382e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003832:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003834:	2300      	movs	r3, #0
 8003836:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003838:	1d3b      	adds	r3, r7, #4
 800383a:	4619      	mov	r1, r3
 800383c:	4805      	ldr	r0, [pc, #20]	; (8003854 <MX_TIM8_Init+0x134>)
 800383e:	f004 fff3 	bl	8008828 <HAL_TIMEx_ConfigBreakDeadTime>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8003848:	f7ff fb1e 	bl	8002e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800384c:	bf00      	nop
 800384e:	3758      	adds	r7, #88	; 0x58
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	20005854 	.word	0x20005854
 8003858:	40010400 	.word	0x40010400

0800385c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800385c:	b480      	push	{r7}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386c:	d10e      	bne.n	800388c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800386e:	2300      	movs	r3, #0
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	4b1d      	ldr	r3, [pc, #116]	; (80038e8 <HAL_TIM_Base_MspInit+0x8c>)
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	4a1c      	ldr	r2, [pc, #112]	; (80038e8 <HAL_TIM_Base_MspInit+0x8c>)
 8003878:	f043 0301 	orr.w	r3, r3, #1
 800387c:	6413      	str	r3, [r2, #64]	; 0x40
 800387e:	4b1a      	ldr	r3, [pc, #104]	; (80038e8 <HAL_TIM_Base_MspInit+0x8c>)
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800388a:	e026      	b.n	80038da <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM6)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a16      	ldr	r2, [pc, #88]	; (80038ec <HAL_TIM_Base_MspInit+0x90>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d10e      	bne.n	80038b4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003896:	2300      	movs	r3, #0
 8003898:	613b      	str	r3, [r7, #16]
 800389a:	4b13      	ldr	r3, [pc, #76]	; (80038e8 <HAL_TIM_Base_MspInit+0x8c>)
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	4a12      	ldr	r2, [pc, #72]	; (80038e8 <HAL_TIM_Base_MspInit+0x8c>)
 80038a0:	f043 0310 	orr.w	r3, r3, #16
 80038a4:	6413      	str	r3, [r2, #64]	; 0x40
 80038a6:	4b10      	ldr	r3, [pc, #64]	; (80038e8 <HAL_TIM_Base_MspInit+0x8c>)
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	f003 0310 	and.w	r3, r3, #16
 80038ae:	613b      	str	r3, [r7, #16]
 80038b0:	693b      	ldr	r3, [r7, #16]
}
 80038b2:	e012      	b.n	80038da <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM8)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a0d      	ldr	r2, [pc, #52]	; (80038f0 <HAL_TIM_Base_MspInit+0x94>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d10d      	bne.n	80038da <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80038be:	2300      	movs	r3, #0
 80038c0:	60fb      	str	r3, [r7, #12]
 80038c2:	4b09      	ldr	r3, [pc, #36]	; (80038e8 <HAL_TIM_Base_MspInit+0x8c>)
 80038c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c6:	4a08      	ldr	r2, [pc, #32]	; (80038e8 <HAL_TIM_Base_MspInit+0x8c>)
 80038c8:	f043 0302 	orr.w	r3, r3, #2
 80038cc:	6453      	str	r3, [r2, #68]	; 0x44
 80038ce:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <HAL_TIM_Base_MspInit+0x8c>)
 80038d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	68fb      	ldr	r3, [r7, #12]
}
 80038da:	bf00      	nop
 80038dc:	371c      	adds	r7, #28
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	40023800 	.word	0x40023800
 80038ec:	40001000 	.word	0x40001000
 80038f0:	40010400 	.word	0x40010400

080038f4 <startAdcDma>:
static void sendDataSD(char *file, volatile int16_t *sensor);
/******************************************************************************
 * Function Definitions
 *******************************************************************************/
void startAdcDma(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
	osDelayUntil((uint32_t*) osKernelSysTick(), SD_INIT_TIME);
 80038f8:	f008 fad4 	bl	800bea4 <osKernelSysTick>
 80038fc:	4603      	mov	r3, r0
 80038fe:	210a      	movs	r1, #10
 8003900:	4618      	mov	r0, r3
 8003902:	f008 fc08 	bl	800c116 <osDelayUntil>
	HAL_ADC_Start_DMA(TRAVEL_SENSOR_ADC_CHANNEL, (uint32_t*) adcDataWrite,
 8003906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800390a:	4906      	ldr	r1, [pc, #24]	; (8003924 <startAdcDma+0x30>)
 800390c:	4806      	ldr	r0, [pc, #24]	; (8003928 <startAdcDma+0x34>)
 800390e:	f000 fe79 	bl	8004604 <HAL_ADC_Start_DMA>
	BUFFER_SIZE);
	HAL_TIM_Base_Start(TRAVEL_SENSOR_TIMER_SAMPLE_CHECK);
 8003912:	4806      	ldr	r0, [pc, #24]	; (800392c <startAdcDma+0x38>)
 8003914:	f004 f80e 	bl	8007934 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(TRAVEL_SENSOR_ADC_TRIGER_TIMER);
 8003918:	4805      	ldr	r0, [pc, #20]	; (8003930 <startAdcDma+0x3c>)
 800391a:	f004 f80b 	bl	8007934 <HAL_TIM_Base_Start>
}
 800391e:	bf00      	nop
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	200058a4 	.word	0x200058a4
 8003928:	200006b0 	.word	0x200006b0
 800392c:	2000580c 	.word	0x2000580c
 8003930:	200057c4 	.word	0x200057c4

08003934 <stopAdcDma>:
void stopAdcDma(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(TRAVEL_SENSOR_ADC_CHANNEL);
 8003938:	4805      	ldr	r0, [pc, #20]	; (8003950 <stopAdcDma+0x1c>)
 800393a:	f000 ff73 	bl	8004824 <HAL_ADC_Stop_DMA>
	HAL_TIM_Base_Stop(TRAVEL_SENSOR_TIMER_SAMPLE_CHECK);
 800393e:	4805      	ldr	r0, [pc, #20]	; (8003954 <stopAdcDma+0x20>)
 8003940:	f004 f860 	bl	8007a04 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(TRAVEL_SENSOR_ADC_TRIGER_TIMER);
 8003944:	4804      	ldr	r0, [pc, #16]	; (8003958 <stopAdcDma+0x24>)
 8003946:	f004 f85d 	bl	8007a04 <HAL_TIM_Base_Stop>
}
 800394a:	bf00      	nop
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	200006b0 	.word	0x200006b0
 8003954:	2000580c 	.word	0x2000580c
 8003958:	200057c4 	.word	0x200057c4

0800395c <travelPressureSensorCalibration>:
void travelPressureSensorCalibration(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
#ifdef FREE_RTOS
	osSemaphoreWait(travelSensorSemHandle, osWaitForever);
 8003962:	4b3a      	ldr	r3, [pc, #232]	; (8003a4c <travelPressureSensorCalibration+0xf0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f04f 31ff 	mov.w	r1, #4294967295
 800396a:	4618      	mov	r0, r3
 800396c:	f008 fb3c 	bl	800bfe8 <osSemaphoreWait>
#endif

	for (int i = 0; i < BUFFER_SIZE / HALF_CONV_BUFF_SIZE; i++)
 8003970:	2300      	movs	r3, #0
 8003972:	607b      	str	r3, [r7, #4]
 8003974:	e046      	b.n	8003a04 <travelPressureSensorCalibration+0xa8>
	{
		calibrationValues.rearTravelSensor += outRearBufPtr[i];
 8003976:	4b36      	ldr	r3, [pc, #216]	; (8003a50 <travelPressureSensorCalibration+0xf4>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	4413      	add	r3, r2
 8003980:	881b      	ldrh	r3, [r3, #0]
 8003982:	b219      	sxth	r1, r3
 8003984:	4b33      	ldr	r3, [pc, #204]	; (8003a54 <travelPressureSensorCalibration+0xf8>)
 8003986:	f9b3 3000 	ldrsh.w	r3, [r3]
 800398a:	b29a      	uxth	r2, r3
 800398c:	b28b      	uxth	r3, r1
 800398e:	4413      	add	r3, r2
 8003990:	b29b      	uxth	r3, r3
 8003992:	b21a      	sxth	r2, r3
 8003994:	4b2f      	ldr	r3, [pc, #188]	; (8003a54 <travelPressureSensorCalibration+0xf8>)
 8003996:	801a      	strh	r2, [r3, #0]
		calibrationValues.frontTravelSensor += outFrontBufPtr[i];
 8003998:	4b2f      	ldr	r3, [pc, #188]	; (8003a58 <travelPressureSensorCalibration+0xfc>)
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	4413      	add	r3, r2
 80039a2:	881b      	ldrh	r3, [r3, #0]
 80039a4:	b219      	sxth	r1, r3
 80039a6:	4b2b      	ldr	r3, [pc, #172]	; (8003a54 <travelPressureSensorCalibration+0xf8>)
 80039a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	b28b      	uxth	r3, r1
 80039b0:	4413      	add	r3, r2
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	b21a      	sxth	r2, r3
 80039b6:	4b27      	ldr	r3, [pc, #156]	; (8003a54 <travelPressureSensorCalibration+0xf8>)
 80039b8:	805a      	strh	r2, [r3, #2]
		calibrationValues.rearPressureSensor += outRearPressureBufPtr[i];
 80039ba:	4b28      	ldr	r3, [pc, #160]	; (8003a5c <travelPressureSensorCalibration+0x100>)
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	4413      	add	r3, r2
 80039c4:	881b      	ldrh	r3, [r3, #0]
 80039c6:	b219      	sxth	r1, r3
 80039c8:	4b22      	ldr	r3, [pc, #136]	; (8003a54 <travelPressureSensorCalibration+0xf8>)
 80039ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	b28b      	uxth	r3, r1
 80039d2:	4413      	add	r3, r2
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	b21a      	sxth	r2, r3
 80039d8:	4b1e      	ldr	r3, [pc, #120]	; (8003a54 <travelPressureSensorCalibration+0xf8>)
 80039da:	809a      	strh	r2, [r3, #4]
		calibrationValues.frontPressureSensor += outFrontPressureBufPtr[i];
 80039dc:	4b20      	ldr	r3, [pc, #128]	; (8003a60 <travelPressureSensorCalibration+0x104>)
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	4413      	add	r3, r2
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	b219      	sxth	r1, r3
 80039ea:	4b1a      	ldr	r3, [pc, #104]	; (8003a54 <travelPressureSensorCalibration+0xf8>)
 80039ec:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	b28b      	uxth	r3, r1
 80039f4:	4413      	add	r3, r2
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	b21a      	sxth	r2, r3
 80039fa:	4b16      	ldr	r3, [pc, #88]	; (8003a54 <travelPressureSensorCalibration+0xf8>)
 80039fc:	80da      	strh	r2, [r3, #6]
	for (int i = 0; i < BUFFER_SIZE / HALF_CONV_BUFF_SIZE; i++)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	3301      	adds	r3, #1
 8003a02:	607b      	str	r3, [r7, #4]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b3f      	cmp	r3, #63	; 0x3f
 8003a08:	d9b5      	bls.n	8003976 <travelPressureSensorCalibration+0x1a>

	}
	calibrationValues.rearTravelSensor = calibrationValues.rearTravelSensor
 8003a0a:	4b12      	ldr	r3, [pc, #72]	; (8003a54 <travelPressureSensorCalibration+0xf8>)
 8003a0c:	f9b3 3000 	ldrsh.w	r3, [r3]
			/ (BUFFER_SIZE / HALF_CONV_BUFF_SIZE);
 8003a10:	099b      	lsrs	r3, r3, #6
	calibrationValues.rearTravelSensor = calibrationValues.rearTravelSensor
 8003a12:	b21a      	sxth	r2, r3
 8003a14:	4b0f      	ldr	r3, [pc, #60]	; (8003a54 <travelPressureSensorCalibration+0xf8>)
 8003a16:	801a      	strh	r2, [r3, #0]
	calibrationValues.frontTravelSensor = calibrationValues.frontTravelSensor
 8003a18:	4b0e      	ldr	r3, [pc, #56]	; (8003a54 <travelPressureSensorCalibration+0xf8>)
 8003a1a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
			/ (BUFFER_SIZE / HALF_CONV_BUFF_SIZE);
 8003a1e:	099b      	lsrs	r3, r3, #6
	calibrationValues.frontTravelSensor = calibrationValues.frontTravelSensor
 8003a20:	b21a      	sxth	r2, r3
 8003a22:	4b0c      	ldr	r3, [pc, #48]	; (8003a54 <travelPressureSensorCalibration+0xf8>)
 8003a24:	805a      	strh	r2, [r3, #2]
	calibrationValues.rearPressureSensor = calibrationValues.rearPressureSensor
 8003a26:	4b0b      	ldr	r3, [pc, #44]	; (8003a54 <travelPressureSensorCalibration+0xf8>)
 8003a28:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
			/ (BUFFER_SIZE / HALF_CONV_BUFF_SIZE);
 8003a2c:	099b      	lsrs	r3, r3, #6
	calibrationValues.rearPressureSensor = calibrationValues.rearPressureSensor
 8003a2e:	b21a      	sxth	r2, r3
 8003a30:	4b08      	ldr	r3, [pc, #32]	; (8003a54 <travelPressureSensorCalibration+0xf8>)
 8003a32:	809a      	strh	r2, [r3, #4]
	calibrationValues.frontPressureSensor =
			calibrationValues.frontPressureSensor
 8003a34:	4b07      	ldr	r3, [pc, #28]	; (8003a54 <travelPressureSensorCalibration+0xf8>)
 8003a36:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
					/ (BUFFER_SIZE / HALF_CONV_BUFF_SIZE);
 8003a3a:	099b      	lsrs	r3, r3, #6
	calibrationValues.frontPressureSensor =
 8003a3c:	b21a      	sxth	r2, r3
 8003a3e:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <travelPressureSensorCalibration+0xf8>)
 8003a40:	80da      	strh	r2, [r3, #6]
}
 8003a42:	bf00      	nop
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	200052d8 	.word	0x200052d8
 8003a50:	20000018 	.word	0x20000018
 8003a54:	2000589c 	.word	0x2000589c
 8003a58:	2000001c 	.word	0x2000001c
 8003a5c:	20000020 	.word	0x20000020
 8003a60:	20000024 	.word	0x20000024

08003a64 <processData>:

void processData(char *sensorFront, char *sensorRear, char *sensorPressureFront,
		char *sensorPressureRear)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
 8003a70:	603b      	str	r3, [r7, #0]
#ifdef FREE_RTOS
	osSemaphoreWait(travelSensorSemHandle, osWaitForever);
 8003a72:	4b11      	ldr	r3, [pc, #68]	; (8003ab8 <processData+0x54>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f04f 31ff 	mov.w	r1, #4294967295
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f008 fab4 	bl	800bfe8 <osSemaphoreWait>
#endif
	sendDataSD(sensorRear, outRearBufPtr);
 8003a80:	4b0e      	ldr	r3, [pc, #56]	; (8003abc <processData+0x58>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4619      	mov	r1, r3
 8003a86:	68b8      	ldr	r0, [r7, #8]
 8003a88:	f000 fa6c 	bl	8003f64 <sendDataSD>
	sendDataSD(sensorFront, outFrontBufPtr);
 8003a8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <processData+0x5c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4619      	mov	r1, r3
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 fa66 	bl	8003f64 <sendDataSD>
	sendDataSD(sensorPressureRear, outRearPressureBufPtr);
 8003a98:	4b0a      	ldr	r3, [pc, #40]	; (8003ac4 <processData+0x60>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	6838      	ldr	r0, [r7, #0]
 8003aa0:	f000 fa60 	bl	8003f64 <sendDataSD>
	sendDataSD(sensorPressureFront, outFrontPressureBufPtr);
 8003aa4:	4b08      	ldr	r3, [pc, #32]	; (8003ac8 <processData+0x64>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 fa5a 	bl	8003f64 <sendDataSD>
}
 8003ab0:	bf00      	nop
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	200052d8 	.word	0x200052d8
 8003abc:	20000018 	.word	0x20000018
 8003ac0:	2000001c 	.word	0x2000001c
 8003ac4:	20000020 	.word	0x20000020
 8003ac8:	20000024 	.word	0x20000024

08003acc <processDataSag>:

void processDataSag(int16_t *sagRearFront, int16_t *pressureRearFront)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
#ifdef FREE_RTOS
	osSemaphoreWait(travelSensorSemHandle, osWaitForever);
 8003ad6:	4b55      	ldr	r3, [pc, #340]	; (8003c2c <processDataSag+0x160>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f04f 31ff 	mov.w	r1, #4294967295
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f008 fa82 	bl	800bfe8 <osSemaphoreWait>
#endif
	(uint32_t*) sagRearFront;
	for (int i = 0; i < BUFFER_SIZE / HALF_CONV_BUFF_SIZE; i++)
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	e04a      	b.n	8003b80 <processDataSag+0xb4>
	{
		sagRearFront[0] += outRearBufPtr[i];
 8003aea:	4b51      	ldr	r3, [pc, #324]	; (8003c30 <processDataSag+0x164>)
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	4413      	add	r3, r2
 8003af4:	881b      	ldrh	r3, [r3, #0]
 8003af6:	b219      	sxth	r1, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	b28b      	uxth	r3, r1
 8003b02:	4413      	add	r3, r2
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	b21a      	sxth	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	801a      	strh	r2, [r3, #0]
		sagRearFront[1] += outFrontBufPtr[i];
 8003b0c:	4b49      	ldr	r3, [pc, #292]	; (8003c34 <processDataSag+0x168>)
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	4413      	add	r3, r2
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	b219      	sxth	r1, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	3302      	adds	r3, #2
 8003b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	b28b      	uxth	r3, r1
 8003b26:	4413      	add	r3, r2
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	3302      	adds	r3, #2
 8003b2e:	b212      	sxth	r2, r2
 8003b30:	801a      	strh	r2, [r3, #0]
		pressureRearFront[0] += outRearPressureBufPtr[i];
 8003b32:	4b41      	ldr	r3, [pc, #260]	; (8003c38 <processDataSag+0x16c>)
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	4413      	add	r3, r2
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	b219      	sxth	r1, r3
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	b28b      	uxth	r3, r1
 8003b4a:	4413      	add	r3, r2
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	b21a      	sxth	r2, r3
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	801a      	strh	r2, [r3, #0]
		pressureRearFront[1] += outFrontPressureBufPtr[i];
 8003b54:	4b39      	ldr	r3, [pc, #228]	; (8003c3c <processDataSag+0x170>)
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	4413      	add	r3, r2
 8003b5e:	881b      	ldrh	r3, [r3, #0]
 8003b60:	b219      	sxth	r1, r3
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	3302      	adds	r3, #2
 8003b66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	b28b      	uxth	r3, r1
 8003b6e:	4413      	add	r3, r2
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	3302      	adds	r3, #2
 8003b76:	b212      	sxth	r2, r2
 8003b78:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < BUFFER_SIZE / HALF_CONV_BUFF_SIZE; i++)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2b3f      	cmp	r3, #63	; 0x3f
 8003b84:	d9b1      	bls.n	8003aea <processDataSag+0x1e>

	}
	sagRearFront[0] = sagRearFront[0] / (BUFFER_SIZE / HALF_CONV_BUFF_SIZE);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b8c:	099b      	lsrs	r3, r3, #6
 8003b8e:	b21a      	sxth	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	801a      	strh	r2, [r3, #0]
	sagRearFront[1] = sagRearFront[1] / (BUFFER_SIZE / HALF_CONV_BUFF_SIZE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3302      	adds	r3, #2
 8003b98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b9c:	099a      	lsrs	r2, r3, #6
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	3302      	adds	r3, #2
 8003ba2:	b212      	sxth	r2, r2
 8003ba4:	801a      	strh	r2, [r3, #0]
	pressureRearFront[0] = pressureRearFront[0]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
			/ (BUFFER_SIZE / HALF_CONV_BUFF_SIZE);
 8003bac:	099b      	lsrs	r3, r3, #6
	pressureRearFront[0] = pressureRearFront[0]
 8003bae:	b21a      	sxth	r2, r3
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	801a      	strh	r2, [r3, #0]
	pressureRearFront[1] = pressureRearFront[1]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	3302      	adds	r3, #2
 8003bb8:	f9b3 3000 	ldrsh.w	r3, [r3]
			/ (BUFFER_SIZE / HALF_CONV_BUFF_SIZE);
 8003bbc:	099a      	lsrs	r2, r3, #6
	pressureRearFront[1] = pressureRearFront[1]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	3302      	adds	r3, #2
 8003bc2:	b212      	sxth	r2, r2
 8003bc4:	801a      	strh	r2, [r3, #0]

	sagRearFront[0] = CONVERT_TO_PERCENT
			* (sagRearFront[0] / (float) REAR_SUSPENSION_TRAVEL);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bcc:	ee07 3a90 	vmov	s15, r3
 8003bd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bd4:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8003c40 <processDataSag+0x174>
 8003bd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bdc:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003c44 <processDataSag+0x178>
 8003be0:	ee67 7a87 	vmul.f32	s15, s15, s14
	sagRearFront[0] = CONVERT_TO_PERCENT
 8003be4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003be8:	ee17 3a90 	vmov	r3, s15
 8003bec:	b21a      	sxth	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	801a      	strh	r2, [r3, #0]
	sagRearFront[1] = CONVERT_TO_PERCENT
			* (sagRearFront[1] / (float) FRONT_SUSPENSION_TRAVEL);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	3302      	adds	r3, #2
 8003bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bfa:	ee07 3a90 	vmov	s15, r3
 8003bfe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c02:	eddf 6a11 	vldr	s13, [pc, #68]	; 8003c48 <processDataSag+0x17c>
 8003c06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c0a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003c44 <processDataSag+0x178>
 8003c0e:	ee67 7a87 	vmul.f32	s15, s15, s14
	sagRearFront[1] = CONVERT_TO_PERCENT
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3302      	adds	r3, #2
 8003c16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c1a:	ee17 2a90 	vmov	r2, s15
 8003c1e:	b212      	sxth	r2, r2
 8003c20:	801a      	strh	r2, [r3, #0]
}
 8003c22:	bf00      	nop
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	200052d8 	.word	0x200052d8
 8003c30:	20000018 	.word	0x20000018
 8003c34:	2000001c 	.word	0x2000001c
 8003c38:	20000020 	.word	0x20000020
 8003c3c:	20000024 	.word	0x20000024
 8003c40:	42fa0000 	.word	0x42fa0000
 8003c44:	42c80000 	.word	0x42c80000
 8003c48:	43960000 	.word	0x43960000

08003c4c <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
	inBufPtr = &adcDataWrite[0];
 8003c54:	4b44      	ldr	r3, [pc, #272]	; (8003d68 <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 8003c56:	4a45      	ldr	r2, [pc, #276]	; (8003d6c <HAL_ADC_ConvHalfCpltCallback+0x120>)
 8003c58:	601a      	str	r2, [r3, #0]
	outRearPressureBufPtr = &adcRearPressureDataRead[0];
 8003c5a:	4b45      	ldr	r3, [pc, #276]	; (8003d70 <HAL_ADC_ConvHalfCpltCallback+0x124>)
 8003c5c:	4a45      	ldr	r2, [pc, #276]	; (8003d74 <HAL_ADC_ConvHalfCpltCallback+0x128>)
 8003c5e:	601a      	str	r2, [r3, #0]
	outFrontPressureBufPtr = &adcFrontPressureDataRead[0];
 8003c60:	4b45      	ldr	r3, [pc, #276]	; (8003d78 <HAL_ADC_ConvHalfCpltCallback+0x12c>)
 8003c62:	4a46      	ldr	r2, [pc, #280]	; (8003d7c <HAL_ADC_ConvHalfCpltCallback+0x130>)
 8003c64:	601a      	str	r2, [r3, #0]
	outRearBufPtr = &adcRearDataRead[0];
 8003c66:	4b46      	ldr	r3, [pc, #280]	; (8003d80 <HAL_ADC_ConvHalfCpltCallback+0x134>)
 8003c68:	4a46      	ldr	r2, [pc, #280]	; (8003d84 <HAL_ADC_ConvHalfCpltCallback+0x138>)
 8003c6a:	601a      	str	r2, [r3, #0]
	outFrontBufPtr = &adcFrontDataRead[0];
 8003c6c:	4b46      	ldr	r3, [pc, #280]	; (8003d88 <HAL_ADC_ConvHalfCpltCallback+0x13c>)
 8003c6e:	4a47      	ldr	r2, [pc, #284]	; (8003d8c <HAL_ADC_ConvHalfCpltCallback+0x140>)
 8003c70:	601a      	str	r2, [r3, #0]

	for (int n = 0; n < (BUFFER_SIZE / 2) - 1; n += NUMBER_OF_SENSORS)
 8003c72:	2300      	movs	r3, #0
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	e06a      	b.n	8003d4e <HAL_ADC_ConvHalfCpltCallback+0x102>
	{
		outRearPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003c78:	4b3b      	ldr	r3, [pc, #236]	; (8003d68 <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 8003c7a:	681a      	ldr	r2, [r3, #0]
				&inBufPtr[n],
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	005b      	lsls	r3, r3, #1
		outRearPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003c80:	4413      	add	r3, r2
 8003c82:	2106      	movs	r1, #6
 8003c84:	4618      	mov	r0, r3
 8003c86:	f000 f943 	bl	8003f10 <convertAdcToPressure>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	b29a      	uxth	r2, r3
				PRESSURE_SENSOR_MAX_VALUE)
				- calibrationValues.rearPressureSensor;
 8003c8e:	4b40      	ldr	r3, [pc, #256]	; (8003d90 <HAL_ADC_ConvHalfCpltCallback+0x144>)
 8003c90:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	b299      	uxth	r1, r3
		outRearPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003c9a:	4b35      	ldr	r3, [pc, #212]	; (8003d70 <HAL_ADC_ConvHalfCpltCallback+0x124>)
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	089b      	lsrs	r3, r3, #2
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	4413      	add	r3, r2
				- calibrationValues.rearPressureSensor;
 8003ca6:	b20a      	sxth	r2, r1
		outRearPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003ca8:	801a      	strh	r2, [r3, #0]
		outFrontPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003caa:	4b2f      	ldr	r3, [pc, #188]	; (8003d68 <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 8003cac:	681a      	ldr	r2, [r3, #0]
				&inBufPtr[n + 1],
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	005b      	lsls	r3, r3, #1
		outFrontPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003cb4:	4413      	add	r3, r2
 8003cb6:	2106      	movs	r1, #6
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 f929 	bl	8003f10 <convertAdcToPressure>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	b29a      	uxth	r2, r3
				PRESSURE_SENSOR_MAX_VALUE)
				- calibrationValues.frontPressureSensor;
 8003cc2:	4b33      	ldr	r3, [pc, #204]	; (8003d90 <HAL_ADC_ConvHalfCpltCallback+0x144>)
 8003cc4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	b299      	uxth	r1, r3
		outFrontPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003cce:	4b2a      	ldr	r3, [pc, #168]	; (8003d78 <HAL_ADC_ConvHalfCpltCallback+0x12c>)
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	089b      	lsrs	r3, r3, #2
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	4413      	add	r3, r2
				- calibrationValues.frontPressureSensor;
 8003cda:	b20a      	sxth	r2, r1
		outFrontPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003cdc:	801a      	strh	r2, [r3, #0]
		outRearBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003cde:	4b22      	ldr	r3, [pc, #136]	; (8003d68 <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 8003ce0:	681a      	ldr	r2, [r3, #0]
				&inBufPtr[n + 2],
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	3302      	adds	r3, #2
 8003ce6:	005b      	lsls	r3, r3, #1
		outRearBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003ce8:	4413      	add	r3, r2
 8003cea:	217d      	movs	r1, #125	; 0x7d
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 f8f9 	bl	8003ee4 <convertAdcToTravel>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	b29a      	uxth	r2, r3
				REAR_SENSOR_TRAVEL) - calibrationValues.rearTravelSensor;
 8003cf6:	4b26      	ldr	r3, [pc, #152]	; (8003d90 <HAL_ADC_ConvHalfCpltCallback+0x144>)
 8003cf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	b299      	uxth	r1, r3
		outRearBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003d02:	4b1f      	ldr	r3, [pc, #124]	; (8003d80 <HAL_ADC_ConvHalfCpltCallback+0x134>)
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	089b      	lsrs	r3, r3, #2
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	4413      	add	r3, r2
				REAR_SENSOR_TRAVEL) - calibrationValues.rearTravelSensor;
 8003d0e:	b20a      	sxth	r2, r1
		outRearBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003d10:	801a      	strh	r2, [r3, #0]
		outFrontBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003d12:	4b15      	ldr	r3, [pc, #84]	; (8003d68 <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 8003d14:	681a      	ldr	r2, [r3, #0]
				&inBufPtr[n + 3],
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	3303      	adds	r3, #3
 8003d1a:	005b      	lsls	r3, r3, #1
		outFrontBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 f8de 	bl	8003ee4 <convertAdcToTravel>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	b29a      	uxth	r2, r3
				FRONT_SENSOR_TRAVEL) - calibrationValues.frontTravelSensor;
 8003d2c:	4b18      	ldr	r3, [pc, #96]	; (8003d90 <HAL_ADC_ConvHalfCpltCallback+0x144>)
 8003d2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	b299      	uxth	r1, r3
		outFrontBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003d38:	4b13      	ldr	r3, [pc, #76]	; (8003d88 <HAL_ADC_ConvHalfCpltCallback+0x13c>)
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	089b      	lsrs	r3, r3, #2
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	4413      	add	r3, r2
				FRONT_SENSOR_TRAVEL) - calibrationValues.frontTravelSensor;
 8003d44:	b20a      	sxth	r2, r1
		outFrontBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003d46:	801a      	strh	r2, [r3, #0]
	for (int n = 0; n < (BUFFER_SIZE / 2) - 1; n += NUMBER_OF_SENSORS)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	3304      	adds	r3, #4
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2bfe      	cmp	r3, #254	; 0xfe
 8003d52:	d991      	bls.n	8003c78 <HAL_ADC_ConvHalfCpltCallback+0x2c>
	}
#ifdef FREE_RTOS
	osSemaphoreRelease(travelSensorSemHandle);
 8003d54:	4b0f      	ldr	r3, [pc, #60]	; (8003d94 <HAL_ADC_ConvHalfCpltCallback+0x148>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f008 f993 	bl	800c084 <osSemaphoreRelease>
#endif
}
 8003d5e:	bf00      	nop
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	200060a4 	.word	0x200060a4
 8003d6c:	200058a4 	.word	0x200058a4
 8003d70:	20000020 	.word	0x20000020
 8003d74:	20005ea4 	.word	0x20005ea4
 8003d78:	20000024 	.word	0x20000024
 8003d7c:	20005fa4 	.word	0x20005fa4
 8003d80:	20000018 	.word	0x20000018
 8003d84:	20005ca4 	.word	0x20005ca4
 8003d88:	2000001c 	.word	0x2000001c
 8003d8c:	20005da4 	.word	0x20005da4
 8003d90:	2000589c 	.word	0x2000589c
 8003d94:	200052d8 	.word	0x200052d8

08003d98 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
	time_end = __HAL_TIM_GET_COUNTER(&htim6);
	sample_time = ((time_end - previousTime)/NUMBER_OF_SENSORS)/(float)(BUFFER_SIZE/NUMBER_OF_SENSORS);
	printf("semFullTime: %f\n", sample_time);
#endif

	inBufPtr = &adcDataWrite[BUFFER_SIZE / 2];
 8003da0:	4b44      	ldr	r3, [pc, #272]	; (8003eb4 <HAL_ADC_ConvCpltCallback+0x11c>)
 8003da2:	4a45      	ldr	r2, [pc, #276]	; (8003eb8 <HAL_ADC_ConvCpltCallback+0x120>)
 8003da4:	601a      	str	r2, [r3, #0]
	outRearPressureBufPtr = &adcRearPressureDataRead[BUFFER_SIZE
 8003da6:	4b45      	ldr	r3, [pc, #276]	; (8003ebc <HAL_ADC_ConvCpltCallback+0x124>)
 8003da8:	4a45      	ldr	r2, [pc, #276]	; (8003ec0 <HAL_ADC_ConvCpltCallback+0x128>)
 8003daa:	601a      	str	r2, [r3, #0]
			/ HALF_CONV_BUFF_SIZE];
	outFrontPressureBufPtr = &adcFrontPressureDataRead[BUFFER_SIZE
 8003dac:	4b45      	ldr	r3, [pc, #276]	; (8003ec4 <HAL_ADC_ConvCpltCallback+0x12c>)
 8003dae:	4a46      	ldr	r2, [pc, #280]	; (8003ec8 <HAL_ADC_ConvCpltCallback+0x130>)
 8003db0:	601a      	str	r2, [r3, #0]
			/ HALF_CONV_BUFF_SIZE];
	outRearBufPtr = &adcRearDataRead[BUFFER_SIZE / HALF_CONV_BUFF_SIZE];
 8003db2:	4b46      	ldr	r3, [pc, #280]	; (8003ecc <HAL_ADC_ConvCpltCallback+0x134>)
 8003db4:	4a46      	ldr	r2, [pc, #280]	; (8003ed0 <HAL_ADC_ConvCpltCallback+0x138>)
 8003db6:	601a      	str	r2, [r3, #0]
	outFrontBufPtr = &adcFrontDataRead[BUFFER_SIZE / HALF_CONV_BUFF_SIZE];
 8003db8:	4b46      	ldr	r3, [pc, #280]	; (8003ed4 <HAL_ADC_ConvCpltCallback+0x13c>)
 8003dba:	4a47      	ldr	r2, [pc, #284]	; (8003ed8 <HAL_ADC_ConvCpltCallback+0x140>)
 8003dbc:	601a      	str	r2, [r3, #0]

	for (int n = 0; n < (BUFFER_SIZE / 2) - 1; n += NUMBER_OF_SENSORS)
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60fb      	str	r3, [r7, #12]
 8003dc2:	e06a      	b.n	8003e9a <HAL_ADC_ConvCpltCallback+0x102>
	{
		outRearPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003dc4:	4b3b      	ldr	r3, [pc, #236]	; (8003eb4 <HAL_ADC_ConvCpltCallback+0x11c>)
 8003dc6:	681a      	ldr	r2, [r3, #0]
				&inBufPtr[n],
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	005b      	lsls	r3, r3, #1
		outRearPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003dcc:	4413      	add	r3, r2
 8003dce:	2106      	movs	r1, #6
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 f89d 	bl	8003f10 <convertAdcToPressure>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	b29a      	uxth	r2, r3
				PRESSURE_SENSOR_MAX_VALUE)
				- calibrationValues.rearPressureSensor;
 8003dda:	4b40      	ldr	r3, [pc, #256]	; (8003edc <HAL_ADC_ConvCpltCallback+0x144>)
 8003ddc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	b299      	uxth	r1, r3
		outRearPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003de6:	4b35      	ldr	r3, [pc, #212]	; (8003ebc <HAL_ADC_ConvCpltCallback+0x124>)
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	089b      	lsrs	r3, r3, #2
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	4413      	add	r3, r2
				- calibrationValues.rearPressureSensor;
 8003df2:	b20a      	sxth	r2, r1
		outRearPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003df4:	801a      	strh	r2, [r3, #0]
		outFrontPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003df6:	4b2f      	ldr	r3, [pc, #188]	; (8003eb4 <HAL_ADC_ConvCpltCallback+0x11c>)
 8003df8:	681a      	ldr	r2, [r3, #0]
				&inBufPtr[n + 1],
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	005b      	lsls	r3, r3, #1
		outFrontPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003e00:	4413      	add	r3, r2
 8003e02:	2106      	movs	r1, #6
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 f883 	bl	8003f10 <convertAdcToPressure>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	b29a      	uxth	r2, r3
				PRESSURE_SENSOR_MAX_VALUE)
				- calibrationValues.frontPressureSensor;
 8003e0e:	4b33      	ldr	r3, [pc, #204]	; (8003edc <HAL_ADC_ConvCpltCallback+0x144>)
 8003e10:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	b299      	uxth	r1, r3
		outFrontPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003e1a:	4b2a      	ldr	r3, [pc, #168]	; (8003ec4 <HAL_ADC_ConvCpltCallback+0x12c>)
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	089b      	lsrs	r3, r3, #2
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	4413      	add	r3, r2
				- calibrationValues.frontPressureSensor;
 8003e26:	b20a      	sxth	r2, r1
		outFrontPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003e28:	801a      	strh	r2, [r3, #0]
		outRearBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003e2a:	4b22      	ldr	r3, [pc, #136]	; (8003eb4 <HAL_ADC_ConvCpltCallback+0x11c>)
 8003e2c:	681a      	ldr	r2, [r3, #0]
				&inBufPtr[n + 2],
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	3302      	adds	r3, #2
 8003e32:	005b      	lsls	r3, r3, #1
		outRearBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003e34:	4413      	add	r3, r2
 8003e36:	217d      	movs	r1, #125	; 0x7d
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 f853 	bl	8003ee4 <convertAdcToTravel>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	b29a      	uxth	r2, r3
				REAR_SENSOR_TRAVEL) - calibrationValues.rearTravelSensor;
 8003e42:	4b26      	ldr	r3, [pc, #152]	; (8003edc <HAL_ADC_ConvCpltCallback+0x144>)
 8003e44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	b299      	uxth	r1, r3
		outRearBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003e4e:	4b1f      	ldr	r3, [pc, #124]	; (8003ecc <HAL_ADC_ConvCpltCallback+0x134>)
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	089b      	lsrs	r3, r3, #2
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	4413      	add	r3, r2
				REAR_SENSOR_TRAVEL) - calibrationValues.rearTravelSensor;
 8003e5a:	b20a      	sxth	r2, r1
		outRearBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003e5c:	801a      	strh	r2, [r3, #0]
		outFrontBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003e5e:	4b15      	ldr	r3, [pc, #84]	; (8003eb4 <HAL_ADC_ConvCpltCallback+0x11c>)
 8003e60:	681a      	ldr	r2, [r3, #0]
				&inBufPtr[n + 3],
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	3303      	adds	r3, #3
 8003e66:	005b      	lsls	r3, r3, #1
		outFrontBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003e68:	4413      	add	r3, r2
 8003e6a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 f838 	bl	8003ee4 <convertAdcToTravel>
 8003e74:	4603      	mov	r3, r0
 8003e76:	b29a      	uxth	r2, r3
				FRONT_SENSOR_TRAVEL) - calibrationValues.frontTravelSensor;
 8003e78:	4b18      	ldr	r3, [pc, #96]	; (8003edc <HAL_ADC_ConvCpltCallback+0x144>)
 8003e7a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	b299      	uxth	r1, r3
		outFrontBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003e84:	4b13      	ldr	r3, [pc, #76]	; (8003ed4 <HAL_ADC_ConvCpltCallback+0x13c>)
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	089b      	lsrs	r3, r3, #2
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	4413      	add	r3, r2
				FRONT_SENSOR_TRAVEL) - calibrationValues.frontTravelSensor;
 8003e90:	b20a      	sxth	r2, r1
		outFrontBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003e92:	801a      	strh	r2, [r3, #0]
	for (int n = 0; n < (BUFFER_SIZE / 2) - 1; n += NUMBER_OF_SENSORS)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	3304      	adds	r3, #4
 8003e98:	60fb      	str	r3, [r7, #12]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2bfe      	cmp	r3, #254	; 0xfe
 8003e9e:	d991      	bls.n	8003dc4 <HAL_ADC_ConvCpltCallback+0x2c>
	}
#ifdef FREE_RTOS
	osSemaphoreRelease(travelSensorSemHandle);
 8003ea0:	4b0f      	ldr	r3, [pc, #60]	; (8003ee0 <HAL_ADC_ConvCpltCallback+0x148>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f008 f8ed 	bl	800c084 <osSemaphoreRelease>
#endif
}
 8003eaa:	bf00      	nop
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	200060a4 	.word	0x200060a4
 8003eb8:	20005aa4 	.word	0x20005aa4
 8003ebc:	20000020 	.word	0x20000020
 8003ec0:	20005f24 	.word	0x20005f24
 8003ec4:	20000024 	.word	0x20000024
 8003ec8:	20006024 	.word	0x20006024
 8003ecc:	20000018 	.word	0x20000018
 8003ed0:	20005d24 	.word	0x20005d24
 8003ed4:	2000001c 	.word	0x2000001c
 8003ed8:	20005e24 	.word	0x20005e24
 8003edc:	2000589c 	.word	0x2000589c
 8003ee0:	200052d8 	.word	0x200052d8

08003ee4 <convertAdcToTravel>:

static int16_t convertAdcToTravel(volatile int16_t *adcDataWrite,
		int16_t sensorTravel)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	807b      	strh	r3, [r7, #2]

	return (*adcDataWrite * sensorTravel / ADC_RESOLUTION);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	b21b      	sxth	r3, r3
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003efc:	fb02 f303 	mul.w	r3, r2, r3
 8003f00:	0b1b      	lsrs	r3, r3, #12
 8003f02:	b21b      	sxth	r3, r3
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <convertAdcToPressure>:

static int16_t convertAdcToPressure(volatile int16_t *adcDataWrite,
		int16_t sensorMaxPressure)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	807b      	strh	r3, [r7, #2]

	return ((CONVERT_MPa_to_PSI)
			* (*adcDataWrite * sensorMaxPressure / ((float) ADC_RESOLUTION)));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	b21b      	sxth	r3, r3
 8003f22:	461a      	mov	r2, r3
 8003f24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003f28:	fb02 f303 	mul.w	r3, r2, r3
 8003f2c:	ee07 3a90 	vmov	s15, r3
 8003f30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f34:	eddf 6a09 	vldr	s13, [pc, #36]	; 8003f5c <convertAdcToPressure+0x4c>
 8003f38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f3c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003f60 <convertAdcToPressure+0x50>
 8003f40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f48:	ee17 3a90 	vmov	r3, s15
 8003f4c:	b21b      	sxth	r3, r3
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	45800000 	.word	0x45800000
 8003f60:	43110000 	.word	0x43110000

08003f64 <sendDataSD>:

static void sendDataSD(char *file, volatile int16_t *sensor)
{
 8003f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f68:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003f72:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003f76:	6018      	str	r0, [r3, #0]
 8003f78:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003f7c:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8003f80:	6019      	str	r1, [r3, #0]
 8003f82:	466b      	mov	r3, sp
 8003f84:	469a      	mov	sl, r3
	char buffer[BUFFER_SIZE + 1];
	memset(buffer, 0, BUFFER_SIZE + 1);
 8003f86:	f107 030c 	add.w	r3, r7, #12
 8003f8a:	f240 2201 	movw	r2, #513	; 0x201
 8003f8e:	2100      	movs	r1, #0
 8003f90:	4618      	mov	r0, r3
 8003f92:	f00b fa2f 	bl	800f3f4 <memset>
	int i;
	for (i = 0; i < (BUFFER_SIZE) / HALF_CONV_BUFF_SIZE; i++)
 8003f96:	2300      	movs	r3, #0
 8003f98:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8003f9c:	e01c      	b.n	8003fd8 <sendDataSD+0x74>
	{
		sprintf(buffer + strlen(buffer), "%d ", sensor[i]);
 8003f9e:	f107 030c 	add.w	r3, r7, #12
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fc f994 	bl	80002d0 <strlen>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	f107 030c 	add.w	r3, r7, #12
 8003fae:	1898      	adds	r0, r3, r2
 8003fb0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8003fba:	f5a2 7208 	sub.w	r2, r2, #544	; 0x220
 8003fbe:	6812      	ldr	r2, [r2, #0]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	b21b      	sxth	r3, r3
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	4933      	ldr	r1, [pc, #204]	; (8004098 <sendDataSD+0x134>)
 8003fca:	f00b f91b 	bl	800f204 <siprintf>
	for (i = 0; i < (BUFFER_SIZE) / HALF_CONV_BUFF_SIZE; i++)
 8003fce:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8003fd8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003fdc:	2b3f      	cmp	r3, #63	; 0x3f
 8003fde:	d9de      	bls.n	8003f9e <sendDataSD+0x3a>
	}
	size_t size = strlen(buffer) + 1;
 8003fe0:	f107 030c 	add.w	r3, r7, #12
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7fc f973 	bl	80002d0 <strlen>
 8003fea:	4603      	mov	r3, r0
 8003fec:	3301      	adds	r3, #1
 8003fee:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	char newBuff[size];
 8003ff2:	f8d7 6218 	ldr.w	r6, [r7, #536]	; 0x218
 8003ff6:	4633      	mov	r3, r6
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8003ffe:	2300      	movs	r3, #0
 8004000:	46b0      	mov	r8, r6
 8004002:	4699      	mov	r9, r3
 8004004:	f04f 0200 	mov.w	r2, #0
 8004008:	f04f 0300 	mov.w	r3, #0
 800400c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004010:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004014:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004018:	2300      	movs	r3, #0
 800401a:	4634      	mov	r4, r6
 800401c:	461d      	mov	r5, r3
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	00eb      	lsls	r3, r5, #3
 8004028:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800402c:	00e2      	lsls	r2, r4, #3
 800402e:	1df3      	adds	r3, r6, #7
 8004030:	08db      	lsrs	r3, r3, #3
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	ebad 0d03 	sub.w	sp, sp, r3
 8004038:	466b      	mov	r3, sp
 800403a:	3300      	adds	r3, #0
 800403c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	memset(newBuff, 0, size);
 8004040:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8004044:	2100      	movs	r1, #0
 8004046:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 800404a:	f00b f9d3 	bl	800f3f4 <memset>
	strncpy(newBuff, buffer, sizeof(newBuff));
 800404e:	f107 030c 	add.w	r3, r7, #12
 8004052:	4632      	mov	r2, r6
 8004054:	4619      	mov	r1, r3
 8004056:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 800405a:	f00b f9d3 	bl	800f404 <strncpy>
	newBuff[size] = '\0';
 800405e:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004062:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004066:	4413      	add	r3, r2
 8004068:	2200      	movs	r2, #0
 800406a:	701a      	strb	r2, [r3, #0]
	Mount_SD("/");
 800406c:	480b      	ldr	r0, [pc, #44]	; (800409c <sendDataSD+0x138>)
 800406e:	f7fc ffc3 	bl	8000ff8 <Mount_SD>
	Update_File(file, newBuff);
 8004072:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004076:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800407a:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 800407e:	6818      	ldr	r0, [r3, #0]
 8004080:	f7fd f932 	bl	80012e8 <Update_File>
	Unmount_SD("/");
 8004084:	4805      	ldr	r0, [pc, #20]	; (800409c <sendDataSD+0x138>)
 8004086:	f7fc ffdb 	bl	8001040 <Unmount_SD>
 800408a:	46d5      	mov	sp, sl
}
 800408c:	bf00      	nop
 800408e:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8004092:	46bd      	mov	sp, r7
 8004094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004098:	08011ea4 	.word	0x08011ea4
 800409c:	08011ea8 	.word	0x08011ea8

080040a0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80040a4:	4b11      	ldr	r3, [pc, #68]	; (80040ec <MX_USART2_UART_Init+0x4c>)
 80040a6:	4a12      	ldr	r2, [pc, #72]	; (80040f0 <MX_USART2_UART_Init+0x50>)
 80040a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80040aa:	4b10      	ldr	r3, [pc, #64]	; (80040ec <MX_USART2_UART_Init+0x4c>)
 80040ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80040b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80040b2:	4b0e      	ldr	r3, [pc, #56]	; (80040ec <MX_USART2_UART_Init+0x4c>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80040b8:	4b0c      	ldr	r3, [pc, #48]	; (80040ec <MX_USART2_UART_Init+0x4c>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80040be:	4b0b      	ldr	r3, [pc, #44]	; (80040ec <MX_USART2_UART_Init+0x4c>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80040c4:	4b09      	ldr	r3, [pc, #36]	; (80040ec <MX_USART2_UART_Init+0x4c>)
 80040c6:	220c      	movs	r2, #12
 80040c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040ca:	4b08      	ldr	r3, [pc, #32]	; (80040ec <MX_USART2_UART_Init+0x4c>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80040d0:	4b06      	ldr	r3, [pc, #24]	; (80040ec <MX_USART2_UART_Init+0x4c>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80040d6:	4805      	ldr	r0, [pc, #20]	; (80040ec <MX_USART2_UART_Init+0x4c>)
 80040d8:	f004 fc0c 	bl	80088f4 <HAL_UART_Init>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80040e2:	f7fe fed1 	bl	8002e88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80040e6:	bf00      	nop
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	200060a8 	.word	0x200060a8
 80040f0:	40004400 	.word	0x40004400

080040f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b08a      	sub	sp, #40	; 0x28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040fc:	f107 0314 	add.w	r3, r7, #20
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	605a      	str	r2, [r3, #4]
 8004106:	609a      	str	r2, [r3, #8]
 8004108:	60da      	str	r2, [r3, #12]
 800410a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a19      	ldr	r2, [pc, #100]	; (8004178 <HAL_UART_MspInit+0x84>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d12b      	bne.n	800416e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004116:	2300      	movs	r3, #0
 8004118:	613b      	str	r3, [r7, #16]
 800411a:	4b18      	ldr	r3, [pc, #96]	; (800417c <HAL_UART_MspInit+0x88>)
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	4a17      	ldr	r2, [pc, #92]	; (800417c <HAL_UART_MspInit+0x88>)
 8004120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004124:	6413      	str	r3, [r2, #64]	; 0x40
 8004126:	4b15      	ldr	r3, [pc, #84]	; (800417c <HAL_UART_MspInit+0x88>)
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412e:	613b      	str	r3, [r7, #16]
 8004130:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004132:	2300      	movs	r3, #0
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	4b11      	ldr	r3, [pc, #68]	; (800417c <HAL_UART_MspInit+0x88>)
 8004138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413a:	4a10      	ldr	r2, [pc, #64]	; (800417c <HAL_UART_MspInit+0x88>)
 800413c:	f043 0301 	orr.w	r3, r3, #1
 8004140:	6313      	str	r3, [r2, #48]	; 0x30
 8004142:	4b0e      	ldr	r3, [pc, #56]	; (800417c <HAL_UART_MspInit+0x88>)
 8004144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800414e:	230c      	movs	r3, #12
 8004150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004152:	2302      	movs	r3, #2
 8004154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004156:	2300      	movs	r3, #0
 8004158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800415a:	2303      	movs	r3, #3
 800415c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800415e:	2307      	movs	r3, #7
 8004160:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004162:	f107 0314 	add.w	r3, r7, #20
 8004166:	4619      	mov	r1, r3
 8004168:	4805      	ldr	r0, [pc, #20]	; (8004180 <HAL_UART_MspInit+0x8c>)
 800416a:	f001 fb3f 	bl	80057ec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800416e:	bf00      	nop
 8004170:	3728      	adds	r7, #40	; 0x28
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	40004400 	.word	0x40004400
 800417c:	40023800 	.word	0x40023800
 8004180:	40020000 	.word	0x40020000

08004184 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004184:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004188:	480d      	ldr	r0, [pc, #52]	; (80041c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800418a:	490e      	ldr	r1, [pc, #56]	; (80041c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800418c:	4a0e      	ldr	r2, [pc, #56]	; (80041c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800418e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004190:	e002      	b.n	8004198 <LoopCopyDataInit>

08004192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004196:	3304      	adds	r3, #4

08004198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800419a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800419c:	d3f9      	bcc.n	8004192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800419e:	4a0b      	ldr	r2, [pc, #44]	; (80041cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80041a0:	4c0b      	ldr	r4, [pc, #44]	; (80041d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80041a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041a4:	e001      	b.n	80041aa <LoopFillZerobss>

080041a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041a8:	3204      	adds	r2, #4

080041aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80041ac:	d3fb      	bcc.n	80041a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80041ae:	f7ff f9fd 	bl	80035ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041b2:	f00b f9e1 	bl	800f578 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041b6:	f7fe fdc7 	bl	8002d48 <main>
  bx  lr    
 80041ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80041bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80041c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041c4:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 80041c8:	0801231c 	.word	0x0801231c
  ldr r2, =_sbss
 80041cc:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 80041d0:	2000a00c 	.word	0x2000a00c

080041d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041d4:	e7fe      	b.n	80041d4 <ADC_IRQHandler>
	...

080041d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80041dc:	4b0e      	ldr	r3, [pc, #56]	; (8004218 <HAL_Init+0x40>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a0d      	ldr	r2, [pc, #52]	; (8004218 <HAL_Init+0x40>)
 80041e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80041e8:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <HAL_Init+0x40>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a0a      	ldr	r2, [pc, #40]	; (8004218 <HAL_Init+0x40>)
 80041ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041f4:	4b08      	ldr	r3, [pc, #32]	; (8004218 <HAL_Init+0x40>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a07      	ldr	r2, [pc, #28]	; (8004218 <HAL_Init+0x40>)
 80041fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004200:	2003      	movs	r0, #3
 8004202:	f000 fede 	bl	8004fc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004206:	200f      	movs	r0, #15
 8004208:	f7ff f82e 	bl	8003268 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800420c:	f7ff f800 	bl	8003210 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	40023c00 	.word	0x40023c00

0800421c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004220:	4b06      	ldr	r3, [pc, #24]	; (800423c <HAL_IncTick+0x20>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	461a      	mov	r2, r3
 8004226:	4b06      	ldr	r3, [pc, #24]	; (8004240 <HAL_IncTick+0x24>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4413      	add	r3, r2
 800422c:	4a04      	ldr	r2, [pc, #16]	; (8004240 <HAL_IncTick+0x24>)
 800422e:	6013      	str	r3, [r2, #0]
}
 8004230:	bf00      	nop
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	2000002c 	.word	0x2000002c
 8004240:	200060ec 	.word	0x200060ec

08004244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
  return uwTick;
 8004248:	4b03      	ldr	r3, [pc, #12]	; (8004258 <HAL_GetTick+0x14>)
 800424a:	681b      	ldr	r3, [r3, #0]
}
 800424c:	4618      	mov	r0, r3
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	200060ec 	.word	0x200060ec

0800425c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004264:	2300      	movs	r3, #0
 8004266:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e033      	b.n	80042da <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	2b00      	cmp	r3, #0
 8004278:	d109      	bne.n	800428e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7fd fa02 	bl	8001684 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	f003 0310 	and.w	r3, r3, #16
 8004296:	2b00      	cmp	r3, #0
 8004298:	d118      	bne.n	80042cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80042a2:	f023 0302 	bic.w	r3, r3, #2
 80042a6:	f043 0202 	orr.w	r2, r3, #2
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 fc5c 	bl	8004b6c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	f023 0303 	bic.w	r3, r3, #3
 80042c2:	f043 0201 	orr.w	r2, r3, #1
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	641a      	str	r2, [r3, #64]	; 0x40
 80042ca:	e001      	b.n	80042d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
	...

080042e4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d101      	bne.n	80042fe <HAL_ADC_Start+0x1a>
 80042fa:	2302      	movs	r3, #2
 80042fc:	e0b2      	b.n	8004464 <HAL_ADC_Start+0x180>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	2b01      	cmp	r3, #1
 8004312:	d018      	beq.n	8004346 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689a      	ldr	r2, [r3, #8]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004324:	4b52      	ldr	r3, [pc, #328]	; (8004470 <HAL_ADC_Start+0x18c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a52      	ldr	r2, [pc, #328]	; (8004474 <HAL_ADC_Start+0x190>)
 800432a:	fba2 2303 	umull	r2, r3, r2, r3
 800432e:	0c9a      	lsrs	r2, r3, #18
 8004330:	4613      	mov	r3, r2
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	4413      	add	r3, r2
 8004336:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004338:	e002      	b.n	8004340 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	3b01      	subs	r3, #1
 800433e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1f9      	bne.n	800433a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b01      	cmp	r3, #1
 8004352:	d17a      	bne.n	800444a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800435c:	f023 0301 	bic.w	r3, r3, #1
 8004360:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004372:	2b00      	cmp	r3, #0
 8004374:	d007      	beq.n	8004386 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800437e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800438e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004392:	d106      	bne.n	80043a2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004398:	f023 0206 	bic.w	r2, r3, #6
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	645a      	str	r2, [r3, #68]	; 0x44
 80043a0:	e002      	b.n	80043a8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043b0:	4b31      	ldr	r3, [pc, #196]	; (8004478 <HAL_ADC_Start+0x194>)
 80043b2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80043bc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f003 031f 	and.w	r3, r3, #31
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d12a      	bne.n	8004420 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a2b      	ldr	r2, [pc, #172]	; (800447c <HAL_ADC_Start+0x198>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d015      	beq.n	8004400 <HAL_ADC_Start+0x11c>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a29      	ldr	r2, [pc, #164]	; (8004480 <HAL_ADC_Start+0x19c>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d105      	bne.n	80043ea <HAL_ADC_Start+0x106>
 80043de:	4b26      	ldr	r3, [pc, #152]	; (8004478 <HAL_ADC_Start+0x194>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f003 031f 	and.w	r3, r3, #31
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a25      	ldr	r2, [pc, #148]	; (8004484 <HAL_ADC_Start+0x1a0>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d136      	bne.n	8004462 <HAL_ADC_Start+0x17e>
 80043f4:	4b20      	ldr	r3, [pc, #128]	; (8004478 <HAL_ADC_Start+0x194>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f003 0310 	and.w	r3, r3, #16
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d130      	bne.n	8004462 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d129      	bne.n	8004462 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800441c:	609a      	str	r2, [r3, #8]
 800441e:	e020      	b.n	8004462 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a15      	ldr	r2, [pc, #84]	; (800447c <HAL_ADC_Start+0x198>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d11b      	bne.n	8004462 <HAL_ADC_Start+0x17e>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d114      	bne.n	8004462 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689a      	ldr	r2, [r3, #8]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004446:	609a      	str	r2, [r3, #8]
 8004448:	e00b      	b.n	8004462 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	f043 0210 	orr.w	r2, r3, #16
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445a:	f043 0201 	orr.w	r2, r3, #1
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	20000014 	.word	0x20000014
 8004474:	431bde83 	.word	0x431bde83
 8004478:	40012300 	.word	0x40012300
 800447c:	40012000 	.word	0x40012000
 8004480:	40012100 	.word	0x40012100
 8004484:	40012200 	.word	0x40012200

08004488 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004496:	2b01      	cmp	r3, #1
 8004498:	d101      	bne.n	800449e <HAL_ADC_Stop+0x16>
 800449a:	2302      	movs	r3, #2
 800449c:	e021      	b.n	80044e2 <HAL_ADC_Stop+0x5a>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0201 	bic.w	r2, r2, #1
 80044b4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d109      	bne.n	80044d8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80044cc:	f023 0301 	bic.w	r3, r3, #1
 80044d0:	f043 0201 	orr.w	r2, r3, #1
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b084      	sub	sp, #16
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
 80044f6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800450a:	d113      	bne.n	8004534 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800451a:	d10b      	bne.n	8004534 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004520:	f043 0220 	orr.w	r2, r3, #32
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e063      	b.n	80045fc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004534:	f7ff fe86 	bl	8004244 <HAL_GetTick>
 8004538:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800453a:	e021      	b.n	8004580 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004542:	d01d      	beq.n	8004580 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d007      	beq.n	800455a <HAL_ADC_PollForConversion+0x6c>
 800454a:	f7ff fe7b 	bl	8004244 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	429a      	cmp	r2, r3
 8004558:	d212      	bcs.n	8004580 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b02      	cmp	r3, #2
 8004566:	d00b      	beq.n	8004580 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456c:	f043 0204 	orr.w	r2, r3, #4
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e03d      	b.n	80045fc <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b02      	cmp	r3, #2
 800458c:	d1d6      	bne.n	800453c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f06f 0212 	mvn.w	r2, #18
 8004596:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d123      	bne.n	80045fa <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d11f      	bne.n	80045fa <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d006      	beq.n	80045d6 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d111      	bne.n	80045fa <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d105      	bne.n	80045fa <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	f043 0201 	orr.w	r2, r3, #1
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800461a:	2b01      	cmp	r3, #1
 800461c:	d101      	bne.n	8004622 <HAL_ADC_Start_DMA+0x1e>
 800461e:	2302      	movs	r3, #2
 8004620:	e0e9      	b.n	80047f6 <HAL_ADC_Start_DMA+0x1f2>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b01      	cmp	r3, #1
 8004636:	d018      	beq.n	800466a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689a      	ldr	r2, [r3, #8]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0201 	orr.w	r2, r2, #1
 8004646:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004648:	4b6d      	ldr	r3, [pc, #436]	; (8004800 <HAL_ADC_Start_DMA+0x1fc>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a6d      	ldr	r2, [pc, #436]	; (8004804 <HAL_ADC_Start_DMA+0x200>)
 800464e:	fba2 2303 	umull	r2, r3, r2, r3
 8004652:	0c9a      	lsrs	r2, r3, #18
 8004654:	4613      	mov	r3, r2
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	4413      	add	r3, r2
 800465a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800465c:	e002      	b.n	8004664 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	3b01      	subs	r3, #1
 8004662:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f9      	bne.n	800465e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004678:	d107      	bne.n	800468a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004688:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b01      	cmp	r3, #1
 8004696:	f040 80a1 	bne.w	80047dc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80046a2:	f023 0301 	bic.w	r3, r3, #1
 80046a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d007      	beq.n	80046cc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80046c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d8:	d106      	bne.n	80046e8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046de:	f023 0206 	bic.w	r2, r3, #6
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	645a      	str	r2, [r3, #68]	; 0x44
 80046e6:	e002      	b.n	80046ee <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046f6:	4b44      	ldr	r3, [pc, #272]	; (8004808 <HAL_ADC_Start_DMA+0x204>)
 80046f8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fe:	4a43      	ldr	r2, [pc, #268]	; (800480c <HAL_ADC_Start_DMA+0x208>)
 8004700:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004706:	4a42      	ldr	r2, [pc, #264]	; (8004810 <HAL_ADC_Start_DMA+0x20c>)
 8004708:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470e:	4a41      	ldr	r2, [pc, #260]	; (8004814 <HAL_ADC_Start_DMA+0x210>)
 8004710:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800471a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800472a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800473a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	334c      	adds	r3, #76	; 0x4c
 8004746:	4619      	mov	r1, r3
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f000 fd1c 	bl	8005188 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f003 031f 	and.w	r3, r3, #31
 8004758:	2b00      	cmp	r3, #0
 800475a:	d12a      	bne.n	80047b2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a2d      	ldr	r2, [pc, #180]	; (8004818 <HAL_ADC_Start_DMA+0x214>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d015      	beq.n	8004792 <HAL_ADC_Start_DMA+0x18e>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a2c      	ldr	r2, [pc, #176]	; (800481c <HAL_ADC_Start_DMA+0x218>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d105      	bne.n	800477c <HAL_ADC_Start_DMA+0x178>
 8004770:	4b25      	ldr	r3, [pc, #148]	; (8004808 <HAL_ADC_Start_DMA+0x204>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f003 031f 	and.w	r3, r3, #31
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00a      	beq.n	8004792 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a27      	ldr	r2, [pc, #156]	; (8004820 <HAL_ADC_Start_DMA+0x21c>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d136      	bne.n	80047f4 <HAL_ADC_Start_DMA+0x1f0>
 8004786:	4b20      	ldr	r3, [pc, #128]	; (8004808 <HAL_ADC_Start_DMA+0x204>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f003 0310 	and.w	r3, r3, #16
 800478e:	2b00      	cmp	r3, #0
 8004790:	d130      	bne.n	80047f4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d129      	bne.n	80047f4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689a      	ldr	r2, [r3, #8]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80047ae:	609a      	str	r2, [r3, #8]
 80047b0:	e020      	b.n	80047f4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a18      	ldr	r2, [pc, #96]	; (8004818 <HAL_ADC_Start_DMA+0x214>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d11b      	bne.n	80047f4 <HAL_ADC_Start_DMA+0x1f0>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d114      	bne.n	80047f4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80047d8:	609a      	str	r2, [r3, #8]
 80047da:	e00b      	b.n	80047f4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e0:	f043 0210 	orr.w	r2, r3, #16
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ec:	f043 0201 	orr.w	r2, r3, #1
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	20000014 	.word	0x20000014
 8004804:	431bde83 	.word	0x431bde83
 8004808:	40012300 	.word	0x40012300
 800480c:	08004d65 	.word	0x08004d65
 8004810:	08004e1f 	.word	0x08004e1f
 8004814:	08004e3b 	.word	0x08004e3b
 8004818:	40012000 	.word	0x40012000
 800481c:	40012100 	.word	0x40012100
 8004820:	40012200 	.word	0x40012200

08004824 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800482c:	2300      	movs	r3, #0
 800482e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004836:	2b01      	cmp	r3, #1
 8004838:	d101      	bne.n	800483e <HAL_ADC_Stop_DMA+0x1a>
 800483a:	2302      	movs	r3, #2
 800483c:	e048      	b.n	80048d0 <HAL_ADC_Stop_DMA+0xac>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0201 	bic.w	r2, r2, #1
 8004854:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	d130      	bne.n	80048c6 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004872:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004878:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d10f      	bne.n	80048a2 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004886:	4618      	mov	r0, r3
 8004888:	f000 fcd6 	bl	8005238 <HAL_DMA_Abort>
 800488c:	4603      	mov	r3, r0
 800488e:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004890:	7bfb      	ldrb	r3, [r7, #15]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d005      	beq.n	80048a2 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80048b0:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80048ba:	f023 0301 	bic.w	r3, r3, #1
 80048be:	f043 0201 	orr.w	r2, r3, #1
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80048ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b083      	sub	sp, #12
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
	...

08004908 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004912:	2300      	movs	r3, #0
 8004914:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800491c:	2b01      	cmp	r3, #1
 800491e:	d101      	bne.n	8004924 <HAL_ADC_ConfigChannel+0x1c>
 8004920:	2302      	movs	r3, #2
 8004922:	e113      	b.n	8004b4c <HAL_ADC_ConfigChannel+0x244>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b09      	cmp	r3, #9
 8004932:	d925      	bls.n	8004980 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68d9      	ldr	r1, [r3, #12]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	b29b      	uxth	r3, r3
 8004940:	461a      	mov	r2, r3
 8004942:	4613      	mov	r3, r2
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	4413      	add	r3, r2
 8004948:	3b1e      	subs	r3, #30
 800494a:	2207      	movs	r2, #7
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	43da      	mvns	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	400a      	ands	r2, r1
 8004958:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68d9      	ldr	r1, [r3, #12]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	b29b      	uxth	r3, r3
 800496a:	4618      	mov	r0, r3
 800496c:	4603      	mov	r3, r0
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	4403      	add	r3, r0
 8004972:	3b1e      	subs	r3, #30
 8004974:	409a      	lsls	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	60da      	str	r2, [r3, #12]
 800497e:	e022      	b.n	80049c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6919      	ldr	r1, [r3, #16]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	b29b      	uxth	r3, r3
 800498c:	461a      	mov	r2, r3
 800498e:	4613      	mov	r3, r2
 8004990:	005b      	lsls	r3, r3, #1
 8004992:	4413      	add	r3, r2
 8004994:	2207      	movs	r2, #7
 8004996:	fa02 f303 	lsl.w	r3, r2, r3
 800499a:	43da      	mvns	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	400a      	ands	r2, r1
 80049a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6919      	ldr	r1, [r3, #16]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	689a      	ldr	r2, [r3, #8]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	4618      	mov	r0, r3
 80049b6:	4603      	mov	r3, r0
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	4403      	add	r3, r0
 80049bc:	409a      	lsls	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	2b06      	cmp	r3, #6
 80049cc:	d824      	bhi.n	8004a18 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	4613      	mov	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	3b05      	subs	r3, #5
 80049e0:	221f      	movs	r2, #31
 80049e2:	fa02 f303 	lsl.w	r3, r2, r3
 80049e6:	43da      	mvns	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	400a      	ands	r2, r1
 80049ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	4618      	mov	r0, r3
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	4613      	mov	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	3b05      	subs	r3, #5
 8004a0a:	fa00 f203 	lsl.w	r2, r0, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	635a      	str	r2, [r3, #52]	; 0x34
 8004a16:	e04c      	b.n	8004ab2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	2b0c      	cmp	r3, #12
 8004a1e:	d824      	bhi.n	8004a6a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	3b23      	subs	r3, #35	; 0x23
 8004a32:	221f      	movs	r2, #31
 8004a34:	fa02 f303 	lsl.w	r3, r2, r3
 8004a38:	43da      	mvns	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	400a      	ands	r2, r1
 8004a40:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	4618      	mov	r0, r3
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	4613      	mov	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	3b23      	subs	r3, #35	; 0x23
 8004a5c:	fa00 f203 	lsl.w	r2, r0, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	631a      	str	r2, [r3, #48]	; 0x30
 8004a68:	e023      	b.n	8004ab2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	4613      	mov	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	3b41      	subs	r3, #65	; 0x41
 8004a7c:	221f      	movs	r2, #31
 8004a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a82:	43da      	mvns	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	400a      	ands	r2, r1
 8004a8a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	4618      	mov	r0, r3
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	3b41      	subs	r3, #65	; 0x41
 8004aa6:	fa00 f203 	lsl.w	r2, r0, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ab2:	4b29      	ldr	r3, [pc, #164]	; (8004b58 <HAL_ADC_ConfigChannel+0x250>)
 8004ab4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a28      	ldr	r2, [pc, #160]	; (8004b5c <HAL_ADC_ConfigChannel+0x254>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d10f      	bne.n	8004ae0 <HAL_ADC_ConfigChannel+0x1d8>
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b12      	cmp	r3, #18
 8004ac6:	d10b      	bne.n	8004ae0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a1d      	ldr	r2, [pc, #116]	; (8004b5c <HAL_ADC_ConfigChannel+0x254>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d12b      	bne.n	8004b42 <HAL_ADC_ConfigChannel+0x23a>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a1c      	ldr	r2, [pc, #112]	; (8004b60 <HAL_ADC_ConfigChannel+0x258>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d003      	beq.n	8004afc <HAL_ADC_ConfigChannel+0x1f4>
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b11      	cmp	r3, #17
 8004afa:	d122      	bne.n	8004b42 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a11      	ldr	r2, [pc, #68]	; (8004b60 <HAL_ADC_ConfigChannel+0x258>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d111      	bne.n	8004b42 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004b1e:	4b11      	ldr	r3, [pc, #68]	; (8004b64 <HAL_ADC_ConfigChannel+0x25c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a11      	ldr	r2, [pc, #68]	; (8004b68 <HAL_ADC_ConfigChannel+0x260>)
 8004b24:	fba2 2303 	umull	r2, r3, r2, r3
 8004b28:	0c9a      	lsrs	r2, r3, #18
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004b34:	e002      	b.n	8004b3c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1f9      	bne.n	8004b36 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3714      	adds	r7, #20
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	40012300 	.word	0x40012300
 8004b5c:	40012000 	.word	0x40012000
 8004b60:	10000012 	.word	0x10000012
 8004b64:	20000014 	.word	0x20000014
 8004b68:	431bde83 	.word	0x431bde83

08004b6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b74:	4b79      	ldr	r3, [pc, #484]	; (8004d5c <ADC_Init+0x1f0>)
 8004b76:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ba0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6859      	ldr	r1, [r3, #4]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	021a      	lsls	r2, r3, #8
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004bc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6859      	ldr	r1, [r3, #4]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689a      	ldr	r2, [r3, #8]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004be6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6899      	ldr	r1, [r3, #8]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfe:	4a58      	ldr	r2, [pc, #352]	; (8004d60 <ADC_Init+0x1f4>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d022      	beq.n	8004c4a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689a      	ldr	r2, [r3, #8]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6899      	ldr	r1, [r3, #8]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6899      	ldr	r1, [r3, #8]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	609a      	str	r2, [r3, #8]
 8004c48:	e00f      	b.n	8004c6a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689a      	ldr	r2, [r3, #8]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c68:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	689a      	ldr	r2, [r3, #8]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 0202 	bic.w	r2, r2, #2
 8004c78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	6899      	ldr	r1, [r3, #8]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	7e1b      	ldrb	r3, [r3, #24]
 8004c84:	005a      	lsls	r2, r3, #1
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d01b      	beq.n	8004cd0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ca6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004cb6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	6859      	ldr	r1, [r3, #4]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	035a      	lsls	r2, r3, #13
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	605a      	str	r2, [r3, #4]
 8004cce:	e007      	b.n	8004ce0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cde:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004cee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	051a      	lsls	r2, r3, #20
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004d14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6899      	ldr	r1, [r3, #8]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d22:	025a      	lsls	r2, r3, #9
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689a      	ldr	r2, [r3, #8]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6899      	ldr	r1, [r3, #8]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	029a      	lsls	r2, r3, #10
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	609a      	str	r2, [r3, #8]
}
 8004d50:	bf00      	nop
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	40012300 	.word	0x40012300
 8004d60:	0f000001 	.word	0x0f000001

08004d64 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d70:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d13c      	bne.n	8004df8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d12b      	bne.n	8004df0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d127      	bne.n	8004df0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d006      	beq.n	8004dbc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d119      	bne.n	8004df0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685a      	ldr	r2, [r3, #4]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 0220 	bic.w	r2, r2, #32
 8004dca:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ddc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d105      	bne.n	8004df0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de8:	f043 0201 	orr.w	r2, r3, #1
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f7fe ffd1 	bl	8003d98 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004df6:	e00e      	b.n	8004e16 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfc:	f003 0310 	and.w	r3, r3, #16
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d003      	beq.n	8004e0c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f7ff fd74 	bl	80048f2 <HAL_ADC_ErrorCallback>
}
 8004e0a:	e004      	b.n	8004e16 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	4798      	blx	r3
}
 8004e16:	bf00      	nop
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b084      	sub	sp, #16
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f7fe ff0d 	bl	8003c4c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e32:	bf00      	nop
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b084      	sub	sp, #16
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e46:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2240      	movs	r2, #64	; 0x40
 8004e4c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e52:	f043 0204 	orr.w	r2, r3, #4
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f7ff fd49 	bl	80048f2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e60:	bf00      	nop
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <__NVIC_SetPriorityGrouping>:
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f003 0307 	and.w	r3, r3, #7
 8004e76:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e78:	4b0c      	ldr	r3, [pc, #48]	; (8004eac <__NVIC_SetPriorityGrouping+0x44>)
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e84:	4013      	ands	r3, r2
 8004e86:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e9a:	4a04      	ldr	r2, [pc, #16]	; (8004eac <__NVIC_SetPriorityGrouping+0x44>)
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	60d3      	str	r3, [r2, #12]
}
 8004ea0:	bf00      	nop
 8004ea2:	3714      	adds	r7, #20
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr
 8004eac:	e000ed00 	.word	0xe000ed00

08004eb0 <__NVIC_GetPriorityGrouping>:
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004eb4:	4b04      	ldr	r3, [pc, #16]	; (8004ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	0a1b      	lsrs	r3, r3, #8
 8004eba:	f003 0307 	and.w	r3, r3, #7
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr
 8004ec8:	e000ed00 	.word	0xe000ed00

08004ecc <__NVIC_EnableIRQ>:
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	db0b      	blt.n	8004ef6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ede:	79fb      	ldrb	r3, [r7, #7]
 8004ee0:	f003 021f 	and.w	r2, r3, #31
 8004ee4:	4907      	ldr	r1, [pc, #28]	; (8004f04 <__NVIC_EnableIRQ+0x38>)
 8004ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eea:	095b      	lsrs	r3, r3, #5
 8004eec:	2001      	movs	r0, #1
 8004eee:	fa00 f202 	lsl.w	r2, r0, r2
 8004ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004ef6:	bf00      	nop
 8004ef8:	370c      	adds	r7, #12
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	e000e100 	.word	0xe000e100

08004f08 <__NVIC_SetPriority>:
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	4603      	mov	r3, r0
 8004f10:	6039      	str	r1, [r7, #0]
 8004f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	db0a      	blt.n	8004f32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	b2da      	uxtb	r2, r3
 8004f20:	490c      	ldr	r1, [pc, #48]	; (8004f54 <__NVIC_SetPriority+0x4c>)
 8004f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f26:	0112      	lsls	r2, r2, #4
 8004f28:	b2d2      	uxtb	r2, r2
 8004f2a:	440b      	add	r3, r1
 8004f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004f30:	e00a      	b.n	8004f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	b2da      	uxtb	r2, r3
 8004f36:	4908      	ldr	r1, [pc, #32]	; (8004f58 <__NVIC_SetPriority+0x50>)
 8004f38:	79fb      	ldrb	r3, [r7, #7]
 8004f3a:	f003 030f 	and.w	r3, r3, #15
 8004f3e:	3b04      	subs	r3, #4
 8004f40:	0112      	lsls	r2, r2, #4
 8004f42:	b2d2      	uxtb	r2, r2
 8004f44:	440b      	add	r3, r1
 8004f46:	761a      	strb	r2, [r3, #24]
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	e000e100 	.word	0xe000e100
 8004f58:	e000ed00 	.word	0xe000ed00

08004f5c <NVIC_EncodePriority>:
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b089      	sub	sp, #36	; 0x24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f003 0307 	and.w	r3, r3, #7
 8004f6e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	f1c3 0307 	rsb	r3, r3, #7
 8004f76:	2b04      	cmp	r3, #4
 8004f78:	bf28      	it	cs
 8004f7a:	2304      	movcs	r3, #4
 8004f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	3304      	adds	r3, #4
 8004f82:	2b06      	cmp	r3, #6
 8004f84:	d902      	bls.n	8004f8c <NVIC_EncodePriority+0x30>
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	3b03      	subs	r3, #3
 8004f8a:	e000      	b.n	8004f8e <NVIC_EncodePriority+0x32>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f90:	f04f 32ff 	mov.w	r2, #4294967295
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9a:	43da      	mvns	r2, r3
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	401a      	ands	r2, r3
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	fa01 f303 	lsl.w	r3, r1, r3
 8004fae:	43d9      	mvns	r1, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fb4:	4313      	orrs	r3, r2
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3724      	adds	r7, #36	; 0x24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b082      	sub	sp, #8
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7ff ff4c 	bl	8004e68 <__NVIC_SetPriorityGrouping>
}
 8004fd0:	bf00      	nop
 8004fd2:	3708      	adds	r7, #8
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	4603      	mov	r3, r0
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
 8004fe4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004fea:	f7ff ff61 	bl	8004eb0 <__NVIC_GetPriorityGrouping>
 8004fee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	68b9      	ldr	r1, [r7, #8]
 8004ff4:	6978      	ldr	r0, [r7, #20]
 8004ff6:	f7ff ffb1 	bl	8004f5c <NVIC_EncodePriority>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005000:	4611      	mov	r1, r2
 8005002:	4618      	mov	r0, r3
 8005004:	f7ff ff80 	bl	8004f08 <__NVIC_SetPriority>
}
 8005008:	bf00      	nop
 800500a:	3718      	adds	r7, #24
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	4603      	mov	r3, r0
 8005018:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800501a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800501e:	4618      	mov	r0, r3
 8005020:	f7ff ff54 	bl	8004ecc <__NVIC_EnableIRQ>
}
 8005024:	bf00      	nop
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005034:	2300      	movs	r3, #0
 8005036:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005038:	f7ff f904 	bl	8004244 <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e099      	b.n	800517c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2202      	movs	r2, #2
 800504c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f022 0201 	bic.w	r2, r2, #1
 8005066:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005068:	e00f      	b.n	800508a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800506a:	f7ff f8eb 	bl	8004244 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b05      	cmp	r3, #5
 8005076:	d908      	bls.n	800508a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2220      	movs	r2, #32
 800507c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2203      	movs	r2, #3
 8005082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e078      	b.n	800517c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1e8      	bne.n	800506a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	4b38      	ldr	r3, [pc, #224]	; (8005184 <HAL_DMA_Init+0x158>)
 80050a4:	4013      	ands	r3, r2
 80050a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80050b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	4313      	orrs	r3, r2
 80050da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	d107      	bne.n	80050f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ec:	4313      	orrs	r3, r2
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f023 0307 	bic.w	r3, r3, #7
 800510a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	4313      	orrs	r3, r2
 8005114:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511a:	2b04      	cmp	r3, #4
 800511c:	d117      	bne.n	800514e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	4313      	orrs	r3, r2
 8005126:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00e      	beq.n	800514e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 fadf 	bl	80056f4 <DMA_CheckFifoParam>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d008      	beq.n	800514e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2240      	movs	r2, #64	; 0x40
 8005140:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800514a:	2301      	movs	r3, #1
 800514c:	e016      	b.n	800517c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 fa96 	bl	8005688 <DMA_CalcBaseAndBitshift>
 800515c:	4603      	mov	r3, r0
 800515e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005164:	223f      	movs	r2, #63	; 0x3f
 8005166:	409a      	lsls	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3718      	adds	r7, #24
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	f010803f 	.word	0xf010803f

08005188 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005196:	2300      	movs	r3, #0
 8005198:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800519e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d101      	bne.n	80051ae <HAL_DMA_Start_IT+0x26>
 80051aa:	2302      	movs	r3, #2
 80051ac:	e040      	b.n	8005230 <HAL_DMA_Start_IT+0xa8>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d12f      	bne.n	8005222 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2202      	movs	r2, #2
 80051c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	68b9      	ldr	r1, [r7, #8]
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f000 fa28 	bl	800562c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e0:	223f      	movs	r2, #63	; 0x3f
 80051e2:	409a      	lsls	r2, r3
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f042 0216 	orr.w	r2, r2, #22
 80051f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d007      	beq.n	8005210 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f042 0208 	orr.w	r2, r2, #8
 800520e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0201 	orr.w	r2, r2, #1
 800521e:	601a      	str	r2, [r3, #0]
 8005220:	e005      	b.n	800522e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800522a:	2302      	movs	r3, #2
 800522c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800522e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3718      	adds	r7, #24
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005244:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005246:	f7fe fffd 	bl	8004244 <HAL_GetTick>
 800524a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d008      	beq.n	800526a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2280      	movs	r2, #128	; 0x80
 800525c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e052      	b.n	8005310 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 0216 	bic.w	r2, r2, #22
 8005278:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	695a      	ldr	r2, [r3, #20]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005288:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528e:	2b00      	cmp	r3, #0
 8005290:	d103      	bne.n	800529a <HAL_DMA_Abort+0x62>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005296:	2b00      	cmp	r3, #0
 8005298:	d007      	beq.n	80052aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 0208 	bic.w	r2, r2, #8
 80052a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f022 0201 	bic.w	r2, r2, #1
 80052b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052ba:	e013      	b.n	80052e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80052bc:	f7fe ffc2 	bl	8004244 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b05      	cmp	r3, #5
 80052c8:	d90c      	bls.n	80052e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2220      	movs	r2, #32
 80052ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2203      	movs	r2, #3
 80052d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e015      	b.n	8005310 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1e4      	bne.n	80052bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f6:	223f      	movs	r2, #63	; 0x3f
 80052f8:	409a      	lsls	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005320:	2300      	movs	r3, #0
 8005322:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005324:	4b8e      	ldr	r3, [pc, #568]	; (8005560 <HAL_DMA_IRQHandler+0x248>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a8e      	ldr	r2, [pc, #568]	; (8005564 <HAL_DMA_IRQHandler+0x24c>)
 800532a:	fba2 2303 	umull	r2, r3, r2, r3
 800532e:	0a9b      	lsrs	r3, r3, #10
 8005330:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005336:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005342:	2208      	movs	r2, #8
 8005344:	409a      	lsls	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	4013      	ands	r3, r2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d01a      	beq.n	8005384 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0304 	and.w	r3, r3, #4
 8005358:	2b00      	cmp	r3, #0
 800535a:	d013      	beq.n	8005384 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 0204 	bic.w	r2, r2, #4
 800536a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005370:	2208      	movs	r2, #8
 8005372:	409a      	lsls	r2, r3
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800537c:	f043 0201 	orr.w	r2, r3, #1
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005388:	2201      	movs	r2, #1
 800538a:	409a      	lsls	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4013      	ands	r3, r2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d012      	beq.n	80053ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00b      	beq.n	80053ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053a6:	2201      	movs	r2, #1
 80053a8:	409a      	lsls	r2, r3
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b2:	f043 0202 	orr.w	r2, r3, #2
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053be:	2204      	movs	r2, #4
 80053c0:	409a      	lsls	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	4013      	ands	r3, r2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d012      	beq.n	80053f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0302 	and.w	r3, r3, #2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00b      	beq.n	80053f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053dc:	2204      	movs	r2, #4
 80053de:	409a      	lsls	r2, r3
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e8:	f043 0204 	orr.w	r2, r3, #4
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053f4:	2210      	movs	r2, #16
 80053f6:	409a      	lsls	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	4013      	ands	r3, r2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d043      	beq.n	8005488 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0308 	and.w	r3, r3, #8
 800540a:	2b00      	cmp	r3, #0
 800540c:	d03c      	beq.n	8005488 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005412:	2210      	movs	r2, #16
 8005414:	409a      	lsls	r2, r3
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d018      	beq.n	800545a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d108      	bne.n	8005448 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543a:	2b00      	cmp	r3, #0
 800543c:	d024      	beq.n	8005488 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	4798      	blx	r3
 8005446:	e01f      	b.n	8005488 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800544c:	2b00      	cmp	r3, #0
 800544e:	d01b      	beq.n	8005488 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	4798      	blx	r3
 8005458:	e016      	b.n	8005488 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005464:	2b00      	cmp	r3, #0
 8005466:	d107      	bne.n	8005478 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f022 0208 	bic.w	r2, r2, #8
 8005476:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547c:	2b00      	cmp	r3, #0
 800547e:	d003      	beq.n	8005488 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800548c:	2220      	movs	r2, #32
 800548e:	409a      	lsls	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4013      	ands	r3, r2
 8005494:	2b00      	cmp	r3, #0
 8005496:	f000 808f 	beq.w	80055b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0310 	and.w	r3, r3, #16
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f000 8087 	beq.w	80055b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ae:	2220      	movs	r2, #32
 80054b0:	409a      	lsls	r2, r3
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b05      	cmp	r3, #5
 80054c0:	d136      	bne.n	8005530 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f022 0216 	bic.w	r2, r2, #22
 80054d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	695a      	ldr	r2, [r3, #20]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d103      	bne.n	80054f2 <HAL_DMA_IRQHandler+0x1da>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d007      	beq.n	8005502 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f022 0208 	bic.w	r2, r2, #8
 8005500:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005506:	223f      	movs	r2, #63	; 0x3f
 8005508:	409a      	lsls	r2, r3
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005522:	2b00      	cmp	r3, #0
 8005524:	d07e      	beq.n	8005624 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	4798      	blx	r3
        }
        return;
 800552e:	e079      	b.n	8005624 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d01d      	beq.n	800557a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10d      	bne.n	8005568 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005550:	2b00      	cmp	r3, #0
 8005552:	d031      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	4798      	blx	r3
 800555c:	e02c      	b.n	80055b8 <HAL_DMA_IRQHandler+0x2a0>
 800555e:	bf00      	nop
 8005560:	20000014 	.word	0x20000014
 8005564:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800556c:	2b00      	cmp	r3, #0
 800556e:	d023      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	4798      	blx	r3
 8005578:	e01e      	b.n	80055b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10f      	bne.n	80055a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0210 	bic.w	r2, r2, #16
 8005596:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d003      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d032      	beq.n	8005626 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d022      	beq.n	8005612 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2205      	movs	r2, #5
 80055d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f022 0201 	bic.w	r2, r2, #1
 80055e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	3301      	adds	r3, #1
 80055e8:	60bb      	str	r3, [r7, #8]
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d307      	bcc.n	8005600 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1f2      	bne.n	80055e4 <HAL_DMA_IRQHandler+0x2cc>
 80055fe:	e000      	b.n	8005602 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005600:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005616:	2b00      	cmp	r3, #0
 8005618:	d005      	beq.n	8005626 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	4798      	blx	r3
 8005622:	e000      	b.n	8005626 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005624:	bf00      	nop
    }
  }
}
 8005626:	3718      	adds	r7, #24
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
 8005638:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005648:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	2b40      	cmp	r3, #64	; 0x40
 8005658:	d108      	bne.n	800566c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800566a:	e007      	b.n	800567c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	60da      	str	r2, [r3, #12]
}
 800567c:	bf00      	nop
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	b2db      	uxtb	r3, r3
 8005696:	3b10      	subs	r3, #16
 8005698:	4a14      	ldr	r2, [pc, #80]	; (80056ec <DMA_CalcBaseAndBitshift+0x64>)
 800569a:	fba2 2303 	umull	r2, r3, r2, r3
 800569e:	091b      	lsrs	r3, r3, #4
 80056a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80056a2:	4a13      	ldr	r2, [pc, #76]	; (80056f0 <DMA_CalcBaseAndBitshift+0x68>)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	4413      	add	r3, r2
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	461a      	mov	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2b03      	cmp	r3, #3
 80056b4:	d909      	bls.n	80056ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80056be:	f023 0303 	bic.w	r3, r3, #3
 80056c2:	1d1a      	adds	r2, r3, #4
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	659a      	str	r2, [r3, #88]	; 0x58
 80056c8:	e007      	b.n	80056da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80056d2:	f023 0303 	bic.w	r3, r3, #3
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	aaaaaaab 	.word	0xaaaaaaab
 80056f0:	08011f10 	.word	0x08011f10

080056f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056fc:	2300      	movs	r3, #0
 80056fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005704:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d11f      	bne.n	800574e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	2b03      	cmp	r3, #3
 8005712:	d856      	bhi.n	80057c2 <DMA_CheckFifoParam+0xce>
 8005714:	a201      	add	r2, pc, #4	; (adr r2, 800571c <DMA_CheckFifoParam+0x28>)
 8005716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571a:	bf00      	nop
 800571c:	0800572d 	.word	0x0800572d
 8005720:	0800573f 	.word	0x0800573f
 8005724:	0800572d 	.word	0x0800572d
 8005728:	080057c3 	.word	0x080057c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005730:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d046      	beq.n	80057c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800573c:	e043      	b.n	80057c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005742:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005746:	d140      	bne.n	80057ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800574c:	e03d      	b.n	80057ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005756:	d121      	bne.n	800579c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	2b03      	cmp	r3, #3
 800575c:	d837      	bhi.n	80057ce <DMA_CheckFifoParam+0xda>
 800575e:	a201      	add	r2, pc, #4	; (adr r2, 8005764 <DMA_CheckFifoParam+0x70>)
 8005760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005764:	08005775 	.word	0x08005775
 8005768:	0800577b 	.word	0x0800577b
 800576c:	08005775 	.word	0x08005775
 8005770:	0800578d 	.word	0x0800578d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	73fb      	strb	r3, [r7, #15]
      break;
 8005778:	e030      	b.n	80057dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d025      	beq.n	80057d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800578a:	e022      	b.n	80057d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005790:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005794:	d11f      	bne.n	80057d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800579a:	e01c      	b.n	80057d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d903      	bls.n	80057aa <DMA_CheckFifoParam+0xb6>
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	2b03      	cmp	r3, #3
 80057a6:	d003      	beq.n	80057b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80057a8:	e018      	b.n	80057dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	73fb      	strb	r3, [r7, #15]
      break;
 80057ae:	e015      	b.n	80057dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00e      	beq.n	80057da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	73fb      	strb	r3, [r7, #15]
      break;
 80057c0:	e00b      	b.n	80057da <DMA_CheckFifoParam+0xe6>
      break;
 80057c2:	bf00      	nop
 80057c4:	e00a      	b.n	80057dc <DMA_CheckFifoParam+0xe8>
      break;
 80057c6:	bf00      	nop
 80057c8:	e008      	b.n	80057dc <DMA_CheckFifoParam+0xe8>
      break;
 80057ca:	bf00      	nop
 80057cc:	e006      	b.n	80057dc <DMA_CheckFifoParam+0xe8>
      break;
 80057ce:	bf00      	nop
 80057d0:	e004      	b.n	80057dc <DMA_CheckFifoParam+0xe8>
      break;
 80057d2:	bf00      	nop
 80057d4:	e002      	b.n	80057dc <DMA_CheckFifoParam+0xe8>
      break;   
 80057d6:	bf00      	nop
 80057d8:	e000      	b.n	80057dc <DMA_CheckFifoParam+0xe8>
      break;
 80057da:	bf00      	nop
    }
  } 
  
  return status; 
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop

080057ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b089      	sub	sp, #36	; 0x24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80057fa:	2300      	movs	r3, #0
 80057fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80057fe:	2300      	movs	r3, #0
 8005800:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005802:	2300      	movs	r3, #0
 8005804:	61fb      	str	r3, [r7, #28]
 8005806:	e165      	b.n	8005ad4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005808:	2201      	movs	r2, #1
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	fa02 f303 	lsl.w	r3, r2, r3
 8005810:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	4013      	ands	r3, r2
 800581a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	429a      	cmp	r2, r3
 8005822:	f040 8154 	bne.w	8005ace <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f003 0303 	and.w	r3, r3, #3
 800582e:	2b01      	cmp	r3, #1
 8005830:	d005      	beq.n	800583e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800583a:	2b02      	cmp	r3, #2
 800583c:	d130      	bne.n	80058a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	005b      	lsls	r3, r3, #1
 8005848:	2203      	movs	r2, #3
 800584a:	fa02 f303 	lsl.w	r3, r2, r3
 800584e:	43db      	mvns	r3, r3
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	4013      	ands	r3, r2
 8005854:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	68da      	ldr	r2, [r3, #12]
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	005b      	lsls	r3, r3, #1
 800585e:	fa02 f303 	lsl.w	r3, r2, r3
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	4313      	orrs	r3, r2
 8005866:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	69ba      	ldr	r2, [r7, #24]
 800586c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005874:	2201      	movs	r2, #1
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	fa02 f303 	lsl.w	r3, r2, r3
 800587c:	43db      	mvns	r3, r3
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	4013      	ands	r3, r2
 8005882:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	091b      	lsrs	r3, r3, #4
 800588a:	f003 0201 	and.w	r2, r3, #1
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	fa02 f303 	lsl.w	r3, r2, r3
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	4313      	orrs	r3, r2
 8005898:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f003 0303 	and.w	r3, r3, #3
 80058a8:	2b03      	cmp	r3, #3
 80058aa:	d017      	beq.n	80058dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	2203      	movs	r2, #3
 80058b8:	fa02 f303 	lsl.w	r3, r2, r3
 80058bc:	43db      	mvns	r3, r3
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	4013      	ands	r3, r2
 80058c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	689a      	ldr	r2, [r3, #8]
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	005b      	lsls	r3, r3, #1
 80058cc:	fa02 f303 	lsl.w	r3, r2, r3
 80058d0:	69ba      	ldr	r2, [r7, #24]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f003 0303 	and.w	r3, r3, #3
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d123      	bne.n	8005930 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	08da      	lsrs	r2, r3, #3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	3208      	adds	r2, #8
 80058f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	220f      	movs	r2, #15
 8005900:	fa02 f303 	lsl.w	r3, r2, r3
 8005904:	43db      	mvns	r3, r3
 8005906:	69ba      	ldr	r2, [r7, #24]
 8005908:	4013      	ands	r3, r2
 800590a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	691a      	ldr	r2, [r3, #16]
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	f003 0307 	and.w	r3, r3, #7
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	fa02 f303 	lsl.w	r3, r2, r3
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	4313      	orrs	r3, r2
 8005920:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	08da      	lsrs	r2, r3, #3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	3208      	adds	r2, #8
 800592a:	69b9      	ldr	r1, [r7, #24]
 800592c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	2203      	movs	r2, #3
 800593c:	fa02 f303 	lsl.w	r3, r2, r3
 8005940:	43db      	mvns	r3, r3
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	4013      	ands	r3, r2
 8005946:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f003 0203 	and.w	r2, r3, #3
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	005b      	lsls	r3, r3, #1
 8005954:	fa02 f303 	lsl.w	r3, r2, r3
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	4313      	orrs	r3, r2
 800595c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	69ba      	ldr	r2, [r7, #24]
 8005962:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800596c:	2b00      	cmp	r3, #0
 800596e:	f000 80ae 	beq.w	8005ace <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005972:	2300      	movs	r3, #0
 8005974:	60fb      	str	r3, [r7, #12]
 8005976:	4b5d      	ldr	r3, [pc, #372]	; (8005aec <HAL_GPIO_Init+0x300>)
 8005978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800597a:	4a5c      	ldr	r2, [pc, #368]	; (8005aec <HAL_GPIO_Init+0x300>)
 800597c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005980:	6453      	str	r3, [r2, #68]	; 0x44
 8005982:	4b5a      	ldr	r3, [pc, #360]	; (8005aec <HAL_GPIO_Init+0x300>)
 8005984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800598a:	60fb      	str	r3, [r7, #12]
 800598c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800598e:	4a58      	ldr	r2, [pc, #352]	; (8005af0 <HAL_GPIO_Init+0x304>)
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	089b      	lsrs	r3, r3, #2
 8005994:	3302      	adds	r3, #2
 8005996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800599a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	f003 0303 	and.w	r3, r3, #3
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	220f      	movs	r2, #15
 80059a6:	fa02 f303 	lsl.w	r3, r2, r3
 80059aa:	43db      	mvns	r3, r3
 80059ac:	69ba      	ldr	r2, [r7, #24]
 80059ae:	4013      	ands	r3, r2
 80059b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a4f      	ldr	r2, [pc, #316]	; (8005af4 <HAL_GPIO_Init+0x308>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d025      	beq.n	8005a06 <HAL_GPIO_Init+0x21a>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a4e      	ldr	r2, [pc, #312]	; (8005af8 <HAL_GPIO_Init+0x30c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d01f      	beq.n	8005a02 <HAL_GPIO_Init+0x216>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a4d      	ldr	r2, [pc, #308]	; (8005afc <HAL_GPIO_Init+0x310>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d019      	beq.n	80059fe <HAL_GPIO_Init+0x212>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a4c      	ldr	r2, [pc, #304]	; (8005b00 <HAL_GPIO_Init+0x314>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d013      	beq.n	80059fa <HAL_GPIO_Init+0x20e>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a4b      	ldr	r2, [pc, #300]	; (8005b04 <HAL_GPIO_Init+0x318>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d00d      	beq.n	80059f6 <HAL_GPIO_Init+0x20a>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a4a      	ldr	r2, [pc, #296]	; (8005b08 <HAL_GPIO_Init+0x31c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d007      	beq.n	80059f2 <HAL_GPIO_Init+0x206>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a49      	ldr	r2, [pc, #292]	; (8005b0c <HAL_GPIO_Init+0x320>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d101      	bne.n	80059ee <HAL_GPIO_Init+0x202>
 80059ea:	2306      	movs	r3, #6
 80059ec:	e00c      	b.n	8005a08 <HAL_GPIO_Init+0x21c>
 80059ee:	2307      	movs	r3, #7
 80059f0:	e00a      	b.n	8005a08 <HAL_GPIO_Init+0x21c>
 80059f2:	2305      	movs	r3, #5
 80059f4:	e008      	b.n	8005a08 <HAL_GPIO_Init+0x21c>
 80059f6:	2304      	movs	r3, #4
 80059f8:	e006      	b.n	8005a08 <HAL_GPIO_Init+0x21c>
 80059fa:	2303      	movs	r3, #3
 80059fc:	e004      	b.n	8005a08 <HAL_GPIO_Init+0x21c>
 80059fe:	2302      	movs	r3, #2
 8005a00:	e002      	b.n	8005a08 <HAL_GPIO_Init+0x21c>
 8005a02:	2301      	movs	r3, #1
 8005a04:	e000      	b.n	8005a08 <HAL_GPIO_Init+0x21c>
 8005a06:	2300      	movs	r3, #0
 8005a08:	69fa      	ldr	r2, [r7, #28]
 8005a0a:	f002 0203 	and.w	r2, r2, #3
 8005a0e:	0092      	lsls	r2, r2, #2
 8005a10:	4093      	lsls	r3, r2
 8005a12:	69ba      	ldr	r2, [r7, #24]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a18:	4935      	ldr	r1, [pc, #212]	; (8005af0 <HAL_GPIO_Init+0x304>)
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	089b      	lsrs	r3, r3, #2
 8005a1e:	3302      	adds	r3, #2
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a26:	4b3a      	ldr	r3, [pc, #232]	; (8005b10 <HAL_GPIO_Init+0x324>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	43db      	mvns	r3, r3
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	4013      	ands	r3, r2
 8005a34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005a42:	69ba      	ldr	r2, [r7, #24]
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a4a:	4a31      	ldr	r2, [pc, #196]	; (8005b10 <HAL_GPIO_Init+0x324>)
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a50:	4b2f      	ldr	r3, [pc, #188]	; (8005b10 <HAL_GPIO_Init+0x324>)
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	43db      	mvns	r3, r3
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d003      	beq.n	8005a74 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005a6c:	69ba      	ldr	r2, [r7, #24]
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a74:	4a26      	ldr	r2, [pc, #152]	; (8005b10 <HAL_GPIO_Init+0x324>)
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005a7a:	4b25      	ldr	r3, [pc, #148]	; (8005b10 <HAL_GPIO_Init+0x324>)
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	43db      	mvns	r3, r3
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	4013      	ands	r3, r2
 8005a88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a9e:	4a1c      	ldr	r2, [pc, #112]	; (8005b10 <HAL_GPIO_Init+0x324>)
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005aa4:	4b1a      	ldr	r3, [pc, #104]	; (8005b10 <HAL_GPIO_Init+0x324>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	43db      	mvns	r3, r3
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d003      	beq.n	8005ac8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ac8:	4a11      	ldr	r2, [pc, #68]	; (8005b10 <HAL_GPIO_Init+0x324>)
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	61fb      	str	r3, [r7, #28]
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	2b0f      	cmp	r3, #15
 8005ad8:	f67f ae96 	bls.w	8005808 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005adc:	bf00      	nop
 8005ade:	bf00      	nop
 8005ae0:	3724      	adds	r7, #36	; 0x24
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	40023800 	.word	0x40023800
 8005af0:	40013800 	.word	0x40013800
 8005af4:	40020000 	.word	0x40020000
 8005af8:	40020400 	.word	0x40020400
 8005afc:	40020800 	.word	0x40020800
 8005b00:	40020c00 	.word	0x40020c00
 8005b04:	40021000 	.word	0x40021000
 8005b08:	40021400 	.word	0x40021400
 8005b0c:	40021800 	.word	0x40021800
 8005b10:	40013c00 	.word	0x40013c00

08005b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	807b      	strh	r3, [r7, #2]
 8005b20:	4613      	mov	r3, r2
 8005b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b24:	787b      	ldrb	r3, [r7, #1]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b2a:	887a      	ldrh	r2, [r7, #2]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b30:	e003      	b.n	8005b3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b32:	887b      	ldrh	r3, [r7, #2]
 8005b34:	041a      	lsls	r2, r3, #16
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	619a      	str	r2, [r3, #24]
}
 8005b3a:	bf00      	nop
 8005b3c:	370c      	adds	r7, #12
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
	...

08005b48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e12b      	b.n	8005db2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d106      	bne.n	8005b74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f7fc fdee 	bl	8002750 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2224      	movs	r2, #36	; 0x24
 8005b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 0201 	bic.w	r2, r2, #1
 8005b8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005baa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005bac:	f000 fd0a 	bl	80065c4 <HAL_RCC_GetPCLK1Freq>
 8005bb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	4a81      	ldr	r2, [pc, #516]	; (8005dbc <HAL_I2C_Init+0x274>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d807      	bhi.n	8005bcc <HAL_I2C_Init+0x84>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4a80      	ldr	r2, [pc, #512]	; (8005dc0 <HAL_I2C_Init+0x278>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	bf94      	ite	ls
 8005bc4:	2301      	movls	r3, #1
 8005bc6:	2300      	movhi	r3, #0
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	e006      	b.n	8005bda <HAL_I2C_Init+0x92>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4a7d      	ldr	r2, [pc, #500]	; (8005dc4 <HAL_I2C_Init+0x27c>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	bf94      	ite	ls
 8005bd4:	2301      	movls	r3, #1
 8005bd6:	2300      	movhi	r3, #0
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d001      	beq.n	8005be2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e0e7      	b.n	8005db2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	4a78      	ldr	r2, [pc, #480]	; (8005dc8 <HAL_I2C_Init+0x280>)
 8005be6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bea:	0c9b      	lsrs	r3, r3, #18
 8005bec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6a1b      	ldr	r3, [r3, #32]
 8005c08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	4a6a      	ldr	r2, [pc, #424]	; (8005dbc <HAL_I2C_Init+0x274>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d802      	bhi.n	8005c1c <HAL_I2C_Init+0xd4>
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	e009      	b.n	8005c30 <HAL_I2C_Init+0xe8>
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005c22:	fb02 f303 	mul.w	r3, r2, r3
 8005c26:	4a69      	ldr	r2, [pc, #420]	; (8005dcc <HAL_I2C_Init+0x284>)
 8005c28:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2c:	099b      	lsrs	r3, r3, #6
 8005c2e:	3301      	adds	r3, #1
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	6812      	ldr	r2, [r2, #0]
 8005c34:	430b      	orrs	r3, r1
 8005c36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005c42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	495c      	ldr	r1, [pc, #368]	; (8005dbc <HAL_I2C_Init+0x274>)
 8005c4c:	428b      	cmp	r3, r1
 8005c4e:	d819      	bhi.n	8005c84 <HAL_I2C_Init+0x13c>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	1e59      	subs	r1, r3, #1
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	005b      	lsls	r3, r3, #1
 8005c5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c5e:	1c59      	adds	r1, r3, #1
 8005c60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005c64:	400b      	ands	r3, r1
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00a      	beq.n	8005c80 <HAL_I2C_Init+0x138>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	1e59      	subs	r1, r3, #1
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	005b      	lsls	r3, r3, #1
 8005c74:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c78:	3301      	adds	r3, #1
 8005c7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c7e:	e051      	b.n	8005d24 <HAL_I2C_Init+0x1dc>
 8005c80:	2304      	movs	r3, #4
 8005c82:	e04f      	b.n	8005d24 <HAL_I2C_Init+0x1dc>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d111      	bne.n	8005cb0 <HAL_I2C_Init+0x168>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	1e58      	subs	r0, r3, #1
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6859      	ldr	r1, [r3, #4]
 8005c94:	460b      	mov	r3, r1
 8005c96:	005b      	lsls	r3, r3, #1
 8005c98:	440b      	add	r3, r1
 8005c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	bf0c      	ite	eq
 8005ca8:	2301      	moveq	r3, #1
 8005caa:	2300      	movne	r3, #0
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	e012      	b.n	8005cd6 <HAL_I2C_Init+0x18e>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	1e58      	subs	r0, r3, #1
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6859      	ldr	r1, [r3, #4]
 8005cb8:	460b      	mov	r3, r1
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	440b      	add	r3, r1
 8005cbe:	0099      	lsls	r1, r3, #2
 8005cc0:	440b      	add	r3, r1
 8005cc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	bf0c      	ite	eq
 8005cd0:	2301      	moveq	r3, #1
 8005cd2:	2300      	movne	r3, #0
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <HAL_I2C_Init+0x196>
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e022      	b.n	8005d24 <HAL_I2C_Init+0x1dc>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10e      	bne.n	8005d04 <HAL_I2C_Init+0x1bc>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	1e58      	subs	r0, r3, #1
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6859      	ldr	r1, [r3, #4]
 8005cee:	460b      	mov	r3, r1
 8005cf0:	005b      	lsls	r3, r3, #1
 8005cf2:	440b      	add	r3, r1
 8005cf4:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d02:	e00f      	b.n	8005d24 <HAL_I2C_Init+0x1dc>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	1e58      	subs	r0, r3, #1
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6859      	ldr	r1, [r3, #4]
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	440b      	add	r3, r1
 8005d12:	0099      	lsls	r1, r3, #2
 8005d14:	440b      	add	r3, r1
 8005d16:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d24:	6879      	ldr	r1, [r7, #4]
 8005d26:	6809      	ldr	r1, [r1, #0]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	69da      	ldr	r2, [r3, #28]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	430a      	orrs	r2, r1
 8005d46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005d52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	6911      	ldr	r1, [r2, #16]
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	68d2      	ldr	r2, [r2, #12]
 8005d5e:	4311      	orrs	r1, r2
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	6812      	ldr	r2, [r2, #0]
 8005d64:	430b      	orrs	r3, r1
 8005d66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	695a      	ldr	r2, [r3, #20]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	430a      	orrs	r2, r1
 8005d82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f042 0201 	orr.w	r2, r2, #1
 8005d92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2220      	movs	r2, #32
 8005d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	000186a0 	.word	0x000186a0
 8005dc0:	001e847f 	.word	0x001e847f
 8005dc4:	003d08ff 	.word	0x003d08ff
 8005dc8:	431bde83 	.word	0x431bde83
 8005dcc:	10624dd3 	.word	0x10624dd3

08005dd0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b088      	sub	sp, #32
 8005dd4:	af02      	add	r7, sp, #8
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	607a      	str	r2, [r7, #4]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	460b      	mov	r3, r1
 8005dde:	817b      	strh	r3, [r7, #10]
 8005de0:	4613      	mov	r3, r2
 8005de2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005de4:	f7fe fa2e 	bl	8004244 <HAL_GetTick>
 8005de8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b20      	cmp	r3, #32
 8005df4:	f040 80e0 	bne.w	8005fb8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	9300      	str	r3, [sp, #0]
 8005dfc:	2319      	movs	r3, #25
 8005dfe:	2201      	movs	r2, #1
 8005e00:	4970      	ldr	r1, [pc, #448]	; (8005fc4 <HAL_I2C_Master_Transmit+0x1f4>)
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f000 f964 	bl	80060d0 <I2C_WaitOnFlagUntilTimeout>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d001      	beq.n	8005e12 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005e0e:	2302      	movs	r3, #2
 8005e10:	e0d3      	b.n	8005fba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d101      	bne.n	8005e20 <HAL_I2C_Master_Transmit+0x50>
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	e0cc      	b.n	8005fba <HAL_I2C_Master_Transmit+0x1ea>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d007      	beq.n	8005e46 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f042 0201 	orr.w	r2, r2, #1
 8005e44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2221      	movs	r2, #33	; 0x21
 8005e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2210      	movs	r2, #16
 8005e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	893a      	ldrh	r2, [r7, #8]
 8005e76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	4a50      	ldr	r2, [pc, #320]	; (8005fc8 <HAL_I2C_Master_Transmit+0x1f8>)
 8005e86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005e88:	8979      	ldrh	r1, [r7, #10]
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	6a3a      	ldr	r2, [r7, #32]
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f000 f89c 	bl	8005fcc <I2C_MasterRequestWrite>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d001      	beq.n	8005e9e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e08d      	b.n	8005fba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	613b      	str	r3, [r7, #16]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	613b      	str	r3, [r7, #16]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	613b      	str	r3, [r7, #16]
 8005eb2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005eb4:	e066      	b.n	8005f84 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	6a39      	ldr	r1, [r7, #32]
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 f9de 	bl	800627c <I2C_WaitOnTXEFlagUntilTimeout>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00d      	beq.n	8005ee2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eca:	2b04      	cmp	r3, #4
 8005ecc:	d107      	bne.n	8005ede <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005edc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e06b      	b.n	8005fba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee6:	781a      	ldrb	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef2:	1c5a      	adds	r2, r3, #1
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	3b01      	subs	r3, #1
 8005f00:	b29a      	uxth	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	695b      	ldr	r3, [r3, #20]
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b04      	cmp	r3, #4
 8005f1e:	d11b      	bne.n	8005f58 <HAL_I2C_Master_Transmit+0x188>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d017      	beq.n	8005f58 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2c:	781a      	ldrb	r2, [r3, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	1c5a      	adds	r2, r3, #1
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	3b01      	subs	r3, #1
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f50:	3b01      	subs	r3, #1
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	6a39      	ldr	r1, [r7, #32]
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f000 f9ce 	bl	80062fe <I2C_WaitOnBTFFlagUntilTimeout>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00d      	beq.n	8005f84 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6c:	2b04      	cmp	r3, #4
 8005f6e:	d107      	bne.n	8005f80 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f7e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e01a      	b.n	8005fba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d194      	bne.n	8005eb6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2220      	movs	r2, #32
 8005fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	e000      	b.n	8005fba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005fb8:	2302      	movs	r3, #2
  }
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3718      	adds	r7, #24
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	00100002 	.word	0x00100002
 8005fc8:	ffff0000 	.word	0xffff0000

08005fcc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b088      	sub	sp, #32
 8005fd0:	af02      	add	r7, sp, #8
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	607a      	str	r2, [r7, #4]
 8005fd6:	603b      	str	r3, [r7, #0]
 8005fd8:	460b      	mov	r3, r1
 8005fda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2b08      	cmp	r3, #8
 8005fe6:	d006      	beq.n	8005ff6 <I2C_MasterRequestWrite+0x2a>
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d003      	beq.n	8005ff6 <I2C_MasterRequestWrite+0x2a>
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ff4:	d108      	bne.n	8006008 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006004:	601a      	str	r2, [r3, #0]
 8006006:	e00b      	b.n	8006020 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600c:	2b12      	cmp	r3, #18
 800600e:	d107      	bne.n	8006020 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800601e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f000 f84f 	bl	80060d0 <I2C_WaitOnFlagUntilTimeout>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00d      	beq.n	8006054 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006046:	d103      	bne.n	8006050 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800604e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e035      	b.n	80060c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800605c:	d108      	bne.n	8006070 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800605e:	897b      	ldrh	r3, [r7, #10]
 8006060:	b2db      	uxtb	r3, r3
 8006062:	461a      	mov	r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800606c:	611a      	str	r2, [r3, #16]
 800606e:	e01b      	b.n	80060a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006070:	897b      	ldrh	r3, [r7, #10]
 8006072:	11db      	asrs	r3, r3, #7
 8006074:	b2db      	uxtb	r3, r3
 8006076:	f003 0306 	and.w	r3, r3, #6
 800607a:	b2db      	uxtb	r3, r3
 800607c:	f063 030f 	orn	r3, r3, #15
 8006080:	b2da      	uxtb	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	490e      	ldr	r1, [pc, #56]	; (80060c8 <I2C_MasterRequestWrite+0xfc>)
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f000 f875 	bl	800617e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e010      	b.n	80060c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800609e:	897b      	ldrh	r3, [r7, #10]
 80060a0:	b2da      	uxtb	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	4907      	ldr	r1, [pc, #28]	; (80060cc <I2C_MasterRequestWrite+0x100>)
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f000 f865 	bl	800617e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e000      	b.n	80060c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3718      	adds	r7, #24
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	00010008 	.word	0x00010008
 80060cc:	00010002 	.word	0x00010002

080060d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	603b      	str	r3, [r7, #0]
 80060dc:	4613      	mov	r3, r2
 80060de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060e0:	e025      	b.n	800612e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e8:	d021      	beq.n	800612e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ea:	f7fe f8ab 	bl	8004244 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d302      	bcc.n	8006100 <I2C_WaitOnFlagUntilTimeout+0x30>
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d116      	bne.n	800612e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2220      	movs	r2, #32
 800610a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611a:	f043 0220 	orr.w	r2, r3, #32
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e023      	b.n	8006176 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	0c1b      	lsrs	r3, r3, #16
 8006132:	b2db      	uxtb	r3, r3
 8006134:	2b01      	cmp	r3, #1
 8006136:	d10d      	bne.n	8006154 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	43da      	mvns	r2, r3
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	4013      	ands	r3, r2
 8006144:	b29b      	uxth	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	bf0c      	ite	eq
 800614a:	2301      	moveq	r3, #1
 800614c:	2300      	movne	r3, #0
 800614e:	b2db      	uxtb	r3, r3
 8006150:	461a      	mov	r2, r3
 8006152:	e00c      	b.n	800616e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	43da      	mvns	r2, r3
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	4013      	ands	r3, r2
 8006160:	b29b      	uxth	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	bf0c      	ite	eq
 8006166:	2301      	moveq	r3, #1
 8006168:	2300      	movne	r3, #0
 800616a:	b2db      	uxtb	r3, r3
 800616c:	461a      	mov	r2, r3
 800616e:	79fb      	ldrb	r3, [r7, #7]
 8006170:	429a      	cmp	r2, r3
 8006172:	d0b6      	beq.n	80060e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b084      	sub	sp, #16
 8006182:	af00      	add	r7, sp, #0
 8006184:	60f8      	str	r0, [r7, #12]
 8006186:	60b9      	str	r1, [r7, #8]
 8006188:	607a      	str	r2, [r7, #4]
 800618a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800618c:	e051      	b.n	8006232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800619c:	d123      	bne.n	80061e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80061b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2220      	movs	r2, #32
 80061c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d2:	f043 0204 	orr.w	r2, r3, #4
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e046      	b.n	8006274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ec:	d021      	beq.n	8006232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061ee:	f7fe f829 	bl	8004244 <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d302      	bcc.n	8006204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d116      	bne.n	8006232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2200      	movs	r2, #0
 8006208:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2220      	movs	r2, #32
 800620e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621e:	f043 0220 	orr.w	r2, r3, #32
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e020      	b.n	8006274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	0c1b      	lsrs	r3, r3, #16
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b01      	cmp	r3, #1
 800623a:	d10c      	bne.n	8006256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	43da      	mvns	r2, r3
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	4013      	ands	r3, r2
 8006248:	b29b      	uxth	r3, r3
 800624a:	2b00      	cmp	r3, #0
 800624c:	bf14      	ite	ne
 800624e:	2301      	movne	r3, #1
 8006250:	2300      	moveq	r3, #0
 8006252:	b2db      	uxtb	r3, r3
 8006254:	e00b      	b.n	800626e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	43da      	mvns	r2, r3
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	4013      	ands	r3, r2
 8006262:	b29b      	uxth	r3, r3
 8006264:	2b00      	cmp	r3, #0
 8006266:	bf14      	ite	ne
 8006268:	2301      	movne	r3, #1
 800626a:	2300      	moveq	r3, #0
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b00      	cmp	r3, #0
 8006270:	d18d      	bne.n	800618e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3710      	adds	r7, #16
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006288:	e02d      	b.n	80062e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f000 f878 	bl	8006380 <I2C_IsAcknowledgeFailed>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e02d      	b.n	80062f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a0:	d021      	beq.n	80062e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062a2:	f7fd ffcf 	bl	8004244 <HAL_GetTick>
 80062a6:	4602      	mov	r2, r0
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d302      	bcc.n	80062b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d116      	bne.n	80062e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2220      	movs	r2, #32
 80062c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d2:	f043 0220 	orr.w	r2, r3, #32
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e007      	b.n	80062f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f0:	2b80      	cmp	r3, #128	; 0x80
 80062f2:	d1ca      	bne.n	800628a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b084      	sub	sp, #16
 8006302:	af00      	add	r7, sp, #0
 8006304:	60f8      	str	r0, [r7, #12]
 8006306:	60b9      	str	r1, [r7, #8]
 8006308:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800630a:	e02d      	b.n	8006368 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f000 f837 	bl	8006380 <I2C_IsAcknowledgeFailed>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d001      	beq.n	800631c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e02d      	b.n	8006378 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006322:	d021      	beq.n	8006368 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006324:	f7fd ff8e 	bl	8004244 <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	68ba      	ldr	r2, [r7, #8]
 8006330:	429a      	cmp	r2, r3
 8006332:	d302      	bcc.n	800633a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d116      	bne.n	8006368 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2220      	movs	r2, #32
 8006344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006354:	f043 0220 	orr.w	r2, r3, #32
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e007      	b.n	8006378 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	f003 0304 	and.w	r3, r3, #4
 8006372:	2b04      	cmp	r3, #4
 8006374:	d1ca      	bne.n	800630c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006396:	d11b      	bne.n	80063d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2220      	movs	r2, #32
 80063ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063bc:	f043 0204 	orr.w	r2, r3, #4
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e000      	b.n	80063d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	370c      	adds	r7, #12
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
	...

080063e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d101      	bne.n	80063f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e0cc      	b.n	800658e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063f4:	4b68      	ldr	r3, [pc, #416]	; (8006598 <HAL_RCC_ClockConfig+0x1b8>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 030f 	and.w	r3, r3, #15
 80063fc:	683a      	ldr	r2, [r7, #0]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d90c      	bls.n	800641c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006402:	4b65      	ldr	r3, [pc, #404]	; (8006598 <HAL_RCC_ClockConfig+0x1b8>)
 8006404:	683a      	ldr	r2, [r7, #0]
 8006406:	b2d2      	uxtb	r2, r2
 8006408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800640a:	4b63      	ldr	r3, [pc, #396]	; (8006598 <HAL_RCC_ClockConfig+0x1b8>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 030f 	and.w	r3, r3, #15
 8006412:	683a      	ldr	r2, [r7, #0]
 8006414:	429a      	cmp	r2, r3
 8006416:	d001      	beq.n	800641c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e0b8      	b.n	800658e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0302 	and.w	r3, r3, #2
 8006424:	2b00      	cmp	r3, #0
 8006426:	d020      	beq.n	800646a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0304 	and.w	r3, r3, #4
 8006430:	2b00      	cmp	r3, #0
 8006432:	d005      	beq.n	8006440 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006434:	4b59      	ldr	r3, [pc, #356]	; (800659c <HAL_RCC_ClockConfig+0x1bc>)
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	4a58      	ldr	r2, [pc, #352]	; (800659c <HAL_RCC_ClockConfig+0x1bc>)
 800643a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800643e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0308 	and.w	r3, r3, #8
 8006448:	2b00      	cmp	r3, #0
 800644a:	d005      	beq.n	8006458 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800644c:	4b53      	ldr	r3, [pc, #332]	; (800659c <HAL_RCC_ClockConfig+0x1bc>)
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	4a52      	ldr	r2, [pc, #328]	; (800659c <HAL_RCC_ClockConfig+0x1bc>)
 8006452:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006456:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006458:	4b50      	ldr	r3, [pc, #320]	; (800659c <HAL_RCC_ClockConfig+0x1bc>)
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	494d      	ldr	r1, [pc, #308]	; (800659c <HAL_RCC_ClockConfig+0x1bc>)
 8006466:	4313      	orrs	r3, r2
 8006468:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	2b00      	cmp	r3, #0
 8006474:	d044      	beq.n	8006500 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d107      	bne.n	800648e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800647e:	4b47      	ldr	r3, [pc, #284]	; (800659c <HAL_RCC_ClockConfig+0x1bc>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d119      	bne.n	80064be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e07f      	b.n	800658e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	2b02      	cmp	r3, #2
 8006494:	d003      	beq.n	800649e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800649a:	2b03      	cmp	r3, #3
 800649c:	d107      	bne.n	80064ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800649e:	4b3f      	ldr	r3, [pc, #252]	; (800659c <HAL_RCC_ClockConfig+0x1bc>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d109      	bne.n	80064be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e06f      	b.n	800658e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064ae:	4b3b      	ldr	r3, [pc, #236]	; (800659c <HAL_RCC_ClockConfig+0x1bc>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0302 	and.w	r3, r3, #2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d101      	bne.n	80064be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e067      	b.n	800658e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064be:	4b37      	ldr	r3, [pc, #220]	; (800659c <HAL_RCC_ClockConfig+0x1bc>)
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f023 0203 	bic.w	r2, r3, #3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	4934      	ldr	r1, [pc, #208]	; (800659c <HAL_RCC_ClockConfig+0x1bc>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064d0:	f7fd feb8 	bl	8004244 <HAL_GetTick>
 80064d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064d6:	e00a      	b.n	80064ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064d8:	f7fd feb4 	bl	8004244 <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d901      	bls.n	80064ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e04f      	b.n	800658e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064ee:	4b2b      	ldr	r3, [pc, #172]	; (800659c <HAL_RCC_ClockConfig+0x1bc>)
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f003 020c 	and.w	r2, r3, #12
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d1eb      	bne.n	80064d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006500:	4b25      	ldr	r3, [pc, #148]	; (8006598 <HAL_RCC_ClockConfig+0x1b8>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 030f 	and.w	r3, r3, #15
 8006508:	683a      	ldr	r2, [r7, #0]
 800650a:	429a      	cmp	r2, r3
 800650c:	d20c      	bcs.n	8006528 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800650e:	4b22      	ldr	r3, [pc, #136]	; (8006598 <HAL_RCC_ClockConfig+0x1b8>)
 8006510:	683a      	ldr	r2, [r7, #0]
 8006512:	b2d2      	uxtb	r2, r2
 8006514:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006516:	4b20      	ldr	r3, [pc, #128]	; (8006598 <HAL_RCC_ClockConfig+0x1b8>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 030f 	and.w	r3, r3, #15
 800651e:	683a      	ldr	r2, [r7, #0]
 8006520:	429a      	cmp	r2, r3
 8006522:	d001      	beq.n	8006528 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e032      	b.n	800658e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0304 	and.w	r3, r3, #4
 8006530:	2b00      	cmp	r3, #0
 8006532:	d008      	beq.n	8006546 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006534:	4b19      	ldr	r3, [pc, #100]	; (800659c <HAL_RCC_ClockConfig+0x1bc>)
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	4916      	ldr	r1, [pc, #88]	; (800659c <HAL_RCC_ClockConfig+0x1bc>)
 8006542:	4313      	orrs	r3, r2
 8006544:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0308 	and.w	r3, r3, #8
 800654e:	2b00      	cmp	r3, #0
 8006550:	d009      	beq.n	8006566 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006552:	4b12      	ldr	r3, [pc, #72]	; (800659c <HAL_RCC_ClockConfig+0x1bc>)
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	00db      	lsls	r3, r3, #3
 8006560:	490e      	ldr	r1, [pc, #56]	; (800659c <HAL_RCC_ClockConfig+0x1bc>)
 8006562:	4313      	orrs	r3, r2
 8006564:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006566:	f000 f887 	bl	8006678 <HAL_RCC_GetSysClockFreq>
 800656a:	4602      	mov	r2, r0
 800656c:	4b0b      	ldr	r3, [pc, #44]	; (800659c <HAL_RCC_ClockConfig+0x1bc>)
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	091b      	lsrs	r3, r3, #4
 8006572:	f003 030f 	and.w	r3, r3, #15
 8006576:	490a      	ldr	r1, [pc, #40]	; (80065a0 <HAL_RCC_ClockConfig+0x1c0>)
 8006578:	5ccb      	ldrb	r3, [r1, r3]
 800657a:	fa22 f303 	lsr.w	r3, r2, r3
 800657e:	4a09      	ldr	r2, [pc, #36]	; (80065a4 <HAL_RCC_ClockConfig+0x1c4>)
 8006580:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006582:	4b09      	ldr	r3, [pc, #36]	; (80065a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4618      	mov	r0, r3
 8006588:	f7fc fe6e 	bl	8003268 <HAL_InitTick>

  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	40023c00 	.word	0x40023c00
 800659c:	40023800 	.word	0x40023800
 80065a0:	08011ef8 	.word	0x08011ef8
 80065a4:	20000014 	.word	0x20000014
 80065a8:	20000028 	.word	0x20000028

080065ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065ac:	b480      	push	{r7}
 80065ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065b0:	4b03      	ldr	r3, [pc, #12]	; (80065c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80065b2:	681b      	ldr	r3, [r3, #0]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	20000014 	.word	0x20000014

080065c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80065c8:	f7ff fff0 	bl	80065ac <HAL_RCC_GetHCLKFreq>
 80065cc:	4602      	mov	r2, r0
 80065ce:	4b05      	ldr	r3, [pc, #20]	; (80065e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	0a9b      	lsrs	r3, r3, #10
 80065d4:	f003 0307 	and.w	r3, r3, #7
 80065d8:	4903      	ldr	r1, [pc, #12]	; (80065e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065da:	5ccb      	ldrb	r3, [r1, r3]
 80065dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	40023800 	.word	0x40023800
 80065e8:	08011f08 	.word	0x08011f08

080065ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80065f0:	f7ff ffdc 	bl	80065ac <HAL_RCC_GetHCLKFreq>
 80065f4:	4602      	mov	r2, r0
 80065f6:	4b05      	ldr	r3, [pc, #20]	; (800660c <HAL_RCC_GetPCLK2Freq+0x20>)
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	0b5b      	lsrs	r3, r3, #13
 80065fc:	f003 0307 	and.w	r3, r3, #7
 8006600:	4903      	ldr	r1, [pc, #12]	; (8006610 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006602:	5ccb      	ldrb	r3, [r1, r3]
 8006604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006608:	4618      	mov	r0, r3
 800660a:	bd80      	pop	{r7, pc}
 800660c:	40023800 	.word	0x40023800
 8006610:	08011f08 	.word	0x08011f08

08006614 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	220f      	movs	r2, #15
 8006622:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006624:	4b12      	ldr	r3, [pc, #72]	; (8006670 <HAL_RCC_GetClockConfig+0x5c>)
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f003 0203 	and.w	r2, r3, #3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006630:	4b0f      	ldr	r3, [pc, #60]	; (8006670 <HAL_RCC_GetClockConfig+0x5c>)
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800663c:	4b0c      	ldr	r3, [pc, #48]	; (8006670 <HAL_RCC_GetClockConfig+0x5c>)
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006648:	4b09      	ldr	r3, [pc, #36]	; (8006670 <HAL_RCC_GetClockConfig+0x5c>)
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	08db      	lsrs	r3, r3, #3
 800664e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006656:	4b07      	ldr	r3, [pc, #28]	; (8006674 <HAL_RCC_GetClockConfig+0x60>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 020f 	and.w	r2, r3, #15
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	601a      	str	r2, [r3, #0]
}
 8006662:	bf00      	nop
 8006664:	370c      	adds	r7, #12
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	40023800 	.word	0x40023800
 8006674:	40023c00 	.word	0x40023c00

08006678 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800667c:	b0ae      	sub	sp, #184	; 0xb8
 800667e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006680:	2300      	movs	r3, #0
 8006682:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8006686:	2300      	movs	r3, #0
 8006688:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800668c:	2300      	movs	r3, #0
 800668e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8006692:	2300      	movs	r3, #0
 8006694:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8006698:	2300      	movs	r3, #0
 800669a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800669e:	4bcb      	ldr	r3, [pc, #812]	; (80069cc <HAL_RCC_GetSysClockFreq+0x354>)
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f003 030c 	and.w	r3, r3, #12
 80066a6:	2b0c      	cmp	r3, #12
 80066a8:	f200 8206 	bhi.w	8006ab8 <HAL_RCC_GetSysClockFreq+0x440>
 80066ac:	a201      	add	r2, pc, #4	; (adr r2, 80066b4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80066ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b2:	bf00      	nop
 80066b4:	080066e9 	.word	0x080066e9
 80066b8:	08006ab9 	.word	0x08006ab9
 80066bc:	08006ab9 	.word	0x08006ab9
 80066c0:	08006ab9 	.word	0x08006ab9
 80066c4:	080066f1 	.word	0x080066f1
 80066c8:	08006ab9 	.word	0x08006ab9
 80066cc:	08006ab9 	.word	0x08006ab9
 80066d0:	08006ab9 	.word	0x08006ab9
 80066d4:	080066f9 	.word	0x080066f9
 80066d8:	08006ab9 	.word	0x08006ab9
 80066dc:	08006ab9 	.word	0x08006ab9
 80066e0:	08006ab9 	.word	0x08006ab9
 80066e4:	080068e9 	.word	0x080068e9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80066e8:	4bb9      	ldr	r3, [pc, #740]	; (80069d0 <HAL_RCC_GetSysClockFreq+0x358>)
 80066ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80066ee:	e1e7      	b.n	8006ac0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066f0:	4bb8      	ldr	r3, [pc, #736]	; (80069d4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80066f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80066f6:	e1e3      	b.n	8006ac0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066f8:	4bb4      	ldr	r3, [pc, #720]	; (80069cc <HAL_RCC_GetSysClockFreq+0x354>)
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006700:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006704:	4bb1      	ldr	r3, [pc, #708]	; (80069cc <HAL_RCC_GetSysClockFreq+0x354>)
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d071      	beq.n	80067f4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006710:	4bae      	ldr	r3, [pc, #696]	; (80069cc <HAL_RCC_GetSysClockFreq+0x354>)
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	099b      	lsrs	r3, r3, #6
 8006716:	2200      	movs	r2, #0
 8006718:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800671c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006720:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006728:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800672c:	2300      	movs	r3, #0
 800672e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006732:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006736:	4622      	mov	r2, r4
 8006738:	462b      	mov	r3, r5
 800673a:	f04f 0000 	mov.w	r0, #0
 800673e:	f04f 0100 	mov.w	r1, #0
 8006742:	0159      	lsls	r1, r3, #5
 8006744:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006748:	0150      	lsls	r0, r2, #5
 800674a:	4602      	mov	r2, r0
 800674c:	460b      	mov	r3, r1
 800674e:	4621      	mov	r1, r4
 8006750:	1a51      	subs	r1, r2, r1
 8006752:	6439      	str	r1, [r7, #64]	; 0x40
 8006754:	4629      	mov	r1, r5
 8006756:	eb63 0301 	sbc.w	r3, r3, r1
 800675a:	647b      	str	r3, [r7, #68]	; 0x44
 800675c:	f04f 0200 	mov.w	r2, #0
 8006760:	f04f 0300 	mov.w	r3, #0
 8006764:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8006768:	4649      	mov	r1, r9
 800676a:	018b      	lsls	r3, r1, #6
 800676c:	4641      	mov	r1, r8
 800676e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006772:	4641      	mov	r1, r8
 8006774:	018a      	lsls	r2, r1, #6
 8006776:	4641      	mov	r1, r8
 8006778:	1a51      	subs	r1, r2, r1
 800677a:	63b9      	str	r1, [r7, #56]	; 0x38
 800677c:	4649      	mov	r1, r9
 800677e:	eb63 0301 	sbc.w	r3, r3, r1
 8006782:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006784:	f04f 0200 	mov.w	r2, #0
 8006788:	f04f 0300 	mov.w	r3, #0
 800678c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8006790:	4649      	mov	r1, r9
 8006792:	00cb      	lsls	r3, r1, #3
 8006794:	4641      	mov	r1, r8
 8006796:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800679a:	4641      	mov	r1, r8
 800679c:	00ca      	lsls	r2, r1, #3
 800679e:	4610      	mov	r0, r2
 80067a0:	4619      	mov	r1, r3
 80067a2:	4603      	mov	r3, r0
 80067a4:	4622      	mov	r2, r4
 80067a6:	189b      	adds	r3, r3, r2
 80067a8:	633b      	str	r3, [r7, #48]	; 0x30
 80067aa:	462b      	mov	r3, r5
 80067ac:	460a      	mov	r2, r1
 80067ae:	eb42 0303 	adc.w	r3, r2, r3
 80067b2:	637b      	str	r3, [r7, #52]	; 0x34
 80067b4:	f04f 0200 	mov.w	r2, #0
 80067b8:	f04f 0300 	mov.w	r3, #0
 80067bc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80067c0:	4629      	mov	r1, r5
 80067c2:	024b      	lsls	r3, r1, #9
 80067c4:	4621      	mov	r1, r4
 80067c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80067ca:	4621      	mov	r1, r4
 80067cc:	024a      	lsls	r2, r1, #9
 80067ce:	4610      	mov	r0, r2
 80067d0:	4619      	mov	r1, r3
 80067d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067d6:	2200      	movs	r2, #0
 80067d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80067dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80067e0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80067e4:	f7fa fa10 	bl	8000c08 <__aeabi_uldivmod>
 80067e8:	4602      	mov	r2, r0
 80067ea:	460b      	mov	r3, r1
 80067ec:	4613      	mov	r3, r2
 80067ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067f2:	e067      	b.n	80068c4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067f4:	4b75      	ldr	r3, [pc, #468]	; (80069cc <HAL_RCC_GetSysClockFreq+0x354>)
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	099b      	lsrs	r3, r3, #6
 80067fa:	2200      	movs	r2, #0
 80067fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006800:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006804:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800680c:	67bb      	str	r3, [r7, #120]	; 0x78
 800680e:	2300      	movs	r3, #0
 8006810:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006812:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8006816:	4622      	mov	r2, r4
 8006818:	462b      	mov	r3, r5
 800681a:	f04f 0000 	mov.w	r0, #0
 800681e:	f04f 0100 	mov.w	r1, #0
 8006822:	0159      	lsls	r1, r3, #5
 8006824:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006828:	0150      	lsls	r0, r2, #5
 800682a:	4602      	mov	r2, r0
 800682c:	460b      	mov	r3, r1
 800682e:	4621      	mov	r1, r4
 8006830:	1a51      	subs	r1, r2, r1
 8006832:	62b9      	str	r1, [r7, #40]	; 0x28
 8006834:	4629      	mov	r1, r5
 8006836:	eb63 0301 	sbc.w	r3, r3, r1
 800683a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800683c:	f04f 0200 	mov.w	r2, #0
 8006840:	f04f 0300 	mov.w	r3, #0
 8006844:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006848:	4649      	mov	r1, r9
 800684a:	018b      	lsls	r3, r1, #6
 800684c:	4641      	mov	r1, r8
 800684e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006852:	4641      	mov	r1, r8
 8006854:	018a      	lsls	r2, r1, #6
 8006856:	4641      	mov	r1, r8
 8006858:	ebb2 0a01 	subs.w	sl, r2, r1
 800685c:	4649      	mov	r1, r9
 800685e:	eb63 0b01 	sbc.w	fp, r3, r1
 8006862:	f04f 0200 	mov.w	r2, #0
 8006866:	f04f 0300 	mov.w	r3, #0
 800686a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800686e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006872:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006876:	4692      	mov	sl, r2
 8006878:	469b      	mov	fp, r3
 800687a:	4623      	mov	r3, r4
 800687c:	eb1a 0303 	adds.w	r3, sl, r3
 8006880:	623b      	str	r3, [r7, #32]
 8006882:	462b      	mov	r3, r5
 8006884:	eb4b 0303 	adc.w	r3, fp, r3
 8006888:	627b      	str	r3, [r7, #36]	; 0x24
 800688a:	f04f 0200 	mov.w	r2, #0
 800688e:	f04f 0300 	mov.w	r3, #0
 8006892:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006896:	4629      	mov	r1, r5
 8006898:	028b      	lsls	r3, r1, #10
 800689a:	4621      	mov	r1, r4
 800689c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80068a0:	4621      	mov	r1, r4
 80068a2:	028a      	lsls	r2, r1, #10
 80068a4:	4610      	mov	r0, r2
 80068a6:	4619      	mov	r1, r3
 80068a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068ac:	2200      	movs	r2, #0
 80068ae:	673b      	str	r3, [r7, #112]	; 0x70
 80068b0:	677a      	str	r2, [r7, #116]	; 0x74
 80068b2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80068b6:	f7fa f9a7 	bl	8000c08 <__aeabi_uldivmod>
 80068ba:	4602      	mov	r2, r0
 80068bc:	460b      	mov	r3, r1
 80068be:	4613      	mov	r3, r2
 80068c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80068c4:	4b41      	ldr	r3, [pc, #260]	; (80069cc <HAL_RCC_GetSysClockFreq+0x354>)
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	0c1b      	lsrs	r3, r3, #16
 80068ca:	f003 0303 	and.w	r3, r3, #3
 80068ce:	3301      	adds	r3, #1
 80068d0:	005b      	lsls	r3, r3, #1
 80068d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80068d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80068da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068de:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80068e6:	e0eb      	b.n	8006ac0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068e8:	4b38      	ldr	r3, [pc, #224]	; (80069cc <HAL_RCC_GetSysClockFreq+0x354>)
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068f4:	4b35      	ldr	r3, [pc, #212]	; (80069cc <HAL_RCC_GetSysClockFreq+0x354>)
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d06b      	beq.n	80069d8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006900:	4b32      	ldr	r3, [pc, #200]	; (80069cc <HAL_RCC_GetSysClockFreq+0x354>)
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	099b      	lsrs	r3, r3, #6
 8006906:	2200      	movs	r2, #0
 8006908:	66bb      	str	r3, [r7, #104]	; 0x68
 800690a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800690c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800690e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006912:	663b      	str	r3, [r7, #96]	; 0x60
 8006914:	2300      	movs	r3, #0
 8006916:	667b      	str	r3, [r7, #100]	; 0x64
 8006918:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800691c:	4622      	mov	r2, r4
 800691e:	462b      	mov	r3, r5
 8006920:	f04f 0000 	mov.w	r0, #0
 8006924:	f04f 0100 	mov.w	r1, #0
 8006928:	0159      	lsls	r1, r3, #5
 800692a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800692e:	0150      	lsls	r0, r2, #5
 8006930:	4602      	mov	r2, r0
 8006932:	460b      	mov	r3, r1
 8006934:	4621      	mov	r1, r4
 8006936:	1a51      	subs	r1, r2, r1
 8006938:	61b9      	str	r1, [r7, #24]
 800693a:	4629      	mov	r1, r5
 800693c:	eb63 0301 	sbc.w	r3, r3, r1
 8006940:	61fb      	str	r3, [r7, #28]
 8006942:	f04f 0200 	mov.w	r2, #0
 8006946:	f04f 0300 	mov.w	r3, #0
 800694a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800694e:	4659      	mov	r1, fp
 8006950:	018b      	lsls	r3, r1, #6
 8006952:	4651      	mov	r1, sl
 8006954:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006958:	4651      	mov	r1, sl
 800695a:	018a      	lsls	r2, r1, #6
 800695c:	4651      	mov	r1, sl
 800695e:	ebb2 0801 	subs.w	r8, r2, r1
 8006962:	4659      	mov	r1, fp
 8006964:	eb63 0901 	sbc.w	r9, r3, r1
 8006968:	f04f 0200 	mov.w	r2, #0
 800696c:	f04f 0300 	mov.w	r3, #0
 8006970:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006974:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006978:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800697c:	4690      	mov	r8, r2
 800697e:	4699      	mov	r9, r3
 8006980:	4623      	mov	r3, r4
 8006982:	eb18 0303 	adds.w	r3, r8, r3
 8006986:	613b      	str	r3, [r7, #16]
 8006988:	462b      	mov	r3, r5
 800698a:	eb49 0303 	adc.w	r3, r9, r3
 800698e:	617b      	str	r3, [r7, #20]
 8006990:	f04f 0200 	mov.w	r2, #0
 8006994:	f04f 0300 	mov.w	r3, #0
 8006998:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800699c:	4629      	mov	r1, r5
 800699e:	024b      	lsls	r3, r1, #9
 80069a0:	4621      	mov	r1, r4
 80069a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80069a6:	4621      	mov	r1, r4
 80069a8:	024a      	lsls	r2, r1, #9
 80069aa:	4610      	mov	r0, r2
 80069ac:	4619      	mov	r1, r3
 80069ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069b2:	2200      	movs	r2, #0
 80069b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80069b6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80069b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80069bc:	f7fa f924 	bl	8000c08 <__aeabi_uldivmod>
 80069c0:	4602      	mov	r2, r0
 80069c2:	460b      	mov	r3, r1
 80069c4:	4613      	mov	r3, r2
 80069c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069ca:	e065      	b.n	8006a98 <HAL_RCC_GetSysClockFreq+0x420>
 80069cc:	40023800 	.word	0x40023800
 80069d0:	00f42400 	.word	0x00f42400
 80069d4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069d8:	4b3d      	ldr	r3, [pc, #244]	; (8006ad0 <HAL_RCC_GetSysClockFreq+0x458>)
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	099b      	lsrs	r3, r3, #6
 80069de:	2200      	movs	r2, #0
 80069e0:	4618      	mov	r0, r3
 80069e2:	4611      	mov	r1, r2
 80069e4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80069e8:	653b      	str	r3, [r7, #80]	; 0x50
 80069ea:	2300      	movs	r3, #0
 80069ec:	657b      	str	r3, [r7, #84]	; 0x54
 80069ee:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80069f2:	4642      	mov	r2, r8
 80069f4:	464b      	mov	r3, r9
 80069f6:	f04f 0000 	mov.w	r0, #0
 80069fa:	f04f 0100 	mov.w	r1, #0
 80069fe:	0159      	lsls	r1, r3, #5
 8006a00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a04:	0150      	lsls	r0, r2, #5
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	4641      	mov	r1, r8
 8006a0c:	1a51      	subs	r1, r2, r1
 8006a0e:	60b9      	str	r1, [r7, #8]
 8006a10:	4649      	mov	r1, r9
 8006a12:	eb63 0301 	sbc.w	r3, r3, r1
 8006a16:	60fb      	str	r3, [r7, #12]
 8006a18:	f04f 0200 	mov.w	r2, #0
 8006a1c:	f04f 0300 	mov.w	r3, #0
 8006a20:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006a24:	4659      	mov	r1, fp
 8006a26:	018b      	lsls	r3, r1, #6
 8006a28:	4651      	mov	r1, sl
 8006a2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a2e:	4651      	mov	r1, sl
 8006a30:	018a      	lsls	r2, r1, #6
 8006a32:	4651      	mov	r1, sl
 8006a34:	1a54      	subs	r4, r2, r1
 8006a36:	4659      	mov	r1, fp
 8006a38:	eb63 0501 	sbc.w	r5, r3, r1
 8006a3c:	f04f 0200 	mov.w	r2, #0
 8006a40:	f04f 0300 	mov.w	r3, #0
 8006a44:	00eb      	lsls	r3, r5, #3
 8006a46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a4a:	00e2      	lsls	r2, r4, #3
 8006a4c:	4614      	mov	r4, r2
 8006a4e:	461d      	mov	r5, r3
 8006a50:	4643      	mov	r3, r8
 8006a52:	18e3      	adds	r3, r4, r3
 8006a54:	603b      	str	r3, [r7, #0]
 8006a56:	464b      	mov	r3, r9
 8006a58:	eb45 0303 	adc.w	r3, r5, r3
 8006a5c:	607b      	str	r3, [r7, #4]
 8006a5e:	f04f 0200 	mov.w	r2, #0
 8006a62:	f04f 0300 	mov.w	r3, #0
 8006a66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a6a:	4629      	mov	r1, r5
 8006a6c:	028b      	lsls	r3, r1, #10
 8006a6e:	4621      	mov	r1, r4
 8006a70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a74:	4621      	mov	r1, r4
 8006a76:	028a      	lsls	r2, r1, #10
 8006a78:	4610      	mov	r0, r2
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a80:	2200      	movs	r2, #0
 8006a82:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a84:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006a86:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006a8a:	f7fa f8bd 	bl	8000c08 <__aeabi_uldivmod>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	460b      	mov	r3, r1
 8006a92:	4613      	mov	r3, r2
 8006a94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006a98:	4b0d      	ldr	r3, [pc, #52]	; (8006ad0 <HAL_RCC_GetSysClockFreq+0x458>)
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	0f1b      	lsrs	r3, r3, #28
 8006a9e:	f003 0307 	and.w	r3, r3, #7
 8006aa2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8006aa6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006aaa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006ab6:	e003      	b.n	8006ac0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ab8:	4b06      	ldr	r3, [pc, #24]	; (8006ad4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006aba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006abe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ac0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	37b8      	adds	r7, #184	; 0xb8
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ace:	bf00      	nop
 8006ad0:	40023800 	.word	0x40023800
 8006ad4:	00f42400 	.word	0x00f42400

08006ad8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d101      	bne.n	8006aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e28d      	b.n	8007006 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f000 8083 	beq.w	8006bfe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006af8:	4b94      	ldr	r3, [pc, #592]	; (8006d4c <HAL_RCC_OscConfig+0x274>)
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	f003 030c 	and.w	r3, r3, #12
 8006b00:	2b04      	cmp	r3, #4
 8006b02:	d019      	beq.n	8006b38 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006b04:	4b91      	ldr	r3, [pc, #580]	; (8006d4c <HAL_RCC_OscConfig+0x274>)
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006b0c:	2b08      	cmp	r3, #8
 8006b0e:	d106      	bne.n	8006b1e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006b10:	4b8e      	ldr	r3, [pc, #568]	; (8006d4c <HAL_RCC_OscConfig+0x274>)
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b1c:	d00c      	beq.n	8006b38 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b1e:	4b8b      	ldr	r3, [pc, #556]	; (8006d4c <HAL_RCC_OscConfig+0x274>)
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006b26:	2b0c      	cmp	r3, #12
 8006b28:	d112      	bne.n	8006b50 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b2a:	4b88      	ldr	r3, [pc, #544]	; (8006d4c <HAL_RCC_OscConfig+0x274>)
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b36:	d10b      	bne.n	8006b50 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b38:	4b84      	ldr	r3, [pc, #528]	; (8006d4c <HAL_RCC_OscConfig+0x274>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d05b      	beq.n	8006bfc <HAL_RCC_OscConfig+0x124>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d157      	bne.n	8006bfc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e25a      	b.n	8007006 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b58:	d106      	bne.n	8006b68 <HAL_RCC_OscConfig+0x90>
 8006b5a:	4b7c      	ldr	r3, [pc, #496]	; (8006d4c <HAL_RCC_OscConfig+0x274>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a7b      	ldr	r2, [pc, #492]	; (8006d4c <HAL_RCC_OscConfig+0x274>)
 8006b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b64:	6013      	str	r3, [r2, #0]
 8006b66:	e01d      	b.n	8006ba4 <HAL_RCC_OscConfig+0xcc>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b70:	d10c      	bne.n	8006b8c <HAL_RCC_OscConfig+0xb4>
 8006b72:	4b76      	ldr	r3, [pc, #472]	; (8006d4c <HAL_RCC_OscConfig+0x274>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a75      	ldr	r2, [pc, #468]	; (8006d4c <HAL_RCC_OscConfig+0x274>)
 8006b78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b7c:	6013      	str	r3, [r2, #0]
 8006b7e:	4b73      	ldr	r3, [pc, #460]	; (8006d4c <HAL_RCC_OscConfig+0x274>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a72      	ldr	r2, [pc, #456]	; (8006d4c <HAL_RCC_OscConfig+0x274>)
 8006b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b88:	6013      	str	r3, [r2, #0]
 8006b8a:	e00b      	b.n	8006ba4 <HAL_RCC_OscConfig+0xcc>
 8006b8c:	4b6f      	ldr	r3, [pc, #444]	; (8006d4c <HAL_RCC_OscConfig+0x274>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a6e      	ldr	r2, [pc, #440]	; (8006d4c <HAL_RCC_OscConfig+0x274>)
 8006b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b96:	6013      	str	r3, [r2, #0]
 8006b98:	4b6c      	ldr	r3, [pc, #432]	; (8006d4c <HAL_RCC_OscConfig+0x274>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a6b      	ldr	r2, [pc, #428]	; (8006d4c <HAL_RCC_OscConfig+0x274>)
 8006b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ba2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d013      	beq.n	8006bd4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bac:	f7fd fb4a 	bl	8004244 <HAL_GetTick>
 8006bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bb2:	e008      	b.n	8006bc6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bb4:	f7fd fb46 	bl	8004244 <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	2b64      	cmp	r3, #100	; 0x64
 8006bc0:	d901      	bls.n	8006bc6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e21f      	b.n	8007006 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bc6:	4b61      	ldr	r3, [pc, #388]	; (8006d4c <HAL_RCC_OscConfig+0x274>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d0f0      	beq.n	8006bb4 <HAL_RCC_OscConfig+0xdc>
 8006bd2:	e014      	b.n	8006bfe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bd4:	f7fd fb36 	bl	8004244 <HAL_GetTick>
 8006bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bda:	e008      	b.n	8006bee <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bdc:	f7fd fb32 	bl	8004244 <HAL_GetTick>
 8006be0:	4602      	mov	r2, r0
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	2b64      	cmp	r3, #100	; 0x64
 8006be8:	d901      	bls.n	8006bee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006bea:	2303      	movs	r3, #3
 8006bec:	e20b      	b.n	8007006 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bee:	4b57      	ldr	r3, [pc, #348]	; (8006d4c <HAL_RCC_OscConfig+0x274>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1f0      	bne.n	8006bdc <HAL_RCC_OscConfig+0x104>
 8006bfa:	e000      	b.n	8006bfe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0302 	and.w	r3, r3, #2
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d06f      	beq.n	8006cea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006c0a:	4b50      	ldr	r3, [pc, #320]	; (8006d4c <HAL_RCC_OscConfig+0x274>)
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	f003 030c 	and.w	r3, r3, #12
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d017      	beq.n	8006c46 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006c16:	4b4d      	ldr	r3, [pc, #308]	; (8006d4c <HAL_RCC_OscConfig+0x274>)
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006c1e:	2b08      	cmp	r3, #8
 8006c20:	d105      	bne.n	8006c2e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006c22:	4b4a      	ldr	r3, [pc, #296]	; (8006d4c <HAL_RCC_OscConfig+0x274>)
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00b      	beq.n	8006c46 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c2e:	4b47      	ldr	r3, [pc, #284]	; (8006d4c <HAL_RCC_OscConfig+0x274>)
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006c36:	2b0c      	cmp	r3, #12
 8006c38:	d11c      	bne.n	8006c74 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c3a:	4b44      	ldr	r3, [pc, #272]	; (8006d4c <HAL_RCC_OscConfig+0x274>)
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d116      	bne.n	8006c74 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c46:	4b41      	ldr	r3, [pc, #260]	; (8006d4c <HAL_RCC_OscConfig+0x274>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d005      	beq.n	8006c5e <HAL_RCC_OscConfig+0x186>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d001      	beq.n	8006c5e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e1d3      	b.n	8007006 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c5e:	4b3b      	ldr	r3, [pc, #236]	; (8006d4c <HAL_RCC_OscConfig+0x274>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	00db      	lsls	r3, r3, #3
 8006c6c:	4937      	ldr	r1, [pc, #220]	; (8006d4c <HAL_RCC_OscConfig+0x274>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c72:	e03a      	b.n	8006cea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d020      	beq.n	8006cbe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c7c:	4b34      	ldr	r3, [pc, #208]	; (8006d50 <HAL_RCC_OscConfig+0x278>)
 8006c7e:	2201      	movs	r2, #1
 8006c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c82:	f7fd fadf 	bl	8004244 <HAL_GetTick>
 8006c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c88:	e008      	b.n	8006c9c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c8a:	f7fd fadb 	bl	8004244 <HAL_GetTick>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d901      	bls.n	8006c9c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e1b4      	b.n	8007006 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c9c:	4b2b      	ldr	r3, [pc, #172]	; (8006d4c <HAL_RCC_OscConfig+0x274>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 0302 	and.w	r3, r3, #2
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d0f0      	beq.n	8006c8a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ca8:	4b28      	ldr	r3, [pc, #160]	; (8006d4c <HAL_RCC_OscConfig+0x274>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	00db      	lsls	r3, r3, #3
 8006cb6:	4925      	ldr	r1, [pc, #148]	; (8006d4c <HAL_RCC_OscConfig+0x274>)
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	600b      	str	r3, [r1, #0]
 8006cbc:	e015      	b.n	8006cea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cbe:	4b24      	ldr	r3, [pc, #144]	; (8006d50 <HAL_RCC_OscConfig+0x278>)
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cc4:	f7fd fabe 	bl	8004244 <HAL_GetTick>
 8006cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cca:	e008      	b.n	8006cde <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ccc:	f7fd faba 	bl	8004244 <HAL_GetTick>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d901      	bls.n	8006cde <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	e193      	b.n	8007006 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cde:	4b1b      	ldr	r3, [pc, #108]	; (8006d4c <HAL_RCC_OscConfig+0x274>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0302 	and.w	r3, r3, #2
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1f0      	bne.n	8006ccc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0308 	and.w	r3, r3, #8
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d036      	beq.n	8006d64 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d016      	beq.n	8006d2c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cfe:	4b15      	ldr	r3, [pc, #84]	; (8006d54 <HAL_RCC_OscConfig+0x27c>)
 8006d00:	2201      	movs	r2, #1
 8006d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d04:	f7fd fa9e 	bl	8004244 <HAL_GetTick>
 8006d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d0a:	e008      	b.n	8006d1e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d0c:	f7fd fa9a 	bl	8004244 <HAL_GetTick>
 8006d10:	4602      	mov	r2, r0
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d901      	bls.n	8006d1e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e173      	b.n	8007006 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d1e:	4b0b      	ldr	r3, [pc, #44]	; (8006d4c <HAL_RCC_OscConfig+0x274>)
 8006d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d22:	f003 0302 	and.w	r3, r3, #2
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d0f0      	beq.n	8006d0c <HAL_RCC_OscConfig+0x234>
 8006d2a:	e01b      	b.n	8006d64 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d2c:	4b09      	ldr	r3, [pc, #36]	; (8006d54 <HAL_RCC_OscConfig+0x27c>)
 8006d2e:	2200      	movs	r2, #0
 8006d30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d32:	f7fd fa87 	bl	8004244 <HAL_GetTick>
 8006d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d38:	e00e      	b.n	8006d58 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d3a:	f7fd fa83 	bl	8004244 <HAL_GetTick>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d907      	bls.n	8006d58 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e15c      	b.n	8007006 <HAL_RCC_OscConfig+0x52e>
 8006d4c:	40023800 	.word	0x40023800
 8006d50:	42470000 	.word	0x42470000
 8006d54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d58:	4b8a      	ldr	r3, [pc, #552]	; (8006f84 <HAL_RCC_OscConfig+0x4ac>)
 8006d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d5c:	f003 0302 	and.w	r3, r3, #2
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1ea      	bne.n	8006d3a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0304 	and.w	r3, r3, #4
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f000 8097 	beq.w	8006ea0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d72:	2300      	movs	r3, #0
 8006d74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d76:	4b83      	ldr	r3, [pc, #524]	; (8006f84 <HAL_RCC_OscConfig+0x4ac>)
 8006d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10f      	bne.n	8006da2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d82:	2300      	movs	r3, #0
 8006d84:	60bb      	str	r3, [r7, #8]
 8006d86:	4b7f      	ldr	r3, [pc, #508]	; (8006f84 <HAL_RCC_OscConfig+0x4ac>)
 8006d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8a:	4a7e      	ldr	r2, [pc, #504]	; (8006f84 <HAL_RCC_OscConfig+0x4ac>)
 8006d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d90:	6413      	str	r3, [r2, #64]	; 0x40
 8006d92:	4b7c      	ldr	r3, [pc, #496]	; (8006f84 <HAL_RCC_OscConfig+0x4ac>)
 8006d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d9a:	60bb      	str	r3, [r7, #8]
 8006d9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006da2:	4b79      	ldr	r3, [pc, #484]	; (8006f88 <HAL_RCC_OscConfig+0x4b0>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d118      	bne.n	8006de0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006dae:	4b76      	ldr	r3, [pc, #472]	; (8006f88 <HAL_RCC_OscConfig+0x4b0>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a75      	ldr	r2, [pc, #468]	; (8006f88 <HAL_RCC_OscConfig+0x4b0>)
 8006db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006db8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006dba:	f7fd fa43 	bl	8004244 <HAL_GetTick>
 8006dbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dc0:	e008      	b.n	8006dd4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dc2:	f7fd fa3f 	bl	8004244 <HAL_GetTick>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d901      	bls.n	8006dd4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e118      	b.n	8007006 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dd4:	4b6c      	ldr	r3, [pc, #432]	; (8006f88 <HAL_RCC_OscConfig+0x4b0>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d0f0      	beq.n	8006dc2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d106      	bne.n	8006df6 <HAL_RCC_OscConfig+0x31e>
 8006de8:	4b66      	ldr	r3, [pc, #408]	; (8006f84 <HAL_RCC_OscConfig+0x4ac>)
 8006dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dec:	4a65      	ldr	r2, [pc, #404]	; (8006f84 <HAL_RCC_OscConfig+0x4ac>)
 8006dee:	f043 0301 	orr.w	r3, r3, #1
 8006df2:	6713      	str	r3, [r2, #112]	; 0x70
 8006df4:	e01c      	b.n	8006e30 <HAL_RCC_OscConfig+0x358>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	2b05      	cmp	r3, #5
 8006dfc:	d10c      	bne.n	8006e18 <HAL_RCC_OscConfig+0x340>
 8006dfe:	4b61      	ldr	r3, [pc, #388]	; (8006f84 <HAL_RCC_OscConfig+0x4ac>)
 8006e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e02:	4a60      	ldr	r2, [pc, #384]	; (8006f84 <HAL_RCC_OscConfig+0x4ac>)
 8006e04:	f043 0304 	orr.w	r3, r3, #4
 8006e08:	6713      	str	r3, [r2, #112]	; 0x70
 8006e0a:	4b5e      	ldr	r3, [pc, #376]	; (8006f84 <HAL_RCC_OscConfig+0x4ac>)
 8006e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e0e:	4a5d      	ldr	r2, [pc, #372]	; (8006f84 <HAL_RCC_OscConfig+0x4ac>)
 8006e10:	f043 0301 	orr.w	r3, r3, #1
 8006e14:	6713      	str	r3, [r2, #112]	; 0x70
 8006e16:	e00b      	b.n	8006e30 <HAL_RCC_OscConfig+0x358>
 8006e18:	4b5a      	ldr	r3, [pc, #360]	; (8006f84 <HAL_RCC_OscConfig+0x4ac>)
 8006e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e1c:	4a59      	ldr	r2, [pc, #356]	; (8006f84 <HAL_RCC_OscConfig+0x4ac>)
 8006e1e:	f023 0301 	bic.w	r3, r3, #1
 8006e22:	6713      	str	r3, [r2, #112]	; 0x70
 8006e24:	4b57      	ldr	r3, [pc, #348]	; (8006f84 <HAL_RCC_OscConfig+0x4ac>)
 8006e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e28:	4a56      	ldr	r2, [pc, #344]	; (8006f84 <HAL_RCC_OscConfig+0x4ac>)
 8006e2a:	f023 0304 	bic.w	r3, r3, #4
 8006e2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d015      	beq.n	8006e64 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e38:	f7fd fa04 	bl	8004244 <HAL_GetTick>
 8006e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e3e:	e00a      	b.n	8006e56 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e40:	f7fd fa00 	bl	8004244 <HAL_GetTick>
 8006e44:	4602      	mov	r2, r0
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d901      	bls.n	8006e56 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e0d7      	b.n	8007006 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e56:	4b4b      	ldr	r3, [pc, #300]	; (8006f84 <HAL_RCC_OscConfig+0x4ac>)
 8006e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e5a:	f003 0302 	and.w	r3, r3, #2
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d0ee      	beq.n	8006e40 <HAL_RCC_OscConfig+0x368>
 8006e62:	e014      	b.n	8006e8e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e64:	f7fd f9ee 	bl	8004244 <HAL_GetTick>
 8006e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e6a:	e00a      	b.n	8006e82 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e6c:	f7fd f9ea 	bl	8004244 <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d901      	bls.n	8006e82 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e0c1      	b.n	8007006 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e82:	4b40      	ldr	r3, [pc, #256]	; (8006f84 <HAL_RCC_OscConfig+0x4ac>)
 8006e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e86:	f003 0302 	and.w	r3, r3, #2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1ee      	bne.n	8006e6c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e8e:	7dfb      	ldrb	r3, [r7, #23]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d105      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e94:	4b3b      	ldr	r3, [pc, #236]	; (8006f84 <HAL_RCC_OscConfig+0x4ac>)
 8006e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e98:	4a3a      	ldr	r2, [pc, #232]	; (8006f84 <HAL_RCC_OscConfig+0x4ac>)
 8006e9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	699b      	ldr	r3, [r3, #24]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f000 80ad 	beq.w	8007004 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006eaa:	4b36      	ldr	r3, [pc, #216]	; (8006f84 <HAL_RCC_OscConfig+0x4ac>)
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f003 030c 	and.w	r3, r3, #12
 8006eb2:	2b08      	cmp	r3, #8
 8006eb4:	d060      	beq.n	8006f78 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d145      	bne.n	8006f4a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ebe:	4b33      	ldr	r3, [pc, #204]	; (8006f8c <HAL_RCC_OscConfig+0x4b4>)
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ec4:	f7fd f9be 	bl	8004244 <HAL_GetTick>
 8006ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eca:	e008      	b.n	8006ede <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ecc:	f7fd f9ba 	bl	8004244 <HAL_GetTick>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d901      	bls.n	8006ede <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006eda:	2303      	movs	r3, #3
 8006edc:	e093      	b.n	8007006 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ede:	4b29      	ldr	r3, [pc, #164]	; (8006f84 <HAL_RCC_OscConfig+0x4ac>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1f0      	bne.n	8006ecc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	69da      	ldr	r2, [r3, #28]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	431a      	orrs	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef8:	019b      	lsls	r3, r3, #6
 8006efa:	431a      	orrs	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f00:	085b      	lsrs	r3, r3, #1
 8006f02:	3b01      	subs	r3, #1
 8006f04:	041b      	lsls	r3, r3, #16
 8006f06:	431a      	orrs	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0c:	061b      	lsls	r3, r3, #24
 8006f0e:	431a      	orrs	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f14:	071b      	lsls	r3, r3, #28
 8006f16:	491b      	ldr	r1, [pc, #108]	; (8006f84 <HAL_RCC_OscConfig+0x4ac>)
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f1c:	4b1b      	ldr	r3, [pc, #108]	; (8006f8c <HAL_RCC_OscConfig+0x4b4>)
 8006f1e:	2201      	movs	r2, #1
 8006f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f22:	f7fd f98f 	bl	8004244 <HAL_GetTick>
 8006f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f28:	e008      	b.n	8006f3c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f2a:	f7fd f98b 	bl	8004244 <HAL_GetTick>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d901      	bls.n	8006f3c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e064      	b.n	8007006 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f3c:	4b11      	ldr	r3, [pc, #68]	; (8006f84 <HAL_RCC_OscConfig+0x4ac>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d0f0      	beq.n	8006f2a <HAL_RCC_OscConfig+0x452>
 8006f48:	e05c      	b.n	8007004 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f4a:	4b10      	ldr	r3, [pc, #64]	; (8006f8c <HAL_RCC_OscConfig+0x4b4>)
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f50:	f7fd f978 	bl	8004244 <HAL_GetTick>
 8006f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f56:	e008      	b.n	8006f6a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f58:	f7fd f974 	bl	8004244 <HAL_GetTick>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d901      	bls.n	8006f6a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006f66:	2303      	movs	r3, #3
 8006f68:	e04d      	b.n	8007006 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f6a:	4b06      	ldr	r3, [pc, #24]	; (8006f84 <HAL_RCC_OscConfig+0x4ac>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1f0      	bne.n	8006f58 <HAL_RCC_OscConfig+0x480>
 8006f76:	e045      	b.n	8007004 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d107      	bne.n	8006f90 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e040      	b.n	8007006 <HAL_RCC_OscConfig+0x52e>
 8006f84:	40023800 	.word	0x40023800
 8006f88:	40007000 	.word	0x40007000
 8006f8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f90:	4b1f      	ldr	r3, [pc, #124]	; (8007010 <HAL_RCC_OscConfig+0x538>)
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d030      	beq.n	8007000 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d129      	bne.n	8007000 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d122      	bne.n	8007000 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006fc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d119      	bne.n	8007000 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd6:	085b      	lsrs	r3, r3, #1
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d10f      	bne.n	8007000 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d107      	bne.n	8007000 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ffa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d001      	beq.n	8007004 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e000      	b.n	8007006 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3718      	adds	r7, #24
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	40023800 	.word	0x40023800

08007014 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e07b      	b.n	800711e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702a:	2b00      	cmp	r3, #0
 800702c:	d108      	bne.n	8007040 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007036:	d009      	beq.n	800704c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	61da      	str	r2, [r3, #28]
 800703e:	e005      	b.n	800704c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007058:	b2db      	uxtb	r3, r3
 800705a:	2b00      	cmp	r3, #0
 800705c:	d106      	bne.n	800706c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f7fc f85a 	bl	8003120 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2202      	movs	r2, #2
 8007070:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007082:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007094:	431a      	orrs	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800709e:	431a      	orrs	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	f003 0302 	and.w	r3, r3, #2
 80070a8:	431a      	orrs	r2, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	695b      	ldr	r3, [r3, #20]
 80070ae:	f003 0301 	and.w	r3, r3, #1
 80070b2:	431a      	orrs	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070bc:	431a      	orrs	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	69db      	ldr	r3, [r3, #28]
 80070c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070c6:	431a      	orrs	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a1b      	ldr	r3, [r3, #32]
 80070cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070d0:	ea42 0103 	orr.w	r1, r2, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	430a      	orrs	r2, r1
 80070e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	699b      	ldr	r3, [r3, #24]
 80070e8:	0c1b      	lsrs	r3, r3, #16
 80070ea:	f003 0104 	and.w	r1, r3, #4
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f2:	f003 0210 	and.w	r2, r3, #16
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	430a      	orrs	r2, r1
 80070fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	69da      	ldr	r2, [r3, #28]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800710c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b088      	sub	sp, #32
 800712a:	af00      	add	r7, sp, #0
 800712c:	60f8      	str	r0, [r7, #12]
 800712e:	60b9      	str	r1, [r7, #8]
 8007130:	603b      	str	r3, [r7, #0]
 8007132:	4613      	mov	r3, r2
 8007134:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007136:	2300      	movs	r3, #0
 8007138:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007140:	2b01      	cmp	r3, #1
 8007142:	d101      	bne.n	8007148 <HAL_SPI_Transmit+0x22>
 8007144:	2302      	movs	r3, #2
 8007146:	e126      	b.n	8007396 <HAL_SPI_Transmit+0x270>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007150:	f7fd f878 	bl	8004244 <HAL_GetTick>
 8007154:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007156:	88fb      	ldrh	r3, [r7, #6]
 8007158:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b01      	cmp	r3, #1
 8007164:	d002      	beq.n	800716c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007166:	2302      	movs	r3, #2
 8007168:	77fb      	strb	r3, [r7, #31]
    goto error;
 800716a:	e10b      	b.n	8007384 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d002      	beq.n	8007178 <HAL_SPI_Transmit+0x52>
 8007172:	88fb      	ldrh	r3, [r7, #6]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d102      	bne.n	800717e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800717c:	e102      	b.n	8007384 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2203      	movs	r2, #3
 8007182:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2200      	movs	r2, #0
 800718a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	88fa      	ldrh	r2, [r7, #6]
 8007196:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	88fa      	ldrh	r2, [r7, #6]
 800719c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071c4:	d10f      	bne.n	80071e6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f0:	2b40      	cmp	r3, #64	; 0x40
 80071f2:	d007      	beq.n	8007204 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007202:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800720c:	d14b      	bne.n	80072a6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d002      	beq.n	800721c <HAL_SPI_Transmit+0xf6>
 8007216:	8afb      	ldrh	r3, [r7, #22]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d13e      	bne.n	800729a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007220:	881a      	ldrh	r2, [r3, #0]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722c:	1c9a      	adds	r2, r3, #2
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007236:	b29b      	uxth	r3, r3
 8007238:	3b01      	subs	r3, #1
 800723a:	b29a      	uxth	r2, r3
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007240:	e02b      	b.n	800729a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	f003 0302 	and.w	r3, r3, #2
 800724c:	2b02      	cmp	r3, #2
 800724e:	d112      	bne.n	8007276 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007254:	881a      	ldrh	r2, [r3, #0]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007260:	1c9a      	adds	r2, r3, #2
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800726a:	b29b      	uxth	r3, r3
 800726c:	3b01      	subs	r3, #1
 800726e:	b29a      	uxth	r2, r3
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	86da      	strh	r2, [r3, #54]	; 0x36
 8007274:	e011      	b.n	800729a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007276:	f7fc ffe5 	bl	8004244 <HAL_GetTick>
 800727a:	4602      	mov	r2, r0
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	1ad3      	subs	r3, r2, r3
 8007280:	683a      	ldr	r2, [r7, #0]
 8007282:	429a      	cmp	r2, r3
 8007284:	d803      	bhi.n	800728e <HAL_SPI_Transmit+0x168>
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800728c:	d102      	bne.n	8007294 <HAL_SPI_Transmit+0x16e>
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d102      	bne.n	800729a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007294:	2303      	movs	r3, #3
 8007296:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007298:	e074      	b.n	8007384 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800729e:	b29b      	uxth	r3, r3
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d1ce      	bne.n	8007242 <HAL_SPI_Transmit+0x11c>
 80072a4:	e04c      	b.n	8007340 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d002      	beq.n	80072b4 <HAL_SPI_Transmit+0x18e>
 80072ae:	8afb      	ldrh	r3, [r7, #22]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d140      	bne.n	8007336 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	330c      	adds	r3, #12
 80072be:	7812      	ldrb	r2, [r2, #0]
 80072c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c6:	1c5a      	adds	r2, r3, #1
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	3b01      	subs	r3, #1
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80072da:	e02c      	b.n	8007336 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	f003 0302 	and.w	r3, r3, #2
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d113      	bne.n	8007312 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	330c      	adds	r3, #12
 80072f4:	7812      	ldrb	r2, [r2, #0]
 80072f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072fc:	1c5a      	adds	r2, r3, #1
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007306:	b29b      	uxth	r3, r3
 8007308:	3b01      	subs	r3, #1
 800730a:	b29a      	uxth	r2, r3
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007310:	e011      	b.n	8007336 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007312:	f7fc ff97 	bl	8004244 <HAL_GetTick>
 8007316:	4602      	mov	r2, r0
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	683a      	ldr	r2, [r7, #0]
 800731e:	429a      	cmp	r2, r3
 8007320:	d803      	bhi.n	800732a <HAL_SPI_Transmit+0x204>
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007328:	d102      	bne.n	8007330 <HAL_SPI_Transmit+0x20a>
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d102      	bne.n	8007336 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007330:	2303      	movs	r3, #3
 8007332:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007334:	e026      	b.n	8007384 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800733a:	b29b      	uxth	r3, r3
 800733c:	2b00      	cmp	r3, #0
 800733e:	d1cd      	bne.n	80072dc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007340:	69ba      	ldr	r2, [r7, #24]
 8007342:	6839      	ldr	r1, [r7, #0]
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f000 fa63 	bl	8007810 <SPI_EndRxTxTransaction>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d002      	beq.n	8007356 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2220      	movs	r2, #32
 8007354:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d10a      	bne.n	8007374 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800735e:	2300      	movs	r3, #0
 8007360:	613b      	str	r3, [r7, #16]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	613b      	str	r3, [r7, #16]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	613b      	str	r3, [r7, #16]
 8007372:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007378:	2b00      	cmp	r3, #0
 800737a:	d002      	beq.n	8007382 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	77fb      	strb	r3, [r7, #31]
 8007380:	e000      	b.n	8007384 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007382:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007394:	7ffb      	ldrb	r3, [r7, #31]
}
 8007396:	4618      	mov	r0, r3
 8007398:	3720      	adds	r7, #32
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b08c      	sub	sp, #48	; 0x30
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	60f8      	str	r0, [r7, #12]
 80073a6:	60b9      	str	r1, [r7, #8]
 80073a8:	607a      	str	r2, [r7, #4]
 80073aa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80073ac:	2301      	movs	r3, #1
 80073ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80073b0:	2300      	movs	r3, #0
 80073b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d101      	bne.n	80073c4 <HAL_SPI_TransmitReceive+0x26>
 80073c0:	2302      	movs	r3, #2
 80073c2:	e18a      	b.n	80076da <HAL_SPI_TransmitReceive+0x33c>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073cc:	f7fc ff3a 	bl	8004244 <HAL_GetTick>
 80073d0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80073e2:	887b      	ldrh	r3, [r7, #2]
 80073e4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80073e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d00f      	beq.n	800740e <HAL_SPI_TransmitReceive+0x70>
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073f4:	d107      	bne.n	8007406 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d103      	bne.n	8007406 <HAL_SPI_TransmitReceive+0x68>
 80073fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007402:	2b04      	cmp	r3, #4
 8007404:	d003      	beq.n	800740e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007406:	2302      	movs	r3, #2
 8007408:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800740c:	e15b      	b.n	80076c6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d005      	beq.n	8007420 <HAL_SPI_TransmitReceive+0x82>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d002      	beq.n	8007420 <HAL_SPI_TransmitReceive+0x82>
 800741a:	887b      	ldrh	r3, [r7, #2]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d103      	bne.n	8007428 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007426:	e14e      	b.n	80076c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800742e:	b2db      	uxtb	r3, r3
 8007430:	2b04      	cmp	r3, #4
 8007432:	d003      	beq.n	800743c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2205      	movs	r2, #5
 8007438:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2200      	movs	r2, #0
 8007440:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	887a      	ldrh	r2, [r7, #2]
 800744c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	887a      	ldrh	r2, [r7, #2]
 8007452:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	68ba      	ldr	r2, [r7, #8]
 8007458:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	887a      	ldrh	r2, [r7, #2]
 800745e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	887a      	ldrh	r2, [r7, #2]
 8007464:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800747c:	2b40      	cmp	r3, #64	; 0x40
 800747e:	d007      	beq.n	8007490 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800748e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007498:	d178      	bne.n	800758c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d002      	beq.n	80074a8 <HAL_SPI_TransmitReceive+0x10a>
 80074a2:	8b7b      	ldrh	r3, [r7, #26]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d166      	bne.n	8007576 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ac:	881a      	ldrh	r2, [r3, #0]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b8:	1c9a      	adds	r2, r3, #2
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	3b01      	subs	r3, #1
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074cc:	e053      	b.n	8007576 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	f003 0302 	and.w	r3, r3, #2
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d11b      	bne.n	8007514 <HAL_SPI_TransmitReceive+0x176>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d016      	beq.n	8007514 <HAL_SPI_TransmitReceive+0x176>
 80074e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d113      	bne.n	8007514 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f0:	881a      	ldrh	r2, [r3, #0]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fc:	1c9a      	adds	r2, r3, #2
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007506:	b29b      	uxth	r3, r3
 8007508:	3b01      	subs	r3, #1
 800750a:	b29a      	uxth	r2, r3
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007510:	2300      	movs	r3, #0
 8007512:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f003 0301 	and.w	r3, r3, #1
 800751e:	2b01      	cmp	r3, #1
 8007520:	d119      	bne.n	8007556 <HAL_SPI_TransmitReceive+0x1b8>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007526:	b29b      	uxth	r3, r3
 8007528:	2b00      	cmp	r3, #0
 800752a:	d014      	beq.n	8007556 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68da      	ldr	r2, [r3, #12]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007536:	b292      	uxth	r2, r2
 8007538:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753e:	1c9a      	adds	r2, r3, #2
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007548:	b29b      	uxth	r3, r3
 800754a:	3b01      	subs	r3, #1
 800754c:	b29a      	uxth	r2, r3
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007552:	2301      	movs	r3, #1
 8007554:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007556:	f7fc fe75 	bl	8004244 <HAL_GetTick>
 800755a:	4602      	mov	r2, r0
 800755c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007562:	429a      	cmp	r2, r3
 8007564:	d807      	bhi.n	8007576 <HAL_SPI_TransmitReceive+0x1d8>
 8007566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800756c:	d003      	beq.n	8007576 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800756e:	2303      	movs	r3, #3
 8007570:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007574:	e0a7      	b.n	80076c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800757a:	b29b      	uxth	r3, r3
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1a6      	bne.n	80074ce <HAL_SPI_TransmitReceive+0x130>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007584:	b29b      	uxth	r3, r3
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1a1      	bne.n	80074ce <HAL_SPI_TransmitReceive+0x130>
 800758a:	e07c      	b.n	8007686 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d002      	beq.n	800759a <HAL_SPI_TransmitReceive+0x1fc>
 8007594:	8b7b      	ldrh	r3, [r7, #26]
 8007596:	2b01      	cmp	r3, #1
 8007598:	d16b      	bne.n	8007672 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	330c      	adds	r3, #12
 80075a4:	7812      	ldrb	r2, [r2, #0]
 80075a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ac:	1c5a      	adds	r2, r3, #1
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	3b01      	subs	r3, #1
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075c0:	e057      	b.n	8007672 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	f003 0302 	and.w	r3, r3, #2
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	d11c      	bne.n	800760a <HAL_SPI_TransmitReceive+0x26c>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d017      	beq.n	800760a <HAL_SPI_TransmitReceive+0x26c>
 80075da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d114      	bne.n	800760a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	330c      	adds	r3, #12
 80075ea:	7812      	ldrb	r2, [r2, #0]
 80075ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f2:	1c5a      	adds	r2, r3, #1
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	3b01      	subs	r3, #1
 8007600:	b29a      	uxth	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007606:	2300      	movs	r3, #0
 8007608:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	f003 0301 	and.w	r3, r3, #1
 8007614:	2b01      	cmp	r3, #1
 8007616:	d119      	bne.n	800764c <HAL_SPI_TransmitReceive+0x2ae>
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800761c:	b29b      	uxth	r3, r3
 800761e:	2b00      	cmp	r3, #0
 8007620:	d014      	beq.n	800764c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	68da      	ldr	r2, [r3, #12]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762c:	b2d2      	uxtb	r2, r2
 800762e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007634:	1c5a      	adds	r2, r3, #1
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800763e:	b29b      	uxth	r3, r3
 8007640:	3b01      	subs	r3, #1
 8007642:	b29a      	uxth	r2, r3
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007648:	2301      	movs	r3, #1
 800764a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800764c:	f7fc fdfa 	bl	8004244 <HAL_GetTick>
 8007650:	4602      	mov	r2, r0
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007658:	429a      	cmp	r2, r3
 800765a:	d803      	bhi.n	8007664 <HAL_SPI_TransmitReceive+0x2c6>
 800765c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007662:	d102      	bne.n	800766a <HAL_SPI_TransmitReceive+0x2cc>
 8007664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007666:	2b00      	cmp	r3, #0
 8007668:	d103      	bne.n	8007672 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007670:	e029      	b.n	80076c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007676:	b29b      	uxth	r3, r3
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1a2      	bne.n	80075c2 <HAL_SPI_TransmitReceive+0x224>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007680:	b29b      	uxth	r3, r3
 8007682:	2b00      	cmp	r3, #0
 8007684:	d19d      	bne.n	80075c2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007688:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f000 f8c0 	bl	8007810 <SPI_EndRxTxTransaction>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d006      	beq.n	80076a4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2220      	movs	r2, #32
 80076a0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80076a2:	e010      	b.n	80076c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d10b      	bne.n	80076c4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076ac:	2300      	movs	r3, #0
 80076ae:	617b      	str	r3, [r7, #20]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	617b      	str	r3, [r7, #20]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	617b      	str	r3, [r7, #20]
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	e000      	b.n	80076c6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80076c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2201      	movs	r2, #1
 80076ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80076d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3730      	adds	r7, #48	; 0x30
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80076e2:	b480      	push	{r7}
 80076e4:	b083      	sub	sp, #12
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076f0:	b2db      	uxtb	r3, r3
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	370c      	adds	r7, #12
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr
	...

08007700 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b088      	sub	sp, #32
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	603b      	str	r3, [r7, #0]
 800770c:	4613      	mov	r3, r2
 800770e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007710:	f7fc fd98 	bl	8004244 <HAL_GetTick>
 8007714:	4602      	mov	r2, r0
 8007716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007718:	1a9b      	subs	r3, r3, r2
 800771a:	683a      	ldr	r2, [r7, #0]
 800771c:	4413      	add	r3, r2
 800771e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007720:	f7fc fd90 	bl	8004244 <HAL_GetTick>
 8007724:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007726:	4b39      	ldr	r3, [pc, #228]	; (800780c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	015b      	lsls	r3, r3, #5
 800772c:	0d1b      	lsrs	r3, r3, #20
 800772e:	69fa      	ldr	r2, [r7, #28]
 8007730:	fb02 f303 	mul.w	r3, r2, r3
 8007734:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007736:	e054      	b.n	80077e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800773e:	d050      	beq.n	80077e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007740:	f7fc fd80 	bl	8004244 <HAL_GetTick>
 8007744:	4602      	mov	r2, r0
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	69fa      	ldr	r2, [r7, #28]
 800774c:	429a      	cmp	r2, r3
 800774e:	d902      	bls.n	8007756 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d13d      	bne.n	80077d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007764:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800776e:	d111      	bne.n	8007794 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007778:	d004      	beq.n	8007784 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007782:	d107      	bne.n	8007794 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007792:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800779c:	d10f      	bne.n	80077be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077ac:	601a      	str	r2, [r3, #0]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2201      	movs	r2, #1
 80077c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80077ce:	2303      	movs	r3, #3
 80077d0:	e017      	b.n	8007802 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d101      	bne.n	80077dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80077d8:	2300      	movs	r3, #0
 80077da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	3b01      	subs	r3, #1
 80077e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	689a      	ldr	r2, [r3, #8]
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	4013      	ands	r3, r2
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	bf0c      	ite	eq
 80077f2:	2301      	moveq	r3, #1
 80077f4:	2300      	movne	r3, #0
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	461a      	mov	r2, r3
 80077fa:	79fb      	ldrb	r3, [r7, #7]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d19b      	bne.n	8007738 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3720      	adds	r7, #32
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	20000014 	.word	0x20000014

08007810 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b088      	sub	sp, #32
 8007814:	af02      	add	r7, sp, #8
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800781c:	4b1b      	ldr	r3, [pc, #108]	; (800788c <SPI_EndRxTxTransaction+0x7c>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a1b      	ldr	r2, [pc, #108]	; (8007890 <SPI_EndRxTxTransaction+0x80>)
 8007822:	fba2 2303 	umull	r2, r3, r2, r3
 8007826:	0d5b      	lsrs	r3, r3, #21
 8007828:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800782c:	fb02 f303 	mul.w	r3, r2, r3
 8007830:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800783a:	d112      	bne.n	8007862 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	9300      	str	r3, [sp, #0]
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	2200      	movs	r2, #0
 8007844:	2180      	movs	r1, #128	; 0x80
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	f7ff ff5a 	bl	8007700 <SPI_WaitFlagStateUntilTimeout>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d016      	beq.n	8007880 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007856:	f043 0220 	orr.w	r2, r3, #32
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e00f      	b.n	8007882 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00a      	beq.n	800787e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	3b01      	subs	r3, #1
 800786c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007878:	2b80      	cmp	r3, #128	; 0x80
 800787a:	d0f2      	beq.n	8007862 <SPI_EndRxTxTransaction+0x52>
 800787c:	e000      	b.n	8007880 <SPI_EndRxTxTransaction+0x70>
        break;
 800787e:	bf00      	nop
  }

  return HAL_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3718      	adds	r7, #24
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	20000014 	.word	0x20000014
 8007890:	165e9f81 	.word	0x165e9f81

08007894 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d101      	bne.n	80078a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e041      	b.n	800792a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d106      	bne.n	80078c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f7fb ffce 	bl	800385c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2202      	movs	r2, #2
 80078c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	3304      	adds	r3, #4
 80078d0:	4619      	mov	r1, r3
 80078d2:	4610      	mov	r0, r2
 80078d4:	f000 fc42 	bl	800815c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3708      	adds	r7, #8
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
	...

08007934 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007942:	b2db      	uxtb	r3, r3
 8007944:	2b01      	cmp	r3, #1
 8007946:	d001      	beq.n	800794c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e046      	b.n	80079da <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2202      	movs	r2, #2
 8007950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a23      	ldr	r2, [pc, #140]	; (80079e8 <HAL_TIM_Base_Start+0xb4>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d022      	beq.n	80079a4 <HAL_TIM_Base_Start+0x70>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007966:	d01d      	beq.n	80079a4 <HAL_TIM_Base_Start+0x70>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a1f      	ldr	r2, [pc, #124]	; (80079ec <HAL_TIM_Base_Start+0xb8>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d018      	beq.n	80079a4 <HAL_TIM_Base_Start+0x70>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a1e      	ldr	r2, [pc, #120]	; (80079f0 <HAL_TIM_Base_Start+0xbc>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d013      	beq.n	80079a4 <HAL_TIM_Base_Start+0x70>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a1c      	ldr	r2, [pc, #112]	; (80079f4 <HAL_TIM_Base_Start+0xc0>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d00e      	beq.n	80079a4 <HAL_TIM_Base_Start+0x70>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a1b      	ldr	r2, [pc, #108]	; (80079f8 <HAL_TIM_Base_Start+0xc4>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d009      	beq.n	80079a4 <HAL_TIM_Base_Start+0x70>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a19      	ldr	r2, [pc, #100]	; (80079fc <HAL_TIM_Base_Start+0xc8>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d004      	beq.n	80079a4 <HAL_TIM_Base_Start+0x70>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a18      	ldr	r2, [pc, #96]	; (8007a00 <HAL_TIM_Base_Start+0xcc>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d111      	bne.n	80079c8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f003 0307 	and.w	r3, r3, #7
 80079ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2b06      	cmp	r3, #6
 80079b4:	d010      	beq.n	80079d8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f042 0201 	orr.w	r2, r2, #1
 80079c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079c6:	e007      	b.n	80079d8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f042 0201 	orr.w	r2, r2, #1
 80079d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3714      	adds	r7, #20
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	40010000 	.word	0x40010000
 80079ec:	40000400 	.word	0x40000400
 80079f0:	40000800 	.word	0x40000800
 80079f4:	40000c00 	.word	0x40000c00
 80079f8:	40010400 	.word	0x40010400
 80079fc:	40014000 	.word	0x40014000
 8007a00:	40001800 	.word	0x40001800

08007a04 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	6a1a      	ldr	r2, [r3, #32]
 8007a12:	f241 1311 	movw	r3, #4369	; 0x1111
 8007a16:	4013      	ands	r3, r2
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d10f      	bne.n	8007a3c <HAL_TIM_Base_Stop+0x38>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	6a1a      	ldr	r2, [r3, #32]
 8007a22:	f240 4344 	movw	r3, #1092	; 0x444
 8007a26:	4013      	ands	r3, r2
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d107      	bne.n	8007a3c <HAL_TIM_Base_Stop+0x38>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f022 0201 	bic.w	r2, r2, #1
 8007a3a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	370c      	adds	r7, #12
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
	...

08007a54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d001      	beq.n	8007a6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e04e      	b.n	8007b0a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2202      	movs	r2, #2
 8007a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68da      	ldr	r2, [r3, #12]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f042 0201 	orr.w	r2, r2, #1
 8007a82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a23      	ldr	r2, [pc, #140]	; (8007b18 <HAL_TIM_Base_Start_IT+0xc4>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d022      	beq.n	8007ad4 <HAL_TIM_Base_Start_IT+0x80>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a96:	d01d      	beq.n	8007ad4 <HAL_TIM_Base_Start_IT+0x80>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a1f      	ldr	r2, [pc, #124]	; (8007b1c <HAL_TIM_Base_Start_IT+0xc8>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d018      	beq.n	8007ad4 <HAL_TIM_Base_Start_IT+0x80>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a1e      	ldr	r2, [pc, #120]	; (8007b20 <HAL_TIM_Base_Start_IT+0xcc>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d013      	beq.n	8007ad4 <HAL_TIM_Base_Start_IT+0x80>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a1c      	ldr	r2, [pc, #112]	; (8007b24 <HAL_TIM_Base_Start_IT+0xd0>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d00e      	beq.n	8007ad4 <HAL_TIM_Base_Start_IT+0x80>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a1b      	ldr	r2, [pc, #108]	; (8007b28 <HAL_TIM_Base_Start_IT+0xd4>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d009      	beq.n	8007ad4 <HAL_TIM_Base_Start_IT+0x80>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a19      	ldr	r2, [pc, #100]	; (8007b2c <HAL_TIM_Base_Start_IT+0xd8>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d004      	beq.n	8007ad4 <HAL_TIM_Base_Start_IT+0x80>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a18      	ldr	r2, [pc, #96]	; (8007b30 <HAL_TIM_Base_Start_IT+0xdc>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d111      	bne.n	8007af8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	f003 0307 	and.w	r3, r3, #7
 8007ade:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2b06      	cmp	r3, #6
 8007ae4:	d010      	beq.n	8007b08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f042 0201 	orr.w	r2, r2, #1
 8007af4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007af6:	e007      	b.n	8007b08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f042 0201 	orr.w	r2, r2, #1
 8007b06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3714      	adds	r7, #20
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	40010000 	.word	0x40010000
 8007b1c:	40000400 	.word	0x40000400
 8007b20:	40000800 	.word	0x40000800
 8007b24:	40000c00 	.word	0x40000c00
 8007b28:	40010400 	.word	0x40010400
 8007b2c:	40014000 	.word	0x40014000
 8007b30:	40001800 	.word	0x40001800

08007b34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d101      	bne.n	8007b46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e041      	b.n	8007bca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d106      	bne.n	8007b60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f839 	bl	8007bd2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2202      	movs	r2, #2
 8007b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	3304      	adds	r3, #4
 8007b70:	4619      	mov	r1, r3
 8007b72:	4610      	mov	r0, r2
 8007b74:	f000 faf2 	bl	800815c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3708      	adds	r7, #8
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007bd2:	b480      	push	{r7}
 8007bd4:	b083      	sub	sp, #12
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007bda:	bf00      	nop
 8007bdc:	370c      	adds	r7, #12
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr

08007be6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b082      	sub	sp, #8
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	691b      	ldr	r3, [r3, #16]
 8007bf4:	f003 0302 	and.w	r3, r3, #2
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	d122      	bne.n	8007c42 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	f003 0302 	and.w	r3, r3, #2
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d11b      	bne.n	8007c42 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f06f 0202 	mvn.w	r2, #2
 8007c12:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	699b      	ldr	r3, [r3, #24]
 8007c20:	f003 0303 	and.w	r3, r3, #3
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d003      	beq.n	8007c30 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fa78 	bl	800811e <HAL_TIM_IC_CaptureCallback>
 8007c2e:	e005      	b.n	8007c3c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 fa6a 	bl	800810a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fa7b 	bl	8008132 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	f003 0304 	and.w	r3, r3, #4
 8007c4c:	2b04      	cmp	r3, #4
 8007c4e:	d122      	bne.n	8007c96 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	f003 0304 	and.w	r3, r3, #4
 8007c5a:	2b04      	cmp	r3, #4
 8007c5c:	d11b      	bne.n	8007c96 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f06f 0204 	mvn.w	r2, #4
 8007c66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	699b      	ldr	r3, [r3, #24]
 8007c74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d003      	beq.n	8007c84 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 fa4e 	bl	800811e <HAL_TIM_IC_CaptureCallback>
 8007c82:	e005      	b.n	8007c90 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 fa40 	bl	800810a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fa51 	bl	8008132 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	f003 0308 	and.w	r3, r3, #8
 8007ca0:	2b08      	cmp	r3, #8
 8007ca2:	d122      	bne.n	8007cea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	f003 0308 	and.w	r3, r3, #8
 8007cae:	2b08      	cmp	r3, #8
 8007cb0:	d11b      	bne.n	8007cea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f06f 0208 	mvn.w	r2, #8
 8007cba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2204      	movs	r2, #4
 8007cc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	69db      	ldr	r3, [r3, #28]
 8007cc8:	f003 0303 	and.w	r3, r3, #3
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d003      	beq.n	8007cd8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 fa24 	bl	800811e <HAL_TIM_IC_CaptureCallback>
 8007cd6:	e005      	b.n	8007ce4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 fa16 	bl	800810a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fa27 	bl	8008132 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	f003 0310 	and.w	r3, r3, #16
 8007cf4:	2b10      	cmp	r3, #16
 8007cf6:	d122      	bne.n	8007d3e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	f003 0310 	and.w	r3, r3, #16
 8007d02:	2b10      	cmp	r3, #16
 8007d04:	d11b      	bne.n	8007d3e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f06f 0210 	mvn.w	r2, #16
 8007d0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2208      	movs	r2, #8
 8007d14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	69db      	ldr	r3, [r3, #28]
 8007d1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d003      	beq.n	8007d2c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 f9fa 	bl	800811e <HAL_TIM_IC_CaptureCallback>
 8007d2a:	e005      	b.n	8007d38 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 f9ec 	bl	800810a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 f9fd 	bl	8008132 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	f003 0301 	and.w	r3, r3, #1
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d10e      	bne.n	8007d6a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d107      	bne.n	8007d6a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f06f 0201 	mvn.w	r2, #1
 8007d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f7fb f87d 	bl	8002e64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d74:	2b80      	cmp	r3, #128	; 0x80
 8007d76:	d10e      	bne.n	8007d96 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d82:	2b80      	cmp	r3, #128	; 0x80
 8007d84:	d107      	bne.n	8007d96 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 fda5 	bl	80088e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da0:	2b40      	cmp	r3, #64	; 0x40
 8007da2:	d10e      	bne.n	8007dc2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dae:	2b40      	cmp	r3, #64	; 0x40
 8007db0:	d107      	bne.n	8007dc2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 f9c2 	bl	8008146 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	691b      	ldr	r3, [r3, #16]
 8007dc8:	f003 0320 	and.w	r3, r3, #32
 8007dcc:	2b20      	cmp	r3, #32
 8007dce:	d10e      	bne.n	8007dee <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	f003 0320 	and.w	r3, r3, #32
 8007dda:	2b20      	cmp	r3, #32
 8007ddc:	d107      	bne.n	8007dee <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f06f 0220 	mvn.w	r2, #32
 8007de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 fd6f 	bl	80088cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007dee:	bf00      	nop
 8007df0:	3708      	adds	r7, #8
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
	...

08007df8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b086      	sub	sp, #24
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e04:	2300      	movs	r3, #0
 8007e06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d101      	bne.n	8007e16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e12:	2302      	movs	r3, #2
 8007e14:	e0ae      	b.n	8007f74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2b0c      	cmp	r3, #12
 8007e22:	f200 809f 	bhi.w	8007f64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007e26:	a201      	add	r2, pc, #4	; (adr r2, 8007e2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2c:	08007e61 	.word	0x08007e61
 8007e30:	08007f65 	.word	0x08007f65
 8007e34:	08007f65 	.word	0x08007f65
 8007e38:	08007f65 	.word	0x08007f65
 8007e3c:	08007ea1 	.word	0x08007ea1
 8007e40:	08007f65 	.word	0x08007f65
 8007e44:	08007f65 	.word	0x08007f65
 8007e48:	08007f65 	.word	0x08007f65
 8007e4c:	08007ee3 	.word	0x08007ee3
 8007e50:	08007f65 	.word	0x08007f65
 8007e54:	08007f65 	.word	0x08007f65
 8007e58:	08007f65 	.word	0x08007f65
 8007e5c:	08007f23 	.word	0x08007f23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68b9      	ldr	r1, [r7, #8]
 8007e66:	4618      	mov	r0, r3
 8007e68:	f000 fa18 	bl	800829c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	699a      	ldr	r2, [r3, #24]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f042 0208 	orr.w	r2, r2, #8
 8007e7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	699a      	ldr	r2, [r3, #24]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f022 0204 	bic.w	r2, r2, #4
 8007e8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	6999      	ldr	r1, [r3, #24]
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	691a      	ldr	r2, [r3, #16]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	430a      	orrs	r2, r1
 8007e9c:	619a      	str	r2, [r3, #24]
      break;
 8007e9e:	e064      	b.n	8007f6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	68b9      	ldr	r1, [r7, #8]
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f000 fa68 	bl	800837c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	699a      	ldr	r2, [r3, #24]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007eba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	699a      	ldr	r2, [r3, #24]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007eca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	6999      	ldr	r1, [r3, #24]
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	021a      	lsls	r2, r3, #8
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	430a      	orrs	r2, r1
 8007ede:	619a      	str	r2, [r3, #24]
      break;
 8007ee0:	e043      	b.n	8007f6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	68b9      	ldr	r1, [r7, #8]
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f000 fabd 	bl	8008468 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	69da      	ldr	r2, [r3, #28]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f042 0208 	orr.w	r2, r2, #8
 8007efc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	69da      	ldr	r2, [r3, #28]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f022 0204 	bic.w	r2, r2, #4
 8007f0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	69d9      	ldr	r1, [r3, #28]
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	691a      	ldr	r2, [r3, #16]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	430a      	orrs	r2, r1
 8007f1e:	61da      	str	r2, [r3, #28]
      break;
 8007f20:	e023      	b.n	8007f6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68b9      	ldr	r1, [r7, #8]
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f000 fb11 	bl	8008550 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	69da      	ldr	r2, [r3, #28]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	69da      	ldr	r2, [r3, #28]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	69d9      	ldr	r1, [r3, #28]
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	021a      	lsls	r2, r3, #8
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	430a      	orrs	r2, r1
 8007f60:	61da      	str	r2, [r3, #28]
      break;
 8007f62:	e002      	b.n	8007f6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	75fb      	strb	r3, [r7, #23]
      break;
 8007f68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3718      	adds	r7, #24
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f86:	2300      	movs	r3, #0
 8007f88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d101      	bne.n	8007f98 <HAL_TIM_ConfigClockSource+0x1c>
 8007f94:	2302      	movs	r3, #2
 8007f96:	e0b4      	b.n	8008102 <HAL_TIM_ConfigClockSource+0x186>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2202      	movs	r2, #2
 8007fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007fb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007fbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68ba      	ldr	r2, [r7, #8]
 8007fc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fd0:	d03e      	beq.n	8008050 <HAL_TIM_ConfigClockSource+0xd4>
 8007fd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fd6:	f200 8087 	bhi.w	80080e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fde:	f000 8086 	beq.w	80080ee <HAL_TIM_ConfigClockSource+0x172>
 8007fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fe6:	d87f      	bhi.n	80080e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007fe8:	2b70      	cmp	r3, #112	; 0x70
 8007fea:	d01a      	beq.n	8008022 <HAL_TIM_ConfigClockSource+0xa6>
 8007fec:	2b70      	cmp	r3, #112	; 0x70
 8007fee:	d87b      	bhi.n	80080e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007ff0:	2b60      	cmp	r3, #96	; 0x60
 8007ff2:	d050      	beq.n	8008096 <HAL_TIM_ConfigClockSource+0x11a>
 8007ff4:	2b60      	cmp	r3, #96	; 0x60
 8007ff6:	d877      	bhi.n	80080e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007ff8:	2b50      	cmp	r3, #80	; 0x50
 8007ffa:	d03c      	beq.n	8008076 <HAL_TIM_ConfigClockSource+0xfa>
 8007ffc:	2b50      	cmp	r3, #80	; 0x50
 8007ffe:	d873      	bhi.n	80080e8 <HAL_TIM_ConfigClockSource+0x16c>
 8008000:	2b40      	cmp	r3, #64	; 0x40
 8008002:	d058      	beq.n	80080b6 <HAL_TIM_ConfigClockSource+0x13a>
 8008004:	2b40      	cmp	r3, #64	; 0x40
 8008006:	d86f      	bhi.n	80080e8 <HAL_TIM_ConfigClockSource+0x16c>
 8008008:	2b30      	cmp	r3, #48	; 0x30
 800800a:	d064      	beq.n	80080d6 <HAL_TIM_ConfigClockSource+0x15a>
 800800c:	2b30      	cmp	r3, #48	; 0x30
 800800e:	d86b      	bhi.n	80080e8 <HAL_TIM_ConfigClockSource+0x16c>
 8008010:	2b20      	cmp	r3, #32
 8008012:	d060      	beq.n	80080d6 <HAL_TIM_ConfigClockSource+0x15a>
 8008014:	2b20      	cmp	r3, #32
 8008016:	d867      	bhi.n	80080e8 <HAL_TIM_ConfigClockSource+0x16c>
 8008018:	2b00      	cmp	r3, #0
 800801a:	d05c      	beq.n	80080d6 <HAL_TIM_ConfigClockSource+0x15a>
 800801c:	2b10      	cmp	r3, #16
 800801e:	d05a      	beq.n	80080d6 <HAL_TIM_ConfigClockSource+0x15a>
 8008020:	e062      	b.n	80080e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6818      	ldr	r0, [r3, #0]
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	6899      	ldr	r1, [r3, #8]
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	685a      	ldr	r2, [r3, #4]
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	f000 fb5d 	bl	80086f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008044:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68ba      	ldr	r2, [r7, #8]
 800804c:	609a      	str	r2, [r3, #8]
      break;
 800804e:	e04f      	b.n	80080f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6818      	ldr	r0, [r3, #0]
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	6899      	ldr	r1, [r3, #8]
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	685a      	ldr	r2, [r3, #4]
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	f000 fb46 	bl	80086f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	689a      	ldr	r2, [r3, #8]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008072:	609a      	str	r2, [r3, #8]
      break;
 8008074:	e03c      	b.n	80080f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6818      	ldr	r0, [r3, #0]
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	6859      	ldr	r1, [r3, #4]
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	461a      	mov	r2, r3
 8008084:	f000 faba 	bl	80085fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	2150      	movs	r1, #80	; 0x50
 800808e:	4618      	mov	r0, r3
 8008090:	f000 fb13 	bl	80086ba <TIM_ITRx_SetConfig>
      break;
 8008094:	e02c      	b.n	80080f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6818      	ldr	r0, [r3, #0]
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	6859      	ldr	r1, [r3, #4]
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	461a      	mov	r2, r3
 80080a4:	f000 fad9 	bl	800865a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2160      	movs	r1, #96	; 0x60
 80080ae:	4618      	mov	r0, r3
 80080b0:	f000 fb03 	bl	80086ba <TIM_ITRx_SetConfig>
      break;
 80080b4:	e01c      	b.n	80080f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6818      	ldr	r0, [r3, #0]
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	6859      	ldr	r1, [r3, #4]
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	461a      	mov	r2, r3
 80080c4:	f000 fa9a 	bl	80085fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2140      	movs	r1, #64	; 0x40
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 faf3 	bl	80086ba <TIM_ITRx_SetConfig>
      break;
 80080d4:	e00c      	b.n	80080f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4619      	mov	r1, r3
 80080e0:	4610      	mov	r0, r2
 80080e2:	f000 faea 	bl	80086ba <TIM_ITRx_SetConfig>
      break;
 80080e6:	e003      	b.n	80080f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	73fb      	strb	r3, [r7, #15]
      break;
 80080ec:	e000      	b.n	80080f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80080ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008100:	7bfb      	ldrb	r3, [r7, #15]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800810a:	b480      	push	{r7}
 800810c:	b083      	sub	sp, #12
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008112:	bf00      	nop
 8008114:	370c      	adds	r7, #12
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr

0800811e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800811e:	b480      	push	{r7}
 8008120:	b083      	sub	sp, #12
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008126:	bf00      	nop
 8008128:	370c      	adds	r7, #12
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr

08008132 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008132:	b480      	push	{r7}
 8008134:	b083      	sub	sp, #12
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800813a:	bf00      	nop
 800813c:	370c      	adds	r7, #12
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr

08008146 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008146:	b480      	push	{r7}
 8008148:	b083      	sub	sp, #12
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800814e:	bf00      	nop
 8008150:	370c      	adds	r7, #12
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr
	...

0800815c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	4a40      	ldr	r2, [pc, #256]	; (8008270 <TIM_Base_SetConfig+0x114>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d013      	beq.n	800819c <TIM_Base_SetConfig+0x40>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800817a:	d00f      	beq.n	800819c <TIM_Base_SetConfig+0x40>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a3d      	ldr	r2, [pc, #244]	; (8008274 <TIM_Base_SetConfig+0x118>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d00b      	beq.n	800819c <TIM_Base_SetConfig+0x40>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a3c      	ldr	r2, [pc, #240]	; (8008278 <TIM_Base_SetConfig+0x11c>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d007      	beq.n	800819c <TIM_Base_SetConfig+0x40>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4a3b      	ldr	r2, [pc, #236]	; (800827c <TIM_Base_SetConfig+0x120>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d003      	beq.n	800819c <TIM_Base_SetConfig+0x40>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4a3a      	ldr	r2, [pc, #232]	; (8008280 <TIM_Base_SetConfig+0x124>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d108      	bne.n	80081ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a2f      	ldr	r2, [pc, #188]	; (8008270 <TIM_Base_SetConfig+0x114>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d02b      	beq.n	800820e <TIM_Base_SetConfig+0xb2>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081bc:	d027      	beq.n	800820e <TIM_Base_SetConfig+0xb2>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a2c      	ldr	r2, [pc, #176]	; (8008274 <TIM_Base_SetConfig+0x118>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d023      	beq.n	800820e <TIM_Base_SetConfig+0xb2>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a2b      	ldr	r2, [pc, #172]	; (8008278 <TIM_Base_SetConfig+0x11c>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d01f      	beq.n	800820e <TIM_Base_SetConfig+0xb2>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a2a      	ldr	r2, [pc, #168]	; (800827c <TIM_Base_SetConfig+0x120>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d01b      	beq.n	800820e <TIM_Base_SetConfig+0xb2>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4a29      	ldr	r2, [pc, #164]	; (8008280 <TIM_Base_SetConfig+0x124>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d017      	beq.n	800820e <TIM_Base_SetConfig+0xb2>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a28      	ldr	r2, [pc, #160]	; (8008284 <TIM_Base_SetConfig+0x128>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d013      	beq.n	800820e <TIM_Base_SetConfig+0xb2>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a27      	ldr	r2, [pc, #156]	; (8008288 <TIM_Base_SetConfig+0x12c>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d00f      	beq.n	800820e <TIM_Base_SetConfig+0xb2>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a26      	ldr	r2, [pc, #152]	; (800828c <TIM_Base_SetConfig+0x130>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d00b      	beq.n	800820e <TIM_Base_SetConfig+0xb2>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a25      	ldr	r2, [pc, #148]	; (8008290 <TIM_Base_SetConfig+0x134>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d007      	beq.n	800820e <TIM_Base_SetConfig+0xb2>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a24      	ldr	r2, [pc, #144]	; (8008294 <TIM_Base_SetConfig+0x138>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d003      	beq.n	800820e <TIM_Base_SetConfig+0xb2>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a23      	ldr	r2, [pc, #140]	; (8008298 <TIM_Base_SetConfig+0x13c>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d108      	bne.n	8008220 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008214:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	4313      	orrs	r3, r2
 800821e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	695b      	ldr	r3, [r3, #20]
 800822a:	4313      	orrs	r3, r2
 800822c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	68fa      	ldr	r2, [r7, #12]
 8008232:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	689a      	ldr	r2, [r3, #8]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a0a      	ldr	r2, [pc, #40]	; (8008270 <TIM_Base_SetConfig+0x114>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d003      	beq.n	8008254 <TIM_Base_SetConfig+0xf8>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4a0c      	ldr	r2, [pc, #48]	; (8008280 <TIM_Base_SetConfig+0x124>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d103      	bne.n	800825c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	691a      	ldr	r2, [r3, #16]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	615a      	str	r2, [r3, #20]
}
 8008262:	bf00      	nop
 8008264:	3714      	adds	r7, #20
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	40010000 	.word	0x40010000
 8008274:	40000400 	.word	0x40000400
 8008278:	40000800 	.word	0x40000800
 800827c:	40000c00 	.word	0x40000c00
 8008280:	40010400 	.word	0x40010400
 8008284:	40014000 	.word	0x40014000
 8008288:	40014400 	.word	0x40014400
 800828c:	40014800 	.word	0x40014800
 8008290:	40001800 	.word	0x40001800
 8008294:	40001c00 	.word	0x40001c00
 8008298:	40002000 	.word	0x40002000

0800829c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800829c:	b480      	push	{r7}
 800829e:	b087      	sub	sp, #28
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a1b      	ldr	r3, [r3, #32]
 80082aa:	f023 0201 	bic.w	r2, r3, #1
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a1b      	ldr	r3, [r3, #32]
 80082b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	699b      	ldr	r3, [r3, #24]
 80082c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f023 0303 	bic.w	r3, r3, #3
 80082d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	4313      	orrs	r3, r2
 80082dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	f023 0302 	bic.w	r3, r3, #2
 80082e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	697a      	ldr	r2, [r7, #20]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a20      	ldr	r2, [pc, #128]	; (8008374 <TIM_OC1_SetConfig+0xd8>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d003      	beq.n	8008300 <TIM_OC1_SetConfig+0x64>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a1f      	ldr	r2, [pc, #124]	; (8008378 <TIM_OC1_SetConfig+0xdc>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d10c      	bne.n	800831a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	f023 0308 	bic.w	r3, r3, #8
 8008306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	697a      	ldr	r2, [r7, #20]
 800830e:	4313      	orrs	r3, r2
 8008310:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	f023 0304 	bic.w	r3, r3, #4
 8008318:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a15      	ldr	r2, [pc, #84]	; (8008374 <TIM_OC1_SetConfig+0xd8>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d003      	beq.n	800832a <TIM_OC1_SetConfig+0x8e>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a14      	ldr	r2, [pc, #80]	; (8008378 <TIM_OC1_SetConfig+0xdc>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d111      	bne.n	800834e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008330:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008338:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	695b      	ldr	r3, [r3, #20]
 800833e:	693a      	ldr	r2, [r7, #16]
 8008340:	4313      	orrs	r3, r2
 8008342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	699b      	ldr	r3, [r3, #24]
 8008348:	693a      	ldr	r2, [r7, #16]
 800834a:	4313      	orrs	r3, r2
 800834c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	693a      	ldr	r2, [r7, #16]
 8008352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	68fa      	ldr	r2, [r7, #12]
 8008358:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	685a      	ldr	r2, [r3, #4]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	697a      	ldr	r2, [r7, #20]
 8008366:	621a      	str	r2, [r3, #32]
}
 8008368:	bf00      	nop
 800836a:	371c      	adds	r7, #28
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr
 8008374:	40010000 	.word	0x40010000
 8008378:	40010400 	.word	0x40010400

0800837c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800837c:	b480      	push	{r7}
 800837e:	b087      	sub	sp, #28
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a1b      	ldr	r3, [r3, #32]
 800838a:	f023 0210 	bic.w	r2, r3, #16
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a1b      	ldr	r3, [r3, #32]
 8008396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	699b      	ldr	r3, [r3, #24]
 80083a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	021b      	lsls	r3, r3, #8
 80083ba:	68fa      	ldr	r2, [r7, #12]
 80083bc:	4313      	orrs	r3, r2
 80083be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	f023 0320 	bic.w	r3, r3, #32
 80083c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	011b      	lsls	r3, r3, #4
 80083ce:	697a      	ldr	r2, [r7, #20]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a22      	ldr	r2, [pc, #136]	; (8008460 <TIM_OC2_SetConfig+0xe4>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d003      	beq.n	80083e4 <TIM_OC2_SetConfig+0x68>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a21      	ldr	r2, [pc, #132]	; (8008464 <TIM_OC2_SetConfig+0xe8>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d10d      	bne.n	8008400 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	011b      	lsls	r3, r3, #4
 80083f2:	697a      	ldr	r2, [r7, #20]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4a17      	ldr	r2, [pc, #92]	; (8008460 <TIM_OC2_SetConfig+0xe4>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d003      	beq.n	8008410 <TIM_OC2_SetConfig+0x94>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a16      	ldr	r2, [pc, #88]	; (8008464 <TIM_OC2_SetConfig+0xe8>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d113      	bne.n	8008438 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008416:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800841e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	695b      	ldr	r3, [r3, #20]
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	693a      	ldr	r2, [r7, #16]
 8008428:	4313      	orrs	r3, r2
 800842a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	699b      	ldr	r3, [r3, #24]
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	693a      	ldr	r2, [r7, #16]
 8008434:	4313      	orrs	r3, r2
 8008436:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	693a      	ldr	r2, [r7, #16]
 800843c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	685a      	ldr	r2, [r3, #4]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	697a      	ldr	r2, [r7, #20]
 8008450:	621a      	str	r2, [r3, #32]
}
 8008452:	bf00      	nop
 8008454:	371c      	adds	r7, #28
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	40010000 	.word	0x40010000
 8008464:	40010400 	.word	0x40010400

08008468 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008468:	b480      	push	{r7}
 800846a:	b087      	sub	sp, #28
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a1b      	ldr	r3, [r3, #32]
 8008476:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a1b      	ldr	r3, [r3, #32]
 8008482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	69db      	ldr	r3, [r3, #28]
 800848e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f023 0303 	bic.w	r3, r3, #3
 800849e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80084b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	021b      	lsls	r3, r3, #8
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4a21      	ldr	r2, [pc, #132]	; (8008548 <TIM_OC3_SetConfig+0xe0>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d003      	beq.n	80084ce <TIM_OC3_SetConfig+0x66>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a20      	ldr	r2, [pc, #128]	; (800854c <TIM_OC3_SetConfig+0xe4>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d10d      	bne.n	80084ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80084d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	021b      	lsls	r3, r3, #8
 80084dc:	697a      	ldr	r2, [r7, #20]
 80084de:	4313      	orrs	r3, r2
 80084e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80084e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a16      	ldr	r2, [pc, #88]	; (8008548 <TIM_OC3_SetConfig+0xe0>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d003      	beq.n	80084fa <TIM_OC3_SetConfig+0x92>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a15      	ldr	r2, [pc, #84]	; (800854c <TIM_OC3_SetConfig+0xe4>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d113      	bne.n	8008522 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008500:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008508:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	695b      	ldr	r3, [r3, #20]
 800850e:	011b      	lsls	r3, r3, #4
 8008510:	693a      	ldr	r2, [r7, #16]
 8008512:	4313      	orrs	r3, r2
 8008514:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	011b      	lsls	r3, r3, #4
 800851c:	693a      	ldr	r2, [r7, #16]
 800851e:	4313      	orrs	r3, r2
 8008520:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	685a      	ldr	r2, [r3, #4]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	697a      	ldr	r2, [r7, #20]
 800853a:	621a      	str	r2, [r3, #32]
}
 800853c:	bf00      	nop
 800853e:	371c      	adds	r7, #28
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr
 8008548:	40010000 	.word	0x40010000
 800854c:	40010400 	.word	0x40010400

08008550 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008550:	b480      	push	{r7}
 8008552:	b087      	sub	sp, #28
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6a1b      	ldr	r3, [r3, #32]
 800855e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6a1b      	ldr	r3, [r3, #32]
 800856a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	69db      	ldr	r3, [r3, #28]
 8008576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800857e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008586:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	021b      	lsls	r3, r3, #8
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	4313      	orrs	r3, r2
 8008592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800859a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	031b      	lsls	r3, r3, #12
 80085a2:	693a      	ldr	r2, [r7, #16]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4a12      	ldr	r2, [pc, #72]	; (80085f4 <TIM_OC4_SetConfig+0xa4>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d003      	beq.n	80085b8 <TIM_OC4_SetConfig+0x68>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a11      	ldr	r2, [pc, #68]	; (80085f8 <TIM_OC4_SetConfig+0xa8>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d109      	bne.n	80085cc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	695b      	ldr	r3, [r3, #20]
 80085c4:	019b      	lsls	r3, r3, #6
 80085c6:	697a      	ldr	r2, [r7, #20]
 80085c8:	4313      	orrs	r3, r2
 80085ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	697a      	ldr	r2, [r7, #20]
 80085d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	685a      	ldr	r2, [r3, #4]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	693a      	ldr	r2, [r7, #16]
 80085e4:	621a      	str	r2, [r3, #32]
}
 80085e6:	bf00      	nop
 80085e8:	371c      	adds	r7, #28
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	40010000 	.word	0x40010000
 80085f8:	40010400 	.word	0x40010400

080085fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b087      	sub	sp, #28
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6a1b      	ldr	r3, [r3, #32]
 800860c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6a1b      	ldr	r3, [r3, #32]
 8008612:	f023 0201 	bic.w	r2, r3, #1
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	699b      	ldr	r3, [r3, #24]
 800861e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008626:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	011b      	lsls	r3, r3, #4
 800862c:	693a      	ldr	r2, [r7, #16]
 800862e:	4313      	orrs	r3, r2
 8008630:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	f023 030a 	bic.w	r3, r3, #10
 8008638:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800863a:	697a      	ldr	r2, [r7, #20]
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	4313      	orrs	r3, r2
 8008640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	693a      	ldr	r2, [r7, #16]
 8008646:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	697a      	ldr	r2, [r7, #20]
 800864c:	621a      	str	r2, [r3, #32]
}
 800864e:	bf00      	nop
 8008650:	371c      	adds	r7, #28
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr

0800865a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800865a:	b480      	push	{r7}
 800865c:	b087      	sub	sp, #28
 800865e:	af00      	add	r7, sp, #0
 8008660:	60f8      	str	r0, [r7, #12]
 8008662:	60b9      	str	r1, [r7, #8]
 8008664:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6a1b      	ldr	r3, [r3, #32]
 800866a:	f023 0210 	bic.w	r2, r3, #16
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6a1b      	ldr	r3, [r3, #32]
 800867c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008684:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	031b      	lsls	r3, r3, #12
 800868a:	697a      	ldr	r2, [r7, #20]
 800868c:	4313      	orrs	r3, r2
 800868e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008696:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	011b      	lsls	r3, r3, #4
 800869c:	693a      	ldr	r2, [r7, #16]
 800869e:	4313      	orrs	r3, r2
 80086a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	697a      	ldr	r2, [r7, #20]
 80086a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	693a      	ldr	r2, [r7, #16]
 80086ac:	621a      	str	r2, [r3, #32]
}
 80086ae:	bf00      	nop
 80086b0:	371c      	adds	r7, #28
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr

080086ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086ba:	b480      	push	{r7}
 80086bc:	b085      	sub	sp, #20
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
 80086c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086d2:	683a      	ldr	r2, [r7, #0]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	f043 0307 	orr.w	r3, r3, #7
 80086dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	609a      	str	r2, [r3, #8]
}
 80086e4:	bf00      	nop
 80086e6:	3714      	adds	r7, #20
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b087      	sub	sp, #28
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	607a      	str	r2, [r7, #4]
 80086fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800870a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	021a      	lsls	r2, r3, #8
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	431a      	orrs	r2, r3
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	4313      	orrs	r3, r2
 8008718:	697a      	ldr	r2, [r7, #20]
 800871a:	4313      	orrs	r3, r2
 800871c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	697a      	ldr	r2, [r7, #20]
 8008722:	609a      	str	r2, [r3, #8]
}
 8008724:	bf00      	nop
 8008726:	371c      	adds	r7, #28
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008740:	2b01      	cmp	r3, #1
 8008742:	d101      	bne.n	8008748 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008744:	2302      	movs	r3, #2
 8008746:	e05a      	b.n	80087fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2201      	movs	r2, #1
 800874c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2202      	movs	r2, #2
 8008754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800876e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	4313      	orrs	r3, r2
 8008778:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a21      	ldr	r2, [pc, #132]	; (800880c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d022      	beq.n	80087d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008794:	d01d      	beq.n	80087d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a1d      	ldr	r2, [pc, #116]	; (8008810 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d018      	beq.n	80087d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a1b      	ldr	r2, [pc, #108]	; (8008814 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d013      	beq.n	80087d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a1a      	ldr	r2, [pc, #104]	; (8008818 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d00e      	beq.n	80087d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a18      	ldr	r2, [pc, #96]	; (800881c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d009      	beq.n	80087d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a17      	ldr	r2, [pc, #92]	; (8008820 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d004      	beq.n	80087d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a15      	ldr	r2, [pc, #84]	; (8008824 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d10c      	bne.n	80087ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	68ba      	ldr	r2, [r7, #8]
 80087e0:	4313      	orrs	r3, r2
 80087e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3714      	adds	r7, #20
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	40010000 	.word	0x40010000
 8008810:	40000400 	.word	0x40000400
 8008814:	40000800 	.word	0x40000800
 8008818:	40000c00 	.word	0x40000c00
 800881c:	40010400 	.word	0x40010400
 8008820:	40014000 	.word	0x40014000
 8008824:	40001800 	.word	0x40001800

08008828 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008832:	2300      	movs	r3, #0
 8008834:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800883c:	2b01      	cmp	r3, #1
 800883e:	d101      	bne.n	8008844 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008840:	2302      	movs	r3, #2
 8008842:	e03d      	b.n	80088c0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2201      	movs	r2, #1
 8008848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	4313      	orrs	r3, r2
 8008858:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	4313      	orrs	r3, r2
 8008866:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	4313      	orrs	r3, r2
 8008874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4313      	orrs	r3, r2
 8008882:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	691b      	ldr	r3, [r3, #16]
 800888e:	4313      	orrs	r3, r2
 8008890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	695b      	ldr	r3, [r3, #20]
 800889c:	4313      	orrs	r3, r2
 800889e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	69db      	ldr	r3, [r3, #28]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	68fa      	ldr	r2, [r7, #12]
 80088b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3714      	adds	r7, #20
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088d4:	bf00      	nop
 80088d6:	370c      	adds	r7, #12
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088e8:	bf00      	nop
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d101      	bne.n	8008906 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	e03f      	b.n	8008986 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800890c:	b2db      	uxtb	r3, r3
 800890e:	2b00      	cmp	r3, #0
 8008910:	d106      	bne.n	8008920 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f7fb fbea 	bl	80040f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2224      	movs	r2, #36	; 0x24
 8008924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	68da      	ldr	r2, [r3, #12]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008936:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 f929 	bl	8008b90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	691a      	ldr	r2, [r3, #16]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800894c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	695a      	ldr	r2, [r3, #20]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800895c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	68da      	ldr	r2, [r3, #12]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800896c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2220      	movs	r2, #32
 8008978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2220      	movs	r2, #32
 8008980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	3708      	adds	r7, #8
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b08a      	sub	sp, #40	; 0x28
 8008992:	af02      	add	r7, sp, #8
 8008994:	60f8      	str	r0, [r7, #12]
 8008996:	60b9      	str	r1, [r7, #8]
 8008998:	603b      	str	r3, [r7, #0]
 800899a:	4613      	mov	r3, r2
 800899c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800899e:	2300      	movs	r3, #0
 80089a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	2b20      	cmp	r3, #32
 80089ac:	d17c      	bne.n	8008aa8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d002      	beq.n	80089ba <HAL_UART_Transmit+0x2c>
 80089b4:	88fb      	ldrh	r3, [r7, #6]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d101      	bne.n	80089be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	e075      	b.n	8008aaa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d101      	bne.n	80089cc <HAL_UART_Transmit+0x3e>
 80089c8:	2302      	movs	r3, #2
 80089ca:	e06e      	b.n	8008aaa <HAL_UART_Transmit+0x11c>
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2201      	movs	r2, #1
 80089d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2200      	movs	r2, #0
 80089d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2221      	movs	r2, #33	; 0x21
 80089de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089e2:	f7fb fc2f 	bl	8004244 <HAL_GetTick>
 80089e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	88fa      	ldrh	r2, [r7, #6]
 80089ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	88fa      	ldrh	r2, [r7, #6]
 80089f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089fc:	d108      	bne.n	8008a10 <HAL_UART_Transmit+0x82>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d104      	bne.n	8008a10 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008a06:	2300      	movs	r3, #0
 8008a08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	61bb      	str	r3, [r7, #24]
 8008a0e:	e003      	b.n	8008a18 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a14:	2300      	movs	r3, #0
 8008a16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008a20:	e02a      	b.n	8008a78 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	9300      	str	r3, [sp, #0]
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	2180      	movs	r1, #128	; 0x80
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	f000 f840 	bl	8008ab2 <UART_WaitOnFlagUntilTimeout>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d001      	beq.n	8008a3c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008a38:	2303      	movs	r3, #3
 8008a3a:	e036      	b.n	8008aaa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d10b      	bne.n	8008a5a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	881b      	ldrh	r3, [r3, #0]
 8008a46:	461a      	mov	r2, r3
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	3302      	adds	r3, #2
 8008a56:	61bb      	str	r3, [r7, #24]
 8008a58:	e007      	b.n	8008a6a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	781a      	ldrb	r2, [r3, #0]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	3301      	adds	r3, #1
 8008a68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	3b01      	subs	r3, #1
 8008a72:	b29a      	uxth	r2, r3
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1cf      	bne.n	8008a22 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	9300      	str	r3, [sp, #0]
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	2140      	movs	r1, #64	; 0x40
 8008a8c:	68f8      	ldr	r0, [r7, #12]
 8008a8e:	f000 f810 	bl	8008ab2 <UART_WaitOnFlagUntilTimeout>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d001      	beq.n	8008a9c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008a98:	2303      	movs	r3, #3
 8008a9a:	e006      	b.n	8008aaa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2220      	movs	r2, #32
 8008aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	e000      	b.n	8008aaa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008aa8:	2302      	movs	r3, #2
  }
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3720      	adds	r7, #32
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b090      	sub	sp, #64	; 0x40
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	60f8      	str	r0, [r7, #12]
 8008aba:	60b9      	str	r1, [r7, #8]
 8008abc:	603b      	str	r3, [r7, #0]
 8008abe:	4613      	mov	r3, r2
 8008ac0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ac2:	e050      	b.n	8008b66 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aca:	d04c      	beq.n	8008b66 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008acc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d007      	beq.n	8008ae2 <UART_WaitOnFlagUntilTimeout+0x30>
 8008ad2:	f7fb fbb7 	bl	8004244 <HAL_GetTick>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	1ad3      	subs	r3, r2, r3
 8008adc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d241      	bcs.n	8008b66 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	330c      	adds	r3, #12
 8008ae8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aec:	e853 3f00 	ldrex	r3, [r3]
 8008af0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008af8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	330c      	adds	r3, #12
 8008b00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008b02:	637a      	str	r2, [r7, #52]	; 0x34
 8008b04:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b0a:	e841 2300 	strex	r3, r2, [r1]
 8008b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1e5      	bne.n	8008ae2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	3314      	adds	r3, #20
 8008b1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	e853 3f00 	ldrex	r3, [r3]
 8008b24:	613b      	str	r3, [r7, #16]
   return(result);
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	f023 0301 	bic.w	r3, r3, #1
 8008b2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	3314      	adds	r3, #20
 8008b34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b36:	623a      	str	r2, [r7, #32]
 8008b38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3a:	69f9      	ldr	r1, [r7, #28]
 8008b3c:	6a3a      	ldr	r2, [r7, #32]
 8008b3e:	e841 2300 	strex	r3, r2, [r1]
 8008b42:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b44:	69bb      	ldr	r3, [r7, #24]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d1e5      	bne.n	8008b16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2220      	movs	r2, #32
 8008b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2220      	movs	r2, #32
 8008b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008b62:	2303      	movs	r3, #3
 8008b64:	e00f      	b.n	8008b86 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	4013      	ands	r3, r2
 8008b70:	68ba      	ldr	r2, [r7, #8]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	bf0c      	ite	eq
 8008b76:	2301      	moveq	r3, #1
 8008b78:	2300      	movne	r3, #0
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	79fb      	ldrb	r3, [r7, #7]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d09f      	beq.n	8008ac4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008b84:	2300      	movs	r3, #0
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3740      	adds	r7, #64	; 0x40
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
	...

08008b90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b94:	b0c0      	sub	sp, #256	; 0x100
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	691b      	ldr	r3, [r3, #16]
 8008ba4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bac:	68d9      	ldr	r1, [r3, #12]
 8008bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	ea40 0301 	orr.w	r3, r0, r1
 8008bb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bbe:	689a      	ldr	r2, [r3, #8]
 8008bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	431a      	orrs	r2, r3
 8008bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bcc:	695b      	ldr	r3, [r3, #20]
 8008bce:	431a      	orrs	r2, r3
 8008bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bd4:	69db      	ldr	r3, [r3, #28]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008be8:	f021 010c 	bic.w	r1, r1, #12
 8008bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008bf6:	430b      	orrs	r3, r1
 8008bf8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	695b      	ldr	r3, [r3, #20]
 8008c02:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c0a:	6999      	ldr	r1, [r3, #24]
 8008c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	ea40 0301 	orr.w	r3, r0, r1
 8008c16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	4b8f      	ldr	r3, [pc, #572]	; (8008e5c <UART_SetConfig+0x2cc>)
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d005      	beq.n	8008c30 <UART_SetConfig+0xa0>
 8008c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	4b8d      	ldr	r3, [pc, #564]	; (8008e60 <UART_SetConfig+0x2d0>)
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d104      	bne.n	8008c3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008c30:	f7fd fcdc 	bl	80065ec <HAL_RCC_GetPCLK2Freq>
 8008c34:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008c38:	e003      	b.n	8008c42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c3a:	f7fd fcc3 	bl	80065c4 <HAL_RCC_GetPCLK1Freq>
 8008c3e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c46:	69db      	ldr	r3, [r3, #28]
 8008c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c4c:	f040 810c 	bne.w	8008e68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008c50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c54:	2200      	movs	r2, #0
 8008c56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008c5a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008c5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008c62:	4622      	mov	r2, r4
 8008c64:	462b      	mov	r3, r5
 8008c66:	1891      	adds	r1, r2, r2
 8008c68:	65b9      	str	r1, [r7, #88]	; 0x58
 8008c6a:	415b      	adcs	r3, r3
 8008c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008c72:	4621      	mov	r1, r4
 8008c74:	eb12 0801 	adds.w	r8, r2, r1
 8008c78:	4629      	mov	r1, r5
 8008c7a:	eb43 0901 	adc.w	r9, r3, r1
 8008c7e:	f04f 0200 	mov.w	r2, #0
 8008c82:	f04f 0300 	mov.w	r3, #0
 8008c86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c92:	4690      	mov	r8, r2
 8008c94:	4699      	mov	r9, r3
 8008c96:	4623      	mov	r3, r4
 8008c98:	eb18 0303 	adds.w	r3, r8, r3
 8008c9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008ca0:	462b      	mov	r3, r5
 8008ca2:	eb49 0303 	adc.w	r3, r9, r3
 8008ca6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008cb6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008cba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	18db      	adds	r3, r3, r3
 8008cc2:	653b      	str	r3, [r7, #80]	; 0x50
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	eb42 0303 	adc.w	r3, r2, r3
 8008cca:	657b      	str	r3, [r7, #84]	; 0x54
 8008ccc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008cd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008cd4:	f7f7 ff98 	bl	8000c08 <__aeabi_uldivmod>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	460b      	mov	r3, r1
 8008cdc:	4b61      	ldr	r3, [pc, #388]	; (8008e64 <UART_SetConfig+0x2d4>)
 8008cde:	fba3 2302 	umull	r2, r3, r3, r2
 8008ce2:	095b      	lsrs	r3, r3, #5
 8008ce4:	011c      	lsls	r4, r3, #4
 8008ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cea:	2200      	movs	r2, #0
 8008cec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008cf0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008cf4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008cf8:	4642      	mov	r2, r8
 8008cfa:	464b      	mov	r3, r9
 8008cfc:	1891      	adds	r1, r2, r2
 8008cfe:	64b9      	str	r1, [r7, #72]	; 0x48
 8008d00:	415b      	adcs	r3, r3
 8008d02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008d08:	4641      	mov	r1, r8
 8008d0a:	eb12 0a01 	adds.w	sl, r2, r1
 8008d0e:	4649      	mov	r1, r9
 8008d10:	eb43 0b01 	adc.w	fp, r3, r1
 8008d14:	f04f 0200 	mov.w	r2, #0
 8008d18:	f04f 0300 	mov.w	r3, #0
 8008d1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008d20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008d24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d28:	4692      	mov	sl, r2
 8008d2a:	469b      	mov	fp, r3
 8008d2c:	4643      	mov	r3, r8
 8008d2e:	eb1a 0303 	adds.w	r3, sl, r3
 8008d32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d36:	464b      	mov	r3, r9
 8008d38:	eb4b 0303 	adc.w	r3, fp, r3
 8008d3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d4c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008d50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008d54:	460b      	mov	r3, r1
 8008d56:	18db      	adds	r3, r3, r3
 8008d58:	643b      	str	r3, [r7, #64]	; 0x40
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	eb42 0303 	adc.w	r3, r2, r3
 8008d60:	647b      	str	r3, [r7, #68]	; 0x44
 8008d62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008d66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008d6a:	f7f7 ff4d 	bl	8000c08 <__aeabi_uldivmod>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	460b      	mov	r3, r1
 8008d72:	4611      	mov	r1, r2
 8008d74:	4b3b      	ldr	r3, [pc, #236]	; (8008e64 <UART_SetConfig+0x2d4>)
 8008d76:	fba3 2301 	umull	r2, r3, r3, r1
 8008d7a:	095b      	lsrs	r3, r3, #5
 8008d7c:	2264      	movs	r2, #100	; 0x64
 8008d7e:	fb02 f303 	mul.w	r3, r2, r3
 8008d82:	1acb      	subs	r3, r1, r3
 8008d84:	00db      	lsls	r3, r3, #3
 8008d86:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008d8a:	4b36      	ldr	r3, [pc, #216]	; (8008e64 <UART_SetConfig+0x2d4>)
 8008d8c:	fba3 2302 	umull	r2, r3, r3, r2
 8008d90:	095b      	lsrs	r3, r3, #5
 8008d92:	005b      	lsls	r3, r3, #1
 8008d94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008d98:	441c      	add	r4, r3
 8008d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008da4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008da8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008dac:	4642      	mov	r2, r8
 8008dae:	464b      	mov	r3, r9
 8008db0:	1891      	adds	r1, r2, r2
 8008db2:	63b9      	str	r1, [r7, #56]	; 0x38
 8008db4:	415b      	adcs	r3, r3
 8008db6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008db8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008dbc:	4641      	mov	r1, r8
 8008dbe:	1851      	adds	r1, r2, r1
 8008dc0:	6339      	str	r1, [r7, #48]	; 0x30
 8008dc2:	4649      	mov	r1, r9
 8008dc4:	414b      	adcs	r3, r1
 8008dc6:	637b      	str	r3, [r7, #52]	; 0x34
 8008dc8:	f04f 0200 	mov.w	r2, #0
 8008dcc:	f04f 0300 	mov.w	r3, #0
 8008dd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008dd4:	4659      	mov	r1, fp
 8008dd6:	00cb      	lsls	r3, r1, #3
 8008dd8:	4651      	mov	r1, sl
 8008dda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008dde:	4651      	mov	r1, sl
 8008de0:	00ca      	lsls	r2, r1, #3
 8008de2:	4610      	mov	r0, r2
 8008de4:	4619      	mov	r1, r3
 8008de6:	4603      	mov	r3, r0
 8008de8:	4642      	mov	r2, r8
 8008dea:	189b      	adds	r3, r3, r2
 8008dec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008df0:	464b      	mov	r3, r9
 8008df2:	460a      	mov	r2, r1
 8008df4:	eb42 0303 	adc.w	r3, r2, r3
 8008df8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008e08:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008e0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008e10:	460b      	mov	r3, r1
 8008e12:	18db      	adds	r3, r3, r3
 8008e14:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e16:	4613      	mov	r3, r2
 8008e18:	eb42 0303 	adc.w	r3, r2, r3
 8008e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008e26:	f7f7 feef 	bl	8000c08 <__aeabi_uldivmod>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	4b0d      	ldr	r3, [pc, #52]	; (8008e64 <UART_SetConfig+0x2d4>)
 8008e30:	fba3 1302 	umull	r1, r3, r3, r2
 8008e34:	095b      	lsrs	r3, r3, #5
 8008e36:	2164      	movs	r1, #100	; 0x64
 8008e38:	fb01 f303 	mul.w	r3, r1, r3
 8008e3c:	1ad3      	subs	r3, r2, r3
 8008e3e:	00db      	lsls	r3, r3, #3
 8008e40:	3332      	adds	r3, #50	; 0x32
 8008e42:	4a08      	ldr	r2, [pc, #32]	; (8008e64 <UART_SetConfig+0x2d4>)
 8008e44:	fba2 2303 	umull	r2, r3, r2, r3
 8008e48:	095b      	lsrs	r3, r3, #5
 8008e4a:	f003 0207 	and.w	r2, r3, #7
 8008e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4422      	add	r2, r4
 8008e56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008e58:	e106      	b.n	8009068 <UART_SetConfig+0x4d8>
 8008e5a:	bf00      	nop
 8008e5c:	40011000 	.word	0x40011000
 8008e60:	40011400 	.word	0x40011400
 8008e64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008e72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008e76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008e7a:	4642      	mov	r2, r8
 8008e7c:	464b      	mov	r3, r9
 8008e7e:	1891      	adds	r1, r2, r2
 8008e80:	6239      	str	r1, [r7, #32]
 8008e82:	415b      	adcs	r3, r3
 8008e84:	627b      	str	r3, [r7, #36]	; 0x24
 8008e86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e8a:	4641      	mov	r1, r8
 8008e8c:	1854      	adds	r4, r2, r1
 8008e8e:	4649      	mov	r1, r9
 8008e90:	eb43 0501 	adc.w	r5, r3, r1
 8008e94:	f04f 0200 	mov.w	r2, #0
 8008e98:	f04f 0300 	mov.w	r3, #0
 8008e9c:	00eb      	lsls	r3, r5, #3
 8008e9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ea2:	00e2      	lsls	r2, r4, #3
 8008ea4:	4614      	mov	r4, r2
 8008ea6:	461d      	mov	r5, r3
 8008ea8:	4643      	mov	r3, r8
 8008eaa:	18e3      	adds	r3, r4, r3
 8008eac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008eb0:	464b      	mov	r3, r9
 8008eb2:	eb45 0303 	adc.w	r3, r5, r3
 8008eb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ec6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008eca:	f04f 0200 	mov.w	r2, #0
 8008ece:	f04f 0300 	mov.w	r3, #0
 8008ed2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008ed6:	4629      	mov	r1, r5
 8008ed8:	008b      	lsls	r3, r1, #2
 8008eda:	4621      	mov	r1, r4
 8008edc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ee0:	4621      	mov	r1, r4
 8008ee2:	008a      	lsls	r2, r1, #2
 8008ee4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008ee8:	f7f7 fe8e 	bl	8000c08 <__aeabi_uldivmod>
 8008eec:	4602      	mov	r2, r0
 8008eee:	460b      	mov	r3, r1
 8008ef0:	4b60      	ldr	r3, [pc, #384]	; (8009074 <UART_SetConfig+0x4e4>)
 8008ef2:	fba3 2302 	umull	r2, r3, r3, r2
 8008ef6:	095b      	lsrs	r3, r3, #5
 8008ef8:	011c      	lsls	r4, r3, #4
 8008efa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008efe:	2200      	movs	r2, #0
 8008f00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008f04:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008f08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008f0c:	4642      	mov	r2, r8
 8008f0e:	464b      	mov	r3, r9
 8008f10:	1891      	adds	r1, r2, r2
 8008f12:	61b9      	str	r1, [r7, #24]
 8008f14:	415b      	adcs	r3, r3
 8008f16:	61fb      	str	r3, [r7, #28]
 8008f18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f1c:	4641      	mov	r1, r8
 8008f1e:	1851      	adds	r1, r2, r1
 8008f20:	6139      	str	r1, [r7, #16]
 8008f22:	4649      	mov	r1, r9
 8008f24:	414b      	adcs	r3, r1
 8008f26:	617b      	str	r3, [r7, #20]
 8008f28:	f04f 0200 	mov.w	r2, #0
 8008f2c:	f04f 0300 	mov.w	r3, #0
 8008f30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f34:	4659      	mov	r1, fp
 8008f36:	00cb      	lsls	r3, r1, #3
 8008f38:	4651      	mov	r1, sl
 8008f3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f3e:	4651      	mov	r1, sl
 8008f40:	00ca      	lsls	r2, r1, #3
 8008f42:	4610      	mov	r0, r2
 8008f44:	4619      	mov	r1, r3
 8008f46:	4603      	mov	r3, r0
 8008f48:	4642      	mov	r2, r8
 8008f4a:	189b      	adds	r3, r3, r2
 8008f4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f50:	464b      	mov	r3, r9
 8008f52:	460a      	mov	r2, r1
 8008f54:	eb42 0303 	adc.w	r3, r2, r3
 8008f58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	67bb      	str	r3, [r7, #120]	; 0x78
 8008f66:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008f68:	f04f 0200 	mov.w	r2, #0
 8008f6c:	f04f 0300 	mov.w	r3, #0
 8008f70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008f74:	4649      	mov	r1, r9
 8008f76:	008b      	lsls	r3, r1, #2
 8008f78:	4641      	mov	r1, r8
 8008f7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f7e:	4641      	mov	r1, r8
 8008f80:	008a      	lsls	r2, r1, #2
 8008f82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008f86:	f7f7 fe3f 	bl	8000c08 <__aeabi_uldivmod>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	4611      	mov	r1, r2
 8008f90:	4b38      	ldr	r3, [pc, #224]	; (8009074 <UART_SetConfig+0x4e4>)
 8008f92:	fba3 2301 	umull	r2, r3, r3, r1
 8008f96:	095b      	lsrs	r3, r3, #5
 8008f98:	2264      	movs	r2, #100	; 0x64
 8008f9a:	fb02 f303 	mul.w	r3, r2, r3
 8008f9e:	1acb      	subs	r3, r1, r3
 8008fa0:	011b      	lsls	r3, r3, #4
 8008fa2:	3332      	adds	r3, #50	; 0x32
 8008fa4:	4a33      	ldr	r2, [pc, #204]	; (8009074 <UART_SetConfig+0x4e4>)
 8008fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8008faa:	095b      	lsrs	r3, r3, #5
 8008fac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fb0:	441c      	add	r4, r3
 8008fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	673b      	str	r3, [r7, #112]	; 0x70
 8008fba:	677a      	str	r2, [r7, #116]	; 0x74
 8008fbc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008fc0:	4642      	mov	r2, r8
 8008fc2:	464b      	mov	r3, r9
 8008fc4:	1891      	adds	r1, r2, r2
 8008fc6:	60b9      	str	r1, [r7, #8]
 8008fc8:	415b      	adcs	r3, r3
 8008fca:	60fb      	str	r3, [r7, #12]
 8008fcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008fd0:	4641      	mov	r1, r8
 8008fd2:	1851      	adds	r1, r2, r1
 8008fd4:	6039      	str	r1, [r7, #0]
 8008fd6:	4649      	mov	r1, r9
 8008fd8:	414b      	adcs	r3, r1
 8008fda:	607b      	str	r3, [r7, #4]
 8008fdc:	f04f 0200 	mov.w	r2, #0
 8008fe0:	f04f 0300 	mov.w	r3, #0
 8008fe4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008fe8:	4659      	mov	r1, fp
 8008fea:	00cb      	lsls	r3, r1, #3
 8008fec:	4651      	mov	r1, sl
 8008fee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ff2:	4651      	mov	r1, sl
 8008ff4:	00ca      	lsls	r2, r1, #3
 8008ff6:	4610      	mov	r0, r2
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	4642      	mov	r2, r8
 8008ffe:	189b      	adds	r3, r3, r2
 8009000:	66bb      	str	r3, [r7, #104]	; 0x68
 8009002:	464b      	mov	r3, r9
 8009004:	460a      	mov	r2, r1
 8009006:	eb42 0303 	adc.w	r3, r2, r3
 800900a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800900c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	663b      	str	r3, [r7, #96]	; 0x60
 8009016:	667a      	str	r2, [r7, #100]	; 0x64
 8009018:	f04f 0200 	mov.w	r2, #0
 800901c:	f04f 0300 	mov.w	r3, #0
 8009020:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009024:	4649      	mov	r1, r9
 8009026:	008b      	lsls	r3, r1, #2
 8009028:	4641      	mov	r1, r8
 800902a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800902e:	4641      	mov	r1, r8
 8009030:	008a      	lsls	r2, r1, #2
 8009032:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009036:	f7f7 fde7 	bl	8000c08 <__aeabi_uldivmod>
 800903a:	4602      	mov	r2, r0
 800903c:	460b      	mov	r3, r1
 800903e:	4b0d      	ldr	r3, [pc, #52]	; (8009074 <UART_SetConfig+0x4e4>)
 8009040:	fba3 1302 	umull	r1, r3, r3, r2
 8009044:	095b      	lsrs	r3, r3, #5
 8009046:	2164      	movs	r1, #100	; 0x64
 8009048:	fb01 f303 	mul.w	r3, r1, r3
 800904c:	1ad3      	subs	r3, r2, r3
 800904e:	011b      	lsls	r3, r3, #4
 8009050:	3332      	adds	r3, #50	; 0x32
 8009052:	4a08      	ldr	r2, [pc, #32]	; (8009074 <UART_SetConfig+0x4e4>)
 8009054:	fba2 2303 	umull	r2, r3, r2, r3
 8009058:	095b      	lsrs	r3, r3, #5
 800905a:	f003 020f 	and.w	r2, r3, #15
 800905e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4422      	add	r2, r4
 8009066:	609a      	str	r2, [r3, #8]
}
 8009068:	bf00      	nop
 800906a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800906e:	46bd      	mov	sp, r7
 8009070:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009074:	51eb851f 	.word	0x51eb851f

08009078 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800907c:	4904      	ldr	r1, [pc, #16]	; (8009090 <MX_FATFS_Init+0x18>)
 800907e:	4805      	ldr	r0, [pc, #20]	; (8009094 <MX_FATFS_Init+0x1c>)
 8009080:	f002 fe84 	bl	800bd8c <FATFS_LinkDriver>
 8009084:	4603      	mov	r3, r0
 8009086:	461a      	mov	r2, r3
 8009088:	4b03      	ldr	r3, [pc, #12]	; (8009098 <MX_FATFS_Init+0x20>)
 800908a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800908c:	bf00      	nop
 800908e:	bd80      	pop	{r7, pc}
 8009090:	200060f4 	.word	0x200060f4
 8009094:	20000030 	.word	0x20000030
 8009098:	200060f0 	.word	0x200060f0

0800909c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800909c:	b480      	push	{r7}
 800909e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80090a0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	4603      	mov	r3, r0
 80090b4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return (SD_disk_initialize(pdrv));
 80090b6:	79fb      	ldrb	r3, [r7, #7]
 80090b8:	4618      	mov	r0, r3
 80090ba:	f7f8 fded 	bl	8001c98 <SD_disk_initialize>
 80090be:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3708      	adds	r7, #8
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	4603      	mov	r3, r0
 80090d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return (SD_disk_status(pdrv));
 80090d2:	79fb      	ldrb	r3, [r7, #7]
 80090d4:	4618      	mov	r0, r3
 80090d6:	f7f8 fec9 	bl	8001e6c <SD_disk_status>
 80090da:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3708      	adds	r7, #8
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	60b9      	str	r1, [r7, #8]
 80090ec:	607a      	str	r2, [r7, #4]
 80090ee:	603b      	str	r3, [r7, #0]
 80090f0:	4603      	mov	r3, r0
 80090f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return (SD_disk_read(pdrv,buff, sector, count));
 80090f4:	7bf8      	ldrb	r0, [r7, #15]
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	68b9      	ldr	r1, [r7, #8]
 80090fc:	f7f8 fecc 	bl	8001e98 <SD_disk_read>
 8009100:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8009102:	4618      	mov	r0, r3
 8009104:	3710      	adds	r7, #16
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b084      	sub	sp, #16
 800910e:	af00      	add	r7, sp, #0
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	607a      	str	r2, [r7, #4]
 8009114:	603b      	str	r3, [r7, #0]
 8009116:	4603      	mov	r3, r0
 8009118:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return (SD_disk_write(pdrv, buff, sector, count));
 800911a:	7bf8      	ldrb	r0, [r7, #15]
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	68b9      	ldr	r1, [r7, #8]
 8009122:	f7f8 ff23 	bl	8001f6c <SD_disk_write>
 8009126:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8009128:	4618      	mov	r0, r3
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	4603      	mov	r3, r0
 8009138:	603a      	str	r2, [r7, #0]
 800913a:	71fb      	strb	r3, [r7, #7]
 800913c:	460b      	mov	r3, r1
 800913e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return (SD_disk_ioctl(pdrv, cmd, buff));
 8009140:	79b9      	ldrb	r1, [r7, #6]
 8009142:	79fb      	ldrb	r3, [r7, #7]
 8009144:	683a      	ldr	r2, [r7, #0]
 8009146:	4618      	mov	r0, r3
 8009148:	f7f8 ff94 	bl	8002074 <SD_disk_ioctl>
 800914c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800914e:	4618      	mov	r0, r3
 8009150:	3708      	adds	r7, #8
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
	...

08009158 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b084      	sub	sp, #16
 800915c:	af00      	add	r7, sp, #0
 800915e:	4603      	mov	r3, r0
 8009160:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009162:	79fb      	ldrb	r3, [r7, #7]
 8009164:	4a08      	ldr	r2, [pc, #32]	; (8009188 <disk_status+0x30>)
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	4413      	add	r3, r2
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	79fa      	ldrb	r2, [r7, #7]
 8009170:	4905      	ldr	r1, [pc, #20]	; (8009188 <disk_status+0x30>)
 8009172:	440a      	add	r2, r1
 8009174:	7a12      	ldrb	r2, [r2, #8]
 8009176:	4610      	mov	r0, r2
 8009178:	4798      	blx	r3
 800917a:	4603      	mov	r3, r0
 800917c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800917e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009180:	4618      	mov	r0, r3
 8009182:	3710      	adds	r7, #16
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	20006120 	.word	0x20006120

0800918c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	4603      	mov	r3, r0
 8009194:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009196:	2300      	movs	r3, #0
 8009198:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800919a:	79fb      	ldrb	r3, [r7, #7]
 800919c:	4a0d      	ldr	r2, [pc, #52]	; (80091d4 <disk_initialize+0x48>)
 800919e:	5cd3      	ldrb	r3, [r2, r3]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d111      	bne.n	80091c8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80091a4:	79fb      	ldrb	r3, [r7, #7]
 80091a6:	4a0b      	ldr	r2, [pc, #44]	; (80091d4 <disk_initialize+0x48>)
 80091a8:	2101      	movs	r1, #1
 80091aa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80091ac:	79fb      	ldrb	r3, [r7, #7]
 80091ae:	4a09      	ldr	r2, [pc, #36]	; (80091d4 <disk_initialize+0x48>)
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	4413      	add	r3, r2
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	79fa      	ldrb	r2, [r7, #7]
 80091ba:	4906      	ldr	r1, [pc, #24]	; (80091d4 <disk_initialize+0x48>)
 80091bc:	440a      	add	r2, r1
 80091be:	7a12      	ldrb	r2, [r2, #8]
 80091c0:	4610      	mov	r0, r2
 80091c2:	4798      	blx	r3
 80091c4:	4603      	mov	r3, r0
 80091c6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80091c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	20006120 	.word	0x20006120

080091d8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80091d8:	b590      	push	{r4, r7, lr}
 80091da:	b087      	sub	sp, #28
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60b9      	str	r1, [r7, #8]
 80091e0:	607a      	str	r2, [r7, #4]
 80091e2:	603b      	str	r3, [r7, #0]
 80091e4:	4603      	mov	r3, r0
 80091e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80091e8:	7bfb      	ldrb	r3, [r7, #15]
 80091ea:	4a0a      	ldr	r2, [pc, #40]	; (8009214 <disk_read+0x3c>)
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	4413      	add	r3, r2
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	689c      	ldr	r4, [r3, #8]
 80091f4:	7bfb      	ldrb	r3, [r7, #15]
 80091f6:	4a07      	ldr	r2, [pc, #28]	; (8009214 <disk_read+0x3c>)
 80091f8:	4413      	add	r3, r2
 80091fa:	7a18      	ldrb	r0, [r3, #8]
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	68b9      	ldr	r1, [r7, #8]
 8009202:	47a0      	blx	r4
 8009204:	4603      	mov	r3, r0
 8009206:	75fb      	strb	r3, [r7, #23]
  return res;
 8009208:	7dfb      	ldrb	r3, [r7, #23]
}
 800920a:	4618      	mov	r0, r3
 800920c:	371c      	adds	r7, #28
 800920e:	46bd      	mov	sp, r7
 8009210:	bd90      	pop	{r4, r7, pc}
 8009212:	bf00      	nop
 8009214:	20006120 	.word	0x20006120

08009218 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009218:	b590      	push	{r4, r7, lr}
 800921a:	b087      	sub	sp, #28
 800921c:	af00      	add	r7, sp, #0
 800921e:	60b9      	str	r1, [r7, #8]
 8009220:	607a      	str	r2, [r7, #4]
 8009222:	603b      	str	r3, [r7, #0]
 8009224:	4603      	mov	r3, r0
 8009226:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009228:	7bfb      	ldrb	r3, [r7, #15]
 800922a:	4a0a      	ldr	r2, [pc, #40]	; (8009254 <disk_write+0x3c>)
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	4413      	add	r3, r2
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	68dc      	ldr	r4, [r3, #12]
 8009234:	7bfb      	ldrb	r3, [r7, #15]
 8009236:	4a07      	ldr	r2, [pc, #28]	; (8009254 <disk_write+0x3c>)
 8009238:	4413      	add	r3, r2
 800923a:	7a18      	ldrb	r0, [r3, #8]
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	68b9      	ldr	r1, [r7, #8]
 8009242:	47a0      	blx	r4
 8009244:	4603      	mov	r3, r0
 8009246:	75fb      	strb	r3, [r7, #23]
  return res;
 8009248:	7dfb      	ldrb	r3, [r7, #23]
}
 800924a:	4618      	mov	r0, r3
 800924c:	371c      	adds	r7, #28
 800924e:	46bd      	mov	sp, r7
 8009250:	bd90      	pop	{r4, r7, pc}
 8009252:	bf00      	nop
 8009254:	20006120 	.word	0x20006120

08009258 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	4603      	mov	r3, r0
 8009260:	603a      	str	r2, [r7, #0]
 8009262:	71fb      	strb	r3, [r7, #7]
 8009264:	460b      	mov	r3, r1
 8009266:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009268:	79fb      	ldrb	r3, [r7, #7]
 800926a:	4a09      	ldr	r2, [pc, #36]	; (8009290 <disk_ioctl+0x38>)
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	4413      	add	r3, r2
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	691b      	ldr	r3, [r3, #16]
 8009274:	79fa      	ldrb	r2, [r7, #7]
 8009276:	4906      	ldr	r1, [pc, #24]	; (8009290 <disk_ioctl+0x38>)
 8009278:	440a      	add	r2, r1
 800927a:	7a10      	ldrb	r0, [r2, #8]
 800927c:	79b9      	ldrb	r1, [r7, #6]
 800927e:	683a      	ldr	r2, [r7, #0]
 8009280:	4798      	blx	r3
 8009282:	4603      	mov	r3, r0
 8009284:	73fb      	strb	r3, [r7, #15]
  return res;
 8009286:	7bfb      	ldrb	r3, [r7, #15]
}
 8009288:	4618      	mov	r0, r3
 800928a:	3710      	adds	r7, #16
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}
 8009290:	20006120 	.word	0x20006120

08009294 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009294:	b480      	push	{r7}
 8009296:	b085      	sub	sp, #20
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	3301      	adds	r3, #1
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80092a4:	89fb      	ldrh	r3, [r7, #14]
 80092a6:	021b      	lsls	r3, r3, #8
 80092a8:	b21a      	sxth	r2, r3
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	b21b      	sxth	r3, r3
 80092b0:	4313      	orrs	r3, r2
 80092b2:	b21b      	sxth	r3, r3
 80092b4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80092b6:	89fb      	ldrh	r3, [r7, #14]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3714      	adds	r7, #20
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80092c4:	b480      	push	{r7}
 80092c6:	b085      	sub	sp, #20
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	3303      	adds	r3, #3
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	021b      	lsls	r3, r3, #8
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	3202      	adds	r2, #2
 80092dc:	7812      	ldrb	r2, [r2, #0]
 80092de:	4313      	orrs	r3, r2
 80092e0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	021b      	lsls	r3, r3, #8
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	3201      	adds	r2, #1
 80092ea:	7812      	ldrb	r2, [r2, #0]
 80092ec:	4313      	orrs	r3, r2
 80092ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	021b      	lsls	r3, r3, #8
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	7812      	ldrb	r2, [r2, #0]
 80092f8:	4313      	orrs	r3, r2
 80092fa:	60fb      	str	r3, [r7, #12]
	return rv;
 80092fc:	68fb      	ldr	r3, [r7, #12]
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3714      	adds	r7, #20
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr

0800930a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800930a:	b480      	push	{r7}
 800930c:	b083      	sub	sp, #12
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
 8009312:	460b      	mov	r3, r1
 8009314:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	1c5a      	adds	r2, r3, #1
 800931a:	607a      	str	r2, [r7, #4]
 800931c:	887a      	ldrh	r2, [r7, #2]
 800931e:	b2d2      	uxtb	r2, r2
 8009320:	701a      	strb	r2, [r3, #0]
 8009322:	887b      	ldrh	r3, [r7, #2]
 8009324:	0a1b      	lsrs	r3, r3, #8
 8009326:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	1c5a      	adds	r2, r3, #1
 800932c:	607a      	str	r2, [r7, #4]
 800932e:	887a      	ldrh	r2, [r7, #2]
 8009330:	b2d2      	uxtb	r2, r2
 8009332:	701a      	strb	r2, [r3, #0]
}
 8009334:	bf00      	nop
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	1c5a      	adds	r2, r3, #1
 800934e:	607a      	str	r2, [r7, #4]
 8009350:	683a      	ldr	r2, [r7, #0]
 8009352:	b2d2      	uxtb	r2, r2
 8009354:	701a      	strb	r2, [r3, #0]
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	0a1b      	lsrs	r3, r3, #8
 800935a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	1c5a      	adds	r2, r3, #1
 8009360:	607a      	str	r2, [r7, #4]
 8009362:	683a      	ldr	r2, [r7, #0]
 8009364:	b2d2      	uxtb	r2, r2
 8009366:	701a      	strb	r2, [r3, #0]
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	0a1b      	lsrs	r3, r3, #8
 800936c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	1c5a      	adds	r2, r3, #1
 8009372:	607a      	str	r2, [r7, #4]
 8009374:	683a      	ldr	r2, [r7, #0]
 8009376:	b2d2      	uxtb	r2, r2
 8009378:	701a      	strb	r2, [r3, #0]
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	0a1b      	lsrs	r3, r3, #8
 800937e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	1c5a      	adds	r2, r3, #1
 8009384:	607a      	str	r2, [r7, #4]
 8009386:	683a      	ldr	r2, [r7, #0]
 8009388:	b2d2      	uxtb	r2, r2
 800938a:	701a      	strb	r2, [r3, #0]
}
 800938c:	bf00      	nop
 800938e:	370c      	adds	r7, #12
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009398:	b480      	push	{r7}
 800939a:	b087      	sub	sp, #28
 800939c:	af00      	add	r7, sp, #0
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d00d      	beq.n	80093ce <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80093b2:	693a      	ldr	r2, [r7, #16]
 80093b4:	1c53      	adds	r3, r2, #1
 80093b6:	613b      	str	r3, [r7, #16]
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	1c59      	adds	r1, r3, #1
 80093bc:	6179      	str	r1, [r7, #20]
 80093be:	7812      	ldrb	r2, [r2, #0]
 80093c0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	3b01      	subs	r3, #1
 80093c6:	607b      	str	r3, [r7, #4]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d1f1      	bne.n	80093b2 <mem_cpy+0x1a>
	}
}
 80093ce:	bf00      	nop
 80093d0:	371c      	adds	r7, #28
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr

080093da <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80093da:	b480      	push	{r7}
 80093dc:	b087      	sub	sp, #28
 80093de:	af00      	add	r7, sp, #0
 80093e0:	60f8      	str	r0, [r7, #12]
 80093e2:	60b9      	str	r1, [r7, #8]
 80093e4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	1c5a      	adds	r2, r3, #1
 80093ee:	617a      	str	r2, [r7, #20]
 80093f0:	68ba      	ldr	r2, [r7, #8]
 80093f2:	b2d2      	uxtb	r2, r2
 80093f4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	3b01      	subs	r3, #1
 80093fa:	607b      	str	r3, [r7, #4]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d1f3      	bne.n	80093ea <mem_set+0x10>
}
 8009402:	bf00      	nop
 8009404:	bf00      	nop
 8009406:	371c      	adds	r7, #28
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009410:	b480      	push	{r7}
 8009412:	b089      	sub	sp, #36	; 0x24
 8009414:	af00      	add	r7, sp, #0
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	61fb      	str	r3, [r7, #28]
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009424:	2300      	movs	r3, #0
 8009426:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009428:	69fb      	ldr	r3, [r7, #28]
 800942a:	1c5a      	adds	r2, r3, #1
 800942c:	61fa      	str	r2, [r7, #28]
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	4619      	mov	r1, r3
 8009432:	69bb      	ldr	r3, [r7, #24]
 8009434:	1c5a      	adds	r2, r3, #1
 8009436:	61ba      	str	r2, [r7, #24]
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	1acb      	subs	r3, r1, r3
 800943c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	3b01      	subs	r3, #1
 8009442:	607b      	str	r3, [r7, #4]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d002      	beq.n	8009450 <mem_cmp+0x40>
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d0eb      	beq.n	8009428 <mem_cmp+0x18>

	return r;
 8009450:	697b      	ldr	r3, [r7, #20]
}
 8009452:	4618      	mov	r0, r3
 8009454:	3724      	adds	r7, #36	; 0x24
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr

0800945e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800945e:	b480      	push	{r7}
 8009460:	b083      	sub	sp, #12
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
 8009466:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009468:	e002      	b.n	8009470 <chk_chr+0x12>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	3301      	adds	r3, #1
 800946e:	607b      	str	r3, [r7, #4]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d005      	beq.n	8009484 <chk_chr+0x26>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	461a      	mov	r2, r3
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	4293      	cmp	r3, r2
 8009482:	d1f2      	bne.n	800946a <chk_chr+0xc>
	return *str;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	781b      	ldrb	r3, [r3, #0]
}
 8009488:	4618      	mov	r0, r3
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d009      	beq.n	80094b6 <lock_fs+0x22>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	4618      	mov	r0, r3
 80094a8:	f002 fcab 	bl	800be02 <ff_req_grant>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d001      	beq.n	80094b6 <lock_fs+0x22>
 80094b2:	2301      	movs	r3, #1
 80094b4:	e000      	b.n	80094b8 <lock_fs+0x24>
 80094b6:	2300      	movs	r3, #0
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3708      	adds	r7, #8
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	460b      	mov	r3, r1
 80094ca:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d00d      	beq.n	80094ee <unlock_fs+0x2e>
 80094d2:	78fb      	ldrb	r3, [r7, #3]
 80094d4:	2b0c      	cmp	r3, #12
 80094d6:	d00a      	beq.n	80094ee <unlock_fs+0x2e>
 80094d8:	78fb      	ldrb	r3, [r7, #3]
 80094da:	2b0b      	cmp	r3, #11
 80094dc:	d007      	beq.n	80094ee <unlock_fs+0x2e>
 80094de:	78fb      	ldrb	r3, [r7, #3]
 80094e0:	2b0f      	cmp	r3, #15
 80094e2:	d004      	beq.n	80094ee <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	4618      	mov	r0, r3
 80094ea:	f002 fc9f 	bl	800be2c <ff_rel_grant>
	}
}
 80094ee:	bf00      	nop
 80094f0:	3708      	adds	r7, #8
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
	...

080094f8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b085      	sub	sp, #20
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009502:	2300      	movs	r3, #0
 8009504:	60bb      	str	r3, [r7, #8]
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	60fb      	str	r3, [r7, #12]
 800950a:	e029      	b.n	8009560 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800950c:	4a27      	ldr	r2, [pc, #156]	; (80095ac <chk_lock+0xb4>)
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	011b      	lsls	r3, r3, #4
 8009512:	4413      	add	r3, r2
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d01d      	beq.n	8009556 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800951a:	4a24      	ldr	r2, [pc, #144]	; (80095ac <chk_lock+0xb4>)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	011b      	lsls	r3, r3, #4
 8009520:	4413      	add	r3, r2
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	429a      	cmp	r2, r3
 800952a:	d116      	bne.n	800955a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800952c:	4a1f      	ldr	r2, [pc, #124]	; (80095ac <chk_lock+0xb4>)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	011b      	lsls	r3, r3, #4
 8009532:	4413      	add	r3, r2
 8009534:	3304      	adds	r3, #4
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800953c:	429a      	cmp	r2, r3
 800953e:	d10c      	bne.n	800955a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009540:	4a1a      	ldr	r2, [pc, #104]	; (80095ac <chk_lock+0xb4>)
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	011b      	lsls	r3, r3, #4
 8009546:	4413      	add	r3, r2
 8009548:	3308      	adds	r3, #8
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009550:	429a      	cmp	r2, r3
 8009552:	d102      	bne.n	800955a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009554:	e007      	b.n	8009566 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009556:	2301      	movs	r3, #1
 8009558:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	3301      	adds	r3, #1
 800955e:	60fb      	str	r3, [r7, #12]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2b01      	cmp	r3, #1
 8009564:	d9d2      	bls.n	800950c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2b02      	cmp	r3, #2
 800956a:	d109      	bne.n	8009580 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d102      	bne.n	8009578 <chk_lock+0x80>
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	2b02      	cmp	r3, #2
 8009576:	d101      	bne.n	800957c <chk_lock+0x84>
 8009578:	2300      	movs	r3, #0
 800957a:	e010      	b.n	800959e <chk_lock+0xa6>
 800957c:	2312      	movs	r3, #18
 800957e:	e00e      	b.n	800959e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d108      	bne.n	8009598 <chk_lock+0xa0>
 8009586:	4a09      	ldr	r2, [pc, #36]	; (80095ac <chk_lock+0xb4>)
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	011b      	lsls	r3, r3, #4
 800958c:	4413      	add	r3, r2
 800958e:	330c      	adds	r3, #12
 8009590:	881b      	ldrh	r3, [r3, #0]
 8009592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009596:	d101      	bne.n	800959c <chk_lock+0xa4>
 8009598:	2310      	movs	r3, #16
 800959a:	e000      	b.n	800959e <chk_lock+0xa6>
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3714      	adds	r7, #20
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop
 80095ac:	20006100 	.word	0x20006100

080095b0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80095b6:	2300      	movs	r3, #0
 80095b8:	607b      	str	r3, [r7, #4]
 80095ba:	e002      	b.n	80095c2 <enq_lock+0x12>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	3301      	adds	r3, #1
 80095c0:	607b      	str	r3, [r7, #4]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d806      	bhi.n	80095d6 <enq_lock+0x26>
 80095c8:	4a09      	ldr	r2, [pc, #36]	; (80095f0 <enq_lock+0x40>)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	011b      	lsls	r3, r3, #4
 80095ce:	4413      	add	r3, r2
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d1f2      	bne.n	80095bc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2b02      	cmp	r3, #2
 80095da:	bf14      	ite	ne
 80095dc:	2301      	movne	r3, #1
 80095de:	2300      	moveq	r3, #0
 80095e0:	b2db      	uxtb	r3, r3
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	370c      	adds	r7, #12
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr
 80095ee:	bf00      	nop
 80095f0:	20006100 	.word	0x20006100

080095f4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b085      	sub	sp, #20
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80095fe:	2300      	movs	r3, #0
 8009600:	60fb      	str	r3, [r7, #12]
 8009602:	e01f      	b.n	8009644 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009604:	4a41      	ldr	r2, [pc, #260]	; (800970c <inc_lock+0x118>)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	011b      	lsls	r3, r3, #4
 800960a:	4413      	add	r3, r2
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	429a      	cmp	r2, r3
 8009614:	d113      	bne.n	800963e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009616:	4a3d      	ldr	r2, [pc, #244]	; (800970c <inc_lock+0x118>)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	011b      	lsls	r3, r3, #4
 800961c:	4413      	add	r3, r2
 800961e:	3304      	adds	r3, #4
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009626:	429a      	cmp	r2, r3
 8009628:	d109      	bne.n	800963e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800962a:	4a38      	ldr	r2, [pc, #224]	; (800970c <inc_lock+0x118>)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	011b      	lsls	r3, r3, #4
 8009630:	4413      	add	r3, r2
 8009632:	3308      	adds	r3, #8
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800963a:	429a      	cmp	r2, r3
 800963c:	d006      	beq.n	800964c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	3301      	adds	r3, #1
 8009642:	60fb      	str	r3, [r7, #12]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2b01      	cmp	r3, #1
 8009648:	d9dc      	bls.n	8009604 <inc_lock+0x10>
 800964a:	e000      	b.n	800964e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800964c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2b02      	cmp	r3, #2
 8009652:	d132      	bne.n	80096ba <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009654:	2300      	movs	r3, #0
 8009656:	60fb      	str	r3, [r7, #12]
 8009658:	e002      	b.n	8009660 <inc_lock+0x6c>
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	3301      	adds	r3, #1
 800965e:	60fb      	str	r3, [r7, #12]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2b01      	cmp	r3, #1
 8009664:	d806      	bhi.n	8009674 <inc_lock+0x80>
 8009666:	4a29      	ldr	r2, [pc, #164]	; (800970c <inc_lock+0x118>)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	011b      	lsls	r3, r3, #4
 800966c:	4413      	add	r3, r2
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d1f2      	bne.n	800965a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2b02      	cmp	r3, #2
 8009678:	d101      	bne.n	800967e <inc_lock+0x8a>
 800967a:	2300      	movs	r3, #0
 800967c:	e040      	b.n	8009700 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	4922      	ldr	r1, [pc, #136]	; (800970c <inc_lock+0x118>)
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	011b      	lsls	r3, r3, #4
 8009688:	440b      	add	r3, r1
 800968a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	689a      	ldr	r2, [r3, #8]
 8009690:	491e      	ldr	r1, [pc, #120]	; (800970c <inc_lock+0x118>)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	011b      	lsls	r3, r3, #4
 8009696:	440b      	add	r3, r1
 8009698:	3304      	adds	r3, #4
 800969a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	695a      	ldr	r2, [r3, #20]
 80096a0:	491a      	ldr	r1, [pc, #104]	; (800970c <inc_lock+0x118>)
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	011b      	lsls	r3, r3, #4
 80096a6:	440b      	add	r3, r1
 80096a8:	3308      	adds	r3, #8
 80096aa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80096ac:	4a17      	ldr	r2, [pc, #92]	; (800970c <inc_lock+0x118>)
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	011b      	lsls	r3, r3, #4
 80096b2:	4413      	add	r3, r2
 80096b4:	330c      	adds	r3, #12
 80096b6:	2200      	movs	r2, #0
 80096b8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d009      	beq.n	80096d4 <inc_lock+0xe0>
 80096c0:	4a12      	ldr	r2, [pc, #72]	; (800970c <inc_lock+0x118>)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	011b      	lsls	r3, r3, #4
 80096c6:	4413      	add	r3, r2
 80096c8:	330c      	adds	r3, #12
 80096ca:	881b      	ldrh	r3, [r3, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d001      	beq.n	80096d4 <inc_lock+0xe0>
 80096d0:	2300      	movs	r3, #0
 80096d2:	e015      	b.n	8009700 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d108      	bne.n	80096ec <inc_lock+0xf8>
 80096da:	4a0c      	ldr	r2, [pc, #48]	; (800970c <inc_lock+0x118>)
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	011b      	lsls	r3, r3, #4
 80096e0:	4413      	add	r3, r2
 80096e2:	330c      	adds	r3, #12
 80096e4:	881b      	ldrh	r3, [r3, #0]
 80096e6:	3301      	adds	r3, #1
 80096e8:	b29a      	uxth	r2, r3
 80096ea:	e001      	b.n	80096f0 <inc_lock+0xfc>
 80096ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80096f0:	4906      	ldr	r1, [pc, #24]	; (800970c <inc_lock+0x118>)
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	011b      	lsls	r3, r3, #4
 80096f6:	440b      	add	r3, r1
 80096f8:	330c      	adds	r3, #12
 80096fa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	3301      	adds	r3, #1
}
 8009700:	4618      	mov	r0, r3
 8009702:	3714      	adds	r7, #20
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr
 800970c:	20006100 	.word	0x20006100

08009710 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009710:	b480      	push	{r7}
 8009712:	b085      	sub	sp, #20
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	3b01      	subs	r3, #1
 800971c:	607b      	str	r3, [r7, #4]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2b01      	cmp	r3, #1
 8009722:	d825      	bhi.n	8009770 <dec_lock+0x60>
		n = Files[i].ctr;
 8009724:	4a17      	ldr	r2, [pc, #92]	; (8009784 <dec_lock+0x74>)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	011b      	lsls	r3, r3, #4
 800972a:	4413      	add	r3, r2
 800972c:	330c      	adds	r3, #12
 800972e:	881b      	ldrh	r3, [r3, #0]
 8009730:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009732:	89fb      	ldrh	r3, [r7, #14]
 8009734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009738:	d101      	bne.n	800973e <dec_lock+0x2e>
 800973a:	2300      	movs	r3, #0
 800973c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800973e:	89fb      	ldrh	r3, [r7, #14]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d002      	beq.n	800974a <dec_lock+0x3a>
 8009744:	89fb      	ldrh	r3, [r7, #14]
 8009746:	3b01      	subs	r3, #1
 8009748:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800974a:	4a0e      	ldr	r2, [pc, #56]	; (8009784 <dec_lock+0x74>)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	011b      	lsls	r3, r3, #4
 8009750:	4413      	add	r3, r2
 8009752:	330c      	adds	r3, #12
 8009754:	89fa      	ldrh	r2, [r7, #14]
 8009756:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009758:	89fb      	ldrh	r3, [r7, #14]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d105      	bne.n	800976a <dec_lock+0x5a>
 800975e:	4a09      	ldr	r2, [pc, #36]	; (8009784 <dec_lock+0x74>)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	011b      	lsls	r3, r3, #4
 8009764:	4413      	add	r3, r2
 8009766:	2200      	movs	r2, #0
 8009768:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800976a:	2300      	movs	r3, #0
 800976c:	737b      	strb	r3, [r7, #13]
 800976e:	e001      	b.n	8009774 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009770:	2302      	movs	r3, #2
 8009772:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009774:	7b7b      	ldrb	r3, [r7, #13]
}
 8009776:	4618      	mov	r0, r3
 8009778:	3714      	adds	r7, #20
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr
 8009782:	bf00      	nop
 8009784:	20006100 	.word	0x20006100

08009788 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009788:	b480      	push	{r7}
 800978a:	b085      	sub	sp, #20
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009790:	2300      	movs	r3, #0
 8009792:	60fb      	str	r3, [r7, #12]
 8009794:	e010      	b.n	80097b8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009796:	4a0d      	ldr	r2, [pc, #52]	; (80097cc <clear_lock+0x44>)
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	011b      	lsls	r3, r3, #4
 800979c:	4413      	add	r3, r2
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d105      	bne.n	80097b2 <clear_lock+0x2a>
 80097a6:	4a09      	ldr	r2, [pc, #36]	; (80097cc <clear_lock+0x44>)
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	011b      	lsls	r3, r3, #4
 80097ac:	4413      	add	r3, r2
 80097ae:	2200      	movs	r2, #0
 80097b0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	3301      	adds	r3, #1
 80097b6:	60fb      	str	r3, [r7, #12]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d9eb      	bls.n	8009796 <clear_lock+0xe>
	}
}
 80097be:	bf00      	nop
 80097c0:	bf00      	nop
 80097c2:	3714      	adds	r7, #20
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr
 80097cc:	20006100 	.word	0x20006100

080097d0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b086      	sub	sp, #24
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80097d8:	2300      	movs	r3, #0
 80097da:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	78db      	ldrb	r3, [r3, #3]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d034      	beq.n	800984e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097e8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	7858      	ldrb	r0, [r3, #1]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80097f4:	2301      	movs	r3, #1
 80097f6:	697a      	ldr	r2, [r7, #20]
 80097f8:	f7ff fd0e 	bl	8009218 <disk_write>
 80097fc:	4603      	mov	r3, r0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d002      	beq.n	8009808 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009802:	2301      	movs	r3, #1
 8009804:	73fb      	strb	r3, [r7, #15]
 8009806:	e022      	b.n	800984e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009812:	697a      	ldr	r2, [r7, #20]
 8009814:	1ad2      	subs	r2, r2, r3
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	69db      	ldr	r3, [r3, #28]
 800981a:	429a      	cmp	r2, r3
 800981c:	d217      	bcs.n	800984e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	789b      	ldrb	r3, [r3, #2]
 8009822:	613b      	str	r3, [r7, #16]
 8009824:	e010      	b.n	8009848 <sync_window+0x78>
					wsect += fs->fsize;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	69db      	ldr	r3, [r3, #28]
 800982a:	697a      	ldr	r2, [r7, #20]
 800982c:	4413      	add	r3, r2
 800982e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	7858      	ldrb	r0, [r3, #1]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800983a:	2301      	movs	r3, #1
 800983c:	697a      	ldr	r2, [r7, #20]
 800983e:	f7ff fceb 	bl	8009218 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	3b01      	subs	r3, #1
 8009846:	613b      	str	r3, [r7, #16]
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	2b01      	cmp	r3, #1
 800984c:	d8eb      	bhi.n	8009826 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800984e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009850:	4618      	mov	r0, r3
 8009852:	3718      	adds	r7, #24
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009862:	2300      	movs	r3, #0
 8009864:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800986a:	683a      	ldr	r2, [r7, #0]
 800986c:	429a      	cmp	r2, r3
 800986e:	d01b      	beq.n	80098a8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f7ff ffad 	bl	80097d0 <sync_window>
 8009876:	4603      	mov	r3, r0
 8009878:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800987a:	7bfb      	ldrb	r3, [r7, #15]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d113      	bne.n	80098a8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	7858      	ldrb	r0, [r3, #1]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800988a:	2301      	movs	r3, #1
 800988c:	683a      	ldr	r2, [r7, #0]
 800988e:	f7ff fca3 	bl	80091d8 <disk_read>
 8009892:	4603      	mov	r3, r0
 8009894:	2b00      	cmp	r3, #0
 8009896:	d004      	beq.n	80098a2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009898:	f04f 33ff 	mov.w	r3, #4294967295
 800989c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800989e:	2301      	movs	r3, #1
 80098a0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	683a      	ldr	r2, [r7, #0]
 80098a6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80098a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
	...

080098b4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f7ff ff87 	bl	80097d0 <sync_window>
 80098c2:	4603      	mov	r3, r0
 80098c4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80098c6:	7bfb      	ldrb	r3, [r7, #15]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d158      	bne.n	800997e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	2b03      	cmp	r3, #3
 80098d2:	d148      	bne.n	8009966 <sync_fs+0xb2>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	791b      	ldrb	r3, [r3, #4]
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d144      	bne.n	8009966 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	3334      	adds	r3, #52	; 0x34
 80098e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098e4:	2100      	movs	r1, #0
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7ff fd77 	bl	80093da <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	3334      	adds	r3, #52	; 0x34
 80098f0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80098f4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7ff fd06 	bl	800930a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	3334      	adds	r3, #52	; 0x34
 8009902:	4921      	ldr	r1, [pc, #132]	; (8009988 <sync_fs+0xd4>)
 8009904:	4618      	mov	r0, r3
 8009906:	f7ff fd1b 	bl	8009340 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	3334      	adds	r3, #52	; 0x34
 800990e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009912:	491e      	ldr	r1, [pc, #120]	; (800998c <sync_fs+0xd8>)
 8009914:	4618      	mov	r0, r3
 8009916:	f7ff fd13 	bl	8009340 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	3334      	adds	r3, #52	; 0x34
 800991e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	695b      	ldr	r3, [r3, #20]
 8009926:	4619      	mov	r1, r3
 8009928:	4610      	mov	r0, r2
 800992a:	f7ff fd09 	bl	8009340 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	3334      	adds	r3, #52	; 0x34
 8009932:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	691b      	ldr	r3, [r3, #16]
 800993a:	4619      	mov	r1, r3
 800993c:	4610      	mov	r0, r2
 800993e:	f7ff fcff 	bl	8009340 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6a1b      	ldr	r3, [r3, #32]
 8009946:	1c5a      	adds	r2, r3, #1
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	7858      	ldrb	r0, [r3, #1]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800995a:	2301      	movs	r3, #1
 800995c:	f7ff fc5c 	bl	8009218 <disk_write>
			fs->fsi_flag = 0;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2200      	movs	r2, #0
 8009964:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	785b      	ldrb	r3, [r3, #1]
 800996a:	2200      	movs	r2, #0
 800996c:	2100      	movs	r1, #0
 800996e:	4618      	mov	r0, r3
 8009970:	f7ff fc72 	bl	8009258 <disk_ioctl>
 8009974:	4603      	mov	r3, r0
 8009976:	2b00      	cmp	r3, #0
 8009978:	d001      	beq.n	800997e <sync_fs+0xca>
 800997a:	2301      	movs	r3, #1
 800997c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800997e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009980:	4618      	mov	r0, r3
 8009982:	3710      	adds	r7, #16
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	41615252 	.word	0x41615252
 800998c:	61417272 	.word	0x61417272

08009990 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009990:	b480      	push	{r7}
 8009992:	b083      	sub	sp, #12
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	3b02      	subs	r3, #2
 800999e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	699b      	ldr	r3, [r3, #24]
 80099a4:	3b02      	subs	r3, #2
 80099a6:	683a      	ldr	r2, [r7, #0]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d301      	bcc.n	80099b0 <clust2sect+0x20>
 80099ac:	2300      	movs	r3, #0
 80099ae:	e008      	b.n	80099c2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	895b      	ldrh	r3, [r3, #10]
 80099b4:	461a      	mov	r2, r3
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	fb03 f202 	mul.w	r2, r3, r2
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c0:	4413      	add	r3, r2
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	370c      	adds	r7, #12
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr

080099ce <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b086      	sub	sp, #24
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
 80099d6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d904      	bls.n	80099ee <get_fat+0x20>
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	699b      	ldr	r3, [r3, #24]
 80099e8:	683a      	ldr	r2, [r7, #0]
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d302      	bcc.n	80099f4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80099ee:	2301      	movs	r3, #1
 80099f0:	617b      	str	r3, [r7, #20]
 80099f2:	e08f      	b.n	8009b14 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80099f4:	f04f 33ff 	mov.w	r3, #4294967295
 80099f8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	2b03      	cmp	r3, #3
 8009a00:	d062      	beq.n	8009ac8 <get_fat+0xfa>
 8009a02:	2b03      	cmp	r3, #3
 8009a04:	dc7c      	bgt.n	8009b00 <get_fat+0x132>
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d002      	beq.n	8009a10 <get_fat+0x42>
 8009a0a:	2b02      	cmp	r3, #2
 8009a0c:	d042      	beq.n	8009a94 <get_fat+0xc6>
 8009a0e:	e077      	b.n	8009b00 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	60fb      	str	r3, [r7, #12]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	085b      	lsrs	r3, r3, #1
 8009a18:	68fa      	ldr	r2, [r7, #12]
 8009a1a:	4413      	add	r3, r2
 8009a1c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	0a5b      	lsrs	r3, r3, #9
 8009a26:	4413      	add	r3, r2
 8009a28:	4619      	mov	r1, r3
 8009a2a:	6938      	ldr	r0, [r7, #16]
 8009a2c:	f7ff ff14 	bl	8009858 <move_window>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d167      	bne.n	8009b06 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	1c5a      	adds	r2, r3, #1
 8009a3a:	60fa      	str	r2, [r7, #12]
 8009a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a40:	693a      	ldr	r2, [r7, #16]
 8009a42:	4413      	add	r3, r2
 8009a44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009a48:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	0a5b      	lsrs	r3, r3, #9
 8009a52:	4413      	add	r3, r2
 8009a54:	4619      	mov	r1, r3
 8009a56:	6938      	ldr	r0, [r7, #16]
 8009a58:	f7ff fefe 	bl	8009858 <move_window>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d153      	bne.n	8009b0a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a68:	693a      	ldr	r2, [r7, #16]
 8009a6a:	4413      	add	r3, r2
 8009a6c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009a70:	021b      	lsls	r3, r3, #8
 8009a72:	461a      	mov	r2, r3
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	4313      	orrs	r3, r2
 8009a78:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	f003 0301 	and.w	r3, r3, #1
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d002      	beq.n	8009a8a <get_fat+0xbc>
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	091b      	lsrs	r3, r3, #4
 8009a88:	e002      	b.n	8009a90 <get_fat+0xc2>
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a90:	617b      	str	r3, [r7, #20]
			break;
 8009a92:	e03f      	b.n	8009b14 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	0a1b      	lsrs	r3, r3, #8
 8009a9c:	4413      	add	r3, r2
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	6938      	ldr	r0, [r7, #16]
 8009aa2:	f7ff fed9 	bl	8009858 <move_window>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d130      	bne.n	8009b0e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	005b      	lsls	r3, r3, #1
 8009ab6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009aba:	4413      	add	r3, r2
 8009abc:	4618      	mov	r0, r3
 8009abe:	f7ff fbe9 	bl	8009294 <ld_word>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	617b      	str	r3, [r7, #20]
			break;
 8009ac6:	e025      	b.n	8009b14 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	09db      	lsrs	r3, r3, #7
 8009ad0:	4413      	add	r3, r2
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	6938      	ldr	r0, [r7, #16]
 8009ad6:	f7ff febf 	bl	8009858 <move_window>
 8009ada:	4603      	mov	r3, r0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d118      	bne.n	8009b12 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009aee:	4413      	add	r3, r2
 8009af0:	4618      	mov	r0, r3
 8009af2:	f7ff fbe7 	bl	80092c4 <ld_dword>
 8009af6:	4603      	mov	r3, r0
 8009af8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009afc:	617b      	str	r3, [r7, #20]
			break;
 8009afe:	e009      	b.n	8009b14 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009b00:	2301      	movs	r3, #1
 8009b02:	617b      	str	r3, [r7, #20]
 8009b04:	e006      	b.n	8009b14 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009b06:	bf00      	nop
 8009b08:	e004      	b.n	8009b14 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009b0a:	bf00      	nop
 8009b0c:	e002      	b.n	8009b14 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009b0e:	bf00      	nop
 8009b10:	e000      	b.n	8009b14 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009b12:	bf00      	nop
		}
	}

	return val;
 8009b14:	697b      	ldr	r3, [r7, #20]
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3718      	adds	r7, #24
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}

08009b1e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009b1e:	b590      	push	{r4, r7, lr}
 8009b20:	b089      	sub	sp, #36	; 0x24
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	60f8      	str	r0, [r7, #12]
 8009b26:	60b9      	str	r1, [r7, #8]
 8009b28:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009b2a:	2302      	movs	r3, #2
 8009b2c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	f240 80d9 	bls.w	8009ce8 <put_fat+0x1ca>
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	699b      	ldr	r3, [r3, #24]
 8009b3a:	68ba      	ldr	r2, [r7, #8]
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	f080 80d3 	bcs.w	8009ce8 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	2b03      	cmp	r3, #3
 8009b48:	f000 8096 	beq.w	8009c78 <put_fat+0x15a>
 8009b4c:	2b03      	cmp	r3, #3
 8009b4e:	f300 80cb 	bgt.w	8009ce8 <put_fat+0x1ca>
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d002      	beq.n	8009b5c <put_fat+0x3e>
 8009b56:	2b02      	cmp	r3, #2
 8009b58:	d06e      	beq.n	8009c38 <put_fat+0x11a>
 8009b5a:	e0c5      	b.n	8009ce8 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	61bb      	str	r3, [r7, #24]
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	085b      	lsrs	r3, r3, #1
 8009b64:	69ba      	ldr	r2, [r7, #24]
 8009b66:	4413      	add	r3, r2
 8009b68:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b6e:	69bb      	ldr	r3, [r7, #24]
 8009b70:	0a5b      	lsrs	r3, r3, #9
 8009b72:	4413      	add	r3, r2
 8009b74:	4619      	mov	r1, r3
 8009b76:	68f8      	ldr	r0, [r7, #12]
 8009b78:	f7ff fe6e 	bl	8009858 <move_window>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009b80:	7ffb      	ldrb	r3, [r7, #31]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	f040 80a9 	bne.w	8009cda <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009b8e:	69bb      	ldr	r3, [r7, #24]
 8009b90:	1c59      	adds	r1, r3, #1
 8009b92:	61b9      	str	r1, [r7, #24]
 8009b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b98:	4413      	add	r3, r2
 8009b9a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	f003 0301 	and.w	r3, r3, #1
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d00d      	beq.n	8009bc2 <put_fat+0xa4>
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	b25b      	sxtb	r3, r3
 8009bac:	f003 030f 	and.w	r3, r3, #15
 8009bb0:	b25a      	sxtb	r2, r3
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	011b      	lsls	r3, r3, #4
 8009bb8:	b25b      	sxtb	r3, r3
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	b25b      	sxtb	r3, r3
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	e001      	b.n	8009bc6 <put_fat+0xa8>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	697a      	ldr	r2, [r7, #20]
 8009bc8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	0a5b      	lsrs	r3, r3, #9
 8009bd8:	4413      	add	r3, r2
 8009bda:	4619      	mov	r1, r3
 8009bdc:	68f8      	ldr	r0, [r7, #12]
 8009bde:	f7ff fe3b 	bl	8009858 <move_window>
 8009be2:	4603      	mov	r3, r0
 8009be4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009be6:	7ffb      	ldrb	r3, [r7, #31]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d178      	bne.n	8009cde <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bf8:	4413      	add	r3, r2
 8009bfa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	f003 0301 	and.w	r3, r3, #1
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d003      	beq.n	8009c0e <put_fat+0xf0>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	091b      	lsrs	r3, r3, #4
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	e00e      	b.n	8009c2c <put_fat+0x10e>
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	b25b      	sxtb	r3, r3
 8009c14:	f023 030f 	bic.w	r3, r3, #15
 8009c18:	b25a      	sxtb	r2, r3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	0a1b      	lsrs	r3, r3, #8
 8009c1e:	b25b      	sxtb	r3, r3
 8009c20:	f003 030f 	and.w	r3, r3, #15
 8009c24:	b25b      	sxtb	r3, r3
 8009c26:	4313      	orrs	r3, r2
 8009c28:	b25b      	sxtb	r3, r3
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	697a      	ldr	r2, [r7, #20]
 8009c2e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2201      	movs	r2, #1
 8009c34:	70da      	strb	r2, [r3, #3]
			break;
 8009c36:	e057      	b.n	8009ce8 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	0a1b      	lsrs	r3, r3, #8
 8009c40:	4413      	add	r3, r2
 8009c42:	4619      	mov	r1, r3
 8009c44:	68f8      	ldr	r0, [r7, #12]
 8009c46:	f7ff fe07 	bl	8009858 <move_window>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009c4e:	7ffb      	ldrb	r3, [r7, #31]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d146      	bne.n	8009ce2 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	005b      	lsls	r3, r3, #1
 8009c5e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009c62:	4413      	add	r3, r2
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	b292      	uxth	r2, r2
 8009c68:	4611      	mov	r1, r2
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7ff fb4d 	bl	800930a <st_word>
			fs->wflag = 1;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2201      	movs	r2, #1
 8009c74:	70da      	strb	r2, [r3, #3]
			break;
 8009c76:	e037      	b.n	8009ce8 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	09db      	lsrs	r3, r3, #7
 8009c80:	4413      	add	r3, r2
 8009c82:	4619      	mov	r1, r3
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	f7ff fde7 	bl	8009858 <move_window>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009c8e:	7ffb      	ldrb	r3, [r7, #31]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d128      	bne.n	8009ce6 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009ca8:	4413      	add	r3, r2
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7ff fb0a 	bl	80092c4 <ld_dword>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009cb6:	4323      	orrs	r3, r4
 8009cb8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009cc8:	4413      	add	r3, r2
 8009cca:	6879      	ldr	r1, [r7, #4]
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f7ff fb37 	bl	8009340 <st_dword>
			fs->wflag = 1;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	70da      	strb	r2, [r3, #3]
			break;
 8009cd8:	e006      	b.n	8009ce8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009cda:	bf00      	nop
 8009cdc:	e004      	b.n	8009ce8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009cde:	bf00      	nop
 8009ce0:	e002      	b.n	8009ce8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009ce2:	bf00      	nop
 8009ce4:	e000      	b.n	8009ce8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009ce6:	bf00      	nop
		}
	}
	return res;
 8009ce8:	7ffb      	ldrb	r3, [r7, #31]
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3724      	adds	r7, #36	; 0x24
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd90      	pop	{r4, r7, pc}

08009cf2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b088      	sub	sp, #32
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	60f8      	str	r0, [r7, #12]
 8009cfa:	60b9      	str	r1, [r7, #8]
 8009cfc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d904      	bls.n	8009d18 <remove_chain+0x26>
 8009d0e:	69bb      	ldr	r3, [r7, #24]
 8009d10:	699b      	ldr	r3, [r3, #24]
 8009d12:	68ba      	ldr	r2, [r7, #8]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d301      	bcc.n	8009d1c <remove_chain+0x2a>
 8009d18:	2302      	movs	r3, #2
 8009d1a:	e04b      	b.n	8009db4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00c      	beq.n	8009d3c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009d22:	f04f 32ff 	mov.w	r2, #4294967295
 8009d26:	6879      	ldr	r1, [r7, #4]
 8009d28:	69b8      	ldr	r0, [r7, #24]
 8009d2a:	f7ff fef8 	bl	8009b1e <put_fat>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009d32:	7ffb      	ldrb	r3, [r7, #31]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d001      	beq.n	8009d3c <remove_chain+0x4a>
 8009d38:	7ffb      	ldrb	r3, [r7, #31]
 8009d3a:	e03b      	b.n	8009db4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009d3c:	68b9      	ldr	r1, [r7, #8]
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	f7ff fe45 	bl	80099ce <get_fat>
 8009d44:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d031      	beq.n	8009db0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d101      	bne.n	8009d56 <remove_chain+0x64>
 8009d52:	2302      	movs	r3, #2
 8009d54:	e02e      	b.n	8009db4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d5c:	d101      	bne.n	8009d62 <remove_chain+0x70>
 8009d5e:	2301      	movs	r3, #1
 8009d60:	e028      	b.n	8009db4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009d62:	2200      	movs	r2, #0
 8009d64:	68b9      	ldr	r1, [r7, #8]
 8009d66:	69b8      	ldr	r0, [r7, #24]
 8009d68:	f7ff fed9 	bl	8009b1e <put_fat>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009d70:	7ffb      	ldrb	r3, [r7, #31]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d001      	beq.n	8009d7a <remove_chain+0x88>
 8009d76:	7ffb      	ldrb	r3, [r7, #31]
 8009d78:	e01c      	b.n	8009db4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	695a      	ldr	r2, [r3, #20]
 8009d7e:	69bb      	ldr	r3, [r7, #24]
 8009d80:	699b      	ldr	r3, [r3, #24]
 8009d82:	3b02      	subs	r3, #2
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d20b      	bcs.n	8009da0 <remove_chain+0xae>
			fs->free_clst++;
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	695b      	ldr	r3, [r3, #20]
 8009d8c:	1c5a      	adds	r2, r3, #1
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8009d92:	69bb      	ldr	r3, [r7, #24]
 8009d94:	791b      	ldrb	r3, [r3, #4]
 8009d96:	f043 0301 	orr.w	r3, r3, #1
 8009d9a:	b2da      	uxtb	r2, r3
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009da4:	69bb      	ldr	r3, [r7, #24]
 8009da6:	699b      	ldr	r3, [r3, #24]
 8009da8:	68ba      	ldr	r2, [r7, #8]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d3c6      	bcc.n	8009d3c <remove_chain+0x4a>
 8009dae:	e000      	b.n	8009db2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009db0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009db2:	2300      	movs	r3, #0
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3720      	adds	r7, #32
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b088      	sub	sp, #32
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d10d      	bne.n	8009dee <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	691b      	ldr	r3, [r3, #16]
 8009dd6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d004      	beq.n	8009de8 <create_chain+0x2c>
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	699b      	ldr	r3, [r3, #24]
 8009de2:	69ba      	ldr	r2, [r7, #24]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d31b      	bcc.n	8009e20 <create_chain+0x64>
 8009de8:	2301      	movs	r3, #1
 8009dea:	61bb      	str	r3, [r7, #24]
 8009dec:	e018      	b.n	8009e20 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009dee:	6839      	ldr	r1, [r7, #0]
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f7ff fdec 	bl	80099ce <get_fat>
 8009df6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d801      	bhi.n	8009e02 <create_chain+0x46>
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e070      	b.n	8009ee4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e08:	d101      	bne.n	8009e0e <create_chain+0x52>
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	e06a      	b.n	8009ee4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	699b      	ldr	r3, [r3, #24]
 8009e12:	68fa      	ldr	r2, [r7, #12]
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d201      	bcs.n	8009e1c <create_chain+0x60>
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	e063      	b.n	8009ee4 <create_chain+0x128>
		scl = clst;
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009e20:	69bb      	ldr	r3, [r7, #24]
 8009e22:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009e24:	69fb      	ldr	r3, [r7, #28]
 8009e26:	3301      	adds	r3, #1
 8009e28:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	699b      	ldr	r3, [r3, #24]
 8009e2e:	69fa      	ldr	r2, [r7, #28]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d307      	bcc.n	8009e44 <create_chain+0x88>
				ncl = 2;
 8009e34:	2302      	movs	r3, #2
 8009e36:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009e38:	69fa      	ldr	r2, [r7, #28]
 8009e3a:	69bb      	ldr	r3, [r7, #24]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d901      	bls.n	8009e44 <create_chain+0x88>
 8009e40:	2300      	movs	r3, #0
 8009e42:	e04f      	b.n	8009ee4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009e44:	69f9      	ldr	r1, [r7, #28]
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f7ff fdc1 	bl	80099ce <get_fat>
 8009e4c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d00e      	beq.n	8009e72 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d003      	beq.n	8009e62 <create_chain+0xa6>
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e60:	d101      	bne.n	8009e66 <create_chain+0xaa>
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	e03e      	b.n	8009ee4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009e66:	69fa      	ldr	r2, [r7, #28]
 8009e68:	69bb      	ldr	r3, [r7, #24]
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d1da      	bne.n	8009e24 <create_chain+0x68>
 8009e6e:	2300      	movs	r3, #0
 8009e70:	e038      	b.n	8009ee4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009e72:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009e74:	f04f 32ff 	mov.w	r2, #4294967295
 8009e78:	69f9      	ldr	r1, [r7, #28]
 8009e7a:	6938      	ldr	r0, [r7, #16]
 8009e7c:	f7ff fe4f 	bl	8009b1e <put_fat>
 8009e80:	4603      	mov	r3, r0
 8009e82:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009e84:	7dfb      	ldrb	r3, [r7, #23]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d109      	bne.n	8009e9e <create_chain+0xe2>
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d006      	beq.n	8009e9e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009e90:	69fa      	ldr	r2, [r7, #28]
 8009e92:	6839      	ldr	r1, [r7, #0]
 8009e94:	6938      	ldr	r0, [r7, #16]
 8009e96:	f7ff fe42 	bl	8009b1e <put_fat>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009e9e:	7dfb      	ldrb	r3, [r7, #23]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d116      	bne.n	8009ed2 <create_chain+0x116>
		fs->last_clst = ncl;
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	69fa      	ldr	r2, [r7, #28]
 8009ea8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	695a      	ldr	r2, [r3, #20]
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	699b      	ldr	r3, [r3, #24]
 8009eb2:	3b02      	subs	r3, #2
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d804      	bhi.n	8009ec2 <create_chain+0x106>
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	695b      	ldr	r3, [r3, #20]
 8009ebc:	1e5a      	subs	r2, r3, #1
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	791b      	ldrb	r3, [r3, #4]
 8009ec6:	f043 0301 	orr.w	r3, r3, #1
 8009eca:	b2da      	uxtb	r2, r3
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	711a      	strb	r2, [r3, #4]
 8009ed0:	e007      	b.n	8009ee2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009ed2:	7dfb      	ldrb	r3, [r7, #23]
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	d102      	bne.n	8009ede <create_chain+0x122>
 8009ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8009edc:	e000      	b.n	8009ee0 <create_chain+0x124>
 8009ede:	2301      	movs	r3, #1
 8009ee0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009ee2:	69fb      	ldr	r3, [r7, #28]
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3720      	adds	r7, #32
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b087      	sub	sp, #28
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f00:	3304      	adds	r3, #4
 8009f02:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	0a5b      	lsrs	r3, r3, #9
 8009f08:	68fa      	ldr	r2, [r7, #12]
 8009f0a:	8952      	ldrh	r2, [r2, #10]
 8009f0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f10:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	1d1a      	adds	r2, r3, #4
 8009f16:	613a      	str	r2, [r7, #16]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d101      	bne.n	8009f26 <clmt_clust+0x3a>
 8009f22:	2300      	movs	r3, #0
 8009f24:	e010      	b.n	8009f48 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009f26:	697a      	ldr	r2, [r7, #20]
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d307      	bcc.n	8009f3e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009f2e:	697a      	ldr	r2, [r7, #20]
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	1ad3      	subs	r3, r2, r3
 8009f34:	617b      	str	r3, [r7, #20]
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	3304      	adds	r3, #4
 8009f3a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009f3c:	e7e9      	b.n	8009f12 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009f3e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	4413      	add	r3, r2
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	371c      	adds	r7, #28
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b086      	sub	sp, #24
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f6a:	d204      	bcs.n	8009f76 <dir_sdi+0x22>
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	f003 031f 	and.w	r3, r3, #31
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d001      	beq.n	8009f7a <dir_sdi+0x26>
		return FR_INT_ERR;
 8009f76:	2302      	movs	r3, #2
 8009f78:	e063      	b.n	800a042 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	683a      	ldr	r2, [r7, #0]
 8009f7e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	689b      	ldr	r3, [r3, #8]
 8009f84:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d106      	bne.n	8009f9a <dir_sdi+0x46>
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	2b02      	cmp	r3, #2
 8009f92:	d902      	bls.n	8009f9a <dir_sdi+0x46>
		clst = fs->dirbase;
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f98:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d10c      	bne.n	8009fba <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	095b      	lsrs	r3, r3, #5
 8009fa4:	693a      	ldr	r2, [r7, #16]
 8009fa6:	8912      	ldrh	r2, [r2, #8]
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d301      	bcc.n	8009fb0 <dir_sdi+0x5c>
 8009fac:	2302      	movs	r3, #2
 8009fae:	e048      	b.n	800a042 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	61da      	str	r2, [r3, #28]
 8009fb8:	e029      	b.n	800a00e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	895b      	ldrh	r3, [r3, #10]
 8009fbe:	025b      	lsls	r3, r3, #9
 8009fc0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009fc2:	e019      	b.n	8009ff8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6979      	ldr	r1, [r7, #20]
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7ff fd00 	bl	80099ce <get_fat>
 8009fce:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fd6:	d101      	bne.n	8009fdc <dir_sdi+0x88>
 8009fd8:	2301      	movs	r3, #1
 8009fda:	e032      	b.n	800a042 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d904      	bls.n	8009fec <dir_sdi+0x98>
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	699b      	ldr	r3, [r3, #24]
 8009fe6:	697a      	ldr	r2, [r7, #20]
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d301      	bcc.n	8009ff0 <dir_sdi+0x9c>
 8009fec:	2302      	movs	r3, #2
 8009fee:	e028      	b.n	800a042 <dir_sdi+0xee>
			ofs -= csz;
 8009ff0:	683a      	ldr	r2, [r7, #0]
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	1ad3      	subs	r3, r2, r3
 8009ff6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009ff8:	683a      	ldr	r2, [r7, #0]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d2e1      	bcs.n	8009fc4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a000:	6979      	ldr	r1, [r7, #20]
 800a002:	6938      	ldr	r0, [r7, #16]
 800a004:	f7ff fcc4 	bl	8009990 <clust2sect>
 800a008:	4602      	mov	r2, r0
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	697a      	ldr	r2, [r7, #20]
 800a012:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	69db      	ldr	r3, [r3, #28]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d101      	bne.n	800a020 <dir_sdi+0xcc>
 800a01c:	2302      	movs	r3, #2
 800a01e:	e010      	b.n	800a042 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	69da      	ldr	r2, [r3, #28]
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	0a5b      	lsrs	r3, r3, #9
 800a028:	441a      	add	r2, r3
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a03a:	441a      	add	r2, r3
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3718      	adds	r7, #24
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b086      	sub	sp, #24
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
 800a052:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	695b      	ldr	r3, [r3, #20]
 800a05e:	3320      	adds	r3, #32
 800a060:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	69db      	ldr	r3, [r3, #28]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d003      	beq.n	800a072 <dir_next+0x28>
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a070:	d301      	bcc.n	800a076 <dir_next+0x2c>
 800a072:	2304      	movs	r3, #4
 800a074:	e0aa      	b.n	800a1cc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	f040 8098 	bne.w	800a1b2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	69db      	ldr	r3, [r3, #28]
 800a086:	1c5a      	adds	r2, r3, #1
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	699b      	ldr	r3, [r3, #24]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d10b      	bne.n	800a0ac <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	095b      	lsrs	r3, r3, #5
 800a098:	68fa      	ldr	r2, [r7, #12]
 800a09a:	8912      	ldrh	r2, [r2, #8]
 800a09c:	4293      	cmp	r3, r2
 800a09e:	f0c0 8088 	bcc.w	800a1b2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	61da      	str	r2, [r3, #28]
 800a0a8:	2304      	movs	r3, #4
 800a0aa:	e08f      	b.n	800a1cc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	0a5b      	lsrs	r3, r3, #9
 800a0b0:	68fa      	ldr	r2, [r7, #12]
 800a0b2:	8952      	ldrh	r2, [r2, #10]
 800a0b4:	3a01      	subs	r2, #1
 800a0b6:	4013      	ands	r3, r2
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d17a      	bne.n	800a1b2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	699b      	ldr	r3, [r3, #24]
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	4610      	mov	r0, r2
 800a0c6:	f7ff fc82 	bl	80099ce <get_fat>
 800a0ca:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d801      	bhi.n	800a0d6 <dir_next+0x8c>
 800a0d2:	2302      	movs	r3, #2
 800a0d4:	e07a      	b.n	800a1cc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0dc:	d101      	bne.n	800a0e2 <dir_next+0x98>
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e074      	b.n	800a1cc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	699b      	ldr	r3, [r3, #24]
 800a0e6:	697a      	ldr	r2, [r7, #20]
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d358      	bcc.n	800a19e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d104      	bne.n	800a0fc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	61da      	str	r2, [r3, #28]
 800a0f8:	2304      	movs	r3, #4
 800a0fa:	e067      	b.n	800a1cc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	699b      	ldr	r3, [r3, #24]
 800a102:	4619      	mov	r1, r3
 800a104:	4610      	mov	r0, r2
 800a106:	f7ff fe59 	bl	8009dbc <create_chain>
 800a10a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d101      	bne.n	800a116 <dir_next+0xcc>
 800a112:	2307      	movs	r3, #7
 800a114:	e05a      	b.n	800a1cc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d101      	bne.n	800a120 <dir_next+0xd6>
 800a11c:	2302      	movs	r3, #2
 800a11e:	e055      	b.n	800a1cc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a126:	d101      	bne.n	800a12c <dir_next+0xe2>
 800a128:	2301      	movs	r3, #1
 800a12a:	e04f      	b.n	800a1cc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a12c:	68f8      	ldr	r0, [r7, #12]
 800a12e:	f7ff fb4f 	bl	80097d0 <sync_window>
 800a132:	4603      	mov	r3, r0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d001      	beq.n	800a13c <dir_next+0xf2>
 800a138:	2301      	movs	r3, #1
 800a13a:	e047      	b.n	800a1cc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	3334      	adds	r3, #52	; 0x34
 800a140:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a144:	2100      	movs	r1, #0
 800a146:	4618      	mov	r0, r3
 800a148:	f7ff f947 	bl	80093da <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a14c:	2300      	movs	r3, #0
 800a14e:	613b      	str	r3, [r7, #16]
 800a150:	6979      	ldr	r1, [r7, #20]
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	f7ff fc1c 	bl	8009990 <clust2sect>
 800a158:	4602      	mov	r2, r0
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	631a      	str	r2, [r3, #48]	; 0x30
 800a15e:	e012      	b.n	800a186 <dir_next+0x13c>
						fs->wflag = 1;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2201      	movs	r2, #1
 800a164:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a166:	68f8      	ldr	r0, [r7, #12]
 800a168:	f7ff fb32 	bl	80097d0 <sync_window>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d001      	beq.n	800a176 <dir_next+0x12c>
 800a172:	2301      	movs	r3, #1
 800a174:	e02a      	b.n	800a1cc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	3301      	adds	r3, #1
 800a17a:	613b      	str	r3, [r7, #16]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a180:	1c5a      	adds	r2, r3, #1
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	631a      	str	r2, [r3, #48]	; 0x30
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	895b      	ldrh	r3, [r3, #10]
 800a18a:	461a      	mov	r2, r3
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	4293      	cmp	r3, r2
 800a190:	d3e6      	bcc.n	800a160 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	1ad2      	subs	r2, r2, r3
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	697a      	ldr	r2, [r7, #20]
 800a1a2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a1a4:	6979      	ldr	r1, [r7, #20]
 800a1a6:	68f8      	ldr	r0, [r7, #12]
 800a1a8:	f7ff fbf2 	bl	8009990 <clust2sect>
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	68ba      	ldr	r2, [r7, #8]
 800a1b6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1c4:	441a      	add	r2, r3
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a1ca:	2300      	movs	r3, #0
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3718      	adds	r7, #24
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b086      	sub	sp, #24
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a1e4:	2100      	movs	r1, #0
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f7ff feb4 	bl	8009f54 <dir_sdi>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a1f0:	7dfb      	ldrb	r3, [r7, #23]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d12b      	bne.n	800a24e <dir_alloc+0x7a>
		n = 0;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	69db      	ldr	r3, [r3, #28]
 800a1fe:	4619      	mov	r1, r3
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f7ff fb29 	bl	8009858 <move_window>
 800a206:	4603      	mov	r3, r0
 800a208:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a20a:	7dfb      	ldrb	r3, [r7, #23]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d11d      	bne.n	800a24c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6a1b      	ldr	r3, [r3, #32]
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	2be5      	cmp	r3, #229	; 0xe5
 800a218:	d004      	beq.n	800a224 <dir_alloc+0x50>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6a1b      	ldr	r3, [r3, #32]
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d107      	bne.n	800a234 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	3301      	adds	r3, #1
 800a228:	613b      	str	r3, [r7, #16]
 800a22a:	693a      	ldr	r2, [r7, #16]
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d102      	bne.n	800a238 <dir_alloc+0x64>
 800a232:	e00c      	b.n	800a24e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a234:	2300      	movs	r3, #0
 800a236:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a238:	2101      	movs	r1, #1
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f7ff ff05 	bl	800a04a <dir_next>
 800a240:	4603      	mov	r3, r0
 800a242:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a244:	7dfb      	ldrb	r3, [r7, #23]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d0d7      	beq.n	800a1fa <dir_alloc+0x26>
 800a24a:	e000      	b.n	800a24e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a24c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a24e:	7dfb      	ldrb	r3, [r7, #23]
 800a250:	2b04      	cmp	r3, #4
 800a252:	d101      	bne.n	800a258 <dir_alloc+0x84>
 800a254:	2307      	movs	r3, #7
 800a256:	75fb      	strb	r3, [r7, #23]
	return res;
 800a258:	7dfb      	ldrb	r3, [r7, #23]
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3718      	adds	r7, #24
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}

0800a262 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a262:	b580      	push	{r7, lr}
 800a264:	b084      	sub	sp, #16
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
 800a26a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	331a      	adds	r3, #26
 800a270:	4618      	mov	r0, r3
 800a272:	f7ff f80f 	bl	8009294 <ld_word>
 800a276:	4603      	mov	r3, r0
 800a278:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	2b03      	cmp	r3, #3
 800a280:	d109      	bne.n	800a296 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	3314      	adds	r3, #20
 800a286:	4618      	mov	r0, r3
 800a288:	f7ff f804 	bl	8009294 <ld_word>
 800a28c:	4603      	mov	r3, r0
 800a28e:	041b      	lsls	r3, r3, #16
 800a290:	68fa      	ldr	r2, [r7, #12]
 800a292:	4313      	orrs	r3, r2
 800a294:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a296:	68fb      	ldr	r3, [r7, #12]
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3710      	adds	r7, #16
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	60f8      	str	r0, [r7, #12]
 800a2a8:	60b9      	str	r1, [r7, #8]
 800a2aa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	331a      	adds	r3, #26
 800a2b0:	687a      	ldr	r2, [r7, #4]
 800a2b2:	b292      	uxth	r2, r2
 800a2b4:	4611      	mov	r1, r2
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7ff f827 	bl	800930a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	781b      	ldrb	r3, [r3, #0]
 800a2c0:	2b03      	cmp	r3, #3
 800a2c2:	d109      	bne.n	800a2d8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	f103 0214 	add.w	r2, r3, #20
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	0c1b      	lsrs	r3, r3, #16
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	4610      	mov	r0, r2
 800a2d4:	f7ff f819 	bl	800930a <st_word>
	}
}
 800a2d8:	bf00      	nop
 800a2da:	3710      	adds	r7, #16
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b086      	sub	sp, #24
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800a2ea:	2304      	movs	r3, #4
 800a2ec:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800a2f4:	e03c      	b.n	800a370 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	69db      	ldr	r3, [r3, #28]
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	6938      	ldr	r0, [r7, #16]
 800a2fe:	f7ff faab 	bl	8009858 <move_window>
 800a302:	4603      	mov	r3, r0
 800a304:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a306:	7dfb      	ldrb	r3, [r7, #23]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d136      	bne.n	800a37a <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6a1b      	ldr	r3, [r3, #32]
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800a314:	7bfb      	ldrb	r3, [r7, #15]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d102      	bne.n	800a320 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800a31a:	2304      	movs	r3, #4
 800a31c:	75fb      	strb	r3, [r7, #23]
 800a31e:	e031      	b.n	800a384 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6a1b      	ldr	r3, [r3, #32]
 800a324:	330b      	adds	r3, #11
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a32c:	73bb      	strb	r3, [r7, #14]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	7bba      	ldrb	r2, [r7, #14]
 800a332:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800a334:	7bfb      	ldrb	r3, [r7, #15]
 800a336:	2be5      	cmp	r3, #229	; 0xe5
 800a338:	d011      	beq.n	800a35e <dir_read+0x7e>
 800a33a:	7bfb      	ldrb	r3, [r7, #15]
 800a33c:	2b2e      	cmp	r3, #46	; 0x2e
 800a33e:	d00e      	beq.n	800a35e <dir_read+0x7e>
 800a340:	7bbb      	ldrb	r3, [r7, #14]
 800a342:	2b0f      	cmp	r3, #15
 800a344:	d00b      	beq.n	800a35e <dir_read+0x7e>
 800a346:	7bbb      	ldrb	r3, [r7, #14]
 800a348:	f023 0320 	bic.w	r3, r3, #32
 800a34c:	2b08      	cmp	r3, #8
 800a34e:	bf0c      	ite	eq
 800a350:	2301      	moveq	r3, #1
 800a352:	2300      	movne	r3, #0
 800a354:	b2db      	uxtb	r3, r3
 800a356:	461a      	mov	r2, r3
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d00f      	beq.n	800a37e <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800a35e:	2100      	movs	r1, #0
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f7ff fe72 	bl	800a04a <dir_next>
 800a366:	4603      	mov	r3, r0
 800a368:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a36a:	7dfb      	ldrb	r3, [r7, #23]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d108      	bne.n	800a382 <dir_read+0xa2>
	while (dp->sect) {
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	69db      	ldr	r3, [r3, #28]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d1be      	bne.n	800a2f6 <dir_read+0x16>
 800a378:	e004      	b.n	800a384 <dir_read+0xa4>
		if (res != FR_OK) break;
 800a37a:	bf00      	nop
 800a37c:	e002      	b.n	800a384 <dir_read+0xa4>
				break;
 800a37e:	bf00      	nop
 800a380:	e000      	b.n	800a384 <dir_read+0xa4>
		if (res != FR_OK) break;
 800a382:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800a384:	7dfb      	ldrb	r3, [r7, #23]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d002      	beq.n	800a390 <dir_read+0xb0>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	61da      	str	r2, [r3, #28]
	return res;
 800a390:	7dfb      	ldrb	r3, [r7, #23]
}
 800a392:	4618      	mov	r0, r3
 800a394:	3718      	adds	r7, #24
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}

0800a39a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a39a:	b580      	push	{r7, lr}
 800a39c:	b086      	sub	sp, #24
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a3a8:	2100      	movs	r1, #0
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f7ff fdd2 	bl	8009f54 <dir_sdi>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a3b4:	7dfb      	ldrb	r3, [r7, #23]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d001      	beq.n	800a3be <dir_find+0x24>
 800a3ba:	7dfb      	ldrb	r3, [r7, #23]
 800a3bc:	e03e      	b.n	800a43c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	69db      	ldr	r3, [r3, #28]
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	6938      	ldr	r0, [r7, #16]
 800a3c6:	f7ff fa47 	bl	8009858 <move_window>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a3ce:	7dfb      	ldrb	r3, [r7, #23]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d12f      	bne.n	800a434 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6a1b      	ldr	r3, [r3, #32]
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a3dc:	7bfb      	ldrb	r3, [r7, #15]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d102      	bne.n	800a3e8 <dir_find+0x4e>
 800a3e2:	2304      	movs	r3, #4
 800a3e4:	75fb      	strb	r3, [r7, #23]
 800a3e6:	e028      	b.n	800a43a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6a1b      	ldr	r3, [r3, #32]
 800a3ec:	330b      	adds	r3, #11
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3f4:	b2da      	uxtb	r2, r3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6a1b      	ldr	r3, [r3, #32]
 800a3fe:	330b      	adds	r3, #11
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	f003 0308 	and.w	r3, r3, #8
 800a406:	2b00      	cmp	r3, #0
 800a408:	d10a      	bne.n	800a420 <dir_find+0x86>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6a18      	ldr	r0, [r3, #32]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	3324      	adds	r3, #36	; 0x24
 800a412:	220b      	movs	r2, #11
 800a414:	4619      	mov	r1, r3
 800a416:	f7fe fffb 	bl	8009410 <mem_cmp>
 800a41a:	4603      	mov	r3, r0
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d00b      	beq.n	800a438 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a420:	2100      	movs	r1, #0
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f7ff fe11 	bl	800a04a <dir_next>
 800a428:	4603      	mov	r3, r0
 800a42a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a42c:	7dfb      	ldrb	r3, [r7, #23]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d0c5      	beq.n	800a3be <dir_find+0x24>
 800a432:	e002      	b.n	800a43a <dir_find+0xa0>
		if (res != FR_OK) break;
 800a434:	bf00      	nop
 800a436:	e000      	b.n	800a43a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a438:	bf00      	nop

	return res;
 800a43a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3718      	adds	r7, #24
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a452:	2101      	movs	r1, #1
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f7ff febd 	bl	800a1d4 <dir_alloc>
 800a45a:	4603      	mov	r3, r0
 800a45c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a45e:	7bfb      	ldrb	r3, [r7, #15]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d11c      	bne.n	800a49e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	69db      	ldr	r3, [r3, #28]
 800a468:	4619      	mov	r1, r3
 800a46a:	68b8      	ldr	r0, [r7, #8]
 800a46c:	f7ff f9f4 	bl	8009858 <move_window>
 800a470:	4603      	mov	r3, r0
 800a472:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a474:	7bfb      	ldrb	r3, [r7, #15]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d111      	bne.n	800a49e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6a1b      	ldr	r3, [r3, #32]
 800a47e:	2220      	movs	r2, #32
 800a480:	2100      	movs	r1, #0
 800a482:	4618      	mov	r0, r3
 800a484:	f7fe ffa9 	bl	80093da <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6a18      	ldr	r0, [r3, #32]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	3324      	adds	r3, #36	; 0x24
 800a490:	220b      	movs	r2, #11
 800a492:	4619      	mov	r1, r3
 800a494:	f7fe ff80 	bl	8009398 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	2201      	movs	r2, #1
 800a49c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a49e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3710      	adds	r7, #16
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	69db      	ldr	r3, [r3, #28]
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	68f8      	ldr	r0, [r7, #12]
 800a4be:	f7ff f9cb 	bl	8009858 <move_window>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800a4c6:	7afb      	ldrb	r3, [r7, #11]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d106      	bne.n	800a4da <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6a1b      	ldr	r3, [r3, #32]
 800a4d0:	22e5      	movs	r2, #229	; 0xe5
 800a4d2:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800a4da:	7afb      	ldrb	r3, [r7, #11]
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3710      	adds	r7, #16
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b086      	sub	sp, #24
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	69db      	ldr	r3, [r3, #28]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d04e      	beq.n	800a59a <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	613b      	str	r3, [r7, #16]
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800a504:	e021      	b.n	800a54a <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6a1a      	ldr	r2, [r3, #32]
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	1c59      	adds	r1, r3, #1
 800a50e:	6179      	str	r1, [r7, #20]
 800a510:	4413      	add	r3, r2
 800a512:	781b      	ldrb	r3, [r3, #0]
 800a514:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800a516:	7bfb      	ldrb	r3, [r7, #15]
 800a518:	2b20      	cmp	r3, #32
 800a51a:	d100      	bne.n	800a51e <get_fileinfo+0x3a>
 800a51c:	e015      	b.n	800a54a <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800a51e:	7bfb      	ldrb	r3, [r7, #15]
 800a520:	2b05      	cmp	r3, #5
 800a522:	d101      	bne.n	800a528 <get_fileinfo+0x44>
 800a524:	23e5      	movs	r3, #229	; 0xe5
 800a526:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	2b09      	cmp	r3, #9
 800a52c:	d106      	bne.n	800a53c <get_fileinfo+0x58>
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	1c5a      	adds	r2, r3, #1
 800a532:	613a      	str	r2, [r7, #16]
 800a534:	683a      	ldr	r2, [r7, #0]
 800a536:	4413      	add	r3, r2
 800a538:	222e      	movs	r2, #46	; 0x2e
 800a53a:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	1c5a      	adds	r2, r3, #1
 800a540:	613a      	str	r2, [r7, #16]
 800a542:	683a      	ldr	r2, [r7, #0]
 800a544:	4413      	add	r3, r2
 800a546:	7bfa      	ldrb	r2, [r7, #15]
 800a548:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	2b0a      	cmp	r3, #10
 800a54e:	d9da      	bls.n	800a506 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800a550:	683a      	ldr	r2, [r7, #0]
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	4413      	add	r3, r2
 800a556:	3309      	adds	r3, #9
 800a558:	2200      	movs	r2, #0
 800a55a:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6a1b      	ldr	r3, [r3, #32]
 800a560:	7ada      	ldrb	r2, [r3, #11]
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6a1b      	ldr	r3, [r3, #32]
 800a56a:	331c      	adds	r3, #28
 800a56c:	4618      	mov	r0, r3
 800a56e:	f7fe fea9 	bl	80092c4 <ld_dword>
 800a572:	4602      	mov	r2, r0
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6a1b      	ldr	r3, [r3, #32]
 800a57c:	3316      	adds	r3, #22
 800a57e:	4618      	mov	r0, r3
 800a580:	f7fe fea0 	bl	80092c4 <ld_dword>
 800a584:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	b29a      	uxth	r2, r3
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	80da      	strh	r2, [r3, #6]
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	0c1b      	lsrs	r3, r3, #16
 800a592:	b29a      	uxth	r2, r3
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	809a      	strh	r2, [r3, #4]
 800a598:	e000      	b.n	800a59c <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a59a:	bf00      	nop
}
 800a59c:	3718      	adds	r7, #24
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
	...

0800a5a4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b088      	sub	sp, #32
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	60fb      	str	r3, [r7, #12]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	3324      	adds	r3, #36	; 0x24
 800a5b8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a5ba:	220b      	movs	r2, #11
 800a5bc:	2120      	movs	r1, #32
 800a5be:	68b8      	ldr	r0, [r7, #8]
 800a5c0:	f7fe ff0b 	bl	80093da <mem_set>
	si = i = 0; ni = 8;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	613b      	str	r3, [r7, #16]
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	61fb      	str	r3, [r7, #28]
 800a5cc:	2308      	movs	r3, #8
 800a5ce:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a5d0:	69fb      	ldr	r3, [r7, #28]
 800a5d2:	1c5a      	adds	r2, r3, #1
 800a5d4:	61fa      	str	r2, [r7, #28]
 800a5d6:	68fa      	ldr	r2, [r7, #12]
 800a5d8:	4413      	add	r3, r2
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a5de:	7efb      	ldrb	r3, [r7, #27]
 800a5e0:	2b20      	cmp	r3, #32
 800a5e2:	d94e      	bls.n	800a682 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a5e4:	7efb      	ldrb	r3, [r7, #27]
 800a5e6:	2b2f      	cmp	r3, #47	; 0x2f
 800a5e8:	d006      	beq.n	800a5f8 <create_name+0x54>
 800a5ea:	7efb      	ldrb	r3, [r7, #27]
 800a5ec:	2b5c      	cmp	r3, #92	; 0x5c
 800a5ee:	d110      	bne.n	800a612 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a5f0:	e002      	b.n	800a5f8 <create_name+0x54>
 800a5f2:	69fb      	ldr	r3, [r7, #28]
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	61fb      	str	r3, [r7, #28]
 800a5f8:	68fa      	ldr	r2, [r7, #12]
 800a5fa:	69fb      	ldr	r3, [r7, #28]
 800a5fc:	4413      	add	r3, r2
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	2b2f      	cmp	r3, #47	; 0x2f
 800a602:	d0f6      	beq.n	800a5f2 <create_name+0x4e>
 800a604:	68fa      	ldr	r2, [r7, #12]
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	4413      	add	r3, r2
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	2b5c      	cmp	r3, #92	; 0x5c
 800a60e:	d0f0      	beq.n	800a5f2 <create_name+0x4e>
			break;
 800a610:	e038      	b.n	800a684 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a612:	7efb      	ldrb	r3, [r7, #27]
 800a614:	2b2e      	cmp	r3, #46	; 0x2e
 800a616:	d003      	beq.n	800a620 <create_name+0x7c>
 800a618:	693a      	ldr	r2, [r7, #16]
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d30c      	bcc.n	800a63a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	2b0b      	cmp	r3, #11
 800a624:	d002      	beq.n	800a62c <create_name+0x88>
 800a626:	7efb      	ldrb	r3, [r7, #27]
 800a628:	2b2e      	cmp	r3, #46	; 0x2e
 800a62a:	d001      	beq.n	800a630 <create_name+0x8c>
 800a62c:	2306      	movs	r3, #6
 800a62e:	e044      	b.n	800a6ba <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a630:	2308      	movs	r3, #8
 800a632:	613b      	str	r3, [r7, #16]
 800a634:	230b      	movs	r3, #11
 800a636:	617b      	str	r3, [r7, #20]
			continue;
 800a638:	e022      	b.n	800a680 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a63a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	da04      	bge.n	800a64c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a642:	7efb      	ldrb	r3, [r7, #27]
 800a644:	3b80      	subs	r3, #128	; 0x80
 800a646:	4a1f      	ldr	r2, [pc, #124]	; (800a6c4 <create_name+0x120>)
 800a648:	5cd3      	ldrb	r3, [r2, r3]
 800a64a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a64c:	7efb      	ldrb	r3, [r7, #27]
 800a64e:	4619      	mov	r1, r3
 800a650:	481d      	ldr	r0, [pc, #116]	; (800a6c8 <create_name+0x124>)
 800a652:	f7fe ff04 	bl	800945e <chk_chr>
 800a656:	4603      	mov	r3, r0
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d001      	beq.n	800a660 <create_name+0xbc>
 800a65c:	2306      	movs	r3, #6
 800a65e:	e02c      	b.n	800a6ba <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a660:	7efb      	ldrb	r3, [r7, #27]
 800a662:	2b60      	cmp	r3, #96	; 0x60
 800a664:	d905      	bls.n	800a672 <create_name+0xce>
 800a666:	7efb      	ldrb	r3, [r7, #27]
 800a668:	2b7a      	cmp	r3, #122	; 0x7a
 800a66a:	d802      	bhi.n	800a672 <create_name+0xce>
 800a66c:	7efb      	ldrb	r3, [r7, #27]
 800a66e:	3b20      	subs	r3, #32
 800a670:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	1c5a      	adds	r2, r3, #1
 800a676:	613a      	str	r2, [r7, #16]
 800a678:	68ba      	ldr	r2, [r7, #8]
 800a67a:	4413      	add	r3, r2
 800a67c:	7efa      	ldrb	r2, [r7, #27]
 800a67e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a680:	e7a6      	b.n	800a5d0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a682:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a684:	68fa      	ldr	r2, [r7, #12]
 800a686:	69fb      	ldr	r3, [r7, #28]
 800a688:	441a      	add	r2, r3
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d101      	bne.n	800a698 <create_name+0xf4>
 800a694:	2306      	movs	r3, #6
 800a696:	e010      	b.n	800a6ba <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	2be5      	cmp	r3, #229	; 0xe5
 800a69e:	d102      	bne.n	800a6a6 <create_name+0x102>
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	2205      	movs	r2, #5
 800a6a4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a6a6:	7efb      	ldrb	r3, [r7, #27]
 800a6a8:	2b20      	cmp	r3, #32
 800a6aa:	d801      	bhi.n	800a6b0 <create_name+0x10c>
 800a6ac:	2204      	movs	r2, #4
 800a6ae:	e000      	b.n	800a6b2 <create_name+0x10e>
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	330b      	adds	r3, #11
 800a6b6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a6b8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3720      	adds	r7, #32
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	08011f18 	.word	0x08011f18
 800a6c8:	08011eac 	.word	0x08011eac

0800a6cc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b086      	sub	sp, #24
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a6e0:	e002      	b.n	800a6e8 <follow_path+0x1c>
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	3301      	adds	r3, #1
 800a6e6:	603b      	str	r3, [r7, #0]
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	781b      	ldrb	r3, [r3, #0]
 800a6ec:	2b2f      	cmp	r3, #47	; 0x2f
 800a6ee:	d0f8      	beq.n	800a6e2 <follow_path+0x16>
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	2b5c      	cmp	r3, #92	; 0x5c
 800a6f6:	d0f4      	beq.n	800a6e2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	781b      	ldrb	r3, [r3, #0]
 800a702:	2b1f      	cmp	r3, #31
 800a704:	d80a      	bhi.n	800a71c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2280      	movs	r2, #128	; 0x80
 800a70a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a70e:	2100      	movs	r1, #0
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f7ff fc1f 	bl	8009f54 <dir_sdi>
 800a716:	4603      	mov	r3, r0
 800a718:	75fb      	strb	r3, [r7, #23]
 800a71a:	e043      	b.n	800a7a4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a71c:	463b      	mov	r3, r7
 800a71e:	4619      	mov	r1, r3
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f7ff ff3f 	bl	800a5a4 <create_name>
 800a726:	4603      	mov	r3, r0
 800a728:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a72a:	7dfb      	ldrb	r3, [r7, #23]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d134      	bne.n	800a79a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f7ff fe32 	bl	800a39a <dir_find>
 800a736:	4603      	mov	r3, r0
 800a738:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a740:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a742:	7dfb      	ldrb	r3, [r7, #23]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d00a      	beq.n	800a75e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a748:	7dfb      	ldrb	r3, [r7, #23]
 800a74a:	2b04      	cmp	r3, #4
 800a74c:	d127      	bne.n	800a79e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a74e:	7afb      	ldrb	r3, [r7, #11]
 800a750:	f003 0304 	and.w	r3, r3, #4
 800a754:	2b00      	cmp	r3, #0
 800a756:	d122      	bne.n	800a79e <follow_path+0xd2>
 800a758:	2305      	movs	r3, #5
 800a75a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a75c:	e01f      	b.n	800a79e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a75e:	7afb      	ldrb	r3, [r7, #11]
 800a760:	f003 0304 	and.w	r3, r3, #4
 800a764:	2b00      	cmp	r3, #0
 800a766:	d11c      	bne.n	800a7a2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	799b      	ldrb	r3, [r3, #6]
 800a76c:	f003 0310 	and.w	r3, r3, #16
 800a770:	2b00      	cmp	r3, #0
 800a772:	d102      	bne.n	800a77a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a774:	2305      	movs	r3, #5
 800a776:	75fb      	strb	r3, [r7, #23]
 800a778:	e014      	b.n	800a7a4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	695b      	ldr	r3, [r3, #20]
 800a784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a788:	4413      	add	r3, r2
 800a78a:	4619      	mov	r1, r3
 800a78c:	68f8      	ldr	r0, [r7, #12]
 800a78e:	f7ff fd68 	bl	800a262 <ld_clust>
 800a792:	4602      	mov	r2, r0
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a798:	e7c0      	b.n	800a71c <follow_path+0x50>
			if (res != FR_OK) break;
 800a79a:	bf00      	nop
 800a79c:	e002      	b.n	800a7a4 <follow_path+0xd8>
				break;
 800a79e:	bf00      	nop
 800a7a0:	e000      	b.n	800a7a4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a7a2:	bf00      	nop
			}
		}
	}

	return res;
 800a7a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3718      	adds	r7, #24
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}

0800a7ae <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a7ae:	b480      	push	{r7}
 800a7b0:	b087      	sub	sp, #28
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a7b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a7ba:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d031      	beq.n	800a828 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	617b      	str	r3, [r7, #20]
 800a7ca:	e002      	b.n	800a7d2 <get_ldnumber+0x24>
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	617b      	str	r3, [r7, #20]
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	2b20      	cmp	r3, #32
 800a7d8:	d903      	bls.n	800a7e2 <get_ldnumber+0x34>
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	2b3a      	cmp	r3, #58	; 0x3a
 800a7e0:	d1f4      	bne.n	800a7cc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	2b3a      	cmp	r3, #58	; 0x3a
 800a7e8:	d11c      	bne.n	800a824 <get_ldnumber+0x76>
			tp = *path;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	1c5a      	adds	r2, r3, #1
 800a7f4:	60fa      	str	r2, [r7, #12]
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	3b30      	subs	r3, #48	; 0x30
 800a7fa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	2b09      	cmp	r3, #9
 800a800:	d80e      	bhi.n	800a820 <get_ldnumber+0x72>
 800a802:	68fa      	ldr	r2, [r7, #12]
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	429a      	cmp	r2, r3
 800a808:	d10a      	bne.n	800a820 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d107      	bne.n	800a820 <get_ldnumber+0x72>
					vol = (int)i;
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	3301      	adds	r3, #1
 800a818:	617b      	str	r3, [r7, #20]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	697a      	ldr	r2, [r7, #20]
 800a81e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	e002      	b.n	800a82a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a824:	2300      	movs	r3, #0
 800a826:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a828:	693b      	ldr	r3, [r7, #16]
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	371c      	adds	r7, #28
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr
	...

0800a838 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	70da      	strb	r2, [r3, #3]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f04f 32ff 	mov.w	r2, #4294967295
 800a84e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a850:	6839      	ldr	r1, [r7, #0]
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f7ff f800 	bl	8009858 <move_window>
 800a858:	4603      	mov	r3, r0
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d001      	beq.n	800a862 <check_fs+0x2a>
 800a85e:	2304      	movs	r3, #4
 800a860:	e038      	b.n	800a8d4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	3334      	adds	r3, #52	; 0x34
 800a866:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7fe fd12 	bl	8009294 <ld_word>
 800a870:	4603      	mov	r3, r0
 800a872:	461a      	mov	r2, r3
 800a874:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a878:	429a      	cmp	r2, r3
 800a87a:	d001      	beq.n	800a880 <check_fs+0x48>
 800a87c:	2303      	movs	r3, #3
 800a87e:	e029      	b.n	800a8d4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a886:	2be9      	cmp	r3, #233	; 0xe9
 800a888:	d009      	beq.n	800a89e <check_fs+0x66>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a890:	2beb      	cmp	r3, #235	; 0xeb
 800a892:	d11e      	bne.n	800a8d2 <check_fs+0x9a>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a89a:	2b90      	cmp	r3, #144	; 0x90
 800a89c:	d119      	bne.n	800a8d2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	3334      	adds	r3, #52	; 0x34
 800a8a2:	3336      	adds	r3, #54	; 0x36
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7fe fd0d 	bl	80092c4 <ld_dword>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a8b0:	4a0a      	ldr	r2, [pc, #40]	; (800a8dc <check_fs+0xa4>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d101      	bne.n	800a8ba <check_fs+0x82>
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	e00c      	b.n	800a8d4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	3334      	adds	r3, #52	; 0x34
 800a8be:	3352      	adds	r3, #82	; 0x52
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f7fe fcff 	bl	80092c4 <ld_dword>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	4a05      	ldr	r2, [pc, #20]	; (800a8e0 <check_fs+0xa8>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d101      	bne.n	800a8d2 <check_fs+0x9a>
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	e000      	b.n	800a8d4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a8d2:	2302      	movs	r3, #2
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3708      	adds	r7, #8
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}
 800a8dc:	00544146 	.word	0x00544146
 800a8e0:	33544146 	.word	0x33544146

0800a8e4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b096      	sub	sp, #88	; 0x58
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	60b9      	str	r1, [r7, #8]
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a8f8:	68f8      	ldr	r0, [r7, #12]
 800a8fa:	f7ff ff58 	bl	800a7ae <get_ldnumber>
 800a8fe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a902:	2b00      	cmp	r3, #0
 800a904:	da01      	bge.n	800a90a <find_volume+0x26>
 800a906:	230b      	movs	r3, #11
 800a908:	e235      	b.n	800ad76 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a90a:	4aa5      	ldr	r2, [pc, #660]	; (800aba0 <find_volume+0x2bc>)
 800a90c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a90e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a912:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a916:	2b00      	cmp	r3, #0
 800a918:	d101      	bne.n	800a91e <find_volume+0x3a>
 800a91a:	230c      	movs	r3, #12
 800a91c:	e22b      	b.n	800ad76 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800a91e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a920:	f7fe fdb8 	bl	8009494 <lock_fs>
 800a924:	4603      	mov	r3, r0
 800a926:	2b00      	cmp	r3, #0
 800a928:	d101      	bne.n	800a92e <find_volume+0x4a>
 800a92a:	230f      	movs	r3, #15
 800a92c:	e223      	b.n	800ad76 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a932:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a934:	79fb      	ldrb	r3, [r7, #7]
 800a936:	f023 0301 	bic.w	r3, r3, #1
 800a93a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93e:	781b      	ldrb	r3, [r3, #0]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d01a      	beq.n	800a97a <find_volume+0x96>
		stat = disk_status(fs->drv);
 800a944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a946:	785b      	ldrb	r3, [r3, #1]
 800a948:	4618      	mov	r0, r3
 800a94a:	f7fe fc05 	bl	8009158 <disk_status>
 800a94e:	4603      	mov	r3, r0
 800a950:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a954:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a958:	f003 0301 	and.w	r3, r3, #1
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d10c      	bne.n	800a97a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a960:	79fb      	ldrb	r3, [r7, #7]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d007      	beq.n	800a976 <find_volume+0x92>
 800a966:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a96a:	f003 0304 	and.w	r3, r3, #4
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d001      	beq.n	800a976 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800a972:	230a      	movs	r3, #10
 800a974:	e1ff      	b.n	800ad76 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800a976:	2300      	movs	r3, #0
 800a978:	e1fd      	b.n	800ad76 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a97c:	2200      	movs	r2, #0
 800a97e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a982:	b2da      	uxtb	r2, r3
 800a984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a986:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a98a:	785b      	ldrb	r3, [r3, #1]
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7fe fbfd 	bl	800918c <disk_initialize>
 800a992:	4603      	mov	r3, r0
 800a994:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a998:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a99c:	f003 0301 	and.w	r3, r3, #1
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d001      	beq.n	800a9a8 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a9a4:	2303      	movs	r3, #3
 800a9a6:	e1e6      	b.n	800ad76 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a9a8:	79fb      	ldrb	r3, [r7, #7]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d007      	beq.n	800a9be <find_volume+0xda>
 800a9ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a9b2:	f003 0304 	and.w	r3, r3, #4
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d001      	beq.n	800a9be <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800a9ba:	230a      	movs	r3, #10
 800a9bc:	e1db      	b.n	800ad76 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a9c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a9c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a9c6:	f7ff ff37 	bl	800a838 <check_fs>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a9d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a9d4:	2b02      	cmp	r3, #2
 800a9d6:	d149      	bne.n	800aa6c <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a9d8:	2300      	movs	r3, #0
 800a9da:	643b      	str	r3, [r7, #64]	; 0x40
 800a9dc:	e01e      	b.n	800aa1c <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a9e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9e6:	011b      	lsls	r3, r3, #4
 800a9e8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a9ec:	4413      	add	r3, r2
 800a9ee:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f2:	3304      	adds	r3, #4
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d006      	beq.n	800aa08 <find_volume+0x124>
 800a9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9fc:	3308      	adds	r3, #8
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7fe fc60 	bl	80092c4 <ld_dword>
 800aa04:	4602      	mov	r2, r0
 800aa06:	e000      	b.n	800aa0a <find_volume+0x126>
 800aa08:	2200      	movs	r2, #0
 800aa0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa0c:	009b      	lsls	r3, r3, #2
 800aa0e:	3358      	adds	r3, #88	; 0x58
 800aa10:	443b      	add	r3, r7
 800aa12:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800aa16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa18:	3301      	adds	r3, #1
 800aa1a:	643b      	str	r3, [r7, #64]	; 0x40
 800aa1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa1e:	2b03      	cmp	r3, #3
 800aa20:	d9dd      	bls.n	800a9de <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800aa22:	2300      	movs	r3, #0
 800aa24:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800aa26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d002      	beq.n	800aa32 <find_volume+0x14e>
 800aa2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa2e:	3b01      	subs	r3, #1
 800aa30:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800aa32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	3358      	adds	r3, #88	; 0x58
 800aa38:	443b      	add	r3, r7
 800aa3a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800aa3e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800aa40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d005      	beq.n	800aa52 <find_volume+0x16e>
 800aa46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aa48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aa4a:	f7ff fef5 	bl	800a838 <check_fs>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	e000      	b.n	800aa54 <find_volume+0x170>
 800aa52:	2303      	movs	r3, #3
 800aa54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800aa58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d905      	bls.n	800aa6c <find_volume+0x188>
 800aa60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa62:	3301      	adds	r3, #1
 800aa64:	643b      	str	r3, [r7, #64]	; 0x40
 800aa66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa68:	2b03      	cmp	r3, #3
 800aa6a:	d9e2      	bls.n	800aa32 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800aa6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aa70:	2b04      	cmp	r3, #4
 800aa72:	d101      	bne.n	800aa78 <find_volume+0x194>
 800aa74:	2301      	movs	r3, #1
 800aa76:	e17e      	b.n	800ad76 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800aa78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d901      	bls.n	800aa84 <find_volume+0x1a0>
 800aa80:	230d      	movs	r3, #13
 800aa82:	e178      	b.n	800ad76 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800aa84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa86:	3334      	adds	r3, #52	; 0x34
 800aa88:	330b      	adds	r3, #11
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7fe fc02 	bl	8009294 <ld_word>
 800aa90:	4603      	mov	r3, r0
 800aa92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa96:	d001      	beq.n	800aa9c <find_volume+0x1b8>
 800aa98:	230d      	movs	r3, #13
 800aa9a:	e16c      	b.n	800ad76 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800aa9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa9e:	3334      	adds	r3, #52	; 0x34
 800aaa0:	3316      	adds	r3, #22
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7fe fbf6 	bl	8009294 <ld_word>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800aaac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d106      	bne.n	800aac0 <find_volume+0x1dc>
 800aab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aab4:	3334      	adds	r3, #52	; 0x34
 800aab6:	3324      	adds	r3, #36	; 0x24
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7fe fc03 	bl	80092c4 <ld_dword>
 800aabe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800aac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aac2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aac4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800aac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aac8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800aacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aace:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800aad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad2:	789b      	ldrb	r3, [r3, #2]
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	d005      	beq.n	800aae4 <find_volume+0x200>
 800aad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aada:	789b      	ldrb	r3, [r3, #2]
 800aadc:	2b02      	cmp	r3, #2
 800aade:	d001      	beq.n	800aae4 <find_volume+0x200>
 800aae0:	230d      	movs	r3, #13
 800aae2:	e148      	b.n	800ad76 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800aae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae6:	789b      	ldrb	r3, [r3, #2]
 800aae8:	461a      	mov	r2, r3
 800aaea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aaec:	fb02 f303 	mul.w	r3, r2, r3
 800aaf0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800aaf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aaf8:	b29a      	uxth	r2, r3
 800aafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aafc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800aafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab00:	895b      	ldrh	r3, [r3, #10]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d008      	beq.n	800ab18 <find_volume+0x234>
 800ab06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab08:	895b      	ldrh	r3, [r3, #10]
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab0e:	895b      	ldrh	r3, [r3, #10]
 800ab10:	3b01      	subs	r3, #1
 800ab12:	4013      	ands	r3, r2
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d001      	beq.n	800ab1c <find_volume+0x238>
 800ab18:	230d      	movs	r3, #13
 800ab1a:	e12c      	b.n	800ad76 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ab1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab1e:	3334      	adds	r3, #52	; 0x34
 800ab20:	3311      	adds	r3, #17
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7fe fbb6 	bl	8009294 <ld_word>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab2e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ab30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab32:	891b      	ldrh	r3, [r3, #8]
 800ab34:	f003 030f 	and.w	r3, r3, #15
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d001      	beq.n	800ab42 <find_volume+0x25e>
 800ab3e:	230d      	movs	r3, #13
 800ab40:	e119      	b.n	800ad76 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ab42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab44:	3334      	adds	r3, #52	; 0x34
 800ab46:	3313      	adds	r3, #19
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f7fe fba3 	bl	8009294 <ld_word>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ab52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d106      	bne.n	800ab66 <find_volume+0x282>
 800ab58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab5a:	3334      	adds	r3, #52	; 0x34
 800ab5c:	3320      	adds	r3, #32
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7fe fbb0 	bl	80092c4 <ld_dword>
 800ab64:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ab66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab68:	3334      	adds	r3, #52	; 0x34
 800ab6a:	330e      	adds	r3, #14
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f7fe fb91 	bl	8009294 <ld_word>
 800ab72:	4603      	mov	r3, r0
 800ab74:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ab76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d101      	bne.n	800ab80 <find_volume+0x29c>
 800ab7c:	230d      	movs	r3, #13
 800ab7e:	e0fa      	b.n	800ad76 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ab80:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ab82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab84:	4413      	add	r3, r2
 800ab86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab88:	8912      	ldrh	r2, [r2, #8]
 800ab8a:	0912      	lsrs	r2, r2, #4
 800ab8c:	b292      	uxth	r2, r2
 800ab8e:	4413      	add	r3, r2
 800ab90:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ab92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d204      	bcs.n	800aba4 <find_volume+0x2c0>
 800ab9a:	230d      	movs	r3, #13
 800ab9c:	e0eb      	b.n	800ad76 <find_volume+0x492>
 800ab9e:	bf00      	nop
 800aba0:	200060f8 	.word	0x200060f8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800aba4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba8:	1ad3      	subs	r3, r2, r3
 800abaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800abac:	8952      	ldrh	r2, [r2, #10]
 800abae:	fbb3 f3f2 	udiv	r3, r3, r2
 800abb2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800abb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d101      	bne.n	800abbe <find_volume+0x2da>
 800abba:	230d      	movs	r3, #13
 800abbc:	e0db      	b.n	800ad76 <find_volume+0x492>
		fmt = FS_FAT32;
 800abbe:	2303      	movs	r3, #3
 800abc0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800abc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800abca:	4293      	cmp	r3, r2
 800abcc:	d802      	bhi.n	800abd4 <find_volume+0x2f0>
 800abce:	2302      	movs	r3, #2
 800abd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800abd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd6:	f640 72f5 	movw	r2, #4085	; 0xff5
 800abda:	4293      	cmp	r3, r2
 800abdc:	d802      	bhi.n	800abe4 <find_volume+0x300>
 800abde:	2301      	movs	r3, #1
 800abe0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800abe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe6:	1c9a      	adds	r2, r3, #2
 800abe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abea:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800abec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800abf0:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800abf2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800abf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abf6:	441a      	add	r2, r3
 800abf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abfa:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800abfc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800abfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac00:	441a      	add	r2, r3
 800ac02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac04:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800ac06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ac0a:	2b03      	cmp	r3, #3
 800ac0c:	d11e      	bne.n	800ac4c <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ac0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac10:	3334      	adds	r3, #52	; 0x34
 800ac12:	332a      	adds	r3, #42	; 0x2a
 800ac14:	4618      	mov	r0, r3
 800ac16:	f7fe fb3d 	bl	8009294 <ld_word>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d001      	beq.n	800ac24 <find_volume+0x340>
 800ac20:	230d      	movs	r3, #13
 800ac22:	e0a8      	b.n	800ad76 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ac24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac26:	891b      	ldrh	r3, [r3, #8]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d001      	beq.n	800ac30 <find_volume+0x34c>
 800ac2c:	230d      	movs	r3, #13
 800ac2e:	e0a2      	b.n	800ad76 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ac30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac32:	3334      	adds	r3, #52	; 0x34
 800ac34:	332c      	adds	r3, #44	; 0x2c
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7fe fb44 	bl	80092c4 <ld_dword>
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac40:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ac42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac44:	699b      	ldr	r3, [r3, #24]
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	647b      	str	r3, [r7, #68]	; 0x44
 800ac4a:	e01f      	b.n	800ac8c <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ac4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac4e:	891b      	ldrh	r3, [r3, #8]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d101      	bne.n	800ac58 <find_volume+0x374>
 800ac54:	230d      	movs	r3, #13
 800ac56:	e08e      	b.n	800ad76 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ac58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac5e:	441a      	add	r2, r3
 800ac60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac62:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ac64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ac68:	2b02      	cmp	r3, #2
 800ac6a:	d103      	bne.n	800ac74 <find_volume+0x390>
 800ac6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac6e:	699b      	ldr	r3, [r3, #24]
 800ac70:	005b      	lsls	r3, r3, #1
 800ac72:	e00a      	b.n	800ac8a <find_volume+0x3a6>
 800ac74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac76:	699a      	ldr	r2, [r3, #24]
 800ac78:	4613      	mov	r3, r2
 800ac7a:	005b      	lsls	r3, r3, #1
 800ac7c:	4413      	add	r3, r2
 800ac7e:	085a      	lsrs	r2, r3, #1
 800ac80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac82:	699b      	ldr	r3, [r3, #24]
 800ac84:	f003 0301 	and.w	r3, r3, #1
 800ac88:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ac8a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ac8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac8e:	69da      	ldr	r2, [r3, #28]
 800ac90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac92:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ac96:	0a5b      	lsrs	r3, r3, #9
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d201      	bcs.n	800aca0 <find_volume+0x3bc>
 800ac9c:	230d      	movs	r3, #13
 800ac9e:	e06a      	b.n	800ad76 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800aca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca2:	f04f 32ff 	mov.w	r2, #4294967295
 800aca6:	615a      	str	r2, [r3, #20]
 800aca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acaa:	695a      	ldr	r2, [r3, #20]
 800acac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acae:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800acb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb2:	2280      	movs	r2, #128	; 0x80
 800acb4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800acb6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800acba:	2b03      	cmp	r3, #3
 800acbc:	d149      	bne.n	800ad52 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800acbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc0:	3334      	adds	r3, #52	; 0x34
 800acc2:	3330      	adds	r3, #48	; 0x30
 800acc4:	4618      	mov	r0, r3
 800acc6:	f7fe fae5 	bl	8009294 <ld_word>
 800acca:	4603      	mov	r3, r0
 800accc:	2b01      	cmp	r3, #1
 800acce:	d140      	bne.n	800ad52 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800acd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acd2:	3301      	adds	r3, #1
 800acd4:	4619      	mov	r1, r3
 800acd6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800acd8:	f7fe fdbe 	bl	8009858 <move_window>
 800acdc:	4603      	mov	r3, r0
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d137      	bne.n	800ad52 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800ace2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace4:	2200      	movs	r2, #0
 800ace6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ace8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acea:	3334      	adds	r3, #52	; 0x34
 800acec:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800acf0:	4618      	mov	r0, r3
 800acf2:	f7fe facf 	bl	8009294 <ld_word>
 800acf6:	4603      	mov	r3, r0
 800acf8:	461a      	mov	r2, r3
 800acfa:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d127      	bne.n	800ad52 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ad02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad04:	3334      	adds	r3, #52	; 0x34
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7fe fadc 	bl	80092c4 <ld_dword>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	4a1c      	ldr	r2, [pc, #112]	; (800ad80 <find_volume+0x49c>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d11e      	bne.n	800ad52 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ad14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad16:	3334      	adds	r3, #52	; 0x34
 800ad18:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f7fe fad1 	bl	80092c4 <ld_dword>
 800ad22:	4603      	mov	r3, r0
 800ad24:	4a17      	ldr	r2, [pc, #92]	; (800ad84 <find_volume+0x4a0>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d113      	bne.n	800ad52 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ad2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad2c:	3334      	adds	r3, #52	; 0x34
 800ad2e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ad32:	4618      	mov	r0, r3
 800ad34:	f7fe fac6 	bl	80092c4 <ld_dword>
 800ad38:	4602      	mov	r2, r0
 800ad3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ad3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad40:	3334      	adds	r3, #52	; 0x34
 800ad42:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ad46:	4618      	mov	r0, r3
 800ad48:	f7fe fabc 	bl	80092c4 <ld_dword>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad50:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ad52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad54:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ad58:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ad5a:	4b0b      	ldr	r3, [pc, #44]	; (800ad88 <find_volume+0x4a4>)
 800ad5c:	881b      	ldrh	r3, [r3, #0]
 800ad5e:	3301      	adds	r3, #1
 800ad60:	b29a      	uxth	r2, r3
 800ad62:	4b09      	ldr	r3, [pc, #36]	; (800ad88 <find_volume+0x4a4>)
 800ad64:	801a      	strh	r2, [r3, #0]
 800ad66:	4b08      	ldr	r3, [pc, #32]	; (800ad88 <find_volume+0x4a4>)
 800ad68:	881a      	ldrh	r2, [r3, #0]
 800ad6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad6c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ad6e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ad70:	f7fe fd0a 	bl	8009788 <clear_lock>
#endif
	return FR_OK;
 800ad74:	2300      	movs	r3, #0
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3758      	adds	r7, #88	; 0x58
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	41615252 	.word	0x41615252
 800ad84:	61417272 	.word	0x61417272
 800ad88:	200060fc 	.word	0x200060fc

0800ad8c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b084      	sub	sp, #16
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ad96:	2309      	movs	r3, #9
 800ad98:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d02e      	beq.n	800adfe <validate+0x72>
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d02a      	beq.n	800adfe <validate+0x72>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d025      	beq.n	800adfe <validate+0x72>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	889a      	ldrh	r2, [r3, #4]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	88db      	ldrh	r3, [r3, #6]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d11e      	bne.n	800adfe <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4618      	mov	r0, r3
 800adc6:	f7fe fb65 	bl	8009494 <lock_fs>
 800adca:	4603      	mov	r3, r0
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d014      	beq.n	800adfa <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	785b      	ldrb	r3, [r3, #1]
 800add6:	4618      	mov	r0, r3
 800add8:	f7fe f9be 	bl	8009158 <disk_status>
 800addc:	4603      	mov	r3, r0
 800adde:	f003 0301 	and.w	r3, r3, #1
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d102      	bne.n	800adec <validate+0x60>
				res = FR_OK;
 800ade6:	2300      	movs	r3, #0
 800ade8:	73fb      	strb	r3, [r7, #15]
 800adea:	e008      	b.n	800adfe <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	2100      	movs	r1, #0
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7fe fb64 	bl	80094c0 <unlock_fs>
 800adf8:	e001      	b.n	800adfe <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800adfa:	230f      	movs	r3, #15
 800adfc:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800adfe:	7bfb      	ldrb	r3, [r7, #15]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d102      	bne.n	800ae0a <validate+0x7e>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	e000      	b.n	800ae0c <validate+0x80>
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	683a      	ldr	r2, [r7, #0]
 800ae0e:	6013      	str	r3, [r2, #0]
	return res;
 800ae10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3710      	adds	r7, #16
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
	...

0800ae1c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b088      	sub	sp, #32
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	60f8      	str	r0, [r7, #12]
 800ae24:	60b9      	str	r1, [r7, #8]
 800ae26:	4613      	mov	r3, r2
 800ae28:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ae2e:	f107 0310 	add.w	r3, r7, #16
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7ff fcbb 	bl	800a7ae <get_ldnumber>
 800ae38:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ae3a:	69fb      	ldr	r3, [r7, #28]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	da01      	bge.n	800ae44 <f_mount+0x28>
 800ae40:	230b      	movs	r3, #11
 800ae42:	e048      	b.n	800aed6 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ae44:	4a26      	ldr	r2, [pc, #152]	; (800aee0 <f_mount+0xc4>)
 800ae46:	69fb      	ldr	r3, [r7, #28]
 800ae48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae4c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ae4e:	69bb      	ldr	r3, [r7, #24]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d00f      	beq.n	800ae74 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ae54:	69b8      	ldr	r0, [r7, #24]
 800ae56:	f7fe fc97 	bl	8009788 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800ae5a:	69bb      	ldr	r3, [r7, #24]
 800ae5c:	68db      	ldr	r3, [r3, #12]
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f000 ffc3 	bl	800bdea <ff_del_syncobj>
 800ae64:	4603      	mov	r3, r0
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d101      	bne.n	800ae6e <f_mount+0x52>
 800ae6a:	2302      	movs	r3, #2
 800ae6c:	e033      	b.n	800aed6 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ae6e:	69bb      	ldr	r3, [r7, #24]
 800ae70:	2200      	movs	r2, #0
 800ae72:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d00f      	beq.n	800ae9a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800ae80:	69fb      	ldr	r3, [r7, #28]
 800ae82:	b2da      	uxtb	r2, r3
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	330c      	adds	r3, #12
 800ae88:	4619      	mov	r1, r3
 800ae8a:	4610      	mov	r0, r2
 800ae8c:	f000 ff8d 	bl	800bdaa <ff_cre_syncobj>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d101      	bne.n	800ae9a <f_mount+0x7e>
 800ae96:	2302      	movs	r3, #2
 800ae98:	e01d      	b.n	800aed6 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ae9a:	68fa      	ldr	r2, [r7, #12]
 800ae9c:	4910      	ldr	r1, [pc, #64]	; (800aee0 <f_mount+0xc4>)
 800ae9e:	69fb      	ldr	r3, [r7, #28]
 800aea0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d002      	beq.n	800aeb0 <f_mount+0x94>
 800aeaa:	79fb      	ldrb	r3, [r7, #7]
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d001      	beq.n	800aeb4 <f_mount+0x98>
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	e010      	b.n	800aed6 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800aeb4:	f107 010c 	add.w	r1, r7, #12
 800aeb8:	f107 0308 	add.w	r3, r7, #8
 800aebc:	2200      	movs	r2, #0
 800aebe:	4618      	mov	r0, r3
 800aec0:	f7ff fd10 	bl	800a8e4 <find_volume>
 800aec4:	4603      	mov	r3, r0
 800aec6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	7dfa      	ldrb	r2, [r7, #23]
 800aecc:	4611      	mov	r1, r2
 800aece:	4618      	mov	r0, r3
 800aed0:	f7fe faf6 	bl	80094c0 <unlock_fs>
 800aed4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3720      	adds	r7, #32
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	200060f8 	.word	0x200060f8

0800aee4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b098      	sub	sp, #96	; 0x60
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	60f8      	str	r0, [r7, #12]
 800aeec:	60b9      	str	r1, [r7, #8]
 800aeee:	4613      	mov	r3, r2
 800aef0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d101      	bne.n	800aefc <f_open+0x18>
 800aef8:	2309      	movs	r3, #9
 800aefa:	e1b4      	b.n	800b266 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800aefc:	79fb      	ldrb	r3, [r7, #7]
 800aefe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af02:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800af04:	79fa      	ldrb	r2, [r7, #7]
 800af06:	f107 0110 	add.w	r1, r7, #16
 800af0a:	f107 0308 	add.w	r3, r7, #8
 800af0e:	4618      	mov	r0, r3
 800af10:	f7ff fce8 	bl	800a8e4 <find_volume>
 800af14:	4603      	mov	r3, r0
 800af16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800af1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af1e:	2b00      	cmp	r3, #0
 800af20:	f040 8191 	bne.w	800b246 <f_open+0x362>
		dj.obj.fs = fs;
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800af28:	68ba      	ldr	r2, [r7, #8]
 800af2a:	f107 0314 	add.w	r3, r7, #20
 800af2e:	4611      	mov	r1, r2
 800af30:	4618      	mov	r0, r3
 800af32:	f7ff fbcb 	bl	800a6cc <follow_path>
 800af36:	4603      	mov	r3, r0
 800af38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800af3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af40:	2b00      	cmp	r3, #0
 800af42:	d11a      	bne.n	800af7a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800af44:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800af48:	b25b      	sxtb	r3, r3
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	da03      	bge.n	800af56 <f_open+0x72>
				res = FR_INVALID_NAME;
 800af4e:	2306      	movs	r3, #6
 800af50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800af54:	e011      	b.n	800af7a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800af56:	79fb      	ldrb	r3, [r7, #7]
 800af58:	f023 0301 	bic.w	r3, r3, #1
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	bf14      	ite	ne
 800af60:	2301      	movne	r3, #1
 800af62:	2300      	moveq	r3, #0
 800af64:	b2db      	uxtb	r3, r3
 800af66:	461a      	mov	r2, r3
 800af68:	f107 0314 	add.w	r3, r7, #20
 800af6c:	4611      	mov	r1, r2
 800af6e:	4618      	mov	r0, r3
 800af70:	f7fe fac2 	bl	80094f8 <chk_lock>
 800af74:	4603      	mov	r3, r0
 800af76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800af7a:	79fb      	ldrb	r3, [r7, #7]
 800af7c:	f003 031c 	and.w	r3, r3, #28
 800af80:	2b00      	cmp	r3, #0
 800af82:	d07f      	beq.n	800b084 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800af84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d017      	beq.n	800afbc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800af8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af90:	2b04      	cmp	r3, #4
 800af92:	d10e      	bne.n	800afb2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800af94:	f7fe fb0c 	bl	80095b0 <enq_lock>
 800af98:	4603      	mov	r3, r0
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d006      	beq.n	800afac <f_open+0xc8>
 800af9e:	f107 0314 	add.w	r3, r7, #20
 800afa2:	4618      	mov	r0, r3
 800afa4:	f7ff fa4e 	bl	800a444 <dir_register>
 800afa8:	4603      	mov	r3, r0
 800afaa:	e000      	b.n	800afae <f_open+0xca>
 800afac:	2312      	movs	r3, #18
 800afae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800afb2:	79fb      	ldrb	r3, [r7, #7]
 800afb4:	f043 0308 	orr.w	r3, r3, #8
 800afb8:	71fb      	strb	r3, [r7, #7]
 800afba:	e010      	b.n	800afde <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800afbc:	7ebb      	ldrb	r3, [r7, #26]
 800afbe:	f003 0311 	and.w	r3, r3, #17
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d003      	beq.n	800afce <f_open+0xea>
					res = FR_DENIED;
 800afc6:	2307      	movs	r3, #7
 800afc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800afcc:	e007      	b.n	800afde <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800afce:	79fb      	ldrb	r3, [r7, #7]
 800afd0:	f003 0304 	and.w	r3, r3, #4
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d002      	beq.n	800afde <f_open+0xfa>
 800afd8:	2308      	movs	r3, #8
 800afda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800afde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d168      	bne.n	800b0b8 <f_open+0x1d4>
 800afe6:	79fb      	ldrb	r3, [r7, #7]
 800afe8:	f003 0308 	and.w	r3, r3, #8
 800afec:	2b00      	cmp	r3, #0
 800afee:	d063      	beq.n	800b0b8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800aff0:	f7fe f854 	bl	800909c <get_fattime>
 800aff4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800aff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aff8:	330e      	adds	r3, #14
 800affa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800affc:	4618      	mov	r0, r3
 800affe:	f7fe f99f 	bl	8009340 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b004:	3316      	adds	r3, #22
 800b006:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b008:	4618      	mov	r0, r3
 800b00a:	f7fe f999 	bl	8009340 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b00e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b010:	330b      	adds	r3, #11
 800b012:	2220      	movs	r2, #32
 800b014:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b01a:	4611      	mov	r1, r2
 800b01c:	4618      	mov	r0, r3
 800b01e:	f7ff f920 	bl	800a262 <ld_clust>
 800b022:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b028:	2200      	movs	r2, #0
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7ff f938 	bl	800a2a0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b032:	331c      	adds	r3, #28
 800b034:	2100      	movs	r1, #0
 800b036:	4618      	mov	r0, r3
 800b038:	f7fe f982 	bl	8009340 <st_dword>
					fs->wflag = 1;
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	2201      	movs	r2, #1
 800b040:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b044:	2b00      	cmp	r3, #0
 800b046:	d037      	beq.n	800b0b8 <f_open+0x1d4>
						dw = fs->winsect;
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b04c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b04e:	f107 0314 	add.w	r3, r7, #20
 800b052:	2200      	movs	r2, #0
 800b054:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b056:	4618      	mov	r0, r3
 800b058:	f7fe fe4b 	bl	8009cf2 <remove_chain>
 800b05c:	4603      	mov	r3, r0
 800b05e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b062:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b066:	2b00      	cmp	r3, #0
 800b068:	d126      	bne.n	800b0b8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b06e:	4618      	mov	r0, r3
 800b070:	f7fe fbf2 	bl	8009858 <move_window>
 800b074:	4603      	mov	r3, r0
 800b076:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b07e:	3a01      	subs	r2, #1
 800b080:	611a      	str	r2, [r3, #16]
 800b082:	e019      	b.n	800b0b8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b084:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d115      	bne.n	800b0b8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b08c:	7ebb      	ldrb	r3, [r7, #26]
 800b08e:	f003 0310 	and.w	r3, r3, #16
 800b092:	2b00      	cmp	r3, #0
 800b094:	d003      	beq.n	800b09e <f_open+0x1ba>
					res = FR_NO_FILE;
 800b096:	2304      	movs	r3, #4
 800b098:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b09c:	e00c      	b.n	800b0b8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b09e:	79fb      	ldrb	r3, [r7, #7]
 800b0a0:	f003 0302 	and.w	r3, r3, #2
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d007      	beq.n	800b0b8 <f_open+0x1d4>
 800b0a8:	7ebb      	ldrb	r3, [r7, #26]
 800b0aa:	f003 0301 	and.w	r3, r3, #1
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d002      	beq.n	800b0b8 <f_open+0x1d4>
						res = FR_DENIED;
 800b0b2:	2307      	movs	r3, #7
 800b0b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b0b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d128      	bne.n	800b112 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b0c0:	79fb      	ldrb	r3, [r7, #7]
 800b0c2:	f003 0308 	and.w	r3, r3, #8
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d003      	beq.n	800b0d2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b0ca:	79fb      	ldrb	r3, [r7, #7]
 800b0cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0d0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b0da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b0e0:	79fb      	ldrb	r3, [r7, #7]
 800b0e2:	f023 0301 	bic.w	r3, r3, #1
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	bf14      	ite	ne
 800b0ea:	2301      	movne	r3, #1
 800b0ec:	2300      	moveq	r3, #0
 800b0ee:	b2db      	uxtb	r3, r3
 800b0f0:	461a      	mov	r2, r3
 800b0f2:	f107 0314 	add.w	r3, r7, #20
 800b0f6:	4611      	mov	r1, r2
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f7fe fa7b 	bl	80095f4 <inc_lock>
 800b0fe:	4602      	mov	r2, r0
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	691b      	ldr	r3, [r3, #16]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d102      	bne.n	800b112 <f_open+0x22e>
 800b10c:	2302      	movs	r3, #2
 800b10e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b112:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b116:	2b00      	cmp	r3, #0
 800b118:	f040 8095 	bne.w	800b246 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b120:	4611      	mov	r1, r2
 800b122:	4618      	mov	r0, r3
 800b124:	f7ff f89d 	bl	800a262 <ld_clust>
 800b128:	4602      	mov	r2, r0
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b12e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b130:	331c      	adds	r3, #28
 800b132:	4618      	mov	r0, r3
 800b134:	f7fe f8c6 	bl	80092c4 <ld_dword>
 800b138:	4602      	mov	r2, r0
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2200      	movs	r2, #0
 800b142:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b144:	693a      	ldr	r2, [r7, #16]
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	88da      	ldrh	r2, [r3, #6]
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	79fa      	ldrb	r2, [r7, #7]
 800b156:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2200      	movs	r2, #0
 800b15c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2200      	movs	r2, #0
 800b162:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	2200      	movs	r2, #0
 800b168:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	3330      	adds	r3, #48	; 0x30
 800b16e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b172:	2100      	movs	r1, #0
 800b174:	4618      	mov	r0, r3
 800b176:	f7fe f930 	bl	80093da <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b17a:	79fb      	ldrb	r3, [r7, #7]
 800b17c:	f003 0320 	and.w	r3, r3, #32
 800b180:	2b00      	cmp	r3, #0
 800b182:	d060      	beq.n	800b246 <f_open+0x362>
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d05c      	beq.n	800b246 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	68da      	ldr	r2, [r3, #12]
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	895b      	ldrh	r3, [r3, #10]
 800b198:	025b      	lsls	r3, r3, #9
 800b19a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	689b      	ldr	r3, [r3, #8]
 800b1a0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	68db      	ldr	r3, [r3, #12]
 800b1a6:	657b      	str	r3, [r7, #84]	; 0x54
 800b1a8:	e016      	b.n	800b1d8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7fe fc0d 	bl	80099ce <get_fat>
 800b1b4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b1b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d802      	bhi.n	800b1c2 <f_open+0x2de>
 800b1bc:	2302      	movs	r3, #2
 800b1be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b1c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b1c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1c8:	d102      	bne.n	800b1d0 <f_open+0x2ec>
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b1d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b1d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1d4:	1ad3      	subs	r3, r2, r3
 800b1d6:	657b      	str	r3, [r7, #84]	; 0x54
 800b1d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d103      	bne.n	800b1e8 <f_open+0x304>
 800b1e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b1e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d8e0      	bhi.n	800b1aa <f_open+0x2c6>
				}
				fp->clust = clst;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b1ec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b1ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d127      	bne.n	800b246 <f_open+0x362>
 800b1f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d022      	beq.n	800b246 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b204:	4618      	mov	r0, r3
 800b206:	f7fe fbc3 	bl	8009990 <clust2sect>
 800b20a:	6478      	str	r0, [r7, #68]	; 0x44
 800b20c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d103      	bne.n	800b21a <f_open+0x336>
						res = FR_INT_ERR;
 800b212:	2302      	movs	r3, #2
 800b214:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b218:	e015      	b.n	800b246 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b21a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b21c:	0a5a      	lsrs	r2, r3, #9
 800b21e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b220:	441a      	add	r2, r3
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	7858      	ldrb	r0, [r3, #1]
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	6a1a      	ldr	r2, [r3, #32]
 800b234:	2301      	movs	r3, #1
 800b236:	f7fd ffcf 	bl	80091d8 <disk_read>
 800b23a:	4603      	mov	r3, r0
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d002      	beq.n	800b246 <f_open+0x362>
 800b240:	2301      	movs	r3, #1
 800b242:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b246:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d002      	beq.n	800b254 <f_open+0x370>
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2200      	movs	r2, #0
 800b252:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800b25a:	4611      	mov	r1, r2
 800b25c:	4618      	mov	r0, r3
 800b25e:	f7fe f92f 	bl	80094c0 <unlock_fs>
 800b262:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b266:	4618      	mov	r0, r3
 800b268:	3760      	adds	r7, #96	; 0x60
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}

0800b26e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b26e:	b580      	push	{r7, lr}
 800b270:	b08c      	sub	sp, #48	; 0x30
 800b272:	af00      	add	r7, sp, #0
 800b274:	60f8      	str	r0, [r7, #12]
 800b276:	60b9      	str	r1, [r7, #8]
 800b278:	607a      	str	r2, [r7, #4]
 800b27a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	2200      	movs	r2, #0
 800b284:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	f107 0210 	add.w	r2, r7, #16
 800b28c:	4611      	mov	r1, r2
 800b28e:	4618      	mov	r0, r3
 800b290:	f7ff fd7c 	bl	800ad8c <validate>
 800b294:	4603      	mov	r3, r0
 800b296:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b29a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d107      	bne.n	800b2b2 <f_write+0x44>
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	7d5b      	ldrb	r3, [r3, #21]
 800b2a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b2aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d009      	beq.n	800b2c6 <f_write+0x58>
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b2b8:	4611      	mov	r1, r2
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7fe f900 	bl	80094c0 <unlock_fs>
 800b2c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b2c4:	e173      	b.n	800b5ae <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	7d1b      	ldrb	r3, [r3, #20]
 800b2ca:	f003 0302 	and.w	r3, r3, #2
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d106      	bne.n	800b2e0 <f_write+0x72>
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	2107      	movs	r1, #7
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7fe f8f2 	bl	80094c0 <unlock_fs>
 800b2dc:	2307      	movs	r3, #7
 800b2de:	e166      	b.n	800b5ae <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	699a      	ldr	r2, [r3, #24]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	441a      	add	r2, r3
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	699b      	ldr	r3, [r3, #24]
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	f080 814b 	bcs.w	800b588 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	699b      	ldr	r3, [r3, #24]
 800b2f6:	43db      	mvns	r3, r3
 800b2f8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b2fa:	e145      	b.n	800b588 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	699b      	ldr	r3, [r3, #24]
 800b300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b304:	2b00      	cmp	r3, #0
 800b306:	f040 8101 	bne.w	800b50c <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	699b      	ldr	r3, [r3, #24]
 800b30e:	0a5b      	lsrs	r3, r3, #9
 800b310:	693a      	ldr	r2, [r7, #16]
 800b312:	8952      	ldrh	r2, [r2, #10]
 800b314:	3a01      	subs	r2, #1
 800b316:	4013      	ands	r3, r2
 800b318:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b31a:	69bb      	ldr	r3, [r7, #24]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d14d      	bne.n	800b3bc <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	699b      	ldr	r3, [r3, #24]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d10c      	bne.n	800b342 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	689b      	ldr	r3, [r3, #8]
 800b32c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b330:	2b00      	cmp	r3, #0
 800b332:	d11a      	bne.n	800b36a <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2100      	movs	r1, #0
 800b338:	4618      	mov	r0, r3
 800b33a:	f7fe fd3f 	bl	8009dbc <create_chain>
 800b33e:	62b8      	str	r0, [r7, #40]	; 0x28
 800b340:	e013      	b.n	800b36a <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b346:	2b00      	cmp	r3, #0
 800b348:	d007      	beq.n	800b35a <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	699b      	ldr	r3, [r3, #24]
 800b34e:	4619      	mov	r1, r3
 800b350:	68f8      	ldr	r0, [r7, #12]
 800b352:	f7fe fdcb 	bl	8009eec <clmt_clust>
 800b356:	62b8      	str	r0, [r7, #40]	; 0x28
 800b358:	e007      	b.n	800b36a <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b35a:	68fa      	ldr	r2, [r7, #12]
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	69db      	ldr	r3, [r3, #28]
 800b360:	4619      	mov	r1, r3
 800b362:	4610      	mov	r0, r2
 800b364:	f7fe fd2a 	bl	8009dbc <create_chain>
 800b368:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	f000 8110 	beq.w	800b592 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b374:	2b01      	cmp	r3, #1
 800b376:	d109      	bne.n	800b38c <f_write+0x11e>
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2202      	movs	r2, #2
 800b37c:	755a      	strb	r2, [r3, #21]
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	2102      	movs	r1, #2
 800b382:	4618      	mov	r0, r3
 800b384:	f7fe f89c 	bl	80094c0 <unlock_fs>
 800b388:	2302      	movs	r3, #2
 800b38a:	e110      	b.n	800b5ae <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b38e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b392:	d109      	bne.n	800b3a8 <f_write+0x13a>
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2201      	movs	r2, #1
 800b398:	755a      	strb	r2, [r3, #21]
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	2101      	movs	r1, #1
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f7fe f88e 	bl	80094c0 <unlock_fs>
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	e102      	b.n	800b5ae <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3ac:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	689b      	ldr	r3, [r3, #8]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d102      	bne.n	800b3bc <f_write+0x14e>
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3ba:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	7d1b      	ldrb	r3, [r3, #20]
 800b3c0:	b25b      	sxtb	r3, r3
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	da1d      	bge.n	800b402 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	7858      	ldrb	r0, [r3, #1]
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	6a1a      	ldr	r2, [r3, #32]
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	f7fd ff1f 	bl	8009218 <disk_write>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d009      	beq.n	800b3f4 <f_write+0x186>
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	755a      	strb	r2, [r3, #21]
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	2101      	movs	r1, #1
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f7fe f868 	bl	80094c0 <unlock_fs>
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	e0dc      	b.n	800b5ae <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	7d1b      	ldrb	r3, [r3, #20]
 800b3f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3fc:	b2da      	uxtb	r2, r3
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b402:	693a      	ldr	r2, [r7, #16]
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	69db      	ldr	r3, [r3, #28]
 800b408:	4619      	mov	r1, r3
 800b40a:	4610      	mov	r0, r2
 800b40c:	f7fe fac0 	bl	8009990 <clust2sect>
 800b410:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d109      	bne.n	800b42c <f_write+0x1be>
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2202      	movs	r2, #2
 800b41c:	755a      	strb	r2, [r3, #21]
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	2102      	movs	r1, #2
 800b422:	4618      	mov	r0, r3
 800b424:	f7fe f84c 	bl	80094c0 <unlock_fs>
 800b428:	2302      	movs	r3, #2
 800b42a:	e0c0      	b.n	800b5ae <f_write+0x340>
			sect += csect;
 800b42c:	697a      	ldr	r2, [r7, #20]
 800b42e:	69bb      	ldr	r3, [r7, #24]
 800b430:	4413      	add	r3, r2
 800b432:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	0a5b      	lsrs	r3, r3, #9
 800b438:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b43a:	6a3b      	ldr	r3, [r7, #32]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d041      	beq.n	800b4c4 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b440:	69ba      	ldr	r2, [r7, #24]
 800b442:	6a3b      	ldr	r3, [r7, #32]
 800b444:	4413      	add	r3, r2
 800b446:	693a      	ldr	r2, [r7, #16]
 800b448:	8952      	ldrh	r2, [r2, #10]
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d905      	bls.n	800b45a <f_write+0x1ec>
					cc = fs->csize - csect;
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	895b      	ldrh	r3, [r3, #10]
 800b452:	461a      	mov	r2, r3
 800b454:	69bb      	ldr	r3, [r7, #24]
 800b456:	1ad3      	subs	r3, r2, r3
 800b458:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	7858      	ldrb	r0, [r3, #1]
 800b45e:	6a3b      	ldr	r3, [r7, #32]
 800b460:	697a      	ldr	r2, [r7, #20]
 800b462:	69f9      	ldr	r1, [r7, #28]
 800b464:	f7fd fed8 	bl	8009218 <disk_write>
 800b468:	4603      	mov	r3, r0
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d009      	beq.n	800b482 <f_write+0x214>
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	2201      	movs	r2, #1
 800b472:	755a      	strb	r2, [r3, #21]
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	2101      	movs	r1, #1
 800b478:	4618      	mov	r0, r3
 800b47a:	f7fe f821 	bl	80094c0 <unlock_fs>
 800b47e:	2301      	movs	r3, #1
 800b480:	e095      	b.n	800b5ae <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	6a1a      	ldr	r2, [r3, #32]
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	1ad3      	subs	r3, r2, r3
 800b48a:	6a3a      	ldr	r2, [r7, #32]
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d915      	bls.n	800b4bc <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	6a1a      	ldr	r2, [r3, #32]
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	1ad3      	subs	r3, r2, r3
 800b49e:	025b      	lsls	r3, r3, #9
 800b4a0:	69fa      	ldr	r2, [r7, #28]
 800b4a2:	4413      	add	r3, r2
 800b4a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	f7fd ff75 	bl	8009398 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	7d1b      	ldrb	r3, [r3, #20]
 800b4b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4b6:	b2da      	uxtb	r2, r3
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b4bc:	6a3b      	ldr	r3, [r7, #32]
 800b4be:	025b      	lsls	r3, r3, #9
 800b4c0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b4c2:	e044      	b.n	800b54e <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	6a1b      	ldr	r3, [r3, #32]
 800b4c8:	697a      	ldr	r2, [r7, #20]
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d01b      	beq.n	800b506 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	699a      	ldr	r2, [r3, #24]
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d215      	bcs.n	800b506 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b4da:	693b      	ldr	r3, [r7, #16]
 800b4dc:	7858      	ldrb	r0, [r3, #1]
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	697a      	ldr	r2, [r7, #20]
 800b4e8:	f7fd fe76 	bl	80091d8 <disk_read>
 800b4ec:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d009      	beq.n	800b506 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	2201      	movs	r2, #1
 800b4f6:	755a      	strb	r2, [r3, #21]
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	2101      	movs	r1, #1
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f7fd ffdf 	bl	80094c0 <unlock_fs>
 800b502:	2301      	movs	r3, #1
 800b504:	e053      	b.n	800b5ae <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	697a      	ldr	r2, [r7, #20]
 800b50a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	699b      	ldr	r3, [r3, #24]
 800b510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b514:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b518:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b51a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	429a      	cmp	r2, r3
 800b520:	d901      	bls.n	800b526 <f_write+0x2b8>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	699b      	ldr	r3, [r3, #24]
 800b530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b534:	4413      	add	r3, r2
 800b536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b538:	69f9      	ldr	r1, [r7, #28]
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7fd ff2c 	bl	8009398 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	7d1b      	ldrb	r3, [r3, #20]
 800b544:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b548:	b2da      	uxtb	r2, r3
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b54e:	69fa      	ldr	r2, [r7, #28]
 800b550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b552:	4413      	add	r3, r2
 800b554:	61fb      	str	r3, [r7, #28]
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	699a      	ldr	r2, [r3, #24]
 800b55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b55c:	441a      	add	r2, r3
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	619a      	str	r2, [r3, #24]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	68da      	ldr	r2, [r3, #12]
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	699b      	ldr	r3, [r3, #24]
 800b56a:	429a      	cmp	r2, r3
 800b56c:	bf38      	it	cc
 800b56e:	461a      	movcc	r2, r3
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	60da      	str	r2, [r3, #12]
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	681a      	ldr	r2, [r3, #0]
 800b578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b57a:	441a      	add	r2, r3
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	601a      	str	r2, [r3, #0]
 800b580:	687a      	ldr	r2, [r7, #4]
 800b582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b584:	1ad3      	subs	r3, r2, r3
 800b586:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	f47f aeb6 	bne.w	800b2fc <f_write+0x8e>
 800b590:	e000      	b.n	800b594 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b592:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	7d1b      	ldrb	r3, [r3, #20]
 800b598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b59c:	b2da      	uxtb	r2, r3
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	2100      	movs	r1, #0
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f7fd ff8a 	bl	80094c0 <unlock_fs>
 800b5ac:	2300      	movs	r3, #0
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3730      	adds	r7, #48	; 0x30
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}

0800b5b6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b5b6:	b580      	push	{r7, lr}
 800b5b8:	b086      	sub	sp, #24
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f107 0208 	add.w	r2, r7, #8
 800b5c4:	4611      	mov	r1, r2
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7ff fbe0 	bl	800ad8c <validate>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b5d0:	7dfb      	ldrb	r3, [r7, #23]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d16d      	bne.n	800b6b2 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	7d1b      	ldrb	r3, [r3, #20]
 800b5da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d067      	beq.n	800b6b2 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	7d1b      	ldrb	r3, [r3, #20]
 800b5e6:	b25b      	sxtb	r3, r3
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	da1a      	bge.n	800b622 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	7858      	ldrb	r0, [r3, #1]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6a1a      	ldr	r2, [r3, #32]
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	f7fd fe0c 	bl	8009218 <disk_write>
 800b600:	4603      	mov	r3, r0
 800b602:	2b00      	cmp	r3, #0
 800b604:	d006      	beq.n	800b614 <f_sync+0x5e>
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	2101      	movs	r1, #1
 800b60a:	4618      	mov	r0, r3
 800b60c:	f7fd ff58 	bl	80094c0 <unlock_fs>
 800b610:	2301      	movs	r3, #1
 800b612:	e055      	b.n	800b6c0 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	7d1b      	ldrb	r3, [r3, #20]
 800b618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b61c:	b2da      	uxtb	r2, r3
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b622:	f7fd fd3b 	bl	800909c <get_fattime>
 800b626:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b628:	68ba      	ldr	r2, [r7, #8]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b62e:	4619      	mov	r1, r3
 800b630:	4610      	mov	r0, r2
 800b632:	f7fe f911 	bl	8009858 <move_window>
 800b636:	4603      	mov	r3, r0
 800b638:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b63a:	7dfb      	ldrb	r3, [r7, #23]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d138      	bne.n	800b6b2 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b644:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	330b      	adds	r3, #11
 800b64a:	781a      	ldrb	r2, [r3, #0]
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	330b      	adds	r3, #11
 800b650:	f042 0220 	orr.w	r2, r2, #32
 800b654:	b2d2      	uxtb	r2, r2
 800b656:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6818      	ldr	r0, [r3, #0]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	689b      	ldr	r3, [r3, #8]
 800b660:	461a      	mov	r2, r3
 800b662:	68f9      	ldr	r1, [r7, #12]
 800b664:	f7fe fe1c 	bl	800a2a0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f103 021c 	add.w	r2, r3, #28
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	68db      	ldr	r3, [r3, #12]
 800b672:	4619      	mov	r1, r3
 800b674:	4610      	mov	r0, r2
 800b676:	f7fd fe63 	bl	8009340 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	3316      	adds	r3, #22
 800b67e:	6939      	ldr	r1, [r7, #16]
 800b680:	4618      	mov	r0, r3
 800b682:	f7fd fe5d 	bl	8009340 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	3312      	adds	r3, #18
 800b68a:	2100      	movs	r1, #0
 800b68c:	4618      	mov	r0, r3
 800b68e:	f7fd fe3c 	bl	800930a <st_word>
					fs->wflag = 1;
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	2201      	movs	r2, #1
 800b696:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	4618      	mov	r0, r3
 800b69c:	f7fe f90a 	bl	80098b4 <sync_fs>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	7d1b      	ldrb	r3, [r3, #20]
 800b6a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6ac:	b2da      	uxtb	r2, r3
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	7dfa      	ldrb	r2, [r7, #23]
 800b6b6:	4611      	mov	r1, r2
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7fd ff01 	bl	80094c0 <unlock_fs>
 800b6be:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3718      	adds	r7, #24
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b084      	sub	sp, #16
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f7ff ff70 	bl	800b5b6 <f_sync>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b6da:	7bfb      	ldrb	r3, [r7, #15]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d11d      	bne.n	800b71c <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f107 0208 	add.w	r2, r7, #8
 800b6e6:	4611      	mov	r1, r2
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f7ff fb4f 	bl	800ad8c <validate>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b6f2:	7bfb      	ldrb	r3, [r7, #15]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d111      	bne.n	800b71c <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	691b      	ldr	r3, [r3, #16]
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f7fe f807 	bl	8009710 <dec_lock>
 800b702:	4603      	mov	r3, r0
 800b704:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b706:	7bfb      	ldrb	r3, [r7, #15]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d102      	bne.n	800b712 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2200      	movs	r2, #0
 800b710:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	2100      	movs	r1, #0
 800b716:	4618      	mov	r0, r3
 800b718:	f7fd fed2 	bl	80094c0 <unlock_fs>
#endif
		}
	}
	return res;
 800b71c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3710      	adds	r7, #16
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}

0800b726 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800b726:	b580      	push	{r7, lr}
 800b728:	b086      	sub	sp, #24
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
 800b72e:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d101      	bne.n	800b73a <f_opendir+0x14>
 800b736:	2309      	movs	r3, #9
 800b738:	e06a      	b.n	800b810 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800b73e:	f107 010c 	add.w	r1, r7, #12
 800b742:	463b      	mov	r3, r7
 800b744:	2200      	movs	r2, #0
 800b746:	4618      	mov	r0, r3
 800b748:	f7ff f8cc 	bl	800a8e4 <find_volume>
 800b74c:	4603      	mov	r3, r0
 800b74e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b750:	7dfb      	ldrb	r3, [r7, #23]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d14f      	bne.n	800b7f6 <f_opendir+0xd0>
		obj->fs = fs;
 800b756:	68fa      	ldr	r2, [r7, #12]
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	4619      	mov	r1, r3
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f7fe ffb3 	bl	800a6cc <follow_path>
 800b766:	4603      	mov	r3, r0
 800b768:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800b76a:	7dfb      	ldrb	r3, [r7, #23]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d13d      	bne.n	800b7ec <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b776:	b25b      	sxtb	r3, r3
 800b778:	2b00      	cmp	r3, #0
 800b77a:	db12      	blt.n	800b7a2 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	799b      	ldrb	r3, [r3, #6]
 800b780:	f003 0310 	and.w	r3, r3, #16
 800b784:	2b00      	cmp	r3, #0
 800b786:	d00a      	beq.n	800b79e <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800b788:	68fa      	ldr	r2, [r7, #12]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6a1b      	ldr	r3, [r3, #32]
 800b78e:	4619      	mov	r1, r3
 800b790:	4610      	mov	r0, r2
 800b792:	f7fe fd66 	bl	800a262 <ld_clust>
 800b796:	4602      	mov	r2, r0
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	609a      	str	r2, [r3, #8]
 800b79c:	e001      	b.n	800b7a2 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800b79e:	2305      	movs	r3, #5
 800b7a0:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800b7a2:	7dfb      	ldrb	r3, [r7, #23]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d121      	bne.n	800b7ec <f_opendir+0xc6>
				obj->id = fs->id;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	88da      	ldrh	r2, [r3, #6]
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800b7b0:	2100      	movs	r1, #0
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f7fe fbce 	bl	8009f54 <dir_sdi>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800b7bc:	7dfb      	ldrb	r3, [r7, #23]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d114      	bne.n	800b7ec <f_opendir+0xc6>
					if (obj->sclust) {
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	689b      	ldr	r3, [r3, #8]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d00d      	beq.n	800b7e6 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800b7ca:	2100      	movs	r1, #0
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f7fd ff11 	bl	80095f4 <inc_lock>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	691b      	ldr	r3, [r3, #16]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d105      	bne.n	800b7ec <f_opendir+0xc6>
 800b7e0:	2312      	movs	r3, #18
 800b7e2:	75fb      	strb	r3, [r7, #23]
 800b7e4:	e002      	b.n	800b7ec <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800b7ec:	7dfb      	ldrb	r3, [r7, #23]
 800b7ee:	2b04      	cmp	r3, #4
 800b7f0:	d101      	bne.n	800b7f6 <f_opendir+0xd0>
 800b7f2:	2305      	movs	r3, #5
 800b7f4:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800b7f6:	7dfb      	ldrb	r3, [r7, #23]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d002      	beq.n	800b802 <f_opendir+0xdc>
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	2200      	movs	r2, #0
 800b800:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	7dfa      	ldrb	r2, [r7, #23]
 800b806:	4611      	mov	r1, r2
 800b808:	4618      	mov	r0, r3
 800b80a:	f7fd fe59 	bl	80094c0 <unlock_fs>
 800b80e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b810:	4618      	mov	r0, r3
 800b812:	3718      	adds	r7, #24
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}

0800b818 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b084      	sub	sp, #16
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f107 0208 	add.w	r2, r7, #8
 800b826:	4611      	mov	r1, r2
 800b828:	4618      	mov	r0, r3
 800b82a:	f7ff faaf 	bl	800ad8c <validate>
 800b82e:	4603      	mov	r3, r0
 800b830:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b832:	7bfb      	ldrb	r3, [r7, #15]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d115      	bne.n	800b864 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	691b      	ldr	r3, [r3, #16]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d006      	beq.n	800b84e <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	691b      	ldr	r3, [r3, #16]
 800b844:	4618      	mov	r0, r3
 800b846:	f7fd ff63 	bl	8009710 <dec_lock>
 800b84a:	4603      	mov	r3, r0
 800b84c:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800b84e:	7bfb      	ldrb	r3, [r7, #15]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d102      	bne.n	800b85a <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2200      	movs	r2, #0
 800b858:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	2100      	movs	r1, #0
 800b85e:	4618      	mov	r0, r3
 800b860:	f7fd fe2e 	bl	80094c0 <unlock_fs>
#endif
	}
	return res;
 800b864:	7bfb      	ldrb	r3, [r7, #15]
}
 800b866:	4618      	mov	r0, r3
 800b868:	3710      	adds	r7, #16
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}

0800b86e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b86e:	b580      	push	{r7, lr}
 800b870:	b084      	sub	sp, #16
 800b872:	af00      	add	r7, sp, #0
 800b874:	6078      	str	r0, [r7, #4]
 800b876:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f107 0208 	add.w	r2, r7, #8
 800b87e:	4611      	mov	r1, r2
 800b880:	4618      	mov	r0, r3
 800b882:	f7ff fa83 	bl	800ad8c <validate>
 800b886:	4603      	mov	r3, r0
 800b888:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b88a:	7bfb      	ldrb	r3, [r7, #15]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d126      	bne.n	800b8de <f_readdir+0x70>
		if (!fno) {
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d106      	bne.n	800b8a4 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800b896:	2100      	movs	r1, #0
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f7fe fb5b 	bl	8009f54 <dir_sdi>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	73fb      	strb	r3, [r7, #15]
 800b8a2:	e01c      	b.n	800b8de <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800b8a4:	2100      	movs	r1, #0
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f7fe fd1a 	bl	800a2e0 <dir_read>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800b8b0:	7bfb      	ldrb	r3, [r7, #15]
 800b8b2:	2b04      	cmp	r3, #4
 800b8b4:	d101      	bne.n	800b8ba <f_readdir+0x4c>
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800b8ba:	7bfb      	ldrb	r3, [r7, #15]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d10e      	bne.n	800b8de <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800b8c0:	6839      	ldr	r1, [r7, #0]
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f7fe fe0e 	bl	800a4e4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800b8c8:	2100      	movs	r1, #0
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f7fe fbbd 	bl	800a04a <dir_next>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800b8d4:	7bfb      	ldrb	r3, [r7, #15]
 800b8d6:	2b04      	cmp	r3, #4
 800b8d8:	d101      	bne.n	800b8de <f_readdir+0x70>
 800b8da:	2300      	movs	r3, #0
 800b8dc:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	7bfa      	ldrb	r2, [r7, #15]
 800b8e2:	4611      	mov	r1, r2
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7fd fdeb 	bl	80094c0 <unlock_fs>
 800b8ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3710      	adds	r7, #16
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}

0800b8f4 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b090      	sub	sp, #64	; 0x40
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800b8fe:	f107 010c 	add.w	r1, r7, #12
 800b902:	1d3b      	adds	r3, r7, #4
 800b904:	2200      	movs	r2, #0
 800b906:	4618      	mov	r0, r3
 800b908:	f7fe ffec 	bl	800a8e4 <find_volume>
 800b90c:	4603      	mov	r3, r0
 800b90e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800b912:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b916:	2b00      	cmp	r3, #0
 800b918:	d11f      	bne.n	800b95a <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b91a:	687a      	ldr	r2, [r7, #4]
 800b91c:	f107 030c 	add.w	r3, r7, #12
 800b920:	4611      	mov	r1, r2
 800b922:	4618      	mov	r0, r3
 800b924:	f7fe fed2 	bl	800a6cc <follow_path>
 800b928:	4603      	mov	r3, r0
 800b92a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800b92e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b932:	2b00      	cmp	r3, #0
 800b934:	d111      	bne.n	800b95a <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800b936:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b93a:	b25b      	sxtb	r3, r3
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	da03      	bge.n	800b948 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800b940:	2306      	movs	r3, #6
 800b942:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b946:	e008      	b.n	800b95a <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d005      	beq.n	800b95a <f_stat+0x66>
 800b94e:	f107 030c 	add.w	r3, r7, #12
 800b952:	6839      	ldr	r1, [r7, #0]
 800b954:	4618      	mov	r0, r3
 800b956:	f7fe fdc5 	bl	800a4e4 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800b960:	4611      	mov	r1, r2
 800b962:	4618      	mov	r0, r3
 800b964:	f7fd fdac 	bl	80094c0 <unlock_fs>
 800b968:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3740      	adds	r7, #64	; 0x40
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b09e      	sub	sp, #120	; 0x78
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800b97c:	2300      	movs	r3, #0
 800b97e:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800b980:	f107 010c 	add.w	r1, r7, #12
 800b984:	1d3b      	adds	r3, r7, #4
 800b986:	2202      	movs	r2, #2
 800b988:	4618      	mov	r0, r3
 800b98a:	f7fe ffab 	bl	800a8e4 <find_volume>
 800b98e:	4603      	mov	r3, r0
 800b990:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 800b998:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	f040 808e 	bne.w	800babe <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800b9a2:	687a      	ldr	r2, [r7, #4]
 800b9a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b9a8:	4611      	mov	r1, r2
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7fe fe8e 	bl	800a6cc <follow_path>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800b9b6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d108      	bne.n	800b9d0 <f_unlink+0x5c>
 800b9be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b9c2:	2102      	movs	r1, #2
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f7fd fd97 	bl	80094f8 <chk_lock>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800b9d0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d172      	bne.n	800babe <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800b9d8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b9dc:	b25b      	sxtb	r3, r3
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	da03      	bge.n	800b9ea <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800b9e2:	2306      	movs	r3, #6
 800b9e4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800b9e8:	e008      	b.n	800b9fc <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800b9ea:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800b9ee:	f003 0301 	and.w	r3, r3, #1
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d002      	beq.n	800b9fc <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800b9f6:	2307      	movs	r3, #7
 800b9f8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 800b9fc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d134      	bne.n	800ba6e <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ba08:	4611      	mov	r1, r2
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7fe fc29 	bl	800a262 <ld_clust>
 800ba10:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800ba12:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800ba16:	f003 0310 	and.w	r3, r3, #16
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d027      	beq.n	800ba6e <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800ba22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba24:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800ba26:	f107 0310 	add.w	r3, r7, #16
 800ba2a:	2100      	movs	r1, #0
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f7fe fa91 	bl	8009f54 <dir_sdi>
 800ba32:	4603      	mov	r3, r0
 800ba34:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 800ba38:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d116      	bne.n	800ba6e <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800ba40:	f107 0310 	add.w	r3, r7, #16
 800ba44:	2100      	movs	r1, #0
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7fe fc4a 	bl	800a2e0 <dir_read>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800ba52:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d102      	bne.n	800ba60 <f_unlink+0xec>
 800ba5a:	2307      	movs	r3, #7
 800ba5c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800ba60:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ba64:	2b04      	cmp	r3, #4
 800ba66:	d102      	bne.n	800ba6e <f_unlink+0xfa>
 800ba68:	2300      	movs	r3, #0
 800ba6a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800ba6e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d123      	bne.n	800babe <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800ba76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f7fe fd14 	bl	800a4a8 <dir_remove>
 800ba80:	4603      	mov	r3, r0
 800ba82:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800ba86:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d10c      	bne.n	800baa8 <f_unlink+0x134>
 800ba8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d009      	beq.n	800baa8 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800ba94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ba98:	2200      	movs	r2, #0
 800ba9a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f7fe f928 	bl	8009cf2 <remove_chain>
 800baa2:	4603      	mov	r3, r0
 800baa4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800baa8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800baac:	2b00      	cmp	r3, #0
 800baae:	d106      	bne.n	800babe <f_unlink+0x14a>
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	4618      	mov	r0, r3
 800bab4:	f7fd fefe 	bl	80098b4 <sync_fs>
 800bab8:	4603      	mov	r3, r0
 800baba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800bac4:	4611      	mov	r1, r2
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7fd fcfa 	bl	80094c0 <unlock_fs>
 800bacc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3778      	adds	r7, #120	; 0x78
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b096      	sub	sp, #88	; 0x58
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800bae0:	f107 0108 	add.w	r1, r7, #8
 800bae4:	1d3b      	adds	r3, r7, #4
 800bae6:	2202      	movs	r2, #2
 800bae8:	4618      	mov	r0, r3
 800baea:	f7fe fefb 	bl	800a8e4 <find_volume>
 800baee:	4603      	mov	r3, r0
 800baf0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800baf8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	f040 80ec 	bne.w	800bcda <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800bb02:	687a      	ldr	r2, [r7, #4]
 800bb04:	f107 030c 	add.w	r3, r7, #12
 800bb08:	4611      	mov	r1, r2
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7fe fdde 	bl	800a6cc <follow_path>
 800bb10:	4603      	mov	r3, r0
 800bb12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800bb16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d102      	bne.n	800bb24 <f_mkdir+0x4c>
 800bb1e:	2308      	movs	r3, #8
 800bb20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800bb24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bb28:	2b04      	cmp	r3, #4
 800bb2a:	f040 80d6 	bne.w	800bcda <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800bb2e:	f107 030c 	add.w	r3, r7, #12
 800bb32:	2100      	movs	r1, #0
 800bb34:	4618      	mov	r0, r3
 800bb36:	f7fe f941 	bl	8009dbc <create_chain>
 800bb3a:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	895b      	ldrh	r3, [r3, #10]
 800bb40:	025b      	lsls	r3, r3, #9
 800bb42:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800bb44:	2300      	movs	r3, #0
 800bb46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800bb4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d102      	bne.n	800bb56 <f_mkdir+0x7e>
 800bb50:	2307      	movs	r3, #7
 800bb52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800bb56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d102      	bne.n	800bb62 <f_mkdir+0x8a>
 800bb5c:	2302      	movs	r3, #2
 800bb5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800bb62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb68:	d102      	bne.n	800bb70 <f_mkdir+0x98>
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800bb70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d106      	bne.n	800bb86 <f_mkdir+0xae>
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7fd fe28 	bl	80097d0 <sync_window>
 800bb80:	4603      	mov	r3, r0
 800bb82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 800bb86:	f7fd fa89 	bl	800909c <get_fattime>
 800bb8a:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800bb8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d16a      	bne.n	800bc6a <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f7fd fef9 	bl	8009990 <clust2sect>
 800bb9e:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	3334      	adds	r3, #52	; 0x34
 800bba4:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 800bba6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bbaa:	2100      	movs	r1, #0
 800bbac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bbae:	f7fd fc14 	bl	80093da <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800bbb2:	220b      	movs	r2, #11
 800bbb4:	2120      	movs	r1, #32
 800bbb6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bbb8:	f7fd fc0f 	bl	80093da <mem_set>
					dir[DIR_Name] = '.';
 800bbbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbbe:	222e      	movs	r2, #46	; 0x2e
 800bbc0:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800bbc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbc4:	330b      	adds	r3, #11
 800bbc6:	2210      	movs	r2, #16
 800bbc8:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800bbca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbcc:	3316      	adds	r3, #22
 800bbce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f7fd fbb5 	bl	8009340 <st_dword>
					st_clust(fs, dir, dcl);
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bbda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f7fe fb5f 	bl	800a2a0 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800bbe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbe4:	3320      	adds	r3, #32
 800bbe6:	2220      	movs	r2, #32
 800bbe8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7fd fbd4 	bl	8009398 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800bbf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbf2:	3321      	adds	r3, #33	; 0x21
 800bbf4:	222e      	movs	r2, #46	; 0x2e
 800bbf6:	701a      	strb	r2, [r3, #0]
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	2b03      	cmp	r3, #3
 800bc02:	d106      	bne.n	800bc12 <f_mkdir+0x13a>
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d101      	bne.n	800bc12 <f_mkdir+0x13a>
 800bc0e:	2300      	movs	r3, #0
 800bc10:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800bc12:	68b8      	ldr	r0, [r7, #8]
 800bc14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc16:	3320      	adds	r3, #32
 800bc18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc1a:	4619      	mov	r1, r3
 800bc1c:	f7fe fb40 	bl	800a2a0 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	895b      	ldrh	r3, [r3, #10]
 800bc24:	653b      	str	r3, [r7, #80]	; 0x50
 800bc26:	e01b      	b.n	800bc60 <f_mkdir+0x188>
					fs->winsect = dsc++;
 800bc28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc2a:	1c5a      	adds	r2, r3, #1
 800bc2c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800bc2e:	68ba      	ldr	r2, [r7, #8]
 800bc30:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	2201      	movs	r2, #1
 800bc36:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f7fd fdc8 	bl	80097d0 <sync_window>
 800bc40:	4603      	mov	r3, r0
 800bc42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 800bc46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d10c      	bne.n	800bc68 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 800bc4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc52:	2100      	movs	r1, #0
 800bc54:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bc56:	f7fd fbc0 	bl	80093da <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800bc5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc5c:	3b01      	subs	r3, #1
 800bc5e:	653b      	str	r3, [r7, #80]	; 0x50
 800bc60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d1e0      	bne.n	800bc28 <f_mkdir+0x150>
 800bc66:	e000      	b.n	800bc6a <f_mkdir+0x192>
					if (res != FR_OK) break;
 800bc68:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800bc6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d107      	bne.n	800bc82 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800bc72:	f107 030c 	add.w	r3, r7, #12
 800bc76:	4618      	mov	r0, r3
 800bc78:	f7fe fbe4 	bl	800a444 <dir_register>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 800bc82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d120      	bne.n	800bccc <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800bc8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc8c:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800bc8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc90:	3316      	adds	r3, #22
 800bc92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bc94:	4618      	mov	r0, r3
 800bc96:	f7fd fb53 	bl	8009340 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bca0:	4618      	mov	r0, r3
 800bca2:	f7fe fafd 	bl	800a2a0 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800bca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bca8:	330b      	adds	r3, #11
 800bcaa:	2210      	movs	r2, #16
 800bcac:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800bcb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d10e      	bne.n	800bcda <f_mkdir+0x202>
					res = sync_fs(fs);
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f7fd fdf8 	bl	80098b4 <sync_fs>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800bcca:	e006      	b.n	800bcda <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800bccc:	f107 030c 	add.w	r3, r7, #12
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f7fe f80c 	bl	8009cf2 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800bce0:	4611      	mov	r1, r2
 800bce2:	4618      	mov	r0, r3
 800bce4:	f7fd fbec 	bl	80094c0 <unlock_fs>
 800bce8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3758      	adds	r7, #88	; 0x58
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}

0800bcf4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b087      	sub	sp, #28
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	60f8      	str	r0, [r7, #12]
 800bcfc:	60b9      	str	r1, [r7, #8]
 800bcfe:	4613      	mov	r3, r2
 800bd00:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bd02:	2301      	movs	r3, #1
 800bd04:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bd06:	2300      	movs	r3, #0
 800bd08:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bd0a:	4b1f      	ldr	r3, [pc, #124]	; (800bd88 <FATFS_LinkDriverEx+0x94>)
 800bd0c:	7a5b      	ldrb	r3, [r3, #9]
 800bd0e:	b2db      	uxtb	r3, r3
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d131      	bne.n	800bd78 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bd14:	4b1c      	ldr	r3, [pc, #112]	; (800bd88 <FATFS_LinkDriverEx+0x94>)
 800bd16:	7a5b      	ldrb	r3, [r3, #9]
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	4b1a      	ldr	r3, [pc, #104]	; (800bd88 <FATFS_LinkDriverEx+0x94>)
 800bd1e:	2100      	movs	r1, #0
 800bd20:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bd22:	4b19      	ldr	r3, [pc, #100]	; (800bd88 <FATFS_LinkDriverEx+0x94>)
 800bd24:	7a5b      	ldrb	r3, [r3, #9]
 800bd26:	b2db      	uxtb	r3, r3
 800bd28:	4a17      	ldr	r2, [pc, #92]	; (800bd88 <FATFS_LinkDriverEx+0x94>)
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	4413      	add	r3, r2
 800bd2e:	68fa      	ldr	r2, [r7, #12]
 800bd30:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bd32:	4b15      	ldr	r3, [pc, #84]	; (800bd88 <FATFS_LinkDriverEx+0x94>)
 800bd34:	7a5b      	ldrb	r3, [r3, #9]
 800bd36:	b2db      	uxtb	r3, r3
 800bd38:	461a      	mov	r2, r3
 800bd3a:	4b13      	ldr	r3, [pc, #76]	; (800bd88 <FATFS_LinkDriverEx+0x94>)
 800bd3c:	4413      	add	r3, r2
 800bd3e:	79fa      	ldrb	r2, [r7, #7]
 800bd40:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bd42:	4b11      	ldr	r3, [pc, #68]	; (800bd88 <FATFS_LinkDriverEx+0x94>)
 800bd44:	7a5b      	ldrb	r3, [r3, #9]
 800bd46:	b2db      	uxtb	r3, r3
 800bd48:	1c5a      	adds	r2, r3, #1
 800bd4a:	b2d1      	uxtb	r1, r2
 800bd4c:	4a0e      	ldr	r2, [pc, #56]	; (800bd88 <FATFS_LinkDriverEx+0x94>)
 800bd4e:	7251      	strb	r1, [r2, #9]
 800bd50:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bd52:	7dbb      	ldrb	r3, [r7, #22]
 800bd54:	3330      	adds	r3, #48	; 0x30
 800bd56:	b2da      	uxtb	r2, r3
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	3301      	adds	r3, #1
 800bd60:	223a      	movs	r2, #58	; 0x3a
 800bd62:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	3302      	adds	r3, #2
 800bd68:	222f      	movs	r2, #47	; 0x2f
 800bd6a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	3303      	adds	r3, #3
 800bd70:	2200      	movs	r2, #0
 800bd72:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bd74:	2300      	movs	r3, #0
 800bd76:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bd78:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	371c      	adds	r7, #28
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd84:	4770      	bx	lr
 800bd86:	bf00      	nop
 800bd88:	20006120 	.word	0x20006120

0800bd8c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b082      	sub	sp, #8
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bd96:	2200      	movs	r2, #0
 800bd98:	6839      	ldr	r1, [r7, #0]
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f7ff ffaa 	bl	800bcf4 <FATFS_LinkDriverEx>
 800bda0:	4603      	mov	r3, r0
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3708      	adds	r7, #8
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}

0800bdaa <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800bdaa:	b580      	push	{r7, lr}
 800bdac:	b086      	sub	sp, #24
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	6039      	str	r1, [r7, #0]
 800bdb4:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	60fb      	str	r3, [r7, #12]
 800bdba:	2300      	movs	r3, #0
 800bdbc:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800bdbe:	f107 030c 	add.w	r3, r7, #12
 800bdc2:	2101      	movs	r1, #1
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f000 f8dd 	bl	800bf84 <osSemaphoreCreate>
 800bdca:	4602      	mov	r2, r0
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	bf14      	ite	ne
 800bdd8:	2301      	movne	r3, #1
 800bdda:	2300      	moveq	r3, #0
 800bddc:	b2db      	uxtb	r3, r3
 800bdde:	617b      	str	r3, [r7, #20]

    return ret;
 800bde0:	697b      	ldr	r3, [r7, #20]
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3718      	adds	r7, #24
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}

0800bdea <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800bdea:	b580      	push	{r7, lr}
 800bdec:	b082      	sub	sp, #8
 800bdee:	af00      	add	r7, sp, #0
 800bdf0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f000 f97c 	bl	800c0f0 <osSemaphoreDelete>
#endif
    return 1;
 800bdf8:	2301      	movs	r3, #1
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3708      	adds	r7, #8
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}

0800be02 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800be02:	b580      	push	{r7, lr}
 800be04:	b084      	sub	sp, #16
 800be06:	af00      	add	r7, sp, #0
 800be08:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800be0a:	2300      	movs	r3, #0
 800be0c:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800be0e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f000 f8e8 	bl	800bfe8 <osSemaphoreWait>
 800be18:	4603      	mov	r3, r0
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d101      	bne.n	800be22 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800be1e:	2301      	movs	r3, #1
 800be20:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800be22:	68fb      	ldr	r3, [r7, #12]
}
 800be24:	4618      	mov	r0, r3
 800be26:	3710      	adds	r7, #16
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}

0800be2c <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b082      	sub	sp, #8
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f000 f925 	bl	800c084 <osSemaphoreRelease>
#endif
}
 800be3a:	bf00      	nop
 800be3c:	3708      	adds	r7, #8
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}

0800be42 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800be42:	b480      	push	{r7}
 800be44:	b085      	sub	sp, #20
 800be46:	af00      	add	r7, sp, #0
 800be48:	4603      	mov	r3, r0
 800be4a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800be4c:	2300      	movs	r3, #0
 800be4e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800be50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800be54:	2b84      	cmp	r3, #132	; 0x84
 800be56:	d005      	beq.n	800be64 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800be58:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	4413      	add	r3, r2
 800be60:	3303      	adds	r3, #3
 800be62:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800be64:	68fb      	ldr	r3, [r7, #12]
}
 800be66:	4618      	mov	r0, r3
 800be68:	3714      	adds	r7, #20
 800be6a:	46bd      	mov	sp, r7
 800be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be70:	4770      	bx	lr

0800be72 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800be72:	b480      	push	{r7}
 800be74:	b083      	sub	sp, #12
 800be76:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be78:	f3ef 8305 	mrs	r3, IPSR
 800be7c:	607b      	str	r3, [r7, #4]
  return(result);
 800be7e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800be80:	2b00      	cmp	r3, #0
 800be82:	bf14      	ite	ne
 800be84:	2301      	movne	r3, #1
 800be86:	2300      	moveq	r3, #0
 800be88:	b2db      	uxtb	r3, r3
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	370c      	adds	r7, #12
 800be8e:	46bd      	mov	sp, r7
 800be90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be94:	4770      	bx	lr

0800be96 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800be96:	b580      	push	{r7, lr}
 800be98:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800be9a:	f001 f9a3 	bl	800d1e4 <vTaskStartScheduler>
  
  return osOK;
 800be9e:	2300      	movs	r3, #0
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	bd80      	pop	{r7, pc}

0800bea4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800bea8:	f7ff ffe3 	bl	800be72 <inHandlerMode>
 800beac:	4603      	mov	r3, r0
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d003      	beq.n	800beba <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800beb2:	f001 fabb 	bl	800d42c <xTaskGetTickCountFromISR>
 800beb6:	4603      	mov	r3, r0
 800beb8:	e002      	b.n	800bec0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800beba:	f001 faa7 	bl	800d40c <xTaskGetTickCount>
 800bebe:	4603      	mov	r3, r0
  }
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	bd80      	pop	{r7, pc}

0800bec4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bec6:	b089      	sub	sp, #36	; 0x24
 800bec8:	af04      	add	r7, sp, #16
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	695b      	ldr	r3, [r3, #20]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d020      	beq.n	800bf18 <osThreadCreate+0x54>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	699b      	ldr	r3, [r3, #24]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d01c      	beq.n	800bf18 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	685c      	ldr	r4, [r3, #4]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	691e      	ldr	r6, [r3, #16]
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bef0:	4618      	mov	r0, r3
 800bef2:	f7ff ffa6 	bl	800be42 <makeFreeRtosPriority>
 800bef6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	695b      	ldr	r3, [r3, #20]
 800befc:	687a      	ldr	r2, [r7, #4]
 800befe:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf00:	9202      	str	r2, [sp, #8]
 800bf02:	9301      	str	r3, [sp, #4]
 800bf04:	9100      	str	r1, [sp, #0]
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	4632      	mov	r2, r6
 800bf0a:	4629      	mov	r1, r5
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	f000 ff8b 	bl	800ce28 <xTaskCreateStatic>
 800bf12:	4603      	mov	r3, r0
 800bf14:	60fb      	str	r3, [r7, #12]
 800bf16:	e01c      	b.n	800bf52 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	685c      	ldr	r4, [r3, #4]
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf24:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f7ff ff88 	bl	800be42 <makeFreeRtosPriority>
 800bf32:	4602      	mov	r2, r0
 800bf34:	f107 030c 	add.w	r3, r7, #12
 800bf38:	9301      	str	r3, [sp, #4]
 800bf3a:	9200      	str	r2, [sp, #0]
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	4632      	mov	r2, r6
 800bf40:	4629      	mov	r1, r5
 800bf42:	4620      	mov	r0, r4
 800bf44:	f000 ffcd 	bl	800cee2 <xTaskCreate>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	d001      	beq.n	800bf52 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	e000      	b.n	800bf54 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bf52:	68fb      	ldr	r3, [r7, #12]
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3714      	adds	r7, #20
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bf5c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b084      	sub	sp, #16
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d001      	beq.n	800bf72 <osDelay+0x16>
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	e000      	b.n	800bf74 <osDelay+0x18>
 800bf72:	2301      	movs	r3, #1
 800bf74:	4618      	mov	r0, r3
 800bf76:	f001 f901 	bl	800d17c <vTaskDelay>
  
  return osOK;
 800bf7a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3710      	adds	r7, #16
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b086      	sub	sp, #24
 800bf88:	af02      	add	r7, sp, #8
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d00f      	beq.n	800bfb6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	d10a      	bne.n	800bfb2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	685b      	ldr	r3, [r3, #4]
 800bfa0:	2203      	movs	r2, #3
 800bfa2:	9200      	str	r2, [sp, #0]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	2100      	movs	r1, #0
 800bfa8:	2001      	movs	r0, #1
 800bfaa:	f000 f9dd 	bl	800c368 <xQueueGenericCreateStatic>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	e016      	b.n	800bfe0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	e014      	b.n	800bfe0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	2b01      	cmp	r3, #1
 800bfba:	d110      	bne.n	800bfde <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800bfbc:	2203      	movs	r2, #3
 800bfbe:	2100      	movs	r1, #0
 800bfc0:	2001      	movs	r0, #1
 800bfc2:	f000 fa49 	bl	800c458 <xQueueGenericCreate>
 800bfc6:	60f8      	str	r0, [r7, #12]
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d005      	beq.n	800bfda <osSemaphoreCreate+0x56>
 800bfce:	2300      	movs	r3, #0
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	2100      	movs	r1, #0
 800bfd4:	68f8      	ldr	r0, [r7, #12]
 800bfd6:	f000 fa99 	bl	800c50c <xQueueGenericSend>
      return sema;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	e000      	b.n	800bfe0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800bfde:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3710      	adds	r7, #16
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}

0800bfe8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b084      	sub	sp, #16
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
 800bff0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800bff2:	2300      	movs	r3, #0
 800bff4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d101      	bne.n	800c000 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800bffc:	2380      	movs	r3, #128	; 0x80
 800bffe:	e03a      	b.n	800c076 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800c000:	2300      	movs	r3, #0
 800c002:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c00a:	d103      	bne.n	800c014 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800c00c:	f04f 33ff 	mov.w	r3, #4294967295
 800c010:	60fb      	str	r3, [r7, #12]
 800c012:	e009      	b.n	800c028 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d006      	beq.n	800c028 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d101      	bne.n	800c028 <osSemaphoreWait+0x40>
      ticks = 1;
 800c024:	2301      	movs	r3, #1
 800c026:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c028:	f7ff ff23 	bl	800be72 <inHandlerMode>
 800c02c:	4603      	mov	r3, r0
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d017      	beq.n	800c062 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c032:	f107 0308 	add.w	r3, r7, #8
 800c036:	461a      	mov	r2, r3
 800c038:	2100      	movs	r1, #0
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f000 fcfe 	bl	800ca3c <xQueueReceiveFromISR>
 800c040:	4603      	mov	r3, r0
 800c042:	2b01      	cmp	r3, #1
 800c044:	d001      	beq.n	800c04a <osSemaphoreWait+0x62>
      return osErrorOS;
 800c046:	23ff      	movs	r3, #255	; 0xff
 800c048:	e015      	b.n	800c076 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d011      	beq.n	800c074 <osSemaphoreWait+0x8c>
 800c050:	4b0b      	ldr	r3, [pc, #44]	; (800c080 <osSemaphoreWait+0x98>)
 800c052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c056:	601a      	str	r2, [r3, #0]
 800c058:	f3bf 8f4f 	dsb	sy
 800c05c:	f3bf 8f6f 	isb	sy
 800c060:	e008      	b.n	800c074 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800c062:	68f9      	ldr	r1, [r7, #12]
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f000 fbdd 	bl	800c824 <xQueueSemaphoreTake>
 800c06a:	4603      	mov	r3, r0
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d001      	beq.n	800c074 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800c070:	23ff      	movs	r3, #255	; 0xff
 800c072:	e000      	b.n	800c076 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800c074:	2300      	movs	r3, #0
}
 800c076:	4618      	mov	r0, r3
 800c078:	3710      	adds	r7, #16
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
 800c07e:	bf00      	nop
 800c080:	e000ed04 	.word	0xe000ed04

0800c084 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b084      	sub	sp, #16
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c08c:	2300      	movs	r3, #0
 800c08e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c090:	2300      	movs	r3, #0
 800c092:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800c094:	f7ff feed 	bl	800be72 <inHandlerMode>
 800c098:	4603      	mov	r3, r0
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d016      	beq.n	800c0cc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c09e:	f107 0308 	add.w	r3, r7, #8
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f000 fb2f 	bl	800c708 <xQueueGiveFromISR>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	2b01      	cmp	r3, #1
 800c0ae:	d001      	beq.n	800c0b4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800c0b0:	23ff      	movs	r3, #255	; 0xff
 800c0b2:	e017      	b.n	800c0e4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d013      	beq.n	800c0e2 <osSemaphoreRelease+0x5e>
 800c0ba:	4b0c      	ldr	r3, [pc, #48]	; (800c0ec <osSemaphoreRelease+0x68>)
 800c0bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0c0:	601a      	str	r2, [r3, #0]
 800c0c2:	f3bf 8f4f 	dsb	sy
 800c0c6:	f3bf 8f6f 	isb	sy
 800c0ca:	e00a      	b.n	800c0e2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	2100      	movs	r1, #0
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f000 fa1a 	bl	800c50c <xQueueGenericSend>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	2b01      	cmp	r3, #1
 800c0dc:	d001      	beq.n	800c0e2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800c0de:	23ff      	movs	r3, #255	; 0xff
 800c0e0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3710      	adds	r7, #16
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}
 800c0ec:	e000ed04 	.word	0xe000ed04

0800c0f0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b082      	sub	sp, #8
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800c0f8:	f7ff febb 	bl	800be72 <inHandlerMode>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d001      	beq.n	800c106 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800c102:	2382      	movs	r3, #130	; 0x82
 800c104:	e003      	b.n	800c10e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f000 fd18 	bl	800cb3c <vQueueDelete>

  return osOK; 
 800c10c:	2300      	movs	r3, #0
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3708      	adds	r7, #8
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}

0800c116 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 800c116:	b480      	push	{r7}
 800c118:	b083      	sub	sp, #12
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	6078      	str	r0, [r7, #4]
 800c11e:	6039      	str	r1, [r7, #0]
  return osOK;
#else
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
 800c120:	2381      	movs	r3, #129	; 0x81
#endif
}
 800c122:	4618      	mov	r0, r3
 800c124:	370c      	adds	r7, #12
 800c126:	46bd      	mov	sp, r7
 800c128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12c:	4770      	bx	lr

0800c12e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c12e:	b480      	push	{r7}
 800c130:	b083      	sub	sp, #12
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f103 0208 	add.w	r2, r3, #8
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f04f 32ff 	mov.w	r2, #4294967295
 800c146:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f103 0208 	add.w	r2, r3, #8
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f103 0208 	add.w	r2, r3, #8
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2200      	movs	r2, #0
 800c160:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c162:	bf00      	nop
 800c164:	370c      	adds	r7, #12
 800c166:	46bd      	mov	sp, r7
 800c168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16c:	4770      	bx	lr

0800c16e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c16e:	b480      	push	{r7}
 800c170:	b083      	sub	sp, #12
 800c172:	af00      	add	r7, sp, #0
 800c174:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2200      	movs	r2, #0
 800c17a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c17c:	bf00      	nop
 800c17e:	370c      	adds	r7, #12
 800c180:	46bd      	mov	sp, r7
 800c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c186:	4770      	bx	lr

0800c188 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c188:	b480      	push	{r7}
 800c18a:	b085      	sub	sp, #20
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
 800c190:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	685b      	ldr	r3, [r3, #4]
 800c196:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	68fa      	ldr	r2, [r7, #12]
 800c19c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	689a      	ldr	r2, [r3, #8]
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	689b      	ldr	r3, [r3, #8]
 800c1aa:	683a      	ldr	r2, [r7, #0]
 800c1ac:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	683a      	ldr	r2, [r7, #0]
 800c1b2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	687a      	ldr	r2, [r7, #4]
 800c1b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	1c5a      	adds	r2, r3, #1
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	601a      	str	r2, [r3, #0]
}
 800c1c4:	bf00      	nop
 800c1c6:	3714      	adds	r7, #20
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ce:	4770      	bx	lr

0800c1d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b085      	sub	sp, #20
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1e6:	d103      	bne.n	800c1f0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	691b      	ldr	r3, [r3, #16]
 800c1ec:	60fb      	str	r3, [r7, #12]
 800c1ee:	e00c      	b.n	800c20a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	3308      	adds	r3, #8
 800c1f4:	60fb      	str	r3, [r7, #12]
 800c1f6:	e002      	b.n	800c1fe <vListInsert+0x2e>
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	685b      	ldr	r3, [r3, #4]
 800c1fc:	60fb      	str	r3, [r7, #12]
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	685b      	ldr	r3, [r3, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	68ba      	ldr	r2, [r7, #8]
 800c206:	429a      	cmp	r2, r3
 800c208:	d2f6      	bcs.n	800c1f8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	685a      	ldr	r2, [r3, #4]
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	685b      	ldr	r3, [r3, #4]
 800c216:	683a      	ldr	r2, [r7, #0]
 800c218:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	68fa      	ldr	r2, [r7, #12]
 800c21e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	683a      	ldr	r2, [r7, #0]
 800c224:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	687a      	ldr	r2, [r7, #4]
 800c22a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	1c5a      	adds	r2, r3, #1
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	601a      	str	r2, [r3, #0]
}
 800c236:	bf00      	nop
 800c238:	3714      	adds	r7, #20
 800c23a:	46bd      	mov	sp, r7
 800c23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c240:	4770      	bx	lr

0800c242 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c242:	b480      	push	{r7}
 800c244:	b085      	sub	sp, #20
 800c246:	af00      	add	r7, sp, #0
 800c248:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	691b      	ldr	r3, [r3, #16]
 800c24e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	685b      	ldr	r3, [r3, #4]
 800c254:	687a      	ldr	r2, [r7, #4]
 800c256:	6892      	ldr	r2, [r2, #8]
 800c258:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	689b      	ldr	r3, [r3, #8]
 800c25e:	687a      	ldr	r2, [r7, #4]
 800c260:	6852      	ldr	r2, [r2, #4]
 800c262:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	685b      	ldr	r3, [r3, #4]
 800c268:	687a      	ldr	r2, [r7, #4]
 800c26a:	429a      	cmp	r2, r3
 800c26c:	d103      	bne.n	800c276 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	689a      	ldr	r2, [r3, #8]
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2200      	movs	r2, #0
 800c27a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	1e5a      	subs	r2, r3, #1
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	681b      	ldr	r3, [r3, #0]
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3714      	adds	r7, #20
 800c28e:	46bd      	mov	sp, r7
 800c290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c294:	4770      	bx	lr
	...

0800c298 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b084      	sub	sp, #16
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d10a      	bne.n	800c2c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b0:	f383 8811 	msr	BASEPRI, r3
 800c2b4:	f3bf 8f6f 	isb	sy
 800c2b8:	f3bf 8f4f 	dsb	sy
 800c2bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c2be:	bf00      	nop
 800c2c0:	e7fe      	b.n	800c2c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c2c2:	f001 ff0f 	bl	800e0e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	681a      	ldr	r2, [r3, #0]
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2ce:	68f9      	ldr	r1, [r7, #12]
 800c2d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c2d2:	fb01 f303 	mul.w	r3, r1, r3
 800c2d6:	441a      	add	r2, r3
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681a      	ldr	r2, [r3, #0]
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	681a      	ldr	r2, [r3, #0]
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2f2:	3b01      	subs	r3, #1
 800c2f4:	68f9      	ldr	r1, [r7, #12]
 800c2f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c2f8:	fb01 f303 	mul.w	r3, r1, r3
 800c2fc:	441a      	add	r2, r3
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	22ff      	movs	r2, #255	; 0xff
 800c306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	22ff      	movs	r2, #255	; 0xff
 800c30e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d114      	bne.n	800c342 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	691b      	ldr	r3, [r3, #16]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d01a      	beq.n	800c356 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	3310      	adds	r3, #16
 800c324:	4618      	mov	r0, r3
 800c326:	f001 f9d1 	bl	800d6cc <xTaskRemoveFromEventList>
 800c32a:	4603      	mov	r3, r0
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d012      	beq.n	800c356 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c330:	4b0c      	ldr	r3, [pc, #48]	; (800c364 <xQueueGenericReset+0xcc>)
 800c332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c336:	601a      	str	r2, [r3, #0]
 800c338:	f3bf 8f4f 	dsb	sy
 800c33c:	f3bf 8f6f 	isb	sy
 800c340:	e009      	b.n	800c356 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	3310      	adds	r3, #16
 800c346:	4618      	mov	r0, r3
 800c348:	f7ff fef1 	bl	800c12e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	3324      	adds	r3, #36	; 0x24
 800c350:	4618      	mov	r0, r3
 800c352:	f7ff feec 	bl	800c12e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c356:	f001 fef5 	bl	800e144 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c35a:	2301      	movs	r3, #1
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3710      	adds	r7, #16
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}
 800c364:	e000ed04 	.word	0xe000ed04

0800c368 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b08e      	sub	sp, #56	; 0x38
 800c36c:	af02      	add	r7, sp, #8
 800c36e:	60f8      	str	r0, [r7, #12]
 800c370:	60b9      	str	r1, [r7, #8]
 800c372:	607a      	str	r2, [r7, #4]
 800c374:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d10a      	bne.n	800c392 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c380:	f383 8811 	msr	BASEPRI, r3
 800c384:	f3bf 8f6f 	isb	sy
 800c388:	f3bf 8f4f 	dsb	sy
 800c38c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c38e:	bf00      	nop
 800c390:	e7fe      	b.n	800c390 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d10a      	bne.n	800c3ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c39c:	f383 8811 	msr	BASEPRI, r3
 800c3a0:	f3bf 8f6f 	isb	sy
 800c3a4:	f3bf 8f4f 	dsb	sy
 800c3a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c3aa:	bf00      	nop
 800c3ac:	e7fe      	b.n	800c3ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d002      	beq.n	800c3ba <xQueueGenericCreateStatic+0x52>
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d001      	beq.n	800c3be <xQueueGenericCreateStatic+0x56>
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	e000      	b.n	800c3c0 <xQueueGenericCreateStatic+0x58>
 800c3be:	2300      	movs	r3, #0
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d10a      	bne.n	800c3da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c8:	f383 8811 	msr	BASEPRI, r3
 800c3cc:	f3bf 8f6f 	isb	sy
 800c3d0:	f3bf 8f4f 	dsb	sy
 800c3d4:	623b      	str	r3, [r7, #32]
}
 800c3d6:	bf00      	nop
 800c3d8:	e7fe      	b.n	800c3d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d102      	bne.n	800c3e6 <xQueueGenericCreateStatic+0x7e>
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d101      	bne.n	800c3ea <xQueueGenericCreateStatic+0x82>
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	e000      	b.n	800c3ec <xQueueGenericCreateStatic+0x84>
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d10a      	bne.n	800c406 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f4:	f383 8811 	msr	BASEPRI, r3
 800c3f8:	f3bf 8f6f 	isb	sy
 800c3fc:	f3bf 8f4f 	dsb	sy
 800c400:	61fb      	str	r3, [r7, #28]
}
 800c402:	bf00      	nop
 800c404:	e7fe      	b.n	800c404 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c406:	2348      	movs	r3, #72	; 0x48
 800c408:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c40a:	697b      	ldr	r3, [r7, #20]
 800c40c:	2b48      	cmp	r3, #72	; 0x48
 800c40e:	d00a      	beq.n	800c426 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c414:	f383 8811 	msr	BASEPRI, r3
 800c418:	f3bf 8f6f 	isb	sy
 800c41c:	f3bf 8f4f 	dsb	sy
 800c420:	61bb      	str	r3, [r7, #24]
}
 800c422:	bf00      	nop
 800c424:	e7fe      	b.n	800c424 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c426:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d00d      	beq.n	800c44e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c434:	2201      	movs	r2, #1
 800c436:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c43a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c440:	9300      	str	r3, [sp, #0]
 800c442:	4613      	mov	r3, r2
 800c444:	687a      	ldr	r2, [r7, #4]
 800c446:	68b9      	ldr	r1, [r7, #8]
 800c448:	68f8      	ldr	r0, [r7, #12]
 800c44a:	f000 f83f 	bl	800c4cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c450:	4618      	mov	r0, r3
 800c452:	3730      	adds	r7, #48	; 0x30
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b08a      	sub	sp, #40	; 0x28
 800c45c:	af02      	add	r7, sp, #8
 800c45e:	60f8      	str	r0, [r7, #12]
 800c460:	60b9      	str	r1, [r7, #8]
 800c462:	4613      	mov	r3, r2
 800c464:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d10a      	bne.n	800c482 <xQueueGenericCreate+0x2a>
	__asm volatile
 800c46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c470:	f383 8811 	msr	BASEPRI, r3
 800c474:	f3bf 8f6f 	isb	sy
 800c478:	f3bf 8f4f 	dsb	sy
 800c47c:	613b      	str	r3, [r7, #16]
}
 800c47e:	bf00      	nop
 800c480:	e7fe      	b.n	800c480 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	68ba      	ldr	r2, [r7, #8]
 800c486:	fb02 f303 	mul.w	r3, r2, r3
 800c48a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c48c:	69fb      	ldr	r3, [r7, #28]
 800c48e:	3348      	adds	r3, #72	; 0x48
 800c490:	4618      	mov	r0, r3
 800c492:	f001 ff49 	bl	800e328 <pvPortMalloc>
 800c496:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c498:	69bb      	ldr	r3, [r7, #24]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d011      	beq.n	800c4c2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c49e:	69bb      	ldr	r3, [r7, #24]
 800c4a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	3348      	adds	r3, #72	; 0x48
 800c4a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c4a8:	69bb      	ldr	r3, [r7, #24]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c4b0:	79fa      	ldrb	r2, [r7, #7]
 800c4b2:	69bb      	ldr	r3, [r7, #24]
 800c4b4:	9300      	str	r3, [sp, #0]
 800c4b6:	4613      	mov	r3, r2
 800c4b8:	697a      	ldr	r2, [r7, #20]
 800c4ba:	68b9      	ldr	r1, [r7, #8]
 800c4bc:	68f8      	ldr	r0, [r7, #12]
 800c4be:	f000 f805 	bl	800c4cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c4c2:	69bb      	ldr	r3, [r7, #24]
	}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3720      	adds	r7, #32
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b084      	sub	sp, #16
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	60f8      	str	r0, [r7, #12]
 800c4d4:	60b9      	str	r1, [r7, #8]
 800c4d6:	607a      	str	r2, [r7, #4]
 800c4d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d103      	bne.n	800c4e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c4e0:	69bb      	ldr	r3, [r7, #24]
 800c4e2:	69ba      	ldr	r2, [r7, #24]
 800c4e4:	601a      	str	r2, [r3, #0]
 800c4e6:	e002      	b.n	800c4ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c4e8:	69bb      	ldr	r3, [r7, #24]
 800c4ea:	687a      	ldr	r2, [r7, #4]
 800c4ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c4ee:	69bb      	ldr	r3, [r7, #24]
 800c4f0:	68fa      	ldr	r2, [r7, #12]
 800c4f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c4f4:	69bb      	ldr	r3, [r7, #24]
 800c4f6:	68ba      	ldr	r2, [r7, #8]
 800c4f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c4fa:	2101      	movs	r1, #1
 800c4fc:	69b8      	ldr	r0, [r7, #24]
 800c4fe:	f7ff fecb 	bl	800c298 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c502:	bf00      	nop
 800c504:	3710      	adds	r7, #16
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
	...

0800c50c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b08e      	sub	sp, #56	; 0x38
 800c510:	af00      	add	r7, sp, #0
 800c512:	60f8      	str	r0, [r7, #12]
 800c514:	60b9      	str	r1, [r7, #8]
 800c516:	607a      	str	r2, [r7, #4]
 800c518:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c51a:	2300      	movs	r3, #0
 800c51c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c524:	2b00      	cmp	r3, #0
 800c526:	d10a      	bne.n	800c53e <xQueueGenericSend+0x32>
	__asm volatile
 800c528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c52c:	f383 8811 	msr	BASEPRI, r3
 800c530:	f3bf 8f6f 	isb	sy
 800c534:	f3bf 8f4f 	dsb	sy
 800c538:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c53a:	bf00      	nop
 800c53c:	e7fe      	b.n	800c53c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d103      	bne.n	800c54c <xQueueGenericSend+0x40>
 800c544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d101      	bne.n	800c550 <xQueueGenericSend+0x44>
 800c54c:	2301      	movs	r3, #1
 800c54e:	e000      	b.n	800c552 <xQueueGenericSend+0x46>
 800c550:	2300      	movs	r3, #0
 800c552:	2b00      	cmp	r3, #0
 800c554:	d10a      	bne.n	800c56c <xQueueGenericSend+0x60>
	__asm volatile
 800c556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c55a:	f383 8811 	msr	BASEPRI, r3
 800c55e:	f3bf 8f6f 	isb	sy
 800c562:	f3bf 8f4f 	dsb	sy
 800c566:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c568:	bf00      	nop
 800c56a:	e7fe      	b.n	800c56a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	2b02      	cmp	r3, #2
 800c570:	d103      	bne.n	800c57a <xQueueGenericSend+0x6e>
 800c572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c576:	2b01      	cmp	r3, #1
 800c578:	d101      	bne.n	800c57e <xQueueGenericSend+0x72>
 800c57a:	2301      	movs	r3, #1
 800c57c:	e000      	b.n	800c580 <xQueueGenericSend+0x74>
 800c57e:	2300      	movs	r3, #0
 800c580:	2b00      	cmp	r3, #0
 800c582:	d10a      	bne.n	800c59a <xQueueGenericSend+0x8e>
	__asm volatile
 800c584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c588:	f383 8811 	msr	BASEPRI, r3
 800c58c:	f3bf 8f6f 	isb	sy
 800c590:	f3bf 8f4f 	dsb	sy
 800c594:	623b      	str	r3, [r7, #32]
}
 800c596:	bf00      	nop
 800c598:	e7fe      	b.n	800c598 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c59a:	f001 fa57 	bl	800da4c <xTaskGetSchedulerState>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d102      	bne.n	800c5aa <xQueueGenericSend+0x9e>
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d101      	bne.n	800c5ae <xQueueGenericSend+0xa2>
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	e000      	b.n	800c5b0 <xQueueGenericSend+0xa4>
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d10a      	bne.n	800c5ca <xQueueGenericSend+0xbe>
	__asm volatile
 800c5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b8:	f383 8811 	msr	BASEPRI, r3
 800c5bc:	f3bf 8f6f 	isb	sy
 800c5c0:	f3bf 8f4f 	dsb	sy
 800c5c4:	61fb      	str	r3, [r7, #28]
}
 800c5c6:	bf00      	nop
 800c5c8:	e7fe      	b.n	800c5c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c5ca:	f001 fd8b 	bl	800e0e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	d302      	bcc.n	800c5e0 <xQueueGenericSend+0xd4>
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	2b02      	cmp	r3, #2
 800c5de:	d129      	bne.n	800c634 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c5e0:	683a      	ldr	r2, [r7, #0]
 800c5e2:	68b9      	ldr	r1, [r7, #8]
 800c5e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5e6:	f000 fae4 	bl	800cbb2 <prvCopyDataToQueue>
 800c5ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d010      	beq.n	800c616 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f6:	3324      	adds	r3, #36	; 0x24
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f001 f867 	bl	800d6cc <xTaskRemoveFromEventList>
 800c5fe:	4603      	mov	r3, r0
 800c600:	2b00      	cmp	r3, #0
 800c602:	d013      	beq.n	800c62c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c604:	4b3f      	ldr	r3, [pc, #252]	; (800c704 <xQueueGenericSend+0x1f8>)
 800c606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c60a:	601a      	str	r2, [r3, #0]
 800c60c:	f3bf 8f4f 	dsb	sy
 800c610:	f3bf 8f6f 	isb	sy
 800c614:	e00a      	b.n	800c62c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d007      	beq.n	800c62c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c61c:	4b39      	ldr	r3, [pc, #228]	; (800c704 <xQueueGenericSend+0x1f8>)
 800c61e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c622:	601a      	str	r2, [r3, #0]
 800c624:	f3bf 8f4f 	dsb	sy
 800c628:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c62c:	f001 fd8a 	bl	800e144 <vPortExitCritical>
				return pdPASS;
 800c630:	2301      	movs	r3, #1
 800c632:	e063      	b.n	800c6fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d103      	bne.n	800c642 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c63a:	f001 fd83 	bl	800e144 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c63e:	2300      	movs	r3, #0
 800c640:	e05c      	b.n	800c6fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c644:	2b00      	cmp	r3, #0
 800c646:	d106      	bne.n	800c656 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c648:	f107 0314 	add.w	r3, r7, #20
 800c64c:	4618      	mov	r0, r3
 800c64e:	f001 f89f 	bl	800d790 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c652:	2301      	movs	r3, #1
 800c654:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c656:	f001 fd75 	bl	800e144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c65a:	f000 fe2d 	bl	800d2b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c65e:	f001 fd41 	bl	800e0e4 <vPortEnterCritical>
 800c662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c664:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c668:	b25b      	sxtb	r3, r3
 800c66a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c66e:	d103      	bne.n	800c678 <xQueueGenericSend+0x16c>
 800c670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c672:	2200      	movs	r2, #0
 800c674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c67a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c67e:	b25b      	sxtb	r3, r3
 800c680:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c684:	d103      	bne.n	800c68e <xQueueGenericSend+0x182>
 800c686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c688:	2200      	movs	r2, #0
 800c68a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c68e:	f001 fd59 	bl	800e144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c692:	1d3a      	adds	r2, r7, #4
 800c694:	f107 0314 	add.w	r3, r7, #20
 800c698:	4611      	mov	r1, r2
 800c69a:	4618      	mov	r0, r3
 800c69c:	f001 f88e 	bl	800d7bc <xTaskCheckForTimeOut>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d124      	bne.n	800c6f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c6a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6a8:	f000 fb7b 	bl	800cda2 <prvIsQueueFull>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d018      	beq.n	800c6e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b4:	3310      	adds	r3, #16
 800c6b6:	687a      	ldr	r2, [r7, #4]
 800c6b8:	4611      	mov	r1, r2
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f000 ffe2 	bl	800d684 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c6c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6c2:	f000 fb06 	bl	800ccd2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c6c6:	f000 fe05 	bl	800d2d4 <xTaskResumeAll>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	f47f af7c 	bne.w	800c5ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c6d2:	4b0c      	ldr	r3, [pc, #48]	; (800c704 <xQueueGenericSend+0x1f8>)
 800c6d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6d8:	601a      	str	r2, [r3, #0]
 800c6da:	f3bf 8f4f 	dsb	sy
 800c6de:	f3bf 8f6f 	isb	sy
 800c6e2:	e772      	b.n	800c5ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c6e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6e6:	f000 faf4 	bl	800ccd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c6ea:	f000 fdf3 	bl	800d2d4 <xTaskResumeAll>
 800c6ee:	e76c      	b.n	800c5ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c6f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6f2:	f000 faee 	bl	800ccd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c6f6:	f000 fded 	bl	800d2d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c6fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	3738      	adds	r7, #56	; 0x38
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}
 800c704:	e000ed04 	.word	0xe000ed04

0800c708 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b08e      	sub	sp, #56	; 0x38
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
 800c710:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d10a      	bne.n	800c732 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c720:	f383 8811 	msr	BASEPRI, r3
 800c724:	f3bf 8f6f 	isb	sy
 800c728:	f3bf 8f4f 	dsb	sy
 800c72c:	623b      	str	r3, [r7, #32]
}
 800c72e:	bf00      	nop
 800c730:	e7fe      	b.n	800c730 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c736:	2b00      	cmp	r3, #0
 800c738:	d00a      	beq.n	800c750 <xQueueGiveFromISR+0x48>
	__asm volatile
 800c73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c73e:	f383 8811 	msr	BASEPRI, r3
 800c742:	f3bf 8f6f 	isb	sy
 800c746:	f3bf 8f4f 	dsb	sy
 800c74a:	61fb      	str	r3, [r7, #28]
}
 800c74c:	bf00      	nop
 800c74e:	e7fe      	b.n	800c74e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d103      	bne.n	800c760 <xQueueGiveFromISR+0x58>
 800c758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c75a:	689b      	ldr	r3, [r3, #8]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d101      	bne.n	800c764 <xQueueGiveFromISR+0x5c>
 800c760:	2301      	movs	r3, #1
 800c762:	e000      	b.n	800c766 <xQueueGiveFromISR+0x5e>
 800c764:	2300      	movs	r3, #0
 800c766:	2b00      	cmp	r3, #0
 800c768:	d10a      	bne.n	800c780 <xQueueGiveFromISR+0x78>
	__asm volatile
 800c76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c76e:	f383 8811 	msr	BASEPRI, r3
 800c772:	f3bf 8f6f 	isb	sy
 800c776:	f3bf 8f4f 	dsb	sy
 800c77a:	61bb      	str	r3, [r7, #24]
}
 800c77c:	bf00      	nop
 800c77e:	e7fe      	b.n	800c77e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c780:	f001 fd92 	bl	800e2a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c784:	f3ef 8211 	mrs	r2, BASEPRI
 800c788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c78c:	f383 8811 	msr	BASEPRI, r3
 800c790:	f3bf 8f6f 	isb	sy
 800c794:	f3bf 8f4f 	dsb	sy
 800c798:	617a      	str	r2, [r7, #20]
 800c79a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c79c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c79e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7a4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d22b      	bcs.n	800c808 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7bc:	1c5a      	adds	r2, r3, #1
 800c7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c7c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c7c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ca:	d112      	bne.n	800c7f2 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d016      	beq.n	800c802 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d6:	3324      	adds	r3, #36	; 0x24
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f000 ff77 	bl	800d6cc <xTaskRemoveFromEventList>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d00e      	beq.n	800c802 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d00b      	beq.n	800c802 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	2201      	movs	r2, #1
 800c7ee:	601a      	str	r2, [r3, #0]
 800c7f0:	e007      	b.n	800c802 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c7f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	b2db      	uxtb	r3, r3
 800c7fa:	b25a      	sxtb	r2, r3
 800c7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c802:	2301      	movs	r3, #1
 800c804:	637b      	str	r3, [r7, #52]	; 0x34
 800c806:	e001      	b.n	800c80c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c808:	2300      	movs	r3, #0
 800c80a:	637b      	str	r3, [r7, #52]	; 0x34
 800c80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c80e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c816:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3738      	adds	r7, #56	; 0x38
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}
	...

0800c824 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b08e      	sub	sp, #56	; 0x38
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c82e:	2300      	movs	r3, #0
 800c830:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c836:	2300      	movs	r3, #0
 800c838:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d10a      	bne.n	800c856 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c844:	f383 8811 	msr	BASEPRI, r3
 800c848:	f3bf 8f6f 	isb	sy
 800c84c:	f3bf 8f4f 	dsb	sy
 800c850:	623b      	str	r3, [r7, #32]
}
 800c852:	bf00      	nop
 800c854:	e7fe      	b.n	800c854 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d00a      	beq.n	800c874 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c862:	f383 8811 	msr	BASEPRI, r3
 800c866:	f3bf 8f6f 	isb	sy
 800c86a:	f3bf 8f4f 	dsb	sy
 800c86e:	61fb      	str	r3, [r7, #28]
}
 800c870:	bf00      	nop
 800c872:	e7fe      	b.n	800c872 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c874:	f001 f8ea 	bl	800da4c <xTaskGetSchedulerState>
 800c878:	4603      	mov	r3, r0
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d102      	bne.n	800c884 <xQueueSemaphoreTake+0x60>
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d101      	bne.n	800c888 <xQueueSemaphoreTake+0x64>
 800c884:	2301      	movs	r3, #1
 800c886:	e000      	b.n	800c88a <xQueueSemaphoreTake+0x66>
 800c888:	2300      	movs	r3, #0
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d10a      	bne.n	800c8a4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c892:	f383 8811 	msr	BASEPRI, r3
 800c896:	f3bf 8f6f 	isb	sy
 800c89a:	f3bf 8f4f 	dsb	sy
 800c89e:	61bb      	str	r3, [r7, #24]
}
 800c8a0:	bf00      	nop
 800c8a2:	e7fe      	b.n	800c8a2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c8a4:	f001 fc1e 	bl	800e0e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d024      	beq.n	800c8fe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b6:	1e5a      	subs	r2, r3, #1
 800c8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d104      	bne.n	800c8ce <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c8c4:	f001 fa6a 	bl	800dd9c <pvTaskIncrementMutexHeldCount>
 800c8c8:	4602      	mov	r2, r0
 800c8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8cc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d0:	691b      	ldr	r3, [r3, #16]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d00f      	beq.n	800c8f6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d8:	3310      	adds	r3, #16
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f000 fef6 	bl	800d6cc <xTaskRemoveFromEventList>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d007      	beq.n	800c8f6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c8e6:	4b54      	ldr	r3, [pc, #336]	; (800ca38 <xQueueSemaphoreTake+0x214>)
 800c8e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8ec:	601a      	str	r2, [r3, #0]
 800c8ee:	f3bf 8f4f 	dsb	sy
 800c8f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c8f6:	f001 fc25 	bl	800e144 <vPortExitCritical>
				return pdPASS;
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	e097      	b.n	800ca2e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d111      	bne.n	800c928 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c906:	2b00      	cmp	r3, #0
 800c908:	d00a      	beq.n	800c920 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c90e:	f383 8811 	msr	BASEPRI, r3
 800c912:	f3bf 8f6f 	isb	sy
 800c916:	f3bf 8f4f 	dsb	sy
 800c91a:	617b      	str	r3, [r7, #20]
}
 800c91c:	bf00      	nop
 800c91e:	e7fe      	b.n	800c91e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c920:	f001 fc10 	bl	800e144 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c924:	2300      	movs	r3, #0
 800c926:	e082      	b.n	800ca2e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d106      	bne.n	800c93c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c92e:	f107 030c 	add.w	r3, r7, #12
 800c932:	4618      	mov	r0, r3
 800c934:	f000 ff2c 	bl	800d790 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c938:	2301      	movs	r3, #1
 800c93a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c93c:	f001 fc02 	bl	800e144 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c940:	f000 fcba 	bl	800d2b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c944:	f001 fbce 	bl	800e0e4 <vPortEnterCritical>
 800c948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c94a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c94e:	b25b      	sxtb	r3, r3
 800c950:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c954:	d103      	bne.n	800c95e <xQueueSemaphoreTake+0x13a>
 800c956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c958:	2200      	movs	r2, #0
 800c95a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c960:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c964:	b25b      	sxtb	r3, r3
 800c966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c96a:	d103      	bne.n	800c974 <xQueueSemaphoreTake+0x150>
 800c96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c96e:	2200      	movs	r2, #0
 800c970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c974:	f001 fbe6 	bl	800e144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c978:	463a      	mov	r2, r7
 800c97a:	f107 030c 	add.w	r3, r7, #12
 800c97e:	4611      	mov	r1, r2
 800c980:	4618      	mov	r0, r3
 800c982:	f000 ff1b 	bl	800d7bc <xTaskCheckForTimeOut>
 800c986:	4603      	mov	r3, r0
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d132      	bne.n	800c9f2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c98c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c98e:	f000 f9f2 	bl	800cd76 <prvIsQueueEmpty>
 800c992:	4603      	mov	r3, r0
 800c994:	2b00      	cmp	r3, #0
 800c996:	d026      	beq.n	800c9e6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d109      	bne.n	800c9b4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c9a0:	f001 fba0 	bl	800e0e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9a6:	689b      	ldr	r3, [r3, #8]
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f001 f86d 	bl	800da88 <xTaskPriorityInherit>
 800c9ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c9b0:	f001 fbc8 	bl	800e144 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b6:	3324      	adds	r3, #36	; 0x24
 800c9b8:	683a      	ldr	r2, [r7, #0]
 800c9ba:	4611      	mov	r1, r2
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f000 fe61 	bl	800d684 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c9c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9c4:	f000 f985 	bl	800ccd2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c9c8:	f000 fc84 	bl	800d2d4 <xTaskResumeAll>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	f47f af68 	bne.w	800c8a4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c9d4:	4b18      	ldr	r3, [pc, #96]	; (800ca38 <xQueueSemaphoreTake+0x214>)
 800c9d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9da:	601a      	str	r2, [r3, #0]
 800c9dc:	f3bf 8f4f 	dsb	sy
 800c9e0:	f3bf 8f6f 	isb	sy
 800c9e4:	e75e      	b.n	800c8a4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c9e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9e8:	f000 f973 	bl	800ccd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c9ec:	f000 fc72 	bl	800d2d4 <xTaskResumeAll>
 800c9f0:	e758      	b.n	800c8a4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c9f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9f4:	f000 f96d 	bl	800ccd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c9f8:	f000 fc6c 	bl	800d2d4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c9fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9fe:	f000 f9ba 	bl	800cd76 <prvIsQueueEmpty>
 800ca02:	4603      	mov	r3, r0
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	f43f af4d 	beq.w	800c8a4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ca0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d00d      	beq.n	800ca2c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ca10:	f001 fb68 	bl	800e0e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ca14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca16:	f000 f8b4 	bl	800cb82 <prvGetDisinheritPriorityAfterTimeout>
 800ca1a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ca1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca1e:	689b      	ldr	r3, [r3, #8]
 800ca20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ca22:	4618      	mov	r0, r3
 800ca24:	f001 f92c 	bl	800dc80 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ca28:	f001 fb8c 	bl	800e144 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ca2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	3738      	adds	r7, #56	; 0x38
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}
 800ca36:	bf00      	nop
 800ca38:	e000ed04 	.word	0xe000ed04

0800ca3c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b08e      	sub	sp, #56	; 0x38
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	60f8      	str	r0, [r7, #12]
 800ca44:	60b9      	str	r1, [r7, #8]
 800ca46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ca4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d10a      	bne.n	800ca68 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ca52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca56:	f383 8811 	msr	BASEPRI, r3
 800ca5a:	f3bf 8f6f 	isb	sy
 800ca5e:	f3bf 8f4f 	dsb	sy
 800ca62:	623b      	str	r3, [r7, #32]
}
 800ca64:	bf00      	nop
 800ca66:	e7fe      	b.n	800ca66 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d103      	bne.n	800ca76 <xQueueReceiveFromISR+0x3a>
 800ca6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d101      	bne.n	800ca7a <xQueueReceiveFromISR+0x3e>
 800ca76:	2301      	movs	r3, #1
 800ca78:	e000      	b.n	800ca7c <xQueueReceiveFromISR+0x40>
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d10a      	bne.n	800ca96 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ca80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca84:	f383 8811 	msr	BASEPRI, r3
 800ca88:	f3bf 8f6f 	isb	sy
 800ca8c:	f3bf 8f4f 	dsb	sy
 800ca90:	61fb      	str	r3, [r7, #28]
}
 800ca92:	bf00      	nop
 800ca94:	e7fe      	b.n	800ca94 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ca96:	f001 fc07 	bl	800e2a8 <vPortValidateInterruptPriority>
	__asm volatile
 800ca9a:	f3ef 8211 	mrs	r2, BASEPRI
 800ca9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa2:	f383 8811 	msr	BASEPRI, r3
 800caa6:	f3bf 8f6f 	isb	sy
 800caaa:	f3bf 8f4f 	dsb	sy
 800caae:	61ba      	str	r2, [r7, #24]
 800cab0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cab2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cab4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d02f      	beq.n	800cb22 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cac8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cacc:	68b9      	ldr	r1, [r7, #8]
 800cace:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cad0:	f000 f8d9 	bl	800cc86 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad6:	1e5a      	subs	r2, r3, #1
 800cad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cada:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800cadc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cae4:	d112      	bne.n	800cb0c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae8:	691b      	ldr	r3, [r3, #16]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d016      	beq.n	800cb1c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800caee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf0:	3310      	adds	r3, #16
 800caf2:	4618      	mov	r0, r3
 800caf4:	f000 fdea 	bl	800d6cc <xTaskRemoveFromEventList>
 800caf8:	4603      	mov	r3, r0
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d00e      	beq.n	800cb1c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d00b      	beq.n	800cb1c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2201      	movs	r2, #1
 800cb08:	601a      	str	r2, [r3, #0]
 800cb0a:	e007      	b.n	800cb1c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cb0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb10:	3301      	adds	r3, #1
 800cb12:	b2db      	uxtb	r3, r3
 800cb14:	b25a      	sxtb	r2, r3
 800cb16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	637b      	str	r3, [r7, #52]	; 0x34
 800cb20:	e001      	b.n	800cb26 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800cb22:	2300      	movs	r3, #0
 800cb24:	637b      	str	r3, [r7, #52]	; 0x34
 800cb26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb28:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cb2a:	693b      	ldr	r3, [r7, #16]
 800cb2c:	f383 8811 	msr	BASEPRI, r3
}
 800cb30:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cb32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3738      	adds	r7, #56	; 0x38
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b084      	sub	sp, #16
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d10a      	bne.n	800cb64 <vQueueDelete+0x28>
	__asm volatile
 800cb4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb52:	f383 8811 	msr	BASEPRI, r3
 800cb56:	f3bf 8f6f 	isb	sy
 800cb5a:	f3bf 8f4f 	dsb	sy
 800cb5e:	60bb      	str	r3, [r7, #8]
}
 800cb60:	bf00      	nop
 800cb62:	e7fe      	b.n	800cb62 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800cb64:	68f8      	ldr	r0, [r7, #12]
 800cb66:	f000 f935 	bl	800cdd4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d102      	bne.n	800cb7a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800cb74:	68f8      	ldr	r0, [r7, #12]
 800cb76:	f001 fca3 	bl	800e4c0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800cb7a:	bf00      	nop
 800cb7c:	3710      	adds	r7, #16
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}

0800cb82 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cb82:	b480      	push	{r7}
 800cb84:	b085      	sub	sp, #20
 800cb86:	af00      	add	r7, sp, #0
 800cb88:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d006      	beq.n	800cba0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	f1c3 0307 	rsb	r3, r3, #7
 800cb9c:	60fb      	str	r3, [r7, #12]
 800cb9e:	e001      	b.n	800cba4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cba0:	2300      	movs	r3, #0
 800cba2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800cba4:	68fb      	ldr	r3, [r7, #12]
	}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3714      	adds	r7, #20
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb0:	4770      	bx	lr

0800cbb2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cbb2:	b580      	push	{r7, lr}
 800cbb4:	b086      	sub	sp, #24
 800cbb6:	af00      	add	r7, sp, #0
 800cbb8:	60f8      	str	r0, [r7, #12]
 800cbba:	60b9      	str	r1, [r7, #8]
 800cbbc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbc6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d10d      	bne.n	800cbec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d14d      	bne.n	800cc74 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	689b      	ldr	r3, [r3, #8]
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f000 ffc9 	bl	800db74 <xTaskPriorityDisinherit>
 800cbe2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	609a      	str	r2, [r3, #8]
 800cbea:	e043      	b.n	800cc74 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d119      	bne.n	800cc26 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	6858      	ldr	r0, [r3, #4]
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbfa:	461a      	mov	r2, r3
 800cbfc:	68b9      	ldr	r1, [r7, #8]
 800cbfe:	f002 fce1 	bl	800f5c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	685a      	ldr	r2, [r3, #4]
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc0a:	441a      	add	r2, r3
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	685a      	ldr	r2, [r3, #4]
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	689b      	ldr	r3, [r3, #8]
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	d32b      	bcc.n	800cc74 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	681a      	ldr	r2, [r3, #0]
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	605a      	str	r2, [r3, #4]
 800cc24:	e026      	b.n	800cc74 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	68d8      	ldr	r0, [r3, #12]
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc2e:	461a      	mov	r2, r3
 800cc30:	68b9      	ldr	r1, [r7, #8]
 800cc32:	f002 fcc7 	bl	800f5c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	68da      	ldr	r2, [r3, #12]
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc3e:	425b      	negs	r3, r3
 800cc40:	441a      	add	r2, r3
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	68da      	ldr	r2, [r3, #12]
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	d207      	bcs.n	800cc62 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	689a      	ldr	r2, [r3, #8]
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc5a:	425b      	negs	r3, r3
 800cc5c:	441a      	add	r2, r3
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2b02      	cmp	r3, #2
 800cc66:	d105      	bne.n	800cc74 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d002      	beq.n	800cc74 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	3b01      	subs	r3, #1
 800cc72:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cc74:	693b      	ldr	r3, [r7, #16]
 800cc76:	1c5a      	adds	r2, r3, #1
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cc7c:	697b      	ldr	r3, [r7, #20]
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3718      	adds	r7, #24
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}

0800cc86 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cc86:	b580      	push	{r7, lr}
 800cc88:	b082      	sub	sp, #8
 800cc8a:	af00      	add	r7, sp, #0
 800cc8c:	6078      	str	r0, [r7, #4]
 800cc8e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d018      	beq.n	800ccca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	68da      	ldr	r2, [r3, #12]
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cca0:	441a      	add	r2, r3
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	68da      	ldr	r2, [r3, #12]
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	689b      	ldr	r3, [r3, #8]
 800ccae:	429a      	cmp	r2, r3
 800ccb0:	d303      	bcc.n	800ccba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681a      	ldr	r2, [r3, #0]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	68d9      	ldr	r1, [r3, #12]
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccc2:	461a      	mov	r2, r3
 800ccc4:	6838      	ldr	r0, [r7, #0]
 800ccc6:	f002 fc7d 	bl	800f5c4 <memcpy>
	}
}
 800ccca:	bf00      	nop
 800cccc:	3708      	adds	r7, #8
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}

0800ccd2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ccd2:	b580      	push	{r7, lr}
 800ccd4:	b084      	sub	sp, #16
 800ccd6:	af00      	add	r7, sp, #0
 800ccd8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ccda:	f001 fa03 	bl	800e0e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cce4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cce6:	e011      	b.n	800cd0c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d012      	beq.n	800cd16 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	3324      	adds	r3, #36	; 0x24
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f000 fce9 	bl	800d6cc <xTaskRemoveFromEventList>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d001      	beq.n	800cd04 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cd00:	f000 fdbe 	bl	800d880 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cd04:	7bfb      	ldrb	r3, [r7, #15]
 800cd06:	3b01      	subs	r3, #1
 800cd08:	b2db      	uxtb	r3, r3
 800cd0a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cd0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	dce9      	bgt.n	800cce8 <prvUnlockQueue+0x16>
 800cd14:	e000      	b.n	800cd18 <prvUnlockQueue+0x46>
					break;
 800cd16:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	22ff      	movs	r2, #255	; 0xff
 800cd1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cd20:	f001 fa10 	bl	800e144 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cd24:	f001 f9de 	bl	800e0e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd2e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cd30:	e011      	b.n	800cd56 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	691b      	ldr	r3, [r3, #16]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d012      	beq.n	800cd60 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	3310      	adds	r3, #16
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f000 fcc4 	bl	800d6cc <xTaskRemoveFromEventList>
 800cd44:	4603      	mov	r3, r0
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d001      	beq.n	800cd4e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cd4a:	f000 fd99 	bl	800d880 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cd4e:	7bbb      	ldrb	r3, [r7, #14]
 800cd50:	3b01      	subs	r3, #1
 800cd52:	b2db      	uxtb	r3, r3
 800cd54:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cd56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	dce9      	bgt.n	800cd32 <prvUnlockQueue+0x60>
 800cd5e:	e000      	b.n	800cd62 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cd60:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	22ff      	movs	r2, #255	; 0xff
 800cd66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cd6a:	f001 f9eb 	bl	800e144 <vPortExitCritical>
}
 800cd6e:	bf00      	nop
 800cd70:	3710      	adds	r7, #16
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}

0800cd76 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cd76:	b580      	push	{r7, lr}
 800cd78:	b084      	sub	sp, #16
 800cd7a:	af00      	add	r7, sp, #0
 800cd7c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cd7e:	f001 f9b1 	bl	800e0e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d102      	bne.n	800cd90 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	60fb      	str	r3, [r7, #12]
 800cd8e:	e001      	b.n	800cd94 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cd90:	2300      	movs	r3, #0
 800cd92:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cd94:	f001 f9d6 	bl	800e144 <vPortExitCritical>

	return xReturn;
 800cd98:	68fb      	ldr	r3, [r7, #12]
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3710      	adds	r7, #16
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}

0800cda2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cda2:	b580      	push	{r7, lr}
 800cda4:	b084      	sub	sp, #16
 800cda6:	af00      	add	r7, sp, #0
 800cda8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cdaa:	f001 f99b 	bl	800e0e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	d102      	bne.n	800cdc0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cdba:	2301      	movs	r3, #1
 800cdbc:	60fb      	str	r3, [r7, #12]
 800cdbe:	e001      	b.n	800cdc4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cdc4:	f001 f9be 	bl	800e144 <vPortExitCritical>

	return xReturn;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3710      	adds	r7, #16
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}
	...

0800cdd4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b085      	sub	sp, #20
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cddc:	2300      	movs	r3, #0
 800cdde:	60fb      	str	r3, [r7, #12]
 800cde0:	e016      	b.n	800ce10 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cde2:	4a10      	ldr	r2, [pc, #64]	; (800ce24 <vQueueUnregisterQueue+0x50>)
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	00db      	lsls	r3, r3, #3
 800cde8:	4413      	add	r3, r2
 800cdea:	685b      	ldr	r3, [r3, #4]
 800cdec:	687a      	ldr	r2, [r7, #4]
 800cdee:	429a      	cmp	r2, r3
 800cdf0:	d10b      	bne.n	800ce0a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cdf2:	4a0c      	ldr	r2, [pc, #48]	; (800ce24 <vQueueUnregisterQueue+0x50>)
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	2100      	movs	r1, #0
 800cdf8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cdfc:	4a09      	ldr	r2, [pc, #36]	; (800ce24 <vQueueUnregisterQueue+0x50>)
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	00db      	lsls	r3, r3, #3
 800ce02:	4413      	add	r3, r2
 800ce04:	2200      	movs	r2, #0
 800ce06:	605a      	str	r2, [r3, #4]
				break;
 800ce08:	e006      	b.n	800ce18 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	3301      	adds	r3, #1
 800ce0e:	60fb      	str	r3, [r7, #12]
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	2b07      	cmp	r3, #7
 800ce14:	d9e5      	bls.n	800cde2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ce16:	bf00      	nop
 800ce18:	bf00      	nop
 800ce1a:	3714      	adds	r7, #20
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce22:	4770      	bx	lr
 800ce24:	2000612c 	.word	0x2000612c

0800ce28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b08e      	sub	sp, #56	; 0x38
 800ce2c:	af04      	add	r7, sp, #16
 800ce2e:	60f8      	str	r0, [r7, #12]
 800ce30:	60b9      	str	r1, [r7, #8]
 800ce32:	607a      	str	r2, [r7, #4]
 800ce34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ce36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d10a      	bne.n	800ce52 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ce3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce40:	f383 8811 	msr	BASEPRI, r3
 800ce44:	f3bf 8f6f 	isb	sy
 800ce48:	f3bf 8f4f 	dsb	sy
 800ce4c:	623b      	str	r3, [r7, #32]
}
 800ce4e:	bf00      	nop
 800ce50:	e7fe      	b.n	800ce50 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ce52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d10a      	bne.n	800ce6e <xTaskCreateStatic+0x46>
	__asm volatile
 800ce58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce5c:	f383 8811 	msr	BASEPRI, r3
 800ce60:	f3bf 8f6f 	isb	sy
 800ce64:	f3bf 8f4f 	dsb	sy
 800ce68:	61fb      	str	r3, [r7, #28]
}
 800ce6a:	bf00      	nop
 800ce6c:	e7fe      	b.n	800ce6c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ce6e:	23a0      	movs	r3, #160	; 0xa0
 800ce70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ce72:	693b      	ldr	r3, [r7, #16]
 800ce74:	2ba0      	cmp	r3, #160	; 0xa0
 800ce76:	d00a      	beq.n	800ce8e <xTaskCreateStatic+0x66>
	__asm volatile
 800ce78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce7c:	f383 8811 	msr	BASEPRI, r3
 800ce80:	f3bf 8f6f 	isb	sy
 800ce84:	f3bf 8f4f 	dsb	sy
 800ce88:	61bb      	str	r3, [r7, #24]
}
 800ce8a:	bf00      	nop
 800ce8c:	e7fe      	b.n	800ce8c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ce8e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ce90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d01e      	beq.n	800ced4 <xTaskCreateStatic+0xac>
 800ce96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d01b      	beq.n	800ced4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ce9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce9e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cea4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea8:	2202      	movs	r2, #2
 800ceaa:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ceae:	2300      	movs	r3, #0
 800ceb0:	9303      	str	r3, [sp, #12]
 800ceb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb4:	9302      	str	r3, [sp, #8]
 800ceb6:	f107 0314 	add.w	r3, r7, #20
 800ceba:	9301      	str	r3, [sp, #4]
 800cebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cebe:	9300      	str	r3, [sp, #0]
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	687a      	ldr	r2, [r7, #4]
 800cec4:	68b9      	ldr	r1, [r7, #8]
 800cec6:	68f8      	ldr	r0, [r7, #12]
 800cec8:	f000 f850 	bl	800cf6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cecc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cece:	f000 f8eb 	bl	800d0a8 <prvAddNewTaskToReadyList>
 800ced2:	e001      	b.n	800ced8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ced4:	2300      	movs	r3, #0
 800ced6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ced8:	697b      	ldr	r3, [r7, #20]
	}
 800ceda:	4618      	mov	r0, r3
 800cedc:	3728      	adds	r7, #40	; 0x28
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}

0800cee2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cee2:	b580      	push	{r7, lr}
 800cee4:	b08c      	sub	sp, #48	; 0x30
 800cee6:	af04      	add	r7, sp, #16
 800cee8:	60f8      	str	r0, [r7, #12]
 800ceea:	60b9      	str	r1, [r7, #8]
 800ceec:	603b      	str	r3, [r7, #0]
 800ceee:	4613      	mov	r3, r2
 800cef0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cef2:	88fb      	ldrh	r3, [r7, #6]
 800cef4:	009b      	lsls	r3, r3, #2
 800cef6:	4618      	mov	r0, r3
 800cef8:	f001 fa16 	bl	800e328 <pvPortMalloc>
 800cefc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d00e      	beq.n	800cf22 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cf04:	20a0      	movs	r0, #160	; 0xa0
 800cf06:	f001 fa0f 	bl	800e328 <pvPortMalloc>
 800cf0a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cf0c:	69fb      	ldr	r3, [r7, #28]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d003      	beq.n	800cf1a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cf12:	69fb      	ldr	r3, [r7, #28]
 800cf14:	697a      	ldr	r2, [r7, #20]
 800cf16:	631a      	str	r2, [r3, #48]	; 0x30
 800cf18:	e005      	b.n	800cf26 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cf1a:	6978      	ldr	r0, [r7, #20]
 800cf1c:	f001 fad0 	bl	800e4c0 <vPortFree>
 800cf20:	e001      	b.n	800cf26 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cf22:	2300      	movs	r3, #0
 800cf24:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cf26:	69fb      	ldr	r3, [r7, #28]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d017      	beq.n	800cf5c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cf2c:	69fb      	ldr	r3, [r7, #28]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cf34:	88fa      	ldrh	r2, [r7, #6]
 800cf36:	2300      	movs	r3, #0
 800cf38:	9303      	str	r3, [sp, #12]
 800cf3a:	69fb      	ldr	r3, [r7, #28]
 800cf3c:	9302      	str	r3, [sp, #8]
 800cf3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf40:	9301      	str	r3, [sp, #4]
 800cf42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf44:	9300      	str	r3, [sp, #0]
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	68b9      	ldr	r1, [r7, #8]
 800cf4a:	68f8      	ldr	r0, [r7, #12]
 800cf4c:	f000 f80e 	bl	800cf6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cf50:	69f8      	ldr	r0, [r7, #28]
 800cf52:	f000 f8a9 	bl	800d0a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cf56:	2301      	movs	r3, #1
 800cf58:	61bb      	str	r3, [r7, #24]
 800cf5a:	e002      	b.n	800cf62 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cf5c:	f04f 33ff 	mov.w	r3, #4294967295
 800cf60:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cf62:	69bb      	ldr	r3, [r7, #24]
	}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3720      	adds	r7, #32
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b088      	sub	sp, #32
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	60f8      	str	r0, [r7, #12]
 800cf74:	60b9      	str	r1, [r7, #8]
 800cf76:	607a      	str	r2, [r7, #4]
 800cf78:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cf7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cf84:	3b01      	subs	r3, #1
 800cf86:	009b      	lsls	r3, r3, #2
 800cf88:	4413      	add	r3, r2
 800cf8a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cf8c:	69bb      	ldr	r3, [r7, #24]
 800cf8e:	f023 0307 	bic.w	r3, r3, #7
 800cf92:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cf94:	69bb      	ldr	r3, [r7, #24]
 800cf96:	f003 0307 	and.w	r3, r3, #7
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d00a      	beq.n	800cfb4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800cf9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa2:	f383 8811 	msr	BASEPRI, r3
 800cfa6:	f3bf 8f6f 	isb	sy
 800cfaa:	f3bf 8f4f 	dsb	sy
 800cfae:	617b      	str	r3, [r7, #20]
}
 800cfb0:	bf00      	nop
 800cfb2:	e7fe      	b.n	800cfb2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d01f      	beq.n	800cffa <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cfba:	2300      	movs	r3, #0
 800cfbc:	61fb      	str	r3, [r7, #28]
 800cfbe:	e012      	b.n	800cfe6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cfc0:	68ba      	ldr	r2, [r7, #8]
 800cfc2:	69fb      	ldr	r3, [r7, #28]
 800cfc4:	4413      	add	r3, r2
 800cfc6:	7819      	ldrb	r1, [r3, #0]
 800cfc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfca:	69fb      	ldr	r3, [r7, #28]
 800cfcc:	4413      	add	r3, r2
 800cfce:	3334      	adds	r3, #52	; 0x34
 800cfd0:	460a      	mov	r2, r1
 800cfd2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cfd4:	68ba      	ldr	r2, [r7, #8]
 800cfd6:	69fb      	ldr	r3, [r7, #28]
 800cfd8:	4413      	add	r3, r2
 800cfda:	781b      	ldrb	r3, [r3, #0]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d006      	beq.n	800cfee <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cfe0:	69fb      	ldr	r3, [r7, #28]
 800cfe2:	3301      	adds	r3, #1
 800cfe4:	61fb      	str	r3, [r7, #28]
 800cfe6:	69fb      	ldr	r3, [r7, #28]
 800cfe8:	2b0f      	cmp	r3, #15
 800cfea:	d9e9      	bls.n	800cfc0 <prvInitialiseNewTask+0x54>
 800cfec:	e000      	b.n	800cff0 <prvInitialiseNewTask+0x84>
			{
				break;
 800cfee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff2:	2200      	movs	r2, #0
 800cff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cff8:	e003      	b.n	800d002 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cffc:	2200      	movs	r2, #0
 800cffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d004:	2b06      	cmp	r3, #6
 800d006:	d901      	bls.n	800d00c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d008:	2306      	movs	r3, #6
 800d00a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d00e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d010:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d014:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d016:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d01a:	2200      	movs	r2, #0
 800d01c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d020:	3304      	adds	r3, #4
 800d022:	4618      	mov	r0, r3
 800d024:	f7ff f8a3 	bl	800c16e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d02a:	3318      	adds	r3, #24
 800d02c:	4618      	mov	r0, r3
 800d02e:	f7ff f89e 	bl	800c16e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d036:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d03a:	f1c3 0207 	rsb	r2, r3, #7
 800d03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d040:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d046:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d04a:	2200      	movs	r2, #0
 800d04c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d052:	2200      	movs	r2, #0
 800d054:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d05a:	334c      	adds	r3, #76	; 0x4c
 800d05c:	224c      	movs	r2, #76	; 0x4c
 800d05e:	2100      	movs	r1, #0
 800d060:	4618      	mov	r0, r3
 800d062:	f002 f9c7 	bl	800f3f4 <memset>
 800d066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d068:	4a0c      	ldr	r2, [pc, #48]	; (800d09c <prvInitialiseNewTask+0x130>)
 800d06a:	651a      	str	r2, [r3, #80]	; 0x50
 800d06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d06e:	4a0c      	ldr	r2, [pc, #48]	; (800d0a0 <prvInitialiseNewTask+0x134>)
 800d070:	655a      	str	r2, [r3, #84]	; 0x54
 800d072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d074:	4a0b      	ldr	r2, [pc, #44]	; (800d0a4 <prvInitialiseNewTask+0x138>)
 800d076:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d078:	683a      	ldr	r2, [r7, #0]
 800d07a:	68f9      	ldr	r1, [r7, #12]
 800d07c:	69b8      	ldr	r0, [r7, #24]
 800d07e:	f000 ff07 	bl	800de90 <pxPortInitialiseStack>
 800d082:	4602      	mov	r2, r0
 800d084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d086:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d002      	beq.n	800d094 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d092:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d094:	bf00      	nop
 800d096:	3720      	adds	r7, #32
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}
 800d09c:	20009ec0 	.word	0x20009ec0
 800d0a0:	20009f28 	.word	0x20009f28
 800d0a4:	20009f90 	.word	0x20009f90

0800d0a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b082      	sub	sp, #8
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d0b0:	f001 f818 	bl	800e0e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d0b4:	4b2a      	ldr	r3, [pc, #168]	; (800d160 <prvAddNewTaskToReadyList+0xb8>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	3301      	adds	r3, #1
 800d0ba:	4a29      	ldr	r2, [pc, #164]	; (800d160 <prvAddNewTaskToReadyList+0xb8>)
 800d0bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d0be:	4b29      	ldr	r3, [pc, #164]	; (800d164 <prvAddNewTaskToReadyList+0xbc>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d109      	bne.n	800d0da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d0c6:	4a27      	ldr	r2, [pc, #156]	; (800d164 <prvAddNewTaskToReadyList+0xbc>)
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d0cc:	4b24      	ldr	r3, [pc, #144]	; (800d160 <prvAddNewTaskToReadyList+0xb8>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	2b01      	cmp	r3, #1
 800d0d2:	d110      	bne.n	800d0f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d0d4:	f000 fbf8 	bl	800d8c8 <prvInitialiseTaskLists>
 800d0d8:	e00d      	b.n	800d0f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d0da:	4b23      	ldr	r3, [pc, #140]	; (800d168 <prvAddNewTaskToReadyList+0xc0>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d109      	bne.n	800d0f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d0e2:	4b20      	ldr	r3, [pc, #128]	; (800d164 <prvAddNewTaskToReadyList+0xbc>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0ec:	429a      	cmp	r2, r3
 800d0ee:	d802      	bhi.n	800d0f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d0f0:	4a1c      	ldr	r2, [pc, #112]	; (800d164 <prvAddNewTaskToReadyList+0xbc>)
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d0f6:	4b1d      	ldr	r3, [pc, #116]	; (800d16c <prvAddNewTaskToReadyList+0xc4>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	3301      	adds	r3, #1
 800d0fc:	4a1b      	ldr	r2, [pc, #108]	; (800d16c <prvAddNewTaskToReadyList+0xc4>)
 800d0fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d104:	2201      	movs	r2, #1
 800d106:	409a      	lsls	r2, r3
 800d108:	4b19      	ldr	r3, [pc, #100]	; (800d170 <prvAddNewTaskToReadyList+0xc8>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	4313      	orrs	r3, r2
 800d10e:	4a18      	ldr	r2, [pc, #96]	; (800d170 <prvAddNewTaskToReadyList+0xc8>)
 800d110:	6013      	str	r3, [r2, #0]
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d116:	4613      	mov	r3, r2
 800d118:	009b      	lsls	r3, r3, #2
 800d11a:	4413      	add	r3, r2
 800d11c:	009b      	lsls	r3, r3, #2
 800d11e:	4a15      	ldr	r2, [pc, #84]	; (800d174 <prvAddNewTaskToReadyList+0xcc>)
 800d120:	441a      	add	r2, r3
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	3304      	adds	r3, #4
 800d126:	4619      	mov	r1, r3
 800d128:	4610      	mov	r0, r2
 800d12a:	f7ff f82d 	bl	800c188 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d12e:	f001 f809 	bl	800e144 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d132:	4b0d      	ldr	r3, [pc, #52]	; (800d168 <prvAddNewTaskToReadyList+0xc0>)
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d00e      	beq.n	800d158 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d13a:	4b0a      	ldr	r3, [pc, #40]	; (800d164 <prvAddNewTaskToReadyList+0xbc>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d144:	429a      	cmp	r2, r3
 800d146:	d207      	bcs.n	800d158 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d148:	4b0b      	ldr	r3, [pc, #44]	; (800d178 <prvAddNewTaskToReadyList+0xd0>)
 800d14a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d14e:	601a      	str	r2, [r3, #0]
 800d150:	f3bf 8f4f 	dsb	sy
 800d154:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d158:	bf00      	nop
 800d15a:	3708      	adds	r7, #8
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}
 800d160:	2000626c 	.word	0x2000626c
 800d164:	2000616c 	.word	0x2000616c
 800d168:	20006278 	.word	0x20006278
 800d16c:	20006288 	.word	0x20006288
 800d170:	20006274 	.word	0x20006274
 800d174:	20006170 	.word	0x20006170
 800d178:	e000ed04 	.word	0xe000ed04

0800d17c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b084      	sub	sp, #16
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d184:	2300      	movs	r3, #0
 800d186:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d017      	beq.n	800d1be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d18e:	4b13      	ldr	r3, [pc, #76]	; (800d1dc <vTaskDelay+0x60>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d00a      	beq.n	800d1ac <vTaskDelay+0x30>
	__asm volatile
 800d196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d19a:	f383 8811 	msr	BASEPRI, r3
 800d19e:	f3bf 8f6f 	isb	sy
 800d1a2:	f3bf 8f4f 	dsb	sy
 800d1a6:	60bb      	str	r3, [r7, #8]
}
 800d1a8:	bf00      	nop
 800d1aa:	e7fe      	b.n	800d1aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d1ac:	f000 f884 	bl	800d2b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d1b0:	2100      	movs	r1, #0
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f000 fe06 	bl	800ddc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d1b8:	f000 f88c 	bl	800d2d4 <xTaskResumeAll>
 800d1bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d107      	bne.n	800d1d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d1c4:	4b06      	ldr	r3, [pc, #24]	; (800d1e0 <vTaskDelay+0x64>)
 800d1c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1ca:	601a      	str	r2, [r3, #0]
 800d1cc:	f3bf 8f4f 	dsb	sy
 800d1d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d1d4:	bf00      	nop
 800d1d6:	3710      	adds	r7, #16
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}
 800d1dc:	20006294 	.word	0x20006294
 800d1e0:	e000ed04 	.word	0xe000ed04

0800d1e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b08a      	sub	sp, #40	; 0x28
 800d1e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d1f2:	463a      	mov	r2, r7
 800d1f4:	1d39      	adds	r1, r7, #4
 800d1f6:	f107 0308 	add.w	r3, r7, #8
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f7f5 f86c 	bl	80022d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d200:	6839      	ldr	r1, [r7, #0]
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	68ba      	ldr	r2, [r7, #8]
 800d206:	9202      	str	r2, [sp, #8]
 800d208:	9301      	str	r3, [sp, #4]
 800d20a:	2300      	movs	r3, #0
 800d20c:	9300      	str	r3, [sp, #0]
 800d20e:	2300      	movs	r3, #0
 800d210:	460a      	mov	r2, r1
 800d212:	4921      	ldr	r1, [pc, #132]	; (800d298 <vTaskStartScheduler+0xb4>)
 800d214:	4821      	ldr	r0, [pc, #132]	; (800d29c <vTaskStartScheduler+0xb8>)
 800d216:	f7ff fe07 	bl	800ce28 <xTaskCreateStatic>
 800d21a:	4603      	mov	r3, r0
 800d21c:	4a20      	ldr	r2, [pc, #128]	; (800d2a0 <vTaskStartScheduler+0xbc>)
 800d21e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d220:	4b1f      	ldr	r3, [pc, #124]	; (800d2a0 <vTaskStartScheduler+0xbc>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d002      	beq.n	800d22e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d228:	2301      	movs	r3, #1
 800d22a:	617b      	str	r3, [r7, #20]
 800d22c:	e001      	b.n	800d232 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d22e:	2300      	movs	r3, #0
 800d230:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	2b01      	cmp	r3, #1
 800d236:	d11b      	bne.n	800d270 <vTaskStartScheduler+0x8c>
	__asm volatile
 800d238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d23c:	f383 8811 	msr	BASEPRI, r3
 800d240:	f3bf 8f6f 	isb	sy
 800d244:	f3bf 8f4f 	dsb	sy
 800d248:	613b      	str	r3, [r7, #16]
}
 800d24a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d24c:	4b15      	ldr	r3, [pc, #84]	; (800d2a4 <vTaskStartScheduler+0xc0>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	334c      	adds	r3, #76	; 0x4c
 800d252:	4a15      	ldr	r2, [pc, #84]	; (800d2a8 <vTaskStartScheduler+0xc4>)
 800d254:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d256:	4b15      	ldr	r3, [pc, #84]	; (800d2ac <vTaskStartScheduler+0xc8>)
 800d258:	f04f 32ff 	mov.w	r2, #4294967295
 800d25c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d25e:	4b14      	ldr	r3, [pc, #80]	; (800d2b0 <vTaskStartScheduler+0xcc>)
 800d260:	2201      	movs	r2, #1
 800d262:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d264:	4b13      	ldr	r3, [pc, #76]	; (800d2b4 <vTaskStartScheduler+0xd0>)
 800d266:	2200      	movs	r2, #0
 800d268:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d26a:	f000 fe99 	bl	800dfa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d26e:	e00e      	b.n	800d28e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d276:	d10a      	bne.n	800d28e <vTaskStartScheduler+0xaa>
	__asm volatile
 800d278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d27c:	f383 8811 	msr	BASEPRI, r3
 800d280:	f3bf 8f6f 	isb	sy
 800d284:	f3bf 8f4f 	dsb	sy
 800d288:	60fb      	str	r3, [r7, #12]
}
 800d28a:	bf00      	nop
 800d28c:	e7fe      	b.n	800d28c <vTaskStartScheduler+0xa8>
}
 800d28e:	bf00      	nop
 800d290:	3718      	adds	r7, #24
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}
 800d296:	bf00      	nop
 800d298:	08011ef0 	.word	0x08011ef0
 800d29c:	0800d899 	.word	0x0800d899
 800d2a0:	20006290 	.word	0x20006290
 800d2a4:	2000616c 	.word	0x2000616c
 800d2a8:	200000a0 	.word	0x200000a0
 800d2ac:	2000628c 	.word	0x2000628c
 800d2b0:	20006278 	.word	0x20006278
 800d2b4:	20006270 	.word	0x20006270

0800d2b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d2bc:	4b04      	ldr	r3, [pc, #16]	; (800d2d0 <vTaskSuspendAll+0x18>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	3301      	adds	r3, #1
 800d2c2:	4a03      	ldr	r2, [pc, #12]	; (800d2d0 <vTaskSuspendAll+0x18>)
 800d2c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d2c6:	bf00      	nop
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ce:	4770      	bx	lr
 800d2d0:	20006294 	.word	0x20006294

0800d2d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b084      	sub	sp, #16
 800d2d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d2da:	2300      	movs	r3, #0
 800d2dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d2e2:	4b41      	ldr	r3, [pc, #260]	; (800d3e8 <xTaskResumeAll+0x114>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d10a      	bne.n	800d300 <xTaskResumeAll+0x2c>
	__asm volatile
 800d2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ee:	f383 8811 	msr	BASEPRI, r3
 800d2f2:	f3bf 8f6f 	isb	sy
 800d2f6:	f3bf 8f4f 	dsb	sy
 800d2fa:	603b      	str	r3, [r7, #0]
}
 800d2fc:	bf00      	nop
 800d2fe:	e7fe      	b.n	800d2fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d300:	f000 fef0 	bl	800e0e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d304:	4b38      	ldr	r3, [pc, #224]	; (800d3e8 <xTaskResumeAll+0x114>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	3b01      	subs	r3, #1
 800d30a:	4a37      	ldr	r2, [pc, #220]	; (800d3e8 <xTaskResumeAll+0x114>)
 800d30c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d30e:	4b36      	ldr	r3, [pc, #216]	; (800d3e8 <xTaskResumeAll+0x114>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d161      	bne.n	800d3da <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d316:	4b35      	ldr	r3, [pc, #212]	; (800d3ec <xTaskResumeAll+0x118>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d05d      	beq.n	800d3da <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d31e:	e02e      	b.n	800d37e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d320:	4b33      	ldr	r3, [pc, #204]	; (800d3f0 <xTaskResumeAll+0x11c>)
 800d322:	68db      	ldr	r3, [r3, #12]
 800d324:	68db      	ldr	r3, [r3, #12]
 800d326:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	3318      	adds	r3, #24
 800d32c:	4618      	mov	r0, r3
 800d32e:	f7fe ff88 	bl	800c242 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	3304      	adds	r3, #4
 800d336:	4618      	mov	r0, r3
 800d338:	f7fe ff83 	bl	800c242 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d340:	2201      	movs	r2, #1
 800d342:	409a      	lsls	r2, r3
 800d344:	4b2b      	ldr	r3, [pc, #172]	; (800d3f4 <xTaskResumeAll+0x120>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	4313      	orrs	r3, r2
 800d34a:	4a2a      	ldr	r2, [pc, #168]	; (800d3f4 <xTaskResumeAll+0x120>)
 800d34c:	6013      	str	r3, [r2, #0]
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d352:	4613      	mov	r3, r2
 800d354:	009b      	lsls	r3, r3, #2
 800d356:	4413      	add	r3, r2
 800d358:	009b      	lsls	r3, r3, #2
 800d35a:	4a27      	ldr	r2, [pc, #156]	; (800d3f8 <xTaskResumeAll+0x124>)
 800d35c:	441a      	add	r2, r3
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	3304      	adds	r3, #4
 800d362:	4619      	mov	r1, r3
 800d364:	4610      	mov	r0, r2
 800d366:	f7fe ff0f 	bl	800c188 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d36e:	4b23      	ldr	r3, [pc, #140]	; (800d3fc <xTaskResumeAll+0x128>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d374:	429a      	cmp	r2, r3
 800d376:	d302      	bcc.n	800d37e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d378:	4b21      	ldr	r3, [pc, #132]	; (800d400 <xTaskResumeAll+0x12c>)
 800d37a:	2201      	movs	r2, #1
 800d37c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d37e:	4b1c      	ldr	r3, [pc, #112]	; (800d3f0 <xTaskResumeAll+0x11c>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d1cc      	bne.n	800d320 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d001      	beq.n	800d390 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d38c:	f000 fb3e 	bl	800da0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d390:	4b1c      	ldr	r3, [pc, #112]	; (800d404 <xTaskResumeAll+0x130>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d010      	beq.n	800d3be <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d39c:	f000 f858 	bl	800d450 <xTaskIncrementTick>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d002      	beq.n	800d3ac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d3a6:	4b16      	ldr	r3, [pc, #88]	; (800d400 <xTaskResumeAll+0x12c>)
 800d3a8:	2201      	movs	r2, #1
 800d3aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	3b01      	subs	r3, #1
 800d3b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d1f1      	bne.n	800d39c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800d3b8:	4b12      	ldr	r3, [pc, #72]	; (800d404 <xTaskResumeAll+0x130>)
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d3be:	4b10      	ldr	r3, [pc, #64]	; (800d400 <xTaskResumeAll+0x12c>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d009      	beq.n	800d3da <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d3ca:	4b0f      	ldr	r3, [pc, #60]	; (800d408 <xTaskResumeAll+0x134>)
 800d3cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3d0:	601a      	str	r2, [r3, #0]
 800d3d2:	f3bf 8f4f 	dsb	sy
 800d3d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d3da:	f000 feb3 	bl	800e144 <vPortExitCritical>

	return xAlreadyYielded;
 800d3de:	68bb      	ldr	r3, [r7, #8]
}
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	3710      	adds	r7, #16
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}
 800d3e8:	20006294 	.word	0x20006294
 800d3ec:	2000626c 	.word	0x2000626c
 800d3f0:	2000622c 	.word	0x2000622c
 800d3f4:	20006274 	.word	0x20006274
 800d3f8:	20006170 	.word	0x20006170
 800d3fc:	2000616c 	.word	0x2000616c
 800d400:	20006280 	.word	0x20006280
 800d404:	2000627c 	.word	0x2000627c
 800d408:	e000ed04 	.word	0xe000ed04

0800d40c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d40c:	b480      	push	{r7}
 800d40e:	b083      	sub	sp, #12
 800d410:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d412:	4b05      	ldr	r3, [pc, #20]	; (800d428 <xTaskGetTickCount+0x1c>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d418:	687b      	ldr	r3, [r7, #4]
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	370c      	adds	r7, #12
 800d41e:	46bd      	mov	sp, r7
 800d420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d424:	4770      	bx	lr
 800d426:	bf00      	nop
 800d428:	20006270 	.word	0x20006270

0800d42c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b082      	sub	sp, #8
 800d430:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d432:	f000 ff39 	bl	800e2a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d436:	2300      	movs	r3, #0
 800d438:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d43a:	4b04      	ldr	r3, [pc, #16]	; (800d44c <xTaskGetTickCountFromISR+0x20>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d440:	683b      	ldr	r3, [r7, #0]
}
 800d442:	4618      	mov	r0, r3
 800d444:	3708      	adds	r7, #8
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}
 800d44a:	bf00      	nop
 800d44c:	20006270 	.word	0x20006270

0800d450 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b086      	sub	sp, #24
 800d454:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d456:	2300      	movs	r3, #0
 800d458:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d45a:	4b4e      	ldr	r3, [pc, #312]	; (800d594 <xTaskIncrementTick+0x144>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	f040 808e 	bne.w	800d580 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d464:	4b4c      	ldr	r3, [pc, #304]	; (800d598 <xTaskIncrementTick+0x148>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	3301      	adds	r3, #1
 800d46a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d46c:	4a4a      	ldr	r2, [pc, #296]	; (800d598 <xTaskIncrementTick+0x148>)
 800d46e:	693b      	ldr	r3, [r7, #16]
 800d470:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d120      	bne.n	800d4ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d478:	4b48      	ldr	r3, [pc, #288]	; (800d59c <xTaskIncrementTick+0x14c>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d00a      	beq.n	800d498 <xTaskIncrementTick+0x48>
	__asm volatile
 800d482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d486:	f383 8811 	msr	BASEPRI, r3
 800d48a:	f3bf 8f6f 	isb	sy
 800d48e:	f3bf 8f4f 	dsb	sy
 800d492:	603b      	str	r3, [r7, #0]
}
 800d494:	bf00      	nop
 800d496:	e7fe      	b.n	800d496 <xTaskIncrementTick+0x46>
 800d498:	4b40      	ldr	r3, [pc, #256]	; (800d59c <xTaskIncrementTick+0x14c>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	60fb      	str	r3, [r7, #12]
 800d49e:	4b40      	ldr	r3, [pc, #256]	; (800d5a0 <xTaskIncrementTick+0x150>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	4a3e      	ldr	r2, [pc, #248]	; (800d59c <xTaskIncrementTick+0x14c>)
 800d4a4:	6013      	str	r3, [r2, #0]
 800d4a6:	4a3e      	ldr	r2, [pc, #248]	; (800d5a0 <xTaskIncrementTick+0x150>)
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	6013      	str	r3, [r2, #0]
 800d4ac:	4b3d      	ldr	r3, [pc, #244]	; (800d5a4 <xTaskIncrementTick+0x154>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	3301      	adds	r3, #1
 800d4b2:	4a3c      	ldr	r2, [pc, #240]	; (800d5a4 <xTaskIncrementTick+0x154>)
 800d4b4:	6013      	str	r3, [r2, #0]
 800d4b6:	f000 faa9 	bl	800da0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d4ba:	4b3b      	ldr	r3, [pc, #236]	; (800d5a8 <xTaskIncrementTick+0x158>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	693a      	ldr	r2, [r7, #16]
 800d4c0:	429a      	cmp	r2, r3
 800d4c2:	d348      	bcc.n	800d556 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d4c4:	4b35      	ldr	r3, [pc, #212]	; (800d59c <xTaskIncrementTick+0x14c>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d104      	bne.n	800d4d8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4ce:	4b36      	ldr	r3, [pc, #216]	; (800d5a8 <xTaskIncrementTick+0x158>)
 800d4d0:	f04f 32ff 	mov.w	r2, #4294967295
 800d4d4:	601a      	str	r2, [r3, #0]
					break;
 800d4d6:	e03e      	b.n	800d556 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4d8:	4b30      	ldr	r3, [pc, #192]	; (800d59c <xTaskIncrementTick+0x14c>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	68db      	ldr	r3, [r3, #12]
 800d4de:	68db      	ldr	r3, [r3, #12]
 800d4e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	685b      	ldr	r3, [r3, #4]
 800d4e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d4e8:	693a      	ldr	r2, [r7, #16]
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	429a      	cmp	r2, r3
 800d4ee:	d203      	bcs.n	800d4f8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d4f0:	4a2d      	ldr	r2, [pc, #180]	; (800d5a8 <xTaskIncrementTick+0x158>)
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d4f6:	e02e      	b.n	800d556 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	3304      	adds	r3, #4
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f7fe fea0 	bl	800c242 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d506:	2b00      	cmp	r3, #0
 800d508:	d004      	beq.n	800d514 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	3318      	adds	r3, #24
 800d50e:	4618      	mov	r0, r3
 800d510:	f7fe fe97 	bl	800c242 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d518:	2201      	movs	r2, #1
 800d51a:	409a      	lsls	r2, r3
 800d51c:	4b23      	ldr	r3, [pc, #140]	; (800d5ac <xTaskIncrementTick+0x15c>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	4313      	orrs	r3, r2
 800d522:	4a22      	ldr	r2, [pc, #136]	; (800d5ac <xTaskIncrementTick+0x15c>)
 800d524:	6013      	str	r3, [r2, #0]
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d52a:	4613      	mov	r3, r2
 800d52c:	009b      	lsls	r3, r3, #2
 800d52e:	4413      	add	r3, r2
 800d530:	009b      	lsls	r3, r3, #2
 800d532:	4a1f      	ldr	r2, [pc, #124]	; (800d5b0 <xTaskIncrementTick+0x160>)
 800d534:	441a      	add	r2, r3
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	3304      	adds	r3, #4
 800d53a:	4619      	mov	r1, r3
 800d53c:	4610      	mov	r0, r2
 800d53e:	f7fe fe23 	bl	800c188 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d546:	4b1b      	ldr	r3, [pc, #108]	; (800d5b4 <xTaskIncrementTick+0x164>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d54c:	429a      	cmp	r2, r3
 800d54e:	d3b9      	bcc.n	800d4c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d550:	2301      	movs	r3, #1
 800d552:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d554:	e7b6      	b.n	800d4c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d556:	4b17      	ldr	r3, [pc, #92]	; (800d5b4 <xTaskIncrementTick+0x164>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d55c:	4914      	ldr	r1, [pc, #80]	; (800d5b0 <xTaskIncrementTick+0x160>)
 800d55e:	4613      	mov	r3, r2
 800d560:	009b      	lsls	r3, r3, #2
 800d562:	4413      	add	r3, r2
 800d564:	009b      	lsls	r3, r3, #2
 800d566:	440b      	add	r3, r1
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	2b01      	cmp	r3, #1
 800d56c:	d901      	bls.n	800d572 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800d56e:	2301      	movs	r3, #1
 800d570:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d572:	4b11      	ldr	r3, [pc, #68]	; (800d5b8 <xTaskIncrementTick+0x168>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d007      	beq.n	800d58a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800d57a:	2301      	movs	r3, #1
 800d57c:	617b      	str	r3, [r7, #20]
 800d57e:	e004      	b.n	800d58a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d580:	4b0e      	ldr	r3, [pc, #56]	; (800d5bc <xTaskIncrementTick+0x16c>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	3301      	adds	r3, #1
 800d586:	4a0d      	ldr	r2, [pc, #52]	; (800d5bc <xTaskIncrementTick+0x16c>)
 800d588:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d58a:	697b      	ldr	r3, [r7, #20]
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	3718      	adds	r7, #24
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}
 800d594:	20006294 	.word	0x20006294
 800d598:	20006270 	.word	0x20006270
 800d59c:	20006224 	.word	0x20006224
 800d5a0:	20006228 	.word	0x20006228
 800d5a4:	20006284 	.word	0x20006284
 800d5a8:	2000628c 	.word	0x2000628c
 800d5ac:	20006274 	.word	0x20006274
 800d5b0:	20006170 	.word	0x20006170
 800d5b4:	2000616c 	.word	0x2000616c
 800d5b8:	20006280 	.word	0x20006280
 800d5bc:	2000627c 	.word	0x2000627c

0800d5c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d5c0:	b480      	push	{r7}
 800d5c2:	b087      	sub	sp, #28
 800d5c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d5c6:	4b29      	ldr	r3, [pc, #164]	; (800d66c <vTaskSwitchContext+0xac>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d003      	beq.n	800d5d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d5ce:	4b28      	ldr	r3, [pc, #160]	; (800d670 <vTaskSwitchContext+0xb0>)
 800d5d0:	2201      	movs	r2, #1
 800d5d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d5d4:	e044      	b.n	800d660 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800d5d6:	4b26      	ldr	r3, [pc, #152]	; (800d670 <vTaskSwitchContext+0xb0>)
 800d5d8:	2200      	movs	r2, #0
 800d5da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5dc:	4b25      	ldr	r3, [pc, #148]	; (800d674 <vTaskSwitchContext+0xb4>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	fab3 f383 	clz	r3, r3
 800d5e8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d5ea:	7afb      	ldrb	r3, [r7, #11]
 800d5ec:	f1c3 031f 	rsb	r3, r3, #31
 800d5f0:	617b      	str	r3, [r7, #20]
 800d5f2:	4921      	ldr	r1, [pc, #132]	; (800d678 <vTaskSwitchContext+0xb8>)
 800d5f4:	697a      	ldr	r2, [r7, #20]
 800d5f6:	4613      	mov	r3, r2
 800d5f8:	009b      	lsls	r3, r3, #2
 800d5fa:	4413      	add	r3, r2
 800d5fc:	009b      	lsls	r3, r3, #2
 800d5fe:	440b      	add	r3, r1
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d10a      	bne.n	800d61c <vTaskSwitchContext+0x5c>
	__asm volatile
 800d606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d60a:	f383 8811 	msr	BASEPRI, r3
 800d60e:	f3bf 8f6f 	isb	sy
 800d612:	f3bf 8f4f 	dsb	sy
 800d616:	607b      	str	r3, [r7, #4]
}
 800d618:	bf00      	nop
 800d61a:	e7fe      	b.n	800d61a <vTaskSwitchContext+0x5a>
 800d61c:	697a      	ldr	r2, [r7, #20]
 800d61e:	4613      	mov	r3, r2
 800d620:	009b      	lsls	r3, r3, #2
 800d622:	4413      	add	r3, r2
 800d624:	009b      	lsls	r3, r3, #2
 800d626:	4a14      	ldr	r2, [pc, #80]	; (800d678 <vTaskSwitchContext+0xb8>)
 800d628:	4413      	add	r3, r2
 800d62a:	613b      	str	r3, [r7, #16]
 800d62c:	693b      	ldr	r3, [r7, #16]
 800d62e:	685b      	ldr	r3, [r3, #4]
 800d630:	685a      	ldr	r2, [r3, #4]
 800d632:	693b      	ldr	r3, [r7, #16]
 800d634:	605a      	str	r2, [r3, #4]
 800d636:	693b      	ldr	r3, [r7, #16]
 800d638:	685a      	ldr	r2, [r3, #4]
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	3308      	adds	r3, #8
 800d63e:	429a      	cmp	r2, r3
 800d640:	d104      	bne.n	800d64c <vTaskSwitchContext+0x8c>
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	685b      	ldr	r3, [r3, #4]
 800d646:	685a      	ldr	r2, [r3, #4]
 800d648:	693b      	ldr	r3, [r7, #16]
 800d64a:	605a      	str	r2, [r3, #4]
 800d64c:	693b      	ldr	r3, [r7, #16]
 800d64e:	685b      	ldr	r3, [r3, #4]
 800d650:	68db      	ldr	r3, [r3, #12]
 800d652:	4a0a      	ldr	r2, [pc, #40]	; (800d67c <vTaskSwitchContext+0xbc>)
 800d654:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d656:	4b09      	ldr	r3, [pc, #36]	; (800d67c <vTaskSwitchContext+0xbc>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	334c      	adds	r3, #76	; 0x4c
 800d65c:	4a08      	ldr	r2, [pc, #32]	; (800d680 <vTaskSwitchContext+0xc0>)
 800d65e:	6013      	str	r3, [r2, #0]
}
 800d660:	bf00      	nop
 800d662:	371c      	adds	r7, #28
 800d664:	46bd      	mov	sp, r7
 800d666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66a:	4770      	bx	lr
 800d66c:	20006294 	.word	0x20006294
 800d670:	20006280 	.word	0x20006280
 800d674:	20006274 	.word	0x20006274
 800d678:	20006170 	.word	0x20006170
 800d67c:	2000616c 	.word	0x2000616c
 800d680:	200000a0 	.word	0x200000a0

0800d684 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b084      	sub	sp, #16
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
 800d68c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d10a      	bne.n	800d6aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d698:	f383 8811 	msr	BASEPRI, r3
 800d69c:	f3bf 8f6f 	isb	sy
 800d6a0:	f3bf 8f4f 	dsb	sy
 800d6a4:	60fb      	str	r3, [r7, #12]
}
 800d6a6:	bf00      	nop
 800d6a8:	e7fe      	b.n	800d6a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d6aa:	4b07      	ldr	r3, [pc, #28]	; (800d6c8 <vTaskPlaceOnEventList+0x44>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	3318      	adds	r3, #24
 800d6b0:	4619      	mov	r1, r3
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f7fe fd8c 	bl	800c1d0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d6b8:	2101      	movs	r1, #1
 800d6ba:	6838      	ldr	r0, [r7, #0]
 800d6bc:	f000 fb82 	bl	800ddc4 <prvAddCurrentTaskToDelayedList>
}
 800d6c0:	bf00      	nop
 800d6c2:	3710      	adds	r7, #16
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}
 800d6c8:	2000616c 	.word	0x2000616c

0800d6cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b086      	sub	sp, #24
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	68db      	ldr	r3, [r3, #12]
 800d6d8:	68db      	ldr	r3, [r3, #12]
 800d6da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d10a      	bne.n	800d6f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e6:	f383 8811 	msr	BASEPRI, r3
 800d6ea:	f3bf 8f6f 	isb	sy
 800d6ee:	f3bf 8f4f 	dsb	sy
 800d6f2:	60fb      	str	r3, [r7, #12]
}
 800d6f4:	bf00      	nop
 800d6f6:	e7fe      	b.n	800d6f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d6f8:	693b      	ldr	r3, [r7, #16]
 800d6fa:	3318      	adds	r3, #24
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f7fe fda0 	bl	800c242 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d702:	4b1d      	ldr	r3, [pc, #116]	; (800d778 <xTaskRemoveFromEventList+0xac>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d11c      	bne.n	800d744 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d70a:	693b      	ldr	r3, [r7, #16]
 800d70c:	3304      	adds	r3, #4
 800d70e:	4618      	mov	r0, r3
 800d710:	f7fe fd97 	bl	800c242 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d718:	2201      	movs	r2, #1
 800d71a:	409a      	lsls	r2, r3
 800d71c:	4b17      	ldr	r3, [pc, #92]	; (800d77c <xTaskRemoveFromEventList+0xb0>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	4313      	orrs	r3, r2
 800d722:	4a16      	ldr	r2, [pc, #88]	; (800d77c <xTaskRemoveFromEventList+0xb0>)
 800d724:	6013      	str	r3, [r2, #0]
 800d726:	693b      	ldr	r3, [r7, #16]
 800d728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d72a:	4613      	mov	r3, r2
 800d72c:	009b      	lsls	r3, r3, #2
 800d72e:	4413      	add	r3, r2
 800d730:	009b      	lsls	r3, r3, #2
 800d732:	4a13      	ldr	r2, [pc, #76]	; (800d780 <xTaskRemoveFromEventList+0xb4>)
 800d734:	441a      	add	r2, r3
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	3304      	adds	r3, #4
 800d73a:	4619      	mov	r1, r3
 800d73c:	4610      	mov	r0, r2
 800d73e:	f7fe fd23 	bl	800c188 <vListInsertEnd>
 800d742:	e005      	b.n	800d750 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	3318      	adds	r3, #24
 800d748:	4619      	mov	r1, r3
 800d74a:	480e      	ldr	r0, [pc, #56]	; (800d784 <xTaskRemoveFromEventList+0xb8>)
 800d74c:	f7fe fd1c 	bl	800c188 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d754:	4b0c      	ldr	r3, [pc, #48]	; (800d788 <xTaskRemoveFromEventList+0xbc>)
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d75a:	429a      	cmp	r2, r3
 800d75c:	d905      	bls.n	800d76a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d75e:	2301      	movs	r3, #1
 800d760:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d762:	4b0a      	ldr	r3, [pc, #40]	; (800d78c <xTaskRemoveFromEventList+0xc0>)
 800d764:	2201      	movs	r2, #1
 800d766:	601a      	str	r2, [r3, #0]
 800d768:	e001      	b.n	800d76e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d76a:	2300      	movs	r3, #0
 800d76c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d76e:	697b      	ldr	r3, [r7, #20]
}
 800d770:	4618      	mov	r0, r3
 800d772:	3718      	adds	r7, #24
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}
 800d778:	20006294 	.word	0x20006294
 800d77c:	20006274 	.word	0x20006274
 800d780:	20006170 	.word	0x20006170
 800d784:	2000622c 	.word	0x2000622c
 800d788:	2000616c 	.word	0x2000616c
 800d78c:	20006280 	.word	0x20006280

0800d790 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d790:	b480      	push	{r7}
 800d792:	b083      	sub	sp, #12
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d798:	4b06      	ldr	r3, [pc, #24]	; (800d7b4 <vTaskInternalSetTimeOutState+0x24>)
 800d79a:	681a      	ldr	r2, [r3, #0]
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d7a0:	4b05      	ldr	r3, [pc, #20]	; (800d7b8 <vTaskInternalSetTimeOutState+0x28>)
 800d7a2:	681a      	ldr	r2, [r3, #0]
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	605a      	str	r2, [r3, #4]
}
 800d7a8:	bf00      	nop
 800d7aa:	370c      	adds	r7, #12
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b2:	4770      	bx	lr
 800d7b4:	20006284 	.word	0x20006284
 800d7b8:	20006270 	.word	0x20006270

0800d7bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b088      	sub	sp, #32
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
 800d7c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d10a      	bne.n	800d7e2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d0:	f383 8811 	msr	BASEPRI, r3
 800d7d4:	f3bf 8f6f 	isb	sy
 800d7d8:	f3bf 8f4f 	dsb	sy
 800d7dc:	613b      	str	r3, [r7, #16]
}
 800d7de:	bf00      	nop
 800d7e0:	e7fe      	b.n	800d7e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d10a      	bne.n	800d7fe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ec:	f383 8811 	msr	BASEPRI, r3
 800d7f0:	f3bf 8f6f 	isb	sy
 800d7f4:	f3bf 8f4f 	dsb	sy
 800d7f8:	60fb      	str	r3, [r7, #12]
}
 800d7fa:	bf00      	nop
 800d7fc:	e7fe      	b.n	800d7fc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d7fe:	f000 fc71 	bl	800e0e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d802:	4b1d      	ldr	r3, [pc, #116]	; (800d878 <xTaskCheckForTimeOut+0xbc>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	685b      	ldr	r3, [r3, #4]
 800d80c:	69ba      	ldr	r2, [r7, #24]
 800d80e:	1ad3      	subs	r3, r2, r3
 800d810:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d81a:	d102      	bne.n	800d822 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d81c:	2300      	movs	r3, #0
 800d81e:	61fb      	str	r3, [r7, #28]
 800d820:	e023      	b.n	800d86a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681a      	ldr	r2, [r3, #0]
 800d826:	4b15      	ldr	r3, [pc, #84]	; (800d87c <xTaskCheckForTimeOut+0xc0>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d007      	beq.n	800d83e <xTaskCheckForTimeOut+0x82>
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	685b      	ldr	r3, [r3, #4]
 800d832:	69ba      	ldr	r2, [r7, #24]
 800d834:	429a      	cmp	r2, r3
 800d836:	d302      	bcc.n	800d83e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d838:	2301      	movs	r3, #1
 800d83a:	61fb      	str	r3, [r7, #28]
 800d83c:	e015      	b.n	800d86a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	697a      	ldr	r2, [r7, #20]
 800d844:	429a      	cmp	r2, r3
 800d846:	d20b      	bcs.n	800d860 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	681a      	ldr	r2, [r3, #0]
 800d84c:	697b      	ldr	r3, [r7, #20]
 800d84e:	1ad2      	subs	r2, r2, r3
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f7ff ff9b 	bl	800d790 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d85a:	2300      	movs	r3, #0
 800d85c:	61fb      	str	r3, [r7, #28]
 800d85e:	e004      	b.n	800d86a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	2200      	movs	r2, #0
 800d864:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d866:	2301      	movs	r3, #1
 800d868:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d86a:	f000 fc6b 	bl	800e144 <vPortExitCritical>

	return xReturn;
 800d86e:	69fb      	ldr	r3, [r7, #28]
}
 800d870:	4618      	mov	r0, r3
 800d872:	3720      	adds	r7, #32
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}
 800d878:	20006270 	.word	0x20006270
 800d87c:	20006284 	.word	0x20006284

0800d880 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d880:	b480      	push	{r7}
 800d882:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d884:	4b03      	ldr	r3, [pc, #12]	; (800d894 <vTaskMissedYield+0x14>)
 800d886:	2201      	movs	r2, #1
 800d888:	601a      	str	r2, [r3, #0]
}
 800d88a:	bf00      	nop
 800d88c:	46bd      	mov	sp, r7
 800d88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d892:	4770      	bx	lr
 800d894:	20006280 	.word	0x20006280

0800d898 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b082      	sub	sp, #8
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d8a0:	f000 f852 	bl	800d948 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d8a4:	4b06      	ldr	r3, [pc, #24]	; (800d8c0 <prvIdleTask+0x28>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	2b01      	cmp	r3, #1
 800d8aa:	d9f9      	bls.n	800d8a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d8ac:	4b05      	ldr	r3, [pc, #20]	; (800d8c4 <prvIdleTask+0x2c>)
 800d8ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8b2:	601a      	str	r2, [r3, #0]
 800d8b4:	f3bf 8f4f 	dsb	sy
 800d8b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d8bc:	e7f0      	b.n	800d8a0 <prvIdleTask+0x8>
 800d8be:	bf00      	nop
 800d8c0:	20006170 	.word	0x20006170
 800d8c4:	e000ed04 	.word	0xe000ed04

0800d8c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b082      	sub	sp, #8
 800d8cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	607b      	str	r3, [r7, #4]
 800d8d2:	e00c      	b.n	800d8ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d8d4:	687a      	ldr	r2, [r7, #4]
 800d8d6:	4613      	mov	r3, r2
 800d8d8:	009b      	lsls	r3, r3, #2
 800d8da:	4413      	add	r3, r2
 800d8dc:	009b      	lsls	r3, r3, #2
 800d8de:	4a12      	ldr	r2, [pc, #72]	; (800d928 <prvInitialiseTaskLists+0x60>)
 800d8e0:	4413      	add	r3, r2
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7fe fc23 	bl	800c12e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	3301      	adds	r3, #1
 800d8ec:	607b      	str	r3, [r7, #4]
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	2b06      	cmp	r3, #6
 800d8f2:	d9ef      	bls.n	800d8d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d8f4:	480d      	ldr	r0, [pc, #52]	; (800d92c <prvInitialiseTaskLists+0x64>)
 800d8f6:	f7fe fc1a 	bl	800c12e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d8fa:	480d      	ldr	r0, [pc, #52]	; (800d930 <prvInitialiseTaskLists+0x68>)
 800d8fc:	f7fe fc17 	bl	800c12e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d900:	480c      	ldr	r0, [pc, #48]	; (800d934 <prvInitialiseTaskLists+0x6c>)
 800d902:	f7fe fc14 	bl	800c12e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d906:	480c      	ldr	r0, [pc, #48]	; (800d938 <prvInitialiseTaskLists+0x70>)
 800d908:	f7fe fc11 	bl	800c12e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d90c:	480b      	ldr	r0, [pc, #44]	; (800d93c <prvInitialiseTaskLists+0x74>)
 800d90e:	f7fe fc0e 	bl	800c12e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d912:	4b0b      	ldr	r3, [pc, #44]	; (800d940 <prvInitialiseTaskLists+0x78>)
 800d914:	4a05      	ldr	r2, [pc, #20]	; (800d92c <prvInitialiseTaskLists+0x64>)
 800d916:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d918:	4b0a      	ldr	r3, [pc, #40]	; (800d944 <prvInitialiseTaskLists+0x7c>)
 800d91a:	4a05      	ldr	r2, [pc, #20]	; (800d930 <prvInitialiseTaskLists+0x68>)
 800d91c:	601a      	str	r2, [r3, #0]
}
 800d91e:	bf00      	nop
 800d920:	3708      	adds	r7, #8
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}
 800d926:	bf00      	nop
 800d928:	20006170 	.word	0x20006170
 800d92c:	200061fc 	.word	0x200061fc
 800d930:	20006210 	.word	0x20006210
 800d934:	2000622c 	.word	0x2000622c
 800d938:	20006240 	.word	0x20006240
 800d93c:	20006258 	.word	0x20006258
 800d940:	20006224 	.word	0x20006224
 800d944:	20006228 	.word	0x20006228

0800d948 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b082      	sub	sp, #8
 800d94c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d94e:	e019      	b.n	800d984 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d950:	f000 fbc8 	bl	800e0e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d954:	4b10      	ldr	r3, [pc, #64]	; (800d998 <prvCheckTasksWaitingTermination+0x50>)
 800d956:	68db      	ldr	r3, [r3, #12]
 800d958:	68db      	ldr	r3, [r3, #12]
 800d95a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	3304      	adds	r3, #4
 800d960:	4618      	mov	r0, r3
 800d962:	f7fe fc6e 	bl	800c242 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d966:	4b0d      	ldr	r3, [pc, #52]	; (800d99c <prvCheckTasksWaitingTermination+0x54>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	3b01      	subs	r3, #1
 800d96c:	4a0b      	ldr	r2, [pc, #44]	; (800d99c <prvCheckTasksWaitingTermination+0x54>)
 800d96e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d970:	4b0b      	ldr	r3, [pc, #44]	; (800d9a0 <prvCheckTasksWaitingTermination+0x58>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	3b01      	subs	r3, #1
 800d976:	4a0a      	ldr	r2, [pc, #40]	; (800d9a0 <prvCheckTasksWaitingTermination+0x58>)
 800d978:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d97a:	f000 fbe3 	bl	800e144 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	f000 f810 	bl	800d9a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d984:	4b06      	ldr	r3, [pc, #24]	; (800d9a0 <prvCheckTasksWaitingTermination+0x58>)
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d1e1      	bne.n	800d950 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d98c:	bf00      	nop
 800d98e:	bf00      	nop
 800d990:	3708      	adds	r7, #8
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}
 800d996:	bf00      	nop
 800d998:	20006240 	.word	0x20006240
 800d99c:	2000626c 	.word	0x2000626c
 800d9a0:	20006254 	.word	0x20006254

0800d9a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b084      	sub	sp, #16
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	334c      	adds	r3, #76	; 0x4c
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f001 fd4f 	bl	800f454 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d108      	bne.n	800d9d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f000 fd7b 	bl	800e4c0 <vPortFree>
				vPortFree( pxTCB );
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	f000 fd78 	bl	800e4c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d9d0:	e018      	b.n	800da04 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800d9d8:	2b01      	cmp	r3, #1
 800d9da:	d103      	bne.n	800d9e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	f000 fd6f 	bl	800e4c0 <vPortFree>
	}
 800d9e2:	e00f      	b.n	800da04 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800d9ea:	2b02      	cmp	r3, #2
 800d9ec:	d00a      	beq.n	800da04 <prvDeleteTCB+0x60>
	__asm volatile
 800d9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f2:	f383 8811 	msr	BASEPRI, r3
 800d9f6:	f3bf 8f6f 	isb	sy
 800d9fa:	f3bf 8f4f 	dsb	sy
 800d9fe:	60fb      	str	r3, [r7, #12]
}
 800da00:	bf00      	nop
 800da02:	e7fe      	b.n	800da02 <prvDeleteTCB+0x5e>
	}
 800da04:	bf00      	nop
 800da06:	3710      	adds	r7, #16
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}

0800da0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800da0c:	b480      	push	{r7}
 800da0e:	b083      	sub	sp, #12
 800da10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da12:	4b0c      	ldr	r3, [pc, #48]	; (800da44 <prvResetNextTaskUnblockTime+0x38>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d104      	bne.n	800da26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800da1c:	4b0a      	ldr	r3, [pc, #40]	; (800da48 <prvResetNextTaskUnblockTime+0x3c>)
 800da1e:	f04f 32ff 	mov.w	r2, #4294967295
 800da22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800da24:	e008      	b.n	800da38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da26:	4b07      	ldr	r3, [pc, #28]	; (800da44 <prvResetNextTaskUnblockTime+0x38>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	68db      	ldr	r3, [r3, #12]
 800da2c:	68db      	ldr	r3, [r3, #12]
 800da2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	685b      	ldr	r3, [r3, #4]
 800da34:	4a04      	ldr	r2, [pc, #16]	; (800da48 <prvResetNextTaskUnblockTime+0x3c>)
 800da36:	6013      	str	r3, [r2, #0]
}
 800da38:	bf00      	nop
 800da3a:	370c      	adds	r7, #12
 800da3c:	46bd      	mov	sp, r7
 800da3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da42:	4770      	bx	lr
 800da44:	20006224 	.word	0x20006224
 800da48:	2000628c 	.word	0x2000628c

0800da4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800da4c:	b480      	push	{r7}
 800da4e:	b083      	sub	sp, #12
 800da50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800da52:	4b0b      	ldr	r3, [pc, #44]	; (800da80 <xTaskGetSchedulerState+0x34>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d102      	bne.n	800da60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800da5a:	2301      	movs	r3, #1
 800da5c:	607b      	str	r3, [r7, #4]
 800da5e:	e008      	b.n	800da72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da60:	4b08      	ldr	r3, [pc, #32]	; (800da84 <xTaskGetSchedulerState+0x38>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d102      	bne.n	800da6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800da68:	2302      	movs	r3, #2
 800da6a:	607b      	str	r3, [r7, #4]
 800da6c:	e001      	b.n	800da72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800da6e:	2300      	movs	r3, #0
 800da70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800da72:	687b      	ldr	r3, [r7, #4]
	}
 800da74:	4618      	mov	r0, r3
 800da76:	370c      	adds	r7, #12
 800da78:	46bd      	mov	sp, r7
 800da7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7e:	4770      	bx	lr
 800da80:	20006278 	.word	0x20006278
 800da84:	20006294 	.word	0x20006294

0800da88 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b084      	sub	sp, #16
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800da94:	2300      	movs	r3, #0
 800da96:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d05e      	beq.n	800db5c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daa2:	4b31      	ldr	r3, [pc, #196]	; (800db68 <xTaskPriorityInherit+0xe0>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daa8:	429a      	cmp	r2, r3
 800daaa:	d24e      	bcs.n	800db4a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	699b      	ldr	r3, [r3, #24]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	db06      	blt.n	800dac2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dab4:	4b2c      	ldr	r3, [pc, #176]	; (800db68 <xTaskPriorityInherit+0xe0>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daba:	f1c3 0207 	rsb	r2, r3, #7
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	6959      	ldr	r1, [r3, #20]
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daca:	4613      	mov	r3, r2
 800dacc:	009b      	lsls	r3, r3, #2
 800dace:	4413      	add	r3, r2
 800dad0:	009b      	lsls	r3, r3, #2
 800dad2:	4a26      	ldr	r2, [pc, #152]	; (800db6c <xTaskPriorityInherit+0xe4>)
 800dad4:	4413      	add	r3, r2
 800dad6:	4299      	cmp	r1, r3
 800dad8:	d12f      	bne.n	800db3a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	3304      	adds	r3, #4
 800dade:	4618      	mov	r0, r3
 800dae0:	f7fe fbaf 	bl	800c242 <uxListRemove>
 800dae4:	4603      	mov	r3, r0
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d10a      	bne.n	800db00 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daee:	2201      	movs	r2, #1
 800daf0:	fa02 f303 	lsl.w	r3, r2, r3
 800daf4:	43da      	mvns	r2, r3
 800daf6:	4b1e      	ldr	r3, [pc, #120]	; (800db70 <xTaskPriorityInherit+0xe8>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	4013      	ands	r3, r2
 800dafc:	4a1c      	ldr	r2, [pc, #112]	; (800db70 <xTaskPriorityInherit+0xe8>)
 800dafe:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800db00:	4b19      	ldr	r3, [pc, #100]	; (800db68 <xTaskPriorityInherit+0xe0>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db0e:	2201      	movs	r2, #1
 800db10:	409a      	lsls	r2, r3
 800db12:	4b17      	ldr	r3, [pc, #92]	; (800db70 <xTaskPriorityInherit+0xe8>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	4313      	orrs	r3, r2
 800db18:	4a15      	ldr	r2, [pc, #84]	; (800db70 <xTaskPriorityInherit+0xe8>)
 800db1a:	6013      	str	r3, [r2, #0]
 800db1c:	68bb      	ldr	r3, [r7, #8]
 800db1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db20:	4613      	mov	r3, r2
 800db22:	009b      	lsls	r3, r3, #2
 800db24:	4413      	add	r3, r2
 800db26:	009b      	lsls	r3, r3, #2
 800db28:	4a10      	ldr	r2, [pc, #64]	; (800db6c <xTaskPriorityInherit+0xe4>)
 800db2a:	441a      	add	r2, r3
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	3304      	adds	r3, #4
 800db30:	4619      	mov	r1, r3
 800db32:	4610      	mov	r0, r2
 800db34:	f7fe fb28 	bl	800c188 <vListInsertEnd>
 800db38:	e004      	b.n	800db44 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800db3a:	4b0b      	ldr	r3, [pc, #44]	; (800db68 <xTaskPriorityInherit+0xe0>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800db44:	2301      	movs	r3, #1
 800db46:	60fb      	str	r3, [r7, #12]
 800db48:	e008      	b.n	800db5c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800db4e:	4b06      	ldr	r3, [pc, #24]	; (800db68 <xTaskPriorityInherit+0xe0>)
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db54:	429a      	cmp	r2, r3
 800db56:	d201      	bcs.n	800db5c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800db58:	2301      	movs	r3, #1
 800db5a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800db5c:	68fb      	ldr	r3, [r7, #12]
	}
 800db5e:	4618      	mov	r0, r3
 800db60:	3710      	adds	r7, #16
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}
 800db66:	bf00      	nop
 800db68:	2000616c 	.word	0x2000616c
 800db6c:	20006170 	.word	0x20006170
 800db70:	20006274 	.word	0x20006274

0800db74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800db74:	b580      	push	{r7, lr}
 800db76:	b086      	sub	sp, #24
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800db80:	2300      	movs	r3, #0
 800db82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d06e      	beq.n	800dc68 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800db8a:	4b3a      	ldr	r3, [pc, #232]	; (800dc74 <xTaskPriorityDisinherit+0x100>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	693a      	ldr	r2, [r7, #16]
 800db90:	429a      	cmp	r2, r3
 800db92:	d00a      	beq.n	800dbaa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800db94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db98:	f383 8811 	msr	BASEPRI, r3
 800db9c:	f3bf 8f6f 	isb	sy
 800dba0:	f3bf 8f4f 	dsb	sy
 800dba4:	60fb      	str	r3, [r7, #12]
}
 800dba6:	bf00      	nop
 800dba8:	e7fe      	b.n	800dba8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dbaa:	693b      	ldr	r3, [r7, #16]
 800dbac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d10a      	bne.n	800dbc8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800dbb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb6:	f383 8811 	msr	BASEPRI, r3
 800dbba:	f3bf 8f6f 	isb	sy
 800dbbe:	f3bf 8f4f 	dsb	sy
 800dbc2:	60bb      	str	r3, [r7, #8]
}
 800dbc4:	bf00      	nop
 800dbc6:	e7fe      	b.n	800dbc6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800dbc8:	693b      	ldr	r3, [r7, #16]
 800dbca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dbcc:	1e5a      	subs	r2, r3, #1
 800dbce:	693b      	ldr	r3, [r7, #16]
 800dbd0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbd6:	693b      	ldr	r3, [r7, #16]
 800dbd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	d044      	beq.n	800dc68 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dbde:	693b      	ldr	r3, [r7, #16]
 800dbe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d140      	bne.n	800dc68 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dbe6:	693b      	ldr	r3, [r7, #16]
 800dbe8:	3304      	adds	r3, #4
 800dbea:	4618      	mov	r0, r3
 800dbec:	f7fe fb29 	bl	800c242 <uxListRemove>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d115      	bne.n	800dc22 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800dbf6:	693b      	ldr	r3, [r7, #16]
 800dbf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbfa:	491f      	ldr	r1, [pc, #124]	; (800dc78 <xTaskPriorityDisinherit+0x104>)
 800dbfc:	4613      	mov	r3, r2
 800dbfe:	009b      	lsls	r3, r3, #2
 800dc00:	4413      	add	r3, r2
 800dc02:	009b      	lsls	r3, r3, #2
 800dc04:	440b      	add	r3, r1
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d10a      	bne.n	800dc22 <xTaskPriorityDisinherit+0xae>
 800dc0c:	693b      	ldr	r3, [r7, #16]
 800dc0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc10:	2201      	movs	r2, #1
 800dc12:	fa02 f303 	lsl.w	r3, r2, r3
 800dc16:	43da      	mvns	r2, r3
 800dc18:	4b18      	ldr	r3, [pc, #96]	; (800dc7c <xTaskPriorityDisinherit+0x108>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	4013      	ands	r3, r2
 800dc1e:	4a17      	ldr	r2, [pc, #92]	; (800dc7c <xTaskPriorityDisinherit+0x108>)
 800dc20:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dc22:	693b      	ldr	r3, [r7, #16]
 800dc24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc2e:	f1c3 0207 	rsb	r2, r3, #7
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dc36:	693b      	ldr	r3, [r7, #16]
 800dc38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc3a:	2201      	movs	r2, #1
 800dc3c:	409a      	lsls	r2, r3
 800dc3e:	4b0f      	ldr	r3, [pc, #60]	; (800dc7c <xTaskPriorityDisinherit+0x108>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	4313      	orrs	r3, r2
 800dc44:	4a0d      	ldr	r2, [pc, #52]	; (800dc7c <xTaskPriorityDisinherit+0x108>)
 800dc46:	6013      	str	r3, [r2, #0]
 800dc48:	693b      	ldr	r3, [r7, #16]
 800dc4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc4c:	4613      	mov	r3, r2
 800dc4e:	009b      	lsls	r3, r3, #2
 800dc50:	4413      	add	r3, r2
 800dc52:	009b      	lsls	r3, r3, #2
 800dc54:	4a08      	ldr	r2, [pc, #32]	; (800dc78 <xTaskPriorityDisinherit+0x104>)
 800dc56:	441a      	add	r2, r3
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	3304      	adds	r3, #4
 800dc5c:	4619      	mov	r1, r3
 800dc5e:	4610      	mov	r0, r2
 800dc60:	f7fe fa92 	bl	800c188 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dc64:	2301      	movs	r3, #1
 800dc66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dc68:	697b      	ldr	r3, [r7, #20]
	}
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	3718      	adds	r7, #24
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}
 800dc72:	bf00      	nop
 800dc74:	2000616c 	.word	0x2000616c
 800dc78:	20006170 	.word	0x20006170
 800dc7c:	20006274 	.word	0x20006274

0800dc80 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b088      	sub	sp, #32
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800dc8e:	2301      	movs	r3, #1
 800dc90:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d077      	beq.n	800dd88 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800dc98:	69bb      	ldr	r3, [r7, #24]
 800dc9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d10a      	bne.n	800dcb6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800dca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca4:	f383 8811 	msr	BASEPRI, r3
 800dca8:	f3bf 8f6f 	isb	sy
 800dcac:	f3bf 8f4f 	dsb	sy
 800dcb0:	60fb      	str	r3, [r7, #12]
}
 800dcb2:	bf00      	nop
 800dcb4:	e7fe      	b.n	800dcb4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dcb6:	69bb      	ldr	r3, [r7, #24]
 800dcb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcba:	683a      	ldr	r2, [r7, #0]
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d902      	bls.n	800dcc6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	61fb      	str	r3, [r7, #28]
 800dcc4:	e002      	b.n	800dccc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dcc6:	69bb      	ldr	r3, [r7, #24]
 800dcc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcca:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dccc:	69bb      	ldr	r3, [r7, #24]
 800dcce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcd0:	69fa      	ldr	r2, [r7, #28]
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	d058      	beq.n	800dd88 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dcd6:	69bb      	ldr	r3, [r7, #24]
 800dcd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dcda:	697a      	ldr	r2, [r7, #20]
 800dcdc:	429a      	cmp	r2, r3
 800dcde:	d153      	bne.n	800dd88 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800dce0:	4b2b      	ldr	r3, [pc, #172]	; (800dd90 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	69ba      	ldr	r2, [r7, #24]
 800dce6:	429a      	cmp	r2, r3
 800dce8:	d10a      	bne.n	800dd00 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800dcea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcee:	f383 8811 	msr	BASEPRI, r3
 800dcf2:	f3bf 8f6f 	isb	sy
 800dcf6:	f3bf 8f4f 	dsb	sy
 800dcfa:	60bb      	str	r3, [r7, #8]
}
 800dcfc:	bf00      	nop
 800dcfe:	e7fe      	b.n	800dcfe <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dd00:	69bb      	ldr	r3, [r7, #24]
 800dd02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd04:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800dd06:	69bb      	ldr	r3, [r7, #24]
 800dd08:	69fa      	ldr	r2, [r7, #28]
 800dd0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dd0c:	69bb      	ldr	r3, [r7, #24]
 800dd0e:	699b      	ldr	r3, [r3, #24]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	db04      	blt.n	800dd1e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd14:	69fb      	ldr	r3, [r7, #28]
 800dd16:	f1c3 0207 	rsb	r2, r3, #7
 800dd1a:	69bb      	ldr	r3, [r7, #24]
 800dd1c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dd1e:	69bb      	ldr	r3, [r7, #24]
 800dd20:	6959      	ldr	r1, [r3, #20]
 800dd22:	693a      	ldr	r2, [r7, #16]
 800dd24:	4613      	mov	r3, r2
 800dd26:	009b      	lsls	r3, r3, #2
 800dd28:	4413      	add	r3, r2
 800dd2a:	009b      	lsls	r3, r3, #2
 800dd2c:	4a19      	ldr	r2, [pc, #100]	; (800dd94 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800dd2e:	4413      	add	r3, r2
 800dd30:	4299      	cmp	r1, r3
 800dd32:	d129      	bne.n	800dd88 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd34:	69bb      	ldr	r3, [r7, #24]
 800dd36:	3304      	adds	r3, #4
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f7fe fa82 	bl	800c242 <uxListRemove>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d10a      	bne.n	800dd5a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800dd44:	69bb      	ldr	r3, [r7, #24]
 800dd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd48:	2201      	movs	r2, #1
 800dd4a:	fa02 f303 	lsl.w	r3, r2, r3
 800dd4e:	43da      	mvns	r2, r3
 800dd50:	4b11      	ldr	r3, [pc, #68]	; (800dd98 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	4013      	ands	r3, r2
 800dd56:	4a10      	ldr	r2, [pc, #64]	; (800dd98 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800dd58:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800dd5a:	69bb      	ldr	r3, [r7, #24]
 800dd5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd5e:	2201      	movs	r2, #1
 800dd60:	409a      	lsls	r2, r3
 800dd62:	4b0d      	ldr	r3, [pc, #52]	; (800dd98 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	4313      	orrs	r3, r2
 800dd68:	4a0b      	ldr	r2, [pc, #44]	; (800dd98 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800dd6a:	6013      	str	r3, [r2, #0]
 800dd6c:	69bb      	ldr	r3, [r7, #24]
 800dd6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd70:	4613      	mov	r3, r2
 800dd72:	009b      	lsls	r3, r3, #2
 800dd74:	4413      	add	r3, r2
 800dd76:	009b      	lsls	r3, r3, #2
 800dd78:	4a06      	ldr	r2, [pc, #24]	; (800dd94 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800dd7a:	441a      	add	r2, r3
 800dd7c:	69bb      	ldr	r3, [r7, #24]
 800dd7e:	3304      	adds	r3, #4
 800dd80:	4619      	mov	r1, r3
 800dd82:	4610      	mov	r0, r2
 800dd84:	f7fe fa00 	bl	800c188 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dd88:	bf00      	nop
 800dd8a:	3720      	adds	r7, #32
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}
 800dd90:	2000616c 	.word	0x2000616c
 800dd94:	20006170 	.word	0x20006170
 800dd98:	20006274 	.word	0x20006274

0800dd9c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800dd9c:	b480      	push	{r7}
 800dd9e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800dda0:	4b07      	ldr	r3, [pc, #28]	; (800ddc0 <pvTaskIncrementMutexHeldCount+0x24>)
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d004      	beq.n	800ddb2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800dda8:	4b05      	ldr	r3, [pc, #20]	; (800ddc0 <pvTaskIncrementMutexHeldCount+0x24>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ddae:	3201      	adds	r2, #1
 800ddb0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800ddb2:	4b03      	ldr	r3, [pc, #12]	; (800ddc0 <pvTaskIncrementMutexHeldCount+0x24>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
	}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbe:	4770      	bx	lr
 800ddc0:	2000616c 	.word	0x2000616c

0800ddc4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b084      	sub	sp, #16
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
 800ddcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ddce:	4b29      	ldr	r3, [pc, #164]	; (800de74 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ddd4:	4b28      	ldr	r3, [pc, #160]	; (800de78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	3304      	adds	r3, #4
 800ddda:	4618      	mov	r0, r3
 800dddc:	f7fe fa31 	bl	800c242 <uxListRemove>
 800dde0:	4603      	mov	r3, r0
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d10b      	bne.n	800ddfe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800dde6:	4b24      	ldr	r3, [pc, #144]	; (800de78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddec:	2201      	movs	r2, #1
 800ddee:	fa02 f303 	lsl.w	r3, r2, r3
 800ddf2:	43da      	mvns	r2, r3
 800ddf4:	4b21      	ldr	r3, [pc, #132]	; (800de7c <prvAddCurrentTaskToDelayedList+0xb8>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	4013      	ands	r3, r2
 800ddfa:	4a20      	ldr	r2, [pc, #128]	; (800de7c <prvAddCurrentTaskToDelayedList+0xb8>)
 800ddfc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de04:	d10a      	bne.n	800de1c <prvAddCurrentTaskToDelayedList+0x58>
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d007      	beq.n	800de1c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de0c:	4b1a      	ldr	r3, [pc, #104]	; (800de78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	3304      	adds	r3, #4
 800de12:	4619      	mov	r1, r3
 800de14:	481a      	ldr	r0, [pc, #104]	; (800de80 <prvAddCurrentTaskToDelayedList+0xbc>)
 800de16:	f7fe f9b7 	bl	800c188 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800de1a:	e026      	b.n	800de6a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800de1c:	68fa      	ldr	r2, [r7, #12]
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	4413      	add	r3, r2
 800de22:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800de24:	4b14      	ldr	r3, [pc, #80]	; (800de78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	68ba      	ldr	r2, [r7, #8]
 800de2a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800de2c:	68ba      	ldr	r2, [r7, #8]
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	429a      	cmp	r2, r3
 800de32:	d209      	bcs.n	800de48 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de34:	4b13      	ldr	r3, [pc, #76]	; (800de84 <prvAddCurrentTaskToDelayedList+0xc0>)
 800de36:	681a      	ldr	r2, [r3, #0]
 800de38:	4b0f      	ldr	r3, [pc, #60]	; (800de78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	3304      	adds	r3, #4
 800de3e:	4619      	mov	r1, r3
 800de40:	4610      	mov	r0, r2
 800de42:	f7fe f9c5 	bl	800c1d0 <vListInsert>
}
 800de46:	e010      	b.n	800de6a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de48:	4b0f      	ldr	r3, [pc, #60]	; (800de88 <prvAddCurrentTaskToDelayedList+0xc4>)
 800de4a:	681a      	ldr	r2, [r3, #0]
 800de4c:	4b0a      	ldr	r3, [pc, #40]	; (800de78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	3304      	adds	r3, #4
 800de52:	4619      	mov	r1, r3
 800de54:	4610      	mov	r0, r2
 800de56:	f7fe f9bb 	bl	800c1d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800de5a:	4b0c      	ldr	r3, [pc, #48]	; (800de8c <prvAddCurrentTaskToDelayedList+0xc8>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	68ba      	ldr	r2, [r7, #8]
 800de60:	429a      	cmp	r2, r3
 800de62:	d202      	bcs.n	800de6a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800de64:	4a09      	ldr	r2, [pc, #36]	; (800de8c <prvAddCurrentTaskToDelayedList+0xc8>)
 800de66:	68bb      	ldr	r3, [r7, #8]
 800de68:	6013      	str	r3, [r2, #0]
}
 800de6a:	bf00      	nop
 800de6c:	3710      	adds	r7, #16
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}
 800de72:	bf00      	nop
 800de74:	20006270 	.word	0x20006270
 800de78:	2000616c 	.word	0x2000616c
 800de7c:	20006274 	.word	0x20006274
 800de80:	20006258 	.word	0x20006258
 800de84:	20006228 	.word	0x20006228
 800de88:	20006224 	.word	0x20006224
 800de8c:	2000628c 	.word	0x2000628c

0800de90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800de90:	b480      	push	{r7}
 800de92:	b085      	sub	sp, #20
 800de94:	af00      	add	r7, sp, #0
 800de96:	60f8      	str	r0, [r7, #12]
 800de98:	60b9      	str	r1, [r7, #8]
 800de9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	3b04      	subs	r3, #4
 800dea0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dea8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	3b04      	subs	r3, #4
 800deae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	f023 0201 	bic.w	r2, r3, #1
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	3b04      	subs	r3, #4
 800debe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dec0:	4a0c      	ldr	r2, [pc, #48]	; (800def4 <pxPortInitialiseStack+0x64>)
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	3b14      	subs	r3, #20
 800deca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800decc:	687a      	ldr	r2, [r7, #4]
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	3b04      	subs	r3, #4
 800ded6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	f06f 0202 	mvn.w	r2, #2
 800dede:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	3b20      	subs	r3, #32
 800dee4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dee6:	68fb      	ldr	r3, [r7, #12]
}
 800dee8:	4618      	mov	r0, r3
 800deea:	3714      	adds	r7, #20
 800deec:	46bd      	mov	sp, r7
 800deee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def2:	4770      	bx	lr
 800def4:	0800def9 	.word	0x0800def9

0800def8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800def8:	b480      	push	{r7}
 800defa:	b085      	sub	sp, #20
 800defc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800defe:	2300      	movs	r3, #0
 800df00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800df02:	4b12      	ldr	r3, [pc, #72]	; (800df4c <prvTaskExitError+0x54>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df0a:	d00a      	beq.n	800df22 <prvTaskExitError+0x2a>
	__asm volatile
 800df0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df10:	f383 8811 	msr	BASEPRI, r3
 800df14:	f3bf 8f6f 	isb	sy
 800df18:	f3bf 8f4f 	dsb	sy
 800df1c:	60fb      	str	r3, [r7, #12]
}
 800df1e:	bf00      	nop
 800df20:	e7fe      	b.n	800df20 <prvTaskExitError+0x28>
	__asm volatile
 800df22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df26:	f383 8811 	msr	BASEPRI, r3
 800df2a:	f3bf 8f6f 	isb	sy
 800df2e:	f3bf 8f4f 	dsb	sy
 800df32:	60bb      	str	r3, [r7, #8]
}
 800df34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800df36:	bf00      	nop
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d0fc      	beq.n	800df38 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800df3e:	bf00      	nop
 800df40:	bf00      	nop
 800df42:	3714      	adds	r7, #20
 800df44:	46bd      	mov	sp, r7
 800df46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4a:	4770      	bx	lr
 800df4c:	20000044 	.word	0x20000044

0800df50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800df50:	4b07      	ldr	r3, [pc, #28]	; (800df70 <pxCurrentTCBConst2>)
 800df52:	6819      	ldr	r1, [r3, #0]
 800df54:	6808      	ldr	r0, [r1, #0]
 800df56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df5a:	f380 8809 	msr	PSP, r0
 800df5e:	f3bf 8f6f 	isb	sy
 800df62:	f04f 0000 	mov.w	r0, #0
 800df66:	f380 8811 	msr	BASEPRI, r0
 800df6a:	4770      	bx	lr
 800df6c:	f3af 8000 	nop.w

0800df70 <pxCurrentTCBConst2>:
 800df70:	2000616c 	.word	0x2000616c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800df74:	bf00      	nop
 800df76:	bf00      	nop

0800df78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800df78:	4808      	ldr	r0, [pc, #32]	; (800df9c <prvPortStartFirstTask+0x24>)
 800df7a:	6800      	ldr	r0, [r0, #0]
 800df7c:	6800      	ldr	r0, [r0, #0]
 800df7e:	f380 8808 	msr	MSP, r0
 800df82:	f04f 0000 	mov.w	r0, #0
 800df86:	f380 8814 	msr	CONTROL, r0
 800df8a:	b662      	cpsie	i
 800df8c:	b661      	cpsie	f
 800df8e:	f3bf 8f4f 	dsb	sy
 800df92:	f3bf 8f6f 	isb	sy
 800df96:	df00      	svc	0
 800df98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800df9a:	bf00      	nop
 800df9c:	e000ed08 	.word	0xe000ed08

0800dfa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b086      	sub	sp, #24
 800dfa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dfa6:	4b46      	ldr	r3, [pc, #280]	; (800e0c0 <xPortStartScheduler+0x120>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	4a46      	ldr	r2, [pc, #280]	; (800e0c4 <xPortStartScheduler+0x124>)
 800dfac:	4293      	cmp	r3, r2
 800dfae:	d10a      	bne.n	800dfc6 <xPortStartScheduler+0x26>
	__asm volatile
 800dfb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfb4:	f383 8811 	msr	BASEPRI, r3
 800dfb8:	f3bf 8f6f 	isb	sy
 800dfbc:	f3bf 8f4f 	dsb	sy
 800dfc0:	613b      	str	r3, [r7, #16]
}
 800dfc2:	bf00      	nop
 800dfc4:	e7fe      	b.n	800dfc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dfc6:	4b3e      	ldr	r3, [pc, #248]	; (800e0c0 <xPortStartScheduler+0x120>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	4a3f      	ldr	r2, [pc, #252]	; (800e0c8 <xPortStartScheduler+0x128>)
 800dfcc:	4293      	cmp	r3, r2
 800dfce:	d10a      	bne.n	800dfe6 <xPortStartScheduler+0x46>
	__asm volatile
 800dfd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd4:	f383 8811 	msr	BASEPRI, r3
 800dfd8:	f3bf 8f6f 	isb	sy
 800dfdc:	f3bf 8f4f 	dsb	sy
 800dfe0:	60fb      	str	r3, [r7, #12]
}
 800dfe2:	bf00      	nop
 800dfe4:	e7fe      	b.n	800dfe4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dfe6:	4b39      	ldr	r3, [pc, #228]	; (800e0cc <xPortStartScheduler+0x12c>)
 800dfe8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	781b      	ldrb	r3, [r3, #0]
 800dfee:	b2db      	uxtb	r3, r3
 800dff0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dff2:	697b      	ldr	r3, [r7, #20]
 800dff4:	22ff      	movs	r2, #255	; 0xff
 800dff6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dff8:	697b      	ldr	r3, [r7, #20]
 800dffa:	781b      	ldrb	r3, [r3, #0]
 800dffc:	b2db      	uxtb	r3, r3
 800dffe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e000:	78fb      	ldrb	r3, [r7, #3]
 800e002:	b2db      	uxtb	r3, r3
 800e004:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e008:	b2da      	uxtb	r2, r3
 800e00a:	4b31      	ldr	r3, [pc, #196]	; (800e0d0 <xPortStartScheduler+0x130>)
 800e00c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e00e:	4b31      	ldr	r3, [pc, #196]	; (800e0d4 <xPortStartScheduler+0x134>)
 800e010:	2207      	movs	r2, #7
 800e012:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e014:	e009      	b.n	800e02a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e016:	4b2f      	ldr	r3, [pc, #188]	; (800e0d4 <xPortStartScheduler+0x134>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	3b01      	subs	r3, #1
 800e01c:	4a2d      	ldr	r2, [pc, #180]	; (800e0d4 <xPortStartScheduler+0x134>)
 800e01e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e020:	78fb      	ldrb	r3, [r7, #3]
 800e022:	b2db      	uxtb	r3, r3
 800e024:	005b      	lsls	r3, r3, #1
 800e026:	b2db      	uxtb	r3, r3
 800e028:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e02a:	78fb      	ldrb	r3, [r7, #3]
 800e02c:	b2db      	uxtb	r3, r3
 800e02e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e032:	2b80      	cmp	r3, #128	; 0x80
 800e034:	d0ef      	beq.n	800e016 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e036:	4b27      	ldr	r3, [pc, #156]	; (800e0d4 <xPortStartScheduler+0x134>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	f1c3 0307 	rsb	r3, r3, #7
 800e03e:	2b04      	cmp	r3, #4
 800e040:	d00a      	beq.n	800e058 <xPortStartScheduler+0xb8>
	__asm volatile
 800e042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e046:	f383 8811 	msr	BASEPRI, r3
 800e04a:	f3bf 8f6f 	isb	sy
 800e04e:	f3bf 8f4f 	dsb	sy
 800e052:	60bb      	str	r3, [r7, #8]
}
 800e054:	bf00      	nop
 800e056:	e7fe      	b.n	800e056 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e058:	4b1e      	ldr	r3, [pc, #120]	; (800e0d4 <xPortStartScheduler+0x134>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	021b      	lsls	r3, r3, #8
 800e05e:	4a1d      	ldr	r2, [pc, #116]	; (800e0d4 <xPortStartScheduler+0x134>)
 800e060:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e062:	4b1c      	ldr	r3, [pc, #112]	; (800e0d4 <xPortStartScheduler+0x134>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e06a:	4a1a      	ldr	r2, [pc, #104]	; (800e0d4 <xPortStartScheduler+0x134>)
 800e06c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	b2da      	uxtb	r2, r3
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e076:	4b18      	ldr	r3, [pc, #96]	; (800e0d8 <xPortStartScheduler+0x138>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	4a17      	ldr	r2, [pc, #92]	; (800e0d8 <xPortStartScheduler+0x138>)
 800e07c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e080:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e082:	4b15      	ldr	r3, [pc, #84]	; (800e0d8 <xPortStartScheduler+0x138>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	4a14      	ldr	r2, [pc, #80]	; (800e0d8 <xPortStartScheduler+0x138>)
 800e088:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e08c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e08e:	f000 f8dd 	bl	800e24c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e092:	4b12      	ldr	r3, [pc, #72]	; (800e0dc <xPortStartScheduler+0x13c>)
 800e094:	2200      	movs	r2, #0
 800e096:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e098:	f000 f8fc 	bl	800e294 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e09c:	4b10      	ldr	r3, [pc, #64]	; (800e0e0 <xPortStartScheduler+0x140>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4a0f      	ldr	r2, [pc, #60]	; (800e0e0 <xPortStartScheduler+0x140>)
 800e0a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e0a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e0a8:	f7ff ff66 	bl	800df78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e0ac:	f7ff fa88 	bl	800d5c0 <vTaskSwitchContext>
	prvTaskExitError();
 800e0b0:	f7ff ff22 	bl	800def8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e0b4:	2300      	movs	r3, #0
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	3718      	adds	r7, #24
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}
 800e0be:	bf00      	nop
 800e0c0:	e000ed00 	.word	0xe000ed00
 800e0c4:	410fc271 	.word	0x410fc271
 800e0c8:	410fc270 	.word	0x410fc270
 800e0cc:	e000e400 	.word	0xe000e400
 800e0d0:	20006298 	.word	0x20006298
 800e0d4:	2000629c 	.word	0x2000629c
 800e0d8:	e000ed20 	.word	0xe000ed20
 800e0dc:	20000044 	.word	0x20000044
 800e0e0:	e000ef34 	.word	0xe000ef34

0800e0e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e0e4:	b480      	push	{r7}
 800e0e6:	b083      	sub	sp, #12
 800e0e8:	af00      	add	r7, sp, #0
	__asm volatile
 800e0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ee:	f383 8811 	msr	BASEPRI, r3
 800e0f2:	f3bf 8f6f 	isb	sy
 800e0f6:	f3bf 8f4f 	dsb	sy
 800e0fa:	607b      	str	r3, [r7, #4]
}
 800e0fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e0fe:	4b0f      	ldr	r3, [pc, #60]	; (800e13c <vPortEnterCritical+0x58>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	3301      	adds	r3, #1
 800e104:	4a0d      	ldr	r2, [pc, #52]	; (800e13c <vPortEnterCritical+0x58>)
 800e106:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e108:	4b0c      	ldr	r3, [pc, #48]	; (800e13c <vPortEnterCritical+0x58>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	2b01      	cmp	r3, #1
 800e10e:	d10f      	bne.n	800e130 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e110:	4b0b      	ldr	r3, [pc, #44]	; (800e140 <vPortEnterCritical+0x5c>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	b2db      	uxtb	r3, r3
 800e116:	2b00      	cmp	r3, #0
 800e118:	d00a      	beq.n	800e130 <vPortEnterCritical+0x4c>
	__asm volatile
 800e11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e11e:	f383 8811 	msr	BASEPRI, r3
 800e122:	f3bf 8f6f 	isb	sy
 800e126:	f3bf 8f4f 	dsb	sy
 800e12a:	603b      	str	r3, [r7, #0]
}
 800e12c:	bf00      	nop
 800e12e:	e7fe      	b.n	800e12e <vPortEnterCritical+0x4a>
	}
}
 800e130:	bf00      	nop
 800e132:	370c      	adds	r7, #12
 800e134:	46bd      	mov	sp, r7
 800e136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13a:	4770      	bx	lr
 800e13c:	20000044 	.word	0x20000044
 800e140:	e000ed04 	.word	0xe000ed04

0800e144 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e144:	b480      	push	{r7}
 800e146:	b083      	sub	sp, #12
 800e148:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e14a:	4b12      	ldr	r3, [pc, #72]	; (800e194 <vPortExitCritical+0x50>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d10a      	bne.n	800e168 <vPortExitCritical+0x24>
	__asm volatile
 800e152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e156:	f383 8811 	msr	BASEPRI, r3
 800e15a:	f3bf 8f6f 	isb	sy
 800e15e:	f3bf 8f4f 	dsb	sy
 800e162:	607b      	str	r3, [r7, #4]
}
 800e164:	bf00      	nop
 800e166:	e7fe      	b.n	800e166 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e168:	4b0a      	ldr	r3, [pc, #40]	; (800e194 <vPortExitCritical+0x50>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	3b01      	subs	r3, #1
 800e16e:	4a09      	ldr	r2, [pc, #36]	; (800e194 <vPortExitCritical+0x50>)
 800e170:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e172:	4b08      	ldr	r3, [pc, #32]	; (800e194 <vPortExitCritical+0x50>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d105      	bne.n	800e186 <vPortExitCritical+0x42>
 800e17a:	2300      	movs	r3, #0
 800e17c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	f383 8811 	msr	BASEPRI, r3
}
 800e184:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e186:	bf00      	nop
 800e188:	370c      	adds	r7, #12
 800e18a:	46bd      	mov	sp, r7
 800e18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e190:	4770      	bx	lr
 800e192:	bf00      	nop
 800e194:	20000044 	.word	0x20000044
	...

0800e1a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e1a0:	f3ef 8009 	mrs	r0, PSP
 800e1a4:	f3bf 8f6f 	isb	sy
 800e1a8:	4b15      	ldr	r3, [pc, #84]	; (800e200 <pxCurrentTCBConst>)
 800e1aa:	681a      	ldr	r2, [r3, #0]
 800e1ac:	f01e 0f10 	tst.w	lr, #16
 800e1b0:	bf08      	it	eq
 800e1b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e1b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1ba:	6010      	str	r0, [r2, #0]
 800e1bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e1c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e1c4:	f380 8811 	msr	BASEPRI, r0
 800e1c8:	f3bf 8f4f 	dsb	sy
 800e1cc:	f3bf 8f6f 	isb	sy
 800e1d0:	f7ff f9f6 	bl	800d5c0 <vTaskSwitchContext>
 800e1d4:	f04f 0000 	mov.w	r0, #0
 800e1d8:	f380 8811 	msr	BASEPRI, r0
 800e1dc:	bc09      	pop	{r0, r3}
 800e1de:	6819      	ldr	r1, [r3, #0]
 800e1e0:	6808      	ldr	r0, [r1, #0]
 800e1e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1e6:	f01e 0f10 	tst.w	lr, #16
 800e1ea:	bf08      	it	eq
 800e1ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e1f0:	f380 8809 	msr	PSP, r0
 800e1f4:	f3bf 8f6f 	isb	sy
 800e1f8:	4770      	bx	lr
 800e1fa:	bf00      	nop
 800e1fc:	f3af 8000 	nop.w

0800e200 <pxCurrentTCBConst>:
 800e200:	2000616c 	.word	0x2000616c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e204:	bf00      	nop
 800e206:	bf00      	nop

0800e208 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b082      	sub	sp, #8
 800e20c:	af00      	add	r7, sp, #0
	__asm volatile
 800e20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e212:	f383 8811 	msr	BASEPRI, r3
 800e216:	f3bf 8f6f 	isb	sy
 800e21a:	f3bf 8f4f 	dsb	sy
 800e21e:	607b      	str	r3, [r7, #4]
}
 800e220:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e222:	f7ff f915 	bl	800d450 <xTaskIncrementTick>
 800e226:	4603      	mov	r3, r0
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d003      	beq.n	800e234 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e22c:	4b06      	ldr	r3, [pc, #24]	; (800e248 <SysTick_Handler+0x40>)
 800e22e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e232:	601a      	str	r2, [r3, #0]
 800e234:	2300      	movs	r3, #0
 800e236:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	f383 8811 	msr	BASEPRI, r3
}
 800e23e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e240:	bf00      	nop
 800e242:	3708      	adds	r7, #8
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}
 800e248:	e000ed04 	.word	0xe000ed04

0800e24c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e24c:	b480      	push	{r7}
 800e24e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e250:	4b0b      	ldr	r3, [pc, #44]	; (800e280 <vPortSetupTimerInterrupt+0x34>)
 800e252:	2200      	movs	r2, #0
 800e254:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e256:	4b0b      	ldr	r3, [pc, #44]	; (800e284 <vPortSetupTimerInterrupt+0x38>)
 800e258:	2200      	movs	r2, #0
 800e25a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e25c:	4b0a      	ldr	r3, [pc, #40]	; (800e288 <vPortSetupTimerInterrupt+0x3c>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	4a0a      	ldr	r2, [pc, #40]	; (800e28c <vPortSetupTimerInterrupt+0x40>)
 800e262:	fba2 2303 	umull	r2, r3, r2, r3
 800e266:	099b      	lsrs	r3, r3, #6
 800e268:	4a09      	ldr	r2, [pc, #36]	; (800e290 <vPortSetupTimerInterrupt+0x44>)
 800e26a:	3b01      	subs	r3, #1
 800e26c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e26e:	4b04      	ldr	r3, [pc, #16]	; (800e280 <vPortSetupTimerInterrupt+0x34>)
 800e270:	2207      	movs	r2, #7
 800e272:	601a      	str	r2, [r3, #0]
}
 800e274:	bf00      	nop
 800e276:	46bd      	mov	sp, r7
 800e278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27c:	4770      	bx	lr
 800e27e:	bf00      	nop
 800e280:	e000e010 	.word	0xe000e010
 800e284:	e000e018 	.word	0xe000e018
 800e288:	20000014 	.word	0x20000014
 800e28c:	10624dd3 	.word	0x10624dd3
 800e290:	e000e014 	.word	0xe000e014

0800e294 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e294:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e2a4 <vPortEnableVFP+0x10>
 800e298:	6801      	ldr	r1, [r0, #0]
 800e29a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e29e:	6001      	str	r1, [r0, #0]
 800e2a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e2a2:	bf00      	nop
 800e2a4:	e000ed88 	.word	0xe000ed88

0800e2a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b085      	sub	sp, #20
 800e2ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e2ae:	f3ef 8305 	mrs	r3, IPSR
 800e2b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	2b0f      	cmp	r3, #15
 800e2b8:	d914      	bls.n	800e2e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e2ba:	4a17      	ldr	r2, [pc, #92]	; (800e318 <vPortValidateInterruptPriority+0x70>)
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	4413      	add	r3, r2
 800e2c0:	781b      	ldrb	r3, [r3, #0]
 800e2c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e2c4:	4b15      	ldr	r3, [pc, #84]	; (800e31c <vPortValidateInterruptPriority+0x74>)
 800e2c6:	781b      	ldrb	r3, [r3, #0]
 800e2c8:	7afa      	ldrb	r2, [r7, #11]
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	d20a      	bcs.n	800e2e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d2:	f383 8811 	msr	BASEPRI, r3
 800e2d6:	f3bf 8f6f 	isb	sy
 800e2da:	f3bf 8f4f 	dsb	sy
 800e2de:	607b      	str	r3, [r7, #4]
}
 800e2e0:	bf00      	nop
 800e2e2:	e7fe      	b.n	800e2e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e2e4:	4b0e      	ldr	r3, [pc, #56]	; (800e320 <vPortValidateInterruptPriority+0x78>)
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e2ec:	4b0d      	ldr	r3, [pc, #52]	; (800e324 <vPortValidateInterruptPriority+0x7c>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	d90a      	bls.n	800e30a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f8:	f383 8811 	msr	BASEPRI, r3
 800e2fc:	f3bf 8f6f 	isb	sy
 800e300:	f3bf 8f4f 	dsb	sy
 800e304:	603b      	str	r3, [r7, #0]
}
 800e306:	bf00      	nop
 800e308:	e7fe      	b.n	800e308 <vPortValidateInterruptPriority+0x60>
	}
 800e30a:	bf00      	nop
 800e30c:	3714      	adds	r7, #20
 800e30e:	46bd      	mov	sp, r7
 800e310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e314:	4770      	bx	lr
 800e316:	bf00      	nop
 800e318:	e000e3f0 	.word	0xe000e3f0
 800e31c:	20006298 	.word	0x20006298
 800e320:	e000ed0c 	.word	0xe000ed0c
 800e324:	2000629c 	.word	0x2000629c

0800e328 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b08a      	sub	sp, #40	; 0x28
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e330:	2300      	movs	r3, #0
 800e332:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e334:	f7fe ffc0 	bl	800d2b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e338:	4b5b      	ldr	r3, [pc, #364]	; (800e4a8 <pvPortMalloc+0x180>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d101      	bne.n	800e344 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e340:	f000 f920 	bl	800e584 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e344:	4b59      	ldr	r3, [pc, #356]	; (800e4ac <pvPortMalloc+0x184>)
 800e346:	681a      	ldr	r2, [r3, #0]
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	4013      	ands	r3, r2
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	f040 8093 	bne.w	800e478 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d01d      	beq.n	800e394 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e358:	2208      	movs	r2, #8
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	4413      	add	r3, r2
 800e35e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	f003 0307 	and.w	r3, r3, #7
 800e366:	2b00      	cmp	r3, #0
 800e368:	d014      	beq.n	800e394 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	f023 0307 	bic.w	r3, r3, #7
 800e370:	3308      	adds	r3, #8
 800e372:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f003 0307 	and.w	r3, r3, #7
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d00a      	beq.n	800e394 <pvPortMalloc+0x6c>
	__asm volatile
 800e37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e382:	f383 8811 	msr	BASEPRI, r3
 800e386:	f3bf 8f6f 	isb	sy
 800e38a:	f3bf 8f4f 	dsb	sy
 800e38e:	617b      	str	r3, [r7, #20]
}
 800e390:	bf00      	nop
 800e392:	e7fe      	b.n	800e392 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d06e      	beq.n	800e478 <pvPortMalloc+0x150>
 800e39a:	4b45      	ldr	r3, [pc, #276]	; (800e4b0 <pvPortMalloc+0x188>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	687a      	ldr	r2, [r7, #4]
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d869      	bhi.n	800e478 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e3a4:	4b43      	ldr	r3, [pc, #268]	; (800e4b4 <pvPortMalloc+0x18c>)
 800e3a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e3a8:	4b42      	ldr	r3, [pc, #264]	; (800e4b4 <pvPortMalloc+0x18c>)
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e3ae:	e004      	b.n	800e3ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3bc:	685b      	ldr	r3, [r3, #4]
 800e3be:	687a      	ldr	r2, [r7, #4]
 800e3c0:	429a      	cmp	r2, r3
 800e3c2:	d903      	bls.n	800e3cc <pvPortMalloc+0xa4>
 800e3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d1f1      	bne.n	800e3b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e3cc:	4b36      	ldr	r3, [pc, #216]	; (800e4a8 <pvPortMalloc+0x180>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3d2:	429a      	cmp	r2, r3
 800e3d4:	d050      	beq.n	800e478 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e3d6:	6a3b      	ldr	r3, [r7, #32]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	2208      	movs	r2, #8
 800e3dc:	4413      	add	r3, r2
 800e3de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e2:	681a      	ldr	r2, [r3, #0]
 800e3e4:	6a3b      	ldr	r3, [r7, #32]
 800e3e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ea:	685a      	ldr	r2, [r3, #4]
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	1ad2      	subs	r2, r2, r3
 800e3f0:	2308      	movs	r3, #8
 800e3f2:	005b      	lsls	r3, r3, #1
 800e3f4:	429a      	cmp	r2, r3
 800e3f6:	d91f      	bls.n	800e438 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e3f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	4413      	add	r3, r2
 800e3fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e400:	69bb      	ldr	r3, [r7, #24]
 800e402:	f003 0307 	and.w	r3, r3, #7
 800e406:	2b00      	cmp	r3, #0
 800e408:	d00a      	beq.n	800e420 <pvPortMalloc+0xf8>
	__asm volatile
 800e40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e40e:	f383 8811 	msr	BASEPRI, r3
 800e412:	f3bf 8f6f 	isb	sy
 800e416:	f3bf 8f4f 	dsb	sy
 800e41a:	613b      	str	r3, [r7, #16]
}
 800e41c:	bf00      	nop
 800e41e:	e7fe      	b.n	800e41e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e422:	685a      	ldr	r2, [r3, #4]
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	1ad2      	subs	r2, r2, r3
 800e428:	69bb      	ldr	r3, [r7, #24]
 800e42a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e42e:	687a      	ldr	r2, [r7, #4]
 800e430:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e432:	69b8      	ldr	r0, [r7, #24]
 800e434:	f000 f908 	bl	800e648 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e438:	4b1d      	ldr	r3, [pc, #116]	; (800e4b0 <pvPortMalloc+0x188>)
 800e43a:	681a      	ldr	r2, [r3, #0]
 800e43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e43e:	685b      	ldr	r3, [r3, #4]
 800e440:	1ad3      	subs	r3, r2, r3
 800e442:	4a1b      	ldr	r2, [pc, #108]	; (800e4b0 <pvPortMalloc+0x188>)
 800e444:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e446:	4b1a      	ldr	r3, [pc, #104]	; (800e4b0 <pvPortMalloc+0x188>)
 800e448:	681a      	ldr	r2, [r3, #0]
 800e44a:	4b1b      	ldr	r3, [pc, #108]	; (800e4b8 <pvPortMalloc+0x190>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	429a      	cmp	r2, r3
 800e450:	d203      	bcs.n	800e45a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e452:	4b17      	ldr	r3, [pc, #92]	; (800e4b0 <pvPortMalloc+0x188>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	4a18      	ldr	r2, [pc, #96]	; (800e4b8 <pvPortMalloc+0x190>)
 800e458:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e45c:	685a      	ldr	r2, [r3, #4]
 800e45e:	4b13      	ldr	r3, [pc, #76]	; (800e4ac <pvPortMalloc+0x184>)
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	431a      	orrs	r2, r3
 800e464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e466:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46a:	2200      	movs	r2, #0
 800e46c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e46e:	4b13      	ldr	r3, [pc, #76]	; (800e4bc <pvPortMalloc+0x194>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	3301      	adds	r3, #1
 800e474:	4a11      	ldr	r2, [pc, #68]	; (800e4bc <pvPortMalloc+0x194>)
 800e476:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e478:	f7fe ff2c 	bl	800d2d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e47c:	69fb      	ldr	r3, [r7, #28]
 800e47e:	f003 0307 	and.w	r3, r3, #7
 800e482:	2b00      	cmp	r3, #0
 800e484:	d00a      	beq.n	800e49c <pvPortMalloc+0x174>
	__asm volatile
 800e486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e48a:	f383 8811 	msr	BASEPRI, r3
 800e48e:	f3bf 8f6f 	isb	sy
 800e492:	f3bf 8f4f 	dsb	sy
 800e496:	60fb      	str	r3, [r7, #12]
}
 800e498:	bf00      	nop
 800e49a:	e7fe      	b.n	800e49a <pvPortMalloc+0x172>
	return pvReturn;
 800e49c:	69fb      	ldr	r3, [r7, #28]
}
 800e49e:	4618      	mov	r0, r3
 800e4a0:	3728      	adds	r7, #40	; 0x28
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}
 800e4a6:	bf00      	nop
 800e4a8:	20009ea8 	.word	0x20009ea8
 800e4ac:	20009ebc 	.word	0x20009ebc
 800e4b0:	20009eac 	.word	0x20009eac
 800e4b4:	20009ea0 	.word	0x20009ea0
 800e4b8:	20009eb0 	.word	0x20009eb0
 800e4bc:	20009eb4 	.word	0x20009eb4

0800e4c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b086      	sub	sp, #24
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d04d      	beq.n	800e56e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e4d2:	2308      	movs	r3, #8
 800e4d4:	425b      	negs	r3, r3
 800e4d6:	697a      	ldr	r2, [r7, #20]
 800e4d8:	4413      	add	r3, r2
 800e4da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e4e0:	693b      	ldr	r3, [r7, #16]
 800e4e2:	685a      	ldr	r2, [r3, #4]
 800e4e4:	4b24      	ldr	r3, [pc, #144]	; (800e578 <vPortFree+0xb8>)
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	4013      	ands	r3, r2
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d10a      	bne.n	800e504 <vPortFree+0x44>
	__asm volatile
 800e4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4f2:	f383 8811 	msr	BASEPRI, r3
 800e4f6:	f3bf 8f6f 	isb	sy
 800e4fa:	f3bf 8f4f 	dsb	sy
 800e4fe:	60fb      	str	r3, [r7, #12]
}
 800e500:	bf00      	nop
 800e502:	e7fe      	b.n	800e502 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e504:	693b      	ldr	r3, [r7, #16]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d00a      	beq.n	800e522 <vPortFree+0x62>
	__asm volatile
 800e50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e510:	f383 8811 	msr	BASEPRI, r3
 800e514:	f3bf 8f6f 	isb	sy
 800e518:	f3bf 8f4f 	dsb	sy
 800e51c:	60bb      	str	r3, [r7, #8]
}
 800e51e:	bf00      	nop
 800e520:	e7fe      	b.n	800e520 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e522:	693b      	ldr	r3, [r7, #16]
 800e524:	685a      	ldr	r2, [r3, #4]
 800e526:	4b14      	ldr	r3, [pc, #80]	; (800e578 <vPortFree+0xb8>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	4013      	ands	r3, r2
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d01e      	beq.n	800e56e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e530:	693b      	ldr	r3, [r7, #16]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d11a      	bne.n	800e56e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e538:	693b      	ldr	r3, [r7, #16]
 800e53a:	685a      	ldr	r2, [r3, #4]
 800e53c:	4b0e      	ldr	r3, [pc, #56]	; (800e578 <vPortFree+0xb8>)
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	43db      	mvns	r3, r3
 800e542:	401a      	ands	r2, r3
 800e544:	693b      	ldr	r3, [r7, #16]
 800e546:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e548:	f7fe feb6 	bl	800d2b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e54c:	693b      	ldr	r3, [r7, #16]
 800e54e:	685a      	ldr	r2, [r3, #4]
 800e550:	4b0a      	ldr	r3, [pc, #40]	; (800e57c <vPortFree+0xbc>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	4413      	add	r3, r2
 800e556:	4a09      	ldr	r2, [pc, #36]	; (800e57c <vPortFree+0xbc>)
 800e558:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e55a:	6938      	ldr	r0, [r7, #16]
 800e55c:	f000 f874 	bl	800e648 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e560:	4b07      	ldr	r3, [pc, #28]	; (800e580 <vPortFree+0xc0>)
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	3301      	adds	r3, #1
 800e566:	4a06      	ldr	r2, [pc, #24]	; (800e580 <vPortFree+0xc0>)
 800e568:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e56a:	f7fe feb3 	bl	800d2d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e56e:	bf00      	nop
 800e570:	3718      	adds	r7, #24
 800e572:	46bd      	mov	sp, r7
 800e574:	bd80      	pop	{r7, pc}
 800e576:	bf00      	nop
 800e578:	20009ebc 	.word	0x20009ebc
 800e57c:	20009eac 	.word	0x20009eac
 800e580:	20009eb8 	.word	0x20009eb8

0800e584 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e584:	b480      	push	{r7}
 800e586:	b085      	sub	sp, #20
 800e588:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e58a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e58e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e590:	4b27      	ldr	r3, [pc, #156]	; (800e630 <prvHeapInit+0xac>)
 800e592:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	f003 0307 	and.w	r3, r3, #7
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d00c      	beq.n	800e5b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	3307      	adds	r3, #7
 800e5a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	f023 0307 	bic.w	r3, r3, #7
 800e5aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e5ac:	68ba      	ldr	r2, [r7, #8]
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	1ad3      	subs	r3, r2, r3
 800e5b2:	4a1f      	ldr	r2, [pc, #124]	; (800e630 <prvHeapInit+0xac>)
 800e5b4:	4413      	add	r3, r2
 800e5b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e5bc:	4a1d      	ldr	r2, [pc, #116]	; (800e634 <prvHeapInit+0xb0>)
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e5c2:	4b1c      	ldr	r3, [pc, #112]	; (800e634 <prvHeapInit+0xb0>)
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	68ba      	ldr	r2, [r7, #8]
 800e5cc:	4413      	add	r3, r2
 800e5ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e5d0:	2208      	movs	r2, #8
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	1a9b      	subs	r3, r3, r2
 800e5d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	f023 0307 	bic.w	r3, r3, #7
 800e5de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	4a15      	ldr	r2, [pc, #84]	; (800e638 <prvHeapInit+0xb4>)
 800e5e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e5e6:	4b14      	ldr	r3, [pc, #80]	; (800e638 <prvHeapInit+0xb4>)
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e5ee:	4b12      	ldr	r3, [pc, #72]	; (800e638 <prvHeapInit+0xb4>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	68fa      	ldr	r2, [r7, #12]
 800e5fe:	1ad2      	subs	r2, r2, r3
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e604:	4b0c      	ldr	r3, [pc, #48]	; (800e638 <prvHeapInit+0xb4>)
 800e606:	681a      	ldr	r2, [r3, #0]
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e60c:	683b      	ldr	r3, [r7, #0]
 800e60e:	685b      	ldr	r3, [r3, #4]
 800e610:	4a0a      	ldr	r2, [pc, #40]	; (800e63c <prvHeapInit+0xb8>)
 800e612:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	685b      	ldr	r3, [r3, #4]
 800e618:	4a09      	ldr	r2, [pc, #36]	; (800e640 <prvHeapInit+0xbc>)
 800e61a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e61c:	4b09      	ldr	r3, [pc, #36]	; (800e644 <prvHeapInit+0xc0>)
 800e61e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e622:	601a      	str	r2, [r3, #0]
}
 800e624:	bf00      	nop
 800e626:	3714      	adds	r7, #20
 800e628:	46bd      	mov	sp, r7
 800e62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62e:	4770      	bx	lr
 800e630:	200062a0 	.word	0x200062a0
 800e634:	20009ea0 	.word	0x20009ea0
 800e638:	20009ea8 	.word	0x20009ea8
 800e63c:	20009eb0 	.word	0x20009eb0
 800e640:	20009eac 	.word	0x20009eac
 800e644:	20009ebc 	.word	0x20009ebc

0800e648 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e648:	b480      	push	{r7}
 800e64a:	b085      	sub	sp, #20
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e650:	4b28      	ldr	r3, [pc, #160]	; (800e6f4 <prvInsertBlockIntoFreeList+0xac>)
 800e652:	60fb      	str	r3, [r7, #12]
 800e654:	e002      	b.n	800e65c <prvInsertBlockIntoFreeList+0x14>
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	60fb      	str	r3, [r7, #12]
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	687a      	ldr	r2, [r7, #4]
 800e662:	429a      	cmp	r2, r3
 800e664:	d8f7      	bhi.n	800e656 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	685b      	ldr	r3, [r3, #4]
 800e66e:	68ba      	ldr	r2, [r7, #8]
 800e670:	4413      	add	r3, r2
 800e672:	687a      	ldr	r2, [r7, #4]
 800e674:	429a      	cmp	r2, r3
 800e676:	d108      	bne.n	800e68a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	685a      	ldr	r2, [r3, #4]
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	685b      	ldr	r3, [r3, #4]
 800e680:	441a      	add	r2, r3
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	685b      	ldr	r3, [r3, #4]
 800e692:	68ba      	ldr	r2, [r7, #8]
 800e694:	441a      	add	r2, r3
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	429a      	cmp	r2, r3
 800e69c:	d118      	bne.n	800e6d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	681a      	ldr	r2, [r3, #0]
 800e6a2:	4b15      	ldr	r3, [pc, #84]	; (800e6f8 <prvInsertBlockIntoFreeList+0xb0>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	d00d      	beq.n	800e6c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	685a      	ldr	r2, [r3, #4]
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	685b      	ldr	r3, [r3, #4]
 800e6b4:	441a      	add	r2, r3
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	681a      	ldr	r2, [r3, #0]
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	601a      	str	r2, [r3, #0]
 800e6c4:	e008      	b.n	800e6d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e6c6:	4b0c      	ldr	r3, [pc, #48]	; (800e6f8 <prvInsertBlockIntoFreeList+0xb0>)
 800e6c8:	681a      	ldr	r2, [r3, #0]
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	601a      	str	r2, [r3, #0]
 800e6ce:	e003      	b.n	800e6d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	681a      	ldr	r2, [r3, #0]
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e6d8:	68fa      	ldr	r2, [r7, #12]
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	d002      	beq.n	800e6e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	687a      	ldr	r2, [r7, #4]
 800e6e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e6e6:	bf00      	nop
 800e6e8:	3714      	adds	r7, #20
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f0:	4770      	bx	lr
 800e6f2:	bf00      	nop
 800e6f4:	20009ea0 	.word	0x20009ea0
 800e6f8:	20009ea8 	.word	0x20009ea8

0800e6fc <__cvt>:
 800e6fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e700:	ec55 4b10 	vmov	r4, r5, d0
 800e704:	2d00      	cmp	r5, #0
 800e706:	460e      	mov	r6, r1
 800e708:	4619      	mov	r1, r3
 800e70a:	462b      	mov	r3, r5
 800e70c:	bfbb      	ittet	lt
 800e70e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e712:	461d      	movlt	r5, r3
 800e714:	2300      	movge	r3, #0
 800e716:	232d      	movlt	r3, #45	; 0x2d
 800e718:	700b      	strb	r3, [r1, #0]
 800e71a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e71c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e720:	4691      	mov	r9, r2
 800e722:	f023 0820 	bic.w	r8, r3, #32
 800e726:	bfbc      	itt	lt
 800e728:	4622      	movlt	r2, r4
 800e72a:	4614      	movlt	r4, r2
 800e72c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e730:	d005      	beq.n	800e73e <__cvt+0x42>
 800e732:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e736:	d100      	bne.n	800e73a <__cvt+0x3e>
 800e738:	3601      	adds	r6, #1
 800e73a:	2102      	movs	r1, #2
 800e73c:	e000      	b.n	800e740 <__cvt+0x44>
 800e73e:	2103      	movs	r1, #3
 800e740:	ab03      	add	r3, sp, #12
 800e742:	9301      	str	r3, [sp, #4]
 800e744:	ab02      	add	r3, sp, #8
 800e746:	9300      	str	r3, [sp, #0]
 800e748:	ec45 4b10 	vmov	d0, r4, r5
 800e74c:	4653      	mov	r3, sl
 800e74e:	4632      	mov	r2, r6
 800e750:	f000 ffce 	bl	800f6f0 <_dtoa_r>
 800e754:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e758:	4607      	mov	r7, r0
 800e75a:	d102      	bne.n	800e762 <__cvt+0x66>
 800e75c:	f019 0f01 	tst.w	r9, #1
 800e760:	d022      	beq.n	800e7a8 <__cvt+0xac>
 800e762:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e766:	eb07 0906 	add.w	r9, r7, r6
 800e76a:	d110      	bne.n	800e78e <__cvt+0x92>
 800e76c:	783b      	ldrb	r3, [r7, #0]
 800e76e:	2b30      	cmp	r3, #48	; 0x30
 800e770:	d10a      	bne.n	800e788 <__cvt+0x8c>
 800e772:	2200      	movs	r2, #0
 800e774:	2300      	movs	r3, #0
 800e776:	4620      	mov	r0, r4
 800e778:	4629      	mov	r1, r5
 800e77a:	f7f2 f9d5 	bl	8000b28 <__aeabi_dcmpeq>
 800e77e:	b918      	cbnz	r0, 800e788 <__cvt+0x8c>
 800e780:	f1c6 0601 	rsb	r6, r6, #1
 800e784:	f8ca 6000 	str.w	r6, [sl]
 800e788:	f8da 3000 	ldr.w	r3, [sl]
 800e78c:	4499      	add	r9, r3
 800e78e:	2200      	movs	r2, #0
 800e790:	2300      	movs	r3, #0
 800e792:	4620      	mov	r0, r4
 800e794:	4629      	mov	r1, r5
 800e796:	f7f2 f9c7 	bl	8000b28 <__aeabi_dcmpeq>
 800e79a:	b108      	cbz	r0, 800e7a0 <__cvt+0xa4>
 800e79c:	f8cd 900c 	str.w	r9, [sp, #12]
 800e7a0:	2230      	movs	r2, #48	; 0x30
 800e7a2:	9b03      	ldr	r3, [sp, #12]
 800e7a4:	454b      	cmp	r3, r9
 800e7a6:	d307      	bcc.n	800e7b8 <__cvt+0xbc>
 800e7a8:	9b03      	ldr	r3, [sp, #12]
 800e7aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e7ac:	1bdb      	subs	r3, r3, r7
 800e7ae:	4638      	mov	r0, r7
 800e7b0:	6013      	str	r3, [r2, #0]
 800e7b2:	b004      	add	sp, #16
 800e7b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7b8:	1c59      	adds	r1, r3, #1
 800e7ba:	9103      	str	r1, [sp, #12]
 800e7bc:	701a      	strb	r2, [r3, #0]
 800e7be:	e7f0      	b.n	800e7a2 <__cvt+0xa6>

0800e7c0 <__exponent>:
 800e7c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	2900      	cmp	r1, #0
 800e7c6:	bfb8      	it	lt
 800e7c8:	4249      	neglt	r1, r1
 800e7ca:	f803 2b02 	strb.w	r2, [r3], #2
 800e7ce:	bfb4      	ite	lt
 800e7d0:	222d      	movlt	r2, #45	; 0x2d
 800e7d2:	222b      	movge	r2, #43	; 0x2b
 800e7d4:	2909      	cmp	r1, #9
 800e7d6:	7042      	strb	r2, [r0, #1]
 800e7d8:	dd2a      	ble.n	800e830 <__exponent+0x70>
 800e7da:	f10d 0207 	add.w	r2, sp, #7
 800e7de:	4617      	mov	r7, r2
 800e7e0:	260a      	movs	r6, #10
 800e7e2:	4694      	mov	ip, r2
 800e7e4:	fb91 f5f6 	sdiv	r5, r1, r6
 800e7e8:	fb06 1415 	mls	r4, r6, r5, r1
 800e7ec:	3430      	adds	r4, #48	; 0x30
 800e7ee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800e7f2:	460c      	mov	r4, r1
 800e7f4:	2c63      	cmp	r4, #99	; 0x63
 800e7f6:	f102 32ff 	add.w	r2, r2, #4294967295
 800e7fa:	4629      	mov	r1, r5
 800e7fc:	dcf1      	bgt.n	800e7e2 <__exponent+0x22>
 800e7fe:	3130      	adds	r1, #48	; 0x30
 800e800:	f1ac 0402 	sub.w	r4, ip, #2
 800e804:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e808:	1c41      	adds	r1, r0, #1
 800e80a:	4622      	mov	r2, r4
 800e80c:	42ba      	cmp	r2, r7
 800e80e:	d30a      	bcc.n	800e826 <__exponent+0x66>
 800e810:	f10d 0209 	add.w	r2, sp, #9
 800e814:	eba2 020c 	sub.w	r2, r2, ip
 800e818:	42bc      	cmp	r4, r7
 800e81a:	bf88      	it	hi
 800e81c:	2200      	movhi	r2, #0
 800e81e:	4413      	add	r3, r2
 800e820:	1a18      	subs	r0, r3, r0
 800e822:	b003      	add	sp, #12
 800e824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e826:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e82a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800e82e:	e7ed      	b.n	800e80c <__exponent+0x4c>
 800e830:	2330      	movs	r3, #48	; 0x30
 800e832:	3130      	adds	r1, #48	; 0x30
 800e834:	7083      	strb	r3, [r0, #2]
 800e836:	70c1      	strb	r1, [r0, #3]
 800e838:	1d03      	adds	r3, r0, #4
 800e83a:	e7f1      	b.n	800e820 <__exponent+0x60>

0800e83c <_printf_float>:
 800e83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e840:	ed2d 8b02 	vpush	{d8}
 800e844:	b08d      	sub	sp, #52	; 0x34
 800e846:	460c      	mov	r4, r1
 800e848:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e84c:	4616      	mov	r6, r2
 800e84e:	461f      	mov	r7, r3
 800e850:	4605      	mov	r5, r0
 800e852:	f000 fdeb 	bl	800f42c <_localeconv_r>
 800e856:	f8d0 a000 	ldr.w	sl, [r0]
 800e85a:	4650      	mov	r0, sl
 800e85c:	f7f1 fd38 	bl	80002d0 <strlen>
 800e860:	2300      	movs	r3, #0
 800e862:	930a      	str	r3, [sp, #40]	; 0x28
 800e864:	6823      	ldr	r3, [r4, #0]
 800e866:	9305      	str	r3, [sp, #20]
 800e868:	f8d8 3000 	ldr.w	r3, [r8]
 800e86c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e870:	3307      	adds	r3, #7
 800e872:	f023 0307 	bic.w	r3, r3, #7
 800e876:	f103 0208 	add.w	r2, r3, #8
 800e87a:	f8c8 2000 	str.w	r2, [r8]
 800e87e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e882:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e886:	9307      	str	r3, [sp, #28]
 800e888:	f8cd 8018 	str.w	r8, [sp, #24]
 800e88c:	ee08 0a10 	vmov	s16, r0
 800e890:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800e894:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e898:	4b9e      	ldr	r3, [pc, #632]	; (800eb14 <_printf_float+0x2d8>)
 800e89a:	f04f 32ff 	mov.w	r2, #4294967295
 800e89e:	f7f2 f975 	bl	8000b8c <__aeabi_dcmpun>
 800e8a2:	bb88      	cbnz	r0, 800e908 <_printf_float+0xcc>
 800e8a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e8a8:	4b9a      	ldr	r3, [pc, #616]	; (800eb14 <_printf_float+0x2d8>)
 800e8aa:	f04f 32ff 	mov.w	r2, #4294967295
 800e8ae:	f7f2 f94f 	bl	8000b50 <__aeabi_dcmple>
 800e8b2:	bb48      	cbnz	r0, 800e908 <_printf_float+0xcc>
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	4640      	mov	r0, r8
 800e8ba:	4649      	mov	r1, r9
 800e8bc:	f7f2 f93e 	bl	8000b3c <__aeabi_dcmplt>
 800e8c0:	b110      	cbz	r0, 800e8c8 <_printf_float+0x8c>
 800e8c2:	232d      	movs	r3, #45	; 0x2d
 800e8c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8c8:	4a93      	ldr	r2, [pc, #588]	; (800eb18 <_printf_float+0x2dc>)
 800e8ca:	4b94      	ldr	r3, [pc, #592]	; (800eb1c <_printf_float+0x2e0>)
 800e8cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e8d0:	bf94      	ite	ls
 800e8d2:	4690      	movls	r8, r2
 800e8d4:	4698      	movhi	r8, r3
 800e8d6:	2303      	movs	r3, #3
 800e8d8:	6123      	str	r3, [r4, #16]
 800e8da:	9b05      	ldr	r3, [sp, #20]
 800e8dc:	f023 0304 	bic.w	r3, r3, #4
 800e8e0:	6023      	str	r3, [r4, #0]
 800e8e2:	f04f 0900 	mov.w	r9, #0
 800e8e6:	9700      	str	r7, [sp, #0]
 800e8e8:	4633      	mov	r3, r6
 800e8ea:	aa0b      	add	r2, sp, #44	; 0x2c
 800e8ec:	4621      	mov	r1, r4
 800e8ee:	4628      	mov	r0, r5
 800e8f0:	f000 f9da 	bl	800eca8 <_printf_common>
 800e8f4:	3001      	adds	r0, #1
 800e8f6:	f040 8090 	bne.w	800ea1a <_printf_float+0x1de>
 800e8fa:	f04f 30ff 	mov.w	r0, #4294967295
 800e8fe:	b00d      	add	sp, #52	; 0x34
 800e900:	ecbd 8b02 	vpop	{d8}
 800e904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e908:	4642      	mov	r2, r8
 800e90a:	464b      	mov	r3, r9
 800e90c:	4640      	mov	r0, r8
 800e90e:	4649      	mov	r1, r9
 800e910:	f7f2 f93c 	bl	8000b8c <__aeabi_dcmpun>
 800e914:	b140      	cbz	r0, 800e928 <_printf_float+0xec>
 800e916:	464b      	mov	r3, r9
 800e918:	2b00      	cmp	r3, #0
 800e91a:	bfbc      	itt	lt
 800e91c:	232d      	movlt	r3, #45	; 0x2d
 800e91e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e922:	4a7f      	ldr	r2, [pc, #508]	; (800eb20 <_printf_float+0x2e4>)
 800e924:	4b7f      	ldr	r3, [pc, #508]	; (800eb24 <_printf_float+0x2e8>)
 800e926:	e7d1      	b.n	800e8cc <_printf_float+0x90>
 800e928:	6863      	ldr	r3, [r4, #4]
 800e92a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e92e:	9206      	str	r2, [sp, #24]
 800e930:	1c5a      	adds	r2, r3, #1
 800e932:	d13f      	bne.n	800e9b4 <_printf_float+0x178>
 800e934:	2306      	movs	r3, #6
 800e936:	6063      	str	r3, [r4, #4]
 800e938:	9b05      	ldr	r3, [sp, #20]
 800e93a:	6861      	ldr	r1, [r4, #4]
 800e93c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e940:	2300      	movs	r3, #0
 800e942:	9303      	str	r3, [sp, #12]
 800e944:	ab0a      	add	r3, sp, #40	; 0x28
 800e946:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e94a:	ab09      	add	r3, sp, #36	; 0x24
 800e94c:	ec49 8b10 	vmov	d0, r8, r9
 800e950:	9300      	str	r3, [sp, #0]
 800e952:	6022      	str	r2, [r4, #0]
 800e954:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e958:	4628      	mov	r0, r5
 800e95a:	f7ff fecf 	bl	800e6fc <__cvt>
 800e95e:	9b06      	ldr	r3, [sp, #24]
 800e960:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e962:	2b47      	cmp	r3, #71	; 0x47
 800e964:	4680      	mov	r8, r0
 800e966:	d108      	bne.n	800e97a <_printf_float+0x13e>
 800e968:	1cc8      	adds	r0, r1, #3
 800e96a:	db02      	blt.n	800e972 <_printf_float+0x136>
 800e96c:	6863      	ldr	r3, [r4, #4]
 800e96e:	4299      	cmp	r1, r3
 800e970:	dd41      	ble.n	800e9f6 <_printf_float+0x1ba>
 800e972:	f1ab 0302 	sub.w	r3, fp, #2
 800e976:	fa5f fb83 	uxtb.w	fp, r3
 800e97a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e97e:	d820      	bhi.n	800e9c2 <_printf_float+0x186>
 800e980:	3901      	subs	r1, #1
 800e982:	465a      	mov	r2, fp
 800e984:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e988:	9109      	str	r1, [sp, #36]	; 0x24
 800e98a:	f7ff ff19 	bl	800e7c0 <__exponent>
 800e98e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e990:	1813      	adds	r3, r2, r0
 800e992:	2a01      	cmp	r2, #1
 800e994:	4681      	mov	r9, r0
 800e996:	6123      	str	r3, [r4, #16]
 800e998:	dc02      	bgt.n	800e9a0 <_printf_float+0x164>
 800e99a:	6822      	ldr	r2, [r4, #0]
 800e99c:	07d2      	lsls	r2, r2, #31
 800e99e:	d501      	bpl.n	800e9a4 <_printf_float+0x168>
 800e9a0:	3301      	adds	r3, #1
 800e9a2:	6123      	str	r3, [r4, #16]
 800e9a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d09c      	beq.n	800e8e6 <_printf_float+0xaa>
 800e9ac:	232d      	movs	r3, #45	; 0x2d
 800e9ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e9b2:	e798      	b.n	800e8e6 <_printf_float+0xaa>
 800e9b4:	9a06      	ldr	r2, [sp, #24]
 800e9b6:	2a47      	cmp	r2, #71	; 0x47
 800e9b8:	d1be      	bne.n	800e938 <_printf_float+0xfc>
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d1bc      	bne.n	800e938 <_printf_float+0xfc>
 800e9be:	2301      	movs	r3, #1
 800e9c0:	e7b9      	b.n	800e936 <_printf_float+0xfa>
 800e9c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e9c6:	d118      	bne.n	800e9fa <_printf_float+0x1be>
 800e9c8:	2900      	cmp	r1, #0
 800e9ca:	6863      	ldr	r3, [r4, #4]
 800e9cc:	dd0b      	ble.n	800e9e6 <_printf_float+0x1aa>
 800e9ce:	6121      	str	r1, [r4, #16]
 800e9d0:	b913      	cbnz	r3, 800e9d8 <_printf_float+0x19c>
 800e9d2:	6822      	ldr	r2, [r4, #0]
 800e9d4:	07d0      	lsls	r0, r2, #31
 800e9d6:	d502      	bpl.n	800e9de <_printf_float+0x1a2>
 800e9d8:	3301      	adds	r3, #1
 800e9da:	440b      	add	r3, r1
 800e9dc:	6123      	str	r3, [r4, #16]
 800e9de:	65a1      	str	r1, [r4, #88]	; 0x58
 800e9e0:	f04f 0900 	mov.w	r9, #0
 800e9e4:	e7de      	b.n	800e9a4 <_printf_float+0x168>
 800e9e6:	b913      	cbnz	r3, 800e9ee <_printf_float+0x1b2>
 800e9e8:	6822      	ldr	r2, [r4, #0]
 800e9ea:	07d2      	lsls	r2, r2, #31
 800e9ec:	d501      	bpl.n	800e9f2 <_printf_float+0x1b6>
 800e9ee:	3302      	adds	r3, #2
 800e9f0:	e7f4      	b.n	800e9dc <_printf_float+0x1a0>
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	e7f2      	b.n	800e9dc <_printf_float+0x1a0>
 800e9f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e9fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9fc:	4299      	cmp	r1, r3
 800e9fe:	db05      	blt.n	800ea0c <_printf_float+0x1d0>
 800ea00:	6823      	ldr	r3, [r4, #0]
 800ea02:	6121      	str	r1, [r4, #16]
 800ea04:	07d8      	lsls	r0, r3, #31
 800ea06:	d5ea      	bpl.n	800e9de <_printf_float+0x1a2>
 800ea08:	1c4b      	adds	r3, r1, #1
 800ea0a:	e7e7      	b.n	800e9dc <_printf_float+0x1a0>
 800ea0c:	2900      	cmp	r1, #0
 800ea0e:	bfd4      	ite	le
 800ea10:	f1c1 0202 	rsble	r2, r1, #2
 800ea14:	2201      	movgt	r2, #1
 800ea16:	4413      	add	r3, r2
 800ea18:	e7e0      	b.n	800e9dc <_printf_float+0x1a0>
 800ea1a:	6823      	ldr	r3, [r4, #0]
 800ea1c:	055a      	lsls	r2, r3, #21
 800ea1e:	d407      	bmi.n	800ea30 <_printf_float+0x1f4>
 800ea20:	6923      	ldr	r3, [r4, #16]
 800ea22:	4642      	mov	r2, r8
 800ea24:	4631      	mov	r1, r6
 800ea26:	4628      	mov	r0, r5
 800ea28:	47b8      	blx	r7
 800ea2a:	3001      	adds	r0, #1
 800ea2c:	d12c      	bne.n	800ea88 <_printf_float+0x24c>
 800ea2e:	e764      	b.n	800e8fa <_printf_float+0xbe>
 800ea30:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ea34:	f240 80e0 	bls.w	800ebf8 <_printf_float+0x3bc>
 800ea38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	2300      	movs	r3, #0
 800ea40:	f7f2 f872 	bl	8000b28 <__aeabi_dcmpeq>
 800ea44:	2800      	cmp	r0, #0
 800ea46:	d034      	beq.n	800eab2 <_printf_float+0x276>
 800ea48:	4a37      	ldr	r2, [pc, #220]	; (800eb28 <_printf_float+0x2ec>)
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	4631      	mov	r1, r6
 800ea4e:	4628      	mov	r0, r5
 800ea50:	47b8      	blx	r7
 800ea52:	3001      	adds	r0, #1
 800ea54:	f43f af51 	beq.w	800e8fa <_printf_float+0xbe>
 800ea58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ea5c:	429a      	cmp	r2, r3
 800ea5e:	db02      	blt.n	800ea66 <_printf_float+0x22a>
 800ea60:	6823      	ldr	r3, [r4, #0]
 800ea62:	07d8      	lsls	r0, r3, #31
 800ea64:	d510      	bpl.n	800ea88 <_printf_float+0x24c>
 800ea66:	ee18 3a10 	vmov	r3, s16
 800ea6a:	4652      	mov	r2, sl
 800ea6c:	4631      	mov	r1, r6
 800ea6e:	4628      	mov	r0, r5
 800ea70:	47b8      	blx	r7
 800ea72:	3001      	adds	r0, #1
 800ea74:	f43f af41 	beq.w	800e8fa <_printf_float+0xbe>
 800ea78:	f04f 0800 	mov.w	r8, #0
 800ea7c:	f104 091a 	add.w	r9, r4, #26
 800ea80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea82:	3b01      	subs	r3, #1
 800ea84:	4543      	cmp	r3, r8
 800ea86:	dc09      	bgt.n	800ea9c <_printf_float+0x260>
 800ea88:	6823      	ldr	r3, [r4, #0]
 800ea8a:	079b      	lsls	r3, r3, #30
 800ea8c:	f100 8107 	bmi.w	800ec9e <_printf_float+0x462>
 800ea90:	68e0      	ldr	r0, [r4, #12]
 800ea92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea94:	4298      	cmp	r0, r3
 800ea96:	bfb8      	it	lt
 800ea98:	4618      	movlt	r0, r3
 800ea9a:	e730      	b.n	800e8fe <_printf_float+0xc2>
 800ea9c:	2301      	movs	r3, #1
 800ea9e:	464a      	mov	r2, r9
 800eaa0:	4631      	mov	r1, r6
 800eaa2:	4628      	mov	r0, r5
 800eaa4:	47b8      	blx	r7
 800eaa6:	3001      	adds	r0, #1
 800eaa8:	f43f af27 	beq.w	800e8fa <_printf_float+0xbe>
 800eaac:	f108 0801 	add.w	r8, r8, #1
 800eab0:	e7e6      	b.n	800ea80 <_printf_float+0x244>
 800eab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	dc39      	bgt.n	800eb2c <_printf_float+0x2f0>
 800eab8:	4a1b      	ldr	r2, [pc, #108]	; (800eb28 <_printf_float+0x2ec>)
 800eaba:	2301      	movs	r3, #1
 800eabc:	4631      	mov	r1, r6
 800eabe:	4628      	mov	r0, r5
 800eac0:	47b8      	blx	r7
 800eac2:	3001      	adds	r0, #1
 800eac4:	f43f af19 	beq.w	800e8fa <_printf_float+0xbe>
 800eac8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800eacc:	4313      	orrs	r3, r2
 800eace:	d102      	bne.n	800ead6 <_printf_float+0x29a>
 800ead0:	6823      	ldr	r3, [r4, #0]
 800ead2:	07d9      	lsls	r1, r3, #31
 800ead4:	d5d8      	bpl.n	800ea88 <_printf_float+0x24c>
 800ead6:	ee18 3a10 	vmov	r3, s16
 800eada:	4652      	mov	r2, sl
 800eadc:	4631      	mov	r1, r6
 800eade:	4628      	mov	r0, r5
 800eae0:	47b8      	blx	r7
 800eae2:	3001      	adds	r0, #1
 800eae4:	f43f af09 	beq.w	800e8fa <_printf_float+0xbe>
 800eae8:	f04f 0900 	mov.w	r9, #0
 800eaec:	f104 0a1a 	add.w	sl, r4, #26
 800eaf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eaf2:	425b      	negs	r3, r3
 800eaf4:	454b      	cmp	r3, r9
 800eaf6:	dc01      	bgt.n	800eafc <_printf_float+0x2c0>
 800eaf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eafa:	e792      	b.n	800ea22 <_printf_float+0x1e6>
 800eafc:	2301      	movs	r3, #1
 800eafe:	4652      	mov	r2, sl
 800eb00:	4631      	mov	r1, r6
 800eb02:	4628      	mov	r0, r5
 800eb04:	47b8      	blx	r7
 800eb06:	3001      	adds	r0, #1
 800eb08:	f43f aef7 	beq.w	800e8fa <_printf_float+0xbe>
 800eb0c:	f109 0901 	add.w	r9, r9, #1
 800eb10:	e7ee      	b.n	800eaf0 <_printf_float+0x2b4>
 800eb12:	bf00      	nop
 800eb14:	7fefffff 	.word	0x7fefffff
 800eb18:	08011f98 	.word	0x08011f98
 800eb1c:	08011f9c 	.word	0x08011f9c
 800eb20:	08011fa0 	.word	0x08011fa0
 800eb24:	08011fa4 	.word	0x08011fa4
 800eb28:	08011fa8 	.word	0x08011fa8
 800eb2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eb30:	429a      	cmp	r2, r3
 800eb32:	bfa8      	it	ge
 800eb34:	461a      	movge	r2, r3
 800eb36:	2a00      	cmp	r2, #0
 800eb38:	4691      	mov	r9, r2
 800eb3a:	dc37      	bgt.n	800ebac <_printf_float+0x370>
 800eb3c:	f04f 0b00 	mov.w	fp, #0
 800eb40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb44:	f104 021a 	add.w	r2, r4, #26
 800eb48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eb4a:	9305      	str	r3, [sp, #20]
 800eb4c:	eba3 0309 	sub.w	r3, r3, r9
 800eb50:	455b      	cmp	r3, fp
 800eb52:	dc33      	bgt.n	800ebbc <_printf_float+0x380>
 800eb54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eb58:	429a      	cmp	r2, r3
 800eb5a:	db3b      	blt.n	800ebd4 <_printf_float+0x398>
 800eb5c:	6823      	ldr	r3, [r4, #0]
 800eb5e:	07da      	lsls	r2, r3, #31
 800eb60:	d438      	bmi.n	800ebd4 <_printf_float+0x398>
 800eb62:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800eb66:	eba2 0903 	sub.w	r9, r2, r3
 800eb6a:	9b05      	ldr	r3, [sp, #20]
 800eb6c:	1ad2      	subs	r2, r2, r3
 800eb6e:	4591      	cmp	r9, r2
 800eb70:	bfa8      	it	ge
 800eb72:	4691      	movge	r9, r2
 800eb74:	f1b9 0f00 	cmp.w	r9, #0
 800eb78:	dc35      	bgt.n	800ebe6 <_printf_float+0x3aa>
 800eb7a:	f04f 0800 	mov.w	r8, #0
 800eb7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb82:	f104 0a1a 	add.w	sl, r4, #26
 800eb86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eb8a:	1a9b      	subs	r3, r3, r2
 800eb8c:	eba3 0309 	sub.w	r3, r3, r9
 800eb90:	4543      	cmp	r3, r8
 800eb92:	f77f af79 	ble.w	800ea88 <_printf_float+0x24c>
 800eb96:	2301      	movs	r3, #1
 800eb98:	4652      	mov	r2, sl
 800eb9a:	4631      	mov	r1, r6
 800eb9c:	4628      	mov	r0, r5
 800eb9e:	47b8      	blx	r7
 800eba0:	3001      	adds	r0, #1
 800eba2:	f43f aeaa 	beq.w	800e8fa <_printf_float+0xbe>
 800eba6:	f108 0801 	add.w	r8, r8, #1
 800ebaa:	e7ec      	b.n	800eb86 <_printf_float+0x34a>
 800ebac:	4613      	mov	r3, r2
 800ebae:	4631      	mov	r1, r6
 800ebb0:	4642      	mov	r2, r8
 800ebb2:	4628      	mov	r0, r5
 800ebb4:	47b8      	blx	r7
 800ebb6:	3001      	adds	r0, #1
 800ebb8:	d1c0      	bne.n	800eb3c <_printf_float+0x300>
 800ebba:	e69e      	b.n	800e8fa <_printf_float+0xbe>
 800ebbc:	2301      	movs	r3, #1
 800ebbe:	4631      	mov	r1, r6
 800ebc0:	4628      	mov	r0, r5
 800ebc2:	9205      	str	r2, [sp, #20]
 800ebc4:	47b8      	blx	r7
 800ebc6:	3001      	adds	r0, #1
 800ebc8:	f43f ae97 	beq.w	800e8fa <_printf_float+0xbe>
 800ebcc:	9a05      	ldr	r2, [sp, #20]
 800ebce:	f10b 0b01 	add.w	fp, fp, #1
 800ebd2:	e7b9      	b.n	800eb48 <_printf_float+0x30c>
 800ebd4:	ee18 3a10 	vmov	r3, s16
 800ebd8:	4652      	mov	r2, sl
 800ebda:	4631      	mov	r1, r6
 800ebdc:	4628      	mov	r0, r5
 800ebde:	47b8      	blx	r7
 800ebe0:	3001      	adds	r0, #1
 800ebe2:	d1be      	bne.n	800eb62 <_printf_float+0x326>
 800ebe4:	e689      	b.n	800e8fa <_printf_float+0xbe>
 800ebe6:	9a05      	ldr	r2, [sp, #20]
 800ebe8:	464b      	mov	r3, r9
 800ebea:	4442      	add	r2, r8
 800ebec:	4631      	mov	r1, r6
 800ebee:	4628      	mov	r0, r5
 800ebf0:	47b8      	blx	r7
 800ebf2:	3001      	adds	r0, #1
 800ebf4:	d1c1      	bne.n	800eb7a <_printf_float+0x33e>
 800ebf6:	e680      	b.n	800e8fa <_printf_float+0xbe>
 800ebf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ebfa:	2a01      	cmp	r2, #1
 800ebfc:	dc01      	bgt.n	800ec02 <_printf_float+0x3c6>
 800ebfe:	07db      	lsls	r3, r3, #31
 800ec00:	d53a      	bpl.n	800ec78 <_printf_float+0x43c>
 800ec02:	2301      	movs	r3, #1
 800ec04:	4642      	mov	r2, r8
 800ec06:	4631      	mov	r1, r6
 800ec08:	4628      	mov	r0, r5
 800ec0a:	47b8      	blx	r7
 800ec0c:	3001      	adds	r0, #1
 800ec0e:	f43f ae74 	beq.w	800e8fa <_printf_float+0xbe>
 800ec12:	ee18 3a10 	vmov	r3, s16
 800ec16:	4652      	mov	r2, sl
 800ec18:	4631      	mov	r1, r6
 800ec1a:	4628      	mov	r0, r5
 800ec1c:	47b8      	blx	r7
 800ec1e:	3001      	adds	r0, #1
 800ec20:	f43f ae6b 	beq.w	800e8fa <_printf_float+0xbe>
 800ec24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ec28:	2200      	movs	r2, #0
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800ec30:	f7f1 ff7a 	bl	8000b28 <__aeabi_dcmpeq>
 800ec34:	b9d8      	cbnz	r0, 800ec6e <_printf_float+0x432>
 800ec36:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ec3a:	f108 0201 	add.w	r2, r8, #1
 800ec3e:	4631      	mov	r1, r6
 800ec40:	4628      	mov	r0, r5
 800ec42:	47b8      	blx	r7
 800ec44:	3001      	adds	r0, #1
 800ec46:	d10e      	bne.n	800ec66 <_printf_float+0x42a>
 800ec48:	e657      	b.n	800e8fa <_printf_float+0xbe>
 800ec4a:	2301      	movs	r3, #1
 800ec4c:	4652      	mov	r2, sl
 800ec4e:	4631      	mov	r1, r6
 800ec50:	4628      	mov	r0, r5
 800ec52:	47b8      	blx	r7
 800ec54:	3001      	adds	r0, #1
 800ec56:	f43f ae50 	beq.w	800e8fa <_printf_float+0xbe>
 800ec5a:	f108 0801 	add.w	r8, r8, #1
 800ec5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec60:	3b01      	subs	r3, #1
 800ec62:	4543      	cmp	r3, r8
 800ec64:	dcf1      	bgt.n	800ec4a <_printf_float+0x40e>
 800ec66:	464b      	mov	r3, r9
 800ec68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ec6c:	e6da      	b.n	800ea24 <_printf_float+0x1e8>
 800ec6e:	f04f 0800 	mov.w	r8, #0
 800ec72:	f104 0a1a 	add.w	sl, r4, #26
 800ec76:	e7f2      	b.n	800ec5e <_printf_float+0x422>
 800ec78:	2301      	movs	r3, #1
 800ec7a:	4642      	mov	r2, r8
 800ec7c:	e7df      	b.n	800ec3e <_printf_float+0x402>
 800ec7e:	2301      	movs	r3, #1
 800ec80:	464a      	mov	r2, r9
 800ec82:	4631      	mov	r1, r6
 800ec84:	4628      	mov	r0, r5
 800ec86:	47b8      	blx	r7
 800ec88:	3001      	adds	r0, #1
 800ec8a:	f43f ae36 	beq.w	800e8fa <_printf_float+0xbe>
 800ec8e:	f108 0801 	add.w	r8, r8, #1
 800ec92:	68e3      	ldr	r3, [r4, #12]
 800ec94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ec96:	1a5b      	subs	r3, r3, r1
 800ec98:	4543      	cmp	r3, r8
 800ec9a:	dcf0      	bgt.n	800ec7e <_printf_float+0x442>
 800ec9c:	e6f8      	b.n	800ea90 <_printf_float+0x254>
 800ec9e:	f04f 0800 	mov.w	r8, #0
 800eca2:	f104 0919 	add.w	r9, r4, #25
 800eca6:	e7f4      	b.n	800ec92 <_printf_float+0x456>

0800eca8 <_printf_common>:
 800eca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecac:	4616      	mov	r6, r2
 800ecae:	4699      	mov	r9, r3
 800ecb0:	688a      	ldr	r2, [r1, #8]
 800ecb2:	690b      	ldr	r3, [r1, #16]
 800ecb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ecb8:	4293      	cmp	r3, r2
 800ecba:	bfb8      	it	lt
 800ecbc:	4613      	movlt	r3, r2
 800ecbe:	6033      	str	r3, [r6, #0]
 800ecc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ecc4:	4607      	mov	r7, r0
 800ecc6:	460c      	mov	r4, r1
 800ecc8:	b10a      	cbz	r2, 800ecce <_printf_common+0x26>
 800ecca:	3301      	adds	r3, #1
 800eccc:	6033      	str	r3, [r6, #0]
 800ecce:	6823      	ldr	r3, [r4, #0]
 800ecd0:	0699      	lsls	r1, r3, #26
 800ecd2:	bf42      	ittt	mi
 800ecd4:	6833      	ldrmi	r3, [r6, #0]
 800ecd6:	3302      	addmi	r3, #2
 800ecd8:	6033      	strmi	r3, [r6, #0]
 800ecda:	6825      	ldr	r5, [r4, #0]
 800ecdc:	f015 0506 	ands.w	r5, r5, #6
 800ece0:	d106      	bne.n	800ecf0 <_printf_common+0x48>
 800ece2:	f104 0a19 	add.w	sl, r4, #25
 800ece6:	68e3      	ldr	r3, [r4, #12]
 800ece8:	6832      	ldr	r2, [r6, #0]
 800ecea:	1a9b      	subs	r3, r3, r2
 800ecec:	42ab      	cmp	r3, r5
 800ecee:	dc26      	bgt.n	800ed3e <_printf_common+0x96>
 800ecf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ecf4:	1e13      	subs	r3, r2, #0
 800ecf6:	6822      	ldr	r2, [r4, #0]
 800ecf8:	bf18      	it	ne
 800ecfa:	2301      	movne	r3, #1
 800ecfc:	0692      	lsls	r2, r2, #26
 800ecfe:	d42b      	bmi.n	800ed58 <_printf_common+0xb0>
 800ed00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ed04:	4649      	mov	r1, r9
 800ed06:	4638      	mov	r0, r7
 800ed08:	47c0      	blx	r8
 800ed0a:	3001      	adds	r0, #1
 800ed0c:	d01e      	beq.n	800ed4c <_printf_common+0xa4>
 800ed0e:	6823      	ldr	r3, [r4, #0]
 800ed10:	6922      	ldr	r2, [r4, #16]
 800ed12:	f003 0306 	and.w	r3, r3, #6
 800ed16:	2b04      	cmp	r3, #4
 800ed18:	bf02      	ittt	eq
 800ed1a:	68e5      	ldreq	r5, [r4, #12]
 800ed1c:	6833      	ldreq	r3, [r6, #0]
 800ed1e:	1aed      	subeq	r5, r5, r3
 800ed20:	68a3      	ldr	r3, [r4, #8]
 800ed22:	bf0c      	ite	eq
 800ed24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed28:	2500      	movne	r5, #0
 800ed2a:	4293      	cmp	r3, r2
 800ed2c:	bfc4      	itt	gt
 800ed2e:	1a9b      	subgt	r3, r3, r2
 800ed30:	18ed      	addgt	r5, r5, r3
 800ed32:	2600      	movs	r6, #0
 800ed34:	341a      	adds	r4, #26
 800ed36:	42b5      	cmp	r5, r6
 800ed38:	d11a      	bne.n	800ed70 <_printf_common+0xc8>
 800ed3a:	2000      	movs	r0, #0
 800ed3c:	e008      	b.n	800ed50 <_printf_common+0xa8>
 800ed3e:	2301      	movs	r3, #1
 800ed40:	4652      	mov	r2, sl
 800ed42:	4649      	mov	r1, r9
 800ed44:	4638      	mov	r0, r7
 800ed46:	47c0      	blx	r8
 800ed48:	3001      	adds	r0, #1
 800ed4a:	d103      	bne.n	800ed54 <_printf_common+0xac>
 800ed4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ed50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed54:	3501      	adds	r5, #1
 800ed56:	e7c6      	b.n	800ece6 <_printf_common+0x3e>
 800ed58:	18e1      	adds	r1, r4, r3
 800ed5a:	1c5a      	adds	r2, r3, #1
 800ed5c:	2030      	movs	r0, #48	; 0x30
 800ed5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ed62:	4422      	add	r2, r4
 800ed64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ed68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ed6c:	3302      	adds	r3, #2
 800ed6e:	e7c7      	b.n	800ed00 <_printf_common+0x58>
 800ed70:	2301      	movs	r3, #1
 800ed72:	4622      	mov	r2, r4
 800ed74:	4649      	mov	r1, r9
 800ed76:	4638      	mov	r0, r7
 800ed78:	47c0      	blx	r8
 800ed7a:	3001      	adds	r0, #1
 800ed7c:	d0e6      	beq.n	800ed4c <_printf_common+0xa4>
 800ed7e:	3601      	adds	r6, #1
 800ed80:	e7d9      	b.n	800ed36 <_printf_common+0x8e>
	...

0800ed84 <_printf_i>:
 800ed84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed88:	7e0f      	ldrb	r7, [r1, #24]
 800ed8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ed8c:	2f78      	cmp	r7, #120	; 0x78
 800ed8e:	4691      	mov	r9, r2
 800ed90:	4680      	mov	r8, r0
 800ed92:	460c      	mov	r4, r1
 800ed94:	469a      	mov	sl, r3
 800ed96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ed9a:	d807      	bhi.n	800edac <_printf_i+0x28>
 800ed9c:	2f62      	cmp	r7, #98	; 0x62
 800ed9e:	d80a      	bhi.n	800edb6 <_printf_i+0x32>
 800eda0:	2f00      	cmp	r7, #0
 800eda2:	f000 80d4 	beq.w	800ef4e <_printf_i+0x1ca>
 800eda6:	2f58      	cmp	r7, #88	; 0x58
 800eda8:	f000 80c0 	beq.w	800ef2c <_printf_i+0x1a8>
 800edac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800edb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800edb4:	e03a      	b.n	800ee2c <_printf_i+0xa8>
 800edb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800edba:	2b15      	cmp	r3, #21
 800edbc:	d8f6      	bhi.n	800edac <_printf_i+0x28>
 800edbe:	a101      	add	r1, pc, #4	; (adr r1, 800edc4 <_printf_i+0x40>)
 800edc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800edc4:	0800ee1d 	.word	0x0800ee1d
 800edc8:	0800ee31 	.word	0x0800ee31
 800edcc:	0800edad 	.word	0x0800edad
 800edd0:	0800edad 	.word	0x0800edad
 800edd4:	0800edad 	.word	0x0800edad
 800edd8:	0800edad 	.word	0x0800edad
 800eddc:	0800ee31 	.word	0x0800ee31
 800ede0:	0800edad 	.word	0x0800edad
 800ede4:	0800edad 	.word	0x0800edad
 800ede8:	0800edad 	.word	0x0800edad
 800edec:	0800edad 	.word	0x0800edad
 800edf0:	0800ef35 	.word	0x0800ef35
 800edf4:	0800ee5d 	.word	0x0800ee5d
 800edf8:	0800eeef 	.word	0x0800eeef
 800edfc:	0800edad 	.word	0x0800edad
 800ee00:	0800edad 	.word	0x0800edad
 800ee04:	0800ef57 	.word	0x0800ef57
 800ee08:	0800edad 	.word	0x0800edad
 800ee0c:	0800ee5d 	.word	0x0800ee5d
 800ee10:	0800edad 	.word	0x0800edad
 800ee14:	0800edad 	.word	0x0800edad
 800ee18:	0800eef7 	.word	0x0800eef7
 800ee1c:	682b      	ldr	r3, [r5, #0]
 800ee1e:	1d1a      	adds	r2, r3, #4
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	602a      	str	r2, [r5, #0]
 800ee24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ee28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ee2c:	2301      	movs	r3, #1
 800ee2e:	e09f      	b.n	800ef70 <_printf_i+0x1ec>
 800ee30:	6820      	ldr	r0, [r4, #0]
 800ee32:	682b      	ldr	r3, [r5, #0]
 800ee34:	0607      	lsls	r7, r0, #24
 800ee36:	f103 0104 	add.w	r1, r3, #4
 800ee3a:	6029      	str	r1, [r5, #0]
 800ee3c:	d501      	bpl.n	800ee42 <_printf_i+0xbe>
 800ee3e:	681e      	ldr	r6, [r3, #0]
 800ee40:	e003      	b.n	800ee4a <_printf_i+0xc6>
 800ee42:	0646      	lsls	r6, r0, #25
 800ee44:	d5fb      	bpl.n	800ee3e <_printf_i+0xba>
 800ee46:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ee4a:	2e00      	cmp	r6, #0
 800ee4c:	da03      	bge.n	800ee56 <_printf_i+0xd2>
 800ee4e:	232d      	movs	r3, #45	; 0x2d
 800ee50:	4276      	negs	r6, r6
 800ee52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee56:	485a      	ldr	r0, [pc, #360]	; (800efc0 <_printf_i+0x23c>)
 800ee58:	230a      	movs	r3, #10
 800ee5a:	e012      	b.n	800ee82 <_printf_i+0xfe>
 800ee5c:	682b      	ldr	r3, [r5, #0]
 800ee5e:	6820      	ldr	r0, [r4, #0]
 800ee60:	1d19      	adds	r1, r3, #4
 800ee62:	6029      	str	r1, [r5, #0]
 800ee64:	0605      	lsls	r5, r0, #24
 800ee66:	d501      	bpl.n	800ee6c <_printf_i+0xe8>
 800ee68:	681e      	ldr	r6, [r3, #0]
 800ee6a:	e002      	b.n	800ee72 <_printf_i+0xee>
 800ee6c:	0641      	lsls	r1, r0, #25
 800ee6e:	d5fb      	bpl.n	800ee68 <_printf_i+0xe4>
 800ee70:	881e      	ldrh	r6, [r3, #0]
 800ee72:	4853      	ldr	r0, [pc, #332]	; (800efc0 <_printf_i+0x23c>)
 800ee74:	2f6f      	cmp	r7, #111	; 0x6f
 800ee76:	bf0c      	ite	eq
 800ee78:	2308      	moveq	r3, #8
 800ee7a:	230a      	movne	r3, #10
 800ee7c:	2100      	movs	r1, #0
 800ee7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ee82:	6865      	ldr	r5, [r4, #4]
 800ee84:	60a5      	str	r5, [r4, #8]
 800ee86:	2d00      	cmp	r5, #0
 800ee88:	bfa2      	ittt	ge
 800ee8a:	6821      	ldrge	r1, [r4, #0]
 800ee8c:	f021 0104 	bicge.w	r1, r1, #4
 800ee90:	6021      	strge	r1, [r4, #0]
 800ee92:	b90e      	cbnz	r6, 800ee98 <_printf_i+0x114>
 800ee94:	2d00      	cmp	r5, #0
 800ee96:	d04b      	beq.n	800ef30 <_printf_i+0x1ac>
 800ee98:	4615      	mov	r5, r2
 800ee9a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ee9e:	fb03 6711 	mls	r7, r3, r1, r6
 800eea2:	5dc7      	ldrb	r7, [r0, r7]
 800eea4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800eea8:	4637      	mov	r7, r6
 800eeaa:	42bb      	cmp	r3, r7
 800eeac:	460e      	mov	r6, r1
 800eeae:	d9f4      	bls.n	800ee9a <_printf_i+0x116>
 800eeb0:	2b08      	cmp	r3, #8
 800eeb2:	d10b      	bne.n	800eecc <_printf_i+0x148>
 800eeb4:	6823      	ldr	r3, [r4, #0]
 800eeb6:	07de      	lsls	r6, r3, #31
 800eeb8:	d508      	bpl.n	800eecc <_printf_i+0x148>
 800eeba:	6923      	ldr	r3, [r4, #16]
 800eebc:	6861      	ldr	r1, [r4, #4]
 800eebe:	4299      	cmp	r1, r3
 800eec0:	bfde      	ittt	le
 800eec2:	2330      	movle	r3, #48	; 0x30
 800eec4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800eec8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800eecc:	1b52      	subs	r2, r2, r5
 800eece:	6122      	str	r2, [r4, #16]
 800eed0:	f8cd a000 	str.w	sl, [sp]
 800eed4:	464b      	mov	r3, r9
 800eed6:	aa03      	add	r2, sp, #12
 800eed8:	4621      	mov	r1, r4
 800eeda:	4640      	mov	r0, r8
 800eedc:	f7ff fee4 	bl	800eca8 <_printf_common>
 800eee0:	3001      	adds	r0, #1
 800eee2:	d14a      	bne.n	800ef7a <_printf_i+0x1f6>
 800eee4:	f04f 30ff 	mov.w	r0, #4294967295
 800eee8:	b004      	add	sp, #16
 800eeea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eeee:	6823      	ldr	r3, [r4, #0]
 800eef0:	f043 0320 	orr.w	r3, r3, #32
 800eef4:	6023      	str	r3, [r4, #0]
 800eef6:	4833      	ldr	r0, [pc, #204]	; (800efc4 <_printf_i+0x240>)
 800eef8:	2778      	movs	r7, #120	; 0x78
 800eefa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800eefe:	6823      	ldr	r3, [r4, #0]
 800ef00:	6829      	ldr	r1, [r5, #0]
 800ef02:	061f      	lsls	r7, r3, #24
 800ef04:	f851 6b04 	ldr.w	r6, [r1], #4
 800ef08:	d402      	bmi.n	800ef10 <_printf_i+0x18c>
 800ef0a:	065f      	lsls	r7, r3, #25
 800ef0c:	bf48      	it	mi
 800ef0e:	b2b6      	uxthmi	r6, r6
 800ef10:	07df      	lsls	r7, r3, #31
 800ef12:	bf48      	it	mi
 800ef14:	f043 0320 	orrmi.w	r3, r3, #32
 800ef18:	6029      	str	r1, [r5, #0]
 800ef1a:	bf48      	it	mi
 800ef1c:	6023      	strmi	r3, [r4, #0]
 800ef1e:	b91e      	cbnz	r6, 800ef28 <_printf_i+0x1a4>
 800ef20:	6823      	ldr	r3, [r4, #0]
 800ef22:	f023 0320 	bic.w	r3, r3, #32
 800ef26:	6023      	str	r3, [r4, #0]
 800ef28:	2310      	movs	r3, #16
 800ef2a:	e7a7      	b.n	800ee7c <_printf_i+0xf8>
 800ef2c:	4824      	ldr	r0, [pc, #144]	; (800efc0 <_printf_i+0x23c>)
 800ef2e:	e7e4      	b.n	800eefa <_printf_i+0x176>
 800ef30:	4615      	mov	r5, r2
 800ef32:	e7bd      	b.n	800eeb0 <_printf_i+0x12c>
 800ef34:	682b      	ldr	r3, [r5, #0]
 800ef36:	6826      	ldr	r6, [r4, #0]
 800ef38:	6961      	ldr	r1, [r4, #20]
 800ef3a:	1d18      	adds	r0, r3, #4
 800ef3c:	6028      	str	r0, [r5, #0]
 800ef3e:	0635      	lsls	r5, r6, #24
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	d501      	bpl.n	800ef48 <_printf_i+0x1c4>
 800ef44:	6019      	str	r1, [r3, #0]
 800ef46:	e002      	b.n	800ef4e <_printf_i+0x1ca>
 800ef48:	0670      	lsls	r0, r6, #25
 800ef4a:	d5fb      	bpl.n	800ef44 <_printf_i+0x1c0>
 800ef4c:	8019      	strh	r1, [r3, #0]
 800ef4e:	2300      	movs	r3, #0
 800ef50:	6123      	str	r3, [r4, #16]
 800ef52:	4615      	mov	r5, r2
 800ef54:	e7bc      	b.n	800eed0 <_printf_i+0x14c>
 800ef56:	682b      	ldr	r3, [r5, #0]
 800ef58:	1d1a      	adds	r2, r3, #4
 800ef5a:	602a      	str	r2, [r5, #0]
 800ef5c:	681d      	ldr	r5, [r3, #0]
 800ef5e:	6862      	ldr	r2, [r4, #4]
 800ef60:	2100      	movs	r1, #0
 800ef62:	4628      	mov	r0, r5
 800ef64:	f7f1 f964 	bl	8000230 <memchr>
 800ef68:	b108      	cbz	r0, 800ef6e <_printf_i+0x1ea>
 800ef6a:	1b40      	subs	r0, r0, r5
 800ef6c:	6060      	str	r0, [r4, #4]
 800ef6e:	6863      	ldr	r3, [r4, #4]
 800ef70:	6123      	str	r3, [r4, #16]
 800ef72:	2300      	movs	r3, #0
 800ef74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef78:	e7aa      	b.n	800eed0 <_printf_i+0x14c>
 800ef7a:	6923      	ldr	r3, [r4, #16]
 800ef7c:	462a      	mov	r2, r5
 800ef7e:	4649      	mov	r1, r9
 800ef80:	4640      	mov	r0, r8
 800ef82:	47d0      	blx	sl
 800ef84:	3001      	adds	r0, #1
 800ef86:	d0ad      	beq.n	800eee4 <_printf_i+0x160>
 800ef88:	6823      	ldr	r3, [r4, #0]
 800ef8a:	079b      	lsls	r3, r3, #30
 800ef8c:	d413      	bmi.n	800efb6 <_printf_i+0x232>
 800ef8e:	68e0      	ldr	r0, [r4, #12]
 800ef90:	9b03      	ldr	r3, [sp, #12]
 800ef92:	4298      	cmp	r0, r3
 800ef94:	bfb8      	it	lt
 800ef96:	4618      	movlt	r0, r3
 800ef98:	e7a6      	b.n	800eee8 <_printf_i+0x164>
 800ef9a:	2301      	movs	r3, #1
 800ef9c:	4632      	mov	r2, r6
 800ef9e:	4649      	mov	r1, r9
 800efa0:	4640      	mov	r0, r8
 800efa2:	47d0      	blx	sl
 800efa4:	3001      	adds	r0, #1
 800efa6:	d09d      	beq.n	800eee4 <_printf_i+0x160>
 800efa8:	3501      	adds	r5, #1
 800efaa:	68e3      	ldr	r3, [r4, #12]
 800efac:	9903      	ldr	r1, [sp, #12]
 800efae:	1a5b      	subs	r3, r3, r1
 800efb0:	42ab      	cmp	r3, r5
 800efb2:	dcf2      	bgt.n	800ef9a <_printf_i+0x216>
 800efb4:	e7eb      	b.n	800ef8e <_printf_i+0x20a>
 800efb6:	2500      	movs	r5, #0
 800efb8:	f104 0619 	add.w	r6, r4, #25
 800efbc:	e7f5      	b.n	800efaa <_printf_i+0x226>
 800efbe:	bf00      	nop
 800efc0:	08011faa 	.word	0x08011faa
 800efc4:	08011fbb 	.word	0x08011fbb

0800efc8 <std>:
 800efc8:	2300      	movs	r3, #0
 800efca:	b510      	push	{r4, lr}
 800efcc:	4604      	mov	r4, r0
 800efce:	e9c0 3300 	strd	r3, r3, [r0]
 800efd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800efd6:	6083      	str	r3, [r0, #8]
 800efd8:	8181      	strh	r1, [r0, #12]
 800efda:	6643      	str	r3, [r0, #100]	; 0x64
 800efdc:	81c2      	strh	r2, [r0, #14]
 800efde:	6183      	str	r3, [r0, #24]
 800efe0:	4619      	mov	r1, r3
 800efe2:	2208      	movs	r2, #8
 800efe4:	305c      	adds	r0, #92	; 0x5c
 800efe6:	f000 fa05 	bl	800f3f4 <memset>
 800efea:	4b05      	ldr	r3, [pc, #20]	; (800f000 <std+0x38>)
 800efec:	6263      	str	r3, [r4, #36]	; 0x24
 800efee:	4b05      	ldr	r3, [pc, #20]	; (800f004 <std+0x3c>)
 800eff0:	62a3      	str	r3, [r4, #40]	; 0x28
 800eff2:	4b05      	ldr	r3, [pc, #20]	; (800f008 <std+0x40>)
 800eff4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eff6:	4b05      	ldr	r3, [pc, #20]	; (800f00c <std+0x44>)
 800eff8:	6224      	str	r4, [r4, #32]
 800effa:	6323      	str	r3, [r4, #48]	; 0x30
 800effc:	bd10      	pop	{r4, pc}
 800effe:	bf00      	nop
 800f000:	0800f245 	.word	0x0800f245
 800f004:	0800f267 	.word	0x0800f267
 800f008:	0800f29f 	.word	0x0800f29f
 800f00c:	0800f2c3 	.word	0x0800f2c3

0800f010 <stdio_exit_handler>:
 800f010:	4a02      	ldr	r2, [pc, #8]	; (800f01c <stdio_exit_handler+0xc>)
 800f012:	4903      	ldr	r1, [pc, #12]	; (800f020 <stdio_exit_handler+0x10>)
 800f014:	4803      	ldr	r0, [pc, #12]	; (800f024 <stdio_exit_handler+0x14>)
 800f016:	f000 b869 	b.w	800f0ec <_fwalk_sglue>
 800f01a:	bf00      	nop
 800f01c:	20000048 	.word	0x20000048
 800f020:	08011211 	.word	0x08011211
 800f024:	20000054 	.word	0x20000054

0800f028 <cleanup_stdio>:
 800f028:	6841      	ldr	r1, [r0, #4]
 800f02a:	4b0c      	ldr	r3, [pc, #48]	; (800f05c <cleanup_stdio+0x34>)
 800f02c:	4299      	cmp	r1, r3
 800f02e:	b510      	push	{r4, lr}
 800f030:	4604      	mov	r4, r0
 800f032:	d001      	beq.n	800f038 <cleanup_stdio+0x10>
 800f034:	f002 f8ec 	bl	8011210 <_fflush_r>
 800f038:	68a1      	ldr	r1, [r4, #8]
 800f03a:	4b09      	ldr	r3, [pc, #36]	; (800f060 <cleanup_stdio+0x38>)
 800f03c:	4299      	cmp	r1, r3
 800f03e:	d002      	beq.n	800f046 <cleanup_stdio+0x1e>
 800f040:	4620      	mov	r0, r4
 800f042:	f002 f8e5 	bl	8011210 <_fflush_r>
 800f046:	68e1      	ldr	r1, [r4, #12]
 800f048:	4b06      	ldr	r3, [pc, #24]	; (800f064 <cleanup_stdio+0x3c>)
 800f04a:	4299      	cmp	r1, r3
 800f04c:	d004      	beq.n	800f058 <cleanup_stdio+0x30>
 800f04e:	4620      	mov	r0, r4
 800f050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f054:	f002 b8dc 	b.w	8011210 <_fflush_r>
 800f058:	bd10      	pop	{r4, pc}
 800f05a:	bf00      	nop
 800f05c:	20009ec0 	.word	0x20009ec0
 800f060:	20009f28 	.word	0x20009f28
 800f064:	20009f90 	.word	0x20009f90

0800f068 <global_stdio_init.part.0>:
 800f068:	b510      	push	{r4, lr}
 800f06a:	4b0b      	ldr	r3, [pc, #44]	; (800f098 <global_stdio_init.part.0+0x30>)
 800f06c:	4c0b      	ldr	r4, [pc, #44]	; (800f09c <global_stdio_init.part.0+0x34>)
 800f06e:	4a0c      	ldr	r2, [pc, #48]	; (800f0a0 <global_stdio_init.part.0+0x38>)
 800f070:	601a      	str	r2, [r3, #0]
 800f072:	4620      	mov	r0, r4
 800f074:	2200      	movs	r2, #0
 800f076:	2104      	movs	r1, #4
 800f078:	f7ff ffa6 	bl	800efc8 <std>
 800f07c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f080:	2201      	movs	r2, #1
 800f082:	2109      	movs	r1, #9
 800f084:	f7ff ffa0 	bl	800efc8 <std>
 800f088:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f08c:	2202      	movs	r2, #2
 800f08e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f092:	2112      	movs	r1, #18
 800f094:	f7ff bf98 	b.w	800efc8 <std>
 800f098:	20009ff8 	.word	0x20009ff8
 800f09c:	20009ec0 	.word	0x20009ec0
 800f0a0:	0800f011 	.word	0x0800f011

0800f0a4 <__sfp_lock_acquire>:
 800f0a4:	4801      	ldr	r0, [pc, #4]	; (800f0ac <__sfp_lock_acquire+0x8>)
 800f0a6:	f000 ba8b 	b.w	800f5c0 <__retarget_lock_acquire_recursive>
 800f0aa:	bf00      	nop
 800f0ac:	2000a001 	.word	0x2000a001

0800f0b0 <__sfp_lock_release>:
 800f0b0:	4801      	ldr	r0, [pc, #4]	; (800f0b8 <__sfp_lock_release+0x8>)
 800f0b2:	f000 ba86 	b.w	800f5c2 <__retarget_lock_release_recursive>
 800f0b6:	bf00      	nop
 800f0b8:	2000a001 	.word	0x2000a001

0800f0bc <__sinit>:
 800f0bc:	b510      	push	{r4, lr}
 800f0be:	4604      	mov	r4, r0
 800f0c0:	f7ff fff0 	bl	800f0a4 <__sfp_lock_acquire>
 800f0c4:	6a23      	ldr	r3, [r4, #32]
 800f0c6:	b11b      	cbz	r3, 800f0d0 <__sinit+0x14>
 800f0c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0cc:	f7ff bff0 	b.w	800f0b0 <__sfp_lock_release>
 800f0d0:	4b04      	ldr	r3, [pc, #16]	; (800f0e4 <__sinit+0x28>)
 800f0d2:	6223      	str	r3, [r4, #32]
 800f0d4:	4b04      	ldr	r3, [pc, #16]	; (800f0e8 <__sinit+0x2c>)
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d1f5      	bne.n	800f0c8 <__sinit+0xc>
 800f0dc:	f7ff ffc4 	bl	800f068 <global_stdio_init.part.0>
 800f0e0:	e7f2      	b.n	800f0c8 <__sinit+0xc>
 800f0e2:	bf00      	nop
 800f0e4:	0800f029 	.word	0x0800f029
 800f0e8:	20009ff8 	.word	0x20009ff8

0800f0ec <_fwalk_sglue>:
 800f0ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0f0:	4607      	mov	r7, r0
 800f0f2:	4688      	mov	r8, r1
 800f0f4:	4614      	mov	r4, r2
 800f0f6:	2600      	movs	r6, #0
 800f0f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f0fc:	f1b9 0901 	subs.w	r9, r9, #1
 800f100:	d505      	bpl.n	800f10e <_fwalk_sglue+0x22>
 800f102:	6824      	ldr	r4, [r4, #0]
 800f104:	2c00      	cmp	r4, #0
 800f106:	d1f7      	bne.n	800f0f8 <_fwalk_sglue+0xc>
 800f108:	4630      	mov	r0, r6
 800f10a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f10e:	89ab      	ldrh	r3, [r5, #12]
 800f110:	2b01      	cmp	r3, #1
 800f112:	d907      	bls.n	800f124 <_fwalk_sglue+0x38>
 800f114:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f118:	3301      	adds	r3, #1
 800f11a:	d003      	beq.n	800f124 <_fwalk_sglue+0x38>
 800f11c:	4629      	mov	r1, r5
 800f11e:	4638      	mov	r0, r7
 800f120:	47c0      	blx	r8
 800f122:	4306      	orrs	r6, r0
 800f124:	3568      	adds	r5, #104	; 0x68
 800f126:	e7e9      	b.n	800f0fc <_fwalk_sglue+0x10>

0800f128 <iprintf>:
 800f128:	b40f      	push	{r0, r1, r2, r3}
 800f12a:	b507      	push	{r0, r1, r2, lr}
 800f12c:	4906      	ldr	r1, [pc, #24]	; (800f148 <iprintf+0x20>)
 800f12e:	ab04      	add	r3, sp, #16
 800f130:	6808      	ldr	r0, [r1, #0]
 800f132:	f853 2b04 	ldr.w	r2, [r3], #4
 800f136:	6881      	ldr	r1, [r0, #8]
 800f138:	9301      	str	r3, [sp, #4]
 800f13a:	f001 fec9 	bl	8010ed0 <_vfiprintf_r>
 800f13e:	b003      	add	sp, #12
 800f140:	f85d eb04 	ldr.w	lr, [sp], #4
 800f144:	b004      	add	sp, #16
 800f146:	4770      	bx	lr
 800f148:	200000a0 	.word	0x200000a0

0800f14c <_puts_r>:
 800f14c:	6a03      	ldr	r3, [r0, #32]
 800f14e:	b570      	push	{r4, r5, r6, lr}
 800f150:	6884      	ldr	r4, [r0, #8]
 800f152:	4605      	mov	r5, r0
 800f154:	460e      	mov	r6, r1
 800f156:	b90b      	cbnz	r3, 800f15c <_puts_r+0x10>
 800f158:	f7ff ffb0 	bl	800f0bc <__sinit>
 800f15c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f15e:	07db      	lsls	r3, r3, #31
 800f160:	d405      	bmi.n	800f16e <_puts_r+0x22>
 800f162:	89a3      	ldrh	r3, [r4, #12]
 800f164:	0598      	lsls	r0, r3, #22
 800f166:	d402      	bmi.n	800f16e <_puts_r+0x22>
 800f168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f16a:	f000 fa29 	bl	800f5c0 <__retarget_lock_acquire_recursive>
 800f16e:	89a3      	ldrh	r3, [r4, #12]
 800f170:	0719      	lsls	r1, r3, #28
 800f172:	d513      	bpl.n	800f19c <_puts_r+0x50>
 800f174:	6923      	ldr	r3, [r4, #16]
 800f176:	b18b      	cbz	r3, 800f19c <_puts_r+0x50>
 800f178:	3e01      	subs	r6, #1
 800f17a:	68a3      	ldr	r3, [r4, #8]
 800f17c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f180:	3b01      	subs	r3, #1
 800f182:	60a3      	str	r3, [r4, #8]
 800f184:	b9e9      	cbnz	r1, 800f1c2 <_puts_r+0x76>
 800f186:	2b00      	cmp	r3, #0
 800f188:	da2e      	bge.n	800f1e8 <_puts_r+0x9c>
 800f18a:	4622      	mov	r2, r4
 800f18c:	210a      	movs	r1, #10
 800f18e:	4628      	mov	r0, r5
 800f190:	f000 f89b 	bl	800f2ca <__swbuf_r>
 800f194:	3001      	adds	r0, #1
 800f196:	d007      	beq.n	800f1a8 <_puts_r+0x5c>
 800f198:	250a      	movs	r5, #10
 800f19a:	e007      	b.n	800f1ac <_puts_r+0x60>
 800f19c:	4621      	mov	r1, r4
 800f19e:	4628      	mov	r0, r5
 800f1a0:	f000 f8d0 	bl	800f344 <__swsetup_r>
 800f1a4:	2800      	cmp	r0, #0
 800f1a6:	d0e7      	beq.n	800f178 <_puts_r+0x2c>
 800f1a8:	f04f 35ff 	mov.w	r5, #4294967295
 800f1ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f1ae:	07da      	lsls	r2, r3, #31
 800f1b0:	d405      	bmi.n	800f1be <_puts_r+0x72>
 800f1b2:	89a3      	ldrh	r3, [r4, #12]
 800f1b4:	059b      	lsls	r3, r3, #22
 800f1b6:	d402      	bmi.n	800f1be <_puts_r+0x72>
 800f1b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f1ba:	f000 fa02 	bl	800f5c2 <__retarget_lock_release_recursive>
 800f1be:	4628      	mov	r0, r5
 800f1c0:	bd70      	pop	{r4, r5, r6, pc}
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	da04      	bge.n	800f1d0 <_puts_r+0x84>
 800f1c6:	69a2      	ldr	r2, [r4, #24]
 800f1c8:	429a      	cmp	r2, r3
 800f1ca:	dc06      	bgt.n	800f1da <_puts_r+0x8e>
 800f1cc:	290a      	cmp	r1, #10
 800f1ce:	d004      	beq.n	800f1da <_puts_r+0x8e>
 800f1d0:	6823      	ldr	r3, [r4, #0]
 800f1d2:	1c5a      	adds	r2, r3, #1
 800f1d4:	6022      	str	r2, [r4, #0]
 800f1d6:	7019      	strb	r1, [r3, #0]
 800f1d8:	e7cf      	b.n	800f17a <_puts_r+0x2e>
 800f1da:	4622      	mov	r2, r4
 800f1dc:	4628      	mov	r0, r5
 800f1de:	f000 f874 	bl	800f2ca <__swbuf_r>
 800f1e2:	3001      	adds	r0, #1
 800f1e4:	d1c9      	bne.n	800f17a <_puts_r+0x2e>
 800f1e6:	e7df      	b.n	800f1a8 <_puts_r+0x5c>
 800f1e8:	6823      	ldr	r3, [r4, #0]
 800f1ea:	250a      	movs	r5, #10
 800f1ec:	1c5a      	adds	r2, r3, #1
 800f1ee:	6022      	str	r2, [r4, #0]
 800f1f0:	701d      	strb	r5, [r3, #0]
 800f1f2:	e7db      	b.n	800f1ac <_puts_r+0x60>

0800f1f4 <puts>:
 800f1f4:	4b02      	ldr	r3, [pc, #8]	; (800f200 <puts+0xc>)
 800f1f6:	4601      	mov	r1, r0
 800f1f8:	6818      	ldr	r0, [r3, #0]
 800f1fa:	f7ff bfa7 	b.w	800f14c <_puts_r>
 800f1fe:	bf00      	nop
 800f200:	200000a0 	.word	0x200000a0

0800f204 <siprintf>:
 800f204:	b40e      	push	{r1, r2, r3}
 800f206:	b500      	push	{lr}
 800f208:	b09c      	sub	sp, #112	; 0x70
 800f20a:	ab1d      	add	r3, sp, #116	; 0x74
 800f20c:	9002      	str	r0, [sp, #8]
 800f20e:	9006      	str	r0, [sp, #24]
 800f210:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f214:	4809      	ldr	r0, [pc, #36]	; (800f23c <siprintf+0x38>)
 800f216:	9107      	str	r1, [sp, #28]
 800f218:	9104      	str	r1, [sp, #16]
 800f21a:	4909      	ldr	r1, [pc, #36]	; (800f240 <siprintf+0x3c>)
 800f21c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f220:	9105      	str	r1, [sp, #20]
 800f222:	6800      	ldr	r0, [r0, #0]
 800f224:	9301      	str	r3, [sp, #4]
 800f226:	a902      	add	r1, sp, #8
 800f228:	f001 fd2a 	bl	8010c80 <_svfiprintf_r>
 800f22c:	9b02      	ldr	r3, [sp, #8]
 800f22e:	2200      	movs	r2, #0
 800f230:	701a      	strb	r2, [r3, #0]
 800f232:	b01c      	add	sp, #112	; 0x70
 800f234:	f85d eb04 	ldr.w	lr, [sp], #4
 800f238:	b003      	add	sp, #12
 800f23a:	4770      	bx	lr
 800f23c:	200000a0 	.word	0x200000a0
 800f240:	ffff0208 	.word	0xffff0208

0800f244 <__sread>:
 800f244:	b510      	push	{r4, lr}
 800f246:	460c      	mov	r4, r1
 800f248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f24c:	f000 f96a 	bl	800f524 <_read_r>
 800f250:	2800      	cmp	r0, #0
 800f252:	bfab      	itete	ge
 800f254:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f256:	89a3      	ldrhlt	r3, [r4, #12]
 800f258:	181b      	addge	r3, r3, r0
 800f25a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f25e:	bfac      	ite	ge
 800f260:	6563      	strge	r3, [r4, #84]	; 0x54
 800f262:	81a3      	strhlt	r3, [r4, #12]
 800f264:	bd10      	pop	{r4, pc}

0800f266 <__swrite>:
 800f266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f26a:	461f      	mov	r7, r3
 800f26c:	898b      	ldrh	r3, [r1, #12]
 800f26e:	05db      	lsls	r3, r3, #23
 800f270:	4605      	mov	r5, r0
 800f272:	460c      	mov	r4, r1
 800f274:	4616      	mov	r6, r2
 800f276:	d505      	bpl.n	800f284 <__swrite+0x1e>
 800f278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f27c:	2302      	movs	r3, #2
 800f27e:	2200      	movs	r2, #0
 800f280:	f000 f93e 	bl	800f500 <_lseek_r>
 800f284:	89a3      	ldrh	r3, [r4, #12]
 800f286:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f28a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f28e:	81a3      	strh	r3, [r4, #12]
 800f290:	4632      	mov	r2, r6
 800f292:	463b      	mov	r3, r7
 800f294:	4628      	mov	r0, r5
 800f296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f29a:	f000 b955 	b.w	800f548 <_write_r>

0800f29e <__sseek>:
 800f29e:	b510      	push	{r4, lr}
 800f2a0:	460c      	mov	r4, r1
 800f2a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2a6:	f000 f92b 	bl	800f500 <_lseek_r>
 800f2aa:	1c43      	adds	r3, r0, #1
 800f2ac:	89a3      	ldrh	r3, [r4, #12]
 800f2ae:	bf15      	itete	ne
 800f2b0:	6560      	strne	r0, [r4, #84]	; 0x54
 800f2b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f2b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f2ba:	81a3      	strheq	r3, [r4, #12]
 800f2bc:	bf18      	it	ne
 800f2be:	81a3      	strhne	r3, [r4, #12]
 800f2c0:	bd10      	pop	{r4, pc}

0800f2c2 <__sclose>:
 800f2c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2c6:	f000 b8b5 	b.w	800f434 <_close_r>

0800f2ca <__swbuf_r>:
 800f2ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2cc:	460e      	mov	r6, r1
 800f2ce:	4614      	mov	r4, r2
 800f2d0:	4605      	mov	r5, r0
 800f2d2:	b118      	cbz	r0, 800f2dc <__swbuf_r+0x12>
 800f2d4:	6a03      	ldr	r3, [r0, #32]
 800f2d6:	b90b      	cbnz	r3, 800f2dc <__swbuf_r+0x12>
 800f2d8:	f7ff fef0 	bl	800f0bc <__sinit>
 800f2dc:	69a3      	ldr	r3, [r4, #24]
 800f2de:	60a3      	str	r3, [r4, #8]
 800f2e0:	89a3      	ldrh	r3, [r4, #12]
 800f2e2:	071a      	lsls	r2, r3, #28
 800f2e4:	d525      	bpl.n	800f332 <__swbuf_r+0x68>
 800f2e6:	6923      	ldr	r3, [r4, #16]
 800f2e8:	b31b      	cbz	r3, 800f332 <__swbuf_r+0x68>
 800f2ea:	6823      	ldr	r3, [r4, #0]
 800f2ec:	6922      	ldr	r2, [r4, #16]
 800f2ee:	1a98      	subs	r0, r3, r2
 800f2f0:	6963      	ldr	r3, [r4, #20]
 800f2f2:	b2f6      	uxtb	r6, r6
 800f2f4:	4283      	cmp	r3, r0
 800f2f6:	4637      	mov	r7, r6
 800f2f8:	dc04      	bgt.n	800f304 <__swbuf_r+0x3a>
 800f2fa:	4621      	mov	r1, r4
 800f2fc:	4628      	mov	r0, r5
 800f2fe:	f001 ff87 	bl	8011210 <_fflush_r>
 800f302:	b9e0      	cbnz	r0, 800f33e <__swbuf_r+0x74>
 800f304:	68a3      	ldr	r3, [r4, #8]
 800f306:	3b01      	subs	r3, #1
 800f308:	60a3      	str	r3, [r4, #8]
 800f30a:	6823      	ldr	r3, [r4, #0]
 800f30c:	1c5a      	adds	r2, r3, #1
 800f30e:	6022      	str	r2, [r4, #0]
 800f310:	701e      	strb	r6, [r3, #0]
 800f312:	6962      	ldr	r2, [r4, #20]
 800f314:	1c43      	adds	r3, r0, #1
 800f316:	429a      	cmp	r2, r3
 800f318:	d004      	beq.n	800f324 <__swbuf_r+0x5a>
 800f31a:	89a3      	ldrh	r3, [r4, #12]
 800f31c:	07db      	lsls	r3, r3, #31
 800f31e:	d506      	bpl.n	800f32e <__swbuf_r+0x64>
 800f320:	2e0a      	cmp	r6, #10
 800f322:	d104      	bne.n	800f32e <__swbuf_r+0x64>
 800f324:	4621      	mov	r1, r4
 800f326:	4628      	mov	r0, r5
 800f328:	f001 ff72 	bl	8011210 <_fflush_r>
 800f32c:	b938      	cbnz	r0, 800f33e <__swbuf_r+0x74>
 800f32e:	4638      	mov	r0, r7
 800f330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f332:	4621      	mov	r1, r4
 800f334:	4628      	mov	r0, r5
 800f336:	f000 f805 	bl	800f344 <__swsetup_r>
 800f33a:	2800      	cmp	r0, #0
 800f33c:	d0d5      	beq.n	800f2ea <__swbuf_r+0x20>
 800f33e:	f04f 37ff 	mov.w	r7, #4294967295
 800f342:	e7f4      	b.n	800f32e <__swbuf_r+0x64>

0800f344 <__swsetup_r>:
 800f344:	b538      	push	{r3, r4, r5, lr}
 800f346:	4b2a      	ldr	r3, [pc, #168]	; (800f3f0 <__swsetup_r+0xac>)
 800f348:	4605      	mov	r5, r0
 800f34a:	6818      	ldr	r0, [r3, #0]
 800f34c:	460c      	mov	r4, r1
 800f34e:	b118      	cbz	r0, 800f358 <__swsetup_r+0x14>
 800f350:	6a03      	ldr	r3, [r0, #32]
 800f352:	b90b      	cbnz	r3, 800f358 <__swsetup_r+0x14>
 800f354:	f7ff feb2 	bl	800f0bc <__sinit>
 800f358:	89a3      	ldrh	r3, [r4, #12]
 800f35a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f35e:	0718      	lsls	r0, r3, #28
 800f360:	d422      	bmi.n	800f3a8 <__swsetup_r+0x64>
 800f362:	06d9      	lsls	r1, r3, #27
 800f364:	d407      	bmi.n	800f376 <__swsetup_r+0x32>
 800f366:	2309      	movs	r3, #9
 800f368:	602b      	str	r3, [r5, #0]
 800f36a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f36e:	81a3      	strh	r3, [r4, #12]
 800f370:	f04f 30ff 	mov.w	r0, #4294967295
 800f374:	e034      	b.n	800f3e0 <__swsetup_r+0x9c>
 800f376:	0758      	lsls	r0, r3, #29
 800f378:	d512      	bpl.n	800f3a0 <__swsetup_r+0x5c>
 800f37a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f37c:	b141      	cbz	r1, 800f390 <__swsetup_r+0x4c>
 800f37e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f382:	4299      	cmp	r1, r3
 800f384:	d002      	beq.n	800f38c <__swsetup_r+0x48>
 800f386:	4628      	mov	r0, r5
 800f388:	f000 ffa4 	bl	80102d4 <_free_r>
 800f38c:	2300      	movs	r3, #0
 800f38e:	6363      	str	r3, [r4, #52]	; 0x34
 800f390:	89a3      	ldrh	r3, [r4, #12]
 800f392:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f396:	81a3      	strh	r3, [r4, #12]
 800f398:	2300      	movs	r3, #0
 800f39a:	6063      	str	r3, [r4, #4]
 800f39c:	6923      	ldr	r3, [r4, #16]
 800f39e:	6023      	str	r3, [r4, #0]
 800f3a0:	89a3      	ldrh	r3, [r4, #12]
 800f3a2:	f043 0308 	orr.w	r3, r3, #8
 800f3a6:	81a3      	strh	r3, [r4, #12]
 800f3a8:	6923      	ldr	r3, [r4, #16]
 800f3aa:	b94b      	cbnz	r3, 800f3c0 <__swsetup_r+0x7c>
 800f3ac:	89a3      	ldrh	r3, [r4, #12]
 800f3ae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f3b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f3b6:	d003      	beq.n	800f3c0 <__swsetup_r+0x7c>
 800f3b8:	4621      	mov	r1, r4
 800f3ba:	4628      	mov	r0, r5
 800f3bc:	f001 ff76 	bl	80112ac <__smakebuf_r>
 800f3c0:	89a0      	ldrh	r0, [r4, #12]
 800f3c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f3c6:	f010 0301 	ands.w	r3, r0, #1
 800f3ca:	d00a      	beq.n	800f3e2 <__swsetup_r+0x9e>
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	60a3      	str	r3, [r4, #8]
 800f3d0:	6963      	ldr	r3, [r4, #20]
 800f3d2:	425b      	negs	r3, r3
 800f3d4:	61a3      	str	r3, [r4, #24]
 800f3d6:	6923      	ldr	r3, [r4, #16]
 800f3d8:	b943      	cbnz	r3, 800f3ec <__swsetup_r+0xa8>
 800f3da:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f3de:	d1c4      	bne.n	800f36a <__swsetup_r+0x26>
 800f3e0:	bd38      	pop	{r3, r4, r5, pc}
 800f3e2:	0781      	lsls	r1, r0, #30
 800f3e4:	bf58      	it	pl
 800f3e6:	6963      	ldrpl	r3, [r4, #20]
 800f3e8:	60a3      	str	r3, [r4, #8]
 800f3ea:	e7f4      	b.n	800f3d6 <__swsetup_r+0x92>
 800f3ec:	2000      	movs	r0, #0
 800f3ee:	e7f7      	b.n	800f3e0 <__swsetup_r+0x9c>
 800f3f0:	200000a0 	.word	0x200000a0

0800f3f4 <memset>:
 800f3f4:	4402      	add	r2, r0
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	4293      	cmp	r3, r2
 800f3fa:	d100      	bne.n	800f3fe <memset+0xa>
 800f3fc:	4770      	bx	lr
 800f3fe:	f803 1b01 	strb.w	r1, [r3], #1
 800f402:	e7f9      	b.n	800f3f8 <memset+0x4>

0800f404 <strncpy>:
 800f404:	b510      	push	{r4, lr}
 800f406:	3901      	subs	r1, #1
 800f408:	4603      	mov	r3, r0
 800f40a:	b132      	cbz	r2, 800f41a <strncpy+0x16>
 800f40c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f410:	f803 4b01 	strb.w	r4, [r3], #1
 800f414:	3a01      	subs	r2, #1
 800f416:	2c00      	cmp	r4, #0
 800f418:	d1f7      	bne.n	800f40a <strncpy+0x6>
 800f41a:	441a      	add	r2, r3
 800f41c:	2100      	movs	r1, #0
 800f41e:	4293      	cmp	r3, r2
 800f420:	d100      	bne.n	800f424 <strncpy+0x20>
 800f422:	bd10      	pop	{r4, pc}
 800f424:	f803 1b01 	strb.w	r1, [r3], #1
 800f428:	e7f9      	b.n	800f41e <strncpy+0x1a>
	...

0800f42c <_localeconv_r>:
 800f42c:	4800      	ldr	r0, [pc, #0]	; (800f430 <_localeconv_r+0x4>)
 800f42e:	4770      	bx	lr
 800f430:	20000194 	.word	0x20000194

0800f434 <_close_r>:
 800f434:	b538      	push	{r3, r4, r5, lr}
 800f436:	4d06      	ldr	r5, [pc, #24]	; (800f450 <_close_r+0x1c>)
 800f438:	2300      	movs	r3, #0
 800f43a:	4604      	mov	r4, r0
 800f43c:	4608      	mov	r0, r1
 800f43e:	602b      	str	r3, [r5, #0]
 800f440:	f7f4 f849 	bl	80034d6 <_close>
 800f444:	1c43      	adds	r3, r0, #1
 800f446:	d102      	bne.n	800f44e <_close_r+0x1a>
 800f448:	682b      	ldr	r3, [r5, #0]
 800f44a:	b103      	cbz	r3, 800f44e <_close_r+0x1a>
 800f44c:	6023      	str	r3, [r4, #0]
 800f44e:	bd38      	pop	{r3, r4, r5, pc}
 800f450:	20009ffc 	.word	0x20009ffc

0800f454 <_reclaim_reent>:
 800f454:	4b29      	ldr	r3, [pc, #164]	; (800f4fc <_reclaim_reent+0xa8>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	4283      	cmp	r3, r0
 800f45a:	b570      	push	{r4, r5, r6, lr}
 800f45c:	4604      	mov	r4, r0
 800f45e:	d04b      	beq.n	800f4f8 <_reclaim_reent+0xa4>
 800f460:	69c3      	ldr	r3, [r0, #28]
 800f462:	b143      	cbz	r3, 800f476 <_reclaim_reent+0x22>
 800f464:	68db      	ldr	r3, [r3, #12]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d144      	bne.n	800f4f4 <_reclaim_reent+0xa0>
 800f46a:	69e3      	ldr	r3, [r4, #28]
 800f46c:	6819      	ldr	r1, [r3, #0]
 800f46e:	b111      	cbz	r1, 800f476 <_reclaim_reent+0x22>
 800f470:	4620      	mov	r0, r4
 800f472:	f000 ff2f 	bl	80102d4 <_free_r>
 800f476:	6961      	ldr	r1, [r4, #20]
 800f478:	b111      	cbz	r1, 800f480 <_reclaim_reent+0x2c>
 800f47a:	4620      	mov	r0, r4
 800f47c:	f000 ff2a 	bl	80102d4 <_free_r>
 800f480:	69e1      	ldr	r1, [r4, #28]
 800f482:	b111      	cbz	r1, 800f48a <_reclaim_reent+0x36>
 800f484:	4620      	mov	r0, r4
 800f486:	f000 ff25 	bl	80102d4 <_free_r>
 800f48a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f48c:	b111      	cbz	r1, 800f494 <_reclaim_reent+0x40>
 800f48e:	4620      	mov	r0, r4
 800f490:	f000 ff20 	bl	80102d4 <_free_r>
 800f494:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f496:	b111      	cbz	r1, 800f49e <_reclaim_reent+0x4a>
 800f498:	4620      	mov	r0, r4
 800f49a:	f000 ff1b 	bl	80102d4 <_free_r>
 800f49e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f4a0:	b111      	cbz	r1, 800f4a8 <_reclaim_reent+0x54>
 800f4a2:	4620      	mov	r0, r4
 800f4a4:	f000 ff16 	bl	80102d4 <_free_r>
 800f4a8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f4aa:	b111      	cbz	r1, 800f4b2 <_reclaim_reent+0x5e>
 800f4ac:	4620      	mov	r0, r4
 800f4ae:	f000 ff11 	bl	80102d4 <_free_r>
 800f4b2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f4b4:	b111      	cbz	r1, 800f4bc <_reclaim_reent+0x68>
 800f4b6:	4620      	mov	r0, r4
 800f4b8:	f000 ff0c 	bl	80102d4 <_free_r>
 800f4bc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f4be:	b111      	cbz	r1, 800f4c6 <_reclaim_reent+0x72>
 800f4c0:	4620      	mov	r0, r4
 800f4c2:	f000 ff07 	bl	80102d4 <_free_r>
 800f4c6:	6a23      	ldr	r3, [r4, #32]
 800f4c8:	b1b3      	cbz	r3, 800f4f8 <_reclaim_reent+0xa4>
 800f4ca:	4620      	mov	r0, r4
 800f4cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f4d0:	4718      	bx	r3
 800f4d2:	5949      	ldr	r1, [r1, r5]
 800f4d4:	b941      	cbnz	r1, 800f4e8 <_reclaim_reent+0x94>
 800f4d6:	3504      	adds	r5, #4
 800f4d8:	69e3      	ldr	r3, [r4, #28]
 800f4da:	2d80      	cmp	r5, #128	; 0x80
 800f4dc:	68d9      	ldr	r1, [r3, #12]
 800f4de:	d1f8      	bne.n	800f4d2 <_reclaim_reent+0x7e>
 800f4e0:	4620      	mov	r0, r4
 800f4e2:	f000 fef7 	bl	80102d4 <_free_r>
 800f4e6:	e7c0      	b.n	800f46a <_reclaim_reent+0x16>
 800f4e8:	680e      	ldr	r6, [r1, #0]
 800f4ea:	4620      	mov	r0, r4
 800f4ec:	f000 fef2 	bl	80102d4 <_free_r>
 800f4f0:	4631      	mov	r1, r6
 800f4f2:	e7ef      	b.n	800f4d4 <_reclaim_reent+0x80>
 800f4f4:	2500      	movs	r5, #0
 800f4f6:	e7ef      	b.n	800f4d8 <_reclaim_reent+0x84>
 800f4f8:	bd70      	pop	{r4, r5, r6, pc}
 800f4fa:	bf00      	nop
 800f4fc:	200000a0 	.word	0x200000a0

0800f500 <_lseek_r>:
 800f500:	b538      	push	{r3, r4, r5, lr}
 800f502:	4d07      	ldr	r5, [pc, #28]	; (800f520 <_lseek_r+0x20>)
 800f504:	4604      	mov	r4, r0
 800f506:	4608      	mov	r0, r1
 800f508:	4611      	mov	r1, r2
 800f50a:	2200      	movs	r2, #0
 800f50c:	602a      	str	r2, [r5, #0]
 800f50e:	461a      	mov	r2, r3
 800f510:	f7f4 f808 	bl	8003524 <_lseek>
 800f514:	1c43      	adds	r3, r0, #1
 800f516:	d102      	bne.n	800f51e <_lseek_r+0x1e>
 800f518:	682b      	ldr	r3, [r5, #0]
 800f51a:	b103      	cbz	r3, 800f51e <_lseek_r+0x1e>
 800f51c:	6023      	str	r3, [r4, #0]
 800f51e:	bd38      	pop	{r3, r4, r5, pc}
 800f520:	20009ffc 	.word	0x20009ffc

0800f524 <_read_r>:
 800f524:	b538      	push	{r3, r4, r5, lr}
 800f526:	4d07      	ldr	r5, [pc, #28]	; (800f544 <_read_r+0x20>)
 800f528:	4604      	mov	r4, r0
 800f52a:	4608      	mov	r0, r1
 800f52c:	4611      	mov	r1, r2
 800f52e:	2200      	movs	r2, #0
 800f530:	602a      	str	r2, [r5, #0]
 800f532:	461a      	mov	r2, r3
 800f534:	f7f3 ff96 	bl	8003464 <_read>
 800f538:	1c43      	adds	r3, r0, #1
 800f53a:	d102      	bne.n	800f542 <_read_r+0x1e>
 800f53c:	682b      	ldr	r3, [r5, #0]
 800f53e:	b103      	cbz	r3, 800f542 <_read_r+0x1e>
 800f540:	6023      	str	r3, [r4, #0]
 800f542:	bd38      	pop	{r3, r4, r5, pc}
 800f544:	20009ffc 	.word	0x20009ffc

0800f548 <_write_r>:
 800f548:	b538      	push	{r3, r4, r5, lr}
 800f54a:	4d07      	ldr	r5, [pc, #28]	; (800f568 <_write_r+0x20>)
 800f54c:	4604      	mov	r4, r0
 800f54e:	4608      	mov	r0, r1
 800f550:	4611      	mov	r1, r2
 800f552:	2200      	movs	r2, #0
 800f554:	602a      	str	r2, [r5, #0]
 800f556:	461a      	mov	r2, r3
 800f558:	f7f3 ffa1 	bl	800349e <_write>
 800f55c:	1c43      	adds	r3, r0, #1
 800f55e:	d102      	bne.n	800f566 <_write_r+0x1e>
 800f560:	682b      	ldr	r3, [r5, #0]
 800f562:	b103      	cbz	r3, 800f566 <_write_r+0x1e>
 800f564:	6023      	str	r3, [r4, #0]
 800f566:	bd38      	pop	{r3, r4, r5, pc}
 800f568:	20009ffc 	.word	0x20009ffc

0800f56c <__errno>:
 800f56c:	4b01      	ldr	r3, [pc, #4]	; (800f574 <__errno+0x8>)
 800f56e:	6818      	ldr	r0, [r3, #0]
 800f570:	4770      	bx	lr
 800f572:	bf00      	nop
 800f574:	200000a0 	.word	0x200000a0

0800f578 <__libc_init_array>:
 800f578:	b570      	push	{r4, r5, r6, lr}
 800f57a:	4d0d      	ldr	r5, [pc, #52]	; (800f5b0 <__libc_init_array+0x38>)
 800f57c:	4c0d      	ldr	r4, [pc, #52]	; (800f5b4 <__libc_init_array+0x3c>)
 800f57e:	1b64      	subs	r4, r4, r5
 800f580:	10a4      	asrs	r4, r4, #2
 800f582:	2600      	movs	r6, #0
 800f584:	42a6      	cmp	r6, r4
 800f586:	d109      	bne.n	800f59c <__libc_init_array+0x24>
 800f588:	4d0b      	ldr	r5, [pc, #44]	; (800f5b8 <__libc_init_array+0x40>)
 800f58a:	4c0c      	ldr	r4, [pc, #48]	; (800f5bc <__libc_init_array+0x44>)
 800f58c:	f001 fffe 	bl	801158c <_init>
 800f590:	1b64      	subs	r4, r4, r5
 800f592:	10a4      	asrs	r4, r4, #2
 800f594:	2600      	movs	r6, #0
 800f596:	42a6      	cmp	r6, r4
 800f598:	d105      	bne.n	800f5a6 <__libc_init_array+0x2e>
 800f59a:	bd70      	pop	{r4, r5, r6, pc}
 800f59c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f5a0:	4798      	blx	r3
 800f5a2:	3601      	adds	r6, #1
 800f5a4:	e7ee      	b.n	800f584 <__libc_init_array+0xc>
 800f5a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f5aa:	4798      	blx	r3
 800f5ac:	3601      	adds	r6, #1
 800f5ae:	e7f2      	b.n	800f596 <__libc_init_array+0x1e>
 800f5b0:	08012314 	.word	0x08012314
 800f5b4:	08012314 	.word	0x08012314
 800f5b8:	08012314 	.word	0x08012314
 800f5bc:	08012318 	.word	0x08012318

0800f5c0 <__retarget_lock_acquire_recursive>:
 800f5c0:	4770      	bx	lr

0800f5c2 <__retarget_lock_release_recursive>:
 800f5c2:	4770      	bx	lr

0800f5c4 <memcpy>:
 800f5c4:	440a      	add	r2, r1
 800f5c6:	4291      	cmp	r1, r2
 800f5c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800f5cc:	d100      	bne.n	800f5d0 <memcpy+0xc>
 800f5ce:	4770      	bx	lr
 800f5d0:	b510      	push	{r4, lr}
 800f5d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f5d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f5da:	4291      	cmp	r1, r2
 800f5dc:	d1f9      	bne.n	800f5d2 <memcpy+0xe>
 800f5de:	bd10      	pop	{r4, pc}

0800f5e0 <quorem>:
 800f5e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5e4:	6903      	ldr	r3, [r0, #16]
 800f5e6:	690c      	ldr	r4, [r1, #16]
 800f5e8:	42a3      	cmp	r3, r4
 800f5ea:	4607      	mov	r7, r0
 800f5ec:	db7e      	blt.n	800f6ec <quorem+0x10c>
 800f5ee:	3c01      	subs	r4, #1
 800f5f0:	f101 0814 	add.w	r8, r1, #20
 800f5f4:	f100 0514 	add.w	r5, r0, #20
 800f5f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f5fc:	9301      	str	r3, [sp, #4]
 800f5fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f602:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f606:	3301      	adds	r3, #1
 800f608:	429a      	cmp	r2, r3
 800f60a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f60e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f612:	fbb2 f6f3 	udiv	r6, r2, r3
 800f616:	d331      	bcc.n	800f67c <quorem+0x9c>
 800f618:	f04f 0e00 	mov.w	lr, #0
 800f61c:	4640      	mov	r0, r8
 800f61e:	46ac      	mov	ip, r5
 800f620:	46f2      	mov	sl, lr
 800f622:	f850 2b04 	ldr.w	r2, [r0], #4
 800f626:	b293      	uxth	r3, r2
 800f628:	fb06 e303 	mla	r3, r6, r3, lr
 800f62c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f630:	0c1a      	lsrs	r2, r3, #16
 800f632:	b29b      	uxth	r3, r3
 800f634:	ebaa 0303 	sub.w	r3, sl, r3
 800f638:	f8dc a000 	ldr.w	sl, [ip]
 800f63c:	fa13 f38a 	uxtah	r3, r3, sl
 800f640:	fb06 220e 	mla	r2, r6, lr, r2
 800f644:	9300      	str	r3, [sp, #0]
 800f646:	9b00      	ldr	r3, [sp, #0]
 800f648:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f64c:	b292      	uxth	r2, r2
 800f64e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f652:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f656:	f8bd 3000 	ldrh.w	r3, [sp]
 800f65a:	4581      	cmp	r9, r0
 800f65c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f660:	f84c 3b04 	str.w	r3, [ip], #4
 800f664:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f668:	d2db      	bcs.n	800f622 <quorem+0x42>
 800f66a:	f855 300b 	ldr.w	r3, [r5, fp]
 800f66e:	b92b      	cbnz	r3, 800f67c <quorem+0x9c>
 800f670:	9b01      	ldr	r3, [sp, #4]
 800f672:	3b04      	subs	r3, #4
 800f674:	429d      	cmp	r5, r3
 800f676:	461a      	mov	r2, r3
 800f678:	d32c      	bcc.n	800f6d4 <quorem+0xf4>
 800f67a:	613c      	str	r4, [r7, #16]
 800f67c:	4638      	mov	r0, r7
 800f67e:	f001 f9a5 	bl	80109cc <__mcmp>
 800f682:	2800      	cmp	r0, #0
 800f684:	db22      	blt.n	800f6cc <quorem+0xec>
 800f686:	3601      	adds	r6, #1
 800f688:	4629      	mov	r1, r5
 800f68a:	2000      	movs	r0, #0
 800f68c:	f858 2b04 	ldr.w	r2, [r8], #4
 800f690:	f8d1 c000 	ldr.w	ip, [r1]
 800f694:	b293      	uxth	r3, r2
 800f696:	1ac3      	subs	r3, r0, r3
 800f698:	0c12      	lsrs	r2, r2, #16
 800f69a:	fa13 f38c 	uxtah	r3, r3, ip
 800f69e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800f6a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f6a6:	b29b      	uxth	r3, r3
 800f6a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f6ac:	45c1      	cmp	r9, r8
 800f6ae:	f841 3b04 	str.w	r3, [r1], #4
 800f6b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f6b6:	d2e9      	bcs.n	800f68c <quorem+0xac>
 800f6b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f6bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f6c0:	b922      	cbnz	r2, 800f6cc <quorem+0xec>
 800f6c2:	3b04      	subs	r3, #4
 800f6c4:	429d      	cmp	r5, r3
 800f6c6:	461a      	mov	r2, r3
 800f6c8:	d30a      	bcc.n	800f6e0 <quorem+0x100>
 800f6ca:	613c      	str	r4, [r7, #16]
 800f6cc:	4630      	mov	r0, r6
 800f6ce:	b003      	add	sp, #12
 800f6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6d4:	6812      	ldr	r2, [r2, #0]
 800f6d6:	3b04      	subs	r3, #4
 800f6d8:	2a00      	cmp	r2, #0
 800f6da:	d1ce      	bne.n	800f67a <quorem+0x9a>
 800f6dc:	3c01      	subs	r4, #1
 800f6de:	e7c9      	b.n	800f674 <quorem+0x94>
 800f6e0:	6812      	ldr	r2, [r2, #0]
 800f6e2:	3b04      	subs	r3, #4
 800f6e4:	2a00      	cmp	r2, #0
 800f6e6:	d1f0      	bne.n	800f6ca <quorem+0xea>
 800f6e8:	3c01      	subs	r4, #1
 800f6ea:	e7eb      	b.n	800f6c4 <quorem+0xe4>
 800f6ec:	2000      	movs	r0, #0
 800f6ee:	e7ee      	b.n	800f6ce <quorem+0xee>

0800f6f0 <_dtoa_r>:
 800f6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6f4:	ed2d 8b04 	vpush	{d8-d9}
 800f6f8:	69c5      	ldr	r5, [r0, #28]
 800f6fa:	b093      	sub	sp, #76	; 0x4c
 800f6fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f700:	ec57 6b10 	vmov	r6, r7, d0
 800f704:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f708:	9107      	str	r1, [sp, #28]
 800f70a:	4604      	mov	r4, r0
 800f70c:	920a      	str	r2, [sp, #40]	; 0x28
 800f70e:	930d      	str	r3, [sp, #52]	; 0x34
 800f710:	b975      	cbnz	r5, 800f730 <_dtoa_r+0x40>
 800f712:	2010      	movs	r0, #16
 800f714:	f000 fe2a 	bl	801036c <malloc>
 800f718:	4602      	mov	r2, r0
 800f71a:	61e0      	str	r0, [r4, #28]
 800f71c:	b920      	cbnz	r0, 800f728 <_dtoa_r+0x38>
 800f71e:	4bae      	ldr	r3, [pc, #696]	; (800f9d8 <_dtoa_r+0x2e8>)
 800f720:	21ef      	movs	r1, #239	; 0xef
 800f722:	48ae      	ldr	r0, [pc, #696]	; (800f9dc <_dtoa_r+0x2ec>)
 800f724:	f001 fe4a 	bl	80113bc <__assert_func>
 800f728:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f72c:	6005      	str	r5, [r0, #0]
 800f72e:	60c5      	str	r5, [r0, #12]
 800f730:	69e3      	ldr	r3, [r4, #28]
 800f732:	6819      	ldr	r1, [r3, #0]
 800f734:	b151      	cbz	r1, 800f74c <_dtoa_r+0x5c>
 800f736:	685a      	ldr	r2, [r3, #4]
 800f738:	604a      	str	r2, [r1, #4]
 800f73a:	2301      	movs	r3, #1
 800f73c:	4093      	lsls	r3, r2
 800f73e:	608b      	str	r3, [r1, #8]
 800f740:	4620      	mov	r0, r4
 800f742:	f000 ff07 	bl	8010554 <_Bfree>
 800f746:	69e3      	ldr	r3, [r4, #28]
 800f748:	2200      	movs	r2, #0
 800f74a:	601a      	str	r2, [r3, #0]
 800f74c:	1e3b      	subs	r3, r7, #0
 800f74e:	bfbb      	ittet	lt
 800f750:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f754:	9303      	strlt	r3, [sp, #12]
 800f756:	2300      	movge	r3, #0
 800f758:	2201      	movlt	r2, #1
 800f75a:	bfac      	ite	ge
 800f75c:	f8c8 3000 	strge.w	r3, [r8]
 800f760:	f8c8 2000 	strlt.w	r2, [r8]
 800f764:	4b9e      	ldr	r3, [pc, #632]	; (800f9e0 <_dtoa_r+0x2f0>)
 800f766:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f76a:	ea33 0308 	bics.w	r3, r3, r8
 800f76e:	d11b      	bne.n	800f7a8 <_dtoa_r+0xb8>
 800f770:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f772:	f242 730f 	movw	r3, #9999	; 0x270f
 800f776:	6013      	str	r3, [r2, #0]
 800f778:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800f77c:	4333      	orrs	r3, r6
 800f77e:	f000 8593 	beq.w	80102a8 <_dtoa_r+0xbb8>
 800f782:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f784:	b963      	cbnz	r3, 800f7a0 <_dtoa_r+0xb0>
 800f786:	4b97      	ldr	r3, [pc, #604]	; (800f9e4 <_dtoa_r+0x2f4>)
 800f788:	e027      	b.n	800f7da <_dtoa_r+0xea>
 800f78a:	4b97      	ldr	r3, [pc, #604]	; (800f9e8 <_dtoa_r+0x2f8>)
 800f78c:	9300      	str	r3, [sp, #0]
 800f78e:	3308      	adds	r3, #8
 800f790:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f792:	6013      	str	r3, [r2, #0]
 800f794:	9800      	ldr	r0, [sp, #0]
 800f796:	b013      	add	sp, #76	; 0x4c
 800f798:	ecbd 8b04 	vpop	{d8-d9}
 800f79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7a0:	4b90      	ldr	r3, [pc, #576]	; (800f9e4 <_dtoa_r+0x2f4>)
 800f7a2:	9300      	str	r3, [sp, #0]
 800f7a4:	3303      	adds	r3, #3
 800f7a6:	e7f3      	b.n	800f790 <_dtoa_r+0xa0>
 800f7a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	ec51 0b17 	vmov	r0, r1, d7
 800f7b2:	eeb0 8a47 	vmov.f32	s16, s14
 800f7b6:	eef0 8a67 	vmov.f32	s17, s15
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	f7f1 f9b4 	bl	8000b28 <__aeabi_dcmpeq>
 800f7c0:	4681      	mov	r9, r0
 800f7c2:	b160      	cbz	r0, 800f7de <_dtoa_r+0xee>
 800f7c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f7c6:	2301      	movs	r3, #1
 800f7c8:	6013      	str	r3, [r2, #0]
 800f7ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	f000 8568 	beq.w	80102a2 <_dtoa_r+0xbb2>
 800f7d2:	4b86      	ldr	r3, [pc, #536]	; (800f9ec <_dtoa_r+0x2fc>)
 800f7d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f7d6:	6013      	str	r3, [r2, #0]
 800f7d8:	3b01      	subs	r3, #1
 800f7da:	9300      	str	r3, [sp, #0]
 800f7dc:	e7da      	b.n	800f794 <_dtoa_r+0xa4>
 800f7de:	aa10      	add	r2, sp, #64	; 0x40
 800f7e0:	a911      	add	r1, sp, #68	; 0x44
 800f7e2:	4620      	mov	r0, r4
 800f7e4:	eeb0 0a48 	vmov.f32	s0, s16
 800f7e8:	eef0 0a68 	vmov.f32	s1, s17
 800f7ec:	f001 f994 	bl	8010b18 <__d2b>
 800f7f0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f7f4:	4682      	mov	sl, r0
 800f7f6:	2d00      	cmp	r5, #0
 800f7f8:	d07f      	beq.n	800f8fa <_dtoa_r+0x20a>
 800f7fa:	ee18 3a90 	vmov	r3, s17
 800f7fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f802:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f806:	ec51 0b18 	vmov	r0, r1, d8
 800f80a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f80e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f812:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800f816:	4619      	mov	r1, r3
 800f818:	2200      	movs	r2, #0
 800f81a:	4b75      	ldr	r3, [pc, #468]	; (800f9f0 <_dtoa_r+0x300>)
 800f81c:	f7f0 fd64 	bl	80002e8 <__aeabi_dsub>
 800f820:	a367      	add	r3, pc, #412	; (adr r3, 800f9c0 <_dtoa_r+0x2d0>)
 800f822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f826:	f7f0 ff17 	bl	8000658 <__aeabi_dmul>
 800f82a:	a367      	add	r3, pc, #412	; (adr r3, 800f9c8 <_dtoa_r+0x2d8>)
 800f82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f830:	f7f0 fd5c 	bl	80002ec <__adddf3>
 800f834:	4606      	mov	r6, r0
 800f836:	4628      	mov	r0, r5
 800f838:	460f      	mov	r7, r1
 800f83a:	f7f0 fea3 	bl	8000584 <__aeabi_i2d>
 800f83e:	a364      	add	r3, pc, #400	; (adr r3, 800f9d0 <_dtoa_r+0x2e0>)
 800f840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f844:	f7f0 ff08 	bl	8000658 <__aeabi_dmul>
 800f848:	4602      	mov	r2, r0
 800f84a:	460b      	mov	r3, r1
 800f84c:	4630      	mov	r0, r6
 800f84e:	4639      	mov	r1, r7
 800f850:	f7f0 fd4c 	bl	80002ec <__adddf3>
 800f854:	4606      	mov	r6, r0
 800f856:	460f      	mov	r7, r1
 800f858:	f7f1 f9ae 	bl	8000bb8 <__aeabi_d2iz>
 800f85c:	2200      	movs	r2, #0
 800f85e:	4683      	mov	fp, r0
 800f860:	2300      	movs	r3, #0
 800f862:	4630      	mov	r0, r6
 800f864:	4639      	mov	r1, r7
 800f866:	f7f1 f969 	bl	8000b3c <__aeabi_dcmplt>
 800f86a:	b148      	cbz	r0, 800f880 <_dtoa_r+0x190>
 800f86c:	4658      	mov	r0, fp
 800f86e:	f7f0 fe89 	bl	8000584 <__aeabi_i2d>
 800f872:	4632      	mov	r2, r6
 800f874:	463b      	mov	r3, r7
 800f876:	f7f1 f957 	bl	8000b28 <__aeabi_dcmpeq>
 800f87a:	b908      	cbnz	r0, 800f880 <_dtoa_r+0x190>
 800f87c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f880:	f1bb 0f16 	cmp.w	fp, #22
 800f884:	d857      	bhi.n	800f936 <_dtoa_r+0x246>
 800f886:	4b5b      	ldr	r3, [pc, #364]	; (800f9f4 <_dtoa_r+0x304>)
 800f888:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f890:	ec51 0b18 	vmov	r0, r1, d8
 800f894:	f7f1 f952 	bl	8000b3c <__aeabi_dcmplt>
 800f898:	2800      	cmp	r0, #0
 800f89a:	d04e      	beq.n	800f93a <_dtoa_r+0x24a>
 800f89c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	930c      	str	r3, [sp, #48]	; 0x30
 800f8a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f8a6:	1b5b      	subs	r3, r3, r5
 800f8a8:	1e5a      	subs	r2, r3, #1
 800f8aa:	bf45      	ittet	mi
 800f8ac:	f1c3 0301 	rsbmi	r3, r3, #1
 800f8b0:	9305      	strmi	r3, [sp, #20]
 800f8b2:	2300      	movpl	r3, #0
 800f8b4:	2300      	movmi	r3, #0
 800f8b6:	9206      	str	r2, [sp, #24]
 800f8b8:	bf54      	ite	pl
 800f8ba:	9305      	strpl	r3, [sp, #20]
 800f8bc:	9306      	strmi	r3, [sp, #24]
 800f8be:	f1bb 0f00 	cmp.w	fp, #0
 800f8c2:	db3c      	blt.n	800f93e <_dtoa_r+0x24e>
 800f8c4:	9b06      	ldr	r3, [sp, #24]
 800f8c6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800f8ca:	445b      	add	r3, fp
 800f8cc:	9306      	str	r3, [sp, #24]
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	9308      	str	r3, [sp, #32]
 800f8d2:	9b07      	ldr	r3, [sp, #28]
 800f8d4:	2b09      	cmp	r3, #9
 800f8d6:	d868      	bhi.n	800f9aa <_dtoa_r+0x2ba>
 800f8d8:	2b05      	cmp	r3, #5
 800f8da:	bfc4      	itt	gt
 800f8dc:	3b04      	subgt	r3, #4
 800f8de:	9307      	strgt	r3, [sp, #28]
 800f8e0:	9b07      	ldr	r3, [sp, #28]
 800f8e2:	f1a3 0302 	sub.w	r3, r3, #2
 800f8e6:	bfcc      	ite	gt
 800f8e8:	2500      	movgt	r5, #0
 800f8ea:	2501      	movle	r5, #1
 800f8ec:	2b03      	cmp	r3, #3
 800f8ee:	f200 8085 	bhi.w	800f9fc <_dtoa_r+0x30c>
 800f8f2:	e8df f003 	tbb	[pc, r3]
 800f8f6:	3b2e      	.short	0x3b2e
 800f8f8:	5839      	.short	0x5839
 800f8fa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f8fe:	441d      	add	r5, r3
 800f900:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f904:	2b20      	cmp	r3, #32
 800f906:	bfc1      	itttt	gt
 800f908:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f90c:	fa08 f803 	lslgt.w	r8, r8, r3
 800f910:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800f914:	fa26 f303 	lsrgt.w	r3, r6, r3
 800f918:	bfd6      	itet	le
 800f91a:	f1c3 0320 	rsble	r3, r3, #32
 800f91e:	ea48 0003 	orrgt.w	r0, r8, r3
 800f922:	fa06 f003 	lslle.w	r0, r6, r3
 800f926:	f7f0 fe1d 	bl	8000564 <__aeabi_ui2d>
 800f92a:	2201      	movs	r2, #1
 800f92c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800f930:	3d01      	subs	r5, #1
 800f932:	920e      	str	r2, [sp, #56]	; 0x38
 800f934:	e76f      	b.n	800f816 <_dtoa_r+0x126>
 800f936:	2301      	movs	r3, #1
 800f938:	e7b3      	b.n	800f8a2 <_dtoa_r+0x1b2>
 800f93a:	900c      	str	r0, [sp, #48]	; 0x30
 800f93c:	e7b2      	b.n	800f8a4 <_dtoa_r+0x1b4>
 800f93e:	9b05      	ldr	r3, [sp, #20]
 800f940:	eba3 030b 	sub.w	r3, r3, fp
 800f944:	9305      	str	r3, [sp, #20]
 800f946:	f1cb 0300 	rsb	r3, fp, #0
 800f94a:	9308      	str	r3, [sp, #32]
 800f94c:	2300      	movs	r3, #0
 800f94e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f950:	e7bf      	b.n	800f8d2 <_dtoa_r+0x1e2>
 800f952:	2300      	movs	r3, #0
 800f954:	9309      	str	r3, [sp, #36]	; 0x24
 800f956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f958:	2b00      	cmp	r3, #0
 800f95a:	dc52      	bgt.n	800fa02 <_dtoa_r+0x312>
 800f95c:	2301      	movs	r3, #1
 800f95e:	9301      	str	r3, [sp, #4]
 800f960:	9304      	str	r3, [sp, #16]
 800f962:	461a      	mov	r2, r3
 800f964:	920a      	str	r2, [sp, #40]	; 0x28
 800f966:	e00b      	b.n	800f980 <_dtoa_r+0x290>
 800f968:	2301      	movs	r3, #1
 800f96a:	e7f3      	b.n	800f954 <_dtoa_r+0x264>
 800f96c:	2300      	movs	r3, #0
 800f96e:	9309      	str	r3, [sp, #36]	; 0x24
 800f970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f972:	445b      	add	r3, fp
 800f974:	9301      	str	r3, [sp, #4]
 800f976:	3301      	adds	r3, #1
 800f978:	2b01      	cmp	r3, #1
 800f97a:	9304      	str	r3, [sp, #16]
 800f97c:	bfb8      	it	lt
 800f97e:	2301      	movlt	r3, #1
 800f980:	69e0      	ldr	r0, [r4, #28]
 800f982:	2100      	movs	r1, #0
 800f984:	2204      	movs	r2, #4
 800f986:	f102 0614 	add.w	r6, r2, #20
 800f98a:	429e      	cmp	r6, r3
 800f98c:	d93d      	bls.n	800fa0a <_dtoa_r+0x31a>
 800f98e:	6041      	str	r1, [r0, #4]
 800f990:	4620      	mov	r0, r4
 800f992:	f000 fd9f 	bl	80104d4 <_Balloc>
 800f996:	9000      	str	r0, [sp, #0]
 800f998:	2800      	cmp	r0, #0
 800f99a:	d139      	bne.n	800fa10 <_dtoa_r+0x320>
 800f99c:	4b16      	ldr	r3, [pc, #88]	; (800f9f8 <_dtoa_r+0x308>)
 800f99e:	4602      	mov	r2, r0
 800f9a0:	f240 11af 	movw	r1, #431	; 0x1af
 800f9a4:	e6bd      	b.n	800f722 <_dtoa_r+0x32>
 800f9a6:	2301      	movs	r3, #1
 800f9a8:	e7e1      	b.n	800f96e <_dtoa_r+0x27e>
 800f9aa:	2501      	movs	r5, #1
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	9307      	str	r3, [sp, #28]
 800f9b0:	9509      	str	r5, [sp, #36]	; 0x24
 800f9b2:	f04f 33ff 	mov.w	r3, #4294967295
 800f9b6:	9301      	str	r3, [sp, #4]
 800f9b8:	9304      	str	r3, [sp, #16]
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	2312      	movs	r3, #18
 800f9be:	e7d1      	b.n	800f964 <_dtoa_r+0x274>
 800f9c0:	636f4361 	.word	0x636f4361
 800f9c4:	3fd287a7 	.word	0x3fd287a7
 800f9c8:	8b60c8b3 	.word	0x8b60c8b3
 800f9cc:	3fc68a28 	.word	0x3fc68a28
 800f9d0:	509f79fb 	.word	0x509f79fb
 800f9d4:	3fd34413 	.word	0x3fd34413
 800f9d8:	08011fd9 	.word	0x08011fd9
 800f9dc:	08011ff0 	.word	0x08011ff0
 800f9e0:	7ff00000 	.word	0x7ff00000
 800f9e4:	08011fd5 	.word	0x08011fd5
 800f9e8:	08011fcc 	.word	0x08011fcc
 800f9ec:	08011fa9 	.word	0x08011fa9
 800f9f0:	3ff80000 	.word	0x3ff80000
 800f9f4:	080120e0 	.word	0x080120e0
 800f9f8:	08012048 	.word	0x08012048
 800f9fc:	2301      	movs	r3, #1
 800f9fe:	9309      	str	r3, [sp, #36]	; 0x24
 800fa00:	e7d7      	b.n	800f9b2 <_dtoa_r+0x2c2>
 800fa02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa04:	9301      	str	r3, [sp, #4]
 800fa06:	9304      	str	r3, [sp, #16]
 800fa08:	e7ba      	b.n	800f980 <_dtoa_r+0x290>
 800fa0a:	3101      	adds	r1, #1
 800fa0c:	0052      	lsls	r2, r2, #1
 800fa0e:	e7ba      	b.n	800f986 <_dtoa_r+0x296>
 800fa10:	69e3      	ldr	r3, [r4, #28]
 800fa12:	9a00      	ldr	r2, [sp, #0]
 800fa14:	601a      	str	r2, [r3, #0]
 800fa16:	9b04      	ldr	r3, [sp, #16]
 800fa18:	2b0e      	cmp	r3, #14
 800fa1a:	f200 80a8 	bhi.w	800fb6e <_dtoa_r+0x47e>
 800fa1e:	2d00      	cmp	r5, #0
 800fa20:	f000 80a5 	beq.w	800fb6e <_dtoa_r+0x47e>
 800fa24:	f1bb 0f00 	cmp.w	fp, #0
 800fa28:	dd38      	ble.n	800fa9c <_dtoa_r+0x3ac>
 800fa2a:	4bc0      	ldr	r3, [pc, #768]	; (800fd2c <_dtoa_r+0x63c>)
 800fa2c:	f00b 020f 	and.w	r2, fp, #15
 800fa30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fa34:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800fa38:	e9d3 6700 	ldrd	r6, r7, [r3]
 800fa3c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800fa40:	d019      	beq.n	800fa76 <_dtoa_r+0x386>
 800fa42:	4bbb      	ldr	r3, [pc, #748]	; (800fd30 <_dtoa_r+0x640>)
 800fa44:	ec51 0b18 	vmov	r0, r1, d8
 800fa48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fa4c:	f7f0 ff2e 	bl	80008ac <__aeabi_ddiv>
 800fa50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fa54:	f008 080f 	and.w	r8, r8, #15
 800fa58:	2503      	movs	r5, #3
 800fa5a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800fd30 <_dtoa_r+0x640>
 800fa5e:	f1b8 0f00 	cmp.w	r8, #0
 800fa62:	d10a      	bne.n	800fa7a <_dtoa_r+0x38a>
 800fa64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa68:	4632      	mov	r2, r6
 800fa6a:	463b      	mov	r3, r7
 800fa6c:	f7f0 ff1e 	bl	80008ac <__aeabi_ddiv>
 800fa70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fa74:	e02b      	b.n	800face <_dtoa_r+0x3de>
 800fa76:	2502      	movs	r5, #2
 800fa78:	e7ef      	b.n	800fa5a <_dtoa_r+0x36a>
 800fa7a:	f018 0f01 	tst.w	r8, #1
 800fa7e:	d008      	beq.n	800fa92 <_dtoa_r+0x3a2>
 800fa80:	4630      	mov	r0, r6
 800fa82:	4639      	mov	r1, r7
 800fa84:	e9d9 2300 	ldrd	r2, r3, [r9]
 800fa88:	f7f0 fde6 	bl	8000658 <__aeabi_dmul>
 800fa8c:	3501      	adds	r5, #1
 800fa8e:	4606      	mov	r6, r0
 800fa90:	460f      	mov	r7, r1
 800fa92:	ea4f 0868 	mov.w	r8, r8, asr #1
 800fa96:	f109 0908 	add.w	r9, r9, #8
 800fa9a:	e7e0      	b.n	800fa5e <_dtoa_r+0x36e>
 800fa9c:	f000 809f 	beq.w	800fbde <_dtoa_r+0x4ee>
 800faa0:	f1cb 0600 	rsb	r6, fp, #0
 800faa4:	4ba1      	ldr	r3, [pc, #644]	; (800fd2c <_dtoa_r+0x63c>)
 800faa6:	4fa2      	ldr	r7, [pc, #648]	; (800fd30 <_dtoa_r+0x640>)
 800faa8:	f006 020f 	and.w	r2, r6, #15
 800faac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fab4:	ec51 0b18 	vmov	r0, r1, d8
 800fab8:	f7f0 fdce 	bl	8000658 <__aeabi_dmul>
 800fabc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fac0:	1136      	asrs	r6, r6, #4
 800fac2:	2300      	movs	r3, #0
 800fac4:	2502      	movs	r5, #2
 800fac6:	2e00      	cmp	r6, #0
 800fac8:	d17e      	bne.n	800fbc8 <_dtoa_r+0x4d8>
 800faca:	2b00      	cmp	r3, #0
 800facc:	d1d0      	bne.n	800fa70 <_dtoa_r+0x380>
 800face:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fad0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	f000 8084 	beq.w	800fbe2 <_dtoa_r+0x4f2>
 800fada:	4b96      	ldr	r3, [pc, #600]	; (800fd34 <_dtoa_r+0x644>)
 800fadc:	2200      	movs	r2, #0
 800fade:	4640      	mov	r0, r8
 800fae0:	4649      	mov	r1, r9
 800fae2:	f7f1 f82b 	bl	8000b3c <__aeabi_dcmplt>
 800fae6:	2800      	cmp	r0, #0
 800fae8:	d07b      	beq.n	800fbe2 <_dtoa_r+0x4f2>
 800faea:	9b04      	ldr	r3, [sp, #16]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d078      	beq.n	800fbe2 <_dtoa_r+0x4f2>
 800faf0:	9b01      	ldr	r3, [sp, #4]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	dd39      	ble.n	800fb6a <_dtoa_r+0x47a>
 800faf6:	4b90      	ldr	r3, [pc, #576]	; (800fd38 <_dtoa_r+0x648>)
 800faf8:	2200      	movs	r2, #0
 800fafa:	4640      	mov	r0, r8
 800fafc:	4649      	mov	r1, r9
 800fafe:	f7f0 fdab 	bl	8000658 <__aeabi_dmul>
 800fb02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb06:	9e01      	ldr	r6, [sp, #4]
 800fb08:	f10b 37ff 	add.w	r7, fp, #4294967295
 800fb0c:	3501      	adds	r5, #1
 800fb0e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fb12:	4628      	mov	r0, r5
 800fb14:	f7f0 fd36 	bl	8000584 <__aeabi_i2d>
 800fb18:	4642      	mov	r2, r8
 800fb1a:	464b      	mov	r3, r9
 800fb1c:	f7f0 fd9c 	bl	8000658 <__aeabi_dmul>
 800fb20:	4b86      	ldr	r3, [pc, #536]	; (800fd3c <_dtoa_r+0x64c>)
 800fb22:	2200      	movs	r2, #0
 800fb24:	f7f0 fbe2 	bl	80002ec <__adddf3>
 800fb28:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800fb2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb30:	9303      	str	r3, [sp, #12]
 800fb32:	2e00      	cmp	r6, #0
 800fb34:	d158      	bne.n	800fbe8 <_dtoa_r+0x4f8>
 800fb36:	4b82      	ldr	r3, [pc, #520]	; (800fd40 <_dtoa_r+0x650>)
 800fb38:	2200      	movs	r2, #0
 800fb3a:	4640      	mov	r0, r8
 800fb3c:	4649      	mov	r1, r9
 800fb3e:	f7f0 fbd3 	bl	80002e8 <__aeabi_dsub>
 800fb42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fb46:	4680      	mov	r8, r0
 800fb48:	4689      	mov	r9, r1
 800fb4a:	f7f1 f815 	bl	8000b78 <__aeabi_dcmpgt>
 800fb4e:	2800      	cmp	r0, #0
 800fb50:	f040 8296 	bne.w	8010080 <_dtoa_r+0x990>
 800fb54:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800fb58:	4640      	mov	r0, r8
 800fb5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fb5e:	4649      	mov	r1, r9
 800fb60:	f7f0 ffec 	bl	8000b3c <__aeabi_dcmplt>
 800fb64:	2800      	cmp	r0, #0
 800fb66:	f040 8289 	bne.w	801007c <_dtoa_r+0x98c>
 800fb6a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800fb6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	f2c0 814e 	blt.w	800fe12 <_dtoa_r+0x722>
 800fb76:	f1bb 0f0e 	cmp.w	fp, #14
 800fb7a:	f300 814a 	bgt.w	800fe12 <_dtoa_r+0x722>
 800fb7e:	4b6b      	ldr	r3, [pc, #428]	; (800fd2c <_dtoa_r+0x63c>)
 800fb80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fb84:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fb88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	f280 80dc 	bge.w	800fd48 <_dtoa_r+0x658>
 800fb90:	9b04      	ldr	r3, [sp, #16]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	f300 80d8 	bgt.w	800fd48 <_dtoa_r+0x658>
 800fb98:	f040 826f 	bne.w	801007a <_dtoa_r+0x98a>
 800fb9c:	4b68      	ldr	r3, [pc, #416]	; (800fd40 <_dtoa_r+0x650>)
 800fb9e:	2200      	movs	r2, #0
 800fba0:	4640      	mov	r0, r8
 800fba2:	4649      	mov	r1, r9
 800fba4:	f7f0 fd58 	bl	8000658 <__aeabi_dmul>
 800fba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fbac:	f7f0 ffda 	bl	8000b64 <__aeabi_dcmpge>
 800fbb0:	9e04      	ldr	r6, [sp, #16]
 800fbb2:	4637      	mov	r7, r6
 800fbb4:	2800      	cmp	r0, #0
 800fbb6:	f040 8245 	bne.w	8010044 <_dtoa_r+0x954>
 800fbba:	9d00      	ldr	r5, [sp, #0]
 800fbbc:	2331      	movs	r3, #49	; 0x31
 800fbbe:	f805 3b01 	strb.w	r3, [r5], #1
 800fbc2:	f10b 0b01 	add.w	fp, fp, #1
 800fbc6:	e241      	b.n	801004c <_dtoa_r+0x95c>
 800fbc8:	07f2      	lsls	r2, r6, #31
 800fbca:	d505      	bpl.n	800fbd8 <_dtoa_r+0x4e8>
 800fbcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fbd0:	f7f0 fd42 	bl	8000658 <__aeabi_dmul>
 800fbd4:	3501      	adds	r5, #1
 800fbd6:	2301      	movs	r3, #1
 800fbd8:	1076      	asrs	r6, r6, #1
 800fbda:	3708      	adds	r7, #8
 800fbdc:	e773      	b.n	800fac6 <_dtoa_r+0x3d6>
 800fbde:	2502      	movs	r5, #2
 800fbe0:	e775      	b.n	800face <_dtoa_r+0x3de>
 800fbe2:	9e04      	ldr	r6, [sp, #16]
 800fbe4:	465f      	mov	r7, fp
 800fbe6:	e792      	b.n	800fb0e <_dtoa_r+0x41e>
 800fbe8:	9900      	ldr	r1, [sp, #0]
 800fbea:	4b50      	ldr	r3, [pc, #320]	; (800fd2c <_dtoa_r+0x63c>)
 800fbec:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fbf0:	4431      	add	r1, r6
 800fbf2:	9102      	str	r1, [sp, #8]
 800fbf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fbf6:	eeb0 9a47 	vmov.f32	s18, s14
 800fbfa:	eef0 9a67 	vmov.f32	s19, s15
 800fbfe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800fc02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fc06:	2900      	cmp	r1, #0
 800fc08:	d044      	beq.n	800fc94 <_dtoa_r+0x5a4>
 800fc0a:	494e      	ldr	r1, [pc, #312]	; (800fd44 <_dtoa_r+0x654>)
 800fc0c:	2000      	movs	r0, #0
 800fc0e:	f7f0 fe4d 	bl	80008ac <__aeabi_ddiv>
 800fc12:	ec53 2b19 	vmov	r2, r3, d9
 800fc16:	f7f0 fb67 	bl	80002e8 <__aeabi_dsub>
 800fc1a:	9d00      	ldr	r5, [sp, #0]
 800fc1c:	ec41 0b19 	vmov	d9, r0, r1
 800fc20:	4649      	mov	r1, r9
 800fc22:	4640      	mov	r0, r8
 800fc24:	f7f0 ffc8 	bl	8000bb8 <__aeabi_d2iz>
 800fc28:	4606      	mov	r6, r0
 800fc2a:	f7f0 fcab 	bl	8000584 <__aeabi_i2d>
 800fc2e:	4602      	mov	r2, r0
 800fc30:	460b      	mov	r3, r1
 800fc32:	4640      	mov	r0, r8
 800fc34:	4649      	mov	r1, r9
 800fc36:	f7f0 fb57 	bl	80002e8 <__aeabi_dsub>
 800fc3a:	3630      	adds	r6, #48	; 0x30
 800fc3c:	f805 6b01 	strb.w	r6, [r5], #1
 800fc40:	ec53 2b19 	vmov	r2, r3, d9
 800fc44:	4680      	mov	r8, r0
 800fc46:	4689      	mov	r9, r1
 800fc48:	f7f0 ff78 	bl	8000b3c <__aeabi_dcmplt>
 800fc4c:	2800      	cmp	r0, #0
 800fc4e:	d164      	bne.n	800fd1a <_dtoa_r+0x62a>
 800fc50:	4642      	mov	r2, r8
 800fc52:	464b      	mov	r3, r9
 800fc54:	4937      	ldr	r1, [pc, #220]	; (800fd34 <_dtoa_r+0x644>)
 800fc56:	2000      	movs	r0, #0
 800fc58:	f7f0 fb46 	bl	80002e8 <__aeabi_dsub>
 800fc5c:	ec53 2b19 	vmov	r2, r3, d9
 800fc60:	f7f0 ff6c 	bl	8000b3c <__aeabi_dcmplt>
 800fc64:	2800      	cmp	r0, #0
 800fc66:	f040 80b6 	bne.w	800fdd6 <_dtoa_r+0x6e6>
 800fc6a:	9b02      	ldr	r3, [sp, #8]
 800fc6c:	429d      	cmp	r5, r3
 800fc6e:	f43f af7c 	beq.w	800fb6a <_dtoa_r+0x47a>
 800fc72:	4b31      	ldr	r3, [pc, #196]	; (800fd38 <_dtoa_r+0x648>)
 800fc74:	ec51 0b19 	vmov	r0, r1, d9
 800fc78:	2200      	movs	r2, #0
 800fc7a:	f7f0 fced 	bl	8000658 <__aeabi_dmul>
 800fc7e:	4b2e      	ldr	r3, [pc, #184]	; (800fd38 <_dtoa_r+0x648>)
 800fc80:	ec41 0b19 	vmov	d9, r0, r1
 800fc84:	2200      	movs	r2, #0
 800fc86:	4640      	mov	r0, r8
 800fc88:	4649      	mov	r1, r9
 800fc8a:	f7f0 fce5 	bl	8000658 <__aeabi_dmul>
 800fc8e:	4680      	mov	r8, r0
 800fc90:	4689      	mov	r9, r1
 800fc92:	e7c5      	b.n	800fc20 <_dtoa_r+0x530>
 800fc94:	ec51 0b17 	vmov	r0, r1, d7
 800fc98:	f7f0 fcde 	bl	8000658 <__aeabi_dmul>
 800fc9c:	9b02      	ldr	r3, [sp, #8]
 800fc9e:	9d00      	ldr	r5, [sp, #0]
 800fca0:	930f      	str	r3, [sp, #60]	; 0x3c
 800fca2:	ec41 0b19 	vmov	d9, r0, r1
 800fca6:	4649      	mov	r1, r9
 800fca8:	4640      	mov	r0, r8
 800fcaa:	f7f0 ff85 	bl	8000bb8 <__aeabi_d2iz>
 800fcae:	4606      	mov	r6, r0
 800fcb0:	f7f0 fc68 	bl	8000584 <__aeabi_i2d>
 800fcb4:	3630      	adds	r6, #48	; 0x30
 800fcb6:	4602      	mov	r2, r0
 800fcb8:	460b      	mov	r3, r1
 800fcba:	4640      	mov	r0, r8
 800fcbc:	4649      	mov	r1, r9
 800fcbe:	f7f0 fb13 	bl	80002e8 <__aeabi_dsub>
 800fcc2:	f805 6b01 	strb.w	r6, [r5], #1
 800fcc6:	9b02      	ldr	r3, [sp, #8]
 800fcc8:	429d      	cmp	r5, r3
 800fcca:	4680      	mov	r8, r0
 800fccc:	4689      	mov	r9, r1
 800fcce:	f04f 0200 	mov.w	r2, #0
 800fcd2:	d124      	bne.n	800fd1e <_dtoa_r+0x62e>
 800fcd4:	4b1b      	ldr	r3, [pc, #108]	; (800fd44 <_dtoa_r+0x654>)
 800fcd6:	ec51 0b19 	vmov	r0, r1, d9
 800fcda:	f7f0 fb07 	bl	80002ec <__adddf3>
 800fcde:	4602      	mov	r2, r0
 800fce0:	460b      	mov	r3, r1
 800fce2:	4640      	mov	r0, r8
 800fce4:	4649      	mov	r1, r9
 800fce6:	f7f0 ff47 	bl	8000b78 <__aeabi_dcmpgt>
 800fcea:	2800      	cmp	r0, #0
 800fcec:	d173      	bne.n	800fdd6 <_dtoa_r+0x6e6>
 800fcee:	ec53 2b19 	vmov	r2, r3, d9
 800fcf2:	4914      	ldr	r1, [pc, #80]	; (800fd44 <_dtoa_r+0x654>)
 800fcf4:	2000      	movs	r0, #0
 800fcf6:	f7f0 faf7 	bl	80002e8 <__aeabi_dsub>
 800fcfa:	4602      	mov	r2, r0
 800fcfc:	460b      	mov	r3, r1
 800fcfe:	4640      	mov	r0, r8
 800fd00:	4649      	mov	r1, r9
 800fd02:	f7f0 ff1b 	bl	8000b3c <__aeabi_dcmplt>
 800fd06:	2800      	cmp	r0, #0
 800fd08:	f43f af2f 	beq.w	800fb6a <_dtoa_r+0x47a>
 800fd0c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fd0e:	1e6b      	subs	r3, r5, #1
 800fd10:	930f      	str	r3, [sp, #60]	; 0x3c
 800fd12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fd16:	2b30      	cmp	r3, #48	; 0x30
 800fd18:	d0f8      	beq.n	800fd0c <_dtoa_r+0x61c>
 800fd1a:	46bb      	mov	fp, r7
 800fd1c:	e04a      	b.n	800fdb4 <_dtoa_r+0x6c4>
 800fd1e:	4b06      	ldr	r3, [pc, #24]	; (800fd38 <_dtoa_r+0x648>)
 800fd20:	f7f0 fc9a 	bl	8000658 <__aeabi_dmul>
 800fd24:	4680      	mov	r8, r0
 800fd26:	4689      	mov	r9, r1
 800fd28:	e7bd      	b.n	800fca6 <_dtoa_r+0x5b6>
 800fd2a:	bf00      	nop
 800fd2c:	080120e0 	.word	0x080120e0
 800fd30:	080120b8 	.word	0x080120b8
 800fd34:	3ff00000 	.word	0x3ff00000
 800fd38:	40240000 	.word	0x40240000
 800fd3c:	401c0000 	.word	0x401c0000
 800fd40:	40140000 	.word	0x40140000
 800fd44:	3fe00000 	.word	0x3fe00000
 800fd48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fd4c:	9d00      	ldr	r5, [sp, #0]
 800fd4e:	4642      	mov	r2, r8
 800fd50:	464b      	mov	r3, r9
 800fd52:	4630      	mov	r0, r6
 800fd54:	4639      	mov	r1, r7
 800fd56:	f7f0 fda9 	bl	80008ac <__aeabi_ddiv>
 800fd5a:	f7f0 ff2d 	bl	8000bb8 <__aeabi_d2iz>
 800fd5e:	9001      	str	r0, [sp, #4]
 800fd60:	f7f0 fc10 	bl	8000584 <__aeabi_i2d>
 800fd64:	4642      	mov	r2, r8
 800fd66:	464b      	mov	r3, r9
 800fd68:	f7f0 fc76 	bl	8000658 <__aeabi_dmul>
 800fd6c:	4602      	mov	r2, r0
 800fd6e:	460b      	mov	r3, r1
 800fd70:	4630      	mov	r0, r6
 800fd72:	4639      	mov	r1, r7
 800fd74:	f7f0 fab8 	bl	80002e8 <__aeabi_dsub>
 800fd78:	9e01      	ldr	r6, [sp, #4]
 800fd7a:	9f04      	ldr	r7, [sp, #16]
 800fd7c:	3630      	adds	r6, #48	; 0x30
 800fd7e:	f805 6b01 	strb.w	r6, [r5], #1
 800fd82:	9e00      	ldr	r6, [sp, #0]
 800fd84:	1bae      	subs	r6, r5, r6
 800fd86:	42b7      	cmp	r7, r6
 800fd88:	4602      	mov	r2, r0
 800fd8a:	460b      	mov	r3, r1
 800fd8c:	d134      	bne.n	800fdf8 <_dtoa_r+0x708>
 800fd8e:	f7f0 faad 	bl	80002ec <__adddf3>
 800fd92:	4642      	mov	r2, r8
 800fd94:	464b      	mov	r3, r9
 800fd96:	4606      	mov	r6, r0
 800fd98:	460f      	mov	r7, r1
 800fd9a:	f7f0 feed 	bl	8000b78 <__aeabi_dcmpgt>
 800fd9e:	b9c8      	cbnz	r0, 800fdd4 <_dtoa_r+0x6e4>
 800fda0:	4642      	mov	r2, r8
 800fda2:	464b      	mov	r3, r9
 800fda4:	4630      	mov	r0, r6
 800fda6:	4639      	mov	r1, r7
 800fda8:	f7f0 febe 	bl	8000b28 <__aeabi_dcmpeq>
 800fdac:	b110      	cbz	r0, 800fdb4 <_dtoa_r+0x6c4>
 800fdae:	9b01      	ldr	r3, [sp, #4]
 800fdb0:	07db      	lsls	r3, r3, #31
 800fdb2:	d40f      	bmi.n	800fdd4 <_dtoa_r+0x6e4>
 800fdb4:	4651      	mov	r1, sl
 800fdb6:	4620      	mov	r0, r4
 800fdb8:	f000 fbcc 	bl	8010554 <_Bfree>
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fdc0:	702b      	strb	r3, [r5, #0]
 800fdc2:	f10b 0301 	add.w	r3, fp, #1
 800fdc6:	6013      	str	r3, [r2, #0]
 800fdc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	f43f ace2 	beq.w	800f794 <_dtoa_r+0xa4>
 800fdd0:	601d      	str	r5, [r3, #0]
 800fdd2:	e4df      	b.n	800f794 <_dtoa_r+0xa4>
 800fdd4:	465f      	mov	r7, fp
 800fdd6:	462b      	mov	r3, r5
 800fdd8:	461d      	mov	r5, r3
 800fdda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fdde:	2a39      	cmp	r2, #57	; 0x39
 800fde0:	d106      	bne.n	800fdf0 <_dtoa_r+0x700>
 800fde2:	9a00      	ldr	r2, [sp, #0]
 800fde4:	429a      	cmp	r2, r3
 800fde6:	d1f7      	bne.n	800fdd8 <_dtoa_r+0x6e8>
 800fde8:	9900      	ldr	r1, [sp, #0]
 800fdea:	2230      	movs	r2, #48	; 0x30
 800fdec:	3701      	adds	r7, #1
 800fdee:	700a      	strb	r2, [r1, #0]
 800fdf0:	781a      	ldrb	r2, [r3, #0]
 800fdf2:	3201      	adds	r2, #1
 800fdf4:	701a      	strb	r2, [r3, #0]
 800fdf6:	e790      	b.n	800fd1a <_dtoa_r+0x62a>
 800fdf8:	4ba3      	ldr	r3, [pc, #652]	; (8010088 <_dtoa_r+0x998>)
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	f7f0 fc2c 	bl	8000658 <__aeabi_dmul>
 800fe00:	2200      	movs	r2, #0
 800fe02:	2300      	movs	r3, #0
 800fe04:	4606      	mov	r6, r0
 800fe06:	460f      	mov	r7, r1
 800fe08:	f7f0 fe8e 	bl	8000b28 <__aeabi_dcmpeq>
 800fe0c:	2800      	cmp	r0, #0
 800fe0e:	d09e      	beq.n	800fd4e <_dtoa_r+0x65e>
 800fe10:	e7d0      	b.n	800fdb4 <_dtoa_r+0x6c4>
 800fe12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe14:	2a00      	cmp	r2, #0
 800fe16:	f000 80ca 	beq.w	800ffae <_dtoa_r+0x8be>
 800fe1a:	9a07      	ldr	r2, [sp, #28]
 800fe1c:	2a01      	cmp	r2, #1
 800fe1e:	f300 80ad 	bgt.w	800ff7c <_dtoa_r+0x88c>
 800fe22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fe24:	2a00      	cmp	r2, #0
 800fe26:	f000 80a5 	beq.w	800ff74 <_dtoa_r+0x884>
 800fe2a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fe2e:	9e08      	ldr	r6, [sp, #32]
 800fe30:	9d05      	ldr	r5, [sp, #20]
 800fe32:	9a05      	ldr	r2, [sp, #20]
 800fe34:	441a      	add	r2, r3
 800fe36:	9205      	str	r2, [sp, #20]
 800fe38:	9a06      	ldr	r2, [sp, #24]
 800fe3a:	2101      	movs	r1, #1
 800fe3c:	441a      	add	r2, r3
 800fe3e:	4620      	mov	r0, r4
 800fe40:	9206      	str	r2, [sp, #24]
 800fe42:	f000 fc3d 	bl	80106c0 <__i2b>
 800fe46:	4607      	mov	r7, r0
 800fe48:	b165      	cbz	r5, 800fe64 <_dtoa_r+0x774>
 800fe4a:	9b06      	ldr	r3, [sp, #24]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	dd09      	ble.n	800fe64 <_dtoa_r+0x774>
 800fe50:	42ab      	cmp	r3, r5
 800fe52:	9a05      	ldr	r2, [sp, #20]
 800fe54:	bfa8      	it	ge
 800fe56:	462b      	movge	r3, r5
 800fe58:	1ad2      	subs	r2, r2, r3
 800fe5a:	9205      	str	r2, [sp, #20]
 800fe5c:	9a06      	ldr	r2, [sp, #24]
 800fe5e:	1aed      	subs	r5, r5, r3
 800fe60:	1ad3      	subs	r3, r2, r3
 800fe62:	9306      	str	r3, [sp, #24]
 800fe64:	9b08      	ldr	r3, [sp, #32]
 800fe66:	b1f3      	cbz	r3, 800fea6 <_dtoa_r+0x7b6>
 800fe68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	f000 80a3 	beq.w	800ffb6 <_dtoa_r+0x8c6>
 800fe70:	2e00      	cmp	r6, #0
 800fe72:	dd10      	ble.n	800fe96 <_dtoa_r+0x7a6>
 800fe74:	4639      	mov	r1, r7
 800fe76:	4632      	mov	r2, r6
 800fe78:	4620      	mov	r0, r4
 800fe7a:	f000 fce1 	bl	8010840 <__pow5mult>
 800fe7e:	4652      	mov	r2, sl
 800fe80:	4601      	mov	r1, r0
 800fe82:	4607      	mov	r7, r0
 800fe84:	4620      	mov	r0, r4
 800fe86:	f000 fc31 	bl	80106ec <__multiply>
 800fe8a:	4651      	mov	r1, sl
 800fe8c:	4680      	mov	r8, r0
 800fe8e:	4620      	mov	r0, r4
 800fe90:	f000 fb60 	bl	8010554 <_Bfree>
 800fe94:	46c2      	mov	sl, r8
 800fe96:	9b08      	ldr	r3, [sp, #32]
 800fe98:	1b9a      	subs	r2, r3, r6
 800fe9a:	d004      	beq.n	800fea6 <_dtoa_r+0x7b6>
 800fe9c:	4651      	mov	r1, sl
 800fe9e:	4620      	mov	r0, r4
 800fea0:	f000 fcce 	bl	8010840 <__pow5mult>
 800fea4:	4682      	mov	sl, r0
 800fea6:	2101      	movs	r1, #1
 800fea8:	4620      	mov	r0, r4
 800feaa:	f000 fc09 	bl	80106c0 <__i2b>
 800feae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	4606      	mov	r6, r0
 800feb4:	f340 8081 	ble.w	800ffba <_dtoa_r+0x8ca>
 800feb8:	461a      	mov	r2, r3
 800feba:	4601      	mov	r1, r0
 800febc:	4620      	mov	r0, r4
 800febe:	f000 fcbf 	bl	8010840 <__pow5mult>
 800fec2:	9b07      	ldr	r3, [sp, #28]
 800fec4:	2b01      	cmp	r3, #1
 800fec6:	4606      	mov	r6, r0
 800fec8:	dd7a      	ble.n	800ffc0 <_dtoa_r+0x8d0>
 800feca:	f04f 0800 	mov.w	r8, #0
 800fece:	6933      	ldr	r3, [r6, #16]
 800fed0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fed4:	6918      	ldr	r0, [r3, #16]
 800fed6:	f000 fba5 	bl	8010624 <__hi0bits>
 800feda:	f1c0 0020 	rsb	r0, r0, #32
 800fede:	9b06      	ldr	r3, [sp, #24]
 800fee0:	4418      	add	r0, r3
 800fee2:	f010 001f 	ands.w	r0, r0, #31
 800fee6:	f000 8094 	beq.w	8010012 <_dtoa_r+0x922>
 800feea:	f1c0 0320 	rsb	r3, r0, #32
 800feee:	2b04      	cmp	r3, #4
 800fef0:	f340 8085 	ble.w	800fffe <_dtoa_r+0x90e>
 800fef4:	9b05      	ldr	r3, [sp, #20]
 800fef6:	f1c0 001c 	rsb	r0, r0, #28
 800fefa:	4403      	add	r3, r0
 800fefc:	9305      	str	r3, [sp, #20]
 800fefe:	9b06      	ldr	r3, [sp, #24]
 800ff00:	4403      	add	r3, r0
 800ff02:	4405      	add	r5, r0
 800ff04:	9306      	str	r3, [sp, #24]
 800ff06:	9b05      	ldr	r3, [sp, #20]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	dd05      	ble.n	800ff18 <_dtoa_r+0x828>
 800ff0c:	4651      	mov	r1, sl
 800ff0e:	461a      	mov	r2, r3
 800ff10:	4620      	mov	r0, r4
 800ff12:	f000 fcef 	bl	80108f4 <__lshift>
 800ff16:	4682      	mov	sl, r0
 800ff18:	9b06      	ldr	r3, [sp, #24]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	dd05      	ble.n	800ff2a <_dtoa_r+0x83a>
 800ff1e:	4631      	mov	r1, r6
 800ff20:	461a      	mov	r2, r3
 800ff22:	4620      	mov	r0, r4
 800ff24:	f000 fce6 	bl	80108f4 <__lshift>
 800ff28:	4606      	mov	r6, r0
 800ff2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d072      	beq.n	8010016 <_dtoa_r+0x926>
 800ff30:	4631      	mov	r1, r6
 800ff32:	4650      	mov	r0, sl
 800ff34:	f000 fd4a 	bl	80109cc <__mcmp>
 800ff38:	2800      	cmp	r0, #0
 800ff3a:	da6c      	bge.n	8010016 <_dtoa_r+0x926>
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	4651      	mov	r1, sl
 800ff40:	220a      	movs	r2, #10
 800ff42:	4620      	mov	r0, r4
 800ff44:	f000 fb28 	bl	8010598 <__multadd>
 800ff48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ff4e:	4682      	mov	sl, r0
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	f000 81b0 	beq.w	80102b6 <_dtoa_r+0xbc6>
 800ff56:	2300      	movs	r3, #0
 800ff58:	4639      	mov	r1, r7
 800ff5a:	220a      	movs	r2, #10
 800ff5c:	4620      	mov	r0, r4
 800ff5e:	f000 fb1b 	bl	8010598 <__multadd>
 800ff62:	9b01      	ldr	r3, [sp, #4]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	4607      	mov	r7, r0
 800ff68:	f300 8096 	bgt.w	8010098 <_dtoa_r+0x9a8>
 800ff6c:	9b07      	ldr	r3, [sp, #28]
 800ff6e:	2b02      	cmp	r3, #2
 800ff70:	dc59      	bgt.n	8010026 <_dtoa_r+0x936>
 800ff72:	e091      	b.n	8010098 <_dtoa_r+0x9a8>
 800ff74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ff76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ff7a:	e758      	b.n	800fe2e <_dtoa_r+0x73e>
 800ff7c:	9b04      	ldr	r3, [sp, #16]
 800ff7e:	1e5e      	subs	r6, r3, #1
 800ff80:	9b08      	ldr	r3, [sp, #32]
 800ff82:	42b3      	cmp	r3, r6
 800ff84:	bfbf      	itttt	lt
 800ff86:	9b08      	ldrlt	r3, [sp, #32]
 800ff88:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ff8a:	9608      	strlt	r6, [sp, #32]
 800ff8c:	1af3      	sublt	r3, r6, r3
 800ff8e:	bfb4      	ite	lt
 800ff90:	18d2      	addlt	r2, r2, r3
 800ff92:	1b9e      	subge	r6, r3, r6
 800ff94:	9b04      	ldr	r3, [sp, #16]
 800ff96:	bfbc      	itt	lt
 800ff98:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ff9a:	2600      	movlt	r6, #0
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	bfb7      	itett	lt
 800ffa0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ffa4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ffa8:	1a9d      	sublt	r5, r3, r2
 800ffaa:	2300      	movlt	r3, #0
 800ffac:	e741      	b.n	800fe32 <_dtoa_r+0x742>
 800ffae:	9e08      	ldr	r6, [sp, #32]
 800ffb0:	9d05      	ldr	r5, [sp, #20]
 800ffb2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ffb4:	e748      	b.n	800fe48 <_dtoa_r+0x758>
 800ffb6:	9a08      	ldr	r2, [sp, #32]
 800ffb8:	e770      	b.n	800fe9c <_dtoa_r+0x7ac>
 800ffba:	9b07      	ldr	r3, [sp, #28]
 800ffbc:	2b01      	cmp	r3, #1
 800ffbe:	dc19      	bgt.n	800fff4 <_dtoa_r+0x904>
 800ffc0:	9b02      	ldr	r3, [sp, #8]
 800ffc2:	b9bb      	cbnz	r3, 800fff4 <_dtoa_r+0x904>
 800ffc4:	9b03      	ldr	r3, [sp, #12]
 800ffc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ffca:	b99b      	cbnz	r3, 800fff4 <_dtoa_r+0x904>
 800ffcc:	9b03      	ldr	r3, [sp, #12]
 800ffce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ffd2:	0d1b      	lsrs	r3, r3, #20
 800ffd4:	051b      	lsls	r3, r3, #20
 800ffd6:	b183      	cbz	r3, 800fffa <_dtoa_r+0x90a>
 800ffd8:	9b05      	ldr	r3, [sp, #20]
 800ffda:	3301      	adds	r3, #1
 800ffdc:	9305      	str	r3, [sp, #20]
 800ffde:	9b06      	ldr	r3, [sp, #24]
 800ffe0:	3301      	adds	r3, #1
 800ffe2:	9306      	str	r3, [sp, #24]
 800ffe4:	f04f 0801 	mov.w	r8, #1
 800ffe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	f47f af6f 	bne.w	800fece <_dtoa_r+0x7de>
 800fff0:	2001      	movs	r0, #1
 800fff2:	e774      	b.n	800fede <_dtoa_r+0x7ee>
 800fff4:	f04f 0800 	mov.w	r8, #0
 800fff8:	e7f6      	b.n	800ffe8 <_dtoa_r+0x8f8>
 800fffa:	4698      	mov	r8, r3
 800fffc:	e7f4      	b.n	800ffe8 <_dtoa_r+0x8f8>
 800fffe:	d082      	beq.n	800ff06 <_dtoa_r+0x816>
 8010000:	9a05      	ldr	r2, [sp, #20]
 8010002:	331c      	adds	r3, #28
 8010004:	441a      	add	r2, r3
 8010006:	9205      	str	r2, [sp, #20]
 8010008:	9a06      	ldr	r2, [sp, #24]
 801000a:	441a      	add	r2, r3
 801000c:	441d      	add	r5, r3
 801000e:	9206      	str	r2, [sp, #24]
 8010010:	e779      	b.n	800ff06 <_dtoa_r+0x816>
 8010012:	4603      	mov	r3, r0
 8010014:	e7f4      	b.n	8010000 <_dtoa_r+0x910>
 8010016:	9b04      	ldr	r3, [sp, #16]
 8010018:	2b00      	cmp	r3, #0
 801001a:	dc37      	bgt.n	801008c <_dtoa_r+0x99c>
 801001c:	9b07      	ldr	r3, [sp, #28]
 801001e:	2b02      	cmp	r3, #2
 8010020:	dd34      	ble.n	801008c <_dtoa_r+0x99c>
 8010022:	9b04      	ldr	r3, [sp, #16]
 8010024:	9301      	str	r3, [sp, #4]
 8010026:	9b01      	ldr	r3, [sp, #4]
 8010028:	b963      	cbnz	r3, 8010044 <_dtoa_r+0x954>
 801002a:	4631      	mov	r1, r6
 801002c:	2205      	movs	r2, #5
 801002e:	4620      	mov	r0, r4
 8010030:	f000 fab2 	bl	8010598 <__multadd>
 8010034:	4601      	mov	r1, r0
 8010036:	4606      	mov	r6, r0
 8010038:	4650      	mov	r0, sl
 801003a:	f000 fcc7 	bl	80109cc <__mcmp>
 801003e:	2800      	cmp	r0, #0
 8010040:	f73f adbb 	bgt.w	800fbba <_dtoa_r+0x4ca>
 8010044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010046:	9d00      	ldr	r5, [sp, #0]
 8010048:	ea6f 0b03 	mvn.w	fp, r3
 801004c:	f04f 0800 	mov.w	r8, #0
 8010050:	4631      	mov	r1, r6
 8010052:	4620      	mov	r0, r4
 8010054:	f000 fa7e 	bl	8010554 <_Bfree>
 8010058:	2f00      	cmp	r7, #0
 801005a:	f43f aeab 	beq.w	800fdb4 <_dtoa_r+0x6c4>
 801005e:	f1b8 0f00 	cmp.w	r8, #0
 8010062:	d005      	beq.n	8010070 <_dtoa_r+0x980>
 8010064:	45b8      	cmp	r8, r7
 8010066:	d003      	beq.n	8010070 <_dtoa_r+0x980>
 8010068:	4641      	mov	r1, r8
 801006a:	4620      	mov	r0, r4
 801006c:	f000 fa72 	bl	8010554 <_Bfree>
 8010070:	4639      	mov	r1, r7
 8010072:	4620      	mov	r0, r4
 8010074:	f000 fa6e 	bl	8010554 <_Bfree>
 8010078:	e69c      	b.n	800fdb4 <_dtoa_r+0x6c4>
 801007a:	2600      	movs	r6, #0
 801007c:	4637      	mov	r7, r6
 801007e:	e7e1      	b.n	8010044 <_dtoa_r+0x954>
 8010080:	46bb      	mov	fp, r7
 8010082:	4637      	mov	r7, r6
 8010084:	e599      	b.n	800fbba <_dtoa_r+0x4ca>
 8010086:	bf00      	nop
 8010088:	40240000 	.word	0x40240000
 801008c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801008e:	2b00      	cmp	r3, #0
 8010090:	f000 80c8 	beq.w	8010224 <_dtoa_r+0xb34>
 8010094:	9b04      	ldr	r3, [sp, #16]
 8010096:	9301      	str	r3, [sp, #4]
 8010098:	2d00      	cmp	r5, #0
 801009a:	dd05      	ble.n	80100a8 <_dtoa_r+0x9b8>
 801009c:	4639      	mov	r1, r7
 801009e:	462a      	mov	r2, r5
 80100a0:	4620      	mov	r0, r4
 80100a2:	f000 fc27 	bl	80108f4 <__lshift>
 80100a6:	4607      	mov	r7, r0
 80100a8:	f1b8 0f00 	cmp.w	r8, #0
 80100ac:	d05b      	beq.n	8010166 <_dtoa_r+0xa76>
 80100ae:	6879      	ldr	r1, [r7, #4]
 80100b0:	4620      	mov	r0, r4
 80100b2:	f000 fa0f 	bl	80104d4 <_Balloc>
 80100b6:	4605      	mov	r5, r0
 80100b8:	b928      	cbnz	r0, 80100c6 <_dtoa_r+0x9d6>
 80100ba:	4b83      	ldr	r3, [pc, #524]	; (80102c8 <_dtoa_r+0xbd8>)
 80100bc:	4602      	mov	r2, r0
 80100be:	f240 21ef 	movw	r1, #751	; 0x2ef
 80100c2:	f7ff bb2e 	b.w	800f722 <_dtoa_r+0x32>
 80100c6:	693a      	ldr	r2, [r7, #16]
 80100c8:	3202      	adds	r2, #2
 80100ca:	0092      	lsls	r2, r2, #2
 80100cc:	f107 010c 	add.w	r1, r7, #12
 80100d0:	300c      	adds	r0, #12
 80100d2:	f7ff fa77 	bl	800f5c4 <memcpy>
 80100d6:	2201      	movs	r2, #1
 80100d8:	4629      	mov	r1, r5
 80100da:	4620      	mov	r0, r4
 80100dc:	f000 fc0a 	bl	80108f4 <__lshift>
 80100e0:	9b00      	ldr	r3, [sp, #0]
 80100e2:	3301      	adds	r3, #1
 80100e4:	9304      	str	r3, [sp, #16]
 80100e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100ea:	4413      	add	r3, r2
 80100ec:	9308      	str	r3, [sp, #32]
 80100ee:	9b02      	ldr	r3, [sp, #8]
 80100f0:	f003 0301 	and.w	r3, r3, #1
 80100f4:	46b8      	mov	r8, r7
 80100f6:	9306      	str	r3, [sp, #24]
 80100f8:	4607      	mov	r7, r0
 80100fa:	9b04      	ldr	r3, [sp, #16]
 80100fc:	4631      	mov	r1, r6
 80100fe:	3b01      	subs	r3, #1
 8010100:	4650      	mov	r0, sl
 8010102:	9301      	str	r3, [sp, #4]
 8010104:	f7ff fa6c 	bl	800f5e0 <quorem>
 8010108:	4641      	mov	r1, r8
 801010a:	9002      	str	r0, [sp, #8]
 801010c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010110:	4650      	mov	r0, sl
 8010112:	f000 fc5b 	bl	80109cc <__mcmp>
 8010116:	463a      	mov	r2, r7
 8010118:	9005      	str	r0, [sp, #20]
 801011a:	4631      	mov	r1, r6
 801011c:	4620      	mov	r0, r4
 801011e:	f000 fc71 	bl	8010a04 <__mdiff>
 8010122:	68c2      	ldr	r2, [r0, #12]
 8010124:	4605      	mov	r5, r0
 8010126:	bb02      	cbnz	r2, 801016a <_dtoa_r+0xa7a>
 8010128:	4601      	mov	r1, r0
 801012a:	4650      	mov	r0, sl
 801012c:	f000 fc4e 	bl	80109cc <__mcmp>
 8010130:	4602      	mov	r2, r0
 8010132:	4629      	mov	r1, r5
 8010134:	4620      	mov	r0, r4
 8010136:	9209      	str	r2, [sp, #36]	; 0x24
 8010138:	f000 fa0c 	bl	8010554 <_Bfree>
 801013c:	9b07      	ldr	r3, [sp, #28]
 801013e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010140:	9d04      	ldr	r5, [sp, #16]
 8010142:	ea43 0102 	orr.w	r1, r3, r2
 8010146:	9b06      	ldr	r3, [sp, #24]
 8010148:	4319      	orrs	r1, r3
 801014a:	d110      	bne.n	801016e <_dtoa_r+0xa7e>
 801014c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010150:	d029      	beq.n	80101a6 <_dtoa_r+0xab6>
 8010152:	9b05      	ldr	r3, [sp, #20]
 8010154:	2b00      	cmp	r3, #0
 8010156:	dd02      	ble.n	801015e <_dtoa_r+0xa6e>
 8010158:	9b02      	ldr	r3, [sp, #8]
 801015a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801015e:	9b01      	ldr	r3, [sp, #4]
 8010160:	f883 9000 	strb.w	r9, [r3]
 8010164:	e774      	b.n	8010050 <_dtoa_r+0x960>
 8010166:	4638      	mov	r0, r7
 8010168:	e7ba      	b.n	80100e0 <_dtoa_r+0x9f0>
 801016a:	2201      	movs	r2, #1
 801016c:	e7e1      	b.n	8010132 <_dtoa_r+0xa42>
 801016e:	9b05      	ldr	r3, [sp, #20]
 8010170:	2b00      	cmp	r3, #0
 8010172:	db04      	blt.n	801017e <_dtoa_r+0xa8e>
 8010174:	9907      	ldr	r1, [sp, #28]
 8010176:	430b      	orrs	r3, r1
 8010178:	9906      	ldr	r1, [sp, #24]
 801017a:	430b      	orrs	r3, r1
 801017c:	d120      	bne.n	80101c0 <_dtoa_r+0xad0>
 801017e:	2a00      	cmp	r2, #0
 8010180:	dded      	ble.n	801015e <_dtoa_r+0xa6e>
 8010182:	4651      	mov	r1, sl
 8010184:	2201      	movs	r2, #1
 8010186:	4620      	mov	r0, r4
 8010188:	f000 fbb4 	bl	80108f4 <__lshift>
 801018c:	4631      	mov	r1, r6
 801018e:	4682      	mov	sl, r0
 8010190:	f000 fc1c 	bl	80109cc <__mcmp>
 8010194:	2800      	cmp	r0, #0
 8010196:	dc03      	bgt.n	80101a0 <_dtoa_r+0xab0>
 8010198:	d1e1      	bne.n	801015e <_dtoa_r+0xa6e>
 801019a:	f019 0f01 	tst.w	r9, #1
 801019e:	d0de      	beq.n	801015e <_dtoa_r+0xa6e>
 80101a0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80101a4:	d1d8      	bne.n	8010158 <_dtoa_r+0xa68>
 80101a6:	9a01      	ldr	r2, [sp, #4]
 80101a8:	2339      	movs	r3, #57	; 0x39
 80101aa:	7013      	strb	r3, [r2, #0]
 80101ac:	462b      	mov	r3, r5
 80101ae:	461d      	mov	r5, r3
 80101b0:	3b01      	subs	r3, #1
 80101b2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80101b6:	2a39      	cmp	r2, #57	; 0x39
 80101b8:	d06c      	beq.n	8010294 <_dtoa_r+0xba4>
 80101ba:	3201      	adds	r2, #1
 80101bc:	701a      	strb	r2, [r3, #0]
 80101be:	e747      	b.n	8010050 <_dtoa_r+0x960>
 80101c0:	2a00      	cmp	r2, #0
 80101c2:	dd07      	ble.n	80101d4 <_dtoa_r+0xae4>
 80101c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80101c8:	d0ed      	beq.n	80101a6 <_dtoa_r+0xab6>
 80101ca:	9a01      	ldr	r2, [sp, #4]
 80101cc:	f109 0301 	add.w	r3, r9, #1
 80101d0:	7013      	strb	r3, [r2, #0]
 80101d2:	e73d      	b.n	8010050 <_dtoa_r+0x960>
 80101d4:	9b04      	ldr	r3, [sp, #16]
 80101d6:	9a08      	ldr	r2, [sp, #32]
 80101d8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80101dc:	4293      	cmp	r3, r2
 80101de:	d043      	beq.n	8010268 <_dtoa_r+0xb78>
 80101e0:	4651      	mov	r1, sl
 80101e2:	2300      	movs	r3, #0
 80101e4:	220a      	movs	r2, #10
 80101e6:	4620      	mov	r0, r4
 80101e8:	f000 f9d6 	bl	8010598 <__multadd>
 80101ec:	45b8      	cmp	r8, r7
 80101ee:	4682      	mov	sl, r0
 80101f0:	f04f 0300 	mov.w	r3, #0
 80101f4:	f04f 020a 	mov.w	r2, #10
 80101f8:	4641      	mov	r1, r8
 80101fa:	4620      	mov	r0, r4
 80101fc:	d107      	bne.n	801020e <_dtoa_r+0xb1e>
 80101fe:	f000 f9cb 	bl	8010598 <__multadd>
 8010202:	4680      	mov	r8, r0
 8010204:	4607      	mov	r7, r0
 8010206:	9b04      	ldr	r3, [sp, #16]
 8010208:	3301      	adds	r3, #1
 801020a:	9304      	str	r3, [sp, #16]
 801020c:	e775      	b.n	80100fa <_dtoa_r+0xa0a>
 801020e:	f000 f9c3 	bl	8010598 <__multadd>
 8010212:	4639      	mov	r1, r7
 8010214:	4680      	mov	r8, r0
 8010216:	2300      	movs	r3, #0
 8010218:	220a      	movs	r2, #10
 801021a:	4620      	mov	r0, r4
 801021c:	f000 f9bc 	bl	8010598 <__multadd>
 8010220:	4607      	mov	r7, r0
 8010222:	e7f0      	b.n	8010206 <_dtoa_r+0xb16>
 8010224:	9b04      	ldr	r3, [sp, #16]
 8010226:	9301      	str	r3, [sp, #4]
 8010228:	9d00      	ldr	r5, [sp, #0]
 801022a:	4631      	mov	r1, r6
 801022c:	4650      	mov	r0, sl
 801022e:	f7ff f9d7 	bl	800f5e0 <quorem>
 8010232:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010236:	9b00      	ldr	r3, [sp, #0]
 8010238:	f805 9b01 	strb.w	r9, [r5], #1
 801023c:	1aea      	subs	r2, r5, r3
 801023e:	9b01      	ldr	r3, [sp, #4]
 8010240:	4293      	cmp	r3, r2
 8010242:	dd07      	ble.n	8010254 <_dtoa_r+0xb64>
 8010244:	4651      	mov	r1, sl
 8010246:	2300      	movs	r3, #0
 8010248:	220a      	movs	r2, #10
 801024a:	4620      	mov	r0, r4
 801024c:	f000 f9a4 	bl	8010598 <__multadd>
 8010250:	4682      	mov	sl, r0
 8010252:	e7ea      	b.n	801022a <_dtoa_r+0xb3a>
 8010254:	9b01      	ldr	r3, [sp, #4]
 8010256:	2b00      	cmp	r3, #0
 8010258:	bfc8      	it	gt
 801025a:	461d      	movgt	r5, r3
 801025c:	9b00      	ldr	r3, [sp, #0]
 801025e:	bfd8      	it	le
 8010260:	2501      	movle	r5, #1
 8010262:	441d      	add	r5, r3
 8010264:	f04f 0800 	mov.w	r8, #0
 8010268:	4651      	mov	r1, sl
 801026a:	2201      	movs	r2, #1
 801026c:	4620      	mov	r0, r4
 801026e:	f000 fb41 	bl	80108f4 <__lshift>
 8010272:	4631      	mov	r1, r6
 8010274:	4682      	mov	sl, r0
 8010276:	f000 fba9 	bl	80109cc <__mcmp>
 801027a:	2800      	cmp	r0, #0
 801027c:	dc96      	bgt.n	80101ac <_dtoa_r+0xabc>
 801027e:	d102      	bne.n	8010286 <_dtoa_r+0xb96>
 8010280:	f019 0f01 	tst.w	r9, #1
 8010284:	d192      	bne.n	80101ac <_dtoa_r+0xabc>
 8010286:	462b      	mov	r3, r5
 8010288:	461d      	mov	r5, r3
 801028a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801028e:	2a30      	cmp	r2, #48	; 0x30
 8010290:	d0fa      	beq.n	8010288 <_dtoa_r+0xb98>
 8010292:	e6dd      	b.n	8010050 <_dtoa_r+0x960>
 8010294:	9a00      	ldr	r2, [sp, #0]
 8010296:	429a      	cmp	r2, r3
 8010298:	d189      	bne.n	80101ae <_dtoa_r+0xabe>
 801029a:	f10b 0b01 	add.w	fp, fp, #1
 801029e:	2331      	movs	r3, #49	; 0x31
 80102a0:	e796      	b.n	80101d0 <_dtoa_r+0xae0>
 80102a2:	4b0a      	ldr	r3, [pc, #40]	; (80102cc <_dtoa_r+0xbdc>)
 80102a4:	f7ff ba99 	b.w	800f7da <_dtoa_r+0xea>
 80102a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	f47f aa6d 	bne.w	800f78a <_dtoa_r+0x9a>
 80102b0:	4b07      	ldr	r3, [pc, #28]	; (80102d0 <_dtoa_r+0xbe0>)
 80102b2:	f7ff ba92 	b.w	800f7da <_dtoa_r+0xea>
 80102b6:	9b01      	ldr	r3, [sp, #4]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	dcb5      	bgt.n	8010228 <_dtoa_r+0xb38>
 80102bc:	9b07      	ldr	r3, [sp, #28]
 80102be:	2b02      	cmp	r3, #2
 80102c0:	f73f aeb1 	bgt.w	8010026 <_dtoa_r+0x936>
 80102c4:	e7b0      	b.n	8010228 <_dtoa_r+0xb38>
 80102c6:	bf00      	nop
 80102c8:	08012048 	.word	0x08012048
 80102cc:	08011fa8 	.word	0x08011fa8
 80102d0:	08011fcc 	.word	0x08011fcc

080102d4 <_free_r>:
 80102d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80102d6:	2900      	cmp	r1, #0
 80102d8:	d044      	beq.n	8010364 <_free_r+0x90>
 80102da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80102de:	9001      	str	r0, [sp, #4]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	f1a1 0404 	sub.w	r4, r1, #4
 80102e6:	bfb8      	it	lt
 80102e8:	18e4      	addlt	r4, r4, r3
 80102ea:	f000 f8e7 	bl	80104bc <__malloc_lock>
 80102ee:	4a1e      	ldr	r2, [pc, #120]	; (8010368 <_free_r+0x94>)
 80102f0:	9801      	ldr	r0, [sp, #4]
 80102f2:	6813      	ldr	r3, [r2, #0]
 80102f4:	b933      	cbnz	r3, 8010304 <_free_r+0x30>
 80102f6:	6063      	str	r3, [r4, #4]
 80102f8:	6014      	str	r4, [r2, #0]
 80102fa:	b003      	add	sp, #12
 80102fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010300:	f000 b8e2 	b.w	80104c8 <__malloc_unlock>
 8010304:	42a3      	cmp	r3, r4
 8010306:	d908      	bls.n	801031a <_free_r+0x46>
 8010308:	6825      	ldr	r5, [r4, #0]
 801030a:	1961      	adds	r1, r4, r5
 801030c:	428b      	cmp	r3, r1
 801030e:	bf01      	itttt	eq
 8010310:	6819      	ldreq	r1, [r3, #0]
 8010312:	685b      	ldreq	r3, [r3, #4]
 8010314:	1949      	addeq	r1, r1, r5
 8010316:	6021      	streq	r1, [r4, #0]
 8010318:	e7ed      	b.n	80102f6 <_free_r+0x22>
 801031a:	461a      	mov	r2, r3
 801031c:	685b      	ldr	r3, [r3, #4]
 801031e:	b10b      	cbz	r3, 8010324 <_free_r+0x50>
 8010320:	42a3      	cmp	r3, r4
 8010322:	d9fa      	bls.n	801031a <_free_r+0x46>
 8010324:	6811      	ldr	r1, [r2, #0]
 8010326:	1855      	adds	r5, r2, r1
 8010328:	42a5      	cmp	r5, r4
 801032a:	d10b      	bne.n	8010344 <_free_r+0x70>
 801032c:	6824      	ldr	r4, [r4, #0]
 801032e:	4421      	add	r1, r4
 8010330:	1854      	adds	r4, r2, r1
 8010332:	42a3      	cmp	r3, r4
 8010334:	6011      	str	r1, [r2, #0]
 8010336:	d1e0      	bne.n	80102fa <_free_r+0x26>
 8010338:	681c      	ldr	r4, [r3, #0]
 801033a:	685b      	ldr	r3, [r3, #4]
 801033c:	6053      	str	r3, [r2, #4]
 801033e:	440c      	add	r4, r1
 8010340:	6014      	str	r4, [r2, #0]
 8010342:	e7da      	b.n	80102fa <_free_r+0x26>
 8010344:	d902      	bls.n	801034c <_free_r+0x78>
 8010346:	230c      	movs	r3, #12
 8010348:	6003      	str	r3, [r0, #0]
 801034a:	e7d6      	b.n	80102fa <_free_r+0x26>
 801034c:	6825      	ldr	r5, [r4, #0]
 801034e:	1961      	adds	r1, r4, r5
 8010350:	428b      	cmp	r3, r1
 8010352:	bf04      	itt	eq
 8010354:	6819      	ldreq	r1, [r3, #0]
 8010356:	685b      	ldreq	r3, [r3, #4]
 8010358:	6063      	str	r3, [r4, #4]
 801035a:	bf04      	itt	eq
 801035c:	1949      	addeq	r1, r1, r5
 801035e:	6021      	streq	r1, [r4, #0]
 8010360:	6054      	str	r4, [r2, #4]
 8010362:	e7ca      	b.n	80102fa <_free_r+0x26>
 8010364:	b003      	add	sp, #12
 8010366:	bd30      	pop	{r4, r5, pc}
 8010368:	2000a004 	.word	0x2000a004

0801036c <malloc>:
 801036c:	4b02      	ldr	r3, [pc, #8]	; (8010378 <malloc+0xc>)
 801036e:	4601      	mov	r1, r0
 8010370:	6818      	ldr	r0, [r3, #0]
 8010372:	f000 b823 	b.w	80103bc <_malloc_r>
 8010376:	bf00      	nop
 8010378:	200000a0 	.word	0x200000a0

0801037c <sbrk_aligned>:
 801037c:	b570      	push	{r4, r5, r6, lr}
 801037e:	4e0e      	ldr	r6, [pc, #56]	; (80103b8 <sbrk_aligned+0x3c>)
 8010380:	460c      	mov	r4, r1
 8010382:	6831      	ldr	r1, [r6, #0]
 8010384:	4605      	mov	r5, r0
 8010386:	b911      	cbnz	r1, 801038e <sbrk_aligned+0x12>
 8010388:	f001 f808 	bl	801139c <_sbrk_r>
 801038c:	6030      	str	r0, [r6, #0]
 801038e:	4621      	mov	r1, r4
 8010390:	4628      	mov	r0, r5
 8010392:	f001 f803 	bl	801139c <_sbrk_r>
 8010396:	1c43      	adds	r3, r0, #1
 8010398:	d00a      	beq.n	80103b0 <sbrk_aligned+0x34>
 801039a:	1cc4      	adds	r4, r0, #3
 801039c:	f024 0403 	bic.w	r4, r4, #3
 80103a0:	42a0      	cmp	r0, r4
 80103a2:	d007      	beq.n	80103b4 <sbrk_aligned+0x38>
 80103a4:	1a21      	subs	r1, r4, r0
 80103a6:	4628      	mov	r0, r5
 80103a8:	f000 fff8 	bl	801139c <_sbrk_r>
 80103ac:	3001      	adds	r0, #1
 80103ae:	d101      	bne.n	80103b4 <sbrk_aligned+0x38>
 80103b0:	f04f 34ff 	mov.w	r4, #4294967295
 80103b4:	4620      	mov	r0, r4
 80103b6:	bd70      	pop	{r4, r5, r6, pc}
 80103b8:	2000a008 	.word	0x2000a008

080103bc <_malloc_r>:
 80103bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103c0:	1ccd      	adds	r5, r1, #3
 80103c2:	f025 0503 	bic.w	r5, r5, #3
 80103c6:	3508      	adds	r5, #8
 80103c8:	2d0c      	cmp	r5, #12
 80103ca:	bf38      	it	cc
 80103cc:	250c      	movcc	r5, #12
 80103ce:	2d00      	cmp	r5, #0
 80103d0:	4607      	mov	r7, r0
 80103d2:	db01      	blt.n	80103d8 <_malloc_r+0x1c>
 80103d4:	42a9      	cmp	r1, r5
 80103d6:	d905      	bls.n	80103e4 <_malloc_r+0x28>
 80103d8:	230c      	movs	r3, #12
 80103da:	603b      	str	r3, [r7, #0]
 80103dc:	2600      	movs	r6, #0
 80103de:	4630      	mov	r0, r6
 80103e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80104b8 <_malloc_r+0xfc>
 80103e8:	f000 f868 	bl	80104bc <__malloc_lock>
 80103ec:	f8d8 3000 	ldr.w	r3, [r8]
 80103f0:	461c      	mov	r4, r3
 80103f2:	bb5c      	cbnz	r4, 801044c <_malloc_r+0x90>
 80103f4:	4629      	mov	r1, r5
 80103f6:	4638      	mov	r0, r7
 80103f8:	f7ff ffc0 	bl	801037c <sbrk_aligned>
 80103fc:	1c43      	adds	r3, r0, #1
 80103fe:	4604      	mov	r4, r0
 8010400:	d155      	bne.n	80104ae <_malloc_r+0xf2>
 8010402:	f8d8 4000 	ldr.w	r4, [r8]
 8010406:	4626      	mov	r6, r4
 8010408:	2e00      	cmp	r6, #0
 801040a:	d145      	bne.n	8010498 <_malloc_r+0xdc>
 801040c:	2c00      	cmp	r4, #0
 801040e:	d048      	beq.n	80104a2 <_malloc_r+0xe6>
 8010410:	6823      	ldr	r3, [r4, #0]
 8010412:	4631      	mov	r1, r6
 8010414:	4638      	mov	r0, r7
 8010416:	eb04 0903 	add.w	r9, r4, r3
 801041a:	f000 ffbf 	bl	801139c <_sbrk_r>
 801041e:	4581      	cmp	r9, r0
 8010420:	d13f      	bne.n	80104a2 <_malloc_r+0xe6>
 8010422:	6821      	ldr	r1, [r4, #0]
 8010424:	1a6d      	subs	r5, r5, r1
 8010426:	4629      	mov	r1, r5
 8010428:	4638      	mov	r0, r7
 801042a:	f7ff ffa7 	bl	801037c <sbrk_aligned>
 801042e:	3001      	adds	r0, #1
 8010430:	d037      	beq.n	80104a2 <_malloc_r+0xe6>
 8010432:	6823      	ldr	r3, [r4, #0]
 8010434:	442b      	add	r3, r5
 8010436:	6023      	str	r3, [r4, #0]
 8010438:	f8d8 3000 	ldr.w	r3, [r8]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d038      	beq.n	80104b2 <_malloc_r+0xf6>
 8010440:	685a      	ldr	r2, [r3, #4]
 8010442:	42a2      	cmp	r2, r4
 8010444:	d12b      	bne.n	801049e <_malloc_r+0xe2>
 8010446:	2200      	movs	r2, #0
 8010448:	605a      	str	r2, [r3, #4]
 801044a:	e00f      	b.n	801046c <_malloc_r+0xb0>
 801044c:	6822      	ldr	r2, [r4, #0]
 801044e:	1b52      	subs	r2, r2, r5
 8010450:	d41f      	bmi.n	8010492 <_malloc_r+0xd6>
 8010452:	2a0b      	cmp	r2, #11
 8010454:	d917      	bls.n	8010486 <_malloc_r+0xca>
 8010456:	1961      	adds	r1, r4, r5
 8010458:	42a3      	cmp	r3, r4
 801045a:	6025      	str	r5, [r4, #0]
 801045c:	bf18      	it	ne
 801045e:	6059      	strne	r1, [r3, #4]
 8010460:	6863      	ldr	r3, [r4, #4]
 8010462:	bf08      	it	eq
 8010464:	f8c8 1000 	streq.w	r1, [r8]
 8010468:	5162      	str	r2, [r4, r5]
 801046a:	604b      	str	r3, [r1, #4]
 801046c:	4638      	mov	r0, r7
 801046e:	f104 060b 	add.w	r6, r4, #11
 8010472:	f000 f829 	bl	80104c8 <__malloc_unlock>
 8010476:	f026 0607 	bic.w	r6, r6, #7
 801047a:	1d23      	adds	r3, r4, #4
 801047c:	1af2      	subs	r2, r6, r3
 801047e:	d0ae      	beq.n	80103de <_malloc_r+0x22>
 8010480:	1b9b      	subs	r3, r3, r6
 8010482:	50a3      	str	r3, [r4, r2]
 8010484:	e7ab      	b.n	80103de <_malloc_r+0x22>
 8010486:	42a3      	cmp	r3, r4
 8010488:	6862      	ldr	r2, [r4, #4]
 801048a:	d1dd      	bne.n	8010448 <_malloc_r+0x8c>
 801048c:	f8c8 2000 	str.w	r2, [r8]
 8010490:	e7ec      	b.n	801046c <_malloc_r+0xb0>
 8010492:	4623      	mov	r3, r4
 8010494:	6864      	ldr	r4, [r4, #4]
 8010496:	e7ac      	b.n	80103f2 <_malloc_r+0x36>
 8010498:	4634      	mov	r4, r6
 801049a:	6876      	ldr	r6, [r6, #4]
 801049c:	e7b4      	b.n	8010408 <_malloc_r+0x4c>
 801049e:	4613      	mov	r3, r2
 80104a0:	e7cc      	b.n	801043c <_malloc_r+0x80>
 80104a2:	230c      	movs	r3, #12
 80104a4:	603b      	str	r3, [r7, #0]
 80104a6:	4638      	mov	r0, r7
 80104a8:	f000 f80e 	bl	80104c8 <__malloc_unlock>
 80104ac:	e797      	b.n	80103de <_malloc_r+0x22>
 80104ae:	6025      	str	r5, [r4, #0]
 80104b0:	e7dc      	b.n	801046c <_malloc_r+0xb0>
 80104b2:	605b      	str	r3, [r3, #4]
 80104b4:	deff      	udf	#255	; 0xff
 80104b6:	bf00      	nop
 80104b8:	2000a004 	.word	0x2000a004

080104bc <__malloc_lock>:
 80104bc:	4801      	ldr	r0, [pc, #4]	; (80104c4 <__malloc_lock+0x8>)
 80104be:	f7ff b87f 	b.w	800f5c0 <__retarget_lock_acquire_recursive>
 80104c2:	bf00      	nop
 80104c4:	2000a000 	.word	0x2000a000

080104c8 <__malloc_unlock>:
 80104c8:	4801      	ldr	r0, [pc, #4]	; (80104d0 <__malloc_unlock+0x8>)
 80104ca:	f7ff b87a 	b.w	800f5c2 <__retarget_lock_release_recursive>
 80104ce:	bf00      	nop
 80104d0:	2000a000 	.word	0x2000a000

080104d4 <_Balloc>:
 80104d4:	b570      	push	{r4, r5, r6, lr}
 80104d6:	69c6      	ldr	r6, [r0, #28]
 80104d8:	4604      	mov	r4, r0
 80104da:	460d      	mov	r5, r1
 80104dc:	b976      	cbnz	r6, 80104fc <_Balloc+0x28>
 80104de:	2010      	movs	r0, #16
 80104e0:	f7ff ff44 	bl	801036c <malloc>
 80104e4:	4602      	mov	r2, r0
 80104e6:	61e0      	str	r0, [r4, #28]
 80104e8:	b920      	cbnz	r0, 80104f4 <_Balloc+0x20>
 80104ea:	4b18      	ldr	r3, [pc, #96]	; (801054c <_Balloc+0x78>)
 80104ec:	4818      	ldr	r0, [pc, #96]	; (8010550 <_Balloc+0x7c>)
 80104ee:	216b      	movs	r1, #107	; 0x6b
 80104f0:	f000 ff64 	bl	80113bc <__assert_func>
 80104f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80104f8:	6006      	str	r6, [r0, #0]
 80104fa:	60c6      	str	r6, [r0, #12]
 80104fc:	69e6      	ldr	r6, [r4, #28]
 80104fe:	68f3      	ldr	r3, [r6, #12]
 8010500:	b183      	cbz	r3, 8010524 <_Balloc+0x50>
 8010502:	69e3      	ldr	r3, [r4, #28]
 8010504:	68db      	ldr	r3, [r3, #12]
 8010506:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801050a:	b9b8      	cbnz	r0, 801053c <_Balloc+0x68>
 801050c:	2101      	movs	r1, #1
 801050e:	fa01 f605 	lsl.w	r6, r1, r5
 8010512:	1d72      	adds	r2, r6, #5
 8010514:	0092      	lsls	r2, r2, #2
 8010516:	4620      	mov	r0, r4
 8010518:	f000 ff6e 	bl	80113f8 <_calloc_r>
 801051c:	b160      	cbz	r0, 8010538 <_Balloc+0x64>
 801051e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010522:	e00e      	b.n	8010542 <_Balloc+0x6e>
 8010524:	2221      	movs	r2, #33	; 0x21
 8010526:	2104      	movs	r1, #4
 8010528:	4620      	mov	r0, r4
 801052a:	f000 ff65 	bl	80113f8 <_calloc_r>
 801052e:	69e3      	ldr	r3, [r4, #28]
 8010530:	60f0      	str	r0, [r6, #12]
 8010532:	68db      	ldr	r3, [r3, #12]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d1e4      	bne.n	8010502 <_Balloc+0x2e>
 8010538:	2000      	movs	r0, #0
 801053a:	bd70      	pop	{r4, r5, r6, pc}
 801053c:	6802      	ldr	r2, [r0, #0]
 801053e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010542:	2300      	movs	r3, #0
 8010544:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010548:	e7f7      	b.n	801053a <_Balloc+0x66>
 801054a:	bf00      	nop
 801054c:	08011fd9 	.word	0x08011fd9
 8010550:	08012059 	.word	0x08012059

08010554 <_Bfree>:
 8010554:	b570      	push	{r4, r5, r6, lr}
 8010556:	69c6      	ldr	r6, [r0, #28]
 8010558:	4605      	mov	r5, r0
 801055a:	460c      	mov	r4, r1
 801055c:	b976      	cbnz	r6, 801057c <_Bfree+0x28>
 801055e:	2010      	movs	r0, #16
 8010560:	f7ff ff04 	bl	801036c <malloc>
 8010564:	4602      	mov	r2, r0
 8010566:	61e8      	str	r0, [r5, #28]
 8010568:	b920      	cbnz	r0, 8010574 <_Bfree+0x20>
 801056a:	4b09      	ldr	r3, [pc, #36]	; (8010590 <_Bfree+0x3c>)
 801056c:	4809      	ldr	r0, [pc, #36]	; (8010594 <_Bfree+0x40>)
 801056e:	218f      	movs	r1, #143	; 0x8f
 8010570:	f000 ff24 	bl	80113bc <__assert_func>
 8010574:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010578:	6006      	str	r6, [r0, #0]
 801057a:	60c6      	str	r6, [r0, #12]
 801057c:	b13c      	cbz	r4, 801058e <_Bfree+0x3a>
 801057e:	69eb      	ldr	r3, [r5, #28]
 8010580:	6862      	ldr	r2, [r4, #4]
 8010582:	68db      	ldr	r3, [r3, #12]
 8010584:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010588:	6021      	str	r1, [r4, #0]
 801058a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801058e:	bd70      	pop	{r4, r5, r6, pc}
 8010590:	08011fd9 	.word	0x08011fd9
 8010594:	08012059 	.word	0x08012059

08010598 <__multadd>:
 8010598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801059c:	690d      	ldr	r5, [r1, #16]
 801059e:	4607      	mov	r7, r0
 80105a0:	460c      	mov	r4, r1
 80105a2:	461e      	mov	r6, r3
 80105a4:	f101 0c14 	add.w	ip, r1, #20
 80105a8:	2000      	movs	r0, #0
 80105aa:	f8dc 3000 	ldr.w	r3, [ip]
 80105ae:	b299      	uxth	r1, r3
 80105b0:	fb02 6101 	mla	r1, r2, r1, r6
 80105b4:	0c1e      	lsrs	r6, r3, #16
 80105b6:	0c0b      	lsrs	r3, r1, #16
 80105b8:	fb02 3306 	mla	r3, r2, r6, r3
 80105bc:	b289      	uxth	r1, r1
 80105be:	3001      	adds	r0, #1
 80105c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80105c4:	4285      	cmp	r5, r0
 80105c6:	f84c 1b04 	str.w	r1, [ip], #4
 80105ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80105ce:	dcec      	bgt.n	80105aa <__multadd+0x12>
 80105d0:	b30e      	cbz	r6, 8010616 <__multadd+0x7e>
 80105d2:	68a3      	ldr	r3, [r4, #8]
 80105d4:	42ab      	cmp	r3, r5
 80105d6:	dc19      	bgt.n	801060c <__multadd+0x74>
 80105d8:	6861      	ldr	r1, [r4, #4]
 80105da:	4638      	mov	r0, r7
 80105dc:	3101      	adds	r1, #1
 80105de:	f7ff ff79 	bl	80104d4 <_Balloc>
 80105e2:	4680      	mov	r8, r0
 80105e4:	b928      	cbnz	r0, 80105f2 <__multadd+0x5a>
 80105e6:	4602      	mov	r2, r0
 80105e8:	4b0c      	ldr	r3, [pc, #48]	; (801061c <__multadd+0x84>)
 80105ea:	480d      	ldr	r0, [pc, #52]	; (8010620 <__multadd+0x88>)
 80105ec:	21ba      	movs	r1, #186	; 0xba
 80105ee:	f000 fee5 	bl	80113bc <__assert_func>
 80105f2:	6922      	ldr	r2, [r4, #16]
 80105f4:	3202      	adds	r2, #2
 80105f6:	f104 010c 	add.w	r1, r4, #12
 80105fa:	0092      	lsls	r2, r2, #2
 80105fc:	300c      	adds	r0, #12
 80105fe:	f7fe ffe1 	bl	800f5c4 <memcpy>
 8010602:	4621      	mov	r1, r4
 8010604:	4638      	mov	r0, r7
 8010606:	f7ff ffa5 	bl	8010554 <_Bfree>
 801060a:	4644      	mov	r4, r8
 801060c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010610:	3501      	adds	r5, #1
 8010612:	615e      	str	r6, [r3, #20]
 8010614:	6125      	str	r5, [r4, #16]
 8010616:	4620      	mov	r0, r4
 8010618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801061c:	08012048 	.word	0x08012048
 8010620:	08012059 	.word	0x08012059

08010624 <__hi0bits>:
 8010624:	0c03      	lsrs	r3, r0, #16
 8010626:	041b      	lsls	r3, r3, #16
 8010628:	b9d3      	cbnz	r3, 8010660 <__hi0bits+0x3c>
 801062a:	0400      	lsls	r0, r0, #16
 801062c:	2310      	movs	r3, #16
 801062e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010632:	bf04      	itt	eq
 8010634:	0200      	lsleq	r0, r0, #8
 8010636:	3308      	addeq	r3, #8
 8010638:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801063c:	bf04      	itt	eq
 801063e:	0100      	lsleq	r0, r0, #4
 8010640:	3304      	addeq	r3, #4
 8010642:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010646:	bf04      	itt	eq
 8010648:	0080      	lsleq	r0, r0, #2
 801064a:	3302      	addeq	r3, #2
 801064c:	2800      	cmp	r0, #0
 801064e:	db05      	blt.n	801065c <__hi0bits+0x38>
 8010650:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010654:	f103 0301 	add.w	r3, r3, #1
 8010658:	bf08      	it	eq
 801065a:	2320      	moveq	r3, #32
 801065c:	4618      	mov	r0, r3
 801065e:	4770      	bx	lr
 8010660:	2300      	movs	r3, #0
 8010662:	e7e4      	b.n	801062e <__hi0bits+0xa>

08010664 <__lo0bits>:
 8010664:	6803      	ldr	r3, [r0, #0]
 8010666:	f013 0207 	ands.w	r2, r3, #7
 801066a:	d00c      	beq.n	8010686 <__lo0bits+0x22>
 801066c:	07d9      	lsls	r1, r3, #31
 801066e:	d422      	bmi.n	80106b6 <__lo0bits+0x52>
 8010670:	079a      	lsls	r2, r3, #30
 8010672:	bf49      	itett	mi
 8010674:	085b      	lsrmi	r3, r3, #1
 8010676:	089b      	lsrpl	r3, r3, #2
 8010678:	6003      	strmi	r3, [r0, #0]
 801067a:	2201      	movmi	r2, #1
 801067c:	bf5c      	itt	pl
 801067e:	6003      	strpl	r3, [r0, #0]
 8010680:	2202      	movpl	r2, #2
 8010682:	4610      	mov	r0, r2
 8010684:	4770      	bx	lr
 8010686:	b299      	uxth	r1, r3
 8010688:	b909      	cbnz	r1, 801068e <__lo0bits+0x2a>
 801068a:	0c1b      	lsrs	r3, r3, #16
 801068c:	2210      	movs	r2, #16
 801068e:	b2d9      	uxtb	r1, r3
 8010690:	b909      	cbnz	r1, 8010696 <__lo0bits+0x32>
 8010692:	3208      	adds	r2, #8
 8010694:	0a1b      	lsrs	r3, r3, #8
 8010696:	0719      	lsls	r1, r3, #28
 8010698:	bf04      	itt	eq
 801069a:	091b      	lsreq	r3, r3, #4
 801069c:	3204      	addeq	r2, #4
 801069e:	0799      	lsls	r1, r3, #30
 80106a0:	bf04      	itt	eq
 80106a2:	089b      	lsreq	r3, r3, #2
 80106a4:	3202      	addeq	r2, #2
 80106a6:	07d9      	lsls	r1, r3, #31
 80106a8:	d403      	bmi.n	80106b2 <__lo0bits+0x4e>
 80106aa:	085b      	lsrs	r3, r3, #1
 80106ac:	f102 0201 	add.w	r2, r2, #1
 80106b0:	d003      	beq.n	80106ba <__lo0bits+0x56>
 80106b2:	6003      	str	r3, [r0, #0]
 80106b4:	e7e5      	b.n	8010682 <__lo0bits+0x1e>
 80106b6:	2200      	movs	r2, #0
 80106b8:	e7e3      	b.n	8010682 <__lo0bits+0x1e>
 80106ba:	2220      	movs	r2, #32
 80106bc:	e7e1      	b.n	8010682 <__lo0bits+0x1e>
	...

080106c0 <__i2b>:
 80106c0:	b510      	push	{r4, lr}
 80106c2:	460c      	mov	r4, r1
 80106c4:	2101      	movs	r1, #1
 80106c6:	f7ff ff05 	bl	80104d4 <_Balloc>
 80106ca:	4602      	mov	r2, r0
 80106cc:	b928      	cbnz	r0, 80106da <__i2b+0x1a>
 80106ce:	4b05      	ldr	r3, [pc, #20]	; (80106e4 <__i2b+0x24>)
 80106d0:	4805      	ldr	r0, [pc, #20]	; (80106e8 <__i2b+0x28>)
 80106d2:	f240 1145 	movw	r1, #325	; 0x145
 80106d6:	f000 fe71 	bl	80113bc <__assert_func>
 80106da:	2301      	movs	r3, #1
 80106dc:	6144      	str	r4, [r0, #20]
 80106de:	6103      	str	r3, [r0, #16]
 80106e0:	bd10      	pop	{r4, pc}
 80106e2:	bf00      	nop
 80106e4:	08012048 	.word	0x08012048
 80106e8:	08012059 	.word	0x08012059

080106ec <__multiply>:
 80106ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106f0:	4691      	mov	r9, r2
 80106f2:	690a      	ldr	r2, [r1, #16]
 80106f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80106f8:	429a      	cmp	r2, r3
 80106fa:	bfb8      	it	lt
 80106fc:	460b      	movlt	r3, r1
 80106fe:	460c      	mov	r4, r1
 8010700:	bfbc      	itt	lt
 8010702:	464c      	movlt	r4, r9
 8010704:	4699      	movlt	r9, r3
 8010706:	6927      	ldr	r7, [r4, #16]
 8010708:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801070c:	68a3      	ldr	r3, [r4, #8]
 801070e:	6861      	ldr	r1, [r4, #4]
 8010710:	eb07 060a 	add.w	r6, r7, sl
 8010714:	42b3      	cmp	r3, r6
 8010716:	b085      	sub	sp, #20
 8010718:	bfb8      	it	lt
 801071a:	3101      	addlt	r1, #1
 801071c:	f7ff feda 	bl	80104d4 <_Balloc>
 8010720:	b930      	cbnz	r0, 8010730 <__multiply+0x44>
 8010722:	4602      	mov	r2, r0
 8010724:	4b44      	ldr	r3, [pc, #272]	; (8010838 <__multiply+0x14c>)
 8010726:	4845      	ldr	r0, [pc, #276]	; (801083c <__multiply+0x150>)
 8010728:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801072c:	f000 fe46 	bl	80113bc <__assert_func>
 8010730:	f100 0514 	add.w	r5, r0, #20
 8010734:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010738:	462b      	mov	r3, r5
 801073a:	2200      	movs	r2, #0
 801073c:	4543      	cmp	r3, r8
 801073e:	d321      	bcc.n	8010784 <__multiply+0x98>
 8010740:	f104 0314 	add.w	r3, r4, #20
 8010744:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010748:	f109 0314 	add.w	r3, r9, #20
 801074c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010750:	9202      	str	r2, [sp, #8]
 8010752:	1b3a      	subs	r2, r7, r4
 8010754:	3a15      	subs	r2, #21
 8010756:	f022 0203 	bic.w	r2, r2, #3
 801075a:	3204      	adds	r2, #4
 801075c:	f104 0115 	add.w	r1, r4, #21
 8010760:	428f      	cmp	r7, r1
 8010762:	bf38      	it	cc
 8010764:	2204      	movcc	r2, #4
 8010766:	9201      	str	r2, [sp, #4]
 8010768:	9a02      	ldr	r2, [sp, #8]
 801076a:	9303      	str	r3, [sp, #12]
 801076c:	429a      	cmp	r2, r3
 801076e:	d80c      	bhi.n	801078a <__multiply+0x9e>
 8010770:	2e00      	cmp	r6, #0
 8010772:	dd03      	ble.n	801077c <__multiply+0x90>
 8010774:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010778:	2b00      	cmp	r3, #0
 801077a:	d05b      	beq.n	8010834 <__multiply+0x148>
 801077c:	6106      	str	r6, [r0, #16]
 801077e:	b005      	add	sp, #20
 8010780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010784:	f843 2b04 	str.w	r2, [r3], #4
 8010788:	e7d8      	b.n	801073c <__multiply+0x50>
 801078a:	f8b3 a000 	ldrh.w	sl, [r3]
 801078e:	f1ba 0f00 	cmp.w	sl, #0
 8010792:	d024      	beq.n	80107de <__multiply+0xf2>
 8010794:	f104 0e14 	add.w	lr, r4, #20
 8010798:	46a9      	mov	r9, r5
 801079a:	f04f 0c00 	mov.w	ip, #0
 801079e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80107a2:	f8d9 1000 	ldr.w	r1, [r9]
 80107a6:	fa1f fb82 	uxth.w	fp, r2
 80107aa:	b289      	uxth	r1, r1
 80107ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80107b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80107b4:	f8d9 2000 	ldr.w	r2, [r9]
 80107b8:	4461      	add	r1, ip
 80107ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80107be:	fb0a c20b 	mla	r2, sl, fp, ip
 80107c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80107c6:	b289      	uxth	r1, r1
 80107c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80107cc:	4577      	cmp	r7, lr
 80107ce:	f849 1b04 	str.w	r1, [r9], #4
 80107d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80107d6:	d8e2      	bhi.n	801079e <__multiply+0xb2>
 80107d8:	9a01      	ldr	r2, [sp, #4]
 80107da:	f845 c002 	str.w	ip, [r5, r2]
 80107de:	9a03      	ldr	r2, [sp, #12]
 80107e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80107e4:	3304      	adds	r3, #4
 80107e6:	f1b9 0f00 	cmp.w	r9, #0
 80107ea:	d021      	beq.n	8010830 <__multiply+0x144>
 80107ec:	6829      	ldr	r1, [r5, #0]
 80107ee:	f104 0c14 	add.w	ip, r4, #20
 80107f2:	46ae      	mov	lr, r5
 80107f4:	f04f 0a00 	mov.w	sl, #0
 80107f8:	f8bc b000 	ldrh.w	fp, [ip]
 80107fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010800:	fb09 220b 	mla	r2, r9, fp, r2
 8010804:	4452      	add	r2, sl
 8010806:	b289      	uxth	r1, r1
 8010808:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801080c:	f84e 1b04 	str.w	r1, [lr], #4
 8010810:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010814:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010818:	f8be 1000 	ldrh.w	r1, [lr]
 801081c:	fb09 110a 	mla	r1, r9, sl, r1
 8010820:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010824:	4567      	cmp	r7, ip
 8010826:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801082a:	d8e5      	bhi.n	80107f8 <__multiply+0x10c>
 801082c:	9a01      	ldr	r2, [sp, #4]
 801082e:	50a9      	str	r1, [r5, r2]
 8010830:	3504      	adds	r5, #4
 8010832:	e799      	b.n	8010768 <__multiply+0x7c>
 8010834:	3e01      	subs	r6, #1
 8010836:	e79b      	b.n	8010770 <__multiply+0x84>
 8010838:	08012048 	.word	0x08012048
 801083c:	08012059 	.word	0x08012059

08010840 <__pow5mult>:
 8010840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010844:	4615      	mov	r5, r2
 8010846:	f012 0203 	ands.w	r2, r2, #3
 801084a:	4606      	mov	r6, r0
 801084c:	460f      	mov	r7, r1
 801084e:	d007      	beq.n	8010860 <__pow5mult+0x20>
 8010850:	4c25      	ldr	r4, [pc, #148]	; (80108e8 <__pow5mult+0xa8>)
 8010852:	3a01      	subs	r2, #1
 8010854:	2300      	movs	r3, #0
 8010856:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801085a:	f7ff fe9d 	bl	8010598 <__multadd>
 801085e:	4607      	mov	r7, r0
 8010860:	10ad      	asrs	r5, r5, #2
 8010862:	d03d      	beq.n	80108e0 <__pow5mult+0xa0>
 8010864:	69f4      	ldr	r4, [r6, #28]
 8010866:	b97c      	cbnz	r4, 8010888 <__pow5mult+0x48>
 8010868:	2010      	movs	r0, #16
 801086a:	f7ff fd7f 	bl	801036c <malloc>
 801086e:	4602      	mov	r2, r0
 8010870:	61f0      	str	r0, [r6, #28]
 8010872:	b928      	cbnz	r0, 8010880 <__pow5mult+0x40>
 8010874:	4b1d      	ldr	r3, [pc, #116]	; (80108ec <__pow5mult+0xac>)
 8010876:	481e      	ldr	r0, [pc, #120]	; (80108f0 <__pow5mult+0xb0>)
 8010878:	f240 11b3 	movw	r1, #435	; 0x1b3
 801087c:	f000 fd9e 	bl	80113bc <__assert_func>
 8010880:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010884:	6004      	str	r4, [r0, #0]
 8010886:	60c4      	str	r4, [r0, #12]
 8010888:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801088c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010890:	b94c      	cbnz	r4, 80108a6 <__pow5mult+0x66>
 8010892:	f240 2171 	movw	r1, #625	; 0x271
 8010896:	4630      	mov	r0, r6
 8010898:	f7ff ff12 	bl	80106c0 <__i2b>
 801089c:	2300      	movs	r3, #0
 801089e:	f8c8 0008 	str.w	r0, [r8, #8]
 80108a2:	4604      	mov	r4, r0
 80108a4:	6003      	str	r3, [r0, #0]
 80108a6:	f04f 0900 	mov.w	r9, #0
 80108aa:	07eb      	lsls	r3, r5, #31
 80108ac:	d50a      	bpl.n	80108c4 <__pow5mult+0x84>
 80108ae:	4639      	mov	r1, r7
 80108b0:	4622      	mov	r2, r4
 80108b2:	4630      	mov	r0, r6
 80108b4:	f7ff ff1a 	bl	80106ec <__multiply>
 80108b8:	4639      	mov	r1, r7
 80108ba:	4680      	mov	r8, r0
 80108bc:	4630      	mov	r0, r6
 80108be:	f7ff fe49 	bl	8010554 <_Bfree>
 80108c2:	4647      	mov	r7, r8
 80108c4:	106d      	asrs	r5, r5, #1
 80108c6:	d00b      	beq.n	80108e0 <__pow5mult+0xa0>
 80108c8:	6820      	ldr	r0, [r4, #0]
 80108ca:	b938      	cbnz	r0, 80108dc <__pow5mult+0x9c>
 80108cc:	4622      	mov	r2, r4
 80108ce:	4621      	mov	r1, r4
 80108d0:	4630      	mov	r0, r6
 80108d2:	f7ff ff0b 	bl	80106ec <__multiply>
 80108d6:	6020      	str	r0, [r4, #0]
 80108d8:	f8c0 9000 	str.w	r9, [r0]
 80108dc:	4604      	mov	r4, r0
 80108de:	e7e4      	b.n	80108aa <__pow5mult+0x6a>
 80108e0:	4638      	mov	r0, r7
 80108e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108e6:	bf00      	nop
 80108e8:	080121a8 	.word	0x080121a8
 80108ec:	08011fd9 	.word	0x08011fd9
 80108f0:	08012059 	.word	0x08012059

080108f4 <__lshift>:
 80108f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108f8:	460c      	mov	r4, r1
 80108fa:	6849      	ldr	r1, [r1, #4]
 80108fc:	6923      	ldr	r3, [r4, #16]
 80108fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010902:	68a3      	ldr	r3, [r4, #8]
 8010904:	4607      	mov	r7, r0
 8010906:	4691      	mov	r9, r2
 8010908:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801090c:	f108 0601 	add.w	r6, r8, #1
 8010910:	42b3      	cmp	r3, r6
 8010912:	db0b      	blt.n	801092c <__lshift+0x38>
 8010914:	4638      	mov	r0, r7
 8010916:	f7ff fddd 	bl	80104d4 <_Balloc>
 801091a:	4605      	mov	r5, r0
 801091c:	b948      	cbnz	r0, 8010932 <__lshift+0x3e>
 801091e:	4602      	mov	r2, r0
 8010920:	4b28      	ldr	r3, [pc, #160]	; (80109c4 <__lshift+0xd0>)
 8010922:	4829      	ldr	r0, [pc, #164]	; (80109c8 <__lshift+0xd4>)
 8010924:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010928:	f000 fd48 	bl	80113bc <__assert_func>
 801092c:	3101      	adds	r1, #1
 801092e:	005b      	lsls	r3, r3, #1
 8010930:	e7ee      	b.n	8010910 <__lshift+0x1c>
 8010932:	2300      	movs	r3, #0
 8010934:	f100 0114 	add.w	r1, r0, #20
 8010938:	f100 0210 	add.w	r2, r0, #16
 801093c:	4618      	mov	r0, r3
 801093e:	4553      	cmp	r3, sl
 8010940:	db33      	blt.n	80109aa <__lshift+0xb6>
 8010942:	6920      	ldr	r0, [r4, #16]
 8010944:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010948:	f104 0314 	add.w	r3, r4, #20
 801094c:	f019 091f 	ands.w	r9, r9, #31
 8010950:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010954:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010958:	d02b      	beq.n	80109b2 <__lshift+0xbe>
 801095a:	f1c9 0e20 	rsb	lr, r9, #32
 801095e:	468a      	mov	sl, r1
 8010960:	2200      	movs	r2, #0
 8010962:	6818      	ldr	r0, [r3, #0]
 8010964:	fa00 f009 	lsl.w	r0, r0, r9
 8010968:	4310      	orrs	r0, r2
 801096a:	f84a 0b04 	str.w	r0, [sl], #4
 801096e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010972:	459c      	cmp	ip, r3
 8010974:	fa22 f20e 	lsr.w	r2, r2, lr
 8010978:	d8f3      	bhi.n	8010962 <__lshift+0x6e>
 801097a:	ebac 0304 	sub.w	r3, ip, r4
 801097e:	3b15      	subs	r3, #21
 8010980:	f023 0303 	bic.w	r3, r3, #3
 8010984:	3304      	adds	r3, #4
 8010986:	f104 0015 	add.w	r0, r4, #21
 801098a:	4584      	cmp	ip, r0
 801098c:	bf38      	it	cc
 801098e:	2304      	movcc	r3, #4
 8010990:	50ca      	str	r2, [r1, r3]
 8010992:	b10a      	cbz	r2, 8010998 <__lshift+0xa4>
 8010994:	f108 0602 	add.w	r6, r8, #2
 8010998:	3e01      	subs	r6, #1
 801099a:	4638      	mov	r0, r7
 801099c:	612e      	str	r6, [r5, #16]
 801099e:	4621      	mov	r1, r4
 80109a0:	f7ff fdd8 	bl	8010554 <_Bfree>
 80109a4:	4628      	mov	r0, r5
 80109a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80109ae:	3301      	adds	r3, #1
 80109b0:	e7c5      	b.n	801093e <__lshift+0x4a>
 80109b2:	3904      	subs	r1, #4
 80109b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80109b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80109bc:	459c      	cmp	ip, r3
 80109be:	d8f9      	bhi.n	80109b4 <__lshift+0xc0>
 80109c0:	e7ea      	b.n	8010998 <__lshift+0xa4>
 80109c2:	bf00      	nop
 80109c4:	08012048 	.word	0x08012048
 80109c8:	08012059 	.word	0x08012059

080109cc <__mcmp>:
 80109cc:	b530      	push	{r4, r5, lr}
 80109ce:	6902      	ldr	r2, [r0, #16]
 80109d0:	690c      	ldr	r4, [r1, #16]
 80109d2:	1b12      	subs	r2, r2, r4
 80109d4:	d10e      	bne.n	80109f4 <__mcmp+0x28>
 80109d6:	f100 0314 	add.w	r3, r0, #20
 80109da:	3114      	adds	r1, #20
 80109dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80109e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80109e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80109e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80109ec:	42a5      	cmp	r5, r4
 80109ee:	d003      	beq.n	80109f8 <__mcmp+0x2c>
 80109f0:	d305      	bcc.n	80109fe <__mcmp+0x32>
 80109f2:	2201      	movs	r2, #1
 80109f4:	4610      	mov	r0, r2
 80109f6:	bd30      	pop	{r4, r5, pc}
 80109f8:	4283      	cmp	r3, r0
 80109fa:	d3f3      	bcc.n	80109e4 <__mcmp+0x18>
 80109fc:	e7fa      	b.n	80109f4 <__mcmp+0x28>
 80109fe:	f04f 32ff 	mov.w	r2, #4294967295
 8010a02:	e7f7      	b.n	80109f4 <__mcmp+0x28>

08010a04 <__mdiff>:
 8010a04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a08:	460c      	mov	r4, r1
 8010a0a:	4606      	mov	r6, r0
 8010a0c:	4611      	mov	r1, r2
 8010a0e:	4620      	mov	r0, r4
 8010a10:	4690      	mov	r8, r2
 8010a12:	f7ff ffdb 	bl	80109cc <__mcmp>
 8010a16:	1e05      	subs	r5, r0, #0
 8010a18:	d110      	bne.n	8010a3c <__mdiff+0x38>
 8010a1a:	4629      	mov	r1, r5
 8010a1c:	4630      	mov	r0, r6
 8010a1e:	f7ff fd59 	bl	80104d4 <_Balloc>
 8010a22:	b930      	cbnz	r0, 8010a32 <__mdiff+0x2e>
 8010a24:	4b3a      	ldr	r3, [pc, #232]	; (8010b10 <__mdiff+0x10c>)
 8010a26:	4602      	mov	r2, r0
 8010a28:	f240 2137 	movw	r1, #567	; 0x237
 8010a2c:	4839      	ldr	r0, [pc, #228]	; (8010b14 <__mdiff+0x110>)
 8010a2e:	f000 fcc5 	bl	80113bc <__assert_func>
 8010a32:	2301      	movs	r3, #1
 8010a34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010a38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a3c:	bfa4      	itt	ge
 8010a3e:	4643      	movge	r3, r8
 8010a40:	46a0      	movge	r8, r4
 8010a42:	4630      	mov	r0, r6
 8010a44:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010a48:	bfa6      	itte	ge
 8010a4a:	461c      	movge	r4, r3
 8010a4c:	2500      	movge	r5, #0
 8010a4e:	2501      	movlt	r5, #1
 8010a50:	f7ff fd40 	bl	80104d4 <_Balloc>
 8010a54:	b920      	cbnz	r0, 8010a60 <__mdiff+0x5c>
 8010a56:	4b2e      	ldr	r3, [pc, #184]	; (8010b10 <__mdiff+0x10c>)
 8010a58:	4602      	mov	r2, r0
 8010a5a:	f240 2145 	movw	r1, #581	; 0x245
 8010a5e:	e7e5      	b.n	8010a2c <__mdiff+0x28>
 8010a60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010a64:	6926      	ldr	r6, [r4, #16]
 8010a66:	60c5      	str	r5, [r0, #12]
 8010a68:	f104 0914 	add.w	r9, r4, #20
 8010a6c:	f108 0514 	add.w	r5, r8, #20
 8010a70:	f100 0e14 	add.w	lr, r0, #20
 8010a74:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010a78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010a7c:	f108 0210 	add.w	r2, r8, #16
 8010a80:	46f2      	mov	sl, lr
 8010a82:	2100      	movs	r1, #0
 8010a84:	f859 3b04 	ldr.w	r3, [r9], #4
 8010a88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010a8c:	fa11 f88b 	uxtah	r8, r1, fp
 8010a90:	b299      	uxth	r1, r3
 8010a92:	0c1b      	lsrs	r3, r3, #16
 8010a94:	eba8 0801 	sub.w	r8, r8, r1
 8010a98:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010a9c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010aa0:	fa1f f888 	uxth.w	r8, r8
 8010aa4:	1419      	asrs	r1, r3, #16
 8010aa6:	454e      	cmp	r6, r9
 8010aa8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010aac:	f84a 3b04 	str.w	r3, [sl], #4
 8010ab0:	d8e8      	bhi.n	8010a84 <__mdiff+0x80>
 8010ab2:	1b33      	subs	r3, r6, r4
 8010ab4:	3b15      	subs	r3, #21
 8010ab6:	f023 0303 	bic.w	r3, r3, #3
 8010aba:	3304      	adds	r3, #4
 8010abc:	3415      	adds	r4, #21
 8010abe:	42a6      	cmp	r6, r4
 8010ac0:	bf38      	it	cc
 8010ac2:	2304      	movcc	r3, #4
 8010ac4:	441d      	add	r5, r3
 8010ac6:	4473      	add	r3, lr
 8010ac8:	469e      	mov	lr, r3
 8010aca:	462e      	mov	r6, r5
 8010acc:	4566      	cmp	r6, ip
 8010ace:	d30e      	bcc.n	8010aee <__mdiff+0xea>
 8010ad0:	f10c 0203 	add.w	r2, ip, #3
 8010ad4:	1b52      	subs	r2, r2, r5
 8010ad6:	f022 0203 	bic.w	r2, r2, #3
 8010ada:	3d03      	subs	r5, #3
 8010adc:	45ac      	cmp	ip, r5
 8010ade:	bf38      	it	cc
 8010ae0:	2200      	movcc	r2, #0
 8010ae2:	4413      	add	r3, r2
 8010ae4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010ae8:	b17a      	cbz	r2, 8010b0a <__mdiff+0x106>
 8010aea:	6107      	str	r7, [r0, #16]
 8010aec:	e7a4      	b.n	8010a38 <__mdiff+0x34>
 8010aee:	f856 8b04 	ldr.w	r8, [r6], #4
 8010af2:	fa11 f288 	uxtah	r2, r1, r8
 8010af6:	1414      	asrs	r4, r2, #16
 8010af8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010afc:	b292      	uxth	r2, r2
 8010afe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010b02:	f84e 2b04 	str.w	r2, [lr], #4
 8010b06:	1421      	asrs	r1, r4, #16
 8010b08:	e7e0      	b.n	8010acc <__mdiff+0xc8>
 8010b0a:	3f01      	subs	r7, #1
 8010b0c:	e7ea      	b.n	8010ae4 <__mdiff+0xe0>
 8010b0e:	bf00      	nop
 8010b10:	08012048 	.word	0x08012048
 8010b14:	08012059 	.word	0x08012059

08010b18 <__d2b>:
 8010b18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010b1c:	460f      	mov	r7, r1
 8010b1e:	2101      	movs	r1, #1
 8010b20:	ec59 8b10 	vmov	r8, r9, d0
 8010b24:	4616      	mov	r6, r2
 8010b26:	f7ff fcd5 	bl	80104d4 <_Balloc>
 8010b2a:	4604      	mov	r4, r0
 8010b2c:	b930      	cbnz	r0, 8010b3c <__d2b+0x24>
 8010b2e:	4602      	mov	r2, r0
 8010b30:	4b24      	ldr	r3, [pc, #144]	; (8010bc4 <__d2b+0xac>)
 8010b32:	4825      	ldr	r0, [pc, #148]	; (8010bc8 <__d2b+0xb0>)
 8010b34:	f240 310f 	movw	r1, #783	; 0x30f
 8010b38:	f000 fc40 	bl	80113bc <__assert_func>
 8010b3c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010b40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010b44:	bb2d      	cbnz	r5, 8010b92 <__d2b+0x7a>
 8010b46:	9301      	str	r3, [sp, #4]
 8010b48:	f1b8 0300 	subs.w	r3, r8, #0
 8010b4c:	d026      	beq.n	8010b9c <__d2b+0x84>
 8010b4e:	4668      	mov	r0, sp
 8010b50:	9300      	str	r3, [sp, #0]
 8010b52:	f7ff fd87 	bl	8010664 <__lo0bits>
 8010b56:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010b5a:	b1e8      	cbz	r0, 8010b98 <__d2b+0x80>
 8010b5c:	f1c0 0320 	rsb	r3, r0, #32
 8010b60:	fa02 f303 	lsl.w	r3, r2, r3
 8010b64:	430b      	orrs	r3, r1
 8010b66:	40c2      	lsrs	r2, r0
 8010b68:	6163      	str	r3, [r4, #20]
 8010b6a:	9201      	str	r2, [sp, #4]
 8010b6c:	9b01      	ldr	r3, [sp, #4]
 8010b6e:	61a3      	str	r3, [r4, #24]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	bf14      	ite	ne
 8010b74:	2202      	movne	r2, #2
 8010b76:	2201      	moveq	r2, #1
 8010b78:	6122      	str	r2, [r4, #16]
 8010b7a:	b1bd      	cbz	r5, 8010bac <__d2b+0x94>
 8010b7c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010b80:	4405      	add	r5, r0
 8010b82:	603d      	str	r5, [r7, #0]
 8010b84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010b88:	6030      	str	r0, [r6, #0]
 8010b8a:	4620      	mov	r0, r4
 8010b8c:	b003      	add	sp, #12
 8010b8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010b96:	e7d6      	b.n	8010b46 <__d2b+0x2e>
 8010b98:	6161      	str	r1, [r4, #20]
 8010b9a:	e7e7      	b.n	8010b6c <__d2b+0x54>
 8010b9c:	a801      	add	r0, sp, #4
 8010b9e:	f7ff fd61 	bl	8010664 <__lo0bits>
 8010ba2:	9b01      	ldr	r3, [sp, #4]
 8010ba4:	6163      	str	r3, [r4, #20]
 8010ba6:	3020      	adds	r0, #32
 8010ba8:	2201      	movs	r2, #1
 8010baa:	e7e5      	b.n	8010b78 <__d2b+0x60>
 8010bac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010bb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010bb4:	6038      	str	r0, [r7, #0]
 8010bb6:	6918      	ldr	r0, [r3, #16]
 8010bb8:	f7ff fd34 	bl	8010624 <__hi0bits>
 8010bbc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010bc0:	e7e2      	b.n	8010b88 <__d2b+0x70>
 8010bc2:	bf00      	nop
 8010bc4:	08012048 	.word	0x08012048
 8010bc8:	08012059 	.word	0x08012059

08010bcc <__ssputs_r>:
 8010bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010bd0:	688e      	ldr	r6, [r1, #8]
 8010bd2:	461f      	mov	r7, r3
 8010bd4:	42be      	cmp	r6, r7
 8010bd6:	680b      	ldr	r3, [r1, #0]
 8010bd8:	4682      	mov	sl, r0
 8010bda:	460c      	mov	r4, r1
 8010bdc:	4690      	mov	r8, r2
 8010bde:	d82c      	bhi.n	8010c3a <__ssputs_r+0x6e>
 8010be0:	898a      	ldrh	r2, [r1, #12]
 8010be2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010be6:	d026      	beq.n	8010c36 <__ssputs_r+0x6a>
 8010be8:	6965      	ldr	r5, [r4, #20]
 8010bea:	6909      	ldr	r1, [r1, #16]
 8010bec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010bf0:	eba3 0901 	sub.w	r9, r3, r1
 8010bf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010bf8:	1c7b      	adds	r3, r7, #1
 8010bfa:	444b      	add	r3, r9
 8010bfc:	106d      	asrs	r5, r5, #1
 8010bfe:	429d      	cmp	r5, r3
 8010c00:	bf38      	it	cc
 8010c02:	461d      	movcc	r5, r3
 8010c04:	0553      	lsls	r3, r2, #21
 8010c06:	d527      	bpl.n	8010c58 <__ssputs_r+0x8c>
 8010c08:	4629      	mov	r1, r5
 8010c0a:	f7ff fbd7 	bl	80103bc <_malloc_r>
 8010c0e:	4606      	mov	r6, r0
 8010c10:	b360      	cbz	r0, 8010c6c <__ssputs_r+0xa0>
 8010c12:	6921      	ldr	r1, [r4, #16]
 8010c14:	464a      	mov	r2, r9
 8010c16:	f7fe fcd5 	bl	800f5c4 <memcpy>
 8010c1a:	89a3      	ldrh	r3, [r4, #12]
 8010c1c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c24:	81a3      	strh	r3, [r4, #12]
 8010c26:	6126      	str	r6, [r4, #16]
 8010c28:	6165      	str	r5, [r4, #20]
 8010c2a:	444e      	add	r6, r9
 8010c2c:	eba5 0509 	sub.w	r5, r5, r9
 8010c30:	6026      	str	r6, [r4, #0]
 8010c32:	60a5      	str	r5, [r4, #8]
 8010c34:	463e      	mov	r6, r7
 8010c36:	42be      	cmp	r6, r7
 8010c38:	d900      	bls.n	8010c3c <__ssputs_r+0x70>
 8010c3a:	463e      	mov	r6, r7
 8010c3c:	6820      	ldr	r0, [r4, #0]
 8010c3e:	4632      	mov	r2, r6
 8010c40:	4641      	mov	r1, r8
 8010c42:	f000 fb6f 	bl	8011324 <memmove>
 8010c46:	68a3      	ldr	r3, [r4, #8]
 8010c48:	1b9b      	subs	r3, r3, r6
 8010c4a:	60a3      	str	r3, [r4, #8]
 8010c4c:	6823      	ldr	r3, [r4, #0]
 8010c4e:	4433      	add	r3, r6
 8010c50:	6023      	str	r3, [r4, #0]
 8010c52:	2000      	movs	r0, #0
 8010c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c58:	462a      	mov	r2, r5
 8010c5a:	f000 fbf5 	bl	8011448 <_realloc_r>
 8010c5e:	4606      	mov	r6, r0
 8010c60:	2800      	cmp	r0, #0
 8010c62:	d1e0      	bne.n	8010c26 <__ssputs_r+0x5a>
 8010c64:	6921      	ldr	r1, [r4, #16]
 8010c66:	4650      	mov	r0, sl
 8010c68:	f7ff fb34 	bl	80102d4 <_free_r>
 8010c6c:	230c      	movs	r3, #12
 8010c6e:	f8ca 3000 	str.w	r3, [sl]
 8010c72:	89a3      	ldrh	r3, [r4, #12]
 8010c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c78:	81a3      	strh	r3, [r4, #12]
 8010c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8010c7e:	e7e9      	b.n	8010c54 <__ssputs_r+0x88>

08010c80 <_svfiprintf_r>:
 8010c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c84:	4698      	mov	r8, r3
 8010c86:	898b      	ldrh	r3, [r1, #12]
 8010c88:	061b      	lsls	r3, r3, #24
 8010c8a:	b09d      	sub	sp, #116	; 0x74
 8010c8c:	4607      	mov	r7, r0
 8010c8e:	460d      	mov	r5, r1
 8010c90:	4614      	mov	r4, r2
 8010c92:	d50e      	bpl.n	8010cb2 <_svfiprintf_r+0x32>
 8010c94:	690b      	ldr	r3, [r1, #16]
 8010c96:	b963      	cbnz	r3, 8010cb2 <_svfiprintf_r+0x32>
 8010c98:	2140      	movs	r1, #64	; 0x40
 8010c9a:	f7ff fb8f 	bl	80103bc <_malloc_r>
 8010c9e:	6028      	str	r0, [r5, #0]
 8010ca0:	6128      	str	r0, [r5, #16]
 8010ca2:	b920      	cbnz	r0, 8010cae <_svfiprintf_r+0x2e>
 8010ca4:	230c      	movs	r3, #12
 8010ca6:	603b      	str	r3, [r7, #0]
 8010ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8010cac:	e0d0      	b.n	8010e50 <_svfiprintf_r+0x1d0>
 8010cae:	2340      	movs	r3, #64	; 0x40
 8010cb0:	616b      	str	r3, [r5, #20]
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8010cb6:	2320      	movs	r3, #32
 8010cb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010cbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8010cc0:	2330      	movs	r3, #48	; 0x30
 8010cc2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010e68 <_svfiprintf_r+0x1e8>
 8010cc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010cca:	f04f 0901 	mov.w	r9, #1
 8010cce:	4623      	mov	r3, r4
 8010cd0:	469a      	mov	sl, r3
 8010cd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010cd6:	b10a      	cbz	r2, 8010cdc <_svfiprintf_r+0x5c>
 8010cd8:	2a25      	cmp	r2, #37	; 0x25
 8010cda:	d1f9      	bne.n	8010cd0 <_svfiprintf_r+0x50>
 8010cdc:	ebba 0b04 	subs.w	fp, sl, r4
 8010ce0:	d00b      	beq.n	8010cfa <_svfiprintf_r+0x7a>
 8010ce2:	465b      	mov	r3, fp
 8010ce4:	4622      	mov	r2, r4
 8010ce6:	4629      	mov	r1, r5
 8010ce8:	4638      	mov	r0, r7
 8010cea:	f7ff ff6f 	bl	8010bcc <__ssputs_r>
 8010cee:	3001      	adds	r0, #1
 8010cf0:	f000 80a9 	beq.w	8010e46 <_svfiprintf_r+0x1c6>
 8010cf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010cf6:	445a      	add	r2, fp
 8010cf8:	9209      	str	r2, [sp, #36]	; 0x24
 8010cfa:	f89a 3000 	ldrb.w	r3, [sl]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	f000 80a1 	beq.w	8010e46 <_svfiprintf_r+0x1c6>
 8010d04:	2300      	movs	r3, #0
 8010d06:	f04f 32ff 	mov.w	r2, #4294967295
 8010d0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d0e:	f10a 0a01 	add.w	sl, sl, #1
 8010d12:	9304      	str	r3, [sp, #16]
 8010d14:	9307      	str	r3, [sp, #28]
 8010d16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010d1a:	931a      	str	r3, [sp, #104]	; 0x68
 8010d1c:	4654      	mov	r4, sl
 8010d1e:	2205      	movs	r2, #5
 8010d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d24:	4850      	ldr	r0, [pc, #320]	; (8010e68 <_svfiprintf_r+0x1e8>)
 8010d26:	f7ef fa83 	bl	8000230 <memchr>
 8010d2a:	9a04      	ldr	r2, [sp, #16]
 8010d2c:	b9d8      	cbnz	r0, 8010d66 <_svfiprintf_r+0xe6>
 8010d2e:	06d0      	lsls	r0, r2, #27
 8010d30:	bf44      	itt	mi
 8010d32:	2320      	movmi	r3, #32
 8010d34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d38:	0711      	lsls	r1, r2, #28
 8010d3a:	bf44      	itt	mi
 8010d3c:	232b      	movmi	r3, #43	; 0x2b
 8010d3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d42:	f89a 3000 	ldrb.w	r3, [sl]
 8010d46:	2b2a      	cmp	r3, #42	; 0x2a
 8010d48:	d015      	beq.n	8010d76 <_svfiprintf_r+0xf6>
 8010d4a:	9a07      	ldr	r2, [sp, #28]
 8010d4c:	4654      	mov	r4, sl
 8010d4e:	2000      	movs	r0, #0
 8010d50:	f04f 0c0a 	mov.w	ip, #10
 8010d54:	4621      	mov	r1, r4
 8010d56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d5a:	3b30      	subs	r3, #48	; 0x30
 8010d5c:	2b09      	cmp	r3, #9
 8010d5e:	d94d      	bls.n	8010dfc <_svfiprintf_r+0x17c>
 8010d60:	b1b0      	cbz	r0, 8010d90 <_svfiprintf_r+0x110>
 8010d62:	9207      	str	r2, [sp, #28]
 8010d64:	e014      	b.n	8010d90 <_svfiprintf_r+0x110>
 8010d66:	eba0 0308 	sub.w	r3, r0, r8
 8010d6a:	fa09 f303 	lsl.w	r3, r9, r3
 8010d6e:	4313      	orrs	r3, r2
 8010d70:	9304      	str	r3, [sp, #16]
 8010d72:	46a2      	mov	sl, r4
 8010d74:	e7d2      	b.n	8010d1c <_svfiprintf_r+0x9c>
 8010d76:	9b03      	ldr	r3, [sp, #12]
 8010d78:	1d19      	adds	r1, r3, #4
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	9103      	str	r1, [sp, #12]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	bfbb      	ittet	lt
 8010d82:	425b      	neglt	r3, r3
 8010d84:	f042 0202 	orrlt.w	r2, r2, #2
 8010d88:	9307      	strge	r3, [sp, #28]
 8010d8a:	9307      	strlt	r3, [sp, #28]
 8010d8c:	bfb8      	it	lt
 8010d8e:	9204      	strlt	r2, [sp, #16]
 8010d90:	7823      	ldrb	r3, [r4, #0]
 8010d92:	2b2e      	cmp	r3, #46	; 0x2e
 8010d94:	d10c      	bne.n	8010db0 <_svfiprintf_r+0x130>
 8010d96:	7863      	ldrb	r3, [r4, #1]
 8010d98:	2b2a      	cmp	r3, #42	; 0x2a
 8010d9a:	d134      	bne.n	8010e06 <_svfiprintf_r+0x186>
 8010d9c:	9b03      	ldr	r3, [sp, #12]
 8010d9e:	1d1a      	adds	r2, r3, #4
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	9203      	str	r2, [sp, #12]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	bfb8      	it	lt
 8010da8:	f04f 33ff 	movlt.w	r3, #4294967295
 8010dac:	3402      	adds	r4, #2
 8010dae:	9305      	str	r3, [sp, #20]
 8010db0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010e78 <_svfiprintf_r+0x1f8>
 8010db4:	7821      	ldrb	r1, [r4, #0]
 8010db6:	2203      	movs	r2, #3
 8010db8:	4650      	mov	r0, sl
 8010dba:	f7ef fa39 	bl	8000230 <memchr>
 8010dbe:	b138      	cbz	r0, 8010dd0 <_svfiprintf_r+0x150>
 8010dc0:	9b04      	ldr	r3, [sp, #16]
 8010dc2:	eba0 000a 	sub.w	r0, r0, sl
 8010dc6:	2240      	movs	r2, #64	; 0x40
 8010dc8:	4082      	lsls	r2, r0
 8010dca:	4313      	orrs	r3, r2
 8010dcc:	3401      	adds	r4, #1
 8010dce:	9304      	str	r3, [sp, #16]
 8010dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010dd4:	4825      	ldr	r0, [pc, #148]	; (8010e6c <_svfiprintf_r+0x1ec>)
 8010dd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010dda:	2206      	movs	r2, #6
 8010ddc:	f7ef fa28 	bl	8000230 <memchr>
 8010de0:	2800      	cmp	r0, #0
 8010de2:	d038      	beq.n	8010e56 <_svfiprintf_r+0x1d6>
 8010de4:	4b22      	ldr	r3, [pc, #136]	; (8010e70 <_svfiprintf_r+0x1f0>)
 8010de6:	bb1b      	cbnz	r3, 8010e30 <_svfiprintf_r+0x1b0>
 8010de8:	9b03      	ldr	r3, [sp, #12]
 8010dea:	3307      	adds	r3, #7
 8010dec:	f023 0307 	bic.w	r3, r3, #7
 8010df0:	3308      	adds	r3, #8
 8010df2:	9303      	str	r3, [sp, #12]
 8010df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010df6:	4433      	add	r3, r6
 8010df8:	9309      	str	r3, [sp, #36]	; 0x24
 8010dfa:	e768      	b.n	8010cce <_svfiprintf_r+0x4e>
 8010dfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e00:	460c      	mov	r4, r1
 8010e02:	2001      	movs	r0, #1
 8010e04:	e7a6      	b.n	8010d54 <_svfiprintf_r+0xd4>
 8010e06:	2300      	movs	r3, #0
 8010e08:	3401      	adds	r4, #1
 8010e0a:	9305      	str	r3, [sp, #20]
 8010e0c:	4619      	mov	r1, r3
 8010e0e:	f04f 0c0a 	mov.w	ip, #10
 8010e12:	4620      	mov	r0, r4
 8010e14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e18:	3a30      	subs	r2, #48	; 0x30
 8010e1a:	2a09      	cmp	r2, #9
 8010e1c:	d903      	bls.n	8010e26 <_svfiprintf_r+0x1a6>
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d0c6      	beq.n	8010db0 <_svfiprintf_r+0x130>
 8010e22:	9105      	str	r1, [sp, #20]
 8010e24:	e7c4      	b.n	8010db0 <_svfiprintf_r+0x130>
 8010e26:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e2a:	4604      	mov	r4, r0
 8010e2c:	2301      	movs	r3, #1
 8010e2e:	e7f0      	b.n	8010e12 <_svfiprintf_r+0x192>
 8010e30:	ab03      	add	r3, sp, #12
 8010e32:	9300      	str	r3, [sp, #0]
 8010e34:	462a      	mov	r2, r5
 8010e36:	4b0f      	ldr	r3, [pc, #60]	; (8010e74 <_svfiprintf_r+0x1f4>)
 8010e38:	a904      	add	r1, sp, #16
 8010e3a:	4638      	mov	r0, r7
 8010e3c:	f7fd fcfe 	bl	800e83c <_printf_float>
 8010e40:	1c42      	adds	r2, r0, #1
 8010e42:	4606      	mov	r6, r0
 8010e44:	d1d6      	bne.n	8010df4 <_svfiprintf_r+0x174>
 8010e46:	89ab      	ldrh	r3, [r5, #12]
 8010e48:	065b      	lsls	r3, r3, #25
 8010e4a:	f53f af2d 	bmi.w	8010ca8 <_svfiprintf_r+0x28>
 8010e4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010e50:	b01d      	add	sp, #116	; 0x74
 8010e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e56:	ab03      	add	r3, sp, #12
 8010e58:	9300      	str	r3, [sp, #0]
 8010e5a:	462a      	mov	r2, r5
 8010e5c:	4b05      	ldr	r3, [pc, #20]	; (8010e74 <_svfiprintf_r+0x1f4>)
 8010e5e:	a904      	add	r1, sp, #16
 8010e60:	4638      	mov	r0, r7
 8010e62:	f7fd ff8f 	bl	800ed84 <_printf_i>
 8010e66:	e7eb      	b.n	8010e40 <_svfiprintf_r+0x1c0>
 8010e68:	080121b4 	.word	0x080121b4
 8010e6c:	080121be 	.word	0x080121be
 8010e70:	0800e83d 	.word	0x0800e83d
 8010e74:	08010bcd 	.word	0x08010bcd
 8010e78:	080121ba 	.word	0x080121ba

08010e7c <__sfputc_r>:
 8010e7c:	6893      	ldr	r3, [r2, #8]
 8010e7e:	3b01      	subs	r3, #1
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	b410      	push	{r4}
 8010e84:	6093      	str	r3, [r2, #8]
 8010e86:	da08      	bge.n	8010e9a <__sfputc_r+0x1e>
 8010e88:	6994      	ldr	r4, [r2, #24]
 8010e8a:	42a3      	cmp	r3, r4
 8010e8c:	db01      	blt.n	8010e92 <__sfputc_r+0x16>
 8010e8e:	290a      	cmp	r1, #10
 8010e90:	d103      	bne.n	8010e9a <__sfputc_r+0x1e>
 8010e92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e96:	f7fe ba18 	b.w	800f2ca <__swbuf_r>
 8010e9a:	6813      	ldr	r3, [r2, #0]
 8010e9c:	1c58      	adds	r0, r3, #1
 8010e9e:	6010      	str	r0, [r2, #0]
 8010ea0:	7019      	strb	r1, [r3, #0]
 8010ea2:	4608      	mov	r0, r1
 8010ea4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ea8:	4770      	bx	lr

08010eaa <__sfputs_r>:
 8010eaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010eac:	4606      	mov	r6, r0
 8010eae:	460f      	mov	r7, r1
 8010eb0:	4614      	mov	r4, r2
 8010eb2:	18d5      	adds	r5, r2, r3
 8010eb4:	42ac      	cmp	r4, r5
 8010eb6:	d101      	bne.n	8010ebc <__sfputs_r+0x12>
 8010eb8:	2000      	movs	r0, #0
 8010eba:	e007      	b.n	8010ecc <__sfputs_r+0x22>
 8010ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ec0:	463a      	mov	r2, r7
 8010ec2:	4630      	mov	r0, r6
 8010ec4:	f7ff ffda 	bl	8010e7c <__sfputc_r>
 8010ec8:	1c43      	adds	r3, r0, #1
 8010eca:	d1f3      	bne.n	8010eb4 <__sfputs_r+0xa>
 8010ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010ed0 <_vfiprintf_r>:
 8010ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ed4:	460d      	mov	r5, r1
 8010ed6:	b09d      	sub	sp, #116	; 0x74
 8010ed8:	4614      	mov	r4, r2
 8010eda:	4698      	mov	r8, r3
 8010edc:	4606      	mov	r6, r0
 8010ede:	b118      	cbz	r0, 8010ee8 <_vfiprintf_r+0x18>
 8010ee0:	6a03      	ldr	r3, [r0, #32]
 8010ee2:	b90b      	cbnz	r3, 8010ee8 <_vfiprintf_r+0x18>
 8010ee4:	f7fe f8ea 	bl	800f0bc <__sinit>
 8010ee8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010eea:	07d9      	lsls	r1, r3, #31
 8010eec:	d405      	bmi.n	8010efa <_vfiprintf_r+0x2a>
 8010eee:	89ab      	ldrh	r3, [r5, #12]
 8010ef0:	059a      	lsls	r2, r3, #22
 8010ef2:	d402      	bmi.n	8010efa <_vfiprintf_r+0x2a>
 8010ef4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ef6:	f7fe fb63 	bl	800f5c0 <__retarget_lock_acquire_recursive>
 8010efa:	89ab      	ldrh	r3, [r5, #12]
 8010efc:	071b      	lsls	r3, r3, #28
 8010efe:	d501      	bpl.n	8010f04 <_vfiprintf_r+0x34>
 8010f00:	692b      	ldr	r3, [r5, #16]
 8010f02:	b99b      	cbnz	r3, 8010f2c <_vfiprintf_r+0x5c>
 8010f04:	4629      	mov	r1, r5
 8010f06:	4630      	mov	r0, r6
 8010f08:	f7fe fa1c 	bl	800f344 <__swsetup_r>
 8010f0c:	b170      	cbz	r0, 8010f2c <_vfiprintf_r+0x5c>
 8010f0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010f10:	07dc      	lsls	r4, r3, #31
 8010f12:	d504      	bpl.n	8010f1e <_vfiprintf_r+0x4e>
 8010f14:	f04f 30ff 	mov.w	r0, #4294967295
 8010f18:	b01d      	add	sp, #116	; 0x74
 8010f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f1e:	89ab      	ldrh	r3, [r5, #12]
 8010f20:	0598      	lsls	r0, r3, #22
 8010f22:	d4f7      	bmi.n	8010f14 <_vfiprintf_r+0x44>
 8010f24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010f26:	f7fe fb4c 	bl	800f5c2 <__retarget_lock_release_recursive>
 8010f2a:	e7f3      	b.n	8010f14 <_vfiprintf_r+0x44>
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8010f30:	2320      	movs	r3, #32
 8010f32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010f36:	f8cd 800c 	str.w	r8, [sp, #12]
 8010f3a:	2330      	movs	r3, #48	; 0x30
 8010f3c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80110f0 <_vfiprintf_r+0x220>
 8010f40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010f44:	f04f 0901 	mov.w	r9, #1
 8010f48:	4623      	mov	r3, r4
 8010f4a:	469a      	mov	sl, r3
 8010f4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f50:	b10a      	cbz	r2, 8010f56 <_vfiprintf_r+0x86>
 8010f52:	2a25      	cmp	r2, #37	; 0x25
 8010f54:	d1f9      	bne.n	8010f4a <_vfiprintf_r+0x7a>
 8010f56:	ebba 0b04 	subs.w	fp, sl, r4
 8010f5a:	d00b      	beq.n	8010f74 <_vfiprintf_r+0xa4>
 8010f5c:	465b      	mov	r3, fp
 8010f5e:	4622      	mov	r2, r4
 8010f60:	4629      	mov	r1, r5
 8010f62:	4630      	mov	r0, r6
 8010f64:	f7ff ffa1 	bl	8010eaa <__sfputs_r>
 8010f68:	3001      	adds	r0, #1
 8010f6a:	f000 80a9 	beq.w	80110c0 <_vfiprintf_r+0x1f0>
 8010f6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f70:	445a      	add	r2, fp
 8010f72:	9209      	str	r2, [sp, #36]	; 0x24
 8010f74:	f89a 3000 	ldrb.w	r3, [sl]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	f000 80a1 	beq.w	80110c0 <_vfiprintf_r+0x1f0>
 8010f7e:	2300      	movs	r3, #0
 8010f80:	f04f 32ff 	mov.w	r2, #4294967295
 8010f84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010f88:	f10a 0a01 	add.w	sl, sl, #1
 8010f8c:	9304      	str	r3, [sp, #16]
 8010f8e:	9307      	str	r3, [sp, #28]
 8010f90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010f94:	931a      	str	r3, [sp, #104]	; 0x68
 8010f96:	4654      	mov	r4, sl
 8010f98:	2205      	movs	r2, #5
 8010f9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f9e:	4854      	ldr	r0, [pc, #336]	; (80110f0 <_vfiprintf_r+0x220>)
 8010fa0:	f7ef f946 	bl	8000230 <memchr>
 8010fa4:	9a04      	ldr	r2, [sp, #16]
 8010fa6:	b9d8      	cbnz	r0, 8010fe0 <_vfiprintf_r+0x110>
 8010fa8:	06d1      	lsls	r1, r2, #27
 8010faa:	bf44      	itt	mi
 8010fac:	2320      	movmi	r3, #32
 8010fae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010fb2:	0713      	lsls	r3, r2, #28
 8010fb4:	bf44      	itt	mi
 8010fb6:	232b      	movmi	r3, #43	; 0x2b
 8010fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010fbc:	f89a 3000 	ldrb.w	r3, [sl]
 8010fc0:	2b2a      	cmp	r3, #42	; 0x2a
 8010fc2:	d015      	beq.n	8010ff0 <_vfiprintf_r+0x120>
 8010fc4:	9a07      	ldr	r2, [sp, #28]
 8010fc6:	4654      	mov	r4, sl
 8010fc8:	2000      	movs	r0, #0
 8010fca:	f04f 0c0a 	mov.w	ip, #10
 8010fce:	4621      	mov	r1, r4
 8010fd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010fd4:	3b30      	subs	r3, #48	; 0x30
 8010fd6:	2b09      	cmp	r3, #9
 8010fd8:	d94d      	bls.n	8011076 <_vfiprintf_r+0x1a6>
 8010fda:	b1b0      	cbz	r0, 801100a <_vfiprintf_r+0x13a>
 8010fdc:	9207      	str	r2, [sp, #28]
 8010fde:	e014      	b.n	801100a <_vfiprintf_r+0x13a>
 8010fe0:	eba0 0308 	sub.w	r3, r0, r8
 8010fe4:	fa09 f303 	lsl.w	r3, r9, r3
 8010fe8:	4313      	orrs	r3, r2
 8010fea:	9304      	str	r3, [sp, #16]
 8010fec:	46a2      	mov	sl, r4
 8010fee:	e7d2      	b.n	8010f96 <_vfiprintf_r+0xc6>
 8010ff0:	9b03      	ldr	r3, [sp, #12]
 8010ff2:	1d19      	adds	r1, r3, #4
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	9103      	str	r1, [sp, #12]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	bfbb      	ittet	lt
 8010ffc:	425b      	neglt	r3, r3
 8010ffe:	f042 0202 	orrlt.w	r2, r2, #2
 8011002:	9307      	strge	r3, [sp, #28]
 8011004:	9307      	strlt	r3, [sp, #28]
 8011006:	bfb8      	it	lt
 8011008:	9204      	strlt	r2, [sp, #16]
 801100a:	7823      	ldrb	r3, [r4, #0]
 801100c:	2b2e      	cmp	r3, #46	; 0x2e
 801100e:	d10c      	bne.n	801102a <_vfiprintf_r+0x15a>
 8011010:	7863      	ldrb	r3, [r4, #1]
 8011012:	2b2a      	cmp	r3, #42	; 0x2a
 8011014:	d134      	bne.n	8011080 <_vfiprintf_r+0x1b0>
 8011016:	9b03      	ldr	r3, [sp, #12]
 8011018:	1d1a      	adds	r2, r3, #4
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	9203      	str	r2, [sp, #12]
 801101e:	2b00      	cmp	r3, #0
 8011020:	bfb8      	it	lt
 8011022:	f04f 33ff 	movlt.w	r3, #4294967295
 8011026:	3402      	adds	r4, #2
 8011028:	9305      	str	r3, [sp, #20]
 801102a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011100 <_vfiprintf_r+0x230>
 801102e:	7821      	ldrb	r1, [r4, #0]
 8011030:	2203      	movs	r2, #3
 8011032:	4650      	mov	r0, sl
 8011034:	f7ef f8fc 	bl	8000230 <memchr>
 8011038:	b138      	cbz	r0, 801104a <_vfiprintf_r+0x17a>
 801103a:	9b04      	ldr	r3, [sp, #16]
 801103c:	eba0 000a 	sub.w	r0, r0, sl
 8011040:	2240      	movs	r2, #64	; 0x40
 8011042:	4082      	lsls	r2, r0
 8011044:	4313      	orrs	r3, r2
 8011046:	3401      	adds	r4, #1
 8011048:	9304      	str	r3, [sp, #16]
 801104a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801104e:	4829      	ldr	r0, [pc, #164]	; (80110f4 <_vfiprintf_r+0x224>)
 8011050:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011054:	2206      	movs	r2, #6
 8011056:	f7ef f8eb 	bl	8000230 <memchr>
 801105a:	2800      	cmp	r0, #0
 801105c:	d03f      	beq.n	80110de <_vfiprintf_r+0x20e>
 801105e:	4b26      	ldr	r3, [pc, #152]	; (80110f8 <_vfiprintf_r+0x228>)
 8011060:	bb1b      	cbnz	r3, 80110aa <_vfiprintf_r+0x1da>
 8011062:	9b03      	ldr	r3, [sp, #12]
 8011064:	3307      	adds	r3, #7
 8011066:	f023 0307 	bic.w	r3, r3, #7
 801106a:	3308      	adds	r3, #8
 801106c:	9303      	str	r3, [sp, #12]
 801106e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011070:	443b      	add	r3, r7
 8011072:	9309      	str	r3, [sp, #36]	; 0x24
 8011074:	e768      	b.n	8010f48 <_vfiprintf_r+0x78>
 8011076:	fb0c 3202 	mla	r2, ip, r2, r3
 801107a:	460c      	mov	r4, r1
 801107c:	2001      	movs	r0, #1
 801107e:	e7a6      	b.n	8010fce <_vfiprintf_r+0xfe>
 8011080:	2300      	movs	r3, #0
 8011082:	3401      	adds	r4, #1
 8011084:	9305      	str	r3, [sp, #20]
 8011086:	4619      	mov	r1, r3
 8011088:	f04f 0c0a 	mov.w	ip, #10
 801108c:	4620      	mov	r0, r4
 801108e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011092:	3a30      	subs	r2, #48	; 0x30
 8011094:	2a09      	cmp	r2, #9
 8011096:	d903      	bls.n	80110a0 <_vfiprintf_r+0x1d0>
 8011098:	2b00      	cmp	r3, #0
 801109a:	d0c6      	beq.n	801102a <_vfiprintf_r+0x15a>
 801109c:	9105      	str	r1, [sp, #20]
 801109e:	e7c4      	b.n	801102a <_vfiprintf_r+0x15a>
 80110a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80110a4:	4604      	mov	r4, r0
 80110a6:	2301      	movs	r3, #1
 80110a8:	e7f0      	b.n	801108c <_vfiprintf_r+0x1bc>
 80110aa:	ab03      	add	r3, sp, #12
 80110ac:	9300      	str	r3, [sp, #0]
 80110ae:	462a      	mov	r2, r5
 80110b0:	4b12      	ldr	r3, [pc, #72]	; (80110fc <_vfiprintf_r+0x22c>)
 80110b2:	a904      	add	r1, sp, #16
 80110b4:	4630      	mov	r0, r6
 80110b6:	f7fd fbc1 	bl	800e83c <_printf_float>
 80110ba:	4607      	mov	r7, r0
 80110bc:	1c78      	adds	r0, r7, #1
 80110be:	d1d6      	bne.n	801106e <_vfiprintf_r+0x19e>
 80110c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80110c2:	07d9      	lsls	r1, r3, #31
 80110c4:	d405      	bmi.n	80110d2 <_vfiprintf_r+0x202>
 80110c6:	89ab      	ldrh	r3, [r5, #12]
 80110c8:	059a      	lsls	r2, r3, #22
 80110ca:	d402      	bmi.n	80110d2 <_vfiprintf_r+0x202>
 80110cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80110ce:	f7fe fa78 	bl	800f5c2 <__retarget_lock_release_recursive>
 80110d2:	89ab      	ldrh	r3, [r5, #12]
 80110d4:	065b      	lsls	r3, r3, #25
 80110d6:	f53f af1d 	bmi.w	8010f14 <_vfiprintf_r+0x44>
 80110da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80110dc:	e71c      	b.n	8010f18 <_vfiprintf_r+0x48>
 80110de:	ab03      	add	r3, sp, #12
 80110e0:	9300      	str	r3, [sp, #0]
 80110e2:	462a      	mov	r2, r5
 80110e4:	4b05      	ldr	r3, [pc, #20]	; (80110fc <_vfiprintf_r+0x22c>)
 80110e6:	a904      	add	r1, sp, #16
 80110e8:	4630      	mov	r0, r6
 80110ea:	f7fd fe4b 	bl	800ed84 <_printf_i>
 80110ee:	e7e4      	b.n	80110ba <_vfiprintf_r+0x1ea>
 80110f0:	080121b4 	.word	0x080121b4
 80110f4:	080121be 	.word	0x080121be
 80110f8:	0800e83d 	.word	0x0800e83d
 80110fc:	08010eab 	.word	0x08010eab
 8011100:	080121ba 	.word	0x080121ba

08011104 <__sflush_r>:
 8011104:	898a      	ldrh	r2, [r1, #12]
 8011106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801110a:	4605      	mov	r5, r0
 801110c:	0710      	lsls	r0, r2, #28
 801110e:	460c      	mov	r4, r1
 8011110:	d458      	bmi.n	80111c4 <__sflush_r+0xc0>
 8011112:	684b      	ldr	r3, [r1, #4]
 8011114:	2b00      	cmp	r3, #0
 8011116:	dc05      	bgt.n	8011124 <__sflush_r+0x20>
 8011118:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801111a:	2b00      	cmp	r3, #0
 801111c:	dc02      	bgt.n	8011124 <__sflush_r+0x20>
 801111e:	2000      	movs	r0, #0
 8011120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011124:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011126:	2e00      	cmp	r6, #0
 8011128:	d0f9      	beq.n	801111e <__sflush_r+0x1a>
 801112a:	2300      	movs	r3, #0
 801112c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011130:	682f      	ldr	r7, [r5, #0]
 8011132:	6a21      	ldr	r1, [r4, #32]
 8011134:	602b      	str	r3, [r5, #0]
 8011136:	d032      	beq.n	801119e <__sflush_r+0x9a>
 8011138:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801113a:	89a3      	ldrh	r3, [r4, #12]
 801113c:	075a      	lsls	r2, r3, #29
 801113e:	d505      	bpl.n	801114c <__sflush_r+0x48>
 8011140:	6863      	ldr	r3, [r4, #4]
 8011142:	1ac0      	subs	r0, r0, r3
 8011144:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011146:	b10b      	cbz	r3, 801114c <__sflush_r+0x48>
 8011148:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801114a:	1ac0      	subs	r0, r0, r3
 801114c:	2300      	movs	r3, #0
 801114e:	4602      	mov	r2, r0
 8011150:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011152:	6a21      	ldr	r1, [r4, #32]
 8011154:	4628      	mov	r0, r5
 8011156:	47b0      	blx	r6
 8011158:	1c43      	adds	r3, r0, #1
 801115a:	89a3      	ldrh	r3, [r4, #12]
 801115c:	d106      	bne.n	801116c <__sflush_r+0x68>
 801115e:	6829      	ldr	r1, [r5, #0]
 8011160:	291d      	cmp	r1, #29
 8011162:	d82b      	bhi.n	80111bc <__sflush_r+0xb8>
 8011164:	4a29      	ldr	r2, [pc, #164]	; (801120c <__sflush_r+0x108>)
 8011166:	410a      	asrs	r2, r1
 8011168:	07d6      	lsls	r6, r2, #31
 801116a:	d427      	bmi.n	80111bc <__sflush_r+0xb8>
 801116c:	2200      	movs	r2, #0
 801116e:	6062      	str	r2, [r4, #4]
 8011170:	04d9      	lsls	r1, r3, #19
 8011172:	6922      	ldr	r2, [r4, #16]
 8011174:	6022      	str	r2, [r4, #0]
 8011176:	d504      	bpl.n	8011182 <__sflush_r+0x7e>
 8011178:	1c42      	adds	r2, r0, #1
 801117a:	d101      	bne.n	8011180 <__sflush_r+0x7c>
 801117c:	682b      	ldr	r3, [r5, #0]
 801117e:	b903      	cbnz	r3, 8011182 <__sflush_r+0x7e>
 8011180:	6560      	str	r0, [r4, #84]	; 0x54
 8011182:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011184:	602f      	str	r7, [r5, #0]
 8011186:	2900      	cmp	r1, #0
 8011188:	d0c9      	beq.n	801111e <__sflush_r+0x1a>
 801118a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801118e:	4299      	cmp	r1, r3
 8011190:	d002      	beq.n	8011198 <__sflush_r+0x94>
 8011192:	4628      	mov	r0, r5
 8011194:	f7ff f89e 	bl	80102d4 <_free_r>
 8011198:	2000      	movs	r0, #0
 801119a:	6360      	str	r0, [r4, #52]	; 0x34
 801119c:	e7c0      	b.n	8011120 <__sflush_r+0x1c>
 801119e:	2301      	movs	r3, #1
 80111a0:	4628      	mov	r0, r5
 80111a2:	47b0      	blx	r6
 80111a4:	1c41      	adds	r1, r0, #1
 80111a6:	d1c8      	bne.n	801113a <__sflush_r+0x36>
 80111a8:	682b      	ldr	r3, [r5, #0]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d0c5      	beq.n	801113a <__sflush_r+0x36>
 80111ae:	2b1d      	cmp	r3, #29
 80111b0:	d001      	beq.n	80111b6 <__sflush_r+0xb2>
 80111b2:	2b16      	cmp	r3, #22
 80111b4:	d101      	bne.n	80111ba <__sflush_r+0xb6>
 80111b6:	602f      	str	r7, [r5, #0]
 80111b8:	e7b1      	b.n	801111e <__sflush_r+0x1a>
 80111ba:	89a3      	ldrh	r3, [r4, #12]
 80111bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80111c0:	81a3      	strh	r3, [r4, #12]
 80111c2:	e7ad      	b.n	8011120 <__sflush_r+0x1c>
 80111c4:	690f      	ldr	r7, [r1, #16]
 80111c6:	2f00      	cmp	r7, #0
 80111c8:	d0a9      	beq.n	801111e <__sflush_r+0x1a>
 80111ca:	0793      	lsls	r3, r2, #30
 80111cc:	680e      	ldr	r6, [r1, #0]
 80111ce:	bf08      	it	eq
 80111d0:	694b      	ldreq	r3, [r1, #20]
 80111d2:	600f      	str	r7, [r1, #0]
 80111d4:	bf18      	it	ne
 80111d6:	2300      	movne	r3, #0
 80111d8:	eba6 0807 	sub.w	r8, r6, r7
 80111dc:	608b      	str	r3, [r1, #8]
 80111de:	f1b8 0f00 	cmp.w	r8, #0
 80111e2:	dd9c      	ble.n	801111e <__sflush_r+0x1a>
 80111e4:	6a21      	ldr	r1, [r4, #32]
 80111e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80111e8:	4643      	mov	r3, r8
 80111ea:	463a      	mov	r2, r7
 80111ec:	4628      	mov	r0, r5
 80111ee:	47b0      	blx	r6
 80111f0:	2800      	cmp	r0, #0
 80111f2:	dc06      	bgt.n	8011202 <__sflush_r+0xfe>
 80111f4:	89a3      	ldrh	r3, [r4, #12]
 80111f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80111fa:	81a3      	strh	r3, [r4, #12]
 80111fc:	f04f 30ff 	mov.w	r0, #4294967295
 8011200:	e78e      	b.n	8011120 <__sflush_r+0x1c>
 8011202:	4407      	add	r7, r0
 8011204:	eba8 0800 	sub.w	r8, r8, r0
 8011208:	e7e9      	b.n	80111de <__sflush_r+0xda>
 801120a:	bf00      	nop
 801120c:	dfbffffe 	.word	0xdfbffffe

08011210 <_fflush_r>:
 8011210:	b538      	push	{r3, r4, r5, lr}
 8011212:	690b      	ldr	r3, [r1, #16]
 8011214:	4605      	mov	r5, r0
 8011216:	460c      	mov	r4, r1
 8011218:	b913      	cbnz	r3, 8011220 <_fflush_r+0x10>
 801121a:	2500      	movs	r5, #0
 801121c:	4628      	mov	r0, r5
 801121e:	bd38      	pop	{r3, r4, r5, pc}
 8011220:	b118      	cbz	r0, 801122a <_fflush_r+0x1a>
 8011222:	6a03      	ldr	r3, [r0, #32]
 8011224:	b90b      	cbnz	r3, 801122a <_fflush_r+0x1a>
 8011226:	f7fd ff49 	bl	800f0bc <__sinit>
 801122a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d0f3      	beq.n	801121a <_fflush_r+0xa>
 8011232:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011234:	07d0      	lsls	r0, r2, #31
 8011236:	d404      	bmi.n	8011242 <_fflush_r+0x32>
 8011238:	0599      	lsls	r1, r3, #22
 801123a:	d402      	bmi.n	8011242 <_fflush_r+0x32>
 801123c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801123e:	f7fe f9bf 	bl	800f5c0 <__retarget_lock_acquire_recursive>
 8011242:	4628      	mov	r0, r5
 8011244:	4621      	mov	r1, r4
 8011246:	f7ff ff5d 	bl	8011104 <__sflush_r>
 801124a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801124c:	07da      	lsls	r2, r3, #31
 801124e:	4605      	mov	r5, r0
 8011250:	d4e4      	bmi.n	801121c <_fflush_r+0xc>
 8011252:	89a3      	ldrh	r3, [r4, #12]
 8011254:	059b      	lsls	r3, r3, #22
 8011256:	d4e1      	bmi.n	801121c <_fflush_r+0xc>
 8011258:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801125a:	f7fe f9b2 	bl	800f5c2 <__retarget_lock_release_recursive>
 801125e:	e7dd      	b.n	801121c <_fflush_r+0xc>

08011260 <__swhatbuf_r>:
 8011260:	b570      	push	{r4, r5, r6, lr}
 8011262:	460c      	mov	r4, r1
 8011264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011268:	2900      	cmp	r1, #0
 801126a:	b096      	sub	sp, #88	; 0x58
 801126c:	4615      	mov	r5, r2
 801126e:	461e      	mov	r6, r3
 8011270:	da0d      	bge.n	801128e <__swhatbuf_r+0x2e>
 8011272:	89a3      	ldrh	r3, [r4, #12]
 8011274:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011278:	f04f 0100 	mov.w	r1, #0
 801127c:	bf0c      	ite	eq
 801127e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011282:	2340      	movne	r3, #64	; 0x40
 8011284:	2000      	movs	r0, #0
 8011286:	6031      	str	r1, [r6, #0]
 8011288:	602b      	str	r3, [r5, #0]
 801128a:	b016      	add	sp, #88	; 0x58
 801128c:	bd70      	pop	{r4, r5, r6, pc}
 801128e:	466a      	mov	r2, sp
 8011290:	f000 f862 	bl	8011358 <_fstat_r>
 8011294:	2800      	cmp	r0, #0
 8011296:	dbec      	blt.n	8011272 <__swhatbuf_r+0x12>
 8011298:	9901      	ldr	r1, [sp, #4]
 801129a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801129e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80112a2:	4259      	negs	r1, r3
 80112a4:	4159      	adcs	r1, r3
 80112a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80112aa:	e7eb      	b.n	8011284 <__swhatbuf_r+0x24>

080112ac <__smakebuf_r>:
 80112ac:	898b      	ldrh	r3, [r1, #12]
 80112ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80112b0:	079d      	lsls	r5, r3, #30
 80112b2:	4606      	mov	r6, r0
 80112b4:	460c      	mov	r4, r1
 80112b6:	d507      	bpl.n	80112c8 <__smakebuf_r+0x1c>
 80112b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80112bc:	6023      	str	r3, [r4, #0]
 80112be:	6123      	str	r3, [r4, #16]
 80112c0:	2301      	movs	r3, #1
 80112c2:	6163      	str	r3, [r4, #20]
 80112c4:	b002      	add	sp, #8
 80112c6:	bd70      	pop	{r4, r5, r6, pc}
 80112c8:	ab01      	add	r3, sp, #4
 80112ca:	466a      	mov	r2, sp
 80112cc:	f7ff ffc8 	bl	8011260 <__swhatbuf_r>
 80112d0:	9900      	ldr	r1, [sp, #0]
 80112d2:	4605      	mov	r5, r0
 80112d4:	4630      	mov	r0, r6
 80112d6:	f7ff f871 	bl	80103bc <_malloc_r>
 80112da:	b948      	cbnz	r0, 80112f0 <__smakebuf_r+0x44>
 80112dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112e0:	059a      	lsls	r2, r3, #22
 80112e2:	d4ef      	bmi.n	80112c4 <__smakebuf_r+0x18>
 80112e4:	f023 0303 	bic.w	r3, r3, #3
 80112e8:	f043 0302 	orr.w	r3, r3, #2
 80112ec:	81a3      	strh	r3, [r4, #12]
 80112ee:	e7e3      	b.n	80112b8 <__smakebuf_r+0xc>
 80112f0:	89a3      	ldrh	r3, [r4, #12]
 80112f2:	6020      	str	r0, [r4, #0]
 80112f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112f8:	81a3      	strh	r3, [r4, #12]
 80112fa:	9b00      	ldr	r3, [sp, #0]
 80112fc:	6163      	str	r3, [r4, #20]
 80112fe:	9b01      	ldr	r3, [sp, #4]
 8011300:	6120      	str	r0, [r4, #16]
 8011302:	b15b      	cbz	r3, 801131c <__smakebuf_r+0x70>
 8011304:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011308:	4630      	mov	r0, r6
 801130a:	f000 f837 	bl	801137c <_isatty_r>
 801130e:	b128      	cbz	r0, 801131c <__smakebuf_r+0x70>
 8011310:	89a3      	ldrh	r3, [r4, #12]
 8011312:	f023 0303 	bic.w	r3, r3, #3
 8011316:	f043 0301 	orr.w	r3, r3, #1
 801131a:	81a3      	strh	r3, [r4, #12]
 801131c:	89a3      	ldrh	r3, [r4, #12]
 801131e:	431d      	orrs	r5, r3
 8011320:	81a5      	strh	r5, [r4, #12]
 8011322:	e7cf      	b.n	80112c4 <__smakebuf_r+0x18>

08011324 <memmove>:
 8011324:	4288      	cmp	r0, r1
 8011326:	b510      	push	{r4, lr}
 8011328:	eb01 0402 	add.w	r4, r1, r2
 801132c:	d902      	bls.n	8011334 <memmove+0x10>
 801132e:	4284      	cmp	r4, r0
 8011330:	4623      	mov	r3, r4
 8011332:	d807      	bhi.n	8011344 <memmove+0x20>
 8011334:	1e43      	subs	r3, r0, #1
 8011336:	42a1      	cmp	r1, r4
 8011338:	d008      	beq.n	801134c <memmove+0x28>
 801133a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801133e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011342:	e7f8      	b.n	8011336 <memmove+0x12>
 8011344:	4402      	add	r2, r0
 8011346:	4601      	mov	r1, r0
 8011348:	428a      	cmp	r2, r1
 801134a:	d100      	bne.n	801134e <memmove+0x2a>
 801134c:	bd10      	pop	{r4, pc}
 801134e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011352:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011356:	e7f7      	b.n	8011348 <memmove+0x24>

08011358 <_fstat_r>:
 8011358:	b538      	push	{r3, r4, r5, lr}
 801135a:	4d07      	ldr	r5, [pc, #28]	; (8011378 <_fstat_r+0x20>)
 801135c:	2300      	movs	r3, #0
 801135e:	4604      	mov	r4, r0
 8011360:	4608      	mov	r0, r1
 8011362:	4611      	mov	r1, r2
 8011364:	602b      	str	r3, [r5, #0]
 8011366:	f7f2 f8c2 	bl	80034ee <_fstat>
 801136a:	1c43      	adds	r3, r0, #1
 801136c:	d102      	bne.n	8011374 <_fstat_r+0x1c>
 801136e:	682b      	ldr	r3, [r5, #0]
 8011370:	b103      	cbz	r3, 8011374 <_fstat_r+0x1c>
 8011372:	6023      	str	r3, [r4, #0]
 8011374:	bd38      	pop	{r3, r4, r5, pc}
 8011376:	bf00      	nop
 8011378:	20009ffc 	.word	0x20009ffc

0801137c <_isatty_r>:
 801137c:	b538      	push	{r3, r4, r5, lr}
 801137e:	4d06      	ldr	r5, [pc, #24]	; (8011398 <_isatty_r+0x1c>)
 8011380:	2300      	movs	r3, #0
 8011382:	4604      	mov	r4, r0
 8011384:	4608      	mov	r0, r1
 8011386:	602b      	str	r3, [r5, #0]
 8011388:	f7f2 f8c1 	bl	800350e <_isatty>
 801138c:	1c43      	adds	r3, r0, #1
 801138e:	d102      	bne.n	8011396 <_isatty_r+0x1a>
 8011390:	682b      	ldr	r3, [r5, #0]
 8011392:	b103      	cbz	r3, 8011396 <_isatty_r+0x1a>
 8011394:	6023      	str	r3, [r4, #0]
 8011396:	bd38      	pop	{r3, r4, r5, pc}
 8011398:	20009ffc 	.word	0x20009ffc

0801139c <_sbrk_r>:
 801139c:	b538      	push	{r3, r4, r5, lr}
 801139e:	4d06      	ldr	r5, [pc, #24]	; (80113b8 <_sbrk_r+0x1c>)
 80113a0:	2300      	movs	r3, #0
 80113a2:	4604      	mov	r4, r0
 80113a4:	4608      	mov	r0, r1
 80113a6:	602b      	str	r3, [r5, #0]
 80113a8:	f7f2 f8ca 	bl	8003540 <_sbrk>
 80113ac:	1c43      	adds	r3, r0, #1
 80113ae:	d102      	bne.n	80113b6 <_sbrk_r+0x1a>
 80113b0:	682b      	ldr	r3, [r5, #0]
 80113b2:	b103      	cbz	r3, 80113b6 <_sbrk_r+0x1a>
 80113b4:	6023      	str	r3, [r4, #0]
 80113b6:	bd38      	pop	{r3, r4, r5, pc}
 80113b8:	20009ffc 	.word	0x20009ffc

080113bc <__assert_func>:
 80113bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80113be:	4614      	mov	r4, r2
 80113c0:	461a      	mov	r2, r3
 80113c2:	4b09      	ldr	r3, [pc, #36]	; (80113e8 <__assert_func+0x2c>)
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	4605      	mov	r5, r0
 80113c8:	68d8      	ldr	r0, [r3, #12]
 80113ca:	b14c      	cbz	r4, 80113e0 <__assert_func+0x24>
 80113cc:	4b07      	ldr	r3, [pc, #28]	; (80113ec <__assert_func+0x30>)
 80113ce:	9100      	str	r1, [sp, #0]
 80113d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80113d4:	4906      	ldr	r1, [pc, #24]	; (80113f0 <__assert_func+0x34>)
 80113d6:	462b      	mov	r3, r5
 80113d8:	f000 f872 	bl	80114c0 <fiprintf>
 80113dc:	f000 f882 	bl	80114e4 <abort>
 80113e0:	4b04      	ldr	r3, [pc, #16]	; (80113f4 <__assert_func+0x38>)
 80113e2:	461c      	mov	r4, r3
 80113e4:	e7f3      	b.n	80113ce <__assert_func+0x12>
 80113e6:	bf00      	nop
 80113e8:	200000a0 	.word	0x200000a0
 80113ec:	080121cf 	.word	0x080121cf
 80113f0:	080121dc 	.word	0x080121dc
 80113f4:	0801220a 	.word	0x0801220a

080113f8 <_calloc_r>:
 80113f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80113fa:	fba1 2402 	umull	r2, r4, r1, r2
 80113fe:	b94c      	cbnz	r4, 8011414 <_calloc_r+0x1c>
 8011400:	4611      	mov	r1, r2
 8011402:	9201      	str	r2, [sp, #4]
 8011404:	f7fe ffda 	bl	80103bc <_malloc_r>
 8011408:	9a01      	ldr	r2, [sp, #4]
 801140a:	4605      	mov	r5, r0
 801140c:	b930      	cbnz	r0, 801141c <_calloc_r+0x24>
 801140e:	4628      	mov	r0, r5
 8011410:	b003      	add	sp, #12
 8011412:	bd30      	pop	{r4, r5, pc}
 8011414:	220c      	movs	r2, #12
 8011416:	6002      	str	r2, [r0, #0]
 8011418:	2500      	movs	r5, #0
 801141a:	e7f8      	b.n	801140e <_calloc_r+0x16>
 801141c:	4621      	mov	r1, r4
 801141e:	f7fd ffe9 	bl	800f3f4 <memset>
 8011422:	e7f4      	b.n	801140e <_calloc_r+0x16>

08011424 <__ascii_mbtowc>:
 8011424:	b082      	sub	sp, #8
 8011426:	b901      	cbnz	r1, 801142a <__ascii_mbtowc+0x6>
 8011428:	a901      	add	r1, sp, #4
 801142a:	b142      	cbz	r2, 801143e <__ascii_mbtowc+0x1a>
 801142c:	b14b      	cbz	r3, 8011442 <__ascii_mbtowc+0x1e>
 801142e:	7813      	ldrb	r3, [r2, #0]
 8011430:	600b      	str	r3, [r1, #0]
 8011432:	7812      	ldrb	r2, [r2, #0]
 8011434:	1e10      	subs	r0, r2, #0
 8011436:	bf18      	it	ne
 8011438:	2001      	movne	r0, #1
 801143a:	b002      	add	sp, #8
 801143c:	4770      	bx	lr
 801143e:	4610      	mov	r0, r2
 8011440:	e7fb      	b.n	801143a <__ascii_mbtowc+0x16>
 8011442:	f06f 0001 	mvn.w	r0, #1
 8011446:	e7f8      	b.n	801143a <__ascii_mbtowc+0x16>

08011448 <_realloc_r>:
 8011448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801144c:	4680      	mov	r8, r0
 801144e:	4614      	mov	r4, r2
 8011450:	460e      	mov	r6, r1
 8011452:	b921      	cbnz	r1, 801145e <_realloc_r+0x16>
 8011454:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011458:	4611      	mov	r1, r2
 801145a:	f7fe bfaf 	b.w	80103bc <_malloc_r>
 801145e:	b92a      	cbnz	r2, 801146c <_realloc_r+0x24>
 8011460:	f7fe ff38 	bl	80102d4 <_free_r>
 8011464:	4625      	mov	r5, r4
 8011466:	4628      	mov	r0, r5
 8011468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801146c:	f000 f841 	bl	80114f2 <_malloc_usable_size_r>
 8011470:	4284      	cmp	r4, r0
 8011472:	4607      	mov	r7, r0
 8011474:	d802      	bhi.n	801147c <_realloc_r+0x34>
 8011476:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801147a:	d812      	bhi.n	80114a2 <_realloc_r+0x5a>
 801147c:	4621      	mov	r1, r4
 801147e:	4640      	mov	r0, r8
 8011480:	f7fe ff9c 	bl	80103bc <_malloc_r>
 8011484:	4605      	mov	r5, r0
 8011486:	2800      	cmp	r0, #0
 8011488:	d0ed      	beq.n	8011466 <_realloc_r+0x1e>
 801148a:	42bc      	cmp	r4, r7
 801148c:	4622      	mov	r2, r4
 801148e:	4631      	mov	r1, r6
 8011490:	bf28      	it	cs
 8011492:	463a      	movcs	r2, r7
 8011494:	f7fe f896 	bl	800f5c4 <memcpy>
 8011498:	4631      	mov	r1, r6
 801149a:	4640      	mov	r0, r8
 801149c:	f7fe ff1a 	bl	80102d4 <_free_r>
 80114a0:	e7e1      	b.n	8011466 <_realloc_r+0x1e>
 80114a2:	4635      	mov	r5, r6
 80114a4:	e7df      	b.n	8011466 <_realloc_r+0x1e>

080114a6 <__ascii_wctomb>:
 80114a6:	b149      	cbz	r1, 80114bc <__ascii_wctomb+0x16>
 80114a8:	2aff      	cmp	r2, #255	; 0xff
 80114aa:	bf85      	ittet	hi
 80114ac:	238a      	movhi	r3, #138	; 0x8a
 80114ae:	6003      	strhi	r3, [r0, #0]
 80114b0:	700a      	strbls	r2, [r1, #0]
 80114b2:	f04f 30ff 	movhi.w	r0, #4294967295
 80114b6:	bf98      	it	ls
 80114b8:	2001      	movls	r0, #1
 80114ba:	4770      	bx	lr
 80114bc:	4608      	mov	r0, r1
 80114be:	4770      	bx	lr

080114c0 <fiprintf>:
 80114c0:	b40e      	push	{r1, r2, r3}
 80114c2:	b503      	push	{r0, r1, lr}
 80114c4:	4601      	mov	r1, r0
 80114c6:	ab03      	add	r3, sp, #12
 80114c8:	4805      	ldr	r0, [pc, #20]	; (80114e0 <fiprintf+0x20>)
 80114ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80114ce:	6800      	ldr	r0, [r0, #0]
 80114d0:	9301      	str	r3, [sp, #4]
 80114d2:	f7ff fcfd 	bl	8010ed0 <_vfiprintf_r>
 80114d6:	b002      	add	sp, #8
 80114d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80114dc:	b003      	add	sp, #12
 80114de:	4770      	bx	lr
 80114e0:	200000a0 	.word	0x200000a0

080114e4 <abort>:
 80114e4:	b508      	push	{r3, lr}
 80114e6:	2006      	movs	r0, #6
 80114e8:	f000 f834 	bl	8011554 <raise>
 80114ec:	2001      	movs	r0, #1
 80114ee:	f7f1 ffaf 	bl	8003450 <_exit>

080114f2 <_malloc_usable_size_r>:
 80114f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80114f6:	1f18      	subs	r0, r3, #4
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	bfbc      	itt	lt
 80114fc:	580b      	ldrlt	r3, [r1, r0]
 80114fe:	18c0      	addlt	r0, r0, r3
 8011500:	4770      	bx	lr

08011502 <_raise_r>:
 8011502:	291f      	cmp	r1, #31
 8011504:	b538      	push	{r3, r4, r5, lr}
 8011506:	4604      	mov	r4, r0
 8011508:	460d      	mov	r5, r1
 801150a:	d904      	bls.n	8011516 <_raise_r+0x14>
 801150c:	2316      	movs	r3, #22
 801150e:	6003      	str	r3, [r0, #0]
 8011510:	f04f 30ff 	mov.w	r0, #4294967295
 8011514:	bd38      	pop	{r3, r4, r5, pc}
 8011516:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011518:	b112      	cbz	r2, 8011520 <_raise_r+0x1e>
 801151a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801151e:	b94b      	cbnz	r3, 8011534 <_raise_r+0x32>
 8011520:	4620      	mov	r0, r4
 8011522:	f000 f831 	bl	8011588 <_getpid_r>
 8011526:	462a      	mov	r2, r5
 8011528:	4601      	mov	r1, r0
 801152a:	4620      	mov	r0, r4
 801152c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011530:	f000 b818 	b.w	8011564 <_kill_r>
 8011534:	2b01      	cmp	r3, #1
 8011536:	d00a      	beq.n	801154e <_raise_r+0x4c>
 8011538:	1c59      	adds	r1, r3, #1
 801153a:	d103      	bne.n	8011544 <_raise_r+0x42>
 801153c:	2316      	movs	r3, #22
 801153e:	6003      	str	r3, [r0, #0]
 8011540:	2001      	movs	r0, #1
 8011542:	e7e7      	b.n	8011514 <_raise_r+0x12>
 8011544:	2400      	movs	r4, #0
 8011546:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801154a:	4628      	mov	r0, r5
 801154c:	4798      	blx	r3
 801154e:	2000      	movs	r0, #0
 8011550:	e7e0      	b.n	8011514 <_raise_r+0x12>
	...

08011554 <raise>:
 8011554:	4b02      	ldr	r3, [pc, #8]	; (8011560 <raise+0xc>)
 8011556:	4601      	mov	r1, r0
 8011558:	6818      	ldr	r0, [r3, #0]
 801155a:	f7ff bfd2 	b.w	8011502 <_raise_r>
 801155e:	bf00      	nop
 8011560:	200000a0 	.word	0x200000a0

08011564 <_kill_r>:
 8011564:	b538      	push	{r3, r4, r5, lr}
 8011566:	4d07      	ldr	r5, [pc, #28]	; (8011584 <_kill_r+0x20>)
 8011568:	2300      	movs	r3, #0
 801156a:	4604      	mov	r4, r0
 801156c:	4608      	mov	r0, r1
 801156e:	4611      	mov	r1, r2
 8011570:	602b      	str	r3, [r5, #0]
 8011572:	f7f1 ff5d 	bl	8003430 <_kill>
 8011576:	1c43      	adds	r3, r0, #1
 8011578:	d102      	bne.n	8011580 <_kill_r+0x1c>
 801157a:	682b      	ldr	r3, [r5, #0]
 801157c:	b103      	cbz	r3, 8011580 <_kill_r+0x1c>
 801157e:	6023      	str	r3, [r4, #0]
 8011580:	bd38      	pop	{r3, r4, r5, pc}
 8011582:	bf00      	nop
 8011584:	20009ffc 	.word	0x20009ffc

08011588 <_getpid_r>:
 8011588:	f7f1 bf4a 	b.w	8003420 <_getpid>

0801158c <_init>:
 801158c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801158e:	bf00      	nop
 8011590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011592:	bc08      	pop	{r3}
 8011594:	469e      	mov	lr, r3
 8011596:	4770      	bx	lr

08011598 <_fini>:
 8011598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801159a:	bf00      	nop
 801159c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801159e:	bc08      	pop	{r3}
 80115a0:	469e      	mov	lr, r3
 80115a2:	4770      	bx	lr
